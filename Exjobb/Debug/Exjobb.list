
Exjobb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d358  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  0800d410  0800d410  0001d410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc80  0800dc80  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc80  0800dc80  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc80  0800dc80  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc80  0800dc80  0001dc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc84  0800dc84  0001dc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800dc88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  200001e8  0800de70  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  0800de70  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a55a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003003  00000000  00000000  0003a76a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003d770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003eae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197b2  00000000  00000000  0003fd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018912  00000000  00000000  000594ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b381  00000000  00000000  00071dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010d17d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d7c  00000000  00000000  0010d1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e8 	.word	0x200001e8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800d3f8 	.word	0x0800d3f8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001ec 	.word	0x200001ec
 80000fc:	0800d3f8 	.word	0x0800d3f8

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	1c10      	adds	r0, r2, #0
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	1c19      	adds	r1, r3, #0
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fe6f 	bl	8002118 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fdb9 	bl	8001fbc <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fe61 	bl	8002118 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe57 	bl	8002118 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fddb 	bl	8002034 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fdd1 	bl	8002034 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	1c08      	adds	r0, r1, #0
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fb67 	bl	8000b7c <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 faeb 	bl	8000a94 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb59 	bl	8000b7c <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb4f 	bl	8000b7c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 faf9 	bl	8000ae4 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 faef 	bl	8000ae4 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_f2uiz>:
 8000514:	219e      	movs	r1, #158	; 0x9e
 8000516:	b510      	push	{r4, lr}
 8000518:	05c9      	lsls	r1, r1, #23
 800051a:	1c04      	adds	r4, r0, #0
 800051c:	f7ff fff0 	bl	8000500 <__aeabi_fcmpge>
 8000520:	2800      	cmp	r0, #0
 8000522:	d103      	bne.n	800052c <__aeabi_f2uiz+0x18>
 8000524:	1c20      	adds	r0, r4, #0
 8000526:	f000 fe55 	bl	80011d4 <__aeabi_f2iz>
 800052a:	bd10      	pop	{r4, pc}
 800052c:	219e      	movs	r1, #158	; 0x9e
 800052e:	1c20      	adds	r0, r4, #0
 8000530:	05c9      	lsls	r1, r1, #23
 8000532:	f000 fc87 	bl	8000e44 <__aeabi_fsub>
 8000536:	f000 fe4d 	bl	80011d4 <__aeabi_f2iz>
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	061b      	lsls	r3, r3, #24
 800053e:	469c      	mov	ip, r3
 8000540:	4460      	add	r0, ip
 8000542:	e7f2      	b.n	800052a <__aeabi_f2uiz+0x16>

08000544 <__aeabi_fadd>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4646      	mov	r6, r8
 8000548:	46d6      	mov	lr, sl
 800054a:	464f      	mov	r7, r9
 800054c:	024d      	lsls	r5, r1, #9
 800054e:	0242      	lsls	r2, r0, #9
 8000550:	b5c0      	push	{r6, r7, lr}
 8000552:	0a52      	lsrs	r2, r2, #9
 8000554:	0a6e      	lsrs	r6, r5, #9
 8000556:	0047      	lsls	r7, r0, #1
 8000558:	46b0      	mov	r8, r6
 800055a:	0e3f      	lsrs	r7, r7, #24
 800055c:	004e      	lsls	r6, r1, #1
 800055e:	0fc4      	lsrs	r4, r0, #31
 8000560:	00d0      	lsls	r0, r2, #3
 8000562:	4694      	mov	ip, r2
 8000564:	003b      	movs	r3, r7
 8000566:	4682      	mov	sl, r0
 8000568:	0e36      	lsrs	r6, r6, #24
 800056a:	0fc9      	lsrs	r1, r1, #31
 800056c:	09ad      	lsrs	r5, r5, #6
 800056e:	428c      	cmp	r4, r1
 8000570:	d06d      	beq.n	800064e <__aeabi_fadd+0x10a>
 8000572:	1bb8      	subs	r0, r7, r6
 8000574:	4681      	mov	r9, r0
 8000576:	2800      	cmp	r0, #0
 8000578:	dd4d      	ble.n	8000616 <__aeabi_fadd+0xd2>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x3c>
 800057e:	e088      	b.n	8000692 <__aeabi_fadd+0x14e>
 8000580:	2fff      	cmp	r7, #255	; 0xff
 8000582:	d05a      	beq.n	800063a <__aeabi_fadd+0xf6>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	04db      	lsls	r3, r3, #19
 8000588:	431d      	orrs	r5, r3
 800058a:	464b      	mov	r3, r9
 800058c:	2201      	movs	r2, #1
 800058e:	2b1b      	cmp	r3, #27
 8000590:	dc0a      	bgt.n	80005a8 <__aeabi_fadd+0x64>
 8000592:	002b      	movs	r3, r5
 8000594:	464a      	mov	r2, r9
 8000596:	4649      	mov	r1, r9
 8000598:	40d3      	lsrs	r3, r2
 800059a:	2220      	movs	r2, #32
 800059c:	1a52      	subs	r2, r2, r1
 800059e:	4095      	lsls	r5, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	1e55      	subs	r5, r2, #1
 80005a4:	41aa      	sbcs	r2, r5
 80005a6:	431a      	orrs	r2, r3
 80005a8:	4653      	mov	r3, sl
 80005aa:	1a9a      	subs	r2, r3, r2
 80005ac:	0153      	lsls	r3, r2, #5
 80005ae:	d400      	bmi.n	80005b2 <__aeabi_fadd+0x6e>
 80005b0:	e0b9      	b.n	8000726 <__aeabi_fadd+0x1e2>
 80005b2:	0192      	lsls	r2, r2, #6
 80005b4:	0996      	lsrs	r6, r2, #6
 80005b6:	0030      	movs	r0, r6
 80005b8:	f002 fd96 	bl	80030e8 <__clzsi2>
 80005bc:	3805      	subs	r0, #5
 80005be:	4086      	lsls	r6, r0
 80005c0:	4287      	cmp	r7, r0
 80005c2:	dd00      	ble.n	80005c6 <__aeabi_fadd+0x82>
 80005c4:	e0d4      	b.n	8000770 <__aeabi_fadd+0x22c>
 80005c6:	0033      	movs	r3, r6
 80005c8:	1bc7      	subs	r7, r0, r7
 80005ca:	2020      	movs	r0, #32
 80005cc:	3701      	adds	r7, #1
 80005ce:	40fb      	lsrs	r3, r7
 80005d0:	1bc7      	subs	r7, r0, r7
 80005d2:	40be      	lsls	r6, r7
 80005d4:	0032      	movs	r2, r6
 80005d6:	1e56      	subs	r6, r2, #1
 80005d8:	41b2      	sbcs	r2, r6
 80005da:	2700      	movs	r7, #0
 80005dc:	431a      	orrs	r2, r3
 80005de:	0753      	lsls	r3, r2, #29
 80005e0:	d004      	beq.n	80005ec <__aeabi_fadd+0xa8>
 80005e2:	230f      	movs	r3, #15
 80005e4:	4013      	ands	r3, r2
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d000      	beq.n	80005ec <__aeabi_fadd+0xa8>
 80005ea:	3204      	adds	r2, #4
 80005ec:	0153      	lsls	r3, r2, #5
 80005ee:	d400      	bmi.n	80005f2 <__aeabi_fadd+0xae>
 80005f0:	e09c      	b.n	800072c <__aeabi_fadd+0x1e8>
 80005f2:	1c7b      	adds	r3, r7, #1
 80005f4:	2ffe      	cmp	r7, #254	; 0xfe
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0xb6>
 80005f8:	e09a      	b.n	8000730 <__aeabi_fadd+0x1ec>
 80005fa:	0192      	lsls	r2, r2, #6
 80005fc:	0a52      	lsrs	r2, r2, #9
 80005fe:	4694      	mov	ip, r2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	05d8      	lsls	r0, r3, #23
 8000604:	4663      	mov	r3, ip
 8000606:	07e4      	lsls	r4, r4, #31
 8000608:	4318      	orrs	r0, r3
 800060a:	4320      	orrs	r0, r4
 800060c:	bce0      	pop	{r5, r6, r7}
 800060e:	46ba      	mov	sl, r7
 8000610:	46b1      	mov	r9, r6
 8000612:	46a8      	mov	r8, r5
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	2800      	cmp	r0, #0
 8000618:	d049      	beq.n	80006ae <__aeabi_fadd+0x16a>
 800061a:	1bf3      	subs	r3, r6, r7
 800061c:	2f00      	cmp	r7, #0
 800061e:	d000      	beq.n	8000622 <__aeabi_fadd+0xde>
 8000620:	e0b6      	b.n	8000790 <__aeabi_fadd+0x24c>
 8000622:	4652      	mov	r2, sl
 8000624:	2a00      	cmp	r2, #0
 8000626:	d060      	beq.n	80006ea <__aeabi_fadd+0x1a6>
 8000628:	3b01      	subs	r3, #1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_fadd+0xec>
 800062e:	e0fc      	b.n	800082a <__aeabi_fadd+0x2e6>
 8000630:	2eff      	cmp	r6, #255	; 0xff
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0xf2>
 8000634:	e0b4      	b.n	80007a0 <__aeabi_fadd+0x25c>
 8000636:	000c      	movs	r4, r1
 8000638:	4642      	mov	r2, r8
 800063a:	2a00      	cmp	r2, #0
 800063c:	d078      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4310      	orrs	r0, r2
 8000644:	0242      	lsls	r2, r0, #9
 8000646:	0a53      	lsrs	r3, r2, #9
 8000648:	469c      	mov	ip, r3
 800064a:	23ff      	movs	r3, #255	; 0xff
 800064c:	e7d9      	b.n	8000602 <__aeabi_fadd+0xbe>
 800064e:	1bb9      	subs	r1, r7, r6
 8000650:	2900      	cmp	r1, #0
 8000652:	dd71      	ble.n	8000738 <__aeabi_fadd+0x1f4>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d03f      	beq.n	80006d8 <__aeabi_fadd+0x194>
 8000658:	2fff      	cmp	r7, #255	; 0xff
 800065a:	d0ee      	beq.n	800063a <__aeabi_fadd+0xf6>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	04db      	lsls	r3, r3, #19
 8000660:	431d      	orrs	r5, r3
 8000662:	2201      	movs	r2, #1
 8000664:	291b      	cmp	r1, #27
 8000666:	dc07      	bgt.n	8000678 <__aeabi_fadd+0x134>
 8000668:	002a      	movs	r2, r5
 800066a:	2320      	movs	r3, #32
 800066c:	40ca      	lsrs	r2, r1
 800066e:	1a59      	subs	r1, r3, r1
 8000670:	408d      	lsls	r5, r1
 8000672:	1e6b      	subs	r3, r5, #1
 8000674:	419d      	sbcs	r5, r3
 8000676:	432a      	orrs	r2, r5
 8000678:	4452      	add	r2, sl
 800067a:	0153      	lsls	r3, r2, #5
 800067c:	d553      	bpl.n	8000726 <__aeabi_fadd+0x1e2>
 800067e:	3701      	adds	r7, #1
 8000680:	2fff      	cmp	r7, #255	; 0xff
 8000682:	d055      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 8000684:	2301      	movs	r3, #1
 8000686:	497b      	ldr	r1, [pc, #492]	; (8000874 <__aeabi_fadd+0x330>)
 8000688:	4013      	ands	r3, r2
 800068a:	0852      	lsrs	r2, r2, #1
 800068c:	400a      	ands	r2, r1
 800068e:	431a      	orrs	r2, r3
 8000690:	e7a5      	b.n	80005de <__aeabi_fadd+0x9a>
 8000692:	2d00      	cmp	r5, #0
 8000694:	d02c      	beq.n	80006f0 <__aeabi_fadd+0x1ac>
 8000696:	2301      	movs	r3, #1
 8000698:	425b      	negs	r3, r3
 800069a:	469c      	mov	ip, r3
 800069c:	44e1      	add	r9, ip
 800069e:	464b      	mov	r3, r9
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x162>
 80006a4:	e0ad      	b.n	8000802 <__aeabi_fadd+0x2be>
 80006a6:	2fff      	cmp	r7, #255	; 0xff
 80006a8:	d000      	beq.n	80006ac <__aeabi_fadd+0x168>
 80006aa:	e76e      	b.n	800058a <__aeabi_fadd+0x46>
 80006ac:	e7c5      	b.n	800063a <__aeabi_fadd+0xf6>
 80006ae:	20fe      	movs	r0, #254	; 0xfe
 80006b0:	1c7e      	adds	r6, r7, #1
 80006b2:	4230      	tst	r0, r6
 80006b4:	d160      	bne.n	8000778 <__aeabi_fadd+0x234>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d000      	beq.n	80006bc <__aeabi_fadd+0x178>
 80006ba:	e093      	b.n	80007e4 <__aeabi_fadd+0x2a0>
 80006bc:	4652      	mov	r2, sl
 80006be:	2a00      	cmp	r2, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0x180>
 80006c2:	e0b6      	b.n	8000832 <__aeabi_fadd+0x2ee>
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d09c      	beq.n	8000602 <__aeabi_fadd+0xbe>
 80006c8:	1b52      	subs	r2, r2, r5
 80006ca:	0150      	lsls	r0, r2, #5
 80006cc:	d400      	bmi.n	80006d0 <__aeabi_fadd+0x18c>
 80006ce:	e0c3      	b.n	8000858 <__aeabi_fadd+0x314>
 80006d0:	4653      	mov	r3, sl
 80006d2:	000c      	movs	r4, r1
 80006d4:	1aea      	subs	r2, r5, r3
 80006d6:	e782      	b.n	80005de <__aeabi_fadd+0x9a>
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d009      	beq.n	80006f0 <__aeabi_fadd+0x1ac>
 80006dc:	3901      	subs	r1, #1
 80006de:	2900      	cmp	r1, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0x1a0>
 80006e2:	e08b      	b.n	80007fc <__aeabi_fadd+0x2b8>
 80006e4:	2fff      	cmp	r7, #255	; 0xff
 80006e6:	d1bc      	bne.n	8000662 <__aeabi_fadd+0x11e>
 80006e8:	e7a7      	b.n	800063a <__aeabi_fadd+0xf6>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4642      	mov	r2, r8
 80006ee:	0037      	movs	r7, r6
 80006f0:	2fff      	cmp	r7, #255	; 0xff
 80006f2:	d0a2      	beq.n	800063a <__aeabi_fadd+0xf6>
 80006f4:	0252      	lsls	r2, r2, #9
 80006f6:	0a53      	lsrs	r3, r2, #9
 80006f8:	469c      	mov	ip, r3
 80006fa:	b2fb      	uxtb	r3, r7
 80006fc:	e781      	b.n	8000602 <__aeabi_fadd+0xbe>
 80006fe:	21fe      	movs	r1, #254	; 0xfe
 8000700:	3701      	adds	r7, #1
 8000702:	4239      	tst	r1, r7
 8000704:	d165      	bne.n	80007d2 <__aeabi_fadd+0x28e>
 8000706:	2b00      	cmp	r3, #0
 8000708:	d17e      	bne.n	8000808 <__aeabi_fadd+0x2c4>
 800070a:	2800      	cmp	r0, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x1cc>
 800070e:	e0aa      	b.n	8000866 <__aeabi_fadd+0x322>
 8000710:	2d00      	cmp	r5, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_fadd+0x1d2>
 8000714:	e775      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000716:	002a      	movs	r2, r5
 8000718:	4452      	add	r2, sl
 800071a:	2700      	movs	r7, #0
 800071c:	0153      	lsls	r3, r2, #5
 800071e:	d502      	bpl.n	8000726 <__aeabi_fadd+0x1e2>
 8000720:	4b55      	ldr	r3, [pc, #340]	; (8000878 <__aeabi_fadd+0x334>)
 8000722:	3701      	adds	r7, #1
 8000724:	401a      	ands	r2, r3
 8000726:	0753      	lsls	r3, r2, #29
 8000728:	d000      	beq.n	800072c <__aeabi_fadd+0x1e8>
 800072a:	e75a      	b.n	80005e2 <__aeabi_fadd+0x9e>
 800072c:	08d2      	lsrs	r2, r2, #3
 800072e:	e7df      	b.n	80006f0 <__aeabi_fadd+0x1ac>
 8000730:	2200      	movs	r2, #0
 8000732:	23ff      	movs	r3, #255	; 0xff
 8000734:	4694      	mov	ip, r2
 8000736:	e764      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000738:	2900      	cmp	r1, #0
 800073a:	d0e0      	beq.n	80006fe <__aeabi_fadd+0x1ba>
 800073c:	1bf3      	subs	r3, r6, r7
 800073e:	2f00      	cmp	r7, #0
 8000740:	d03e      	beq.n	80007c0 <__aeabi_fadd+0x27c>
 8000742:	2eff      	cmp	r6, #255	; 0xff
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x204>
 8000746:	e777      	b.n	8000638 <__aeabi_fadd+0xf4>
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0001      	movs	r1, r0
 800074c:	04d2      	lsls	r2, r2, #19
 800074e:	4311      	orrs	r1, r2
 8000750:	468a      	mov	sl, r1
 8000752:	2201      	movs	r2, #1
 8000754:	2b1b      	cmp	r3, #27
 8000756:	dc08      	bgt.n	800076a <__aeabi_fadd+0x226>
 8000758:	4652      	mov	r2, sl
 800075a:	2120      	movs	r1, #32
 800075c:	4650      	mov	r0, sl
 800075e:	40da      	lsrs	r2, r3
 8000760:	1acb      	subs	r3, r1, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	1e43      	subs	r3, r0, #1
 8000766:	4198      	sbcs	r0, r3
 8000768:	4302      	orrs	r2, r0
 800076a:	0037      	movs	r7, r6
 800076c:	1952      	adds	r2, r2, r5
 800076e:	e784      	b.n	800067a <__aeabi_fadd+0x136>
 8000770:	4a41      	ldr	r2, [pc, #260]	; (8000878 <__aeabi_fadd+0x334>)
 8000772:	1a3f      	subs	r7, r7, r0
 8000774:	4032      	ands	r2, r6
 8000776:	e732      	b.n	80005de <__aeabi_fadd+0x9a>
 8000778:	4653      	mov	r3, sl
 800077a:	1b5e      	subs	r6, r3, r5
 800077c:	0173      	lsls	r3, r6, #5
 800077e:	d42d      	bmi.n	80007dc <__aeabi_fadd+0x298>
 8000780:	2e00      	cmp	r6, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0x242>
 8000784:	e717      	b.n	80005b6 <__aeabi_fadd+0x72>
 8000786:	2200      	movs	r2, #0
 8000788:	2400      	movs	r4, #0
 800078a:	2300      	movs	r3, #0
 800078c:	4694      	mov	ip, r2
 800078e:	e738      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000790:	2eff      	cmp	r6, #255	; 0xff
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x252>
 8000794:	e74f      	b.n	8000636 <__aeabi_fadd+0xf2>
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	4650      	mov	r0, sl
 800079a:	04d2      	lsls	r2, r2, #19
 800079c:	4310      	orrs	r0, r2
 800079e:	4682      	mov	sl, r0
 80007a0:	2201      	movs	r2, #1
 80007a2:	2b1b      	cmp	r3, #27
 80007a4:	dc08      	bgt.n	80007b8 <__aeabi_fadd+0x274>
 80007a6:	4652      	mov	r2, sl
 80007a8:	2420      	movs	r4, #32
 80007aa:	4650      	mov	r0, sl
 80007ac:	40da      	lsrs	r2, r3
 80007ae:	1ae3      	subs	r3, r4, r3
 80007b0:	4098      	lsls	r0, r3
 80007b2:	1e43      	subs	r3, r0, #1
 80007b4:	4198      	sbcs	r0, r3
 80007b6:	4302      	orrs	r2, r0
 80007b8:	000c      	movs	r4, r1
 80007ba:	0037      	movs	r7, r6
 80007bc:	1aaa      	subs	r2, r5, r2
 80007be:	e6f5      	b.n	80005ac <__aeabi_fadd+0x68>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d093      	beq.n	80006ec <__aeabi_fadd+0x1a8>
 80007c4:	3b01      	subs	r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d04f      	beq.n	800086a <__aeabi_fadd+0x326>
 80007ca:	2eff      	cmp	r6, #255	; 0xff
 80007cc:	d1c1      	bne.n	8000752 <__aeabi_fadd+0x20e>
 80007ce:	4642      	mov	r2, r8
 80007d0:	e733      	b.n	800063a <__aeabi_fadd+0xf6>
 80007d2:	2fff      	cmp	r7, #255	; 0xff
 80007d4:	d0ac      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 80007d6:	4455      	add	r5, sl
 80007d8:	086a      	lsrs	r2, r5, #1
 80007da:	e7a4      	b.n	8000726 <__aeabi_fadd+0x1e2>
 80007dc:	4653      	mov	r3, sl
 80007de:	000c      	movs	r4, r1
 80007e0:	1aee      	subs	r6, r5, r3
 80007e2:	e6e8      	b.n	80005b6 <__aeabi_fadd+0x72>
 80007e4:	4653      	mov	r3, sl
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d128      	bne.n	800083c <__aeabi_fadd+0x2f8>
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fadd+0x2ac>
 80007ee:	e722      	b.n	8000636 <__aeabi_fadd+0xf2>
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	03db      	lsls	r3, r3, #15
 80007f4:	469c      	mov	ip, r3
 80007f6:	2400      	movs	r4, #0
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	e702      	b.n	8000602 <__aeabi_fadd+0xbe>
 80007fc:	002a      	movs	r2, r5
 80007fe:	4452      	add	r2, sl
 8000800:	e73b      	b.n	800067a <__aeabi_fadd+0x136>
 8000802:	4653      	mov	r3, sl
 8000804:	1b5a      	subs	r2, r3, r5
 8000806:	e6d1      	b.n	80005ac <__aeabi_fadd+0x68>
 8000808:	2800      	cmp	r0, #0
 800080a:	d100      	bne.n	800080e <__aeabi_fadd+0x2ca>
 800080c:	e714      	b.n	8000638 <__aeabi_fadd+0xf4>
 800080e:	2d00      	cmp	r5, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x2d0>
 8000812:	e712      	b.n	800063a <__aeabi_fadd+0xf6>
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	03db      	lsls	r3, r3, #15
 8000818:	421a      	tst	r2, r3
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x2da>
 800081c:	e70d      	b.n	800063a <__aeabi_fadd+0xf6>
 800081e:	4641      	mov	r1, r8
 8000820:	4219      	tst	r1, r3
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x2e2>
 8000824:	e709      	b.n	800063a <__aeabi_fadd+0xf6>
 8000826:	4642      	mov	r2, r8
 8000828:	e707      	b.n	800063a <__aeabi_fadd+0xf6>
 800082a:	000c      	movs	r4, r1
 800082c:	0037      	movs	r7, r6
 800082e:	1aaa      	subs	r2, r5, r2
 8000830:	e6bc      	b.n	80005ac <__aeabi_fadd+0x68>
 8000832:	2d00      	cmp	r5, #0
 8000834:	d013      	beq.n	800085e <__aeabi_fadd+0x31a>
 8000836:	000c      	movs	r4, r1
 8000838:	46c4      	mov	ip, r8
 800083a:	e6e2      	b.n	8000602 <__aeabi_fadd+0xbe>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x2fe>
 8000840:	e6fb      	b.n	800063a <__aeabi_fadd+0xf6>
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	03db      	lsls	r3, r3, #15
 8000846:	421a      	tst	r2, r3
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0x308>
 800084a:	e6f6      	b.n	800063a <__aeabi_fadd+0xf6>
 800084c:	4640      	mov	r0, r8
 800084e:	4218      	tst	r0, r3
 8000850:	d000      	beq.n	8000854 <__aeabi_fadd+0x310>
 8000852:	e6f2      	b.n	800063a <__aeabi_fadd+0xf6>
 8000854:	000c      	movs	r4, r1
 8000856:	e6ef      	b.n	8000638 <__aeabi_fadd+0xf4>
 8000858:	2a00      	cmp	r2, #0
 800085a:	d000      	beq.n	800085e <__aeabi_fadd+0x31a>
 800085c:	e763      	b.n	8000726 <__aeabi_fadd+0x1e2>
 800085e:	2200      	movs	r2, #0
 8000860:	2400      	movs	r4, #0
 8000862:	4694      	mov	ip, r2
 8000864:	e6cd      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000866:	46c4      	mov	ip, r8
 8000868:	e6cb      	b.n	8000602 <__aeabi_fadd+0xbe>
 800086a:	002a      	movs	r2, r5
 800086c:	0037      	movs	r7, r6
 800086e:	4452      	add	r2, sl
 8000870:	e703      	b.n	800067a <__aeabi_fadd+0x136>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	7dffffff 	.word	0x7dffffff
 8000878:	fbffffff 	.word	0xfbffffff

0800087c <__aeabi_fdiv>:
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	464f      	mov	r7, r9
 8000880:	4646      	mov	r6, r8
 8000882:	46d6      	mov	lr, sl
 8000884:	0245      	lsls	r5, r0, #9
 8000886:	b5c0      	push	{r6, r7, lr}
 8000888:	0047      	lsls	r7, r0, #1
 800088a:	1c0c      	adds	r4, r1, #0
 800088c:	0a6d      	lsrs	r5, r5, #9
 800088e:	0e3f      	lsrs	r7, r7, #24
 8000890:	0fc6      	lsrs	r6, r0, #31
 8000892:	2f00      	cmp	r7, #0
 8000894:	d066      	beq.n	8000964 <__aeabi_fdiv+0xe8>
 8000896:	2fff      	cmp	r7, #255	; 0xff
 8000898:	d06c      	beq.n	8000974 <__aeabi_fdiv+0xf8>
 800089a:	2300      	movs	r3, #0
 800089c:	00ea      	lsls	r2, r5, #3
 800089e:	2580      	movs	r5, #128	; 0x80
 80008a0:	4699      	mov	r9, r3
 80008a2:	469a      	mov	sl, r3
 80008a4:	04ed      	lsls	r5, r5, #19
 80008a6:	4315      	orrs	r5, r2
 80008a8:	3f7f      	subs	r7, #127	; 0x7f
 80008aa:	0260      	lsls	r0, r4, #9
 80008ac:	0061      	lsls	r1, r4, #1
 80008ae:	0a43      	lsrs	r3, r0, #9
 80008b0:	4698      	mov	r8, r3
 80008b2:	0e09      	lsrs	r1, r1, #24
 80008b4:	0fe4      	lsrs	r4, r4, #31
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d048      	beq.n	800094c <__aeabi_fdiv+0xd0>
 80008ba:	29ff      	cmp	r1, #255	; 0xff
 80008bc:	d010      	beq.n	80008e0 <__aeabi_fdiv+0x64>
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	00d8      	lsls	r0, r3, #3
 80008c2:	04d2      	lsls	r2, r2, #19
 80008c4:	4302      	orrs	r2, r0
 80008c6:	4690      	mov	r8, r2
 80008c8:	2000      	movs	r0, #0
 80008ca:	397f      	subs	r1, #127	; 0x7f
 80008cc:	464a      	mov	r2, r9
 80008ce:	0033      	movs	r3, r6
 80008d0:	1a7f      	subs	r7, r7, r1
 80008d2:	4302      	orrs	r2, r0
 80008d4:	496c      	ldr	r1, [pc, #432]	; (8000a88 <__aeabi_fdiv+0x20c>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	588a      	ldr	r2, [r1, r2]
 80008da:	4063      	eors	r3, r4
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4697      	mov	pc, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d16d      	bne.n	80009c0 <__aeabi_fdiv+0x144>
 80008e4:	2002      	movs	r0, #2
 80008e6:	3fff      	subs	r7, #255	; 0xff
 80008e8:	e033      	b.n	8000952 <__aeabi_fdiv+0xd6>
 80008ea:	2300      	movs	r3, #0
 80008ec:	4698      	mov	r8, r3
 80008ee:	0026      	movs	r6, r4
 80008f0:	4645      	mov	r5, r8
 80008f2:	4682      	mov	sl, r0
 80008f4:	4653      	mov	r3, sl
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fdiv+0x80>
 80008fa:	e07f      	b.n	80009fc <__aeabi_fdiv+0x180>
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d100      	bne.n	8000902 <__aeabi_fdiv+0x86>
 8000900:	e094      	b.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d017      	beq.n	8000936 <__aeabi_fdiv+0xba>
 8000906:	0038      	movs	r0, r7
 8000908:	307f      	adds	r0, #127	; 0x7f
 800090a:	2800      	cmp	r0, #0
 800090c:	dd5f      	ble.n	80009ce <__aeabi_fdiv+0x152>
 800090e:	076b      	lsls	r3, r5, #29
 8000910:	d004      	beq.n	800091c <__aeabi_fdiv+0xa0>
 8000912:	230f      	movs	r3, #15
 8000914:	402b      	ands	r3, r5
 8000916:	2b04      	cmp	r3, #4
 8000918:	d000      	beq.n	800091c <__aeabi_fdiv+0xa0>
 800091a:	3504      	adds	r5, #4
 800091c:	012b      	lsls	r3, r5, #4
 800091e:	d503      	bpl.n	8000928 <__aeabi_fdiv+0xac>
 8000920:	0038      	movs	r0, r7
 8000922:	4b5a      	ldr	r3, [pc, #360]	; (8000a8c <__aeabi_fdiv+0x210>)
 8000924:	3080      	adds	r0, #128	; 0x80
 8000926:	401d      	ands	r5, r3
 8000928:	28fe      	cmp	r0, #254	; 0xfe
 800092a:	dc67      	bgt.n	80009fc <__aeabi_fdiv+0x180>
 800092c:	01ad      	lsls	r5, r5, #6
 800092e:	0a6d      	lsrs	r5, r5, #9
 8000930:	b2c0      	uxtb	r0, r0
 8000932:	e002      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000934:	001e      	movs	r6, r3
 8000936:	2000      	movs	r0, #0
 8000938:	2500      	movs	r5, #0
 800093a:	05c0      	lsls	r0, r0, #23
 800093c:	4328      	orrs	r0, r5
 800093e:	07f6      	lsls	r6, r6, #31
 8000940:	4330      	orrs	r0, r6
 8000942:	bce0      	pop	{r5, r6, r7}
 8000944:	46ba      	mov	sl, r7
 8000946:	46b1      	mov	r9, r6
 8000948:	46a8      	mov	r8, r5
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	2b00      	cmp	r3, #0
 800094e:	d12b      	bne.n	80009a8 <__aeabi_fdiv+0x12c>
 8000950:	2001      	movs	r0, #1
 8000952:	464a      	mov	r2, r9
 8000954:	0033      	movs	r3, r6
 8000956:	494e      	ldr	r1, [pc, #312]	; (8000a90 <__aeabi_fdiv+0x214>)
 8000958:	4302      	orrs	r2, r0
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	588a      	ldr	r2, [r1, r2]
 800095e:	4063      	eors	r3, r4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4697      	mov	pc, r2
 8000964:	2d00      	cmp	r5, #0
 8000966:	d113      	bne.n	8000990 <__aeabi_fdiv+0x114>
 8000968:	2304      	movs	r3, #4
 800096a:	4699      	mov	r9, r3
 800096c:	3b03      	subs	r3, #3
 800096e:	2700      	movs	r7, #0
 8000970:	469a      	mov	sl, r3
 8000972:	e79a      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000974:	2d00      	cmp	r5, #0
 8000976:	d105      	bne.n	8000984 <__aeabi_fdiv+0x108>
 8000978:	2308      	movs	r3, #8
 800097a:	4699      	mov	r9, r3
 800097c:	3b06      	subs	r3, #6
 800097e:	27ff      	movs	r7, #255	; 0xff
 8000980:	469a      	mov	sl, r3
 8000982:	e792      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000984:	230c      	movs	r3, #12
 8000986:	4699      	mov	r9, r3
 8000988:	3b09      	subs	r3, #9
 800098a:	27ff      	movs	r7, #255	; 0xff
 800098c:	469a      	mov	sl, r3
 800098e:	e78c      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000990:	0028      	movs	r0, r5
 8000992:	f002 fba9 	bl	80030e8 <__clzsi2>
 8000996:	2776      	movs	r7, #118	; 0x76
 8000998:	1f43      	subs	r3, r0, #5
 800099a:	409d      	lsls	r5, r3
 800099c:	2300      	movs	r3, #0
 800099e:	427f      	negs	r7, r7
 80009a0:	4699      	mov	r9, r3
 80009a2:	469a      	mov	sl, r3
 80009a4:	1a3f      	subs	r7, r7, r0
 80009a6:	e780      	b.n	80008aa <__aeabi_fdiv+0x2e>
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 fb9d 	bl	80030e8 <__clzsi2>
 80009ae:	4642      	mov	r2, r8
 80009b0:	1f43      	subs	r3, r0, #5
 80009b2:	2176      	movs	r1, #118	; 0x76
 80009b4:	409a      	lsls	r2, r3
 80009b6:	4249      	negs	r1, r1
 80009b8:	1a09      	subs	r1, r1, r0
 80009ba:	4690      	mov	r8, r2
 80009bc:	2000      	movs	r0, #0
 80009be:	e785      	b.n	80008cc <__aeabi_fdiv+0x50>
 80009c0:	21ff      	movs	r1, #255	; 0xff
 80009c2:	2003      	movs	r0, #3
 80009c4:	e782      	b.n	80008cc <__aeabi_fdiv+0x50>
 80009c6:	001e      	movs	r6, r3
 80009c8:	20ff      	movs	r0, #255	; 0xff
 80009ca:	2500      	movs	r5, #0
 80009cc:	e7b5      	b.n	800093a <__aeabi_fdiv+0xbe>
 80009ce:	2301      	movs	r3, #1
 80009d0:	1a1b      	subs	r3, r3, r0
 80009d2:	2b1b      	cmp	r3, #27
 80009d4:	dcaf      	bgt.n	8000936 <__aeabi_fdiv+0xba>
 80009d6:	379e      	adds	r7, #158	; 0x9e
 80009d8:	0029      	movs	r1, r5
 80009da:	40bd      	lsls	r5, r7
 80009dc:	40d9      	lsrs	r1, r3
 80009de:	1e6a      	subs	r2, r5, #1
 80009e0:	4195      	sbcs	r5, r2
 80009e2:	430d      	orrs	r5, r1
 80009e4:	076b      	lsls	r3, r5, #29
 80009e6:	d004      	beq.n	80009f2 <__aeabi_fdiv+0x176>
 80009e8:	230f      	movs	r3, #15
 80009ea:	402b      	ands	r3, r5
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	d000      	beq.n	80009f2 <__aeabi_fdiv+0x176>
 80009f0:	3504      	adds	r5, #4
 80009f2:	016b      	lsls	r3, r5, #5
 80009f4:	d544      	bpl.n	8000a80 <__aeabi_fdiv+0x204>
 80009f6:	2001      	movs	r0, #1
 80009f8:	2500      	movs	r5, #0
 80009fa:	e79e      	b.n	800093a <__aeabi_fdiv+0xbe>
 80009fc:	20ff      	movs	r0, #255	; 0xff
 80009fe:	2500      	movs	r5, #0
 8000a00:	e79b      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a02:	2580      	movs	r5, #128	; 0x80
 8000a04:	2600      	movs	r6, #0
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	03ed      	lsls	r5, r5, #15
 8000a0a:	e796      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	4698      	mov	r8, r3
 8000a10:	2080      	movs	r0, #128	; 0x80
 8000a12:	03c0      	lsls	r0, r0, #15
 8000a14:	4205      	tst	r5, r0
 8000a16:	d009      	beq.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	4203      	tst	r3, r0
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	4305      	orrs	r5, r0
 8000a22:	026d      	lsls	r5, r5, #9
 8000a24:	0026      	movs	r6, r4
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	e786      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a2c:	2080      	movs	r0, #128	; 0x80
 8000a2e:	03c0      	lsls	r0, r0, #15
 8000a30:	4305      	orrs	r5, r0
 8000a32:	026d      	lsls	r5, r5, #9
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	0a6d      	lsrs	r5, r5, #9
 8000a38:	e77f      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	016a      	lsls	r2, r5, #5
 8000a3e:	0148      	lsls	r0, r1, #5
 8000a40:	4282      	cmp	r2, r0
 8000a42:	d219      	bcs.n	8000a78 <__aeabi_fdiv+0x1fc>
 8000a44:	211b      	movs	r1, #27
 8000a46:	2500      	movs	r5, #0
 8000a48:	3f01      	subs	r7, #1
 8000a4a:	2601      	movs	r6, #1
 8000a4c:	0014      	movs	r4, r2
 8000a4e:	006d      	lsls	r5, r5, #1
 8000a50:	0052      	lsls	r2, r2, #1
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	db01      	blt.n	8000a5a <__aeabi_fdiv+0x1de>
 8000a56:	4290      	cmp	r0, r2
 8000a58:	d801      	bhi.n	8000a5e <__aeabi_fdiv+0x1e2>
 8000a5a:	1a12      	subs	r2, r2, r0
 8000a5c:	4335      	orrs	r5, r6
 8000a5e:	3901      	subs	r1, #1
 8000a60:	2900      	cmp	r1, #0
 8000a62:	d1f3      	bne.n	8000a4c <__aeabi_fdiv+0x1d0>
 8000a64:	1e50      	subs	r0, r2, #1
 8000a66:	4182      	sbcs	r2, r0
 8000a68:	0038      	movs	r0, r7
 8000a6a:	307f      	adds	r0, #127	; 0x7f
 8000a6c:	001e      	movs	r6, r3
 8000a6e:	4315      	orrs	r5, r2
 8000a70:	2800      	cmp	r0, #0
 8000a72:	dd00      	ble.n	8000a76 <__aeabi_fdiv+0x1fa>
 8000a74:	e74b      	b.n	800090e <__aeabi_fdiv+0x92>
 8000a76:	e7aa      	b.n	80009ce <__aeabi_fdiv+0x152>
 8000a78:	211a      	movs	r1, #26
 8000a7a:	2501      	movs	r5, #1
 8000a7c:	1a12      	subs	r2, r2, r0
 8000a7e:	e7e4      	b.n	8000a4a <__aeabi_fdiv+0x1ce>
 8000a80:	01ad      	lsls	r5, r5, #6
 8000a82:	2000      	movs	r0, #0
 8000a84:	0a6d      	lsrs	r5, r5, #9
 8000a86:	e758      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a88:	0800d624 	.word	0x0800d624
 8000a8c:	f7ffffff 	.word	0xf7ffffff
 8000a90:	0800d664 	.word	0x0800d664

08000a94 <__eqsf2>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	0042      	lsls	r2, r0, #1
 8000a98:	024e      	lsls	r6, r1, #9
 8000a9a:	004c      	lsls	r4, r1, #1
 8000a9c:	0245      	lsls	r5, r0, #9
 8000a9e:	0a6d      	lsrs	r5, r5, #9
 8000aa0:	0e12      	lsrs	r2, r2, #24
 8000aa2:	0fc3      	lsrs	r3, r0, #31
 8000aa4:	0a76      	lsrs	r6, r6, #9
 8000aa6:	0e24      	lsrs	r4, r4, #24
 8000aa8:	0fc9      	lsrs	r1, r1, #31
 8000aaa:	2aff      	cmp	r2, #255	; 0xff
 8000aac:	d00f      	beq.n	8000ace <__eqsf2+0x3a>
 8000aae:	2cff      	cmp	r4, #255	; 0xff
 8000ab0:	d011      	beq.n	8000ad6 <__eqsf2+0x42>
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	42a2      	cmp	r2, r4
 8000ab6:	d000      	beq.n	8000aba <__eqsf2+0x26>
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	42b5      	cmp	r5, r6
 8000abc:	d1fc      	bne.n	8000ab8 <__eqsf2+0x24>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d00d      	beq.n	8000ade <__eqsf2+0x4a>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d1f8      	bne.n	8000ab8 <__eqsf2+0x24>
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	1e45      	subs	r5, r0, #1
 8000aca:	41a8      	sbcs	r0, r5
 8000acc:	e7f4      	b.n	8000ab8 <__eqsf2+0x24>
 8000ace:	2001      	movs	r0, #1
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d1f1      	bne.n	8000ab8 <__eqsf2+0x24>
 8000ad4:	e7eb      	b.n	8000aae <__eqsf2+0x1a>
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d1ed      	bne.n	8000ab8 <__eqsf2+0x24>
 8000adc:	e7e9      	b.n	8000ab2 <__eqsf2+0x1e>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	e7ea      	b.n	8000ab8 <__eqsf2+0x24>
 8000ae2:	46c0      	nop			; (mov r8, r8)

08000ae4 <__gesf2>:
 8000ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae6:	0042      	lsls	r2, r0, #1
 8000ae8:	0246      	lsls	r6, r0, #9
 8000aea:	024d      	lsls	r5, r1, #9
 8000aec:	004c      	lsls	r4, r1, #1
 8000aee:	0fc3      	lsrs	r3, r0, #31
 8000af0:	0a76      	lsrs	r6, r6, #9
 8000af2:	0e12      	lsrs	r2, r2, #24
 8000af4:	0a6d      	lsrs	r5, r5, #9
 8000af6:	0e24      	lsrs	r4, r4, #24
 8000af8:	0fc8      	lsrs	r0, r1, #31
 8000afa:	2aff      	cmp	r2, #255	; 0xff
 8000afc:	d01f      	beq.n	8000b3e <__gesf2+0x5a>
 8000afe:	2cff      	cmp	r4, #255	; 0xff
 8000b00:	d010      	beq.n	8000b24 <__gesf2+0x40>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d11f      	bne.n	8000b46 <__gesf2+0x62>
 8000b06:	4271      	negs	r1, r6
 8000b08:	4171      	adcs	r1, r6
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d101      	bne.n	8000b12 <__gesf2+0x2e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d01e      	beq.n	8000b50 <__gesf2+0x6c>
 8000b12:	2900      	cmp	r1, #0
 8000b14:	d10e      	bne.n	8000b34 <__gesf2+0x50>
 8000b16:	4283      	cmp	r3, r0
 8000b18:	d01e      	beq.n	8000b58 <__gesf2+0x74>
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	1e58      	subs	r0, r3, #1
 8000b1e:	4008      	ands	r0, r1
 8000b20:	3801      	subs	r0, #1
 8000b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d126      	bne.n	8000b76 <__gesf2+0x92>
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d1f4      	bne.n	8000b16 <__gesf2+0x32>
 8000b2c:	4271      	negs	r1, r6
 8000b2e:	4171      	adcs	r1, r6
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d0f0      	beq.n	8000b16 <__gesf2+0x32>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d1f4      	bne.n	8000b22 <__gesf2+0x3e>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	e7f1      	b.n	8000b22 <__gesf2+0x3e>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	d119      	bne.n	8000b76 <__gesf2+0x92>
 8000b42:	2cff      	cmp	r4, #255	; 0xff
 8000b44:	d0ee      	beq.n	8000b24 <__gesf2+0x40>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d1e5      	bne.n	8000b16 <__gesf2+0x32>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d1e3      	bne.n	8000b16 <__gesf2+0x32>
 8000b4e:	e7e4      	b.n	8000b1a <__gesf2+0x36>
 8000b50:	2000      	movs	r0, #0
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d0e5      	beq.n	8000b22 <__gesf2+0x3e>
 8000b56:	e7e0      	b.n	8000b1a <__gesf2+0x36>
 8000b58:	42a2      	cmp	r2, r4
 8000b5a:	dc05      	bgt.n	8000b68 <__gesf2+0x84>
 8000b5c:	dbea      	blt.n	8000b34 <__gesf2+0x50>
 8000b5e:	42ae      	cmp	r6, r5
 8000b60:	d802      	bhi.n	8000b68 <__gesf2+0x84>
 8000b62:	d3e7      	bcc.n	8000b34 <__gesf2+0x50>
 8000b64:	2000      	movs	r0, #0
 8000b66:	e7dc      	b.n	8000b22 <__gesf2+0x3e>
 8000b68:	4241      	negs	r1, r0
 8000b6a:	4141      	adcs	r1, r0
 8000b6c:	4248      	negs	r0, r1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4008      	ands	r0, r1
 8000b72:	3801      	subs	r0, #1
 8000b74:	e7d5      	b.n	8000b22 <__gesf2+0x3e>
 8000b76:	2002      	movs	r0, #2
 8000b78:	4240      	negs	r0, r0
 8000b7a:	e7d2      	b.n	8000b22 <__gesf2+0x3e>

08000b7c <__lesf2>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0246      	lsls	r6, r0, #9
 8000b82:	024d      	lsls	r5, r1, #9
 8000b84:	004c      	lsls	r4, r1, #1
 8000b86:	0fc3      	lsrs	r3, r0, #31
 8000b88:	0a76      	lsrs	r6, r6, #9
 8000b8a:	0e12      	lsrs	r2, r2, #24
 8000b8c:	0a6d      	lsrs	r5, r5, #9
 8000b8e:	0e24      	lsrs	r4, r4, #24
 8000b90:	0fc8      	lsrs	r0, r1, #31
 8000b92:	2aff      	cmp	r2, #255	; 0xff
 8000b94:	d00d      	beq.n	8000bb2 <__lesf2+0x36>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <__lesf2+0x3e>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d123      	bne.n	8000be6 <__lesf2+0x6a>
 8000b9e:	4271      	negs	r1, r6
 8000ba0:	4171      	adcs	r1, r6
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d10f      	bne.n	8000bc6 <__lesf2+0x4a>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d10d      	bne.n	8000bc6 <__lesf2+0x4a>
 8000baa:	2000      	movs	r0, #0
 8000bac:	2e00      	cmp	r6, #0
 8000bae:	d014      	beq.n	8000bda <__lesf2+0x5e>
 8000bb0:	e00d      	b.n	8000bce <__lesf2+0x52>
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d110      	bne.n	8000bd8 <__lesf2+0x5c>
 8000bb6:	2cff      	cmp	r4, #255	; 0xff
 8000bb8:	d115      	bne.n	8000be6 <__lesf2+0x6a>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d10c      	bne.n	8000bd8 <__lesf2+0x5c>
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d103      	bne.n	8000bca <__lesf2+0x4e>
 8000bc2:	4271      	negs	r1, r6
 8000bc4:	4171      	adcs	r1, r6
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	d108      	bne.n	8000bdc <__lesf2+0x60>
 8000bca:	4283      	cmp	r3, r0
 8000bcc:	d010      	beq.n	8000bf0 <__lesf2+0x74>
 8000bce:	2102      	movs	r1, #2
 8000bd0:	1e58      	subs	r0, r3, #1
 8000bd2:	4008      	ands	r0, r1
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	e000      	b.n	8000bda <__lesf2+0x5e>
 8000bd8:	2002      	movs	r0, #2
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d1fc      	bne.n	8000bda <__lesf2+0x5e>
 8000be0:	2001      	movs	r0, #1
 8000be2:	4240      	negs	r0, r0
 8000be4:	e7f9      	b.n	8000bda <__lesf2+0x5e>
 8000be6:	2c00      	cmp	r4, #0
 8000be8:	d1ef      	bne.n	8000bca <__lesf2+0x4e>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d1ed      	bne.n	8000bca <__lesf2+0x4e>
 8000bee:	e7ee      	b.n	8000bce <__lesf2+0x52>
 8000bf0:	42a2      	cmp	r2, r4
 8000bf2:	dc05      	bgt.n	8000c00 <__lesf2+0x84>
 8000bf4:	dbf2      	blt.n	8000bdc <__lesf2+0x60>
 8000bf6:	42ae      	cmp	r6, r5
 8000bf8:	d802      	bhi.n	8000c00 <__lesf2+0x84>
 8000bfa:	d3ef      	bcc.n	8000bdc <__lesf2+0x60>
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	e7ec      	b.n	8000bda <__lesf2+0x5e>
 8000c00:	4241      	negs	r1, r0
 8000c02:	4141      	adcs	r1, r0
 8000c04:	4248      	negs	r0, r1
 8000c06:	2102      	movs	r1, #2
 8000c08:	4008      	ands	r0, r1
 8000c0a:	3801      	subs	r0, #1
 8000c0c:	e7e5      	b.n	8000bda <__lesf2+0x5e>
 8000c0e:	46c0      	nop			; (mov r8, r8)

08000c10 <__aeabi_fmul>:
 8000c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c12:	4657      	mov	r7, sl
 8000c14:	464e      	mov	r6, r9
 8000c16:	4645      	mov	r5, r8
 8000c18:	46de      	mov	lr, fp
 8000c1a:	0244      	lsls	r4, r0, #9
 8000c1c:	b5e0      	push	{r5, r6, r7, lr}
 8000c1e:	0045      	lsls	r5, r0, #1
 8000c20:	1c0f      	adds	r7, r1, #0
 8000c22:	0a64      	lsrs	r4, r4, #9
 8000c24:	0e2d      	lsrs	r5, r5, #24
 8000c26:	0fc6      	lsrs	r6, r0, #31
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d047      	beq.n	8000cbc <__aeabi_fmul+0xac>
 8000c2c:	2dff      	cmp	r5, #255	; 0xff
 8000c2e:	d04d      	beq.n	8000ccc <__aeabi_fmul+0xbc>
 8000c30:	2300      	movs	r3, #0
 8000c32:	2080      	movs	r0, #128	; 0x80
 8000c34:	469a      	mov	sl, r3
 8000c36:	469b      	mov	fp, r3
 8000c38:	00e4      	lsls	r4, r4, #3
 8000c3a:	04c0      	lsls	r0, r0, #19
 8000c3c:	4304      	orrs	r4, r0
 8000c3e:	3d7f      	subs	r5, #127	; 0x7f
 8000c40:	0278      	lsls	r0, r7, #9
 8000c42:	0a43      	lsrs	r3, r0, #9
 8000c44:	4699      	mov	r9, r3
 8000c46:	007a      	lsls	r2, r7, #1
 8000c48:	0ffb      	lsrs	r3, r7, #31
 8000c4a:	4698      	mov	r8, r3
 8000c4c:	0e12      	lsrs	r2, r2, #24
 8000c4e:	464b      	mov	r3, r9
 8000c50:	d044      	beq.n	8000cdc <__aeabi_fmul+0xcc>
 8000c52:	2aff      	cmp	r2, #255	; 0xff
 8000c54:	d011      	beq.n	8000c7a <__aeabi_fmul+0x6a>
 8000c56:	00d8      	lsls	r0, r3, #3
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	04db      	lsls	r3, r3, #19
 8000c5c:	4303      	orrs	r3, r0
 8000c5e:	4699      	mov	r9, r3
 8000c60:	2000      	movs	r0, #0
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	18ad      	adds	r5, r5, r2
 8000c66:	4647      	mov	r7, r8
 8000c68:	4653      	mov	r3, sl
 8000c6a:	4077      	eors	r7, r6
 8000c6c:	1c69      	adds	r1, r5, #1
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	d83f      	bhi.n	8000cf2 <__aeabi_fmul+0xe2>
 8000c72:	4a72      	ldr	r2, [pc, #456]	; (8000e3c <__aeabi_fmul+0x22c>)
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	58d3      	ldr	r3, [r2, r3]
 8000c78:	469f      	mov	pc, r3
 8000c7a:	35ff      	adds	r5, #255	; 0xff
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_fmul+0x72>
 8000c80:	e079      	b.n	8000d76 <__aeabi_fmul+0x166>
 8000c82:	4652      	mov	r2, sl
 8000c84:	2302      	movs	r3, #2
 8000c86:	431a      	orrs	r2, r3
 8000c88:	4692      	mov	sl, r2
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	e7eb      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000c8e:	4647      	mov	r7, r8
 8000c90:	464c      	mov	r4, r9
 8000c92:	4683      	mov	fp, r0
 8000c94:	465b      	mov	r3, fp
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d028      	beq.n	8000cec <__aeabi_fmul+0xdc>
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fmul+0x90>
 8000c9e:	e0c6      	b.n	8000e2e <__aeabi_fmul+0x21e>
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d14f      	bne.n	8000d44 <__aeabi_fmul+0x134>
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	05c0      	lsls	r0, r0, #23
 8000caa:	07ff      	lsls	r7, r7, #31
 8000cac:	4320      	orrs	r0, r4
 8000cae:	4338      	orrs	r0, r7
 8000cb0:	bcf0      	pop	{r4, r5, r6, r7}
 8000cb2:	46bb      	mov	fp, r7
 8000cb4:	46b2      	mov	sl, r6
 8000cb6:	46a9      	mov	r9, r5
 8000cb8:	46a0      	mov	r8, r4
 8000cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d171      	bne.n	8000da4 <__aeabi_fmul+0x194>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	469a      	mov	sl, r3
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	2500      	movs	r5, #0
 8000cc8:	469b      	mov	fp, r3
 8000cca:	e7b9      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d163      	bne.n	8000d98 <__aeabi_fmul+0x188>
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	3b06      	subs	r3, #6
 8000cd6:	25ff      	movs	r5, #255	; 0xff
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e7b1      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d150      	bne.n	8000d82 <__aeabi_fmul+0x172>
 8000ce0:	4652      	mov	r2, sl
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	4692      	mov	sl, r2
 8000ce8:	2001      	movs	r0, #1
 8000cea:	e7bc      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000cec:	20ff      	movs	r0, #255	; 0xff
 8000cee:	2400      	movs	r4, #0
 8000cf0:	e7da      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000cf2:	4648      	mov	r0, r9
 8000cf4:	0c26      	lsrs	r6, r4, #16
 8000cf6:	0424      	lsls	r4, r4, #16
 8000cf8:	0c22      	lsrs	r2, r4, #16
 8000cfa:	0404      	lsls	r4, r0, #16
 8000cfc:	0c24      	lsrs	r4, r4, #16
 8000cfe:	464b      	mov	r3, r9
 8000d00:	0020      	movs	r0, r4
 8000d02:	0c1b      	lsrs	r3, r3, #16
 8000d04:	4350      	muls	r0, r2
 8000d06:	4374      	muls	r4, r6
 8000d08:	435a      	muls	r2, r3
 8000d0a:	435e      	muls	r6, r3
 8000d0c:	1912      	adds	r2, r2, r4
 8000d0e:	0c03      	lsrs	r3, r0, #16
 8000d10:	189b      	adds	r3, r3, r2
 8000d12:	429c      	cmp	r4, r3
 8000d14:	d903      	bls.n	8000d1e <__aeabi_fmul+0x10e>
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	0252      	lsls	r2, r2, #9
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	4466      	add	r6, ip
 8000d1e:	0400      	lsls	r0, r0, #16
 8000d20:	041a      	lsls	r2, r3, #16
 8000d22:	0c00      	lsrs	r0, r0, #16
 8000d24:	1812      	adds	r2, r2, r0
 8000d26:	0194      	lsls	r4, r2, #6
 8000d28:	1e60      	subs	r0, r4, #1
 8000d2a:	4184      	sbcs	r4, r0
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	0e92      	lsrs	r2, r2, #26
 8000d30:	199b      	adds	r3, r3, r6
 8000d32:	4314      	orrs	r4, r2
 8000d34:	019b      	lsls	r3, r3, #6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	d572      	bpl.n	8000e22 <__aeabi_fmul+0x212>
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	0863      	lsrs	r3, r4, #1
 8000d40:	4004      	ands	r4, r0
 8000d42:	431c      	orrs	r4, r3
 8000d44:	0008      	movs	r0, r1
 8000d46:	307f      	adds	r0, #127	; 0x7f
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	dd3c      	ble.n	8000dc6 <__aeabi_fmul+0x1b6>
 8000d4c:	0763      	lsls	r3, r4, #29
 8000d4e:	d004      	beq.n	8000d5a <__aeabi_fmul+0x14a>
 8000d50:	230f      	movs	r3, #15
 8000d52:	4023      	ands	r3, r4
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d000      	beq.n	8000d5a <__aeabi_fmul+0x14a>
 8000d58:	3404      	adds	r4, #4
 8000d5a:	0123      	lsls	r3, r4, #4
 8000d5c:	d503      	bpl.n	8000d66 <__aeabi_fmul+0x156>
 8000d5e:	3180      	adds	r1, #128	; 0x80
 8000d60:	0008      	movs	r0, r1
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <__aeabi_fmul+0x230>)
 8000d64:	401c      	ands	r4, r3
 8000d66:	28fe      	cmp	r0, #254	; 0xfe
 8000d68:	dcc0      	bgt.n	8000cec <__aeabi_fmul+0xdc>
 8000d6a:	01a4      	lsls	r4, r4, #6
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	b2c0      	uxtb	r0, r0
 8000d70:	e79a      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000d72:	0037      	movs	r7, r6
 8000d74:	e78e      	b.n	8000c94 <__aeabi_fmul+0x84>
 8000d76:	4652      	mov	r2, sl
 8000d78:	2303      	movs	r3, #3
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	4692      	mov	sl, r2
 8000d7e:	2003      	movs	r0, #3
 8000d80:	e771      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000d82:	4648      	mov	r0, r9
 8000d84:	f002 f9b0 	bl	80030e8 <__clzsi2>
 8000d88:	464a      	mov	r2, r9
 8000d8a:	1f43      	subs	r3, r0, #5
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	1a2d      	subs	r5, r5, r0
 8000d90:	4691      	mov	r9, r2
 8000d92:	2000      	movs	r0, #0
 8000d94:	3d76      	subs	r5, #118	; 0x76
 8000d96:	e766      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000d98:	230c      	movs	r3, #12
 8000d9a:	469a      	mov	sl, r3
 8000d9c:	3b09      	subs	r3, #9
 8000d9e:	25ff      	movs	r5, #255	; 0xff
 8000da0:	469b      	mov	fp, r3
 8000da2:	e74d      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000da4:	0020      	movs	r0, r4
 8000da6:	f002 f99f 	bl	80030e8 <__clzsi2>
 8000daa:	2576      	movs	r5, #118	; 0x76
 8000dac:	1f43      	subs	r3, r0, #5
 8000dae:	409c      	lsls	r4, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	426d      	negs	r5, r5
 8000db4:	469a      	mov	sl, r3
 8000db6:	469b      	mov	fp, r3
 8000db8:	1a2d      	subs	r5, r5, r0
 8000dba:	e741      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000dbc:	2480      	movs	r4, #128	; 0x80
 8000dbe:	2700      	movs	r7, #0
 8000dc0:	20ff      	movs	r0, #255	; 0xff
 8000dc2:	03e4      	lsls	r4, r4, #15
 8000dc4:	e770      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	1a1b      	subs	r3, r3, r0
 8000dca:	2b1b      	cmp	r3, #27
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_fmul+0x1c0>
 8000dce:	e769      	b.n	8000ca4 <__aeabi_fmul+0x94>
 8000dd0:	319e      	adds	r1, #158	; 0x9e
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	408c      	lsls	r4, r1
 8000dd6:	40d8      	lsrs	r0, r3
 8000dd8:	1e63      	subs	r3, r4, #1
 8000dda:	419c      	sbcs	r4, r3
 8000ddc:	4304      	orrs	r4, r0
 8000dde:	0763      	lsls	r3, r4, #29
 8000de0:	d004      	beq.n	8000dec <__aeabi_fmul+0x1dc>
 8000de2:	230f      	movs	r3, #15
 8000de4:	4023      	ands	r3, r4
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d000      	beq.n	8000dec <__aeabi_fmul+0x1dc>
 8000dea:	3404      	adds	r4, #4
 8000dec:	0163      	lsls	r3, r4, #5
 8000dee:	d51a      	bpl.n	8000e26 <__aeabi_fmul+0x216>
 8000df0:	2001      	movs	r0, #1
 8000df2:	2400      	movs	r4, #0
 8000df4:	e758      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000df6:	2080      	movs	r0, #128	; 0x80
 8000df8:	03c0      	lsls	r0, r0, #15
 8000dfa:	4204      	tst	r4, r0
 8000dfc:	d009      	beq.n	8000e12 <__aeabi_fmul+0x202>
 8000dfe:	464b      	mov	r3, r9
 8000e00:	4203      	tst	r3, r0
 8000e02:	d106      	bne.n	8000e12 <__aeabi_fmul+0x202>
 8000e04:	464c      	mov	r4, r9
 8000e06:	4304      	orrs	r4, r0
 8000e08:	0264      	lsls	r4, r4, #9
 8000e0a:	4647      	mov	r7, r8
 8000e0c:	20ff      	movs	r0, #255	; 0xff
 8000e0e:	0a64      	lsrs	r4, r4, #9
 8000e10:	e74a      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e12:	2080      	movs	r0, #128	; 0x80
 8000e14:	03c0      	lsls	r0, r0, #15
 8000e16:	4304      	orrs	r4, r0
 8000e18:	0264      	lsls	r4, r4, #9
 8000e1a:	0037      	movs	r7, r6
 8000e1c:	20ff      	movs	r0, #255	; 0xff
 8000e1e:	0a64      	lsrs	r4, r4, #9
 8000e20:	e742      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e22:	0029      	movs	r1, r5
 8000e24:	e78e      	b.n	8000d44 <__aeabi_fmul+0x134>
 8000e26:	01a4      	lsls	r4, r4, #6
 8000e28:	2000      	movs	r0, #0
 8000e2a:	0a64      	lsrs	r4, r4, #9
 8000e2c:	e73c      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e2e:	2080      	movs	r0, #128	; 0x80
 8000e30:	03c0      	lsls	r0, r0, #15
 8000e32:	4304      	orrs	r4, r0
 8000e34:	0264      	lsls	r4, r4, #9
 8000e36:	20ff      	movs	r0, #255	; 0xff
 8000e38:	0a64      	lsrs	r4, r4, #9
 8000e3a:	e735      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e3c:	0800d6a4 	.word	0x0800d6a4
 8000e40:	f7ffffff 	.word	0xf7ffffff

08000e44 <__aeabi_fsub>:
 8000e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e46:	4646      	mov	r6, r8
 8000e48:	46d6      	mov	lr, sl
 8000e4a:	464f      	mov	r7, r9
 8000e4c:	0243      	lsls	r3, r0, #9
 8000e4e:	0a5b      	lsrs	r3, r3, #9
 8000e50:	00da      	lsls	r2, r3, #3
 8000e52:	4694      	mov	ip, r2
 8000e54:	024a      	lsls	r2, r1, #9
 8000e56:	b5c0      	push	{r6, r7, lr}
 8000e58:	0044      	lsls	r4, r0, #1
 8000e5a:	0a56      	lsrs	r6, r2, #9
 8000e5c:	1c05      	adds	r5, r0, #0
 8000e5e:	46b0      	mov	r8, r6
 8000e60:	0e24      	lsrs	r4, r4, #24
 8000e62:	004e      	lsls	r6, r1, #1
 8000e64:	0992      	lsrs	r2, r2, #6
 8000e66:	001f      	movs	r7, r3
 8000e68:	0020      	movs	r0, r4
 8000e6a:	4692      	mov	sl, r2
 8000e6c:	0fed      	lsrs	r5, r5, #31
 8000e6e:	0e36      	lsrs	r6, r6, #24
 8000e70:	0fc9      	lsrs	r1, r1, #31
 8000e72:	2eff      	cmp	r6, #255	; 0xff
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0x34>
 8000e76:	e07f      	b.n	8000f78 <__aeabi_fsub+0x134>
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4051      	eors	r1, r2
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d051      	beq.n	8000f24 <__aeabi_fsub+0xe0>
 8000e80:	1ba2      	subs	r2, r4, r6
 8000e82:	4691      	mov	r9, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	dc00      	bgt.n	8000e8a <__aeabi_fsub+0x46>
 8000e88:	e07e      	b.n	8000f88 <__aeabi_fsub+0x144>
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x4c>
 8000e8e:	e099      	b.n	8000fc4 <__aeabi_fsub+0x180>
 8000e90:	2cff      	cmp	r4, #255	; 0xff
 8000e92:	d100      	bne.n	8000e96 <__aeabi_fsub+0x52>
 8000e94:	e08c      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	4652      	mov	r2, sl
 8000e9a:	04db      	lsls	r3, r3, #19
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	4692      	mov	sl, r2
 8000ea0:	464a      	mov	r2, r9
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	2a1b      	cmp	r2, #27
 8000ea6:	dc08      	bgt.n	8000eba <__aeabi_fsub+0x76>
 8000ea8:	4653      	mov	r3, sl
 8000eaa:	2120      	movs	r1, #32
 8000eac:	40d3      	lsrs	r3, r2
 8000eae:	1a89      	subs	r1, r1, r2
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	408a      	lsls	r2, r1
 8000eb4:	1e51      	subs	r1, r2, #1
 8000eb6:	418a      	sbcs	r2, r1
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	4662      	mov	r2, ip
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	015a      	lsls	r2, r3, #5
 8000ec0:	d400      	bmi.n	8000ec4 <__aeabi_fsub+0x80>
 8000ec2:	e0f3      	b.n	80010ac <__aeabi_fsub+0x268>
 8000ec4:	019b      	lsls	r3, r3, #6
 8000ec6:	099e      	lsrs	r6, r3, #6
 8000ec8:	0030      	movs	r0, r6
 8000eca:	f002 f90d 	bl	80030e8 <__clzsi2>
 8000ece:	3805      	subs	r0, #5
 8000ed0:	4086      	lsls	r6, r0
 8000ed2:	4284      	cmp	r4, r0
 8000ed4:	dd00      	ble.n	8000ed8 <__aeabi_fsub+0x94>
 8000ed6:	e0f7      	b.n	80010c8 <__aeabi_fsub+0x284>
 8000ed8:	0032      	movs	r2, r6
 8000eda:	1b04      	subs	r4, r0, r4
 8000edc:	2020      	movs	r0, #32
 8000ede:	3401      	adds	r4, #1
 8000ee0:	40e2      	lsrs	r2, r4
 8000ee2:	1b04      	subs	r4, r0, r4
 8000ee4:	40a6      	lsls	r6, r4
 8000ee6:	0033      	movs	r3, r6
 8000ee8:	1e5e      	subs	r6, r3, #1
 8000eea:	41b3      	sbcs	r3, r6
 8000eec:	2400      	movs	r4, #0
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	075a      	lsls	r2, r3, #29
 8000ef2:	d004      	beq.n	8000efe <__aeabi_fsub+0xba>
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	2a04      	cmp	r2, #4
 8000efa:	d000      	beq.n	8000efe <__aeabi_fsub+0xba>
 8000efc:	3304      	adds	r3, #4
 8000efe:	015a      	lsls	r2, r3, #5
 8000f00:	d400      	bmi.n	8000f04 <__aeabi_fsub+0xc0>
 8000f02:	e0d6      	b.n	80010b2 <__aeabi_fsub+0x26e>
 8000f04:	1c62      	adds	r2, r4, #1
 8000f06:	2cfe      	cmp	r4, #254	; 0xfe
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0xc8>
 8000f0a:	e0da      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000f0c:	019b      	lsls	r3, r3, #6
 8000f0e:	0a5f      	lsrs	r7, r3, #9
 8000f10:	b2d0      	uxtb	r0, r2
 8000f12:	05c0      	lsls	r0, r0, #23
 8000f14:	4338      	orrs	r0, r7
 8000f16:	07ed      	lsls	r5, r5, #31
 8000f18:	4328      	orrs	r0, r5
 8000f1a:	bce0      	pop	{r5, r6, r7}
 8000f1c:	46ba      	mov	sl, r7
 8000f1e:	46b1      	mov	r9, r6
 8000f20:	46a8      	mov	r8, r5
 8000f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f24:	1ba2      	subs	r2, r4, r6
 8000f26:	4691      	mov	r9, r2
 8000f28:	2a00      	cmp	r2, #0
 8000f2a:	dd63      	ble.n	8000ff4 <__aeabi_fsub+0x1b0>
 8000f2c:	2e00      	cmp	r6, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0xee>
 8000f30:	e099      	b.n	8001066 <__aeabi_fsub+0x222>
 8000f32:	2cff      	cmp	r4, #255	; 0xff
 8000f34:	d03c      	beq.n	8000fb0 <__aeabi_fsub+0x16c>
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	4652      	mov	r2, sl
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	4692      	mov	sl, r2
 8000f40:	464a      	mov	r2, r9
 8000f42:	2301      	movs	r3, #1
 8000f44:	2a1b      	cmp	r2, #27
 8000f46:	dc08      	bgt.n	8000f5a <__aeabi_fsub+0x116>
 8000f48:	4653      	mov	r3, sl
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	40d3      	lsrs	r3, r2
 8000f4e:	1a89      	subs	r1, r1, r2
 8000f50:	4652      	mov	r2, sl
 8000f52:	408a      	lsls	r2, r1
 8000f54:	1e51      	subs	r1, r2, #1
 8000f56:	418a      	sbcs	r2, r1
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	4463      	add	r3, ip
 8000f5c:	015a      	lsls	r2, r3, #5
 8000f5e:	d400      	bmi.n	8000f62 <__aeabi_fsub+0x11e>
 8000f60:	e0a4      	b.n	80010ac <__aeabi_fsub+0x268>
 8000f62:	3401      	adds	r4, #1
 8000f64:	2cff      	cmp	r4, #255	; 0xff
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fsub+0x126>
 8000f68:	e0ab      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4997      	ldr	r1, [pc, #604]	; (80011cc <__aeabi_fsub+0x388>)
 8000f6e:	401a      	ands	r2, r3
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	400b      	ands	r3, r1
 8000f74:	4313      	orrs	r3, r2
 8000f76:	e7bb      	b.n	8000ef0 <__aeabi_fsub+0xac>
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d032      	beq.n	8000fe2 <__aeabi_fsub+0x19e>
 8000f7c:	428d      	cmp	r5, r1
 8000f7e:	d035      	beq.n	8000fec <__aeabi_fsub+0x1a8>
 8000f80:	22ff      	movs	r2, #255	; 0xff
 8000f82:	4252      	negs	r2, r2
 8000f84:	4691      	mov	r9, r2
 8000f86:	44a1      	add	r9, r4
 8000f88:	464a      	mov	r2, r9
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d051      	beq.n	8001032 <__aeabi_fsub+0x1ee>
 8000f8e:	1b30      	subs	r0, r6, r4
 8000f90:	2c00      	cmp	r4, #0
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fsub+0x152>
 8000f94:	e09c      	b.n	80010d0 <__aeabi_fsub+0x28c>
 8000f96:	4663      	mov	r3, ip
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_fsub+0x15a>
 8000f9c:	e0df      	b.n	800115e <__aeabi_fsub+0x31a>
 8000f9e:	3801      	subs	r0, #1
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_fsub+0x162>
 8000fa4:	e0f7      	b.n	8001196 <__aeabi_fsub+0x352>
 8000fa6:	2eff      	cmp	r6, #255	; 0xff
 8000fa8:	d000      	beq.n	8000fac <__aeabi_fsub+0x168>
 8000faa:	e099      	b.n	80010e0 <__aeabi_fsub+0x29c>
 8000fac:	000d      	movs	r5, r1
 8000fae:	4643      	mov	r3, r8
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0x172>
 8000fb4:	e085      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000fb6:	2780      	movs	r7, #128	; 0x80
 8000fb8:	03ff      	lsls	r7, r7, #15
 8000fba:	431f      	orrs	r7, r3
 8000fbc:	027f      	lsls	r7, r7, #9
 8000fbe:	20ff      	movs	r0, #255	; 0xff
 8000fc0:	0a7f      	lsrs	r7, r7, #9
 8000fc2:	e7a6      	b.n	8000f12 <__aeabi_fsub+0xce>
 8000fc4:	4652      	mov	r2, sl
 8000fc6:	2a00      	cmp	r2, #0
 8000fc8:	d074      	beq.n	80010b4 <__aeabi_fsub+0x270>
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4252      	negs	r2, r2
 8000fce:	4690      	mov	r8, r2
 8000fd0:	44c1      	add	r9, r8
 8000fd2:	464a      	mov	r2, r9
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_fsub+0x196>
 8000fd8:	e0c8      	b.n	800116c <__aeabi_fsub+0x328>
 8000fda:	2cff      	cmp	r4, #255	; 0xff
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_fsub+0x19c>
 8000fde:	e75f      	b.n	8000ea0 <__aeabi_fsub+0x5c>
 8000fe0:	e7e6      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4051      	eors	r1, r2
 8000fe6:	42a9      	cmp	r1, r5
 8000fe8:	d000      	beq.n	8000fec <__aeabi_fsub+0x1a8>
 8000fea:	e749      	b.n	8000e80 <__aeabi_fsub+0x3c>
 8000fec:	22ff      	movs	r2, #255	; 0xff
 8000fee:	4252      	negs	r2, r2
 8000ff0:	4691      	mov	r9, r2
 8000ff2:	44a1      	add	r9, r4
 8000ff4:	464a      	mov	r2, r9
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d043      	beq.n	8001082 <__aeabi_fsub+0x23e>
 8000ffa:	1b31      	subs	r1, r6, r4
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_fsub+0x1be>
 8001000:	e08c      	b.n	800111c <__aeabi_fsub+0x2d8>
 8001002:	2eff      	cmp	r6, #255	; 0xff
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x1c4>
 8001006:	e092      	b.n	800112e <__aeabi_fsub+0x2ea>
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	4662      	mov	r2, ip
 800100c:	04db      	lsls	r3, r3, #19
 800100e:	431a      	orrs	r2, r3
 8001010:	4694      	mov	ip, r2
 8001012:	2301      	movs	r3, #1
 8001014:	291b      	cmp	r1, #27
 8001016:	dc09      	bgt.n	800102c <__aeabi_fsub+0x1e8>
 8001018:	2020      	movs	r0, #32
 800101a:	4663      	mov	r3, ip
 800101c:	4662      	mov	r2, ip
 800101e:	40cb      	lsrs	r3, r1
 8001020:	1a41      	subs	r1, r0, r1
 8001022:	408a      	lsls	r2, r1
 8001024:	0011      	movs	r1, r2
 8001026:	1e48      	subs	r0, r1, #1
 8001028:	4181      	sbcs	r1, r0
 800102a:	430b      	orrs	r3, r1
 800102c:	0034      	movs	r4, r6
 800102e:	4453      	add	r3, sl
 8001030:	e794      	b.n	8000f5c <__aeabi_fsub+0x118>
 8001032:	22fe      	movs	r2, #254	; 0xfe
 8001034:	1c66      	adds	r6, r4, #1
 8001036:	4232      	tst	r2, r6
 8001038:	d164      	bne.n	8001104 <__aeabi_fsub+0x2c0>
 800103a:	2c00      	cmp	r4, #0
 800103c:	d000      	beq.n	8001040 <__aeabi_fsub+0x1fc>
 800103e:	e082      	b.n	8001146 <__aeabi_fsub+0x302>
 8001040:	4663      	mov	r3, ip
 8001042:	2b00      	cmp	r3, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_fsub+0x204>
 8001046:	e0ab      	b.n	80011a0 <__aeabi_fsub+0x35c>
 8001048:	4653      	mov	r3, sl
 800104a:	2b00      	cmp	r3, #0
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0x20c>
 800104e:	e760      	b.n	8000f12 <__aeabi_fsub+0xce>
 8001050:	4663      	mov	r3, ip
 8001052:	4652      	mov	r2, sl
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	015a      	lsls	r2, r3, #5
 8001058:	d400      	bmi.n	800105c <__aeabi_fsub+0x218>
 800105a:	e0aa      	b.n	80011b2 <__aeabi_fsub+0x36e>
 800105c:	4663      	mov	r3, ip
 800105e:	4652      	mov	r2, sl
 8001060:	000d      	movs	r5, r1
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	e744      	b.n	8000ef0 <__aeabi_fsub+0xac>
 8001066:	4652      	mov	r2, sl
 8001068:	2a00      	cmp	r2, #0
 800106a:	d023      	beq.n	80010b4 <__aeabi_fsub+0x270>
 800106c:	2201      	movs	r2, #1
 800106e:	4252      	negs	r2, r2
 8001070:	4690      	mov	r8, r2
 8001072:	44c1      	add	r9, r8
 8001074:	464a      	mov	r2, r9
 8001076:	2a00      	cmp	r2, #0
 8001078:	d075      	beq.n	8001166 <__aeabi_fsub+0x322>
 800107a:	2cff      	cmp	r4, #255	; 0xff
 800107c:	d000      	beq.n	8001080 <__aeabi_fsub+0x23c>
 800107e:	e75f      	b.n	8000f40 <__aeabi_fsub+0xfc>
 8001080:	e796      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001082:	26fe      	movs	r6, #254	; 0xfe
 8001084:	3401      	adds	r4, #1
 8001086:	4226      	tst	r6, r4
 8001088:	d153      	bne.n	8001132 <__aeabi_fsub+0x2ee>
 800108a:	2800      	cmp	r0, #0
 800108c:	d172      	bne.n	8001174 <__aeabi_fsub+0x330>
 800108e:	4663      	mov	r3, ip
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_fsub+0x252>
 8001094:	e093      	b.n	80011be <__aeabi_fsub+0x37a>
 8001096:	4653      	mov	r3, sl
 8001098:	2b00      	cmp	r3, #0
 800109a:	d100      	bne.n	800109e <__aeabi_fsub+0x25a>
 800109c:	e739      	b.n	8000f12 <__aeabi_fsub+0xce>
 800109e:	4463      	add	r3, ip
 80010a0:	2400      	movs	r4, #0
 80010a2:	015a      	lsls	r2, r3, #5
 80010a4:	d502      	bpl.n	80010ac <__aeabi_fsub+0x268>
 80010a6:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <__aeabi_fsub+0x38c>)
 80010a8:	3401      	adds	r4, #1
 80010aa:	4013      	ands	r3, r2
 80010ac:	075a      	lsls	r2, r3, #29
 80010ae:	d000      	beq.n	80010b2 <__aeabi_fsub+0x26e>
 80010b0:	e720      	b.n	8000ef4 <__aeabi_fsub+0xb0>
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	2cff      	cmp	r4, #255	; 0xff
 80010b6:	d100      	bne.n	80010ba <__aeabi_fsub+0x276>
 80010b8:	e77a      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 80010ba:	025b      	lsls	r3, r3, #9
 80010bc:	0a5f      	lsrs	r7, r3, #9
 80010be:	b2e0      	uxtb	r0, r4
 80010c0:	e727      	b.n	8000f12 <__aeabi_fsub+0xce>
 80010c2:	20ff      	movs	r0, #255	; 0xff
 80010c4:	2700      	movs	r7, #0
 80010c6:	e724      	b.n	8000f12 <__aeabi_fsub+0xce>
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <__aeabi_fsub+0x38c>)
 80010ca:	1a24      	subs	r4, r4, r0
 80010cc:	4033      	ands	r3, r6
 80010ce:	e70f      	b.n	8000ef0 <__aeabi_fsub+0xac>
 80010d0:	2eff      	cmp	r6, #255	; 0xff
 80010d2:	d100      	bne.n	80010d6 <__aeabi_fsub+0x292>
 80010d4:	e76a      	b.n	8000fac <__aeabi_fsub+0x168>
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	4662      	mov	r2, ip
 80010da:	04db      	lsls	r3, r3, #19
 80010dc:	431a      	orrs	r2, r3
 80010de:	4694      	mov	ip, r2
 80010e0:	2301      	movs	r3, #1
 80010e2:	281b      	cmp	r0, #27
 80010e4:	dc09      	bgt.n	80010fa <__aeabi_fsub+0x2b6>
 80010e6:	2420      	movs	r4, #32
 80010e8:	4663      	mov	r3, ip
 80010ea:	4662      	mov	r2, ip
 80010ec:	40c3      	lsrs	r3, r0
 80010ee:	1a20      	subs	r0, r4, r0
 80010f0:	4082      	lsls	r2, r0
 80010f2:	0010      	movs	r0, r2
 80010f4:	1e44      	subs	r4, r0, #1
 80010f6:	41a0      	sbcs	r0, r4
 80010f8:	4303      	orrs	r3, r0
 80010fa:	4652      	mov	r2, sl
 80010fc:	000d      	movs	r5, r1
 80010fe:	0034      	movs	r4, r6
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	e6dc      	b.n	8000ebe <__aeabi_fsub+0x7a>
 8001104:	4663      	mov	r3, ip
 8001106:	4652      	mov	r2, sl
 8001108:	1a9e      	subs	r6, r3, r2
 800110a:	0173      	lsls	r3, r6, #5
 800110c:	d417      	bmi.n	800113e <__aeabi_fsub+0x2fa>
 800110e:	2e00      	cmp	r6, #0
 8001110:	d000      	beq.n	8001114 <__aeabi_fsub+0x2d0>
 8001112:	e6d9      	b.n	8000ec8 <__aeabi_fsub+0x84>
 8001114:	2500      	movs	r5, #0
 8001116:	2000      	movs	r0, #0
 8001118:	2700      	movs	r7, #0
 800111a:	e6fa      	b.n	8000f12 <__aeabi_fsub+0xce>
 800111c:	4663      	mov	r3, ip
 800111e:	2b00      	cmp	r3, #0
 8001120:	d044      	beq.n	80011ac <__aeabi_fsub+0x368>
 8001122:	3901      	subs	r1, #1
 8001124:	2900      	cmp	r1, #0
 8001126:	d04c      	beq.n	80011c2 <__aeabi_fsub+0x37e>
 8001128:	2eff      	cmp	r6, #255	; 0xff
 800112a:	d000      	beq.n	800112e <__aeabi_fsub+0x2ea>
 800112c:	e771      	b.n	8001012 <__aeabi_fsub+0x1ce>
 800112e:	4643      	mov	r3, r8
 8001130:	e73e      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001132:	2cff      	cmp	r4, #255	; 0xff
 8001134:	d0c5      	beq.n	80010c2 <__aeabi_fsub+0x27e>
 8001136:	4652      	mov	r2, sl
 8001138:	4462      	add	r2, ip
 800113a:	0853      	lsrs	r3, r2, #1
 800113c:	e7b6      	b.n	80010ac <__aeabi_fsub+0x268>
 800113e:	4663      	mov	r3, ip
 8001140:	000d      	movs	r5, r1
 8001142:	1ad6      	subs	r6, r2, r3
 8001144:	e6c0      	b.n	8000ec8 <__aeabi_fsub+0x84>
 8001146:	4662      	mov	r2, ip
 8001148:	2a00      	cmp	r2, #0
 800114a:	d116      	bne.n	800117a <__aeabi_fsub+0x336>
 800114c:	4653      	mov	r3, sl
 800114e:	2b00      	cmp	r3, #0
 8001150:	d000      	beq.n	8001154 <__aeabi_fsub+0x310>
 8001152:	e72b      	b.n	8000fac <__aeabi_fsub+0x168>
 8001154:	2780      	movs	r7, #128	; 0x80
 8001156:	2500      	movs	r5, #0
 8001158:	20ff      	movs	r0, #255	; 0xff
 800115a:	03ff      	lsls	r7, r7, #15
 800115c:	e6d9      	b.n	8000f12 <__aeabi_fsub+0xce>
 800115e:	000d      	movs	r5, r1
 8001160:	4643      	mov	r3, r8
 8001162:	0034      	movs	r4, r6
 8001164:	e7a6      	b.n	80010b4 <__aeabi_fsub+0x270>
 8001166:	4653      	mov	r3, sl
 8001168:	4463      	add	r3, ip
 800116a:	e6f7      	b.n	8000f5c <__aeabi_fsub+0x118>
 800116c:	4663      	mov	r3, ip
 800116e:	4652      	mov	r2, sl
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	e6a4      	b.n	8000ebe <__aeabi_fsub+0x7a>
 8001174:	4662      	mov	r2, ip
 8001176:	2a00      	cmp	r2, #0
 8001178:	d0d9      	beq.n	800112e <__aeabi_fsub+0x2ea>
 800117a:	4652      	mov	r2, sl
 800117c:	2a00      	cmp	r2, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x33e>
 8001180:	e716      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	03d2      	lsls	r2, r2, #15
 8001186:	4213      	tst	r3, r2
 8001188:	d100      	bne.n	800118c <__aeabi_fsub+0x348>
 800118a:	e711      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 800118c:	4640      	mov	r0, r8
 800118e:	4210      	tst	r0, r2
 8001190:	d000      	beq.n	8001194 <__aeabi_fsub+0x350>
 8001192:	e70d      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001194:	e70a      	b.n	8000fac <__aeabi_fsub+0x168>
 8001196:	4652      	mov	r2, sl
 8001198:	000d      	movs	r5, r1
 800119a:	0034      	movs	r4, r6
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	e68e      	b.n	8000ebe <__aeabi_fsub+0x7a>
 80011a0:	4653      	mov	r3, sl
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <__aeabi_fsub+0x374>
 80011a6:	000d      	movs	r5, r1
 80011a8:	4647      	mov	r7, r8
 80011aa:	e6b2      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011ac:	4643      	mov	r3, r8
 80011ae:	0034      	movs	r4, r6
 80011b0:	e780      	b.n	80010b4 <__aeabi_fsub+0x270>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d000      	beq.n	80011b8 <__aeabi_fsub+0x374>
 80011b6:	e779      	b.n	80010ac <__aeabi_fsub+0x268>
 80011b8:	2500      	movs	r5, #0
 80011ba:	2700      	movs	r7, #0
 80011bc:	e6a9      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011be:	4647      	mov	r7, r8
 80011c0:	e6a7      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011c2:	4653      	mov	r3, sl
 80011c4:	0034      	movs	r4, r6
 80011c6:	4463      	add	r3, ip
 80011c8:	e6c8      	b.n	8000f5c <__aeabi_fsub+0x118>
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	7dffffff 	.word	0x7dffffff
 80011d0:	fbffffff 	.word	0xfbffffff

080011d4 <__aeabi_f2iz>:
 80011d4:	0241      	lsls	r1, r0, #9
 80011d6:	0042      	lsls	r2, r0, #1
 80011d8:	0fc3      	lsrs	r3, r0, #31
 80011da:	0a49      	lsrs	r1, r1, #9
 80011dc:	2000      	movs	r0, #0
 80011de:	0e12      	lsrs	r2, r2, #24
 80011e0:	2a7e      	cmp	r2, #126	; 0x7e
 80011e2:	d903      	bls.n	80011ec <__aeabi_f2iz+0x18>
 80011e4:	2a9d      	cmp	r2, #157	; 0x9d
 80011e6:	d902      	bls.n	80011ee <__aeabi_f2iz+0x1a>
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <__aeabi_f2iz+0x3c>)
 80011ea:	1898      	adds	r0, r3, r2
 80011ec:	4770      	bx	lr
 80011ee:	2080      	movs	r0, #128	; 0x80
 80011f0:	0400      	lsls	r0, r0, #16
 80011f2:	4301      	orrs	r1, r0
 80011f4:	2a95      	cmp	r2, #149	; 0x95
 80011f6:	dc07      	bgt.n	8001208 <__aeabi_f2iz+0x34>
 80011f8:	2096      	movs	r0, #150	; 0x96
 80011fa:	1a82      	subs	r2, r0, r2
 80011fc:	40d1      	lsrs	r1, r2
 80011fe:	4248      	negs	r0, r1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f3      	bne.n	80011ec <__aeabi_f2iz+0x18>
 8001204:	0008      	movs	r0, r1
 8001206:	e7f1      	b.n	80011ec <__aeabi_f2iz+0x18>
 8001208:	3a96      	subs	r2, #150	; 0x96
 800120a:	4091      	lsls	r1, r2
 800120c:	e7f7      	b.n	80011fe <__aeabi_f2iz+0x2a>
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	7fffffff 	.word	0x7fffffff

08001214 <__aeabi_i2f>:
 8001214:	b570      	push	{r4, r5, r6, lr}
 8001216:	2800      	cmp	r0, #0
 8001218:	d013      	beq.n	8001242 <__aeabi_i2f+0x2e>
 800121a:	17c3      	asrs	r3, r0, #31
 800121c:	18c5      	adds	r5, r0, r3
 800121e:	405d      	eors	r5, r3
 8001220:	0fc4      	lsrs	r4, r0, #31
 8001222:	0028      	movs	r0, r5
 8001224:	f001 ff60 	bl	80030e8 <__clzsi2>
 8001228:	239e      	movs	r3, #158	; 0x9e
 800122a:	0001      	movs	r1, r0
 800122c:	1a1b      	subs	r3, r3, r0
 800122e:	2b96      	cmp	r3, #150	; 0x96
 8001230:	dc0f      	bgt.n	8001252 <__aeabi_i2f+0x3e>
 8001232:	2808      	cmp	r0, #8
 8001234:	dd01      	ble.n	800123a <__aeabi_i2f+0x26>
 8001236:	3908      	subs	r1, #8
 8001238:	408d      	lsls	r5, r1
 800123a:	026d      	lsls	r5, r5, #9
 800123c:	0a6d      	lsrs	r5, r5, #9
 800123e:	b2d8      	uxtb	r0, r3
 8001240:	e002      	b.n	8001248 <__aeabi_i2f+0x34>
 8001242:	2400      	movs	r4, #0
 8001244:	2000      	movs	r0, #0
 8001246:	2500      	movs	r5, #0
 8001248:	05c0      	lsls	r0, r0, #23
 800124a:	4328      	orrs	r0, r5
 800124c:	07e4      	lsls	r4, r4, #31
 800124e:	4320      	orrs	r0, r4
 8001250:	bd70      	pop	{r4, r5, r6, pc}
 8001252:	2b99      	cmp	r3, #153	; 0x99
 8001254:	dd0b      	ble.n	800126e <__aeabi_i2f+0x5a>
 8001256:	2205      	movs	r2, #5
 8001258:	002e      	movs	r6, r5
 800125a:	1a12      	subs	r2, r2, r0
 800125c:	40d6      	lsrs	r6, r2
 800125e:	0002      	movs	r2, r0
 8001260:	321b      	adds	r2, #27
 8001262:	4095      	lsls	r5, r2
 8001264:	0028      	movs	r0, r5
 8001266:	1e45      	subs	r5, r0, #1
 8001268:	41a8      	sbcs	r0, r5
 800126a:	0035      	movs	r5, r6
 800126c:	4305      	orrs	r5, r0
 800126e:	2905      	cmp	r1, #5
 8001270:	dd01      	ble.n	8001276 <__aeabi_i2f+0x62>
 8001272:	1f4a      	subs	r2, r1, #5
 8001274:	4095      	lsls	r5, r2
 8001276:	002a      	movs	r2, r5
 8001278:	4e08      	ldr	r6, [pc, #32]	; (800129c <__aeabi_i2f+0x88>)
 800127a:	4032      	ands	r2, r6
 800127c:	0768      	lsls	r0, r5, #29
 800127e:	d009      	beq.n	8001294 <__aeabi_i2f+0x80>
 8001280:	200f      	movs	r0, #15
 8001282:	4028      	ands	r0, r5
 8001284:	2804      	cmp	r0, #4
 8001286:	d005      	beq.n	8001294 <__aeabi_i2f+0x80>
 8001288:	3204      	adds	r2, #4
 800128a:	0150      	lsls	r0, r2, #5
 800128c:	d502      	bpl.n	8001294 <__aeabi_i2f+0x80>
 800128e:	239f      	movs	r3, #159	; 0x9f
 8001290:	4032      	ands	r2, r6
 8001292:	1a5b      	subs	r3, r3, r1
 8001294:	0192      	lsls	r2, r2, #6
 8001296:	0a55      	lsrs	r5, r2, #9
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	e7d5      	b.n	8001248 <__aeabi_i2f+0x34>
 800129c:	fbffffff 	.word	0xfbffffff

080012a0 <__aeabi_ui2f>:
 80012a0:	b570      	push	{r4, r5, r6, lr}
 80012a2:	1e05      	subs	r5, r0, #0
 80012a4:	d00e      	beq.n	80012c4 <__aeabi_ui2f+0x24>
 80012a6:	f001 ff1f 	bl	80030e8 <__clzsi2>
 80012aa:	239e      	movs	r3, #158	; 0x9e
 80012ac:	0004      	movs	r4, r0
 80012ae:	1a1b      	subs	r3, r3, r0
 80012b0:	2b96      	cmp	r3, #150	; 0x96
 80012b2:	dc0c      	bgt.n	80012ce <__aeabi_ui2f+0x2e>
 80012b4:	2808      	cmp	r0, #8
 80012b6:	dd01      	ble.n	80012bc <__aeabi_ui2f+0x1c>
 80012b8:	3c08      	subs	r4, #8
 80012ba:	40a5      	lsls	r5, r4
 80012bc:	026d      	lsls	r5, r5, #9
 80012be:	0a6d      	lsrs	r5, r5, #9
 80012c0:	b2d8      	uxtb	r0, r3
 80012c2:	e001      	b.n	80012c8 <__aeabi_ui2f+0x28>
 80012c4:	2000      	movs	r0, #0
 80012c6:	2500      	movs	r5, #0
 80012c8:	05c0      	lsls	r0, r0, #23
 80012ca:	4328      	orrs	r0, r5
 80012cc:	bd70      	pop	{r4, r5, r6, pc}
 80012ce:	2b99      	cmp	r3, #153	; 0x99
 80012d0:	dd09      	ble.n	80012e6 <__aeabi_ui2f+0x46>
 80012d2:	0002      	movs	r2, r0
 80012d4:	0029      	movs	r1, r5
 80012d6:	321b      	adds	r2, #27
 80012d8:	4091      	lsls	r1, r2
 80012da:	1e4a      	subs	r2, r1, #1
 80012dc:	4191      	sbcs	r1, r2
 80012de:	2205      	movs	r2, #5
 80012e0:	1a12      	subs	r2, r2, r0
 80012e2:	40d5      	lsrs	r5, r2
 80012e4:	430d      	orrs	r5, r1
 80012e6:	2c05      	cmp	r4, #5
 80012e8:	dd01      	ble.n	80012ee <__aeabi_ui2f+0x4e>
 80012ea:	1f62      	subs	r2, r4, #5
 80012ec:	4095      	lsls	r5, r2
 80012ee:	0029      	movs	r1, r5
 80012f0:	4e08      	ldr	r6, [pc, #32]	; (8001314 <__aeabi_ui2f+0x74>)
 80012f2:	4031      	ands	r1, r6
 80012f4:	076a      	lsls	r2, r5, #29
 80012f6:	d009      	beq.n	800130c <__aeabi_ui2f+0x6c>
 80012f8:	200f      	movs	r0, #15
 80012fa:	4028      	ands	r0, r5
 80012fc:	2804      	cmp	r0, #4
 80012fe:	d005      	beq.n	800130c <__aeabi_ui2f+0x6c>
 8001300:	3104      	adds	r1, #4
 8001302:	014a      	lsls	r2, r1, #5
 8001304:	d502      	bpl.n	800130c <__aeabi_ui2f+0x6c>
 8001306:	239f      	movs	r3, #159	; 0x9f
 8001308:	4031      	ands	r1, r6
 800130a:	1b1b      	subs	r3, r3, r4
 800130c:	0189      	lsls	r1, r1, #6
 800130e:	0a4d      	lsrs	r5, r1, #9
 8001310:	b2d8      	uxtb	r0, r3
 8001312:	e7d9      	b.n	80012c8 <__aeabi_ui2f+0x28>
 8001314:	fbffffff 	.word	0xfbffffff

08001318 <__aeabi_dadd>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	464f      	mov	r7, r9
 800131c:	46d6      	mov	lr, sl
 800131e:	4646      	mov	r6, r8
 8001320:	000d      	movs	r5, r1
 8001322:	0001      	movs	r1, r0
 8001324:	0018      	movs	r0, r3
 8001326:	b5c0      	push	{r6, r7, lr}
 8001328:	0017      	movs	r7, r2
 800132a:	032b      	lsls	r3, r5, #12
 800132c:	0a5a      	lsrs	r2, r3, #9
 800132e:	0f4b      	lsrs	r3, r1, #29
 8001330:	4313      	orrs	r3, r2
 8001332:	00ca      	lsls	r2, r1, #3
 8001334:	4691      	mov	r9, r2
 8001336:	0302      	lsls	r2, r0, #12
 8001338:	006e      	lsls	r6, r5, #1
 800133a:	0041      	lsls	r1, r0, #1
 800133c:	0a52      	lsrs	r2, r2, #9
 800133e:	0fec      	lsrs	r4, r5, #31
 8001340:	0f7d      	lsrs	r5, r7, #29
 8001342:	4315      	orrs	r5, r2
 8001344:	0d76      	lsrs	r6, r6, #21
 8001346:	0d49      	lsrs	r1, r1, #21
 8001348:	0fc0      	lsrs	r0, r0, #31
 800134a:	4682      	mov	sl, r0
 800134c:	46ac      	mov	ip, r5
 800134e:	00ff      	lsls	r7, r7, #3
 8001350:	1a72      	subs	r2, r6, r1
 8001352:	4284      	cmp	r4, r0
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x40>
 8001356:	e098      	b.n	800148a <__aeabi_dadd+0x172>
 8001358:	2a00      	cmp	r2, #0
 800135a:	dc00      	bgt.n	800135e <__aeabi_dadd+0x46>
 800135c:	e081      	b.n	8001462 <__aeabi_dadd+0x14a>
 800135e:	2900      	cmp	r1, #0
 8001360:	d100      	bne.n	8001364 <__aeabi_dadd+0x4c>
 8001362:	e0b6      	b.n	80014d2 <__aeabi_dadd+0x1ba>
 8001364:	49c9      	ldr	r1, [pc, #804]	; (800168c <__aeabi_dadd+0x374>)
 8001366:	428e      	cmp	r6, r1
 8001368:	d100      	bne.n	800136c <__aeabi_dadd+0x54>
 800136a:	e172      	b.n	8001652 <__aeabi_dadd+0x33a>
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	0028      	movs	r0, r5
 8001370:	0409      	lsls	r1, r1, #16
 8001372:	4308      	orrs	r0, r1
 8001374:	4684      	mov	ip, r0
 8001376:	2a38      	cmp	r2, #56	; 0x38
 8001378:	dd00      	ble.n	800137c <__aeabi_dadd+0x64>
 800137a:	e15e      	b.n	800163a <__aeabi_dadd+0x322>
 800137c:	2a1f      	cmp	r2, #31
 800137e:	dd00      	ble.n	8001382 <__aeabi_dadd+0x6a>
 8001380:	e1ee      	b.n	8001760 <__aeabi_dadd+0x448>
 8001382:	2020      	movs	r0, #32
 8001384:	0039      	movs	r1, r7
 8001386:	4665      	mov	r5, ip
 8001388:	1a80      	subs	r0, r0, r2
 800138a:	4087      	lsls	r7, r0
 800138c:	40d1      	lsrs	r1, r2
 800138e:	4085      	lsls	r5, r0
 8001390:	430d      	orrs	r5, r1
 8001392:	0039      	movs	r1, r7
 8001394:	1e4f      	subs	r7, r1, #1
 8001396:	41b9      	sbcs	r1, r7
 8001398:	4667      	mov	r7, ip
 800139a:	40d7      	lsrs	r7, r2
 800139c:	4329      	orrs	r1, r5
 800139e:	1bdb      	subs	r3, r3, r7
 80013a0:	464a      	mov	r2, r9
 80013a2:	1a55      	subs	r5, r2, r1
 80013a4:	45a9      	cmp	r9, r5
 80013a6:	4189      	sbcs	r1, r1
 80013a8:	4249      	negs	r1, r1
 80013aa:	1a5b      	subs	r3, r3, r1
 80013ac:	4698      	mov	r8, r3
 80013ae:	4643      	mov	r3, r8
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	d400      	bmi.n	80013b6 <__aeabi_dadd+0x9e>
 80013b4:	e0cc      	b.n	8001550 <__aeabi_dadd+0x238>
 80013b6:	4643      	mov	r3, r8
 80013b8:	025b      	lsls	r3, r3, #9
 80013ba:	0a5b      	lsrs	r3, r3, #9
 80013bc:	4698      	mov	r8, r3
 80013be:	4643      	mov	r3, r8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dadd+0xae>
 80013c4:	e12c      	b.n	8001620 <__aeabi_dadd+0x308>
 80013c6:	4640      	mov	r0, r8
 80013c8:	f001 fe8e 	bl	80030e8 <__clzsi2>
 80013cc:	0001      	movs	r1, r0
 80013ce:	3908      	subs	r1, #8
 80013d0:	2220      	movs	r2, #32
 80013d2:	0028      	movs	r0, r5
 80013d4:	4643      	mov	r3, r8
 80013d6:	1a52      	subs	r2, r2, r1
 80013d8:	408b      	lsls	r3, r1
 80013da:	40d0      	lsrs	r0, r2
 80013dc:	408d      	lsls	r5, r1
 80013de:	4303      	orrs	r3, r0
 80013e0:	428e      	cmp	r6, r1
 80013e2:	dd00      	ble.n	80013e6 <__aeabi_dadd+0xce>
 80013e4:	e117      	b.n	8001616 <__aeabi_dadd+0x2fe>
 80013e6:	1b8e      	subs	r6, r1, r6
 80013e8:	1c72      	adds	r2, r6, #1
 80013ea:	2a1f      	cmp	r2, #31
 80013ec:	dd00      	ble.n	80013f0 <__aeabi_dadd+0xd8>
 80013ee:	e1a7      	b.n	8001740 <__aeabi_dadd+0x428>
 80013f0:	2120      	movs	r1, #32
 80013f2:	0018      	movs	r0, r3
 80013f4:	002e      	movs	r6, r5
 80013f6:	1a89      	subs	r1, r1, r2
 80013f8:	408d      	lsls	r5, r1
 80013fa:	4088      	lsls	r0, r1
 80013fc:	40d6      	lsrs	r6, r2
 80013fe:	40d3      	lsrs	r3, r2
 8001400:	1e69      	subs	r1, r5, #1
 8001402:	418d      	sbcs	r5, r1
 8001404:	4330      	orrs	r0, r6
 8001406:	4698      	mov	r8, r3
 8001408:	2600      	movs	r6, #0
 800140a:	4305      	orrs	r5, r0
 800140c:	076b      	lsls	r3, r5, #29
 800140e:	d009      	beq.n	8001424 <__aeabi_dadd+0x10c>
 8001410:	230f      	movs	r3, #15
 8001412:	402b      	ands	r3, r5
 8001414:	2b04      	cmp	r3, #4
 8001416:	d005      	beq.n	8001424 <__aeabi_dadd+0x10c>
 8001418:	1d2b      	adds	r3, r5, #4
 800141a:	42ab      	cmp	r3, r5
 800141c:	41ad      	sbcs	r5, r5
 800141e:	426d      	negs	r5, r5
 8001420:	44a8      	add	r8, r5
 8001422:	001d      	movs	r5, r3
 8001424:	4643      	mov	r3, r8
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	d400      	bmi.n	800142c <__aeabi_dadd+0x114>
 800142a:	e094      	b.n	8001556 <__aeabi_dadd+0x23e>
 800142c:	4b97      	ldr	r3, [pc, #604]	; (800168c <__aeabi_dadd+0x374>)
 800142e:	1c72      	adds	r2, r6, #1
 8001430:	429a      	cmp	r2, r3
 8001432:	d100      	bne.n	8001436 <__aeabi_dadd+0x11e>
 8001434:	e09d      	b.n	8001572 <__aeabi_dadd+0x25a>
 8001436:	4641      	mov	r1, r8
 8001438:	4b95      	ldr	r3, [pc, #596]	; (8001690 <__aeabi_dadd+0x378>)
 800143a:	08ed      	lsrs	r5, r5, #3
 800143c:	4019      	ands	r1, r3
 800143e:	000b      	movs	r3, r1
 8001440:	0552      	lsls	r2, r2, #21
 8001442:	0749      	lsls	r1, r1, #29
 8001444:	025b      	lsls	r3, r3, #9
 8001446:	4329      	orrs	r1, r5
 8001448:	0b1b      	lsrs	r3, r3, #12
 800144a:	0d52      	lsrs	r2, r2, #21
 800144c:	0512      	lsls	r2, r2, #20
 800144e:	4313      	orrs	r3, r2
 8001450:	07e4      	lsls	r4, r4, #31
 8001452:	4323      	orrs	r3, r4
 8001454:	0008      	movs	r0, r1
 8001456:	0019      	movs	r1, r3
 8001458:	bce0      	pop	{r5, r6, r7}
 800145a:	46ba      	mov	sl, r7
 800145c:	46b1      	mov	r9, r6
 800145e:	46a8      	mov	r8, r5
 8001460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001462:	2a00      	cmp	r2, #0
 8001464:	d043      	beq.n	80014ee <__aeabi_dadd+0x1d6>
 8001466:	1b8a      	subs	r2, r1, r6
 8001468:	2e00      	cmp	r6, #0
 800146a:	d000      	beq.n	800146e <__aeabi_dadd+0x156>
 800146c:	e12a      	b.n	80016c4 <__aeabi_dadd+0x3ac>
 800146e:	464c      	mov	r4, r9
 8001470:	431c      	orrs	r4, r3
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x15e>
 8001474:	e1d1      	b.n	800181a <__aeabi_dadd+0x502>
 8001476:	1e54      	subs	r4, r2, #1
 8001478:	2a01      	cmp	r2, #1
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x166>
 800147c:	e21f      	b.n	80018be <__aeabi_dadd+0x5a6>
 800147e:	4d83      	ldr	r5, [pc, #524]	; (800168c <__aeabi_dadd+0x374>)
 8001480:	42aa      	cmp	r2, r5
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x16e>
 8001484:	e272      	b.n	800196c <__aeabi_dadd+0x654>
 8001486:	0022      	movs	r2, r4
 8001488:	e123      	b.n	80016d2 <__aeabi_dadd+0x3ba>
 800148a:	2a00      	cmp	r2, #0
 800148c:	dc00      	bgt.n	8001490 <__aeabi_dadd+0x178>
 800148e:	e098      	b.n	80015c2 <__aeabi_dadd+0x2aa>
 8001490:	2900      	cmp	r1, #0
 8001492:	d042      	beq.n	800151a <__aeabi_dadd+0x202>
 8001494:	497d      	ldr	r1, [pc, #500]	; (800168c <__aeabi_dadd+0x374>)
 8001496:	428e      	cmp	r6, r1
 8001498:	d100      	bne.n	800149c <__aeabi_dadd+0x184>
 800149a:	e0da      	b.n	8001652 <__aeabi_dadd+0x33a>
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	0028      	movs	r0, r5
 80014a0:	0409      	lsls	r1, r1, #16
 80014a2:	4308      	orrs	r0, r1
 80014a4:	4684      	mov	ip, r0
 80014a6:	2a38      	cmp	r2, #56	; 0x38
 80014a8:	dd00      	ble.n	80014ac <__aeabi_dadd+0x194>
 80014aa:	e129      	b.n	8001700 <__aeabi_dadd+0x3e8>
 80014ac:	2a1f      	cmp	r2, #31
 80014ae:	dc00      	bgt.n	80014b2 <__aeabi_dadd+0x19a>
 80014b0:	e187      	b.n	80017c2 <__aeabi_dadd+0x4aa>
 80014b2:	0011      	movs	r1, r2
 80014b4:	4665      	mov	r5, ip
 80014b6:	3920      	subs	r1, #32
 80014b8:	40cd      	lsrs	r5, r1
 80014ba:	2a20      	cmp	r2, #32
 80014bc:	d004      	beq.n	80014c8 <__aeabi_dadd+0x1b0>
 80014be:	2040      	movs	r0, #64	; 0x40
 80014c0:	4661      	mov	r1, ip
 80014c2:	1a82      	subs	r2, r0, r2
 80014c4:	4091      	lsls	r1, r2
 80014c6:	430f      	orrs	r7, r1
 80014c8:	0039      	movs	r1, r7
 80014ca:	1e4f      	subs	r7, r1, #1
 80014cc:	41b9      	sbcs	r1, r7
 80014ce:	430d      	orrs	r5, r1
 80014d0:	e11b      	b.n	800170a <__aeabi_dadd+0x3f2>
 80014d2:	0029      	movs	r1, r5
 80014d4:	4339      	orrs	r1, r7
 80014d6:	d100      	bne.n	80014da <__aeabi_dadd+0x1c2>
 80014d8:	e0b5      	b.n	8001646 <__aeabi_dadd+0x32e>
 80014da:	1e51      	subs	r1, r2, #1
 80014dc:	2a01      	cmp	r2, #1
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x1ca>
 80014e0:	e1ab      	b.n	800183a <__aeabi_dadd+0x522>
 80014e2:	486a      	ldr	r0, [pc, #424]	; (800168c <__aeabi_dadd+0x374>)
 80014e4:	4282      	cmp	r2, r0
 80014e6:	d100      	bne.n	80014ea <__aeabi_dadd+0x1d2>
 80014e8:	e1b2      	b.n	8001850 <__aeabi_dadd+0x538>
 80014ea:	000a      	movs	r2, r1
 80014ec:	e743      	b.n	8001376 <__aeabi_dadd+0x5e>
 80014ee:	4969      	ldr	r1, [pc, #420]	; (8001694 <__aeabi_dadd+0x37c>)
 80014f0:	1c75      	adds	r5, r6, #1
 80014f2:	420d      	tst	r5, r1
 80014f4:	d000      	beq.n	80014f8 <__aeabi_dadd+0x1e0>
 80014f6:	e0cf      	b.n	8001698 <__aeabi_dadd+0x380>
 80014f8:	2e00      	cmp	r6, #0
 80014fa:	d000      	beq.n	80014fe <__aeabi_dadd+0x1e6>
 80014fc:	e193      	b.n	8001826 <__aeabi_dadd+0x50e>
 80014fe:	4649      	mov	r1, r9
 8001500:	4319      	orrs	r1, r3
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x1ee>
 8001504:	e1d1      	b.n	80018aa <__aeabi_dadd+0x592>
 8001506:	4661      	mov	r1, ip
 8001508:	4339      	orrs	r1, r7
 800150a:	d000      	beq.n	800150e <__aeabi_dadd+0x1f6>
 800150c:	e1e3      	b.n	80018d6 <__aeabi_dadd+0x5be>
 800150e:	4649      	mov	r1, r9
 8001510:	0758      	lsls	r0, r3, #29
 8001512:	08c9      	lsrs	r1, r1, #3
 8001514:	4301      	orrs	r1, r0
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	e026      	b.n	8001568 <__aeabi_dadd+0x250>
 800151a:	0029      	movs	r1, r5
 800151c:	4339      	orrs	r1, r7
 800151e:	d100      	bne.n	8001522 <__aeabi_dadd+0x20a>
 8001520:	e091      	b.n	8001646 <__aeabi_dadd+0x32e>
 8001522:	1e51      	subs	r1, r2, #1
 8001524:	2a01      	cmp	r2, #1
 8001526:	d005      	beq.n	8001534 <__aeabi_dadd+0x21c>
 8001528:	4858      	ldr	r0, [pc, #352]	; (800168c <__aeabi_dadd+0x374>)
 800152a:	4282      	cmp	r2, r0
 800152c:	d100      	bne.n	8001530 <__aeabi_dadd+0x218>
 800152e:	e18f      	b.n	8001850 <__aeabi_dadd+0x538>
 8001530:	000a      	movs	r2, r1
 8001532:	e7b8      	b.n	80014a6 <__aeabi_dadd+0x18e>
 8001534:	003d      	movs	r5, r7
 8001536:	444d      	add	r5, r9
 8001538:	454d      	cmp	r5, r9
 800153a:	4189      	sbcs	r1, r1
 800153c:	4463      	add	r3, ip
 800153e:	4698      	mov	r8, r3
 8001540:	4249      	negs	r1, r1
 8001542:	4488      	add	r8, r1
 8001544:	4643      	mov	r3, r8
 8001546:	2602      	movs	r6, #2
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	d500      	bpl.n	800154e <__aeabi_dadd+0x236>
 800154c:	e0eb      	b.n	8001726 <__aeabi_dadd+0x40e>
 800154e:	3e01      	subs	r6, #1
 8001550:	076b      	lsls	r3, r5, #29
 8001552:	d000      	beq.n	8001556 <__aeabi_dadd+0x23e>
 8001554:	e75c      	b.n	8001410 <__aeabi_dadd+0xf8>
 8001556:	4643      	mov	r3, r8
 8001558:	08e9      	lsrs	r1, r5, #3
 800155a:	075a      	lsls	r2, r3, #29
 800155c:	4311      	orrs	r1, r2
 800155e:	0032      	movs	r2, r6
 8001560:	08db      	lsrs	r3, r3, #3
 8001562:	484a      	ldr	r0, [pc, #296]	; (800168c <__aeabi_dadd+0x374>)
 8001564:	4282      	cmp	r2, r0
 8001566:	d021      	beq.n	80015ac <__aeabi_dadd+0x294>
 8001568:	031b      	lsls	r3, r3, #12
 800156a:	0552      	lsls	r2, r2, #21
 800156c:	0b1b      	lsrs	r3, r3, #12
 800156e:	0d52      	lsrs	r2, r2, #21
 8001570:	e76c      	b.n	800144c <__aeabi_dadd+0x134>
 8001572:	2300      	movs	r3, #0
 8001574:	2100      	movs	r1, #0
 8001576:	e769      	b.n	800144c <__aeabi_dadd+0x134>
 8001578:	002a      	movs	r2, r5
 800157a:	433a      	orrs	r2, r7
 800157c:	d069      	beq.n	8001652 <__aeabi_dadd+0x33a>
 800157e:	464a      	mov	r2, r9
 8001580:	0758      	lsls	r0, r3, #29
 8001582:	08d1      	lsrs	r1, r2, #3
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	031b      	lsls	r3, r3, #12
 800158a:	4308      	orrs	r0, r1
 800158c:	421a      	tst	r2, r3
 800158e:	d007      	beq.n	80015a0 <__aeabi_dadd+0x288>
 8001590:	0029      	movs	r1, r5
 8001592:	08ed      	lsrs	r5, r5, #3
 8001594:	421d      	tst	r5, r3
 8001596:	d103      	bne.n	80015a0 <__aeabi_dadd+0x288>
 8001598:	002a      	movs	r2, r5
 800159a:	08ff      	lsrs	r7, r7, #3
 800159c:	0748      	lsls	r0, r1, #29
 800159e:	4338      	orrs	r0, r7
 80015a0:	0f43      	lsrs	r3, r0, #29
 80015a2:	00c1      	lsls	r1, r0, #3
 80015a4:	075b      	lsls	r3, r3, #29
 80015a6:	08c9      	lsrs	r1, r1, #3
 80015a8:	4319      	orrs	r1, r3
 80015aa:	0013      	movs	r3, r2
 80015ac:	000a      	movs	r2, r1
 80015ae:	431a      	orrs	r2, r3
 80015b0:	d100      	bne.n	80015b4 <__aeabi_dadd+0x29c>
 80015b2:	e213      	b.n	80019dc <__aeabi_dadd+0x6c4>
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	0312      	lsls	r2, r2, #12
 80015b8:	4313      	orrs	r3, r2
 80015ba:	031b      	lsls	r3, r3, #12
 80015bc:	4a33      	ldr	r2, [pc, #204]	; (800168c <__aeabi_dadd+0x374>)
 80015be:	0b1b      	lsrs	r3, r3, #12
 80015c0:	e744      	b.n	800144c <__aeabi_dadd+0x134>
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	d04b      	beq.n	800165e <__aeabi_dadd+0x346>
 80015c6:	1b8a      	subs	r2, r1, r6
 80015c8:	2e00      	cmp	r6, #0
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x2b6>
 80015cc:	e0e7      	b.n	800179e <__aeabi_dadd+0x486>
 80015ce:	482f      	ldr	r0, [pc, #188]	; (800168c <__aeabi_dadd+0x374>)
 80015d0:	4281      	cmp	r1, r0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dadd+0x2be>
 80015d4:	e195      	b.n	8001902 <__aeabi_dadd+0x5ea>
 80015d6:	2080      	movs	r0, #128	; 0x80
 80015d8:	0400      	lsls	r0, r0, #16
 80015da:	4303      	orrs	r3, r0
 80015dc:	2a38      	cmp	r2, #56	; 0x38
 80015de:	dd00      	ble.n	80015e2 <__aeabi_dadd+0x2ca>
 80015e0:	e143      	b.n	800186a <__aeabi_dadd+0x552>
 80015e2:	2a1f      	cmp	r2, #31
 80015e4:	dd00      	ble.n	80015e8 <__aeabi_dadd+0x2d0>
 80015e6:	e1db      	b.n	80019a0 <__aeabi_dadd+0x688>
 80015e8:	2020      	movs	r0, #32
 80015ea:	001d      	movs	r5, r3
 80015ec:	464e      	mov	r6, r9
 80015ee:	1a80      	subs	r0, r0, r2
 80015f0:	4085      	lsls	r5, r0
 80015f2:	40d6      	lsrs	r6, r2
 80015f4:	4335      	orrs	r5, r6
 80015f6:	464e      	mov	r6, r9
 80015f8:	4086      	lsls	r6, r0
 80015fa:	0030      	movs	r0, r6
 80015fc:	40d3      	lsrs	r3, r2
 80015fe:	1e46      	subs	r6, r0, #1
 8001600:	41b0      	sbcs	r0, r6
 8001602:	449c      	add	ip, r3
 8001604:	4305      	orrs	r5, r0
 8001606:	19ed      	adds	r5, r5, r7
 8001608:	42bd      	cmp	r5, r7
 800160a:	419b      	sbcs	r3, r3
 800160c:	425b      	negs	r3, r3
 800160e:	4463      	add	r3, ip
 8001610:	4698      	mov	r8, r3
 8001612:	000e      	movs	r6, r1
 8001614:	e07f      	b.n	8001716 <__aeabi_dadd+0x3fe>
 8001616:	4a1e      	ldr	r2, [pc, #120]	; (8001690 <__aeabi_dadd+0x378>)
 8001618:	1a76      	subs	r6, r6, r1
 800161a:	4013      	ands	r3, r2
 800161c:	4698      	mov	r8, r3
 800161e:	e6f5      	b.n	800140c <__aeabi_dadd+0xf4>
 8001620:	0028      	movs	r0, r5
 8001622:	f001 fd61 	bl	80030e8 <__clzsi2>
 8001626:	0001      	movs	r1, r0
 8001628:	3118      	adds	r1, #24
 800162a:	291f      	cmp	r1, #31
 800162c:	dc00      	bgt.n	8001630 <__aeabi_dadd+0x318>
 800162e:	e6cf      	b.n	80013d0 <__aeabi_dadd+0xb8>
 8001630:	002b      	movs	r3, r5
 8001632:	3808      	subs	r0, #8
 8001634:	4083      	lsls	r3, r0
 8001636:	2500      	movs	r5, #0
 8001638:	e6d2      	b.n	80013e0 <__aeabi_dadd+0xc8>
 800163a:	4662      	mov	r2, ip
 800163c:	433a      	orrs	r2, r7
 800163e:	0011      	movs	r1, r2
 8001640:	1e4f      	subs	r7, r1, #1
 8001642:	41b9      	sbcs	r1, r7
 8001644:	e6ac      	b.n	80013a0 <__aeabi_dadd+0x88>
 8001646:	4649      	mov	r1, r9
 8001648:	0758      	lsls	r0, r3, #29
 800164a:	08c9      	lsrs	r1, r1, #3
 800164c:	4301      	orrs	r1, r0
 800164e:	08db      	lsrs	r3, r3, #3
 8001650:	e787      	b.n	8001562 <__aeabi_dadd+0x24a>
 8001652:	4649      	mov	r1, r9
 8001654:	075a      	lsls	r2, r3, #29
 8001656:	08c9      	lsrs	r1, r1, #3
 8001658:	4311      	orrs	r1, r2
 800165a:	08db      	lsrs	r3, r3, #3
 800165c:	e7a6      	b.n	80015ac <__aeabi_dadd+0x294>
 800165e:	490d      	ldr	r1, [pc, #52]	; (8001694 <__aeabi_dadd+0x37c>)
 8001660:	1c70      	adds	r0, r6, #1
 8001662:	4208      	tst	r0, r1
 8001664:	d000      	beq.n	8001668 <__aeabi_dadd+0x350>
 8001666:	e0bb      	b.n	80017e0 <__aeabi_dadd+0x4c8>
 8001668:	2e00      	cmp	r6, #0
 800166a:	d000      	beq.n	800166e <__aeabi_dadd+0x356>
 800166c:	e114      	b.n	8001898 <__aeabi_dadd+0x580>
 800166e:	4649      	mov	r1, r9
 8001670:	4319      	orrs	r1, r3
 8001672:	d100      	bne.n	8001676 <__aeabi_dadd+0x35e>
 8001674:	e175      	b.n	8001962 <__aeabi_dadd+0x64a>
 8001676:	0029      	movs	r1, r5
 8001678:	4339      	orrs	r1, r7
 800167a:	d000      	beq.n	800167e <__aeabi_dadd+0x366>
 800167c:	e17e      	b.n	800197c <__aeabi_dadd+0x664>
 800167e:	4649      	mov	r1, r9
 8001680:	0758      	lsls	r0, r3, #29
 8001682:	08c9      	lsrs	r1, r1, #3
 8001684:	4301      	orrs	r1, r0
 8001686:	08db      	lsrs	r3, r3, #3
 8001688:	e76e      	b.n	8001568 <__aeabi_dadd+0x250>
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	000007ff 	.word	0x000007ff
 8001690:	ff7fffff 	.word	0xff7fffff
 8001694:	000007fe 	.word	0x000007fe
 8001698:	4649      	mov	r1, r9
 800169a:	1bcd      	subs	r5, r1, r7
 800169c:	4661      	mov	r1, ip
 800169e:	1a58      	subs	r0, r3, r1
 80016a0:	45a9      	cmp	r9, r5
 80016a2:	4189      	sbcs	r1, r1
 80016a4:	4249      	negs	r1, r1
 80016a6:	4688      	mov	r8, r1
 80016a8:	0001      	movs	r1, r0
 80016aa:	4640      	mov	r0, r8
 80016ac:	1a09      	subs	r1, r1, r0
 80016ae:	4688      	mov	r8, r1
 80016b0:	0209      	lsls	r1, r1, #8
 80016b2:	d500      	bpl.n	80016b6 <__aeabi_dadd+0x39e>
 80016b4:	e0a6      	b.n	8001804 <__aeabi_dadd+0x4ec>
 80016b6:	4641      	mov	r1, r8
 80016b8:	4329      	orrs	r1, r5
 80016ba:	d000      	beq.n	80016be <__aeabi_dadd+0x3a6>
 80016bc:	e67f      	b.n	80013be <__aeabi_dadd+0xa6>
 80016be:	2300      	movs	r3, #0
 80016c0:	2400      	movs	r4, #0
 80016c2:	e751      	b.n	8001568 <__aeabi_dadd+0x250>
 80016c4:	4cc7      	ldr	r4, [pc, #796]	; (80019e4 <__aeabi_dadd+0x6cc>)
 80016c6:	42a1      	cmp	r1, r4
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x3b4>
 80016ca:	e0c7      	b.n	800185c <__aeabi_dadd+0x544>
 80016cc:	2480      	movs	r4, #128	; 0x80
 80016ce:	0424      	lsls	r4, r4, #16
 80016d0:	4323      	orrs	r3, r4
 80016d2:	2a38      	cmp	r2, #56	; 0x38
 80016d4:	dc54      	bgt.n	8001780 <__aeabi_dadd+0x468>
 80016d6:	2a1f      	cmp	r2, #31
 80016d8:	dd00      	ble.n	80016dc <__aeabi_dadd+0x3c4>
 80016da:	e0cc      	b.n	8001876 <__aeabi_dadd+0x55e>
 80016dc:	2420      	movs	r4, #32
 80016de:	4648      	mov	r0, r9
 80016e0:	1aa4      	subs	r4, r4, r2
 80016e2:	001d      	movs	r5, r3
 80016e4:	464e      	mov	r6, r9
 80016e6:	40a0      	lsls	r0, r4
 80016e8:	40d6      	lsrs	r6, r2
 80016ea:	40a5      	lsls	r5, r4
 80016ec:	0004      	movs	r4, r0
 80016ee:	40d3      	lsrs	r3, r2
 80016f0:	4662      	mov	r2, ip
 80016f2:	4335      	orrs	r5, r6
 80016f4:	1e66      	subs	r6, r4, #1
 80016f6:	41b4      	sbcs	r4, r6
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	469c      	mov	ip, r3
 80016fc:	4325      	orrs	r5, r4
 80016fe:	e044      	b.n	800178a <__aeabi_dadd+0x472>
 8001700:	4662      	mov	r2, ip
 8001702:	433a      	orrs	r2, r7
 8001704:	0015      	movs	r5, r2
 8001706:	1e6f      	subs	r7, r5, #1
 8001708:	41bd      	sbcs	r5, r7
 800170a:	444d      	add	r5, r9
 800170c:	454d      	cmp	r5, r9
 800170e:	4189      	sbcs	r1, r1
 8001710:	4249      	negs	r1, r1
 8001712:	4688      	mov	r8, r1
 8001714:	4498      	add	r8, r3
 8001716:	4643      	mov	r3, r8
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	d400      	bmi.n	800171e <__aeabi_dadd+0x406>
 800171c:	e718      	b.n	8001550 <__aeabi_dadd+0x238>
 800171e:	4bb1      	ldr	r3, [pc, #708]	; (80019e4 <__aeabi_dadd+0x6cc>)
 8001720:	3601      	adds	r6, #1
 8001722:	429e      	cmp	r6, r3
 8001724:	d049      	beq.n	80017ba <__aeabi_dadd+0x4a2>
 8001726:	4642      	mov	r2, r8
 8001728:	4baf      	ldr	r3, [pc, #700]	; (80019e8 <__aeabi_dadd+0x6d0>)
 800172a:	2101      	movs	r1, #1
 800172c:	401a      	ands	r2, r3
 800172e:	0013      	movs	r3, r2
 8001730:	086a      	lsrs	r2, r5, #1
 8001732:	400d      	ands	r5, r1
 8001734:	4315      	orrs	r5, r2
 8001736:	07d9      	lsls	r1, r3, #31
 8001738:	085b      	lsrs	r3, r3, #1
 800173a:	4698      	mov	r8, r3
 800173c:	430d      	orrs	r5, r1
 800173e:	e665      	b.n	800140c <__aeabi_dadd+0xf4>
 8001740:	0018      	movs	r0, r3
 8001742:	3e1f      	subs	r6, #31
 8001744:	40f0      	lsrs	r0, r6
 8001746:	2a20      	cmp	r2, #32
 8001748:	d003      	beq.n	8001752 <__aeabi_dadd+0x43a>
 800174a:	2140      	movs	r1, #64	; 0x40
 800174c:	1a8a      	subs	r2, r1, r2
 800174e:	4093      	lsls	r3, r2
 8001750:	431d      	orrs	r5, r3
 8001752:	1e69      	subs	r1, r5, #1
 8001754:	418d      	sbcs	r5, r1
 8001756:	2300      	movs	r3, #0
 8001758:	2600      	movs	r6, #0
 800175a:	4698      	mov	r8, r3
 800175c:	4305      	orrs	r5, r0
 800175e:	e6f7      	b.n	8001550 <__aeabi_dadd+0x238>
 8001760:	0011      	movs	r1, r2
 8001762:	4665      	mov	r5, ip
 8001764:	3920      	subs	r1, #32
 8001766:	40cd      	lsrs	r5, r1
 8001768:	2a20      	cmp	r2, #32
 800176a:	d004      	beq.n	8001776 <__aeabi_dadd+0x45e>
 800176c:	2040      	movs	r0, #64	; 0x40
 800176e:	4661      	mov	r1, ip
 8001770:	1a82      	subs	r2, r0, r2
 8001772:	4091      	lsls	r1, r2
 8001774:	430f      	orrs	r7, r1
 8001776:	0039      	movs	r1, r7
 8001778:	1e4f      	subs	r7, r1, #1
 800177a:	41b9      	sbcs	r1, r7
 800177c:	4329      	orrs	r1, r5
 800177e:	e60f      	b.n	80013a0 <__aeabi_dadd+0x88>
 8001780:	464a      	mov	r2, r9
 8001782:	4313      	orrs	r3, r2
 8001784:	001d      	movs	r5, r3
 8001786:	1e6b      	subs	r3, r5, #1
 8001788:	419d      	sbcs	r5, r3
 800178a:	1b7d      	subs	r5, r7, r5
 800178c:	42af      	cmp	r7, r5
 800178e:	419b      	sbcs	r3, r3
 8001790:	4662      	mov	r2, ip
 8001792:	425b      	negs	r3, r3
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	4698      	mov	r8, r3
 8001798:	4654      	mov	r4, sl
 800179a:	000e      	movs	r6, r1
 800179c:	e607      	b.n	80013ae <__aeabi_dadd+0x96>
 800179e:	4648      	mov	r0, r9
 80017a0:	4318      	orrs	r0, r3
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dadd+0x48e>
 80017a4:	e0b3      	b.n	800190e <__aeabi_dadd+0x5f6>
 80017a6:	1e50      	subs	r0, r2, #1
 80017a8:	2a01      	cmp	r2, #1
 80017aa:	d100      	bne.n	80017ae <__aeabi_dadd+0x496>
 80017ac:	e10d      	b.n	80019ca <__aeabi_dadd+0x6b2>
 80017ae:	4d8d      	ldr	r5, [pc, #564]	; (80019e4 <__aeabi_dadd+0x6cc>)
 80017b0:	42aa      	cmp	r2, r5
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dadd+0x49e>
 80017b4:	e0a5      	b.n	8001902 <__aeabi_dadd+0x5ea>
 80017b6:	0002      	movs	r2, r0
 80017b8:	e710      	b.n	80015dc <__aeabi_dadd+0x2c4>
 80017ba:	0032      	movs	r2, r6
 80017bc:	2300      	movs	r3, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	e644      	b.n	800144c <__aeabi_dadd+0x134>
 80017c2:	2120      	movs	r1, #32
 80017c4:	0038      	movs	r0, r7
 80017c6:	1a89      	subs	r1, r1, r2
 80017c8:	4665      	mov	r5, ip
 80017ca:	408f      	lsls	r7, r1
 80017cc:	408d      	lsls	r5, r1
 80017ce:	40d0      	lsrs	r0, r2
 80017d0:	1e79      	subs	r1, r7, #1
 80017d2:	418f      	sbcs	r7, r1
 80017d4:	4305      	orrs	r5, r0
 80017d6:	433d      	orrs	r5, r7
 80017d8:	4667      	mov	r7, ip
 80017da:	40d7      	lsrs	r7, r2
 80017dc:	19db      	adds	r3, r3, r7
 80017de:	e794      	b.n	800170a <__aeabi_dadd+0x3f2>
 80017e0:	4a80      	ldr	r2, [pc, #512]	; (80019e4 <__aeabi_dadd+0x6cc>)
 80017e2:	4290      	cmp	r0, r2
 80017e4:	d100      	bne.n	80017e8 <__aeabi_dadd+0x4d0>
 80017e6:	e0ec      	b.n	80019c2 <__aeabi_dadd+0x6aa>
 80017e8:	0039      	movs	r1, r7
 80017ea:	4449      	add	r1, r9
 80017ec:	4549      	cmp	r1, r9
 80017ee:	4192      	sbcs	r2, r2
 80017f0:	4463      	add	r3, ip
 80017f2:	4252      	negs	r2, r2
 80017f4:	189b      	adds	r3, r3, r2
 80017f6:	07dd      	lsls	r5, r3, #31
 80017f8:	0849      	lsrs	r1, r1, #1
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	4698      	mov	r8, r3
 80017fe:	0006      	movs	r6, r0
 8001800:	430d      	orrs	r5, r1
 8001802:	e6a5      	b.n	8001550 <__aeabi_dadd+0x238>
 8001804:	464a      	mov	r2, r9
 8001806:	1abd      	subs	r5, r7, r2
 8001808:	42af      	cmp	r7, r5
 800180a:	4189      	sbcs	r1, r1
 800180c:	4662      	mov	r2, ip
 800180e:	4249      	negs	r1, r1
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	1a5b      	subs	r3, r3, r1
 8001814:	4698      	mov	r8, r3
 8001816:	4654      	mov	r4, sl
 8001818:	e5d1      	b.n	80013be <__aeabi_dadd+0xa6>
 800181a:	076c      	lsls	r4, r5, #29
 800181c:	08f9      	lsrs	r1, r7, #3
 800181e:	4321      	orrs	r1, r4
 8001820:	08eb      	lsrs	r3, r5, #3
 8001822:	0004      	movs	r4, r0
 8001824:	e69d      	b.n	8001562 <__aeabi_dadd+0x24a>
 8001826:	464a      	mov	r2, r9
 8001828:	431a      	orrs	r2, r3
 800182a:	d175      	bne.n	8001918 <__aeabi_dadd+0x600>
 800182c:	4661      	mov	r1, ip
 800182e:	4339      	orrs	r1, r7
 8001830:	d114      	bne.n	800185c <__aeabi_dadd+0x544>
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	2400      	movs	r4, #0
 8001836:	031b      	lsls	r3, r3, #12
 8001838:	e6bc      	b.n	80015b4 <__aeabi_dadd+0x29c>
 800183a:	464a      	mov	r2, r9
 800183c:	1bd5      	subs	r5, r2, r7
 800183e:	45a9      	cmp	r9, r5
 8001840:	4189      	sbcs	r1, r1
 8001842:	4662      	mov	r2, ip
 8001844:	4249      	negs	r1, r1
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	1a5b      	subs	r3, r3, r1
 800184a:	4698      	mov	r8, r3
 800184c:	2601      	movs	r6, #1
 800184e:	e5ae      	b.n	80013ae <__aeabi_dadd+0x96>
 8001850:	464a      	mov	r2, r9
 8001852:	08d1      	lsrs	r1, r2, #3
 8001854:	075a      	lsls	r2, r3, #29
 8001856:	4311      	orrs	r1, r2
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	e6a7      	b.n	80015ac <__aeabi_dadd+0x294>
 800185c:	4663      	mov	r3, ip
 800185e:	08f9      	lsrs	r1, r7, #3
 8001860:	075a      	lsls	r2, r3, #29
 8001862:	4654      	mov	r4, sl
 8001864:	4311      	orrs	r1, r2
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	e6a0      	b.n	80015ac <__aeabi_dadd+0x294>
 800186a:	464a      	mov	r2, r9
 800186c:	4313      	orrs	r3, r2
 800186e:	001d      	movs	r5, r3
 8001870:	1e6b      	subs	r3, r5, #1
 8001872:	419d      	sbcs	r5, r3
 8001874:	e6c7      	b.n	8001606 <__aeabi_dadd+0x2ee>
 8001876:	0014      	movs	r4, r2
 8001878:	001e      	movs	r6, r3
 800187a:	3c20      	subs	r4, #32
 800187c:	40e6      	lsrs	r6, r4
 800187e:	2a20      	cmp	r2, #32
 8001880:	d005      	beq.n	800188e <__aeabi_dadd+0x576>
 8001882:	2440      	movs	r4, #64	; 0x40
 8001884:	1aa2      	subs	r2, r4, r2
 8001886:	4093      	lsls	r3, r2
 8001888:	464a      	mov	r2, r9
 800188a:	431a      	orrs	r2, r3
 800188c:	4691      	mov	r9, r2
 800188e:	464d      	mov	r5, r9
 8001890:	1e6b      	subs	r3, r5, #1
 8001892:	419d      	sbcs	r5, r3
 8001894:	4335      	orrs	r5, r6
 8001896:	e778      	b.n	800178a <__aeabi_dadd+0x472>
 8001898:	464a      	mov	r2, r9
 800189a:	431a      	orrs	r2, r3
 800189c:	d000      	beq.n	80018a0 <__aeabi_dadd+0x588>
 800189e:	e66b      	b.n	8001578 <__aeabi_dadd+0x260>
 80018a0:	076b      	lsls	r3, r5, #29
 80018a2:	08f9      	lsrs	r1, r7, #3
 80018a4:	4319      	orrs	r1, r3
 80018a6:	08eb      	lsrs	r3, r5, #3
 80018a8:	e680      	b.n	80015ac <__aeabi_dadd+0x294>
 80018aa:	4661      	mov	r1, ip
 80018ac:	4339      	orrs	r1, r7
 80018ae:	d054      	beq.n	800195a <__aeabi_dadd+0x642>
 80018b0:	4663      	mov	r3, ip
 80018b2:	08f9      	lsrs	r1, r7, #3
 80018b4:	075c      	lsls	r4, r3, #29
 80018b6:	4321      	orrs	r1, r4
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	0004      	movs	r4, r0
 80018bc:	e654      	b.n	8001568 <__aeabi_dadd+0x250>
 80018be:	464a      	mov	r2, r9
 80018c0:	1abd      	subs	r5, r7, r2
 80018c2:	42af      	cmp	r7, r5
 80018c4:	4189      	sbcs	r1, r1
 80018c6:	4662      	mov	r2, ip
 80018c8:	4249      	negs	r1, r1
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	1a5b      	subs	r3, r3, r1
 80018ce:	4698      	mov	r8, r3
 80018d0:	0004      	movs	r4, r0
 80018d2:	2601      	movs	r6, #1
 80018d4:	e56b      	b.n	80013ae <__aeabi_dadd+0x96>
 80018d6:	464a      	mov	r2, r9
 80018d8:	1bd5      	subs	r5, r2, r7
 80018da:	45a9      	cmp	r9, r5
 80018dc:	4189      	sbcs	r1, r1
 80018de:	4662      	mov	r2, ip
 80018e0:	4249      	negs	r1, r1
 80018e2:	1a9a      	subs	r2, r3, r2
 80018e4:	1a52      	subs	r2, r2, r1
 80018e6:	4690      	mov	r8, r2
 80018e8:	0212      	lsls	r2, r2, #8
 80018ea:	d532      	bpl.n	8001952 <__aeabi_dadd+0x63a>
 80018ec:	464a      	mov	r2, r9
 80018ee:	1abd      	subs	r5, r7, r2
 80018f0:	42af      	cmp	r7, r5
 80018f2:	4189      	sbcs	r1, r1
 80018f4:	4662      	mov	r2, ip
 80018f6:	4249      	negs	r1, r1
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	1a5b      	subs	r3, r3, r1
 80018fc:	4698      	mov	r8, r3
 80018fe:	0004      	movs	r4, r0
 8001900:	e584      	b.n	800140c <__aeabi_dadd+0xf4>
 8001902:	4663      	mov	r3, ip
 8001904:	08f9      	lsrs	r1, r7, #3
 8001906:	075a      	lsls	r2, r3, #29
 8001908:	4311      	orrs	r1, r2
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	e64e      	b.n	80015ac <__aeabi_dadd+0x294>
 800190e:	08f9      	lsrs	r1, r7, #3
 8001910:	0768      	lsls	r0, r5, #29
 8001912:	4301      	orrs	r1, r0
 8001914:	08eb      	lsrs	r3, r5, #3
 8001916:	e624      	b.n	8001562 <__aeabi_dadd+0x24a>
 8001918:	4662      	mov	r2, ip
 800191a:	433a      	orrs	r2, r7
 800191c:	d100      	bne.n	8001920 <__aeabi_dadd+0x608>
 800191e:	e698      	b.n	8001652 <__aeabi_dadd+0x33a>
 8001920:	464a      	mov	r2, r9
 8001922:	08d1      	lsrs	r1, r2, #3
 8001924:	075a      	lsls	r2, r3, #29
 8001926:	4311      	orrs	r1, r2
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	031b      	lsls	r3, r3, #12
 800192e:	421a      	tst	r2, r3
 8001930:	d008      	beq.n	8001944 <__aeabi_dadd+0x62c>
 8001932:	4660      	mov	r0, ip
 8001934:	08c5      	lsrs	r5, r0, #3
 8001936:	421d      	tst	r5, r3
 8001938:	d104      	bne.n	8001944 <__aeabi_dadd+0x62c>
 800193a:	4654      	mov	r4, sl
 800193c:	002a      	movs	r2, r5
 800193e:	08f9      	lsrs	r1, r7, #3
 8001940:	0743      	lsls	r3, r0, #29
 8001942:	4319      	orrs	r1, r3
 8001944:	0f4b      	lsrs	r3, r1, #29
 8001946:	00c9      	lsls	r1, r1, #3
 8001948:	075b      	lsls	r3, r3, #29
 800194a:	08c9      	lsrs	r1, r1, #3
 800194c:	4319      	orrs	r1, r3
 800194e:	0013      	movs	r3, r2
 8001950:	e62c      	b.n	80015ac <__aeabi_dadd+0x294>
 8001952:	4641      	mov	r1, r8
 8001954:	4329      	orrs	r1, r5
 8001956:	d000      	beq.n	800195a <__aeabi_dadd+0x642>
 8001958:	e5fa      	b.n	8001550 <__aeabi_dadd+0x238>
 800195a:	2300      	movs	r3, #0
 800195c:	000a      	movs	r2, r1
 800195e:	2400      	movs	r4, #0
 8001960:	e602      	b.n	8001568 <__aeabi_dadd+0x250>
 8001962:	076b      	lsls	r3, r5, #29
 8001964:	08f9      	lsrs	r1, r7, #3
 8001966:	4319      	orrs	r1, r3
 8001968:	08eb      	lsrs	r3, r5, #3
 800196a:	e5fd      	b.n	8001568 <__aeabi_dadd+0x250>
 800196c:	4663      	mov	r3, ip
 800196e:	08f9      	lsrs	r1, r7, #3
 8001970:	075b      	lsls	r3, r3, #29
 8001972:	4319      	orrs	r1, r3
 8001974:	4663      	mov	r3, ip
 8001976:	0004      	movs	r4, r0
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	e617      	b.n	80015ac <__aeabi_dadd+0x294>
 800197c:	003d      	movs	r5, r7
 800197e:	444d      	add	r5, r9
 8001980:	4463      	add	r3, ip
 8001982:	454d      	cmp	r5, r9
 8001984:	4189      	sbcs	r1, r1
 8001986:	4698      	mov	r8, r3
 8001988:	4249      	negs	r1, r1
 800198a:	4488      	add	r8, r1
 800198c:	4643      	mov	r3, r8
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	d400      	bmi.n	8001994 <__aeabi_dadd+0x67c>
 8001992:	e5dd      	b.n	8001550 <__aeabi_dadd+0x238>
 8001994:	4642      	mov	r2, r8
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <__aeabi_dadd+0x6d0>)
 8001998:	2601      	movs	r6, #1
 800199a:	401a      	ands	r2, r3
 800199c:	4690      	mov	r8, r2
 800199e:	e5d7      	b.n	8001550 <__aeabi_dadd+0x238>
 80019a0:	0010      	movs	r0, r2
 80019a2:	001e      	movs	r6, r3
 80019a4:	3820      	subs	r0, #32
 80019a6:	40c6      	lsrs	r6, r0
 80019a8:	2a20      	cmp	r2, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dadd+0x6a0>
 80019ac:	2040      	movs	r0, #64	; 0x40
 80019ae:	1a82      	subs	r2, r0, r2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	464a      	mov	r2, r9
 80019b4:	431a      	orrs	r2, r3
 80019b6:	4691      	mov	r9, r2
 80019b8:	464d      	mov	r5, r9
 80019ba:	1e6b      	subs	r3, r5, #1
 80019bc:	419d      	sbcs	r5, r3
 80019be:	4335      	orrs	r5, r6
 80019c0:	e621      	b.n	8001606 <__aeabi_dadd+0x2ee>
 80019c2:	0002      	movs	r2, r0
 80019c4:	2300      	movs	r3, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	e540      	b.n	800144c <__aeabi_dadd+0x134>
 80019ca:	464a      	mov	r2, r9
 80019cc:	19d5      	adds	r5, r2, r7
 80019ce:	42bd      	cmp	r5, r7
 80019d0:	4189      	sbcs	r1, r1
 80019d2:	4463      	add	r3, ip
 80019d4:	4698      	mov	r8, r3
 80019d6:	4249      	negs	r1, r1
 80019d8:	4488      	add	r8, r1
 80019da:	e5b3      	b.n	8001544 <__aeabi_dadd+0x22c>
 80019dc:	2100      	movs	r1, #0
 80019de:	4a01      	ldr	r2, [pc, #4]	; (80019e4 <__aeabi_dadd+0x6cc>)
 80019e0:	000b      	movs	r3, r1
 80019e2:	e533      	b.n	800144c <__aeabi_dadd+0x134>
 80019e4:	000007ff 	.word	0x000007ff
 80019e8:	ff7fffff 	.word	0xff7fffff

080019ec <__aeabi_ddiv>:
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ee:	4657      	mov	r7, sl
 80019f0:	464e      	mov	r6, r9
 80019f2:	4645      	mov	r5, r8
 80019f4:	46de      	mov	lr, fp
 80019f6:	b5e0      	push	{r5, r6, r7, lr}
 80019f8:	4681      	mov	r9, r0
 80019fa:	0005      	movs	r5, r0
 80019fc:	030c      	lsls	r4, r1, #12
 80019fe:	0048      	lsls	r0, r1, #1
 8001a00:	4692      	mov	sl, r2
 8001a02:	001f      	movs	r7, r3
 8001a04:	b085      	sub	sp, #20
 8001a06:	0b24      	lsrs	r4, r4, #12
 8001a08:	0d40      	lsrs	r0, r0, #21
 8001a0a:	0fce      	lsrs	r6, r1, #31
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	d059      	beq.n	8001ac4 <__aeabi_ddiv+0xd8>
 8001a10:	4b87      	ldr	r3, [pc, #540]	; (8001c30 <__aeabi_ddiv+0x244>)
 8001a12:	4298      	cmp	r0, r3
 8001a14:	d100      	bne.n	8001a18 <__aeabi_ddiv+0x2c>
 8001a16:	e098      	b.n	8001b4a <__aeabi_ddiv+0x15e>
 8001a18:	0f6b      	lsrs	r3, r5, #29
 8001a1a:	00e4      	lsls	r4, r4, #3
 8001a1c:	431c      	orrs	r4, r3
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	4323      	orrs	r3, r4
 8001a24:	4698      	mov	r8, r3
 8001a26:	4b83      	ldr	r3, [pc, #524]	; (8001c34 <__aeabi_ddiv+0x248>)
 8001a28:	00ed      	lsls	r5, r5, #3
 8001a2a:	469b      	mov	fp, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	4699      	mov	r9, r3
 8001a30:	4483      	add	fp, r0
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	033c      	lsls	r4, r7, #12
 8001a36:	007b      	lsls	r3, r7, #1
 8001a38:	4650      	mov	r0, sl
 8001a3a:	0b24      	lsrs	r4, r4, #12
 8001a3c:	0d5b      	lsrs	r3, r3, #21
 8001a3e:	0fff      	lsrs	r7, r7, #31
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d067      	beq.n	8001b14 <__aeabi_ddiv+0x128>
 8001a44:	4a7a      	ldr	r2, [pc, #488]	; (8001c30 <__aeabi_ddiv+0x244>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d018      	beq.n	8001a7c <__aeabi_ddiv+0x90>
 8001a4a:	497a      	ldr	r1, [pc, #488]	; (8001c34 <__aeabi_ddiv+0x248>)
 8001a4c:	0f42      	lsrs	r2, r0, #29
 8001a4e:	468c      	mov	ip, r1
 8001a50:	00e4      	lsls	r4, r4, #3
 8001a52:	4659      	mov	r1, fp
 8001a54:	4314      	orrs	r4, r2
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	4463      	add	r3, ip
 8001a5a:	0412      	lsls	r2, r2, #16
 8001a5c:	1acb      	subs	r3, r1, r3
 8001a5e:	4314      	orrs	r4, r2
 8001a60:	469b      	mov	fp, r3
 8001a62:	00c2      	lsls	r2, r0, #3
 8001a64:	2000      	movs	r0, #0
 8001a66:	0033      	movs	r3, r6
 8001a68:	407b      	eors	r3, r7
 8001a6a:	469a      	mov	sl, r3
 8001a6c:	464b      	mov	r3, r9
 8001a6e:	2b0f      	cmp	r3, #15
 8001a70:	d900      	bls.n	8001a74 <__aeabi_ddiv+0x88>
 8001a72:	e0ef      	b.n	8001c54 <__aeabi_ddiv+0x268>
 8001a74:	4970      	ldr	r1, [pc, #448]	; (8001c38 <__aeabi_ddiv+0x24c>)
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	58cb      	ldr	r3, [r1, r3]
 8001a7a:	469f      	mov	pc, r3
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <__aeabi_ddiv+0x250>)
 8001a7e:	4652      	mov	r2, sl
 8001a80:	469c      	mov	ip, r3
 8001a82:	4322      	orrs	r2, r4
 8001a84:	44e3      	add	fp, ip
 8001a86:	2a00      	cmp	r2, #0
 8001a88:	d000      	beq.n	8001a8c <__aeabi_ddiv+0xa0>
 8001a8a:	e095      	b.n	8001bb8 <__aeabi_ddiv+0x1cc>
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	2302      	movs	r3, #2
 8001a90:	4319      	orrs	r1, r3
 8001a92:	4689      	mov	r9, r1
 8001a94:	2400      	movs	r4, #0
 8001a96:	2002      	movs	r0, #2
 8001a98:	e7e5      	b.n	8001a66 <__aeabi_ddiv+0x7a>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	2500      	movs	r5, #0
 8001aa0:	4652      	mov	r2, sl
 8001aa2:	051b      	lsls	r3, r3, #20
 8001aa4:	4323      	orrs	r3, r4
 8001aa6:	07d2      	lsls	r2, r2, #31
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	0028      	movs	r0, r5
 8001aac:	0019      	movs	r1, r3
 8001aae:	b005      	add	sp, #20
 8001ab0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ab2:	46bb      	mov	fp, r7
 8001ab4:	46b2      	mov	sl, r6
 8001ab6:	46a9      	mov	r9, r5
 8001ab8:	46a0      	mov	r8, r4
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001abc:	2400      	movs	r4, #0
 8001abe:	2500      	movs	r5, #0
 8001ac0:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <__aeabi_ddiv+0x244>)
 8001ac2:	e7ed      	b.n	8001aa0 <__aeabi_ddiv+0xb4>
 8001ac4:	464b      	mov	r3, r9
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	4698      	mov	r8, r3
 8001aca:	d100      	bne.n	8001ace <__aeabi_ddiv+0xe2>
 8001acc:	e089      	b.n	8001be2 <__aeabi_ddiv+0x1f6>
 8001ace:	2c00      	cmp	r4, #0
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_ddiv+0xe8>
 8001ad2:	e1e0      	b.n	8001e96 <__aeabi_ddiv+0x4aa>
 8001ad4:	0020      	movs	r0, r4
 8001ad6:	f001 fb07 	bl	80030e8 <__clzsi2>
 8001ada:	0001      	movs	r1, r0
 8001adc:	0002      	movs	r2, r0
 8001ade:	390b      	subs	r1, #11
 8001ae0:	231d      	movs	r3, #29
 8001ae2:	1a5b      	subs	r3, r3, r1
 8001ae4:	4649      	mov	r1, r9
 8001ae6:	0010      	movs	r0, r2
 8001ae8:	40d9      	lsrs	r1, r3
 8001aea:	3808      	subs	r0, #8
 8001aec:	4084      	lsls	r4, r0
 8001aee:	000b      	movs	r3, r1
 8001af0:	464d      	mov	r5, r9
 8001af2:	4323      	orrs	r3, r4
 8001af4:	4698      	mov	r8, r3
 8001af6:	4085      	lsls	r5, r0
 8001af8:	4851      	ldr	r0, [pc, #324]	; (8001c40 <__aeabi_ddiv+0x254>)
 8001afa:	033c      	lsls	r4, r7, #12
 8001afc:	1a83      	subs	r3, r0, r2
 8001afe:	469b      	mov	fp, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	4699      	mov	r9, r3
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	007b      	lsls	r3, r7, #1
 8001b08:	4650      	mov	r0, sl
 8001b0a:	0b24      	lsrs	r4, r4, #12
 8001b0c:	0d5b      	lsrs	r3, r3, #21
 8001b0e:	0fff      	lsrs	r7, r7, #31
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d197      	bne.n	8001a44 <__aeabi_ddiv+0x58>
 8001b14:	4652      	mov	r2, sl
 8001b16:	4322      	orrs	r2, r4
 8001b18:	d055      	beq.n	8001bc6 <__aeabi_ddiv+0x1da>
 8001b1a:	2c00      	cmp	r4, #0
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_ddiv+0x134>
 8001b1e:	e1ca      	b.n	8001eb6 <__aeabi_ddiv+0x4ca>
 8001b20:	0020      	movs	r0, r4
 8001b22:	f001 fae1 	bl	80030e8 <__clzsi2>
 8001b26:	0002      	movs	r2, r0
 8001b28:	3a0b      	subs	r2, #11
 8001b2a:	231d      	movs	r3, #29
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	4652      	mov	r2, sl
 8001b32:	3908      	subs	r1, #8
 8001b34:	40da      	lsrs	r2, r3
 8001b36:	408c      	lsls	r4, r1
 8001b38:	4314      	orrs	r4, r2
 8001b3a:	4652      	mov	r2, sl
 8001b3c:	408a      	lsls	r2, r1
 8001b3e:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <__aeabi_ddiv+0x258>)
 8001b40:	4458      	add	r0, fp
 8001b42:	469b      	mov	fp, r3
 8001b44:	4483      	add	fp, r0
 8001b46:	2000      	movs	r0, #0
 8001b48:	e78d      	b.n	8001a66 <__aeabi_ddiv+0x7a>
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	4323      	orrs	r3, r4
 8001b4e:	4698      	mov	r8, r3
 8001b50:	d140      	bne.n	8001bd4 <__aeabi_ddiv+0x1e8>
 8001b52:	2308      	movs	r3, #8
 8001b54:	4699      	mov	r9, r3
 8001b56:	3b06      	subs	r3, #6
 8001b58:	2500      	movs	r5, #0
 8001b5a:	4683      	mov	fp, r0
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	e769      	b.n	8001a34 <__aeabi_ddiv+0x48>
 8001b60:	46b2      	mov	sl, r6
 8001b62:	9b00      	ldr	r3, [sp, #0]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d0a9      	beq.n	8001abc <__aeabi_ddiv+0xd0>
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_ddiv+0x182>
 8001b6c:	e211      	b.n	8001f92 <__aeabi_ddiv+0x5a6>
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d093      	beq.n	8001a9a <__aeabi_ddiv+0xae>
 8001b72:	4a35      	ldr	r2, [pc, #212]	; (8001c48 <__aeabi_ddiv+0x25c>)
 8001b74:	445a      	add	r2, fp
 8001b76:	2a00      	cmp	r2, #0
 8001b78:	dc00      	bgt.n	8001b7c <__aeabi_ddiv+0x190>
 8001b7a:	e13c      	b.n	8001df6 <__aeabi_ddiv+0x40a>
 8001b7c:	076b      	lsls	r3, r5, #29
 8001b7e:	d000      	beq.n	8001b82 <__aeabi_ddiv+0x196>
 8001b80:	e1a7      	b.n	8001ed2 <__aeabi_ddiv+0x4e6>
 8001b82:	08ed      	lsrs	r5, r5, #3
 8001b84:	4643      	mov	r3, r8
 8001b86:	01db      	lsls	r3, r3, #7
 8001b88:	d506      	bpl.n	8001b98 <__aeabi_ddiv+0x1ac>
 8001b8a:	4642      	mov	r2, r8
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <__aeabi_ddiv+0x260>)
 8001b8e:	401a      	ands	r2, r3
 8001b90:	4690      	mov	r8, r2
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	00d2      	lsls	r2, r2, #3
 8001b96:	445a      	add	r2, fp
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <__aeabi_ddiv+0x264>)
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	dc8e      	bgt.n	8001abc <__aeabi_ddiv+0xd0>
 8001b9e:	4643      	mov	r3, r8
 8001ba0:	0552      	lsls	r2, r2, #21
 8001ba2:	0758      	lsls	r0, r3, #29
 8001ba4:	025c      	lsls	r4, r3, #9
 8001ba6:	4305      	orrs	r5, r0
 8001ba8:	0b24      	lsrs	r4, r4, #12
 8001baa:	0d53      	lsrs	r3, r2, #21
 8001bac:	e778      	b.n	8001aa0 <__aeabi_ddiv+0xb4>
 8001bae:	46ba      	mov	sl, r7
 8001bb0:	46a0      	mov	r8, r4
 8001bb2:	0015      	movs	r5, r2
 8001bb4:	9000      	str	r0, [sp, #0]
 8001bb6:	e7d4      	b.n	8001b62 <__aeabi_ddiv+0x176>
 8001bb8:	464a      	mov	r2, r9
 8001bba:	2303      	movs	r3, #3
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	4691      	mov	r9, r2
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	4652      	mov	r2, sl
 8001bc4:	e74f      	b.n	8001a66 <__aeabi_ddiv+0x7a>
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	2301      	movs	r3, #1
 8001bca:	4319      	orrs	r1, r3
 8001bcc:	4689      	mov	r9, r1
 8001bce:	2400      	movs	r4, #0
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	e748      	b.n	8001a66 <__aeabi_ddiv+0x7a>
 8001bd4:	230c      	movs	r3, #12
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	3b09      	subs	r3, #9
 8001bda:	46a0      	mov	r8, r4
 8001bdc:	4683      	mov	fp, r0
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	e728      	b.n	8001a34 <__aeabi_ddiv+0x48>
 8001be2:	2304      	movs	r3, #4
 8001be4:	4699      	mov	r9, r3
 8001be6:	2300      	movs	r3, #0
 8001be8:	469b      	mov	fp, r3
 8001bea:	3301      	adds	r3, #1
 8001bec:	2500      	movs	r5, #0
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	e720      	b.n	8001a34 <__aeabi_ddiv+0x48>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2480      	movs	r4, #128	; 0x80
 8001bf6:	469a      	mov	sl, r3
 8001bf8:	2500      	movs	r5, #0
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <__aeabi_ddiv+0x244>)
 8001bfc:	0324      	lsls	r4, r4, #12
 8001bfe:	e74f      	b.n	8001aa0 <__aeabi_ddiv+0xb4>
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	4641      	mov	r1, r8
 8001c04:	031b      	lsls	r3, r3, #12
 8001c06:	4219      	tst	r1, r3
 8001c08:	d008      	beq.n	8001c1c <__aeabi_ddiv+0x230>
 8001c0a:	421c      	tst	r4, r3
 8001c0c:	d106      	bne.n	8001c1c <__aeabi_ddiv+0x230>
 8001c0e:	431c      	orrs	r4, r3
 8001c10:	0324      	lsls	r4, r4, #12
 8001c12:	46ba      	mov	sl, r7
 8001c14:	0015      	movs	r5, r2
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <__aeabi_ddiv+0x244>)
 8001c18:	0b24      	lsrs	r4, r4, #12
 8001c1a:	e741      	b.n	8001aa0 <__aeabi_ddiv+0xb4>
 8001c1c:	2480      	movs	r4, #128	; 0x80
 8001c1e:	4643      	mov	r3, r8
 8001c20:	0324      	lsls	r4, r4, #12
 8001c22:	431c      	orrs	r4, r3
 8001c24:	0324      	lsls	r4, r4, #12
 8001c26:	46b2      	mov	sl, r6
 8001c28:	4b01      	ldr	r3, [pc, #4]	; (8001c30 <__aeabi_ddiv+0x244>)
 8001c2a:	0b24      	lsrs	r4, r4, #12
 8001c2c:	e738      	b.n	8001aa0 <__aeabi_ddiv+0xb4>
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	000007ff 	.word	0x000007ff
 8001c34:	fffffc01 	.word	0xfffffc01
 8001c38:	0800d6e4 	.word	0x0800d6e4
 8001c3c:	fffff801 	.word	0xfffff801
 8001c40:	fffffc0d 	.word	0xfffffc0d
 8001c44:	000003f3 	.word	0x000003f3
 8001c48:	000003ff 	.word	0x000003ff
 8001c4c:	feffffff 	.word	0xfeffffff
 8001c50:	000007fe 	.word	0x000007fe
 8001c54:	4544      	cmp	r4, r8
 8001c56:	d200      	bcs.n	8001c5a <__aeabi_ddiv+0x26e>
 8001c58:	e116      	b.n	8001e88 <__aeabi_ddiv+0x49c>
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_ddiv+0x272>
 8001c5c:	e111      	b.n	8001e82 <__aeabi_ddiv+0x496>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	425b      	negs	r3, r3
 8001c62:	469c      	mov	ip, r3
 8001c64:	002e      	movs	r6, r5
 8001c66:	4640      	mov	r0, r8
 8001c68:	2500      	movs	r5, #0
 8001c6a:	44e3      	add	fp, ip
 8001c6c:	0223      	lsls	r3, r4, #8
 8001c6e:	0e14      	lsrs	r4, r2, #24
 8001c70:	431c      	orrs	r4, r3
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	4699      	mov	r9, r3
 8001c76:	0423      	lsls	r3, r4, #16
 8001c78:	0c1f      	lsrs	r7, r3, #16
 8001c7a:	0212      	lsls	r2, r2, #8
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	9200      	str	r2, [sp, #0]
 8001c80:	9701      	str	r7, [sp, #4]
 8001c82:	f7fe fadf 	bl	8000244 <__aeabi_uidivmod>
 8001c86:	0002      	movs	r2, r0
 8001c88:	437a      	muls	r2, r7
 8001c8a:	040b      	lsls	r3, r1, #16
 8001c8c:	0c31      	lsrs	r1, r6, #16
 8001c8e:	4680      	mov	r8, r0
 8001c90:	4319      	orrs	r1, r3
 8001c92:	428a      	cmp	r2, r1
 8001c94:	d90b      	bls.n	8001cae <__aeabi_ddiv+0x2c2>
 8001c96:	2301      	movs	r3, #1
 8001c98:	425b      	negs	r3, r3
 8001c9a:	469c      	mov	ip, r3
 8001c9c:	1909      	adds	r1, r1, r4
 8001c9e:	44e0      	add	r8, ip
 8001ca0:	428c      	cmp	r4, r1
 8001ca2:	d804      	bhi.n	8001cae <__aeabi_ddiv+0x2c2>
 8001ca4:	428a      	cmp	r2, r1
 8001ca6:	d902      	bls.n	8001cae <__aeabi_ddiv+0x2c2>
 8001ca8:	1e83      	subs	r3, r0, #2
 8001caa:	4698      	mov	r8, r3
 8001cac:	1909      	adds	r1, r1, r4
 8001cae:	1a88      	subs	r0, r1, r2
 8001cb0:	4649      	mov	r1, r9
 8001cb2:	f7fe fac7 	bl	8000244 <__aeabi_uidivmod>
 8001cb6:	0409      	lsls	r1, r1, #16
 8001cb8:	468c      	mov	ip, r1
 8001cba:	0431      	lsls	r1, r6, #16
 8001cbc:	4666      	mov	r6, ip
 8001cbe:	9a01      	ldr	r2, [sp, #4]
 8001cc0:	0c09      	lsrs	r1, r1, #16
 8001cc2:	4342      	muls	r2, r0
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	4331      	orrs	r1, r6
 8001cc8:	428a      	cmp	r2, r1
 8001cca:	d904      	bls.n	8001cd6 <__aeabi_ddiv+0x2ea>
 8001ccc:	1909      	adds	r1, r1, r4
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	428c      	cmp	r4, r1
 8001cd2:	d800      	bhi.n	8001cd6 <__aeabi_ddiv+0x2ea>
 8001cd4:	e111      	b.n	8001efa <__aeabi_ddiv+0x50e>
 8001cd6:	1a89      	subs	r1, r1, r2
 8001cd8:	4642      	mov	r2, r8
 8001cda:	9e00      	ldr	r6, [sp, #0]
 8001cdc:	0412      	lsls	r2, r2, #16
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	0c33      	lsrs	r3, r6, #16
 8001ce2:	001f      	movs	r7, r3
 8001ce4:	0c10      	lsrs	r0, r2, #16
 8001ce6:	4690      	mov	r8, r2
 8001ce8:	9302      	str	r3, [sp, #8]
 8001cea:	0413      	lsls	r3, r2, #16
 8001cec:	0432      	lsls	r2, r6, #16
 8001cee:	0c16      	lsrs	r6, r2, #16
 8001cf0:	0032      	movs	r2, r6
 8001cf2:	0c1b      	lsrs	r3, r3, #16
 8001cf4:	435a      	muls	r2, r3
 8001cf6:	9603      	str	r6, [sp, #12]
 8001cf8:	437b      	muls	r3, r7
 8001cfa:	4346      	muls	r6, r0
 8001cfc:	4378      	muls	r0, r7
 8001cfe:	0c17      	lsrs	r7, r2, #16
 8001d00:	46bc      	mov	ip, r7
 8001d02:	199b      	adds	r3, r3, r6
 8001d04:	4463      	add	r3, ip
 8001d06:	429e      	cmp	r6, r3
 8001d08:	d903      	bls.n	8001d12 <__aeabi_ddiv+0x326>
 8001d0a:	2680      	movs	r6, #128	; 0x80
 8001d0c:	0276      	lsls	r6, r6, #9
 8001d0e:	46b4      	mov	ip, r6
 8001d10:	4460      	add	r0, ip
 8001d12:	0c1e      	lsrs	r6, r3, #16
 8001d14:	1830      	adds	r0, r6, r0
 8001d16:	0416      	lsls	r6, r2, #16
 8001d18:	041b      	lsls	r3, r3, #16
 8001d1a:	0c36      	lsrs	r6, r6, #16
 8001d1c:	199e      	adds	r6, r3, r6
 8001d1e:	4281      	cmp	r1, r0
 8001d20:	d200      	bcs.n	8001d24 <__aeabi_ddiv+0x338>
 8001d22:	e09c      	b.n	8001e5e <__aeabi_ddiv+0x472>
 8001d24:	d100      	bne.n	8001d28 <__aeabi_ddiv+0x33c>
 8001d26:	e097      	b.n	8001e58 <__aeabi_ddiv+0x46c>
 8001d28:	1bae      	subs	r6, r5, r6
 8001d2a:	1a09      	subs	r1, r1, r0
 8001d2c:	42b5      	cmp	r5, r6
 8001d2e:	4180      	sbcs	r0, r0
 8001d30:	4240      	negs	r0, r0
 8001d32:	1a08      	subs	r0, r1, r0
 8001d34:	4284      	cmp	r4, r0
 8001d36:	d100      	bne.n	8001d3a <__aeabi_ddiv+0x34e>
 8001d38:	e111      	b.n	8001f5e <__aeabi_ddiv+0x572>
 8001d3a:	4649      	mov	r1, r9
 8001d3c:	f7fe fa82 	bl	8000244 <__aeabi_uidivmod>
 8001d40:	9a01      	ldr	r2, [sp, #4]
 8001d42:	040b      	lsls	r3, r1, #16
 8001d44:	4342      	muls	r2, r0
 8001d46:	0c31      	lsrs	r1, r6, #16
 8001d48:	0005      	movs	r5, r0
 8001d4a:	4319      	orrs	r1, r3
 8001d4c:	428a      	cmp	r2, r1
 8001d4e:	d907      	bls.n	8001d60 <__aeabi_ddiv+0x374>
 8001d50:	1909      	adds	r1, r1, r4
 8001d52:	3d01      	subs	r5, #1
 8001d54:	428c      	cmp	r4, r1
 8001d56:	d803      	bhi.n	8001d60 <__aeabi_ddiv+0x374>
 8001d58:	428a      	cmp	r2, r1
 8001d5a:	d901      	bls.n	8001d60 <__aeabi_ddiv+0x374>
 8001d5c:	1e85      	subs	r5, r0, #2
 8001d5e:	1909      	adds	r1, r1, r4
 8001d60:	1a88      	subs	r0, r1, r2
 8001d62:	4649      	mov	r1, r9
 8001d64:	f7fe fa6e 	bl	8000244 <__aeabi_uidivmod>
 8001d68:	0409      	lsls	r1, r1, #16
 8001d6a:	468c      	mov	ip, r1
 8001d6c:	0431      	lsls	r1, r6, #16
 8001d6e:	4666      	mov	r6, ip
 8001d70:	9a01      	ldr	r2, [sp, #4]
 8001d72:	0c09      	lsrs	r1, r1, #16
 8001d74:	4342      	muls	r2, r0
 8001d76:	0003      	movs	r3, r0
 8001d78:	4331      	orrs	r1, r6
 8001d7a:	428a      	cmp	r2, r1
 8001d7c:	d907      	bls.n	8001d8e <__aeabi_ddiv+0x3a2>
 8001d7e:	1909      	adds	r1, r1, r4
 8001d80:	3b01      	subs	r3, #1
 8001d82:	428c      	cmp	r4, r1
 8001d84:	d803      	bhi.n	8001d8e <__aeabi_ddiv+0x3a2>
 8001d86:	428a      	cmp	r2, r1
 8001d88:	d901      	bls.n	8001d8e <__aeabi_ddiv+0x3a2>
 8001d8a:	1e83      	subs	r3, r0, #2
 8001d8c:	1909      	adds	r1, r1, r4
 8001d8e:	9e03      	ldr	r6, [sp, #12]
 8001d90:	1a89      	subs	r1, r1, r2
 8001d92:	0032      	movs	r2, r6
 8001d94:	042d      	lsls	r5, r5, #16
 8001d96:	431d      	orrs	r5, r3
 8001d98:	9f02      	ldr	r7, [sp, #8]
 8001d9a:	042b      	lsls	r3, r5, #16
 8001d9c:	0c1b      	lsrs	r3, r3, #16
 8001d9e:	435a      	muls	r2, r3
 8001da0:	437b      	muls	r3, r7
 8001da2:	469c      	mov	ip, r3
 8001da4:	0c28      	lsrs	r0, r5, #16
 8001da6:	4346      	muls	r6, r0
 8001da8:	0c13      	lsrs	r3, r2, #16
 8001daa:	44b4      	add	ip, r6
 8001dac:	4463      	add	r3, ip
 8001dae:	4378      	muls	r0, r7
 8001db0:	429e      	cmp	r6, r3
 8001db2:	d903      	bls.n	8001dbc <__aeabi_ddiv+0x3d0>
 8001db4:	2680      	movs	r6, #128	; 0x80
 8001db6:	0276      	lsls	r6, r6, #9
 8001db8:	46b4      	mov	ip, r6
 8001dba:	4460      	add	r0, ip
 8001dbc:	0c1e      	lsrs	r6, r3, #16
 8001dbe:	0412      	lsls	r2, r2, #16
 8001dc0:	041b      	lsls	r3, r3, #16
 8001dc2:	0c12      	lsrs	r2, r2, #16
 8001dc4:	1830      	adds	r0, r6, r0
 8001dc6:	189b      	adds	r3, r3, r2
 8001dc8:	4281      	cmp	r1, r0
 8001dca:	d306      	bcc.n	8001dda <__aeabi_ddiv+0x3ee>
 8001dcc:	d002      	beq.n	8001dd4 <__aeabi_ddiv+0x3e8>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	431d      	orrs	r5, r3
 8001dd2:	e6ce      	b.n	8001b72 <__aeabi_ddiv+0x186>
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_ddiv+0x3ee>
 8001dd8:	e6cb      	b.n	8001b72 <__aeabi_ddiv+0x186>
 8001dda:	1861      	adds	r1, r4, r1
 8001ddc:	1e6e      	subs	r6, r5, #1
 8001dde:	42a1      	cmp	r1, r4
 8001de0:	d200      	bcs.n	8001de4 <__aeabi_ddiv+0x3f8>
 8001de2:	e0a4      	b.n	8001f2e <__aeabi_ddiv+0x542>
 8001de4:	4281      	cmp	r1, r0
 8001de6:	d200      	bcs.n	8001dea <__aeabi_ddiv+0x3fe>
 8001de8:	e0c9      	b.n	8001f7e <__aeabi_ddiv+0x592>
 8001dea:	d100      	bne.n	8001dee <__aeabi_ddiv+0x402>
 8001dec:	e0d9      	b.n	8001fa2 <__aeabi_ddiv+0x5b6>
 8001dee:	0035      	movs	r5, r6
 8001df0:	e7ed      	b.n	8001dce <__aeabi_ddiv+0x3e2>
 8001df2:	2501      	movs	r5, #1
 8001df4:	426d      	negs	r5, r5
 8001df6:	2101      	movs	r1, #1
 8001df8:	1a89      	subs	r1, r1, r2
 8001dfa:	2938      	cmp	r1, #56	; 0x38
 8001dfc:	dd00      	ble.n	8001e00 <__aeabi_ddiv+0x414>
 8001dfe:	e64c      	b.n	8001a9a <__aeabi_ddiv+0xae>
 8001e00:	291f      	cmp	r1, #31
 8001e02:	dc00      	bgt.n	8001e06 <__aeabi_ddiv+0x41a>
 8001e04:	e07f      	b.n	8001f06 <__aeabi_ddiv+0x51a>
 8001e06:	231f      	movs	r3, #31
 8001e08:	425b      	negs	r3, r3
 8001e0a:	1a9a      	subs	r2, r3, r2
 8001e0c:	4643      	mov	r3, r8
 8001e0e:	40d3      	lsrs	r3, r2
 8001e10:	2920      	cmp	r1, #32
 8001e12:	d004      	beq.n	8001e1e <__aeabi_ddiv+0x432>
 8001e14:	4644      	mov	r4, r8
 8001e16:	4a65      	ldr	r2, [pc, #404]	; (8001fac <__aeabi_ddiv+0x5c0>)
 8001e18:	445a      	add	r2, fp
 8001e1a:	4094      	lsls	r4, r2
 8001e1c:	4325      	orrs	r5, r4
 8001e1e:	1e6a      	subs	r2, r5, #1
 8001e20:	4195      	sbcs	r5, r2
 8001e22:	2207      	movs	r2, #7
 8001e24:	432b      	orrs	r3, r5
 8001e26:	0015      	movs	r5, r2
 8001e28:	2400      	movs	r4, #0
 8001e2a:	401d      	ands	r5, r3
 8001e2c:	421a      	tst	r2, r3
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_ddiv+0x446>
 8001e30:	e0a1      	b.n	8001f76 <__aeabi_ddiv+0x58a>
 8001e32:	220f      	movs	r2, #15
 8001e34:	2400      	movs	r4, #0
 8001e36:	401a      	ands	r2, r3
 8001e38:	2a04      	cmp	r2, #4
 8001e3a:	d100      	bne.n	8001e3e <__aeabi_ddiv+0x452>
 8001e3c:	e098      	b.n	8001f70 <__aeabi_ddiv+0x584>
 8001e3e:	1d1a      	adds	r2, r3, #4
 8001e40:	429a      	cmp	r2, r3
 8001e42:	419b      	sbcs	r3, r3
 8001e44:	425b      	negs	r3, r3
 8001e46:	18e4      	adds	r4, r4, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	0222      	lsls	r2, r4, #8
 8001e4c:	d400      	bmi.n	8001e50 <__aeabi_ddiv+0x464>
 8001e4e:	e08f      	b.n	8001f70 <__aeabi_ddiv+0x584>
 8001e50:	2301      	movs	r3, #1
 8001e52:	2400      	movs	r4, #0
 8001e54:	2500      	movs	r5, #0
 8001e56:	e623      	b.n	8001aa0 <__aeabi_ddiv+0xb4>
 8001e58:	42b5      	cmp	r5, r6
 8001e5a:	d300      	bcc.n	8001e5e <__aeabi_ddiv+0x472>
 8001e5c:	e764      	b.n	8001d28 <__aeabi_ddiv+0x33c>
 8001e5e:	4643      	mov	r3, r8
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	9b00      	ldr	r3, [sp, #0]
 8001e64:	469c      	mov	ip, r3
 8001e66:	4465      	add	r5, ip
 8001e68:	001f      	movs	r7, r3
 8001e6a:	429d      	cmp	r5, r3
 8001e6c:	419b      	sbcs	r3, r3
 8001e6e:	425b      	negs	r3, r3
 8001e70:	191b      	adds	r3, r3, r4
 8001e72:	18c9      	adds	r1, r1, r3
 8001e74:	428c      	cmp	r4, r1
 8001e76:	d23a      	bcs.n	8001eee <__aeabi_ddiv+0x502>
 8001e78:	4288      	cmp	r0, r1
 8001e7a:	d863      	bhi.n	8001f44 <__aeabi_ddiv+0x558>
 8001e7c:	d060      	beq.n	8001f40 <__aeabi_ddiv+0x554>
 8001e7e:	4690      	mov	r8, r2
 8001e80:	e752      	b.n	8001d28 <__aeabi_ddiv+0x33c>
 8001e82:	42aa      	cmp	r2, r5
 8001e84:	d900      	bls.n	8001e88 <__aeabi_ddiv+0x49c>
 8001e86:	e6ea      	b.n	8001c5e <__aeabi_ddiv+0x272>
 8001e88:	4643      	mov	r3, r8
 8001e8a:	07de      	lsls	r6, r3, #31
 8001e8c:	0858      	lsrs	r0, r3, #1
 8001e8e:	086b      	lsrs	r3, r5, #1
 8001e90:	431e      	orrs	r6, r3
 8001e92:	07ed      	lsls	r5, r5, #31
 8001e94:	e6ea      	b.n	8001c6c <__aeabi_ddiv+0x280>
 8001e96:	4648      	mov	r0, r9
 8001e98:	f001 f926 	bl	80030e8 <__clzsi2>
 8001e9c:	0001      	movs	r1, r0
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	3115      	adds	r1, #21
 8001ea2:	3220      	adds	r2, #32
 8001ea4:	291c      	cmp	r1, #28
 8001ea6:	dc00      	bgt.n	8001eaa <__aeabi_ddiv+0x4be>
 8001ea8:	e61a      	b.n	8001ae0 <__aeabi_ddiv+0xf4>
 8001eaa:	464b      	mov	r3, r9
 8001eac:	3808      	subs	r0, #8
 8001eae:	4083      	lsls	r3, r0
 8001eb0:	2500      	movs	r5, #0
 8001eb2:	4698      	mov	r8, r3
 8001eb4:	e620      	b.n	8001af8 <__aeabi_ddiv+0x10c>
 8001eb6:	f001 f917 	bl	80030e8 <__clzsi2>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	3215      	adds	r2, #21
 8001ec0:	3020      	adds	r0, #32
 8001ec2:	2a1c      	cmp	r2, #28
 8001ec4:	dc00      	bgt.n	8001ec8 <__aeabi_ddiv+0x4dc>
 8001ec6:	e630      	b.n	8001b2a <__aeabi_ddiv+0x13e>
 8001ec8:	4654      	mov	r4, sl
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	2200      	movs	r2, #0
 8001ece:	409c      	lsls	r4, r3
 8001ed0:	e635      	b.n	8001b3e <__aeabi_ddiv+0x152>
 8001ed2:	230f      	movs	r3, #15
 8001ed4:	402b      	ands	r3, r5
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d100      	bne.n	8001edc <__aeabi_ddiv+0x4f0>
 8001eda:	e652      	b.n	8001b82 <__aeabi_ddiv+0x196>
 8001edc:	2305      	movs	r3, #5
 8001ede:	425b      	negs	r3, r3
 8001ee0:	42ab      	cmp	r3, r5
 8001ee2:	419b      	sbcs	r3, r3
 8001ee4:	3504      	adds	r5, #4
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	08ed      	lsrs	r5, r5, #3
 8001eea:	4498      	add	r8, r3
 8001eec:	e64a      	b.n	8001b84 <__aeabi_ddiv+0x198>
 8001eee:	428c      	cmp	r4, r1
 8001ef0:	d1c5      	bne.n	8001e7e <__aeabi_ddiv+0x492>
 8001ef2:	42af      	cmp	r7, r5
 8001ef4:	d9c0      	bls.n	8001e78 <__aeabi_ddiv+0x48c>
 8001ef6:	4690      	mov	r8, r2
 8001ef8:	e716      	b.n	8001d28 <__aeabi_ddiv+0x33c>
 8001efa:	428a      	cmp	r2, r1
 8001efc:	d800      	bhi.n	8001f00 <__aeabi_ddiv+0x514>
 8001efe:	e6ea      	b.n	8001cd6 <__aeabi_ddiv+0x2ea>
 8001f00:	1e83      	subs	r3, r0, #2
 8001f02:	1909      	adds	r1, r1, r4
 8001f04:	e6e7      	b.n	8001cd6 <__aeabi_ddiv+0x2ea>
 8001f06:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <__aeabi_ddiv+0x5c4>)
 8001f08:	0028      	movs	r0, r5
 8001f0a:	445a      	add	r2, fp
 8001f0c:	4643      	mov	r3, r8
 8001f0e:	4095      	lsls	r5, r2
 8001f10:	4093      	lsls	r3, r2
 8001f12:	40c8      	lsrs	r0, r1
 8001f14:	1e6a      	subs	r2, r5, #1
 8001f16:	4195      	sbcs	r5, r2
 8001f18:	4644      	mov	r4, r8
 8001f1a:	4303      	orrs	r3, r0
 8001f1c:	432b      	orrs	r3, r5
 8001f1e:	40cc      	lsrs	r4, r1
 8001f20:	075a      	lsls	r2, r3, #29
 8001f22:	d092      	beq.n	8001e4a <__aeabi_ddiv+0x45e>
 8001f24:	220f      	movs	r2, #15
 8001f26:	401a      	ands	r2, r3
 8001f28:	2a04      	cmp	r2, #4
 8001f2a:	d188      	bne.n	8001e3e <__aeabi_ddiv+0x452>
 8001f2c:	e78d      	b.n	8001e4a <__aeabi_ddiv+0x45e>
 8001f2e:	0035      	movs	r5, r6
 8001f30:	4281      	cmp	r1, r0
 8001f32:	d000      	beq.n	8001f36 <__aeabi_ddiv+0x54a>
 8001f34:	e74b      	b.n	8001dce <__aeabi_ddiv+0x3e2>
 8001f36:	9a00      	ldr	r2, [sp, #0]
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d000      	beq.n	8001f3e <__aeabi_ddiv+0x552>
 8001f3c:	e747      	b.n	8001dce <__aeabi_ddiv+0x3e2>
 8001f3e:	e618      	b.n	8001b72 <__aeabi_ddiv+0x186>
 8001f40:	42ae      	cmp	r6, r5
 8001f42:	d99c      	bls.n	8001e7e <__aeabi_ddiv+0x492>
 8001f44:	2302      	movs	r3, #2
 8001f46:	425b      	negs	r3, r3
 8001f48:	469c      	mov	ip, r3
 8001f4a:	9b00      	ldr	r3, [sp, #0]
 8001f4c:	44e0      	add	r8, ip
 8001f4e:	469c      	mov	ip, r3
 8001f50:	4465      	add	r5, ip
 8001f52:	429d      	cmp	r5, r3
 8001f54:	419b      	sbcs	r3, r3
 8001f56:	425b      	negs	r3, r3
 8001f58:	191b      	adds	r3, r3, r4
 8001f5a:	18c9      	adds	r1, r1, r3
 8001f5c:	e6e4      	b.n	8001d28 <__aeabi_ddiv+0x33c>
 8001f5e:	4a15      	ldr	r2, [pc, #84]	; (8001fb4 <__aeabi_ddiv+0x5c8>)
 8001f60:	445a      	add	r2, fp
 8001f62:	2a00      	cmp	r2, #0
 8001f64:	dc00      	bgt.n	8001f68 <__aeabi_ddiv+0x57c>
 8001f66:	e744      	b.n	8001df2 <__aeabi_ddiv+0x406>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	2500      	movs	r5, #0
 8001f6c:	4498      	add	r8, r3
 8001f6e:	e609      	b.n	8001b84 <__aeabi_ddiv+0x198>
 8001f70:	0765      	lsls	r5, r4, #29
 8001f72:	0264      	lsls	r4, r4, #9
 8001f74:	0b24      	lsrs	r4, r4, #12
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	431d      	orrs	r5, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e590      	b.n	8001aa0 <__aeabi_ddiv+0xb4>
 8001f7e:	9e00      	ldr	r6, [sp, #0]
 8001f80:	3d02      	subs	r5, #2
 8001f82:	0072      	lsls	r2, r6, #1
 8001f84:	42b2      	cmp	r2, r6
 8001f86:	41bf      	sbcs	r7, r7
 8001f88:	427f      	negs	r7, r7
 8001f8a:	193c      	adds	r4, r7, r4
 8001f8c:	1909      	adds	r1, r1, r4
 8001f8e:	9200      	str	r2, [sp, #0]
 8001f90:	e7ce      	b.n	8001f30 <__aeabi_ddiv+0x544>
 8001f92:	2480      	movs	r4, #128	; 0x80
 8001f94:	4643      	mov	r3, r8
 8001f96:	0324      	lsls	r4, r4, #12
 8001f98:	431c      	orrs	r4, r3
 8001f9a:	0324      	lsls	r4, r4, #12
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <__aeabi_ddiv+0x5cc>)
 8001f9e:	0b24      	lsrs	r4, r4, #12
 8001fa0:	e57e      	b.n	8001aa0 <__aeabi_ddiv+0xb4>
 8001fa2:	9a00      	ldr	r2, [sp, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d3ea      	bcc.n	8001f7e <__aeabi_ddiv+0x592>
 8001fa8:	0035      	movs	r5, r6
 8001faa:	e7c4      	b.n	8001f36 <__aeabi_ddiv+0x54a>
 8001fac:	0000043e 	.word	0x0000043e
 8001fb0:	0000041e 	.word	0x0000041e
 8001fb4:	000003ff 	.word	0x000003ff
 8001fb8:	000007ff 	.word	0x000007ff

08001fbc <__eqdf2>:
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	464f      	mov	r7, r9
 8001fc0:	4646      	mov	r6, r8
 8001fc2:	46d6      	mov	lr, sl
 8001fc4:	4694      	mov	ip, r2
 8001fc6:	4691      	mov	r9, r2
 8001fc8:	031a      	lsls	r2, r3, #12
 8001fca:	0b12      	lsrs	r2, r2, #12
 8001fcc:	4d18      	ldr	r5, [pc, #96]	; (8002030 <__eqdf2+0x74>)
 8001fce:	b5c0      	push	{r6, r7, lr}
 8001fd0:	004c      	lsls	r4, r1, #1
 8001fd2:	030f      	lsls	r7, r1, #12
 8001fd4:	4692      	mov	sl, r2
 8001fd6:	005a      	lsls	r2, r3, #1
 8001fd8:	0006      	movs	r6, r0
 8001fda:	4680      	mov	r8, r0
 8001fdc:	0b3f      	lsrs	r7, r7, #12
 8001fde:	2001      	movs	r0, #1
 8001fe0:	0d64      	lsrs	r4, r4, #21
 8001fe2:	0fc9      	lsrs	r1, r1, #31
 8001fe4:	0d52      	lsrs	r2, r2, #21
 8001fe6:	0fdb      	lsrs	r3, r3, #31
 8001fe8:	42ac      	cmp	r4, r5
 8001fea:	d00a      	beq.n	8002002 <__eqdf2+0x46>
 8001fec:	42aa      	cmp	r2, r5
 8001fee:	d003      	beq.n	8001ff8 <__eqdf2+0x3c>
 8001ff0:	4294      	cmp	r4, r2
 8001ff2:	d101      	bne.n	8001ff8 <__eqdf2+0x3c>
 8001ff4:	4557      	cmp	r7, sl
 8001ff6:	d00d      	beq.n	8002014 <__eqdf2+0x58>
 8001ff8:	bce0      	pop	{r5, r6, r7}
 8001ffa:	46ba      	mov	sl, r7
 8001ffc:	46b1      	mov	r9, r6
 8001ffe:	46a8      	mov	r8, r5
 8002000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002002:	003d      	movs	r5, r7
 8002004:	4335      	orrs	r5, r6
 8002006:	d1f7      	bne.n	8001ff8 <__eqdf2+0x3c>
 8002008:	42a2      	cmp	r2, r4
 800200a:	d1f5      	bne.n	8001ff8 <__eqdf2+0x3c>
 800200c:	4652      	mov	r2, sl
 800200e:	4665      	mov	r5, ip
 8002010:	432a      	orrs	r2, r5
 8002012:	d1f1      	bne.n	8001ff8 <__eqdf2+0x3c>
 8002014:	2001      	movs	r0, #1
 8002016:	45c8      	cmp	r8, r9
 8002018:	d1ee      	bne.n	8001ff8 <__eqdf2+0x3c>
 800201a:	4299      	cmp	r1, r3
 800201c:	d006      	beq.n	800202c <__eqdf2+0x70>
 800201e:	2c00      	cmp	r4, #0
 8002020:	d1ea      	bne.n	8001ff8 <__eqdf2+0x3c>
 8002022:	433e      	orrs	r6, r7
 8002024:	0030      	movs	r0, r6
 8002026:	1e46      	subs	r6, r0, #1
 8002028:	41b0      	sbcs	r0, r6
 800202a:	e7e5      	b.n	8001ff8 <__eqdf2+0x3c>
 800202c:	2000      	movs	r0, #0
 800202e:	e7e3      	b.n	8001ff8 <__eqdf2+0x3c>
 8002030:	000007ff 	.word	0x000007ff

08002034 <__gedf2>:
 8002034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002036:	464e      	mov	r6, r9
 8002038:	4645      	mov	r5, r8
 800203a:	4657      	mov	r7, sl
 800203c:	46de      	mov	lr, fp
 800203e:	0004      	movs	r4, r0
 8002040:	0018      	movs	r0, r3
 8002042:	b5e0      	push	{r5, r6, r7, lr}
 8002044:	0016      	movs	r6, r2
 8002046:	031b      	lsls	r3, r3, #12
 8002048:	0b1b      	lsrs	r3, r3, #12
 800204a:	4d32      	ldr	r5, [pc, #200]	; (8002114 <__gedf2+0xe0>)
 800204c:	030f      	lsls	r7, r1, #12
 800204e:	004a      	lsls	r2, r1, #1
 8002050:	4699      	mov	r9, r3
 8002052:	0043      	lsls	r3, r0, #1
 8002054:	46a4      	mov	ip, r4
 8002056:	46b0      	mov	r8, r6
 8002058:	0b3f      	lsrs	r7, r7, #12
 800205a:	0d52      	lsrs	r2, r2, #21
 800205c:	0fc9      	lsrs	r1, r1, #31
 800205e:	0d5b      	lsrs	r3, r3, #21
 8002060:	0fc0      	lsrs	r0, r0, #31
 8002062:	42aa      	cmp	r2, r5
 8002064:	d029      	beq.n	80020ba <__gedf2+0x86>
 8002066:	42ab      	cmp	r3, r5
 8002068:	d018      	beq.n	800209c <__gedf2+0x68>
 800206a:	2a00      	cmp	r2, #0
 800206c:	d12a      	bne.n	80020c4 <__gedf2+0x90>
 800206e:	433c      	orrs	r4, r7
 8002070:	46a3      	mov	fp, r4
 8002072:	4265      	negs	r5, r4
 8002074:	4165      	adcs	r5, r4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <__gedf2+0x4c>
 800207a:	464c      	mov	r4, r9
 800207c:	4326      	orrs	r6, r4
 800207e:	d027      	beq.n	80020d0 <__gedf2+0x9c>
 8002080:	2d00      	cmp	r5, #0
 8002082:	d115      	bne.n	80020b0 <__gedf2+0x7c>
 8002084:	4281      	cmp	r1, r0
 8002086:	d028      	beq.n	80020da <__gedf2+0xa6>
 8002088:	2002      	movs	r0, #2
 800208a:	3901      	subs	r1, #1
 800208c:	4008      	ands	r0, r1
 800208e:	3801      	subs	r0, #1
 8002090:	bcf0      	pop	{r4, r5, r6, r7}
 8002092:	46bb      	mov	fp, r7
 8002094:	46b2      	mov	sl, r6
 8002096:	46a9      	mov	r9, r5
 8002098:	46a0      	mov	r8, r4
 800209a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209c:	464d      	mov	r5, r9
 800209e:	432e      	orrs	r6, r5
 80020a0:	d12f      	bne.n	8002102 <__gedf2+0xce>
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	d1ee      	bne.n	8002084 <__gedf2+0x50>
 80020a6:	433c      	orrs	r4, r7
 80020a8:	4265      	negs	r5, r4
 80020aa:	4165      	adcs	r5, r4
 80020ac:	2d00      	cmp	r5, #0
 80020ae:	d0e9      	beq.n	8002084 <__gedf2+0x50>
 80020b0:	2800      	cmp	r0, #0
 80020b2:	d1ed      	bne.n	8002090 <__gedf2+0x5c>
 80020b4:	2001      	movs	r0, #1
 80020b6:	4240      	negs	r0, r0
 80020b8:	e7ea      	b.n	8002090 <__gedf2+0x5c>
 80020ba:	003d      	movs	r5, r7
 80020bc:	4325      	orrs	r5, r4
 80020be:	d120      	bne.n	8002102 <__gedf2+0xce>
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d0eb      	beq.n	800209c <__gedf2+0x68>
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1dd      	bne.n	8002084 <__gedf2+0x50>
 80020c8:	464c      	mov	r4, r9
 80020ca:	4326      	orrs	r6, r4
 80020cc:	d1da      	bne.n	8002084 <__gedf2+0x50>
 80020ce:	e7db      	b.n	8002088 <__gedf2+0x54>
 80020d0:	465b      	mov	r3, fp
 80020d2:	2000      	movs	r0, #0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0db      	beq.n	8002090 <__gedf2+0x5c>
 80020d8:	e7d6      	b.n	8002088 <__gedf2+0x54>
 80020da:	429a      	cmp	r2, r3
 80020dc:	dc0a      	bgt.n	80020f4 <__gedf2+0xc0>
 80020de:	dbe7      	blt.n	80020b0 <__gedf2+0x7c>
 80020e0:	454f      	cmp	r7, r9
 80020e2:	d8d1      	bhi.n	8002088 <__gedf2+0x54>
 80020e4:	d010      	beq.n	8002108 <__gedf2+0xd4>
 80020e6:	2000      	movs	r0, #0
 80020e8:	454f      	cmp	r7, r9
 80020ea:	d2d1      	bcs.n	8002090 <__gedf2+0x5c>
 80020ec:	2900      	cmp	r1, #0
 80020ee:	d0e1      	beq.n	80020b4 <__gedf2+0x80>
 80020f0:	0008      	movs	r0, r1
 80020f2:	e7cd      	b.n	8002090 <__gedf2+0x5c>
 80020f4:	4243      	negs	r3, r0
 80020f6:	4158      	adcs	r0, r3
 80020f8:	2302      	movs	r3, #2
 80020fa:	4240      	negs	r0, r0
 80020fc:	4018      	ands	r0, r3
 80020fe:	3801      	subs	r0, #1
 8002100:	e7c6      	b.n	8002090 <__gedf2+0x5c>
 8002102:	2002      	movs	r0, #2
 8002104:	4240      	negs	r0, r0
 8002106:	e7c3      	b.n	8002090 <__gedf2+0x5c>
 8002108:	45c4      	cmp	ip, r8
 800210a:	d8bd      	bhi.n	8002088 <__gedf2+0x54>
 800210c:	2000      	movs	r0, #0
 800210e:	45c4      	cmp	ip, r8
 8002110:	d2be      	bcs.n	8002090 <__gedf2+0x5c>
 8002112:	e7eb      	b.n	80020ec <__gedf2+0xb8>
 8002114:	000007ff 	.word	0x000007ff

08002118 <__ledf2>:
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	464e      	mov	r6, r9
 800211c:	4645      	mov	r5, r8
 800211e:	4657      	mov	r7, sl
 8002120:	46de      	mov	lr, fp
 8002122:	0004      	movs	r4, r0
 8002124:	0018      	movs	r0, r3
 8002126:	b5e0      	push	{r5, r6, r7, lr}
 8002128:	0016      	movs	r6, r2
 800212a:	031b      	lsls	r3, r3, #12
 800212c:	0b1b      	lsrs	r3, r3, #12
 800212e:	4d31      	ldr	r5, [pc, #196]	; (80021f4 <__ledf2+0xdc>)
 8002130:	030f      	lsls	r7, r1, #12
 8002132:	004a      	lsls	r2, r1, #1
 8002134:	4699      	mov	r9, r3
 8002136:	0043      	lsls	r3, r0, #1
 8002138:	46a4      	mov	ip, r4
 800213a:	46b0      	mov	r8, r6
 800213c:	0b3f      	lsrs	r7, r7, #12
 800213e:	0d52      	lsrs	r2, r2, #21
 8002140:	0fc9      	lsrs	r1, r1, #31
 8002142:	0d5b      	lsrs	r3, r3, #21
 8002144:	0fc0      	lsrs	r0, r0, #31
 8002146:	42aa      	cmp	r2, r5
 8002148:	d011      	beq.n	800216e <__ledf2+0x56>
 800214a:	42ab      	cmp	r3, r5
 800214c:	d014      	beq.n	8002178 <__ledf2+0x60>
 800214e:	2a00      	cmp	r2, #0
 8002150:	d12f      	bne.n	80021b2 <__ledf2+0x9a>
 8002152:	433c      	orrs	r4, r7
 8002154:	46a3      	mov	fp, r4
 8002156:	4265      	negs	r5, r4
 8002158:	4165      	adcs	r5, r4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d114      	bne.n	8002188 <__ledf2+0x70>
 800215e:	464c      	mov	r4, r9
 8002160:	4326      	orrs	r6, r4
 8002162:	d111      	bne.n	8002188 <__ledf2+0x70>
 8002164:	465b      	mov	r3, fp
 8002166:	2000      	movs	r0, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d017      	beq.n	800219c <__ledf2+0x84>
 800216c:	e010      	b.n	8002190 <__ledf2+0x78>
 800216e:	003d      	movs	r5, r7
 8002170:	4325      	orrs	r5, r4
 8002172:	d112      	bne.n	800219a <__ledf2+0x82>
 8002174:	4293      	cmp	r3, r2
 8002176:	d11c      	bne.n	80021b2 <__ledf2+0x9a>
 8002178:	464d      	mov	r5, r9
 800217a:	432e      	orrs	r6, r5
 800217c:	d10d      	bne.n	800219a <__ledf2+0x82>
 800217e:	2a00      	cmp	r2, #0
 8002180:	d104      	bne.n	800218c <__ledf2+0x74>
 8002182:	433c      	orrs	r4, r7
 8002184:	4265      	negs	r5, r4
 8002186:	4165      	adcs	r5, r4
 8002188:	2d00      	cmp	r5, #0
 800218a:	d10d      	bne.n	80021a8 <__ledf2+0x90>
 800218c:	4281      	cmp	r1, r0
 800218e:	d016      	beq.n	80021be <__ledf2+0xa6>
 8002190:	2002      	movs	r0, #2
 8002192:	3901      	subs	r1, #1
 8002194:	4008      	ands	r0, r1
 8002196:	3801      	subs	r0, #1
 8002198:	e000      	b.n	800219c <__ledf2+0x84>
 800219a:	2002      	movs	r0, #2
 800219c:	bcf0      	pop	{r4, r5, r6, r7}
 800219e:	46bb      	mov	fp, r7
 80021a0:	46b2      	mov	sl, r6
 80021a2:	46a9      	mov	r9, r5
 80021a4:	46a0      	mov	r8, r4
 80021a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1f7      	bne.n	800219c <__ledf2+0x84>
 80021ac:	2001      	movs	r0, #1
 80021ae:	4240      	negs	r0, r0
 80021b0:	e7f4      	b.n	800219c <__ledf2+0x84>
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ea      	bne.n	800218c <__ledf2+0x74>
 80021b6:	464c      	mov	r4, r9
 80021b8:	4326      	orrs	r6, r4
 80021ba:	d1e7      	bne.n	800218c <__ledf2+0x74>
 80021bc:	e7e8      	b.n	8002190 <__ledf2+0x78>
 80021be:	429a      	cmp	r2, r3
 80021c0:	dd06      	ble.n	80021d0 <__ledf2+0xb8>
 80021c2:	4243      	negs	r3, r0
 80021c4:	4158      	adcs	r0, r3
 80021c6:	2302      	movs	r3, #2
 80021c8:	4240      	negs	r0, r0
 80021ca:	4018      	ands	r0, r3
 80021cc:	3801      	subs	r0, #1
 80021ce:	e7e5      	b.n	800219c <__ledf2+0x84>
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbe9      	blt.n	80021a8 <__ledf2+0x90>
 80021d4:	454f      	cmp	r7, r9
 80021d6:	d8db      	bhi.n	8002190 <__ledf2+0x78>
 80021d8:	d006      	beq.n	80021e8 <__ledf2+0xd0>
 80021da:	2000      	movs	r0, #0
 80021dc:	454f      	cmp	r7, r9
 80021de:	d2dd      	bcs.n	800219c <__ledf2+0x84>
 80021e0:	2900      	cmp	r1, #0
 80021e2:	d0e3      	beq.n	80021ac <__ledf2+0x94>
 80021e4:	0008      	movs	r0, r1
 80021e6:	e7d9      	b.n	800219c <__ledf2+0x84>
 80021e8:	45c4      	cmp	ip, r8
 80021ea:	d8d1      	bhi.n	8002190 <__ledf2+0x78>
 80021ec:	2000      	movs	r0, #0
 80021ee:	45c4      	cmp	ip, r8
 80021f0:	d2d4      	bcs.n	800219c <__ledf2+0x84>
 80021f2:	e7f5      	b.n	80021e0 <__ledf2+0xc8>
 80021f4:	000007ff 	.word	0x000007ff

080021f8 <__aeabi_dmul>:
 80021f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fa:	4657      	mov	r7, sl
 80021fc:	464e      	mov	r6, r9
 80021fe:	4645      	mov	r5, r8
 8002200:	46de      	mov	lr, fp
 8002202:	b5e0      	push	{r5, r6, r7, lr}
 8002204:	4698      	mov	r8, r3
 8002206:	030c      	lsls	r4, r1, #12
 8002208:	004b      	lsls	r3, r1, #1
 800220a:	0006      	movs	r6, r0
 800220c:	4692      	mov	sl, r2
 800220e:	b087      	sub	sp, #28
 8002210:	0b24      	lsrs	r4, r4, #12
 8002212:	0d5b      	lsrs	r3, r3, #21
 8002214:	0fcf      	lsrs	r7, r1, #31
 8002216:	2b00      	cmp	r3, #0
 8002218:	d06c      	beq.n	80022f4 <__aeabi_dmul+0xfc>
 800221a:	4add      	ldr	r2, [pc, #884]	; (8002590 <__aeabi_dmul+0x398>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d100      	bne.n	8002222 <__aeabi_dmul+0x2a>
 8002220:	e086      	b.n	8002330 <__aeabi_dmul+0x138>
 8002222:	0f42      	lsrs	r2, r0, #29
 8002224:	00e4      	lsls	r4, r4, #3
 8002226:	4314      	orrs	r4, r2
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	0412      	lsls	r2, r2, #16
 800222c:	4314      	orrs	r4, r2
 800222e:	4ad9      	ldr	r2, [pc, #868]	; (8002594 <__aeabi_dmul+0x39c>)
 8002230:	00c5      	lsls	r5, r0, #3
 8002232:	4694      	mov	ip, r2
 8002234:	4463      	add	r3, ip
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2300      	movs	r3, #0
 800223a:	4699      	mov	r9, r3
 800223c:	469b      	mov	fp, r3
 800223e:	4643      	mov	r3, r8
 8002240:	4642      	mov	r2, r8
 8002242:	031e      	lsls	r6, r3, #12
 8002244:	0fd2      	lsrs	r2, r2, #31
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4650      	mov	r0, sl
 800224a:	4690      	mov	r8, r2
 800224c:	0b36      	lsrs	r6, r6, #12
 800224e:	0d5b      	lsrs	r3, r3, #21
 8002250:	d100      	bne.n	8002254 <__aeabi_dmul+0x5c>
 8002252:	e078      	b.n	8002346 <__aeabi_dmul+0x14e>
 8002254:	4ace      	ldr	r2, [pc, #824]	; (8002590 <__aeabi_dmul+0x398>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01d      	beq.n	8002296 <__aeabi_dmul+0x9e>
 800225a:	49ce      	ldr	r1, [pc, #824]	; (8002594 <__aeabi_dmul+0x39c>)
 800225c:	0f42      	lsrs	r2, r0, #29
 800225e:	468c      	mov	ip, r1
 8002260:	9900      	ldr	r1, [sp, #0]
 8002262:	4463      	add	r3, ip
 8002264:	00f6      	lsls	r6, r6, #3
 8002266:	468c      	mov	ip, r1
 8002268:	4316      	orrs	r6, r2
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	449c      	add	ip, r3
 800226e:	0412      	lsls	r2, r2, #16
 8002270:	4663      	mov	r3, ip
 8002272:	4316      	orrs	r6, r2
 8002274:	00c2      	lsls	r2, r0, #3
 8002276:	2000      	movs	r0, #0
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	9900      	ldr	r1, [sp, #0]
 800227c:	4643      	mov	r3, r8
 800227e:	3101      	adds	r1, #1
 8002280:	468c      	mov	ip, r1
 8002282:	4649      	mov	r1, r9
 8002284:	407b      	eors	r3, r7
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	290f      	cmp	r1, #15
 800228a:	d900      	bls.n	800228e <__aeabi_dmul+0x96>
 800228c:	e07e      	b.n	800238c <__aeabi_dmul+0x194>
 800228e:	4bc2      	ldr	r3, [pc, #776]	; (8002598 <__aeabi_dmul+0x3a0>)
 8002290:	0089      	lsls	r1, r1, #2
 8002292:	5859      	ldr	r1, [r3, r1]
 8002294:	468f      	mov	pc, r1
 8002296:	4652      	mov	r2, sl
 8002298:	9b00      	ldr	r3, [sp, #0]
 800229a:	4332      	orrs	r2, r6
 800229c:	d000      	beq.n	80022a0 <__aeabi_dmul+0xa8>
 800229e:	e156      	b.n	800254e <__aeabi_dmul+0x356>
 80022a0:	49bb      	ldr	r1, [pc, #748]	; (8002590 <__aeabi_dmul+0x398>)
 80022a2:	2600      	movs	r6, #0
 80022a4:	468c      	mov	ip, r1
 80022a6:	4463      	add	r3, ip
 80022a8:	4649      	mov	r1, r9
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2302      	movs	r3, #2
 80022ae:	4319      	orrs	r1, r3
 80022b0:	4689      	mov	r9, r1
 80022b2:	2002      	movs	r0, #2
 80022b4:	e7e1      	b.n	800227a <__aeabi_dmul+0x82>
 80022b6:	4643      	mov	r3, r8
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	0034      	movs	r4, r6
 80022bc:	0015      	movs	r5, r2
 80022be:	4683      	mov	fp, r0
 80022c0:	465b      	mov	r3, fp
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d05e      	beq.n	8002384 <__aeabi_dmul+0x18c>
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d100      	bne.n	80022cc <__aeabi_dmul+0xd4>
 80022ca:	e1f3      	b.n	80026b4 <__aeabi_dmul+0x4bc>
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d000      	beq.n	80022d2 <__aeabi_dmul+0xda>
 80022d0:	e118      	b.n	8002504 <__aeabi_dmul+0x30c>
 80022d2:	2200      	movs	r2, #0
 80022d4:	2400      	movs	r4, #0
 80022d6:	2500      	movs	r5, #0
 80022d8:	9b01      	ldr	r3, [sp, #4]
 80022da:	0512      	lsls	r2, r2, #20
 80022dc:	4322      	orrs	r2, r4
 80022de:	07db      	lsls	r3, r3, #31
 80022e0:	431a      	orrs	r2, r3
 80022e2:	0028      	movs	r0, r5
 80022e4:	0011      	movs	r1, r2
 80022e6:	b007      	add	sp, #28
 80022e8:	bcf0      	pop	{r4, r5, r6, r7}
 80022ea:	46bb      	mov	fp, r7
 80022ec:	46b2      	mov	sl, r6
 80022ee:	46a9      	mov	r9, r5
 80022f0:	46a0      	mov	r8, r4
 80022f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f4:	0025      	movs	r5, r4
 80022f6:	4305      	orrs	r5, r0
 80022f8:	d100      	bne.n	80022fc <__aeabi_dmul+0x104>
 80022fa:	e141      	b.n	8002580 <__aeabi_dmul+0x388>
 80022fc:	2c00      	cmp	r4, #0
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x10a>
 8002300:	e1ad      	b.n	800265e <__aeabi_dmul+0x466>
 8002302:	0020      	movs	r0, r4
 8002304:	f000 fef0 	bl	80030e8 <__clzsi2>
 8002308:	0001      	movs	r1, r0
 800230a:	0002      	movs	r2, r0
 800230c:	390b      	subs	r1, #11
 800230e:	231d      	movs	r3, #29
 8002310:	0010      	movs	r0, r2
 8002312:	1a5b      	subs	r3, r3, r1
 8002314:	0031      	movs	r1, r6
 8002316:	0035      	movs	r5, r6
 8002318:	3808      	subs	r0, #8
 800231a:	4084      	lsls	r4, r0
 800231c:	40d9      	lsrs	r1, r3
 800231e:	4085      	lsls	r5, r0
 8002320:	430c      	orrs	r4, r1
 8002322:	489e      	ldr	r0, [pc, #632]	; (800259c <__aeabi_dmul+0x3a4>)
 8002324:	1a83      	subs	r3, r0, r2
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2300      	movs	r3, #0
 800232a:	4699      	mov	r9, r3
 800232c:	469b      	mov	fp, r3
 800232e:	e786      	b.n	800223e <__aeabi_dmul+0x46>
 8002330:	0005      	movs	r5, r0
 8002332:	4325      	orrs	r5, r4
 8002334:	d000      	beq.n	8002338 <__aeabi_dmul+0x140>
 8002336:	e11c      	b.n	8002572 <__aeabi_dmul+0x37a>
 8002338:	2208      	movs	r2, #8
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2302      	movs	r3, #2
 800233e:	2400      	movs	r4, #0
 8002340:	4691      	mov	r9, r2
 8002342:	469b      	mov	fp, r3
 8002344:	e77b      	b.n	800223e <__aeabi_dmul+0x46>
 8002346:	4652      	mov	r2, sl
 8002348:	4332      	orrs	r2, r6
 800234a:	d100      	bne.n	800234e <__aeabi_dmul+0x156>
 800234c:	e10a      	b.n	8002564 <__aeabi_dmul+0x36c>
 800234e:	2e00      	cmp	r6, #0
 8002350:	d100      	bne.n	8002354 <__aeabi_dmul+0x15c>
 8002352:	e176      	b.n	8002642 <__aeabi_dmul+0x44a>
 8002354:	0030      	movs	r0, r6
 8002356:	f000 fec7 	bl	80030e8 <__clzsi2>
 800235a:	0002      	movs	r2, r0
 800235c:	3a0b      	subs	r2, #11
 800235e:	231d      	movs	r3, #29
 8002360:	0001      	movs	r1, r0
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	4652      	mov	r2, sl
 8002366:	3908      	subs	r1, #8
 8002368:	40da      	lsrs	r2, r3
 800236a:	408e      	lsls	r6, r1
 800236c:	4316      	orrs	r6, r2
 800236e:	4652      	mov	r2, sl
 8002370:	408a      	lsls	r2, r1
 8002372:	9b00      	ldr	r3, [sp, #0]
 8002374:	4989      	ldr	r1, [pc, #548]	; (800259c <__aeabi_dmul+0x3a4>)
 8002376:	1a18      	subs	r0, r3, r0
 8002378:	0003      	movs	r3, r0
 800237a:	468c      	mov	ip, r1
 800237c:	4463      	add	r3, ip
 800237e:	2000      	movs	r0, #0
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	e77a      	b.n	800227a <__aeabi_dmul+0x82>
 8002384:	2400      	movs	r4, #0
 8002386:	2500      	movs	r5, #0
 8002388:	4a81      	ldr	r2, [pc, #516]	; (8002590 <__aeabi_dmul+0x398>)
 800238a:	e7a5      	b.n	80022d8 <__aeabi_dmul+0xe0>
 800238c:	0c2f      	lsrs	r7, r5, #16
 800238e:	042d      	lsls	r5, r5, #16
 8002390:	0c2d      	lsrs	r5, r5, #16
 8002392:	002b      	movs	r3, r5
 8002394:	0c11      	lsrs	r1, r2, #16
 8002396:	0412      	lsls	r2, r2, #16
 8002398:	0c12      	lsrs	r2, r2, #16
 800239a:	4353      	muls	r3, r2
 800239c:	4698      	mov	r8, r3
 800239e:	0013      	movs	r3, r2
 80023a0:	0028      	movs	r0, r5
 80023a2:	437b      	muls	r3, r7
 80023a4:	4699      	mov	r9, r3
 80023a6:	4348      	muls	r0, r1
 80023a8:	4448      	add	r0, r9
 80023aa:	4683      	mov	fp, r0
 80023ac:	4640      	mov	r0, r8
 80023ae:	000b      	movs	r3, r1
 80023b0:	0c00      	lsrs	r0, r0, #16
 80023b2:	4682      	mov	sl, r0
 80023b4:	4658      	mov	r0, fp
 80023b6:	437b      	muls	r3, r7
 80023b8:	4450      	add	r0, sl
 80023ba:	9302      	str	r3, [sp, #8]
 80023bc:	4581      	cmp	r9, r0
 80023be:	d906      	bls.n	80023ce <__aeabi_dmul+0x1d6>
 80023c0:	469a      	mov	sl, r3
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	025b      	lsls	r3, r3, #9
 80023c6:	4699      	mov	r9, r3
 80023c8:	44ca      	add	sl, r9
 80023ca:	4653      	mov	r3, sl
 80023cc:	9302      	str	r3, [sp, #8]
 80023ce:	0c03      	lsrs	r3, r0, #16
 80023d0:	469b      	mov	fp, r3
 80023d2:	4643      	mov	r3, r8
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	0400      	lsls	r0, r0, #16
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	4698      	mov	r8, r3
 80023dc:	0003      	movs	r3, r0
 80023de:	4443      	add	r3, r8
 80023e0:	9304      	str	r3, [sp, #16]
 80023e2:	0c33      	lsrs	r3, r6, #16
 80023e4:	4699      	mov	r9, r3
 80023e6:	002b      	movs	r3, r5
 80023e8:	0436      	lsls	r6, r6, #16
 80023ea:	0c36      	lsrs	r6, r6, #16
 80023ec:	4373      	muls	r3, r6
 80023ee:	4698      	mov	r8, r3
 80023f0:	0033      	movs	r3, r6
 80023f2:	437b      	muls	r3, r7
 80023f4:	469a      	mov	sl, r3
 80023f6:	464b      	mov	r3, r9
 80023f8:	435d      	muls	r5, r3
 80023fa:	435f      	muls	r7, r3
 80023fc:	4643      	mov	r3, r8
 80023fe:	4455      	add	r5, sl
 8002400:	0c18      	lsrs	r0, r3, #16
 8002402:	1940      	adds	r0, r0, r5
 8002404:	4582      	cmp	sl, r0
 8002406:	d903      	bls.n	8002410 <__aeabi_dmul+0x218>
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	025b      	lsls	r3, r3, #9
 800240c:	469a      	mov	sl, r3
 800240e:	4457      	add	r7, sl
 8002410:	0c05      	lsrs	r5, r0, #16
 8002412:	19eb      	adds	r3, r5, r7
 8002414:	9305      	str	r3, [sp, #20]
 8002416:	4643      	mov	r3, r8
 8002418:	041d      	lsls	r5, r3, #16
 800241a:	0c2d      	lsrs	r5, r5, #16
 800241c:	0400      	lsls	r0, r0, #16
 800241e:	1940      	adds	r0, r0, r5
 8002420:	0c25      	lsrs	r5, r4, #16
 8002422:	0424      	lsls	r4, r4, #16
 8002424:	0c24      	lsrs	r4, r4, #16
 8002426:	0027      	movs	r7, r4
 8002428:	4357      	muls	r7, r2
 800242a:	436a      	muls	r2, r5
 800242c:	4690      	mov	r8, r2
 800242e:	002a      	movs	r2, r5
 8002430:	0c3b      	lsrs	r3, r7, #16
 8002432:	469a      	mov	sl, r3
 8002434:	434a      	muls	r2, r1
 8002436:	4361      	muls	r1, r4
 8002438:	4441      	add	r1, r8
 800243a:	4451      	add	r1, sl
 800243c:	4483      	add	fp, r0
 800243e:	4588      	cmp	r8, r1
 8002440:	d903      	bls.n	800244a <__aeabi_dmul+0x252>
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	025b      	lsls	r3, r3, #9
 8002446:	4698      	mov	r8, r3
 8002448:	4442      	add	r2, r8
 800244a:	043f      	lsls	r7, r7, #16
 800244c:	0c0b      	lsrs	r3, r1, #16
 800244e:	0c3f      	lsrs	r7, r7, #16
 8002450:	0409      	lsls	r1, r1, #16
 8002452:	19c9      	adds	r1, r1, r7
 8002454:	0027      	movs	r7, r4
 8002456:	4698      	mov	r8, r3
 8002458:	464b      	mov	r3, r9
 800245a:	4377      	muls	r7, r6
 800245c:	435c      	muls	r4, r3
 800245e:	436e      	muls	r6, r5
 8002460:	435d      	muls	r5, r3
 8002462:	0c3b      	lsrs	r3, r7, #16
 8002464:	4699      	mov	r9, r3
 8002466:	19a4      	adds	r4, r4, r6
 8002468:	444c      	add	r4, r9
 800246a:	4442      	add	r2, r8
 800246c:	9503      	str	r5, [sp, #12]
 800246e:	42a6      	cmp	r6, r4
 8002470:	d904      	bls.n	800247c <__aeabi_dmul+0x284>
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	025b      	lsls	r3, r3, #9
 8002476:	4698      	mov	r8, r3
 8002478:	4445      	add	r5, r8
 800247a:	9503      	str	r5, [sp, #12]
 800247c:	9b02      	ldr	r3, [sp, #8]
 800247e:	043f      	lsls	r7, r7, #16
 8002480:	445b      	add	r3, fp
 8002482:	001e      	movs	r6, r3
 8002484:	4283      	cmp	r3, r0
 8002486:	4180      	sbcs	r0, r0
 8002488:	0423      	lsls	r3, r4, #16
 800248a:	4698      	mov	r8, r3
 800248c:	9b05      	ldr	r3, [sp, #20]
 800248e:	0c3f      	lsrs	r7, r7, #16
 8002490:	4447      	add	r7, r8
 8002492:	4698      	mov	r8, r3
 8002494:	1876      	adds	r6, r6, r1
 8002496:	428e      	cmp	r6, r1
 8002498:	4189      	sbcs	r1, r1
 800249a:	4447      	add	r7, r8
 800249c:	4240      	negs	r0, r0
 800249e:	183d      	adds	r5, r7, r0
 80024a0:	46a8      	mov	r8, r5
 80024a2:	4693      	mov	fp, r2
 80024a4:	4249      	negs	r1, r1
 80024a6:	468a      	mov	sl, r1
 80024a8:	44c3      	add	fp, r8
 80024aa:	429f      	cmp	r7, r3
 80024ac:	41bf      	sbcs	r7, r7
 80024ae:	4580      	cmp	r8, r0
 80024b0:	4180      	sbcs	r0, r0
 80024b2:	9b03      	ldr	r3, [sp, #12]
 80024b4:	44da      	add	sl, fp
 80024b6:	4698      	mov	r8, r3
 80024b8:	4653      	mov	r3, sl
 80024ba:	4240      	negs	r0, r0
 80024bc:	427f      	negs	r7, r7
 80024be:	4307      	orrs	r7, r0
 80024c0:	0c24      	lsrs	r4, r4, #16
 80024c2:	4593      	cmp	fp, r2
 80024c4:	4192      	sbcs	r2, r2
 80024c6:	458a      	cmp	sl, r1
 80024c8:	4189      	sbcs	r1, r1
 80024ca:	193f      	adds	r7, r7, r4
 80024cc:	0ddc      	lsrs	r4, r3, #23
 80024ce:	9b04      	ldr	r3, [sp, #16]
 80024d0:	0275      	lsls	r5, r6, #9
 80024d2:	431d      	orrs	r5, r3
 80024d4:	1e68      	subs	r0, r5, #1
 80024d6:	4185      	sbcs	r5, r0
 80024d8:	4653      	mov	r3, sl
 80024da:	4252      	negs	r2, r2
 80024dc:	4249      	negs	r1, r1
 80024de:	430a      	orrs	r2, r1
 80024e0:	18bf      	adds	r7, r7, r2
 80024e2:	4447      	add	r7, r8
 80024e4:	0df6      	lsrs	r6, r6, #23
 80024e6:	027f      	lsls	r7, r7, #9
 80024e8:	4335      	orrs	r5, r6
 80024ea:	025a      	lsls	r2, r3, #9
 80024ec:	433c      	orrs	r4, r7
 80024ee:	4315      	orrs	r5, r2
 80024f0:	01fb      	lsls	r3, r7, #7
 80024f2:	d400      	bmi.n	80024f6 <__aeabi_dmul+0x2fe>
 80024f4:	e0c1      	b.n	800267a <__aeabi_dmul+0x482>
 80024f6:	2101      	movs	r1, #1
 80024f8:	086a      	lsrs	r2, r5, #1
 80024fa:	400d      	ands	r5, r1
 80024fc:	4315      	orrs	r5, r2
 80024fe:	07e2      	lsls	r2, r4, #31
 8002500:	4315      	orrs	r5, r2
 8002502:	0864      	lsrs	r4, r4, #1
 8002504:	4926      	ldr	r1, [pc, #152]	; (80025a0 <__aeabi_dmul+0x3a8>)
 8002506:	4461      	add	r1, ip
 8002508:	2900      	cmp	r1, #0
 800250a:	dd56      	ble.n	80025ba <__aeabi_dmul+0x3c2>
 800250c:	076b      	lsls	r3, r5, #29
 800250e:	d009      	beq.n	8002524 <__aeabi_dmul+0x32c>
 8002510:	220f      	movs	r2, #15
 8002512:	402a      	ands	r2, r5
 8002514:	2a04      	cmp	r2, #4
 8002516:	d005      	beq.n	8002524 <__aeabi_dmul+0x32c>
 8002518:	1d2a      	adds	r2, r5, #4
 800251a:	42aa      	cmp	r2, r5
 800251c:	41ad      	sbcs	r5, r5
 800251e:	426d      	negs	r5, r5
 8002520:	1964      	adds	r4, r4, r5
 8002522:	0015      	movs	r5, r2
 8002524:	01e3      	lsls	r3, r4, #7
 8002526:	d504      	bpl.n	8002532 <__aeabi_dmul+0x33a>
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <__aeabi_dmul+0x3ac>)
 800252c:	00c9      	lsls	r1, r1, #3
 800252e:	4014      	ands	r4, r2
 8002530:	4461      	add	r1, ip
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <__aeabi_dmul+0x3b0>)
 8002534:	4291      	cmp	r1, r2
 8002536:	dd00      	ble.n	800253a <__aeabi_dmul+0x342>
 8002538:	e724      	b.n	8002384 <__aeabi_dmul+0x18c>
 800253a:	0762      	lsls	r2, r4, #29
 800253c:	08ed      	lsrs	r5, r5, #3
 800253e:	0264      	lsls	r4, r4, #9
 8002540:	0549      	lsls	r1, r1, #21
 8002542:	4315      	orrs	r5, r2
 8002544:	0b24      	lsrs	r4, r4, #12
 8002546:	0d4a      	lsrs	r2, r1, #21
 8002548:	e6c6      	b.n	80022d8 <__aeabi_dmul+0xe0>
 800254a:	9701      	str	r7, [sp, #4]
 800254c:	e6b8      	b.n	80022c0 <__aeabi_dmul+0xc8>
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <__aeabi_dmul+0x398>)
 8002550:	2003      	movs	r0, #3
 8002552:	4694      	mov	ip, r2
 8002554:	4463      	add	r3, ip
 8002556:	464a      	mov	r2, r9
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2303      	movs	r3, #3
 800255c:	431a      	orrs	r2, r3
 800255e:	4691      	mov	r9, r2
 8002560:	4652      	mov	r2, sl
 8002562:	e68a      	b.n	800227a <__aeabi_dmul+0x82>
 8002564:	4649      	mov	r1, r9
 8002566:	2301      	movs	r3, #1
 8002568:	4319      	orrs	r1, r3
 800256a:	4689      	mov	r9, r1
 800256c:	2600      	movs	r6, #0
 800256e:	2001      	movs	r0, #1
 8002570:	e683      	b.n	800227a <__aeabi_dmul+0x82>
 8002572:	220c      	movs	r2, #12
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2303      	movs	r3, #3
 8002578:	0005      	movs	r5, r0
 800257a:	4691      	mov	r9, r2
 800257c:	469b      	mov	fp, r3
 800257e:	e65e      	b.n	800223e <__aeabi_dmul+0x46>
 8002580:	2304      	movs	r3, #4
 8002582:	4699      	mov	r9, r3
 8002584:	2300      	movs	r3, #0
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	2400      	movs	r4, #0
 800258c:	469b      	mov	fp, r3
 800258e:	e656      	b.n	800223e <__aeabi_dmul+0x46>
 8002590:	000007ff 	.word	0x000007ff
 8002594:	fffffc01 	.word	0xfffffc01
 8002598:	0800d724 	.word	0x0800d724
 800259c:	fffffc0d 	.word	0xfffffc0d
 80025a0:	000003ff 	.word	0x000003ff
 80025a4:	feffffff 	.word	0xfeffffff
 80025a8:	000007fe 	.word	0x000007fe
 80025ac:	2300      	movs	r3, #0
 80025ae:	2480      	movs	r4, #128	; 0x80
 80025b0:	2500      	movs	r5, #0
 80025b2:	4a44      	ldr	r2, [pc, #272]	; (80026c4 <__aeabi_dmul+0x4cc>)
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	0324      	lsls	r4, r4, #12
 80025b8:	e68e      	b.n	80022d8 <__aeabi_dmul+0xe0>
 80025ba:	2001      	movs	r0, #1
 80025bc:	1a40      	subs	r0, r0, r1
 80025be:	2838      	cmp	r0, #56	; 0x38
 80025c0:	dd00      	ble.n	80025c4 <__aeabi_dmul+0x3cc>
 80025c2:	e686      	b.n	80022d2 <__aeabi_dmul+0xda>
 80025c4:	281f      	cmp	r0, #31
 80025c6:	dd5b      	ble.n	8002680 <__aeabi_dmul+0x488>
 80025c8:	221f      	movs	r2, #31
 80025ca:	0023      	movs	r3, r4
 80025cc:	4252      	negs	r2, r2
 80025ce:	1a51      	subs	r1, r2, r1
 80025d0:	40cb      	lsrs	r3, r1
 80025d2:	0019      	movs	r1, r3
 80025d4:	2820      	cmp	r0, #32
 80025d6:	d003      	beq.n	80025e0 <__aeabi_dmul+0x3e8>
 80025d8:	4a3b      	ldr	r2, [pc, #236]	; (80026c8 <__aeabi_dmul+0x4d0>)
 80025da:	4462      	add	r2, ip
 80025dc:	4094      	lsls	r4, r2
 80025de:	4325      	orrs	r5, r4
 80025e0:	1e6a      	subs	r2, r5, #1
 80025e2:	4195      	sbcs	r5, r2
 80025e4:	002a      	movs	r2, r5
 80025e6:	430a      	orrs	r2, r1
 80025e8:	2107      	movs	r1, #7
 80025ea:	000d      	movs	r5, r1
 80025ec:	2400      	movs	r4, #0
 80025ee:	4015      	ands	r5, r2
 80025f0:	4211      	tst	r1, r2
 80025f2:	d05b      	beq.n	80026ac <__aeabi_dmul+0x4b4>
 80025f4:	210f      	movs	r1, #15
 80025f6:	2400      	movs	r4, #0
 80025f8:	4011      	ands	r1, r2
 80025fa:	2904      	cmp	r1, #4
 80025fc:	d053      	beq.n	80026a6 <__aeabi_dmul+0x4ae>
 80025fe:	1d11      	adds	r1, r2, #4
 8002600:	4291      	cmp	r1, r2
 8002602:	4192      	sbcs	r2, r2
 8002604:	4252      	negs	r2, r2
 8002606:	18a4      	adds	r4, r4, r2
 8002608:	000a      	movs	r2, r1
 800260a:	0223      	lsls	r3, r4, #8
 800260c:	d54b      	bpl.n	80026a6 <__aeabi_dmul+0x4ae>
 800260e:	2201      	movs	r2, #1
 8002610:	2400      	movs	r4, #0
 8002612:	2500      	movs	r5, #0
 8002614:	e660      	b.n	80022d8 <__aeabi_dmul+0xe0>
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	031b      	lsls	r3, r3, #12
 800261a:	421c      	tst	r4, r3
 800261c:	d009      	beq.n	8002632 <__aeabi_dmul+0x43a>
 800261e:	421e      	tst	r6, r3
 8002620:	d107      	bne.n	8002632 <__aeabi_dmul+0x43a>
 8002622:	4333      	orrs	r3, r6
 8002624:	031c      	lsls	r4, r3, #12
 8002626:	4643      	mov	r3, r8
 8002628:	0015      	movs	r5, r2
 800262a:	0b24      	lsrs	r4, r4, #12
 800262c:	4a25      	ldr	r2, [pc, #148]	; (80026c4 <__aeabi_dmul+0x4cc>)
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	e652      	b.n	80022d8 <__aeabi_dmul+0xe0>
 8002632:	2280      	movs	r2, #128	; 0x80
 8002634:	0312      	lsls	r2, r2, #12
 8002636:	4314      	orrs	r4, r2
 8002638:	0324      	lsls	r4, r4, #12
 800263a:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <__aeabi_dmul+0x4cc>)
 800263c:	0b24      	lsrs	r4, r4, #12
 800263e:	9701      	str	r7, [sp, #4]
 8002640:	e64a      	b.n	80022d8 <__aeabi_dmul+0xe0>
 8002642:	f000 fd51 	bl	80030e8 <__clzsi2>
 8002646:	0003      	movs	r3, r0
 8002648:	001a      	movs	r2, r3
 800264a:	3215      	adds	r2, #21
 800264c:	3020      	adds	r0, #32
 800264e:	2a1c      	cmp	r2, #28
 8002650:	dc00      	bgt.n	8002654 <__aeabi_dmul+0x45c>
 8002652:	e684      	b.n	800235e <__aeabi_dmul+0x166>
 8002654:	4656      	mov	r6, sl
 8002656:	3b08      	subs	r3, #8
 8002658:	2200      	movs	r2, #0
 800265a:	409e      	lsls	r6, r3
 800265c:	e689      	b.n	8002372 <__aeabi_dmul+0x17a>
 800265e:	f000 fd43 	bl	80030e8 <__clzsi2>
 8002662:	0001      	movs	r1, r0
 8002664:	0002      	movs	r2, r0
 8002666:	3115      	adds	r1, #21
 8002668:	3220      	adds	r2, #32
 800266a:	291c      	cmp	r1, #28
 800266c:	dc00      	bgt.n	8002670 <__aeabi_dmul+0x478>
 800266e:	e64e      	b.n	800230e <__aeabi_dmul+0x116>
 8002670:	0034      	movs	r4, r6
 8002672:	3808      	subs	r0, #8
 8002674:	2500      	movs	r5, #0
 8002676:	4084      	lsls	r4, r0
 8002678:	e653      	b.n	8002322 <__aeabi_dmul+0x12a>
 800267a:	9b00      	ldr	r3, [sp, #0]
 800267c:	469c      	mov	ip, r3
 800267e:	e741      	b.n	8002504 <__aeabi_dmul+0x30c>
 8002680:	4912      	ldr	r1, [pc, #72]	; (80026cc <__aeabi_dmul+0x4d4>)
 8002682:	0022      	movs	r2, r4
 8002684:	4461      	add	r1, ip
 8002686:	002e      	movs	r6, r5
 8002688:	408d      	lsls	r5, r1
 800268a:	408a      	lsls	r2, r1
 800268c:	40c6      	lsrs	r6, r0
 800268e:	1e69      	subs	r1, r5, #1
 8002690:	418d      	sbcs	r5, r1
 8002692:	4332      	orrs	r2, r6
 8002694:	432a      	orrs	r2, r5
 8002696:	40c4      	lsrs	r4, r0
 8002698:	0753      	lsls	r3, r2, #29
 800269a:	d0b6      	beq.n	800260a <__aeabi_dmul+0x412>
 800269c:	210f      	movs	r1, #15
 800269e:	4011      	ands	r1, r2
 80026a0:	2904      	cmp	r1, #4
 80026a2:	d1ac      	bne.n	80025fe <__aeabi_dmul+0x406>
 80026a4:	e7b1      	b.n	800260a <__aeabi_dmul+0x412>
 80026a6:	0765      	lsls	r5, r4, #29
 80026a8:	0264      	lsls	r4, r4, #9
 80026aa:	0b24      	lsrs	r4, r4, #12
 80026ac:	08d2      	lsrs	r2, r2, #3
 80026ae:	4315      	orrs	r5, r2
 80026b0:	2200      	movs	r2, #0
 80026b2:	e611      	b.n	80022d8 <__aeabi_dmul+0xe0>
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	0312      	lsls	r2, r2, #12
 80026b8:	4314      	orrs	r4, r2
 80026ba:	0324      	lsls	r4, r4, #12
 80026bc:	4a01      	ldr	r2, [pc, #4]	; (80026c4 <__aeabi_dmul+0x4cc>)
 80026be:	0b24      	lsrs	r4, r4, #12
 80026c0:	e60a      	b.n	80022d8 <__aeabi_dmul+0xe0>
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	000007ff 	.word	0x000007ff
 80026c8:	0000043e 	.word	0x0000043e
 80026cc:	0000041e 	.word	0x0000041e

080026d0 <__aeabi_dsub>:
 80026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d2:	4657      	mov	r7, sl
 80026d4:	464e      	mov	r6, r9
 80026d6:	4645      	mov	r5, r8
 80026d8:	46de      	mov	lr, fp
 80026da:	0004      	movs	r4, r0
 80026dc:	b5e0      	push	{r5, r6, r7, lr}
 80026de:	001f      	movs	r7, r3
 80026e0:	0010      	movs	r0, r2
 80026e2:	030b      	lsls	r3, r1, #12
 80026e4:	0f62      	lsrs	r2, r4, #29
 80026e6:	004e      	lsls	r6, r1, #1
 80026e8:	0fcd      	lsrs	r5, r1, #31
 80026ea:	0a5b      	lsrs	r3, r3, #9
 80026ec:	0339      	lsls	r1, r7, #12
 80026ee:	4313      	orrs	r3, r2
 80026f0:	0a49      	lsrs	r1, r1, #9
 80026f2:	00e2      	lsls	r2, r4, #3
 80026f4:	0f44      	lsrs	r4, r0, #29
 80026f6:	4321      	orrs	r1, r4
 80026f8:	4cc2      	ldr	r4, [pc, #776]	; (8002a04 <__aeabi_dsub+0x334>)
 80026fa:	4691      	mov	r9, r2
 80026fc:	4692      	mov	sl, r2
 80026fe:	00c0      	lsls	r0, r0, #3
 8002700:	007a      	lsls	r2, r7, #1
 8002702:	4680      	mov	r8, r0
 8002704:	0d76      	lsrs	r6, r6, #21
 8002706:	0d52      	lsrs	r2, r2, #21
 8002708:	0fff      	lsrs	r7, r7, #31
 800270a:	42a2      	cmp	r2, r4
 800270c:	d100      	bne.n	8002710 <__aeabi_dsub+0x40>
 800270e:	e0b4      	b.n	800287a <__aeabi_dsub+0x1aa>
 8002710:	2401      	movs	r4, #1
 8002712:	4067      	eors	r7, r4
 8002714:	46bb      	mov	fp, r7
 8002716:	42bd      	cmp	r5, r7
 8002718:	d100      	bne.n	800271c <__aeabi_dsub+0x4c>
 800271a:	e088      	b.n	800282e <__aeabi_dsub+0x15e>
 800271c:	1ab4      	subs	r4, r6, r2
 800271e:	46a4      	mov	ip, r4
 8002720:	2c00      	cmp	r4, #0
 8002722:	dc00      	bgt.n	8002726 <__aeabi_dsub+0x56>
 8002724:	e0b2      	b.n	800288c <__aeabi_dsub+0x1bc>
 8002726:	2a00      	cmp	r2, #0
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x5c>
 800272a:	e0c5      	b.n	80028b8 <__aeabi_dsub+0x1e8>
 800272c:	4ab5      	ldr	r2, [pc, #724]	; (8002a04 <__aeabi_dsub+0x334>)
 800272e:	4296      	cmp	r6, r2
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x64>
 8002732:	e28b      	b.n	8002c4c <__aeabi_dsub+0x57c>
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	0412      	lsls	r2, r2, #16
 8002738:	4311      	orrs	r1, r2
 800273a:	4662      	mov	r2, ip
 800273c:	2a38      	cmp	r2, #56	; 0x38
 800273e:	dd00      	ble.n	8002742 <__aeabi_dsub+0x72>
 8002740:	e1a1      	b.n	8002a86 <__aeabi_dsub+0x3b6>
 8002742:	2a1f      	cmp	r2, #31
 8002744:	dd00      	ble.n	8002748 <__aeabi_dsub+0x78>
 8002746:	e216      	b.n	8002b76 <__aeabi_dsub+0x4a6>
 8002748:	2720      	movs	r7, #32
 800274a:	000c      	movs	r4, r1
 800274c:	1abf      	subs	r7, r7, r2
 800274e:	40bc      	lsls	r4, r7
 8002750:	0002      	movs	r2, r0
 8002752:	46a0      	mov	r8, r4
 8002754:	4664      	mov	r4, ip
 8002756:	40b8      	lsls	r0, r7
 8002758:	40e2      	lsrs	r2, r4
 800275a:	4644      	mov	r4, r8
 800275c:	4314      	orrs	r4, r2
 800275e:	0002      	movs	r2, r0
 8002760:	1e50      	subs	r0, r2, #1
 8002762:	4182      	sbcs	r2, r0
 8002764:	4660      	mov	r0, ip
 8002766:	40c1      	lsrs	r1, r0
 8002768:	4322      	orrs	r2, r4
 800276a:	1a5b      	subs	r3, r3, r1
 800276c:	4649      	mov	r1, r9
 800276e:	1a8c      	subs	r4, r1, r2
 8002770:	45a1      	cmp	r9, r4
 8002772:	4192      	sbcs	r2, r2
 8002774:	4252      	negs	r2, r2
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	4698      	mov	r8, r3
 800277a:	4643      	mov	r3, r8
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	d400      	bmi.n	8002782 <__aeabi_dsub+0xb2>
 8002780:	e117      	b.n	80029b2 <__aeabi_dsub+0x2e2>
 8002782:	4643      	mov	r3, r8
 8002784:	025b      	lsls	r3, r3, #9
 8002786:	0a5b      	lsrs	r3, r3, #9
 8002788:	4698      	mov	r8, r3
 800278a:	4643      	mov	r3, r8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d100      	bne.n	8002792 <__aeabi_dsub+0xc2>
 8002790:	e16c      	b.n	8002a6c <__aeabi_dsub+0x39c>
 8002792:	4640      	mov	r0, r8
 8002794:	f000 fca8 	bl	80030e8 <__clzsi2>
 8002798:	0002      	movs	r2, r0
 800279a:	3a08      	subs	r2, #8
 800279c:	2120      	movs	r1, #32
 800279e:	0020      	movs	r0, r4
 80027a0:	4643      	mov	r3, r8
 80027a2:	1a89      	subs	r1, r1, r2
 80027a4:	4093      	lsls	r3, r2
 80027a6:	40c8      	lsrs	r0, r1
 80027a8:	4094      	lsls	r4, r2
 80027aa:	4303      	orrs	r3, r0
 80027ac:	4296      	cmp	r6, r2
 80027ae:	dd00      	ble.n	80027b2 <__aeabi_dsub+0xe2>
 80027b0:	e157      	b.n	8002a62 <__aeabi_dsub+0x392>
 80027b2:	1b96      	subs	r6, r2, r6
 80027b4:	1c71      	adds	r1, r6, #1
 80027b6:	291f      	cmp	r1, #31
 80027b8:	dd00      	ble.n	80027bc <__aeabi_dsub+0xec>
 80027ba:	e1cb      	b.n	8002b54 <__aeabi_dsub+0x484>
 80027bc:	2220      	movs	r2, #32
 80027be:	0018      	movs	r0, r3
 80027c0:	0026      	movs	r6, r4
 80027c2:	1a52      	subs	r2, r2, r1
 80027c4:	4094      	lsls	r4, r2
 80027c6:	4090      	lsls	r0, r2
 80027c8:	40ce      	lsrs	r6, r1
 80027ca:	40cb      	lsrs	r3, r1
 80027cc:	1e62      	subs	r2, r4, #1
 80027ce:	4194      	sbcs	r4, r2
 80027d0:	4330      	orrs	r0, r6
 80027d2:	4698      	mov	r8, r3
 80027d4:	2600      	movs	r6, #0
 80027d6:	4304      	orrs	r4, r0
 80027d8:	0763      	lsls	r3, r4, #29
 80027da:	d009      	beq.n	80027f0 <__aeabi_dsub+0x120>
 80027dc:	230f      	movs	r3, #15
 80027de:	4023      	ands	r3, r4
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d005      	beq.n	80027f0 <__aeabi_dsub+0x120>
 80027e4:	1d23      	adds	r3, r4, #4
 80027e6:	42a3      	cmp	r3, r4
 80027e8:	41a4      	sbcs	r4, r4
 80027ea:	4264      	negs	r4, r4
 80027ec:	44a0      	add	r8, r4
 80027ee:	001c      	movs	r4, r3
 80027f0:	4643      	mov	r3, r8
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	d400      	bmi.n	80027f8 <__aeabi_dsub+0x128>
 80027f6:	e0df      	b.n	80029b8 <__aeabi_dsub+0x2e8>
 80027f8:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <__aeabi_dsub+0x334>)
 80027fa:	3601      	adds	r6, #1
 80027fc:	429e      	cmp	r6, r3
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x132>
 8002800:	e0fb      	b.n	80029fa <__aeabi_dsub+0x32a>
 8002802:	4642      	mov	r2, r8
 8002804:	4b80      	ldr	r3, [pc, #512]	; (8002a08 <__aeabi_dsub+0x338>)
 8002806:	08e4      	lsrs	r4, r4, #3
 8002808:	401a      	ands	r2, r3
 800280a:	0013      	movs	r3, r2
 800280c:	0571      	lsls	r1, r6, #21
 800280e:	0752      	lsls	r2, r2, #29
 8002810:	025b      	lsls	r3, r3, #9
 8002812:	4322      	orrs	r2, r4
 8002814:	0b1b      	lsrs	r3, r3, #12
 8002816:	0d49      	lsrs	r1, r1, #21
 8002818:	0509      	lsls	r1, r1, #20
 800281a:	07ed      	lsls	r5, r5, #31
 800281c:	4319      	orrs	r1, r3
 800281e:	4329      	orrs	r1, r5
 8002820:	0010      	movs	r0, r2
 8002822:	bcf0      	pop	{r4, r5, r6, r7}
 8002824:	46bb      	mov	fp, r7
 8002826:	46b2      	mov	sl, r6
 8002828:	46a9      	mov	r9, r5
 800282a:	46a0      	mov	r8, r4
 800282c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800282e:	1ab4      	subs	r4, r6, r2
 8002830:	46a4      	mov	ip, r4
 8002832:	2c00      	cmp	r4, #0
 8002834:	dd58      	ble.n	80028e8 <__aeabi_dsub+0x218>
 8002836:	2a00      	cmp	r2, #0
 8002838:	d100      	bne.n	800283c <__aeabi_dsub+0x16c>
 800283a:	e09e      	b.n	800297a <__aeabi_dsub+0x2aa>
 800283c:	4a71      	ldr	r2, [pc, #452]	; (8002a04 <__aeabi_dsub+0x334>)
 800283e:	4296      	cmp	r6, r2
 8002840:	d100      	bne.n	8002844 <__aeabi_dsub+0x174>
 8002842:	e13b      	b.n	8002abc <__aeabi_dsub+0x3ec>
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	0412      	lsls	r2, r2, #16
 8002848:	4311      	orrs	r1, r2
 800284a:	4662      	mov	r2, ip
 800284c:	2a38      	cmp	r2, #56	; 0x38
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0x182>
 8002850:	e0c1      	b.n	80029d6 <__aeabi_dsub+0x306>
 8002852:	2a1f      	cmp	r2, #31
 8002854:	dc00      	bgt.n	8002858 <__aeabi_dsub+0x188>
 8002856:	e1bb      	b.n	8002bd0 <__aeabi_dsub+0x500>
 8002858:	000c      	movs	r4, r1
 800285a:	3a20      	subs	r2, #32
 800285c:	40d4      	lsrs	r4, r2
 800285e:	0022      	movs	r2, r4
 8002860:	4664      	mov	r4, ip
 8002862:	2c20      	cmp	r4, #32
 8002864:	d004      	beq.n	8002870 <__aeabi_dsub+0x1a0>
 8002866:	2740      	movs	r7, #64	; 0x40
 8002868:	1b3f      	subs	r7, r7, r4
 800286a:	40b9      	lsls	r1, r7
 800286c:	4308      	orrs	r0, r1
 800286e:	4680      	mov	r8, r0
 8002870:	4644      	mov	r4, r8
 8002872:	1e61      	subs	r1, r4, #1
 8002874:	418c      	sbcs	r4, r1
 8002876:	4314      	orrs	r4, r2
 8002878:	e0b1      	b.n	80029de <__aeabi_dsub+0x30e>
 800287a:	000c      	movs	r4, r1
 800287c:	4304      	orrs	r4, r0
 800287e:	d02a      	beq.n	80028d6 <__aeabi_dsub+0x206>
 8002880:	46bb      	mov	fp, r7
 8002882:	42bd      	cmp	r5, r7
 8002884:	d02d      	beq.n	80028e2 <__aeabi_dsub+0x212>
 8002886:	4c61      	ldr	r4, [pc, #388]	; (8002a0c <__aeabi_dsub+0x33c>)
 8002888:	46a4      	mov	ip, r4
 800288a:	44b4      	add	ip, r6
 800288c:	4664      	mov	r4, ip
 800288e:	2c00      	cmp	r4, #0
 8002890:	d05c      	beq.n	800294c <__aeabi_dsub+0x27c>
 8002892:	1b94      	subs	r4, r2, r6
 8002894:	46a4      	mov	ip, r4
 8002896:	2e00      	cmp	r6, #0
 8002898:	d000      	beq.n	800289c <__aeabi_dsub+0x1cc>
 800289a:	e115      	b.n	8002ac8 <__aeabi_dsub+0x3f8>
 800289c:	464d      	mov	r5, r9
 800289e:	431d      	orrs	r5, r3
 80028a0:	d100      	bne.n	80028a4 <__aeabi_dsub+0x1d4>
 80028a2:	e1c3      	b.n	8002c2c <__aeabi_dsub+0x55c>
 80028a4:	1e65      	subs	r5, r4, #1
 80028a6:	2c01      	cmp	r4, #1
 80028a8:	d100      	bne.n	80028ac <__aeabi_dsub+0x1dc>
 80028aa:	e20c      	b.n	8002cc6 <__aeabi_dsub+0x5f6>
 80028ac:	4e55      	ldr	r6, [pc, #340]	; (8002a04 <__aeabi_dsub+0x334>)
 80028ae:	42b4      	cmp	r4, r6
 80028b0:	d100      	bne.n	80028b4 <__aeabi_dsub+0x1e4>
 80028b2:	e1f8      	b.n	8002ca6 <__aeabi_dsub+0x5d6>
 80028b4:	46ac      	mov	ip, r5
 80028b6:	e10e      	b.n	8002ad6 <__aeabi_dsub+0x406>
 80028b8:	000a      	movs	r2, r1
 80028ba:	4302      	orrs	r2, r0
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x1f0>
 80028be:	e136      	b.n	8002b2e <__aeabi_dsub+0x45e>
 80028c0:	0022      	movs	r2, r4
 80028c2:	3a01      	subs	r2, #1
 80028c4:	2c01      	cmp	r4, #1
 80028c6:	d100      	bne.n	80028ca <__aeabi_dsub+0x1fa>
 80028c8:	e1c6      	b.n	8002c58 <__aeabi_dsub+0x588>
 80028ca:	4c4e      	ldr	r4, [pc, #312]	; (8002a04 <__aeabi_dsub+0x334>)
 80028cc:	45a4      	cmp	ip, r4
 80028ce:	d100      	bne.n	80028d2 <__aeabi_dsub+0x202>
 80028d0:	e0f4      	b.n	8002abc <__aeabi_dsub+0x3ec>
 80028d2:	4694      	mov	ip, r2
 80028d4:	e731      	b.n	800273a <__aeabi_dsub+0x6a>
 80028d6:	2401      	movs	r4, #1
 80028d8:	4067      	eors	r7, r4
 80028da:	46bb      	mov	fp, r7
 80028dc:	42bd      	cmp	r5, r7
 80028de:	d000      	beq.n	80028e2 <__aeabi_dsub+0x212>
 80028e0:	e71c      	b.n	800271c <__aeabi_dsub+0x4c>
 80028e2:	4c4a      	ldr	r4, [pc, #296]	; (8002a0c <__aeabi_dsub+0x33c>)
 80028e4:	46a4      	mov	ip, r4
 80028e6:	44b4      	add	ip, r6
 80028e8:	4664      	mov	r4, ip
 80028ea:	2c00      	cmp	r4, #0
 80028ec:	d100      	bne.n	80028f0 <__aeabi_dsub+0x220>
 80028ee:	e0cf      	b.n	8002a90 <__aeabi_dsub+0x3c0>
 80028f0:	1b94      	subs	r4, r2, r6
 80028f2:	46a4      	mov	ip, r4
 80028f4:	2e00      	cmp	r6, #0
 80028f6:	d100      	bne.n	80028fa <__aeabi_dsub+0x22a>
 80028f8:	e15c      	b.n	8002bb4 <__aeabi_dsub+0x4e4>
 80028fa:	4e42      	ldr	r6, [pc, #264]	; (8002a04 <__aeabi_dsub+0x334>)
 80028fc:	42b2      	cmp	r2, r6
 80028fe:	d100      	bne.n	8002902 <__aeabi_dsub+0x232>
 8002900:	e1ec      	b.n	8002cdc <__aeabi_dsub+0x60c>
 8002902:	2680      	movs	r6, #128	; 0x80
 8002904:	0436      	lsls	r6, r6, #16
 8002906:	4333      	orrs	r3, r6
 8002908:	4664      	mov	r4, ip
 800290a:	2c38      	cmp	r4, #56	; 0x38
 800290c:	dd00      	ble.n	8002910 <__aeabi_dsub+0x240>
 800290e:	e1b3      	b.n	8002c78 <__aeabi_dsub+0x5a8>
 8002910:	2c1f      	cmp	r4, #31
 8002912:	dd00      	ble.n	8002916 <__aeabi_dsub+0x246>
 8002914:	e238      	b.n	8002d88 <__aeabi_dsub+0x6b8>
 8002916:	2620      	movs	r6, #32
 8002918:	1b36      	subs	r6, r6, r4
 800291a:	001c      	movs	r4, r3
 800291c:	40b4      	lsls	r4, r6
 800291e:	464f      	mov	r7, r9
 8002920:	46a0      	mov	r8, r4
 8002922:	4664      	mov	r4, ip
 8002924:	40e7      	lsrs	r7, r4
 8002926:	4644      	mov	r4, r8
 8002928:	433c      	orrs	r4, r7
 800292a:	464f      	mov	r7, r9
 800292c:	40b7      	lsls	r7, r6
 800292e:	003e      	movs	r6, r7
 8002930:	1e77      	subs	r7, r6, #1
 8002932:	41be      	sbcs	r6, r7
 8002934:	4334      	orrs	r4, r6
 8002936:	4666      	mov	r6, ip
 8002938:	40f3      	lsrs	r3, r6
 800293a:	18c9      	adds	r1, r1, r3
 800293c:	1824      	adds	r4, r4, r0
 800293e:	4284      	cmp	r4, r0
 8002940:	419b      	sbcs	r3, r3
 8002942:	425b      	negs	r3, r3
 8002944:	4698      	mov	r8, r3
 8002946:	0016      	movs	r6, r2
 8002948:	4488      	add	r8, r1
 800294a:	e04e      	b.n	80029ea <__aeabi_dsub+0x31a>
 800294c:	4a30      	ldr	r2, [pc, #192]	; (8002a10 <__aeabi_dsub+0x340>)
 800294e:	1c74      	adds	r4, r6, #1
 8002950:	4214      	tst	r4, r2
 8002952:	d000      	beq.n	8002956 <__aeabi_dsub+0x286>
 8002954:	e0d6      	b.n	8002b04 <__aeabi_dsub+0x434>
 8002956:	464a      	mov	r2, r9
 8002958:	431a      	orrs	r2, r3
 800295a:	2e00      	cmp	r6, #0
 800295c:	d000      	beq.n	8002960 <__aeabi_dsub+0x290>
 800295e:	e15b      	b.n	8002c18 <__aeabi_dsub+0x548>
 8002960:	2a00      	cmp	r2, #0
 8002962:	d100      	bne.n	8002966 <__aeabi_dsub+0x296>
 8002964:	e1a5      	b.n	8002cb2 <__aeabi_dsub+0x5e2>
 8002966:	000a      	movs	r2, r1
 8002968:	4302      	orrs	r2, r0
 800296a:	d000      	beq.n	800296e <__aeabi_dsub+0x29e>
 800296c:	e1bb      	b.n	8002ce6 <__aeabi_dsub+0x616>
 800296e:	464a      	mov	r2, r9
 8002970:	0759      	lsls	r1, r3, #29
 8002972:	08d2      	lsrs	r2, r2, #3
 8002974:	430a      	orrs	r2, r1
 8002976:	08db      	lsrs	r3, r3, #3
 8002978:	e027      	b.n	80029ca <__aeabi_dsub+0x2fa>
 800297a:	000a      	movs	r2, r1
 800297c:	4302      	orrs	r2, r0
 800297e:	d100      	bne.n	8002982 <__aeabi_dsub+0x2b2>
 8002980:	e174      	b.n	8002c6c <__aeabi_dsub+0x59c>
 8002982:	0022      	movs	r2, r4
 8002984:	3a01      	subs	r2, #1
 8002986:	2c01      	cmp	r4, #1
 8002988:	d005      	beq.n	8002996 <__aeabi_dsub+0x2c6>
 800298a:	4c1e      	ldr	r4, [pc, #120]	; (8002a04 <__aeabi_dsub+0x334>)
 800298c:	45a4      	cmp	ip, r4
 800298e:	d100      	bne.n	8002992 <__aeabi_dsub+0x2c2>
 8002990:	e094      	b.n	8002abc <__aeabi_dsub+0x3ec>
 8002992:	4694      	mov	ip, r2
 8002994:	e759      	b.n	800284a <__aeabi_dsub+0x17a>
 8002996:	4448      	add	r0, r9
 8002998:	4548      	cmp	r0, r9
 800299a:	4192      	sbcs	r2, r2
 800299c:	185b      	adds	r3, r3, r1
 800299e:	4698      	mov	r8, r3
 80029a0:	0004      	movs	r4, r0
 80029a2:	4252      	negs	r2, r2
 80029a4:	4490      	add	r8, r2
 80029a6:	4643      	mov	r3, r8
 80029a8:	2602      	movs	r6, #2
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	d500      	bpl.n	80029b0 <__aeabi_dsub+0x2e0>
 80029ae:	e0c4      	b.n	8002b3a <__aeabi_dsub+0x46a>
 80029b0:	3e01      	subs	r6, #1
 80029b2:	0763      	lsls	r3, r4, #29
 80029b4:	d000      	beq.n	80029b8 <__aeabi_dsub+0x2e8>
 80029b6:	e711      	b.n	80027dc <__aeabi_dsub+0x10c>
 80029b8:	4643      	mov	r3, r8
 80029ba:	46b4      	mov	ip, r6
 80029bc:	0759      	lsls	r1, r3, #29
 80029be:	08e2      	lsrs	r2, r4, #3
 80029c0:	430a      	orrs	r2, r1
 80029c2:	08db      	lsrs	r3, r3, #3
 80029c4:	490f      	ldr	r1, [pc, #60]	; (8002a04 <__aeabi_dsub+0x334>)
 80029c6:	458c      	cmp	ip, r1
 80029c8:	d040      	beq.n	8002a4c <__aeabi_dsub+0x37c>
 80029ca:	4661      	mov	r1, ip
 80029cc:	031b      	lsls	r3, r3, #12
 80029ce:	0549      	lsls	r1, r1, #21
 80029d0:	0b1b      	lsrs	r3, r3, #12
 80029d2:	0d49      	lsrs	r1, r1, #21
 80029d4:	e720      	b.n	8002818 <__aeabi_dsub+0x148>
 80029d6:	4301      	orrs	r1, r0
 80029d8:	000c      	movs	r4, r1
 80029da:	1e61      	subs	r1, r4, #1
 80029dc:	418c      	sbcs	r4, r1
 80029de:	444c      	add	r4, r9
 80029e0:	454c      	cmp	r4, r9
 80029e2:	4192      	sbcs	r2, r2
 80029e4:	4252      	negs	r2, r2
 80029e6:	4690      	mov	r8, r2
 80029e8:	4498      	add	r8, r3
 80029ea:	4643      	mov	r3, r8
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	d5e0      	bpl.n	80029b2 <__aeabi_dsub+0x2e2>
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <__aeabi_dsub+0x334>)
 80029f2:	3601      	adds	r6, #1
 80029f4:	429e      	cmp	r6, r3
 80029f6:	d000      	beq.n	80029fa <__aeabi_dsub+0x32a>
 80029f8:	e09f      	b.n	8002b3a <__aeabi_dsub+0x46a>
 80029fa:	0031      	movs	r1, r6
 80029fc:	2300      	movs	r3, #0
 80029fe:	2200      	movs	r2, #0
 8002a00:	e70a      	b.n	8002818 <__aeabi_dsub+0x148>
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	000007ff 	.word	0x000007ff
 8002a08:	ff7fffff 	.word	0xff7fffff
 8002a0c:	fffff801 	.word	0xfffff801
 8002a10:	000007fe 	.word	0x000007fe
 8002a14:	2a00      	cmp	r2, #0
 8002a16:	d100      	bne.n	8002a1a <__aeabi_dsub+0x34a>
 8002a18:	e160      	b.n	8002cdc <__aeabi_dsub+0x60c>
 8002a1a:	000a      	movs	r2, r1
 8002a1c:	4302      	orrs	r2, r0
 8002a1e:	d04d      	beq.n	8002abc <__aeabi_dsub+0x3ec>
 8002a20:	464a      	mov	r2, r9
 8002a22:	075c      	lsls	r4, r3, #29
 8002a24:	08d2      	lsrs	r2, r2, #3
 8002a26:	4322      	orrs	r2, r4
 8002a28:	2480      	movs	r4, #128	; 0x80
 8002a2a:	08db      	lsrs	r3, r3, #3
 8002a2c:	0324      	lsls	r4, r4, #12
 8002a2e:	4223      	tst	r3, r4
 8002a30:	d007      	beq.n	8002a42 <__aeabi_dsub+0x372>
 8002a32:	08ce      	lsrs	r6, r1, #3
 8002a34:	4226      	tst	r6, r4
 8002a36:	d104      	bne.n	8002a42 <__aeabi_dsub+0x372>
 8002a38:	465d      	mov	r5, fp
 8002a3a:	0033      	movs	r3, r6
 8002a3c:	08c2      	lsrs	r2, r0, #3
 8002a3e:	0749      	lsls	r1, r1, #29
 8002a40:	430a      	orrs	r2, r1
 8002a42:	0f51      	lsrs	r1, r2, #29
 8002a44:	00d2      	lsls	r2, r2, #3
 8002a46:	08d2      	lsrs	r2, r2, #3
 8002a48:	0749      	lsls	r1, r1, #29
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	0011      	movs	r1, r2
 8002a4e:	4319      	orrs	r1, r3
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dsub+0x384>
 8002a52:	e1c8      	b.n	8002de6 <__aeabi_dsub+0x716>
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	0309      	lsls	r1, r1, #12
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	031b      	lsls	r3, r3, #12
 8002a5c:	49d5      	ldr	r1, [pc, #852]	; (8002db4 <__aeabi_dsub+0x6e4>)
 8002a5e:	0b1b      	lsrs	r3, r3, #12
 8002a60:	e6da      	b.n	8002818 <__aeabi_dsub+0x148>
 8002a62:	49d5      	ldr	r1, [pc, #852]	; (8002db8 <__aeabi_dsub+0x6e8>)
 8002a64:	1ab6      	subs	r6, r6, r2
 8002a66:	400b      	ands	r3, r1
 8002a68:	4698      	mov	r8, r3
 8002a6a:	e6b5      	b.n	80027d8 <__aeabi_dsub+0x108>
 8002a6c:	0020      	movs	r0, r4
 8002a6e:	f000 fb3b 	bl	80030e8 <__clzsi2>
 8002a72:	0002      	movs	r2, r0
 8002a74:	3218      	adds	r2, #24
 8002a76:	2a1f      	cmp	r2, #31
 8002a78:	dc00      	bgt.n	8002a7c <__aeabi_dsub+0x3ac>
 8002a7a:	e68f      	b.n	800279c <__aeabi_dsub+0xcc>
 8002a7c:	0023      	movs	r3, r4
 8002a7e:	3808      	subs	r0, #8
 8002a80:	4083      	lsls	r3, r0
 8002a82:	2400      	movs	r4, #0
 8002a84:	e692      	b.n	80027ac <__aeabi_dsub+0xdc>
 8002a86:	4308      	orrs	r0, r1
 8002a88:	0002      	movs	r2, r0
 8002a8a:	1e50      	subs	r0, r2, #1
 8002a8c:	4182      	sbcs	r2, r0
 8002a8e:	e66d      	b.n	800276c <__aeabi_dsub+0x9c>
 8002a90:	4cca      	ldr	r4, [pc, #808]	; (8002dbc <__aeabi_dsub+0x6ec>)
 8002a92:	1c72      	adds	r2, r6, #1
 8002a94:	4222      	tst	r2, r4
 8002a96:	d000      	beq.n	8002a9a <__aeabi_dsub+0x3ca>
 8002a98:	e0ad      	b.n	8002bf6 <__aeabi_dsub+0x526>
 8002a9a:	464a      	mov	r2, r9
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	2e00      	cmp	r6, #0
 8002aa0:	d1b8      	bne.n	8002a14 <__aeabi_dsub+0x344>
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	d100      	bne.n	8002aa8 <__aeabi_dsub+0x3d8>
 8002aa6:	e158      	b.n	8002d5a <__aeabi_dsub+0x68a>
 8002aa8:	000a      	movs	r2, r1
 8002aaa:	4302      	orrs	r2, r0
 8002aac:	d000      	beq.n	8002ab0 <__aeabi_dsub+0x3e0>
 8002aae:	e159      	b.n	8002d64 <__aeabi_dsub+0x694>
 8002ab0:	464a      	mov	r2, r9
 8002ab2:	0759      	lsls	r1, r3, #29
 8002ab4:	08d2      	lsrs	r2, r2, #3
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	08db      	lsrs	r3, r3, #3
 8002aba:	e786      	b.n	80029ca <__aeabi_dsub+0x2fa>
 8002abc:	464a      	mov	r2, r9
 8002abe:	0759      	lsls	r1, r3, #29
 8002ac0:	08d2      	lsrs	r2, r2, #3
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	e7c1      	b.n	8002a4c <__aeabi_dsub+0x37c>
 8002ac8:	4dba      	ldr	r5, [pc, #744]	; (8002db4 <__aeabi_dsub+0x6e4>)
 8002aca:	42aa      	cmp	r2, r5
 8002acc:	d100      	bne.n	8002ad0 <__aeabi_dsub+0x400>
 8002ace:	e11e      	b.n	8002d0e <__aeabi_dsub+0x63e>
 8002ad0:	2580      	movs	r5, #128	; 0x80
 8002ad2:	042d      	lsls	r5, r5, #16
 8002ad4:	432b      	orrs	r3, r5
 8002ad6:	4664      	mov	r4, ip
 8002ad8:	2c38      	cmp	r4, #56	; 0x38
 8002ada:	dc5d      	bgt.n	8002b98 <__aeabi_dsub+0x4c8>
 8002adc:	2c1f      	cmp	r4, #31
 8002ade:	dd00      	ble.n	8002ae2 <__aeabi_dsub+0x412>
 8002ae0:	e0d0      	b.n	8002c84 <__aeabi_dsub+0x5b4>
 8002ae2:	2520      	movs	r5, #32
 8002ae4:	4667      	mov	r7, ip
 8002ae6:	1b2d      	subs	r5, r5, r4
 8002ae8:	464e      	mov	r6, r9
 8002aea:	001c      	movs	r4, r3
 8002aec:	40fe      	lsrs	r6, r7
 8002aee:	40ac      	lsls	r4, r5
 8002af0:	4334      	orrs	r4, r6
 8002af2:	464e      	mov	r6, r9
 8002af4:	40ae      	lsls	r6, r5
 8002af6:	0035      	movs	r5, r6
 8002af8:	40fb      	lsrs	r3, r7
 8002afa:	1e6e      	subs	r6, r5, #1
 8002afc:	41b5      	sbcs	r5, r6
 8002afe:	1ac9      	subs	r1, r1, r3
 8002b00:	432c      	orrs	r4, r5
 8002b02:	e04e      	b.n	8002ba2 <__aeabi_dsub+0x4d2>
 8002b04:	464a      	mov	r2, r9
 8002b06:	1a14      	subs	r4, r2, r0
 8002b08:	45a1      	cmp	r9, r4
 8002b0a:	4192      	sbcs	r2, r2
 8002b0c:	4252      	negs	r2, r2
 8002b0e:	4690      	mov	r8, r2
 8002b10:	1a5f      	subs	r7, r3, r1
 8002b12:	003a      	movs	r2, r7
 8002b14:	4647      	mov	r7, r8
 8002b16:	1bd2      	subs	r2, r2, r7
 8002b18:	4690      	mov	r8, r2
 8002b1a:	0212      	lsls	r2, r2, #8
 8002b1c:	d500      	bpl.n	8002b20 <__aeabi_dsub+0x450>
 8002b1e:	e08b      	b.n	8002c38 <__aeabi_dsub+0x568>
 8002b20:	4642      	mov	r2, r8
 8002b22:	4322      	orrs	r2, r4
 8002b24:	d000      	beq.n	8002b28 <__aeabi_dsub+0x458>
 8002b26:	e630      	b.n	800278a <__aeabi_dsub+0xba>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2500      	movs	r5, #0
 8002b2c:	e74d      	b.n	80029ca <__aeabi_dsub+0x2fa>
 8002b2e:	464a      	mov	r2, r9
 8002b30:	0759      	lsls	r1, r3, #29
 8002b32:	08d2      	lsrs	r2, r2, #3
 8002b34:	430a      	orrs	r2, r1
 8002b36:	08db      	lsrs	r3, r3, #3
 8002b38:	e744      	b.n	80029c4 <__aeabi_dsub+0x2f4>
 8002b3a:	4642      	mov	r2, r8
 8002b3c:	4b9e      	ldr	r3, [pc, #632]	; (8002db8 <__aeabi_dsub+0x6e8>)
 8002b3e:	0861      	lsrs	r1, r4, #1
 8002b40:	401a      	ands	r2, r3
 8002b42:	0013      	movs	r3, r2
 8002b44:	2201      	movs	r2, #1
 8002b46:	4014      	ands	r4, r2
 8002b48:	430c      	orrs	r4, r1
 8002b4a:	07da      	lsls	r2, r3, #31
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	4698      	mov	r8, r3
 8002b50:	4314      	orrs	r4, r2
 8002b52:	e641      	b.n	80027d8 <__aeabi_dsub+0x108>
 8002b54:	001a      	movs	r2, r3
 8002b56:	3e1f      	subs	r6, #31
 8002b58:	40f2      	lsrs	r2, r6
 8002b5a:	0016      	movs	r6, r2
 8002b5c:	2920      	cmp	r1, #32
 8002b5e:	d003      	beq.n	8002b68 <__aeabi_dsub+0x498>
 8002b60:	2240      	movs	r2, #64	; 0x40
 8002b62:	1a51      	subs	r1, r2, r1
 8002b64:	408b      	lsls	r3, r1
 8002b66:	431c      	orrs	r4, r3
 8002b68:	1e62      	subs	r2, r4, #1
 8002b6a:	4194      	sbcs	r4, r2
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	4334      	orrs	r4, r6
 8002b70:	4698      	mov	r8, r3
 8002b72:	2600      	movs	r6, #0
 8002b74:	e71d      	b.n	80029b2 <__aeabi_dsub+0x2e2>
 8002b76:	000c      	movs	r4, r1
 8002b78:	3a20      	subs	r2, #32
 8002b7a:	40d4      	lsrs	r4, r2
 8002b7c:	0022      	movs	r2, r4
 8002b7e:	4664      	mov	r4, ip
 8002b80:	2c20      	cmp	r4, #32
 8002b82:	d004      	beq.n	8002b8e <__aeabi_dsub+0x4be>
 8002b84:	2740      	movs	r7, #64	; 0x40
 8002b86:	1b3f      	subs	r7, r7, r4
 8002b88:	40b9      	lsls	r1, r7
 8002b8a:	4308      	orrs	r0, r1
 8002b8c:	4680      	mov	r8, r0
 8002b8e:	4644      	mov	r4, r8
 8002b90:	1e61      	subs	r1, r4, #1
 8002b92:	418c      	sbcs	r4, r1
 8002b94:	4322      	orrs	r2, r4
 8002b96:	e5e9      	b.n	800276c <__aeabi_dsub+0x9c>
 8002b98:	464c      	mov	r4, r9
 8002b9a:	4323      	orrs	r3, r4
 8002b9c:	001c      	movs	r4, r3
 8002b9e:	1e63      	subs	r3, r4, #1
 8002ba0:	419c      	sbcs	r4, r3
 8002ba2:	1b04      	subs	r4, r0, r4
 8002ba4:	42a0      	cmp	r0, r4
 8002ba6:	419b      	sbcs	r3, r3
 8002ba8:	425b      	negs	r3, r3
 8002baa:	1acb      	subs	r3, r1, r3
 8002bac:	4698      	mov	r8, r3
 8002bae:	465d      	mov	r5, fp
 8002bb0:	0016      	movs	r6, r2
 8002bb2:	e5e2      	b.n	800277a <__aeabi_dsub+0xaa>
 8002bb4:	464e      	mov	r6, r9
 8002bb6:	431e      	orrs	r6, r3
 8002bb8:	d100      	bne.n	8002bbc <__aeabi_dsub+0x4ec>
 8002bba:	e0ae      	b.n	8002d1a <__aeabi_dsub+0x64a>
 8002bbc:	1e66      	subs	r6, r4, #1
 8002bbe:	2c01      	cmp	r4, #1
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x4f4>
 8002bc2:	e0fd      	b.n	8002dc0 <__aeabi_dsub+0x6f0>
 8002bc4:	4f7b      	ldr	r7, [pc, #492]	; (8002db4 <__aeabi_dsub+0x6e4>)
 8002bc6:	42bc      	cmp	r4, r7
 8002bc8:	d100      	bne.n	8002bcc <__aeabi_dsub+0x4fc>
 8002bca:	e107      	b.n	8002ddc <__aeabi_dsub+0x70c>
 8002bcc:	46b4      	mov	ip, r6
 8002bce:	e69b      	b.n	8002908 <__aeabi_dsub+0x238>
 8002bd0:	4664      	mov	r4, ip
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	1b12      	subs	r2, r2, r4
 8002bd6:	000c      	movs	r4, r1
 8002bd8:	4094      	lsls	r4, r2
 8002bda:	0007      	movs	r7, r0
 8002bdc:	4090      	lsls	r0, r2
 8002bde:	46a0      	mov	r8, r4
 8002be0:	4664      	mov	r4, ip
 8002be2:	1e42      	subs	r2, r0, #1
 8002be4:	4190      	sbcs	r0, r2
 8002be6:	4662      	mov	r2, ip
 8002be8:	40e7      	lsrs	r7, r4
 8002bea:	4644      	mov	r4, r8
 8002bec:	40d1      	lsrs	r1, r2
 8002bee:	433c      	orrs	r4, r7
 8002bf0:	4304      	orrs	r4, r0
 8002bf2:	185b      	adds	r3, r3, r1
 8002bf4:	e6f3      	b.n	80029de <__aeabi_dsub+0x30e>
 8002bf6:	4c6f      	ldr	r4, [pc, #444]	; (8002db4 <__aeabi_dsub+0x6e4>)
 8002bf8:	42a2      	cmp	r2, r4
 8002bfa:	d100      	bne.n	8002bfe <__aeabi_dsub+0x52e>
 8002bfc:	e0d5      	b.n	8002daa <__aeabi_dsub+0x6da>
 8002bfe:	4448      	add	r0, r9
 8002c00:	185b      	adds	r3, r3, r1
 8002c02:	4548      	cmp	r0, r9
 8002c04:	4189      	sbcs	r1, r1
 8002c06:	4249      	negs	r1, r1
 8002c08:	185b      	adds	r3, r3, r1
 8002c0a:	07dc      	lsls	r4, r3, #31
 8002c0c:	0840      	lsrs	r0, r0, #1
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	4698      	mov	r8, r3
 8002c12:	0016      	movs	r6, r2
 8002c14:	4304      	orrs	r4, r0
 8002c16:	e6cc      	b.n	80029b2 <__aeabi_dsub+0x2e2>
 8002c18:	2a00      	cmp	r2, #0
 8002c1a:	d000      	beq.n	8002c1e <__aeabi_dsub+0x54e>
 8002c1c:	e082      	b.n	8002d24 <__aeabi_dsub+0x654>
 8002c1e:	000a      	movs	r2, r1
 8002c20:	4302      	orrs	r2, r0
 8002c22:	d140      	bne.n	8002ca6 <__aeabi_dsub+0x5d6>
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	2500      	movs	r5, #0
 8002c28:	031b      	lsls	r3, r3, #12
 8002c2a:	e713      	b.n	8002a54 <__aeabi_dsub+0x384>
 8002c2c:	074b      	lsls	r3, r1, #29
 8002c2e:	08c2      	lsrs	r2, r0, #3
 8002c30:	431a      	orrs	r2, r3
 8002c32:	465d      	mov	r5, fp
 8002c34:	08cb      	lsrs	r3, r1, #3
 8002c36:	e6c5      	b.n	80029c4 <__aeabi_dsub+0x2f4>
 8002c38:	464a      	mov	r2, r9
 8002c3a:	1a84      	subs	r4, r0, r2
 8002c3c:	42a0      	cmp	r0, r4
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	1acb      	subs	r3, r1, r3
 8002c42:	4252      	negs	r2, r2
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	4698      	mov	r8, r3
 8002c48:	465d      	mov	r5, fp
 8002c4a:	e59e      	b.n	800278a <__aeabi_dsub+0xba>
 8002c4c:	464a      	mov	r2, r9
 8002c4e:	0759      	lsls	r1, r3, #29
 8002c50:	08d2      	lsrs	r2, r2, #3
 8002c52:	430a      	orrs	r2, r1
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	e6f9      	b.n	8002a4c <__aeabi_dsub+0x37c>
 8002c58:	464a      	mov	r2, r9
 8002c5a:	1a14      	subs	r4, r2, r0
 8002c5c:	45a1      	cmp	r9, r4
 8002c5e:	4192      	sbcs	r2, r2
 8002c60:	1a5b      	subs	r3, r3, r1
 8002c62:	4252      	negs	r2, r2
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	4698      	mov	r8, r3
 8002c68:	2601      	movs	r6, #1
 8002c6a:	e586      	b.n	800277a <__aeabi_dsub+0xaa>
 8002c6c:	464a      	mov	r2, r9
 8002c6e:	0759      	lsls	r1, r3, #29
 8002c70:	08d2      	lsrs	r2, r2, #3
 8002c72:	430a      	orrs	r2, r1
 8002c74:	08db      	lsrs	r3, r3, #3
 8002c76:	e6a5      	b.n	80029c4 <__aeabi_dsub+0x2f4>
 8002c78:	464c      	mov	r4, r9
 8002c7a:	4323      	orrs	r3, r4
 8002c7c:	001c      	movs	r4, r3
 8002c7e:	1e63      	subs	r3, r4, #1
 8002c80:	419c      	sbcs	r4, r3
 8002c82:	e65b      	b.n	800293c <__aeabi_dsub+0x26c>
 8002c84:	4665      	mov	r5, ip
 8002c86:	001e      	movs	r6, r3
 8002c88:	3d20      	subs	r5, #32
 8002c8a:	40ee      	lsrs	r6, r5
 8002c8c:	2c20      	cmp	r4, #32
 8002c8e:	d005      	beq.n	8002c9c <__aeabi_dsub+0x5cc>
 8002c90:	2540      	movs	r5, #64	; 0x40
 8002c92:	1b2d      	subs	r5, r5, r4
 8002c94:	40ab      	lsls	r3, r5
 8002c96:	464c      	mov	r4, r9
 8002c98:	431c      	orrs	r4, r3
 8002c9a:	46a2      	mov	sl, r4
 8002c9c:	4654      	mov	r4, sl
 8002c9e:	1e63      	subs	r3, r4, #1
 8002ca0:	419c      	sbcs	r4, r3
 8002ca2:	4334      	orrs	r4, r6
 8002ca4:	e77d      	b.n	8002ba2 <__aeabi_dsub+0x4d2>
 8002ca6:	074b      	lsls	r3, r1, #29
 8002ca8:	08c2      	lsrs	r2, r0, #3
 8002caa:	431a      	orrs	r2, r3
 8002cac:	465d      	mov	r5, fp
 8002cae:	08cb      	lsrs	r3, r1, #3
 8002cb0:	e6cc      	b.n	8002a4c <__aeabi_dsub+0x37c>
 8002cb2:	000a      	movs	r2, r1
 8002cb4:	4302      	orrs	r2, r0
 8002cb6:	d100      	bne.n	8002cba <__aeabi_dsub+0x5ea>
 8002cb8:	e736      	b.n	8002b28 <__aeabi_dsub+0x458>
 8002cba:	074b      	lsls	r3, r1, #29
 8002cbc:	08c2      	lsrs	r2, r0, #3
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	465d      	mov	r5, fp
 8002cc2:	08cb      	lsrs	r3, r1, #3
 8002cc4:	e681      	b.n	80029ca <__aeabi_dsub+0x2fa>
 8002cc6:	464a      	mov	r2, r9
 8002cc8:	1a84      	subs	r4, r0, r2
 8002cca:	42a0      	cmp	r0, r4
 8002ccc:	4192      	sbcs	r2, r2
 8002cce:	1acb      	subs	r3, r1, r3
 8002cd0:	4252      	negs	r2, r2
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	4698      	mov	r8, r3
 8002cd6:	465d      	mov	r5, fp
 8002cd8:	2601      	movs	r6, #1
 8002cda:	e54e      	b.n	800277a <__aeabi_dsub+0xaa>
 8002cdc:	074b      	lsls	r3, r1, #29
 8002cde:	08c2      	lsrs	r2, r0, #3
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	08cb      	lsrs	r3, r1, #3
 8002ce4:	e6b2      	b.n	8002a4c <__aeabi_dsub+0x37c>
 8002ce6:	464a      	mov	r2, r9
 8002ce8:	1a14      	subs	r4, r2, r0
 8002cea:	45a1      	cmp	r9, r4
 8002cec:	4192      	sbcs	r2, r2
 8002cee:	1a5f      	subs	r7, r3, r1
 8002cf0:	4252      	negs	r2, r2
 8002cf2:	1aba      	subs	r2, r7, r2
 8002cf4:	4690      	mov	r8, r2
 8002cf6:	0212      	lsls	r2, r2, #8
 8002cf8:	d56b      	bpl.n	8002dd2 <__aeabi_dsub+0x702>
 8002cfa:	464a      	mov	r2, r9
 8002cfc:	1a84      	subs	r4, r0, r2
 8002cfe:	42a0      	cmp	r0, r4
 8002d00:	4192      	sbcs	r2, r2
 8002d02:	1acb      	subs	r3, r1, r3
 8002d04:	4252      	negs	r2, r2
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	4698      	mov	r8, r3
 8002d0a:	465d      	mov	r5, fp
 8002d0c:	e564      	b.n	80027d8 <__aeabi_dsub+0x108>
 8002d0e:	074b      	lsls	r3, r1, #29
 8002d10:	08c2      	lsrs	r2, r0, #3
 8002d12:	431a      	orrs	r2, r3
 8002d14:	465d      	mov	r5, fp
 8002d16:	08cb      	lsrs	r3, r1, #3
 8002d18:	e698      	b.n	8002a4c <__aeabi_dsub+0x37c>
 8002d1a:	074b      	lsls	r3, r1, #29
 8002d1c:	08c2      	lsrs	r2, r0, #3
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	08cb      	lsrs	r3, r1, #3
 8002d22:	e64f      	b.n	80029c4 <__aeabi_dsub+0x2f4>
 8002d24:	000a      	movs	r2, r1
 8002d26:	4302      	orrs	r2, r0
 8002d28:	d090      	beq.n	8002c4c <__aeabi_dsub+0x57c>
 8002d2a:	464a      	mov	r2, r9
 8002d2c:	075c      	lsls	r4, r3, #29
 8002d2e:	08d2      	lsrs	r2, r2, #3
 8002d30:	4314      	orrs	r4, r2
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	0312      	lsls	r2, r2, #12
 8002d38:	4213      	tst	r3, r2
 8002d3a:	d008      	beq.n	8002d4e <__aeabi_dsub+0x67e>
 8002d3c:	08ce      	lsrs	r6, r1, #3
 8002d3e:	4216      	tst	r6, r2
 8002d40:	d105      	bne.n	8002d4e <__aeabi_dsub+0x67e>
 8002d42:	08c0      	lsrs	r0, r0, #3
 8002d44:	0749      	lsls	r1, r1, #29
 8002d46:	4308      	orrs	r0, r1
 8002d48:	0004      	movs	r4, r0
 8002d4a:	465d      	mov	r5, fp
 8002d4c:	0033      	movs	r3, r6
 8002d4e:	0f61      	lsrs	r1, r4, #29
 8002d50:	00e2      	lsls	r2, r4, #3
 8002d52:	0749      	lsls	r1, r1, #29
 8002d54:	08d2      	lsrs	r2, r2, #3
 8002d56:	430a      	orrs	r2, r1
 8002d58:	e678      	b.n	8002a4c <__aeabi_dsub+0x37c>
 8002d5a:	074b      	lsls	r3, r1, #29
 8002d5c:	08c2      	lsrs	r2, r0, #3
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	08cb      	lsrs	r3, r1, #3
 8002d62:	e632      	b.n	80029ca <__aeabi_dsub+0x2fa>
 8002d64:	4448      	add	r0, r9
 8002d66:	185b      	adds	r3, r3, r1
 8002d68:	4548      	cmp	r0, r9
 8002d6a:	4192      	sbcs	r2, r2
 8002d6c:	4698      	mov	r8, r3
 8002d6e:	4252      	negs	r2, r2
 8002d70:	4490      	add	r8, r2
 8002d72:	4643      	mov	r3, r8
 8002d74:	0004      	movs	r4, r0
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	d400      	bmi.n	8002d7c <__aeabi_dsub+0x6ac>
 8002d7a:	e61a      	b.n	80029b2 <__aeabi_dsub+0x2e2>
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <__aeabi_dsub+0x6e8>)
 8002d80:	2601      	movs	r6, #1
 8002d82:	401a      	ands	r2, r3
 8002d84:	4690      	mov	r8, r2
 8002d86:	e614      	b.n	80029b2 <__aeabi_dsub+0x2e2>
 8002d88:	4666      	mov	r6, ip
 8002d8a:	001f      	movs	r7, r3
 8002d8c:	3e20      	subs	r6, #32
 8002d8e:	40f7      	lsrs	r7, r6
 8002d90:	2c20      	cmp	r4, #32
 8002d92:	d005      	beq.n	8002da0 <__aeabi_dsub+0x6d0>
 8002d94:	2640      	movs	r6, #64	; 0x40
 8002d96:	1b36      	subs	r6, r6, r4
 8002d98:	40b3      	lsls	r3, r6
 8002d9a:	464c      	mov	r4, r9
 8002d9c:	431c      	orrs	r4, r3
 8002d9e:	46a2      	mov	sl, r4
 8002da0:	4654      	mov	r4, sl
 8002da2:	1e63      	subs	r3, r4, #1
 8002da4:	419c      	sbcs	r4, r3
 8002da6:	433c      	orrs	r4, r7
 8002da8:	e5c8      	b.n	800293c <__aeabi_dsub+0x26c>
 8002daa:	0011      	movs	r1, r2
 8002dac:	2300      	movs	r3, #0
 8002dae:	2200      	movs	r2, #0
 8002db0:	e532      	b.n	8002818 <__aeabi_dsub+0x148>
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	000007ff 	.word	0x000007ff
 8002db8:	ff7fffff 	.word	0xff7fffff
 8002dbc:	000007fe 	.word	0x000007fe
 8002dc0:	464a      	mov	r2, r9
 8002dc2:	1814      	adds	r4, r2, r0
 8002dc4:	4284      	cmp	r4, r0
 8002dc6:	4192      	sbcs	r2, r2
 8002dc8:	185b      	adds	r3, r3, r1
 8002dca:	4698      	mov	r8, r3
 8002dcc:	4252      	negs	r2, r2
 8002dce:	4490      	add	r8, r2
 8002dd0:	e5e9      	b.n	80029a6 <__aeabi_dsub+0x2d6>
 8002dd2:	4642      	mov	r2, r8
 8002dd4:	4322      	orrs	r2, r4
 8002dd6:	d100      	bne.n	8002dda <__aeabi_dsub+0x70a>
 8002dd8:	e6a6      	b.n	8002b28 <__aeabi_dsub+0x458>
 8002dda:	e5ea      	b.n	80029b2 <__aeabi_dsub+0x2e2>
 8002ddc:	074b      	lsls	r3, r1, #29
 8002dde:	08c2      	lsrs	r2, r0, #3
 8002de0:	431a      	orrs	r2, r3
 8002de2:	08cb      	lsrs	r3, r1, #3
 8002de4:	e632      	b.n	8002a4c <__aeabi_dsub+0x37c>
 8002de6:	2200      	movs	r2, #0
 8002de8:	4901      	ldr	r1, [pc, #4]	; (8002df0 <__aeabi_dsub+0x720>)
 8002dea:	0013      	movs	r3, r2
 8002dec:	e514      	b.n	8002818 <__aeabi_dsub+0x148>
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	000007ff 	.word	0x000007ff

08002df4 <__aeabi_dcmpun>:
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	0005      	movs	r5, r0
 8002df8:	480c      	ldr	r0, [pc, #48]	; (8002e2c <__aeabi_dcmpun+0x38>)
 8002dfa:	030c      	lsls	r4, r1, #12
 8002dfc:	0016      	movs	r6, r2
 8002dfe:	0049      	lsls	r1, r1, #1
 8002e00:	031a      	lsls	r2, r3, #12
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	0b24      	lsrs	r4, r4, #12
 8002e06:	0d49      	lsrs	r1, r1, #21
 8002e08:	0b12      	lsrs	r2, r2, #12
 8002e0a:	0d5b      	lsrs	r3, r3, #21
 8002e0c:	4281      	cmp	r1, r0
 8002e0e:	d008      	beq.n	8002e22 <__aeabi_dcmpun+0x2e>
 8002e10:	4906      	ldr	r1, [pc, #24]	; (8002e2c <__aeabi_dcmpun+0x38>)
 8002e12:	2000      	movs	r0, #0
 8002e14:	428b      	cmp	r3, r1
 8002e16:	d103      	bne.n	8002e20 <__aeabi_dcmpun+0x2c>
 8002e18:	4332      	orrs	r2, r6
 8002e1a:	0010      	movs	r0, r2
 8002e1c:	1e42      	subs	r2, r0, #1
 8002e1e:	4190      	sbcs	r0, r2
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
 8002e22:	2001      	movs	r0, #1
 8002e24:	432c      	orrs	r4, r5
 8002e26:	d1fb      	bne.n	8002e20 <__aeabi_dcmpun+0x2c>
 8002e28:	e7f2      	b.n	8002e10 <__aeabi_dcmpun+0x1c>
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	000007ff 	.word	0x000007ff

08002e30 <__aeabi_d2iz>:
 8002e30:	000a      	movs	r2, r1
 8002e32:	b530      	push	{r4, r5, lr}
 8002e34:	4c13      	ldr	r4, [pc, #76]	; (8002e84 <__aeabi_d2iz+0x54>)
 8002e36:	0053      	lsls	r3, r2, #1
 8002e38:	0309      	lsls	r1, r1, #12
 8002e3a:	0005      	movs	r5, r0
 8002e3c:	0b09      	lsrs	r1, r1, #12
 8002e3e:	2000      	movs	r0, #0
 8002e40:	0d5b      	lsrs	r3, r3, #21
 8002e42:	0fd2      	lsrs	r2, r2, #31
 8002e44:	42a3      	cmp	r3, r4
 8002e46:	dd04      	ble.n	8002e52 <__aeabi_d2iz+0x22>
 8002e48:	480f      	ldr	r0, [pc, #60]	; (8002e88 <__aeabi_d2iz+0x58>)
 8002e4a:	4283      	cmp	r3, r0
 8002e4c:	dd02      	ble.n	8002e54 <__aeabi_d2iz+0x24>
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <__aeabi_d2iz+0x5c>)
 8002e50:	18d0      	adds	r0, r2, r3
 8002e52:	bd30      	pop	{r4, r5, pc}
 8002e54:	2080      	movs	r0, #128	; 0x80
 8002e56:	0340      	lsls	r0, r0, #13
 8002e58:	4301      	orrs	r1, r0
 8002e5a:	480d      	ldr	r0, [pc, #52]	; (8002e90 <__aeabi_d2iz+0x60>)
 8002e5c:	1ac0      	subs	r0, r0, r3
 8002e5e:	281f      	cmp	r0, #31
 8002e60:	dd08      	ble.n	8002e74 <__aeabi_d2iz+0x44>
 8002e62:	480c      	ldr	r0, [pc, #48]	; (8002e94 <__aeabi_d2iz+0x64>)
 8002e64:	1ac3      	subs	r3, r0, r3
 8002e66:	40d9      	lsrs	r1, r3
 8002e68:	000b      	movs	r3, r1
 8002e6a:	4258      	negs	r0, r3
 8002e6c:	2a00      	cmp	r2, #0
 8002e6e:	d1f0      	bne.n	8002e52 <__aeabi_d2iz+0x22>
 8002e70:	0018      	movs	r0, r3
 8002e72:	e7ee      	b.n	8002e52 <__aeabi_d2iz+0x22>
 8002e74:	4c08      	ldr	r4, [pc, #32]	; (8002e98 <__aeabi_d2iz+0x68>)
 8002e76:	40c5      	lsrs	r5, r0
 8002e78:	46a4      	mov	ip, r4
 8002e7a:	4463      	add	r3, ip
 8002e7c:	4099      	lsls	r1, r3
 8002e7e:	000b      	movs	r3, r1
 8002e80:	432b      	orrs	r3, r5
 8002e82:	e7f2      	b.n	8002e6a <__aeabi_d2iz+0x3a>
 8002e84:	000003fe 	.word	0x000003fe
 8002e88:	0000041d 	.word	0x0000041d
 8002e8c:	7fffffff 	.word	0x7fffffff
 8002e90:	00000433 	.word	0x00000433
 8002e94:	00000413 	.word	0x00000413
 8002e98:	fffffbed 	.word	0xfffffbed

08002e9c <__aeabi_i2d>:
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d016      	beq.n	8002ed0 <__aeabi_i2d+0x34>
 8002ea2:	17c3      	asrs	r3, r0, #31
 8002ea4:	18c5      	adds	r5, r0, r3
 8002ea6:	405d      	eors	r5, r3
 8002ea8:	0fc4      	lsrs	r4, r0, #31
 8002eaa:	0028      	movs	r0, r5
 8002eac:	f000 f91c 	bl	80030e8 <__clzsi2>
 8002eb0:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <__aeabi_i2d+0x5c>)
 8002eb2:	1a12      	subs	r2, r2, r0
 8002eb4:	280a      	cmp	r0, #10
 8002eb6:	dc16      	bgt.n	8002ee6 <__aeabi_i2d+0x4a>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	002e      	movs	r6, r5
 8002ebc:	3315      	adds	r3, #21
 8002ebe:	409e      	lsls	r6, r3
 8002ec0:	230b      	movs	r3, #11
 8002ec2:	1a18      	subs	r0, r3, r0
 8002ec4:	40c5      	lsrs	r5, r0
 8002ec6:	0553      	lsls	r3, r2, #21
 8002ec8:	032d      	lsls	r5, r5, #12
 8002eca:	0b2d      	lsrs	r5, r5, #12
 8002ecc:	0d5b      	lsrs	r3, r3, #21
 8002ece:	e003      	b.n	8002ed8 <__aeabi_i2d+0x3c>
 8002ed0:	2400      	movs	r4, #0
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2500      	movs	r5, #0
 8002ed6:	2600      	movs	r6, #0
 8002ed8:	051b      	lsls	r3, r3, #20
 8002eda:	432b      	orrs	r3, r5
 8002edc:	07e4      	lsls	r4, r4, #31
 8002ede:	4323      	orrs	r3, r4
 8002ee0:	0030      	movs	r0, r6
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	bd70      	pop	{r4, r5, r6, pc}
 8002ee6:	380b      	subs	r0, #11
 8002ee8:	4085      	lsls	r5, r0
 8002eea:	0553      	lsls	r3, r2, #21
 8002eec:	032d      	lsls	r5, r5, #12
 8002eee:	2600      	movs	r6, #0
 8002ef0:	0b2d      	lsrs	r5, r5, #12
 8002ef2:	0d5b      	lsrs	r3, r3, #21
 8002ef4:	e7f0      	b.n	8002ed8 <__aeabi_i2d+0x3c>
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	0000041e 	.word	0x0000041e

08002efc <__aeabi_ui2d>:
 8002efc:	b510      	push	{r4, lr}
 8002efe:	1e04      	subs	r4, r0, #0
 8002f00:	d010      	beq.n	8002f24 <__aeabi_ui2d+0x28>
 8002f02:	f000 f8f1 	bl	80030e8 <__clzsi2>
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <__aeabi_ui2d+0x48>)
 8002f08:	1a1b      	subs	r3, r3, r0
 8002f0a:	280a      	cmp	r0, #10
 8002f0c:	dc11      	bgt.n	8002f32 <__aeabi_ui2d+0x36>
 8002f0e:	220b      	movs	r2, #11
 8002f10:	0021      	movs	r1, r4
 8002f12:	1a12      	subs	r2, r2, r0
 8002f14:	40d1      	lsrs	r1, r2
 8002f16:	3015      	adds	r0, #21
 8002f18:	030a      	lsls	r2, r1, #12
 8002f1a:	055b      	lsls	r3, r3, #21
 8002f1c:	4084      	lsls	r4, r0
 8002f1e:	0b12      	lsrs	r2, r2, #12
 8002f20:	0d5b      	lsrs	r3, r3, #21
 8002f22:	e001      	b.n	8002f28 <__aeabi_ui2d+0x2c>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2200      	movs	r2, #0
 8002f28:	051b      	lsls	r3, r3, #20
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	0020      	movs	r0, r4
 8002f2e:	0019      	movs	r1, r3
 8002f30:	bd10      	pop	{r4, pc}
 8002f32:	0022      	movs	r2, r4
 8002f34:	380b      	subs	r0, #11
 8002f36:	4082      	lsls	r2, r0
 8002f38:	055b      	lsls	r3, r3, #21
 8002f3a:	0312      	lsls	r2, r2, #12
 8002f3c:	2400      	movs	r4, #0
 8002f3e:	0b12      	lsrs	r2, r2, #12
 8002f40:	0d5b      	lsrs	r3, r3, #21
 8002f42:	e7f1      	b.n	8002f28 <__aeabi_ui2d+0x2c>
 8002f44:	0000041e 	.word	0x0000041e

08002f48 <__aeabi_f2d>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	0043      	lsls	r3, r0, #1
 8002f4c:	0246      	lsls	r6, r0, #9
 8002f4e:	0fc4      	lsrs	r4, r0, #31
 8002f50:	20fe      	movs	r0, #254	; 0xfe
 8002f52:	0e1b      	lsrs	r3, r3, #24
 8002f54:	1c59      	adds	r1, r3, #1
 8002f56:	0a75      	lsrs	r5, r6, #9
 8002f58:	4208      	tst	r0, r1
 8002f5a:	d00c      	beq.n	8002f76 <__aeabi_f2d+0x2e>
 8002f5c:	22e0      	movs	r2, #224	; 0xe0
 8002f5e:	0092      	lsls	r2, r2, #2
 8002f60:	4694      	mov	ip, r2
 8002f62:	076d      	lsls	r5, r5, #29
 8002f64:	0b36      	lsrs	r6, r6, #12
 8002f66:	4463      	add	r3, ip
 8002f68:	051b      	lsls	r3, r3, #20
 8002f6a:	4333      	orrs	r3, r6
 8002f6c:	07e4      	lsls	r4, r4, #31
 8002f6e:	4323      	orrs	r3, r4
 8002f70:	0028      	movs	r0, r5
 8002f72:	0019      	movs	r1, r3
 8002f74:	bd70      	pop	{r4, r5, r6, pc}
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d114      	bne.n	8002fa4 <__aeabi_f2d+0x5c>
 8002f7a:	2d00      	cmp	r5, #0
 8002f7c:	d01b      	beq.n	8002fb6 <__aeabi_f2d+0x6e>
 8002f7e:	0028      	movs	r0, r5
 8002f80:	f000 f8b2 	bl	80030e8 <__clzsi2>
 8002f84:	280a      	cmp	r0, #10
 8002f86:	dc1c      	bgt.n	8002fc2 <__aeabi_f2d+0x7a>
 8002f88:	230b      	movs	r3, #11
 8002f8a:	002a      	movs	r2, r5
 8002f8c:	1a1b      	subs	r3, r3, r0
 8002f8e:	40da      	lsrs	r2, r3
 8002f90:	0003      	movs	r3, r0
 8002f92:	3315      	adds	r3, #21
 8002f94:	409d      	lsls	r5, r3
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <__aeabi_f2d+0x88>)
 8002f98:	0312      	lsls	r2, r2, #12
 8002f9a:	1a1b      	subs	r3, r3, r0
 8002f9c:	055b      	lsls	r3, r3, #21
 8002f9e:	0b16      	lsrs	r6, r2, #12
 8002fa0:	0d5b      	lsrs	r3, r3, #21
 8002fa2:	e7e1      	b.n	8002f68 <__aeabi_f2d+0x20>
 8002fa4:	2d00      	cmp	r5, #0
 8002fa6:	d009      	beq.n	8002fbc <__aeabi_f2d+0x74>
 8002fa8:	0b32      	lsrs	r2, r6, #12
 8002faa:	2680      	movs	r6, #128	; 0x80
 8002fac:	0336      	lsls	r6, r6, #12
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <__aeabi_f2d+0x8c>)
 8002fb0:	076d      	lsls	r5, r5, #29
 8002fb2:	4316      	orrs	r6, r2
 8002fb4:	e7d8      	b.n	8002f68 <__aeabi_f2d+0x20>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2600      	movs	r6, #0
 8002fba:	e7d5      	b.n	8002f68 <__aeabi_f2d+0x20>
 8002fbc:	2600      	movs	r6, #0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <__aeabi_f2d+0x8c>)
 8002fc0:	e7d2      	b.n	8002f68 <__aeabi_f2d+0x20>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	002a      	movs	r2, r5
 8002fc6:	3b0b      	subs	r3, #11
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	2500      	movs	r5, #0
 8002fcc:	e7e3      	b.n	8002f96 <__aeabi_f2d+0x4e>
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	00000389 	.word	0x00000389
 8002fd4:	000007ff 	.word	0x000007ff

08002fd8 <__aeabi_d2f>:
 8002fd8:	0002      	movs	r2, r0
 8002fda:	004b      	lsls	r3, r1, #1
 8002fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fde:	0308      	lsls	r0, r1, #12
 8002fe0:	0d5b      	lsrs	r3, r3, #21
 8002fe2:	4e3d      	ldr	r6, [pc, #244]	; (80030d8 <__aeabi_d2f+0x100>)
 8002fe4:	0fcc      	lsrs	r4, r1, #31
 8002fe6:	0a40      	lsrs	r0, r0, #9
 8002fe8:	0f51      	lsrs	r1, r2, #29
 8002fea:	1c5f      	adds	r7, r3, #1
 8002fec:	4308      	orrs	r0, r1
 8002fee:	00d5      	lsls	r5, r2, #3
 8002ff0:	4237      	tst	r7, r6
 8002ff2:	d00a      	beq.n	800300a <__aeabi_d2f+0x32>
 8002ff4:	4939      	ldr	r1, [pc, #228]	; (80030dc <__aeabi_d2f+0x104>)
 8002ff6:	185e      	adds	r6, r3, r1
 8002ff8:	2efe      	cmp	r6, #254	; 0xfe
 8002ffa:	dd16      	ble.n	800302a <__aeabi_d2f+0x52>
 8002ffc:	23ff      	movs	r3, #255	; 0xff
 8002ffe:	2100      	movs	r1, #0
 8003000:	05db      	lsls	r3, r3, #23
 8003002:	430b      	orrs	r3, r1
 8003004:	07e0      	lsls	r0, r4, #31
 8003006:	4318      	orrs	r0, r3
 8003008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <__aeabi_d2f+0x44>
 800300e:	4328      	orrs	r0, r5
 8003010:	d027      	beq.n	8003062 <__aeabi_d2f+0x8a>
 8003012:	2105      	movs	r1, #5
 8003014:	0189      	lsls	r1, r1, #6
 8003016:	0a49      	lsrs	r1, r1, #9
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e7f1      	b.n	8003000 <__aeabi_d2f+0x28>
 800301c:	4305      	orrs	r5, r0
 800301e:	d0ed      	beq.n	8002ffc <__aeabi_d2f+0x24>
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	03c9      	lsls	r1, r1, #15
 8003024:	23ff      	movs	r3, #255	; 0xff
 8003026:	4301      	orrs	r1, r0
 8003028:	e7ea      	b.n	8003000 <__aeabi_d2f+0x28>
 800302a:	2e00      	cmp	r6, #0
 800302c:	dd1c      	ble.n	8003068 <__aeabi_d2f+0x90>
 800302e:	0192      	lsls	r2, r2, #6
 8003030:	0011      	movs	r1, r2
 8003032:	1e4a      	subs	r2, r1, #1
 8003034:	4191      	sbcs	r1, r2
 8003036:	00c0      	lsls	r0, r0, #3
 8003038:	0f6d      	lsrs	r5, r5, #29
 800303a:	4301      	orrs	r1, r0
 800303c:	4329      	orrs	r1, r5
 800303e:	074b      	lsls	r3, r1, #29
 8003040:	d048      	beq.n	80030d4 <__aeabi_d2f+0xfc>
 8003042:	230f      	movs	r3, #15
 8003044:	400b      	ands	r3, r1
 8003046:	2b04      	cmp	r3, #4
 8003048:	d000      	beq.n	800304c <__aeabi_d2f+0x74>
 800304a:	3104      	adds	r1, #4
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	04db      	lsls	r3, r3, #19
 8003050:	400b      	ands	r3, r1
 8003052:	d03f      	beq.n	80030d4 <__aeabi_d2f+0xfc>
 8003054:	1c72      	adds	r2, r6, #1
 8003056:	2efe      	cmp	r6, #254	; 0xfe
 8003058:	d0d0      	beq.n	8002ffc <__aeabi_d2f+0x24>
 800305a:	0189      	lsls	r1, r1, #6
 800305c:	0a49      	lsrs	r1, r1, #9
 800305e:	b2d3      	uxtb	r3, r2
 8003060:	e7ce      	b.n	8003000 <__aeabi_d2f+0x28>
 8003062:	2300      	movs	r3, #0
 8003064:	2100      	movs	r1, #0
 8003066:	e7cb      	b.n	8003000 <__aeabi_d2f+0x28>
 8003068:	0032      	movs	r2, r6
 800306a:	3217      	adds	r2, #23
 800306c:	db22      	blt.n	80030b4 <__aeabi_d2f+0xdc>
 800306e:	2180      	movs	r1, #128	; 0x80
 8003070:	221e      	movs	r2, #30
 8003072:	0409      	lsls	r1, r1, #16
 8003074:	4308      	orrs	r0, r1
 8003076:	1b92      	subs	r2, r2, r6
 8003078:	2a1f      	cmp	r2, #31
 800307a:	dd1d      	ble.n	80030b8 <__aeabi_d2f+0xe0>
 800307c:	2102      	movs	r1, #2
 800307e:	4249      	negs	r1, r1
 8003080:	1b8e      	subs	r6, r1, r6
 8003082:	0001      	movs	r1, r0
 8003084:	40f1      	lsrs	r1, r6
 8003086:	000e      	movs	r6, r1
 8003088:	2a20      	cmp	r2, #32
 800308a:	d004      	beq.n	8003096 <__aeabi_d2f+0xbe>
 800308c:	4a14      	ldr	r2, [pc, #80]	; (80030e0 <__aeabi_d2f+0x108>)
 800308e:	4694      	mov	ip, r2
 8003090:	4463      	add	r3, ip
 8003092:	4098      	lsls	r0, r3
 8003094:	4305      	orrs	r5, r0
 8003096:	0029      	movs	r1, r5
 8003098:	1e4d      	subs	r5, r1, #1
 800309a:	41a9      	sbcs	r1, r5
 800309c:	4331      	orrs	r1, r6
 800309e:	2600      	movs	r6, #0
 80030a0:	074b      	lsls	r3, r1, #29
 80030a2:	d1ce      	bne.n	8003042 <__aeabi_d2f+0x6a>
 80030a4:	2080      	movs	r0, #128	; 0x80
 80030a6:	000b      	movs	r3, r1
 80030a8:	04c0      	lsls	r0, r0, #19
 80030aa:	2201      	movs	r2, #1
 80030ac:	4003      	ands	r3, r0
 80030ae:	4201      	tst	r1, r0
 80030b0:	d1d3      	bne.n	800305a <__aeabi_d2f+0x82>
 80030b2:	e7af      	b.n	8003014 <__aeabi_d2f+0x3c>
 80030b4:	2300      	movs	r3, #0
 80030b6:	e7ac      	b.n	8003012 <__aeabi_d2f+0x3a>
 80030b8:	490a      	ldr	r1, [pc, #40]	; (80030e4 <__aeabi_d2f+0x10c>)
 80030ba:	468c      	mov	ip, r1
 80030bc:	0029      	movs	r1, r5
 80030be:	4463      	add	r3, ip
 80030c0:	40d1      	lsrs	r1, r2
 80030c2:	409d      	lsls	r5, r3
 80030c4:	000a      	movs	r2, r1
 80030c6:	0029      	movs	r1, r5
 80030c8:	4098      	lsls	r0, r3
 80030ca:	1e4d      	subs	r5, r1, #1
 80030cc:	41a9      	sbcs	r1, r5
 80030ce:	4301      	orrs	r1, r0
 80030d0:	4311      	orrs	r1, r2
 80030d2:	e7e4      	b.n	800309e <__aeabi_d2f+0xc6>
 80030d4:	0033      	movs	r3, r6
 80030d6:	e79d      	b.n	8003014 <__aeabi_d2f+0x3c>
 80030d8:	000007fe 	.word	0x000007fe
 80030dc:	fffffc80 	.word	0xfffffc80
 80030e0:	fffffca2 	.word	0xfffffca2
 80030e4:	fffffc82 	.word	0xfffffc82

080030e8 <__clzsi2>:
 80030e8:	211c      	movs	r1, #28
 80030ea:	2301      	movs	r3, #1
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	4298      	cmp	r0, r3
 80030f0:	d301      	bcc.n	80030f6 <__clzsi2+0xe>
 80030f2:	0c00      	lsrs	r0, r0, #16
 80030f4:	3910      	subs	r1, #16
 80030f6:	0a1b      	lsrs	r3, r3, #8
 80030f8:	4298      	cmp	r0, r3
 80030fa:	d301      	bcc.n	8003100 <__clzsi2+0x18>
 80030fc:	0a00      	lsrs	r0, r0, #8
 80030fe:	3908      	subs	r1, #8
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	4298      	cmp	r0, r3
 8003104:	d301      	bcc.n	800310a <__clzsi2+0x22>
 8003106:	0900      	lsrs	r0, r0, #4
 8003108:	3904      	subs	r1, #4
 800310a:	a202      	add	r2, pc, #8	; (adr r2, 8003114 <__clzsi2+0x2c>)
 800310c:	5c10      	ldrb	r0, [r2, r0]
 800310e:	1840      	adds	r0, r0, r1
 8003110:	4770      	bx	lr
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	02020304 	.word	0x02020304
 8003118:	01010101 	.word	0x01010101
	...

08003124 <ICM_ReadBytes>:
	dst <<= 8; \
	dst |= (src_low); \
} while (0);

void ICM_ReadBytes(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8003124:	b5b0      	push	{r4, r5, r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	0008      	movs	r0, r1
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	0019      	movs	r1, r3
 8003132:	240b      	movs	r4, #11
 8003134:	193b      	adds	r3, r7, r4
 8003136:	1c02      	adds	r2, r0, #0
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	2508      	movs	r5, #8
 800313c:	197b      	adds	r3, r7, r5
 800313e:	1c0a      	adds	r2, r1, #0
 8003140:	801a      	strh	r2, [r3, #0]
	reg = reg | READ_FLAG;
 8003142:	193b      	adds	r3, r7, r4
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	4252      	negs	r2, r2
 800314a:	4313      	orrs	r3, r2
 800314c:	b2da      	uxtb	r2, r3
 800314e:	193b      	adds	r3, r7, r4
 8003150:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4810      	ldr	r0, [pc, #64]	; (8003198 <ICM_ReadBytes+0x74>)
 8003158:	2200      	movs	r2, #0
 800315a:	0019      	movs	r1, r3
 800315c:	f002 ff6c 	bl	8006038 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 8003160:	2301      	movs	r3, #1
 8003162:	425b      	negs	r3, r3
 8003164:	1939      	adds	r1, r7, r4
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f004 f8ed 	bl	8007348 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, pData, Size,HAL_MAX_DELAY);
 800316e:	2301      	movs	r3, #1
 8003170:	425c      	negs	r4, r3
 8003172:	197b      	adds	r3, r7, r5
 8003174:	881a      	ldrh	r2, [r3, #0]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	0023      	movs	r3, r4
 800317c:	f004 fa3c 	bl	80075f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4804      	ldr	r0, [pc, #16]	; (8003198 <ICM_ReadBytes+0x74>)
 8003186:	2201      	movs	r2, #1
 8003188:	0019      	movs	r1, r3
 800318a:	f002 ff55 	bl	8006038 <HAL_GPIO_WritePin>
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b004      	add	sp, #16
 8003194:	bdb0      	pop	{r4, r5, r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	50000800 	.word	0x50000800

0800319c <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);

}

void ICM_ReadOneByte(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t* pData) // ***
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	240b      	movs	r4, #11
 80031a8:	193b      	adds	r3, r7, r4
 80031aa:	1c0a      	adds	r2, r1, #0
 80031ac:	701a      	strb	r2, [r3, #0]
	reg = reg | READ_FLAG;
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	4252      	negs	r2, r2
 80031b6:	4313      	orrs	r3, r2
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4817      	ldr	r0, [pc, #92]	; (8003220 <ICM_ReadOneByte+0x84>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	0019      	movs	r1, r3
 80031c8:	f002 ff36 	bl	8006038 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 80031cc:	2301      	movs	r3, #1
 80031ce:	425b      	negs	r3, r3
 80031d0:	1939      	adds	r1, r7, r4
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f004 f8b7 	bl	8007348 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	0018      	movs	r0, r3
 80031e0:	f004 fd28 	bl	8007c34 <HAL_SPI_GetState>
 80031e4:	0003      	movs	r3, r0
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d1f8      	bne.n	80031dc <ICM_ReadOneByte+0x40>
		;
	HAL_SPI_Receive(hspi, pData, 1,HAL_MAX_DELAY);
 80031ea:	2301      	movs	r3, #1
 80031ec:	425b      	negs	r3, r3
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f004 fa00 	bl	80075f8 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f004 fd19 	bl	8007c34 <HAL_SPI_GetState>
 8003202:	0003      	movs	r3, r0
 8003204:	2b01      	cmp	r3, #1
 8003206:	d1f8      	bne.n	80031fa <ICM_ReadOneByte+0x5e>
		;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4804      	ldr	r0, [pc, #16]	; (8003220 <ICM_ReadOneByte+0x84>)
 800320e:	2201      	movs	r2, #1
 8003210:	0019      	movs	r1, r3
 8003212:	f002 ff11 	bl	8006038 <HAL_GPIO_WritePin>
}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b005      	add	sp, #20
 800321c:	bd90      	pop	{r4, r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	50000800 	.word	0x50000800

08003224 <ICM_WriteOneByte>:

void ICM_WriteOneByte(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t Data) // ***
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	0008      	movs	r0, r1
 800322e:	0011      	movs	r1, r2
 8003230:	1cfb      	adds	r3, r7, #3
 8003232:	1c02      	adds	r2, r0, #0
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	1cbb      	adds	r3, r7, #2
 8003238:	1c0a      	adds	r2, r1, #0
 800323a:	701a      	strb	r2, [r3, #0]
	reg = reg & WRITE_FLAG;
 800323c:	1cfb      	adds	r3, r7, #3
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	227f      	movs	r2, #127	; 0x7f
 8003242:	4013      	ands	r3, r2
 8003244:	b2da      	uxtb	r2, r3
 8003246:	1cfb      	adds	r3, r7, #3
 8003248:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	480f      	ldr	r0, [pc, #60]	; (800328c <ICM_WriteOneByte+0x68>)
 8003250:	2200      	movs	r2, #0
 8003252:	0019      	movs	r1, r3
 8003254:	f002 fef0 	bl	8006038 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 8003258:	2301      	movs	r3, #1
 800325a:	425b      	negs	r3, r3
 800325c:	1cf9      	adds	r1, r7, #3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f004 f871 	bl	8007348 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &Data, 1,HAL_MAX_DELAY);
 8003266:	2301      	movs	r3, #1
 8003268:	425b      	negs	r3, r3
 800326a:	1cb9      	adds	r1, r7, #2
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f004 f86a 	bl	8007348 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4804      	ldr	r0, [pc, #16]	; (800328c <ICM_WriteOneByte+0x68>)
 800327a:	2201      	movs	r2, #1
 800327c:	0019      	movs	r1, r3
 800327e:	f002 fedb 	bl	8006038 <HAL_GPIO_WritePin>
}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	b002      	add	sp, #8
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	50000800 	.word	0x50000800

08003290 <ICM_SelectBank>:

void ICM_SelectBank(SPI_HandleTypeDef* hspi,uint8_t reg){
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	000a      	movs	r2, r1
 800329a:	1cfb      	adds	r3, r7, #3
 800329c:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,USER_BANK_SEL,reg);
 800329e:	1cfb      	adds	r3, r7, #3
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	217f      	movs	r1, #127	; 0x7f
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7ff ffbc 	bl	8003224 <ICM_WriteOneByte>
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <ICM_Initialize>:


/*Initializing the ICM20602*/
void ICM_Initialize(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart)
{
 80032b4:	b5b0      	push	{r4, r5, r7, lr}
 80032b6:	b09e      	sub	sp, #120	; 0x78
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]

	uint8_t temp;

	ICM_SelectBank(hspi,USER_BANK_0);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2100      	movs	r1, #0
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff ffe4 	bl	8003290 <ICM_SelectBank>
	temp = PWR_MGT_RESET;
 80032c8:	2177      	movs	r1, #119	; 0x77
 80032ca:	187b      	adds	r3, r7, r1
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,REG_PWR_MGMT_1,temp);
 80032d0:	187b      	adds	r3, r7, r1
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2106      	movs	r1, #6
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff ffa3 	bl	8003224 <ICM_WriteOneByte>
	HAL_Delay(20);
 80032de:	2014      	movs	r0, #20
 80032e0:	f002 fc58 	bl	8005b94 <HAL_Delay>

	char uart_buffer[100];
	sprintf((char*) uart_buffer, "Initializing \r\n");
 80032e4:	4a8f      	ldr	r2, [pc, #572]	; (8003524 <ICM_Initialize+0x270>)
 80032e6:	240c      	movs	r4, #12
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	0011      	movs	r1, r2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f006 f9d1 	bl	8009694 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 80032f2:	193b      	adds	r3, r7, r4
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fc ff03 	bl	8000100 <strlen>
 80032fa:	0003      	movs	r3, r0
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	23fa      	movs	r3, #250	; 0xfa
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	1939      	adds	r1, r7, r4
 8003304:	6838      	ldr	r0, [r7, #0]
 8003306:	f004 ffe7 	bl	80082d8 <HAL_UART_Transmit>
	HAL_Delay(100);
 800330a:	2064      	movs	r0, #100	; 0x64
 800330c:	f002 fc42 	bl	8005b94 <HAL_Delay>

	/* Who am i test
	 WhoAmI is in register bank 0* */
	ICM_SelectBank(hspi,USER_BANK_0);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2100      	movs	r1, #0
 8003314:	0018      	movs	r0, r3
 8003316:	f7ff ffbb 	bl	8003290 <ICM_SelectBank>
	if (ICM_WHOAMI(hspi))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 fde9 	bl	8003ef4 <ICM_WHOAMI>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d012      	beq.n	800334c <ICM_Initialize+0x98>
	{
		sprintf((char*) uart_buffer, "WHO AM I Success \r\n");
 8003326:	4a80      	ldr	r2, [pc, #512]	; (8003528 <ICM_Initialize+0x274>)
 8003328:	193b      	adds	r3, r7, r4
 800332a:	0011      	movs	r1, r2
 800332c:	0018      	movs	r0, r3
 800332e:	f006 f9b1 	bl	8009694 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003332:	193b      	adds	r3, r7, r4
 8003334:	0018      	movs	r0, r3
 8003336:	f7fc fee3 	bl	8000100 <strlen>
 800333a:	0003      	movs	r3, r0
 800333c:	b29a      	uxth	r2, r3
 800333e:	23fa      	movs	r3, #250	; 0xfa
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	1939      	adds	r1, r7, r4
 8003344:	6838      	ldr	r0, [r7, #0]
 8003346:	f004 ffc7 	bl	80082d8 <HAL_UART_Transmit>
 800334a:	e012      	b.n	8003372 <ICM_Initialize+0xbe>
	} else {
		sprintf((char*) uart_buffer, "WHO AM I Failed \r\n");
 800334c:	4a77      	ldr	r2, [pc, #476]	; (800352c <ICM_Initialize+0x278>)
 800334e:	240c      	movs	r4, #12
 8003350:	193b      	adds	r3, r7, r4
 8003352:	0011      	movs	r1, r2
 8003354:	0018      	movs	r0, r3
 8003356:	f006 f99d 	bl	8009694 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 800335a:	193b      	adds	r3, r7, r4
 800335c:	0018      	movs	r0, r3
 800335e:	f7fc fecf 	bl	8000100 <strlen>
 8003362:	0003      	movs	r3, r0
 8003364:	b29a      	uxth	r2, r3
 8003366:	23fa      	movs	r3, #250	; 0xfa
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	1939      	adds	r1, r7, r4
 800336c:	6838      	ldr	r0, [r7, #0]
 800336e:	f004 ffb3 	bl	80082d8 <HAL_UART_Transmit>
	}

	HAL_Delay(50);
 8003372:	2032      	movs	r0, #50	; 0x32
 8003374:	f002 fc0e 	bl	8005b94 <HAL_Delay>

	uint8_t pwr_config = PWR_MGMT_1_CONFIG;
 8003378:	2476      	movs	r4, #118	; 0x76
 800337a:	193b      	adds	r3, r7, r4
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
	uint8_t pwr_config2 = PWR_MGMT_2_CONFIG;
 8003380:	2575      	movs	r5, #117	; 0x75
 8003382:	197b      	adds	r3, r7, r5
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]

	ICM_WriteOneByte(hspi, REG_PWR_MGMT_1, pwr_config);
 8003388:	193b      	adds	r3, r7, r4
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2106      	movs	r1, #6
 8003390:	0018      	movs	r0, r3
 8003392:	f7ff ff47 	bl	8003224 <ICM_WriteOneByte>
	HAL_Delay(20);
 8003396:	2014      	movs	r0, #20
 8003398:	f002 fbfc 	bl	8005b94 <HAL_Delay>
	ICM_WriteOneByte(hspi,REG_PWR_MGMT_2,pwr_config2);
 800339c:	197b      	adds	r3, r7, r5
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2107      	movs	r1, #7
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7ff ff3d 	bl	8003224 <ICM_WriteOneByte>


	/*Turn Acceleration and Gyro OFF*/
	HAL_Delay(20);
 80033aa:	2014      	movs	r0, #20
 80033ac:	f002 fbf2 	bl	8005b94 <HAL_Delay>
	pwr_config = ACC_GYRO_OFF;
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	223f      	movs	r2, #63	; 0x3f
 80033b4:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_PWR_MGMT_2, pwr_config);
 80033b6:	193b      	adds	r3, r7, r4
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2107      	movs	r1, #7
 80033be:	0018      	movs	r0, r3
 80033c0:	f7ff ff30 	bl	8003224 <ICM_WriteOneByte>

	/* Disable Fifo and I2C slave*/
	temp = 0b00010000;
 80033c4:	2477      	movs	r4, #119	; 0x77
 80033c6:	193b      	adds	r3, r7, r4
 80033c8:	2210      	movs	r2, #16
 80033ca:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_USER_CTRL, temp);
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2103      	movs	r1, #3
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff ff25 	bl	8003224 <ICM_WriteOneByte>


	/* Configure Gyro */
	ICM_SelectBank(hspi,USER_BANK_2);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2120      	movs	r1, #32
 80033de:	0018      	movs	r0, r3
 80033e0:	f7ff ff56 	bl	8003290 <ICM_SelectBank>
	temp = 0;
 80033e4:	193b      	adds	r3, r7, r4
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,REG_GYRO_CONFIG_2,temp);
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2102      	movs	r1, #2
 80033f2:	0018      	movs	r0, r3
 80033f4:	f7ff ff16 	bl	8003224 <ICM_WriteOneByte>

	uint16_t dps = GYRO_DPS;
 80033f8:	2472      	movs	r4, #114	; 0x72
 80033fa:	193b      	adds	r3, r7, r4
 80033fc:	22fa      	movs	r2, #250	; 0xfa
 80033fe:	0092      	lsls	r2, r2, #2
 8003400:	801a      	strh	r2, [r3, #0]
	if (ICM_GyroConfig(hspi, dps))
 8003402:	193b      	adds	r3, r7, r4
 8003404:	881a      	ldrh	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0011      	movs	r1, r2
 800340a:	0018      	movs	r0, r3
 800340c:	f000 f898 	bl	8003540 <ICM_GyroConfig>
 8003410:	1e03      	subs	r3, r0, #0
 8003412:	d014      	beq.n	800343e <ICM_Initialize+0x18a>
	{
		sprintf((char*) uart_buffer, "Gyro Configuration success DPS: %d \r\n", dps);
 8003414:	193b      	adds	r3, r7, r4
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	4945      	ldr	r1, [pc, #276]	; (8003530 <ICM_Initialize+0x27c>)
 800341a:	240c      	movs	r4, #12
 800341c:	193b      	adds	r3, r7, r4
 800341e:	0018      	movs	r0, r3
 8003420:	f006 f938 	bl	8009694 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003424:	193b      	adds	r3, r7, r4
 8003426:	0018      	movs	r0, r3
 8003428:	f7fc fe6a 	bl	8000100 <strlen>
 800342c:	0003      	movs	r3, r0
 800342e:	b29a      	uxth	r2, r3
 8003430:	23fa      	movs	r3, #250	; 0xfa
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	1939      	adds	r1, r7, r4
 8003436:	6838      	ldr	r0, [r7, #0]
 8003438:	f004 ff4e 	bl	80082d8 <HAL_UART_Transmit>
 800343c:	e012      	b.n	8003464 <ICM_Initialize+0x1b0>

	} else {
		sprintf((char*) uart_buffer, "Gyro Configuration failed \r\n");
 800343e:	4a3d      	ldr	r2, [pc, #244]	; (8003534 <ICM_Initialize+0x280>)
 8003440:	240c      	movs	r4, #12
 8003442:	193b      	adds	r3, r7, r4
 8003444:	0011      	movs	r1, r2
 8003446:	0018      	movs	r0, r3
 8003448:	f006 f924 	bl	8009694 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 800344c:	193b      	adds	r3, r7, r4
 800344e:	0018      	movs	r0, r3
 8003450:	f7fc fe56 	bl	8000100 <strlen>
 8003454:	0003      	movs	r3, r0
 8003456:	b29a      	uxth	r2, r3
 8003458:	23fa      	movs	r3, #250	; 0xfa
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	1939      	adds	r1, r7, r4
 800345e:	6838      	ldr	r0, [r7, #0]
 8003460:	f004 ff3a 	bl	80082d8 <HAL_UART_Transmit>

	}

		temp = 0;
 8003464:	2177      	movs	r1, #119	; 0x77
 8003466:	187b      	adds	r3, r7, r1
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG_2,temp);
 800346c:	187b      	adds	r3, r7, r1
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2115      	movs	r1, #21
 8003474:	0018      	movs	r0, r3
 8003476:	f7ff fed5 	bl	8003224 <ICM_WriteOneByte>
	/*Turn Acceleartion and Gyro ON*/
		HAL_Delay(20);
 800347a:	2014      	movs	r0, #20
 800347c:	f002 fb8a 	bl	8005b94 <HAL_Delay>
		pwr_config = ACC_GYRO_ON;
 8003480:	2476      	movs	r4, #118	; 0x76
 8003482:	193b      	adds	r3, r7, r4
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
		ICM_SelectBank(hspi,USER_BANK_0);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2100      	movs	r1, #0
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff feff 	bl	8003290 <ICM_SelectBank>
		HAL_Delay(20);
 8003492:	2014      	movs	r0, #20
 8003494:	f002 fb7e 	bl	8005b94 <HAL_Delay>
		ICM_WriteOneByte(hspi, REG_PWR_MGMT_2, pwr_config);
 8003498:	193b      	adds	r3, r7, r4
 800349a:	781a      	ldrb	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2107      	movs	r1, #7
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff febf 	bl	8003224 <ICM_WriteOneByte>
		HAL_Delay(20);
 80034a6:	2014      	movs	r0, #20
 80034a8:	f002 fb74 	bl	8005b94 <HAL_Delay>
	/* Configure Accelerometer */
	uint8_t acc_scale = ACCEL_SCALE_SELECT;
 80034ac:	2471      	movs	r4, #113	; 0x71
 80034ae:	193b      	adds	r3, r7, r4
 80034b0:	2202      	movs	r2, #2
 80034b2:	701a      	strb	r2, [r3, #0]

	if(ICM_AccConfig(hspi,acc_scale)){
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0011      	movs	r1, r2
 80034bc:	0018      	movs	r0, r3
 80034be:	f000 fc77 	bl	8003db0 <ICM_AccConfig>
 80034c2:	1e03      	subs	r3, r0, #0
 80034c4:	d014      	beq.n	80034f0 <ICM_Initialize+0x23c>
		sprintf((char*) uart_buffer,"Accelerometer Configuration success SELECT +-G: %d \r\n",acc_scale);
 80034c6:	193b      	adds	r3, r7, r4
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	491b      	ldr	r1, [pc, #108]	; (8003538 <ICM_Initialize+0x284>)
 80034cc:	240c      	movs	r4, #12
 80034ce:	193b      	adds	r3, r7, r4
 80034d0:	0018      	movs	r0, r3
 80034d2:	f006 f8df 	bl	8009694 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 80034d6:	193b      	adds	r3, r7, r4
 80034d8:	0018      	movs	r0, r3
 80034da:	f7fc fe11 	bl	8000100 <strlen>
 80034de:	0003      	movs	r3, r0
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	23fa      	movs	r3, #250	; 0xfa
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	1939      	adds	r1, r7, r4
 80034e8:	6838      	ldr	r0, [r7, #0]
 80034ea:	f004 fef5 	bl	80082d8 <HAL_UART_Transmit>
 80034ee:	e012      	b.n	8003516 <ICM_Initialize+0x262>
	}else{
		sprintf((char*) uart_buffer, "Accelerometer Configuration failed \r\n");
 80034f0:	4a12      	ldr	r2, [pc, #72]	; (800353c <ICM_Initialize+0x288>)
 80034f2:	240c      	movs	r4, #12
 80034f4:	193b      	adds	r3, r7, r4
 80034f6:	0011      	movs	r1, r2
 80034f8:	0018      	movs	r0, r3
 80034fa:	f006 f8cb 	bl	8009694 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 80034fe:	193b      	adds	r3, r7, r4
 8003500:	0018      	movs	r0, r3
 8003502:	f7fc fdfd 	bl	8000100 <strlen>
 8003506:	0003      	movs	r3, r0
 8003508:	b29a      	uxth	r2, r3
 800350a:	23fa      	movs	r3, #250	; 0xfa
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	1939      	adds	r1, r7, r4
 8003510:	6838      	ldr	r0, [r7, #0]
 8003512:	f004 fee1 	bl	80082d8 <HAL_UART_Transmit>
	}

	HAL_Delay(20);
 8003516:	2014      	movs	r0, #20
 8003518:	f002 fb3c 	bl	8005b94 <HAL_Delay>

	/*Configure*/


}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b01e      	add	sp, #120	; 0x78
 8003522:	bdb0      	pop	{r4, r5, r7, pc}
 8003524:	0800d410 	.word	0x0800d410
 8003528:	0800d420 	.word	0x0800d420
 800352c:	0800d434 	.word	0x0800d434
 8003530:	0800d448 	.word	0x0800d448
 8003534:	0800d470 	.word	0x0800d470
 8003538:	0800d490 	.word	0x0800d490
 800353c:	0800d4c8 	.word	0x0800d4c8

08003540 <ICM_GyroConfig>:
}


/*Configuring Gyro DPS settings in Gyro Config Register */
uint8_t ICM_GyroConfig(SPI_HandleTypeDef *hspi, uint16_t dps)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	000a      	movs	r2, r1
 800354a:	1cbb      	adds	r3, r7, #2
 800354c:	801a      	strh	r2, [r3, #0]
	uint8_t config_byte;
	switch(dps)
 800354e:	1cbb      	adds	r3, r7, #2
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	22fa      	movs	r2, #250	; 0xfa
 8003554:	00d2      	lsls	r2, r2, #3
 8003556:	4293      	cmp	r3, r2
 8003558:	d03f      	beq.n	80035da <ICM_GyroConfig+0x9a>
 800355a:	22fa      	movs	r2, #250	; 0xfa
 800355c:	00d2      	lsls	r2, r2, #3
 800355e:	4293      	cmp	r3, r2
 8003560:	dc4a      	bgt.n	80035f8 <ICM_GyroConfig+0xb8>
 8003562:	22fa      	movs	r2, #250	; 0xfa
 8003564:	0092      	lsls	r2, r2, #2
 8003566:	4293      	cmp	r3, r2
 8003568:	d028      	beq.n	80035bc <ICM_GyroConfig+0x7c>
 800356a:	22fa      	movs	r2, #250	; 0xfa
 800356c:	0092      	lsls	r2, r2, #2
 800356e:	4293      	cmp	r3, r2
 8003570:	dc42      	bgt.n	80035f8 <ICM_GyroConfig+0xb8>
 8003572:	2bfa      	cmp	r3, #250	; 0xfa
 8003574:	d004      	beq.n	8003580 <ICM_GyroConfig+0x40>
 8003576:	22fa      	movs	r2, #250	; 0xfa
 8003578:	0052      	lsls	r2, r2, #1
 800357a:	4293      	cmp	r3, r2
 800357c:	d00f      	beq.n	800359e <ICM_GyroConfig+0x5e>
 800357e:	e03b      	b.n	80035f8 <ICM_GyroConfig+0xb8>
	{
		case 250:
			config_byte = GYRO_250_DPS | GYRO_FILTER;
 8003580:	210f      	movs	r1, #15
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2229      	movs	r2, #41	; 0x29
 8003586:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_250DPS;
 8003588:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <ICM_GyroConfig+0x108>)
 800358a:	4a30      	ldr	r2, [pc, #192]	; (800364c <ICM_GyroConfig+0x10c>)
 800358c:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte);
 800358e:	187b      	adds	r3, r7, r1
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2101      	movs	r1, #1
 8003596:	0018      	movs	r0, r3
 8003598:	f7ff fe44 	bl	8003224 <ICM_WriteOneByte>
			break;
 800359c:	e038      	b.n	8003610 <ICM_GyroConfig+0xd0>
		case 500:
			config_byte = GYRO_500_DPS | GYRO_FILTER;
 800359e:	210f      	movs	r1, #15
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	222b      	movs	r2, #43	; 0x2b
 80035a4:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_500DPS;
 80035a6:	4b28      	ldr	r3, [pc, #160]	; (8003648 <ICM_GyroConfig+0x108>)
 80035a8:	4a29      	ldr	r2, [pc, #164]	; (8003650 <ICM_GyroConfig+0x110>)
 80035aa:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte);
 80035ac:	187b      	adds	r3, r7, r1
 80035ae:	781a      	ldrb	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2101      	movs	r1, #1
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7ff fe35 	bl	8003224 <ICM_WriteOneByte>
			break;
 80035ba:	e029      	b.n	8003610 <ICM_GyroConfig+0xd0>
		case 1000:
			config_byte = GYRO_1000_DPS | GYRO_FILTER;
 80035bc:	210f      	movs	r1, #15
 80035be:	187b      	adds	r3, r7, r1
 80035c0:	222d      	movs	r2, #45	; 0x2d
 80035c2:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_1000DPS;
 80035c4:	4b20      	ldr	r3, [pc, #128]	; (8003648 <ICM_GyroConfig+0x108>)
 80035c6:	4a23      	ldr	r2, [pc, #140]	; (8003654 <ICM_GyroConfig+0x114>)
 80035c8:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1,(uint8_t)config_byte);
 80035ca:	187b      	adds	r3, r7, r1
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2101      	movs	r1, #1
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7ff fe26 	bl	8003224 <ICM_WriteOneByte>
			break;
 80035d8:	e01a      	b.n	8003610 <ICM_GyroConfig+0xd0>
		case 2000:
			config_byte = GYRO_2000_DPS | GYRO_FILTER;
 80035da:	210f      	movs	r1, #15
 80035dc:	187b      	adds	r3, r7, r1
 80035de:	222f      	movs	r2, #47	; 0x2f
 80035e0:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_2000DPS;
 80035e2:	4b19      	ldr	r3, [pc, #100]	; (8003648 <ICM_GyroConfig+0x108>)
 80035e4:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <ICM_GyroConfig+0x118>)
 80035e6:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte);
 80035e8:	187b      	adds	r3, r7, r1
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2101      	movs	r1, #1
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7ff fe17 	bl	8003224 <ICM_WriteOneByte>
			break;
 80035f6:	e00b      	b.n	8003610 <ICM_GyroConfig+0xd0>
		default:
			config_byte = GYRO_1000_DPS | GYRO_FILTER;
 80035f8:	210f      	movs	r1, #15
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	222d      	movs	r2, #45	; 0x2d
 80035fe:	701a      	strb	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte);
 8003600:	187b      	adds	r3, r7, r1
 8003602:	781a      	ldrb	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2101      	movs	r1, #1
 8003608:	0018      	movs	r0, r3
 800360a:	f7ff fe0b 	bl	8003224 <ICM_WriteOneByte>
			break;
 800360e:	46c0      	nop			; (mov r8, r8)
	}

	HAL_Delay(10);
 8003610:	200a      	movs	r0, #10
 8003612:	f002 fabf 	bl	8005b94 <HAL_Delay>

	uint8_t test = 0;
 8003616:	210e      	movs	r1, #14
 8003618:	187b      	adds	r3, r7, r1
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]

	ICM_ReadOneByte(hspi, REG_GYRO_CONFIG_1, &test);
 800361e:	000c      	movs	r4, r1
 8003620:	187a      	adds	r2, r7, r1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2101      	movs	r1, #1
 8003626:	0018      	movs	r0, r3
 8003628:	f7ff fdb8 	bl	800319c <ICM_ReadOneByte>

	if (test != config_byte)
 800362c:	193b      	adds	r3, r7, r4
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	220f      	movs	r2, #15
 8003632:	18ba      	adds	r2, r7, r2
 8003634:	7812      	ldrb	r2, [r2, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d001      	beq.n	800363e <ICM_GyroConfig+0xfe>
	{

		return 0;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <ICM_GyroConfig+0x100>
	}
	return 1;
 800363e:	2301      	movs	r3, #1
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b005      	add	sp, #20
 8003646:	bd90      	pop	{r4, r7, pc}
 8003648:	200003b8 	.word	0x200003b8
 800364c:	43030000 	.word	0x43030000
 8003650:	42830000 	.word	0x42830000
 8003654:	42033333 	.word	0x42033333
 8003658:	41833333 	.word	0x41833333

0800365c <ICM_GyroCalibration>:


void ICM_GyroCalibration(SPI_HandleTypeDef *hspi,UART_HandleTypeDef* huart, float *gyro_bias){
 800365c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365e:	b0c5      	sub	sp, #276	; 0x114
 8003660:	af04      	add	r7, sp, #16
 8003662:	6178      	str	r0, [r7, #20]
 8003664:	6139      	str	r1, [r7, #16]
 8003666:	60fa      	str	r2, [r7, #12]
	uint8_t gyro_raw[6] = {0,0,0,0,0,0};
 8003668:	23f0      	movs	r3, #240	; 0xf0
 800366a:	2208      	movs	r2, #8
 800366c:	4694      	mov	ip, r2
 800366e:	44bc      	add	ip, r7
 8003670:	4463      	add	r3, ip
 8003672:	4ab5      	ldr	r2, [pc, #724]	; (8003948 <ICM_GyroCalibration+0x2ec>)
 8003674:	6811      	ldr	r1, [r2, #0]
 8003676:	6019      	str	r1, [r3, #0]
 8003678:	8892      	ldrh	r2, [r2, #4]
 800367a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_temp[3] = {0,0,0};
 800367c:	21e8      	movs	r1, #232	; 0xe8
 800367e:	2008      	movs	r0, #8
 8003680:	183b      	adds	r3, r7, r0
 8003682:	185b      	adds	r3, r3, r1
 8003684:	2200      	movs	r2, #0
 8003686:	801a      	strh	r2, [r3, #0]
 8003688:	183b      	adds	r3, r7, r0
 800368a:	185b      	adds	r3, r3, r1
 800368c:	2200      	movs	r2, #0
 800368e:	805a      	strh	r2, [r3, #2]
 8003690:	183b      	adds	r3, r7, r0
 8003692:	185b      	adds	r3, r3, r1
 8003694:	2200      	movs	r2, #0
 8003696:	809a      	strh	r2, [r3, #4]
	float gyro_int[3] = {0,0,0};
 8003698:	21dc      	movs	r1, #220	; 0xdc
 800369a:	183b      	adds	r3, r7, r0
 800369c:	185b      	adds	r3, r3, r1
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	183b      	adds	r3, r7, r0
 80036a4:	185b      	adds	r3, r3, r1
 80036a6:	2200      	movs	r2, #0
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	183b      	adds	r3, r7, r0
 80036ac:	185b      	adds	r3, r3, r1
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
	char uart_buffer_test[200];
	ICM_SelectBank(hspi,USER_BANK_0);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2100      	movs	r1, #0
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7ff fdea 	bl	8003290 <ICM_SelectBank>
	HAL_Delay(10);
 80036bc:	200a      	movs	r0, #10
 80036be:	f002 fa69 	bl	8005b94 <HAL_Delay>

	for (int16_t i = 0; i < 500; i++)
 80036c2:	23f6      	movs	r3, #246	; 0xf6
 80036c4:	2208      	movs	r2, #8
 80036c6:	4694      	mov	ip, r2
 80036c8:	44bc      	add	ip, r7
 80036ca:	4463      	add	r3, ip
 80036cc:	2200      	movs	r2, #0
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	e0c8      	b.n	8003864 <ICM_GyroCalibration+0x208>
	{
		ICM_ReadBytes(hspi, REG_GYRO_XOUT_H, gyro_raw, 6);
 80036d2:	24f0      	movs	r4, #240	; 0xf0
 80036d4:	2508      	movs	r5, #8
 80036d6:	197b      	adds	r3, r7, r5
 80036d8:	191a      	adds	r2, r3, r4
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	2306      	movs	r3, #6
 80036de:	2133      	movs	r1, #51	; 0x33
 80036e0:	f7ff fd20 	bl	8003124 <ICM_ReadBytes>
		UINT8_TO_INT16(gyro_temp[0], gyro_raw[0], gyro_raw[1]);
 80036e4:	0020      	movs	r0, r4
 80036e6:	002c      	movs	r4, r5
 80036e8:	193b      	adds	r3, r7, r4
 80036ea:	181b      	adds	r3, r3, r0
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	b21a      	sxth	r2, r3
 80036f0:	21e8      	movs	r1, #232	; 0xe8
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	185b      	adds	r3, r3, r1
 80036f6:	801a      	strh	r2, [r3, #0]
 80036f8:	193b      	adds	r3, r7, r4
 80036fa:	185b      	adds	r3, r3, r1
 80036fc:	2200      	movs	r2, #0
 80036fe:	5e9b      	ldrsh	r3, [r3, r2]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	b21a      	sxth	r2, r3
 8003704:	193b      	adds	r3, r7, r4
 8003706:	185b      	adds	r3, r3, r1
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	193b      	adds	r3, r7, r4
 800370c:	185b      	adds	r3, r3, r1
 800370e:	2200      	movs	r2, #0
 8003710:	5e9a      	ldrsh	r2, [r3, r2]
 8003712:	193b      	adds	r3, r7, r4
 8003714:	181b      	adds	r3, r3, r0
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	b21b      	sxth	r3, r3
 800371a:	4313      	orrs	r3, r2
 800371c:	b21a      	sxth	r2, r3
 800371e:	193b      	adds	r3, r7, r4
 8003720:	185b      	adds	r3, r3, r1
 8003722:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(gyro_temp[1], gyro_raw[2], gyro_raw[3]);
 8003724:	193b      	adds	r3, r7, r4
 8003726:	181b      	adds	r3, r3, r0
 8003728:	789b      	ldrb	r3, [r3, #2]
 800372a:	b21a      	sxth	r2, r3
 800372c:	193b      	adds	r3, r7, r4
 800372e:	185b      	adds	r3, r3, r1
 8003730:	805a      	strh	r2, [r3, #2]
 8003732:	193b      	adds	r3, r7, r4
 8003734:	185b      	adds	r3, r3, r1
 8003736:	2202      	movs	r2, #2
 8003738:	5e9b      	ldrsh	r3, [r3, r2]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	b21a      	sxth	r2, r3
 800373e:	193b      	adds	r3, r7, r4
 8003740:	185b      	adds	r3, r3, r1
 8003742:	805a      	strh	r2, [r3, #2]
 8003744:	193b      	adds	r3, r7, r4
 8003746:	185b      	adds	r3, r3, r1
 8003748:	2202      	movs	r2, #2
 800374a:	5e9a      	ldrsh	r2, [r3, r2]
 800374c:	193b      	adds	r3, r7, r4
 800374e:	181b      	adds	r3, r3, r0
 8003750:	78db      	ldrb	r3, [r3, #3]
 8003752:	b21b      	sxth	r3, r3
 8003754:	4313      	orrs	r3, r2
 8003756:	b21a      	sxth	r2, r3
 8003758:	193b      	adds	r3, r7, r4
 800375a:	185b      	adds	r3, r3, r1
 800375c:	805a      	strh	r2, [r3, #2]
		UINT8_TO_INT16(gyro_temp[2], gyro_raw[4], gyro_raw[5]);
 800375e:	193b      	adds	r3, r7, r4
 8003760:	181b      	adds	r3, r3, r0
 8003762:	791b      	ldrb	r3, [r3, #4]
 8003764:	b21a      	sxth	r2, r3
 8003766:	193b      	adds	r3, r7, r4
 8003768:	185b      	adds	r3, r3, r1
 800376a:	809a      	strh	r2, [r3, #4]
 800376c:	193b      	adds	r3, r7, r4
 800376e:	185b      	adds	r3, r3, r1
 8003770:	2204      	movs	r2, #4
 8003772:	5e9b      	ldrsh	r3, [r3, r2]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	b21a      	sxth	r2, r3
 8003778:	193b      	adds	r3, r7, r4
 800377a:	185b      	adds	r3, r3, r1
 800377c:	809a      	strh	r2, [r3, #4]
 800377e:	000d      	movs	r5, r1
 8003780:	193b      	adds	r3, r7, r4
 8003782:	185b      	adds	r3, r3, r1
 8003784:	2204      	movs	r2, #4
 8003786:	5e9a      	ldrsh	r2, [r3, r2]
 8003788:	0021      	movs	r1, r4
 800378a:	193b      	adds	r3, r7, r4
 800378c:	181b      	adds	r3, r3, r0
 800378e:	795b      	ldrb	r3, [r3, #5]
 8003790:	b21b      	sxth	r3, r3
 8003792:	4313      	orrs	r3, r2
 8003794:	b21a      	sxth	r2, r3
 8003796:	187b      	adds	r3, r7, r1
 8003798:	195b      	adds	r3, r3, r5
 800379a:	809a      	strh	r2, [r3, #4]

		gyro_int[0] = gyro_int[0] + ((float) gyro_temp[0] / g_gyro_scale_factor);
 800379c:	26dc      	movs	r6, #220	; 0xdc
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	199b      	adds	r3, r3, r6
 80037a2:	681c      	ldr	r4, [r3, #0]
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	195b      	adds	r3, r3, r5
 80037a8:	2200      	movs	r2, #0
 80037aa:	5e9b      	ldrsh	r3, [r3, r2]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7fd fd31 	bl	8001214 <__aeabi_i2f>
 80037b2:	1c02      	adds	r2, r0, #0
 80037b4:	4b65      	ldr	r3, [pc, #404]	; (800394c <ICM_GyroCalibration+0x2f0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	1c19      	adds	r1, r3, #0
 80037ba:	1c10      	adds	r0, r2, #0
 80037bc:	f7fd f85e 	bl	800087c <__aeabi_fdiv>
 80037c0:	1c03      	adds	r3, r0, #0
 80037c2:	1c19      	adds	r1, r3, #0
 80037c4:	1c20      	adds	r0, r4, #0
 80037c6:	f7fc febd 	bl	8000544 <__aeabi_fadd>
 80037ca:	1c03      	adds	r3, r0, #0
 80037cc:	1c1a      	adds	r2, r3, #0
 80037ce:	2008      	movs	r0, #8
 80037d0:	183b      	adds	r3, r7, r0
 80037d2:	199b      	adds	r3, r3, r6
 80037d4:	601a      	str	r2, [r3, #0]
		gyro_int[1] = gyro_int[1] + ((float) gyro_temp[1] / g_gyro_scale_factor);
 80037d6:	183b      	adds	r3, r7, r0
 80037d8:	199b      	adds	r3, r3, r6
 80037da:	685c      	ldr	r4, [r3, #4]
 80037dc:	183b      	adds	r3, r7, r0
 80037de:	195b      	adds	r3, r3, r5
 80037e0:	2202      	movs	r2, #2
 80037e2:	5e9b      	ldrsh	r3, [r3, r2]
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7fd fd15 	bl	8001214 <__aeabi_i2f>
 80037ea:	1c02      	adds	r2, r0, #0
 80037ec:	4b57      	ldr	r3, [pc, #348]	; (800394c <ICM_GyroCalibration+0x2f0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1c19      	adds	r1, r3, #0
 80037f2:	1c10      	adds	r0, r2, #0
 80037f4:	f7fd f842 	bl	800087c <__aeabi_fdiv>
 80037f8:	1c03      	adds	r3, r0, #0
 80037fa:	1c19      	adds	r1, r3, #0
 80037fc:	1c20      	adds	r0, r4, #0
 80037fe:	f7fc fea1 	bl	8000544 <__aeabi_fadd>
 8003802:	1c03      	adds	r3, r0, #0
 8003804:	1c1a      	adds	r2, r3, #0
 8003806:	2008      	movs	r0, #8
 8003808:	183b      	adds	r3, r7, r0
 800380a:	199b      	adds	r3, r3, r6
 800380c:	605a      	str	r2, [r3, #4]
		gyro_int[2] = gyro_int[2] + ((float) gyro_temp[2] / g_gyro_scale_factor);
 800380e:	183b      	adds	r3, r7, r0
 8003810:	199b      	adds	r3, r3, r6
 8003812:	689c      	ldr	r4, [r3, #8]
 8003814:	183b      	adds	r3, r7, r0
 8003816:	195b      	adds	r3, r3, r5
 8003818:	2204      	movs	r2, #4
 800381a:	5e9b      	ldrsh	r3, [r3, r2]
 800381c:	0018      	movs	r0, r3
 800381e:	f7fd fcf9 	bl	8001214 <__aeabi_i2f>
 8003822:	1c02      	adds	r2, r0, #0
 8003824:	4b49      	ldr	r3, [pc, #292]	; (800394c <ICM_GyroCalibration+0x2f0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	1c19      	adds	r1, r3, #0
 800382a:	1c10      	adds	r0, r2, #0
 800382c:	f7fd f826 	bl	800087c <__aeabi_fdiv>
 8003830:	1c03      	adds	r3, r0, #0
 8003832:	1c19      	adds	r1, r3, #0
 8003834:	1c20      	adds	r0, r4, #0
 8003836:	f7fc fe85 	bl	8000544 <__aeabi_fadd>
 800383a:	1c03      	adds	r3, r0, #0
 800383c:	1c1a      	adds	r2, r3, #0
 800383e:	2408      	movs	r4, #8
 8003840:	193b      	adds	r3, r7, r4
 8003842:	199b      	adds	r3, r3, r6
 8003844:	609a      	str	r2, [r3, #8]
		HAL_Delay(20);
 8003846:	2014      	movs	r0, #20
 8003848:	f002 f9a4 	bl	8005b94 <HAL_Delay>
	for (int16_t i = 0; i < 500; i++)
 800384c:	21f6      	movs	r1, #246	; 0xf6
 800384e:	0020      	movs	r0, r4
 8003850:	183b      	adds	r3, r7, r0
 8003852:	185b      	adds	r3, r3, r1
 8003854:	2200      	movs	r2, #0
 8003856:	5e9b      	ldrsh	r3, [r3, r2]
 8003858:	b29b      	uxth	r3, r3
 800385a:	3301      	adds	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	183b      	adds	r3, r7, r0
 8003860:	185b      	adds	r3, r3, r1
 8003862:	801a      	strh	r2, [r3, #0]
 8003864:	23f6      	movs	r3, #246	; 0xf6
 8003866:	2208      	movs	r2, #8
 8003868:	4694      	mov	ip, r2
 800386a:	44bc      	add	ip, r7
 800386c:	4463      	add	r3, ip
 800386e:	2200      	movs	r2, #0
 8003870:	5e9a      	ldrsh	r2, [r3, r2]
 8003872:	23fa      	movs	r3, #250	; 0xfa
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	429a      	cmp	r2, r3
 8003878:	da00      	bge.n	800387c <ICM_GyroCalibration+0x220>
 800387a:	e72a      	b.n	80036d2 <ICM_GyroCalibration+0x76>
	}


	gyro_bias[0] =  -1*gyro_int[0] / 500.0;
 800387c:	25dc      	movs	r5, #220	; 0xdc
 800387e:	2608      	movs	r6, #8
 8003880:	19bb      	adds	r3, r7, r6
 8003882:	195b      	adds	r3, r3, r5
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	0612      	lsls	r2, r2, #24
 800388a:	4053      	eors	r3, r2
 800388c:	4930      	ldr	r1, [pc, #192]	; (8003950 <ICM_GyroCalibration+0x2f4>)
 800388e:	1c18      	adds	r0, r3, #0
 8003890:	f7fc fff4 	bl	800087c <__aeabi_fdiv>
 8003894:	1c03      	adds	r3, r0, #0
 8003896:	1c1a      	adds	r2, r3, #0
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	601a      	str	r2, [r3, #0]
	gyro_bias[1] =  -1*gyro_int[1] / 500.0;
 800389c:	19bb      	adds	r3, r7, r6
 800389e:	195b      	adds	r3, r3, r5
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	0612      	lsls	r2, r2, #24
 80038a6:	405a      	eors	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1d1c      	adds	r4, r3, #4
 80038ac:	4928      	ldr	r1, [pc, #160]	; (8003950 <ICM_GyroCalibration+0x2f4>)
 80038ae:	1c10      	adds	r0, r2, #0
 80038b0:	f7fc ffe4 	bl	800087c <__aeabi_fdiv>
 80038b4:	1c03      	adds	r3, r0, #0
 80038b6:	6023      	str	r3, [r4, #0]
	gyro_bias[2] =  -1*gyro_int[2] / 500.0;
 80038b8:	19bb      	adds	r3, r7, r6
 80038ba:	195b      	adds	r3, r3, r5
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	0612      	lsls	r2, r2, #24
 80038c2:	405a      	eors	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3308      	adds	r3, #8
 80038c8:	001c      	movs	r4, r3
 80038ca:	4921      	ldr	r1, [pc, #132]	; (8003950 <ICM_GyroCalibration+0x2f4>)
 80038cc:	1c10      	adds	r0, r2, #0
 80038ce:	f7fc ffd5 	bl	800087c <__aeabi_fdiv>
 80038d2:	1c03      	adds	r3, r0, #0
 80038d4:	6023      	str	r3, [r4, #0]

	sprintf(uart_buffer_test,
					"\r\n Calibrating Gyroscope:"
					"(Gyro x-offset: %.4f | Gyro y-offset: %.4f | Gyro z-offset: %.4f)"
					"\r\n",
					gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer_test,
 80038da:	1c18      	adds	r0, r3, #0
 80038dc:	f7ff fb34 	bl	8002f48 <__aeabi_f2d>
 80038e0:	6038      	str	r0, [r7, #0]
 80038e2:	6079      	str	r1, [r7, #4]
					gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3304      	adds	r3, #4
 80038e8:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer_test,
 80038ea:	1c18      	adds	r0, r3, #0
 80038ec:	f7ff fb2c 	bl	8002f48 <__aeabi_f2d>
 80038f0:	0004      	movs	r4, r0
 80038f2:	000d      	movs	r5, r1
					gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3308      	adds	r3, #8
 80038f8:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer_test,
 80038fa:	1c18      	adds	r0, r3, #0
 80038fc:	f7ff fb24 	bl	8002f48 <__aeabi_f2d>
 8003900:	0002      	movs	r2, r0
 8003902:	000b      	movs	r3, r1
 8003904:	4913      	ldr	r1, [pc, #76]	; (8003954 <ICM_GyroCalibration+0x2f8>)
 8003906:	2614      	movs	r6, #20
 8003908:	2008      	movs	r0, #8
 800390a:	1838      	adds	r0, r7, r0
 800390c:	1980      	adds	r0, r0, r6
 800390e:	9202      	str	r2, [sp, #8]
 8003910:	9303      	str	r3, [sp, #12]
 8003912:	9400      	str	r4, [sp, #0]
 8003914:	9501      	str	r5, [sp, #4]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f005 febb 	bl	8009694 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*)uart_buffer_test,strlen(uart_buffer_test),1000);
 800391e:	0034      	movs	r4, r6
 8003920:	2608      	movs	r6, #8
 8003922:	19bb      	adds	r3, r7, r6
 8003924:	191b      	adds	r3, r3, r4
 8003926:	0018      	movs	r0, r3
 8003928:	f7fc fbea 	bl	8000100 <strlen>
 800392c:	0003      	movs	r3, r0
 800392e:	b29a      	uxth	r2, r3
 8003930:	23fa      	movs	r3, #250	; 0xfa
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	19b9      	adds	r1, r7, r6
 8003936:	1909      	adds	r1, r1, r4
 8003938:	6938      	ldr	r0, [r7, #16]
 800393a:	f004 fccd 	bl	80082d8 <HAL_UART_Transmit>
}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b041      	add	sp, #260	; 0x104
 8003944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	0800d550 	.word	0x0800d550
 800394c:	200003b8 	.word	0x200003b8
 8003950:	43fa0000 	.word	0x43fa0000
 8003954:	0800d4f0 	.word	0x0800d4f0

08003958 <ICM_AccCalibration>:



void ICM_AccCalibration(SPI_HandleTypeDef *hspi, UART_HandleTypeDef* huart, float *acc_bias){
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395a:	b0c3      	sub	sp, #268	; 0x10c
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]

	float acc_data[3] = {0,0,0};
 8003964:	21f0      	movs	r1, #240	; 0xf0
 8003966:	187b      	adds	r3, r7, r1
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	187b      	adds	r3, r7, r1
 800396e:	2200      	movs	r2, #0
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	187b      	adds	r3, r7, r1
 8003974:	2200      	movs	r2, #0
 8003976:	609a      	str	r2, [r3, #8]
	float acc_angle[3] = {0,0,0};
 8003978:	21e4      	movs	r1, #228	; 0xe4
 800397a:	187b      	adds	r3, r7, r1
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	187b      	adds	r3, r7, r1
 8003982:	2200      	movs	r2, #0
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	187b      	adds	r3, r7, r1
 8003988:	2200      	movs	r2, #0
 800398a:	609a      	str	r2, [r3, #8]
	char uart_buffer_test[200];
	struct euler_angles temp = {0,0,0};
 800398c:	2110      	movs	r1, #16
 800398e:	187b      	adds	r3, r7, r1
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	187b      	adds	r3, r7, r1
 8003996:	2200      	movs	r2, #0
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]

	for (int16_t i = 0; i < 500; i++)
 80039a0:	23fe      	movs	r3, #254	; 0xfe
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2200      	movs	r2, #0
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	e032      	b.n	8003a10 <ICM_AccCalibration+0xb8>
	{
		ICM_ReadAccData(hspi, acc_data);
 80039aa:	24f0      	movs	r4, #240	; 0xf0
 80039ac:	193a      	adds	r2, r7, r4
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	0011      	movs	r1, r2
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 f962 	bl	8003c7c <ICM_ReadAccData>
		CalcAccLinearToEuler(acc_data, &temp);
 80039b8:	2510      	movs	r5, #16
 80039ba:	197a      	adds	r2, r7, r5
 80039bc:	193b      	adds	r3, r7, r4
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 fbcd 	bl	8004160 <CalcAccLinearToEuler>
		acc_angle[0] += temp.roll;
 80039c6:	24e4      	movs	r4, #228	; 0xe4
 80039c8:	193b      	adds	r3, r7, r4
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	197b      	adds	r3, r7, r5
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	1c19      	adds	r1, r3, #0
 80039d2:	1c10      	adds	r0, r2, #0
 80039d4:	f7fc fdb6 	bl	8000544 <__aeabi_fadd>
 80039d8:	1c03      	adds	r3, r0, #0
 80039da:	1c1a      	adds	r2, r3, #0
 80039dc:	193b      	adds	r3, r7, r4
 80039de:	601a      	str	r2, [r3, #0]
		acc_angle[1] += temp.pitch;
 80039e0:	193b      	adds	r3, r7, r4
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	197b      	adds	r3, r7, r5
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	1c19      	adds	r1, r3, #0
 80039ea:	1c10      	adds	r0, r2, #0
 80039ec:	f7fc fdaa 	bl	8000544 <__aeabi_fadd>
 80039f0:	1c03      	adds	r3, r0, #0
 80039f2:	1c1a      	adds	r2, r3, #0
 80039f4:	193b      	adds	r3, r7, r4
 80039f6:	605a      	str	r2, [r3, #4]
		HAL_Delay(20);
 80039f8:	2014      	movs	r0, #20
 80039fa:	f002 f8cb 	bl	8005b94 <HAL_Delay>
	for (int16_t i = 0; i < 500; i++)
 80039fe:	21fe      	movs	r1, #254	; 0xfe
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	2200      	movs	r2, #0
 8003a04:	5e9b      	ldrsh	r3, [r3, r2]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	187b      	adds	r3, r7, r1
 8003a0e:	801a      	strh	r2, [r3, #0]
 8003a10:	23fe      	movs	r3, #254	; 0xfe
 8003a12:	18fb      	adds	r3, r7, r3
 8003a14:	2200      	movs	r2, #0
 8003a16:	5e9a      	ldrsh	r2, [r3, r2]
 8003a18:	23fa      	movs	r3, #250	; 0xfa
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	dbc4      	blt.n	80039aa <ICM_AccCalibration+0x52>
	}

	acc_bias[0] =  -1*acc_angle[0] / 500.0;
 8003a20:	24e4      	movs	r4, #228	; 0xe4
 8003a22:	193b      	adds	r3, r7, r4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	0612      	lsls	r2, r2, #24
 8003a2a:	4053      	eors	r3, r2
 8003a2c:	491e      	ldr	r1, [pc, #120]	; (8003aa8 <ICM_AccCalibration+0x150>)
 8003a2e:	1c18      	adds	r0, r3, #0
 8003a30:	f7fc ff24 	bl	800087c <__aeabi_fdiv>
 8003a34:	1c03      	adds	r3, r0, #0
 8003a36:	1c1a      	adds	r2, r3, #0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	601a      	str	r2, [r3, #0]
	acc_bias[1] =  -1*acc_angle[1] / 500.0;
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2280      	movs	r2, #128	; 0x80
 8003a42:	0612      	lsls	r2, r2, #24
 8003a44:	405a      	eors	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	1d1c      	adds	r4, r3, #4
 8003a4a:	4917      	ldr	r1, [pc, #92]	; (8003aa8 <ICM_AccCalibration+0x150>)
 8003a4c:	1c10      	adds	r0, r2, #0
 8003a4e:	f7fc ff15 	bl	800087c <__aeabi_fdiv>
 8003a52:	1c03      	adds	r3, r0, #0
 8003a54:	6023      	str	r3, [r4, #0]

	sprintf(uart_buffer_test,
					"\r\n Calibrating Accelerometer:"
					"(Acc Roll: %.4f | Acc Pitch: %.4f)"
					"\r\n",
					acc_bias[0], acc_bias[1]);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer_test,
 8003a5a:	1c18      	adds	r0, r3, #0
 8003a5c:	f7ff fa74 	bl	8002f48 <__aeabi_f2d>
 8003a60:	0004      	movs	r4, r0
 8003a62:	000d      	movs	r5, r1
					acc_bias[0], acc_bias[1]);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3304      	adds	r3, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer_test,
 8003a6a:	1c18      	adds	r0, r3, #0
 8003a6c:	f7ff fa6c 	bl	8002f48 <__aeabi_f2d>
 8003a70:	0002      	movs	r2, r0
 8003a72:	000b      	movs	r3, r1
 8003a74:	490d      	ldr	r1, [pc, #52]	; (8003aac <ICM_AccCalibration+0x154>)
 8003a76:	261c      	movs	r6, #28
 8003a78:	19b8      	adds	r0, r7, r6
 8003a7a:	9200      	str	r2, [sp, #0]
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	0022      	movs	r2, r4
 8003a80:	002b      	movs	r3, r5
 8003a82:	f005 fe07 	bl	8009694 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*)uart_buffer_test,strlen(uart_buffer_test),1000);
 8003a86:	0034      	movs	r4, r6
 8003a88:	193b      	adds	r3, r7, r4
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f7fc fb38 	bl	8000100 <strlen>
 8003a90:	0003      	movs	r3, r0
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	23fa      	movs	r3, #250	; 0xfa
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	1939      	adds	r1, r7, r4
 8003a9a:	68b8      	ldr	r0, [r7, #8]
 8003a9c:	f004 fc1c 	bl	80082d8 <HAL_UART_Transmit>

}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b041      	add	sp, #260	; 0x104
 8003aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa8:	43fa0000 	.word	0x43fa0000
 8003aac:	0800d558 	.word	0x0800d558

08003ab0 <ICM_ReadGyroData>:

void ICM_ReadGyroData(SPI_HandleTypeDef *hspi, float* gyro_data, float *gyro_bias)
{
 8003ab0:	b5b0      	push	{r4, r5, r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
	uint8_t gyro_raw[6] = {0,0,0,0,0,0};
 8003abc:	2018      	movs	r0, #24
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	4a6a      	ldr	r2, [pc, #424]	; (8003c6c <ICM_ReadGyroData+0x1bc>)
 8003ac2:	6811      	ldr	r1, [r2, #0]
 8003ac4:	6019      	str	r1, [r3, #0]
 8003ac6:	8892      	ldrh	r2, [r2, #4]
 8003ac8:	809a      	strh	r2, [r3, #4]
	int16_t gyro_int[3] = {0,0,0};
 8003aca:	2410      	movs	r4, #16
 8003acc:	193b      	adds	r3, r7, r4
 8003ace:	2200      	movs	r2, #0
 8003ad0:	801a      	strh	r2, [r3, #0]
 8003ad2:	193b      	adds	r3, r7, r4
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	805a      	strh	r2, [r3, #2]
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	2200      	movs	r2, #0
 8003adc:	809a      	strh	r2, [r3, #4]

	ICM_ReadBytes(hspi, REG_GYRO_XOUT_H, gyro_raw, 6);
 8003ade:	0005      	movs	r5, r0
 8003ae0:	183a      	adds	r2, r7, r0
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	2306      	movs	r3, #6
 8003ae6:	2133      	movs	r1, #51	; 0x33
 8003ae8:	f7ff fb1c 	bl	8003124 <ICM_ReadBytes>
	UINT8_TO_INT16(gyro_int[0], gyro_raw[0], gyro_raw[1]);
 8003aec:	0028      	movs	r0, r5
 8003aee:	183b      	adds	r3, r7, r0
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	b21a      	sxth	r2, r3
 8003af4:	0021      	movs	r1, r4
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	187b      	adds	r3, r7, r1
 8003afc:	2200      	movs	r2, #0
 8003afe:	5e9b      	ldrsh	r3, [r3, r2]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	b21a      	sxth	r2, r3
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	801a      	strh	r2, [r3, #0]
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	5e9a      	ldrsh	r2, [r3, r2]
 8003b0e:	183b      	adds	r3, r7, r0
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	b21b      	sxth	r3, r3
 8003b14:	4313      	orrs	r3, r2
 8003b16:	b21a      	sxth	r2, r3
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro_int[1], gyro_raw[2], gyro_raw[3]);
 8003b1c:	183b      	adds	r3, r7, r0
 8003b1e:	789b      	ldrb	r3, [r3, #2]
 8003b20:	b21a      	sxth	r2, r3
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	805a      	strh	r2, [r3, #2]
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	2202      	movs	r2, #2
 8003b2a:	5e9b      	ldrsh	r3, [r3, r2]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	b21a      	sxth	r2, r3
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	805a      	strh	r2, [r3, #2]
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	2202      	movs	r2, #2
 8003b38:	5e9a      	ldrsh	r2, [r3, r2]
 8003b3a:	183b      	adds	r3, r7, r0
 8003b3c:	78db      	ldrb	r3, [r3, #3]
 8003b3e:	b21b      	sxth	r3, r3
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b21a      	sxth	r2, r3
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	805a      	strh	r2, [r3, #2]
	UINT8_TO_INT16(gyro_int[2], gyro_raw[4], gyro_raw[5]);
 8003b48:	183b      	adds	r3, r7, r0
 8003b4a:	791b      	ldrb	r3, [r3, #4]
 8003b4c:	b21a      	sxth	r2, r3
 8003b4e:	187b      	adds	r3, r7, r1
 8003b50:	809a      	strh	r2, [r3, #4]
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	2204      	movs	r2, #4
 8003b56:	5e9b      	ldrsh	r3, [r3, r2]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	b21a      	sxth	r2, r3
 8003b5c:	187b      	adds	r3, r7, r1
 8003b5e:	809a      	strh	r2, [r3, #4]
 8003b60:	000d      	movs	r5, r1
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	2204      	movs	r2, #4
 8003b66:	5e9a      	ldrsh	r2, [r3, r2]
 8003b68:	183b      	adds	r3, r7, r0
 8003b6a:	795b      	ldrb	r3, [r3, #5]
 8003b6c:	b21b      	sxth	r3, r3
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	b21a      	sxth	r2, r3
 8003b72:	197b      	adds	r3, r7, r5
 8003b74:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (((float) gyro_int[0]  / g_gyro_scale_factor) + gyro_bias[0])*DEG_2_RAD;
 8003b76:	197b      	adds	r3, r7, r5
 8003b78:	2200      	movs	r2, #0
 8003b7a:	5e9b      	ldrsh	r3, [r3, r2]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7fd fb49 	bl	8001214 <__aeabi_i2f>
 8003b82:	1c02      	adds	r2, r0, #0
 8003b84:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <ICM_ReadGyroData+0x1c0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1c19      	adds	r1, r3, #0
 8003b8a:	1c10      	adds	r0, r2, #0
 8003b8c:	f7fc fe76 	bl	800087c <__aeabi_fdiv>
 8003b90:	1c03      	adds	r3, r0, #0
 8003b92:	1c1a      	adds	r2, r3, #0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	1c19      	adds	r1, r3, #0
 8003b9a:	1c10      	adds	r0, r2, #0
 8003b9c:	f7fc fcd2 	bl	8000544 <__aeabi_fadd>
 8003ba0:	1c03      	adds	r3, r0, #0
 8003ba2:	1c18      	adds	r0, r3, #0
 8003ba4:	f7ff f9d0 	bl	8002f48 <__aeabi_f2d>
 8003ba8:	4a32      	ldr	r2, [pc, #200]	; (8003c74 <ICM_ReadGyroData+0x1c4>)
 8003baa:	4b33      	ldr	r3, [pc, #204]	; (8003c78 <ICM_ReadGyroData+0x1c8>)
 8003bac:	f7fe fb24 	bl	80021f8 <__aeabi_dmul>
 8003bb0:	0002      	movs	r2, r0
 8003bb2:	000b      	movs	r3, r1
 8003bb4:	0010      	movs	r0, r2
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	f7ff fa0e 	bl	8002fd8 <__aeabi_d2f>
 8003bbc:	1c02      	adds	r2, r0, #0
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	601a      	str	r2, [r3, #0]
	gyro_data[1] = (((float) gyro_int[1]  / g_gyro_scale_factor) + gyro_bias[1])*DEG_2_RAD;
 8003bc2:	197b      	adds	r3, r7, r5
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	5e9b      	ldrsh	r3, [r3, r2]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7fd fb23 	bl	8001214 <__aeabi_i2f>
 8003bce:	1c02      	adds	r2, r0, #0
 8003bd0:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <ICM_ReadGyroData+0x1c0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	1c19      	adds	r1, r3, #0
 8003bd6:	1c10      	adds	r0, r2, #0
 8003bd8:	f7fc fe50 	bl	800087c <__aeabi_fdiv>
 8003bdc:	1c03      	adds	r3, r0, #0
 8003bde:	1c1a      	adds	r2, r3, #0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1c19      	adds	r1, r3, #0
 8003be8:	1c10      	adds	r0, r2, #0
 8003bea:	f7fc fcab 	bl	8000544 <__aeabi_fadd>
 8003bee:	1c03      	adds	r3, r0, #0
 8003bf0:	1c18      	adds	r0, r3, #0
 8003bf2:	f7ff f9a9 	bl	8002f48 <__aeabi_f2d>
 8003bf6:	4a1f      	ldr	r2, [pc, #124]	; (8003c74 <ICM_ReadGyroData+0x1c4>)
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <ICM_ReadGyroData+0x1c8>)
 8003bfa:	f7fe fafd 	bl	80021f8 <__aeabi_dmul>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	000b      	movs	r3, r1
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	1d0c      	adds	r4, r1, #4
 8003c06:	0010      	movs	r0, r2
 8003c08:	0019      	movs	r1, r3
 8003c0a:	f7ff f9e5 	bl	8002fd8 <__aeabi_d2f>
 8003c0e:	1c03      	adds	r3, r0, #0
 8003c10:	6023      	str	r3, [r4, #0]
	gyro_data[2] = (((float) gyro_int[2]  / g_gyro_scale_factor) + gyro_bias[2])*DEG_2_RAD;
 8003c12:	197b      	adds	r3, r7, r5
 8003c14:	2204      	movs	r2, #4
 8003c16:	5e9b      	ldrsh	r3, [r3, r2]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f7fd fafb 	bl	8001214 <__aeabi_i2f>
 8003c1e:	1c02      	adds	r2, r0, #0
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <ICM_ReadGyroData+0x1c0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	1c19      	adds	r1, r3, #0
 8003c26:	1c10      	adds	r0, r2, #0
 8003c28:	f7fc fe28 	bl	800087c <__aeabi_fdiv>
 8003c2c:	1c03      	adds	r3, r0, #0
 8003c2e:	1c1a      	adds	r2, r3, #0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3308      	adds	r3, #8
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	1c19      	adds	r1, r3, #0
 8003c38:	1c10      	adds	r0, r2, #0
 8003c3a:	f7fc fc83 	bl	8000544 <__aeabi_fadd>
 8003c3e:	1c03      	adds	r3, r0, #0
 8003c40:	1c18      	adds	r0, r3, #0
 8003c42:	f7ff f981 	bl	8002f48 <__aeabi_f2d>
 8003c46:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <ICM_ReadGyroData+0x1c4>)
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <ICM_ReadGyroData+0x1c8>)
 8003c4a:	f7fe fad5 	bl	80021f8 <__aeabi_dmul>
 8003c4e:	0002      	movs	r2, r0
 8003c50:	000b      	movs	r3, r1
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	3108      	adds	r1, #8
 8003c56:	000c      	movs	r4, r1
 8003c58:	0010      	movs	r0, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	f7ff f9bc 	bl	8002fd8 <__aeabi_d2f>
 8003c60:	1c03      	adds	r3, r0, #0
 8003c62:	6023      	str	r3, [r4, #0]

}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b008      	add	sp, #32
 8003c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6c:	0800d550 	.word	0x0800d550
 8003c70:	200003b8 	.word	0x200003b8
 8003c74:	a2529d39 	.word	0xa2529d39
 8003c78:	3f91df46 	.word	0x3f91df46

08003c7c <ICM_ReadAccData>:


void ICM_ReadAccData(SPI_HandleTypeDef *hspi, float* accel_data){
 8003c7c:	b5b0      	push	{r4, r5, r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]

	uint8_t acc_data[6] = {0,0,0,0,0,0};
 8003c86:	2010      	movs	r0, #16
 8003c88:	183b      	adds	r3, r7, r0
 8003c8a:	4a47      	ldr	r2, [pc, #284]	; (8003da8 <ICM_ReadAccData+0x12c>)
 8003c8c:	6811      	ldr	r1, [r2, #0]
 8003c8e:	6019      	str	r1, [r3, #0]
 8003c90:	8892      	ldrh	r2, [r2, #4]
 8003c92:	809a      	strh	r2, [r3, #4]
	int16_t acc_int[3] = {0,0,0};
 8003c94:	2408      	movs	r4, #8
 8003c96:	193b      	adds	r3, r7, r4
 8003c98:	2200      	movs	r2, #0
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	193b      	adds	r3, r7, r4
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	805a      	strh	r2, [r3, #2]
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	809a      	strh	r2, [r3, #4]
	ICM_ReadBytes(hspi,REG_ACCEL_XOUT_H,acc_data,6);
 8003ca8:	0005      	movs	r5, r0
 8003caa:	183a      	adds	r2, r7, r0
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	2306      	movs	r3, #6
 8003cb0:	212d      	movs	r1, #45	; 0x2d
 8003cb2:	f7ff fa37 	bl	8003124 <ICM_ReadBytes>

	UINT8_TO_INT16(acc_int[0],acc_data[0],acc_data[1]);
 8003cb6:	0028      	movs	r0, r5
 8003cb8:	183b      	adds	r3, r7, r0
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b21a      	sxth	r2, r3
 8003cbe:	0021      	movs	r1, r4
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	187b      	adds	r3, r7, r1
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	5e9b      	ldrsh	r3, [r3, r2]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	b21a      	sxth	r2, r3
 8003cce:	187b      	adds	r3, r7, r1
 8003cd0:	801a      	strh	r2, [r3, #0]
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	5e9a      	ldrsh	r2, [r3, r2]
 8003cd8:	183b      	adds	r3, r7, r0
 8003cda:	785b      	ldrb	r3, [r3, #1]
 8003cdc:	b21b      	sxth	r3, r3
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	b21a      	sxth	r2, r3
 8003ce2:	187b      	adds	r3, r7, r1
 8003ce4:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(acc_int[1],acc_data[2],acc_data[3]);
 8003ce6:	183b      	adds	r3, r7, r0
 8003ce8:	789b      	ldrb	r3, [r3, #2]
 8003cea:	b21a      	sxth	r2, r3
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	805a      	strh	r2, [r3, #2]
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	5e9b      	ldrsh	r3, [r3, r2]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	b21a      	sxth	r2, r3
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	805a      	strh	r2, [r3, #2]
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	2202      	movs	r2, #2
 8003d02:	5e9a      	ldrsh	r2, [r3, r2]
 8003d04:	183b      	adds	r3, r7, r0
 8003d06:	78db      	ldrb	r3, [r3, #3]
 8003d08:	b21b      	sxth	r3, r3
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	b21a      	sxth	r2, r3
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	805a      	strh	r2, [r3, #2]
	UINT8_TO_INT16(acc_int[2],acc_data[4],acc_data[5]);
 8003d12:	183b      	adds	r3, r7, r0
 8003d14:	791b      	ldrb	r3, [r3, #4]
 8003d16:	b21a      	sxth	r2, r3
 8003d18:	187b      	adds	r3, r7, r1
 8003d1a:	809a      	strh	r2, [r3, #4]
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	2204      	movs	r2, #4
 8003d20:	5e9b      	ldrsh	r3, [r3, r2]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	b21a      	sxth	r2, r3
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	809a      	strh	r2, [r3, #4]
 8003d2a:	187b      	adds	r3, r7, r1
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	5e9a      	ldrsh	r2, [r3, r2]
 8003d30:	183b      	adds	r3, r7, r0
 8003d32:	795b      	ldrb	r3, [r3, #5]
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	4313      	orrs	r3, r2
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	000d      	movs	r5, r1
 8003d3c:	197b      	adds	r3, r7, r5
 8003d3e:	809a      	strh	r2, [r3, #4]

	accel_data[0] = ((float) acc_int[0] / acc_scale_factor);
 8003d40:	197b      	adds	r3, r7, r5
 8003d42:	2200      	movs	r2, #0
 8003d44:	5e9b      	ldrsh	r3, [r3, r2]
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7fd fa64 	bl	8001214 <__aeabi_i2f>
 8003d4c:	1c02      	adds	r2, r0, #0
 8003d4e:	4b17      	ldr	r3, [pc, #92]	; (8003dac <ICM_ReadAccData+0x130>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1c19      	adds	r1, r3, #0
 8003d54:	1c10      	adds	r0, r2, #0
 8003d56:	f7fc fd91 	bl	800087c <__aeabi_fdiv>
 8003d5a:	1c03      	adds	r3, r0, #0
 8003d5c:	1c1a      	adds	r2, r3, #0
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	601a      	str	r2, [r3, #0]
	accel_data[1] = ((float) acc_int[1] / acc_scale_factor);
 8003d62:	197b      	adds	r3, r7, r5
 8003d64:	2202      	movs	r2, #2
 8003d66:	5e9b      	ldrsh	r3, [r3, r2]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7fd fa53 	bl	8001214 <__aeabi_i2f>
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <ICM_ReadAccData+0x130>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	1d1c      	adds	r4, r3, #4
 8003d76:	1c11      	adds	r1, r2, #0
 8003d78:	f7fc fd80 	bl	800087c <__aeabi_fdiv>
 8003d7c:	1c03      	adds	r3, r0, #0
 8003d7e:	6023      	str	r3, [r4, #0]
	accel_data[2] = ((float) acc_int[2] / acc_scale_factor);
 8003d80:	197b      	adds	r3, r7, r5
 8003d82:	2204      	movs	r2, #4
 8003d84:	5e9b      	ldrsh	r3, [r3, r2]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7fd fa44 	bl	8001214 <__aeabi_i2f>
 8003d8c:	4b07      	ldr	r3, [pc, #28]	; (8003dac <ICM_ReadAccData+0x130>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	3308      	adds	r3, #8
 8003d94:	001c      	movs	r4, r3
 8003d96:	1c11      	adds	r1, r2, #0
 8003d98:	f7fc fd70 	bl	800087c <__aeabi_fdiv>
 8003d9c:	1c03      	adds	r3, r0, #0
 8003d9e:	6023      	str	r3, [r4, #0]
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b006      	add	sp, #24
 8003da6:	bdb0      	pop	{r4, r5, r7, pc}
 8003da8:	0800d550 	.word	0x0800d550
 8003dac:	20000350 	.word	0x20000350

08003db0 <ICM_AccConfig>:

/*configure accelerometer sensitivity and scaler**/
uint8_t ICM_AccConfig(SPI_HandleTypeDef *hspi, uint8_t sensitivity){
 8003db0:	b5b0      	push	{r4, r5, r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	000a      	movs	r2, r1
 8003dba:	1cfb      	adds	r3, r7, #3
 8003dbc:	701a      	strb	r2, [r3, #0]

	ICM_SelectBank(hspi,USER_BANK_2);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2120      	movs	r1, #32
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7ff fa64 	bl	8003290 <ICM_SelectBank>
	uint8_t config_byte_acc;
	uint8_t config2 = 0;
 8003dc8:	210e      	movs	r1, #14
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG_2,(uint8_t)config2);
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	781a      	ldrb	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2115      	movs	r1, #21
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7ff fa23 	bl	8003224 <ICM_WriteOneByte>

	switch(sensitivity){
 8003dde:	1cfb      	adds	r3, r7, #3
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d038      	beq.n	8003e58 <ICM_AccConfig+0xa8>
 8003de6:	dc47      	bgt.n	8003e78 <ICM_AccConfig+0xc8>
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d025      	beq.n	8003e38 <ICM_AccConfig+0x88>
 8003dec:	dc44      	bgt.n	8003e78 <ICM_AccConfig+0xc8>
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d002      	beq.n	8003df8 <ICM_AccConfig+0x48>
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d010      	beq.n	8003e18 <ICM_AccConfig+0x68>
 8003df6:	e03f      	b.n	8003e78 <ICM_AccConfig+0xc8>
	case 2:
		config_byte_acc = ACCEL_CONFIG_2G | ACC_FILTER;
 8003df8:	210f      	movs	r1, #15
 8003dfa:	187b      	adds	r3, r7, r1
 8003dfc:	2231      	movs	r2, #49	; 0x31
 8003dfe:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_2G;
 8003e00:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <ICM_AccConfig+0x140>)
 8003e02:	228d      	movs	r2, #141	; 0x8d
 8003e04:	05d2      	lsls	r2, r2, #23
 8003e06:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc);
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	781a      	ldrb	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2114      	movs	r1, #20
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7ff fa07 	bl	8003224 <ICM_WriteOneByte>
	break;
 8003e16:	e03e      	b.n	8003e96 <ICM_AccConfig+0xe6>
	case 4:
		config_byte_acc = ACCEL_CONFIG_4G | ACC_FILTER;
 8003e18:	210f      	movs	r1, #15
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	2233      	movs	r2, #51	; 0x33
 8003e1e:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_4G;
 8003e20:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <ICM_AccConfig+0x140>)
 8003e22:	228c      	movs	r2, #140	; 0x8c
 8003e24:	05d2      	lsls	r2, r2, #23
 8003e26:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc);
 8003e28:	187b      	adds	r3, r7, r1
 8003e2a:	781a      	ldrb	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2114      	movs	r1, #20
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7ff f9f7 	bl	8003224 <ICM_WriteOneByte>
	break;
 8003e36:	e02e      	b.n	8003e96 <ICM_AccConfig+0xe6>
	case 8:
		config_byte_acc = ACCEL_CONFIG_8G | ACC_FILTER;
 8003e38:	210f      	movs	r1, #15
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	2235      	movs	r2, #53	; 0x35
 8003e3e:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_8G;
 8003e40:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <ICM_AccConfig+0x140>)
 8003e42:	228b      	movs	r2, #139	; 0x8b
 8003e44:	05d2      	lsls	r2, r2, #23
 8003e46:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc);
 8003e48:	187b      	adds	r3, r7, r1
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2114      	movs	r1, #20
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7ff f9e7 	bl	8003224 <ICM_WriteOneByte>
	break;
 8003e56:	e01e      	b.n	8003e96 <ICM_AccConfig+0xe6>
	case 16:
		config_byte_acc = ACCEL_CONFIG_16G | ACC_FILTER;
 8003e58:	210f      	movs	r1, #15
 8003e5a:	187b      	adds	r3, r7, r1
 8003e5c:	2237      	movs	r2, #55	; 0x37
 8003e5e:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_16G;
 8003e60:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <ICM_AccConfig+0x140>)
 8003e62:	228a      	movs	r2, #138	; 0x8a
 8003e64:	05d2      	lsls	r2, r2, #23
 8003e66:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc);
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	781a      	ldrb	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2114      	movs	r1, #20
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7ff f9d7 	bl	8003224 <ICM_WriteOneByte>
	break;
 8003e76:	e00e      	b.n	8003e96 <ICM_AccConfig+0xe6>
	default:
		config_byte_acc = ACCEL_CONFIG_2G | ACC_FILTER;
 8003e78:	210f      	movs	r1, #15
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	2231      	movs	r2, #49	; 0x31
 8003e7e:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_2G;
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <ICM_AccConfig+0x140>)
 8003e82:	228d      	movs	r2, #141	; 0x8d
 8003e84:	05d2      	lsls	r2, r2, #23
 8003e86:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc);
 8003e88:	187b      	adds	r3, r7, r1
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2114      	movs	r1, #20
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7ff f9c7 	bl	8003224 <ICM_WriteOneByte>
	}

	HAL_Delay(20);
 8003e96:	2014      	movs	r0, #20
 8003e98:	f001 fe7c 	bl	8005b94 <HAL_Delay>

	uint8_t test1 = 0;
 8003e9c:	210d      	movs	r1, #13
 8003e9e:	187b      	adds	r3, r7, r1
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
	uint8_t test2 = 0;
 8003ea4:	250c      	movs	r5, #12
 8003ea6:	197b      	adds	r3, r7, r5
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]

	ICM_ReadOneByte(hspi,REG_ACCEL_CONFIG,&test1);
 8003eac:	000c      	movs	r4, r1
 8003eae:	187a      	adds	r2, r7, r1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2114      	movs	r1, #20
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff f971 	bl	800319c <ICM_ReadOneByte>
	ICM_ReadOneByte(hspi,REG_ACCEL_CONFIG_2,&test2);
 8003eba:	197a      	adds	r2, r7, r5
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2115      	movs	r1, #21
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7ff f96b 	bl	800319c <ICM_ReadOneByte>

	if((test1 != config_byte_acc) || (test2 != config2)){
 8003ec6:	193b      	adds	r3, r7, r4
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	220f      	movs	r2, #15
 8003ecc:	18ba      	adds	r2, r7, r2
 8003ece:	7812      	ldrb	r2, [r2, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d106      	bne.n	8003ee2 <ICM_AccConfig+0x132>
 8003ed4:	197b      	adds	r3, r7, r5
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	220e      	movs	r2, #14
 8003eda:	18ba      	adds	r2, r7, r2
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d001      	beq.n	8003ee6 <ICM_AccConfig+0x136>
		return 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e000      	b.n	8003ee8 <ICM_AccConfig+0x138>
	}else{
		return 1;
 8003ee6:	2301      	movs	r3, #1
	}

}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b004      	add	sp, #16
 8003eee:	bdb0      	pop	{r4, r5, r7, pc}
 8003ef0:	20000350 	.word	0x20000350

08003ef4 <ICM_WHOAMI>:

uint8_t ICM_WHOAMI(SPI_HandleTypeDef *hspi) {
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	uint8_t test = 0x00;
 8003efc:	210f      	movs	r1, #15
 8003efe:	187b      	adds	r3, r7, r1
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
	ICM_ReadOneByte(hspi, REG_WHO_AM_I , &test);
 8003f04:	000c      	movs	r4, r1
 8003f06:	187a      	adds	r2, r7, r1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7ff f945 	bl	800319c <ICM_ReadOneByte>
	if (test != REG_WHO_AM_I_CONST)
 8003f12:	193b      	adds	r3, r7, r4
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2bea      	cmp	r3, #234	; 0xea
 8003f18:	d001      	beq.n	8003f1e <ICM_WHOAMI+0x2a>
	{
		return 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e000      	b.n	8003f20 <ICM_WHOAMI+0x2c>
	} else {
		return 1;
 8003f1e:	2301      	movs	r3, #1

	}
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b005      	add	sp, #20
 8003f26:	bd90      	pop	{r4, r7, pc}

08003f28 <CalcQuaternionToEuler>:
static float k_p = 0.4;

float i[3] = {0,0,0};

void CalcQuaternionToEuler(struct quaternion quat, struct euler_angles* eu, float* accel_offset)
{
 8003f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	2608      	movs	r6, #8
 8003f30:	19bc      	adds	r4, r7, r6
 8003f32:	6020      	str	r0, [r4, #0]
 8003f34:	6061      	str	r1, [r4, #4]
 8003f36:	60a2      	str	r2, [r4, #8]
 8003f38:	60e3      	str	r3, [r4, #12]
	eu->roll = 90 - atan2((quat.q1*quat.q2 + quat.q3*quat.q4), 0.5 - (quat.q2*quat.q2 + quat.q3*quat.q3))*RAD_2_DEG - accel_offset[0];
 8003f3a:	19bb      	adds	r3, r7, r6
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	19bb      	adds	r3, r7, r6
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	1c19      	adds	r1, r3, #0
 8003f44:	1c10      	adds	r0, r2, #0
 8003f46:	f7fc fe63 	bl	8000c10 <__aeabi_fmul>
 8003f4a:	1c03      	adds	r3, r0, #0
 8003f4c:	1c1c      	adds	r4, r3, #0
 8003f4e:	19bb      	adds	r3, r7, r6
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	19bb      	adds	r3, r7, r6
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	1c19      	adds	r1, r3, #0
 8003f58:	1c10      	adds	r0, r2, #0
 8003f5a:	f7fc fe59 	bl	8000c10 <__aeabi_fmul>
 8003f5e:	1c03      	adds	r3, r0, #0
 8003f60:	1c19      	adds	r1, r3, #0
 8003f62:	1c20      	adds	r0, r4, #0
 8003f64:	f7fc faee 	bl	8000544 <__aeabi_fadd>
 8003f68:	1c03      	adds	r3, r0, #0
 8003f6a:	1c18      	adds	r0, r3, #0
 8003f6c:	f7fe ffec 	bl	8002f48 <__aeabi_f2d>
 8003f70:	0004      	movs	r4, r0
 8003f72:	000d      	movs	r5, r1
 8003f74:	19bb      	adds	r3, r7, r6
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	19bb      	adds	r3, r7, r6
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	1c19      	adds	r1, r3, #0
 8003f7e:	1c10      	adds	r0, r2, #0
 8003f80:	f7fc fe46 	bl	8000c10 <__aeabi_fmul>
 8003f84:	1c03      	adds	r3, r0, #0
 8003f86:	1c1e      	adds	r6, r3, #0
 8003f88:	2108      	movs	r1, #8
 8003f8a:	187b      	adds	r3, r7, r1
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	187b      	adds	r3, r7, r1
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	1c19      	adds	r1, r3, #0
 8003f94:	1c10      	adds	r0, r2, #0
 8003f96:	f7fc fe3b 	bl	8000c10 <__aeabi_fmul>
 8003f9a:	1c03      	adds	r3, r0, #0
 8003f9c:	1c19      	adds	r1, r3, #0
 8003f9e:	1c30      	adds	r0, r6, #0
 8003fa0:	f7fc fad0 	bl	8000544 <__aeabi_fadd>
 8003fa4:	1c03      	adds	r3, r0, #0
 8003fa6:	1c18      	adds	r0, r3, #0
 8003fa8:	f7fe ffce 	bl	8002f48 <__aeabi_f2d>
 8003fac:	0002      	movs	r2, r0
 8003fae:	000b      	movs	r3, r1
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	4967      	ldr	r1, [pc, #412]	; (8004150 <CalcQuaternionToEuler+0x228>)
 8003fb4:	f7fe fb8c 	bl	80026d0 <__aeabi_dsub>
 8003fb8:	0002      	movs	r2, r0
 8003fba:	000b      	movs	r3, r1
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	0029      	movs	r1, r5
 8003fc0:	f007 ffee 	bl	800bfa0 <atan2>
 8003fc4:	4a63      	ldr	r2, [pc, #396]	; (8004154 <CalcQuaternionToEuler+0x22c>)
 8003fc6:	4b64      	ldr	r3, [pc, #400]	; (8004158 <CalcQuaternionToEuler+0x230>)
 8003fc8:	f7fe f916 	bl	80021f8 <__aeabi_dmul>
 8003fcc:	0002      	movs	r2, r0
 8003fce:	000b      	movs	r3, r1
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	4962      	ldr	r1, [pc, #392]	; (800415c <CalcQuaternionToEuler+0x234>)
 8003fd4:	f7fe fb7c 	bl	80026d0 <__aeabi_dsub>
 8003fd8:	0002      	movs	r2, r0
 8003fda:	000b      	movs	r3, r1
 8003fdc:	0014      	movs	r4, r2
 8003fde:	001d      	movs	r5, r3
 8003fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	1c18      	adds	r0, r3, #0
 8003fe6:	f7fe ffaf 	bl	8002f48 <__aeabi_f2d>
 8003fea:	0002      	movs	r2, r0
 8003fec:	000b      	movs	r3, r1
 8003fee:	0020      	movs	r0, r4
 8003ff0:	0029      	movs	r1, r5
 8003ff2:	f7fe fb6d 	bl	80026d0 <__aeabi_dsub>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	000b      	movs	r3, r1
 8003ffa:	0010      	movs	r0, r2
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	f7fe ffeb 	bl	8002fd8 <__aeabi_d2f>
 8004002:	1c02      	adds	r2, r0, #0
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	601a      	str	r2, [r3, #0]
	eu->pitch = asin(2.0*(quat.q1*quat.q3 - quat.q2*quat.q4))*RAD_2_DEG - accel_offset[1];
 8004008:	2608      	movs	r6, #8
 800400a:	19bb      	adds	r3, r7, r6
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	19bb      	adds	r3, r7, r6
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	1c19      	adds	r1, r3, #0
 8004014:	1c10      	adds	r0, r2, #0
 8004016:	f7fc fdfb 	bl	8000c10 <__aeabi_fmul>
 800401a:	1c03      	adds	r3, r0, #0
 800401c:	1c1c      	adds	r4, r3, #0
 800401e:	19bb      	adds	r3, r7, r6
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	19bb      	adds	r3, r7, r6
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	1c19      	adds	r1, r3, #0
 8004028:	1c10      	adds	r0, r2, #0
 800402a:	f7fc fdf1 	bl	8000c10 <__aeabi_fmul>
 800402e:	1c03      	adds	r3, r0, #0
 8004030:	1c19      	adds	r1, r3, #0
 8004032:	1c20      	adds	r0, r4, #0
 8004034:	f7fc ff06 	bl	8000e44 <__aeabi_fsub>
 8004038:	1c03      	adds	r3, r0, #0
 800403a:	1c18      	adds	r0, r3, #0
 800403c:	f7fe ff84 	bl	8002f48 <__aeabi_f2d>
 8004040:	0002      	movs	r2, r0
 8004042:	000b      	movs	r3, r1
 8004044:	f7fd f968 	bl	8001318 <__aeabi_dadd>
 8004048:	0002      	movs	r2, r0
 800404a:	000b      	movs	r3, r1
 800404c:	0010      	movs	r0, r2
 800404e:	0019      	movs	r1, r3
 8004050:	f007 ff76 	bl	800bf40 <asin>
 8004054:	4a3f      	ldr	r2, [pc, #252]	; (8004154 <CalcQuaternionToEuler+0x22c>)
 8004056:	4b40      	ldr	r3, [pc, #256]	; (8004158 <CalcQuaternionToEuler+0x230>)
 8004058:	f7fe f8ce 	bl	80021f8 <__aeabi_dmul>
 800405c:	0002      	movs	r2, r0
 800405e:	000b      	movs	r3, r1
 8004060:	0014      	movs	r4, r2
 8004062:	001d      	movs	r5, r3
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	3304      	adds	r3, #4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1c18      	adds	r0, r3, #0
 800406c:	f7fe ff6c 	bl	8002f48 <__aeabi_f2d>
 8004070:	0002      	movs	r2, r0
 8004072:	000b      	movs	r3, r1
 8004074:	0020      	movs	r0, r4
 8004076:	0029      	movs	r1, r5
 8004078:	f7fe fb2a 	bl	80026d0 <__aeabi_dsub>
 800407c:	0002      	movs	r2, r0
 800407e:	000b      	movs	r3, r1
 8004080:	0010      	movs	r0, r2
 8004082:	0019      	movs	r1, r3
 8004084:	f7fe ffa8 	bl	8002fd8 <__aeabi_d2f>
 8004088:	1c02      	adds	r2, r0, #0
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	605a      	str	r2, [r3, #4]
	eu->yaw = -atan2((quat.q2*quat.q3 + quat.q1*quat.q4), 0.5 - (quat.q3*quat.q3 + quat.q4*quat.q4))*RAD_2_DEG;
 800408e:	19bb      	adds	r3, r7, r6
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	19bb      	adds	r3, r7, r6
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	1c19      	adds	r1, r3, #0
 8004098:	1c10      	adds	r0, r2, #0
 800409a:	f7fc fdb9 	bl	8000c10 <__aeabi_fmul>
 800409e:	1c03      	adds	r3, r0, #0
 80040a0:	1c1c      	adds	r4, r3, #0
 80040a2:	19bb      	adds	r3, r7, r6
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	19bb      	adds	r3, r7, r6
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	1c19      	adds	r1, r3, #0
 80040ac:	1c10      	adds	r0, r2, #0
 80040ae:	f7fc fdaf 	bl	8000c10 <__aeabi_fmul>
 80040b2:	1c03      	adds	r3, r0, #0
 80040b4:	1c19      	adds	r1, r3, #0
 80040b6:	1c20      	adds	r0, r4, #0
 80040b8:	f7fc fa44 	bl	8000544 <__aeabi_fadd>
 80040bc:	1c03      	adds	r3, r0, #0
 80040be:	1c18      	adds	r0, r3, #0
 80040c0:	f7fe ff42 	bl	8002f48 <__aeabi_f2d>
 80040c4:	0004      	movs	r4, r0
 80040c6:	000d      	movs	r5, r1
 80040c8:	19bb      	adds	r3, r7, r6
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	19bb      	adds	r3, r7, r6
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	1c19      	adds	r1, r3, #0
 80040d2:	1c10      	adds	r0, r2, #0
 80040d4:	f7fc fd9c 	bl	8000c10 <__aeabi_fmul>
 80040d8:	1c03      	adds	r3, r0, #0
 80040da:	1c1e      	adds	r6, r3, #0
 80040dc:	2108      	movs	r1, #8
 80040de:	187b      	adds	r3, r7, r1
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	187b      	adds	r3, r7, r1
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	1c19      	adds	r1, r3, #0
 80040e8:	1c10      	adds	r0, r2, #0
 80040ea:	f7fc fd91 	bl	8000c10 <__aeabi_fmul>
 80040ee:	1c03      	adds	r3, r0, #0
 80040f0:	1c19      	adds	r1, r3, #0
 80040f2:	1c30      	adds	r0, r6, #0
 80040f4:	f7fc fa26 	bl	8000544 <__aeabi_fadd>
 80040f8:	1c03      	adds	r3, r0, #0
 80040fa:	1c18      	adds	r0, r3, #0
 80040fc:	f7fe ff24 	bl	8002f48 <__aeabi_f2d>
 8004100:	0002      	movs	r2, r0
 8004102:	000b      	movs	r3, r1
 8004104:	2000      	movs	r0, #0
 8004106:	4912      	ldr	r1, [pc, #72]	; (8004150 <CalcQuaternionToEuler+0x228>)
 8004108:	f7fe fae2 	bl	80026d0 <__aeabi_dsub>
 800410c:	0002      	movs	r2, r0
 800410e:	000b      	movs	r3, r1
 8004110:	0020      	movs	r0, r4
 8004112:	0029      	movs	r1, r5
 8004114:	f007 ff44 	bl	800bfa0 <atan2>
 8004118:	0002      	movs	r2, r0
 800411a:	000b      	movs	r3, r1
 800411c:	0011      	movs	r1, r2
 800411e:	6039      	str	r1, [r7, #0]
 8004120:	2180      	movs	r1, #128	; 0x80
 8004122:	0609      	lsls	r1, r1, #24
 8004124:	4059      	eors	r1, r3
 8004126:	6079      	str	r1, [r7, #4]
 8004128:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <CalcQuaternionToEuler+0x22c>)
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <CalcQuaternionToEuler+0x230>)
 800412c:	6838      	ldr	r0, [r7, #0]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	f7fe f862 	bl	80021f8 <__aeabi_dmul>
 8004134:	0002      	movs	r2, r0
 8004136:	000b      	movs	r3, r1
 8004138:	0010      	movs	r0, r2
 800413a:	0019      	movs	r1, r3
 800413c:	f7fe ff4c 	bl	8002fd8 <__aeabi_d2f>
 8004140:	1c02      	adds	r2, r0, #0
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	609a      	str	r2, [r3, #8]
}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	46bd      	mov	sp, r7
 800414a:	b007      	add	sp, #28
 800414c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	3fe00000 	.word	0x3fe00000
 8004154:	1a63c1f8 	.word	0x1a63c1f8
 8004158:	404ca5dc 	.word	0x404ca5dc
 800415c:	40568000 	.word	0x40568000

08004160 <CalcAccLinearToEuler>:
	eu_gyro_est->pitch += gyro_data[1]*SAMPLE_TIME_ICM/1000.0*RAD_2_DEG;
	eu_gyro_est->roll += gyro_data[0]*SAMPLE_TIME_ICM/1000.0*RAD_2_DEG;
}

void CalcAccLinearToEuler(float* accel_data, struct euler_angles* eu_acc_est)
{
 8004160:	b5b0      	push	{r4, r5, r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
	float pitch = atan(accel_data[0]/accel_data[2])* RAD_2_DEG;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3308      	adds	r3, #8
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1c19      	adds	r1, r3, #0
 8004176:	1c10      	adds	r0, r2, #0
 8004178:	f7fc fb80 	bl	800087c <__aeabi_fdiv>
 800417c:	1c03      	adds	r3, r0, #0
 800417e:	1c18      	adds	r0, r3, #0
 8004180:	f7fe fee2 	bl	8002f48 <__aeabi_f2d>
 8004184:	0002      	movs	r2, r0
 8004186:	000b      	movs	r3, r1
 8004188:	0010      	movs	r0, r2
 800418a:	0019      	movs	r1, r3
 800418c:	f007 fd54 	bl	800bc38 <atan>
 8004190:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <CalcAccLinearToEuler+0xe4>)
 8004192:	4b2d      	ldr	r3, [pc, #180]	; (8004248 <CalcAccLinearToEuler+0xe8>)
 8004194:	f7fe f830 	bl	80021f8 <__aeabi_dmul>
 8004198:	0002      	movs	r2, r0
 800419a:	000b      	movs	r3, r1
 800419c:	0010      	movs	r0, r2
 800419e:	0019      	movs	r1, r3
 80041a0:	f7fe ff1a 	bl	8002fd8 <__aeabi_d2f>
 80041a4:	1c03      	adds	r3, r0, #0
 80041a6:	617b      	str	r3, [r7, #20]
	float roll = atan(accel_data[1]/sqrt(pow(accel_data[0],2) + pow(accel_data[2],2))) * RAD_2_DEG;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3304      	adds	r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fe feca 	bl	8002f48 <__aeabi_f2d>
 80041b4:	0004      	movs	r4, r0
 80041b6:	000d      	movs	r5, r1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	1c18      	adds	r0, r3, #0
 80041be:	f7fe fec3 	bl	8002f48 <__aeabi_f2d>
 80041c2:	2200      	movs	r2, #0
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	05db      	lsls	r3, r3, #23
 80041c8:	f007 feee 	bl	800bfa8 <pow>
 80041cc:	6038      	str	r0, [r7, #0]
 80041ce:	6079      	str	r1, [r7, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3308      	adds	r3, #8
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	1c18      	adds	r0, r3, #0
 80041d8:	f7fe feb6 	bl	8002f48 <__aeabi_f2d>
 80041dc:	2200      	movs	r2, #0
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	05db      	lsls	r3, r3, #23
 80041e2:	f007 fee1 	bl	800bfa8 <pow>
 80041e6:	0002      	movs	r2, r0
 80041e8:	000b      	movs	r3, r1
 80041ea:	6838      	ldr	r0, [r7, #0]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	f7fd f893 	bl	8001318 <__aeabi_dadd>
 80041f2:	0002      	movs	r2, r0
 80041f4:	000b      	movs	r3, r1
 80041f6:	0010      	movs	r0, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	f007 ff8d 	bl	800c118 <sqrt>
 80041fe:	0002      	movs	r2, r0
 8004200:	000b      	movs	r3, r1
 8004202:	0020      	movs	r0, r4
 8004204:	0029      	movs	r1, r5
 8004206:	f7fd fbf1 	bl	80019ec <__aeabi_ddiv>
 800420a:	0002      	movs	r2, r0
 800420c:	000b      	movs	r3, r1
 800420e:	0010      	movs	r0, r2
 8004210:	0019      	movs	r1, r3
 8004212:	f007 fd11 	bl	800bc38 <atan>
 8004216:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <CalcAccLinearToEuler+0xe4>)
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <CalcAccLinearToEuler+0xe8>)
 800421a:	f7fd ffed 	bl	80021f8 <__aeabi_dmul>
 800421e:	0002      	movs	r2, r0
 8004220:	000b      	movs	r3, r1
 8004222:	0010      	movs	r0, r2
 8004224:	0019      	movs	r1, r3
 8004226:	f7fe fed7 	bl	8002fd8 <__aeabi_d2f>
 800422a:	1c03      	adds	r3, r0, #0
 800422c:	613b      	str	r3, [r7, #16]

	eu_acc_est->roll = roll;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	601a      	str	r2, [r3, #0]
	eu_acc_est->pitch = pitch;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	605a      	str	r2, [r3, #4]
}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	46bd      	mov	sp, r7
 800423e:	b006      	add	sp, #24
 8004240:	bdb0      	pop	{r4, r5, r7, pc}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	1a63c1f8 	.word	0x1a63c1f8
 8004248:	404ca5dc 	.word	0x404ca5dc

0800424c <CalcGyroQuaternion>:

void CalcGyroQuaternion(float* gyro_data, struct quaternion *q)
{
 800424c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800424e:	46c6      	mov	lr, r8
 8004250:	b500      	push	{lr}
 8004252:	b090      	sub	sp, #64	; 0x40
 8004254:	af06      	add	r7, sp, #24
 8004256:	6178      	str	r0, [r7, #20]
 8004258:	6139      	str	r1, [r7, #16]
	struct quaternion q_gyro_rate = {0, gyro_data[0], gyro_data[1], gyro_data[2]};
 800425a:	2518      	movs	r5, #24
 800425c:	197b      	adds	r3, r7, r5
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	197b      	adds	r3, r7, r5
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	197b      	adds	r3, r7, r5
 8004270:	609a      	str	r2, [r3, #8]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	197b      	adds	r3, r7, r5
 8004278:	60da      	str	r2, [r3, #12]

	q_gyro_rate = q_multiplication(*q, q_gyro_rate);
 800427a:	46a8      	mov	r8, r5
 800427c:	44b8      	add	r8, r7
 800427e:	46bc      	mov	ip, r7
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1979      	adds	r1, r7, r5
 8004284:	2204      	movs	r2, #4
 8004286:	446a      	add	r2, sp
 8004288:	c951      	ldmia	r1!, {r0, r4, r6}
 800428a:	c251      	stmia	r2!, {r0, r4, r6}
 800428c:	6809      	ldr	r1, [r1, #0]
 800428e:	6011      	str	r1, [r2, #0]
 8004290:	466a      	mov	r2, sp
 8004292:	68d9      	ldr	r1, [r3, #12]
 8004294:	6011      	str	r1, [r2, #0]
 8004296:	6819      	ldr	r1, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4660      	mov	r0, ip
 800429e:	f000 fa93 	bl	80047c8 <q_multiplication>
 80042a2:	003a      	movs	r2, r7
 80042a4:	4643      	mov	r3, r8
 80042a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042a8:	c313      	stmia	r3!, {r0, r1, r4}
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	601a      	str	r2, [r3, #0]
	q_scalar(&q_gyro_rate,0.5 * SAMPLE_TIME_ICM/1000.0);
 80042ae:	4a14      	ldr	r2, [pc, #80]	; (8004300 <CalcGyroQuaternion+0xb4>)
 80042b0:	197b      	adds	r3, r7, r5
 80042b2:	1c11      	adds	r1, r2, #0
 80042b4:	0018      	movs	r0, r3
 80042b6:	f000 fc0d 	bl	8004ad4 <q_scalar>
	*q = q_add(q_gyro_rate, *q);
 80042ba:	693c      	ldr	r4, [r7, #16]
 80042bc:	46bc      	mov	ip, r7
 80042be:	197b      	adds	r3, r7, r5
 80042c0:	6939      	ldr	r1, [r7, #16]
 80042c2:	2204      	movs	r2, #4
 80042c4:	446a      	add	r2, sp
 80042c6:	c961      	ldmia	r1!, {r0, r5, r6}
 80042c8:	c261      	stmia	r2!, {r0, r5, r6}
 80042ca:	6809      	ldr	r1, [r1, #0]
 80042cc:	6011      	str	r1, [r2, #0]
 80042ce:	466a      	mov	r2, sp
 80042d0:	68d9      	ldr	r1, [r3, #12]
 80042d2:	6011      	str	r1, [r2, #0]
 80042d4:	6819      	ldr	r1, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	4660      	mov	r0, ip
 80042dc:	f000 fc2b 	bl	8004b36 <q_add>
 80042e0:	003a      	movs	r2, r7
 80042e2:	0023      	movs	r3, r4
 80042e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042e6:	c313      	stmia	r3!, {r0, r1, r4}
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	601a      	str	r2, [r3, #0]
	q_normalize(q);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 fcab 	bl	8004c4a <q_normalize>
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b00a      	add	sp, #40	; 0x28
 80042fa:	bc80      	pop	{r7}
 80042fc:	46b8      	mov	r8, r7
 80042fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004300:	3c23d70a 	.word	0x3c23d70a

08004304 <MahonyFilter>:


void MahonyFilter(float *gyro_data, float* accel_data, struct quaternion *q)
{
 8004304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004306:	b093      	sub	sp, #76	; 0x4c
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
	float accelLength;
	float gyro_temp[3];
	float v[3] = {0,0,0};	//corrected frame vector
 8004310:	252c      	movs	r5, #44	; 0x2c
 8004312:	197b      	adds	r3, r7, r5
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	197b      	adds	r3, r7, r5
 800431a:	2200      	movs	r2, #0
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	197b      	adds	r3, r7, r5
 8004320:	2200      	movs	r2, #0
 8004322:	609a      	str	r2, [r3, #8]
	float e[3] = {0,0,0};	//error estimate vector
 8004324:	2620      	movs	r6, #32
 8004326:	19bb      	adds	r3, r7, r6
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	19bb      	adds	r3, r7, r6
 800432e:	2200      	movs	r2, #0
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	19bb      	adds	r3, r7, r6
 8004334:	2200      	movs	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
	float i[3] = {0,0,0};	//integral feedback vector
 8004338:	2414      	movs	r4, #20
 800433a:	193b      	adds	r3, r7, r4
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	193b      	adds	r3, r7, r4
 8004342:	2200      	movs	r2, #0
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	193b      	adds	r3, r7, r4
 8004348:	2200      	movs	r2, #0
 800434a:	609a      	str	r2, [r3, #8]

	accelLength = sqrt(accel_data[0]*accel_data[0] + accel_data[1]*accel_data[1] + accel_data[2]*accel_data[2]);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1c19      	adds	r1, r3, #0
 8004356:	1c10      	adds	r0, r2, #0
 8004358:	f7fc fc5a 	bl	8000c10 <__aeabi_fmul>
 800435c:	1c03      	adds	r3, r0, #0
 800435e:	1c1c      	adds	r4, r3, #0
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	3304      	adds	r3, #4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	3304      	adds	r3, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	1c19      	adds	r1, r3, #0
 800436e:	1c10      	adds	r0, r2, #0
 8004370:	f7fc fc4e 	bl	8000c10 <__aeabi_fmul>
 8004374:	1c03      	adds	r3, r0, #0
 8004376:	1c19      	adds	r1, r3, #0
 8004378:	1c20      	adds	r0, r4, #0
 800437a:	f7fc f8e3 	bl	8000544 <__aeabi_fadd>
 800437e:	1c03      	adds	r3, r0, #0
 8004380:	1c1c      	adds	r4, r3, #0
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3308      	adds	r3, #8
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	3308      	adds	r3, #8
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	1c19      	adds	r1, r3, #0
 8004390:	1c10      	adds	r0, r2, #0
 8004392:	f7fc fc3d 	bl	8000c10 <__aeabi_fmul>
 8004396:	1c03      	adds	r3, r0, #0
 8004398:	1c19      	adds	r1, r3, #0
 800439a:	1c20      	adds	r0, r4, #0
 800439c:	f7fc f8d2 	bl	8000544 <__aeabi_fadd>
 80043a0:	1c03      	adds	r3, r0, #0
 80043a2:	1c18      	adds	r0, r3, #0
 80043a4:	f7fe fdd0 	bl	8002f48 <__aeabi_f2d>
 80043a8:	0002      	movs	r2, r0
 80043aa:	000b      	movs	r3, r1
 80043ac:	0010      	movs	r0, r2
 80043ae:	0019      	movs	r1, r3
 80043b0:	f007 feb2 	bl	800c118 <sqrt>
 80043b4:	0002      	movs	r2, r0
 80043b6:	000b      	movs	r3, r1
 80043b8:	0010      	movs	r0, r2
 80043ba:	0019      	movs	r1, r3
 80043bc:	f7fe fe0c 	bl	8002fd8 <__aeabi_d2f>
 80043c0:	1c03      	adds	r3, r0, #0
 80043c2:	647b      	str	r3, [r7, #68]	; 0x44

	// Normalize accelerometer data
	accel_data[0] /= accelLength;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043ca:	1c18      	adds	r0, r3, #0
 80043cc:	f7fc fa56 	bl	800087c <__aeabi_fdiv>
 80043d0:	1c03      	adds	r3, r0, #0
 80043d2:	1c1a      	adds	r2, r3, #0
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	601a      	str	r2, [r3, #0]
	accel_data[1] /= accelLength;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	3304      	adds	r3, #4
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	1d1c      	adds	r4, r3, #4
 80043e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043e4:	1c10      	adds	r0, r2, #0
 80043e6:	f7fc fa49 	bl	800087c <__aeabi_fdiv>
 80043ea:	1c03      	adds	r3, r0, #0
 80043ec:	6023      	str	r3, [r4, #0]
	accel_data[2] /= accelLength;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3308      	adds	r3, #8
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	3308      	adds	r3, #8
 80043f8:	001c      	movs	r4, r3
 80043fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043fc:	1c10      	adds	r0, r2, #0
 80043fe:	f7fc fa3d 	bl	800087c <__aeabi_fdiv>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	6023      	str	r3, [r4, #0]

	// Estimated direction of gravity in the body frame
	v[0] = 2.0*(q->q2*q->q4 - q->q1 * q->q3);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	1c19      	adds	r1, r3, #0
 8004410:	1c10      	adds	r0, r2, #0
 8004412:	f7fc fbfd 	bl	8000c10 <__aeabi_fmul>
 8004416:	1c03      	adds	r3, r0, #0
 8004418:	1c1c      	adds	r4, r3, #0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	1c19      	adds	r1, r3, #0
 8004424:	1c10      	adds	r0, r2, #0
 8004426:	f7fc fbf3 	bl	8000c10 <__aeabi_fmul>
 800442a:	1c03      	adds	r3, r0, #0
 800442c:	1c19      	adds	r1, r3, #0
 800442e:	1c20      	adds	r0, r4, #0
 8004430:	f7fc fd08 	bl	8000e44 <__aeabi_fsub>
 8004434:	1c03      	adds	r3, r0, #0
 8004436:	1c19      	adds	r1, r3, #0
 8004438:	1c18      	adds	r0, r3, #0
 800443a:	f7fc f883 	bl	8000544 <__aeabi_fadd>
 800443e:	1c03      	adds	r3, r0, #0
 8004440:	1c1a      	adds	r2, r3, #0
 8004442:	197b      	adds	r3, r7, r5
 8004444:	601a      	str	r2, [r3, #0]
	v[1] = 2.0*(q->q1*q->q2 + q->q3 * q->q4);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	1c19      	adds	r1, r3, #0
 8004450:	1c10      	adds	r0, r2, #0
 8004452:	f7fc fbdd 	bl	8000c10 <__aeabi_fmul>
 8004456:	1c03      	adds	r3, r0, #0
 8004458:	1c1c      	adds	r4, r3, #0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	1c19      	adds	r1, r3, #0
 8004464:	1c10      	adds	r0, r2, #0
 8004466:	f7fc fbd3 	bl	8000c10 <__aeabi_fmul>
 800446a:	1c03      	adds	r3, r0, #0
 800446c:	1c19      	adds	r1, r3, #0
 800446e:	1c20      	adds	r0, r4, #0
 8004470:	f7fc f868 	bl	8000544 <__aeabi_fadd>
 8004474:	1c03      	adds	r3, r0, #0
 8004476:	1c19      	adds	r1, r3, #0
 8004478:	1c18      	adds	r0, r3, #0
 800447a:	f7fc f863 	bl	8000544 <__aeabi_fadd>
 800447e:	1c03      	adds	r3, r0, #0
 8004480:	1c1a      	adds	r2, r3, #0
 8004482:	197b      	adds	r3, r7, r5
 8004484:	605a      	str	r2, [r3, #4]
	v[2] = q->q1*q->q1 - q->q2*q->q2 -q->q3*q->q3 + q->q4 * q->q4;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	1c19      	adds	r1, r3, #0
 8004490:	1c10      	adds	r0, r2, #0
 8004492:	f7fc fbbd 	bl	8000c10 <__aeabi_fmul>
 8004496:	1c03      	adds	r3, r0, #0
 8004498:	1c1c      	adds	r4, r3, #0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	1c19      	adds	r1, r3, #0
 80044a4:	1c10      	adds	r0, r2, #0
 80044a6:	f7fc fbb3 	bl	8000c10 <__aeabi_fmul>
 80044aa:	1c03      	adds	r3, r0, #0
 80044ac:	1c19      	adds	r1, r3, #0
 80044ae:	1c20      	adds	r0, r4, #0
 80044b0:	f7fc fcc8 	bl	8000e44 <__aeabi_fsub>
 80044b4:	1c03      	adds	r3, r0, #0
 80044b6:	1c1c      	adds	r4, r3, #0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	1c19      	adds	r1, r3, #0
 80044c2:	1c10      	adds	r0, r2, #0
 80044c4:	f7fc fba4 	bl	8000c10 <__aeabi_fmul>
 80044c8:	1c03      	adds	r3, r0, #0
 80044ca:	1c19      	adds	r1, r3, #0
 80044cc:	1c20      	adds	r0, r4, #0
 80044ce:	f7fc fcb9 	bl	8000e44 <__aeabi_fsub>
 80044d2:	1c03      	adds	r3, r0, #0
 80044d4:	1c1c      	adds	r4, r3, #0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	1c19      	adds	r1, r3, #0
 80044e0:	1c10      	adds	r0, r2, #0
 80044e2:	f7fc fb95 	bl	8000c10 <__aeabi_fmul>
 80044e6:	1c03      	adds	r3, r0, #0
 80044e8:	1c19      	adds	r1, r3, #0
 80044ea:	1c20      	adds	r0, r4, #0
 80044ec:	f7fc f82a 	bl	8000544 <__aeabi_fadd>
 80044f0:	1c03      	adds	r3, r0, #0
 80044f2:	1c1a      	adds	r2, r3, #0
 80044f4:	197b      	adds	r3, r7, r5
 80044f6:	609a      	str	r2, [r3, #8]

	e[0] = (accel_data[1] * v[2] - accel_data[2] * v[1]);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	3304      	adds	r3, #4
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	197b      	adds	r3, r7, r5
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	1c19      	adds	r1, r3, #0
 8004504:	1c10      	adds	r0, r2, #0
 8004506:	f7fc fb83 	bl	8000c10 <__aeabi_fmul>
 800450a:	1c03      	adds	r3, r0, #0
 800450c:	1c1c      	adds	r4, r3, #0
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	3308      	adds	r3, #8
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	197b      	adds	r3, r7, r5
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	1c19      	adds	r1, r3, #0
 800451a:	1c10      	adds	r0, r2, #0
 800451c:	f7fc fb78 	bl	8000c10 <__aeabi_fmul>
 8004520:	1c03      	adds	r3, r0, #0
 8004522:	1c19      	adds	r1, r3, #0
 8004524:	1c20      	adds	r0, r4, #0
 8004526:	f7fc fc8d 	bl	8000e44 <__aeabi_fsub>
 800452a:	1c03      	adds	r3, r0, #0
 800452c:	1c1a      	adds	r2, r3, #0
 800452e:	19bb      	adds	r3, r7, r6
 8004530:	601a      	str	r2, [r3, #0]
	e[1] = (accel_data[2] * v[0] - accel_data[0] * v[2]);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3308      	adds	r3, #8
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	197b      	adds	r3, r7, r5
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	1c19      	adds	r1, r3, #0
 800453e:	1c10      	adds	r0, r2, #0
 8004540:	f7fc fb66 	bl	8000c10 <__aeabi_fmul>
 8004544:	1c03      	adds	r3, r0, #0
 8004546:	1c1c      	adds	r4, r3, #0
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	197b      	adds	r3, r7, r5
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	1c19      	adds	r1, r3, #0
 8004552:	1c10      	adds	r0, r2, #0
 8004554:	f7fc fb5c 	bl	8000c10 <__aeabi_fmul>
 8004558:	1c03      	adds	r3, r0, #0
 800455a:	1c19      	adds	r1, r3, #0
 800455c:	1c20      	adds	r0, r4, #0
 800455e:	f7fc fc71 	bl	8000e44 <__aeabi_fsub>
 8004562:	1c03      	adds	r3, r0, #0
 8004564:	1c1a      	adds	r2, r3, #0
 8004566:	19bb      	adds	r3, r7, r6
 8004568:	605a      	str	r2, [r3, #4]
	e[2] = (accel_data[0] * v[1] - accel_data[1] * v[0]);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	197b      	adds	r3, r7, r5
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	1c19      	adds	r1, r3, #0
 8004574:	1c10      	adds	r0, r2, #0
 8004576:	f7fc fb4b 	bl	8000c10 <__aeabi_fmul>
 800457a:	1c03      	adds	r3, r0, #0
 800457c:	1c1c      	adds	r4, r3, #0
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	3304      	adds	r3, #4
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	197b      	adds	r3, r7, r5
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	1c19      	adds	r1, r3, #0
 800458a:	1c10      	adds	r0, r2, #0
 800458c:	f7fc fb40 	bl	8000c10 <__aeabi_fmul>
 8004590:	1c03      	adds	r3, r0, #0
 8004592:	1c19      	adds	r1, r3, #0
 8004594:	1c20      	adds	r0, r4, #0
 8004596:	f7fc fc55 	bl	8000e44 <__aeabi_fsub>
 800459a:	1c03      	adds	r3, r0, #0
 800459c:	1c1a      	adds	r2, r3, #0
 800459e:	19bb      	adds	r3, r7, r6
 80045a0:	609a      	str	r2, [r3, #8]

	// accumulate integral error
	if (k_i > 0.0)
 80045a2:	4b52      	ldr	r3, [pc, #328]	; (80046ec <MahonyFilter+0x3e8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2100      	movs	r1, #0
 80045a8:	1c18      	adds	r0, r3, #0
 80045aa:	f7fb ff9f 	bl	80004ec <__aeabi_fcmpgt>
 80045ae:	1e03      	subs	r3, r0, #0
 80045b0:	d024      	beq.n	80045fc <MahonyFilter+0x2f8>
	{
		i[0] += e[0];
 80045b2:	2414      	movs	r4, #20
 80045b4:	193b      	adds	r3, r7, r4
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	19bb      	adds	r3, r7, r6
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	1c19      	adds	r1, r3, #0
 80045be:	1c10      	adds	r0, r2, #0
 80045c0:	f7fb ffc0 	bl	8000544 <__aeabi_fadd>
 80045c4:	1c03      	adds	r3, r0, #0
 80045c6:	1c1a      	adds	r2, r3, #0
 80045c8:	193b      	adds	r3, r7, r4
 80045ca:	601a      	str	r2, [r3, #0]
		i[1] += e[1];
 80045cc:	193b      	adds	r3, r7, r4
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	19bb      	adds	r3, r7, r6
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	1c19      	adds	r1, r3, #0
 80045d6:	1c10      	adds	r0, r2, #0
 80045d8:	f7fb ffb4 	bl	8000544 <__aeabi_fadd>
 80045dc:	1c03      	adds	r3, r0, #0
 80045de:	1c1a      	adds	r2, r3, #0
 80045e0:	193b      	adds	r3, r7, r4
 80045e2:	605a      	str	r2, [r3, #4]
		i[2] += e[2];
 80045e4:	193b      	adds	r3, r7, r4
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	19bb      	adds	r3, r7, r6
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	1c19      	adds	r1, r3, #0
 80045ee:	1c10      	adds	r0, r2, #0
 80045f0:	f7fb ffa8 	bl	8000544 <__aeabi_fadd>
 80045f4:	1c03      	adds	r3, r0, #0
 80045f6:	1c1a      	adds	r2, r3, #0
 80045f8:	193b      	adds	r3, r7, r4
 80045fa:	609a      	str	r2, [r3, #8]
	}

	// Proportionate feedback
	gyro_temp[0] = gyro_data[0] + k_p * e[0] + k_i*i[0];
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681c      	ldr	r4, [r3, #0]
 8004600:	2620      	movs	r6, #32
 8004602:	19bb      	adds	r3, r7, r6
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4b3a      	ldr	r3, [pc, #232]	; (80046f0 <MahonyFilter+0x3ec>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1c19      	adds	r1, r3, #0
 800460c:	1c10      	adds	r0, r2, #0
 800460e:	f7fc faff 	bl	8000c10 <__aeabi_fmul>
 8004612:	1c03      	adds	r3, r0, #0
 8004614:	1c19      	adds	r1, r3, #0
 8004616:	1c20      	adds	r0, r4, #0
 8004618:	f7fb ff94 	bl	8000544 <__aeabi_fadd>
 800461c:	1c03      	adds	r3, r0, #0
 800461e:	1c1c      	adds	r4, r3, #0
 8004620:	2314      	movs	r3, #20
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b31      	ldr	r3, [pc, #196]	; (80046ec <MahonyFilter+0x3e8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	1c19      	adds	r1, r3, #0
 800462c:	1c10      	adds	r0, r2, #0
 800462e:	f7fc faef 	bl	8000c10 <__aeabi_fmul>
 8004632:	1c03      	adds	r3, r0, #0
 8004634:	1c19      	adds	r1, r3, #0
 8004636:	1c20      	adds	r0, r4, #0
 8004638:	f7fb ff84 	bl	8000544 <__aeabi_fadd>
 800463c:	1c03      	adds	r3, r0, #0
 800463e:	1c1a      	adds	r2, r3, #0
 8004640:	2538      	movs	r5, #56	; 0x38
 8004642:	197b      	adds	r3, r7, r5
 8004644:	601a      	str	r2, [r3, #0]
	gyro_temp[1] = gyro_data[1] + k_p * e[1] + k_i*i[1];
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3304      	adds	r3, #4
 800464a:	681c      	ldr	r4, [r3, #0]
 800464c:	19bb      	adds	r3, r7, r6
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <MahonyFilter+0x3ec>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	1c19      	adds	r1, r3, #0
 8004656:	1c10      	adds	r0, r2, #0
 8004658:	f7fc fada 	bl	8000c10 <__aeabi_fmul>
 800465c:	1c03      	adds	r3, r0, #0
 800465e:	1c19      	adds	r1, r3, #0
 8004660:	1c20      	adds	r0, r4, #0
 8004662:	f7fb ff6f 	bl	8000544 <__aeabi_fadd>
 8004666:	1c03      	adds	r3, r0, #0
 8004668:	1c1c      	adds	r4, r3, #0
 800466a:	2314      	movs	r3, #20
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <MahonyFilter+0x3e8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	1c19      	adds	r1, r3, #0
 8004676:	1c10      	adds	r0, r2, #0
 8004678:	f7fc faca 	bl	8000c10 <__aeabi_fmul>
 800467c:	1c03      	adds	r3, r0, #0
 800467e:	1c19      	adds	r1, r3, #0
 8004680:	1c20      	adds	r0, r4, #0
 8004682:	f7fb ff5f 	bl	8000544 <__aeabi_fadd>
 8004686:	1c03      	adds	r3, r0, #0
 8004688:	1c1a      	adds	r2, r3, #0
 800468a:	197b      	adds	r3, r7, r5
 800468c:	605a      	str	r2, [r3, #4]
	gyro_temp[2] = gyro_data[2] + k_p * e[2] + k_i*i[2];
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3308      	adds	r3, #8
 8004692:	681c      	ldr	r4, [r3, #0]
 8004694:	19bb      	adds	r3, r7, r6
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <MahonyFilter+0x3ec>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	1c19      	adds	r1, r3, #0
 800469e:	1c10      	adds	r0, r2, #0
 80046a0:	f7fc fab6 	bl	8000c10 <__aeabi_fmul>
 80046a4:	1c03      	adds	r3, r0, #0
 80046a6:	1c19      	adds	r1, r3, #0
 80046a8:	1c20      	adds	r0, r4, #0
 80046aa:	f7fb ff4b 	bl	8000544 <__aeabi_fadd>
 80046ae:	1c03      	adds	r3, r0, #0
 80046b0:	1c1c      	adds	r4, r3, #0
 80046b2:	2314      	movs	r3, #20
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <MahonyFilter+0x3e8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	1c19      	adds	r1, r3, #0
 80046be:	1c10      	adds	r0, r2, #0
 80046c0:	f7fc faa6 	bl	8000c10 <__aeabi_fmul>
 80046c4:	1c03      	adds	r3, r0, #0
 80046c6:	1c19      	adds	r1, r3, #0
 80046c8:	1c20      	adds	r0, r4, #0
 80046ca:	f7fb ff3b 	bl	8000544 <__aeabi_fadd>
 80046ce:	1c03      	adds	r3, r0, #0
 80046d0:	1c1a      	adds	r2, r3, #0
 80046d2:	197b      	adds	r3, r7, r5
 80046d4:	609a      	str	r2, [r3, #8]

	CalcGyroQuaternion(gyro_temp, q);
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	197b      	adds	r3, r7, r5
 80046da:	0011      	movs	r1, r2
 80046dc:	0018      	movs	r0, r3
 80046de:	f7ff fdb5 	bl	800424c <CalcGyroQuaternion>
}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b013      	add	sp, #76	; 0x4c
 80046e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	20000000 	.word	0x20000000
 80046f0:	20000004 	.word	0x20000004

080046f4 <GyroLowPassFilter>:

void GyroLowPassFilter(float *gyro_data, float* prev_filt, float* filt, float a)
{
 80046f4:	b5b0      	push	{r4, r5, r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
	// Calculating new high-pass filtered data
	filt[0] = prev_filt[0] + a*(gyro_data[0] - prev_filt[0]);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	681c      	ldr	r4, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	1c19      	adds	r1, r3, #0
 8004710:	1c10      	adds	r0, r2, #0
 8004712:	f7fc fb97 	bl	8000e44 <__aeabi_fsub>
 8004716:	1c03      	adds	r3, r0, #0
 8004718:	6839      	ldr	r1, [r7, #0]
 800471a:	1c18      	adds	r0, r3, #0
 800471c:	f7fc fa78 	bl	8000c10 <__aeabi_fmul>
 8004720:	1c03      	adds	r3, r0, #0
 8004722:	1c19      	adds	r1, r3, #0
 8004724:	1c20      	adds	r0, r4, #0
 8004726:	f7fb ff0d 	bl	8000544 <__aeabi_fadd>
 800472a:	1c03      	adds	r3, r0, #0
 800472c:	1c1a      	adds	r2, r3, #0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	601a      	str	r2, [r3, #0]
	filt[1] = prev_filt[1] + a*(gyro_data[1] - prev_filt[1]);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	3304      	adds	r3, #4
 8004736:	681d      	ldr	r5, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3304      	adds	r3, #4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	3304      	adds	r3, #4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	1c19      	adds	r1, r3, #0
 8004746:	1c10      	adds	r0, r2, #0
 8004748:	f7fc fb7c 	bl	8000e44 <__aeabi_fsub>
 800474c:	1c03      	adds	r3, r0, #0
 800474e:	6839      	ldr	r1, [r7, #0]
 8004750:	1c18      	adds	r0, r3, #0
 8004752:	f7fc fa5d 	bl	8000c10 <__aeabi_fmul>
 8004756:	1c03      	adds	r3, r0, #0
 8004758:	1c1a      	adds	r2, r3, #0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	1d1c      	adds	r4, r3, #4
 800475e:	1c11      	adds	r1, r2, #0
 8004760:	1c28      	adds	r0, r5, #0
 8004762:	f7fb feef 	bl	8000544 <__aeabi_fadd>
 8004766:	1c03      	adds	r3, r0, #0
 8004768:	6023      	str	r3, [r4, #0]
	filt[2] = prev_filt[2] + a*(gyro_data[2] - prev_filt[2]);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	3308      	adds	r3, #8
 800476e:	681d      	ldr	r5, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3308      	adds	r3, #8
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3308      	adds	r3, #8
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	1c19      	adds	r1, r3, #0
 800477e:	1c10      	adds	r0, r2, #0
 8004780:	f7fc fb60 	bl	8000e44 <__aeabi_fsub>
 8004784:	1c03      	adds	r3, r0, #0
 8004786:	6839      	ldr	r1, [r7, #0]
 8004788:	1c18      	adds	r0, r3, #0
 800478a:	f7fc fa41 	bl	8000c10 <__aeabi_fmul>
 800478e:	1c03      	adds	r3, r0, #0
 8004790:	1c1a      	adds	r2, r3, #0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3308      	adds	r3, #8
 8004796:	001c      	movs	r4, r3
 8004798:	1c11      	adds	r1, r2, #0
 800479a:	1c28      	adds	r0, r5, #0
 800479c:	f7fb fed2 	bl	8000544 <__aeabi_fadd>
 80047a0:	1c03      	adds	r3, r0, #0
 80047a2:	6023      	str	r3, [r4, #0]

	prev_filt[0] = filt[0];
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	601a      	str	r2, [r3, #0]
	prev_filt[1] = filt[1];
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	3304      	adds	r3, #4
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6852      	ldr	r2, [r2, #4]
 80047b4:	601a      	str	r2, [r3, #0]
	prev_filt[2] = filt[2];
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	3308      	adds	r3, #8
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6892      	ldr	r2, [r2, #8]
 80047be:	601a      	str	r2, [r3, #0]
}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b004      	add	sp, #16
 80047c6:	bdb0      	pop	{r4, r5, r7, pc}

080047c8 <q_multiplication>:
	prev_filt[1] = filt[1];
	prev_filt[2] = filt[2];
}

struct quaternion q_multiplication(struct quaternion quad_left, struct quaternion quad_right)
{
 80047c8:	b084      	sub	sp, #16
 80047ca:	b5b0      	push	{r4, r5, r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	2004      	movs	r0, #4
 80047d4:	2428      	movs	r4, #40	; 0x28
 80047d6:	46a4      	mov	ip, r4
 80047d8:	44bc      	add	ip, r7
 80047da:	4460      	add	r0, ip
 80047dc:	6001      	str	r1, [r0, #0]
 80047de:	6042      	str	r2, [r0, #4]
 80047e0:	6083      	str	r3, [r0, #8]
	struct quaternion result = {0,0,0,0};
 80047e2:	2508      	movs	r5, #8
 80047e4:	197b      	adds	r3, r7, r5
 80047e6:	0018      	movs	r0, r3
 80047e8:	2310      	movs	r3, #16
 80047ea:	001a      	movs	r2, r3
 80047ec:	2100      	movs	r1, #0
 80047ee:	f004 facf 	bl	8008d90 <memset>
    result.q1 = (quad_left.q1 * quad_right.q1) - (quad_left.q2 * quad_right.q2) - (quad_left.q3 * quad_right.q3) - (quad_left.q4 * quad_right.q4);
 80047f2:	2304      	movs	r3, #4
 80047f4:	2228      	movs	r2, #40	; 0x28
 80047f6:	4694      	mov	ip, r2
 80047f8:	44bc      	add	ip, r7
 80047fa:	4463      	add	r3, ip
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	2314      	movs	r3, #20
 8004800:	2128      	movs	r1, #40	; 0x28
 8004802:	468c      	mov	ip, r1
 8004804:	44bc      	add	ip, r7
 8004806:	4463      	add	r3, ip
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	1c19      	adds	r1, r3, #0
 800480c:	1c10      	adds	r0, r2, #0
 800480e:	f7fc f9ff 	bl	8000c10 <__aeabi_fmul>
 8004812:	1c03      	adds	r3, r0, #0
 8004814:	1c1c      	adds	r4, r3, #0
 8004816:	2304      	movs	r3, #4
 8004818:	2228      	movs	r2, #40	; 0x28
 800481a:	4694      	mov	ip, r2
 800481c:	44bc      	add	ip, r7
 800481e:	4463      	add	r3, ip
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	2314      	movs	r3, #20
 8004824:	2128      	movs	r1, #40	; 0x28
 8004826:	468c      	mov	ip, r1
 8004828:	44bc      	add	ip, r7
 800482a:	4463      	add	r3, ip
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	1c19      	adds	r1, r3, #0
 8004830:	1c10      	adds	r0, r2, #0
 8004832:	f7fc f9ed 	bl	8000c10 <__aeabi_fmul>
 8004836:	1c03      	adds	r3, r0, #0
 8004838:	1c19      	adds	r1, r3, #0
 800483a:	1c20      	adds	r0, r4, #0
 800483c:	f7fc fb02 	bl	8000e44 <__aeabi_fsub>
 8004840:	1c03      	adds	r3, r0, #0
 8004842:	1c1c      	adds	r4, r3, #0
 8004844:	2304      	movs	r3, #4
 8004846:	2228      	movs	r2, #40	; 0x28
 8004848:	4694      	mov	ip, r2
 800484a:	44bc      	add	ip, r7
 800484c:	4463      	add	r3, ip
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	2314      	movs	r3, #20
 8004852:	2128      	movs	r1, #40	; 0x28
 8004854:	468c      	mov	ip, r1
 8004856:	44bc      	add	ip, r7
 8004858:	4463      	add	r3, ip
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	1c19      	adds	r1, r3, #0
 800485e:	1c10      	adds	r0, r2, #0
 8004860:	f7fc f9d6 	bl	8000c10 <__aeabi_fmul>
 8004864:	1c03      	adds	r3, r0, #0
 8004866:	1c19      	adds	r1, r3, #0
 8004868:	1c20      	adds	r0, r4, #0
 800486a:	f7fc faeb 	bl	8000e44 <__aeabi_fsub>
 800486e:	1c03      	adds	r3, r0, #0
 8004870:	1c1c      	adds	r4, r3, #0
 8004872:	2304      	movs	r3, #4
 8004874:	2228      	movs	r2, #40	; 0x28
 8004876:	4694      	mov	ip, r2
 8004878:	44bc      	add	ip, r7
 800487a:	4463      	add	r3, ip
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	2314      	movs	r3, #20
 8004880:	2128      	movs	r1, #40	; 0x28
 8004882:	468c      	mov	ip, r1
 8004884:	44bc      	add	ip, r7
 8004886:	4463      	add	r3, ip
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	1c19      	adds	r1, r3, #0
 800488c:	1c10      	adds	r0, r2, #0
 800488e:	f7fc f9bf 	bl	8000c10 <__aeabi_fmul>
 8004892:	1c03      	adds	r3, r0, #0
 8004894:	1c19      	adds	r1, r3, #0
 8004896:	1c20      	adds	r0, r4, #0
 8004898:	f7fc fad4 	bl	8000e44 <__aeabi_fsub>
 800489c:	1c03      	adds	r3, r0, #0
 800489e:	1c1a      	adds	r2, r3, #0
 80048a0:	197b      	adds	r3, r7, r5
 80048a2:	601a      	str	r2, [r3, #0]
    result.q2 = (quad_left.q1 * quad_right.q2) + (quad_left.q2 * quad_right.q1) + (quad_left.q3 * quad_right.q4) - (quad_left.q4 * quad_right.q3);
 80048a4:	2304      	movs	r3, #4
 80048a6:	2228      	movs	r2, #40	; 0x28
 80048a8:	4694      	mov	ip, r2
 80048aa:	44bc      	add	ip, r7
 80048ac:	4463      	add	r3, ip
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	2314      	movs	r3, #20
 80048b2:	2128      	movs	r1, #40	; 0x28
 80048b4:	468c      	mov	ip, r1
 80048b6:	44bc      	add	ip, r7
 80048b8:	4463      	add	r3, ip
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	1c19      	adds	r1, r3, #0
 80048be:	1c10      	adds	r0, r2, #0
 80048c0:	f7fc f9a6 	bl	8000c10 <__aeabi_fmul>
 80048c4:	1c03      	adds	r3, r0, #0
 80048c6:	1c1c      	adds	r4, r3, #0
 80048c8:	2304      	movs	r3, #4
 80048ca:	2228      	movs	r2, #40	; 0x28
 80048cc:	4694      	mov	ip, r2
 80048ce:	44bc      	add	ip, r7
 80048d0:	4463      	add	r3, ip
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	2314      	movs	r3, #20
 80048d6:	2128      	movs	r1, #40	; 0x28
 80048d8:	468c      	mov	ip, r1
 80048da:	44bc      	add	ip, r7
 80048dc:	4463      	add	r3, ip
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	1c19      	adds	r1, r3, #0
 80048e2:	1c10      	adds	r0, r2, #0
 80048e4:	f7fc f994 	bl	8000c10 <__aeabi_fmul>
 80048e8:	1c03      	adds	r3, r0, #0
 80048ea:	1c19      	adds	r1, r3, #0
 80048ec:	1c20      	adds	r0, r4, #0
 80048ee:	f7fb fe29 	bl	8000544 <__aeabi_fadd>
 80048f2:	1c03      	adds	r3, r0, #0
 80048f4:	1c1c      	adds	r4, r3, #0
 80048f6:	2304      	movs	r3, #4
 80048f8:	2228      	movs	r2, #40	; 0x28
 80048fa:	4694      	mov	ip, r2
 80048fc:	44bc      	add	ip, r7
 80048fe:	4463      	add	r3, ip
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	2314      	movs	r3, #20
 8004904:	2128      	movs	r1, #40	; 0x28
 8004906:	468c      	mov	ip, r1
 8004908:	44bc      	add	ip, r7
 800490a:	4463      	add	r3, ip
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	1c19      	adds	r1, r3, #0
 8004910:	1c10      	adds	r0, r2, #0
 8004912:	f7fc f97d 	bl	8000c10 <__aeabi_fmul>
 8004916:	1c03      	adds	r3, r0, #0
 8004918:	1c19      	adds	r1, r3, #0
 800491a:	1c20      	adds	r0, r4, #0
 800491c:	f7fb fe12 	bl	8000544 <__aeabi_fadd>
 8004920:	1c03      	adds	r3, r0, #0
 8004922:	1c1c      	adds	r4, r3, #0
 8004924:	2304      	movs	r3, #4
 8004926:	2228      	movs	r2, #40	; 0x28
 8004928:	4694      	mov	ip, r2
 800492a:	44bc      	add	ip, r7
 800492c:	4463      	add	r3, ip
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	2314      	movs	r3, #20
 8004932:	2128      	movs	r1, #40	; 0x28
 8004934:	468c      	mov	ip, r1
 8004936:	44bc      	add	ip, r7
 8004938:	4463      	add	r3, ip
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	1c19      	adds	r1, r3, #0
 800493e:	1c10      	adds	r0, r2, #0
 8004940:	f7fc f966 	bl	8000c10 <__aeabi_fmul>
 8004944:	1c03      	adds	r3, r0, #0
 8004946:	1c19      	adds	r1, r3, #0
 8004948:	1c20      	adds	r0, r4, #0
 800494a:	f7fc fa7b 	bl	8000e44 <__aeabi_fsub>
 800494e:	1c03      	adds	r3, r0, #0
 8004950:	1c1a      	adds	r2, r3, #0
 8004952:	197b      	adds	r3, r7, r5
 8004954:	605a      	str	r2, [r3, #4]
    result.q3 = (quad_left.q1 * quad_right.q3) - (quad_left.q2 * quad_right.q4) + (quad_left.q3 * quad_right.q1) + (quad_left.q4 * quad_right.q2);
 8004956:	2304      	movs	r3, #4
 8004958:	2228      	movs	r2, #40	; 0x28
 800495a:	4694      	mov	ip, r2
 800495c:	44bc      	add	ip, r7
 800495e:	4463      	add	r3, ip
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	2314      	movs	r3, #20
 8004964:	2128      	movs	r1, #40	; 0x28
 8004966:	468c      	mov	ip, r1
 8004968:	44bc      	add	ip, r7
 800496a:	4463      	add	r3, ip
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	1c19      	adds	r1, r3, #0
 8004970:	1c10      	adds	r0, r2, #0
 8004972:	f7fc f94d 	bl	8000c10 <__aeabi_fmul>
 8004976:	1c03      	adds	r3, r0, #0
 8004978:	1c1c      	adds	r4, r3, #0
 800497a:	2304      	movs	r3, #4
 800497c:	2228      	movs	r2, #40	; 0x28
 800497e:	4694      	mov	ip, r2
 8004980:	44bc      	add	ip, r7
 8004982:	4463      	add	r3, ip
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	2314      	movs	r3, #20
 8004988:	2128      	movs	r1, #40	; 0x28
 800498a:	468c      	mov	ip, r1
 800498c:	44bc      	add	ip, r7
 800498e:	4463      	add	r3, ip
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	1c19      	adds	r1, r3, #0
 8004994:	1c10      	adds	r0, r2, #0
 8004996:	f7fc f93b 	bl	8000c10 <__aeabi_fmul>
 800499a:	1c03      	adds	r3, r0, #0
 800499c:	1c19      	adds	r1, r3, #0
 800499e:	1c20      	adds	r0, r4, #0
 80049a0:	f7fc fa50 	bl	8000e44 <__aeabi_fsub>
 80049a4:	1c03      	adds	r3, r0, #0
 80049a6:	1c1c      	adds	r4, r3, #0
 80049a8:	2304      	movs	r3, #4
 80049aa:	2228      	movs	r2, #40	; 0x28
 80049ac:	4694      	mov	ip, r2
 80049ae:	44bc      	add	ip, r7
 80049b0:	4463      	add	r3, ip
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	2314      	movs	r3, #20
 80049b6:	2128      	movs	r1, #40	; 0x28
 80049b8:	468c      	mov	ip, r1
 80049ba:	44bc      	add	ip, r7
 80049bc:	4463      	add	r3, ip
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1c19      	adds	r1, r3, #0
 80049c2:	1c10      	adds	r0, r2, #0
 80049c4:	f7fc f924 	bl	8000c10 <__aeabi_fmul>
 80049c8:	1c03      	adds	r3, r0, #0
 80049ca:	1c19      	adds	r1, r3, #0
 80049cc:	1c20      	adds	r0, r4, #0
 80049ce:	f7fb fdb9 	bl	8000544 <__aeabi_fadd>
 80049d2:	1c03      	adds	r3, r0, #0
 80049d4:	1c1c      	adds	r4, r3, #0
 80049d6:	2304      	movs	r3, #4
 80049d8:	2228      	movs	r2, #40	; 0x28
 80049da:	4694      	mov	ip, r2
 80049dc:	44bc      	add	ip, r7
 80049de:	4463      	add	r3, ip
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	2314      	movs	r3, #20
 80049e4:	2128      	movs	r1, #40	; 0x28
 80049e6:	468c      	mov	ip, r1
 80049e8:	44bc      	add	ip, r7
 80049ea:	4463      	add	r3, ip
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	1c19      	adds	r1, r3, #0
 80049f0:	1c10      	adds	r0, r2, #0
 80049f2:	f7fc f90d 	bl	8000c10 <__aeabi_fmul>
 80049f6:	1c03      	adds	r3, r0, #0
 80049f8:	1c19      	adds	r1, r3, #0
 80049fa:	1c20      	adds	r0, r4, #0
 80049fc:	f7fb fda2 	bl	8000544 <__aeabi_fadd>
 8004a00:	1c03      	adds	r3, r0, #0
 8004a02:	1c1a      	adds	r2, r3, #0
 8004a04:	197b      	adds	r3, r7, r5
 8004a06:	609a      	str	r2, [r3, #8]
    result.q4 = (quad_left.q1 * quad_right.q4) + (quad_left.q2 * quad_right.q3) - (quad_left.q3 * quad_right.q2) + (quad_left.q4 * quad_right.q1);
 8004a08:	2304      	movs	r3, #4
 8004a0a:	2228      	movs	r2, #40	; 0x28
 8004a0c:	4694      	mov	ip, r2
 8004a0e:	44bc      	add	ip, r7
 8004a10:	4463      	add	r3, ip
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	2314      	movs	r3, #20
 8004a16:	2128      	movs	r1, #40	; 0x28
 8004a18:	468c      	mov	ip, r1
 8004a1a:	44bc      	add	ip, r7
 8004a1c:	4463      	add	r3, ip
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	1c19      	adds	r1, r3, #0
 8004a22:	1c10      	adds	r0, r2, #0
 8004a24:	f7fc f8f4 	bl	8000c10 <__aeabi_fmul>
 8004a28:	1c03      	adds	r3, r0, #0
 8004a2a:	1c1c      	adds	r4, r3, #0
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	2228      	movs	r2, #40	; 0x28
 8004a30:	4694      	mov	ip, r2
 8004a32:	44bc      	add	ip, r7
 8004a34:	4463      	add	r3, ip
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	2314      	movs	r3, #20
 8004a3a:	2128      	movs	r1, #40	; 0x28
 8004a3c:	468c      	mov	ip, r1
 8004a3e:	44bc      	add	ip, r7
 8004a40:	4463      	add	r3, ip
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	1c19      	adds	r1, r3, #0
 8004a46:	1c10      	adds	r0, r2, #0
 8004a48:	f7fc f8e2 	bl	8000c10 <__aeabi_fmul>
 8004a4c:	1c03      	adds	r3, r0, #0
 8004a4e:	1c19      	adds	r1, r3, #0
 8004a50:	1c20      	adds	r0, r4, #0
 8004a52:	f7fb fd77 	bl	8000544 <__aeabi_fadd>
 8004a56:	1c03      	adds	r3, r0, #0
 8004a58:	1c1c      	adds	r4, r3, #0
 8004a5a:	2304      	movs	r3, #4
 8004a5c:	2228      	movs	r2, #40	; 0x28
 8004a5e:	4694      	mov	ip, r2
 8004a60:	44bc      	add	ip, r7
 8004a62:	4463      	add	r3, ip
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	2314      	movs	r3, #20
 8004a68:	2128      	movs	r1, #40	; 0x28
 8004a6a:	468c      	mov	ip, r1
 8004a6c:	44bc      	add	ip, r7
 8004a6e:	4463      	add	r3, ip
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	1c19      	adds	r1, r3, #0
 8004a74:	1c10      	adds	r0, r2, #0
 8004a76:	f7fc f8cb 	bl	8000c10 <__aeabi_fmul>
 8004a7a:	1c03      	adds	r3, r0, #0
 8004a7c:	1c19      	adds	r1, r3, #0
 8004a7e:	1c20      	adds	r0, r4, #0
 8004a80:	f7fc f9e0 	bl	8000e44 <__aeabi_fsub>
 8004a84:	1c03      	adds	r3, r0, #0
 8004a86:	1c1c      	adds	r4, r3, #0
 8004a88:	2304      	movs	r3, #4
 8004a8a:	2228      	movs	r2, #40	; 0x28
 8004a8c:	4694      	mov	ip, r2
 8004a8e:	44bc      	add	ip, r7
 8004a90:	4463      	add	r3, ip
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	2314      	movs	r3, #20
 8004a96:	2128      	movs	r1, #40	; 0x28
 8004a98:	468c      	mov	ip, r1
 8004a9a:	44bc      	add	ip, r7
 8004a9c:	4463      	add	r3, ip
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	1c19      	adds	r1, r3, #0
 8004aa2:	1c10      	adds	r0, r2, #0
 8004aa4:	f7fc f8b4 	bl	8000c10 <__aeabi_fmul>
 8004aa8:	1c03      	adds	r3, r0, #0
 8004aaa:	1c19      	adds	r1, r3, #0
 8004aac:	1c20      	adds	r0, r4, #0
 8004aae:	f7fb fd49 	bl	8000544 <__aeabi_fadd>
 8004ab2:	1c03      	adds	r3, r0, #0
 8004ab4:	1c1a      	adds	r2, r3, #0
 8004ab6:	197b      	adds	r3, r7, r5
 8004ab8:	60da      	str	r2, [r3, #12]
    return result;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	197a      	adds	r2, r7, r5
 8004abe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004ac0:	c313      	stmia	r3!, {r0, r1, r4}
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	601a      	str	r2, [r3, #0]
}
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b006      	add	sp, #24
 8004acc:	bcb0      	pop	{r4, r5, r7}
 8004ace:	bc08      	pop	{r3}
 8004ad0:	b004      	add	sp, #16
 8004ad2:	4718      	bx	r3

08004ad4 <q_scalar>:

void q_scalar(struct quaternion *quad, float s)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
	quad->q1 *= s;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	1c18      	adds	r0, r3, #0
 8004ae6:	f7fc f893 	bl	8000c10 <__aeabi_fmul>
 8004aea:	1c03      	adds	r3, r0, #0
 8004aec:	1c1a      	adds	r2, r3, #0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
	quad->q2 *= s;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	6839      	ldr	r1, [r7, #0]
 8004af8:	1c18      	adds	r0, r3, #0
 8004afa:	f7fc f889 	bl	8000c10 <__aeabi_fmul>
 8004afe:	1c03      	adds	r3, r0, #0
 8004b00:	1c1a      	adds	r2, r3, #0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	605a      	str	r2, [r3, #4]
	quad->q3 *= s;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	6839      	ldr	r1, [r7, #0]
 8004b0c:	1c18      	adds	r0, r3, #0
 8004b0e:	f7fc f87f 	bl	8000c10 <__aeabi_fmul>
 8004b12:	1c03      	adds	r3, r0, #0
 8004b14:	1c1a      	adds	r2, r3, #0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	609a      	str	r2, [r3, #8]
	quad->q4 *= s;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	6839      	ldr	r1, [r7, #0]
 8004b20:	1c18      	adds	r0, r3, #0
 8004b22:	f7fc f875 	bl	8000c10 <__aeabi_fmul>
 8004b26:	1c03      	adds	r3, r0, #0
 8004b28:	1c1a      	adds	r2, r3, #0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60da      	str	r2, [r3, #12]
}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b002      	add	sp, #8
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <q_add>:

struct quaternion q_add(struct quaternion quad_left, struct quaternion quad_right)
{
 8004b36:	b084      	sub	sp, #16
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	46c6      	mov	lr, r8
 8004b3c:	b500      	push	{lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	2004      	movs	r0, #4
 8004b46:	2420      	movs	r4, #32
 8004b48:	46a4      	mov	ip, r4
 8004b4a:	2408      	movs	r4, #8
 8004b4c:	46a0      	mov	r8, r4
 8004b4e:	44b8      	add	r8, r7
 8004b50:	44c4      	add	ip, r8
 8004b52:	4460      	add	r0, ip
 8004b54:	6001      	str	r1, [r0, #0]
 8004b56:	6042      	str	r2, [r0, #4]
 8004b58:	6083      	str	r3, [r0, #8]
	struct quaternion result;
	result.q1 = quad_left.q1 + quad_right.q1;
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	4694      	mov	ip, r2
 8004b60:	2208      	movs	r2, #8
 8004b62:	4690      	mov	r8, r2
 8004b64:	44b8      	add	r8, r7
 8004b66:	44c4      	add	ip, r8
 8004b68:	4463      	add	r3, ip
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2314      	movs	r3, #20
 8004b6e:	2120      	movs	r1, #32
 8004b70:	468c      	mov	ip, r1
 8004b72:	2108      	movs	r1, #8
 8004b74:	4688      	mov	r8, r1
 8004b76:	44b8      	add	r8, r7
 8004b78:	44c4      	add	ip, r8
 8004b7a:	4463      	add	r3, ip
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	1c19      	adds	r1, r3, #0
 8004b80:	1c10      	adds	r0, r2, #0
 8004b82:	f7fb fcdf 	bl	8000544 <__aeabi_fadd>
 8004b86:	1c03      	adds	r3, r0, #0
 8004b88:	1c1a      	adds	r2, r3, #0
 8004b8a:	2408      	movs	r4, #8
 8004b8c:	193b      	adds	r3, r7, r4
 8004b8e:	601a      	str	r2, [r3, #0]
	result.q2 = quad_left.q2 + quad_right.q2;
 8004b90:	2304      	movs	r3, #4
 8004b92:	2220      	movs	r2, #32
 8004b94:	4694      	mov	ip, r2
 8004b96:	2208      	movs	r2, #8
 8004b98:	4690      	mov	r8, r2
 8004b9a:	44b8      	add	r8, r7
 8004b9c:	44c4      	add	ip, r8
 8004b9e:	4463      	add	r3, ip
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	2314      	movs	r3, #20
 8004ba4:	2120      	movs	r1, #32
 8004ba6:	468c      	mov	ip, r1
 8004ba8:	2108      	movs	r1, #8
 8004baa:	4688      	mov	r8, r1
 8004bac:	44b8      	add	r8, r7
 8004bae:	44c4      	add	ip, r8
 8004bb0:	4463      	add	r3, ip
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	1c19      	adds	r1, r3, #0
 8004bb6:	1c10      	adds	r0, r2, #0
 8004bb8:	f7fb fcc4 	bl	8000544 <__aeabi_fadd>
 8004bbc:	1c03      	adds	r3, r0, #0
 8004bbe:	1c1a      	adds	r2, r3, #0
 8004bc0:	193b      	adds	r3, r7, r4
 8004bc2:	605a      	str	r2, [r3, #4]
	result.q3 = quad_left.q3 + quad_right.q3;
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	4694      	mov	ip, r2
 8004bca:	2208      	movs	r2, #8
 8004bcc:	4690      	mov	r8, r2
 8004bce:	44b8      	add	r8, r7
 8004bd0:	44c4      	add	ip, r8
 8004bd2:	4463      	add	r3, ip
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	2314      	movs	r3, #20
 8004bd8:	2120      	movs	r1, #32
 8004bda:	468c      	mov	ip, r1
 8004bdc:	2108      	movs	r1, #8
 8004bde:	4688      	mov	r8, r1
 8004be0:	44b8      	add	r8, r7
 8004be2:	44c4      	add	ip, r8
 8004be4:	4463      	add	r3, ip
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	1c19      	adds	r1, r3, #0
 8004bea:	1c10      	adds	r0, r2, #0
 8004bec:	f7fb fcaa 	bl	8000544 <__aeabi_fadd>
 8004bf0:	1c03      	adds	r3, r0, #0
 8004bf2:	1c1a      	adds	r2, r3, #0
 8004bf4:	193b      	adds	r3, r7, r4
 8004bf6:	609a      	str	r2, [r3, #8]
	result.q4 = quad_left.q4 + quad_right.q4;
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	4694      	mov	ip, r2
 8004bfe:	2208      	movs	r2, #8
 8004c00:	4690      	mov	r8, r2
 8004c02:	44b8      	add	r8, r7
 8004c04:	44c4      	add	ip, r8
 8004c06:	4463      	add	r3, ip
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	2314      	movs	r3, #20
 8004c0c:	2120      	movs	r1, #32
 8004c0e:	468c      	mov	ip, r1
 8004c10:	2108      	movs	r1, #8
 8004c12:	4688      	mov	r8, r1
 8004c14:	44b8      	add	r8, r7
 8004c16:	44c4      	add	ip, r8
 8004c18:	4463      	add	r3, ip
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	1c19      	adds	r1, r3, #0
 8004c1e:	1c10      	adds	r0, r2, #0
 8004c20:	f7fb fc90 	bl	8000544 <__aeabi_fadd>
 8004c24:	1c03      	adds	r3, r0, #0
 8004c26:	1c1a      	adds	r2, r3, #0
 8004c28:	193b      	adds	r3, r7, r4
 8004c2a:	60da      	str	r2, [r3, #12]

	return result;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	193a      	adds	r2, r7, r4
 8004c30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004c32:	c313      	stmia	r3!, {r0, r1, r4}
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	601a      	str	r2, [r3, #0]
}
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b006      	add	sp, #24
 8004c3e:	bc80      	pop	{r7}
 8004c40:	46b8      	mov	r8, r7
 8004c42:	bc90      	pop	{r4, r7}
 8004c44:	bc08      	pop	{r3}
 8004c46:	b004      	add	sp, #16
 8004c48:	4718      	bx	r3

08004c4a <q_normalize>:
    inverse.q4 = -quad.q4;
    return inverse;
}

void q_normalize(struct quaternion * quad)
{
 8004c4a:	b5b0      	push	{r4, r5, r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
	float length =  sqrt(pow(quad->q1,2) + pow(quad->q2,2) + pow(quad->q3,2) + pow(quad->q4,2));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	1c18      	adds	r0, r3, #0
 8004c58:	f7fe f976 	bl	8002f48 <__aeabi_f2d>
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2380      	movs	r3, #128	; 0x80
 8004c60:	05db      	lsls	r3, r3, #23
 8004c62:	f007 f9a1 	bl	800bfa8 <pow>
 8004c66:	0004      	movs	r4, r0
 8004c68:	000d      	movs	r5, r1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	1c18      	adds	r0, r3, #0
 8004c70:	f7fe f96a 	bl	8002f48 <__aeabi_f2d>
 8004c74:	2200      	movs	r2, #0
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	05db      	lsls	r3, r3, #23
 8004c7a:	f007 f995 	bl	800bfa8 <pow>
 8004c7e:	0002      	movs	r2, r0
 8004c80:	000b      	movs	r3, r1
 8004c82:	0020      	movs	r0, r4
 8004c84:	0029      	movs	r1, r5
 8004c86:	f7fc fb47 	bl	8001318 <__aeabi_dadd>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	000b      	movs	r3, r1
 8004c8e:	0014      	movs	r4, r2
 8004c90:	001d      	movs	r5, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	1c18      	adds	r0, r3, #0
 8004c98:	f7fe f956 	bl	8002f48 <__aeabi_f2d>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	05db      	lsls	r3, r3, #23
 8004ca2:	f007 f981 	bl	800bfa8 <pow>
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	000b      	movs	r3, r1
 8004caa:	0020      	movs	r0, r4
 8004cac:	0029      	movs	r1, r5
 8004cae:	f7fc fb33 	bl	8001318 <__aeabi_dadd>
 8004cb2:	0002      	movs	r2, r0
 8004cb4:	000b      	movs	r3, r1
 8004cb6:	0014      	movs	r4, r2
 8004cb8:	001d      	movs	r5, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	1c18      	adds	r0, r3, #0
 8004cc0:	f7fe f942 	bl	8002f48 <__aeabi_f2d>
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	05db      	lsls	r3, r3, #23
 8004cca:	f007 f96d 	bl	800bfa8 <pow>
 8004cce:	0002      	movs	r2, r0
 8004cd0:	000b      	movs	r3, r1
 8004cd2:	0020      	movs	r0, r4
 8004cd4:	0029      	movs	r1, r5
 8004cd6:	f7fc fb1f 	bl	8001318 <__aeabi_dadd>
 8004cda:	0002      	movs	r2, r0
 8004cdc:	000b      	movs	r3, r1
 8004cde:	0010      	movs	r0, r2
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	f007 fa19 	bl	800c118 <sqrt>
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	000b      	movs	r3, r1
 8004cea:	0010      	movs	r0, r2
 8004cec:	0019      	movs	r1, r3
 8004cee:	f7fe f973 	bl	8002fd8 <__aeabi_d2f>
 8004cf2:	1c03      	adds	r3, r0, #0
 8004cf4:	60fb      	str	r3, [r7, #12]

	quad->q1 /= length;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	1c18      	adds	r0, r3, #0
 8004cfe:	f7fb fdbd 	bl	800087c <__aeabi_fdiv>
 8004d02:	1c03      	adds	r3, r0, #0
 8004d04:	1c1a      	adds	r2, r3, #0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
	quad->q2 /= length;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	1c18      	adds	r0, r3, #0
 8004d12:	f7fb fdb3 	bl	800087c <__aeabi_fdiv>
 8004d16:	1c03      	adds	r3, r0, #0
 8004d18:	1c1a      	adds	r2, r3, #0
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	605a      	str	r2, [r3, #4]
	quad->q3 /= length;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	1c18      	adds	r0, r3, #0
 8004d26:	f7fb fda9 	bl	800087c <__aeabi_fdiv>
 8004d2a:	1c03      	adds	r3, r0, #0
 8004d2c:	1c1a      	adds	r2, r3, #0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	609a      	str	r2, [r3, #8]
	quad->q4 /= length;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	68f9      	ldr	r1, [r7, #12]
 8004d38:	1c18      	adds	r0, r3, #0
 8004d3a:	f7fb fd9f 	bl	800087c <__aeabi_fdiv>
 8004d3e:	1c03      	adds	r3, r0, #0
 8004d40:	1c1a      	adds	r2, r3, #0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60da      	str	r2, [r3, #12]

}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b004      	add	sp, #16
 8004d4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d52:	46c6      	mov	lr, r8
 8004d54:	b500      	push	{lr}
 8004d56:	b0d6      	sub	sp, #344	; 0x158
 8004d58:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d5a:	f000 fe95 	bl	8005a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d5e:	f000 fa33 	bl	80051c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d62:	f000 fb9f 	bl	80054a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004d66:	f000 fae9 	bl	800533c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8004d6a:	f000 fb4d 	bl	8005408 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8004d6e:	f000 fab7 	bl	80052e0 <MX_RTC_Init>
  MX_TIM16_Init();
 8004d72:	f000 fb21 	bl	80053b8 <MX_TIM16_Init>
  MX_I2C1_Init();
 8004d76:	f000 fa73 	bl	8005260 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  	ICM_Initialize(&hspi1, &huart2);
 8004d7a:	4afb      	ldr	r2, [pc, #1004]	; (8005168 <main+0x418>)
 8004d7c:	4bfb      	ldr	r3, [pc, #1004]	; (800516c <main+0x41c>)
 8004d7e:	0011      	movs	r1, r2
 8004d80:	0018      	movs	r0, r3
 8004d82:	f7fe fa97 	bl	80032b4 <ICM_Initialize>

  	char uart_buffer[200];

  	float accel_data[3] = {0,0,0};
 8004d86:	2144      	movs	r1, #68	; 0x44
 8004d88:	2510      	movs	r5, #16
 8004d8a:	197b      	adds	r3, r7, r5
 8004d8c:	185b      	adds	r3, r3, r1
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	197b      	adds	r3, r7, r5
 8004d94:	185b      	adds	r3, r3, r1
 8004d96:	2200      	movs	r2, #0
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	197b      	adds	r3, r7, r5
 8004d9c:	185b      	adds	r3, r3, r1
 8004d9e:	2200      	movs	r2, #0
 8004da0:	609a      	str	r2, [r3, #8]
  	float gyro_data[3] = {0,0,0};
 8004da2:	2138      	movs	r1, #56	; 0x38
 8004da4:	197b      	adds	r3, r7, r5
 8004da6:	185b      	adds	r3, r3, r1
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	197b      	adds	r3, r7, r5
 8004dae:	185b      	adds	r3, r3, r1
 8004db0:	2200      	movs	r2, #0
 8004db2:	605a      	str	r2, [r3, #4]
 8004db4:	197b      	adds	r3, r7, r5
 8004db6:	185b      	adds	r3, r3, r1
 8004db8:	2200      	movs	r2, #0
 8004dba:	609a      	str	r2, [r3, #8]
  	static float gyro_bias[3] = {0,0,0};
  	static float accel_offset[2] = {0,0};

  	// High pass Filter Variables

  	float low_pass_gyro[3] = {0,0,0};
 8004dbc:	4bec      	ldr	r3, [pc, #944]	; (8005170 <main+0x420>)
 8004dbe:	2298      	movs	r2, #152	; 0x98
 8004dc0:	0052      	lsls	r2, r2, #1
 8004dc2:	4694      	mov	ip, r2
 8004dc4:	2210      	movs	r2, #16
 8004dc6:	4690      	mov	r8, r2
 8004dc8:	44b8      	add	r8, r7
 8004dca:	44c4      	add	ip, r8
 8004dcc:	4463      	add	r3, ip
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	4be7      	ldr	r3, [pc, #924]	; (8005170 <main+0x420>)
 8004dd4:	2298      	movs	r2, #152	; 0x98
 8004dd6:	0052      	lsls	r2, r2, #1
 8004dd8:	4694      	mov	ip, r2
 8004dda:	2210      	movs	r2, #16
 8004ddc:	4690      	mov	r8, r2
 8004dde:	44b8      	add	r8, r7
 8004de0:	44c4      	add	ip, r8
 8004de2:	4463      	add	r3, ip
 8004de4:	2200      	movs	r2, #0
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	4be1      	ldr	r3, [pc, #900]	; (8005170 <main+0x420>)
 8004dea:	2298      	movs	r2, #152	; 0x98
 8004dec:	0052      	lsls	r2, r2, #1
 8004dee:	4694      	mov	ip, r2
 8004df0:	2210      	movs	r2, #16
 8004df2:	4690      	mov	r8, r2
 8004df4:	44b8      	add	r8, r7
 8004df6:	44c4      	add	ip, r8
 8004df8:	4463      	add	r3, ip
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
  	float prev_low_pass_gyro[3] = {0,0,0};
 8004dfe:	4bdd      	ldr	r3, [pc, #884]	; (8005174 <main+0x424>)
 8004e00:	2298      	movs	r2, #152	; 0x98
 8004e02:	0052      	lsls	r2, r2, #1
 8004e04:	4694      	mov	ip, r2
 8004e06:	2210      	movs	r2, #16
 8004e08:	4690      	mov	r8, r2
 8004e0a:	44b8      	add	r8, r7
 8004e0c:	44c4      	add	ip, r8
 8004e0e:	4463      	add	r3, ip
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	4bd7      	ldr	r3, [pc, #860]	; (8005174 <main+0x424>)
 8004e16:	2298      	movs	r2, #152	; 0x98
 8004e18:	0052      	lsls	r2, r2, #1
 8004e1a:	4694      	mov	ip, r2
 8004e1c:	2210      	movs	r2, #16
 8004e1e:	4690      	mov	r8, r2
 8004e20:	44b8      	add	r8, r7
 8004e22:	44c4      	add	ip, r8
 8004e24:	4463      	add	r3, ip
 8004e26:	2200      	movs	r2, #0
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	4bd2      	ldr	r3, [pc, #840]	; (8005174 <main+0x424>)
 8004e2c:	2298      	movs	r2, #152	; 0x98
 8004e2e:	0052      	lsls	r2, r2, #1
 8004e30:	4694      	mov	ip, r2
 8004e32:	2210      	movs	r2, #16
 8004e34:	4690      	mov	r8, r2
 8004e36:	44b8      	add	r8, r7
 8004e38:	44c4      	add	ip, r8
 8004e3a:	4463      	add	r3, ip
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	609a      	str	r2, [r3, #8]
  	float low_alpha = 0.3;
 8004e40:	4bcd      	ldr	r3, [pc, #820]	; (8005178 <main+0x428>)
 8004e42:	2292      	movs	r2, #146	; 0x92
 8004e44:	0052      	lsls	r2, r2, #1
 8004e46:	2110      	movs	r1, #16
 8004e48:	468c      	mov	ip, r1
 8004e4a:	44bc      	add	ip, r7
 8004e4c:	4462      	add	r2, ip
 8004e4e:	6013      	str	r3, [r2, #0]

  	struct quaternion quat = {1,0,0,0};
 8004e50:	4bca      	ldr	r3, [pc, #808]	; (800517c <main+0x42c>)
 8004e52:	2298      	movs	r2, #152	; 0x98
 8004e54:	0052      	lsls	r2, r2, #1
 8004e56:	4694      	mov	ip, r2
 8004e58:	2210      	movs	r2, #16
 8004e5a:	4690      	mov	r8, r2
 8004e5c:	44b8      	add	r8, r7
 8004e5e:	44c4      	add	ip, r8
 8004e60:	4463      	add	r3, ip
 8004e62:	22fe      	movs	r2, #254	; 0xfe
 8004e64:	0592      	lsls	r2, r2, #22
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	4bc4      	ldr	r3, [pc, #784]	; (800517c <main+0x42c>)
 8004e6a:	2298      	movs	r2, #152	; 0x98
 8004e6c:	0052      	lsls	r2, r2, #1
 8004e6e:	4694      	mov	ip, r2
 8004e70:	2210      	movs	r2, #16
 8004e72:	4690      	mov	r8, r2
 8004e74:	44b8      	add	r8, r7
 8004e76:	44c4      	add	ip, r8
 8004e78:	4463      	add	r3, ip
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	4bbf      	ldr	r3, [pc, #764]	; (800517c <main+0x42c>)
 8004e80:	2298      	movs	r2, #152	; 0x98
 8004e82:	0052      	lsls	r2, r2, #1
 8004e84:	4694      	mov	ip, r2
 8004e86:	2210      	movs	r2, #16
 8004e88:	4690      	mov	r8, r2
 8004e8a:	44b8      	add	r8, r7
 8004e8c:	44c4      	add	ip, r8
 8004e8e:	4463      	add	r3, ip
 8004e90:	2200      	movs	r2, #0
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	4bb9      	ldr	r3, [pc, #740]	; (800517c <main+0x42c>)
 8004e96:	2298      	movs	r2, #152	; 0x98
 8004e98:	0052      	lsls	r2, r2, #1
 8004e9a:	4694      	mov	ip, r2
 8004e9c:	2210      	movs	r2, #16
 8004e9e:	4690      	mov	r8, r2
 8004ea0:	44b8      	add	r8, r7
 8004ea2:	44c4      	add	ip, r8
 8004ea4:	4463      	add	r3, ip
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	60da      	str	r2, [r3, #12]
  	struct euler_angles angles = {0,0,0};
 8004eaa:	4bb5      	ldr	r3, [pc, #724]	; (8005180 <main+0x430>)
 8004eac:	2298      	movs	r2, #152	; 0x98
 8004eae:	0052      	lsls	r2, r2, #1
 8004eb0:	4694      	mov	ip, r2
 8004eb2:	2210      	movs	r2, #16
 8004eb4:	4690      	mov	r8, r2
 8004eb6:	44b8      	add	r8, r7
 8004eb8:	44c4      	add	ip, r8
 8004eba:	4463      	add	r3, ip
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	4baf      	ldr	r3, [pc, #700]	; (8005180 <main+0x430>)
 8004ec2:	2298      	movs	r2, #152	; 0x98
 8004ec4:	0052      	lsls	r2, r2, #1
 8004ec6:	4694      	mov	ip, r2
 8004ec8:	2210      	movs	r2, #16
 8004eca:	4690      	mov	r8, r2
 8004ecc:	44b8      	add	r8, r7
 8004ece:	44c4      	add	ip, r8
 8004ed0:	4463      	add	r3, ip
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	4baa      	ldr	r3, [pc, #680]	; (8005180 <main+0x430>)
 8004ed8:	2298      	movs	r2, #152	; 0x98
 8004eda:	0052      	lsls	r2, r2, #1
 8004edc:	4694      	mov	ip, r2
 8004ede:	2210      	movs	r2, #16
 8004ee0:	4690      	mov	r8, r2
 8004ee2:	44b8      	add	r8, r7
 8004ee4:	44c4      	add	ip, r8
 8004ee6:	4463      	add	r3, ip
 8004ee8:	2200      	movs	r2, #0
 8004eea:	609a      	str	r2, [r3, #8]

  	uint32_t timer_currentval = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	2290      	movs	r2, #144	; 0x90
 8004ef0:	0052      	lsls	r2, r2, #1
 8004ef2:	2110      	movs	r1, #16
 8004ef4:	468c      	mov	ip, r1
 8004ef6:	44bc      	add	ip, r7
 8004ef8:	4462      	add	r2, ip
 8004efa:	6013      	str	r3, [r2, #0]
  	float duration_diff = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	228e      	movs	r2, #142	; 0x8e
 8004f00:	0052      	lsls	r2, r2, #1
 8004f02:	2110      	movs	r1, #16
 8004f04:	468c      	mov	ip, r1
 8004f06:	44bc      	add	ip, r7
 8004f08:	4462      	add	r2, ip
 8004f0a:	6013      	str	r3, [r2, #0]
  	float duration = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2296      	movs	r2, #150	; 0x96
 8004f10:	0052      	lsls	r2, r2, #1
 8004f12:	2110      	movs	r1, #16
 8004f14:	468c      	mov	ip, r1
 8004f16:	44bc      	add	ip, r7
 8004f18:	4462      	add	r2, ip
 8004f1a:	6013      	str	r3, [r2, #0]
  	float clock = 16000000/16.0;
 8004f1c:	4b99      	ldr	r3, [pc, #612]	; (8005184 <main+0x434>)
 8004f1e:	228c      	movs	r2, #140	; 0x8c
 8004f20:	0052      	lsls	r2, r2, #1
 8004f22:	2110      	movs	r1, #16
 8004f24:	468c      	mov	ip, r1
 8004f26:	44bc      	add	ip, r7
 8004f28:	4462      	add	r2, ip
 8004f2a:	6013      	str	r3, [r2, #0]

  	HAL_TIM_Base_Start(&htim16);
 8004f2c:	4b96      	ldr	r3, [pc, #600]	; (8005188 <main+0x438>)
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f003 f8b8 	bl	80080a4 <HAL_TIM_Base_Start>
  	uint16_t uart_timer_scaler = 0;
 8004f34:	2395      	movs	r3, #149	; 0x95
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	2210      	movs	r2, #16
 8004f3a:	4694      	mov	ip, r2
 8004f3c:	44bc      	add	ip, r7
 8004f3e:	4463      	add	r3, ip
 8004f40:	2200      	movs	r2, #0
 8004f42:	801a      	strh	r2, [r3, #0]

  	ICM_GyroCalibration(&hspi1,&huart2, gyro_bias);
 8004f44:	4a91      	ldr	r2, [pc, #580]	; (800518c <main+0x43c>)
 8004f46:	4988      	ldr	r1, [pc, #544]	; (8005168 <main+0x418>)
 8004f48:	4b88      	ldr	r3, [pc, #544]	; (800516c <main+0x41c>)
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f7fe fb86 	bl	800365c <ICM_GyroCalibration>
  	ICM_AccCalibration(&hspi1, &huart2, accel_offset);
 8004f50:	4a8f      	ldr	r2, [pc, #572]	; (8005190 <main+0x440>)
 8004f52:	4985      	ldr	r1, [pc, #532]	; (8005168 <main+0x418>)
 8004f54:	4b85      	ldr	r3, [pc, #532]	; (800516c <main+0x41c>)
 8004f56:	0018      	movs	r0, r3
 8004f58:	f7fe fcfe 	bl	8003958 <ICM_AccCalibration>

  	sprintf(uart_buffer, "UART_PREAMBLE\r\n");
 8004f5c:	4a8d      	ldr	r2, [pc, #564]	; (8005194 <main+0x444>)
 8004f5e:	2450      	movs	r4, #80	; 0x50
 8004f60:	197b      	adds	r3, r7, r5
 8004f62:	191b      	adds	r3, r3, r4
 8004f64:	0011      	movs	r1, r2
 8004f66:	0018      	movs	r0, r3
 8004f68:	f004 fb94 	bl	8009694 <siprintf>
  	HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8004f6c:	197b      	adds	r3, r7, r5
 8004f6e:	191b      	adds	r3, r3, r4
 8004f70:	0018      	movs	r0, r3
 8004f72:	f7fb f8c5 	bl	8000100 <strlen>
 8004f76:	0003      	movs	r3, r0
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	23fa      	movs	r3, #250	; 0xfa
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	1979      	adds	r1, r7, r5
 8004f80:	1909      	adds	r1, r1, r4
 8004f82:	4879      	ldr	r0, [pc, #484]	; (8005168 <main+0x418>)
 8004f84:	f003 f9a8 	bl	80082d8 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  	  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8004f88:	4b7f      	ldr	r3, [pc, #508]	; (8005188 <main+0x438>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24
	   	  uart_timer_scaler = (uart_timer_scaler + 1) % 10; // every 100th
 8004f90:	2495      	movs	r4, #149	; 0x95
 8004f92:	0064      	lsls	r4, r4, #1
 8004f94:	2510      	movs	r5, #16
 8004f96:	197b      	adds	r3, r7, r5
 8004f98:	191b      	adds	r3, r3, r4
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	210a      	movs	r1, #10
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f7fb fa39 	bl	8000418 <__aeabi_idivmod>
 8004fa6:	000b      	movs	r3, r1
 8004fa8:	001a      	movs	r2, r3
 8004faa:	0029      	movs	r1, r5
 8004fac:	187b      	adds	r3, r7, r1
 8004fae:	191b      	adds	r3, r3, r4
 8004fb0:	801a      	strh	r2, [r3, #0]
	   	  ICM_ReadGyroData(&hspi1, gyro_data, gyro_bias);
 8004fb2:	4a76      	ldr	r2, [pc, #472]	; (800518c <main+0x43c>)
 8004fb4:	2538      	movs	r5, #56	; 0x38
 8004fb6:	187b      	adds	r3, r7, r1
 8004fb8:	1959      	adds	r1, r3, r5
 8004fba:	4b6c      	ldr	r3, [pc, #432]	; (800516c <main+0x41c>)
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f7fe fd77 	bl	8003ab0 <ICM_ReadGyroData>
	   	  ICM_ReadAccData(&hspi1, accel_data);
 8004fc2:	2644      	movs	r6, #68	; 0x44
 8004fc4:	2010      	movs	r0, #16
 8004fc6:	183b      	adds	r3, r7, r0
 8004fc8:	199a      	adds	r2, r3, r6
 8004fca:	4b68      	ldr	r3, [pc, #416]	; (800516c <main+0x41c>)
 8004fcc:	0011      	movs	r1, r2
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f7fe fe54 	bl	8003c7c <ICM_ReadAccData>
	   	  GyroLowPassFilter(gyro_data, prev_low_pass_gyro, low_pass_gyro, low_alpha);
 8004fd4:	2392      	movs	r3, #146	; 0x92
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	2210      	movs	r2, #16
 8004fda:	4694      	mov	ip, r2
 8004fdc:	44bc      	add	ip, r7
 8004fde:	4463      	add	r3, ip
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	222c      	movs	r2, #44	; 0x2c
 8004fe4:	2110      	movs	r1, #16
 8004fe6:	468c      	mov	ip, r1
 8004fe8:	44bc      	add	ip, r7
 8004fea:	4462      	add	r2, ip
 8004fec:	2120      	movs	r1, #32
 8004fee:	2010      	movs	r0, #16
 8004ff0:	4684      	mov	ip, r0
 8004ff2:	44bc      	add	ip, r7
 8004ff4:	4461      	add	r1, ip
 8004ff6:	2010      	movs	r0, #16
 8004ff8:	1838      	adds	r0, r7, r0
 8004ffa:	1940      	adds	r0, r0, r5
 8004ffc:	f7ff fb7a 	bl	80046f4 <GyroLowPassFilter>
	   	  MahonyFilter(low_pass_gyro, accel_data, &quat);
 8005000:	2110      	movs	r1, #16
 8005002:	2510      	movs	r5, #16
 8005004:	197b      	adds	r3, r7, r5
 8005006:	185a      	adds	r2, r3, r1
 8005008:	197b      	adds	r3, r7, r5
 800500a:	1999      	adds	r1, r3, r6
 800500c:	232c      	movs	r3, #44	; 0x2c
 800500e:	2010      	movs	r0, #16
 8005010:	4684      	mov	ip, r0
 8005012:	44bc      	add	ip, r7
 8005014:	4463      	add	r3, ip
 8005016:	0018      	movs	r0, r3
 8005018:	f7ff f974 	bl	8004304 <MahonyFilter>

	   	  if(uart_timer_scaler == 0)
 800501c:	197b      	adds	r3, r7, r5
 800501e:	191b      	adds	r3, r3, r4
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d16c      	bne.n	8005100 <main+0x3b0>
	   	  {
	   		 CalcQuaternionToEuler(quat, &angles, accel_offset);
 8005026:	4b55      	ldr	r3, [pc, #340]	; (800517c <main+0x42c>)
 8005028:	2298      	movs	r2, #152	; 0x98
 800502a:	0052      	lsls	r2, r2, #1
 800502c:	4694      	mov	ip, r2
 800502e:	2210      	movs	r2, #16
 8005030:	4690      	mov	r8, r2
 8005032:	44b8      	add	r8, r7
 8005034:	44c4      	add	ip, r8
 8005036:	4463      	add	r3, ip
 8005038:	4a55      	ldr	r2, [pc, #340]	; (8005190 <main+0x440>)
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	2214      	movs	r2, #20
 800503e:	18ba      	adds	r2, r7, r2
 8005040:	9200      	str	r2, [sp, #0]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	6859      	ldr	r1, [r3, #4]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f7fe ff6d 	bl	8003f28 <CalcQuaternionToEuler>
	   		 sprintf(uart_buffer,
	   		  "{'yaw':%.5f, 'pitch':%.5f, 'roll':%.5f, duration : %.3f}\r\n",
	   		  angles.yaw, angles.pitch, angles.roll, duration);
 800504e:	4b4c      	ldr	r3, [pc, #304]	; (8005180 <main+0x430>)
 8005050:	2298      	movs	r2, #152	; 0x98
 8005052:	0052      	lsls	r2, r2, #1
 8005054:	4694      	mov	ip, r2
 8005056:	2210      	movs	r2, #16
 8005058:	4690      	mov	r8, r2
 800505a:	44b8      	add	r8, r7
 800505c:	44c4      	add	ip, r8
 800505e:	4463      	add	r3, ip
 8005060:	689b      	ldr	r3, [r3, #8]
	   		 sprintf(uart_buffer,
 8005062:	1c18      	adds	r0, r3, #0
 8005064:	f7fd ff70 	bl	8002f48 <__aeabi_f2d>
 8005068:	60b8      	str	r0, [r7, #8]
 800506a:	60f9      	str	r1, [r7, #12]
	   		  angles.yaw, angles.pitch, angles.roll, duration);
 800506c:	4b44      	ldr	r3, [pc, #272]	; (8005180 <main+0x430>)
 800506e:	2198      	movs	r1, #152	; 0x98
 8005070:	0049      	lsls	r1, r1, #1
 8005072:	468c      	mov	ip, r1
 8005074:	2210      	movs	r2, #16
 8005076:	4690      	mov	r8, r2
 8005078:	44b8      	add	r8, r7
 800507a:	44c4      	add	ip, r8
 800507c:	4463      	add	r3, ip
 800507e:	685b      	ldr	r3, [r3, #4]
	   		 sprintf(uart_buffer,
 8005080:	1c18      	adds	r0, r3, #0
 8005082:	f7fd ff61 	bl	8002f48 <__aeabi_f2d>
 8005086:	0004      	movs	r4, r0
 8005088:	000d      	movs	r5, r1
	   		  angles.yaw, angles.pitch, angles.roll, duration);
 800508a:	4b3d      	ldr	r3, [pc, #244]	; (8005180 <main+0x430>)
 800508c:	2198      	movs	r1, #152	; 0x98
 800508e:	0049      	lsls	r1, r1, #1
 8005090:	468c      	mov	ip, r1
 8005092:	2210      	movs	r2, #16
 8005094:	4690      	mov	r8, r2
 8005096:	44b8      	add	r8, r7
 8005098:	44c4      	add	ip, r8
 800509a:	4463      	add	r3, ip
 800509c:	681b      	ldr	r3, [r3, #0]
	   		 sprintf(uart_buffer,
 800509e:	1c18      	adds	r0, r3, #0
 80050a0:	f7fd ff52 	bl	8002f48 <__aeabi_f2d>
 80050a4:	6038      	str	r0, [r7, #0]
 80050a6:	6079      	str	r1, [r7, #4]
 80050a8:	2396      	movs	r3, #150	; 0x96
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	2210      	movs	r2, #16
 80050ae:	4694      	mov	ip, r2
 80050b0:	44bc      	add	ip, r7
 80050b2:	4463      	add	r3, ip
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	f7fd ff47 	bl	8002f48 <__aeabi_f2d>
 80050ba:	0002      	movs	r2, r0
 80050bc:	000b      	movs	r3, r1
 80050be:	4936      	ldr	r1, [pc, #216]	; (8005198 <main+0x448>)
 80050c0:	2650      	movs	r6, #80	; 0x50
 80050c2:	2010      	movs	r0, #16
 80050c4:	1838      	adds	r0, r7, r0
 80050c6:	1980      	adds	r0, r0, r6
 80050c8:	9204      	str	r2, [sp, #16]
 80050ca:	9305      	str	r3, [sp, #20]
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	9202      	str	r2, [sp, #8]
 80050d2:	9303      	str	r3, [sp, #12]
 80050d4:	9400      	str	r4, [sp, #0]
 80050d6:	9501      	str	r5, [sp, #4]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f004 fada 	bl	8009694 <siprintf>
	   		 HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80050e0:	0034      	movs	r4, r6
 80050e2:	2510      	movs	r5, #16
 80050e4:	197b      	adds	r3, r7, r5
 80050e6:	191b      	adds	r3, r3, r4
 80050e8:	0018      	movs	r0, r3
 80050ea:	f7fb f809 	bl	8000100 <strlen>
 80050ee:	0003      	movs	r3, r0
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	23fa      	movs	r3, #250	; 0xfa
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	1979      	adds	r1, r7, r5
 80050f8:	1909      	adds	r1, r1, r4
 80050fa:	481b      	ldr	r0, [pc, #108]	; (8005168 <main+0x418>)
 80050fc:	f003 f8ec 	bl	80082d8 <HAL_UART_Transmit>
	   	  }

	   	  timer_currentval = __HAL_TIM_GET_COUNTER(&htim16);
 8005100:	4b21      	ldr	r3, [pc, #132]	; (8005188 <main+0x438>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	2290      	movs	r2, #144	; 0x90
 8005108:	0052      	lsls	r2, r2, #1
 800510a:	2410      	movs	r4, #16
 800510c:	1939      	adds	r1, r7, r4
 800510e:	1889      	adds	r1, r1, r2
 8005110:	600b      	str	r3, [r1, #0]
	   	  duration = (timer_currentval )*1000/clock;
 8005112:	193b      	adds	r3, r7, r4
 8005114:	189b      	adds	r3, r3, r2
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	0013      	movs	r3, r2
 800511a:	015b      	lsls	r3, r3, #5
 800511c:	1a9b      	subs	r3, r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	189b      	adds	r3, r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	0018      	movs	r0, r3
 8005126:	f7fc f8bb 	bl	80012a0 <__aeabi_ui2f>
 800512a:	1c03      	adds	r3, r0, #0
 800512c:	228c      	movs	r2, #140	; 0x8c
 800512e:	0052      	lsls	r2, r2, #1
 8005130:	2110      	movs	r1, #16
 8005132:	468c      	mov	ip, r1
 8005134:	44bc      	add	ip, r7
 8005136:	4462      	add	r2, ip
 8005138:	6811      	ldr	r1, [r2, #0]
 800513a:	1c18      	adds	r0, r3, #0
 800513c:	f7fb fb9e 	bl	800087c <__aeabi_fdiv>
 8005140:	1c03      	adds	r3, r0, #0
 8005142:	2296      	movs	r2, #150	; 0x96
 8005144:	0052      	lsls	r2, r2, #1
 8005146:	0025      	movs	r5, r4
 8005148:	1979      	adds	r1, r7, r5
 800514a:	1889      	adds	r1, r1, r2
 800514c:	600b      	str	r3, [r1, #0]
	   	  duration_diff = SAMPLE_TIME_ICM - duration;
 800514e:	197b      	adds	r3, r7, r5
 8005150:	189b      	adds	r3, r3, r2
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	4811      	ldr	r0, [pc, #68]	; (800519c <main+0x44c>)
 8005156:	f7fb fe75 	bl	8000e44 <__aeabi_fsub>
 800515a:	1c03      	adds	r3, r0, #0
 800515c:	248e      	movs	r4, #142	; 0x8e
 800515e:	0064      	lsls	r4, r4, #1
 8005160:	197a      	adds	r2, r7, r5
 8005162:	1912      	adds	r2, r2, r4
 8005164:	e01c      	b.n	80051a0 <main+0x450>
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	200004b4 	.word	0x200004b4
 800516c:	20000450 	.word	0x20000450
 8005170:	fffffefc 	.word	0xfffffefc
 8005174:	fffffef0 	.word	0xfffffef0
 8005178:	3e99999a 	.word	0x3e99999a
 800517c:	fffffee0 	.word	0xfffffee0
 8005180:	fffffed4 	.word	0xfffffed4
 8005184:	49742400 	.word	0x49742400
 8005188:	20000544 	.word	0x20000544
 800518c:	20000204 	.word	0x20000204
 8005190:	20000210 	.word	0x20000210
 8005194:	0800d5d8 	.word	0x0800d5d8
 8005198:	0800d5e8 	.word	0x0800d5e8
 800519c:	41a00000 	.word	0x41a00000
 80051a0:	6013      	str	r3, [r2, #0]

	   	  if(duration_diff > 0){
 80051a2:	2100      	movs	r1, #0
 80051a4:	197b      	adds	r3, r7, r5
 80051a6:	191b      	adds	r3, r3, r4
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	f7fb f99f 	bl	80004ec <__aeabi_fcmpgt>
 80051ae:	1e03      	subs	r3, r0, #0
 80051b0:	d008      	beq.n	80051c4 <main+0x474>
	   		  HAL_Delay(duration_diff);
 80051b2:	197b      	adds	r3, r7, r5
 80051b4:	191b      	adds	r3, r3, r4
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	f7fb f9ac 	bl	8000514 <__aeabi_f2uiz>
 80051bc:	0003      	movs	r3, r0
 80051be:	0018      	movs	r0, r3
 80051c0:	f000 fce8 	bl	8005b94 <HAL_Delay>
	  	  __HAL_TIM_SET_COUNTER(&htim16, 0);
 80051c4:	e6e0      	b.n	8004f88 <main+0x238>
 80051c6:	46c0      	nop			; (mov r8, r8)

080051c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b093      	sub	sp, #76	; 0x4c
 80051cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051ce:	2414      	movs	r4, #20
 80051d0:	193b      	adds	r3, r7, r4
 80051d2:	0018      	movs	r0, r3
 80051d4:	2334      	movs	r3, #52	; 0x34
 80051d6:	001a      	movs	r2, r3
 80051d8:	2100      	movs	r1, #0
 80051da:	f003 fdd9 	bl	8008d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051de:	1d3b      	adds	r3, r7, #4
 80051e0:	0018      	movs	r0, r3
 80051e2:	2310      	movs	r3, #16
 80051e4:	001a      	movs	r2, r3
 80051e6:	2100      	movs	r1, #0
 80051e8:	f003 fdd2 	bl	8008d90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	0018      	movs	r0, r3
 80051f2:	f001 f86d 	bl	80062d0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80051f6:	193b      	adds	r3, r7, r4
 80051f8:	220a      	movs	r2, #10
 80051fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051fc:	193b      	adds	r3, r7, r4
 80051fe:	2280      	movs	r2, #128	; 0x80
 8005200:	0052      	lsls	r2, r2, #1
 8005202:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005204:	0021      	movs	r1, r4
 8005206:	187b      	adds	r3, r7, r1
 8005208:	2200      	movs	r2, #0
 800520a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800520c:	187b      	adds	r3, r7, r1
 800520e:	2240      	movs	r2, #64	; 0x40
 8005210:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005212:	187b      	adds	r3, r7, r1
 8005214:	2201      	movs	r2, #1
 8005216:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005218:	187b      	adds	r3, r7, r1
 800521a:	2200      	movs	r2, #0
 800521c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800521e:	187b      	adds	r3, r7, r1
 8005220:	0018      	movs	r0, r3
 8005222:	f001 f8a1 	bl	8006368 <HAL_RCC_OscConfig>
 8005226:	1e03      	subs	r3, r0, #0
 8005228:	d001      	beq.n	800522e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800522a:	f000 f991 	bl	8005550 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800522e:	1d3b      	adds	r3, r7, #4
 8005230:	2207      	movs	r2, #7
 8005232:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005234:	1d3b      	adds	r3, r7, #4
 8005236:	2200      	movs	r2, #0
 8005238:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800523a:	1d3b      	adds	r3, r7, #4
 800523c:	2200      	movs	r2, #0
 800523e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005240:	1d3b      	adds	r3, r7, #4
 8005242:	2200      	movs	r2, #0
 8005244:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005246:	1d3b      	adds	r3, r7, #4
 8005248:	2100      	movs	r1, #0
 800524a:	0018      	movs	r0, r3
 800524c:	f001 fba2 	bl	8006994 <HAL_RCC_ClockConfig>
 8005250:	1e03      	subs	r3, r0, #0
 8005252:	d001      	beq.n	8005258 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8005254:	f000 f97c 	bl	8005550 <Error_Handler>
  }
}
 8005258:	46c0      	nop			; (mov r8, r8)
 800525a:	46bd      	mov	sp, r7
 800525c:	b013      	add	sp, #76	; 0x4c
 800525e:	bd90      	pop	{r4, r7, pc}

08005260 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005264:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <MX_I2C1_Init+0x74>)
 8005266:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <MX_I2C1_Init+0x78>)
 8005268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800526a:	4b1a      	ldr	r3, [pc, #104]	; (80052d4 <MX_I2C1_Init+0x74>)
 800526c:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <MX_I2C1_Init+0x7c>)
 800526e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005270:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <MX_I2C1_Init+0x74>)
 8005272:	2200      	movs	r2, #0
 8005274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005276:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <MX_I2C1_Init+0x74>)
 8005278:	2201      	movs	r2, #1
 800527a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800527c:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <MX_I2C1_Init+0x74>)
 800527e:	2200      	movs	r2, #0
 8005280:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005282:	4b14      	ldr	r3, [pc, #80]	; (80052d4 <MX_I2C1_Init+0x74>)
 8005284:	2200      	movs	r2, #0
 8005286:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005288:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <MX_I2C1_Init+0x74>)
 800528a:	2200      	movs	r2, #0
 800528c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800528e:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <MX_I2C1_Init+0x74>)
 8005290:	2200      	movs	r2, #0
 8005292:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005294:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <MX_I2C1_Init+0x74>)
 8005296:	2200      	movs	r2, #0
 8005298:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800529a:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <MX_I2C1_Init+0x74>)
 800529c:	0018      	movs	r0, r3
 800529e:	f000 fee9 	bl	8006074 <HAL_I2C_Init>
 80052a2:	1e03      	subs	r3, r0, #0
 80052a4:	d001      	beq.n	80052aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80052a6:	f000 f953 	bl	8005550 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <MX_I2C1_Init+0x74>)
 80052ac:	2100      	movs	r1, #0
 80052ae:	0018      	movs	r0, r3
 80052b0:	f000 ff76 	bl	80061a0 <HAL_I2CEx_ConfigAnalogFilter>
 80052b4:	1e03      	subs	r3, r0, #0
 80052b6:	d001      	beq.n	80052bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80052b8:	f000 f94a 	bl	8005550 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <MX_I2C1_Init+0x74>)
 80052be:	2100      	movs	r1, #0
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 ffb9 	bl	8006238 <HAL_I2CEx_ConfigDigitalFilter>
 80052c6:	1e03      	subs	r3, r0, #0
 80052c8:	d001      	beq.n	80052ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80052ca:	f000 f941 	bl	8005550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	200003d8 	.word	0x200003d8
 80052d8:	40005400 	.word	0x40005400
 80052dc:	00303d5b 	.word	0x00303d5b

080052e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80052e4:	4b13      	ldr	r3, [pc, #76]	; (8005334 <MX_RTC_Init+0x54>)
 80052e6:	4a14      	ldr	r2, [pc, #80]	; (8005338 <MX_RTC_Init+0x58>)
 80052e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <MX_RTC_Init+0x54>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80052f0:	4b10      	ldr	r3, [pc, #64]	; (8005334 <MX_RTC_Init+0x54>)
 80052f2:	227f      	movs	r2, #127	; 0x7f
 80052f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80052f6:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <MX_RTC_Init+0x54>)
 80052f8:	22ff      	movs	r2, #255	; 0xff
 80052fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <MX_RTC_Init+0x54>)
 80052fe:	2200      	movs	r2, #0
 8005300:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <MX_RTC_Init+0x54>)
 8005304:	2200      	movs	r2, #0
 8005306:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <MX_RTC_Init+0x54>)
 800530a:	2200      	movs	r2, #0
 800530c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800530e:	4b09      	ldr	r3, [pc, #36]	; (8005334 <MX_RTC_Init+0x54>)
 8005310:	2280      	movs	r2, #128	; 0x80
 8005312:	05d2      	lsls	r2, r2, #23
 8005314:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <MX_RTC_Init+0x54>)
 8005318:	2200      	movs	r2, #0
 800531a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <MX_RTC_Init+0x54>)
 800531e:	0018      	movs	r0, r3
 8005320:	f001 fe16 	bl	8006f50 <HAL_RTC_Init>
 8005324:	1e03      	subs	r3, r0, #0
 8005326:	d001      	beq.n	800532c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8005328:	f000 f912 	bl	8005550 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800532c:	46c0      	nop			; (mov r8, r8)
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	20000424 	.word	0x20000424
 8005338:	40002800 	.word	0x40002800

0800533c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005340:	4b1b      	ldr	r3, [pc, #108]	; (80053b0 <MX_SPI1_Init+0x74>)
 8005342:	4a1c      	ldr	r2, [pc, #112]	; (80053b4 <MX_SPI1_Init+0x78>)
 8005344:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005346:	4b1a      	ldr	r3, [pc, #104]	; (80053b0 <MX_SPI1_Init+0x74>)
 8005348:	2282      	movs	r2, #130	; 0x82
 800534a:	0052      	lsls	r2, r2, #1
 800534c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800534e:	4b18      	ldr	r3, [pc, #96]	; (80053b0 <MX_SPI1_Init+0x74>)
 8005350:	2200      	movs	r2, #0
 8005352:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005354:	4b16      	ldr	r3, [pc, #88]	; (80053b0 <MX_SPI1_Init+0x74>)
 8005356:	22e0      	movs	r2, #224	; 0xe0
 8005358:	00d2      	lsls	r2, r2, #3
 800535a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800535c:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <MX_SPI1_Init+0x74>)
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005362:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <MX_SPI1_Init+0x74>)
 8005364:	2200      	movs	r2, #0
 8005366:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005368:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <MX_SPI1_Init+0x74>)
 800536a:	2280      	movs	r2, #128	; 0x80
 800536c:	0092      	lsls	r2, r2, #2
 800536e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <MX_SPI1_Init+0x74>)
 8005372:	2200      	movs	r2, #0
 8005374:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005376:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <MX_SPI1_Init+0x74>)
 8005378:	2200      	movs	r2, #0
 800537a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800537c:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <MX_SPI1_Init+0x74>)
 800537e:	2200      	movs	r2, #0
 8005380:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005382:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <MX_SPI1_Init+0x74>)
 8005384:	2200      	movs	r2, #0
 8005386:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005388:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <MX_SPI1_Init+0x74>)
 800538a:	2207      	movs	r2, #7
 800538c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <MX_SPI1_Init+0x74>)
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005394:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <MX_SPI1_Init+0x74>)
 8005396:	2208      	movs	r2, #8
 8005398:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <MX_SPI1_Init+0x74>)
 800539c:	0018      	movs	r0, r3
 800539e:	f001 ff1b 	bl	80071d8 <HAL_SPI_Init>
 80053a2:	1e03      	subs	r3, r0, #0
 80053a4:	d001      	beq.n	80053aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80053a6:	f000 f8d3 	bl	8005550 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000450 	.word	0x20000450
 80053b4:	40013000 	.word	0x40013000

080053b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <MX_TIM16_Init+0x44>)
 80053be:	4a10      	ldr	r2, [pc, #64]	; (8005400 <MX_TIM16_Init+0x48>)
 80053c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16;
 80053c2:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <MX_TIM16_Init+0x44>)
 80053c4:	2210      	movs	r2, #16
 80053c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <MX_TIM16_Init+0x44>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80053ce:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <MX_TIM16_Init+0x44>)
 80053d0:	4a0c      	ldr	r2, [pc, #48]	; (8005404 <MX_TIM16_Init+0x4c>)
 80053d2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <MX_TIM16_Init+0x44>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80053da:	4b08      	ldr	r3, [pc, #32]	; (80053fc <MX_TIM16_Init+0x44>)
 80053dc:	2200      	movs	r2, #0
 80053de:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <MX_TIM16_Init+0x44>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80053e6:	4b05      	ldr	r3, [pc, #20]	; (80053fc <MX_TIM16_Init+0x44>)
 80053e8:	0018      	movs	r0, r3
 80053ea:	f002 fe03 	bl	8007ff4 <HAL_TIM_Base_Init>
 80053ee:	1e03      	subs	r3, r0, #0
 80053f0:	d001      	beq.n	80053f6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80053f2:	f000 f8ad 	bl	8005550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000544 	.word	0x20000544
 8005400:	40014400 	.word	0x40014400
 8005404:	0000ffff 	.word	0x0000ffff

08005408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800540c:	4b23      	ldr	r3, [pc, #140]	; (800549c <MX_USART2_UART_Init+0x94>)
 800540e:	4a24      	ldr	r2, [pc, #144]	; (80054a0 <MX_USART2_UART_Init+0x98>)
 8005410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005412:	4b22      	ldr	r3, [pc, #136]	; (800549c <MX_USART2_UART_Init+0x94>)
 8005414:	22e1      	movs	r2, #225	; 0xe1
 8005416:	0252      	lsls	r2, r2, #9
 8005418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800541a:	4b20      	ldr	r3, [pc, #128]	; (800549c <MX_USART2_UART_Init+0x94>)
 800541c:	2200      	movs	r2, #0
 800541e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005420:	4b1e      	ldr	r3, [pc, #120]	; (800549c <MX_USART2_UART_Init+0x94>)
 8005422:	2200      	movs	r2, #0
 8005424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005426:	4b1d      	ldr	r3, [pc, #116]	; (800549c <MX_USART2_UART_Init+0x94>)
 8005428:	2200      	movs	r2, #0
 800542a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800542c:	4b1b      	ldr	r3, [pc, #108]	; (800549c <MX_USART2_UART_Init+0x94>)
 800542e:	220c      	movs	r2, #12
 8005430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005432:	4b1a      	ldr	r3, [pc, #104]	; (800549c <MX_USART2_UART_Init+0x94>)
 8005434:	2200      	movs	r2, #0
 8005436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005438:	4b18      	ldr	r3, [pc, #96]	; (800549c <MX_USART2_UART_Init+0x94>)
 800543a:	2200      	movs	r2, #0
 800543c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800543e:	4b17      	ldr	r3, [pc, #92]	; (800549c <MX_USART2_UART_Init+0x94>)
 8005440:	2200      	movs	r2, #0
 8005442:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005444:	4b15      	ldr	r3, [pc, #84]	; (800549c <MX_USART2_UART_Init+0x94>)
 8005446:	2200      	movs	r2, #0
 8005448:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800544a:	4b14      	ldr	r3, [pc, #80]	; (800549c <MX_USART2_UART_Init+0x94>)
 800544c:	2200      	movs	r2, #0
 800544e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005450:	4b12      	ldr	r3, [pc, #72]	; (800549c <MX_USART2_UART_Init+0x94>)
 8005452:	0018      	movs	r0, r3
 8005454:	f002 feea 	bl	800822c <HAL_UART_Init>
 8005458:	1e03      	subs	r3, r0, #0
 800545a:	d001      	beq.n	8005460 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800545c:	f000 f878 	bl	8005550 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005460:	4b0e      	ldr	r3, [pc, #56]	; (800549c <MX_USART2_UART_Init+0x94>)
 8005462:	2100      	movs	r1, #0
 8005464:	0018      	movs	r0, r3
 8005466:	f003 fb89 	bl	8008b7c <HAL_UARTEx_SetTxFifoThreshold>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d001      	beq.n	8005472 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800546e:	f000 f86f 	bl	8005550 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005472:	4b0a      	ldr	r3, [pc, #40]	; (800549c <MX_USART2_UART_Init+0x94>)
 8005474:	2100      	movs	r1, #0
 8005476:	0018      	movs	r0, r3
 8005478:	f003 fbc0 	bl	8008bfc <HAL_UARTEx_SetRxFifoThreshold>
 800547c:	1e03      	subs	r3, r0, #0
 800547e:	d001      	beq.n	8005484 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005480:	f000 f866 	bl	8005550 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005484:	4b05      	ldr	r3, [pc, #20]	; (800549c <MX_USART2_UART_Init+0x94>)
 8005486:	0018      	movs	r0, r3
 8005488:	f003 fb3e 	bl	8008b08 <HAL_UARTEx_DisableFifoMode>
 800548c:	1e03      	subs	r3, r0, #0
 800548e:	d001      	beq.n	8005494 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005490:	f000 f85e 	bl	8005550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005494:	46c0      	nop			; (mov r8, r8)
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	200004b4 	.word	0x200004b4
 80054a0:	40004400 	.word	0x40004400

080054a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80054a4:	b590      	push	{r4, r7, lr}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054aa:	240c      	movs	r4, #12
 80054ac:	193b      	adds	r3, r7, r4
 80054ae:	0018      	movs	r0, r3
 80054b0:	2314      	movs	r3, #20
 80054b2:	001a      	movs	r2, r3
 80054b4:	2100      	movs	r1, #0
 80054b6:	f003 fc6b 	bl	8008d90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054ba:	4b23      	ldr	r3, [pc, #140]	; (8005548 <MX_GPIO_Init+0xa4>)
 80054bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054be:	4b22      	ldr	r3, [pc, #136]	; (8005548 <MX_GPIO_Init+0xa4>)
 80054c0:	2104      	movs	r1, #4
 80054c2:	430a      	orrs	r2, r1
 80054c4:	635a      	str	r2, [r3, #52]	; 0x34
 80054c6:	4b20      	ldr	r3, [pc, #128]	; (8005548 <MX_GPIO_Init+0xa4>)
 80054c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ca:	2204      	movs	r2, #4
 80054cc:	4013      	ands	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]
 80054d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d2:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <MX_GPIO_Init+0xa4>)
 80054d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d6:	4b1c      	ldr	r3, [pc, #112]	; (8005548 <MX_GPIO_Init+0xa4>)
 80054d8:	2101      	movs	r1, #1
 80054da:	430a      	orrs	r2, r1
 80054dc:	635a      	str	r2, [r3, #52]	; 0x34
 80054de:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <MX_GPIO_Init+0xa4>)
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	2201      	movs	r2, #1
 80054e4:	4013      	ands	r3, r2
 80054e6:	607b      	str	r3, [r7, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4817      	ldr	r0, [pc, #92]	; (800554c <MX_GPIO_Init+0xa8>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	0019      	movs	r1, r3
 80054f4:	f000 fda0 	bl	8006038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80054f8:	193b      	adds	r3, r7, r4
 80054fa:	2280      	movs	r2, #128	; 0x80
 80054fc:	0192      	lsls	r2, r2, #6
 80054fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005500:	193b      	adds	r3, r7, r4
 8005502:	2200      	movs	r2, #0
 8005504:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005506:	193b      	adds	r3, r7, r4
 8005508:	2200      	movs	r2, #0
 800550a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800550c:	193b      	adds	r3, r7, r4
 800550e:	4a0f      	ldr	r2, [pc, #60]	; (800554c <MX_GPIO_Init+0xa8>)
 8005510:	0019      	movs	r1, r3
 8005512:	0010      	movs	r0, r2
 8005514:	f000 fc2c 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005518:	0021      	movs	r1, r4
 800551a:	187b      	adds	r3, r7, r1
 800551c:	2280      	movs	r2, #128	; 0x80
 800551e:	0092      	lsls	r2, r2, #2
 8005520:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005522:	187b      	adds	r3, r7, r1
 8005524:	2201      	movs	r2, #1
 8005526:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005528:	187b      	adds	r3, r7, r1
 800552a:	2200      	movs	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552e:	187b      	adds	r3, r7, r1
 8005530:	2200      	movs	r2, #0
 8005532:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005534:	187b      	adds	r3, r7, r1
 8005536:	4a05      	ldr	r2, [pc, #20]	; (800554c <MX_GPIO_Init+0xa8>)
 8005538:	0019      	movs	r1, r3
 800553a:	0010      	movs	r0, r2
 800553c:	f000 fc18 	bl	8005d70 <HAL_GPIO_Init>

}
 8005540:	46c0      	nop			; (mov r8, r8)
 8005542:	46bd      	mov	sp, r7
 8005544:	b009      	add	sp, #36	; 0x24
 8005546:	bd90      	pop	{r4, r7, pc}
 8005548:	40021000 	.word	0x40021000
 800554c:	50000800 	.word	0x50000800

08005550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005554:	b672      	cpsid	i
}
 8005556:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8005558:	e7fe      	b.n	8005558 <Error_Handler+0x8>
	...

0800555c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005562:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <HAL_MspInit+0x4c>)
 8005564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005566:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <HAL_MspInit+0x4c>)
 8005568:	2101      	movs	r1, #1
 800556a:	430a      	orrs	r2, r1
 800556c:	641a      	str	r2, [r3, #64]	; 0x40
 800556e:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <HAL_MspInit+0x4c>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	2201      	movs	r2, #1
 8005574:	4013      	ands	r3, r2
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <HAL_MspInit+0x4c>)
 800557c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800557e:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <HAL_MspInit+0x4c>)
 8005580:	2180      	movs	r1, #128	; 0x80
 8005582:	0549      	lsls	r1, r1, #21
 8005584:	430a      	orrs	r2, r1
 8005586:	63da      	str	r2, [r3, #60]	; 0x3c
 8005588:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <HAL_MspInit+0x4c>)
 800558a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	055b      	lsls	r3, r3, #21
 8005590:	4013      	ands	r3, r2
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8005596:	23c0      	movs	r3, #192	; 0xc0
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	0018      	movs	r0, r3
 800559c:	f000 fb1e 	bl	8005bdc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055a0:	46c0      	nop			; (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b002      	add	sp, #8
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40021000 	.word	0x40021000

080055ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b091      	sub	sp, #68	; 0x44
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b4:	232c      	movs	r3, #44	; 0x2c
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	0018      	movs	r0, r3
 80055ba:	2314      	movs	r3, #20
 80055bc:	001a      	movs	r2, r3
 80055be:	2100      	movs	r1, #0
 80055c0:	f003 fbe6 	bl	8008d90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80055c4:	2410      	movs	r4, #16
 80055c6:	193b      	adds	r3, r7, r4
 80055c8:	0018      	movs	r0, r3
 80055ca:	231c      	movs	r3, #28
 80055cc:	001a      	movs	r2, r3
 80055ce:	2100      	movs	r1, #0
 80055d0:	f003 fbde 	bl	8008d90 <memset>
  if(hi2c->Instance==I2C1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a23      	ldr	r2, [pc, #140]	; (8005668 <HAL_I2C_MspInit+0xbc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d13f      	bne.n	800565e <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80055de:	193b      	adds	r3, r7, r4
 80055e0:	2220      	movs	r2, #32
 80055e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80055e4:	193b      	adds	r3, r7, r4
 80055e6:	2200      	movs	r2, #0
 80055e8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055ea:	193b      	adds	r3, r7, r4
 80055ec:	0018      	movs	r0, r3
 80055ee:	f001 fb7b 	bl	8006ce8 <HAL_RCCEx_PeriphCLKConfig>
 80055f2:	1e03      	subs	r3, r0, #0
 80055f4:	d001      	beq.n	80055fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80055f6:	f7ff ffab 	bl	8005550 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055fa:	4b1c      	ldr	r3, [pc, #112]	; (800566c <HAL_I2C_MspInit+0xc0>)
 80055fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055fe:	4b1b      	ldr	r3, [pc, #108]	; (800566c <HAL_I2C_MspInit+0xc0>)
 8005600:	2101      	movs	r1, #1
 8005602:	430a      	orrs	r2, r1
 8005604:	635a      	str	r2, [r3, #52]	; 0x34
 8005606:	4b19      	ldr	r3, [pc, #100]	; (800566c <HAL_I2C_MspInit+0xc0>)
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	2201      	movs	r2, #1
 800560c:	4013      	ands	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005612:	212c      	movs	r1, #44	; 0x2c
 8005614:	187b      	adds	r3, r7, r1
 8005616:	22c0      	movs	r2, #192	; 0xc0
 8005618:	00d2      	lsls	r2, r2, #3
 800561a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800561c:	187b      	adds	r3, r7, r1
 800561e:	2212      	movs	r2, #18
 8005620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005622:	187b      	adds	r3, r7, r1
 8005624:	2200      	movs	r2, #0
 8005626:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005628:	187b      	adds	r3, r7, r1
 800562a:	2200      	movs	r2, #0
 800562c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800562e:	187b      	adds	r3, r7, r1
 8005630:	2206      	movs	r2, #6
 8005632:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005634:	187a      	adds	r2, r7, r1
 8005636:	23a0      	movs	r3, #160	; 0xa0
 8005638:	05db      	lsls	r3, r3, #23
 800563a:	0011      	movs	r1, r2
 800563c:	0018      	movs	r0, r3
 800563e:	f000 fb97 	bl	8005d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <HAL_I2C_MspInit+0xc0>)
 8005644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005646:	4b09      	ldr	r3, [pc, #36]	; (800566c <HAL_I2C_MspInit+0xc0>)
 8005648:	2180      	movs	r1, #128	; 0x80
 800564a:	0389      	lsls	r1, r1, #14
 800564c:	430a      	orrs	r2, r1
 800564e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <HAL_I2C_MspInit+0xc0>)
 8005652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	039b      	lsls	r3, r3, #14
 8005658:	4013      	ands	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	46bd      	mov	sp, r7
 8005662:	b011      	add	sp, #68	; 0x44
 8005664:	bd90      	pop	{r4, r7, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	40005400 	.word	0x40005400
 800566c:	40021000 	.word	0x40021000

08005670 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b08b      	sub	sp, #44	; 0x2c
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005678:	240c      	movs	r4, #12
 800567a:	193b      	adds	r3, r7, r4
 800567c:	0018      	movs	r0, r3
 800567e:	231c      	movs	r3, #28
 8005680:	001a      	movs	r2, r3
 8005682:	2100      	movs	r1, #0
 8005684:	f003 fb84 	bl	8008d90 <memset>
  if(hrtc->Instance==RTC)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <HAL_RTC_MspInit+0x74>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d124      	bne.n	80056dc <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005692:	193b      	adds	r3, r7, r4
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	0292      	lsls	r2, r2, #10
 8005698:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800569a:	193b      	adds	r3, r7, r4
 800569c:	2280      	movs	r2, #128	; 0x80
 800569e:	0092      	lsls	r2, r2, #2
 80056a0:	619a      	str	r2, [r3, #24]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056a2:	193b      	adds	r3, r7, r4
 80056a4:	0018      	movs	r0, r3
 80056a6:	f001 fb1f 	bl	8006ce8 <HAL_RCCEx_PeriphCLKConfig>
 80056aa:	1e03      	subs	r3, r0, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80056ae:	f7ff ff4f 	bl	8005550 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <HAL_RTC_MspInit+0x78>)
 80056b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <HAL_RTC_MspInit+0x78>)
 80056b8:	2180      	movs	r1, #128	; 0x80
 80056ba:	0209      	lsls	r1, r1, #8
 80056bc:	430a      	orrs	r2, r1
 80056be:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <HAL_RTC_MspInit+0x78>)
 80056c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c4:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <HAL_RTC_MspInit+0x78>)
 80056c6:	2180      	movs	r1, #128	; 0x80
 80056c8:	00c9      	lsls	r1, r1, #3
 80056ca:	430a      	orrs	r2, r1
 80056cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <HAL_RTC_MspInit+0x78>)
 80056d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d2:	2380      	movs	r3, #128	; 0x80
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4013      	ands	r3, r2
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80056dc:	46c0      	nop			; (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	b00b      	add	sp, #44	; 0x2c
 80056e2:	bd90      	pop	{r4, r7, pc}
 80056e4:	40002800 	.word	0x40002800
 80056e8:	40021000 	.word	0x40021000

080056ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80056ec:	b590      	push	{r4, r7, lr}
 80056ee:	b08b      	sub	sp, #44	; 0x2c
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f4:	2414      	movs	r4, #20
 80056f6:	193b      	adds	r3, r7, r4
 80056f8:	0018      	movs	r0, r3
 80056fa:	2314      	movs	r3, #20
 80056fc:	001a      	movs	r2, r3
 80056fe:	2100      	movs	r1, #0
 8005700:	f003 fb46 	bl	8008d90 <memset>
  if(hspi->Instance==SPI1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <HAL_SPI_MspInit+0x8c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d130      	bne.n	8005770 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800570e:	4b1b      	ldr	r3, [pc, #108]	; (800577c <HAL_SPI_MspInit+0x90>)
 8005710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005712:	4b1a      	ldr	r3, [pc, #104]	; (800577c <HAL_SPI_MspInit+0x90>)
 8005714:	2180      	movs	r1, #128	; 0x80
 8005716:	0149      	lsls	r1, r1, #5
 8005718:	430a      	orrs	r2, r1
 800571a:	641a      	str	r2, [r3, #64]	; 0x40
 800571c:	4b17      	ldr	r3, [pc, #92]	; (800577c <HAL_SPI_MspInit+0x90>)
 800571e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005720:	2380      	movs	r3, #128	; 0x80
 8005722:	015b      	lsls	r3, r3, #5
 8005724:	4013      	ands	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800572a:	4b14      	ldr	r3, [pc, #80]	; (800577c <HAL_SPI_MspInit+0x90>)
 800572c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <HAL_SPI_MspInit+0x90>)
 8005730:	2101      	movs	r1, #1
 8005732:	430a      	orrs	r2, r1
 8005734:	635a      	str	r2, [r3, #52]	; 0x34
 8005736:	4b11      	ldr	r3, [pc, #68]	; (800577c <HAL_SPI_MspInit+0x90>)
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	2201      	movs	r2, #1
 800573c:	4013      	ands	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005742:	0021      	movs	r1, r4
 8005744:	187b      	adds	r3, r7, r1
 8005746:	22e0      	movs	r2, #224	; 0xe0
 8005748:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800574a:	187b      	adds	r3, r7, r1
 800574c:	2202      	movs	r2, #2
 800574e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005750:	187b      	adds	r3, r7, r1
 8005752:	2200      	movs	r2, #0
 8005754:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005756:	187b      	adds	r3, r7, r1
 8005758:	2200      	movs	r2, #0
 800575a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800575c:	187b      	adds	r3, r7, r1
 800575e:	2200      	movs	r2, #0
 8005760:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005762:	187a      	adds	r2, r7, r1
 8005764:	23a0      	movs	r3, #160	; 0xa0
 8005766:	05db      	lsls	r3, r3, #23
 8005768:	0011      	movs	r1, r2
 800576a:	0018      	movs	r0, r3
 800576c:	f000 fb00 	bl	8005d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005770:	46c0      	nop			; (mov r8, r8)
 8005772:	46bd      	mov	sp, r7
 8005774:	b00b      	add	sp, #44	; 0x2c
 8005776:	bd90      	pop	{r4, r7, pc}
 8005778:	40013000 	.word	0x40013000
 800577c:	40021000 	.word	0x40021000

08005780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <HAL_TIM_Base_MspInit+0x38>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d10d      	bne.n	80057ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <HAL_TIM_Base_MspInit+0x3c>)
 8005794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005796:	4b09      	ldr	r3, [pc, #36]	; (80057bc <HAL_TIM_Base_MspInit+0x3c>)
 8005798:	2180      	movs	r1, #128	; 0x80
 800579a:	0289      	lsls	r1, r1, #10
 800579c:	430a      	orrs	r2, r1
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_TIM_Base_MspInit+0x3c>)
 80057a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a4:	2380      	movs	r3, #128	; 0x80
 80057a6:	029b      	lsls	r3, r3, #10
 80057a8:	4013      	ands	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b004      	add	sp, #16
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40021000 	.word	0x40021000

080057c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057c0:	b590      	push	{r4, r7, lr}
 80057c2:	b091      	sub	sp, #68	; 0x44
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057c8:	232c      	movs	r3, #44	; 0x2c
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	0018      	movs	r0, r3
 80057ce:	2314      	movs	r3, #20
 80057d0:	001a      	movs	r2, r3
 80057d2:	2100      	movs	r1, #0
 80057d4:	f003 fadc 	bl	8008d90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057d8:	2410      	movs	r4, #16
 80057da:	193b      	adds	r3, r7, r4
 80057dc:	0018      	movs	r0, r3
 80057de:	231c      	movs	r3, #28
 80057e0:	001a      	movs	r2, r3
 80057e2:	2100      	movs	r1, #0
 80057e4:	f003 fad4 	bl	8008d90 <memset>
  if(huart->Instance==USART2)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a22      	ldr	r2, [pc, #136]	; (8005878 <HAL_UART_MspInit+0xb8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d13e      	bne.n	8005870 <HAL_UART_MspInit+0xb0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80057f2:	193b      	adds	r3, r7, r4
 80057f4:	2202      	movs	r2, #2
 80057f6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80057f8:	193b      	adds	r3, r7, r4
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057fe:	193b      	adds	r3, r7, r4
 8005800:	0018      	movs	r0, r3
 8005802:	f001 fa71 	bl	8006ce8 <HAL_RCCEx_PeriphCLKConfig>
 8005806:	1e03      	subs	r3, r0, #0
 8005808:	d001      	beq.n	800580e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800580a:	f7ff fea1 	bl	8005550 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800580e:	4b1b      	ldr	r3, [pc, #108]	; (800587c <HAL_UART_MspInit+0xbc>)
 8005810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005812:	4b1a      	ldr	r3, [pc, #104]	; (800587c <HAL_UART_MspInit+0xbc>)
 8005814:	2180      	movs	r1, #128	; 0x80
 8005816:	0289      	lsls	r1, r1, #10
 8005818:	430a      	orrs	r2, r1
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c
 800581c:	4b17      	ldr	r3, [pc, #92]	; (800587c <HAL_UART_MspInit+0xbc>)
 800581e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	029b      	lsls	r3, r3, #10
 8005824:	4013      	ands	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800582a:	4b14      	ldr	r3, [pc, #80]	; (800587c <HAL_UART_MspInit+0xbc>)
 800582c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <HAL_UART_MspInit+0xbc>)
 8005830:	2101      	movs	r1, #1
 8005832:	430a      	orrs	r2, r1
 8005834:	635a      	str	r2, [r3, #52]	; 0x34
 8005836:	4b11      	ldr	r3, [pc, #68]	; (800587c <HAL_UART_MspInit+0xbc>)
 8005838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583a:	2201      	movs	r2, #1
 800583c:	4013      	ands	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005842:	212c      	movs	r1, #44	; 0x2c
 8005844:	187b      	adds	r3, r7, r1
 8005846:	220c      	movs	r2, #12
 8005848:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584a:	187b      	adds	r3, r7, r1
 800584c:	2202      	movs	r2, #2
 800584e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005850:	187b      	adds	r3, r7, r1
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005856:	187b      	adds	r3, r7, r1
 8005858:	2200      	movs	r2, #0
 800585a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800585c:	187b      	adds	r3, r7, r1
 800585e:	2201      	movs	r2, #1
 8005860:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005862:	187a      	adds	r2, r7, r1
 8005864:	23a0      	movs	r3, #160	; 0xa0
 8005866:	05db      	lsls	r3, r3, #23
 8005868:	0011      	movs	r1, r2
 800586a:	0018      	movs	r0, r3
 800586c:	f000 fa80 	bl	8005d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b011      	add	sp, #68	; 0x44
 8005876:	bd90      	pop	{r4, r7, pc}
 8005878:	40004400 	.word	0x40004400
 800587c:	40021000 	.word	0x40021000

08005880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005884:	e7fe      	b.n	8005884 <NMI_Handler+0x4>

08005886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800588a:	e7fe      	b.n	800588a <HardFault_Handler+0x4>

0800588c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005890:	46c0      	nop			; (mov r8, r8)
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058a4:	f000 f95a 	bl	8005b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058a8:	46c0      	nop			; (mov r8, r8)
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	af00      	add	r7, sp, #0
	return 1;
 80058b2:	2301      	movs	r3, #1
}
 80058b4:	0018      	movs	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <_kill>:

int _kill(int pid, int sig)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80058c4:	f003 fa3a 	bl	8008d3c <__errno>
 80058c8:	0003      	movs	r3, r0
 80058ca:	2216      	movs	r2, #22
 80058cc:	601a      	str	r2, [r3, #0]
	return -1;
 80058ce:	2301      	movs	r3, #1
 80058d0:	425b      	negs	r3, r3
}
 80058d2:	0018      	movs	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b002      	add	sp, #8
 80058d8:	bd80      	pop	{r7, pc}

080058da <_exit>:

void _exit (int status)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80058e2:	2301      	movs	r3, #1
 80058e4:	425a      	negs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	0011      	movs	r1, r2
 80058ea:	0018      	movs	r0, r3
 80058ec:	f7ff ffe5 	bl	80058ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80058f0:	e7fe      	b.n	80058f0 <_exit+0x16>

080058f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b086      	sub	sp, #24
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	e00a      	b.n	800591a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005904:	e000      	b.n	8005908 <_read+0x16>
 8005906:	bf00      	nop
 8005908:	0001      	movs	r1, r0
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	60ba      	str	r2, [r7, #8]
 8005910:	b2ca      	uxtb	r2, r1
 8005912:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	3301      	adds	r3, #1
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	429a      	cmp	r2, r3
 8005920:	dbf0      	blt.n	8005904 <_read+0x12>
	}

return len;
 8005922:	687b      	ldr	r3, [r7, #4]
}
 8005924:	0018      	movs	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	b006      	add	sp, #24
 800592a:	bd80      	pop	{r7, pc}

0800592c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e009      	b.n	8005952 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	60ba      	str	r2, [r7, #8]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	0018      	movs	r0, r3
 8005948:	e000      	b.n	800594c <_write+0x20>
 800594a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	3301      	adds	r3, #1
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	429a      	cmp	r2, r3
 8005958:	dbf1      	blt.n	800593e <_write+0x12>
	}
	return len;
 800595a:	687b      	ldr	r3, [r7, #4]
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b006      	add	sp, #24
 8005962:	bd80      	pop	{r7, pc}

08005964 <_close>:

int _close(int file)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	return -1;
 800596c:	2301      	movs	r3, #1
 800596e:	425b      	negs	r3, r3
}
 8005970:	0018      	movs	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	b002      	add	sp, #8
 8005976:	bd80      	pop	{r7, pc}

08005978 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2280      	movs	r2, #128	; 0x80
 8005986:	0192      	lsls	r2, r2, #6
 8005988:	605a      	str	r2, [r3, #4]
	return 0;
 800598a:	2300      	movs	r3, #0
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}

08005994 <_isatty>:

int _isatty(int file)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	return 1;
 800599c:	2301      	movs	r3, #1
}
 800599e:	0018      	movs	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b002      	add	sp, #8
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
	return 0;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	0018      	movs	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b004      	add	sp, #16
 80059ba:	bd80      	pop	{r7, pc}

080059bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059c4:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <_sbrk+0x5c>)
 80059c6:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <_sbrk+0x60>)
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059d0:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <_sbrk+0x64>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059d8:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <_sbrk+0x64>)
 80059da:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <_sbrk+0x68>)
 80059dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059de:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <_sbrk+0x64>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	18d3      	adds	r3, r2, r3
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d207      	bcs.n	80059fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80059ec:	f003 f9a6 	bl	8008d3c <__errno>
 80059f0:	0003      	movs	r3, r0
 80059f2:	220c      	movs	r2, #12
 80059f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059f6:	2301      	movs	r3, #1
 80059f8:	425b      	negs	r3, r3
 80059fa:	e009      	b.n	8005a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059fc:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <_sbrk+0x64>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <_sbrk+0x64>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	18d2      	adds	r2, r2, r3
 8005a0a:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <_sbrk+0x64>)
 8005a0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b006      	add	sp, #24
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20009000 	.word	0x20009000
 8005a1c:	00000400 	.word	0x00000400
 8005a20:	20000218 	.word	0x20000218
 8005a24:	200005a8 	.word	0x200005a8

08005a28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a2c:	46c0      	nop			; (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <Reset_Handler>:
 8005a34:	480d      	ldr	r0, [pc, #52]	; (8005a6c <LoopForever+0x2>)
 8005a36:	4685      	mov	sp, r0
 8005a38:	f7ff fff6 	bl	8005a28 <SystemInit>
 8005a3c:	480c      	ldr	r0, [pc, #48]	; (8005a70 <LoopForever+0x6>)
 8005a3e:	490d      	ldr	r1, [pc, #52]	; (8005a74 <LoopForever+0xa>)
 8005a40:	4a0d      	ldr	r2, [pc, #52]	; (8005a78 <LoopForever+0xe>)
 8005a42:	2300      	movs	r3, #0
 8005a44:	e002      	b.n	8005a4c <LoopCopyDataInit>

08005a46 <CopyDataInit>:
 8005a46:	58d4      	ldr	r4, [r2, r3]
 8005a48:	50c4      	str	r4, [r0, r3]
 8005a4a:	3304      	adds	r3, #4

08005a4c <LoopCopyDataInit>:
 8005a4c:	18c4      	adds	r4, r0, r3
 8005a4e:	428c      	cmp	r4, r1
 8005a50:	d3f9      	bcc.n	8005a46 <CopyDataInit>
 8005a52:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <LoopForever+0x12>)
 8005a54:	4c0a      	ldr	r4, [pc, #40]	; (8005a80 <LoopForever+0x16>)
 8005a56:	2300      	movs	r3, #0
 8005a58:	e001      	b.n	8005a5e <LoopFillZerobss>

08005a5a <FillZerobss>:
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	3204      	adds	r2, #4

08005a5e <LoopFillZerobss>:
 8005a5e:	42a2      	cmp	r2, r4
 8005a60:	d3fb      	bcc.n	8005a5a <FillZerobss>
 8005a62:	f003 f971 	bl	8008d48 <__libc_init_array>
 8005a66:	f7ff f973 	bl	8004d50 <main>

08005a6a <LoopForever>:
 8005a6a:	e7fe      	b.n	8005a6a <LoopForever>
 8005a6c:	20009000 	.word	0x20009000
 8005a70:	20000000 	.word	0x20000000
 8005a74:	200001e8 	.word	0x200001e8
 8005a78:	0800dc88 	.word	0x0800dc88
 8005a7c:	200001e8 	.word	0x200001e8
 8005a80:	200005a4 	.word	0x200005a4

08005a84 <ADC1_IRQHandler>:
 8005a84:	e7fe      	b.n	8005a84 <ADC1_IRQHandler>
	...

08005a88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a8e:	1dfb      	adds	r3, r7, #7
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <HAL_Init+0x3c>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <HAL_Init+0x3c>)
 8005a9a:	2180      	movs	r1, #128	; 0x80
 8005a9c:	0049      	lsls	r1, r1, #1
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005aa2:	2003      	movs	r0, #3
 8005aa4:	f000 f810 	bl	8005ac8 <HAL_InitTick>
 8005aa8:	1e03      	subs	r3, r0, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005aac:	1dfb      	adds	r3, r7, #7
 8005aae:	2201      	movs	r2, #1
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	e001      	b.n	8005ab8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005ab4:	f7ff fd52 	bl	800555c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ab8:	1dfb      	adds	r3, r7, #7
 8005aba:	781b      	ldrb	r3, [r3, #0]
}
 8005abc:	0018      	movs	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b002      	add	sp, #8
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40022000 	.word	0x40022000

08005ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005ad0:	230f      	movs	r3, #15
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <HAL_InitTick+0x88>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02b      	beq.n	8005b38 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005ae0:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <HAL_InitTick+0x8c>)
 8005ae2:	681c      	ldr	r4, [r3, #0]
 8005ae4:	4b1a      	ldr	r3, [pc, #104]	; (8005b50 <HAL_InitTick+0x88>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	0019      	movs	r1, r3
 8005aea:	23fa      	movs	r3, #250	; 0xfa
 8005aec:	0098      	lsls	r0, r3, #2
 8005aee:	f7fa fb23 	bl	8000138 <__udivsi3>
 8005af2:	0003      	movs	r3, r0
 8005af4:	0019      	movs	r1, r3
 8005af6:	0020      	movs	r0, r4
 8005af8:	f7fa fb1e 	bl	8000138 <__udivsi3>
 8005afc:	0003      	movs	r3, r0
 8005afe:	0018      	movs	r0, r3
 8005b00:	f000 f929 	bl	8005d56 <HAL_SYSTICK_Config>
 8005b04:	1e03      	subs	r3, r0, #0
 8005b06:	d112      	bne.n	8005b2e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d80a      	bhi.n	8005b24 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	2301      	movs	r3, #1
 8005b12:	425b      	negs	r3, r3
 8005b14:	2200      	movs	r2, #0
 8005b16:	0018      	movs	r0, r3
 8005b18:	f000 f908 	bl	8005d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b1c:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <HAL_InitTick+0x90>)
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e00d      	b.n	8005b40 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005b24:	230f      	movs	r3, #15
 8005b26:	18fb      	adds	r3, r7, r3
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	e008      	b.n	8005b40 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005b2e:	230f      	movs	r3, #15
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	2201      	movs	r2, #1
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	e003      	b.n	8005b40 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005b38:	230f      	movs	r3, #15
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005b40:	230f      	movs	r3, #15
 8005b42:	18fb      	adds	r3, r7, r3
 8005b44:	781b      	ldrb	r3, [r3, #0]
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b005      	add	sp, #20
 8005b4c:	bd90      	pop	{r4, r7, pc}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	20000010 	.word	0x20000010
 8005b54:	20000008 	.word	0x20000008
 8005b58:	2000000c 	.word	0x2000000c

08005b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_IncTick+0x1c>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	001a      	movs	r2, r3
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_IncTick+0x20>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	18d2      	adds	r2, r2, r3
 8005b6c:	4b03      	ldr	r3, [pc, #12]	; (8005b7c <HAL_IncTick+0x20>)
 8005b6e:	601a      	str	r2, [r3, #0]
}
 8005b70:	46c0      	nop			; (mov r8, r8)
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	20000010 	.word	0x20000010
 8005b7c:	20000590 	.word	0x20000590

08005b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  return uwTick;
 8005b84:	4b02      	ldr	r3, [pc, #8]	; (8005b90 <HAL_GetTick+0x10>)
 8005b86:	681b      	ldr	r3, [r3, #0]
}
 8005b88:	0018      	movs	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	20000590 	.word	0x20000590

08005b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b9c:	f7ff fff0 	bl	8005b80 <HAL_GetTick>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3301      	adds	r3, #1
 8005bac:	d005      	beq.n	8005bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bae:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <HAL_Delay+0x44>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	001a      	movs	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	189b      	adds	r3, r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	f7ff ffe0 	bl	8005b80 <HAL_GetTick>
 8005bc0:	0002      	movs	r2, r0
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d8f7      	bhi.n	8005bbc <HAL_Delay+0x28>
  {
  }
}
 8005bcc:	46c0      	nop			; (mov r8, r8)
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b004      	add	sp, #16
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	20000010 	.word	0x20000010

08005bdc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005be4:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a06      	ldr	r2, [pc, #24]	; (8005c04 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	0019      	movs	r1, r3
 8005bee:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	601a      	str	r2, [r3, #0]
}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b002      	add	sp, #8
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	40010000 	.word	0x40010000
 8005c04:	fffff9ff 	.word	0xfffff9ff

08005c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	0002      	movs	r2, r0
 8005c10:	6039      	str	r1, [r7, #0]
 8005c12:	1dfb      	adds	r3, r7, #7
 8005c14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c16:	1dfb      	adds	r3, r7, #7
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c1c:	d828      	bhi.n	8005c70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c1e:	4a2f      	ldr	r2, [pc, #188]	; (8005cdc <__NVIC_SetPriority+0xd4>)
 8005c20:	1dfb      	adds	r3, r7, #7
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	b25b      	sxtb	r3, r3
 8005c26:	089b      	lsrs	r3, r3, #2
 8005c28:	33c0      	adds	r3, #192	; 0xc0
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	589b      	ldr	r3, [r3, r2]
 8005c2e:	1dfa      	adds	r2, r7, #7
 8005c30:	7812      	ldrb	r2, [r2, #0]
 8005c32:	0011      	movs	r1, r2
 8005c34:	2203      	movs	r2, #3
 8005c36:	400a      	ands	r2, r1
 8005c38:	00d2      	lsls	r2, r2, #3
 8005c3a:	21ff      	movs	r1, #255	; 0xff
 8005c3c:	4091      	lsls	r1, r2
 8005c3e:	000a      	movs	r2, r1
 8005c40:	43d2      	mvns	r2, r2
 8005c42:	401a      	ands	r2, r3
 8005c44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	019b      	lsls	r3, r3, #6
 8005c4a:	22ff      	movs	r2, #255	; 0xff
 8005c4c:	401a      	ands	r2, r3
 8005c4e:	1dfb      	adds	r3, r7, #7
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	0018      	movs	r0, r3
 8005c54:	2303      	movs	r3, #3
 8005c56:	4003      	ands	r3, r0
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c5c:	481f      	ldr	r0, [pc, #124]	; (8005cdc <__NVIC_SetPriority+0xd4>)
 8005c5e:	1dfb      	adds	r3, r7, #7
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	b25b      	sxtb	r3, r3
 8005c64:	089b      	lsrs	r3, r3, #2
 8005c66:	430a      	orrs	r2, r1
 8005c68:	33c0      	adds	r3, #192	; 0xc0
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005c6e:	e031      	b.n	8005cd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c70:	4a1b      	ldr	r2, [pc, #108]	; (8005ce0 <__NVIC_SetPriority+0xd8>)
 8005c72:	1dfb      	adds	r3, r7, #7
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	0019      	movs	r1, r3
 8005c78:	230f      	movs	r3, #15
 8005c7a:	400b      	ands	r3, r1
 8005c7c:	3b08      	subs	r3, #8
 8005c7e:	089b      	lsrs	r3, r3, #2
 8005c80:	3306      	adds	r3, #6
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	18d3      	adds	r3, r2, r3
 8005c86:	3304      	adds	r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	1dfa      	adds	r2, r7, #7
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	0011      	movs	r1, r2
 8005c90:	2203      	movs	r2, #3
 8005c92:	400a      	ands	r2, r1
 8005c94:	00d2      	lsls	r2, r2, #3
 8005c96:	21ff      	movs	r1, #255	; 0xff
 8005c98:	4091      	lsls	r1, r2
 8005c9a:	000a      	movs	r2, r1
 8005c9c:	43d2      	mvns	r2, r2
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	019b      	lsls	r3, r3, #6
 8005ca6:	22ff      	movs	r2, #255	; 0xff
 8005ca8:	401a      	ands	r2, r3
 8005caa:	1dfb      	adds	r3, r7, #7
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	4003      	ands	r3, r0
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005cb8:	4809      	ldr	r0, [pc, #36]	; (8005ce0 <__NVIC_SetPriority+0xd8>)
 8005cba:	1dfb      	adds	r3, r7, #7
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	001c      	movs	r4, r3
 8005cc0:	230f      	movs	r3, #15
 8005cc2:	4023      	ands	r3, r4
 8005cc4:	3b08      	subs	r3, #8
 8005cc6:	089b      	lsrs	r3, r3, #2
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	3306      	adds	r3, #6
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	18c3      	adds	r3, r0, r3
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	601a      	str	r2, [r3, #0]
}
 8005cd4:	46c0      	nop			; (mov r8, r8)
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b003      	add	sp, #12
 8005cda:	bd90      	pop	{r4, r7, pc}
 8005cdc:	e000e100 	.word	0xe000e100
 8005ce0:	e000ed00 	.word	0xe000ed00

08005ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	1e5a      	subs	r2, r3, #1
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	045b      	lsls	r3, r3, #17
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d301      	bcc.n	8005cfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e010      	b.n	8005d1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <SysTick_Config+0x44>)
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	3a01      	subs	r2, #1
 8005d02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d04:	2301      	movs	r3, #1
 8005d06:	425b      	negs	r3, r3
 8005d08:	2103      	movs	r1, #3
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f7ff ff7c 	bl	8005c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <SysTick_Config+0x44>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d16:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <SysTick_Config+0x44>)
 8005d18:	2207      	movs	r2, #7
 8005d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	0018      	movs	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b002      	add	sp, #8
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	e000e010 	.word	0xe000e010

08005d2c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	210f      	movs	r1, #15
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	1c02      	adds	r2, r0, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	187b      	adds	r3, r7, r1
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b25b      	sxtb	r3, r3
 8005d46:	0011      	movs	r1, r2
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f7ff ff5d 	bl	8005c08 <__NVIC_SetPriority>
}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	46bd      	mov	sp, r7
 8005d52:	b004      	add	sp, #16
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	0018      	movs	r0, r3
 8005d62:	f7ff ffbf 	bl	8005ce4 <SysTick_Config>
 8005d66:	0003      	movs	r3, r0
}
 8005d68:	0018      	movs	r0, r3
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	b002      	add	sp, #8
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d7e:	e147      	b.n	8006010 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2101      	movs	r1, #1
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4091      	lsls	r1, r2
 8005d8a:	000a      	movs	r2, r1
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d100      	bne.n	8005d98 <HAL_GPIO_Init+0x28>
 8005d96:	e138      	b.n	800600a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d005      	beq.n	8005db0 <HAL_GPIO_Init+0x40>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2203      	movs	r2, #3
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d130      	bne.n	8005e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	2203      	movs	r2, #3
 8005dbc:	409a      	lsls	r2, r3
 8005dbe:	0013      	movs	r3, r2
 8005dc0:	43da      	mvns	r2, r3
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	409a      	lsls	r2, r3
 8005dd2:	0013      	movs	r3, r2
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005de6:	2201      	movs	r2, #1
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	409a      	lsls	r2, r3
 8005dec:	0013      	movs	r3, r2
 8005dee:	43da      	mvns	r2, r3
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4013      	ands	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	091b      	lsrs	r3, r3, #4
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	401a      	ands	r2, r3
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	409a      	lsls	r2, r3
 8005e04:	0013      	movs	r3, r2
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2203      	movs	r2, #3
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d017      	beq.n	8005e4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	2203      	movs	r2, #3
 8005e2a:	409a      	lsls	r2, r3
 8005e2c:	0013      	movs	r3, r2
 8005e2e:	43da      	mvns	r2, r3
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4013      	ands	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	0013      	movs	r3, r2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2203      	movs	r2, #3
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d123      	bne.n	8005ea2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	08da      	lsrs	r2, r3, #3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3208      	adds	r2, #8
 8005e62:	0092      	lsls	r2, r2, #2
 8005e64:	58d3      	ldr	r3, [r2, r3]
 8005e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2207      	movs	r2, #7
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	220f      	movs	r2, #15
 8005e72:	409a      	lsls	r2, r3
 8005e74:	0013      	movs	r3, r2
 8005e76:	43da      	mvns	r2, r3
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2107      	movs	r1, #7
 8005e86:	400b      	ands	r3, r1
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	409a      	lsls	r2, r3
 8005e8c:	0013      	movs	r3, r2
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	08da      	lsrs	r2, r3, #3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3208      	adds	r2, #8
 8005e9c:	0092      	lsls	r2, r2, #2
 8005e9e:	6939      	ldr	r1, [r7, #16]
 8005ea0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	2203      	movs	r2, #3
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	0013      	movs	r3, r2
 8005eb2:	43da      	mvns	r2, r3
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2203      	movs	r2, #3
 8005ec0:	401a      	ands	r2, r3
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	409a      	lsls	r2, r3
 8005ec8:	0013      	movs	r3, r2
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	23c0      	movs	r3, #192	; 0xc0
 8005edc:	029b      	lsls	r3, r3, #10
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d100      	bne.n	8005ee4 <HAL_GPIO_Init+0x174>
 8005ee2:	e092      	b.n	800600a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005ee4:	4a50      	ldr	r2, [pc, #320]	; (8006028 <HAL_GPIO_Init+0x2b8>)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	089b      	lsrs	r3, r3, #2
 8005eea:	3318      	adds	r3, #24
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	589b      	ldr	r3, [r3, r2]
 8005ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	220f      	movs	r2, #15
 8005efc:	409a      	lsls	r2, r3
 8005efe:	0013      	movs	r3, r2
 8005f00:	43da      	mvns	r2, r3
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4013      	ands	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	23a0      	movs	r3, #160	; 0xa0
 8005f0c:	05db      	lsls	r3, r3, #23
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d013      	beq.n	8005f3a <HAL_GPIO_Init+0x1ca>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a45      	ldr	r2, [pc, #276]	; (800602c <HAL_GPIO_Init+0x2bc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00d      	beq.n	8005f36 <HAL_GPIO_Init+0x1c6>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a44      	ldr	r2, [pc, #272]	; (8006030 <HAL_GPIO_Init+0x2c0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <HAL_GPIO_Init+0x1c2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a43      	ldr	r2, [pc, #268]	; (8006034 <HAL_GPIO_Init+0x2c4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d101      	bne.n	8005f2e <HAL_GPIO_Init+0x1be>
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e006      	b.n	8005f3c <HAL_GPIO_Init+0x1cc>
 8005f2e:	2305      	movs	r3, #5
 8005f30:	e004      	b.n	8005f3c <HAL_GPIO_Init+0x1cc>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e002      	b.n	8005f3c <HAL_GPIO_Init+0x1cc>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <HAL_GPIO_Init+0x1cc>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	2103      	movs	r1, #3
 8005f40:	400a      	ands	r2, r1
 8005f42:	00d2      	lsls	r2, r2, #3
 8005f44:	4093      	lsls	r3, r2
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005f4c:	4936      	ldr	r1, [pc, #216]	; (8006028 <HAL_GPIO_Init+0x2b8>)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	089b      	lsrs	r3, r3, #2
 8005f52:	3318      	adds	r3, #24
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f5a:	4a33      	ldr	r2, [pc, #204]	; (8006028 <HAL_GPIO_Init+0x2b8>)
 8005f5c:	2380      	movs	r3, #128	; 0x80
 8005f5e:	58d3      	ldr	r3, [r2, r3]
 8005f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	43da      	mvns	r2, r3
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	025b      	lsls	r3, r3, #9
 8005f74:	4013      	ands	r3, r2
 8005f76:	d003      	beq.n	8005f80 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f80:	4929      	ldr	r1, [pc, #164]	; (8006028 <HAL_GPIO_Init+0x2b8>)
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8005f88:	4a27      	ldr	r2, [pc, #156]	; (8006028 <HAL_GPIO_Init+0x2b8>)
 8005f8a:	2384      	movs	r3, #132	; 0x84
 8005f8c:	58d3      	ldr	r3, [r2, r3]
 8005f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	43da      	mvns	r2, r3
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	4013      	ands	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	2380      	movs	r3, #128	; 0x80
 8005fa0:	029b      	lsls	r3, r3, #10
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d003      	beq.n	8005fae <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fae:	491e      	ldr	r1, [pc, #120]	; (8006028 <HAL_GPIO_Init+0x2b8>)
 8005fb0:	2284      	movs	r2, #132	; 0x84
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fb6:	4b1c      	ldr	r3, [pc, #112]	; (8006028 <HAL_GPIO_Init+0x2b8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	43da      	mvns	r2, r3
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	035b      	lsls	r3, r3, #13
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d003      	beq.n	8005fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fda:	4b13      	ldr	r3, [pc, #76]	; (8006028 <HAL_GPIO_Init+0x2b8>)
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005fe0:	4b11      	ldr	r3, [pc, #68]	; (8006028 <HAL_GPIO_Init+0x2b8>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	43da      	mvns	r2, r3
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4013      	ands	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	2380      	movs	r3, #128	; 0x80
 8005ff6:	039b      	lsls	r3, r3, #14
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d003      	beq.n	8006004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006004:	4b08      	ldr	r3, [pc, #32]	; (8006028 <HAL_GPIO_Init+0x2b8>)
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	3301      	adds	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	40da      	lsrs	r2, r3
 8006018:	1e13      	subs	r3, r2, #0
 800601a:	d000      	beq.n	800601e <HAL_GPIO_Init+0x2ae>
 800601c:	e6b0      	b.n	8005d80 <HAL_GPIO_Init+0x10>
  }
}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	46c0      	nop			; (mov r8, r8)
 8006022:	46bd      	mov	sp, r7
 8006024:	b006      	add	sp, #24
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40021800 	.word	0x40021800
 800602c:	50000400 	.word	0x50000400
 8006030:	50000800 	.word	0x50000800
 8006034:	50000c00 	.word	0x50000c00

08006038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	0008      	movs	r0, r1
 8006042:	0011      	movs	r1, r2
 8006044:	1cbb      	adds	r3, r7, #2
 8006046:	1c02      	adds	r2, r0, #0
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	1c7b      	adds	r3, r7, #1
 800604c:	1c0a      	adds	r2, r1, #0
 800604e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006050:	1c7b      	adds	r3, r7, #1
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d004      	beq.n	8006062 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006058:	1cbb      	adds	r3, r7, #2
 800605a:	881a      	ldrh	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006060:	e003      	b.n	800606a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006062:	1cbb      	adds	r3, r7, #2
 8006064:	881a      	ldrh	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	629a      	str	r2, [r3, #40]	; 0x28
}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	46bd      	mov	sp, r7
 800606e:	b002      	add	sp, #8
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e082      	b.n	800618c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2241      	movs	r2, #65	; 0x41
 800608a:	5c9b      	ldrb	r3, [r3, r2]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d107      	bne.n	80060a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2240      	movs	r2, #64	; 0x40
 8006096:	2100      	movs	r1, #0
 8006098:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	0018      	movs	r0, r3
 800609e:	f7ff fa85 	bl	80055ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2241      	movs	r2, #65	; 0x41
 80060a6:	2124      	movs	r1, #36	; 0x24
 80060a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2101      	movs	r1, #1
 80060b6:	438a      	bics	r2, r1
 80060b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4934      	ldr	r1, [pc, #208]	; (8006194 <HAL_I2C_Init+0x120>)
 80060c4:	400a      	ands	r2, r1
 80060c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4931      	ldr	r1, [pc, #196]	; (8006198 <HAL_I2C_Init+0x124>)
 80060d4:	400a      	ands	r2, r1
 80060d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d108      	bne.n	80060f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2180      	movs	r1, #128	; 0x80
 80060ea:	0209      	lsls	r1, r1, #8
 80060ec:	430a      	orrs	r2, r1
 80060ee:	609a      	str	r2, [r3, #8]
 80060f0:	e007      	b.n	8006102 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2184      	movs	r1, #132	; 0x84
 80060fc:	0209      	lsls	r1, r1, #8
 80060fe:	430a      	orrs	r2, r1
 8006100:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d104      	bne.n	8006114 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2280      	movs	r2, #128	; 0x80
 8006110:	0112      	lsls	r2, r2, #4
 8006112:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	491f      	ldr	r1, [pc, #124]	; (800619c <HAL_I2C_Init+0x128>)
 8006120:	430a      	orrs	r2, r1
 8006122:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	491a      	ldr	r1, [pc, #104]	; (8006198 <HAL_I2C_Init+0x124>)
 8006130:	400a      	ands	r2, r1
 8006132:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	431a      	orrs	r2, r3
 800613e:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69d9      	ldr	r1, [r3, #28]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1a      	ldr	r2, [r3, #32]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2101      	movs	r1, #1
 800616a:	430a      	orrs	r2, r1
 800616c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2241      	movs	r2, #65	; 0x41
 8006178:	2120      	movs	r1, #32
 800617a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2242      	movs	r2, #66	; 0x42
 8006186:	2100      	movs	r1, #0
 8006188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	0018      	movs	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	b002      	add	sp, #8
 8006192:	bd80      	pop	{r7, pc}
 8006194:	f0ffffff 	.word	0xf0ffffff
 8006198:	ffff7fff 	.word	0xffff7fff
 800619c:	02008000 	.word	0x02008000

080061a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2241      	movs	r2, #65	; 0x41
 80061ae:	5c9b      	ldrb	r3, [r3, r2]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d138      	bne.n	8006228 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2240      	movs	r2, #64	; 0x40
 80061ba:	5c9b      	ldrb	r3, [r3, r2]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e032      	b.n	800622a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2240      	movs	r2, #64	; 0x40
 80061c8:	2101      	movs	r1, #1
 80061ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2241      	movs	r2, #65	; 0x41
 80061d0:	2124      	movs	r1, #36	; 0x24
 80061d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2101      	movs	r1, #1
 80061e0:	438a      	bics	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4911      	ldr	r1, [pc, #68]	; (8006234 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80061f0:	400a      	ands	r2, r1
 80061f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6819      	ldr	r1, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2101      	movs	r1, #1
 8006210:	430a      	orrs	r2, r1
 8006212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2241      	movs	r2, #65	; 0x41
 8006218:	2120      	movs	r1, #32
 800621a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2240      	movs	r2, #64	; 0x40
 8006220:	2100      	movs	r1, #0
 8006222:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006228:	2302      	movs	r3, #2
  }
}
 800622a:	0018      	movs	r0, r3
 800622c:	46bd      	mov	sp, r7
 800622e:	b002      	add	sp, #8
 8006230:	bd80      	pop	{r7, pc}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	ffffefff 	.word	0xffffefff

08006238 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2241      	movs	r2, #65	; 0x41
 8006246:	5c9b      	ldrb	r3, [r3, r2]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b20      	cmp	r3, #32
 800624c:	d139      	bne.n	80062c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2240      	movs	r2, #64	; 0x40
 8006252:	5c9b      	ldrb	r3, [r3, r2]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006258:	2302      	movs	r3, #2
 800625a:	e033      	b.n	80062c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2240      	movs	r2, #64	; 0x40
 8006260:	2101      	movs	r1, #1
 8006262:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2241      	movs	r2, #65	; 0x41
 8006268:	2124      	movs	r1, #36	; 0x24
 800626a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2101      	movs	r1, #1
 8006278:	438a      	bics	r2, r1
 800627a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4a11      	ldr	r2, [pc, #68]	; (80062cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006288:	4013      	ands	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2101      	movs	r1, #1
 80062aa:	430a      	orrs	r2, r1
 80062ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2241      	movs	r2, #65	; 0x41
 80062b2:	2120      	movs	r1, #32
 80062b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2240      	movs	r2, #64	; 0x40
 80062ba:	2100      	movs	r1, #0
 80062bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e000      	b.n	80062c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062c2:	2302      	movs	r3, #2
  }
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b004      	add	sp, #16
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	fffff0ff 	.word	0xfffff0ff

080062d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80062d8:	4b19      	ldr	r3, [pc, #100]	; (8006340 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a19      	ldr	r2, [pc, #100]	; (8006344 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80062de:	4013      	ands	r3, r2
 80062e0:	0019      	movs	r1, r3
 80062e2:	4b17      	ldr	r3, [pc, #92]	; (8006340 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d11f      	bne.n	8006334 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80062f4:	4b14      	ldr	r3, [pc, #80]	; (8006348 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	0013      	movs	r3, r2
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	189b      	adds	r3, r3, r2
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	4912      	ldr	r1, [pc, #72]	; (800634c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006302:	0018      	movs	r0, r3
 8006304:	f7f9 ff18 	bl	8000138 <__udivsi3>
 8006308:	0003      	movs	r3, r0
 800630a:	3301      	adds	r3, #1
 800630c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800630e:	e008      	b.n	8006322 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3b01      	subs	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	e001      	b.n	8006322 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e009      	b.n	8006336 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006322:	4b07      	ldr	r3, [pc, #28]	; (8006340 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	2380      	movs	r3, #128	; 0x80
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	401a      	ands	r2, r3
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	429a      	cmp	r2, r3
 8006332:	d0ed      	beq.n	8006310 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	0018      	movs	r0, r3
 8006338:	46bd      	mov	sp, r7
 800633a:	b004      	add	sp, #16
 800633c:	bd80      	pop	{r7, pc}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	40007000 	.word	0x40007000
 8006344:	fffff9ff 	.word	0xfffff9ff
 8006348:	20000008 	.word	0x20000008
 800634c:	000f4240 	.word	0x000f4240

08006350 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	23e0      	movs	r3, #224	; 0xe0
 800635a:	01db      	lsls	r3, r3, #7
 800635c:	4013      	ands	r3, r2
}
 800635e:	0018      	movs	r0, r3
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40021000 	.word	0x40021000

08006368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e2f9      	b.n	800696e <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2201      	movs	r2, #1
 8006380:	4013      	ands	r3, r2
 8006382:	d100      	bne.n	8006386 <HAL_RCC_OscConfig+0x1e>
 8006384:	e07c      	b.n	8006480 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006386:	4bc3      	ldr	r3, [pc, #780]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	2238      	movs	r2, #56	; 0x38
 800638c:	4013      	ands	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006390:	4bc0      	ldr	r3, [pc, #768]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	2203      	movs	r2, #3
 8006396:	4013      	ands	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b10      	cmp	r3, #16
 800639e:	d102      	bne.n	80063a6 <HAL_RCC_OscConfig+0x3e>
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d002      	beq.n	80063ac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d10b      	bne.n	80063c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ac:	4bb9      	ldr	r3, [pc, #740]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	2380      	movs	r3, #128	; 0x80
 80063b2:	029b      	lsls	r3, r3, #10
 80063b4:	4013      	ands	r3, r2
 80063b6:	d062      	beq.n	800647e <HAL_RCC_OscConfig+0x116>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d15e      	bne.n	800647e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e2d4      	b.n	800696e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	2380      	movs	r3, #128	; 0x80
 80063ca:	025b      	lsls	r3, r3, #9
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d107      	bne.n	80063e0 <HAL_RCC_OscConfig+0x78>
 80063d0:	4bb0      	ldr	r3, [pc, #704]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	4baf      	ldr	r3, [pc, #700]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80063d6:	2180      	movs	r1, #128	; 0x80
 80063d8:	0249      	lsls	r1, r1, #9
 80063da:	430a      	orrs	r2, r1
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	e020      	b.n	8006422 <HAL_RCC_OscConfig+0xba>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	23a0      	movs	r3, #160	; 0xa0
 80063e6:	02db      	lsls	r3, r3, #11
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d10e      	bne.n	800640a <HAL_RCC_OscConfig+0xa2>
 80063ec:	4ba9      	ldr	r3, [pc, #676]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	4ba8      	ldr	r3, [pc, #672]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80063f2:	2180      	movs	r1, #128	; 0x80
 80063f4:	02c9      	lsls	r1, r1, #11
 80063f6:	430a      	orrs	r2, r1
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	4ba6      	ldr	r3, [pc, #664]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4ba5      	ldr	r3, [pc, #660]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006400:	2180      	movs	r1, #128	; 0x80
 8006402:	0249      	lsls	r1, r1, #9
 8006404:	430a      	orrs	r2, r1
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	e00b      	b.n	8006422 <HAL_RCC_OscConfig+0xba>
 800640a:	4ba2      	ldr	r3, [pc, #648]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	4ba1      	ldr	r3, [pc, #644]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006410:	49a1      	ldr	r1, [pc, #644]	; (8006698 <HAL_RCC_OscConfig+0x330>)
 8006412:	400a      	ands	r2, r1
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	4b9f      	ldr	r3, [pc, #636]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	4b9e      	ldr	r3, [pc, #632]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 800641c:	499f      	ldr	r1, [pc, #636]	; (800669c <HAL_RCC_OscConfig+0x334>)
 800641e:	400a      	ands	r2, r1
 8006420:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d014      	beq.n	8006454 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642a:	f7ff fba9 	bl	8005b80 <HAL_GetTick>
 800642e:	0003      	movs	r3, r0
 8006430:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006434:	f7ff fba4 	bl	8005b80 <HAL_GetTick>
 8006438:	0002      	movs	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b64      	cmp	r3, #100	; 0x64
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e293      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006446:	4b93      	ldr	r3, [pc, #588]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	2380      	movs	r3, #128	; 0x80
 800644c:	029b      	lsls	r3, r3, #10
 800644e:	4013      	ands	r3, r2
 8006450:	d0f0      	beq.n	8006434 <HAL_RCC_OscConfig+0xcc>
 8006452:	e015      	b.n	8006480 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006454:	f7ff fb94 	bl	8005b80 <HAL_GetTick>
 8006458:	0003      	movs	r3, r0
 800645a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800645c:	e008      	b.n	8006470 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800645e:	f7ff fb8f 	bl	8005b80 <HAL_GetTick>
 8006462:	0002      	movs	r2, r0
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b64      	cmp	r3, #100	; 0x64
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e27e      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006470:	4b88      	ldr	r3, [pc, #544]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	029b      	lsls	r3, r3, #10
 8006478:	4013      	ands	r3, r2
 800647a:	d1f0      	bne.n	800645e <HAL_RCC_OscConfig+0xf6>
 800647c:	e000      	b.n	8006480 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2202      	movs	r2, #2
 8006486:	4013      	ands	r3, r2
 8006488:	d100      	bne.n	800648c <HAL_RCC_OscConfig+0x124>
 800648a:	e099      	b.n	80065c0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800648c:	4b81      	ldr	r3, [pc, #516]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2238      	movs	r2, #56	; 0x38
 8006492:	4013      	ands	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006496:	4b7f      	ldr	r3, [pc, #508]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	2203      	movs	r2, #3
 800649c:	4013      	ands	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b10      	cmp	r3, #16
 80064a4:	d102      	bne.n	80064ac <HAL_RCC_OscConfig+0x144>
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d002      	beq.n	80064b2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d135      	bne.n	800651e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064b2:	4b78      	ldr	r3, [pc, #480]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	2380      	movs	r3, #128	; 0x80
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4013      	ands	r3, r2
 80064bc:	d005      	beq.n	80064ca <HAL_RCC_OscConfig+0x162>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e251      	b.n	800696e <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ca:	4b72      	ldr	r3, [pc, #456]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4a74      	ldr	r2, [pc, #464]	; (80066a0 <HAL_RCC_OscConfig+0x338>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	0019      	movs	r1, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	021a      	lsls	r2, r3, #8
 80064da:	4b6e      	ldr	r3, [pc, #440]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80064dc:	430a      	orrs	r2, r1
 80064de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d112      	bne.n	800650c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80064e6:	4b6b      	ldr	r3, [pc, #428]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a6e      	ldr	r2, [pc, #440]	; (80066a4 <HAL_RCC_OscConfig+0x33c>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	0019      	movs	r1, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	4b67      	ldr	r3, [pc, #412]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80064f6:	430a      	orrs	r2, r1
 80064f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80064fa:	4b66      	ldr	r3, [pc, #408]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	0adb      	lsrs	r3, r3, #11
 8006500:	2207      	movs	r2, #7
 8006502:	4013      	ands	r3, r2
 8006504:	4a68      	ldr	r2, [pc, #416]	; (80066a8 <HAL_RCC_OscConfig+0x340>)
 8006506:	40da      	lsrs	r2, r3
 8006508:	4b68      	ldr	r3, [pc, #416]	; (80066ac <HAL_RCC_OscConfig+0x344>)
 800650a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800650c:	4b68      	ldr	r3, [pc, #416]	; (80066b0 <HAL_RCC_OscConfig+0x348>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	0018      	movs	r0, r3
 8006512:	f7ff fad9 	bl	8005ac8 <HAL_InitTick>
 8006516:	1e03      	subs	r3, r0, #0
 8006518:	d051      	beq.n	80065be <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e227      	b.n	800696e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d030      	beq.n	8006588 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006526:	4b5b      	ldr	r3, [pc, #364]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a5e      	ldr	r2, [pc, #376]	; (80066a4 <HAL_RCC_OscConfig+0x33c>)
 800652c:	4013      	ands	r3, r2
 800652e:	0019      	movs	r1, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	4b57      	ldr	r3, [pc, #348]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006536:	430a      	orrs	r2, r1
 8006538:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800653a:	4b56      	ldr	r3, [pc, #344]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b55      	ldr	r3, [pc, #340]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006540:	2180      	movs	r1, #128	; 0x80
 8006542:	0049      	lsls	r1, r1, #1
 8006544:	430a      	orrs	r2, r1
 8006546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006548:	f7ff fb1a 	bl	8005b80 <HAL_GetTick>
 800654c:	0003      	movs	r3, r0
 800654e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006552:	f7ff fb15 	bl	8005b80 <HAL_GetTick>
 8006556:	0002      	movs	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e204      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006564:	4b4b      	ldr	r3, [pc, #300]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	2380      	movs	r3, #128	; 0x80
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	4013      	ands	r3, r2
 800656e:	d0f0      	beq.n	8006552 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006570:	4b48      	ldr	r3, [pc, #288]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4a4a      	ldr	r2, [pc, #296]	; (80066a0 <HAL_RCC_OscConfig+0x338>)
 8006576:	4013      	ands	r3, r2
 8006578:	0019      	movs	r1, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	021a      	lsls	r2, r3, #8
 8006580:	4b44      	ldr	r3, [pc, #272]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
 8006586:	e01b      	b.n	80065c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006588:	4b42      	ldr	r3, [pc, #264]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	4b41      	ldr	r3, [pc, #260]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 800658e:	4949      	ldr	r1, [pc, #292]	; (80066b4 <HAL_RCC_OscConfig+0x34c>)
 8006590:	400a      	ands	r2, r1
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7ff faf4 	bl	8005b80 <HAL_GetTick>
 8006598:	0003      	movs	r3, r0
 800659a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800659e:	f7ff faef 	bl	8005b80 <HAL_GetTick>
 80065a2:	0002      	movs	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e1de      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065b0:	4b38      	ldr	r3, [pc, #224]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	2380      	movs	r3, #128	; 0x80
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	4013      	ands	r3, r2
 80065ba:	d1f0      	bne.n	800659e <HAL_RCC_OscConfig+0x236>
 80065bc:	e000      	b.n	80065c0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2208      	movs	r2, #8
 80065c6:	4013      	ands	r3, r2
 80065c8:	d047      	beq.n	800665a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80065ca:	4b32      	ldr	r3, [pc, #200]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2238      	movs	r2, #56	; 0x38
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b18      	cmp	r3, #24
 80065d4:	d10a      	bne.n	80065ec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80065d6:	4b2f      	ldr	r3, [pc, #188]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80065d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065da:	2202      	movs	r2, #2
 80065dc:	4013      	ands	r3, r2
 80065de:	d03c      	beq.n	800665a <HAL_RCC_OscConfig+0x2f2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d138      	bne.n	800665a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e1c0      	b.n	800696e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d019      	beq.n	8006628 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80065f4:	4b27      	ldr	r3, [pc, #156]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80065f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80065f8:	4b26      	ldr	r3, [pc, #152]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 80065fa:	2101      	movs	r1, #1
 80065fc:	430a      	orrs	r2, r1
 80065fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006600:	f7ff fabe 	bl	8005b80 <HAL_GetTick>
 8006604:	0003      	movs	r3, r0
 8006606:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006608:	e008      	b.n	800661c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800660a:	f7ff fab9 	bl	8005b80 <HAL_GetTick>
 800660e:	0002      	movs	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e1a8      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800661c:	4b1d      	ldr	r3, [pc, #116]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 800661e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006620:	2202      	movs	r2, #2
 8006622:	4013      	ands	r3, r2
 8006624:	d0f1      	beq.n	800660a <HAL_RCC_OscConfig+0x2a2>
 8006626:	e018      	b.n	800665a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006628:	4b1a      	ldr	r3, [pc, #104]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 800662a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800662c:	4b19      	ldr	r3, [pc, #100]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 800662e:	2101      	movs	r1, #1
 8006630:	438a      	bics	r2, r1
 8006632:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006634:	f7ff faa4 	bl	8005b80 <HAL_GetTick>
 8006638:	0003      	movs	r3, r0
 800663a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800663e:	f7ff fa9f 	bl	8005b80 <HAL_GetTick>
 8006642:	0002      	movs	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e18e      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006650:	4b10      	ldr	r3, [pc, #64]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006654:	2202      	movs	r2, #2
 8006656:	4013      	ands	r3, r2
 8006658:	d1f1      	bne.n	800663e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2204      	movs	r2, #4
 8006660:	4013      	ands	r3, r2
 8006662:	d100      	bne.n	8006666 <HAL_RCC_OscConfig+0x2fe>
 8006664:	e0c6      	b.n	80067f4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006666:	231f      	movs	r3, #31
 8006668:	18fb      	adds	r3, r7, r3
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800666e:	4b09      	ldr	r3, [pc, #36]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2238      	movs	r2, #56	; 0x38
 8006674:	4013      	ands	r3, r2
 8006676:	2b20      	cmp	r3, #32
 8006678:	d11e      	bne.n	80066b8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800667a:	4b06      	ldr	r3, [pc, #24]	; (8006694 <HAL_RCC_OscConfig+0x32c>)
 800667c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667e:	2202      	movs	r2, #2
 8006680:	4013      	ands	r3, r2
 8006682:	d100      	bne.n	8006686 <HAL_RCC_OscConfig+0x31e>
 8006684:	e0b6      	b.n	80067f4 <HAL_RCC_OscConfig+0x48c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d000      	beq.n	8006690 <HAL_RCC_OscConfig+0x328>
 800668e:	e0b1      	b.n	80067f4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e16c      	b.n	800696e <HAL_RCC_OscConfig+0x606>
 8006694:	40021000 	.word	0x40021000
 8006698:	fffeffff 	.word	0xfffeffff
 800669c:	fffbffff 	.word	0xfffbffff
 80066a0:	ffff80ff 	.word	0xffff80ff
 80066a4:	ffffc7ff 	.word	0xffffc7ff
 80066a8:	00f42400 	.word	0x00f42400
 80066ac:	20000008 	.word	0x20000008
 80066b0:	2000000c 	.word	0x2000000c
 80066b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066b8:	4baf      	ldr	r3, [pc, #700]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80066ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066bc:	2380      	movs	r3, #128	; 0x80
 80066be:	055b      	lsls	r3, r3, #21
 80066c0:	4013      	ands	r3, r2
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_OscConfig+0x360>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <HAL_RCC_OscConfig+0x362>
 80066c8:	2300      	movs	r3, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d011      	beq.n	80066f2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80066ce:	4baa      	ldr	r3, [pc, #680]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80066d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066d2:	4ba9      	ldr	r3, [pc, #676]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80066d4:	2180      	movs	r1, #128	; 0x80
 80066d6:	0549      	lsls	r1, r1, #21
 80066d8:	430a      	orrs	r2, r1
 80066da:	63da      	str	r2, [r3, #60]	; 0x3c
 80066dc:	4ba6      	ldr	r3, [pc, #664]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80066de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	055b      	lsls	r3, r3, #21
 80066e4:	4013      	ands	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80066ea:	231f      	movs	r3, #31
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	2201      	movs	r2, #1
 80066f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066f2:	4ba2      	ldr	r3, [pc, #648]	; (800697c <HAL_RCC_OscConfig+0x614>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	2380      	movs	r3, #128	; 0x80
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	4013      	ands	r3, r2
 80066fc:	d11a      	bne.n	8006734 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066fe:	4b9f      	ldr	r3, [pc, #636]	; (800697c <HAL_RCC_OscConfig+0x614>)
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	4b9e      	ldr	r3, [pc, #632]	; (800697c <HAL_RCC_OscConfig+0x614>)
 8006704:	2180      	movs	r1, #128	; 0x80
 8006706:	0049      	lsls	r1, r1, #1
 8006708:	430a      	orrs	r2, r1
 800670a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800670c:	f7ff fa38 	bl	8005b80 <HAL_GetTick>
 8006710:	0003      	movs	r3, r0
 8006712:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006716:	f7ff fa33 	bl	8005b80 <HAL_GetTick>
 800671a:	0002      	movs	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e122      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006728:	4b94      	ldr	r3, [pc, #592]	; (800697c <HAL_RCC_OscConfig+0x614>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	2380      	movs	r3, #128	; 0x80
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	4013      	ands	r3, r2
 8006732:	d0f0      	beq.n	8006716 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d106      	bne.n	800674a <HAL_RCC_OscConfig+0x3e2>
 800673c:	4b8e      	ldr	r3, [pc, #568]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 800673e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006740:	4b8d      	ldr	r3, [pc, #564]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006742:	2101      	movs	r1, #1
 8006744:	430a      	orrs	r2, r1
 8006746:	65da      	str	r2, [r3, #92]	; 0x5c
 8006748:	e01c      	b.n	8006784 <HAL_RCC_OscConfig+0x41c>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b05      	cmp	r3, #5
 8006750:	d10c      	bne.n	800676c <HAL_RCC_OscConfig+0x404>
 8006752:	4b89      	ldr	r3, [pc, #548]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006754:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006756:	4b88      	ldr	r3, [pc, #544]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006758:	2104      	movs	r1, #4
 800675a:	430a      	orrs	r2, r1
 800675c:	65da      	str	r2, [r3, #92]	; 0x5c
 800675e:	4b86      	ldr	r3, [pc, #536]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006760:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006762:	4b85      	ldr	r3, [pc, #532]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006764:	2101      	movs	r1, #1
 8006766:	430a      	orrs	r2, r1
 8006768:	65da      	str	r2, [r3, #92]	; 0x5c
 800676a:	e00b      	b.n	8006784 <HAL_RCC_OscConfig+0x41c>
 800676c:	4b82      	ldr	r3, [pc, #520]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 800676e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006770:	4b81      	ldr	r3, [pc, #516]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006772:	2101      	movs	r1, #1
 8006774:	438a      	bics	r2, r1
 8006776:	65da      	str	r2, [r3, #92]	; 0x5c
 8006778:	4b7f      	ldr	r3, [pc, #508]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 800677a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800677c:	4b7e      	ldr	r3, [pc, #504]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 800677e:	2104      	movs	r1, #4
 8006780:	438a      	bics	r2, r1
 8006782:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d014      	beq.n	80067b6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678c:	f7ff f9f8 	bl	8005b80 <HAL_GetTick>
 8006790:	0003      	movs	r3, r0
 8006792:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006794:	e009      	b.n	80067aa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006796:	f7ff f9f3 	bl	8005b80 <HAL_GetTick>
 800679a:	0002      	movs	r2, r0
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	4a77      	ldr	r2, [pc, #476]	; (8006980 <HAL_RCC_OscConfig+0x618>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e0e1      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067aa:	4b73      	ldr	r3, [pc, #460]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80067ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ae:	2202      	movs	r2, #2
 80067b0:	4013      	ands	r3, r2
 80067b2:	d0f0      	beq.n	8006796 <HAL_RCC_OscConfig+0x42e>
 80067b4:	e013      	b.n	80067de <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b6:	f7ff f9e3 	bl	8005b80 <HAL_GetTick>
 80067ba:	0003      	movs	r3, r0
 80067bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067be:	e009      	b.n	80067d4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c0:	f7ff f9de 	bl	8005b80 <HAL_GetTick>
 80067c4:	0002      	movs	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	4a6d      	ldr	r2, [pc, #436]	; (8006980 <HAL_RCC_OscConfig+0x618>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e0cc      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067d4:	4b68      	ldr	r3, [pc, #416]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80067d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d8:	2202      	movs	r2, #2
 80067da:	4013      	ands	r3, r2
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80067de:	231f      	movs	r3, #31
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d105      	bne.n	80067f4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80067e8:	4b63      	ldr	r3, [pc, #396]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80067ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ec:	4b62      	ldr	r3, [pc, #392]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80067ee:	4965      	ldr	r1, [pc, #404]	; (8006984 <HAL_RCC_OscConfig+0x61c>)
 80067f0:	400a      	ands	r2, r1
 80067f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d100      	bne.n	80067fe <HAL_RCC_OscConfig+0x496>
 80067fc:	e0b6      	b.n	800696c <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067fe:	4b5e      	ldr	r3, [pc, #376]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2238      	movs	r2, #56	; 0x38
 8006804:	4013      	ands	r3, r2
 8006806:	2b10      	cmp	r3, #16
 8006808:	d100      	bne.n	800680c <HAL_RCC_OscConfig+0x4a4>
 800680a:	e07e      	b.n	800690a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d153      	bne.n	80068bc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006814:	4b58      	ldr	r3, [pc, #352]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	4b57      	ldr	r3, [pc, #348]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 800681a:	495b      	ldr	r1, [pc, #364]	; (8006988 <HAL_RCC_OscConfig+0x620>)
 800681c:	400a      	ands	r2, r1
 800681e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006820:	f7ff f9ae 	bl	8005b80 <HAL_GetTick>
 8006824:	0003      	movs	r3, r0
 8006826:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800682a:	f7ff f9a9 	bl	8005b80 <HAL_GetTick>
 800682e:	0002      	movs	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e098      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800683c:	4b4e      	ldr	r3, [pc, #312]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	2380      	movs	r3, #128	; 0x80
 8006842:	049b      	lsls	r3, r3, #18
 8006844:	4013      	ands	r3, r2
 8006846:	d1f0      	bne.n	800682a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006848:	4b4b      	ldr	r3, [pc, #300]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4a4f      	ldr	r2, [pc, #316]	; (800698c <HAL_RCC_OscConfig+0x624>)
 800684e:	4013      	ands	r3, r2
 8006850:	0019      	movs	r1, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1a      	ldr	r2, [r3, #32]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	431a      	orrs	r2, r3
 8006870:	4b41      	ldr	r3, [pc, #260]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006872:	430a      	orrs	r2, r1
 8006874:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006876:	4b40      	ldr	r3, [pc, #256]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b3f      	ldr	r3, [pc, #252]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 800687c:	2180      	movs	r1, #128	; 0x80
 800687e:	0449      	lsls	r1, r1, #17
 8006880:	430a      	orrs	r2, r1
 8006882:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006884:	4b3c      	ldr	r3, [pc, #240]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	4b3b      	ldr	r3, [pc, #236]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 800688a:	2180      	movs	r1, #128	; 0x80
 800688c:	0549      	lsls	r1, r1, #21
 800688e:	430a      	orrs	r2, r1
 8006890:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006892:	f7ff f975 	bl	8005b80 <HAL_GetTick>
 8006896:	0003      	movs	r3, r0
 8006898:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800689c:	f7ff f970 	bl	8005b80 <HAL_GetTick>
 80068a0:	0002      	movs	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e05f      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ae:	4b32      	ldr	r3, [pc, #200]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	049b      	lsls	r3, r3, #18
 80068b6:	4013      	ands	r3, r2
 80068b8:	d0f0      	beq.n	800689c <HAL_RCC_OscConfig+0x534>
 80068ba:	e057      	b.n	800696c <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068bc:	4b2e      	ldr	r3, [pc, #184]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	4b2d      	ldr	r3, [pc, #180]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80068c2:	4931      	ldr	r1, [pc, #196]	; (8006988 <HAL_RCC_OscConfig+0x620>)
 80068c4:	400a      	ands	r2, r1
 80068c6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80068c8:	4b2b      	ldr	r3, [pc, #172]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	4b2a      	ldr	r3, [pc, #168]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80068ce:	2103      	movs	r1, #3
 80068d0:	438a      	bics	r2, r1
 80068d2:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80068d4:	4b28      	ldr	r3, [pc, #160]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	4b27      	ldr	r3, [pc, #156]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80068da:	492d      	ldr	r1, [pc, #180]	; (8006990 <HAL_RCC_OscConfig+0x628>)
 80068dc:	400a      	ands	r2, r1
 80068de:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e0:	f7ff f94e 	bl	8005b80 <HAL_GetTick>
 80068e4:	0003      	movs	r3, r0
 80068e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068e8:	e008      	b.n	80068fc <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ea:	f7ff f949 	bl	8005b80 <HAL_GetTick>
 80068ee:	0002      	movs	r2, r0
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d901      	bls.n	80068fc <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e038      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068fc:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	049b      	lsls	r3, r3, #18
 8006904:	4013      	ands	r3, r2
 8006906:	d1f0      	bne.n	80068ea <HAL_RCC_OscConfig+0x582>
 8006908:	e030      	b.n	800696c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e02b      	b.n	800696e <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006916:	4b18      	ldr	r3, [pc, #96]	; (8006978 <HAL_RCC_OscConfig+0x610>)
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2203      	movs	r2, #3
 8006920:	401a      	ands	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	429a      	cmp	r2, r3
 8006928:	d11e      	bne.n	8006968 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2270      	movs	r2, #112	; 0x70
 800692e:	401a      	ands	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006934:	429a      	cmp	r2, r3
 8006936:	d117      	bne.n	8006968 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	23fe      	movs	r3, #254	; 0xfe
 800693c:	01db      	lsls	r3, r3, #7
 800693e:	401a      	ands	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006946:	429a      	cmp	r2, r3
 8006948:	d10e      	bne.n	8006968 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	23f8      	movs	r3, #248	; 0xf8
 800694e:	039b      	lsls	r3, r3, #14
 8006950:	401a      	ands	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006956:	429a      	cmp	r2, r3
 8006958:	d106      	bne.n	8006968 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	0f5b      	lsrs	r3, r3, #29
 800695e:	075a      	lsls	r2, r3, #29
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006964:	429a      	cmp	r2, r3
 8006966:	d001      	beq.n	800696c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	0018      	movs	r0, r3
 8006970:	46bd      	mov	sp, r7
 8006972:	b008      	add	sp, #32
 8006974:	bd80      	pop	{r7, pc}
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	40021000 	.word	0x40021000
 800697c:	40007000 	.word	0x40007000
 8006980:	00001388 	.word	0x00001388
 8006984:	efffffff 	.word	0xefffffff
 8006988:	feffffff 	.word	0xfeffffff
 800698c:	1fc1808c 	.word	0x1fc1808c
 8006990:	effeffff 	.word	0xeffeffff

08006994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0e9      	b.n	8006b7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069a8:	4b76      	ldr	r3, [pc, #472]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2207      	movs	r2, #7
 80069ae:	4013      	ands	r3, r2
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d91e      	bls.n	80069f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069b6:	4b73      	ldr	r3, [pc, #460]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2207      	movs	r2, #7
 80069bc:	4393      	bics	r3, r2
 80069be:	0019      	movs	r1, r3
 80069c0:	4b70      	ldr	r3, [pc, #448]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069c8:	f7ff f8da 	bl	8005b80 <HAL_GetTick>
 80069cc:	0003      	movs	r3, r0
 80069ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80069d0:	e009      	b.n	80069e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069d2:	f7ff f8d5 	bl	8005b80 <HAL_GetTick>
 80069d6:	0002      	movs	r2, r0
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	4a6a      	ldr	r2, [pc, #424]	; (8006b88 <HAL_RCC_ClockConfig+0x1f4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e0ca      	b.n	8006b7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80069e6:	4b67      	ldr	r3, [pc, #412]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2207      	movs	r2, #7
 80069ec:	4013      	ands	r3, r2
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d1ee      	bne.n	80069d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2202      	movs	r2, #2
 80069fa:	4013      	ands	r3, r2
 80069fc:	d015      	beq.n	8006a2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2204      	movs	r2, #4
 8006a04:	4013      	ands	r3, r2
 8006a06:	d006      	beq.n	8006a16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006a08:	4b60      	ldr	r3, [pc, #384]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	4b5f      	ldr	r3, [pc, #380]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006a0e:	21e0      	movs	r1, #224	; 0xe0
 8006a10:	01c9      	lsls	r1, r1, #7
 8006a12:	430a      	orrs	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a16:	4b5d      	ldr	r3, [pc, #372]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	4a5d      	ldr	r2, [pc, #372]	; (8006b90 <HAL_RCC_ClockConfig+0x1fc>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	0019      	movs	r1, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	4b59      	ldr	r3, [pc, #356]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4013      	ands	r3, r2
 8006a32:	d057      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d107      	bne.n	8006a4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a3c:	4b53      	ldr	r3, [pc, #332]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	2380      	movs	r3, #128	; 0x80
 8006a42:	029b      	lsls	r3, r3, #10
 8006a44:	4013      	ands	r3, r2
 8006a46:	d12b      	bne.n	8006aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e097      	b.n	8006b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d107      	bne.n	8006a64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a54:	4b4d      	ldr	r3, [pc, #308]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	2380      	movs	r3, #128	; 0x80
 8006a5a:	049b      	lsls	r3, r3, #18
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	d11f      	bne.n	8006aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e08b      	b.n	8006b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d107      	bne.n	8006a7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a6c:	4b47      	ldr	r3, [pc, #284]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	2380      	movs	r3, #128	; 0x80
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	4013      	ands	r3, r2
 8006a76:	d113      	bne.n	8006aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e07f      	b.n	8006b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d106      	bne.n	8006a92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a84:	4b41      	ldr	r3, [pc, #260]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a88:	2202      	movs	r2, #2
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	d108      	bne.n	8006aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e074      	b.n	8006b7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a92:	4b3e      	ldr	r3, [pc, #248]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a96:	2202      	movs	r2, #2
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d101      	bne.n	8006aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e06d      	b.n	8006b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006aa0:	4b3a      	ldr	r3, [pc, #232]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2207      	movs	r2, #7
 8006aa6:	4393      	bics	r3, r2
 8006aa8:	0019      	movs	r1, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	4b37      	ldr	r3, [pc, #220]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab4:	f7ff f864 	bl	8005b80 <HAL_GetTick>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006abc:	e009      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006abe:	f7ff f85f 	bl	8005b80 <HAL_GetTick>
 8006ac2:	0002      	movs	r2, r0
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	4a2f      	ldr	r2, [pc, #188]	; (8006b88 <HAL_RCC_ClockConfig+0x1f4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e054      	b.n	8006b7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ad2:	4b2e      	ldr	r3, [pc, #184]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	2238      	movs	r2, #56	; 0x38
 8006ad8:	401a      	ands	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d1ec      	bne.n	8006abe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ae4:	4b27      	ldr	r3, [pc, #156]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2207      	movs	r2, #7
 8006aea:	4013      	ands	r3, r2
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d21e      	bcs.n	8006b30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af2:	4b24      	ldr	r3, [pc, #144]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2207      	movs	r2, #7
 8006af8:	4393      	bics	r3, r2
 8006afa:	0019      	movs	r1, r3
 8006afc:	4b21      	ldr	r3, [pc, #132]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b04:	f7ff f83c 	bl	8005b80 <HAL_GetTick>
 8006b08:	0003      	movs	r3, r0
 8006b0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b0c:	e009      	b.n	8006b22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b0e:	f7ff f837 	bl	8005b80 <HAL_GetTick>
 8006b12:	0002      	movs	r2, r0
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	4a1b      	ldr	r2, [pc, #108]	; (8006b88 <HAL_RCC_ClockConfig+0x1f4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e02c      	b.n	8006b7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b22:	4b18      	ldr	r3, [pc, #96]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2207      	movs	r2, #7
 8006b28:	4013      	ands	r3, r2
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d1ee      	bne.n	8006b0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2204      	movs	r2, #4
 8006b36:	4013      	ands	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006b3a:	4b14      	ldr	r3, [pc, #80]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <HAL_RCC_ClockConfig+0x200>)
 8006b40:	4013      	ands	r3, r2
 8006b42:	0019      	movs	r1, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	4b10      	ldr	r3, [pc, #64]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006b4e:	f000 f829 	bl	8006ba4 <HAL_RCC_GetSysClockFreq>
 8006b52:	0001      	movs	r1, r0
 8006b54:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	0a1b      	lsrs	r3, r3, #8
 8006b5a:	220f      	movs	r2, #15
 8006b5c:	401a      	ands	r2, r3
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <HAL_RCC_ClockConfig+0x204>)
 8006b60:	0092      	lsls	r2, r2, #2
 8006b62:	58d3      	ldr	r3, [r2, r3]
 8006b64:	221f      	movs	r2, #31
 8006b66:	4013      	ands	r3, r2
 8006b68:	000a      	movs	r2, r1
 8006b6a:	40da      	lsrs	r2, r3
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <HAL_RCC_ClockConfig+0x208>)
 8006b6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b70:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <HAL_RCC_ClockConfig+0x20c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	0018      	movs	r0, r3
 8006b76:	f7fe ffa7 	bl	8005ac8 <HAL_InitTick>
 8006b7a:	0003      	movs	r3, r0
}
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b004      	add	sp, #16
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	40022000 	.word	0x40022000
 8006b88:	00001388 	.word	0x00001388
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	fffff0ff 	.word	0xfffff0ff
 8006b94:	ffff8fff 	.word	0xffff8fff
 8006b98:	0800d764 	.word	0x0800d764
 8006b9c:	20000008 	.word	0x20000008
 8006ba0:	2000000c 	.word	0x2000000c

08006ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006baa:	4b3c      	ldr	r3, [pc, #240]	; (8006c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2238      	movs	r2, #56	; 0x38
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	d10f      	bne.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006bb4:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	0adb      	lsrs	r3, r3, #11
 8006bba:	2207      	movs	r2, #7
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	409a      	lsls	r2, r3
 8006bc2:	0013      	movs	r3, r2
 8006bc4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	4835      	ldr	r0, [pc, #212]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006bca:	f7f9 fab5 	bl	8000138 <__udivsi3>
 8006bce:	0003      	movs	r3, r0
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	e05d      	b.n	8006c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bd4:	4b31      	ldr	r3, [pc, #196]	; (8006c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	2238      	movs	r2, #56	; 0x38
 8006bda:	4013      	ands	r3, r2
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d102      	bne.n	8006be6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006be0:	4b30      	ldr	r3, [pc, #192]	; (8006ca4 <HAL_RCC_GetSysClockFreq+0x100>)
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	e054      	b.n	8006c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006be6:	4b2d      	ldr	r3, [pc, #180]	; (8006c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	2238      	movs	r2, #56	; 0x38
 8006bec:	4013      	ands	r3, r2
 8006bee:	2b10      	cmp	r3, #16
 8006bf0:	d138      	bne.n	8006c64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006bf2:	4b2a      	ldr	r3, [pc, #168]	; (8006c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bfc:	4b27      	ldr	r3, [pc, #156]	; (8006c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	091b      	lsrs	r3, r3, #4
 8006c02:	2207      	movs	r2, #7
 8006c04:	4013      	ands	r3, r2
 8006c06:	3301      	adds	r3, #1
 8006c08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d10d      	bne.n	8006c2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	4824      	ldr	r0, [pc, #144]	; (8006ca4 <HAL_RCC_GetSysClockFreq+0x100>)
 8006c14:	f7f9 fa90 	bl	8000138 <__udivsi3>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	0019      	movs	r1, r3
 8006c1c:	4b1f      	ldr	r3, [pc, #124]	; (8006c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	227f      	movs	r2, #127	; 0x7f
 8006c24:	4013      	ands	r3, r2
 8006c26:	434b      	muls	r3, r1
 8006c28:	617b      	str	r3, [r7, #20]
        break;
 8006c2a:	e00d      	b.n	8006c48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	481c      	ldr	r0, [pc, #112]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006c30:	f7f9 fa82 	bl	8000138 <__udivsi3>
 8006c34:	0003      	movs	r3, r0
 8006c36:	0019      	movs	r1, r3
 8006c38:	4b18      	ldr	r3, [pc, #96]	; (8006c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	0a1b      	lsrs	r3, r3, #8
 8006c3e:	227f      	movs	r2, #127	; 0x7f
 8006c40:	4013      	ands	r3, r2
 8006c42:	434b      	muls	r3, r1
 8006c44:	617b      	str	r3, [r7, #20]
        break;
 8006c46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006c48:	4b14      	ldr	r3, [pc, #80]	; (8006c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	0f5b      	lsrs	r3, r3, #29
 8006c4e:	2207      	movs	r2, #7
 8006c50:	4013      	ands	r3, r2
 8006c52:	3301      	adds	r3, #1
 8006c54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	6978      	ldr	r0, [r7, #20]
 8006c5a:	f7f9 fa6d 	bl	8000138 <__udivsi3>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	e015      	b.n	8006c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006c64:	4b0d      	ldr	r3, [pc, #52]	; (8006c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2238      	movs	r2, #56	; 0x38
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d103      	bne.n	8006c78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006c70:	2380      	movs	r3, #128	; 0x80
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	e00b      	b.n	8006c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006c78:	4b08      	ldr	r3, [pc, #32]	; (8006c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2238      	movs	r2, #56	; 0x38
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b18      	cmp	r3, #24
 8006c82:	d103      	bne.n	8006c8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006c84:	23fa      	movs	r3, #250	; 0xfa
 8006c86:	01db      	lsls	r3, r3, #7
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	e001      	b.n	8006c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006c90:	693b      	ldr	r3, [r7, #16]
}
 8006c92:	0018      	movs	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b006      	add	sp, #24
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	00f42400 	.word	0x00f42400
 8006ca4:	007a1200 	.word	0x007a1200

08006ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cac:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006cae:	681b      	ldr	r3, [r3, #0]
}
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	20000008 	.word	0x20000008

08006cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cbc:	b5b0      	push	{r4, r5, r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006cc0:	f7ff fff2 	bl	8006ca8 <HAL_RCC_GetHCLKFreq>
 8006cc4:	0004      	movs	r4, r0
 8006cc6:	f7ff fb43 	bl	8006350 <LL_RCC_GetAPB1Prescaler>
 8006cca:	0003      	movs	r3, r0
 8006ccc:	0b1a      	lsrs	r2, r3, #12
 8006cce:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cd0:	0092      	lsls	r2, r2, #2
 8006cd2:	58d3      	ldr	r3, [r2, r3]
 8006cd4:	221f      	movs	r2, #31
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	40dc      	lsrs	r4, r3
 8006cda:	0023      	movs	r3, r4
}
 8006cdc:	0018      	movs	r0, r3
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	0800d7a4 	.word	0x0800d7a4

08006ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006cf0:	2313      	movs	r3, #19
 8006cf2:	18fb      	adds	r3, r7, r3
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cf8:	2312      	movs	r3, #18
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	2380      	movs	r3, #128	; 0x80
 8006d06:	029b      	lsls	r3, r3, #10
 8006d08:	4013      	ands	r3, r2
 8006d0a:	d100      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006d0c:	e0a3      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d0e:	2011      	movs	r0, #17
 8006d10:	183b      	adds	r3, r7, r0
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d16:	4b86      	ldr	r3, [pc, #536]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d1a:	2380      	movs	r3, #128	; 0x80
 8006d1c:	055b      	lsls	r3, r3, #21
 8006d1e:	4013      	ands	r3, r2
 8006d20:	d110      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d22:	4b83      	ldr	r3, [pc, #524]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d26:	4b82      	ldr	r3, [pc, #520]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d28:	2180      	movs	r1, #128	; 0x80
 8006d2a:	0549      	lsls	r1, r1, #21
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006d30:	4b7f      	ldr	r3, [pc, #508]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d34:	2380      	movs	r3, #128	; 0x80
 8006d36:	055b      	lsls	r3, r3, #21
 8006d38:	4013      	ands	r3, r2
 8006d3a:	60bb      	str	r3, [r7, #8]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d3e:	183b      	adds	r3, r7, r0
 8006d40:	2201      	movs	r2, #1
 8006d42:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d44:	4b7b      	ldr	r3, [pc, #492]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	4b7a      	ldr	r3, [pc, #488]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006d4a:	2180      	movs	r1, #128	; 0x80
 8006d4c:	0049      	lsls	r1, r1, #1
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d52:	f7fe ff15 	bl	8005b80 <HAL_GetTick>
 8006d56:	0003      	movs	r3, r0
 8006d58:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d5a:	e00b      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5c:	f7fe ff10 	bl	8005b80 <HAL_GetTick>
 8006d60:	0002      	movs	r2, r0
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d904      	bls.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006d6a:	2313      	movs	r3, #19
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	2203      	movs	r2, #3
 8006d70:	701a      	strb	r2, [r3, #0]
        break;
 8006d72:	e005      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d74:	4b6f      	ldr	r3, [pc, #444]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	2380      	movs	r3, #128	; 0x80
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d0ed      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006d80:	2313      	movs	r3, #19
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d154      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d8a:	4b69      	ldr	r3, [pc, #420]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d8e:	23c0      	movs	r3, #192	; 0xc0
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4013      	ands	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d019      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d014      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006da6:	4b62      	ldr	r3, [pc, #392]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006daa:	4a63      	ldr	r2, [pc, #396]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006db0:	4b5f      	ldr	r3, [pc, #380]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006db2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006db4:	4b5e      	ldr	r3, [pc, #376]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006db6:	2180      	movs	r1, #128	; 0x80
 8006db8:	0249      	lsls	r1, r1, #9
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dbe:	4b5c      	ldr	r3, [pc, #368]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006dc2:	4b5b      	ldr	r3, [pc, #364]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006dc4:	495d      	ldr	r1, [pc, #372]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006dc6:	400a      	ands	r2, r1
 8006dc8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006dca:	4b59      	ldr	r3, [pc, #356]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d016      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd8:	f7fe fed2 	bl	8005b80 <HAL_GetTick>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006de0:	e00c      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de2:	f7fe fecd 	bl	8005b80 <HAL_GetTick>
 8006de6:	0002      	movs	r2, r0
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	4a54      	ldr	r2, [pc, #336]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d904      	bls.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006df2:	2313      	movs	r3, #19
 8006df4:	18fb      	adds	r3, r7, r3
 8006df6:	2203      	movs	r2, #3
 8006df8:	701a      	strb	r2, [r3, #0]
            break;
 8006dfa:	e004      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dfc:	4b4c      	ldr	r3, [pc, #304]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e00:	2202      	movs	r2, #2
 8006e02:	4013      	ands	r3, r2
 8006e04:	d0ed      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006e06:	2313      	movs	r3, #19
 8006e08:	18fb      	adds	r3, r7, r3
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e10:	4b47      	ldr	r3, [pc, #284]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e14:	4a48      	ldr	r2, [pc, #288]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006e16:	4013      	ands	r3, r2
 8006e18:	0019      	movs	r1, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	4b44      	ldr	r3, [pc, #272]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e20:	430a      	orrs	r2, r1
 8006e22:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e24:	e00c      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e26:	2312      	movs	r3, #18
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	2213      	movs	r2, #19
 8006e2c:	18ba      	adds	r2, r7, r2
 8006e2e:	7812      	ldrb	r2, [r2, #0]
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	e005      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	2312      	movs	r3, #18
 8006e36:	18fb      	adds	r3, r7, r3
 8006e38:	2213      	movs	r2, #19
 8006e3a:	18ba      	adds	r2, r7, r2
 8006e3c:	7812      	ldrb	r2, [r2, #0]
 8006e3e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e40:	2311      	movs	r3, #17
 8006e42:	18fb      	adds	r3, r7, r3
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d105      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e4a:	4b39      	ldr	r3, [pc, #228]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e4e:	4b38      	ldr	r3, [pc, #224]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e50:	493c      	ldr	r1, [pc, #240]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006e52:	400a      	ands	r2, r1
 8006e54:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d009      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e60:	4b33      	ldr	r3, [pc, #204]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e64:	2203      	movs	r2, #3
 8006e66:	4393      	bics	r3, r2
 8006e68:	0019      	movs	r1, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	4b30      	ldr	r3, [pc, #192]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e70:	430a      	orrs	r2, r1
 8006e72:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e7e:	4b2c      	ldr	r3, [pc, #176]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	220c      	movs	r2, #12
 8006e84:	4393      	bics	r3, r2
 8006e86:	0019      	movs	r1, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	4b28      	ldr	r3, [pc, #160]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2220      	movs	r2, #32
 8006e98:	4013      	ands	r3, r2
 8006e9a:	d009      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e9c:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea0:	4a29      	ldr	r2, [pc, #164]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	0019      	movs	r1, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	4b21      	ldr	r3, [pc, #132]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006eac:	430a      	orrs	r2, r1
 8006eae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	2380      	movs	r3, #128	; 0x80
 8006eb6:	01db      	lsls	r3, r3, #7
 8006eb8:	4013      	ands	r3, r2
 8006eba:	d015      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ebc:	4b1c      	ldr	r3, [pc, #112]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	0899      	lsrs	r1, r3, #2
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	695a      	ldr	r2, [r3, #20]
 8006ec8:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695a      	ldr	r2, [r3, #20]
 8006ed2:	2380      	movs	r3, #128	; 0x80
 8006ed4:	05db      	lsls	r3, r3, #23
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	4b14      	ldr	r3, [pc, #80]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ee0:	2180      	movs	r1, #128	; 0x80
 8006ee2:	0249      	lsls	r1, r1, #9
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	2380      	movs	r3, #128	; 0x80
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	d016      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006ef4:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef8:	4a14      	ldr	r2, [pc, #80]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006efa:	4013      	ands	r3, r2
 8006efc:	0019      	movs	r1, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f04:	430a      	orrs	r2, r1
 8006f06:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	2380      	movs	r3, #128	; 0x80
 8006f0e:	01db      	lsls	r3, r3, #7
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d106      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006f14:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f1a:	2180      	movs	r1, #128	; 0x80
 8006f1c:	0249      	lsls	r1, r1, #9
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006f22:	2312      	movs	r3, #18
 8006f24:	18fb      	adds	r3, r7, r3
 8006f26:	781b      	ldrb	r3, [r3, #0]
}
 8006f28:	0018      	movs	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b006      	add	sp, #24
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40021000 	.word	0x40021000
 8006f34:	40007000 	.word	0x40007000
 8006f38:	fffffcff 	.word	0xfffffcff
 8006f3c:	fffeffff 	.word	0xfffeffff
 8006f40:	00001388 	.word	0x00001388
 8006f44:	efffffff 	.word	0xefffffff
 8006f48:	ffffcfff 	.word	0xffffcfff
 8006f4c:	ffff3fff 	.word	0xffff3fff

08006f50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f50:	b5b0      	push	{r4, r5, r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f58:	230f      	movs	r3, #15
 8006f5a:	18fb      	adds	r3, r7, r3
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d100      	bne.n	8006f68 <HAL_RTC_Init+0x18>
 8006f66:	e080      	b.n	800706a <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2229      	movs	r2, #41	; 0x29
 8006f6c:	5c9b      	ldrb	r3, [r3, r2]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10b      	bne.n	8006f8c <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2228      	movs	r2, #40	; 0x28
 8006f78:	2100      	movs	r1, #0
 8006f7a:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2288      	movs	r2, #136	; 0x88
 8006f80:	0212      	lsls	r2, r2, #8
 8006f82:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	0018      	movs	r0, r3
 8006f88:	f7fe fb72 	bl	8005670 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2229      	movs	r2, #41	; 0x29
 8006f90:	2102      	movs	r1, #2
 8006f92:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	22ca      	movs	r2, #202	; 0xca
 8006f9a:	625a      	str	r2, [r3, #36]	; 0x24
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2253      	movs	r2, #83	; 0x53
 8006fa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006fa4:	250f      	movs	r5, #15
 8006fa6:	197c      	adds	r4, r7, r5
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	0018      	movs	r0, r3
 8006fac:	f000 f88d 	bl	80070ca <RTC_EnterInitMode>
 8006fb0:	0003      	movs	r3, r0
 8006fb2:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8006fb4:	0028      	movs	r0, r5
 8006fb6:	183b      	adds	r3, r7, r0
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d148      	bne.n	8007050 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	699a      	ldr	r2, [r3, #24]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	492b      	ldr	r1, [pc, #172]	; (8007078 <HAL_RTC_Init+0x128>)
 8006fca:	400a      	ands	r2, r1
 8006fcc:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6999      	ldr	r1, [r3, #24]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6912      	ldr	r2, [r2, #16]
 8006ff4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6919      	ldr	r1, [r3, #16]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	041a      	lsls	r2, r3, #16
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800700a:	0005      	movs	r5, r0
 800700c:	183c      	adds	r4, r7, r0
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	0018      	movs	r0, r3
 8007012:	f000 f89d 	bl	8007150 <RTC_ExitInitMode>
 8007016:	0003      	movs	r3, r0
 8007018:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800701a:	197b      	adds	r3, r7, r5
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d116      	bne.n	8007050 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699a      	ldr	r2, [r3, #24]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	00d2      	lsls	r2, r2, #3
 800702e:	08d2      	lsrs	r2, r2, #3
 8007030:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6999      	ldr	r1, [r3, #24]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	431a      	orrs	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	22ff      	movs	r2, #255	; 0xff
 8007056:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8007058:	230f      	movs	r3, #15
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d103      	bne.n	800706a <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2229      	movs	r2, #41	; 0x29
 8007066:	2101      	movs	r1, #1
 8007068:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800706a:	230f      	movs	r3, #15
 800706c:	18fb      	adds	r3, r7, r3
 800706e:	781b      	ldrb	r3, [r3, #0]
}
 8007070:	0018      	movs	r0, r3
 8007072:	46bd      	mov	sp, r7
 8007074:	b004      	add	sp, #16
 8007076:	bdb0      	pop	{r4, r5, r7, pc}
 8007078:	fb8fffbf 	.word	0xfb8fffbf

0800707c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	21a0      	movs	r1, #160	; 0xa0
 8007090:	438a      	bics	r2, r1
 8007092:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007094:	f7fe fd74 	bl	8005b80 <HAL_GetTick>
 8007098:	0003      	movs	r3, r0
 800709a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800709c:	e00a      	b.n	80070b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800709e:	f7fe fd6f 	bl	8005b80 <HAL_GetTick>
 80070a2:	0002      	movs	r2, r0
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	1ad2      	subs	r2, r2, r3
 80070a8:	23fa      	movs	r3, #250	; 0xfa
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d901      	bls.n	80070b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e006      	b.n	80070c2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	2220      	movs	r2, #32
 80070bc:	4013      	ands	r3, r2
 80070be:	d0ee      	beq.n	800709e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	0018      	movs	r0, r3
 80070c4:	46bd      	mov	sp, r7
 80070c6:	b004      	add	sp, #16
 80070c8:	bd80      	pop	{r7, pc}

080070ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80070d2:	230f      	movs	r3, #15
 80070d4:	18fb      	adds	r3, r7, r3
 80070d6:	2200      	movs	r2, #0
 80070d8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	2240      	movs	r2, #64	; 0x40
 80070e2:	4013      	ands	r3, r2
 80070e4:	d12c      	bne.n	8007140 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2180      	movs	r1, #128	; 0x80
 80070f2:	430a      	orrs	r2, r1
 80070f4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80070f6:	f7fe fd43 	bl	8005b80 <HAL_GetTick>
 80070fa:	0003      	movs	r3, r0
 80070fc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80070fe:	e014      	b.n	800712a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007100:	f7fe fd3e 	bl	8005b80 <HAL_GetTick>
 8007104:	0002      	movs	r2, r0
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	1ad2      	subs	r2, r2, r3
 800710a:	200f      	movs	r0, #15
 800710c:	183b      	adds	r3, r7, r0
 800710e:	1839      	adds	r1, r7, r0
 8007110:	7809      	ldrb	r1, [r1, #0]
 8007112:	7019      	strb	r1, [r3, #0]
 8007114:	23fa      	movs	r3, #250	; 0xfa
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	429a      	cmp	r2, r3
 800711a:	d906      	bls.n	800712a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800711c:	183b      	adds	r3, r7, r0
 800711e:	2203      	movs	r2, #3
 8007120:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2229      	movs	r2, #41	; 0x29
 8007126:	2103      	movs	r1, #3
 8007128:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	2240      	movs	r2, #64	; 0x40
 8007132:	4013      	ands	r3, r2
 8007134:	d104      	bne.n	8007140 <RTC_EnterInitMode+0x76>
 8007136:	230f      	movs	r3, #15
 8007138:	18fb      	adds	r3, r7, r3
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b03      	cmp	r3, #3
 800713e:	d1df      	bne.n	8007100 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007140:	230f      	movs	r3, #15
 8007142:	18fb      	adds	r3, r7, r3
 8007144:	781b      	ldrb	r3, [r3, #0]
}
 8007146:	0018      	movs	r0, r3
 8007148:	46bd      	mov	sp, r7
 800714a:	b004      	add	sp, #16
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007150:	b590      	push	{r4, r7, lr}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007158:	240f      	movs	r4, #15
 800715a:	193b      	adds	r3, r7, r4
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007160:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <RTC_ExitInitMode+0x84>)
 8007162:	68da      	ldr	r2, [r3, #12]
 8007164:	4b1b      	ldr	r3, [pc, #108]	; (80071d4 <RTC_ExitInitMode+0x84>)
 8007166:	2180      	movs	r1, #128	; 0x80
 8007168:	438a      	bics	r2, r1
 800716a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800716c:	4b19      	ldr	r3, [pc, #100]	; (80071d4 <RTC_ExitInitMode+0x84>)
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	2220      	movs	r2, #32
 8007172:	4013      	ands	r3, r2
 8007174:	d10d      	bne.n	8007192 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	0018      	movs	r0, r3
 800717a:	f7ff ff7f 	bl	800707c <HAL_RTC_WaitForSynchro>
 800717e:	1e03      	subs	r3, r0, #0
 8007180:	d021      	beq.n	80071c6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2229      	movs	r2, #41	; 0x29
 8007186:	2103      	movs	r1, #3
 8007188:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800718a:	193b      	adds	r3, r7, r4
 800718c:	2203      	movs	r2, #3
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	e019      	b.n	80071c6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007192:	4b10      	ldr	r3, [pc, #64]	; (80071d4 <RTC_ExitInitMode+0x84>)
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <RTC_ExitInitMode+0x84>)
 8007198:	2120      	movs	r1, #32
 800719a:	438a      	bics	r2, r1
 800719c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	0018      	movs	r0, r3
 80071a2:	f7ff ff6b 	bl	800707c <HAL_RTC_WaitForSynchro>
 80071a6:	1e03      	subs	r3, r0, #0
 80071a8:	d007      	beq.n	80071ba <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2229      	movs	r2, #41	; 0x29
 80071ae:	2103      	movs	r1, #3
 80071b0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80071b2:	230f      	movs	r3, #15
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	2203      	movs	r2, #3
 80071b8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071ba:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <RTC_ExitInitMode+0x84>)
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <RTC_ExitInitMode+0x84>)
 80071c0:	2120      	movs	r1, #32
 80071c2:	430a      	orrs	r2, r1
 80071c4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80071c6:	230f      	movs	r3, #15
 80071c8:	18fb      	adds	r3, r7, r3
 80071ca:	781b      	ldrb	r3, [r3, #0]
}
 80071cc:	0018      	movs	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	b005      	add	sp, #20
 80071d2:	bd90      	pop	{r4, r7, pc}
 80071d4:	40002800 	.word	0x40002800

080071d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e0a8      	b.n	800733c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	2382      	movs	r3, #130	; 0x82
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d009      	beq.n	8007212 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	61da      	str	r2, [r3, #28]
 8007204:	e005      	b.n	8007212 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	225d      	movs	r2, #93	; 0x5d
 800721c:	5c9b      	ldrb	r3, [r3, r2]
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d107      	bne.n	8007234 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	225c      	movs	r2, #92	; 0x5c
 8007228:	2100      	movs	r1, #0
 800722a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	0018      	movs	r0, r3
 8007230:	f7fe fa5c 	bl	80056ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	225d      	movs	r2, #93	; 0x5d
 8007238:	2102      	movs	r1, #2
 800723a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2140      	movs	r1, #64	; 0x40
 8007248:	438a      	bics	r2, r1
 800724a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	23e0      	movs	r3, #224	; 0xe0
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	429a      	cmp	r2, r3
 8007256:	d902      	bls.n	800725e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e002      	b.n	8007264 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800725e:	2380      	movs	r3, #128	; 0x80
 8007260:	015b      	lsls	r3, r3, #5
 8007262:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	23f0      	movs	r3, #240	; 0xf0
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	429a      	cmp	r2, r3
 800726e:	d008      	beq.n	8007282 <HAL_SPI_Init+0xaa>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	23e0      	movs	r3, #224	; 0xe0
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	429a      	cmp	r2, r3
 800727a:	d002      	beq.n	8007282 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	2382      	movs	r3, #130	; 0x82
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	401a      	ands	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6899      	ldr	r1, [r3, #8]
 8007290:	2384      	movs	r3, #132	; 0x84
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	400b      	ands	r3, r1
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2102      	movs	r1, #2
 800729e:	400b      	ands	r3, r1
 80072a0:	431a      	orrs	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	2101      	movs	r1, #1
 80072a8:	400b      	ands	r3, r1
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6999      	ldr	r1, [r3, #24]
 80072b0:	2380      	movs	r3, #128	; 0x80
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	400b      	ands	r3, r1
 80072b6:	431a      	orrs	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	2138      	movs	r1, #56	; 0x38
 80072be:	400b      	ands	r3, r1
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	2180      	movs	r1, #128	; 0x80
 80072c8:	400b      	ands	r3, r1
 80072ca:	431a      	orrs	r2, r3
 80072cc:	0011      	movs	r1, r2
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072d2:	2380      	movs	r3, #128	; 0x80
 80072d4:	019b      	lsls	r3, r3, #6
 80072d6:	401a      	ands	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	2204      	movs	r2, #4
 80072e8:	401a      	ands	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	2110      	movs	r1, #16
 80072f0:	400b      	ands	r3, r1
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f8:	2108      	movs	r1, #8
 80072fa:	400b      	ands	r3, r1
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68d9      	ldr	r1, [r3, #12]
 8007302:	23f0      	movs	r3, #240	; 0xf0
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	400b      	ands	r3, r1
 8007308:	431a      	orrs	r2, r3
 800730a:	0011      	movs	r1, r2
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	2380      	movs	r3, #128	; 0x80
 8007310:	015b      	lsls	r3, r3, #5
 8007312:	401a      	ands	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	69da      	ldr	r2, [r3, #28]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4907      	ldr	r1, [pc, #28]	; (8007344 <HAL_SPI_Init+0x16c>)
 8007328:	400a      	ands	r2, r1
 800732a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	225d      	movs	r2, #93	; 0x5d
 8007336:	2101      	movs	r1, #1
 8007338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	0018      	movs	r0, r3
 800733e:	46bd      	mov	sp, r7
 8007340:	b004      	add	sp, #16
 8007342:	bd80      	pop	{r7, pc}
 8007344:	fffff7ff 	.word	0xfffff7ff

08007348 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b088      	sub	sp, #32
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	1dbb      	adds	r3, r7, #6
 8007356:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007358:	231f      	movs	r3, #31
 800735a:	18fb      	adds	r3, r7, r3
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	225c      	movs	r2, #92	; 0x5c
 8007364:	5c9b      	ldrb	r3, [r3, r2]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d101      	bne.n	800736e <HAL_SPI_Transmit+0x26>
 800736a:	2302      	movs	r3, #2
 800736c:	e140      	b.n	80075f0 <HAL_SPI_Transmit+0x2a8>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	225c      	movs	r2, #92	; 0x5c
 8007372:	2101      	movs	r1, #1
 8007374:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007376:	f7fe fc03 	bl	8005b80 <HAL_GetTick>
 800737a:	0003      	movs	r3, r0
 800737c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800737e:	2316      	movs	r3, #22
 8007380:	18fb      	adds	r3, r7, r3
 8007382:	1dba      	adds	r2, r7, #6
 8007384:	8812      	ldrh	r2, [r2, #0]
 8007386:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	225d      	movs	r2, #93	; 0x5d
 800738c:	5c9b      	ldrb	r3, [r3, r2]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b01      	cmp	r3, #1
 8007392:	d004      	beq.n	800739e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007394:	231f      	movs	r3, #31
 8007396:	18fb      	adds	r3, r7, r3
 8007398:	2202      	movs	r2, #2
 800739a:	701a      	strb	r2, [r3, #0]
    goto error;
 800739c:	e11d      	b.n	80075da <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_SPI_Transmit+0x64>
 80073a4:	1dbb      	adds	r3, r7, #6
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80073ac:	231f      	movs	r3, #31
 80073ae:	18fb      	adds	r3, r7, r3
 80073b0:	2201      	movs	r2, #1
 80073b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80073b4:	e111      	b.n	80075da <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	225d      	movs	r2, #93	; 0x5d
 80073ba:	2103      	movs	r1, #3
 80073bc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	1dba      	adds	r2, r7, #6
 80073ce:	8812      	ldrh	r2, [r2, #0]
 80073d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	1dba      	adds	r2, r7, #6
 80073d6:	8812      	ldrh	r2, [r2, #0]
 80073d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2244      	movs	r2, #68	; 0x44
 80073e4:	2100      	movs	r1, #0
 80073e6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2246      	movs	r2, #70	; 0x46
 80073ec:	2100      	movs	r1, #0
 80073ee:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	2380      	movs	r3, #128	; 0x80
 8007402:	021b      	lsls	r3, r3, #8
 8007404:	429a      	cmp	r2, r3
 8007406:	d110      	bne.n	800742a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2140      	movs	r1, #64	; 0x40
 8007414:	438a      	bics	r2, r1
 8007416:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2180      	movs	r1, #128	; 0x80
 8007424:	01c9      	lsls	r1, r1, #7
 8007426:	430a      	orrs	r2, r1
 8007428:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2240      	movs	r2, #64	; 0x40
 8007432:	4013      	ands	r3, r2
 8007434:	2b40      	cmp	r3, #64	; 0x40
 8007436:	d007      	beq.n	8007448 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2140      	movs	r1, #64	; 0x40
 8007444:	430a      	orrs	r2, r1
 8007446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	23e0      	movs	r3, #224	; 0xe0
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	429a      	cmp	r2, r3
 8007452:	d94e      	bls.n	80074f2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <HAL_SPI_Transmit+0x11e>
 800745c:	2316      	movs	r3, #22
 800745e:	18fb      	adds	r3, r7, r3
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d13f      	bne.n	80074e6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	881a      	ldrh	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007476:	1c9a      	adds	r2, r3, #2
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007480:	b29b      	uxth	r3, r3
 8007482:	3b01      	subs	r3, #1
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800748a:	e02c      	b.n	80074e6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2202      	movs	r2, #2
 8007494:	4013      	ands	r3, r2
 8007496:	2b02      	cmp	r3, #2
 8007498:	d112      	bne.n	80074c0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	881a      	ldrh	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	1c9a      	adds	r2, r3, #2
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074be:	e012      	b.n	80074e6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074c0:	f7fe fb5e 	bl	8005b80 <HAL_GetTick>
 80074c4:	0002      	movs	r2, r0
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d802      	bhi.n	80074d6 <HAL_SPI_Transmit+0x18e>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	d102      	bne.n	80074dc <HAL_SPI_Transmit+0x194>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d104      	bne.n	80074e6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80074dc:	231f      	movs	r3, #31
 80074de:	18fb      	adds	r3, r7, r3
 80074e0:	2203      	movs	r2, #3
 80074e2:	701a      	strb	r2, [r3, #0]
          goto error;
 80074e4:	e079      	b.n	80075da <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1cd      	bne.n	800748c <HAL_SPI_Transmit+0x144>
 80074f0:	e04f      	b.n	8007592 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <HAL_SPI_Transmit+0x1bc>
 80074fa:	2316      	movs	r3, #22
 80074fc:	18fb      	adds	r3, r7, r3
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d141      	bne.n	8007588 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	330c      	adds	r3, #12
 800750e:	7812      	ldrb	r2, [r2, #0]
 8007510:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007520:	b29b      	uxth	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800752a:	e02d      	b.n	8007588 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	2202      	movs	r2, #2
 8007534:	4013      	ands	r3, r2
 8007536:	2b02      	cmp	r3, #2
 8007538:	d113      	bne.n	8007562 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	330c      	adds	r3, #12
 8007544:	7812      	ldrb	r2, [r2, #0]
 8007546:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007560:	e012      	b.n	8007588 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007562:	f7fe fb0d 	bl	8005b80 <HAL_GetTick>
 8007566:	0002      	movs	r2, r0
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d802      	bhi.n	8007578 <HAL_SPI_Transmit+0x230>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	3301      	adds	r3, #1
 8007576:	d102      	bne.n	800757e <HAL_SPI_Transmit+0x236>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800757e:	231f      	movs	r3, #31
 8007580:	18fb      	adds	r3, r7, r3
 8007582:	2203      	movs	r2, #3
 8007584:	701a      	strb	r2, [r3, #0]
          goto error;
 8007586:	e028      	b.n	80075da <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1cc      	bne.n	800752c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	0018      	movs	r0, r3
 800759a:	f000 fce5 	bl	8007f68 <SPI_EndRxTxTransaction>
 800759e:	1e03      	subs	r3, r0, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2220      	movs	r2, #32
 80075a6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075b0:	2300      	movs	r3, #0
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	613b      	str	r3, [r7, #16]
 80075c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d004      	beq.n	80075d8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80075ce:	231f      	movs	r3, #31
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	2201      	movs	r2, #1
 80075d4:	701a      	strb	r2, [r3, #0]
 80075d6:	e000      	b.n	80075da <HAL_SPI_Transmit+0x292>
  }

error:
 80075d8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	225d      	movs	r2, #93	; 0x5d
 80075de:	2101      	movs	r1, #1
 80075e0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	225c      	movs	r2, #92	; 0x5c
 80075e6:	2100      	movs	r1, #0
 80075e8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80075ea:	231f      	movs	r3, #31
 80075ec:	18fb      	adds	r3, r7, r3
 80075ee:	781b      	ldrb	r3, [r3, #0]
}
 80075f0:	0018      	movs	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b008      	add	sp, #32
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f8:	b590      	push	{r4, r7, lr}
 80075fa:	b089      	sub	sp, #36	; 0x24
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	603b      	str	r3, [r7, #0]
 8007604:	1dbb      	adds	r3, r7, #6
 8007606:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007608:	2317      	movs	r3, #23
 800760a:	18fb      	adds	r3, r7, r3
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	2382      	movs	r3, #130	; 0x82
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	429a      	cmp	r2, r3
 800761a:	d113      	bne.n	8007644 <HAL_SPI_Receive+0x4c>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10f      	bne.n	8007644 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	225d      	movs	r2, #93	; 0x5d
 8007628:	2104      	movs	r1, #4
 800762a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800762c:	1dbb      	adds	r3, r7, #6
 800762e:	881c      	ldrh	r4, [r3, #0]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	68b9      	ldr	r1, [r7, #8]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	0023      	movs	r3, r4
 800763c:	f000 f928 	bl	8007890 <HAL_SPI_TransmitReceive>
 8007640:	0003      	movs	r3, r0
 8007642:	e11c      	b.n	800787e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	225c      	movs	r2, #92	; 0x5c
 8007648:	5c9b      	ldrb	r3, [r3, r2]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d101      	bne.n	8007652 <HAL_SPI_Receive+0x5a>
 800764e:	2302      	movs	r3, #2
 8007650:	e115      	b.n	800787e <HAL_SPI_Receive+0x286>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	225c      	movs	r2, #92	; 0x5c
 8007656:	2101      	movs	r1, #1
 8007658:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800765a:	f7fe fa91 	bl	8005b80 <HAL_GetTick>
 800765e:	0003      	movs	r3, r0
 8007660:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	225d      	movs	r2, #93	; 0x5d
 8007666:	5c9b      	ldrb	r3, [r3, r2]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b01      	cmp	r3, #1
 800766c:	d004      	beq.n	8007678 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800766e:	2317      	movs	r3, #23
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	2202      	movs	r2, #2
 8007674:	701a      	strb	r2, [r3, #0]
    goto error;
 8007676:	e0f7      	b.n	8007868 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_SPI_Receive+0x8e>
 800767e:	1dbb      	adds	r3, r7, #6
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8007686:	2317      	movs	r3, #23
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	2201      	movs	r2, #1
 800768c:	701a      	strb	r2, [r3, #0]
    goto error;
 800768e:	e0eb      	b.n	8007868 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	225d      	movs	r2, #93	; 0x5d
 8007694:	2104      	movs	r1, #4
 8007696:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	1dba      	adds	r2, r7, #6
 80076a8:	2144      	movs	r1, #68	; 0x44
 80076aa:	8812      	ldrh	r2, [r2, #0]
 80076ac:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1dba      	adds	r2, r7, #6
 80076b2:	2146      	movs	r1, #70	; 0x46
 80076b4:	8812      	ldrh	r2, [r2, #0]
 80076b6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	68da      	ldr	r2, [r3, #12]
 80076da:	23e0      	movs	r3, #224	; 0xe0
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	429a      	cmp	r2, r3
 80076e0:	d908      	bls.n	80076f4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4966      	ldr	r1, [pc, #408]	; (8007888 <HAL_SPI_Receive+0x290>)
 80076ee:	400a      	ands	r2, r1
 80076f0:	605a      	str	r2, [r3, #4]
 80076f2:	e008      	b.n	8007706 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2180      	movs	r1, #128	; 0x80
 8007700:	0149      	lsls	r1, r1, #5
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	2380      	movs	r3, #128	; 0x80
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	429a      	cmp	r2, r3
 8007710:	d10f      	bne.n	8007732 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2140      	movs	r1, #64	; 0x40
 800771e:	438a      	bics	r2, r1
 8007720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4957      	ldr	r1, [pc, #348]	; (800788c <HAL_SPI_Receive+0x294>)
 800772e:	400a      	ands	r2, r1
 8007730:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2240      	movs	r2, #64	; 0x40
 800773a:	4013      	ands	r3, r2
 800773c:	2b40      	cmp	r3, #64	; 0x40
 800773e:	d007      	beq.n	8007750 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2140      	movs	r1, #64	; 0x40
 800774c:	430a      	orrs	r2, r1
 800774e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	23e0      	movs	r3, #224	; 0xe0
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	429a      	cmp	r2, r3
 800775a:	d900      	bls.n	800775e <HAL_SPI_Receive+0x166>
 800775c:	e069      	b.n	8007832 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800775e:	e031      	b.n	80077c4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	2201      	movs	r2, #1
 8007768:	4013      	ands	r3, r2
 800776a:	2b01      	cmp	r3, #1
 800776c:	d117      	bne.n	800779e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	330c      	adds	r3, #12
 8007774:	001a      	movs	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	b2d2      	uxtb	r2, r2
 800777e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2246      	movs	r2, #70	; 0x46
 800778e:	5a9b      	ldrh	r3, [r3, r2]
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	b299      	uxth	r1, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2246      	movs	r2, #70	; 0x46
 800779a:	5299      	strh	r1, [r3, r2]
 800779c:	e012      	b.n	80077c4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800779e:	f7fe f9ef 	bl	8005b80 <HAL_GetTick>
 80077a2:	0002      	movs	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d802      	bhi.n	80077b4 <HAL_SPI_Receive+0x1bc>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	3301      	adds	r3, #1
 80077b2:	d102      	bne.n	80077ba <HAL_SPI_Receive+0x1c2>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d104      	bne.n	80077c4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80077ba:	2317      	movs	r3, #23
 80077bc:	18fb      	adds	r3, r7, r3
 80077be:	2203      	movs	r2, #3
 80077c0:	701a      	strb	r2, [r3, #0]
          goto error;
 80077c2:	e051      	b.n	8007868 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2246      	movs	r2, #70	; 0x46
 80077c8:	5a9b      	ldrh	r3, [r3, r2]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1c7      	bne.n	8007760 <HAL_SPI_Receive+0x168>
 80077d0:	e035      	b.n	800783e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	2201      	movs	r2, #1
 80077da:	4013      	ands	r3, r2
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d115      	bne.n	800780c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	b292      	uxth	r2, r2
 80077ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	1c9a      	adds	r2, r3, #2
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2246      	movs	r2, #70	; 0x46
 80077fc:	5a9b      	ldrh	r3, [r3, r2]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b299      	uxth	r1, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2246      	movs	r2, #70	; 0x46
 8007808:	5299      	strh	r1, [r3, r2]
 800780a:	e012      	b.n	8007832 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800780c:	f7fe f9b8 	bl	8005b80 <HAL_GetTick>
 8007810:	0002      	movs	r2, r0
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d802      	bhi.n	8007822 <HAL_SPI_Receive+0x22a>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	3301      	adds	r3, #1
 8007820:	d102      	bne.n	8007828 <HAL_SPI_Receive+0x230>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8007828:	2317      	movs	r3, #23
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	2203      	movs	r2, #3
 800782e:	701a      	strb	r2, [r3, #0]
          goto error;
 8007830:	e01a      	b.n	8007868 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2246      	movs	r2, #70	; 0x46
 8007836:	5a9b      	ldrh	r3, [r3, r2]
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1c9      	bne.n	80077d2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	0018      	movs	r0, r3
 8007846:	f000 fb31 	bl	8007eac <SPI_EndRxTransaction>
 800784a:	1e03      	subs	r3, r0, #0
 800784c:	d002      	beq.n	8007854 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2220      	movs	r2, #32
 8007852:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007858:	2b00      	cmp	r3, #0
 800785a:	d004      	beq.n	8007866 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800785c:	2317      	movs	r3, #23
 800785e:	18fb      	adds	r3, r7, r3
 8007860:	2201      	movs	r2, #1
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	e000      	b.n	8007868 <HAL_SPI_Receive+0x270>
  }

error :
 8007866:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	225d      	movs	r2, #93	; 0x5d
 800786c:	2101      	movs	r1, #1
 800786e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	225c      	movs	r2, #92	; 0x5c
 8007874:	2100      	movs	r1, #0
 8007876:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007878:	2317      	movs	r3, #23
 800787a:	18fb      	adds	r3, r7, r3
 800787c:	781b      	ldrb	r3, [r3, #0]
}
 800787e:	0018      	movs	r0, r3
 8007880:	46bd      	mov	sp, r7
 8007882:	b007      	add	sp, #28
 8007884:	bd90      	pop	{r4, r7, pc}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	ffffefff 	.word	0xffffefff
 800788c:	ffffbfff 	.word	0xffffbfff

08007890 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08a      	sub	sp, #40	; 0x28
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	001a      	movs	r2, r3
 800789e:	1cbb      	adds	r3, r7, #2
 80078a0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078a2:	2301      	movs	r3, #1
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078a6:	2323      	movs	r3, #35	; 0x23
 80078a8:	18fb      	adds	r3, r7, r3
 80078aa:	2200      	movs	r2, #0
 80078ac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	225c      	movs	r2, #92	; 0x5c
 80078b2:	5c9b      	ldrb	r3, [r3, r2]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_SPI_TransmitReceive+0x2c>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e1b5      	b.n	8007c28 <HAL_SPI_TransmitReceive+0x398>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	225c      	movs	r2, #92	; 0x5c
 80078c0:	2101      	movs	r1, #1
 80078c2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078c4:	f7fe f95c 	bl	8005b80 <HAL_GetTick>
 80078c8:	0003      	movs	r3, r0
 80078ca:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078cc:	201b      	movs	r0, #27
 80078ce:	183b      	adds	r3, r7, r0
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	215d      	movs	r1, #93	; 0x5d
 80078d4:	5c52      	ldrb	r2, [r2, r1]
 80078d6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80078de:	2312      	movs	r3, #18
 80078e0:	18fb      	adds	r3, r7, r3
 80078e2:	1cba      	adds	r2, r7, #2
 80078e4:	8812      	ldrh	r2, [r2, #0]
 80078e6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078e8:	183b      	adds	r3, r7, r0
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d011      	beq.n	8007914 <HAL_SPI_TransmitReceive+0x84>
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	2382      	movs	r3, #130	; 0x82
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d107      	bne.n	800790a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d103      	bne.n	800790a <HAL_SPI_TransmitReceive+0x7a>
 8007902:	183b      	adds	r3, r7, r0
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	2b04      	cmp	r3, #4
 8007908:	d004      	beq.n	8007914 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800790a:	2323      	movs	r3, #35	; 0x23
 800790c:	18fb      	adds	r3, r7, r3
 800790e:	2202      	movs	r2, #2
 8007910:	701a      	strb	r2, [r3, #0]
    goto error;
 8007912:	e17e      	b.n	8007c12 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d006      	beq.n	8007928 <HAL_SPI_TransmitReceive+0x98>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <HAL_SPI_TransmitReceive+0x98>
 8007920:	1cbb      	adds	r3, r7, #2
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007928:	2323      	movs	r3, #35	; 0x23
 800792a:	18fb      	adds	r3, r7, r3
 800792c:	2201      	movs	r2, #1
 800792e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007930:	e16f      	b.n	8007c12 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	225d      	movs	r2, #93	; 0x5d
 8007936:	5c9b      	ldrb	r3, [r3, r2]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b04      	cmp	r3, #4
 800793c:	d003      	beq.n	8007946 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	225d      	movs	r2, #93	; 0x5d
 8007942:	2105      	movs	r1, #5
 8007944:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	1cba      	adds	r2, r7, #2
 8007956:	2146      	movs	r1, #70	; 0x46
 8007958:	8812      	ldrh	r2, [r2, #0]
 800795a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	1cba      	adds	r2, r7, #2
 8007960:	2144      	movs	r1, #68	; 0x44
 8007962:	8812      	ldrh	r2, [r2, #0]
 8007964:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	1cba      	adds	r2, r7, #2
 8007970:	8812      	ldrh	r2, [r2, #0]
 8007972:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	1cba      	adds	r2, r7, #2
 8007978:	8812      	ldrh	r2, [r2, #0]
 800797a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	23e0      	movs	r3, #224	; 0xe0
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	429a      	cmp	r2, r3
 8007992:	d908      	bls.n	80079a6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	49a4      	ldr	r1, [pc, #656]	; (8007c30 <HAL_SPI_TransmitReceive+0x3a0>)
 80079a0:	400a      	ands	r2, r1
 80079a2:	605a      	str	r2, [r3, #4]
 80079a4:	e008      	b.n	80079b8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2180      	movs	r1, #128	; 0x80
 80079b2:	0149      	lsls	r1, r1, #5
 80079b4:	430a      	orrs	r2, r1
 80079b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2240      	movs	r2, #64	; 0x40
 80079c0:	4013      	ands	r3, r2
 80079c2:	2b40      	cmp	r3, #64	; 0x40
 80079c4:	d007      	beq.n	80079d6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2140      	movs	r1, #64	; 0x40
 80079d2:	430a      	orrs	r2, r1
 80079d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	23e0      	movs	r3, #224	; 0xe0
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	429a      	cmp	r2, r3
 80079e0:	d800      	bhi.n	80079e4 <HAL_SPI_TransmitReceive+0x154>
 80079e2:	e07f      	b.n	8007ae4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d005      	beq.n	80079f8 <HAL_SPI_TransmitReceive+0x168>
 80079ec:	2312      	movs	r3, #18
 80079ee:	18fb      	adds	r3, r7, r3
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d000      	beq.n	80079f8 <HAL_SPI_TransmitReceive+0x168>
 80079f6:	e069      	b.n	8007acc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fc:	881a      	ldrh	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a08:	1c9a      	adds	r2, r3, #2
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a1c:	e056      	b.n	8007acc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2202      	movs	r2, #2
 8007a26:	4013      	ands	r3, r2
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d11b      	bne.n	8007a64 <HAL_SPI_TransmitReceive+0x1d4>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d016      	beq.n	8007a64 <HAL_SPI_TransmitReceive+0x1d4>
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d113      	bne.n	8007a64 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a40:	881a      	ldrh	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4c:	1c9a      	adds	r2, r3, #2
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d11c      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x21c>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2246      	movs	r2, #70	; 0x46
 8007a76:	5a9b      	ldrh	r3, [r3, r2]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d016      	beq.n	8007aac <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	b292      	uxth	r2, r2
 8007a8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	1c9a      	adds	r2, r3, #2
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2246      	movs	r2, #70	; 0x46
 8007a9a:	5a9b      	ldrh	r3, [r3, r2]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	b299      	uxth	r1, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2246      	movs	r2, #70	; 0x46
 8007aa6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007aac:	f7fe f868 	bl	8005b80 <HAL_GetTick>
 8007ab0:	0002      	movs	r2, r0
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d807      	bhi.n	8007acc <HAL_SPI_TransmitReceive+0x23c>
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	3301      	adds	r3, #1
 8007ac0:	d004      	beq.n	8007acc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8007ac2:	2323      	movs	r3, #35	; 0x23
 8007ac4:	18fb      	adds	r3, r7, r3
 8007ac6:	2203      	movs	r2, #3
 8007ac8:	701a      	strb	r2, [r3, #0]
        goto error;
 8007aca:	e0a2      	b.n	8007c12 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1a3      	bne.n	8007a1e <HAL_SPI_TransmitReceive+0x18e>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2246      	movs	r2, #70	; 0x46
 8007ada:	5a9b      	ldrh	r3, [r3, r2]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d19d      	bne.n	8007a1e <HAL_SPI_TransmitReceive+0x18e>
 8007ae2:	e085      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <HAL_SPI_TransmitReceive+0x268>
 8007aec:	2312      	movs	r3, #18
 8007aee:	18fb      	adds	r3, r7, r3
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d000      	beq.n	8007af8 <HAL_SPI_TransmitReceive+0x268>
 8007af6:	e070      	b.n	8007bda <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	7812      	ldrb	r2, [r2, #0]
 8007b04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b1e:	e05c      	b.n	8007bda <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	2202      	movs	r2, #2
 8007b28:	4013      	ands	r3, r2
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d11c      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x2d8>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d017      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0x2d8>
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d114      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	330c      	adds	r3, #12
 8007b48:	7812      	ldrb	r2, [r2, #0]
 8007b4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	4013      	ands	r3, r2
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d11e      	bne.n	8007bb4 <HAL_SPI_TransmitReceive+0x324>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2246      	movs	r2, #70	; 0x46
 8007b7a:	5a9b      	ldrh	r3, [r3, r2]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d018      	beq.n	8007bb4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	330c      	adds	r3, #12
 8007b88:	001a      	movs	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	7812      	ldrb	r2, [r2, #0]
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2246      	movs	r2, #70	; 0x46
 8007ba2:	5a9b      	ldrh	r3, [r3, r2]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	b299      	uxth	r1, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2246      	movs	r2, #70	; 0x46
 8007bae:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bb4:	f7fd ffe4 	bl	8005b80 <HAL_GetTick>
 8007bb8:	0002      	movs	r2, r0
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d802      	bhi.n	8007bca <HAL_SPI_TransmitReceive+0x33a>
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	d102      	bne.n	8007bd0 <HAL_SPI_TransmitReceive+0x340>
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8007bd0:	2323      	movs	r3, #35	; 0x23
 8007bd2:	18fb      	adds	r3, r7, r3
 8007bd4:	2203      	movs	r2, #3
 8007bd6:	701a      	strb	r2, [r3, #0]
        goto error;
 8007bd8:	e01b      	b.n	8007c12 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d19d      	bne.n	8007b20 <HAL_SPI_TransmitReceive+0x290>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2246      	movs	r2, #70	; 0x46
 8007be8:	5a9b      	ldrh	r3, [r3, r2]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d197      	bne.n	8007b20 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f000 f9b6 	bl	8007f68 <SPI_EndRxTxTransaction>
 8007bfc:	1e03      	subs	r3, r0, #0
 8007bfe:	d007      	beq.n	8007c10 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007c00:	2323      	movs	r3, #35	; 0x23
 8007c02:	18fb      	adds	r3, r7, r3
 8007c04:	2201      	movs	r2, #1
 8007c06:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	661a      	str	r2, [r3, #96]	; 0x60
 8007c0e:	e000      	b.n	8007c12 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007c10:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	225d      	movs	r2, #93	; 0x5d
 8007c16:	2101      	movs	r1, #1
 8007c18:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	225c      	movs	r2, #92	; 0x5c
 8007c1e:	2100      	movs	r1, #0
 8007c20:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007c22:	2323      	movs	r3, #35	; 0x23
 8007c24:	18fb      	adds	r3, r7, r3
 8007c26:	781b      	ldrb	r3, [r3, #0]
}
 8007c28:	0018      	movs	r0, r3
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	b00a      	add	sp, #40	; 0x28
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	ffffefff 	.word	0xffffefff

08007c34 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	225d      	movs	r2, #93	; 0x5d
 8007c40:	5c9b      	ldrb	r3, [r3, r2]
 8007c42:	b2db      	uxtb	r3, r3
}
 8007c44:	0018      	movs	r0, r3
 8007c46:	46bd      	mov	sp, r7
 8007c48:	b002      	add	sp, #8
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	1dfb      	adds	r3, r7, #7
 8007c5a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c5c:	f7fd ff90 	bl	8005b80 <HAL_GetTick>
 8007c60:	0002      	movs	r2, r0
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	1a9b      	subs	r3, r3, r2
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	18d3      	adds	r3, r2, r3
 8007c6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c6c:	f7fd ff88 	bl	8005b80 <HAL_GetTick>
 8007c70:	0003      	movs	r3, r0
 8007c72:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c74:	4b3a      	ldr	r3, [pc, #232]	; (8007d60 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	015b      	lsls	r3, r3, #5
 8007c7a:	0d1b      	lsrs	r3, r3, #20
 8007c7c:	69fa      	ldr	r2, [r7, #28]
 8007c7e:	4353      	muls	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c82:	e058      	b.n	8007d36 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	3301      	adds	r3, #1
 8007c88:	d055      	beq.n	8007d36 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c8a:	f7fd ff79 	bl	8005b80 <HAL_GetTick>
 8007c8e:	0002      	movs	r2, r0
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	69fa      	ldr	r2, [r7, #28]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d902      	bls.n	8007ca0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d142      	bne.n	8007d26 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	21e0      	movs	r1, #224	; 0xe0
 8007cac:	438a      	bics	r2, r1
 8007cae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	2382      	movs	r3, #130	; 0x82
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d113      	bne.n	8007ce4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	2380      	movs	r3, #128	; 0x80
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d005      	beq.n	8007cd4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	2380      	movs	r3, #128	; 0x80
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d107      	bne.n	8007ce4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2140      	movs	r1, #64	; 0x40
 8007ce0:	438a      	bics	r2, r1
 8007ce2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ce8:	2380      	movs	r3, #128	; 0x80
 8007cea:	019b      	lsls	r3, r3, #6
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d110      	bne.n	8007d12 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	491a      	ldr	r1, [pc, #104]	; (8007d64 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007cfc:	400a      	ands	r2, r1
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2180      	movs	r1, #128	; 0x80
 8007d0c:	0189      	lsls	r1, r1, #6
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	225d      	movs	r2, #93	; 0x5d
 8007d16:	2101      	movs	r1, #1
 8007d18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	225c      	movs	r2, #92	; 0x5c
 8007d1e:	2100      	movs	r1, #0
 8007d20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e017      	b.n	8007d56 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	425a      	negs	r2, r3
 8007d46:	4153      	adcs	r3, r2
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	001a      	movs	r2, r3
 8007d4c:	1dfb      	adds	r3, r7, #7
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d197      	bne.n	8007c84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	0018      	movs	r0, r3
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	b008      	add	sp, #32
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	46c0      	nop			; (mov r8, r8)
 8007d60:	20000008 	.word	0x20000008
 8007d64:	ffffdfff 	.word	0xffffdfff

08007d68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08a      	sub	sp, #40	; 0x28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007d76:	2317      	movs	r3, #23
 8007d78:	18fb      	adds	r3, r7, r3
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d7e:	f7fd feff 	bl	8005b80 <HAL_GetTick>
 8007d82:	0002      	movs	r2, r0
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	18d3      	adds	r3, r2, r3
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007d8e:	f7fd fef7 	bl	8005b80 <HAL_GetTick>
 8007d92:	0003      	movs	r3, r0
 8007d94:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d9e:	4b41      	ldr	r3, [pc, #260]	; (8007ea4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	0013      	movs	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	189b      	adds	r3, r3, r2
 8007da8:	00da      	lsls	r2, r3, #3
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	0d1b      	lsrs	r3, r3, #20
 8007dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db0:	4353      	muls	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007db4:	e068      	b.n	8007e88 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	23c0      	movs	r3, #192	; 0xc0
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d10a      	bne.n	8007dd6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d107      	bne.n	8007dd6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	2117      	movs	r1, #23
 8007dce:	187b      	adds	r3, r7, r1
 8007dd0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007dd2:	187b      	adds	r3, r7, r1
 8007dd4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	d055      	beq.n	8007e88 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ddc:	f7fd fed0 	bl	8005b80 <HAL_GetTick>
 8007de0:	0002      	movs	r2, r0
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d902      	bls.n	8007df2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d142      	bne.n	8007e78 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	21e0      	movs	r1, #224	; 0xe0
 8007dfe:	438a      	bics	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	2382      	movs	r3, #130	; 0x82
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d113      	bne.n	8007e36 <SPI_WaitFifoStateUntilTimeout+0xce>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	2380      	movs	r3, #128	; 0x80
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d005      	beq.n	8007e26 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	2380      	movs	r3, #128	; 0x80
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d107      	bne.n	8007e36 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2140      	movs	r1, #64	; 0x40
 8007e32:	438a      	bics	r2, r1
 8007e34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e3a:	2380      	movs	r3, #128	; 0x80
 8007e3c:	019b      	lsls	r3, r3, #6
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d110      	bne.n	8007e64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4916      	ldr	r1, [pc, #88]	; (8007ea8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007e4e:	400a      	ands	r2, r1
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2180      	movs	r1, #128	; 0x80
 8007e5e:	0189      	lsls	r1, r1, #6
 8007e60:	430a      	orrs	r2, r1
 8007e62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	225d      	movs	r2, #93	; 0x5d
 8007e68:	2101      	movs	r1, #1
 8007e6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	225c      	movs	r2, #92	; 0x5c
 8007e70:	2100      	movs	r1, #0
 8007e72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e010      	b.n	8007e9a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	4013      	ands	r3, r2
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d18e      	bne.n	8007db6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b00a      	add	sp, #40	; 0x28
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	20000008 	.word	0x20000008
 8007ea8:	ffffdfff 	.word	0xffffdfff

08007eac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af02      	add	r7, sp, #8
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	2382      	movs	r3, #130	; 0x82
 8007ebe:	005b      	lsls	r3, r3, #1
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d113      	bne.n	8007eec <SPI_EndRxTransaction+0x40>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	2380      	movs	r3, #128	; 0x80
 8007eca:	021b      	lsls	r3, r3, #8
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d005      	beq.n	8007edc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	2380      	movs	r3, #128	; 0x80
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d107      	bne.n	8007eec <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2140      	movs	r1, #64	; 0x40
 8007ee8:	438a      	bics	r2, r1
 8007eea:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	0013      	movs	r3, r2
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2180      	movs	r1, #128	; 0x80
 8007efa:	f7ff fea7 	bl	8007c4c <SPI_WaitFlagStateUntilTimeout>
 8007efe:	1e03      	subs	r3, r0, #0
 8007f00:	d007      	beq.n	8007f12 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f06:	2220      	movs	r2, #32
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e026      	b.n	8007f60 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	2382      	movs	r3, #130	; 0x82
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d11f      	bne.n	8007f5e <SPI_EndRxTransaction+0xb2>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	2380      	movs	r3, #128	; 0x80
 8007f24:	021b      	lsls	r3, r3, #8
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d005      	beq.n	8007f36 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	2380      	movs	r3, #128	; 0x80
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d113      	bne.n	8007f5e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	23c0      	movs	r3, #192	; 0xc0
 8007f3a:	00d9      	lsls	r1, r3, #3
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	0013      	movs	r3, r2
 8007f44:	2200      	movs	r2, #0
 8007f46:	f7ff ff0f 	bl	8007d68 <SPI_WaitFifoStateUntilTimeout>
 8007f4a:	1e03      	subs	r3, r0, #0
 8007f4c:	d007      	beq.n	8007f5e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f52:	2220      	movs	r2, #32
 8007f54:	431a      	orrs	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e000      	b.n	8007f60 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	0018      	movs	r0, r3
 8007f62:	46bd      	mov	sp, r7
 8007f64:	b004      	add	sp, #16
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af02      	add	r7, sp, #8
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	23c0      	movs	r3, #192	; 0xc0
 8007f78:	0159      	lsls	r1, r3, #5
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	0013      	movs	r3, r2
 8007f82:	2200      	movs	r2, #0
 8007f84:	f7ff fef0 	bl	8007d68 <SPI_WaitFifoStateUntilTimeout>
 8007f88:	1e03      	subs	r3, r0, #0
 8007f8a:	d007      	beq.n	8007f9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f90:	2220      	movs	r2, #32
 8007f92:	431a      	orrs	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e027      	b.n	8007fec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	0013      	movs	r3, r2
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2180      	movs	r1, #128	; 0x80
 8007faa:	f7ff fe4f 	bl	8007c4c <SPI_WaitFlagStateUntilTimeout>
 8007fae:	1e03      	subs	r3, r0, #0
 8007fb0:	d007      	beq.n	8007fc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e014      	b.n	8007fec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	23c0      	movs	r3, #192	; 0xc0
 8007fc6:	00d9      	lsls	r1, r3, #3
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	0013      	movs	r3, r2
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f7ff fec9 	bl	8007d68 <SPI_WaitFifoStateUntilTimeout>
 8007fd6:	1e03      	subs	r3, r0, #0
 8007fd8:	d007      	beq.n	8007fea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fde:	2220      	movs	r2, #32
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e000      	b.n	8007fec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	0018      	movs	r0, r3
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	b004      	add	sp, #16
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e04a      	b.n	800809c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	223d      	movs	r2, #61	; 0x3d
 800800a:	5c9b      	ldrb	r3, [r3, r2]
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d107      	bne.n	8008022 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	223c      	movs	r2, #60	; 0x3c
 8008016:	2100      	movs	r1, #0
 8008018:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	0018      	movs	r0, r3
 800801e:	f7fd fbaf 	bl	8005780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	223d      	movs	r2, #61	; 0x3d
 8008026:	2102      	movs	r1, #2
 8008028:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3304      	adds	r3, #4
 8008032:	0019      	movs	r1, r3
 8008034:	0010      	movs	r0, r2
 8008036:	f000 f883 	bl	8008140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2248      	movs	r2, #72	; 0x48
 800803e:	2101      	movs	r1, #1
 8008040:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	223e      	movs	r2, #62	; 0x3e
 8008046:	2101      	movs	r1, #1
 8008048:	5499      	strb	r1, [r3, r2]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	223f      	movs	r2, #63	; 0x3f
 800804e:	2101      	movs	r1, #1
 8008050:	5499      	strb	r1, [r3, r2]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2240      	movs	r2, #64	; 0x40
 8008056:	2101      	movs	r1, #1
 8008058:	5499      	strb	r1, [r3, r2]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2241      	movs	r2, #65	; 0x41
 800805e:	2101      	movs	r1, #1
 8008060:	5499      	strb	r1, [r3, r2]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2242      	movs	r2, #66	; 0x42
 8008066:	2101      	movs	r1, #1
 8008068:	5499      	strb	r1, [r3, r2]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2243      	movs	r2, #67	; 0x43
 800806e:	2101      	movs	r1, #1
 8008070:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2244      	movs	r2, #68	; 0x44
 8008076:	2101      	movs	r1, #1
 8008078:	5499      	strb	r1, [r3, r2]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2245      	movs	r2, #69	; 0x45
 800807e:	2101      	movs	r1, #1
 8008080:	5499      	strb	r1, [r3, r2]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2246      	movs	r2, #70	; 0x46
 8008086:	2101      	movs	r1, #1
 8008088:	5499      	strb	r1, [r3, r2]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2247      	movs	r2, #71	; 0x47
 800808e:	2101      	movs	r1, #1
 8008090:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	223d      	movs	r2, #61	; 0x3d
 8008096:	2101      	movs	r1, #1
 8008098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	0018      	movs	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	b002      	add	sp, #8
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	223d      	movs	r2, #61	; 0x3d
 80080b0:	5c9b      	ldrb	r3, [r3, r2]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d001      	beq.n	80080bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e034      	b.n	8008126 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	223d      	movs	r2, #61	; 0x3d
 80080c0:	2102      	movs	r1, #2
 80080c2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a19      	ldr	r2, [pc, #100]	; (8008130 <HAL_TIM_Base_Start+0x8c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d009      	beq.n	80080e2 <HAL_TIM_Base_Start+0x3e>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a18      	ldr	r2, [pc, #96]	; (8008134 <HAL_TIM_Base_Start+0x90>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d004      	beq.n	80080e2 <HAL_TIM_Base_Start+0x3e>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a16      	ldr	r2, [pc, #88]	; (8008138 <HAL_TIM_Base_Start+0x94>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d116      	bne.n	8008110 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	4a14      	ldr	r2, [pc, #80]	; (800813c <HAL_TIM_Base_Start+0x98>)
 80080ea:	4013      	ands	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b06      	cmp	r3, #6
 80080f2:	d016      	beq.n	8008122 <HAL_TIM_Base_Start+0x7e>
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	2380      	movs	r3, #128	; 0x80
 80080f8:	025b      	lsls	r3, r3, #9
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d011      	beq.n	8008122 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2101      	movs	r1, #1
 800810a:	430a      	orrs	r2, r1
 800810c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810e:	e008      	b.n	8008122 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2101      	movs	r1, #1
 800811c:	430a      	orrs	r2, r1
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	e000      	b.n	8008124 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008122:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	0018      	movs	r0, r3
 8008128:	46bd      	mov	sp, r7
 800812a:	b004      	add	sp, #16
 800812c:	bd80      	pop	{r7, pc}
 800812e:	46c0      	nop			; (mov r8, r8)
 8008130:	40012c00 	.word	0x40012c00
 8008134:	40000400 	.word	0x40000400
 8008138:	40014000 	.word	0x40014000
 800813c:	00010007 	.word	0x00010007

08008140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a2f      	ldr	r2, [pc, #188]	; (8008210 <TIM_Base_SetConfig+0xd0>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d003      	beq.n	8008160 <TIM_Base_SetConfig+0x20>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a2e      	ldr	r2, [pc, #184]	; (8008214 <TIM_Base_SetConfig+0xd4>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d108      	bne.n	8008172 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2270      	movs	r2, #112	; 0x70
 8008164:	4393      	bics	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a26      	ldr	r2, [pc, #152]	; (8008210 <TIM_Base_SetConfig+0xd0>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d013      	beq.n	80081a2 <TIM_Base_SetConfig+0x62>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a25      	ldr	r2, [pc, #148]	; (8008214 <TIM_Base_SetConfig+0xd4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00f      	beq.n	80081a2 <TIM_Base_SetConfig+0x62>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a24      	ldr	r2, [pc, #144]	; (8008218 <TIM_Base_SetConfig+0xd8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00b      	beq.n	80081a2 <TIM_Base_SetConfig+0x62>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a23      	ldr	r2, [pc, #140]	; (800821c <TIM_Base_SetConfig+0xdc>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d007      	beq.n	80081a2 <TIM_Base_SetConfig+0x62>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a22      	ldr	r2, [pc, #136]	; (8008220 <TIM_Base_SetConfig+0xe0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d003      	beq.n	80081a2 <TIM_Base_SetConfig+0x62>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a21      	ldr	r2, [pc, #132]	; (8008224 <TIM_Base_SetConfig+0xe4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d108      	bne.n	80081b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4a20      	ldr	r2, [pc, #128]	; (8008228 <TIM_Base_SetConfig+0xe8>)
 80081a6:	4013      	ands	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2280      	movs	r2, #128	; 0x80
 80081b8:	4393      	bics	r3, r2
 80081ba:	001a      	movs	r2, r3
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a0c      	ldr	r2, [pc, #48]	; (8008210 <TIM_Base_SetConfig+0xd0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00b      	beq.n	80081fa <TIM_Base_SetConfig+0xba>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a0d      	ldr	r2, [pc, #52]	; (800821c <TIM_Base_SetConfig+0xdc>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d007      	beq.n	80081fa <TIM_Base_SetConfig+0xba>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a0c      	ldr	r2, [pc, #48]	; (8008220 <TIM_Base_SetConfig+0xe0>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d003      	beq.n	80081fa <TIM_Base_SetConfig+0xba>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a0b      	ldr	r2, [pc, #44]	; (8008224 <TIM_Base_SetConfig+0xe4>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d103      	bne.n	8008202 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	691a      	ldr	r2, [r3, #16]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	615a      	str	r2, [r3, #20]
}
 8008208:	46c0      	nop			; (mov r8, r8)
 800820a:	46bd      	mov	sp, r7
 800820c:	b004      	add	sp, #16
 800820e:	bd80      	pop	{r7, pc}
 8008210:	40012c00 	.word	0x40012c00
 8008214:	40000400 	.word	0x40000400
 8008218:	40002000 	.word	0x40002000
 800821c:	40014000 	.word	0x40014000
 8008220:	40014400 	.word	0x40014400
 8008224:	40014800 	.word	0x40014800
 8008228:	fffffcff 	.word	0xfffffcff

0800822c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e046      	b.n	80082cc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2284      	movs	r2, #132	; 0x84
 8008242:	589b      	ldr	r3, [r3, r2]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d107      	bne.n	8008258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2280      	movs	r2, #128	; 0x80
 800824c:	2100      	movs	r1, #0
 800824e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	0018      	movs	r0, r3
 8008254:	f7fd fab4 	bl	80057c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2284      	movs	r2, #132	; 0x84
 800825c:	2124      	movs	r1, #36	; 0x24
 800825e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2101      	movs	r1, #1
 800826c:	438a      	bics	r2, r1
 800826e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	0018      	movs	r0, r3
 8008274:	f000 f8dc 	bl	8008430 <UART_SetConfig>
 8008278:	0003      	movs	r3, r0
 800827a:	2b01      	cmp	r3, #1
 800827c:	d101      	bne.n	8008282 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e024      	b.n	80082cc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	0018      	movs	r0, r3
 800828e:	f000 fa75 	bl	800877c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	490d      	ldr	r1, [pc, #52]	; (80082d4 <HAL_UART_Init+0xa8>)
 800829e:	400a      	ands	r2, r1
 80082a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	212a      	movs	r1, #42	; 0x2a
 80082ae:	438a      	bics	r2, r1
 80082b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2101      	movs	r1, #1
 80082be:	430a      	orrs	r2, r1
 80082c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	0018      	movs	r0, r3
 80082c6:	f000 fb0d 	bl	80088e4 <UART_CheckIdleState>
 80082ca:	0003      	movs	r3, r0
}
 80082cc:	0018      	movs	r0, r3
 80082ce:	46bd      	mov	sp, r7
 80082d0:	b002      	add	sp, #8
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	ffffb7ff 	.word	0xffffb7ff

080082d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08a      	sub	sp, #40	; 0x28
 80082dc:	af02      	add	r7, sp, #8
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	1dbb      	adds	r3, r7, #6
 80082e6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2284      	movs	r2, #132	; 0x84
 80082ec:	589b      	ldr	r3, [r3, r2]
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	d000      	beq.n	80082f4 <HAL_UART_Transmit+0x1c>
 80082f2:	e097      	b.n	8008424 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <HAL_UART_Transmit+0x2a>
 80082fa:	1dbb      	adds	r3, r7, #6
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e08f      	b.n	8008426 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	2380      	movs	r3, #128	; 0x80
 800830c:	015b      	lsls	r3, r3, #5
 800830e:	429a      	cmp	r2, r3
 8008310:	d109      	bne.n	8008326 <HAL_UART_Transmit+0x4e>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d105      	bne.n	8008326 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2201      	movs	r2, #1
 800831e:	4013      	ands	r3, r2
 8008320:	d001      	beq.n	8008326 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e07f      	b.n	8008426 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2280      	movs	r2, #128	; 0x80
 800832a:	5c9b      	ldrb	r3, [r3, r2]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_UART_Transmit+0x5c>
 8008330:	2302      	movs	r3, #2
 8008332:	e078      	b.n	8008426 <HAL_UART_Transmit+0x14e>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2280      	movs	r2, #128	; 0x80
 8008338:	2101      	movs	r1, #1
 800833a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	228c      	movs	r2, #140	; 0x8c
 8008340:	2100      	movs	r1, #0
 8008342:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2284      	movs	r2, #132	; 0x84
 8008348:	2121      	movs	r1, #33	; 0x21
 800834a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800834c:	f7fd fc18 	bl	8005b80 <HAL_GetTick>
 8008350:	0003      	movs	r3, r0
 8008352:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	1dba      	adds	r2, r7, #6
 8008358:	2154      	movs	r1, #84	; 0x54
 800835a:	8812      	ldrh	r2, [r2, #0]
 800835c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	1dba      	adds	r2, r7, #6
 8008362:	2156      	movs	r1, #86	; 0x56
 8008364:	8812      	ldrh	r2, [r2, #0]
 8008366:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	2380      	movs	r3, #128	; 0x80
 800836e:	015b      	lsls	r3, r3, #5
 8008370:	429a      	cmp	r2, r3
 8008372:	d108      	bne.n	8008386 <HAL_UART_Transmit+0xae>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800837c:	2300      	movs	r3, #0
 800837e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	61bb      	str	r3, [r7, #24]
 8008384:	e003      	b.n	800838e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2280      	movs	r2, #128	; 0x80
 8008392:	2100      	movs	r1, #0
 8008394:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8008396:	e02c      	b.n	80083f2 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	0013      	movs	r3, r2
 80083a2:	2200      	movs	r2, #0
 80083a4:	2180      	movs	r1, #128	; 0x80
 80083a6:	f000 fae7 	bl	8008978 <UART_WaitOnFlagUntilTimeout>
 80083aa:	1e03      	subs	r3, r0, #0
 80083ac:	d001      	beq.n	80083b2 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e039      	b.n	8008426 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10b      	bne.n	80083d0 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	001a      	movs	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	05d2      	lsls	r2, r2, #23
 80083c4:	0dd2      	lsrs	r2, r2, #23
 80083c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	3302      	adds	r3, #2
 80083cc:	61bb      	str	r3, [r7, #24]
 80083ce:	e007      	b.n	80083e0 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	781a      	ldrb	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	3301      	adds	r3, #1
 80083de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2256      	movs	r2, #86	; 0x56
 80083e4:	5a9b      	ldrh	r3, [r3, r2]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	3b01      	subs	r3, #1
 80083ea:	b299      	uxth	r1, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2256      	movs	r2, #86	; 0x56
 80083f0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2256      	movs	r2, #86	; 0x56
 80083f6:	5a9b      	ldrh	r3, [r3, r2]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1cc      	bne.n	8008398 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	0013      	movs	r3, r2
 8008408:	2200      	movs	r2, #0
 800840a:	2140      	movs	r1, #64	; 0x40
 800840c:	f000 fab4 	bl	8008978 <UART_WaitOnFlagUntilTimeout>
 8008410:	1e03      	subs	r3, r0, #0
 8008412:	d001      	beq.n	8008418 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e006      	b.n	8008426 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2284      	movs	r2, #132	; 0x84
 800841c:	2120      	movs	r1, #32
 800841e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	e000      	b.n	8008426 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008424:	2302      	movs	r3, #2
  }
}
 8008426:	0018      	movs	r0, r3
 8008428:	46bd      	mov	sp, r7
 800842a:	b008      	add	sp, #32
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008438:	231a      	movs	r3, #26
 800843a:	18fb      	adds	r3, r7, r3
 800843c:	2200      	movs	r2, #0
 800843e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	431a      	orrs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	4313      	orrs	r3, r2
 8008456:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4abd      	ldr	r2, [pc, #756]	; (8008754 <UART_SetConfig+0x324>)
 8008460:	4013      	ands	r3, r2
 8008462:	0019      	movs	r1, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	69fa      	ldr	r2, [r7, #28]
 800846a:	430a      	orrs	r2, r1
 800846c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	4ab8      	ldr	r2, [pc, #736]	; (8008758 <UART_SetConfig+0x328>)
 8008476:	4013      	ands	r3, r2
 8008478:	0019      	movs	r1, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	69fa      	ldr	r2, [r7, #28]
 8008492:	4313      	orrs	r3, r2
 8008494:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	4aaf      	ldr	r2, [pc, #700]	; (800875c <UART_SetConfig+0x32c>)
 800849e:	4013      	ands	r3, r2
 80084a0:	0019      	movs	r1, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b2:	220f      	movs	r2, #15
 80084b4:	4393      	bics	r3, r2
 80084b6:	0019      	movs	r1, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4aa5      	ldr	r2, [pc, #660]	; (8008760 <UART_SetConfig+0x330>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d127      	bne.n	800851e <UART_SetConfig+0xee>
 80084ce:	4ba5      	ldr	r3, [pc, #660]	; (8008764 <UART_SetConfig+0x334>)
 80084d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d2:	2203      	movs	r2, #3
 80084d4:	4013      	ands	r3, r2
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d017      	beq.n	800850a <UART_SetConfig+0xda>
 80084da:	d81b      	bhi.n	8008514 <UART_SetConfig+0xe4>
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d00a      	beq.n	80084f6 <UART_SetConfig+0xc6>
 80084e0:	d818      	bhi.n	8008514 <UART_SetConfig+0xe4>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <UART_SetConfig+0xbc>
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d00a      	beq.n	8008500 <UART_SetConfig+0xd0>
 80084ea:	e013      	b.n	8008514 <UART_SetConfig+0xe4>
 80084ec:	231b      	movs	r3, #27
 80084ee:	18fb      	adds	r3, r7, r3
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	e058      	b.n	80085a8 <UART_SetConfig+0x178>
 80084f6:	231b      	movs	r3, #27
 80084f8:	18fb      	adds	r3, r7, r3
 80084fa:	2202      	movs	r2, #2
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	e053      	b.n	80085a8 <UART_SetConfig+0x178>
 8008500:	231b      	movs	r3, #27
 8008502:	18fb      	adds	r3, r7, r3
 8008504:	2204      	movs	r2, #4
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	e04e      	b.n	80085a8 <UART_SetConfig+0x178>
 800850a:	231b      	movs	r3, #27
 800850c:	18fb      	adds	r3, r7, r3
 800850e:	2208      	movs	r2, #8
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	e049      	b.n	80085a8 <UART_SetConfig+0x178>
 8008514:	231b      	movs	r3, #27
 8008516:	18fb      	adds	r3, r7, r3
 8008518:	2210      	movs	r2, #16
 800851a:	701a      	strb	r2, [r3, #0]
 800851c:	e044      	b.n	80085a8 <UART_SetConfig+0x178>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a91      	ldr	r2, [pc, #580]	; (8008768 <UART_SetConfig+0x338>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d127      	bne.n	8008578 <UART_SetConfig+0x148>
 8008528:	4b8e      	ldr	r3, [pc, #568]	; (8008764 <UART_SetConfig+0x334>)
 800852a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852c:	220c      	movs	r2, #12
 800852e:	4013      	ands	r3, r2
 8008530:	2b0c      	cmp	r3, #12
 8008532:	d017      	beq.n	8008564 <UART_SetConfig+0x134>
 8008534:	d81b      	bhi.n	800856e <UART_SetConfig+0x13e>
 8008536:	2b08      	cmp	r3, #8
 8008538:	d00a      	beq.n	8008550 <UART_SetConfig+0x120>
 800853a:	d818      	bhi.n	800856e <UART_SetConfig+0x13e>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <UART_SetConfig+0x116>
 8008540:	2b04      	cmp	r3, #4
 8008542:	d00a      	beq.n	800855a <UART_SetConfig+0x12a>
 8008544:	e013      	b.n	800856e <UART_SetConfig+0x13e>
 8008546:	231b      	movs	r3, #27
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
 800854e:	e02b      	b.n	80085a8 <UART_SetConfig+0x178>
 8008550:	231b      	movs	r3, #27
 8008552:	18fb      	adds	r3, r7, r3
 8008554:	2202      	movs	r2, #2
 8008556:	701a      	strb	r2, [r3, #0]
 8008558:	e026      	b.n	80085a8 <UART_SetConfig+0x178>
 800855a:	231b      	movs	r3, #27
 800855c:	18fb      	adds	r3, r7, r3
 800855e:	2204      	movs	r2, #4
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	e021      	b.n	80085a8 <UART_SetConfig+0x178>
 8008564:	231b      	movs	r3, #27
 8008566:	18fb      	adds	r3, r7, r3
 8008568:	2208      	movs	r2, #8
 800856a:	701a      	strb	r2, [r3, #0]
 800856c:	e01c      	b.n	80085a8 <UART_SetConfig+0x178>
 800856e:	231b      	movs	r3, #27
 8008570:	18fb      	adds	r3, r7, r3
 8008572:	2210      	movs	r2, #16
 8008574:	701a      	strb	r2, [r3, #0]
 8008576:	e017      	b.n	80085a8 <UART_SetConfig+0x178>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a7b      	ldr	r2, [pc, #492]	; (800876c <UART_SetConfig+0x33c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d104      	bne.n	800858c <UART_SetConfig+0x15c>
 8008582:	231b      	movs	r3, #27
 8008584:	18fb      	adds	r3, r7, r3
 8008586:	2200      	movs	r2, #0
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	e00d      	b.n	80085a8 <UART_SetConfig+0x178>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a77      	ldr	r2, [pc, #476]	; (8008770 <UART_SetConfig+0x340>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d104      	bne.n	80085a0 <UART_SetConfig+0x170>
 8008596:	231b      	movs	r3, #27
 8008598:	18fb      	adds	r3, r7, r3
 800859a:	2200      	movs	r2, #0
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	e003      	b.n	80085a8 <UART_SetConfig+0x178>
 80085a0:	231b      	movs	r3, #27
 80085a2:	18fb      	adds	r3, r7, r3
 80085a4:	2210      	movs	r2, #16
 80085a6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	69da      	ldr	r2, [r3, #28]
 80085ac:	2380      	movs	r3, #128	; 0x80
 80085ae:	021b      	lsls	r3, r3, #8
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d000      	beq.n	80085b6 <UART_SetConfig+0x186>
 80085b4:	e066      	b.n	8008684 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 80085b6:	231b      	movs	r3, #27
 80085b8:	18fb      	adds	r3, r7, r3
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d015      	beq.n	80085ec <UART_SetConfig+0x1bc>
 80085c0:	dc18      	bgt.n	80085f4 <UART_SetConfig+0x1c4>
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d00d      	beq.n	80085e2 <UART_SetConfig+0x1b2>
 80085c6:	dc15      	bgt.n	80085f4 <UART_SetConfig+0x1c4>
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <UART_SetConfig+0x1a2>
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d005      	beq.n	80085dc <UART_SetConfig+0x1ac>
 80085d0:	e010      	b.n	80085f4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085d2:	f7fe fb73 	bl	8006cbc <HAL_RCC_GetPCLK1Freq>
 80085d6:	0003      	movs	r3, r0
 80085d8:	617b      	str	r3, [r7, #20]
        break;
 80085da:	e012      	b.n	8008602 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085dc:	4b65      	ldr	r3, [pc, #404]	; (8008774 <UART_SetConfig+0x344>)
 80085de:	617b      	str	r3, [r7, #20]
        break;
 80085e0:	e00f      	b.n	8008602 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085e2:	f7fe fadf 	bl	8006ba4 <HAL_RCC_GetSysClockFreq>
 80085e6:	0003      	movs	r3, r0
 80085e8:	617b      	str	r3, [r7, #20]
        break;
 80085ea:	e00a      	b.n	8008602 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ec:	2380      	movs	r3, #128	; 0x80
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	617b      	str	r3, [r7, #20]
        break;
 80085f2:	e006      	b.n	8008602 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80085f8:	231a      	movs	r3, #26
 80085fa:	18fb      	adds	r3, r7, r3
 80085fc:	2201      	movs	r2, #1
 80085fe:	701a      	strb	r2, [r3, #0]
        break;
 8008600:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d100      	bne.n	800860a <UART_SetConfig+0x1da>
 8008608:	e08e      	b.n	8008728 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800860e:	4b5a      	ldr	r3, [pc, #360]	; (8008778 <UART_SetConfig+0x348>)
 8008610:	0052      	lsls	r2, r2, #1
 8008612:	5ad3      	ldrh	r3, [r2, r3]
 8008614:	0019      	movs	r1, r3
 8008616:	6978      	ldr	r0, [r7, #20]
 8008618:	f7f7 fd8e 	bl	8000138 <__udivsi3>
 800861c:	0003      	movs	r3, r0
 800861e:	005a      	lsls	r2, r3, #1
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	085b      	lsrs	r3, r3, #1
 8008626:	18d2      	adds	r2, r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	0019      	movs	r1, r3
 800862e:	0010      	movs	r0, r2
 8008630:	f7f7 fd82 	bl	8000138 <__udivsi3>
 8008634:	0003      	movs	r3, r0
 8008636:	b29b      	uxth	r3, r3
 8008638:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	2b0f      	cmp	r3, #15
 800863e:	d91c      	bls.n	800867a <UART_SetConfig+0x24a>
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	2380      	movs	r3, #128	; 0x80
 8008644:	025b      	lsls	r3, r3, #9
 8008646:	429a      	cmp	r2, r3
 8008648:	d217      	bcs.n	800867a <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	b29a      	uxth	r2, r3
 800864e:	200e      	movs	r0, #14
 8008650:	183b      	adds	r3, r7, r0
 8008652:	210f      	movs	r1, #15
 8008654:	438a      	bics	r2, r1
 8008656:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	b29b      	uxth	r3, r3
 800865e:	2207      	movs	r2, #7
 8008660:	4013      	ands	r3, r2
 8008662:	b299      	uxth	r1, r3
 8008664:	183b      	adds	r3, r7, r0
 8008666:	183a      	adds	r2, r7, r0
 8008668:	8812      	ldrh	r2, [r2, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	183a      	adds	r2, r7, r0
 8008674:	8812      	ldrh	r2, [r2, #0]
 8008676:	60da      	str	r2, [r3, #12]
 8008678:	e056      	b.n	8008728 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 800867a:	231a      	movs	r3, #26
 800867c:	18fb      	adds	r3, r7, r3
 800867e:	2201      	movs	r2, #1
 8008680:	701a      	strb	r2, [r3, #0]
 8008682:	e051      	b.n	8008728 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008684:	231b      	movs	r3, #27
 8008686:	18fb      	adds	r3, r7, r3
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2b08      	cmp	r3, #8
 800868c:	d015      	beq.n	80086ba <UART_SetConfig+0x28a>
 800868e:	dc18      	bgt.n	80086c2 <UART_SetConfig+0x292>
 8008690:	2b04      	cmp	r3, #4
 8008692:	d00d      	beq.n	80086b0 <UART_SetConfig+0x280>
 8008694:	dc15      	bgt.n	80086c2 <UART_SetConfig+0x292>
 8008696:	2b00      	cmp	r3, #0
 8008698:	d002      	beq.n	80086a0 <UART_SetConfig+0x270>
 800869a:	2b02      	cmp	r3, #2
 800869c:	d005      	beq.n	80086aa <UART_SetConfig+0x27a>
 800869e:	e010      	b.n	80086c2 <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086a0:	f7fe fb0c 	bl	8006cbc <HAL_RCC_GetPCLK1Freq>
 80086a4:	0003      	movs	r3, r0
 80086a6:	617b      	str	r3, [r7, #20]
        break;
 80086a8:	e012      	b.n	80086d0 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086aa:	4b32      	ldr	r3, [pc, #200]	; (8008774 <UART_SetConfig+0x344>)
 80086ac:	617b      	str	r3, [r7, #20]
        break;
 80086ae:	e00f      	b.n	80086d0 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086b0:	f7fe fa78 	bl	8006ba4 <HAL_RCC_GetSysClockFreq>
 80086b4:	0003      	movs	r3, r0
 80086b6:	617b      	str	r3, [r7, #20]
        break;
 80086b8:	e00a      	b.n	80086d0 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ba:	2380      	movs	r3, #128	; 0x80
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	617b      	str	r3, [r7, #20]
        break;
 80086c0:	e006      	b.n	80086d0 <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80086c6:	231a      	movs	r3, #26
 80086c8:	18fb      	adds	r3, r7, r3
 80086ca:	2201      	movs	r2, #1
 80086cc:	701a      	strb	r2, [r3, #0]
        break;
 80086ce:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d028      	beq.n	8008728 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086da:	4b27      	ldr	r3, [pc, #156]	; (8008778 <UART_SetConfig+0x348>)
 80086dc:	0052      	lsls	r2, r2, #1
 80086de:	5ad3      	ldrh	r3, [r2, r3]
 80086e0:	0019      	movs	r1, r3
 80086e2:	6978      	ldr	r0, [r7, #20]
 80086e4:	f7f7 fd28 	bl	8000138 <__udivsi3>
 80086e8:	0003      	movs	r3, r0
 80086ea:	001a      	movs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	085b      	lsrs	r3, r3, #1
 80086f2:	18d2      	adds	r2, r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	0019      	movs	r1, r3
 80086fa:	0010      	movs	r0, r2
 80086fc:	f7f7 fd1c 	bl	8000138 <__udivsi3>
 8008700:	0003      	movs	r3, r0
 8008702:	b29b      	uxth	r3, r3
 8008704:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2b0f      	cmp	r3, #15
 800870a:	d909      	bls.n	8008720 <UART_SetConfig+0x2f0>
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	2380      	movs	r3, #128	; 0x80
 8008710:	025b      	lsls	r3, r3, #9
 8008712:	429a      	cmp	r2, r3
 8008714:	d204      	bcs.n	8008720 <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	60da      	str	r2, [r3, #12]
 800871e:	e003      	b.n	8008728 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008720:	231a      	movs	r3, #26
 8008722:	18fb      	adds	r3, r7, r3
 8008724:	2201      	movs	r2, #1
 8008726:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	226a      	movs	r2, #106	; 0x6a
 800872c:	2101      	movs	r1, #1
 800872e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2268      	movs	r2, #104	; 0x68
 8008734:	2101      	movs	r1, #1
 8008736:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008744:	231a      	movs	r3, #26
 8008746:	18fb      	adds	r3, r7, r3
 8008748:	781b      	ldrb	r3, [r3, #0]
}
 800874a:	0018      	movs	r0, r3
 800874c:	46bd      	mov	sp, r7
 800874e:	b008      	add	sp, #32
 8008750:	bd80      	pop	{r7, pc}
 8008752:	46c0      	nop			; (mov r8, r8)
 8008754:	cfff69f3 	.word	0xcfff69f3
 8008758:	ffffcfff 	.word	0xffffcfff
 800875c:	11fff4ff 	.word	0x11fff4ff
 8008760:	40013800 	.word	0x40013800
 8008764:	40021000 	.word	0x40021000
 8008768:	40004400 	.word	0x40004400
 800876c:	40004800 	.word	0x40004800
 8008770:	40004c00 	.word	0x40004c00
 8008774:	00f42400 	.word	0x00f42400
 8008778:	0800d7c4 	.word	0x0800d7c4

0800877c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	2201      	movs	r2, #1
 800878a:	4013      	ands	r3, r2
 800878c:	d00b      	beq.n	80087a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	4a4a      	ldr	r2, [pc, #296]	; (80088c0 <UART_AdvFeatureConfig+0x144>)
 8008796:	4013      	ands	r3, r2
 8008798:	0019      	movs	r1, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	2202      	movs	r2, #2
 80087ac:	4013      	ands	r3, r2
 80087ae:	d00b      	beq.n	80087c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	4a43      	ldr	r2, [pc, #268]	; (80088c4 <UART_AdvFeatureConfig+0x148>)
 80087b8:	4013      	ands	r3, r2
 80087ba:	0019      	movs	r1, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	2204      	movs	r2, #4
 80087ce:	4013      	ands	r3, r2
 80087d0:	d00b      	beq.n	80087ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	4a3b      	ldr	r2, [pc, #236]	; (80088c8 <UART_AdvFeatureConfig+0x14c>)
 80087da:	4013      	ands	r3, r2
 80087dc:	0019      	movs	r1, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ee:	2208      	movs	r2, #8
 80087f0:	4013      	ands	r3, r2
 80087f2:	d00b      	beq.n	800880c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	4a34      	ldr	r2, [pc, #208]	; (80088cc <UART_AdvFeatureConfig+0x150>)
 80087fc:	4013      	ands	r3, r2
 80087fe:	0019      	movs	r1, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	2210      	movs	r2, #16
 8008812:	4013      	ands	r3, r2
 8008814:	d00b      	beq.n	800882e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	4a2c      	ldr	r2, [pc, #176]	; (80088d0 <UART_AdvFeatureConfig+0x154>)
 800881e:	4013      	ands	r3, r2
 8008820:	0019      	movs	r1, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	2220      	movs	r2, #32
 8008834:	4013      	ands	r3, r2
 8008836:	d00b      	beq.n	8008850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	4a25      	ldr	r2, [pc, #148]	; (80088d4 <UART_AdvFeatureConfig+0x158>)
 8008840:	4013      	ands	r3, r2
 8008842:	0019      	movs	r1, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	2240      	movs	r2, #64	; 0x40
 8008856:	4013      	ands	r3, r2
 8008858:	d01d      	beq.n	8008896 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	4a1d      	ldr	r2, [pc, #116]	; (80088d8 <UART_AdvFeatureConfig+0x15c>)
 8008862:	4013      	ands	r3, r2
 8008864:	0019      	movs	r1, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008876:	2380      	movs	r3, #128	; 0x80
 8008878:	035b      	lsls	r3, r3, #13
 800887a:	429a      	cmp	r2, r3
 800887c:	d10b      	bne.n	8008896 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4a15      	ldr	r2, [pc, #84]	; (80088dc <UART_AdvFeatureConfig+0x160>)
 8008886:	4013      	ands	r3, r2
 8008888:	0019      	movs	r1, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	2280      	movs	r2, #128	; 0x80
 800889c:	4013      	ands	r3, r2
 800889e:	d00b      	beq.n	80088b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	4a0e      	ldr	r2, [pc, #56]	; (80088e0 <UART_AdvFeatureConfig+0x164>)
 80088a8:	4013      	ands	r3, r2
 80088aa:	0019      	movs	r1, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	605a      	str	r2, [r3, #4]
  }
}
 80088b8:	46c0      	nop			; (mov r8, r8)
 80088ba:	46bd      	mov	sp, r7
 80088bc:	b002      	add	sp, #8
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	fffdffff 	.word	0xfffdffff
 80088c4:	fffeffff 	.word	0xfffeffff
 80088c8:	fffbffff 	.word	0xfffbffff
 80088cc:	ffff7fff 	.word	0xffff7fff
 80088d0:	ffffefff 	.word	0xffffefff
 80088d4:	ffffdfff 	.word	0xffffdfff
 80088d8:	ffefffff 	.word	0xffefffff
 80088dc:	ff9fffff 	.word	0xff9fffff
 80088e0:	fff7ffff 	.word	0xfff7ffff

080088e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af02      	add	r7, sp, #8
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	228c      	movs	r2, #140	; 0x8c
 80088f0:	2100      	movs	r1, #0
 80088f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088f4:	f7fd f944 	bl	8005b80 <HAL_GetTick>
 80088f8:	0003      	movs	r3, r0
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2208      	movs	r2, #8
 8008904:	4013      	ands	r3, r2
 8008906:	2b08      	cmp	r3, #8
 8008908:	d10c      	bne.n	8008924 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2280      	movs	r2, #128	; 0x80
 800890e:	0391      	lsls	r1, r2, #14
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	4a18      	ldr	r2, [pc, #96]	; (8008974 <UART_CheckIdleState+0x90>)
 8008914:	9200      	str	r2, [sp, #0]
 8008916:	2200      	movs	r2, #0
 8008918:	f000 f82e 	bl	8008978 <UART_WaitOnFlagUntilTimeout>
 800891c:	1e03      	subs	r3, r0, #0
 800891e:	d001      	beq.n	8008924 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e023      	b.n	800896c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2204      	movs	r2, #4
 800892c:	4013      	ands	r3, r2
 800892e:	2b04      	cmp	r3, #4
 8008930:	d10c      	bne.n	800894c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2280      	movs	r2, #128	; 0x80
 8008936:	03d1      	lsls	r1, r2, #15
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4a0e      	ldr	r2, [pc, #56]	; (8008974 <UART_CheckIdleState+0x90>)
 800893c:	9200      	str	r2, [sp, #0]
 800893e:	2200      	movs	r2, #0
 8008940:	f000 f81a 	bl	8008978 <UART_WaitOnFlagUntilTimeout>
 8008944:	1e03      	subs	r3, r0, #0
 8008946:	d001      	beq.n	800894c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e00f      	b.n	800896c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2284      	movs	r2, #132	; 0x84
 8008950:	2120      	movs	r1, #32
 8008952:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2288      	movs	r2, #136	; 0x88
 8008958:	2120      	movs	r1, #32
 800895a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2280      	movs	r2, #128	; 0x80
 8008966:	2100      	movs	r1, #0
 8008968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	0018      	movs	r0, r3
 800896e:	46bd      	mov	sp, r7
 8008970:	b004      	add	sp, #16
 8008972:	bd80      	pop	{r7, pc}
 8008974:	01ffffff 	.word	0x01ffffff

08008978 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b094      	sub	sp, #80	; 0x50
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	1dfb      	adds	r3, r7, #7
 8008986:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008988:	e0a7      	b.n	8008ada <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800898a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800898c:	3301      	adds	r3, #1
 800898e:	d100      	bne.n	8008992 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008990:	e0a3      	b.n	8008ada <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008992:	f7fd f8f5 	bl	8005b80 <HAL_GetTick>
 8008996:	0002      	movs	r2, r0
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800899e:	429a      	cmp	r2, r3
 80089a0:	d302      	bcc.n	80089a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80089a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d13f      	bne.n	8008a28 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089a8:	f3ef 8310 	mrs	r3, PRIMASK
 80089ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089b0:	647b      	str	r3, [r7, #68]	; 0x44
 80089b2:	2301      	movs	r3, #1
 80089b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	f383 8810 	msr	PRIMASK, r3
}
 80089bc:	46c0      	nop			; (mov r8, r8)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	494e      	ldr	r1, [pc, #312]	; (8008b04 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80089ca:	400a      	ands	r2, r1
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	f383 8810 	msr	PRIMASK, r3
}
 80089d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089da:	f3ef 8310 	mrs	r3, PRIMASK
 80089de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80089e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e2:	643b      	str	r3, [r7, #64]	; 0x40
 80089e4:	2301      	movs	r3, #1
 80089e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ea:	f383 8810 	msr	PRIMASK, r3
}
 80089ee:	46c0      	nop			; (mov r8, r8)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689a      	ldr	r2, [r3, #8]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2101      	movs	r1, #1
 80089fc:	438a      	bics	r2, r1
 80089fe:	609a      	str	r2, [r3, #8]
 8008a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a06:	f383 8810 	msr	PRIMASK, r3
}
 8008a0a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2284      	movs	r2, #132	; 0x84
 8008a10:	2120      	movs	r1, #32
 8008a12:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2288      	movs	r2, #136	; 0x88
 8008a18:	2120      	movs	r1, #32
 8008a1a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2280      	movs	r2, #128	; 0x80
 8008a20:	2100      	movs	r1, #0
 8008a22:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e069      	b.n	8008afc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2204      	movs	r2, #4
 8008a30:	4013      	ands	r3, r2
 8008a32:	d052      	beq.n	8008ada <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69da      	ldr	r2, [r3, #28]
 8008a3a:	2380      	movs	r3, #128	; 0x80
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	401a      	ands	r2, r3
 8008a40:	2380      	movs	r3, #128	; 0x80
 8008a42:	011b      	lsls	r3, r3, #4
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d148      	bne.n	8008ada <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2280      	movs	r2, #128	; 0x80
 8008a4e:	0112      	lsls	r2, r2, #4
 8008a50:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a52:	f3ef 8310 	mrs	r3, PRIMASK
 8008a56:	613b      	str	r3, [r7, #16]
  return(result);
 8008a58:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f383 8810 	msr	PRIMASK, r3
}
 8008a66:	46c0      	nop			; (mov r8, r8)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4924      	ldr	r1, [pc, #144]	; (8008b04 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008a74:	400a      	ands	r2, r1
 8008a76:	601a      	str	r2, [r3, #0]
 8008a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	f383 8810 	msr	PRIMASK, r3
}
 8008a82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a84:	f3ef 8310 	mrs	r3, PRIMASK
 8008a88:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a8a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a8e:	2301      	movs	r3, #1
 8008a90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	f383 8810 	msr	PRIMASK, r3
}
 8008a98:	46c0      	nop			; (mov r8, r8)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689a      	ldr	r2, [r3, #8]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	438a      	bics	r2, r1
 8008aa8:	609a      	str	r2, [r3, #8]
 8008aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	f383 8810 	msr	PRIMASK, r3
}
 8008ab4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2284      	movs	r2, #132	; 0x84
 8008aba:	2120      	movs	r1, #32
 8008abc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2288      	movs	r2, #136	; 0x88
 8008ac2:	2120      	movs	r1, #32
 8008ac4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	228c      	movs	r2, #140	; 0x8c
 8008aca:	2120      	movs	r1, #32
 8008acc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2280      	movs	r2, #128	; 0x80
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e010      	b.n	8008afc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	425a      	negs	r2, r3
 8008aea:	4153      	adcs	r3, r2
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	001a      	movs	r2, r3
 8008af0:	1dfb      	adds	r3, r7, #7
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d100      	bne.n	8008afa <UART_WaitOnFlagUntilTimeout+0x182>
 8008af8:	e747      	b.n	800898a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	0018      	movs	r0, r3
 8008afe:	46bd      	mov	sp, r7
 8008b00:	b014      	add	sp, #80	; 0x50
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	fffffe5f 	.word	0xfffffe5f

08008b08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2280      	movs	r2, #128	; 0x80
 8008b14:	5c9b      	ldrb	r3, [r3, r2]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d101      	bne.n	8008b1e <HAL_UARTEx_DisableFifoMode+0x16>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	e027      	b.n	8008b6e <HAL_UARTEx_DisableFifoMode+0x66>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2280      	movs	r2, #128	; 0x80
 8008b22:	2101      	movs	r1, #1
 8008b24:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2284      	movs	r2, #132	; 0x84
 8008b2a:	2124      	movs	r1, #36	; 0x24
 8008b2c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2101      	movs	r1, #1
 8008b42:	438a      	bics	r2, r1
 8008b44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4a0b      	ldr	r2, [pc, #44]	; (8008b78 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2284      	movs	r2, #132	; 0x84
 8008b60:	2120      	movs	r1, #32
 8008b62:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2280      	movs	r2, #128	; 0x80
 8008b68:	2100      	movs	r1, #0
 8008b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	0018      	movs	r0, r3
 8008b70:	46bd      	mov	sp, r7
 8008b72:	b004      	add	sp, #16
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	46c0      	nop			; (mov r8, r8)
 8008b78:	dfffffff 	.word	0xdfffffff

08008b7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2280      	movs	r2, #128	; 0x80
 8008b8a:	5c9b      	ldrb	r3, [r3, r2]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d101      	bne.n	8008b94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b90:	2302      	movs	r3, #2
 8008b92:	e02e      	b.n	8008bf2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2280      	movs	r2, #128	; 0x80
 8008b98:	2101      	movs	r1, #1
 8008b9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2284      	movs	r2, #132	; 0x84
 8008ba0:	2124      	movs	r1, #36	; 0x24
 8008ba2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	438a      	bics	r2, r1
 8008bba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	08d9      	lsrs	r1, r3, #3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f000 f854 	bl	8008c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2284      	movs	r2, #132	; 0x84
 8008be4:	2120      	movs	r1, #32
 8008be6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2280      	movs	r2, #128	; 0x80
 8008bec:	2100      	movs	r1, #0
 8008bee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	b004      	add	sp, #16
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2280      	movs	r2, #128	; 0x80
 8008c0a:	5c9b      	ldrb	r3, [r3, r2]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e02f      	b.n	8008c74 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2280      	movs	r2, #128	; 0x80
 8008c18:	2101      	movs	r1, #1
 8008c1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2284      	movs	r2, #132	; 0x84
 8008c20:	2124      	movs	r1, #36	; 0x24
 8008c22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2101      	movs	r1, #1
 8008c38:	438a      	bics	r2, r1
 8008c3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	4a0e      	ldr	r2, [pc, #56]	; (8008c7c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008c44:	4013      	ands	r3, r2
 8008c46:	0019      	movs	r1, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	0018      	movs	r0, r3
 8008c56:	f000 f813 	bl	8008c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2284      	movs	r2, #132	; 0x84
 8008c66:	2120      	movs	r1, #32
 8008c68:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2280      	movs	r2, #128	; 0x80
 8008c6e:	2100      	movs	r1, #0
 8008c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	0018      	movs	r0, r3
 8008c76:	46bd      	mov	sp, r7
 8008c78:	b004      	add	sp, #16
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	f1ffffff 	.word	0xf1ffffff

08008c80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d108      	bne.n	8008ca2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	226a      	movs	r2, #106	; 0x6a
 8008c94:	2101      	movs	r1, #1
 8008c96:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2268      	movs	r2, #104	; 0x68
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ca0:	e043      	b.n	8008d2a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ca2:	260f      	movs	r6, #15
 8008ca4:	19bb      	adds	r3, r7, r6
 8008ca6:	2208      	movs	r2, #8
 8008ca8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008caa:	200e      	movs	r0, #14
 8008cac:	183b      	adds	r3, r7, r0
 8008cae:	2208      	movs	r2, #8
 8008cb0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	0e5b      	lsrs	r3, r3, #25
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	240d      	movs	r4, #13
 8008cbe:	193b      	adds	r3, r7, r4
 8008cc0:	2107      	movs	r1, #7
 8008cc2:	400a      	ands	r2, r1
 8008cc4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	0f5b      	lsrs	r3, r3, #29
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	250c      	movs	r5, #12
 8008cd2:	197b      	adds	r3, r7, r5
 8008cd4:	2107      	movs	r1, #7
 8008cd6:	400a      	ands	r2, r1
 8008cd8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cda:	183b      	adds	r3, r7, r0
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	197a      	adds	r2, r7, r5
 8008ce0:	7812      	ldrb	r2, [r2, #0]
 8008ce2:	4914      	ldr	r1, [pc, #80]	; (8008d34 <UARTEx_SetNbDataToProcess+0xb4>)
 8008ce4:	5c8a      	ldrb	r2, [r1, r2]
 8008ce6:	435a      	muls	r2, r3
 8008ce8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cea:	197b      	adds	r3, r7, r5
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4a12      	ldr	r2, [pc, #72]	; (8008d38 <UARTEx_SetNbDataToProcess+0xb8>)
 8008cf0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cf2:	0019      	movs	r1, r3
 8008cf4:	f7f7 faaa 	bl	800024c <__divsi3>
 8008cf8:	0003      	movs	r3, r0
 8008cfa:	b299      	uxth	r1, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	226a      	movs	r2, #106	; 0x6a
 8008d00:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d02:	19bb      	adds	r3, r7, r6
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	193a      	adds	r2, r7, r4
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	490a      	ldr	r1, [pc, #40]	; (8008d34 <UARTEx_SetNbDataToProcess+0xb4>)
 8008d0c:	5c8a      	ldrb	r2, [r1, r2]
 8008d0e:	435a      	muls	r2, r3
 8008d10:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d12:	193b      	adds	r3, r7, r4
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	4a08      	ldr	r2, [pc, #32]	; (8008d38 <UARTEx_SetNbDataToProcess+0xb8>)
 8008d18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d1a:	0019      	movs	r1, r3
 8008d1c:	f7f7 fa96 	bl	800024c <__divsi3>
 8008d20:	0003      	movs	r3, r0
 8008d22:	b299      	uxth	r1, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2268      	movs	r2, #104	; 0x68
 8008d28:	5299      	strh	r1, [r3, r2]
}
 8008d2a:	46c0      	nop			; (mov r8, r8)
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	b005      	add	sp, #20
 8008d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	0800d7dc 	.word	0x0800d7dc
 8008d38:	0800d7e4 	.word	0x0800d7e4

08008d3c <__errno>:
 8008d3c:	4b01      	ldr	r3, [pc, #4]	; (8008d44 <__errno+0x8>)
 8008d3e:	6818      	ldr	r0, [r3, #0]
 8008d40:	4770      	bx	lr
 8008d42:	46c0      	nop			; (mov r8, r8)
 8008d44:	20000014 	.word	0x20000014

08008d48 <__libc_init_array>:
 8008d48:	b570      	push	{r4, r5, r6, lr}
 8008d4a:	2600      	movs	r6, #0
 8008d4c:	4d0c      	ldr	r5, [pc, #48]	; (8008d80 <__libc_init_array+0x38>)
 8008d4e:	4c0d      	ldr	r4, [pc, #52]	; (8008d84 <__libc_init_array+0x3c>)
 8008d50:	1b64      	subs	r4, r4, r5
 8008d52:	10a4      	asrs	r4, r4, #2
 8008d54:	42a6      	cmp	r6, r4
 8008d56:	d109      	bne.n	8008d6c <__libc_init_array+0x24>
 8008d58:	2600      	movs	r6, #0
 8008d5a:	f004 fb4d 	bl	800d3f8 <_init>
 8008d5e:	4d0a      	ldr	r5, [pc, #40]	; (8008d88 <__libc_init_array+0x40>)
 8008d60:	4c0a      	ldr	r4, [pc, #40]	; (8008d8c <__libc_init_array+0x44>)
 8008d62:	1b64      	subs	r4, r4, r5
 8008d64:	10a4      	asrs	r4, r4, #2
 8008d66:	42a6      	cmp	r6, r4
 8008d68:	d105      	bne.n	8008d76 <__libc_init_array+0x2e>
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	00b3      	lsls	r3, r6, #2
 8008d6e:	58eb      	ldr	r3, [r5, r3]
 8008d70:	4798      	blx	r3
 8008d72:	3601      	adds	r6, #1
 8008d74:	e7ee      	b.n	8008d54 <__libc_init_array+0xc>
 8008d76:	00b3      	lsls	r3, r6, #2
 8008d78:	58eb      	ldr	r3, [r5, r3]
 8008d7a:	4798      	blx	r3
 8008d7c:	3601      	adds	r6, #1
 8008d7e:	e7f2      	b.n	8008d66 <__libc_init_array+0x1e>
 8008d80:	0800dc80 	.word	0x0800dc80
 8008d84:	0800dc80 	.word	0x0800dc80
 8008d88:	0800dc80 	.word	0x0800dc80
 8008d8c:	0800dc84 	.word	0x0800dc84

08008d90 <memset>:
 8008d90:	0003      	movs	r3, r0
 8008d92:	1882      	adds	r2, r0, r2
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d100      	bne.n	8008d9a <memset+0xa>
 8008d98:	4770      	bx	lr
 8008d9a:	7019      	strb	r1, [r3, #0]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	e7f9      	b.n	8008d94 <memset+0x4>

08008da0 <__cvt>:
 8008da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008da2:	001e      	movs	r6, r3
 8008da4:	2300      	movs	r3, #0
 8008da6:	0014      	movs	r4, r2
 8008da8:	b08b      	sub	sp, #44	; 0x2c
 8008daa:	429e      	cmp	r6, r3
 8008dac:	da04      	bge.n	8008db8 <__cvt+0x18>
 8008dae:	2180      	movs	r1, #128	; 0x80
 8008db0:	0609      	lsls	r1, r1, #24
 8008db2:	1873      	adds	r3, r6, r1
 8008db4:	001e      	movs	r6, r3
 8008db6:	232d      	movs	r3, #45	; 0x2d
 8008db8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008dbc:	7013      	strb	r3, [r2, #0]
 8008dbe:	2320      	movs	r3, #32
 8008dc0:	2203      	movs	r2, #3
 8008dc2:	439f      	bics	r7, r3
 8008dc4:	2f46      	cmp	r7, #70	; 0x46
 8008dc6:	d007      	beq.n	8008dd8 <__cvt+0x38>
 8008dc8:	003b      	movs	r3, r7
 8008dca:	3b45      	subs	r3, #69	; 0x45
 8008dcc:	4259      	negs	r1, r3
 8008dce:	414b      	adcs	r3, r1
 8008dd0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008dd2:	3a01      	subs	r2, #1
 8008dd4:	18cb      	adds	r3, r1, r3
 8008dd6:	9310      	str	r3, [sp, #64]	; 0x40
 8008dd8:	ab09      	add	r3, sp, #36	; 0x24
 8008dda:	9304      	str	r3, [sp, #16]
 8008ddc:	ab08      	add	r3, sp, #32
 8008dde:	9303      	str	r3, [sp, #12]
 8008de0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008de2:	9200      	str	r2, [sp, #0]
 8008de4:	9302      	str	r3, [sp, #8]
 8008de6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008de8:	0022      	movs	r2, r4
 8008dea:	9301      	str	r3, [sp, #4]
 8008dec:	0033      	movs	r3, r6
 8008dee:	f000 fcfd 	bl	80097ec <_dtoa_r>
 8008df2:	0005      	movs	r5, r0
 8008df4:	2f47      	cmp	r7, #71	; 0x47
 8008df6:	d102      	bne.n	8008dfe <__cvt+0x5e>
 8008df8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dfa:	07db      	lsls	r3, r3, #31
 8008dfc:	d528      	bpl.n	8008e50 <__cvt+0xb0>
 8008dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e00:	18eb      	adds	r3, r5, r3
 8008e02:	9307      	str	r3, [sp, #28]
 8008e04:	2f46      	cmp	r7, #70	; 0x46
 8008e06:	d114      	bne.n	8008e32 <__cvt+0x92>
 8008e08:	782b      	ldrb	r3, [r5, #0]
 8008e0a:	2b30      	cmp	r3, #48	; 0x30
 8008e0c:	d10c      	bne.n	8008e28 <__cvt+0x88>
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2300      	movs	r3, #0
 8008e12:	0020      	movs	r0, r4
 8008e14:	0031      	movs	r1, r6
 8008e16:	f7f7 fb15 	bl	8000444 <__aeabi_dcmpeq>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d104      	bne.n	8008e28 <__cvt+0x88>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e22:	1a9b      	subs	r3, r3, r2
 8008e24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e2a:	9a07      	ldr	r2, [sp, #28]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	18d3      	adds	r3, r2, r3
 8008e30:	9307      	str	r3, [sp, #28]
 8008e32:	2200      	movs	r2, #0
 8008e34:	2300      	movs	r3, #0
 8008e36:	0020      	movs	r0, r4
 8008e38:	0031      	movs	r1, r6
 8008e3a:	f7f7 fb03 	bl	8000444 <__aeabi_dcmpeq>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d001      	beq.n	8008e46 <__cvt+0xa6>
 8008e42:	9b07      	ldr	r3, [sp, #28]
 8008e44:	9309      	str	r3, [sp, #36]	; 0x24
 8008e46:	2230      	movs	r2, #48	; 0x30
 8008e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e4a:	9907      	ldr	r1, [sp, #28]
 8008e4c:	428b      	cmp	r3, r1
 8008e4e:	d306      	bcc.n	8008e5e <__cvt+0xbe>
 8008e50:	0028      	movs	r0, r5
 8008e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e54:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e56:	1b5b      	subs	r3, r3, r5
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	b00b      	add	sp, #44	; 0x2c
 8008e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e5e:	1c59      	adds	r1, r3, #1
 8008e60:	9109      	str	r1, [sp, #36]	; 0x24
 8008e62:	701a      	strb	r2, [r3, #0]
 8008e64:	e7f0      	b.n	8008e48 <__cvt+0xa8>

08008e66 <__exponent>:
 8008e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e68:	1c83      	adds	r3, r0, #2
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	9303      	str	r3, [sp, #12]
 8008e6e:	0005      	movs	r5, r0
 8008e70:	000c      	movs	r4, r1
 8008e72:	232b      	movs	r3, #43	; 0x2b
 8008e74:	7002      	strb	r2, [r0, #0]
 8008e76:	2900      	cmp	r1, #0
 8008e78:	da01      	bge.n	8008e7e <__exponent+0x18>
 8008e7a:	424c      	negs	r4, r1
 8008e7c:	3302      	adds	r3, #2
 8008e7e:	706b      	strb	r3, [r5, #1]
 8008e80:	2c09      	cmp	r4, #9
 8008e82:	dd31      	ble.n	8008ee8 <__exponent+0x82>
 8008e84:	270a      	movs	r7, #10
 8008e86:	ab04      	add	r3, sp, #16
 8008e88:	1dde      	adds	r6, r3, #7
 8008e8a:	0020      	movs	r0, r4
 8008e8c:	0039      	movs	r1, r7
 8008e8e:	9601      	str	r6, [sp, #4]
 8008e90:	f7f7 fac2 	bl	8000418 <__aeabi_idivmod>
 8008e94:	3e01      	subs	r6, #1
 8008e96:	3130      	adds	r1, #48	; 0x30
 8008e98:	0020      	movs	r0, r4
 8008e9a:	7031      	strb	r1, [r6, #0]
 8008e9c:	0039      	movs	r1, r7
 8008e9e:	9402      	str	r4, [sp, #8]
 8008ea0:	f7f7 f9d4 	bl	800024c <__divsi3>
 8008ea4:	9b02      	ldr	r3, [sp, #8]
 8008ea6:	0004      	movs	r4, r0
 8008ea8:	2b63      	cmp	r3, #99	; 0x63
 8008eaa:	dcee      	bgt.n	8008e8a <__exponent+0x24>
 8008eac:	9b01      	ldr	r3, [sp, #4]
 8008eae:	3430      	adds	r4, #48	; 0x30
 8008eb0:	1e9a      	subs	r2, r3, #2
 8008eb2:	0013      	movs	r3, r2
 8008eb4:	9903      	ldr	r1, [sp, #12]
 8008eb6:	7014      	strb	r4, [r2, #0]
 8008eb8:	a804      	add	r0, sp, #16
 8008eba:	3007      	adds	r0, #7
 8008ebc:	4298      	cmp	r0, r3
 8008ebe:	d80e      	bhi.n	8008ede <__exponent+0x78>
 8008ec0:	ab04      	add	r3, sp, #16
 8008ec2:	3307      	adds	r3, #7
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d804      	bhi.n	8008ed4 <__exponent+0x6e>
 8008eca:	ab04      	add	r3, sp, #16
 8008ecc:	3009      	adds	r0, #9
 8008ece:	18c0      	adds	r0, r0, r3
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	1ac0      	subs	r0, r0, r3
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	1818      	adds	r0, r3, r0
 8008ed8:	1b40      	subs	r0, r0, r5
 8008eda:	b007      	add	sp, #28
 8008edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ede:	7818      	ldrb	r0, [r3, #0]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	7008      	strb	r0, [r1, #0]
 8008ee4:	3101      	adds	r1, #1
 8008ee6:	e7e7      	b.n	8008eb8 <__exponent+0x52>
 8008ee8:	2330      	movs	r3, #48	; 0x30
 8008eea:	18e4      	adds	r4, r4, r3
 8008eec:	70ab      	strb	r3, [r5, #2]
 8008eee:	1d28      	adds	r0, r5, #4
 8008ef0:	70ec      	strb	r4, [r5, #3]
 8008ef2:	e7f1      	b.n	8008ed8 <__exponent+0x72>

08008ef4 <_printf_float>:
 8008ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ef6:	b095      	sub	sp, #84	; 0x54
 8008ef8:	000c      	movs	r4, r1
 8008efa:	9208      	str	r2, [sp, #32]
 8008efc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008efe:	9309      	str	r3, [sp, #36]	; 0x24
 8008f00:	0007      	movs	r7, r0
 8008f02:	f001 fa91 	bl	800a428 <_localeconv_r>
 8008f06:	6803      	ldr	r3, [r0, #0]
 8008f08:	0018      	movs	r0, r3
 8008f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f0c:	f7f7 f8f8 	bl	8000100 <strlen>
 8008f10:	2300      	movs	r3, #0
 8008f12:	9312      	str	r3, [sp, #72]	; 0x48
 8008f14:	7e23      	ldrb	r3, [r4, #24]
 8008f16:	2207      	movs	r2, #7
 8008f18:	001e      	movs	r6, r3
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	900d      	str	r0, [sp, #52]	; 0x34
 8008f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8008f20:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f22:	682b      	ldr	r3, [r5, #0]
 8008f24:	05c9      	lsls	r1, r1, #23
 8008f26:	d547      	bpl.n	8008fb8 <_printf_float+0xc4>
 8008f28:	189b      	adds	r3, r3, r2
 8008f2a:	4393      	bics	r3, r2
 8008f2c:	001a      	movs	r2, r3
 8008f2e:	3208      	adds	r2, #8
 8008f30:	602a      	str	r2, [r5, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	64a2      	str	r2, [r4, #72]	; 0x48
 8008f38:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008f3e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008f40:	930a      	str	r3, [sp, #40]	; 0x28
 8008f42:	006b      	lsls	r3, r5, #1
 8008f44:	085b      	lsrs	r3, r3, #1
 8008f46:	930e      	str	r3, [sp, #56]	; 0x38
 8008f48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f4a:	4ba8      	ldr	r3, [pc, #672]	; (80091ec <_printf_float+0x2f8>)
 8008f4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008f4e:	4252      	negs	r2, r2
 8008f50:	f7f9 ff50 	bl	8002df4 <__aeabi_dcmpun>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d131      	bne.n	8008fbc <_printf_float+0xc8>
 8008f58:	2201      	movs	r2, #1
 8008f5a:	4ba4      	ldr	r3, [pc, #656]	; (80091ec <_printf_float+0x2f8>)
 8008f5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008f60:	4252      	negs	r2, r2
 8008f62:	f7f7 fa7f 	bl	8000464 <__aeabi_dcmple>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d128      	bne.n	8008fbc <_printf_float+0xc8>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	0029      	movs	r1, r5
 8008f70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f72:	f7f7 fa6d 	bl	8000450 <__aeabi_dcmplt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d003      	beq.n	8008f82 <_printf_float+0x8e>
 8008f7a:	0023      	movs	r3, r4
 8008f7c:	222d      	movs	r2, #45	; 0x2d
 8008f7e:	3343      	adds	r3, #67	; 0x43
 8008f80:	701a      	strb	r2, [r3, #0]
 8008f82:	4d9b      	ldr	r5, [pc, #620]	; (80091f0 <_printf_float+0x2fc>)
 8008f84:	2e47      	cmp	r6, #71	; 0x47
 8008f86:	d900      	bls.n	8008f8a <_printf_float+0x96>
 8008f88:	4d9a      	ldr	r5, [pc, #616]	; (80091f4 <_printf_float+0x300>)
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f8e:	6123      	str	r3, [r4, #16]
 8008f90:	3301      	adds	r3, #1
 8008f92:	439a      	bics	r2, r3
 8008f94:	2300      	movs	r3, #0
 8008f96:	6022      	str	r2, [r4, #0]
 8008f98:	930a      	str	r3, [sp, #40]	; 0x28
 8008f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f9c:	0021      	movs	r1, r4
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	0038      	movs	r0, r7
 8008fa2:	9b08      	ldr	r3, [sp, #32]
 8008fa4:	aa13      	add	r2, sp, #76	; 0x4c
 8008fa6:	f000 f9f3 	bl	8009390 <_printf_common>
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	d000      	beq.n	8008fb0 <_printf_float+0xbc>
 8008fae:	e09e      	b.n	80090ee <_printf_float+0x1fa>
 8008fb0:	2001      	movs	r0, #1
 8008fb2:	4240      	negs	r0, r0
 8008fb4:	b015      	add	sp, #84	; 0x54
 8008fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb8:	3307      	adds	r3, #7
 8008fba:	e7b6      	b.n	8008f2a <_printf_float+0x36>
 8008fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fbe:	002b      	movs	r3, r5
 8008fc0:	0010      	movs	r0, r2
 8008fc2:	0029      	movs	r1, r5
 8008fc4:	f7f9 ff16 	bl	8002df4 <__aeabi_dcmpun>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d00a      	beq.n	8008fe2 <_printf_float+0xee>
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	da03      	bge.n	8008fd8 <_printf_float+0xe4>
 8008fd0:	0023      	movs	r3, r4
 8008fd2:	222d      	movs	r2, #45	; 0x2d
 8008fd4:	3343      	adds	r3, #67	; 0x43
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	4d87      	ldr	r5, [pc, #540]	; (80091f8 <_printf_float+0x304>)
 8008fda:	2e47      	cmp	r6, #71	; 0x47
 8008fdc:	d9d5      	bls.n	8008f8a <_printf_float+0x96>
 8008fde:	4d87      	ldr	r5, [pc, #540]	; (80091fc <_printf_float+0x308>)
 8008fe0:	e7d3      	b.n	8008f8a <_printf_float+0x96>
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	0031      	movs	r1, r6
 8008fe6:	6863      	ldr	r3, [r4, #4]
 8008fe8:	4391      	bics	r1, r2
 8008fea:	910e      	str	r1, [sp, #56]	; 0x38
 8008fec:	1c5a      	adds	r2, r3, #1
 8008fee:	d147      	bne.n	8009080 <_printf_float+0x18c>
 8008ff0:	3307      	adds	r3, #7
 8008ff2:	6063      	str	r3, [r4, #4]
 8008ff4:	2380      	movs	r3, #128	; 0x80
 8008ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	9206      	str	r2, [sp, #24]
 8009000:	aa12      	add	r2, sp, #72	; 0x48
 8009002:	9205      	str	r2, [sp, #20]
 8009004:	aa11      	add	r2, sp, #68	; 0x44
 8009006:	9203      	str	r2, [sp, #12]
 8009008:	2223      	movs	r2, #35	; 0x23
 800900a:	a908      	add	r1, sp, #32
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	6863      	ldr	r3, [r4, #4]
 8009012:	1852      	adds	r2, r2, r1
 8009014:	9202      	str	r2, [sp, #8]
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	0038      	movs	r0, r7
 800901a:	002b      	movs	r3, r5
 800901c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800901e:	9604      	str	r6, [sp, #16]
 8009020:	f7ff febe 	bl	8008da0 <__cvt>
 8009024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009026:	0005      	movs	r5, r0
 8009028:	9911      	ldr	r1, [sp, #68]	; 0x44
 800902a:	2b47      	cmp	r3, #71	; 0x47
 800902c:	d108      	bne.n	8009040 <_printf_float+0x14c>
 800902e:	1ccb      	adds	r3, r1, #3
 8009030:	db02      	blt.n	8009038 <_printf_float+0x144>
 8009032:	6863      	ldr	r3, [r4, #4]
 8009034:	4299      	cmp	r1, r3
 8009036:	dd46      	ble.n	80090c6 <_printf_float+0x1d2>
 8009038:	0033      	movs	r3, r6
 800903a:	3b02      	subs	r3, #2
 800903c:	b2db      	uxtb	r3, r3
 800903e:	001e      	movs	r6, r3
 8009040:	2e65      	cmp	r6, #101	; 0x65
 8009042:	d824      	bhi.n	800908e <_printf_float+0x19a>
 8009044:	0020      	movs	r0, r4
 8009046:	0032      	movs	r2, r6
 8009048:	3901      	subs	r1, #1
 800904a:	3050      	adds	r0, #80	; 0x50
 800904c:	9111      	str	r1, [sp, #68]	; 0x44
 800904e:	f7ff ff0a 	bl	8008e66 <__exponent>
 8009052:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009054:	900a      	str	r0, [sp, #40]	; 0x28
 8009056:	1813      	adds	r3, r2, r0
 8009058:	6123      	str	r3, [r4, #16]
 800905a:	2a01      	cmp	r2, #1
 800905c:	dc02      	bgt.n	8009064 <_printf_float+0x170>
 800905e:	6822      	ldr	r2, [r4, #0]
 8009060:	07d2      	lsls	r2, r2, #31
 8009062:	d501      	bpl.n	8009068 <_printf_float+0x174>
 8009064:	3301      	adds	r3, #1
 8009066:	6123      	str	r3, [r4, #16]
 8009068:	2323      	movs	r3, #35	; 0x23
 800906a:	aa08      	add	r2, sp, #32
 800906c:	189b      	adds	r3, r3, r2
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d100      	bne.n	8009076 <_printf_float+0x182>
 8009074:	e791      	b.n	8008f9a <_printf_float+0xa6>
 8009076:	0023      	movs	r3, r4
 8009078:	222d      	movs	r2, #45	; 0x2d
 800907a:	3343      	adds	r3, #67	; 0x43
 800907c:	701a      	strb	r2, [r3, #0]
 800907e:	e78c      	b.n	8008f9a <_printf_float+0xa6>
 8009080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009082:	2a47      	cmp	r2, #71	; 0x47
 8009084:	d1b6      	bne.n	8008ff4 <_printf_float+0x100>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1b4      	bne.n	8008ff4 <_printf_float+0x100>
 800908a:	3301      	adds	r3, #1
 800908c:	e7b1      	b.n	8008ff2 <_printf_float+0xfe>
 800908e:	2e66      	cmp	r6, #102	; 0x66
 8009090:	d11b      	bne.n	80090ca <_printf_float+0x1d6>
 8009092:	6863      	ldr	r3, [r4, #4]
 8009094:	2900      	cmp	r1, #0
 8009096:	dd0d      	ble.n	80090b4 <_printf_float+0x1c0>
 8009098:	6121      	str	r1, [r4, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <_printf_float+0x1b0>
 800909e:	6822      	ldr	r2, [r4, #0]
 80090a0:	07d2      	lsls	r2, r2, #31
 80090a2:	d502      	bpl.n	80090aa <_printf_float+0x1b6>
 80090a4:	3301      	adds	r3, #1
 80090a6:	1859      	adds	r1, r3, r1
 80090a8:	6121      	str	r1, [r4, #16]
 80090aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80090ae:	2300      	movs	r3, #0
 80090b0:	930a      	str	r3, [sp, #40]	; 0x28
 80090b2:	e7d9      	b.n	8009068 <_printf_float+0x174>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d103      	bne.n	80090c0 <_printf_float+0x1cc>
 80090b8:	2201      	movs	r2, #1
 80090ba:	6821      	ldr	r1, [r4, #0]
 80090bc:	4211      	tst	r1, r2
 80090be:	d000      	beq.n	80090c2 <_printf_float+0x1ce>
 80090c0:	1c9a      	adds	r2, r3, #2
 80090c2:	6122      	str	r2, [r4, #16]
 80090c4:	e7f1      	b.n	80090aa <_printf_float+0x1b6>
 80090c6:	2367      	movs	r3, #103	; 0x67
 80090c8:	001e      	movs	r6, r3
 80090ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090ce:	4293      	cmp	r3, r2
 80090d0:	db06      	blt.n	80090e0 <_printf_float+0x1ec>
 80090d2:	6822      	ldr	r2, [r4, #0]
 80090d4:	6123      	str	r3, [r4, #16]
 80090d6:	07d2      	lsls	r2, r2, #31
 80090d8:	d5e7      	bpl.n	80090aa <_printf_float+0x1b6>
 80090da:	3301      	adds	r3, #1
 80090dc:	6123      	str	r3, [r4, #16]
 80090de:	e7e4      	b.n	80090aa <_printf_float+0x1b6>
 80090e0:	2101      	movs	r1, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	dc01      	bgt.n	80090ea <_printf_float+0x1f6>
 80090e6:	1849      	adds	r1, r1, r1
 80090e8:	1ac9      	subs	r1, r1, r3
 80090ea:	1852      	adds	r2, r2, r1
 80090ec:	e7e9      	b.n	80090c2 <_printf_float+0x1ce>
 80090ee:	6822      	ldr	r2, [r4, #0]
 80090f0:	0553      	lsls	r3, r2, #21
 80090f2:	d408      	bmi.n	8009106 <_printf_float+0x212>
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	002a      	movs	r2, r5
 80090f8:	0038      	movs	r0, r7
 80090fa:	9908      	ldr	r1, [sp, #32]
 80090fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80090fe:	47a8      	blx	r5
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d129      	bne.n	8009158 <_printf_float+0x264>
 8009104:	e754      	b.n	8008fb0 <_printf_float+0xbc>
 8009106:	2e65      	cmp	r6, #101	; 0x65
 8009108:	d800      	bhi.n	800910c <_printf_float+0x218>
 800910a:	e0ec      	b.n	80092e6 <_printf_float+0x3f2>
 800910c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800910e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009110:	2200      	movs	r2, #0
 8009112:	2300      	movs	r3, #0
 8009114:	f7f7 f996 	bl	8000444 <__aeabi_dcmpeq>
 8009118:	2800      	cmp	r0, #0
 800911a:	d034      	beq.n	8009186 <_printf_float+0x292>
 800911c:	2301      	movs	r3, #1
 800911e:	0038      	movs	r0, r7
 8009120:	4a37      	ldr	r2, [pc, #220]	; (8009200 <_printf_float+0x30c>)
 8009122:	9908      	ldr	r1, [sp, #32]
 8009124:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009126:	47a8      	blx	r5
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d100      	bne.n	800912e <_printf_float+0x23a>
 800912c:	e740      	b.n	8008fb0 <_printf_float+0xbc>
 800912e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009130:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009132:	4293      	cmp	r3, r2
 8009134:	db02      	blt.n	800913c <_printf_float+0x248>
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	07db      	lsls	r3, r3, #31
 800913a:	d50d      	bpl.n	8009158 <_printf_float+0x264>
 800913c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800913e:	0038      	movs	r0, r7
 8009140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009142:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009144:	9908      	ldr	r1, [sp, #32]
 8009146:	47a8      	blx	r5
 8009148:	2500      	movs	r5, #0
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	d100      	bne.n	8009150 <_printf_float+0x25c>
 800914e:	e72f      	b.n	8008fb0 <_printf_float+0xbc>
 8009150:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009152:	3b01      	subs	r3, #1
 8009154:	42ab      	cmp	r3, r5
 8009156:	dc0a      	bgt.n	800916e <_printf_float+0x27a>
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	079b      	lsls	r3, r3, #30
 800915c:	d500      	bpl.n	8009160 <_printf_float+0x26c>
 800915e:	e114      	b.n	800938a <_printf_float+0x496>
 8009160:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009162:	68e0      	ldr	r0, [r4, #12]
 8009164:	4298      	cmp	r0, r3
 8009166:	db00      	blt.n	800916a <_printf_float+0x276>
 8009168:	e724      	b.n	8008fb4 <_printf_float+0xc0>
 800916a:	0018      	movs	r0, r3
 800916c:	e722      	b.n	8008fb4 <_printf_float+0xc0>
 800916e:	0022      	movs	r2, r4
 8009170:	2301      	movs	r3, #1
 8009172:	0038      	movs	r0, r7
 8009174:	9908      	ldr	r1, [sp, #32]
 8009176:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009178:	321a      	adds	r2, #26
 800917a:	47b0      	blx	r6
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	d100      	bne.n	8009182 <_printf_float+0x28e>
 8009180:	e716      	b.n	8008fb0 <_printf_float+0xbc>
 8009182:	3501      	adds	r5, #1
 8009184:	e7e4      	b.n	8009150 <_printf_float+0x25c>
 8009186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009188:	2b00      	cmp	r3, #0
 800918a:	dc3b      	bgt.n	8009204 <_printf_float+0x310>
 800918c:	2301      	movs	r3, #1
 800918e:	0038      	movs	r0, r7
 8009190:	4a1b      	ldr	r2, [pc, #108]	; (8009200 <_printf_float+0x30c>)
 8009192:	9908      	ldr	r1, [sp, #32]
 8009194:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009196:	47b0      	blx	r6
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d100      	bne.n	800919e <_printf_float+0x2aa>
 800919c:	e708      	b.n	8008fb0 <_printf_float+0xbc>
 800919e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091a2:	4313      	orrs	r3, r2
 80091a4:	d102      	bne.n	80091ac <_printf_float+0x2b8>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	07db      	lsls	r3, r3, #31
 80091aa:	d5d5      	bpl.n	8009158 <_printf_float+0x264>
 80091ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ae:	0038      	movs	r0, r7
 80091b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091b2:	9908      	ldr	r1, [sp, #32]
 80091b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091b6:	47b0      	blx	r6
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d100      	bne.n	80091be <_printf_float+0x2ca>
 80091bc:	e6f8      	b.n	8008fb0 <_printf_float+0xbc>
 80091be:	2300      	movs	r3, #0
 80091c0:	930a      	str	r3, [sp, #40]	; 0x28
 80091c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091c6:	425b      	negs	r3, r3
 80091c8:	4293      	cmp	r3, r2
 80091ca:	dc01      	bgt.n	80091d0 <_printf_float+0x2dc>
 80091cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091ce:	e792      	b.n	80090f6 <_printf_float+0x202>
 80091d0:	0022      	movs	r2, r4
 80091d2:	2301      	movs	r3, #1
 80091d4:	0038      	movs	r0, r7
 80091d6:	9908      	ldr	r1, [sp, #32]
 80091d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091da:	321a      	adds	r2, #26
 80091dc:	47b0      	blx	r6
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	d100      	bne.n	80091e4 <_printf_float+0x2f0>
 80091e2:	e6e5      	b.n	8008fb0 <_printf_float+0xbc>
 80091e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e6:	3301      	adds	r3, #1
 80091e8:	e7ea      	b.n	80091c0 <_printf_float+0x2cc>
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	7fefffff 	.word	0x7fefffff
 80091f0:	0800d7f0 	.word	0x0800d7f0
 80091f4:	0800d7f4 	.word	0x0800d7f4
 80091f8:	0800d7f8 	.word	0x0800d7f8
 80091fc:	0800d7fc 	.word	0x0800d7fc
 8009200:	0800d800 	.word	0x0800d800
 8009204:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009208:	920a      	str	r2, [sp, #40]	; 0x28
 800920a:	429a      	cmp	r2, r3
 800920c:	dd00      	ble.n	8009210 <_printf_float+0x31c>
 800920e:	930a      	str	r3, [sp, #40]	; 0x28
 8009210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009212:	2b00      	cmp	r3, #0
 8009214:	dc3d      	bgt.n	8009292 <_printf_float+0x39e>
 8009216:	2300      	movs	r3, #0
 8009218:	930e      	str	r3, [sp, #56]	; 0x38
 800921a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921c:	43db      	mvns	r3, r3
 800921e:	17db      	asrs	r3, r3, #31
 8009220:	930f      	str	r3, [sp, #60]	; 0x3c
 8009222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009224:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009226:	930c      	str	r3, [sp, #48]	; 0x30
 8009228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800922a:	4013      	ands	r3, r2
 800922c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009232:	4293      	cmp	r3, r2
 8009234:	dc36      	bgt.n	80092a4 <_printf_float+0x3b0>
 8009236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009238:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800923a:	4293      	cmp	r3, r2
 800923c:	db40      	blt.n	80092c0 <_printf_float+0x3cc>
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	07db      	lsls	r3, r3, #31
 8009242:	d43d      	bmi.n	80092c0 <_printf_float+0x3cc>
 8009244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009248:	9911      	ldr	r1, [sp, #68]	; 0x44
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	1a52      	subs	r2, r2, r1
 800924e:	920a      	str	r2, [sp, #40]	; 0x28
 8009250:	429a      	cmp	r2, r3
 8009252:	dd00      	ble.n	8009256 <_printf_float+0x362>
 8009254:	930a      	str	r3, [sp, #40]	; 0x28
 8009256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009258:	2b00      	cmp	r3, #0
 800925a:	dc3a      	bgt.n	80092d2 <_printf_float+0x3de>
 800925c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925e:	2500      	movs	r5, #0
 8009260:	43db      	mvns	r3, r3
 8009262:	17db      	asrs	r3, r3, #31
 8009264:	930b      	str	r3, [sp, #44]	; 0x2c
 8009266:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800926a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800926c:	1a9b      	subs	r3, r3, r2
 800926e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009270:	400a      	ands	r2, r1
 8009272:	1a9b      	subs	r3, r3, r2
 8009274:	42ab      	cmp	r3, r5
 8009276:	dc00      	bgt.n	800927a <_printf_float+0x386>
 8009278:	e76e      	b.n	8009158 <_printf_float+0x264>
 800927a:	0022      	movs	r2, r4
 800927c:	2301      	movs	r3, #1
 800927e:	0038      	movs	r0, r7
 8009280:	9908      	ldr	r1, [sp, #32]
 8009282:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009284:	321a      	adds	r2, #26
 8009286:	47b0      	blx	r6
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d100      	bne.n	800928e <_printf_float+0x39a>
 800928c:	e690      	b.n	8008fb0 <_printf_float+0xbc>
 800928e:	3501      	adds	r5, #1
 8009290:	e7e9      	b.n	8009266 <_printf_float+0x372>
 8009292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009294:	002a      	movs	r2, r5
 8009296:	0038      	movs	r0, r7
 8009298:	9908      	ldr	r1, [sp, #32]
 800929a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800929c:	47b0      	blx	r6
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	d1b9      	bne.n	8009216 <_printf_float+0x322>
 80092a2:	e685      	b.n	8008fb0 <_printf_float+0xbc>
 80092a4:	0022      	movs	r2, r4
 80092a6:	2301      	movs	r3, #1
 80092a8:	0038      	movs	r0, r7
 80092aa:	9908      	ldr	r1, [sp, #32]
 80092ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80092ae:	321a      	adds	r2, #26
 80092b0:	47b0      	blx	r6
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	d100      	bne.n	80092b8 <_printf_float+0x3c4>
 80092b6:	e67b      	b.n	8008fb0 <_printf_float+0xbc>
 80092b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092ba:	3301      	adds	r3, #1
 80092bc:	930e      	str	r3, [sp, #56]	; 0x38
 80092be:	e7b0      	b.n	8009222 <_printf_float+0x32e>
 80092c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092c2:	0038      	movs	r0, r7
 80092c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092c6:	9908      	ldr	r1, [sp, #32]
 80092c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80092ca:	47b0      	blx	r6
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d1b9      	bne.n	8009244 <_printf_float+0x350>
 80092d0:	e66e      	b.n	8008fb0 <_printf_float+0xbc>
 80092d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092d4:	0038      	movs	r0, r7
 80092d6:	18ea      	adds	r2, r5, r3
 80092d8:	9908      	ldr	r1, [sp, #32]
 80092da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80092de:	47a8      	blx	r5
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d1bb      	bne.n	800925c <_printf_float+0x368>
 80092e4:	e664      	b.n	8008fb0 <_printf_float+0xbc>
 80092e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	dc02      	bgt.n	80092f2 <_printf_float+0x3fe>
 80092ec:	2301      	movs	r3, #1
 80092ee:	421a      	tst	r2, r3
 80092f0:	d038      	beq.n	8009364 <_printf_float+0x470>
 80092f2:	2301      	movs	r3, #1
 80092f4:	002a      	movs	r2, r5
 80092f6:	0038      	movs	r0, r7
 80092f8:	9908      	ldr	r1, [sp, #32]
 80092fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80092fc:	47b0      	blx	r6
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	d100      	bne.n	8009304 <_printf_float+0x410>
 8009302:	e655      	b.n	8008fb0 <_printf_float+0xbc>
 8009304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009306:	0038      	movs	r0, r7
 8009308:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800930a:	9908      	ldr	r1, [sp, #32]
 800930c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800930e:	47b0      	blx	r6
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d100      	bne.n	8009316 <_printf_float+0x422>
 8009314:	e64c      	b.n	8008fb0 <_printf_float+0xbc>
 8009316:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009318:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800931a:	2200      	movs	r2, #0
 800931c:	2300      	movs	r3, #0
 800931e:	f7f7 f891 	bl	8000444 <__aeabi_dcmpeq>
 8009322:	2800      	cmp	r0, #0
 8009324:	d11c      	bne.n	8009360 <_printf_float+0x46c>
 8009326:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009328:	1c6a      	adds	r2, r5, #1
 800932a:	3b01      	subs	r3, #1
 800932c:	0038      	movs	r0, r7
 800932e:	9908      	ldr	r1, [sp, #32]
 8009330:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009332:	47a8      	blx	r5
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d10f      	bne.n	8009358 <_printf_float+0x464>
 8009338:	e63a      	b.n	8008fb0 <_printf_float+0xbc>
 800933a:	0022      	movs	r2, r4
 800933c:	2301      	movs	r3, #1
 800933e:	0038      	movs	r0, r7
 8009340:	9908      	ldr	r1, [sp, #32]
 8009342:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009344:	321a      	adds	r2, #26
 8009346:	47b0      	blx	r6
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d100      	bne.n	800934e <_printf_float+0x45a>
 800934c:	e630      	b.n	8008fb0 <_printf_float+0xbc>
 800934e:	3501      	adds	r5, #1
 8009350:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009352:	3b01      	subs	r3, #1
 8009354:	42ab      	cmp	r3, r5
 8009356:	dcf0      	bgt.n	800933a <_printf_float+0x446>
 8009358:	0022      	movs	r2, r4
 800935a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800935c:	3250      	adds	r2, #80	; 0x50
 800935e:	e6cb      	b.n	80090f8 <_printf_float+0x204>
 8009360:	2500      	movs	r5, #0
 8009362:	e7f5      	b.n	8009350 <_printf_float+0x45c>
 8009364:	002a      	movs	r2, r5
 8009366:	e7e1      	b.n	800932c <_printf_float+0x438>
 8009368:	0022      	movs	r2, r4
 800936a:	2301      	movs	r3, #1
 800936c:	0038      	movs	r0, r7
 800936e:	9908      	ldr	r1, [sp, #32]
 8009370:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009372:	3219      	adds	r2, #25
 8009374:	47b0      	blx	r6
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	d100      	bne.n	800937c <_printf_float+0x488>
 800937a:	e619      	b.n	8008fb0 <_printf_float+0xbc>
 800937c:	3501      	adds	r5, #1
 800937e:	68e3      	ldr	r3, [r4, #12]
 8009380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009382:	1a9b      	subs	r3, r3, r2
 8009384:	42ab      	cmp	r3, r5
 8009386:	dcef      	bgt.n	8009368 <_printf_float+0x474>
 8009388:	e6ea      	b.n	8009160 <_printf_float+0x26c>
 800938a:	2500      	movs	r5, #0
 800938c:	e7f7      	b.n	800937e <_printf_float+0x48a>
 800938e:	46c0      	nop			; (mov r8, r8)

08009390 <_printf_common>:
 8009390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009392:	0015      	movs	r5, r2
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	688a      	ldr	r2, [r1, #8]
 8009398:	690b      	ldr	r3, [r1, #16]
 800939a:	000c      	movs	r4, r1
 800939c:	9000      	str	r0, [sp, #0]
 800939e:	4293      	cmp	r3, r2
 80093a0:	da00      	bge.n	80093a4 <_printf_common+0x14>
 80093a2:	0013      	movs	r3, r2
 80093a4:	0022      	movs	r2, r4
 80093a6:	602b      	str	r3, [r5, #0]
 80093a8:	3243      	adds	r2, #67	; 0x43
 80093aa:	7812      	ldrb	r2, [r2, #0]
 80093ac:	2a00      	cmp	r2, #0
 80093ae:	d001      	beq.n	80093b4 <_printf_common+0x24>
 80093b0:	3301      	adds	r3, #1
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	069b      	lsls	r3, r3, #26
 80093b8:	d502      	bpl.n	80093c0 <_printf_common+0x30>
 80093ba:	682b      	ldr	r3, [r5, #0]
 80093bc:	3302      	adds	r3, #2
 80093be:	602b      	str	r3, [r5, #0]
 80093c0:	6822      	ldr	r2, [r4, #0]
 80093c2:	2306      	movs	r3, #6
 80093c4:	0017      	movs	r7, r2
 80093c6:	401f      	ands	r7, r3
 80093c8:	421a      	tst	r2, r3
 80093ca:	d027      	beq.n	800941c <_printf_common+0x8c>
 80093cc:	0023      	movs	r3, r4
 80093ce:	3343      	adds	r3, #67	; 0x43
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	1e5a      	subs	r2, r3, #1
 80093d4:	4193      	sbcs	r3, r2
 80093d6:	6822      	ldr	r2, [r4, #0]
 80093d8:	0692      	lsls	r2, r2, #26
 80093da:	d430      	bmi.n	800943e <_printf_common+0xae>
 80093dc:	0022      	movs	r2, r4
 80093de:	9901      	ldr	r1, [sp, #4]
 80093e0:	9800      	ldr	r0, [sp, #0]
 80093e2:	9e08      	ldr	r6, [sp, #32]
 80093e4:	3243      	adds	r2, #67	; 0x43
 80093e6:	47b0      	blx	r6
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d025      	beq.n	8009438 <_printf_common+0xa8>
 80093ec:	2306      	movs	r3, #6
 80093ee:	6820      	ldr	r0, [r4, #0]
 80093f0:	682a      	ldr	r2, [r5, #0]
 80093f2:	68e1      	ldr	r1, [r4, #12]
 80093f4:	2500      	movs	r5, #0
 80093f6:	4003      	ands	r3, r0
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d103      	bne.n	8009404 <_printf_common+0x74>
 80093fc:	1a8d      	subs	r5, r1, r2
 80093fe:	43eb      	mvns	r3, r5
 8009400:	17db      	asrs	r3, r3, #31
 8009402:	401d      	ands	r5, r3
 8009404:	68a3      	ldr	r3, [r4, #8]
 8009406:	6922      	ldr	r2, [r4, #16]
 8009408:	4293      	cmp	r3, r2
 800940a:	dd01      	ble.n	8009410 <_printf_common+0x80>
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	18ed      	adds	r5, r5, r3
 8009410:	2700      	movs	r7, #0
 8009412:	42bd      	cmp	r5, r7
 8009414:	d120      	bne.n	8009458 <_printf_common+0xc8>
 8009416:	2000      	movs	r0, #0
 8009418:	e010      	b.n	800943c <_printf_common+0xac>
 800941a:	3701      	adds	r7, #1
 800941c:	68e3      	ldr	r3, [r4, #12]
 800941e:	682a      	ldr	r2, [r5, #0]
 8009420:	1a9b      	subs	r3, r3, r2
 8009422:	42bb      	cmp	r3, r7
 8009424:	ddd2      	ble.n	80093cc <_printf_common+0x3c>
 8009426:	0022      	movs	r2, r4
 8009428:	2301      	movs	r3, #1
 800942a:	9901      	ldr	r1, [sp, #4]
 800942c:	9800      	ldr	r0, [sp, #0]
 800942e:	9e08      	ldr	r6, [sp, #32]
 8009430:	3219      	adds	r2, #25
 8009432:	47b0      	blx	r6
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d1f0      	bne.n	800941a <_printf_common+0x8a>
 8009438:	2001      	movs	r0, #1
 800943a:	4240      	negs	r0, r0
 800943c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800943e:	2030      	movs	r0, #48	; 0x30
 8009440:	18e1      	adds	r1, r4, r3
 8009442:	3143      	adds	r1, #67	; 0x43
 8009444:	7008      	strb	r0, [r1, #0]
 8009446:	0021      	movs	r1, r4
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	3145      	adds	r1, #69	; 0x45
 800944c:	7809      	ldrb	r1, [r1, #0]
 800944e:	18a2      	adds	r2, r4, r2
 8009450:	3243      	adds	r2, #67	; 0x43
 8009452:	3302      	adds	r3, #2
 8009454:	7011      	strb	r1, [r2, #0]
 8009456:	e7c1      	b.n	80093dc <_printf_common+0x4c>
 8009458:	0022      	movs	r2, r4
 800945a:	2301      	movs	r3, #1
 800945c:	9901      	ldr	r1, [sp, #4]
 800945e:	9800      	ldr	r0, [sp, #0]
 8009460:	9e08      	ldr	r6, [sp, #32]
 8009462:	321a      	adds	r2, #26
 8009464:	47b0      	blx	r6
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	d0e6      	beq.n	8009438 <_printf_common+0xa8>
 800946a:	3701      	adds	r7, #1
 800946c:	e7d1      	b.n	8009412 <_printf_common+0x82>
	...

08009470 <_printf_i>:
 8009470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009472:	b08b      	sub	sp, #44	; 0x2c
 8009474:	9206      	str	r2, [sp, #24]
 8009476:	000a      	movs	r2, r1
 8009478:	3243      	adds	r2, #67	; 0x43
 800947a:	9307      	str	r3, [sp, #28]
 800947c:	9005      	str	r0, [sp, #20]
 800947e:	9204      	str	r2, [sp, #16]
 8009480:	7e0a      	ldrb	r2, [r1, #24]
 8009482:	000c      	movs	r4, r1
 8009484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009486:	2a78      	cmp	r2, #120	; 0x78
 8009488:	d806      	bhi.n	8009498 <_printf_i+0x28>
 800948a:	2a62      	cmp	r2, #98	; 0x62
 800948c:	d808      	bhi.n	80094a0 <_printf_i+0x30>
 800948e:	2a00      	cmp	r2, #0
 8009490:	d100      	bne.n	8009494 <_printf_i+0x24>
 8009492:	e0c0      	b.n	8009616 <_printf_i+0x1a6>
 8009494:	2a58      	cmp	r2, #88	; 0x58
 8009496:	d052      	beq.n	800953e <_printf_i+0xce>
 8009498:	0026      	movs	r6, r4
 800949a:	3642      	adds	r6, #66	; 0x42
 800949c:	7032      	strb	r2, [r6, #0]
 800949e:	e022      	b.n	80094e6 <_printf_i+0x76>
 80094a0:	0010      	movs	r0, r2
 80094a2:	3863      	subs	r0, #99	; 0x63
 80094a4:	2815      	cmp	r0, #21
 80094a6:	d8f7      	bhi.n	8009498 <_printf_i+0x28>
 80094a8:	f7f6 fe3c 	bl	8000124 <__gnu_thumb1_case_shi>
 80094ac:	001f0016 	.word	0x001f0016
 80094b0:	fff6fff6 	.word	0xfff6fff6
 80094b4:	fff6fff6 	.word	0xfff6fff6
 80094b8:	fff6001f 	.word	0xfff6001f
 80094bc:	fff6fff6 	.word	0xfff6fff6
 80094c0:	00a8fff6 	.word	0x00a8fff6
 80094c4:	009a0036 	.word	0x009a0036
 80094c8:	fff6fff6 	.word	0xfff6fff6
 80094cc:	fff600b9 	.word	0xfff600b9
 80094d0:	fff60036 	.word	0xfff60036
 80094d4:	009efff6 	.word	0x009efff6
 80094d8:	0026      	movs	r6, r4
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	3642      	adds	r6, #66	; 0x42
 80094de:	1d11      	adds	r1, r2, #4
 80094e0:	6019      	str	r1, [r3, #0]
 80094e2:	6813      	ldr	r3, [r2, #0]
 80094e4:	7033      	strb	r3, [r6, #0]
 80094e6:	2301      	movs	r3, #1
 80094e8:	e0a7      	b.n	800963a <_printf_i+0x1ca>
 80094ea:	6808      	ldr	r0, [r1, #0]
 80094ec:	6819      	ldr	r1, [r3, #0]
 80094ee:	1d0a      	adds	r2, r1, #4
 80094f0:	0605      	lsls	r5, r0, #24
 80094f2:	d50b      	bpl.n	800950c <_printf_i+0x9c>
 80094f4:	680d      	ldr	r5, [r1, #0]
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	da03      	bge.n	8009504 <_printf_i+0x94>
 80094fc:	232d      	movs	r3, #45	; 0x2d
 80094fe:	9a04      	ldr	r2, [sp, #16]
 8009500:	426d      	negs	r5, r5
 8009502:	7013      	strb	r3, [r2, #0]
 8009504:	4b61      	ldr	r3, [pc, #388]	; (800968c <_printf_i+0x21c>)
 8009506:	270a      	movs	r7, #10
 8009508:	9303      	str	r3, [sp, #12]
 800950a:	e032      	b.n	8009572 <_printf_i+0x102>
 800950c:	680d      	ldr	r5, [r1, #0]
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	0641      	lsls	r1, r0, #25
 8009512:	d5f1      	bpl.n	80094f8 <_printf_i+0x88>
 8009514:	b22d      	sxth	r5, r5
 8009516:	e7ef      	b.n	80094f8 <_printf_i+0x88>
 8009518:	680d      	ldr	r5, [r1, #0]
 800951a:	6819      	ldr	r1, [r3, #0]
 800951c:	1d08      	adds	r0, r1, #4
 800951e:	6018      	str	r0, [r3, #0]
 8009520:	062e      	lsls	r6, r5, #24
 8009522:	d501      	bpl.n	8009528 <_printf_i+0xb8>
 8009524:	680d      	ldr	r5, [r1, #0]
 8009526:	e003      	b.n	8009530 <_printf_i+0xc0>
 8009528:	066d      	lsls	r5, r5, #25
 800952a:	d5fb      	bpl.n	8009524 <_printf_i+0xb4>
 800952c:	680d      	ldr	r5, [r1, #0]
 800952e:	b2ad      	uxth	r5, r5
 8009530:	4b56      	ldr	r3, [pc, #344]	; (800968c <_printf_i+0x21c>)
 8009532:	270a      	movs	r7, #10
 8009534:	9303      	str	r3, [sp, #12]
 8009536:	2a6f      	cmp	r2, #111	; 0x6f
 8009538:	d117      	bne.n	800956a <_printf_i+0xfa>
 800953a:	2708      	movs	r7, #8
 800953c:	e015      	b.n	800956a <_printf_i+0xfa>
 800953e:	3145      	adds	r1, #69	; 0x45
 8009540:	700a      	strb	r2, [r1, #0]
 8009542:	4a52      	ldr	r2, [pc, #328]	; (800968c <_printf_i+0x21c>)
 8009544:	9203      	str	r2, [sp, #12]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	6821      	ldr	r1, [r4, #0]
 800954a:	ca20      	ldmia	r2!, {r5}
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	0608      	lsls	r0, r1, #24
 8009550:	d550      	bpl.n	80095f4 <_printf_i+0x184>
 8009552:	07cb      	lsls	r3, r1, #31
 8009554:	d502      	bpl.n	800955c <_printf_i+0xec>
 8009556:	2320      	movs	r3, #32
 8009558:	4319      	orrs	r1, r3
 800955a:	6021      	str	r1, [r4, #0]
 800955c:	2710      	movs	r7, #16
 800955e:	2d00      	cmp	r5, #0
 8009560:	d103      	bne.n	800956a <_printf_i+0xfa>
 8009562:	2320      	movs	r3, #32
 8009564:	6822      	ldr	r2, [r4, #0]
 8009566:	439a      	bics	r2, r3
 8009568:	6022      	str	r2, [r4, #0]
 800956a:	0023      	movs	r3, r4
 800956c:	2200      	movs	r2, #0
 800956e:	3343      	adds	r3, #67	; 0x43
 8009570:	701a      	strb	r2, [r3, #0]
 8009572:	6863      	ldr	r3, [r4, #4]
 8009574:	60a3      	str	r3, [r4, #8]
 8009576:	2b00      	cmp	r3, #0
 8009578:	db03      	blt.n	8009582 <_printf_i+0x112>
 800957a:	2204      	movs	r2, #4
 800957c:	6821      	ldr	r1, [r4, #0]
 800957e:	4391      	bics	r1, r2
 8009580:	6021      	str	r1, [r4, #0]
 8009582:	2d00      	cmp	r5, #0
 8009584:	d102      	bne.n	800958c <_printf_i+0x11c>
 8009586:	9e04      	ldr	r6, [sp, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00c      	beq.n	80095a6 <_printf_i+0x136>
 800958c:	9e04      	ldr	r6, [sp, #16]
 800958e:	0028      	movs	r0, r5
 8009590:	0039      	movs	r1, r7
 8009592:	f7f6 fe57 	bl	8000244 <__aeabi_uidivmod>
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	3e01      	subs	r6, #1
 800959a:	5c5b      	ldrb	r3, [r3, r1]
 800959c:	7033      	strb	r3, [r6, #0]
 800959e:	002b      	movs	r3, r5
 80095a0:	0005      	movs	r5, r0
 80095a2:	429f      	cmp	r7, r3
 80095a4:	d9f3      	bls.n	800958e <_printf_i+0x11e>
 80095a6:	2f08      	cmp	r7, #8
 80095a8:	d109      	bne.n	80095be <_printf_i+0x14e>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	07db      	lsls	r3, r3, #31
 80095ae:	d506      	bpl.n	80095be <_printf_i+0x14e>
 80095b0:	6863      	ldr	r3, [r4, #4]
 80095b2:	6922      	ldr	r2, [r4, #16]
 80095b4:	4293      	cmp	r3, r2
 80095b6:	dc02      	bgt.n	80095be <_printf_i+0x14e>
 80095b8:	2330      	movs	r3, #48	; 0x30
 80095ba:	3e01      	subs	r6, #1
 80095bc:	7033      	strb	r3, [r6, #0]
 80095be:	9b04      	ldr	r3, [sp, #16]
 80095c0:	1b9b      	subs	r3, r3, r6
 80095c2:	6123      	str	r3, [r4, #16]
 80095c4:	9b07      	ldr	r3, [sp, #28]
 80095c6:	0021      	movs	r1, r4
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	9805      	ldr	r0, [sp, #20]
 80095cc:	9b06      	ldr	r3, [sp, #24]
 80095ce:	aa09      	add	r2, sp, #36	; 0x24
 80095d0:	f7ff fede 	bl	8009390 <_printf_common>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d135      	bne.n	8009644 <_printf_i+0x1d4>
 80095d8:	2001      	movs	r0, #1
 80095da:	4240      	negs	r0, r0
 80095dc:	b00b      	add	sp, #44	; 0x2c
 80095de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e0:	2220      	movs	r2, #32
 80095e2:	6809      	ldr	r1, [r1, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	6022      	str	r2, [r4, #0]
 80095e8:	0022      	movs	r2, r4
 80095ea:	2178      	movs	r1, #120	; 0x78
 80095ec:	3245      	adds	r2, #69	; 0x45
 80095ee:	7011      	strb	r1, [r2, #0]
 80095f0:	4a27      	ldr	r2, [pc, #156]	; (8009690 <_printf_i+0x220>)
 80095f2:	e7a7      	b.n	8009544 <_printf_i+0xd4>
 80095f4:	0648      	lsls	r0, r1, #25
 80095f6:	d5ac      	bpl.n	8009552 <_printf_i+0xe2>
 80095f8:	b2ad      	uxth	r5, r5
 80095fa:	e7aa      	b.n	8009552 <_printf_i+0xe2>
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	680d      	ldr	r5, [r1, #0]
 8009600:	1d10      	adds	r0, r2, #4
 8009602:	6949      	ldr	r1, [r1, #20]
 8009604:	6018      	str	r0, [r3, #0]
 8009606:	6813      	ldr	r3, [r2, #0]
 8009608:	062e      	lsls	r6, r5, #24
 800960a:	d501      	bpl.n	8009610 <_printf_i+0x1a0>
 800960c:	6019      	str	r1, [r3, #0]
 800960e:	e002      	b.n	8009616 <_printf_i+0x1a6>
 8009610:	066d      	lsls	r5, r5, #25
 8009612:	d5fb      	bpl.n	800960c <_printf_i+0x19c>
 8009614:	8019      	strh	r1, [r3, #0]
 8009616:	2300      	movs	r3, #0
 8009618:	9e04      	ldr	r6, [sp, #16]
 800961a:	6123      	str	r3, [r4, #16]
 800961c:	e7d2      	b.n	80095c4 <_printf_i+0x154>
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	1d11      	adds	r1, r2, #4
 8009622:	6019      	str	r1, [r3, #0]
 8009624:	6816      	ldr	r6, [r2, #0]
 8009626:	2100      	movs	r1, #0
 8009628:	0030      	movs	r0, r6
 800962a:	6862      	ldr	r2, [r4, #4]
 800962c:	f000 ff0a 	bl	800a444 <memchr>
 8009630:	2800      	cmp	r0, #0
 8009632:	d001      	beq.n	8009638 <_printf_i+0x1c8>
 8009634:	1b80      	subs	r0, r0, r6
 8009636:	6060      	str	r0, [r4, #4]
 8009638:	6863      	ldr	r3, [r4, #4]
 800963a:	6123      	str	r3, [r4, #16]
 800963c:	2300      	movs	r3, #0
 800963e:	9a04      	ldr	r2, [sp, #16]
 8009640:	7013      	strb	r3, [r2, #0]
 8009642:	e7bf      	b.n	80095c4 <_printf_i+0x154>
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	0032      	movs	r2, r6
 8009648:	9906      	ldr	r1, [sp, #24]
 800964a:	9805      	ldr	r0, [sp, #20]
 800964c:	9d07      	ldr	r5, [sp, #28]
 800964e:	47a8      	blx	r5
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d0c1      	beq.n	80095d8 <_printf_i+0x168>
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	079b      	lsls	r3, r3, #30
 8009658:	d415      	bmi.n	8009686 <_printf_i+0x216>
 800965a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965c:	68e0      	ldr	r0, [r4, #12]
 800965e:	4298      	cmp	r0, r3
 8009660:	dabc      	bge.n	80095dc <_printf_i+0x16c>
 8009662:	0018      	movs	r0, r3
 8009664:	e7ba      	b.n	80095dc <_printf_i+0x16c>
 8009666:	0022      	movs	r2, r4
 8009668:	2301      	movs	r3, #1
 800966a:	9906      	ldr	r1, [sp, #24]
 800966c:	9805      	ldr	r0, [sp, #20]
 800966e:	9e07      	ldr	r6, [sp, #28]
 8009670:	3219      	adds	r2, #25
 8009672:	47b0      	blx	r6
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d0af      	beq.n	80095d8 <_printf_i+0x168>
 8009678:	3501      	adds	r5, #1
 800967a:	68e3      	ldr	r3, [r4, #12]
 800967c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	42ab      	cmp	r3, r5
 8009682:	dcf0      	bgt.n	8009666 <_printf_i+0x1f6>
 8009684:	e7e9      	b.n	800965a <_printf_i+0x1ea>
 8009686:	2500      	movs	r5, #0
 8009688:	e7f7      	b.n	800967a <_printf_i+0x20a>
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	0800d802 	.word	0x0800d802
 8009690:	0800d813 	.word	0x0800d813

08009694 <siprintf>:
 8009694:	b40e      	push	{r1, r2, r3}
 8009696:	b500      	push	{lr}
 8009698:	490b      	ldr	r1, [pc, #44]	; (80096c8 <siprintf+0x34>)
 800969a:	b09c      	sub	sp, #112	; 0x70
 800969c:	ab1d      	add	r3, sp, #116	; 0x74
 800969e:	9002      	str	r0, [sp, #8]
 80096a0:	9006      	str	r0, [sp, #24]
 80096a2:	9107      	str	r1, [sp, #28]
 80096a4:	9104      	str	r1, [sp, #16]
 80096a6:	4809      	ldr	r0, [pc, #36]	; (80096cc <siprintf+0x38>)
 80096a8:	4909      	ldr	r1, [pc, #36]	; (80096d0 <siprintf+0x3c>)
 80096aa:	cb04      	ldmia	r3!, {r2}
 80096ac:	9105      	str	r1, [sp, #20]
 80096ae:	6800      	ldr	r0, [r0, #0]
 80096b0:	a902      	add	r1, sp, #8
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	f001 fb90 	bl	800add8 <_svfiprintf_r>
 80096b8:	2300      	movs	r3, #0
 80096ba:	9a02      	ldr	r2, [sp, #8]
 80096bc:	7013      	strb	r3, [r2, #0]
 80096be:	b01c      	add	sp, #112	; 0x70
 80096c0:	bc08      	pop	{r3}
 80096c2:	b003      	add	sp, #12
 80096c4:	4718      	bx	r3
 80096c6:	46c0      	nop			; (mov r8, r8)
 80096c8:	7fffffff 	.word	0x7fffffff
 80096cc:	20000014 	.word	0x20000014
 80096d0:	ffff0208 	.word	0xffff0208

080096d4 <quorem>:
 80096d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096d6:	0006      	movs	r6, r0
 80096d8:	690d      	ldr	r5, [r1, #16]
 80096da:	6933      	ldr	r3, [r6, #16]
 80096dc:	b087      	sub	sp, #28
 80096de:	2000      	movs	r0, #0
 80096e0:	9102      	str	r1, [sp, #8]
 80096e2:	42ab      	cmp	r3, r5
 80096e4:	db6b      	blt.n	80097be <quorem+0xea>
 80096e6:	000b      	movs	r3, r1
 80096e8:	3d01      	subs	r5, #1
 80096ea:	00ac      	lsls	r4, r5, #2
 80096ec:	3314      	adds	r3, #20
 80096ee:	9305      	str	r3, [sp, #20]
 80096f0:	191b      	adds	r3, r3, r4
 80096f2:	9303      	str	r3, [sp, #12]
 80096f4:	0033      	movs	r3, r6
 80096f6:	3314      	adds	r3, #20
 80096f8:	9301      	str	r3, [sp, #4]
 80096fa:	191c      	adds	r4, r3, r4
 80096fc:	9b03      	ldr	r3, [sp, #12]
 80096fe:	6827      	ldr	r7, [r4, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	0038      	movs	r0, r7
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	3301      	adds	r3, #1
 8009708:	0019      	movs	r1, r3
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	f7f6 fd14 	bl	8000138 <__udivsi3>
 8009710:	9b04      	ldr	r3, [sp, #16]
 8009712:	9000      	str	r0, [sp, #0]
 8009714:	429f      	cmp	r7, r3
 8009716:	d329      	bcc.n	800976c <quorem+0x98>
 8009718:	2300      	movs	r3, #0
 800971a:	469c      	mov	ip, r3
 800971c:	9801      	ldr	r0, [sp, #4]
 800971e:	9f05      	ldr	r7, [sp, #20]
 8009720:	9304      	str	r3, [sp, #16]
 8009722:	cf08      	ldmia	r7!, {r3}
 8009724:	9a00      	ldr	r2, [sp, #0]
 8009726:	b299      	uxth	r1, r3
 8009728:	4351      	muls	r1, r2
 800972a:	0c1b      	lsrs	r3, r3, #16
 800972c:	4353      	muls	r3, r2
 800972e:	4461      	add	r1, ip
 8009730:	0c0a      	lsrs	r2, r1, #16
 8009732:	189b      	adds	r3, r3, r2
 8009734:	0c1a      	lsrs	r2, r3, #16
 8009736:	9305      	str	r3, [sp, #20]
 8009738:	6803      	ldr	r3, [r0, #0]
 800973a:	4694      	mov	ip, r2
 800973c:	b29a      	uxth	r2, r3
 800973e:	9b04      	ldr	r3, [sp, #16]
 8009740:	b289      	uxth	r1, r1
 8009742:	18d2      	adds	r2, r2, r3
 8009744:	6803      	ldr	r3, [r0, #0]
 8009746:	1a52      	subs	r2, r2, r1
 8009748:	0c19      	lsrs	r1, r3, #16
 800974a:	466b      	mov	r3, sp
 800974c:	8a9b      	ldrh	r3, [r3, #20]
 800974e:	1acb      	subs	r3, r1, r3
 8009750:	1411      	asrs	r1, r2, #16
 8009752:	185b      	adds	r3, r3, r1
 8009754:	1419      	asrs	r1, r3, #16
 8009756:	b292      	uxth	r2, r2
 8009758:	041b      	lsls	r3, r3, #16
 800975a:	431a      	orrs	r2, r3
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	9104      	str	r1, [sp, #16]
 8009760:	c004      	stmia	r0!, {r2}
 8009762:	42bb      	cmp	r3, r7
 8009764:	d2dd      	bcs.n	8009722 <quorem+0x4e>
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d02e      	beq.n	80097ca <quorem+0xf6>
 800976c:	0030      	movs	r0, r6
 800976e:	9902      	ldr	r1, [sp, #8]
 8009770:	f001 f902 	bl	800a978 <__mcmp>
 8009774:	2800      	cmp	r0, #0
 8009776:	db21      	blt.n	80097bc <quorem+0xe8>
 8009778:	0030      	movs	r0, r6
 800977a:	2400      	movs	r4, #0
 800977c:	9b00      	ldr	r3, [sp, #0]
 800977e:	9902      	ldr	r1, [sp, #8]
 8009780:	3301      	adds	r3, #1
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	3014      	adds	r0, #20
 8009786:	3114      	adds	r1, #20
 8009788:	6802      	ldr	r2, [r0, #0]
 800978a:	c908      	ldmia	r1!, {r3}
 800978c:	b292      	uxth	r2, r2
 800978e:	1914      	adds	r4, r2, r4
 8009790:	b29a      	uxth	r2, r3
 8009792:	1aa2      	subs	r2, r4, r2
 8009794:	6804      	ldr	r4, [r0, #0]
 8009796:	0c1b      	lsrs	r3, r3, #16
 8009798:	0c24      	lsrs	r4, r4, #16
 800979a:	1ae3      	subs	r3, r4, r3
 800979c:	1414      	asrs	r4, r2, #16
 800979e:	191b      	adds	r3, r3, r4
 80097a0:	141c      	asrs	r4, r3, #16
 80097a2:	b292      	uxth	r2, r2
 80097a4:	041b      	lsls	r3, r3, #16
 80097a6:	4313      	orrs	r3, r2
 80097a8:	c008      	stmia	r0!, {r3}
 80097aa:	9b03      	ldr	r3, [sp, #12]
 80097ac:	428b      	cmp	r3, r1
 80097ae:	d2eb      	bcs.n	8009788 <quorem+0xb4>
 80097b0:	9a01      	ldr	r2, [sp, #4]
 80097b2:	00ab      	lsls	r3, r5, #2
 80097b4:	18d3      	adds	r3, r2, r3
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	2a00      	cmp	r2, #0
 80097ba:	d010      	beq.n	80097de <quorem+0x10a>
 80097bc:	9800      	ldr	r0, [sp, #0]
 80097be:	b007      	add	sp, #28
 80097c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d104      	bne.n	80097d2 <quorem+0xfe>
 80097c8:	3d01      	subs	r5, #1
 80097ca:	9b01      	ldr	r3, [sp, #4]
 80097cc:	3c04      	subs	r4, #4
 80097ce:	42a3      	cmp	r3, r4
 80097d0:	d3f7      	bcc.n	80097c2 <quorem+0xee>
 80097d2:	6135      	str	r5, [r6, #16]
 80097d4:	e7ca      	b.n	800976c <quorem+0x98>
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	2a00      	cmp	r2, #0
 80097da:	d104      	bne.n	80097e6 <quorem+0x112>
 80097dc:	3d01      	subs	r5, #1
 80097de:	9a01      	ldr	r2, [sp, #4]
 80097e0:	3b04      	subs	r3, #4
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d3f7      	bcc.n	80097d6 <quorem+0x102>
 80097e6:	6135      	str	r5, [r6, #16]
 80097e8:	e7e8      	b.n	80097bc <quorem+0xe8>
	...

080097ec <_dtoa_r>:
 80097ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ee:	b09d      	sub	sp, #116	; 0x74
 80097f0:	9202      	str	r2, [sp, #8]
 80097f2:	9303      	str	r3, [sp, #12]
 80097f4:	9b02      	ldr	r3, [sp, #8]
 80097f6:	9c03      	ldr	r4, [sp, #12]
 80097f8:	930a      	str	r3, [sp, #40]	; 0x28
 80097fa:	940b      	str	r4, [sp, #44]	; 0x2c
 80097fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097fe:	0007      	movs	r7, r0
 8009800:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009802:	2c00      	cmp	r4, #0
 8009804:	d10e      	bne.n	8009824 <_dtoa_r+0x38>
 8009806:	2010      	movs	r0, #16
 8009808:	f000 fe12 	bl	800a430 <malloc>
 800980c:	1e02      	subs	r2, r0, #0
 800980e:	6278      	str	r0, [r7, #36]	; 0x24
 8009810:	d104      	bne.n	800981c <_dtoa_r+0x30>
 8009812:	21ea      	movs	r1, #234	; 0xea
 8009814:	4bc0      	ldr	r3, [pc, #768]	; (8009b18 <_dtoa_r+0x32c>)
 8009816:	48c1      	ldr	r0, [pc, #772]	; (8009b1c <_dtoa_r+0x330>)
 8009818:	f001 fbf0 	bl	800affc <__assert_func>
 800981c:	6044      	str	r4, [r0, #4]
 800981e:	6084      	str	r4, [r0, #8]
 8009820:	6004      	str	r4, [r0, #0]
 8009822:	60c4      	str	r4, [r0, #12]
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	6819      	ldr	r1, [r3, #0]
 8009828:	2900      	cmp	r1, #0
 800982a:	d00a      	beq.n	8009842 <_dtoa_r+0x56>
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	2301      	movs	r3, #1
 8009830:	4093      	lsls	r3, r2
 8009832:	604a      	str	r2, [r1, #4]
 8009834:	608b      	str	r3, [r1, #8]
 8009836:	0038      	movs	r0, r7
 8009838:	f000 fe5c 	bl	800a4f4 <_Bfree>
 800983c:	2200      	movs	r2, #0
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	da21      	bge.n	800988c <_dtoa_r+0xa0>
 8009848:	2301      	movs	r3, #1
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	005b      	lsls	r3, r3, #1
 8009850:	085b      	lsrs	r3, r3, #1
 8009852:	930b      	str	r3, [sp, #44]	; 0x2c
 8009854:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009856:	4bb2      	ldr	r3, [pc, #712]	; (8009b20 <_dtoa_r+0x334>)
 8009858:	002a      	movs	r2, r5
 800985a:	9318      	str	r3, [sp, #96]	; 0x60
 800985c:	401a      	ands	r2, r3
 800985e:	429a      	cmp	r2, r3
 8009860:	d117      	bne.n	8009892 <_dtoa_r+0xa6>
 8009862:	4bb0      	ldr	r3, [pc, #704]	; (8009b24 <_dtoa_r+0x338>)
 8009864:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009866:	0328      	lsls	r0, r5, #12
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	9b02      	ldr	r3, [sp, #8]
 800986c:	0b00      	lsrs	r0, r0, #12
 800986e:	4318      	orrs	r0, r3
 8009870:	d101      	bne.n	8009876 <_dtoa_r+0x8a>
 8009872:	f000 fdc3 	bl	800a3fc <_dtoa_r+0xc10>
 8009876:	48ac      	ldr	r0, [pc, #688]	; (8009b28 <_dtoa_r+0x33c>)
 8009878:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800987a:	9005      	str	r0, [sp, #20]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <_dtoa_r+0x9a>
 8009880:	4baa      	ldr	r3, [pc, #680]	; (8009b2c <_dtoa_r+0x340>)
 8009882:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	9805      	ldr	r0, [sp, #20]
 8009888:	b01d      	add	sp, #116	; 0x74
 800988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988c:	2300      	movs	r3, #0
 800988e:	602b      	str	r3, [r5, #0]
 8009890:	e7e0      	b.n	8009854 <_dtoa_r+0x68>
 8009892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009894:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009896:	9312      	str	r3, [sp, #72]	; 0x48
 8009898:	9413      	str	r4, [sp, #76]	; 0x4c
 800989a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800989c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800989e:	2200      	movs	r2, #0
 80098a0:	2300      	movs	r3, #0
 80098a2:	f7f6 fdcf 	bl	8000444 <__aeabi_dcmpeq>
 80098a6:	1e04      	subs	r4, r0, #0
 80098a8:	d00b      	beq.n	80098c2 <_dtoa_r+0xd6>
 80098aa:	2301      	movs	r3, #1
 80098ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098ae:	6013      	str	r3, [r2, #0]
 80098b0:	4b9f      	ldr	r3, [pc, #636]	; (8009b30 <_dtoa_r+0x344>)
 80098b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80098b4:	9305      	str	r3, [sp, #20]
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	d0e5      	beq.n	8009886 <_dtoa_r+0x9a>
 80098ba:	4a9e      	ldr	r2, [pc, #632]	; (8009b34 <_dtoa_r+0x348>)
 80098bc:	9926      	ldr	r1, [sp, #152]	; 0x98
 80098be:	600a      	str	r2, [r1, #0]
 80098c0:	e7e1      	b.n	8009886 <_dtoa_r+0x9a>
 80098c2:	ab1a      	add	r3, sp, #104	; 0x68
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	ab1b      	add	r3, sp, #108	; 0x6c
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	0038      	movs	r0, r7
 80098cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098d0:	f001 f906 	bl	800aae0 <__d2b>
 80098d4:	006e      	lsls	r6, r5, #1
 80098d6:	9004      	str	r0, [sp, #16]
 80098d8:	0d76      	lsrs	r6, r6, #21
 80098da:	d100      	bne.n	80098de <_dtoa_r+0xf2>
 80098dc:	e07c      	b.n	80099d8 <_dtoa_r+0x1ec>
 80098de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80098e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80098e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098e4:	4a94      	ldr	r2, [pc, #592]	; (8009b38 <_dtoa_r+0x34c>)
 80098e6:	031b      	lsls	r3, r3, #12
 80098e8:	0b1b      	lsrs	r3, r3, #12
 80098ea:	431a      	orrs	r2, r3
 80098ec:	0011      	movs	r1, r2
 80098ee:	4b93      	ldr	r3, [pc, #588]	; (8009b3c <_dtoa_r+0x350>)
 80098f0:	9416      	str	r4, [sp, #88]	; 0x58
 80098f2:	18f6      	adds	r6, r6, r3
 80098f4:	2200      	movs	r2, #0
 80098f6:	4b92      	ldr	r3, [pc, #584]	; (8009b40 <_dtoa_r+0x354>)
 80098f8:	f7f8 feea 	bl	80026d0 <__aeabi_dsub>
 80098fc:	4a91      	ldr	r2, [pc, #580]	; (8009b44 <_dtoa_r+0x358>)
 80098fe:	4b92      	ldr	r3, [pc, #584]	; (8009b48 <_dtoa_r+0x35c>)
 8009900:	f7f8 fc7a 	bl	80021f8 <__aeabi_dmul>
 8009904:	4a91      	ldr	r2, [pc, #580]	; (8009b4c <_dtoa_r+0x360>)
 8009906:	4b92      	ldr	r3, [pc, #584]	; (8009b50 <_dtoa_r+0x364>)
 8009908:	f7f7 fd06 	bl	8001318 <__aeabi_dadd>
 800990c:	0004      	movs	r4, r0
 800990e:	0030      	movs	r0, r6
 8009910:	000d      	movs	r5, r1
 8009912:	f7f9 fac3 	bl	8002e9c <__aeabi_i2d>
 8009916:	4a8f      	ldr	r2, [pc, #572]	; (8009b54 <_dtoa_r+0x368>)
 8009918:	4b8f      	ldr	r3, [pc, #572]	; (8009b58 <_dtoa_r+0x36c>)
 800991a:	f7f8 fc6d 	bl	80021f8 <__aeabi_dmul>
 800991e:	0002      	movs	r2, r0
 8009920:	000b      	movs	r3, r1
 8009922:	0020      	movs	r0, r4
 8009924:	0029      	movs	r1, r5
 8009926:	f7f7 fcf7 	bl	8001318 <__aeabi_dadd>
 800992a:	0004      	movs	r4, r0
 800992c:	000d      	movs	r5, r1
 800992e:	f7f9 fa7f 	bl	8002e30 <__aeabi_d2iz>
 8009932:	2200      	movs	r2, #0
 8009934:	9002      	str	r0, [sp, #8]
 8009936:	2300      	movs	r3, #0
 8009938:	0020      	movs	r0, r4
 800993a:	0029      	movs	r1, r5
 800993c:	f7f6 fd88 	bl	8000450 <__aeabi_dcmplt>
 8009940:	2800      	cmp	r0, #0
 8009942:	d00b      	beq.n	800995c <_dtoa_r+0x170>
 8009944:	9802      	ldr	r0, [sp, #8]
 8009946:	f7f9 faa9 	bl	8002e9c <__aeabi_i2d>
 800994a:	002b      	movs	r3, r5
 800994c:	0022      	movs	r2, r4
 800994e:	f7f6 fd79 	bl	8000444 <__aeabi_dcmpeq>
 8009952:	4243      	negs	r3, r0
 8009954:	4158      	adcs	r0, r3
 8009956:	9b02      	ldr	r3, [sp, #8]
 8009958:	1a1b      	subs	r3, r3, r0
 800995a:	9302      	str	r3, [sp, #8]
 800995c:	2301      	movs	r3, #1
 800995e:	9315      	str	r3, [sp, #84]	; 0x54
 8009960:	9b02      	ldr	r3, [sp, #8]
 8009962:	2b16      	cmp	r3, #22
 8009964:	d80f      	bhi.n	8009986 <_dtoa_r+0x19a>
 8009966:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009968:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800996a:	00da      	lsls	r2, r3, #3
 800996c:	4b7b      	ldr	r3, [pc, #492]	; (8009b5c <_dtoa_r+0x370>)
 800996e:	189b      	adds	r3, r3, r2
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f7f6 fd6c 	bl	8000450 <__aeabi_dcmplt>
 8009978:	2800      	cmp	r0, #0
 800997a:	d049      	beq.n	8009a10 <_dtoa_r+0x224>
 800997c:	9b02      	ldr	r3, [sp, #8]
 800997e:	3b01      	subs	r3, #1
 8009980:	9302      	str	r3, [sp, #8]
 8009982:	2300      	movs	r3, #0
 8009984:	9315      	str	r3, [sp, #84]	; 0x54
 8009986:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009988:	1b9e      	subs	r6, r3, r6
 800998a:	2300      	movs	r3, #0
 800998c:	9308      	str	r3, [sp, #32]
 800998e:	0033      	movs	r3, r6
 8009990:	3b01      	subs	r3, #1
 8009992:	930d      	str	r3, [sp, #52]	; 0x34
 8009994:	d504      	bpl.n	80099a0 <_dtoa_r+0x1b4>
 8009996:	2301      	movs	r3, #1
 8009998:	1b9b      	subs	r3, r3, r6
 800999a:	9308      	str	r3, [sp, #32]
 800999c:	2300      	movs	r3, #0
 800999e:	930d      	str	r3, [sp, #52]	; 0x34
 80099a0:	9b02      	ldr	r3, [sp, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	db36      	blt.n	8009a14 <_dtoa_r+0x228>
 80099a6:	9a02      	ldr	r2, [sp, #8]
 80099a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099aa:	4694      	mov	ip, r2
 80099ac:	4463      	add	r3, ip
 80099ae:	930d      	str	r3, [sp, #52]	; 0x34
 80099b0:	2300      	movs	r3, #0
 80099b2:	9214      	str	r2, [sp, #80]	; 0x50
 80099b4:	930e      	str	r3, [sp, #56]	; 0x38
 80099b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099b8:	2401      	movs	r4, #1
 80099ba:	2b09      	cmp	r3, #9
 80099bc:	d862      	bhi.n	8009a84 <_dtoa_r+0x298>
 80099be:	2b05      	cmp	r3, #5
 80099c0:	dd02      	ble.n	80099c8 <_dtoa_r+0x1dc>
 80099c2:	2400      	movs	r4, #0
 80099c4:	3b04      	subs	r3, #4
 80099c6:	9322      	str	r3, [sp, #136]	; 0x88
 80099c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099ca:	1e98      	subs	r0, r3, #2
 80099cc:	2803      	cmp	r0, #3
 80099ce:	d862      	bhi.n	8009a96 <_dtoa_r+0x2aa>
 80099d0:	f7f6 fb9e 	bl	8000110 <__gnu_thumb1_case_uqi>
 80099d4:	56343629 	.word	0x56343629
 80099d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80099da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80099dc:	189e      	adds	r6, r3, r2
 80099de:	4b60      	ldr	r3, [pc, #384]	; (8009b60 <_dtoa_r+0x374>)
 80099e0:	18f2      	adds	r2, r6, r3
 80099e2:	2a20      	cmp	r2, #32
 80099e4:	dd0f      	ble.n	8009a06 <_dtoa_r+0x21a>
 80099e6:	2340      	movs	r3, #64	; 0x40
 80099e8:	1a9b      	subs	r3, r3, r2
 80099ea:	409d      	lsls	r5, r3
 80099ec:	4b5d      	ldr	r3, [pc, #372]	; (8009b64 <_dtoa_r+0x378>)
 80099ee:	9802      	ldr	r0, [sp, #8]
 80099f0:	18f3      	adds	r3, r6, r3
 80099f2:	40d8      	lsrs	r0, r3
 80099f4:	4328      	orrs	r0, r5
 80099f6:	f7f9 fa81 	bl	8002efc <__aeabi_ui2d>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4c5a      	ldr	r4, [pc, #360]	; (8009b68 <_dtoa_r+0x37c>)
 80099fe:	3e01      	subs	r6, #1
 8009a00:	1909      	adds	r1, r1, r4
 8009a02:	9316      	str	r3, [sp, #88]	; 0x58
 8009a04:	e776      	b.n	80098f4 <_dtoa_r+0x108>
 8009a06:	2320      	movs	r3, #32
 8009a08:	9802      	ldr	r0, [sp, #8]
 8009a0a:	1a9b      	subs	r3, r3, r2
 8009a0c:	4098      	lsls	r0, r3
 8009a0e:	e7f2      	b.n	80099f6 <_dtoa_r+0x20a>
 8009a10:	9015      	str	r0, [sp, #84]	; 0x54
 8009a12:	e7b8      	b.n	8009986 <_dtoa_r+0x19a>
 8009a14:	9b08      	ldr	r3, [sp, #32]
 8009a16:	9a02      	ldr	r2, [sp, #8]
 8009a18:	1a9b      	subs	r3, r3, r2
 8009a1a:	9308      	str	r3, [sp, #32]
 8009a1c:	4253      	negs	r3, r2
 8009a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8009a20:	2300      	movs	r3, #0
 8009a22:	9314      	str	r3, [sp, #80]	; 0x50
 8009a24:	e7c7      	b.n	80099b6 <_dtoa_r+0x1ca>
 8009a26:	2300      	movs	r3, #0
 8009a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	dc36      	bgt.n	8009a9e <_dtoa_r+0x2b2>
 8009a30:	2301      	movs	r3, #1
 8009a32:	001a      	movs	r2, r3
 8009a34:	930c      	str	r3, [sp, #48]	; 0x30
 8009a36:	9306      	str	r3, [sp, #24]
 8009a38:	9223      	str	r2, [sp, #140]	; 0x8c
 8009a3a:	e00d      	b.n	8009a58 <_dtoa_r+0x26c>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e7f3      	b.n	8009a28 <_dtoa_r+0x23c>
 8009a40:	2300      	movs	r3, #0
 8009a42:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009a44:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a46:	4694      	mov	ip, r2
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	4463      	add	r3, ip
 8009a4c:	930c      	str	r3, [sp, #48]	; 0x30
 8009a4e:	3301      	adds	r3, #1
 8009a50:	9306      	str	r3, [sp, #24]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	dc00      	bgt.n	8009a58 <_dtoa_r+0x26c>
 8009a56:	2301      	movs	r3, #1
 8009a58:	2200      	movs	r2, #0
 8009a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a5c:	6042      	str	r2, [r0, #4]
 8009a5e:	3204      	adds	r2, #4
 8009a60:	0015      	movs	r5, r2
 8009a62:	3514      	adds	r5, #20
 8009a64:	6841      	ldr	r1, [r0, #4]
 8009a66:	429d      	cmp	r5, r3
 8009a68:	d91d      	bls.n	8009aa6 <_dtoa_r+0x2ba>
 8009a6a:	0038      	movs	r0, r7
 8009a6c:	f000 fcfe 	bl	800a46c <_Balloc>
 8009a70:	9005      	str	r0, [sp, #20]
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d11b      	bne.n	8009aae <_dtoa_r+0x2c2>
 8009a76:	21d5      	movs	r1, #213	; 0xd5
 8009a78:	0002      	movs	r2, r0
 8009a7a:	4b3c      	ldr	r3, [pc, #240]	; (8009b6c <_dtoa_r+0x380>)
 8009a7c:	0049      	lsls	r1, r1, #1
 8009a7e:	e6ca      	b.n	8009816 <_dtoa_r+0x2a>
 8009a80:	2301      	movs	r3, #1
 8009a82:	e7de      	b.n	8009a42 <_dtoa_r+0x256>
 8009a84:	2300      	movs	r3, #0
 8009a86:	940f      	str	r4, [sp, #60]	; 0x3c
 8009a88:	9322      	str	r3, [sp, #136]	; 0x88
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	930c      	str	r3, [sp, #48]	; 0x30
 8009a8e:	9306      	str	r3, [sp, #24]
 8009a90:	2200      	movs	r2, #0
 8009a92:	3313      	adds	r3, #19
 8009a94:	e7d0      	b.n	8009a38 <_dtoa_r+0x24c>
 8009a96:	2301      	movs	r3, #1
 8009a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a9a:	3b02      	subs	r3, #2
 8009a9c:	e7f6      	b.n	8009a8c <_dtoa_r+0x2a0>
 8009a9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8009aa2:	9306      	str	r3, [sp, #24]
 8009aa4:	e7d8      	b.n	8009a58 <_dtoa_r+0x26c>
 8009aa6:	3101      	adds	r1, #1
 8009aa8:	6041      	str	r1, [r0, #4]
 8009aaa:	0052      	lsls	r2, r2, #1
 8009aac:	e7d8      	b.n	8009a60 <_dtoa_r+0x274>
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	9a05      	ldr	r2, [sp, #20]
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	9b06      	ldr	r3, [sp, #24]
 8009ab6:	2b0e      	cmp	r3, #14
 8009ab8:	d900      	bls.n	8009abc <_dtoa_r+0x2d0>
 8009aba:	e0eb      	b.n	8009c94 <_dtoa_r+0x4a8>
 8009abc:	2c00      	cmp	r4, #0
 8009abe:	d100      	bne.n	8009ac2 <_dtoa_r+0x2d6>
 8009ac0:	e0e8      	b.n	8009c94 <_dtoa_r+0x4a8>
 8009ac2:	9b02      	ldr	r3, [sp, #8]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	dd68      	ble.n	8009b9a <_dtoa_r+0x3ae>
 8009ac8:	001a      	movs	r2, r3
 8009aca:	210f      	movs	r1, #15
 8009acc:	4b23      	ldr	r3, [pc, #140]	; (8009b5c <_dtoa_r+0x370>)
 8009ace:	400a      	ands	r2, r1
 8009ad0:	00d2      	lsls	r2, r2, #3
 8009ad2:	189b      	adds	r3, r3, r2
 8009ad4:	681d      	ldr	r5, [r3, #0]
 8009ad6:	685e      	ldr	r6, [r3, #4]
 8009ad8:	9b02      	ldr	r3, [sp, #8]
 8009ada:	111c      	asrs	r4, r3, #4
 8009adc:	2302      	movs	r3, #2
 8009ade:	9310      	str	r3, [sp, #64]	; 0x40
 8009ae0:	9b02      	ldr	r3, [sp, #8]
 8009ae2:	05db      	lsls	r3, r3, #23
 8009ae4:	d50b      	bpl.n	8009afe <_dtoa_r+0x312>
 8009ae6:	4b22      	ldr	r3, [pc, #136]	; (8009b70 <_dtoa_r+0x384>)
 8009ae8:	400c      	ands	r4, r1
 8009aea:	6a1a      	ldr	r2, [r3, #32]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009af0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009af2:	f7f7 ff7b 	bl	80019ec <__aeabi_ddiv>
 8009af6:	2303      	movs	r3, #3
 8009af8:	900a      	str	r0, [sp, #40]	; 0x28
 8009afa:	910b      	str	r1, [sp, #44]	; 0x2c
 8009afc:	9310      	str	r3, [sp, #64]	; 0x40
 8009afe:	4b1c      	ldr	r3, [pc, #112]	; (8009b70 <_dtoa_r+0x384>)
 8009b00:	9307      	str	r3, [sp, #28]
 8009b02:	2c00      	cmp	r4, #0
 8009b04:	d136      	bne.n	8009b74 <_dtoa_r+0x388>
 8009b06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b0a:	002a      	movs	r2, r5
 8009b0c:	0033      	movs	r3, r6
 8009b0e:	f7f7 ff6d 	bl	80019ec <__aeabi_ddiv>
 8009b12:	900a      	str	r0, [sp, #40]	; 0x28
 8009b14:	910b      	str	r1, [sp, #44]	; 0x2c
 8009b16:	e05c      	b.n	8009bd2 <_dtoa_r+0x3e6>
 8009b18:	0800d831 	.word	0x0800d831
 8009b1c:	0800d848 	.word	0x0800d848
 8009b20:	7ff00000 	.word	0x7ff00000
 8009b24:	0000270f 	.word	0x0000270f
 8009b28:	0800d82d 	.word	0x0800d82d
 8009b2c:	0800d830 	.word	0x0800d830
 8009b30:	0800d800 	.word	0x0800d800
 8009b34:	0800d801 	.word	0x0800d801
 8009b38:	3ff00000 	.word	0x3ff00000
 8009b3c:	fffffc01 	.word	0xfffffc01
 8009b40:	3ff80000 	.word	0x3ff80000
 8009b44:	636f4361 	.word	0x636f4361
 8009b48:	3fd287a7 	.word	0x3fd287a7
 8009b4c:	8b60c8b3 	.word	0x8b60c8b3
 8009b50:	3fc68a28 	.word	0x3fc68a28
 8009b54:	509f79fb 	.word	0x509f79fb
 8009b58:	3fd34413 	.word	0x3fd34413
 8009b5c:	0800d940 	.word	0x0800d940
 8009b60:	00000432 	.word	0x00000432
 8009b64:	00000412 	.word	0x00000412
 8009b68:	fe100000 	.word	0xfe100000
 8009b6c:	0800d8a7 	.word	0x0800d8a7
 8009b70:	0800d918 	.word	0x0800d918
 8009b74:	2301      	movs	r3, #1
 8009b76:	421c      	tst	r4, r3
 8009b78:	d00b      	beq.n	8009b92 <_dtoa_r+0x3a6>
 8009b7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b7c:	0028      	movs	r0, r5
 8009b7e:	3301      	adds	r3, #1
 8009b80:	9310      	str	r3, [sp, #64]	; 0x40
 8009b82:	9b07      	ldr	r3, [sp, #28]
 8009b84:	0031      	movs	r1, r6
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	f7f8 fb35 	bl	80021f8 <__aeabi_dmul>
 8009b8e:	0005      	movs	r5, r0
 8009b90:	000e      	movs	r6, r1
 8009b92:	9b07      	ldr	r3, [sp, #28]
 8009b94:	1064      	asrs	r4, r4, #1
 8009b96:	3308      	adds	r3, #8
 8009b98:	e7b2      	b.n	8009b00 <_dtoa_r+0x314>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	9310      	str	r3, [sp, #64]	; 0x40
 8009b9e:	9b02      	ldr	r3, [sp, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d016      	beq.n	8009bd2 <_dtoa_r+0x3e6>
 8009ba4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009ba6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009ba8:	425c      	negs	r4, r3
 8009baa:	230f      	movs	r3, #15
 8009bac:	4ab5      	ldr	r2, [pc, #724]	; (8009e84 <_dtoa_r+0x698>)
 8009bae:	4023      	ands	r3, r4
 8009bb0:	00db      	lsls	r3, r3, #3
 8009bb2:	18d3      	adds	r3, r2, r3
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	f7f8 fb1e 	bl	80021f8 <__aeabi_dmul>
 8009bbc:	2601      	movs	r6, #1
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	900a      	str	r0, [sp, #40]	; 0x28
 8009bc2:	910b      	str	r1, [sp, #44]	; 0x2c
 8009bc4:	4db0      	ldr	r5, [pc, #704]	; (8009e88 <_dtoa_r+0x69c>)
 8009bc6:	1124      	asrs	r4, r4, #4
 8009bc8:	2c00      	cmp	r4, #0
 8009bca:	d000      	beq.n	8009bce <_dtoa_r+0x3e2>
 8009bcc:	e094      	b.n	8009cf8 <_dtoa_r+0x50c>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d19f      	bne.n	8009b12 <_dtoa_r+0x326>
 8009bd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d100      	bne.n	8009bda <_dtoa_r+0x3ee>
 8009bd8:	e09b      	b.n	8009d12 <_dtoa_r+0x526>
 8009bda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009bdc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009bde:	2200      	movs	r2, #0
 8009be0:	0020      	movs	r0, r4
 8009be2:	0029      	movs	r1, r5
 8009be4:	4ba9      	ldr	r3, [pc, #676]	; (8009e8c <_dtoa_r+0x6a0>)
 8009be6:	f7f6 fc33 	bl	8000450 <__aeabi_dcmplt>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d100      	bne.n	8009bf0 <_dtoa_r+0x404>
 8009bee:	e090      	b.n	8009d12 <_dtoa_r+0x526>
 8009bf0:	9b06      	ldr	r3, [sp, #24]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d100      	bne.n	8009bf8 <_dtoa_r+0x40c>
 8009bf6:	e08c      	b.n	8009d12 <_dtoa_r+0x526>
 8009bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	dd46      	ble.n	8009c8c <_dtoa_r+0x4a0>
 8009bfe:	9b02      	ldr	r3, [sp, #8]
 8009c00:	2200      	movs	r2, #0
 8009c02:	0020      	movs	r0, r4
 8009c04:	0029      	movs	r1, r5
 8009c06:	1e5e      	subs	r6, r3, #1
 8009c08:	4ba1      	ldr	r3, [pc, #644]	; (8009e90 <_dtoa_r+0x6a4>)
 8009c0a:	f7f8 faf5 	bl	80021f8 <__aeabi_dmul>
 8009c0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c10:	900a      	str	r0, [sp, #40]	; 0x28
 8009c12:	910b      	str	r1, [sp, #44]	; 0x2c
 8009c14:	3301      	adds	r3, #1
 8009c16:	9310      	str	r3, [sp, #64]	; 0x40
 8009c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c1a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009c1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009c1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009c20:	9307      	str	r3, [sp, #28]
 8009c22:	f7f9 f93b 	bl	8002e9c <__aeabi_i2d>
 8009c26:	0022      	movs	r2, r4
 8009c28:	002b      	movs	r3, r5
 8009c2a:	f7f8 fae5 	bl	80021f8 <__aeabi_dmul>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	4b98      	ldr	r3, [pc, #608]	; (8009e94 <_dtoa_r+0x6a8>)
 8009c32:	f7f7 fb71 	bl	8001318 <__aeabi_dadd>
 8009c36:	9010      	str	r0, [sp, #64]	; 0x40
 8009c38:	9111      	str	r1, [sp, #68]	; 0x44
 8009c3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c3e:	920a      	str	r2, [sp, #40]	; 0x28
 8009c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c42:	4a95      	ldr	r2, [pc, #596]	; (8009e98 <_dtoa_r+0x6ac>)
 8009c44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c46:	4694      	mov	ip, r2
 8009c48:	4463      	add	r3, ip
 8009c4a:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c4e:	9b07      	ldr	r3, [sp, #28]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d161      	bne.n	8009d18 <_dtoa_r+0x52c>
 8009c54:	2200      	movs	r2, #0
 8009c56:	0020      	movs	r0, r4
 8009c58:	0029      	movs	r1, r5
 8009c5a:	4b90      	ldr	r3, [pc, #576]	; (8009e9c <_dtoa_r+0x6b0>)
 8009c5c:	f7f8 fd38 	bl	80026d0 <__aeabi_dsub>
 8009c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c64:	0004      	movs	r4, r0
 8009c66:	000d      	movs	r5, r1
 8009c68:	f7f6 fc06 	bl	8000478 <__aeabi_dcmpgt>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d000      	beq.n	8009c72 <_dtoa_r+0x486>
 8009c70:	e2b5      	b.n	800a1de <_dtoa_r+0x9f2>
 8009c72:	488b      	ldr	r0, [pc, #556]	; (8009ea0 <_dtoa_r+0x6b4>)
 8009c74:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c76:	4684      	mov	ip, r0
 8009c78:	4461      	add	r1, ip
 8009c7a:	000b      	movs	r3, r1
 8009c7c:	0020      	movs	r0, r4
 8009c7e:	0029      	movs	r1, r5
 8009c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c82:	f7f6 fbe5 	bl	8000450 <__aeabi_dcmplt>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d000      	beq.n	8009c8c <_dtoa_r+0x4a0>
 8009c8a:	e2a5      	b.n	800a1d8 <_dtoa_r+0x9ec>
 8009c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009c90:	930a      	str	r3, [sp, #40]	; 0x28
 8009c92:	940b      	str	r4, [sp, #44]	; 0x2c
 8009c94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	da00      	bge.n	8009c9c <_dtoa_r+0x4b0>
 8009c9a:	e171      	b.n	8009f80 <_dtoa_r+0x794>
 8009c9c:	9a02      	ldr	r2, [sp, #8]
 8009c9e:	2a0e      	cmp	r2, #14
 8009ca0:	dd00      	ble.n	8009ca4 <_dtoa_r+0x4b8>
 8009ca2:	e16d      	b.n	8009f80 <_dtoa_r+0x794>
 8009ca4:	4b77      	ldr	r3, [pc, #476]	; (8009e84 <_dtoa_r+0x698>)
 8009ca6:	00d2      	lsls	r2, r2, #3
 8009ca8:	189b      	adds	r3, r3, r2
 8009caa:	685c      	ldr	r4, [r3, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	9308      	str	r3, [sp, #32]
 8009cb0:	9409      	str	r4, [sp, #36]	; 0x24
 8009cb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	db00      	blt.n	8009cba <_dtoa_r+0x4ce>
 8009cb8:	e0f6      	b.n	8009ea8 <_dtoa_r+0x6bc>
 8009cba:	9b06      	ldr	r3, [sp, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	dd00      	ble.n	8009cc2 <_dtoa_r+0x4d6>
 8009cc0:	e0f2      	b.n	8009ea8 <_dtoa_r+0x6bc>
 8009cc2:	d000      	beq.n	8009cc6 <_dtoa_r+0x4da>
 8009cc4:	e288      	b.n	800a1d8 <_dtoa_r+0x9ec>
 8009cc6:	9808      	ldr	r0, [sp, #32]
 8009cc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4b73      	ldr	r3, [pc, #460]	; (8009e9c <_dtoa_r+0x6b0>)
 8009cce:	f7f8 fa93 	bl	80021f8 <__aeabi_dmul>
 8009cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cd6:	f7f6 fbd9 	bl	800048c <__aeabi_dcmpge>
 8009cda:	9e06      	ldr	r6, [sp, #24]
 8009cdc:	0035      	movs	r5, r6
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d000      	beq.n	8009ce4 <_dtoa_r+0x4f8>
 8009ce2:	e25f      	b.n	800a1a4 <_dtoa_r+0x9b8>
 8009ce4:	9b05      	ldr	r3, [sp, #20]
 8009ce6:	9a05      	ldr	r2, [sp, #20]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	9307      	str	r3, [sp, #28]
 8009cec:	2331      	movs	r3, #49	; 0x31
 8009cee:	7013      	strb	r3, [r2, #0]
 8009cf0:	9b02      	ldr	r3, [sp, #8]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	9302      	str	r3, [sp, #8]
 8009cf6:	e25a      	b.n	800a1ae <_dtoa_r+0x9c2>
 8009cf8:	4234      	tst	r4, r6
 8009cfa:	d007      	beq.n	8009d0c <_dtoa_r+0x520>
 8009cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cfe:	3301      	adds	r3, #1
 8009d00:	9310      	str	r3, [sp, #64]	; 0x40
 8009d02:	682a      	ldr	r2, [r5, #0]
 8009d04:	686b      	ldr	r3, [r5, #4]
 8009d06:	f7f8 fa77 	bl	80021f8 <__aeabi_dmul>
 8009d0a:	0033      	movs	r3, r6
 8009d0c:	1064      	asrs	r4, r4, #1
 8009d0e:	3508      	adds	r5, #8
 8009d10:	e75a      	b.n	8009bc8 <_dtoa_r+0x3dc>
 8009d12:	9e02      	ldr	r6, [sp, #8]
 8009d14:	9b06      	ldr	r3, [sp, #24]
 8009d16:	e780      	b.n	8009c1a <_dtoa_r+0x42e>
 8009d18:	9b07      	ldr	r3, [sp, #28]
 8009d1a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d1c:	1e5a      	subs	r2, r3, #1
 8009d1e:	4b59      	ldr	r3, [pc, #356]	; (8009e84 <_dtoa_r+0x698>)
 8009d20:	00d2      	lsls	r2, r2, #3
 8009d22:	189b      	adds	r3, r3, r2
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	d051      	beq.n	8009dd0 <_dtoa_r+0x5e4>
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	495d      	ldr	r1, [pc, #372]	; (8009ea4 <_dtoa_r+0x6b8>)
 8009d30:	f7f7 fe5c 	bl	80019ec <__aeabi_ddiv>
 8009d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d38:	f7f8 fcca 	bl	80026d0 <__aeabi_dsub>
 8009d3c:	9a05      	ldr	r2, [sp, #20]
 8009d3e:	9b05      	ldr	r3, [sp, #20]
 8009d40:	4694      	mov	ip, r2
 8009d42:	9310      	str	r3, [sp, #64]	; 0x40
 8009d44:	9b07      	ldr	r3, [sp, #28]
 8009d46:	900a      	str	r0, [sp, #40]	; 0x28
 8009d48:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d4a:	4463      	add	r3, ip
 8009d4c:	9319      	str	r3, [sp, #100]	; 0x64
 8009d4e:	0029      	movs	r1, r5
 8009d50:	0020      	movs	r0, r4
 8009d52:	f7f9 f86d 	bl	8002e30 <__aeabi_d2iz>
 8009d56:	9017      	str	r0, [sp, #92]	; 0x5c
 8009d58:	f7f9 f8a0 	bl	8002e9c <__aeabi_i2d>
 8009d5c:	0002      	movs	r2, r0
 8009d5e:	000b      	movs	r3, r1
 8009d60:	0020      	movs	r0, r4
 8009d62:	0029      	movs	r1, r5
 8009d64:	f7f8 fcb4 	bl	80026d0 <__aeabi_dsub>
 8009d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	9307      	str	r3, [sp, #28]
 8009d70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d72:	0004      	movs	r4, r0
 8009d74:	3330      	adds	r3, #48	; 0x30
 8009d76:	7013      	strb	r3, [r2, #0]
 8009d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d7c:	000d      	movs	r5, r1
 8009d7e:	f7f6 fb67 	bl	8000450 <__aeabi_dcmplt>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d175      	bne.n	8009e72 <_dtoa_r+0x686>
 8009d86:	0022      	movs	r2, r4
 8009d88:	002b      	movs	r3, r5
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	493f      	ldr	r1, [pc, #252]	; (8009e8c <_dtoa_r+0x6a0>)
 8009d8e:	f7f8 fc9f 	bl	80026d0 <__aeabi_dsub>
 8009d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d96:	f7f6 fb5b 	bl	8000450 <__aeabi_dcmplt>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d000      	beq.n	8009da0 <_dtoa_r+0x5b4>
 8009d9e:	e0d1      	b.n	8009f44 <_dtoa_r+0x758>
 8009da0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009da2:	9a07      	ldr	r2, [sp, #28]
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d100      	bne.n	8009daa <_dtoa_r+0x5be>
 8009da8:	e770      	b.n	8009c8c <_dtoa_r+0x4a0>
 8009daa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009dac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dae:	2200      	movs	r2, #0
 8009db0:	4b37      	ldr	r3, [pc, #220]	; (8009e90 <_dtoa_r+0x6a4>)
 8009db2:	f7f8 fa21 	bl	80021f8 <__aeabi_dmul>
 8009db6:	4b36      	ldr	r3, [pc, #216]	; (8009e90 <_dtoa_r+0x6a4>)
 8009db8:	900a      	str	r0, [sp, #40]	; 0x28
 8009dba:	910b      	str	r1, [sp, #44]	; 0x2c
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	0020      	movs	r0, r4
 8009dc0:	0029      	movs	r1, r5
 8009dc2:	f7f8 fa19 	bl	80021f8 <__aeabi_dmul>
 8009dc6:	9b07      	ldr	r3, [sp, #28]
 8009dc8:	0004      	movs	r4, r0
 8009dca:	000d      	movs	r5, r1
 8009dcc:	9310      	str	r3, [sp, #64]	; 0x40
 8009dce:	e7be      	b.n	8009d4e <_dtoa_r+0x562>
 8009dd0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009dd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dd4:	f7f8 fa10 	bl	80021f8 <__aeabi_dmul>
 8009dd8:	9a05      	ldr	r2, [sp, #20]
 8009dda:	9b05      	ldr	r3, [sp, #20]
 8009ddc:	4694      	mov	ip, r2
 8009dde:	930a      	str	r3, [sp, #40]	; 0x28
 8009de0:	9b07      	ldr	r3, [sp, #28]
 8009de2:	9010      	str	r0, [sp, #64]	; 0x40
 8009de4:	9111      	str	r1, [sp, #68]	; 0x44
 8009de6:	4463      	add	r3, ip
 8009de8:	9319      	str	r3, [sp, #100]	; 0x64
 8009dea:	0029      	movs	r1, r5
 8009dec:	0020      	movs	r0, r4
 8009dee:	f7f9 f81f 	bl	8002e30 <__aeabi_d2iz>
 8009df2:	9017      	str	r0, [sp, #92]	; 0x5c
 8009df4:	f7f9 f852 	bl	8002e9c <__aeabi_i2d>
 8009df8:	0002      	movs	r2, r0
 8009dfa:	000b      	movs	r3, r1
 8009dfc:	0020      	movs	r0, r4
 8009dfe:	0029      	movs	r1, r5
 8009e00:	f7f8 fc66 	bl	80026d0 <__aeabi_dsub>
 8009e04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e08:	3330      	adds	r3, #48	; 0x30
 8009e0a:	7013      	strb	r3, [r2, #0]
 8009e0c:	0013      	movs	r3, r2
 8009e0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e10:	3301      	adds	r3, #1
 8009e12:	0004      	movs	r4, r0
 8009e14:	000d      	movs	r5, r1
 8009e16:	930a      	str	r3, [sp, #40]	; 0x28
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d12c      	bne.n	8009e76 <_dtoa_r+0x68a>
 8009e1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009e1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009e20:	9a05      	ldr	r2, [sp, #20]
 8009e22:	9b07      	ldr	r3, [sp, #28]
 8009e24:	4694      	mov	ip, r2
 8009e26:	4463      	add	r3, ip
 8009e28:	2200      	movs	r2, #0
 8009e2a:	9307      	str	r3, [sp, #28]
 8009e2c:	4b1d      	ldr	r3, [pc, #116]	; (8009ea4 <_dtoa_r+0x6b8>)
 8009e2e:	f7f7 fa73 	bl	8001318 <__aeabi_dadd>
 8009e32:	0002      	movs	r2, r0
 8009e34:	000b      	movs	r3, r1
 8009e36:	0020      	movs	r0, r4
 8009e38:	0029      	movs	r1, r5
 8009e3a:	f7f6 fb1d 	bl	8000478 <__aeabi_dcmpgt>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d000      	beq.n	8009e44 <_dtoa_r+0x658>
 8009e42:	e07f      	b.n	8009f44 <_dtoa_r+0x758>
 8009e44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e48:	2000      	movs	r0, #0
 8009e4a:	4916      	ldr	r1, [pc, #88]	; (8009ea4 <_dtoa_r+0x6b8>)
 8009e4c:	f7f8 fc40 	bl	80026d0 <__aeabi_dsub>
 8009e50:	0002      	movs	r2, r0
 8009e52:	000b      	movs	r3, r1
 8009e54:	0020      	movs	r0, r4
 8009e56:	0029      	movs	r1, r5
 8009e58:	f7f6 fafa 	bl	8000450 <__aeabi_dcmplt>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d100      	bne.n	8009e62 <_dtoa_r+0x676>
 8009e60:	e714      	b.n	8009c8c <_dtoa_r+0x4a0>
 8009e62:	9b07      	ldr	r3, [sp, #28]
 8009e64:	001a      	movs	r2, r3
 8009e66:	3a01      	subs	r2, #1
 8009e68:	9207      	str	r2, [sp, #28]
 8009e6a:	7812      	ldrb	r2, [r2, #0]
 8009e6c:	2a30      	cmp	r2, #48	; 0x30
 8009e6e:	d0f8      	beq.n	8009e62 <_dtoa_r+0x676>
 8009e70:	9307      	str	r3, [sp, #28]
 8009e72:	9602      	str	r6, [sp, #8]
 8009e74:	e054      	b.n	8009f20 <_dtoa_r+0x734>
 8009e76:	2200      	movs	r2, #0
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <_dtoa_r+0x6a4>)
 8009e7a:	f7f8 f9bd 	bl	80021f8 <__aeabi_dmul>
 8009e7e:	0004      	movs	r4, r0
 8009e80:	000d      	movs	r5, r1
 8009e82:	e7b2      	b.n	8009dea <_dtoa_r+0x5fe>
 8009e84:	0800d940 	.word	0x0800d940
 8009e88:	0800d918 	.word	0x0800d918
 8009e8c:	3ff00000 	.word	0x3ff00000
 8009e90:	40240000 	.word	0x40240000
 8009e94:	401c0000 	.word	0x401c0000
 8009e98:	fcc00000 	.word	0xfcc00000
 8009e9c:	40140000 	.word	0x40140000
 8009ea0:	7cc00000 	.word	0x7cc00000
 8009ea4:	3fe00000 	.word	0x3fe00000
 8009ea8:	9b06      	ldr	r3, [sp, #24]
 8009eaa:	9e05      	ldr	r6, [sp, #20]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	199b      	adds	r3, r3, r6
 8009eb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009eb2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8009eb6:	9a08      	ldr	r2, [sp, #32]
 8009eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eba:	0020      	movs	r0, r4
 8009ebc:	0029      	movs	r1, r5
 8009ebe:	f7f7 fd95 	bl	80019ec <__aeabi_ddiv>
 8009ec2:	f7f8 ffb5 	bl	8002e30 <__aeabi_d2iz>
 8009ec6:	9006      	str	r0, [sp, #24]
 8009ec8:	f7f8 ffe8 	bl	8002e9c <__aeabi_i2d>
 8009ecc:	9a08      	ldr	r2, [sp, #32]
 8009ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed0:	f7f8 f992 	bl	80021f8 <__aeabi_dmul>
 8009ed4:	0002      	movs	r2, r0
 8009ed6:	000b      	movs	r3, r1
 8009ed8:	0020      	movs	r0, r4
 8009eda:	0029      	movs	r1, r5
 8009edc:	f7f8 fbf8 	bl	80026d0 <__aeabi_dsub>
 8009ee0:	0033      	movs	r3, r6
 8009ee2:	9a06      	ldr	r2, [sp, #24]
 8009ee4:	3601      	adds	r6, #1
 8009ee6:	3230      	adds	r2, #48	; 0x30
 8009ee8:	701a      	strb	r2, [r3, #0]
 8009eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eec:	9607      	str	r6, [sp, #28]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d139      	bne.n	8009f66 <_dtoa_r+0x77a>
 8009ef2:	0002      	movs	r2, r0
 8009ef4:	000b      	movs	r3, r1
 8009ef6:	f7f7 fa0f 	bl	8001318 <__aeabi_dadd>
 8009efa:	9a08      	ldr	r2, [sp, #32]
 8009efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efe:	0004      	movs	r4, r0
 8009f00:	000d      	movs	r5, r1
 8009f02:	f7f6 fab9 	bl	8000478 <__aeabi_dcmpgt>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d11b      	bne.n	8009f42 <_dtoa_r+0x756>
 8009f0a:	9a08      	ldr	r2, [sp, #32]
 8009f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0e:	0020      	movs	r0, r4
 8009f10:	0029      	movs	r1, r5
 8009f12:	f7f6 fa97 	bl	8000444 <__aeabi_dcmpeq>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d002      	beq.n	8009f20 <_dtoa_r+0x734>
 8009f1a:	9b06      	ldr	r3, [sp, #24]
 8009f1c:	07db      	lsls	r3, r3, #31
 8009f1e:	d410      	bmi.n	8009f42 <_dtoa_r+0x756>
 8009f20:	0038      	movs	r0, r7
 8009f22:	9904      	ldr	r1, [sp, #16]
 8009f24:	f000 fae6 	bl	800a4f4 <_Bfree>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	9a07      	ldr	r2, [sp, #28]
 8009f2c:	9802      	ldr	r0, [sp, #8]
 8009f2e:	7013      	strb	r3, [r2, #0]
 8009f30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009f32:	3001      	adds	r0, #1
 8009f34:	6018      	str	r0, [r3, #0]
 8009f36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d100      	bne.n	8009f3e <_dtoa_r+0x752>
 8009f3c:	e4a3      	b.n	8009886 <_dtoa_r+0x9a>
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	e4a1      	b.n	8009886 <_dtoa_r+0x9a>
 8009f42:	9e02      	ldr	r6, [sp, #8]
 8009f44:	9b07      	ldr	r3, [sp, #28]
 8009f46:	9307      	str	r3, [sp, #28]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	781a      	ldrb	r2, [r3, #0]
 8009f4c:	2a39      	cmp	r2, #57	; 0x39
 8009f4e:	d106      	bne.n	8009f5e <_dtoa_r+0x772>
 8009f50:	9a05      	ldr	r2, [sp, #20]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d1f7      	bne.n	8009f46 <_dtoa_r+0x75a>
 8009f56:	2230      	movs	r2, #48	; 0x30
 8009f58:	9905      	ldr	r1, [sp, #20]
 8009f5a:	3601      	adds	r6, #1
 8009f5c:	700a      	strb	r2, [r1, #0]
 8009f5e:	781a      	ldrb	r2, [r3, #0]
 8009f60:	3201      	adds	r2, #1
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	e785      	b.n	8009e72 <_dtoa_r+0x686>
 8009f66:	2200      	movs	r2, #0
 8009f68:	4bad      	ldr	r3, [pc, #692]	; (800a220 <_dtoa_r+0xa34>)
 8009f6a:	f7f8 f945 	bl	80021f8 <__aeabi_dmul>
 8009f6e:	2200      	movs	r2, #0
 8009f70:	2300      	movs	r3, #0
 8009f72:	0004      	movs	r4, r0
 8009f74:	000d      	movs	r5, r1
 8009f76:	f7f6 fa65 	bl	8000444 <__aeabi_dcmpeq>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d09b      	beq.n	8009eb6 <_dtoa_r+0x6ca>
 8009f7e:	e7cf      	b.n	8009f20 <_dtoa_r+0x734>
 8009f80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f82:	2a00      	cmp	r2, #0
 8009f84:	d100      	bne.n	8009f88 <_dtoa_r+0x79c>
 8009f86:	e082      	b.n	800a08e <_dtoa_r+0x8a2>
 8009f88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f8a:	2a01      	cmp	r2, #1
 8009f8c:	dc66      	bgt.n	800a05c <_dtoa_r+0x870>
 8009f8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f90:	2a00      	cmp	r2, #0
 8009f92:	d05f      	beq.n	800a054 <_dtoa_r+0x868>
 8009f94:	4aa3      	ldr	r2, [pc, #652]	; (800a224 <_dtoa_r+0xa38>)
 8009f96:	189b      	adds	r3, r3, r2
 8009f98:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009f9a:	9c08      	ldr	r4, [sp, #32]
 8009f9c:	9a08      	ldr	r2, [sp, #32]
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	18d2      	adds	r2, r2, r3
 8009fa2:	9208      	str	r2, [sp, #32]
 8009fa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fa6:	0038      	movs	r0, r7
 8009fa8:	18d3      	adds	r3, r2, r3
 8009faa:	930d      	str	r3, [sp, #52]	; 0x34
 8009fac:	f000 fb52 	bl	800a654 <__i2b>
 8009fb0:	0005      	movs	r5, r0
 8009fb2:	2c00      	cmp	r4, #0
 8009fb4:	dd0e      	ble.n	8009fd4 <_dtoa_r+0x7e8>
 8009fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	dd0b      	ble.n	8009fd4 <_dtoa_r+0x7e8>
 8009fbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fbe:	0023      	movs	r3, r4
 8009fc0:	4294      	cmp	r4, r2
 8009fc2:	dd00      	ble.n	8009fc6 <_dtoa_r+0x7da>
 8009fc4:	0013      	movs	r3, r2
 8009fc6:	9a08      	ldr	r2, [sp, #32]
 8009fc8:	1ae4      	subs	r4, r4, r3
 8009fca:	1ad2      	subs	r2, r2, r3
 8009fcc:	9208      	str	r2, [sp, #32]
 8009fce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	930d      	str	r3, [sp, #52]	; 0x34
 8009fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d01f      	beq.n	800a01a <_dtoa_r+0x82e>
 8009fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d05a      	beq.n	800a096 <_dtoa_r+0x8aa>
 8009fe0:	2e00      	cmp	r6, #0
 8009fe2:	dd11      	ble.n	800a008 <_dtoa_r+0x81c>
 8009fe4:	0029      	movs	r1, r5
 8009fe6:	0032      	movs	r2, r6
 8009fe8:	0038      	movs	r0, r7
 8009fea:	f000 fbf9 	bl	800a7e0 <__pow5mult>
 8009fee:	9a04      	ldr	r2, [sp, #16]
 8009ff0:	0001      	movs	r1, r0
 8009ff2:	0005      	movs	r5, r0
 8009ff4:	0038      	movs	r0, r7
 8009ff6:	f000 fb43 	bl	800a680 <__multiply>
 8009ffa:	9904      	ldr	r1, [sp, #16]
 8009ffc:	9007      	str	r0, [sp, #28]
 8009ffe:	0038      	movs	r0, r7
 800a000:	f000 fa78 	bl	800a4f4 <_Bfree>
 800a004:	9b07      	ldr	r3, [sp, #28]
 800a006:	9304      	str	r3, [sp, #16]
 800a008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a00a:	1b9a      	subs	r2, r3, r6
 800a00c:	42b3      	cmp	r3, r6
 800a00e:	d004      	beq.n	800a01a <_dtoa_r+0x82e>
 800a010:	0038      	movs	r0, r7
 800a012:	9904      	ldr	r1, [sp, #16]
 800a014:	f000 fbe4 	bl	800a7e0 <__pow5mult>
 800a018:	9004      	str	r0, [sp, #16]
 800a01a:	2101      	movs	r1, #1
 800a01c:	0038      	movs	r0, r7
 800a01e:	f000 fb19 	bl	800a654 <__i2b>
 800a022:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a024:	0006      	movs	r6, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	dd37      	ble.n	800a09a <_dtoa_r+0x8ae>
 800a02a:	001a      	movs	r2, r3
 800a02c:	0001      	movs	r1, r0
 800a02e:	0038      	movs	r0, r7
 800a030:	f000 fbd6 	bl	800a7e0 <__pow5mult>
 800a034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a036:	0006      	movs	r6, r0
 800a038:	2b01      	cmp	r3, #1
 800a03a:	dd33      	ble.n	800a0a4 <_dtoa_r+0x8b8>
 800a03c:	2300      	movs	r3, #0
 800a03e:	9307      	str	r3, [sp, #28]
 800a040:	6933      	ldr	r3, [r6, #16]
 800a042:	3303      	adds	r3, #3
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	18f3      	adds	r3, r6, r3
 800a048:	6858      	ldr	r0, [r3, #4]
 800a04a:	f000 fabb 	bl	800a5c4 <__hi0bits>
 800a04e:	2320      	movs	r3, #32
 800a050:	1a18      	subs	r0, r3, r0
 800a052:	e03f      	b.n	800a0d4 <_dtoa_r+0x8e8>
 800a054:	2336      	movs	r3, #54	; 0x36
 800a056:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a058:	1a9b      	subs	r3, r3, r2
 800a05a:	e79d      	b.n	8009f98 <_dtoa_r+0x7ac>
 800a05c:	9b06      	ldr	r3, [sp, #24]
 800a05e:	1e5e      	subs	r6, r3, #1
 800a060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a062:	42b3      	cmp	r3, r6
 800a064:	db08      	blt.n	800a078 <_dtoa_r+0x88c>
 800a066:	1b9e      	subs	r6, r3, r6
 800a068:	9b06      	ldr	r3, [sp, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	da0c      	bge.n	800a088 <_dtoa_r+0x89c>
 800a06e:	9b08      	ldr	r3, [sp, #32]
 800a070:	9a06      	ldr	r2, [sp, #24]
 800a072:	1a9c      	subs	r4, r3, r2
 800a074:	2300      	movs	r3, #0
 800a076:	e791      	b.n	8009f9c <_dtoa_r+0x7b0>
 800a078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a07a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a07c:	1af3      	subs	r3, r6, r3
 800a07e:	18d3      	adds	r3, r2, r3
 800a080:	960e      	str	r6, [sp, #56]	; 0x38
 800a082:	9314      	str	r3, [sp, #80]	; 0x50
 800a084:	2600      	movs	r6, #0
 800a086:	e7ef      	b.n	800a068 <_dtoa_r+0x87c>
 800a088:	9c08      	ldr	r4, [sp, #32]
 800a08a:	9b06      	ldr	r3, [sp, #24]
 800a08c:	e786      	b.n	8009f9c <_dtoa_r+0x7b0>
 800a08e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a090:	9c08      	ldr	r4, [sp, #32]
 800a092:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a094:	e78d      	b.n	8009fb2 <_dtoa_r+0x7c6>
 800a096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a098:	e7ba      	b.n	800a010 <_dtoa_r+0x824>
 800a09a:	2300      	movs	r3, #0
 800a09c:	9307      	str	r3, [sp, #28]
 800a09e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	dc13      	bgt.n	800a0cc <_dtoa_r+0x8e0>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	9307      	str	r3, [sp, #28]
 800a0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10e      	bne.n	800a0cc <_dtoa_r+0x8e0>
 800a0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0b0:	031b      	lsls	r3, r3, #12
 800a0b2:	d10b      	bne.n	800a0cc <_dtoa_r+0x8e0>
 800a0b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a0b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0b8:	4213      	tst	r3, r2
 800a0ba:	d007      	beq.n	800a0cc <_dtoa_r+0x8e0>
 800a0bc:	9b08      	ldr	r3, [sp, #32]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	9308      	str	r3, [sp, #32]
 800a0c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	930d      	str	r3, [sp, #52]	; 0x34
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	9307      	str	r3, [sp, #28]
 800a0cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1b5      	bne.n	800a040 <_dtoa_r+0x854>
 800a0d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0d6:	221f      	movs	r2, #31
 800a0d8:	1818      	adds	r0, r3, r0
 800a0da:	0003      	movs	r3, r0
 800a0dc:	4013      	ands	r3, r2
 800a0de:	4210      	tst	r0, r2
 800a0e0:	d046      	beq.n	800a170 <_dtoa_r+0x984>
 800a0e2:	3201      	adds	r2, #1
 800a0e4:	1ad2      	subs	r2, r2, r3
 800a0e6:	2a04      	cmp	r2, #4
 800a0e8:	dd3f      	ble.n	800a16a <_dtoa_r+0x97e>
 800a0ea:	221c      	movs	r2, #28
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	9a08      	ldr	r2, [sp, #32]
 800a0f0:	18e4      	adds	r4, r4, r3
 800a0f2:	18d2      	adds	r2, r2, r3
 800a0f4:	9208      	str	r2, [sp, #32]
 800a0f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0f8:	18d3      	adds	r3, r2, r3
 800a0fa:	930d      	str	r3, [sp, #52]	; 0x34
 800a0fc:	9b08      	ldr	r3, [sp, #32]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	dd05      	ble.n	800a10e <_dtoa_r+0x922>
 800a102:	001a      	movs	r2, r3
 800a104:	0038      	movs	r0, r7
 800a106:	9904      	ldr	r1, [sp, #16]
 800a108:	f000 fbc6 	bl	800a898 <__lshift>
 800a10c:	9004      	str	r0, [sp, #16]
 800a10e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a110:	2b00      	cmp	r3, #0
 800a112:	dd05      	ble.n	800a120 <_dtoa_r+0x934>
 800a114:	0031      	movs	r1, r6
 800a116:	001a      	movs	r2, r3
 800a118:	0038      	movs	r0, r7
 800a11a:	f000 fbbd 	bl	800a898 <__lshift>
 800a11e:	0006      	movs	r6, r0
 800a120:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a122:	2b00      	cmp	r3, #0
 800a124:	d026      	beq.n	800a174 <_dtoa_r+0x988>
 800a126:	0031      	movs	r1, r6
 800a128:	9804      	ldr	r0, [sp, #16]
 800a12a:	f000 fc25 	bl	800a978 <__mcmp>
 800a12e:	2800      	cmp	r0, #0
 800a130:	da20      	bge.n	800a174 <_dtoa_r+0x988>
 800a132:	9b02      	ldr	r3, [sp, #8]
 800a134:	220a      	movs	r2, #10
 800a136:	3b01      	subs	r3, #1
 800a138:	9302      	str	r3, [sp, #8]
 800a13a:	0038      	movs	r0, r7
 800a13c:	2300      	movs	r3, #0
 800a13e:	9904      	ldr	r1, [sp, #16]
 800a140:	f000 f9fc 	bl	800a53c <__multadd>
 800a144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a146:	9004      	str	r0, [sp, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d100      	bne.n	800a14e <_dtoa_r+0x962>
 800a14c:	e160      	b.n	800a410 <_dtoa_r+0xc24>
 800a14e:	2300      	movs	r3, #0
 800a150:	0029      	movs	r1, r5
 800a152:	220a      	movs	r2, #10
 800a154:	0038      	movs	r0, r7
 800a156:	f000 f9f1 	bl	800a53c <__multadd>
 800a15a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a15c:	0005      	movs	r5, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	dc47      	bgt.n	800a1f2 <_dtoa_r+0xa06>
 800a162:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a164:	2b02      	cmp	r3, #2
 800a166:	dc0d      	bgt.n	800a184 <_dtoa_r+0x998>
 800a168:	e043      	b.n	800a1f2 <_dtoa_r+0xa06>
 800a16a:	2a04      	cmp	r2, #4
 800a16c:	d0c6      	beq.n	800a0fc <_dtoa_r+0x910>
 800a16e:	0013      	movs	r3, r2
 800a170:	331c      	adds	r3, #28
 800a172:	e7bc      	b.n	800a0ee <_dtoa_r+0x902>
 800a174:	9b06      	ldr	r3, [sp, #24]
 800a176:	2b00      	cmp	r3, #0
 800a178:	dc35      	bgt.n	800a1e6 <_dtoa_r+0x9fa>
 800a17a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	dd32      	ble.n	800a1e6 <_dtoa_r+0x9fa>
 800a180:	9b06      	ldr	r3, [sp, #24]
 800a182:	930c      	str	r3, [sp, #48]	; 0x30
 800a184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10c      	bne.n	800a1a4 <_dtoa_r+0x9b8>
 800a18a:	0031      	movs	r1, r6
 800a18c:	2205      	movs	r2, #5
 800a18e:	0038      	movs	r0, r7
 800a190:	f000 f9d4 	bl	800a53c <__multadd>
 800a194:	0006      	movs	r6, r0
 800a196:	0001      	movs	r1, r0
 800a198:	9804      	ldr	r0, [sp, #16]
 800a19a:	f000 fbed 	bl	800a978 <__mcmp>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	dd00      	ble.n	800a1a4 <_dtoa_r+0x9b8>
 800a1a2:	e59f      	b.n	8009ce4 <_dtoa_r+0x4f8>
 800a1a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1a6:	43db      	mvns	r3, r3
 800a1a8:	9302      	str	r3, [sp, #8]
 800a1aa:	9b05      	ldr	r3, [sp, #20]
 800a1ac:	9307      	str	r3, [sp, #28]
 800a1ae:	2400      	movs	r4, #0
 800a1b0:	0031      	movs	r1, r6
 800a1b2:	0038      	movs	r0, r7
 800a1b4:	f000 f99e 	bl	800a4f4 <_Bfree>
 800a1b8:	2d00      	cmp	r5, #0
 800a1ba:	d100      	bne.n	800a1be <_dtoa_r+0x9d2>
 800a1bc:	e6b0      	b.n	8009f20 <_dtoa_r+0x734>
 800a1be:	2c00      	cmp	r4, #0
 800a1c0:	d005      	beq.n	800a1ce <_dtoa_r+0x9e2>
 800a1c2:	42ac      	cmp	r4, r5
 800a1c4:	d003      	beq.n	800a1ce <_dtoa_r+0x9e2>
 800a1c6:	0021      	movs	r1, r4
 800a1c8:	0038      	movs	r0, r7
 800a1ca:	f000 f993 	bl	800a4f4 <_Bfree>
 800a1ce:	0029      	movs	r1, r5
 800a1d0:	0038      	movs	r0, r7
 800a1d2:	f000 f98f 	bl	800a4f4 <_Bfree>
 800a1d6:	e6a3      	b.n	8009f20 <_dtoa_r+0x734>
 800a1d8:	2600      	movs	r6, #0
 800a1da:	0035      	movs	r5, r6
 800a1dc:	e7e2      	b.n	800a1a4 <_dtoa_r+0x9b8>
 800a1de:	9602      	str	r6, [sp, #8]
 800a1e0:	9e07      	ldr	r6, [sp, #28]
 800a1e2:	0035      	movs	r5, r6
 800a1e4:	e57e      	b.n	8009ce4 <_dtoa_r+0x4f8>
 800a1e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d100      	bne.n	800a1ee <_dtoa_r+0xa02>
 800a1ec:	e0c8      	b.n	800a380 <_dtoa_r+0xb94>
 800a1ee:	9b06      	ldr	r3, [sp, #24]
 800a1f0:	930c      	str	r3, [sp, #48]	; 0x30
 800a1f2:	2c00      	cmp	r4, #0
 800a1f4:	dd05      	ble.n	800a202 <_dtoa_r+0xa16>
 800a1f6:	0029      	movs	r1, r5
 800a1f8:	0022      	movs	r2, r4
 800a1fa:	0038      	movs	r0, r7
 800a1fc:	f000 fb4c 	bl	800a898 <__lshift>
 800a200:	0005      	movs	r5, r0
 800a202:	9b07      	ldr	r3, [sp, #28]
 800a204:	0028      	movs	r0, r5
 800a206:	2b00      	cmp	r3, #0
 800a208:	d01f      	beq.n	800a24a <_dtoa_r+0xa5e>
 800a20a:	0038      	movs	r0, r7
 800a20c:	6869      	ldr	r1, [r5, #4]
 800a20e:	f000 f92d 	bl	800a46c <_Balloc>
 800a212:	1e04      	subs	r4, r0, #0
 800a214:	d10c      	bne.n	800a230 <_dtoa_r+0xa44>
 800a216:	0002      	movs	r2, r0
 800a218:	4b03      	ldr	r3, [pc, #12]	; (800a228 <_dtoa_r+0xa3c>)
 800a21a:	4904      	ldr	r1, [pc, #16]	; (800a22c <_dtoa_r+0xa40>)
 800a21c:	f7ff fafb 	bl	8009816 <_dtoa_r+0x2a>
 800a220:	40240000 	.word	0x40240000
 800a224:	00000433 	.word	0x00000433
 800a228:	0800d8a7 	.word	0x0800d8a7
 800a22c:	000002ea 	.word	0x000002ea
 800a230:	0029      	movs	r1, r5
 800a232:	692b      	ldr	r3, [r5, #16]
 800a234:	310c      	adds	r1, #12
 800a236:	1c9a      	adds	r2, r3, #2
 800a238:	0092      	lsls	r2, r2, #2
 800a23a:	300c      	adds	r0, #12
 800a23c:	f000 f90d 	bl	800a45a <memcpy>
 800a240:	2201      	movs	r2, #1
 800a242:	0021      	movs	r1, r4
 800a244:	0038      	movs	r0, r7
 800a246:	f000 fb27 	bl	800a898 <__lshift>
 800a24a:	002c      	movs	r4, r5
 800a24c:	0005      	movs	r5, r0
 800a24e:	9b05      	ldr	r3, [sp, #20]
 800a250:	9308      	str	r3, [sp, #32]
 800a252:	0031      	movs	r1, r6
 800a254:	9804      	ldr	r0, [sp, #16]
 800a256:	f7ff fa3d 	bl	80096d4 <quorem>
 800a25a:	0003      	movs	r3, r0
 800a25c:	0021      	movs	r1, r4
 800a25e:	3330      	adds	r3, #48	; 0x30
 800a260:	900e      	str	r0, [sp, #56]	; 0x38
 800a262:	9804      	ldr	r0, [sp, #16]
 800a264:	9306      	str	r3, [sp, #24]
 800a266:	f000 fb87 	bl	800a978 <__mcmp>
 800a26a:	002a      	movs	r2, r5
 800a26c:	900f      	str	r0, [sp, #60]	; 0x3c
 800a26e:	0031      	movs	r1, r6
 800a270:	0038      	movs	r0, r7
 800a272:	f000 fb9d 	bl	800a9b0 <__mdiff>
 800a276:	68c3      	ldr	r3, [r0, #12]
 800a278:	9007      	str	r0, [sp, #28]
 800a27a:	9310      	str	r3, [sp, #64]	; 0x40
 800a27c:	2301      	movs	r3, #1
 800a27e:	930d      	str	r3, [sp, #52]	; 0x34
 800a280:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a282:	2b00      	cmp	r3, #0
 800a284:	d104      	bne.n	800a290 <_dtoa_r+0xaa4>
 800a286:	0001      	movs	r1, r0
 800a288:	9804      	ldr	r0, [sp, #16]
 800a28a:	f000 fb75 	bl	800a978 <__mcmp>
 800a28e:	900d      	str	r0, [sp, #52]	; 0x34
 800a290:	0038      	movs	r0, r7
 800a292:	9907      	ldr	r1, [sp, #28]
 800a294:	f000 f92e 	bl	800a4f4 <_Bfree>
 800a298:	2301      	movs	r3, #1
 800a29a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a29c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a29e:	4018      	ands	r0, r3
 800a2a0:	9b08      	ldr	r3, [sp, #32]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	9307      	str	r3, [sp, #28]
 800a2a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	4303      	orrs	r3, r0
 800a2ac:	d10c      	bne.n	800a2c8 <_dtoa_r+0xadc>
 800a2ae:	9b06      	ldr	r3, [sp, #24]
 800a2b0:	2b39      	cmp	r3, #57	; 0x39
 800a2b2:	d025      	beq.n	800a300 <_dtoa_r+0xb14>
 800a2b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	dd02      	ble.n	800a2c0 <_dtoa_r+0xad4>
 800a2ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2bc:	3331      	adds	r3, #49	; 0x31
 800a2be:	9306      	str	r3, [sp, #24]
 800a2c0:	9b08      	ldr	r3, [sp, #32]
 800a2c2:	9a06      	ldr	r2, [sp, #24]
 800a2c4:	701a      	strb	r2, [r3, #0]
 800a2c6:	e773      	b.n	800a1b0 <_dtoa_r+0x9c4>
 800a2c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	db03      	blt.n	800a2d6 <_dtoa_r+0xaea>
 800a2ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	4303      	orrs	r3, r0
 800a2d4:	d11f      	bne.n	800a316 <_dtoa_r+0xb2a>
 800a2d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	ddf1      	ble.n	800a2c0 <_dtoa_r+0xad4>
 800a2dc:	9904      	ldr	r1, [sp, #16]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	0038      	movs	r0, r7
 800a2e2:	f000 fad9 	bl	800a898 <__lshift>
 800a2e6:	0031      	movs	r1, r6
 800a2e8:	9004      	str	r0, [sp, #16]
 800a2ea:	f000 fb45 	bl	800a978 <__mcmp>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	dc03      	bgt.n	800a2fa <_dtoa_r+0xb0e>
 800a2f2:	d1e5      	bne.n	800a2c0 <_dtoa_r+0xad4>
 800a2f4:	9b06      	ldr	r3, [sp, #24]
 800a2f6:	07db      	lsls	r3, r3, #31
 800a2f8:	d5e2      	bpl.n	800a2c0 <_dtoa_r+0xad4>
 800a2fa:	9b06      	ldr	r3, [sp, #24]
 800a2fc:	2b39      	cmp	r3, #57	; 0x39
 800a2fe:	d1dc      	bne.n	800a2ba <_dtoa_r+0xace>
 800a300:	2339      	movs	r3, #57	; 0x39
 800a302:	9a08      	ldr	r2, [sp, #32]
 800a304:	7013      	strb	r3, [r2, #0]
 800a306:	9b07      	ldr	r3, [sp, #28]
 800a308:	9307      	str	r3, [sp, #28]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	781a      	ldrb	r2, [r3, #0]
 800a30e:	2a39      	cmp	r2, #57	; 0x39
 800a310:	d06c      	beq.n	800a3ec <_dtoa_r+0xc00>
 800a312:	3201      	adds	r2, #1
 800a314:	e7d6      	b.n	800a2c4 <_dtoa_r+0xad8>
 800a316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dd07      	ble.n	800a32c <_dtoa_r+0xb40>
 800a31c:	9b06      	ldr	r3, [sp, #24]
 800a31e:	2b39      	cmp	r3, #57	; 0x39
 800a320:	d0ee      	beq.n	800a300 <_dtoa_r+0xb14>
 800a322:	9b06      	ldr	r3, [sp, #24]
 800a324:	9a08      	ldr	r2, [sp, #32]
 800a326:	3301      	adds	r3, #1
 800a328:	7013      	strb	r3, [r2, #0]
 800a32a:	e741      	b.n	800a1b0 <_dtoa_r+0x9c4>
 800a32c:	9b08      	ldr	r3, [sp, #32]
 800a32e:	9a06      	ldr	r2, [sp, #24]
 800a330:	701a      	strb	r2, [r3, #0]
 800a332:	2301      	movs	r3, #1
 800a334:	9a05      	ldr	r2, [sp, #20]
 800a336:	1a9b      	subs	r3, r3, r2
 800a338:	9a08      	ldr	r2, [sp, #32]
 800a33a:	189b      	adds	r3, r3, r2
 800a33c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a33e:	429a      	cmp	r2, r3
 800a340:	d03e      	beq.n	800a3c0 <_dtoa_r+0xbd4>
 800a342:	2300      	movs	r3, #0
 800a344:	220a      	movs	r2, #10
 800a346:	9904      	ldr	r1, [sp, #16]
 800a348:	0038      	movs	r0, r7
 800a34a:	f000 f8f7 	bl	800a53c <__multadd>
 800a34e:	2300      	movs	r3, #0
 800a350:	9004      	str	r0, [sp, #16]
 800a352:	220a      	movs	r2, #10
 800a354:	0021      	movs	r1, r4
 800a356:	0038      	movs	r0, r7
 800a358:	42ac      	cmp	r4, r5
 800a35a:	d106      	bne.n	800a36a <_dtoa_r+0xb7e>
 800a35c:	f000 f8ee 	bl	800a53c <__multadd>
 800a360:	0004      	movs	r4, r0
 800a362:	0005      	movs	r5, r0
 800a364:	9b07      	ldr	r3, [sp, #28]
 800a366:	9308      	str	r3, [sp, #32]
 800a368:	e773      	b.n	800a252 <_dtoa_r+0xa66>
 800a36a:	f000 f8e7 	bl	800a53c <__multadd>
 800a36e:	0029      	movs	r1, r5
 800a370:	0004      	movs	r4, r0
 800a372:	2300      	movs	r3, #0
 800a374:	220a      	movs	r2, #10
 800a376:	0038      	movs	r0, r7
 800a378:	f000 f8e0 	bl	800a53c <__multadd>
 800a37c:	0005      	movs	r5, r0
 800a37e:	e7f1      	b.n	800a364 <_dtoa_r+0xb78>
 800a380:	9b06      	ldr	r3, [sp, #24]
 800a382:	930c      	str	r3, [sp, #48]	; 0x30
 800a384:	2400      	movs	r4, #0
 800a386:	0031      	movs	r1, r6
 800a388:	9804      	ldr	r0, [sp, #16]
 800a38a:	f7ff f9a3 	bl	80096d4 <quorem>
 800a38e:	9b05      	ldr	r3, [sp, #20]
 800a390:	3030      	adds	r0, #48	; 0x30
 800a392:	5518      	strb	r0, [r3, r4]
 800a394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a396:	3401      	adds	r4, #1
 800a398:	9006      	str	r0, [sp, #24]
 800a39a:	42a3      	cmp	r3, r4
 800a39c:	dd07      	ble.n	800a3ae <_dtoa_r+0xbc2>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	220a      	movs	r2, #10
 800a3a2:	0038      	movs	r0, r7
 800a3a4:	9904      	ldr	r1, [sp, #16]
 800a3a6:	f000 f8c9 	bl	800a53c <__multadd>
 800a3aa:	9004      	str	r0, [sp, #16]
 800a3ac:	e7eb      	b.n	800a386 <_dtoa_r+0xb9a>
 800a3ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3b0:	2001      	movs	r0, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dd00      	ble.n	800a3b8 <_dtoa_r+0xbcc>
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	2400      	movs	r4, #0
 800a3ba:	9b05      	ldr	r3, [sp, #20]
 800a3bc:	181b      	adds	r3, r3, r0
 800a3be:	9307      	str	r3, [sp, #28]
 800a3c0:	9904      	ldr	r1, [sp, #16]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	0038      	movs	r0, r7
 800a3c6:	f000 fa67 	bl	800a898 <__lshift>
 800a3ca:	0031      	movs	r1, r6
 800a3cc:	9004      	str	r0, [sp, #16]
 800a3ce:	f000 fad3 	bl	800a978 <__mcmp>
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	dc97      	bgt.n	800a306 <_dtoa_r+0xb1a>
 800a3d6:	d102      	bne.n	800a3de <_dtoa_r+0xbf2>
 800a3d8:	9b06      	ldr	r3, [sp, #24]
 800a3da:	07db      	lsls	r3, r3, #31
 800a3dc:	d493      	bmi.n	800a306 <_dtoa_r+0xb1a>
 800a3de:	9b07      	ldr	r3, [sp, #28]
 800a3e0:	9307      	str	r3, [sp, #28]
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	781a      	ldrb	r2, [r3, #0]
 800a3e6:	2a30      	cmp	r2, #48	; 0x30
 800a3e8:	d0fa      	beq.n	800a3e0 <_dtoa_r+0xbf4>
 800a3ea:	e6e1      	b.n	800a1b0 <_dtoa_r+0x9c4>
 800a3ec:	9a05      	ldr	r2, [sp, #20]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d18a      	bne.n	800a308 <_dtoa_r+0xb1c>
 800a3f2:	9b02      	ldr	r3, [sp, #8]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	9302      	str	r3, [sp, #8]
 800a3f8:	2331      	movs	r3, #49	; 0x31
 800a3fa:	e795      	b.n	800a328 <_dtoa_r+0xb3c>
 800a3fc:	4b08      	ldr	r3, [pc, #32]	; (800a420 <_dtoa_r+0xc34>)
 800a3fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a400:	9305      	str	r3, [sp, #20]
 800a402:	4b08      	ldr	r3, [pc, #32]	; (800a424 <_dtoa_r+0xc38>)
 800a404:	2a00      	cmp	r2, #0
 800a406:	d001      	beq.n	800a40c <_dtoa_r+0xc20>
 800a408:	f7ff fa3b 	bl	8009882 <_dtoa_r+0x96>
 800a40c:	f7ff fa3b 	bl	8009886 <_dtoa_r+0x9a>
 800a410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a412:	2b00      	cmp	r3, #0
 800a414:	dcb6      	bgt.n	800a384 <_dtoa_r+0xb98>
 800a416:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a418:	2b02      	cmp	r3, #2
 800a41a:	dd00      	ble.n	800a41e <_dtoa_r+0xc32>
 800a41c:	e6b2      	b.n	800a184 <_dtoa_r+0x998>
 800a41e:	e7b1      	b.n	800a384 <_dtoa_r+0xb98>
 800a420:	0800d824 	.word	0x0800d824
 800a424:	0800d82c 	.word	0x0800d82c

0800a428 <_localeconv_r>:
 800a428:	4800      	ldr	r0, [pc, #0]	; (800a42c <_localeconv_r+0x4>)
 800a42a:	4770      	bx	lr
 800a42c:	20000168 	.word	0x20000168

0800a430 <malloc>:
 800a430:	b510      	push	{r4, lr}
 800a432:	4b03      	ldr	r3, [pc, #12]	; (800a440 <malloc+0x10>)
 800a434:	0001      	movs	r1, r0
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	f000 fc0e 	bl	800ac58 <_malloc_r>
 800a43c:	bd10      	pop	{r4, pc}
 800a43e:	46c0      	nop			; (mov r8, r8)
 800a440:	20000014 	.word	0x20000014

0800a444 <memchr>:
 800a444:	b2c9      	uxtb	r1, r1
 800a446:	1882      	adds	r2, r0, r2
 800a448:	4290      	cmp	r0, r2
 800a44a:	d101      	bne.n	800a450 <memchr+0xc>
 800a44c:	2000      	movs	r0, #0
 800a44e:	4770      	bx	lr
 800a450:	7803      	ldrb	r3, [r0, #0]
 800a452:	428b      	cmp	r3, r1
 800a454:	d0fb      	beq.n	800a44e <memchr+0xa>
 800a456:	3001      	adds	r0, #1
 800a458:	e7f6      	b.n	800a448 <memchr+0x4>

0800a45a <memcpy>:
 800a45a:	2300      	movs	r3, #0
 800a45c:	b510      	push	{r4, lr}
 800a45e:	429a      	cmp	r2, r3
 800a460:	d100      	bne.n	800a464 <memcpy+0xa>
 800a462:	bd10      	pop	{r4, pc}
 800a464:	5ccc      	ldrb	r4, [r1, r3]
 800a466:	54c4      	strb	r4, [r0, r3]
 800a468:	3301      	adds	r3, #1
 800a46a:	e7f8      	b.n	800a45e <memcpy+0x4>

0800a46c <_Balloc>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a470:	0006      	movs	r6, r0
 800a472:	000c      	movs	r4, r1
 800a474:	2d00      	cmp	r5, #0
 800a476:	d10e      	bne.n	800a496 <_Balloc+0x2a>
 800a478:	2010      	movs	r0, #16
 800a47a:	f7ff ffd9 	bl	800a430 <malloc>
 800a47e:	1e02      	subs	r2, r0, #0
 800a480:	6270      	str	r0, [r6, #36]	; 0x24
 800a482:	d104      	bne.n	800a48e <_Balloc+0x22>
 800a484:	2166      	movs	r1, #102	; 0x66
 800a486:	4b19      	ldr	r3, [pc, #100]	; (800a4ec <_Balloc+0x80>)
 800a488:	4819      	ldr	r0, [pc, #100]	; (800a4f0 <_Balloc+0x84>)
 800a48a:	f000 fdb7 	bl	800affc <__assert_func>
 800a48e:	6045      	str	r5, [r0, #4]
 800a490:	6085      	str	r5, [r0, #8]
 800a492:	6005      	str	r5, [r0, #0]
 800a494:	60c5      	str	r5, [r0, #12]
 800a496:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a498:	68eb      	ldr	r3, [r5, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d013      	beq.n	800a4c6 <_Balloc+0x5a>
 800a49e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a4a0:	00a2      	lsls	r2, r4, #2
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	189b      	adds	r3, r3, r2
 800a4a6:	6818      	ldr	r0, [r3, #0]
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d118      	bne.n	800a4de <_Balloc+0x72>
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	000d      	movs	r5, r1
 800a4b0:	40a5      	lsls	r5, r4
 800a4b2:	1d6a      	adds	r2, r5, #5
 800a4b4:	0030      	movs	r0, r6
 800a4b6:	0092      	lsls	r2, r2, #2
 800a4b8:	f000 fb76 	bl	800aba8 <_calloc_r>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d00c      	beq.n	800a4da <_Balloc+0x6e>
 800a4c0:	6044      	str	r4, [r0, #4]
 800a4c2:	6085      	str	r5, [r0, #8]
 800a4c4:	e00d      	b.n	800a4e2 <_Balloc+0x76>
 800a4c6:	2221      	movs	r2, #33	; 0x21
 800a4c8:	2104      	movs	r1, #4
 800a4ca:	0030      	movs	r0, r6
 800a4cc:	f000 fb6c 	bl	800aba8 <_calloc_r>
 800a4d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a4d2:	60e8      	str	r0, [r5, #12]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e1      	bne.n	800a49e <_Balloc+0x32>
 800a4da:	2000      	movs	r0, #0
 800a4dc:	bd70      	pop	{r4, r5, r6, pc}
 800a4de:	6802      	ldr	r2, [r0, #0]
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	6103      	str	r3, [r0, #16]
 800a4e6:	60c3      	str	r3, [r0, #12]
 800a4e8:	e7f8      	b.n	800a4dc <_Balloc+0x70>
 800a4ea:	46c0      	nop			; (mov r8, r8)
 800a4ec:	0800d831 	.word	0x0800d831
 800a4f0:	0800d8b8 	.word	0x0800d8b8

0800a4f4 <_Bfree>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4f8:	0005      	movs	r5, r0
 800a4fa:	000c      	movs	r4, r1
 800a4fc:	2e00      	cmp	r6, #0
 800a4fe:	d10e      	bne.n	800a51e <_Bfree+0x2a>
 800a500:	2010      	movs	r0, #16
 800a502:	f7ff ff95 	bl	800a430 <malloc>
 800a506:	1e02      	subs	r2, r0, #0
 800a508:	6268      	str	r0, [r5, #36]	; 0x24
 800a50a:	d104      	bne.n	800a516 <_Bfree+0x22>
 800a50c:	218a      	movs	r1, #138	; 0x8a
 800a50e:	4b09      	ldr	r3, [pc, #36]	; (800a534 <_Bfree+0x40>)
 800a510:	4809      	ldr	r0, [pc, #36]	; (800a538 <_Bfree+0x44>)
 800a512:	f000 fd73 	bl	800affc <__assert_func>
 800a516:	6046      	str	r6, [r0, #4]
 800a518:	6086      	str	r6, [r0, #8]
 800a51a:	6006      	str	r6, [r0, #0]
 800a51c:	60c6      	str	r6, [r0, #12]
 800a51e:	2c00      	cmp	r4, #0
 800a520:	d007      	beq.n	800a532 <_Bfree+0x3e>
 800a522:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a524:	6862      	ldr	r2, [r4, #4]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	0092      	lsls	r2, r2, #2
 800a52a:	189b      	adds	r3, r3, r2
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	6022      	str	r2, [r4, #0]
 800a530:	601c      	str	r4, [r3, #0]
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	0800d831 	.word	0x0800d831
 800a538:	0800d8b8 	.word	0x0800d8b8

0800a53c <__multadd>:
 800a53c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a53e:	000e      	movs	r6, r1
 800a540:	9001      	str	r0, [sp, #4]
 800a542:	000c      	movs	r4, r1
 800a544:	001d      	movs	r5, r3
 800a546:	2000      	movs	r0, #0
 800a548:	690f      	ldr	r7, [r1, #16]
 800a54a:	3614      	adds	r6, #20
 800a54c:	6833      	ldr	r3, [r6, #0]
 800a54e:	3001      	adds	r0, #1
 800a550:	b299      	uxth	r1, r3
 800a552:	4351      	muls	r1, r2
 800a554:	0c1b      	lsrs	r3, r3, #16
 800a556:	4353      	muls	r3, r2
 800a558:	1949      	adds	r1, r1, r5
 800a55a:	0c0d      	lsrs	r5, r1, #16
 800a55c:	195b      	adds	r3, r3, r5
 800a55e:	0c1d      	lsrs	r5, r3, #16
 800a560:	b289      	uxth	r1, r1
 800a562:	041b      	lsls	r3, r3, #16
 800a564:	185b      	adds	r3, r3, r1
 800a566:	c608      	stmia	r6!, {r3}
 800a568:	4287      	cmp	r7, r0
 800a56a:	dcef      	bgt.n	800a54c <__multadd+0x10>
 800a56c:	2d00      	cmp	r5, #0
 800a56e:	d022      	beq.n	800a5b6 <__multadd+0x7a>
 800a570:	68a3      	ldr	r3, [r4, #8]
 800a572:	42bb      	cmp	r3, r7
 800a574:	dc19      	bgt.n	800a5aa <__multadd+0x6e>
 800a576:	6863      	ldr	r3, [r4, #4]
 800a578:	9801      	ldr	r0, [sp, #4]
 800a57a:	1c59      	adds	r1, r3, #1
 800a57c:	f7ff ff76 	bl	800a46c <_Balloc>
 800a580:	1e06      	subs	r6, r0, #0
 800a582:	d105      	bne.n	800a590 <__multadd+0x54>
 800a584:	0002      	movs	r2, r0
 800a586:	21b5      	movs	r1, #181	; 0xb5
 800a588:	4b0c      	ldr	r3, [pc, #48]	; (800a5bc <__multadd+0x80>)
 800a58a:	480d      	ldr	r0, [pc, #52]	; (800a5c0 <__multadd+0x84>)
 800a58c:	f000 fd36 	bl	800affc <__assert_func>
 800a590:	0021      	movs	r1, r4
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	310c      	adds	r1, #12
 800a596:	1c9a      	adds	r2, r3, #2
 800a598:	0092      	lsls	r2, r2, #2
 800a59a:	300c      	adds	r0, #12
 800a59c:	f7ff ff5d 	bl	800a45a <memcpy>
 800a5a0:	0021      	movs	r1, r4
 800a5a2:	9801      	ldr	r0, [sp, #4]
 800a5a4:	f7ff ffa6 	bl	800a4f4 <_Bfree>
 800a5a8:	0034      	movs	r4, r6
 800a5aa:	1d3b      	adds	r3, r7, #4
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	18e3      	adds	r3, r4, r3
 800a5b0:	605d      	str	r5, [r3, #4]
 800a5b2:	1c7b      	adds	r3, r7, #1
 800a5b4:	6123      	str	r3, [r4, #16]
 800a5b6:	0020      	movs	r0, r4
 800a5b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5ba:	46c0      	nop			; (mov r8, r8)
 800a5bc:	0800d8a7 	.word	0x0800d8a7
 800a5c0:	0800d8b8 	.word	0x0800d8b8

0800a5c4 <__hi0bits>:
 800a5c4:	0003      	movs	r3, r0
 800a5c6:	0c02      	lsrs	r2, r0, #16
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	4282      	cmp	r2, r0
 800a5cc:	d101      	bne.n	800a5d2 <__hi0bits+0xe>
 800a5ce:	041b      	lsls	r3, r3, #16
 800a5d0:	3010      	adds	r0, #16
 800a5d2:	0e1a      	lsrs	r2, r3, #24
 800a5d4:	d101      	bne.n	800a5da <__hi0bits+0x16>
 800a5d6:	3008      	adds	r0, #8
 800a5d8:	021b      	lsls	r3, r3, #8
 800a5da:	0f1a      	lsrs	r2, r3, #28
 800a5dc:	d101      	bne.n	800a5e2 <__hi0bits+0x1e>
 800a5de:	3004      	adds	r0, #4
 800a5e0:	011b      	lsls	r3, r3, #4
 800a5e2:	0f9a      	lsrs	r2, r3, #30
 800a5e4:	d101      	bne.n	800a5ea <__hi0bits+0x26>
 800a5e6:	3002      	adds	r0, #2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	db03      	blt.n	800a5f6 <__hi0bits+0x32>
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	005b      	lsls	r3, r3, #1
 800a5f2:	d400      	bmi.n	800a5f6 <__hi0bits+0x32>
 800a5f4:	2020      	movs	r0, #32
 800a5f6:	4770      	bx	lr

0800a5f8 <__lo0bits>:
 800a5f8:	6803      	ldr	r3, [r0, #0]
 800a5fa:	0002      	movs	r2, r0
 800a5fc:	2107      	movs	r1, #7
 800a5fe:	0018      	movs	r0, r3
 800a600:	4008      	ands	r0, r1
 800a602:	420b      	tst	r3, r1
 800a604:	d00d      	beq.n	800a622 <__lo0bits+0x2a>
 800a606:	3906      	subs	r1, #6
 800a608:	2000      	movs	r0, #0
 800a60a:	420b      	tst	r3, r1
 800a60c:	d105      	bne.n	800a61a <__lo0bits+0x22>
 800a60e:	3002      	adds	r0, #2
 800a610:	4203      	tst	r3, r0
 800a612:	d003      	beq.n	800a61c <__lo0bits+0x24>
 800a614:	40cb      	lsrs	r3, r1
 800a616:	0008      	movs	r0, r1
 800a618:	6013      	str	r3, [r2, #0]
 800a61a:	4770      	bx	lr
 800a61c:	089b      	lsrs	r3, r3, #2
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	e7fb      	b.n	800a61a <__lo0bits+0x22>
 800a622:	b299      	uxth	r1, r3
 800a624:	2900      	cmp	r1, #0
 800a626:	d101      	bne.n	800a62c <__lo0bits+0x34>
 800a628:	2010      	movs	r0, #16
 800a62a:	0c1b      	lsrs	r3, r3, #16
 800a62c:	b2d9      	uxtb	r1, r3
 800a62e:	2900      	cmp	r1, #0
 800a630:	d101      	bne.n	800a636 <__lo0bits+0x3e>
 800a632:	3008      	adds	r0, #8
 800a634:	0a1b      	lsrs	r3, r3, #8
 800a636:	0719      	lsls	r1, r3, #28
 800a638:	d101      	bne.n	800a63e <__lo0bits+0x46>
 800a63a:	3004      	adds	r0, #4
 800a63c:	091b      	lsrs	r3, r3, #4
 800a63e:	0799      	lsls	r1, r3, #30
 800a640:	d101      	bne.n	800a646 <__lo0bits+0x4e>
 800a642:	3002      	adds	r0, #2
 800a644:	089b      	lsrs	r3, r3, #2
 800a646:	07d9      	lsls	r1, r3, #31
 800a648:	d4e9      	bmi.n	800a61e <__lo0bits+0x26>
 800a64a:	3001      	adds	r0, #1
 800a64c:	085b      	lsrs	r3, r3, #1
 800a64e:	d1e6      	bne.n	800a61e <__lo0bits+0x26>
 800a650:	2020      	movs	r0, #32
 800a652:	e7e2      	b.n	800a61a <__lo0bits+0x22>

0800a654 <__i2b>:
 800a654:	b510      	push	{r4, lr}
 800a656:	000c      	movs	r4, r1
 800a658:	2101      	movs	r1, #1
 800a65a:	f7ff ff07 	bl	800a46c <_Balloc>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d106      	bne.n	800a670 <__i2b+0x1c>
 800a662:	21a0      	movs	r1, #160	; 0xa0
 800a664:	0002      	movs	r2, r0
 800a666:	4b04      	ldr	r3, [pc, #16]	; (800a678 <__i2b+0x24>)
 800a668:	4804      	ldr	r0, [pc, #16]	; (800a67c <__i2b+0x28>)
 800a66a:	0049      	lsls	r1, r1, #1
 800a66c:	f000 fcc6 	bl	800affc <__assert_func>
 800a670:	2301      	movs	r3, #1
 800a672:	6144      	str	r4, [r0, #20]
 800a674:	6103      	str	r3, [r0, #16]
 800a676:	bd10      	pop	{r4, pc}
 800a678:	0800d8a7 	.word	0x0800d8a7
 800a67c:	0800d8b8 	.word	0x0800d8b8

0800a680 <__multiply>:
 800a680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a682:	690b      	ldr	r3, [r1, #16]
 800a684:	0014      	movs	r4, r2
 800a686:	6912      	ldr	r2, [r2, #16]
 800a688:	000d      	movs	r5, r1
 800a68a:	b089      	sub	sp, #36	; 0x24
 800a68c:	4293      	cmp	r3, r2
 800a68e:	da01      	bge.n	800a694 <__multiply+0x14>
 800a690:	0025      	movs	r5, r4
 800a692:	000c      	movs	r4, r1
 800a694:	692f      	ldr	r7, [r5, #16]
 800a696:	6926      	ldr	r6, [r4, #16]
 800a698:	6869      	ldr	r1, [r5, #4]
 800a69a:	19bb      	adds	r3, r7, r6
 800a69c:	9302      	str	r3, [sp, #8]
 800a69e:	68ab      	ldr	r3, [r5, #8]
 800a6a0:	19ba      	adds	r2, r7, r6
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	da00      	bge.n	800a6a8 <__multiply+0x28>
 800a6a6:	3101      	adds	r1, #1
 800a6a8:	f7ff fee0 	bl	800a46c <_Balloc>
 800a6ac:	9001      	str	r0, [sp, #4]
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d106      	bne.n	800a6c0 <__multiply+0x40>
 800a6b2:	215e      	movs	r1, #94	; 0x5e
 800a6b4:	0002      	movs	r2, r0
 800a6b6:	4b48      	ldr	r3, [pc, #288]	; (800a7d8 <__multiply+0x158>)
 800a6b8:	4848      	ldr	r0, [pc, #288]	; (800a7dc <__multiply+0x15c>)
 800a6ba:	31ff      	adds	r1, #255	; 0xff
 800a6bc:	f000 fc9e 	bl	800affc <__assert_func>
 800a6c0:	9b01      	ldr	r3, [sp, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	3314      	adds	r3, #20
 800a6c6:	469c      	mov	ip, r3
 800a6c8:	19bb      	adds	r3, r7, r6
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4463      	add	r3, ip
 800a6ce:	9303      	str	r3, [sp, #12]
 800a6d0:	4663      	mov	r3, ip
 800a6d2:	9903      	ldr	r1, [sp, #12]
 800a6d4:	428b      	cmp	r3, r1
 800a6d6:	d32c      	bcc.n	800a732 <__multiply+0xb2>
 800a6d8:	002b      	movs	r3, r5
 800a6da:	0022      	movs	r2, r4
 800a6dc:	3314      	adds	r3, #20
 800a6de:	00bf      	lsls	r7, r7, #2
 800a6e0:	3214      	adds	r2, #20
 800a6e2:	9306      	str	r3, [sp, #24]
 800a6e4:	00b6      	lsls	r6, r6, #2
 800a6e6:	19db      	adds	r3, r3, r7
 800a6e8:	9304      	str	r3, [sp, #16]
 800a6ea:	1993      	adds	r3, r2, r6
 800a6ec:	9307      	str	r3, [sp, #28]
 800a6ee:	2304      	movs	r3, #4
 800a6f0:	9305      	str	r3, [sp, #20]
 800a6f2:	002b      	movs	r3, r5
 800a6f4:	9904      	ldr	r1, [sp, #16]
 800a6f6:	3315      	adds	r3, #21
 800a6f8:	9200      	str	r2, [sp, #0]
 800a6fa:	4299      	cmp	r1, r3
 800a6fc:	d305      	bcc.n	800a70a <__multiply+0x8a>
 800a6fe:	1b4b      	subs	r3, r1, r5
 800a700:	3b15      	subs	r3, #21
 800a702:	089b      	lsrs	r3, r3, #2
 800a704:	3301      	adds	r3, #1
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	9305      	str	r3, [sp, #20]
 800a70a:	9b07      	ldr	r3, [sp, #28]
 800a70c:	9a00      	ldr	r2, [sp, #0]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d311      	bcc.n	800a736 <__multiply+0xb6>
 800a712:	9b02      	ldr	r3, [sp, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	dd06      	ble.n	800a726 <__multiply+0xa6>
 800a718:	9b03      	ldr	r3, [sp, #12]
 800a71a:	3b04      	subs	r3, #4
 800a71c:	9303      	str	r3, [sp, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d054      	beq.n	800a7d0 <__multiply+0x150>
 800a726:	9b01      	ldr	r3, [sp, #4]
 800a728:	9a02      	ldr	r2, [sp, #8]
 800a72a:	0018      	movs	r0, r3
 800a72c:	611a      	str	r2, [r3, #16]
 800a72e:	b009      	add	sp, #36	; 0x24
 800a730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a732:	c304      	stmia	r3!, {r2}
 800a734:	e7cd      	b.n	800a6d2 <__multiply+0x52>
 800a736:	9b00      	ldr	r3, [sp, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	b298      	uxth	r0, r3
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d01c      	beq.n	800a77a <__multiply+0xfa>
 800a740:	4667      	mov	r7, ip
 800a742:	2400      	movs	r4, #0
 800a744:	9e06      	ldr	r6, [sp, #24]
 800a746:	ce02      	ldmia	r6!, {r1}
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	b28b      	uxth	r3, r1
 800a74c:	4343      	muls	r3, r0
 800a74e:	0c09      	lsrs	r1, r1, #16
 800a750:	4341      	muls	r1, r0
 800a752:	b292      	uxth	r2, r2
 800a754:	189b      	adds	r3, r3, r2
 800a756:	191b      	adds	r3, r3, r4
 800a758:	000c      	movs	r4, r1
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	0c11      	lsrs	r1, r2, #16
 800a75e:	1861      	adds	r1, r4, r1
 800a760:	0c1c      	lsrs	r4, r3, #16
 800a762:	1909      	adds	r1, r1, r4
 800a764:	0c0c      	lsrs	r4, r1, #16
 800a766:	b29b      	uxth	r3, r3
 800a768:	0409      	lsls	r1, r1, #16
 800a76a:	430b      	orrs	r3, r1
 800a76c:	c708      	stmia	r7!, {r3}
 800a76e:	9b04      	ldr	r3, [sp, #16]
 800a770:	42b3      	cmp	r3, r6
 800a772:	d8e8      	bhi.n	800a746 <__multiply+0xc6>
 800a774:	4663      	mov	r3, ip
 800a776:	9a05      	ldr	r2, [sp, #20]
 800a778:	509c      	str	r4, [r3, r2]
 800a77a:	9b00      	ldr	r3, [sp, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	0c1e      	lsrs	r6, r3, #16
 800a780:	d020      	beq.n	800a7c4 <__multiply+0x144>
 800a782:	4663      	mov	r3, ip
 800a784:	002c      	movs	r4, r5
 800a786:	4660      	mov	r0, ip
 800a788:	2700      	movs	r7, #0
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	3414      	adds	r4, #20
 800a78e:	6822      	ldr	r2, [r4, #0]
 800a790:	b29b      	uxth	r3, r3
 800a792:	b291      	uxth	r1, r2
 800a794:	4371      	muls	r1, r6
 800a796:	6802      	ldr	r2, [r0, #0]
 800a798:	0c12      	lsrs	r2, r2, #16
 800a79a:	1889      	adds	r1, r1, r2
 800a79c:	19cf      	adds	r7, r1, r7
 800a79e:	0439      	lsls	r1, r7, #16
 800a7a0:	430b      	orrs	r3, r1
 800a7a2:	6003      	str	r3, [r0, #0]
 800a7a4:	cc02      	ldmia	r4!, {r1}
 800a7a6:	6843      	ldr	r3, [r0, #4]
 800a7a8:	0c09      	lsrs	r1, r1, #16
 800a7aa:	4371      	muls	r1, r6
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	0c3f      	lsrs	r7, r7, #16
 800a7b0:	18cb      	adds	r3, r1, r3
 800a7b2:	9a04      	ldr	r2, [sp, #16]
 800a7b4:	19db      	adds	r3, r3, r7
 800a7b6:	0c1f      	lsrs	r7, r3, #16
 800a7b8:	3004      	adds	r0, #4
 800a7ba:	42a2      	cmp	r2, r4
 800a7bc:	d8e7      	bhi.n	800a78e <__multiply+0x10e>
 800a7be:	4662      	mov	r2, ip
 800a7c0:	9905      	ldr	r1, [sp, #20]
 800a7c2:	5053      	str	r3, [r2, r1]
 800a7c4:	9b00      	ldr	r3, [sp, #0]
 800a7c6:	3304      	adds	r3, #4
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	2304      	movs	r3, #4
 800a7cc:	449c      	add	ip, r3
 800a7ce:	e79c      	b.n	800a70a <__multiply+0x8a>
 800a7d0:	9b02      	ldr	r3, [sp, #8]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	9302      	str	r3, [sp, #8]
 800a7d6:	e79c      	b.n	800a712 <__multiply+0x92>
 800a7d8:	0800d8a7 	.word	0x0800d8a7
 800a7dc:	0800d8b8 	.word	0x0800d8b8

0800a7e0 <__pow5mult>:
 800a7e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	0015      	movs	r5, r2
 800a7e6:	0007      	movs	r7, r0
 800a7e8:	000e      	movs	r6, r1
 800a7ea:	401a      	ands	r2, r3
 800a7ec:	421d      	tst	r5, r3
 800a7ee:	d008      	beq.n	800a802 <__pow5mult+0x22>
 800a7f0:	4925      	ldr	r1, [pc, #148]	; (800a888 <__pow5mult+0xa8>)
 800a7f2:	3a01      	subs	r2, #1
 800a7f4:	0092      	lsls	r2, r2, #2
 800a7f6:	5852      	ldr	r2, [r2, r1]
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	0031      	movs	r1, r6
 800a7fc:	f7ff fe9e 	bl	800a53c <__multadd>
 800a800:	0006      	movs	r6, r0
 800a802:	10ad      	asrs	r5, r5, #2
 800a804:	d03d      	beq.n	800a882 <__pow5mult+0xa2>
 800a806:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a808:	2c00      	cmp	r4, #0
 800a80a:	d10f      	bne.n	800a82c <__pow5mult+0x4c>
 800a80c:	2010      	movs	r0, #16
 800a80e:	f7ff fe0f 	bl	800a430 <malloc>
 800a812:	1e02      	subs	r2, r0, #0
 800a814:	6278      	str	r0, [r7, #36]	; 0x24
 800a816:	d105      	bne.n	800a824 <__pow5mult+0x44>
 800a818:	21d7      	movs	r1, #215	; 0xd7
 800a81a:	4b1c      	ldr	r3, [pc, #112]	; (800a88c <__pow5mult+0xac>)
 800a81c:	481c      	ldr	r0, [pc, #112]	; (800a890 <__pow5mult+0xb0>)
 800a81e:	0049      	lsls	r1, r1, #1
 800a820:	f000 fbec 	bl	800affc <__assert_func>
 800a824:	6044      	str	r4, [r0, #4]
 800a826:	6084      	str	r4, [r0, #8]
 800a828:	6004      	str	r4, [r0, #0]
 800a82a:	60c4      	str	r4, [r0, #12]
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	689c      	ldr	r4, [r3, #8]
 800a830:	9301      	str	r3, [sp, #4]
 800a832:	2c00      	cmp	r4, #0
 800a834:	d108      	bne.n	800a848 <__pow5mult+0x68>
 800a836:	0038      	movs	r0, r7
 800a838:	4916      	ldr	r1, [pc, #88]	; (800a894 <__pow5mult+0xb4>)
 800a83a:	f7ff ff0b 	bl	800a654 <__i2b>
 800a83e:	9b01      	ldr	r3, [sp, #4]
 800a840:	0004      	movs	r4, r0
 800a842:	6098      	str	r0, [r3, #8]
 800a844:	2300      	movs	r3, #0
 800a846:	6003      	str	r3, [r0, #0]
 800a848:	2301      	movs	r3, #1
 800a84a:	421d      	tst	r5, r3
 800a84c:	d00a      	beq.n	800a864 <__pow5mult+0x84>
 800a84e:	0031      	movs	r1, r6
 800a850:	0022      	movs	r2, r4
 800a852:	0038      	movs	r0, r7
 800a854:	f7ff ff14 	bl	800a680 <__multiply>
 800a858:	0031      	movs	r1, r6
 800a85a:	9001      	str	r0, [sp, #4]
 800a85c:	0038      	movs	r0, r7
 800a85e:	f7ff fe49 	bl	800a4f4 <_Bfree>
 800a862:	9e01      	ldr	r6, [sp, #4]
 800a864:	106d      	asrs	r5, r5, #1
 800a866:	d00c      	beq.n	800a882 <__pow5mult+0xa2>
 800a868:	6820      	ldr	r0, [r4, #0]
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d107      	bne.n	800a87e <__pow5mult+0x9e>
 800a86e:	0022      	movs	r2, r4
 800a870:	0021      	movs	r1, r4
 800a872:	0038      	movs	r0, r7
 800a874:	f7ff ff04 	bl	800a680 <__multiply>
 800a878:	2300      	movs	r3, #0
 800a87a:	6020      	str	r0, [r4, #0]
 800a87c:	6003      	str	r3, [r0, #0]
 800a87e:	0004      	movs	r4, r0
 800a880:	e7e2      	b.n	800a848 <__pow5mult+0x68>
 800a882:	0030      	movs	r0, r6
 800a884:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a886:	46c0      	nop			; (mov r8, r8)
 800a888:	0800da08 	.word	0x0800da08
 800a88c:	0800d831 	.word	0x0800d831
 800a890:	0800d8b8 	.word	0x0800d8b8
 800a894:	00000271 	.word	0x00000271

0800a898 <__lshift>:
 800a898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89a:	000c      	movs	r4, r1
 800a89c:	0017      	movs	r7, r2
 800a89e:	6923      	ldr	r3, [r4, #16]
 800a8a0:	1155      	asrs	r5, r2, #5
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	18eb      	adds	r3, r5, r3
 800a8a6:	9302      	str	r3, [sp, #8]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	9301      	str	r3, [sp, #4]
 800a8ac:	6849      	ldr	r1, [r1, #4]
 800a8ae:	68a3      	ldr	r3, [r4, #8]
 800a8b0:	9004      	str	r0, [sp, #16]
 800a8b2:	9a01      	ldr	r2, [sp, #4]
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	db11      	blt.n	800a8dc <__lshift+0x44>
 800a8b8:	9804      	ldr	r0, [sp, #16]
 800a8ba:	f7ff fdd7 	bl	800a46c <_Balloc>
 800a8be:	0002      	movs	r2, r0
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	3214      	adds	r2, #20
 800a8c4:	0006      	movs	r6, r0
 800a8c6:	0011      	movs	r1, r2
 800a8c8:	9203      	str	r2, [sp, #12]
 800a8ca:	4298      	cmp	r0, r3
 800a8cc:	d10d      	bne.n	800a8ea <__lshift+0x52>
 800a8ce:	21da      	movs	r1, #218	; 0xda
 800a8d0:	0002      	movs	r2, r0
 800a8d2:	4b27      	ldr	r3, [pc, #156]	; (800a970 <__lshift+0xd8>)
 800a8d4:	4827      	ldr	r0, [pc, #156]	; (800a974 <__lshift+0xdc>)
 800a8d6:	31ff      	adds	r1, #255	; 0xff
 800a8d8:	f000 fb90 	bl	800affc <__assert_func>
 800a8dc:	3101      	adds	r1, #1
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	e7e7      	b.n	800a8b2 <__lshift+0x1a>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	0098      	lsls	r0, r3, #2
 800a8e6:	500a      	str	r2, [r1, r0]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	42ab      	cmp	r3, r5
 800a8ec:	dbf9      	blt.n	800a8e2 <__lshift+0x4a>
 800a8ee:	43eb      	mvns	r3, r5
 800a8f0:	17db      	asrs	r3, r3, #31
 800a8f2:	401d      	ands	r5, r3
 800a8f4:	9b03      	ldr	r3, [sp, #12]
 800a8f6:	00ad      	lsls	r5, r5, #2
 800a8f8:	211f      	movs	r1, #31
 800a8fa:	0038      	movs	r0, r7
 800a8fc:	195d      	adds	r5, r3, r5
 800a8fe:	0023      	movs	r3, r4
 800a900:	6922      	ldr	r2, [r4, #16]
 800a902:	3314      	adds	r3, #20
 800a904:	0092      	lsls	r2, r2, #2
 800a906:	4008      	ands	r0, r1
 800a908:	4684      	mov	ip, r0
 800a90a:	189a      	adds	r2, r3, r2
 800a90c:	420f      	tst	r7, r1
 800a90e:	d02a      	beq.n	800a966 <__lshift+0xce>
 800a910:	3101      	adds	r1, #1
 800a912:	1a09      	subs	r1, r1, r0
 800a914:	9105      	str	r1, [sp, #20]
 800a916:	2100      	movs	r1, #0
 800a918:	9503      	str	r5, [sp, #12]
 800a91a:	4667      	mov	r7, ip
 800a91c:	6818      	ldr	r0, [r3, #0]
 800a91e:	40b8      	lsls	r0, r7
 800a920:	4301      	orrs	r1, r0
 800a922:	9803      	ldr	r0, [sp, #12]
 800a924:	c002      	stmia	r0!, {r1}
 800a926:	cb02      	ldmia	r3!, {r1}
 800a928:	9003      	str	r0, [sp, #12]
 800a92a:	9805      	ldr	r0, [sp, #20]
 800a92c:	40c1      	lsrs	r1, r0
 800a92e:	429a      	cmp	r2, r3
 800a930:	d8f3      	bhi.n	800a91a <__lshift+0x82>
 800a932:	0020      	movs	r0, r4
 800a934:	3015      	adds	r0, #21
 800a936:	2304      	movs	r3, #4
 800a938:	4282      	cmp	r2, r0
 800a93a:	d304      	bcc.n	800a946 <__lshift+0xae>
 800a93c:	1b13      	subs	r3, r2, r4
 800a93e:	3b15      	subs	r3, #21
 800a940:	089b      	lsrs	r3, r3, #2
 800a942:	3301      	adds	r3, #1
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	50e9      	str	r1, [r5, r3]
 800a948:	2900      	cmp	r1, #0
 800a94a:	d002      	beq.n	800a952 <__lshift+0xba>
 800a94c:	9b02      	ldr	r3, [sp, #8]
 800a94e:	3302      	adds	r3, #2
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	9b01      	ldr	r3, [sp, #4]
 800a954:	9804      	ldr	r0, [sp, #16]
 800a956:	3b01      	subs	r3, #1
 800a958:	0021      	movs	r1, r4
 800a95a:	6133      	str	r3, [r6, #16]
 800a95c:	f7ff fdca 	bl	800a4f4 <_Bfree>
 800a960:	0030      	movs	r0, r6
 800a962:	b007      	add	sp, #28
 800a964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a966:	cb02      	ldmia	r3!, {r1}
 800a968:	c502      	stmia	r5!, {r1}
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d8fb      	bhi.n	800a966 <__lshift+0xce>
 800a96e:	e7f0      	b.n	800a952 <__lshift+0xba>
 800a970:	0800d8a7 	.word	0x0800d8a7
 800a974:	0800d8b8 	.word	0x0800d8b8

0800a978 <__mcmp>:
 800a978:	6902      	ldr	r2, [r0, #16]
 800a97a:	690b      	ldr	r3, [r1, #16]
 800a97c:	b530      	push	{r4, r5, lr}
 800a97e:	0004      	movs	r4, r0
 800a980:	1ad0      	subs	r0, r2, r3
 800a982:	429a      	cmp	r2, r3
 800a984:	d10d      	bne.n	800a9a2 <__mcmp+0x2a>
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	3414      	adds	r4, #20
 800a98a:	3114      	adds	r1, #20
 800a98c:	18e2      	adds	r2, r4, r3
 800a98e:	18c9      	adds	r1, r1, r3
 800a990:	3a04      	subs	r2, #4
 800a992:	3904      	subs	r1, #4
 800a994:	6815      	ldr	r5, [r2, #0]
 800a996:	680b      	ldr	r3, [r1, #0]
 800a998:	429d      	cmp	r5, r3
 800a99a:	d003      	beq.n	800a9a4 <__mcmp+0x2c>
 800a99c:	2001      	movs	r0, #1
 800a99e:	429d      	cmp	r5, r3
 800a9a0:	d303      	bcc.n	800a9aa <__mcmp+0x32>
 800a9a2:	bd30      	pop	{r4, r5, pc}
 800a9a4:	4294      	cmp	r4, r2
 800a9a6:	d3f3      	bcc.n	800a990 <__mcmp+0x18>
 800a9a8:	e7fb      	b.n	800a9a2 <__mcmp+0x2a>
 800a9aa:	4240      	negs	r0, r0
 800a9ac:	e7f9      	b.n	800a9a2 <__mcmp+0x2a>
	...

0800a9b0 <__mdiff>:
 800a9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9b2:	000e      	movs	r6, r1
 800a9b4:	0007      	movs	r7, r0
 800a9b6:	0011      	movs	r1, r2
 800a9b8:	0030      	movs	r0, r6
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	0014      	movs	r4, r2
 800a9be:	f7ff ffdb 	bl	800a978 <__mcmp>
 800a9c2:	1e05      	subs	r5, r0, #0
 800a9c4:	d110      	bne.n	800a9e8 <__mdiff+0x38>
 800a9c6:	0001      	movs	r1, r0
 800a9c8:	0038      	movs	r0, r7
 800a9ca:	f7ff fd4f 	bl	800a46c <_Balloc>
 800a9ce:	1e02      	subs	r2, r0, #0
 800a9d0:	d104      	bne.n	800a9dc <__mdiff+0x2c>
 800a9d2:	4b40      	ldr	r3, [pc, #256]	; (800aad4 <__mdiff+0x124>)
 800a9d4:	4940      	ldr	r1, [pc, #256]	; (800aad8 <__mdiff+0x128>)
 800a9d6:	4841      	ldr	r0, [pc, #260]	; (800aadc <__mdiff+0x12c>)
 800a9d8:	f000 fb10 	bl	800affc <__assert_func>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	6145      	str	r5, [r0, #20]
 800a9e0:	6103      	str	r3, [r0, #16]
 800a9e2:	0010      	movs	r0, r2
 800a9e4:	b007      	add	sp, #28
 800a9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	9301      	str	r3, [sp, #4]
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	db04      	blt.n	800a9fa <__mdiff+0x4a>
 800a9f0:	0023      	movs	r3, r4
 800a9f2:	0034      	movs	r4, r6
 800a9f4:	001e      	movs	r6, r3
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	9301      	str	r3, [sp, #4]
 800a9fa:	0038      	movs	r0, r7
 800a9fc:	6861      	ldr	r1, [r4, #4]
 800a9fe:	f7ff fd35 	bl	800a46c <_Balloc>
 800aa02:	1e02      	subs	r2, r0, #0
 800aa04:	d103      	bne.n	800aa0e <__mdiff+0x5e>
 800aa06:	2190      	movs	r1, #144	; 0x90
 800aa08:	4b32      	ldr	r3, [pc, #200]	; (800aad4 <__mdiff+0x124>)
 800aa0a:	0089      	lsls	r1, r1, #2
 800aa0c:	e7e3      	b.n	800a9d6 <__mdiff+0x26>
 800aa0e:	9b01      	ldr	r3, [sp, #4]
 800aa10:	2700      	movs	r7, #0
 800aa12:	60c3      	str	r3, [r0, #12]
 800aa14:	6920      	ldr	r0, [r4, #16]
 800aa16:	3414      	adds	r4, #20
 800aa18:	9401      	str	r4, [sp, #4]
 800aa1a:	9b01      	ldr	r3, [sp, #4]
 800aa1c:	0084      	lsls	r4, r0, #2
 800aa1e:	191b      	adds	r3, r3, r4
 800aa20:	0034      	movs	r4, r6
 800aa22:	9302      	str	r3, [sp, #8]
 800aa24:	6933      	ldr	r3, [r6, #16]
 800aa26:	3414      	adds	r4, #20
 800aa28:	0099      	lsls	r1, r3, #2
 800aa2a:	1863      	adds	r3, r4, r1
 800aa2c:	9303      	str	r3, [sp, #12]
 800aa2e:	0013      	movs	r3, r2
 800aa30:	3314      	adds	r3, #20
 800aa32:	469c      	mov	ip, r3
 800aa34:	9305      	str	r3, [sp, #20]
 800aa36:	9b01      	ldr	r3, [sp, #4]
 800aa38:	9304      	str	r3, [sp, #16]
 800aa3a:	9b04      	ldr	r3, [sp, #16]
 800aa3c:	cc02      	ldmia	r4!, {r1}
 800aa3e:	cb20      	ldmia	r3!, {r5}
 800aa40:	9304      	str	r3, [sp, #16]
 800aa42:	b2ab      	uxth	r3, r5
 800aa44:	19df      	adds	r7, r3, r7
 800aa46:	b28b      	uxth	r3, r1
 800aa48:	1afb      	subs	r3, r7, r3
 800aa4a:	0c2d      	lsrs	r5, r5, #16
 800aa4c:	0c09      	lsrs	r1, r1, #16
 800aa4e:	1a69      	subs	r1, r5, r1
 800aa50:	141d      	asrs	r5, r3, #16
 800aa52:	1949      	adds	r1, r1, r5
 800aa54:	140f      	asrs	r7, r1, #16
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	0409      	lsls	r1, r1, #16
 800aa5a:	430b      	orrs	r3, r1
 800aa5c:	4661      	mov	r1, ip
 800aa5e:	c108      	stmia	r1!, {r3}
 800aa60:	9b03      	ldr	r3, [sp, #12]
 800aa62:	468c      	mov	ip, r1
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	d8e8      	bhi.n	800aa3a <__mdiff+0x8a>
 800aa68:	0031      	movs	r1, r6
 800aa6a:	9c03      	ldr	r4, [sp, #12]
 800aa6c:	3115      	adds	r1, #21
 800aa6e:	2304      	movs	r3, #4
 800aa70:	428c      	cmp	r4, r1
 800aa72:	d304      	bcc.n	800aa7e <__mdiff+0xce>
 800aa74:	1ba3      	subs	r3, r4, r6
 800aa76:	3b15      	subs	r3, #21
 800aa78:	089b      	lsrs	r3, r3, #2
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	9901      	ldr	r1, [sp, #4]
 800aa80:	18cc      	adds	r4, r1, r3
 800aa82:	9905      	ldr	r1, [sp, #20]
 800aa84:	0026      	movs	r6, r4
 800aa86:	18cb      	adds	r3, r1, r3
 800aa88:	469c      	mov	ip, r3
 800aa8a:	9902      	ldr	r1, [sp, #8]
 800aa8c:	428e      	cmp	r6, r1
 800aa8e:	d310      	bcc.n	800aab2 <__mdiff+0x102>
 800aa90:	9e02      	ldr	r6, [sp, #8]
 800aa92:	1ee5      	subs	r5, r4, #3
 800aa94:	2100      	movs	r1, #0
 800aa96:	42ae      	cmp	r6, r5
 800aa98:	d304      	bcc.n	800aaa4 <__mdiff+0xf4>
 800aa9a:	0031      	movs	r1, r6
 800aa9c:	3103      	adds	r1, #3
 800aa9e:	1b09      	subs	r1, r1, r4
 800aaa0:	0889      	lsrs	r1, r1, #2
 800aaa2:	0089      	lsls	r1, r1, #2
 800aaa4:	185b      	adds	r3, r3, r1
 800aaa6:	3b04      	subs	r3, #4
 800aaa8:	6819      	ldr	r1, [r3, #0]
 800aaaa:	2900      	cmp	r1, #0
 800aaac:	d00f      	beq.n	800aace <__mdiff+0x11e>
 800aaae:	6110      	str	r0, [r2, #16]
 800aab0:	e797      	b.n	800a9e2 <__mdiff+0x32>
 800aab2:	ce02      	ldmia	r6!, {r1}
 800aab4:	b28d      	uxth	r5, r1
 800aab6:	19ed      	adds	r5, r5, r7
 800aab8:	0c0f      	lsrs	r7, r1, #16
 800aaba:	1429      	asrs	r1, r5, #16
 800aabc:	1879      	adds	r1, r7, r1
 800aabe:	140f      	asrs	r7, r1, #16
 800aac0:	b2ad      	uxth	r5, r5
 800aac2:	0409      	lsls	r1, r1, #16
 800aac4:	430d      	orrs	r5, r1
 800aac6:	4661      	mov	r1, ip
 800aac8:	c120      	stmia	r1!, {r5}
 800aaca:	468c      	mov	ip, r1
 800aacc:	e7dd      	b.n	800aa8a <__mdiff+0xda>
 800aace:	3801      	subs	r0, #1
 800aad0:	e7e9      	b.n	800aaa6 <__mdiff+0xf6>
 800aad2:	46c0      	nop			; (mov r8, r8)
 800aad4:	0800d8a7 	.word	0x0800d8a7
 800aad8:	00000232 	.word	0x00000232
 800aadc:	0800d8b8 	.word	0x0800d8b8

0800aae0 <__d2b>:
 800aae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aae2:	2101      	movs	r1, #1
 800aae4:	0014      	movs	r4, r2
 800aae6:	001e      	movs	r6, r3
 800aae8:	9f08      	ldr	r7, [sp, #32]
 800aaea:	f7ff fcbf 	bl	800a46c <_Balloc>
 800aaee:	1e05      	subs	r5, r0, #0
 800aaf0:	d105      	bne.n	800aafe <__d2b+0x1e>
 800aaf2:	0002      	movs	r2, r0
 800aaf4:	4b26      	ldr	r3, [pc, #152]	; (800ab90 <__d2b+0xb0>)
 800aaf6:	4927      	ldr	r1, [pc, #156]	; (800ab94 <__d2b+0xb4>)
 800aaf8:	4827      	ldr	r0, [pc, #156]	; (800ab98 <__d2b+0xb8>)
 800aafa:	f000 fa7f 	bl	800affc <__assert_func>
 800aafe:	0333      	lsls	r3, r6, #12
 800ab00:	0076      	lsls	r6, r6, #1
 800ab02:	0b1b      	lsrs	r3, r3, #12
 800ab04:	0d76      	lsrs	r6, r6, #21
 800ab06:	d124      	bne.n	800ab52 <__d2b+0x72>
 800ab08:	9301      	str	r3, [sp, #4]
 800ab0a:	2c00      	cmp	r4, #0
 800ab0c:	d027      	beq.n	800ab5e <__d2b+0x7e>
 800ab0e:	4668      	mov	r0, sp
 800ab10:	9400      	str	r4, [sp, #0]
 800ab12:	f7ff fd71 	bl	800a5f8 <__lo0bits>
 800ab16:	9c00      	ldr	r4, [sp, #0]
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d01e      	beq.n	800ab5a <__d2b+0x7a>
 800ab1c:	9b01      	ldr	r3, [sp, #4]
 800ab1e:	2120      	movs	r1, #32
 800ab20:	001a      	movs	r2, r3
 800ab22:	1a09      	subs	r1, r1, r0
 800ab24:	408a      	lsls	r2, r1
 800ab26:	40c3      	lsrs	r3, r0
 800ab28:	4322      	orrs	r2, r4
 800ab2a:	616a      	str	r2, [r5, #20]
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	9c01      	ldr	r4, [sp, #4]
 800ab30:	61ac      	str	r4, [r5, #24]
 800ab32:	1e63      	subs	r3, r4, #1
 800ab34:	419c      	sbcs	r4, r3
 800ab36:	3401      	adds	r4, #1
 800ab38:	612c      	str	r4, [r5, #16]
 800ab3a:	2e00      	cmp	r6, #0
 800ab3c:	d018      	beq.n	800ab70 <__d2b+0x90>
 800ab3e:	4b17      	ldr	r3, [pc, #92]	; (800ab9c <__d2b+0xbc>)
 800ab40:	18f6      	adds	r6, r6, r3
 800ab42:	2335      	movs	r3, #53	; 0x35
 800ab44:	1836      	adds	r6, r6, r0
 800ab46:	1a18      	subs	r0, r3, r0
 800ab48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4a:	603e      	str	r6, [r7, #0]
 800ab4c:	6018      	str	r0, [r3, #0]
 800ab4e:	0028      	movs	r0, r5
 800ab50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab52:	2280      	movs	r2, #128	; 0x80
 800ab54:	0352      	lsls	r2, r2, #13
 800ab56:	4313      	orrs	r3, r2
 800ab58:	e7d6      	b.n	800ab08 <__d2b+0x28>
 800ab5a:	616c      	str	r4, [r5, #20]
 800ab5c:	e7e7      	b.n	800ab2e <__d2b+0x4e>
 800ab5e:	a801      	add	r0, sp, #4
 800ab60:	f7ff fd4a 	bl	800a5f8 <__lo0bits>
 800ab64:	2401      	movs	r4, #1
 800ab66:	9b01      	ldr	r3, [sp, #4]
 800ab68:	612c      	str	r4, [r5, #16]
 800ab6a:	616b      	str	r3, [r5, #20]
 800ab6c:	3020      	adds	r0, #32
 800ab6e:	e7e4      	b.n	800ab3a <__d2b+0x5a>
 800ab70:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <__d2b+0xc0>)
 800ab72:	18c0      	adds	r0, r0, r3
 800ab74:	4b0b      	ldr	r3, [pc, #44]	; (800aba4 <__d2b+0xc4>)
 800ab76:	6038      	str	r0, [r7, #0]
 800ab78:	18e3      	adds	r3, r4, r3
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	18eb      	adds	r3, r5, r3
 800ab7e:	6958      	ldr	r0, [r3, #20]
 800ab80:	f7ff fd20 	bl	800a5c4 <__hi0bits>
 800ab84:	0164      	lsls	r4, r4, #5
 800ab86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab88:	1a24      	subs	r4, r4, r0
 800ab8a:	601c      	str	r4, [r3, #0]
 800ab8c:	e7df      	b.n	800ab4e <__d2b+0x6e>
 800ab8e:	46c0      	nop			; (mov r8, r8)
 800ab90:	0800d8a7 	.word	0x0800d8a7
 800ab94:	0000030a 	.word	0x0000030a
 800ab98:	0800d8b8 	.word	0x0800d8b8
 800ab9c:	fffffbcd 	.word	0xfffffbcd
 800aba0:	fffffbce 	.word	0xfffffbce
 800aba4:	3fffffff 	.word	0x3fffffff

0800aba8 <_calloc_r>:
 800aba8:	434a      	muls	r2, r1
 800abaa:	b570      	push	{r4, r5, r6, lr}
 800abac:	0011      	movs	r1, r2
 800abae:	0015      	movs	r5, r2
 800abb0:	f000 f852 	bl	800ac58 <_malloc_r>
 800abb4:	1e04      	subs	r4, r0, #0
 800abb6:	d003      	beq.n	800abc0 <_calloc_r+0x18>
 800abb8:	002a      	movs	r2, r5
 800abba:	2100      	movs	r1, #0
 800abbc:	f7fe f8e8 	bl	8008d90 <memset>
 800abc0:	0020      	movs	r0, r4
 800abc2:	bd70      	pop	{r4, r5, r6, pc}

0800abc4 <_free_r>:
 800abc4:	b570      	push	{r4, r5, r6, lr}
 800abc6:	0005      	movs	r5, r0
 800abc8:	2900      	cmp	r1, #0
 800abca:	d010      	beq.n	800abee <_free_r+0x2a>
 800abcc:	1f0c      	subs	r4, r1, #4
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	da00      	bge.n	800abd6 <_free_r+0x12>
 800abd4:	18e4      	adds	r4, r4, r3
 800abd6:	0028      	movs	r0, r5
 800abd8:	f000 fa64 	bl	800b0a4 <__malloc_lock>
 800abdc:	4a1d      	ldr	r2, [pc, #116]	; (800ac54 <_free_r+0x90>)
 800abde:	6813      	ldr	r3, [r2, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d105      	bne.n	800abf0 <_free_r+0x2c>
 800abe4:	6063      	str	r3, [r4, #4]
 800abe6:	6014      	str	r4, [r2, #0]
 800abe8:	0028      	movs	r0, r5
 800abea:	f000 fa63 	bl	800b0b4 <__malloc_unlock>
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	42a3      	cmp	r3, r4
 800abf2:	d908      	bls.n	800ac06 <_free_r+0x42>
 800abf4:	6821      	ldr	r1, [r4, #0]
 800abf6:	1860      	adds	r0, r4, r1
 800abf8:	4283      	cmp	r3, r0
 800abfa:	d1f3      	bne.n	800abe4 <_free_r+0x20>
 800abfc:	6818      	ldr	r0, [r3, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	1841      	adds	r1, r0, r1
 800ac02:	6021      	str	r1, [r4, #0]
 800ac04:	e7ee      	b.n	800abe4 <_free_r+0x20>
 800ac06:	001a      	movs	r2, r3
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d001      	beq.n	800ac12 <_free_r+0x4e>
 800ac0e:	42a3      	cmp	r3, r4
 800ac10:	d9f9      	bls.n	800ac06 <_free_r+0x42>
 800ac12:	6811      	ldr	r1, [r2, #0]
 800ac14:	1850      	adds	r0, r2, r1
 800ac16:	42a0      	cmp	r0, r4
 800ac18:	d10b      	bne.n	800ac32 <_free_r+0x6e>
 800ac1a:	6820      	ldr	r0, [r4, #0]
 800ac1c:	1809      	adds	r1, r1, r0
 800ac1e:	1850      	adds	r0, r2, r1
 800ac20:	6011      	str	r1, [r2, #0]
 800ac22:	4283      	cmp	r3, r0
 800ac24:	d1e0      	bne.n	800abe8 <_free_r+0x24>
 800ac26:	6818      	ldr	r0, [r3, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	1841      	adds	r1, r0, r1
 800ac2c:	6011      	str	r1, [r2, #0]
 800ac2e:	6053      	str	r3, [r2, #4]
 800ac30:	e7da      	b.n	800abe8 <_free_r+0x24>
 800ac32:	42a0      	cmp	r0, r4
 800ac34:	d902      	bls.n	800ac3c <_free_r+0x78>
 800ac36:	230c      	movs	r3, #12
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	e7d5      	b.n	800abe8 <_free_r+0x24>
 800ac3c:	6821      	ldr	r1, [r4, #0]
 800ac3e:	1860      	adds	r0, r4, r1
 800ac40:	4283      	cmp	r3, r0
 800ac42:	d103      	bne.n	800ac4c <_free_r+0x88>
 800ac44:	6818      	ldr	r0, [r3, #0]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	1841      	adds	r1, r0, r1
 800ac4a:	6021      	str	r1, [r4, #0]
 800ac4c:	6063      	str	r3, [r4, #4]
 800ac4e:	6054      	str	r4, [r2, #4]
 800ac50:	e7ca      	b.n	800abe8 <_free_r+0x24>
 800ac52:	46c0      	nop			; (mov r8, r8)
 800ac54:	2000021c 	.word	0x2000021c

0800ac58 <_malloc_r>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	1ccd      	adds	r5, r1, #3
 800ac5e:	439d      	bics	r5, r3
 800ac60:	3508      	adds	r5, #8
 800ac62:	0006      	movs	r6, r0
 800ac64:	2d0c      	cmp	r5, #12
 800ac66:	d21f      	bcs.n	800aca8 <_malloc_r+0x50>
 800ac68:	250c      	movs	r5, #12
 800ac6a:	42a9      	cmp	r1, r5
 800ac6c:	d81e      	bhi.n	800acac <_malloc_r+0x54>
 800ac6e:	0030      	movs	r0, r6
 800ac70:	f000 fa18 	bl	800b0a4 <__malloc_lock>
 800ac74:	4925      	ldr	r1, [pc, #148]	; (800ad0c <_malloc_r+0xb4>)
 800ac76:	680a      	ldr	r2, [r1, #0]
 800ac78:	0014      	movs	r4, r2
 800ac7a:	2c00      	cmp	r4, #0
 800ac7c:	d11a      	bne.n	800acb4 <_malloc_r+0x5c>
 800ac7e:	4f24      	ldr	r7, [pc, #144]	; (800ad10 <_malloc_r+0xb8>)
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d104      	bne.n	800ac90 <_malloc_r+0x38>
 800ac86:	0021      	movs	r1, r4
 800ac88:	0030      	movs	r0, r6
 800ac8a:	f000 f9a5 	bl	800afd8 <_sbrk_r>
 800ac8e:	6038      	str	r0, [r7, #0]
 800ac90:	0029      	movs	r1, r5
 800ac92:	0030      	movs	r0, r6
 800ac94:	f000 f9a0 	bl	800afd8 <_sbrk_r>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d12b      	bne.n	800acf4 <_malloc_r+0x9c>
 800ac9c:	230c      	movs	r3, #12
 800ac9e:	0030      	movs	r0, r6
 800aca0:	6033      	str	r3, [r6, #0]
 800aca2:	f000 fa07 	bl	800b0b4 <__malloc_unlock>
 800aca6:	e003      	b.n	800acb0 <_malloc_r+0x58>
 800aca8:	2d00      	cmp	r5, #0
 800acaa:	dade      	bge.n	800ac6a <_malloc_r+0x12>
 800acac:	230c      	movs	r3, #12
 800acae:	6033      	str	r3, [r6, #0]
 800acb0:	2000      	movs	r0, #0
 800acb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	1b5b      	subs	r3, r3, r5
 800acb8:	d419      	bmi.n	800acee <_malloc_r+0x96>
 800acba:	2b0b      	cmp	r3, #11
 800acbc:	d903      	bls.n	800acc6 <_malloc_r+0x6e>
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	18e4      	adds	r4, r4, r3
 800acc2:	6025      	str	r5, [r4, #0]
 800acc4:	e003      	b.n	800acce <_malloc_r+0x76>
 800acc6:	6863      	ldr	r3, [r4, #4]
 800acc8:	42a2      	cmp	r2, r4
 800acca:	d10e      	bne.n	800acea <_malloc_r+0x92>
 800accc:	600b      	str	r3, [r1, #0]
 800acce:	0030      	movs	r0, r6
 800acd0:	f000 f9f0 	bl	800b0b4 <__malloc_unlock>
 800acd4:	0020      	movs	r0, r4
 800acd6:	2207      	movs	r2, #7
 800acd8:	300b      	adds	r0, #11
 800acda:	1d23      	adds	r3, r4, #4
 800acdc:	4390      	bics	r0, r2
 800acde:	1ac2      	subs	r2, r0, r3
 800ace0:	4298      	cmp	r0, r3
 800ace2:	d0e6      	beq.n	800acb2 <_malloc_r+0x5a>
 800ace4:	1a1b      	subs	r3, r3, r0
 800ace6:	50a3      	str	r3, [r4, r2]
 800ace8:	e7e3      	b.n	800acb2 <_malloc_r+0x5a>
 800acea:	6053      	str	r3, [r2, #4]
 800acec:	e7ef      	b.n	800acce <_malloc_r+0x76>
 800acee:	0022      	movs	r2, r4
 800acf0:	6864      	ldr	r4, [r4, #4]
 800acf2:	e7c2      	b.n	800ac7a <_malloc_r+0x22>
 800acf4:	2303      	movs	r3, #3
 800acf6:	1cc4      	adds	r4, r0, #3
 800acf8:	439c      	bics	r4, r3
 800acfa:	42a0      	cmp	r0, r4
 800acfc:	d0e1      	beq.n	800acc2 <_malloc_r+0x6a>
 800acfe:	1a21      	subs	r1, r4, r0
 800ad00:	0030      	movs	r0, r6
 800ad02:	f000 f969 	bl	800afd8 <_sbrk_r>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	d1db      	bne.n	800acc2 <_malloc_r+0x6a>
 800ad0a:	e7c7      	b.n	800ac9c <_malloc_r+0x44>
 800ad0c:	2000021c 	.word	0x2000021c
 800ad10:	20000220 	.word	0x20000220

0800ad14 <__ssputs_r>:
 800ad14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad16:	688e      	ldr	r6, [r1, #8]
 800ad18:	b085      	sub	sp, #20
 800ad1a:	0007      	movs	r7, r0
 800ad1c:	000c      	movs	r4, r1
 800ad1e:	9203      	str	r2, [sp, #12]
 800ad20:	9301      	str	r3, [sp, #4]
 800ad22:	429e      	cmp	r6, r3
 800ad24:	d83c      	bhi.n	800ada0 <__ssputs_r+0x8c>
 800ad26:	2390      	movs	r3, #144	; 0x90
 800ad28:	898a      	ldrh	r2, [r1, #12]
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	421a      	tst	r2, r3
 800ad2e:	d034      	beq.n	800ad9a <__ssputs_r+0x86>
 800ad30:	2503      	movs	r5, #3
 800ad32:	6909      	ldr	r1, [r1, #16]
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	1a5b      	subs	r3, r3, r1
 800ad38:	9302      	str	r3, [sp, #8]
 800ad3a:	6963      	ldr	r3, [r4, #20]
 800ad3c:	9802      	ldr	r0, [sp, #8]
 800ad3e:	435d      	muls	r5, r3
 800ad40:	0feb      	lsrs	r3, r5, #31
 800ad42:	195d      	adds	r5, r3, r5
 800ad44:	9b01      	ldr	r3, [sp, #4]
 800ad46:	106d      	asrs	r5, r5, #1
 800ad48:	3301      	adds	r3, #1
 800ad4a:	181b      	adds	r3, r3, r0
 800ad4c:	42ab      	cmp	r3, r5
 800ad4e:	d900      	bls.n	800ad52 <__ssputs_r+0x3e>
 800ad50:	001d      	movs	r5, r3
 800ad52:	0553      	lsls	r3, r2, #21
 800ad54:	d532      	bpl.n	800adbc <__ssputs_r+0xa8>
 800ad56:	0029      	movs	r1, r5
 800ad58:	0038      	movs	r0, r7
 800ad5a:	f7ff ff7d 	bl	800ac58 <_malloc_r>
 800ad5e:	1e06      	subs	r6, r0, #0
 800ad60:	d109      	bne.n	800ad76 <__ssputs_r+0x62>
 800ad62:	230c      	movs	r3, #12
 800ad64:	603b      	str	r3, [r7, #0]
 800ad66:	2340      	movs	r3, #64	; 0x40
 800ad68:	2001      	movs	r0, #1
 800ad6a:	89a2      	ldrh	r2, [r4, #12]
 800ad6c:	4240      	negs	r0, r0
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	81a3      	strh	r3, [r4, #12]
 800ad72:	b005      	add	sp, #20
 800ad74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad76:	9a02      	ldr	r2, [sp, #8]
 800ad78:	6921      	ldr	r1, [r4, #16]
 800ad7a:	f7ff fb6e 	bl	800a45a <memcpy>
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	4a14      	ldr	r2, [pc, #80]	; (800add4 <__ssputs_r+0xc0>)
 800ad82:	401a      	ands	r2, r3
 800ad84:	2380      	movs	r3, #128	; 0x80
 800ad86:	4313      	orrs	r3, r2
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	9b02      	ldr	r3, [sp, #8]
 800ad8c:	6126      	str	r6, [r4, #16]
 800ad8e:	18f6      	adds	r6, r6, r3
 800ad90:	6026      	str	r6, [r4, #0]
 800ad92:	6165      	str	r5, [r4, #20]
 800ad94:	9e01      	ldr	r6, [sp, #4]
 800ad96:	1aed      	subs	r5, r5, r3
 800ad98:	60a5      	str	r5, [r4, #8]
 800ad9a:	9b01      	ldr	r3, [sp, #4]
 800ad9c:	429e      	cmp	r6, r3
 800ad9e:	d900      	bls.n	800ada2 <__ssputs_r+0x8e>
 800ada0:	9e01      	ldr	r6, [sp, #4]
 800ada2:	0032      	movs	r2, r6
 800ada4:	9903      	ldr	r1, [sp, #12]
 800ada6:	6820      	ldr	r0, [r4, #0]
 800ada8:	f000 f968 	bl	800b07c <memmove>
 800adac:	68a3      	ldr	r3, [r4, #8]
 800adae:	2000      	movs	r0, #0
 800adb0:	1b9b      	subs	r3, r3, r6
 800adb2:	60a3      	str	r3, [r4, #8]
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	199e      	adds	r6, r3, r6
 800adb8:	6026      	str	r6, [r4, #0]
 800adba:	e7da      	b.n	800ad72 <__ssputs_r+0x5e>
 800adbc:	002a      	movs	r2, r5
 800adbe:	0038      	movs	r0, r7
 800adc0:	f000 f980 	bl	800b0c4 <_realloc_r>
 800adc4:	1e06      	subs	r6, r0, #0
 800adc6:	d1e0      	bne.n	800ad8a <__ssputs_r+0x76>
 800adc8:	0038      	movs	r0, r7
 800adca:	6921      	ldr	r1, [r4, #16]
 800adcc:	f7ff fefa 	bl	800abc4 <_free_r>
 800add0:	e7c7      	b.n	800ad62 <__ssputs_r+0x4e>
 800add2:	46c0      	nop			; (mov r8, r8)
 800add4:	fffffb7f 	.word	0xfffffb7f

0800add8 <_svfiprintf_r>:
 800add8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adda:	b0a1      	sub	sp, #132	; 0x84
 800addc:	9003      	str	r0, [sp, #12]
 800adde:	001d      	movs	r5, r3
 800ade0:	898b      	ldrh	r3, [r1, #12]
 800ade2:	000f      	movs	r7, r1
 800ade4:	0016      	movs	r6, r2
 800ade6:	061b      	lsls	r3, r3, #24
 800ade8:	d511      	bpl.n	800ae0e <_svfiprintf_r+0x36>
 800adea:	690b      	ldr	r3, [r1, #16]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10e      	bne.n	800ae0e <_svfiprintf_r+0x36>
 800adf0:	2140      	movs	r1, #64	; 0x40
 800adf2:	f7ff ff31 	bl	800ac58 <_malloc_r>
 800adf6:	6038      	str	r0, [r7, #0]
 800adf8:	6138      	str	r0, [r7, #16]
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d105      	bne.n	800ae0a <_svfiprintf_r+0x32>
 800adfe:	230c      	movs	r3, #12
 800ae00:	9a03      	ldr	r2, [sp, #12]
 800ae02:	3801      	subs	r0, #1
 800ae04:	6013      	str	r3, [r2, #0]
 800ae06:	b021      	add	sp, #132	; 0x84
 800ae08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae0a:	2340      	movs	r3, #64	; 0x40
 800ae0c:	617b      	str	r3, [r7, #20]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	ac08      	add	r4, sp, #32
 800ae12:	6163      	str	r3, [r4, #20]
 800ae14:	3320      	adds	r3, #32
 800ae16:	7663      	strb	r3, [r4, #25]
 800ae18:	3310      	adds	r3, #16
 800ae1a:	76a3      	strb	r3, [r4, #26]
 800ae1c:	9507      	str	r5, [sp, #28]
 800ae1e:	0035      	movs	r5, r6
 800ae20:	782b      	ldrb	r3, [r5, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <_svfiprintf_r+0x52>
 800ae26:	2b25      	cmp	r3, #37	; 0x25
 800ae28:	d147      	bne.n	800aeba <_svfiprintf_r+0xe2>
 800ae2a:	1bab      	subs	r3, r5, r6
 800ae2c:	9305      	str	r3, [sp, #20]
 800ae2e:	42b5      	cmp	r5, r6
 800ae30:	d00c      	beq.n	800ae4c <_svfiprintf_r+0x74>
 800ae32:	0032      	movs	r2, r6
 800ae34:	0039      	movs	r1, r7
 800ae36:	9803      	ldr	r0, [sp, #12]
 800ae38:	f7ff ff6c 	bl	800ad14 <__ssputs_r>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d100      	bne.n	800ae42 <_svfiprintf_r+0x6a>
 800ae40:	e0ae      	b.n	800afa0 <_svfiprintf_r+0x1c8>
 800ae42:	6962      	ldr	r2, [r4, #20]
 800ae44:	9b05      	ldr	r3, [sp, #20]
 800ae46:	4694      	mov	ip, r2
 800ae48:	4463      	add	r3, ip
 800ae4a:	6163      	str	r3, [r4, #20]
 800ae4c:	782b      	ldrb	r3, [r5, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d100      	bne.n	800ae54 <_svfiprintf_r+0x7c>
 800ae52:	e0a5      	b.n	800afa0 <_svfiprintf_r+0x1c8>
 800ae54:	2201      	movs	r2, #1
 800ae56:	2300      	movs	r3, #0
 800ae58:	4252      	negs	r2, r2
 800ae5a:	6062      	str	r2, [r4, #4]
 800ae5c:	a904      	add	r1, sp, #16
 800ae5e:	3254      	adds	r2, #84	; 0x54
 800ae60:	1852      	adds	r2, r2, r1
 800ae62:	1c6e      	adds	r6, r5, #1
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	60e3      	str	r3, [r4, #12]
 800ae68:	60a3      	str	r3, [r4, #8]
 800ae6a:	7013      	strb	r3, [r2, #0]
 800ae6c:	65a3      	str	r3, [r4, #88]	; 0x58
 800ae6e:	2205      	movs	r2, #5
 800ae70:	7831      	ldrb	r1, [r6, #0]
 800ae72:	4854      	ldr	r0, [pc, #336]	; (800afc4 <_svfiprintf_r+0x1ec>)
 800ae74:	f7ff fae6 	bl	800a444 <memchr>
 800ae78:	1c75      	adds	r5, r6, #1
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d11f      	bne.n	800aebe <_svfiprintf_r+0xe6>
 800ae7e:	6822      	ldr	r2, [r4, #0]
 800ae80:	06d3      	lsls	r3, r2, #27
 800ae82:	d504      	bpl.n	800ae8e <_svfiprintf_r+0xb6>
 800ae84:	2353      	movs	r3, #83	; 0x53
 800ae86:	a904      	add	r1, sp, #16
 800ae88:	185b      	adds	r3, r3, r1
 800ae8a:	2120      	movs	r1, #32
 800ae8c:	7019      	strb	r1, [r3, #0]
 800ae8e:	0713      	lsls	r3, r2, #28
 800ae90:	d504      	bpl.n	800ae9c <_svfiprintf_r+0xc4>
 800ae92:	2353      	movs	r3, #83	; 0x53
 800ae94:	a904      	add	r1, sp, #16
 800ae96:	185b      	adds	r3, r3, r1
 800ae98:	212b      	movs	r1, #43	; 0x2b
 800ae9a:	7019      	strb	r1, [r3, #0]
 800ae9c:	7833      	ldrb	r3, [r6, #0]
 800ae9e:	2b2a      	cmp	r3, #42	; 0x2a
 800aea0:	d016      	beq.n	800aed0 <_svfiprintf_r+0xf8>
 800aea2:	0035      	movs	r5, r6
 800aea4:	2100      	movs	r1, #0
 800aea6:	200a      	movs	r0, #10
 800aea8:	68e3      	ldr	r3, [r4, #12]
 800aeaa:	782a      	ldrb	r2, [r5, #0]
 800aeac:	1c6e      	adds	r6, r5, #1
 800aeae:	3a30      	subs	r2, #48	; 0x30
 800aeb0:	2a09      	cmp	r2, #9
 800aeb2:	d94e      	bls.n	800af52 <_svfiprintf_r+0x17a>
 800aeb4:	2900      	cmp	r1, #0
 800aeb6:	d111      	bne.n	800aedc <_svfiprintf_r+0x104>
 800aeb8:	e017      	b.n	800aeea <_svfiprintf_r+0x112>
 800aeba:	3501      	adds	r5, #1
 800aebc:	e7b0      	b.n	800ae20 <_svfiprintf_r+0x48>
 800aebe:	4b41      	ldr	r3, [pc, #260]	; (800afc4 <_svfiprintf_r+0x1ec>)
 800aec0:	6822      	ldr	r2, [r4, #0]
 800aec2:	1ac0      	subs	r0, r0, r3
 800aec4:	2301      	movs	r3, #1
 800aec6:	4083      	lsls	r3, r0
 800aec8:	4313      	orrs	r3, r2
 800aeca:	002e      	movs	r6, r5
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	e7ce      	b.n	800ae6e <_svfiprintf_r+0x96>
 800aed0:	9b07      	ldr	r3, [sp, #28]
 800aed2:	1d19      	adds	r1, r3, #4
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	9107      	str	r1, [sp, #28]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	db01      	blt.n	800aee0 <_svfiprintf_r+0x108>
 800aedc:	930b      	str	r3, [sp, #44]	; 0x2c
 800aede:	e004      	b.n	800aeea <_svfiprintf_r+0x112>
 800aee0:	425b      	negs	r3, r3
 800aee2:	60e3      	str	r3, [r4, #12]
 800aee4:	2302      	movs	r3, #2
 800aee6:	4313      	orrs	r3, r2
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	782b      	ldrb	r3, [r5, #0]
 800aeec:	2b2e      	cmp	r3, #46	; 0x2e
 800aeee:	d10a      	bne.n	800af06 <_svfiprintf_r+0x12e>
 800aef0:	786b      	ldrb	r3, [r5, #1]
 800aef2:	2b2a      	cmp	r3, #42	; 0x2a
 800aef4:	d135      	bne.n	800af62 <_svfiprintf_r+0x18a>
 800aef6:	9b07      	ldr	r3, [sp, #28]
 800aef8:	3502      	adds	r5, #2
 800aefa:	1d1a      	adds	r2, r3, #4
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	9207      	str	r2, [sp, #28]
 800af00:	2b00      	cmp	r3, #0
 800af02:	db2b      	blt.n	800af5c <_svfiprintf_r+0x184>
 800af04:	9309      	str	r3, [sp, #36]	; 0x24
 800af06:	4e30      	ldr	r6, [pc, #192]	; (800afc8 <_svfiprintf_r+0x1f0>)
 800af08:	2203      	movs	r2, #3
 800af0a:	0030      	movs	r0, r6
 800af0c:	7829      	ldrb	r1, [r5, #0]
 800af0e:	f7ff fa99 	bl	800a444 <memchr>
 800af12:	2800      	cmp	r0, #0
 800af14:	d006      	beq.n	800af24 <_svfiprintf_r+0x14c>
 800af16:	2340      	movs	r3, #64	; 0x40
 800af18:	1b80      	subs	r0, r0, r6
 800af1a:	4083      	lsls	r3, r0
 800af1c:	6822      	ldr	r2, [r4, #0]
 800af1e:	3501      	adds	r5, #1
 800af20:	4313      	orrs	r3, r2
 800af22:	6023      	str	r3, [r4, #0]
 800af24:	7829      	ldrb	r1, [r5, #0]
 800af26:	2206      	movs	r2, #6
 800af28:	4828      	ldr	r0, [pc, #160]	; (800afcc <_svfiprintf_r+0x1f4>)
 800af2a:	1c6e      	adds	r6, r5, #1
 800af2c:	7621      	strb	r1, [r4, #24]
 800af2e:	f7ff fa89 	bl	800a444 <memchr>
 800af32:	2800      	cmp	r0, #0
 800af34:	d03c      	beq.n	800afb0 <_svfiprintf_r+0x1d8>
 800af36:	4b26      	ldr	r3, [pc, #152]	; (800afd0 <_svfiprintf_r+0x1f8>)
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d125      	bne.n	800af88 <_svfiprintf_r+0x1b0>
 800af3c:	2207      	movs	r2, #7
 800af3e:	9b07      	ldr	r3, [sp, #28]
 800af40:	3307      	adds	r3, #7
 800af42:	4393      	bics	r3, r2
 800af44:	3308      	adds	r3, #8
 800af46:	9307      	str	r3, [sp, #28]
 800af48:	6963      	ldr	r3, [r4, #20]
 800af4a:	9a04      	ldr	r2, [sp, #16]
 800af4c:	189b      	adds	r3, r3, r2
 800af4e:	6163      	str	r3, [r4, #20]
 800af50:	e765      	b.n	800ae1e <_svfiprintf_r+0x46>
 800af52:	4343      	muls	r3, r0
 800af54:	0035      	movs	r5, r6
 800af56:	2101      	movs	r1, #1
 800af58:	189b      	adds	r3, r3, r2
 800af5a:	e7a6      	b.n	800aeaa <_svfiprintf_r+0xd2>
 800af5c:	2301      	movs	r3, #1
 800af5e:	425b      	negs	r3, r3
 800af60:	e7d0      	b.n	800af04 <_svfiprintf_r+0x12c>
 800af62:	2300      	movs	r3, #0
 800af64:	200a      	movs	r0, #10
 800af66:	001a      	movs	r2, r3
 800af68:	3501      	adds	r5, #1
 800af6a:	6063      	str	r3, [r4, #4]
 800af6c:	7829      	ldrb	r1, [r5, #0]
 800af6e:	1c6e      	adds	r6, r5, #1
 800af70:	3930      	subs	r1, #48	; 0x30
 800af72:	2909      	cmp	r1, #9
 800af74:	d903      	bls.n	800af7e <_svfiprintf_r+0x1a6>
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0c5      	beq.n	800af06 <_svfiprintf_r+0x12e>
 800af7a:	9209      	str	r2, [sp, #36]	; 0x24
 800af7c:	e7c3      	b.n	800af06 <_svfiprintf_r+0x12e>
 800af7e:	4342      	muls	r2, r0
 800af80:	0035      	movs	r5, r6
 800af82:	2301      	movs	r3, #1
 800af84:	1852      	adds	r2, r2, r1
 800af86:	e7f1      	b.n	800af6c <_svfiprintf_r+0x194>
 800af88:	ab07      	add	r3, sp, #28
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	003a      	movs	r2, r7
 800af8e:	0021      	movs	r1, r4
 800af90:	4b10      	ldr	r3, [pc, #64]	; (800afd4 <_svfiprintf_r+0x1fc>)
 800af92:	9803      	ldr	r0, [sp, #12]
 800af94:	f7fd ffae 	bl	8008ef4 <_printf_float>
 800af98:	9004      	str	r0, [sp, #16]
 800af9a:	9b04      	ldr	r3, [sp, #16]
 800af9c:	3301      	adds	r3, #1
 800af9e:	d1d3      	bne.n	800af48 <_svfiprintf_r+0x170>
 800afa0:	89bb      	ldrh	r3, [r7, #12]
 800afa2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800afa4:	065b      	lsls	r3, r3, #25
 800afa6:	d400      	bmi.n	800afaa <_svfiprintf_r+0x1d2>
 800afa8:	e72d      	b.n	800ae06 <_svfiprintf_r+0x2e>
 800afaa:	2001      	movs	r0, #1
 800afac:	4240      	negs	r0, r0
 800afae:	e72a      	b.n	800ae06 <_svfiprintf_r+0x2e>
 800afb0:	ab07      	add	r3, sp, #28
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	003a      	movs	r2, r7
 800afb6:	0021      	movs	r1, r4
 800afb8:	4b06      	ldr	r3, [pc, #24]	; (800afd4 <_svfiprintf_r+0x1fc>)
 800afba:	9803      	ldr	r0, [sp, #12]
 800afbc:	f7fe fa58 	bl	8009470 <_printf_i>
 800afc0:	e7ea      	b.n	800af98 <_svfiprintf_r+0x1c0>
 800afc2:	46c0      	nop			; (mov r8, r8)
 800afc4:	0800da14 	.word	0x0800da14
 800afc8:	0800da1a 	.word	0x0800da1a
 800afcc:	0800da1e 	.word	0x0800da1e
 800afd0:	08008ef5 	.word	0x08008ef5
 800afd4:	0800ad15 	.word	0x0800ad15

0800afd8 <_sbrk_r>:
 800afd8:	2300      	movs	r3, #0
 800afda:	b570      	push	{r4, r5, r6, lr}
 800afdc:	4d06      	ldr	r5, [pc, #24]	; (800aff8 <_sbrk_r+0x20>)
 800afde:	0004      	movs	r4, r0
 800afe0:	0008      	movs	r0, r1
 800afe2:	602b      	str	r3, [r5, #0]
 800afe4:	f7fa fcea 	bl	80059bc <_sbrk>
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	d103      	bne.n	800aff4 <_sbrk_r+0x1c>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d000      	beq.n	800aff4 <_sbrk_r+0x1c>
 800aff2:	6023      	str	r3, [r4, #0]
 800aff4:	bd70      	pop	{r4, r5, r6, pc}
 800aff6:	46c0      	nop			; (mov r8, r8)
 800aff8:	20000594 	.word	0x20000594

0800affc <__assert_func>:
 800affc:	b530      	push	{r4, r5, lr}
 800affe:	0014      	movs	r4, r2
 800b000:	001a      	movs	r2, r3
 800b002:	4b09      	ldr	r3, [pc, #36]	; (800b028 <__assert_func+0x2c>)
 800b004:	0005      	movs	r5, r0
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	b085      	sub	sp, #20
 800b00a:	68d8      	ldr	r0, [r3, #12]
 800b00c:	4b07      	ldr	r3, [pc, #28]	; (800b02c <__assert_func+0x30>)
 800b00e:	2c00      	cmp	r4, #0
 800b010:	d101      	bne.n	800b016 <__assert_func+0x1a>
 800b012:	4b07      	ldr	r3, [pc, #28]	; (800b030 <__assert_func+0x34>)
 800b014:	001c      	movs	r4, r3
 800b016:	9301      	str	r3, [sp, #4]
 800b018:	9100      	str	r1, [sp, #0]
 800b01a:	002b      	movs	r3, r5
 800b01c:	4905      	ldr	r1, [pc, #20]	; (800b034 <__assert_func+0x38>)
 800b01e:	9402      	str	r4, [sp, #8]
 800b020:	f000 f80a 	bl	800b038 <fiprintf>
 800b024:	f000 fab2 	bl	800b58c <abort>
 800b028:	20000014 	.word	0x20000014
 800b02c:	0800da25 	.word	0x0800da25
 800b030:	0800da60 	.word	0x0800da60
 800b034:	0800da32 	.word	0x0800da32

0800b038 <fiprintf>:
 800b038:	b40e      	push	{r1, r2, r3}
 800b03a:	b503      	push	{r0, r1, lr}
 800b03c:	0001      	movs	r1, r0
 800b03e:	ab03      	add	r3, sp, #12
 800b040:	4804      	ldr	r0, [pc, #16]	; (800b054 <fiprintf+0x1c>)
 800b042:	cb04      	ldmia	r3!, {r2}
 800b044:	6800      	ldr	r0, [r0, #0]
 800b046:	9301      	str	r3, [sp, #4]
 800b048:	f000 f88a 	bl	800b160 <_vfiprintf_r>
 800b04c:	b002      	add	sp, #8
 800b04e:	bc08      	pop	{r3}
 800b050:	b003      	add	sp, #12
 800b052:	4718      	bx	r3
 800b054:	20000014 	.word	0x20000014

0800b058 <__ascii_mbtowc>:
 800b058:	b082      	sub	sp, #8
 800b05a:	2900      	cmp	r1, #0
 800b05c:	d100      	bne.n	800b060 <__ascii_mbtowc+0x8>
 800b05e:	a901      	add	r1, sp, #4
 800b060:	1e10      	subs	r0, r2, #0
 800b062:	d006      	beq.n	800b072 <__ascii_mbtowc+0x1a>
 800b064:	2b00      	cmp	r3, #0
 800b066:	d006      	beq.n	800b076 <__ascii_mbtowc+0x1e>
 800b068:	7813      	ldrb	r3, [r2, #0]
 800b06a:	600b      	str	r3, [r1, #0]
 800b06c:	7810      	ldrb	r0, [r2, #0]
 800b06e:	1e43      	subs	r3, r0, #1
 800b070:	4198      	sbcs	r0, r3
 800b072:	b002      	add	sp, #8
 800b074:	4770      	bx	lr
 800b076:	2002      	movs	r0, #2
 800b078:	4240      	negs	r0, r0
 800b07a:	e7fa      	b.n	800b072 <__ascii_mbtowc+0x1a>

0800b07c <memmove>:
 800b07c:	b510      	push	{r4, lr}
 800b07e:	4288      	cmp	r0, r1
 800b080:	d902      	bls.n	800b088 <memmove+0xc>
 800b082:	188b      	adds	r3, r1, r2
 800b084:	4298      	cmp	r0, r3
 800b086:	d303      	bcc.n	800b090 <memmove+0x14>
 800b088:	2300      	movs	r3, #0
 800b08a:	e007      	b.n	800b09c <memmove+0x20>
 800b08c:	5c8b      	ldrb	r3, [r1, r2]
 800b08e:	5483      	strb	r3, [r0, r2]
 800b090:	3a01      	subs	r2, #1
 800b092:	d2fb      	bcs.n	800b08c <memmove+0x10>
 800b094:	bd10      	pop	{r4, pc}
 800b096:	5ccc      	ldrb	r4, [r1, r3]
 800b098:	54c4      	strb	r4, [r0, r3]
 800b09a:	3301      	adds	r3, #1
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d1fa      	bne.n	800b096 <memmove+0x1a>
 800b0a0:	e7f8      	b.n	800b094 <memmove+0x18>
	...

0800b0a4 <__malloc_lock>:
 800b0a4:	b510      	push	{r4, lr}
 800b0a6:	4802      	ldr	r0, [pc, #8]	; (800b0b0 <__malloc_lock+0xc>)
 800b0a8:	f000 fc47 	bl	800b93a <__retarget_lock_acquire_recursive>
 800b0ac:	bd10      	pop	{r4, pc}
 800b0ae:	46c0      	nop			; (mov r8, r8)
 800b0b0:	2000059c 	.word	0x2000059c

0800b0b4 <__malloc_unlock>:
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	4802      	ldr	r0, [pc, #8]	; (800b0c0 <__malloc_unlock+0xc>)
 800b0b8:	f000 fc40 	bl	800b93c <__retarget_lock_release_recursive>
 800b0bc:	bd10      	pop	{r4, pc}
 800b0be:	46c0      	nop			; (mov r8, r8)
 800b0c0:	2000059c 	.word	0x2000059c

0800b0c4 <_realloc_r>:
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c6:	0007      	movs	r7, r0
 800b0c8:	000d      	movs	r5, r1
 800b0ca:	0016      	movs	r6, r2
 800b0cc:	2900      	cmp	r1, #0
 800b0ce:	d105      	bne.n	800b0dc <_realloc_r+0x18>
 800b0d0:	0011      	movs	r1, r2
 800b0d2:	f7ff fdc1 	bl	800ac58 <_malloc_r>
 800b0d6:	0004      	movs	r4, r0
 800b0d8:	0020      	movs	r0, r4
 800b0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0dc:	2a00      	cmp	r2, #0
 800b0de:	d103      	bne.n	800b0e8 <_realloc_r+0x24>
 800b0e0:	f7ff fd70 	bl	800abc4 <_free_r>
 800b0e4:	0034      	movs	r4, r6
 800b0e6:	e7f7      	b.n	800b0d8 <_realloc_r+0x14>
 800b0e8:	f000 fc96 	bl	800ba18 <_malloc_usable_size_r>
 800b0ec:	002c      	movs	r4, r5
 800b0ee:	42b0      	cmp	r0, r6
 800b0f0:	d2f2      	bcs.n	800b0d8 <_realloc_r+0x14>
 800b0f2:	0031      	movs	r1, r6
 800b0f4:	0038      	movs	r0, r7
 800b0f6:	f7ff fdaf 	bl	800ac58 <_malloc_r>
 800b0fa:	1e04      	subs	r4, r0, #0
 800b0fc:	d0ec      	beq.n	800b0d8 <_realloc_r+0x14>
 800b0fe:	0029      	movs	r1, r5
 800b100:	0032      	movs	r2, r6
 800b102:	f7ff f9aa 	bl	800a45a <memcpy>
 800b106:	0029      	movs	r1, r5
 800b108:	0038      	movs	r0, r7
 800b10a:	f7ff fd5b 	bl	800abc4 <_free_r>
 800b10e:	e7e3      	b.n	800b0d8 <_realloc_r+0x14>

0800b110 <__sfputc_r>:
 800b110:	6893      	ldr	r3, [r2, #8]
 800b112:	b510      	push	{r4, lr}
 800b114:	3b01      	subs	r3, #1
 800b116:	6093      	str	r3, [r2, #8]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	da04      	bge.n	800b126 <__sfputc_r+0x16>
 800b11c:	6994      	ldr	r4, [r2, #24]
 800b11e:	42a3      	cmp	r3, r4
 800b120:	db07      	blt.n	800b132 <__sfputc_r+0x22>
 800b122:	290a      	cmp	r1, #10
 800b124:	d005      	beq.n	800b132 <__sfputc_r+0x22>
 800b126:	6813      	ldr	r3, [r2, #0]
 800b128:	1c58      	adds	r0, r3, #1
 800b12a:	6010      	str	r0, [r2, #0]
 800b12c:	7019      	strb	r1, [r3, #0]
 800b12e:	0008      	movs	r0, r1
 800b130:	bd10      	pop	{r4, pc}
 800b132:	f000 f94f 	bl	800b3d4 <__swbuf_r>
 800b136:	0001      	movs	r1, r0
 800b138:	e7f9      	b.n	800b12e <__sfputc_r+0x1e>

0800b13a <__sfputs_r>:
 800b13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13c:	0006      	movs	r6, r0
 800b13e:	000f      	movs	r7, r1
 800b140:	0014      	movs	r4, r2
 800b142:	18d5      	adds	r5, r2, r3
 800b144:	42ac      	cmp	r4, r5
 800b146:	d101      	bne.n	800b14c <__sfputs_r+0x12>
 800b148:	2000      	movs	r0, #0
 800b14a:	e007      	b.n	800b15c <__sfputs_r+0x22>
 800b14c:	7821      	ldrb	r1, [r4, #0]
 800b14e:	003a      	movs	r2, r7
 800b150:	0030      	movs	r0, r6
 800b152:	f7ff ffdd 	bl	800b110 <__sfputc_r>
 800b156:	3401      	adds	r4, #1
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	d1f3      	bne.n	800b144 <__sfputs_r+0xa>
 800b15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b160 <_vfiprintf_r>:
 800b160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b162:	b0a1      	sub	sp, #132	; 0x84
 800b164:	0006      	movs	r6, r0
 800b166:	000c      	movs	r4, r1
 800b168:	001f      	movs	r7, r3
 800b16a:	9203      	str	r2, [sp, #12]
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d004      	beq.n	800b17a <_vfiprintf_r+0x1a>
 800b170:	6983      	ldr	r3, [r0, #24]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <_vfiprintf_r+0x1a>
 800b176:	f000 fb3f 	bl	800b7f8 <__sinit>
 800b17a:	4b8e      	ldr	r3, [pc, #568]	; (800b3b4 <_vfiprintf_r+0x254>)
 800b17c:	429c      	cmp	r4, r3
 800b17e:	d11c      	bne.n	800b1ba <_vfiprintf_r+0x5a>
 800b180:	6874      	ldr	r4, [r6, #4]
 800b182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b184:	07db      	lsls	r3, r3, #31
 800b186:	d405      	bmi.n	800b194 <_vfiprintf_r+0x34>
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	059b      	lsls	r3, r3, #22
 800b18c:	d402      	bmi.n	800b194 <_vfiprintf_r+0x34>
 800b18e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b190:	f000 fbd3 	bl	800b93a <__retarget_lock_acquire_recursive>
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	071b      	lsls	r3, r3, #28
 800b198:	d502      	bpl.n	800b1a0 <_vfiprintf_r+0x40>
 800b19a:	6923      	ldr	r3, [r4, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d11d      	bne.n	800b1dc <_vfiprintf_r+0x7c>
 800b1a0:	0021      	movs	r1, r4
 800b1a2:	0030      	movs	r0, r6
 800b1a4:	f000 f97a 	bl	800b49c <__swsetup_r>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d017      	beq.n	800b1dc <_vfiprintf_r+0x7c>
 800b1ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1ae:	07db      	lsls	r3, r3, #31
 800b1b0:	d50d      	bpl.n	800b1ce <_vfiprintf_r+0x6e>
 800b1b2:	2001      	movs	r0, #1
 800b1b4:	4240      	negs	r0, r0
 800b1b6:	b021      	add	sp, #132	; 0x84
 800b1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ba:	4b7f      	ldr	r3, [pc, #508]	; (800b3b8 <_vfiprintf_r+0x258>)
 800b1bc:	429c      	cmp	r4, r3
 800b1be:	d101      	bne.n	800b1c4 <_vfiprintf_r+0x64>
 800b1c0:	68b4      	ldr	r4, [r6, #8]
 800b1c2:	e7de      	b.n	800b182 <_vfiprintf_r+0x22>
 800b1c4:	4b7d      	ldr	r3, [pc, #500]	; (800b3bc <_vfiprintf_r+0x25c>)
 800b1c6:	429c      	cmp	r4, r3
 800b1c8:	d1db      	bne.n	800b182 <_vfiprintf_r+0x22>
 800b1ca:	68f4      	ldr	r4, [r6, #12]
 800b1cc:	e7d9      	b.n	800b182 <_vfiprintf_r+0x22>
 800b1ce:	89a3      	ldrh	r3, [r4, #12]
 800b1d0:	059b      	lsls	r3, r3, #22
 800b1d2:	d4ee      	bmi.n	800b1b2 <_vfiprintf_r+0x52>
 800b1d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1d6:	f000 fbb1 	bl	800b93c <__retarget_lock_release_recursive>
 800b1da:	e7ea      	b.n	800b1b2 <_vfiprintf_r+0x52>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	ad08      	add	r5, sp, #32
 800b1e0:	616b      	str	r3, [r5, #20]
 800b1e2:	3320      	adds	r3, #32
 800b1e4:	766b      	strb	r3, [r5, #25]
 800b1e6:	3310      	adds	r3, #16
 800b1e8:	76ab      	strb	r3, [r5, #26]
 800b1ea:	9707      	str	r7, [sp, #28]
 800b1ec:	9f03      	ldr	r7, [sp, #12]
 800b1ee:	783b      	ldrb	r3, [r7, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <_vfiprintf_r+0x98>
 800b1f4:	2b25      	cmp	r3, #37	; 0x25
 800b1f6:	d14e      	bne.n	800b296 <_vfiprintf_r+0x136>
 800b1f8:	9b03      	ldr	r3, [sp, #12]
 800b1fa:	1afb      	subs	r3, r7, r3
 800b1fc:	9305      	str	r3, [sp, #20]
 800b1fe:	9b03      	ldr	r3, [sp, #12]
 800b200:	429f      	cmp	r7, r3
 800b202:	d00d      	beq.n	800b220 <_vfiprintf_r+0xc0>
 800b204:	9b05      	ldr	r3, [sp, #20]
 800b206:	0021      	movs	r1, r4
 800b208:	0030      	movs	r0, r6
 800b20a:	9a03      	ldr	r2, [sp, #12]
 800b20c:	f7ff ff95 	bl	800b13a <__sfputs_r>
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	d100      	bne.n	800b216 <_vfiprintf_r+0xb6>
 800b214:	e0b5      	b.n	800b382 <_vfiprintf_r+0x222>
 800b216:	696a      	ldr	r2, [r5, #20]
 800b218:	9b05      	ldr	r3, [sp, #20]
 800b21a:	4694      	mov	ip, r2
 800b21c:	4463      	add	r3, ip
 800b21e:	616b      	str	r3, [r5, #20]
 800b220:	783b      	ldrb	r3, [r7, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d100      	bne.n	800b228 <_vfiprintf_r+0xc8>
 800b226:	e0ac      	b.n	800b382 <_vfiprintf_r+0x222>
 800b228:	2201      	movs	r2, #1
 800b22a:	1c7b      	adds	r3, r7, #1
 800b22c:	9303      	str	r3, [sp, #12]
 800b22e:	2300      	movs	r3, #0
 800b230:	4252      	negs	r2, r2
 800b232:	606a      	str	r2, [r5, #4]
 800b234:	a904      	add	r1, sp, #16
 800b236:	3254      	adds	r2, #84	; 0x54
 800b238:	1852      	adds	r2, r2, r1
 800b23a:	602b      	str	r3, [r5, #0]
 800b23c:	60eb      	str	r3, [r5, #12]
 800b23e:	60ab      	str	r3, [r5, #8]
 800b240:	7013      	strb	r3, [r2, #0]
 800b242:	65ab      	str	r3, [r5, #88]	; 0x58
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	2205      	movs	r2, #5
 800b248:	7819      	ldrb	r1, [r3, #0]
 800b24a:	485d      	ldr	r0, [pc, #372]	; (800b3c0 <_vfiprintf_r+0x260>)
 800b24c:	f7ff f8fa 	bl	800a444 <memchr>
 800b250:	9b03      	ldr	r3, [sp, #12]
 800b252:	1c5f      	adds	r7, r3, #1
 800b254:	2800      	cmp	r0, #0
 800b256:	d120      	bne.n	800b29a <_vfiprintf_r+0x13a>
 800b258:	682a      	ldr	r2, [r5, #0]
 800b25a:	06d3      	lsls	r3, r2, #27
 800b25c:	d504      	bpl.n	800b268 <_vfiprintf_r+0x108>
 800b25e:	2353      	movs	r3, #83	; 0x53
 800b260:	a904      	add	r1, sp, #16
 800b262:	185b      	adds	r3, r3, r1
 800b264:	2120      	movs	r1, #32
 800b266:	7019      	strb	r1, [r3, #0]
 800b268:	0713      	lsls	r3, r2, #28
 800b26a:	d504      	bpl.n	800b276 <_vfiprintf_r+0x116>
 800b26c:	2353      	movs	r3, #83	; 0x53
 800b26e:	a904      	add	r1, sp, #16
 800b270:	185b      	adds	r3, r3, r1
 800b272:	212b      	movs	r1, #43	; 0x2b
 800b274:	7019      	strb	r1, [r3, #0]
 800b276:	9b03      	ldr	r3, [sp, #12]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	2b2a      	cmp	r3, #42	; 0x2a
 800b27c:	d016      	beq.n	800b2ac <_vfiprintf_r+0x14c>
 800b27e:	2100      	movs	r1, #0
 800b280:	68eb      	ldr	r3, [r5, #12]
 800b282:	9f03      	ldr	r7, [sp, #12]
 800b284:	783a      	ldrb	r2, [r7, #0]
 800b286:	1c78      	adds	r0, r7, #1
 800b288:	3a30      	subs	r2, #48	; 0x30
 800b28a:	4684      	mov	ip, r0
 800b28c:	2a09      	cmp	r2, #9
 800b28e:	d94f      	bls.n	800b330 <_vfiprintf_r+0x1d0>
 800b290:	2900      	cmp	r1, #0
 800b292:	d111      	bne.n	800b2b8 <_vfiprintf_r+0x158>
 800b294:	e017      	b.n	800b2c6 <_vfiprintf_r+0x166>
 800b296:	3701      	adds	r7, #1
 800b298:	e7a9      	b.n	800b1ee <_vfiprintf_r+0x8e>
 800b29a:	4b49      	ldr	r3, [pc, #292]	; (800b3c0 <_vfiprintf_r+0x260>)
 800b29c:	682a      	ldr	r2, [r5, #0]
 800b29e:	1ac0      	subs	r0, r0, r3
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	4083      	lsls	r3, r0
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	602b      	str	r3, [r5, #0]
 800b2a8:	9703      	str	r7, [sp, #12]
 800b2aa:	e7cb      	b.n	800b244 <_vfiprintf_r+0xe4>
 800b2ac:	9b07      	ldr	r3, [sp, #28]
 800b2ae:	1d19      	adds	r1, r3, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	9107      	str	r1, [sp, #28]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	db01      	blt.n	800b2bc <_vfiprintf_r+0x15c>
 800b2b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2ba:	e004      	b.n	800b2c6 <_vfiprintf_r+0x166>
 800b2bc:	425b      	negs	r3, r3
 800b2be:	60eb      	str	r3, [r5, #12]
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	602b      	str	r3, [r5, #0]
 800b2c6:	783b      	ldrb	r3, [r7, #0]
 800b2c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ca:	d10a      	bne.n	800b2e2 <_vfiprintf_r+0x182>
 800b2cc:	787b      	ldrb	r3, [r7, #1]
 800b2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b2d0:	d137      	bne.n	800b342 <_vfiprintf_r+0x1e2>
 800b2d2:	9b07      	ldr	r3, [sp, #28]
 800b2d4:	3702      	adds	r7, #2
 800b2d6:	1d1a      	adds	r2, r3, #4
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	9207      	str	r2, [sp, #28]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	db2d      	blt.n	800b33c <_vfiprintf_r+0x1dc>
 800b2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e2:	2203      	movs	r2, #3
 800b2e4:	7839      	ldrb	r1, [r7, #0]
 800b2e6:	4837      	ldr	r0, [pc, #220]	; (800b3c4 <_vfiprintf_r+0x264>)
 800b2e8:	f7ff f8ac 	bl	800a444 <memchr>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d007      	beq.n	800b300 <_vfiprintf_r+0x1a0>
 800b2f0:	4b34      	ldr	r3, [pc, #208]	; (800b3c4 <_vfiprintf_r+0x264>)
 800b2f2:	682a      	ldr	r2, [r5, #0]
 800b2f4:	1ac0      	subs	r0, r0, r3
 800b2f6:	2340      	movs	r3, #64	; 0x40
 800b2f8:	4083      	lsls	r3, r0
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	3701      	adds	r7, #1
 800b2fe:	602b      	str	r3, [r5, #0]
 800b300:	7839      	ldrb	r1, [r7, #0]
 800b302:	1c7b      	adds	r3, r7, #1
 800b304:	2206      	movs	r2, #6
 800b306:	4830      	ldr	r0, [pc, #192]	; (800b3c8 <_vfiprintf_r+0x268>)
 800b308:	9303      	str	r3, [sp, #12]
 800b30a:	7629      	strb	r1, [r5, #24]
 800b30c:	f7ff f89a 	bl	800a444 <memchr>
 800b310:	2800      	cmp	r0, #0
 800b312:	d045      	beq.n	800b3a0 <_vfiprintf_r+0x240>
 800b314:	4b2d      	ldr	r3, [pc, #180]	; (800b3cc <_vfiprintf_r+0x26c>)
 800b316:	2b00      	cmp	r3, #0
 800b318:	d127      	bne.n	800b36a <_vfiprintf_r+0x20a>
 800b31a:	2207      	movs	r2, #7
 800b31c:	9b07      	ldr	r3, [sp, #28]
 800b31e:	3307      	adds	r3, #7
 800b320:	4393      	bics	r3, r2
 800b322:	3308      	adds	r3, #8
 800b324:	9307      	str	r3, [sp, #28]
 800b326:	696b      	ldr	r3, [r5, #20]
 800b328:	9a04      	ldr	r2, [sp, #16]
 800b32a:	189b      	adds	r3, r3, r2
 800b32c:	616b      	str	r3, [r5, #20]
 800b32e:	e75d      	b.n	800b1ec <_vfiprintf_r+0x8c>
 800b330:	210a      	movs	r1, #10
 800b332:	434b      	muls	r3, r1
 800b334:	4667      	mov	r7, ip
 800b336:	189b      	adds	r3, r3, r2
 800b338:	3909      	subs	r1, #9
 800b33a:	e7a3      	b.n	800b284 <_vfiprintf_r+0x124>
 800b33c:	2301      	movs	r3, #1
 800b33e:	425b      	negs	r3, r3
 800b340:	e7ce      	b.n	800b2e0 <_vfiprintf_r+0x180>
 800b342:	2300      	movs	r3, #0
 800b344:	001a      	movs	r2, r3
 800b346:	3701      	adds	r7, #1
 800b348:	606b      	str	r3, [r5, #4]
 800b34a:	7839      	ldrb	r1, [r7, #0]
 800b34c:	1c78      	adds	r0, r7, #1
 800b34e:	3930      	subs	r1, #48	; 0x30
 800b350:	4684      	mov	ip, r0
 800b352:	2909      	cmp	r1, #9
 800b354:	d903      	bls.n	800b35e <_vfiprintf_r+0x1fe>
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0c3      	beq.n	800b2e2 <_vfiprintf_r+0x182>
 800b35a:	9209      	str	r2, [sp, #36]	; 0x24
 800b35c:	e7c1      	b.n	800b2e2 <_vfiprintf_r+0x182>
 800b35e:	230a      	movs	r3, #10
 800b360:	435a      	muls	r2, r3
 800b362:	4667      	mov	r7, ip
 800b364:	1852      	adds	r2, r2, r1
 800b366:	3b09      	subs	r3, #9
 800b368:	e7ef      	b.n	800b34a <_vfiprintf_r+0x1ea>
 800b36a:	ab07      	add	r3, sp, #28
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	0022      	movs	r2, r4
 800b370:	0029      	movs	r1, r5
 800b372:	0030      	movs	r0, r6
 800b374:	4b16      	ldr	r3, [pc, #88]	; (800b3d0 <_vfiprintf_r+0x270>)
 800b376:	f7fd fdbd 	bl	8008ef4 <_printf_float>
 800b37a:	9004      	str	r0, [sp, #16]
 800b37c:	9b04      	ldr	r3, [sp, #16]
 800b37e:	3301      	adds	r3, #1
 800b380:	d1d1      	bne.n	800b326 <_vfiprintf_r+0x1c6>
 800b382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b384:	07db      	lsls	r3, r3, #31
 800b386:	d405      	bmi.n	800b394 <_vfiprintf_r+0x234>
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	059b      	lsls	r3, r3, #22
 800b38c:	d402      	bmi.n	800b394 <_vfiprintf_r+0x234>
 800b38e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b390:	f000 fad4 	bl	800b93c <__retarget_lock_release_recursive>
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	065b      	lsls	r3, r3, #25
 800b398:	d500      	bpl.n	800b39c <_vfiprintf_r+0x23c>
 800b39a:	e70a      	b.n	800b1b2 <_vfiprintf_r+0x52>
 800b39c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b39e:	e70a      	b.n	800b1b6 <_vfiprintf_r+0x56>
 800b3a0:	ab07      	add	r3, sp, #28
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	0022      	movs	r2, r4
 800b3a6:	0029      	movs	r1, r5
 800b3a8:	0030      	movs	r0, r6
 800b3aa:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <_vfiprintf_r+0x270>)
 800b3ac:	f7fe f860 	bl	8009470 <_printf_i>
 800b3b0:	e7e3      	b.n	800b37a <_vfiprintf_r+0x21a>
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	0800db8c 	.word	0x0800db8c
 800b3b8:	0800dbac 	.word	0x0800dbac
 800b3bc:	0800db6c 	.word	0x0800db6c
 800b3c0:	0800da14 	.word	0x0800da14
 800b3c4:	0800da1a 	.word	0x0800da1a
 800b3c8:	0800da1e 	.word	0x0800da1e
 800b3cc:	08008ef5 	.word	0x08008ef5
 800b3d0:	0800b13b 	.word	0x0800b13b

0800b3d4 <__swbuf_r>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	0005      	movs	r5, r0
 800b3d8:	000e      	movs	r6, r1
 800b3da:	0014      	movs	r4, r2
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d004      	beq.n	800b3ea <__swbuf_r+0x16>
 800b3e0:	6983      	ldr	r3, [r0, #24]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d101      	bne.n	800b3ea <__swbuf_r+0x16>
 800b3e6:	f000 fa07 	bl	800b7f8 <__sinit>
 800b3ea:	4b22      	ldr	r3, [pc, #136]	; (800b474 <__swbuf_r+0xa0>)
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	d12e      	bne.n	800b44e <__swbuf_r+0x7a>
 800b3f0:	686c      	ldr	r4, [r5, #4]
 800b3f2:	69a3      	ldr	r3, [r4, #24]
 800b3f4:	60a3      	str	r3, [r4, #8]
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	071b      	lsls	r3, r3, #28
 800b3fa:	d532      	bpl.n	800b462 <__swbuf_r+0x8e>
 800b3fc:	6923      	ldr	r3, [r4, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d02f      	beq.n	800b462 <__swbuf_r+0x8e>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	6922      	ldr	r2, [r4, #16]
 800b406:	b2f7      	uxtb	r7, r6
 800b408:	1a98      	subs	r0, r3, r2
 800b40a:	6963      	ldr	r3, [r4, #20]
 800b40c:	b2f6      	uxtb	r6, r6
 800b40e:	4283      	cmp	r3, r0
 800b410:	dc05      	bgt.n	800b41e <__swbuf_r+0x4a>
 800b412:	0021      	movs	r1, r4
 800b414:	0028      	movs	r0, r5
 800b416:	f000 f94d 	bl	800b6b4 <_fflush_r>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d127      	bne.n	800b46e <__swbuf_r+0x9a>
 800b41e:	68a3      	ldr	r3, [r4, #8]
 800b420:	3001      	adds	r0, #1
 800b422:	3b01      	subs	r3, #1
 800b424:	60a3      	str	r3, [r4, #8]
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	6022      	str	r2, [r4, #0]
 800b42c:	701f      	strb	r7, [r3, #0]
 800b42e:	6963      	ldr	r3, [r4, #20]
 800b430:	4283      	cmp	r3, r0
 800b432:	d004      	beq.n	800b43e <__swbuf_r+0x6a>
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	07db      	lsls	r3, r3, #31
 800b438:	d507      	bpl.n	800b44a <__swbuf_r+0x76>
 800b43a:	2e0a      	cmp	r6, #10
 800b43c:	d105      	bne.n	800b44a <__swbuf_r+0x76>
 800b43e:	0021      	movs	r1, r4
 800b440:	0028      	movs	r0, r5
 800b442:	f000 f937 	bl	800b6b4 <_fflush_r>
 800b446:	2800      	cmp	r0, #0
 800b448:	d111      	bne.n	800b46e <__swbuf_r+0x9a>
 800b44a:	0030      	movs	r0, r6
 800b44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b44e:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <__swbuf_r+0xa4>)
 800b450:	429c      	cmp	r4, r3
 800b452:	d101      	bne.n	800b458 <__swbuf_r+0x84>
 800b454:	68ac      	ldr	r4, [r5, #8]
 800b456:	e7cc      	b.n	800b3f2 <__swbuf_r+0x1e>
 800b458:	4b08      	ldr	r3, [pc, #32]	; (800b47c <__swbuf_r+0xa8>)
 800b45a:	429c      	cmp	r4, r3
 800b45c:	d1c9      	bne.n	800b3f2 <__swbuf_r+0x1e>
 800b45e:	68ec      	ldr	r4, [r5, #12]
 800b460:	e7c7      	b.n	800b3f2 <__swbuf_r+0x1e>
 800b462:	0021      	movs	r1, r4
 800b464:	0028      	movs	r0, r5
 800b466:	f000 f819 	bl	800b49c <__swsetup_r>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d0c9      	beq.n	800b402 <__swbuf_r+0x2e>
 800b46e:	2601      	movs	r6, #1
 800b470:	4276      	negs	r6, r6
 800b472:	e7ea      	b.n	800b44a <__swbuf_r+0x76>
 800b474:	0800db8c 	.word	0x0800db8c
 800b478:	0800dbac 	.word	0x0800dbac
 800b47c:	0800db6c 	.word	0x0800db6c

0800b480 <__ascii_wctomb>:
 800b480:	0003      	movs	r3, r0
 800b482:	1e08      	subs	r0, r1, #0
 800b484:	d005      	beq.n	800b492 <__ascii_wctomb+0x12>
 800b486:	2aff      	cmp	r2, #255	; 0xff
 800b488:	d904      	bls.n	800b494 <__ascii_wctomb+0x14>
 800b48a:	228a      	movs	r2, #138	; 0x8a
 800b48c:	2001      	movs	r0, #1
 800b48e:	601a      	str	r2, [r3, #0]
 800b490:	4240      	negs	r0, r0
 800b492:	4770      	bx	lr
 800b494:	2001      	movs	r0, #1
 800b496:	700a      	strb	r2, [r1, #0]
 800b498:	e7fb      	b.n	800b492 <__ascii_wctomb+0x12>
	...

0800b49c <__swsetup_r>:
 800b49c:	4b37      	ldr	r3, [pc, #220]	; (800b57c <__swsetup_r+0xe0>)
 800b49e:	b570      	push	{r4, r5, r6, lr}
 800b4a0:	681d      	ldr	r5, [r3, #0]
 800b4a2:	0006      	movs	r6, r0
 800b4a4:	000c      	movs	r4, r1
 800b4a6:	2d00      	cmp	r5, #0
 800b4a8:	d005      	beq.n	800b4b6 <__swsetup_r+0x1a>
 800b4aa:	69ab      	ldr	r3, [r5, #24]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d102      	bne.n	800b4b6 <__swsetup_r+0x1a>
 800b4b0:	0028      	movs	r0, r5
 800b4b2:	f000 f9a1 	bl	800b7f8 <__sinit>
 800b4b6:	4b32      	ldr	r3, [pc, #200]	; (800b580 <__swsetup_r+0xe4>)
 800b4b8:	429c      	cmp	r4, r3
 800b4ba:	d10f      	bne.n	800b4dc <__swsetup_r+0x40>
 800b4bc:	686c      	ldr	r4, [r5, #4]
 800b4be:	230c      	movs	r3, #12
 800b4c0:	5ee2      	ldrsh	r2, [r4, r3]
 800b4c2:	b293      	uxth	r3, r2
 800b4c4:	0711      	lsls	r1, r2, #28
 800b4c6:	d42d      	bmi.n	800b524 <__swsetup_r+0x88>
 800b4c8:	06d9      	lsls	r1, r3, #27
 800b4ca:	d411      	bmi.n	800b4f0 <__swsetup_r+0x54>
 800b4cc:	2309      	movs	r3, #9
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	6033      	str	r3, [r6, #0]
 800b4d2:	3337      	adds	r3, #55	; 0x37
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	81a3      	strh	r3, [r4, #12]
 800b4d8:	4240      	negs	r0, r0
 800b4da:	bd70      	pop	{r4, r5, r6, pc}
 800b4dc:	4b29      	ldr	r3, [pc, #164]	; (800b584 <__swsetup_r+0xe8>)
 800b4de:	429c      	cmp	r4, r3
 800b4e0:	d101      	bne.n	800b4e6 <__swsetup_r+0x4a>
 800b4e2:	68ac      	ldr	r4, [r5, #8]
 800b4e4:	e7eb      	b.n	800b4be <__swsetup_r+0x22>
 800b4e6:	4b28      	ldr	r3, [pc, #160]	; (800b588 <__swsetup_r+0xec>)
 800b4e8:	429c      	cmp	r4, r3
 800b4ea:	d1e8      	bne.n	800b4be <__swsetup_r+0x22>
 800b4ec:	68ec      	ldr	r4, [r5, #12]
 800b4ee:	e7e6      	b.n	800b4be <__swsetup_r+0x22>
 800b4f0:	075b      	lsls	r3, r3, #29
 800b4f2:	d513      	bpl.n	800b51c <__swsetup_r+0x80>
 800b4f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4f6:	2900      	cmp	r1, #0
 800b4f8:	d008      	beq.n	800b50c <__swsetup_r+0x70>
 800b4fa:	0023      	movs	r3, r4
 800b4fc:	3344      	adds	r3, #68	; 0x44
 800b4fe:	4299      	cmp	r1, r3
 800b500:	d002      	beq.n	800b508 <__swsetup_r+0x6c>
 800b502:	0030      	movs	r0, r6
 800b504:	f7ff fb5e 	bl	800abc4 <_free_r>
 800b508:	2300      	movs	r3, #0
 800b50a:	6363      	str	r3, [r4, #52]	; 0x34
 800b50c:	2224      	movs	r2, #36	; 0x24
 800b50e:	89a3      	ldrh	r3, [r4, #12]
 800b510:	4393      	bics	r3, r2
 800b512:	81a3      	strh	r3, [r4, #12]
 800b514:	2300      	movs	r3, #0
 800b516:	6063      	str	r3, [r4, #4]
 800b518:	6923      	ldr	r3, [r4, #16]
 800b51a:	6023      	str	r3, [r4, #0]
 800b51c:	2308      	movs	r3, #8
 800b51e:	89a2      	ldrh	r2, [r4, #12]
 800b520:	4313      	orrs	r3, r2
 800b522:	81a3      	strh	r3, [r4, #12]
 800b524:	6923      	ldr	r3, [r4, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10b      	bne.n	800b542 <__swsetup_r+0xa6>
 800b52a:	21a0      	movs	r1, #160	; 0xa0
 800b52c:	2280      	movs	r2, #128	; 0x80
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	0089      	lsls	r1, r1, #2
 800b532:	0092      	lsls	r2, r2, #2
 800b534:	400b      	ands	r3, r1
 800b536:	4293      	cmp	r3, r2
 800b538:	d003      	beq.n	800b542 <__swsetup_r+0xa6>
 800b53a:	0021      	movs	r1, r4
 800b53c:	0030      	movs	r0, r6
 800b53e:	f000 fa27 	bl	800b990 <__smakebuf_r>
 800b542:	220c      	movs	r2, #12
 800b544:	5ea3      	ldrsh	r3, [r4, r2]
 800b546:	2001      	movs	r0, #1
 800b548:	001a      	movs	r2, r3
 800b54a:	b299      	uxth	r1, r3
 800b54c:	4002      	ands	r2, r0
 800b54e:	4203      	tst	r3, r0
 800b550:	d00f      	beq.n	800b572 <__swsetup_r+0xd6>
 800b552:	2200      	movs	r2, #0
 800b554:	60a2      	str	r2, [r4, #8]
 800b556:	6962      	ldr	r2, [r4, #20]
 800b558:	4252      	negs	r2, r2
 800b55a:	61a2      	str	r2, [r4, #24]
 800b55c:	2000      	movs	r0, #0
 800b55e:	6922      	ldr	r2, [r4, #16]
 800b560:	4282      	cmp	r2, r0
 800b562:	d1ba      	bne.n	800b4da <__swsetup_r+0x3e>
 800b564:	060a      	lsls	r2, r1, #24
 800b566:	d5b8      	bpl.n	800b4da <__swsetup_r+0x3e>
 800b568:	2240      	movs	r2, #64	; 0x40
 800b56a:	4313      	orrs	r3, r2
 800b56c:	81a3      	strh	r3, [r4, #12]
 800b56e:	3801      	subs	r0, #1
 800b570:	e7b3      	b.n	800b4da <__swsetup_r+0x3e>
 800b572:	0788      	lsls	r0, r1, #30
 800b574:	d400      	bmi.n	800b578 <__swsetup_r+0xdc>
 800b576:	6962      	ldr	r2, [r4, #20]
 800b578:	60a2      	str	r2, [r4, #8]
 800b57a:	e7ef      	b.n	800b55c <__swsetup_r+0xc0>
 800b57c:	20000014 	.word	0x20000014
 800b580:	0800db8c 	.word	0x0800db8c
 800b584:	0800dbac 	.word	0x0800dbac
 800b588:	0800db6c 	.word	0x0800db6c

0800b58c <abort>:
 800b58c:	2006      	movs	r0, #6
 800b58e:	b510      	push	{r4, lr}
 800b590:	f000 fa74 	bl	800ba7c <raise>
 800b594:	2001      	movs	r0, #1
 800b596:	f7fa f9a0 	bl	80058da <_exit>
	...

0800b59c <__sflush_r>:
 800b59c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b59e:	898b      	ldrh	r3, [r1, #12]
 800b5a0:	0005      	movs	r5, r0
 800b5a2:	000c      	movs	r4, r1
 800b5a4:	071a      	lsls	r2, r3, #28
 800b5a6:	d45f      	bmi.n	800b668 <__sflush_r+0xcc>
 800b5a8:	684a      	ldr	r2, [r1, #4]
 800b5aa:	2a00      	cmp	r2, #0
 800b5ac:	dc04      	bgt.n	800b5b8 <__sflush_r+0x1c>
 800b5ae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b5b0:	2a00      	cmp	r2, #0
 800b5b2:	dc01      	bgt.n	800b5b8 <__sflush_r+0x1c>
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b5ba:	2f00      	cmp	r7, #0
 800b5bc:	d0fa      	beq.n	800b5b4 <__sflush_r+0x18>
 800b5be:	2200      	movs	r2, #0
 800b5c0:	2180      	movs	r1, #128	; 0x80
 800b5c2:	682e      	ldr	r6, [r5, #0]
 800b5c4:	602a      	str	r2, [r5, #0]
 800b5c6:	001a      	movs	r2, r3
 800b5c8:	0149      	lsls	r1, r1, #5
 800b5ca:	400a      	ands	r2, r1
 800b5cc:	420b      	tst	r3, r1
 800b5ce:	d034      	beq.n	800b63a <__sflush_r+0x9e>
 800b5d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	075b      	lsls	r3, r3, #29
 800b5d6:	d506      	bpl.n	800b5e6 <__sflush_r+0x4a>
 800b5d8:	6863      	ldr	r3, [r4, #4]
 800b5da:	1ac0      	subs	r0, r0, r3
 800b5dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <__sflush_r+0x4a>
 800b5e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5e4:	1ac0      	subs	r0, r0, r3
 800b5e6:	0002      	movs	r2, r0
 800b5e8:	6a21      	ldr	r1, [r4, #32]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	0028      	movs	r0, r5
 800b5ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b5f0:	47b8      	blx	r7
 800b5f2:	89a1      	ldrh	r1, [r4, #12]
 800b5f4:	1c43      	adds	r3, r0, #1
 800b5f6:	d106      	bne.n	800b606 <__sflush_r+0x6a>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	2b1d      	cmp	r3, #29
 800b5fc:	d831      	bhi.n	800b662 <__sflush_r+0xc6>
 800b5fe:	4a2c      	ldr	r2, [pc, #176]	; (800b6b0 <__sflush_r+0x114>)
 800b600:	40da      	lsrs	r2, r3
 800b602:	07d3      	lsls	r3, r2, #31
 800b604:	d52d      	bpl.n	800b662 <__sflush_r+0xc6>
 800b606:	2300      	movs	r3, #0
 800b608:	6063      	str	r3, [r4, #4]
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	04cb      	lsls	r3, r1, #19
 800b610:	d505      	bpl.n	800b61e <__sflush_r+0x82>
 800b612:	1c43      	adds	r3, r0, #1
 800b614:	d102      	bne.n	800b61c <__sflush_r+0x80>
 800b616:	682b      	ldr	r3, [r5, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d100      	bne.n	800b61e <__sflush_r+0x82>
 800b61c:	6560      	str	r0, [r4, #84]	; 0x54
 800b61e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b620:	602e      	str	r6, [r5, #0]
 800b622:	2900      	cmp	r1, #0
 800b624:	d0c6      	beq.n	800b5b4 <__sflush_r+0x18>
 800b626:	0023      	movs	r3, r4
 800b628:	3344      	adds	r3, #68	; 0x44
 800b62a:	4299      	cmp	r1, r3
 800b62c:	d002      	beq.n	800b634 <__sflush_r+0x98>
 800b62e:	0028      	movs	r0, r5
 800b630:	f7ff fac8 	bl	800abc4 <_free_r>
 800b634:	2000      	movs	r0, #0
 800b636:	6360      	str	r0, [r4, #52]	; 0x34
 800b638:	e7bd      	b.n	800b5b6 <__sflush_r+0x1a>
 800b63a:	2301      	movs	r3, #1
 800b63c:	0028      	movs	r0, r5
 800b63e:	6a21      	ldr	r1, [r4, #32]
 800b640:	47b8      	blx	r7
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	d1c5      	bne.n	800b5d2 <__sflush_r+0x36>
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d0c2      	beq.n	800b5d2 <__sflush_r+0x36>
 800b64c:	2b1d      	cmp	r3, #29
 800b64e:	d001      	beq.n	800b654 <__sflush_r+0xb8>
 800b650:	2b16      	cmp	r3, #22
 800b652:	d101      	bne.n	800b658 <__sflush_r+0xbc>
 800b654:	602e      	str	r6, [r5, #0]
 800b656:	e7ad      	b.n	800b5b4 <__sflush_r+0x18>
 800b658:	2340      	movs	r3, #64	; 0x40
 800b65a:	89a2      	ldrh	r2, [r4, #12]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	81a3      	strh	r3, [r4, #12]
 800b660:	e7a9      	b.n	800b5b6 <__sflush_r+0x1a>
 800b662:	2340      	movs	r3, #64	; 0x40
 800b664:	430b      	orrs	r3, r1
 800b666:	e7fa      	b.n	800b65e <__sflush_r+0xc2>
 800b668:	690f      	ldr	r7, [r1, #16]
 800b66a:	2f00      	cmp	r7, #0
 800b66c:	d0a2      	beq.n	800b5b4 <__sflush_r+0x18>
 800b66e:	680a      	ldr	r2, [r1, #0]
 800b670:	600f      	str	r7, [r1, #0]
 800b672:	1bd2      	subs	r2, r2, r7
 800b674:	9201      	str	r2, [sp, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	079b      	lsls	r3, r3, #30
 800b67a:	d100      	bne.n	800b67e <__sflush_r+0xe2>
 800b67c:	694a      	ldr	r2, [r1, #20]
 800b67e:	60a2      	str	r2, [r4, #8]
 800b680:	9b01      	ldr	r3, [sp, #4]
 800b682:	2b00      	cmp	r3, #0
 800b684:	dc00      	bgt.n	800b688 <__sflush_r+0xec>
 800b686:	e795      	b.n	800b5b4 <__sflush_r+0x18>
 800b688:	003a      	movs	r2, r7
 800b68a:	0028      	movs	r0, r5
 800b68c:	9b01      	ldr	r3, [sp, #4]
 800b68e:	6a21      	ldr	r1, [r4, #32]
 800b690:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b692:	47b0      	blx	r6
 800b694:	2800      	cmp	r0, #0
 800b696:	dc06      	bgt.n	800b6a6 <__sflush_r+0x10a>
 800b698:	2340      	movs	r3, #64	; 0x40
 800b69a:	2001      	movs	r0, #1
 800b69c:	89a2      	ldrh	r2, [r4, #12]
 800b69e:	4240      	negs	r0, r0
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	81a3      	strh	r3, [r4, #12]
 800b6a4:	e787      	b.n	800b5b6 <__sflush_r+0x1a>
 800b6a6:	9b01      	ldr	r3, [sp, #4]
 800b6a8:	183f      	adds	r7, r7, r0
 800b6aa:	1a1b      	subs	r3, r3, r0
 800b6ac:	9301      	str	r3, [sp, #4]
 800b6ae:	e7e7      	b.n	800b680 <__sflush_r+0xe4>
 800b6b0:	20400001 	.word	0x20400001

0800b6b4 <_fflush_r>:
 800b6b4:	690b      	ldr	r3, [r1, #16]
 800b6b6:	b570      	push	{r4, r5, r6, lr}
 800b6b8:	0005      	movs	r5, r0
 800b6ba:	000c      	movs	r4, r1
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d102      	bne.n	800b6c6 <_fflush_r+0x12>
 800b6c0:	2500      	movs	r5, #0
 800b6c2:	0028      	movs	r0, r5
 800b6c4:	bd70      	pop	{r4, r5, r6, pc}
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d004      	beq.n	800b6d4 <_fflush_r+0x20>
 800b6ca:	6983      	ldr	r3, [r0, #24]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <_fflush_r+0x20>
 800b6d0:	f000 f892 	bl	800b7f8 <__sinit>
 800b6d4:	4b14      	ldr	r3, [pc, #80]	; (800b728 <_fflush_r+0x74>)
 800b6d6:	429c      	cmp	r4, r3
 800b6d8:	d11b      	bne.n	800b712 <_fflush_r+0x5e>
 800b6da:	686c      	ldr	r4, [r5, #4]
 800b6dc:	220c      	movs	r2, #12
 800b6de:	5ea3      	ldrsh	r3, [r4, r2]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d0ed      	beq.n	800b6c0 <_fflush_r+0xc>
 800b6e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6e6:	07d2      	lsls	r2, r2, #31
 800b6e8:	d404      	bmi.n	800b6f4 <_fflush_r+0x40>
 800b6ea:	059b      	lsls	r3, r3, #22
 800b6ec:	d402      	bmi.n	800b6f4 <_fflush_r+0x40>
 800b6ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f0:	f000 f923 	bl	800b93a <__retarget_lock_acquire_recursive>
 800b6f4:	0028      	movs	r0, r5
 800b6f6:	0021      	movs	r1, r4
 800b6f8:	f7ff ff50 	bl	800b59c <__sflush_r>
 800b6fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6fe:	0005      	movs	r5, r0
 800b700:	07db      	lsls	r3, r3, #31
 800b702:	d4de      	bmi.n	800b6c2 <_fflush_r+0xe>
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	059b      	lsls	r3, r3, #22
 800b708:	d4db      	bmi.n	800b6c2 <_fflush_r+0xe>
 800b70a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b70c:	f000 f916 	bl	800b93c <__retarget_lock_release_recursive>
 800b710:	e7d7      	b.n	800b6c2 <_fflush_r+0xe>
 800b712:	4b06      	ldr	r3, [pc, #24]	; (800b72c <_fflush_r+0x78>)
 800b714:	429c      	cmp	r4, r3
 800b716:	d101      	bne.n	800b71c <_fflush_r+0x68>
 800b718:	68ac      	ldr	r4, [r5, #8]
 800b71a:	e7df      	b.n	800b6dc <_fflush_r+0x28>
 800b71c:	4b04      	ldr	r3, [pc, #16]	; (800b730 <_fflush_r+0x7c>)
 800b71e:	429c      	cmp	r4, r3
 800b720:	d1dc      	bne.n	800b6dc <_fflush_r+0x28>
 800b722:	68ec      	ldr	r4, [r5, #12]
 800b724:	e7da      	b.n	800b6dc <_fflush_r+0x28>
 800b726:	46c0      	nop			; (mov r8, r8)
 800b728:	0800db8c 	.word	0x0800db8c
 800b72c:	0800dbac 	.word	0x0800dbac
 800b730:	0800db6c 	.word	0x0800db6c

0800b734 <std>:
 800b734:	2300      	movs	r3, #0
 800b736:	b510      	push	{r4, lr}
 800b738:	0004      	movs	r4, r0
 800b73a:	6003      	str	r3, [r0, #0]
 800b73c:	6043      	str	r3, [r0, #4]
 800b73e:	6083      	str	r3, [r0, #8]
 800b740:	8181      	strh	r1, [r0, #12]
 800b742:	6643      	str	r3, [r0, #100]	; 0x64
 800b744:	0019      	movs	r1, r3
 800b746:	81c2      	strh	r2, [r0, #14]
 800b748:	6103      	str	r3, [r0, #16]
 800b74a:	6143      	str	r3, [r0, #20]
 800b74c:	6183      	str	r3, [r0, #24]
 800b74e:	2208      	movs	r2, #8
 800b750:	305c      	adds	r0, #92	; 0x5c
 800b752:	f7fd fb1d 	bl	8008d90 <memset>
 800b756:	4b05      	ldr	r3, [pc, #20]	; (800b76c <std+0x38>)
 800b758:	6263      	str	r3, [r4, #36]	; 0x24
 800b75a:	4b05      	ldr	r3, [pc, #20]	; (800b770 <std+0x3c>)
 800b75c:	6224      	str	r4, [r4, #32]
 800b75e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b760:	4b04      	ldr	r3, [pc, #16]	; (800b774 <std+0x40>)
 800b762:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b764:	4b04      	ldr	r3, [pc, #16]	; (800b778 <std+0x44>)
 800b766:	6323      	str	r3, [r4, #48]	; 0x30
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	46c0      	nop			; (mov r8, r8)
 800b76c:	0800babd 	.word	0x0800babd
 800b770:	0800bae5 	.word	0x0800bae5
 800b774:	0800bb1d 	.word	0x0800bb1d
 800b778:	0800bb49 	.word	0x0800bb49

0800b77c <_cleanup_r>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	4902      	ldr	r1, [pc, #8]	; (800b788 <_cleanup_r+0xc>)
 800b780:	f000 f8ba 	bl	800b8f8 <_fwalk_reent>
 800b784:	bd10      	pop	{r4, pc}
 800b786:	46c0      	nop			; (mov r8, r8)
 800b788:	0800b6b5 	.word	0x0800b6b5

0800b78c <__sfmoreglue>:
 800b78c:	b570      	push	{r4, r5, r6, lr}
 800b78e:	2568      	movs	r5, #104	; 0x68
 800b790:	1e4a      	subs	r2, r1, #1
 800b792:	4355      	muls	r5, r2
 800b794:	000e      	movs	r6, r1
 800b796:	0029      	movs	r1, r5
 800b798:	3174      	adds	r1, #116	; 0x74
 800b79a:	f7ff fa5d 	bl	800ac58 <_malloc_r>
 800b79e:	1e04      	subs	r4, r0, #0
 800b7a0:	d008      	beq.n	800b7b4 <__sfmoreglue+0x28>
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	002a      	movs	r2, r5
 800b7a6:	6001      	str	r1, [r0, #0]
 800b7a8:	6046      	str	r6, [r0, #4]
 800b7aa:	300c      	adds	r0, #12
 800b7ac:	60a0      	str	r0, [r4, #8]
 800b7ae:	3268      	adds	r2, #104	; 0x68
 800b7b0:	f7fd faee 	bl	8008d90 <memset>
 800b7b4:	0020      	movs	r0, r4
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}

0800b7b8 <__sfp_lock_acquire>:
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	4802      	ldr	r0, [pc, #8]	; (800b7c4 <__sfp_lock_acquire+0xc>)
 800b7bc:	f000 f8bd 	bl	800b93a <__retarget_lock_acquire_recursive>
 800b7c0:	bd10      	pop	{r4, pc}
 800b7c2:	46c0      	nop			; (mov r8, r8)
 800b7c4:	200005a0 	.word	0x200005a0

0800b7c8 <__sfp_lock_release>:
 800b7c8:	b510      	push	{r4, lr}
 800b7ca:	4802      	ldr	r0, [pc, #8]	; (800b7d4 <__sfp_lock_release+0xc>)
 800b7cc:	f000 f8b6 	bl	800b93c <__retarget_lock_release_recursive>
 800b7d0:	bd10      	pop	{r4, pc}
 800b7d2:	46c0      	nop			; (mov r8, r8)
 800b7d4:	200005a0 	.word	0x200005a0

0800b7d8 <__sinit_lock_acquire>:
 800b7d8:	b510      	push	{r4, lr}
 800b7da:	4802      	ldr	r0, [pc, #8]	; (800b7e4 <__sinit_lock_acquire+0xc>)
 800b7dc:	f000 f8ad 	bl	800b93a <__retarget_lock_acquire_recursive>
 800b7e0:	bd10      	pop	{r4, pc}
 800b7e2:	46c0      	nop			; (mov r8, r8)
 800b7e4:	2000059b 	.word	0x2000059b

0800b7e8 <__sinit_lock_release>:
 800b7e8:	b510      	push	{r4, lr}
 800b7ea:	4802      	ldr	r0, [pc, #8]	; (800b7f4 <__sinit_lock_release+0xc>)
 800b7ec:	f000 f8a6 	bl	800b93c <__retarget_lock_release_recursive>
 800b7f0:	bd10      	pop	{r4, pc}
 800b7f2:	46c0      	nop			; (mov r8, r8)
 800b7f4:	2000059b 	.word	0x2000059b

0800b7f8 <__sinit>:
 800b7f8:	b513      	push	{r0, r1, r4, lr}
 800b7fa:	0004      	movs	r4, r0
 800b7fc:	f7ff ffec 	bl	800b7d8 <__sinit_lock_acquire>
 800b800:	69a3      	ldr	r3, [r4, #24]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <__sinit+0x14>
 800b806:	f7ff ffef 	bl	800b7e8 <__sinit_lock_release>
 800b80a:	bd13      	pop	{r0, r1, r4, pc}
 800b80c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b80e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b810:	6523      	str	r3, [r4, #80]	; 0x50
 800b812:	4b13      	ldr	r3, [pc, #76]	; (800b860 <__sinit+0x68>)
 800b814:	4a13      	ldr	r2, [pc, #76]	; (800b864 <__sinit+0x6c>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	62a2      	str	r2, [r4, #40]	; 0x28
 800b81a:	9301      	str	r3, [sp, #4]
 800b81c:	42a3      	cmp	r3, r4
 800b81e:	d101      	bne.n	800b824 <__sinit+0x2c>
 800b820:	2301      	movs	r3, #1
 800b822:	61a3      	str	r3, [r4, #24]
 800b824:	0020      	movs	r0, r4
 800b826:	f000 f81f 	bl	800b868 <__sfp>
 800b82a:	6060      	str	r0, [r4, #4]
 800b82c:	0020      	movs	r0, r4
 800b82e:	f000 f81b 	bl	800b868 <__sfp>
 800b832:	60a0      	str	r0, [r4, #8]
 800b834:	0020      	movs	r0, r4
 800b836:	f000 f817 	bl	800b868 <__sfp>
 800b83a:	2200      	movs	r2, #0
 800b83c:	2104      	movs	r1, #4
 800b83e:	60e0      	str	r0, [r4, #12]
 800b840:	6860      	ldr	r0, [r4, #4]
 800b842:	f7ff ff77 	bl	800b734 <std>
 800b846:	2201      	movs	r2, #1
 800b848:	2109      	movs	r1, #9
 800b84a:	68a0      	ldr	r0, [r4, #8]
 800b84c:	f7ff ff72 	bl	800b734 <std>
 800b850:	2202      	movs	r2, #2
 800b852:	2112      	movs	r1, #18
 800b854:	68e0      	ldr	r0, [r4, #12]
 800b856:	f7ff ff6d 	bl	800b734 <std>
 800b85a:	2301      	movs	r3, #1
 800b85c:	61a3      	str	r3, [r4, #24]
 800b85e:	e7d2      	b.n	800b806 <__sinit+0xe>
 800b860:	0800d7ec 	.word	0x0800d7ec
 800b864:	0800b77d 	.word	0x0800b77d

0800b868 <__sfp>:
 800b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86a:	0007      	movs	r7, r0
 800b86c:	f7ff ffa4 	bl	800b7b8 <__sfp_lock_acquire>
 800b870:	4b1f      	ldr	r3, [pc, #124]	; (800b8f0 <__sfp+0x88>)
 800b872:	681e      	ldr	r6, [r3, #0]
 800b874:	69b3      	ldr	r3, [r6, #24]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d102      	bne.n	800b880 <__sfp+0x18>
 800b87a:	0030      	movs	r0, r6
 800b87c:	f7ff ffbc 	bl	800b7f8 <__sinit>
 800b880:	3648      	adds	r6, #72	; 0x48
 800b882:	68b4      	ldr	r4, [r6, #8]
 800b884:	6873      	ldr	r3, [r6, #4]
 800b886:	3b01      	subs	r3, #1
 800b888:	d504      	bpl.n	800b894 <__sfp+0x2c>
 800b88a:	6833      	ldr	r3, [r6, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d022      	beq.n	800b8d6 <__sfp+0x6e>
 800b890:	6836      	ldr	r6, [r6, #0]
 800b892:	e7f6      	b.n	800b882 <__sfp+0x1a>
 800b894:	220c      	movs	r2, #12
 800b896:	5ea5      	ldrsh	r5, [r4, r2]
 800b898:	2d00      	cmp	r5, #0
 800b89a:	d11a      	bne.n	800b8d2 <__sfp+0x6a>
 800b89c:	0020      	movs	r0, r4
 800b89e:	4b15      	ldr	r3, [pc, #84]	; (800b8f4 <__sfp+0x8c>)
 800b8a0:	3058      	adds	r0, #88	; 0x58
 800b8a2:	60e3      	str	r3, [r4, #12]
 800b8a4:	6665      	str	r5, [r4, #100]	; 0x64
 800b8a6:	f000 f847 	bl	800b938 <__retarget_lock_init_recursive>
 800b8aa:	f7ff ff8d 	bl	800b7c8 <__sfp_lock_release>
 800b8ae:	0020      	movs	r0, r4
 800b8b0:	2208      	movs	r2, #8
 800b8b2:	0029      	movs	r1, r5
 800b8b4:	6025      	str	r5, [r4, #0]
 800b8b6:	60a5      	str	r5, [r4, #8]
 800b8b8:	6065      	str	r5, [r4, #4]
 800b8ba:	6125      	str	r5, [r4, #16]
 800b8bc:	6165      	str	r5, [r4, #20]
 800b8be:	61a5      	str	r5, [r4, #24]
 800b8c0:	305c      	adds	r0, #92	; 0x5c
 800b8c2:	f7fd fa65 	bl	8008d90 <memset>
 800b8c6:	6365      	str	r5, [r4, #52]	; 0x34
 800b8c8:	63a5      	str	r5, [r4, #56]	; 0x38
 800b8ca:	64a5      	str	r5, [r4, #72]	; 0x48
 800b8cc:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b8ce:	0020      	movs	r0, r4
 800b8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d2:	3468      	adds	r4, #104	; 0x68
 800b8d4:	e7d7      	b.n	800b886 <__sfp+0x1e>
 800b8d6:	2104      	movs	r1, #4
 800b8d8:	0038      	movs	r0, r7
 800b8da:	f7ff ff57 	bl	800b78c <__sfmoreglue>
 800b8de:	1e04      	subs	r4, r0, #0
 800b8e0:	6030      	str	r0, [r6, #0]
 800b8e2:	d1d5      	bne.n	800b890 <__sfp+0x28>
 800b8e4:	f7ff ff70 	bl	800b7c8 <__sfp_lock_release>
 800b8e8:	230c      	movs	r3, #12
 800b8ea:	603b      	str	r3, [r7, #0]
 800b8ec:	e7ef      	b.n	800b8ce <__sfp+0x66>
 800b8ee:	46c0      	nop			; (mov r8, r8)
 800b8f0:	0800d7ec 	.word	0x0800d7ec
 800b8f4:	ffff0001 	.word	0xffff0001

0800b8f8 <_fwalk_reent>:
 800b8f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8fa:	0004      	movs	r4, r0
 800b8fc:	0006      	movs	r6, r0
 800b8fe:	2700      	movs	r7, #0
 800b900:	9101      	str	r1, [sp, #4]
 800b902:	3448      	adds	r4, #72	; 0x48
 800b904:	6863      	ldr	r3, [r4, #4]
 800b906:	68a5      	ldr	r5, [r4, #8]
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	9b00      	ldr	r3, [sp, #0]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	d504      	bpl.n	800b91c <_fwalk_reent+0x24>
 800b912:	6824      	ldr	r4, [r4, #0]
 800b914:	2c00      	cmp	r4, #0
 800b916:	d1f5      	bne.n	800b904 <_fwalk_reent+0xc>
 800b918:	0038      	movs	r0, r7
 800b91a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b91c:	89ab      	ldrh	r3, [r5, #12]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d908      	bls.n	800b934 <_fwalk_reent+0x3c>
 800b922:	220e      	movs	r2, #14
 800b924:	5eab      	ldrsh	r3, [r5, r2]
 800b926:	3301      	adds	r3, #1
 800b928:	d004      	beq.n	800b934 <_fwalk_reent+0x3c>
 800b92a:	0029      	movs	r1, r5
 800b92c:	0030      	movs	r0, r6
 800b92e:	9b01      	ldr	r3, [sp, #4]
 800b930:	4798      	blx	r3
 800b932:	4307      	orrs	r7, r0
 800b934:	3568      	adds	r5, #104	; 0x68
 800b936:	e7e8      	b.n	800b90a <_fwalk_reent+0x12>

0800b938 <__retarget_lock_init_recursive>:
 800b938:	4770      	bx	lr

0800b93a <__retarget_lock_acquire_recursive>:
 800b93a:	4770      	bx	lr

0800b93c <__retarget_lock_release_recursive>:
 800b93c:	4770      	bx	lr
	...

0800b940 <__swhatbuf_r>:
 800b940:	b570      	push	{r4, r5, r6, lr}
 800b942:	000e      	movs	r6, r1
 800b944:	001d      	movs	r5, r3
 800b946:	230e      	movs	r3, #14
 800b948:	5ec9      	ldrsh	r1, [r1, r3]
 800b94a:	0014      	movs	r4, r2
 800b94c:	b096      	sub	sp, #88	; 0x58
 800b94e:	2900      	cmp	r1, #0
 800b950:	da07      	bge.n	800b962 <__swhatbuf_r+0x22>
 800b952:	2300      	movs	r3, #0
 800b954:	602b      	str	r3, [r5, #0]
 800b956:	89b3      	ldrh	r3, [r6, #12]
 800b958:	061b      	lsls	r3, r3, #24
 800b95a:	d411      	bmi.n	800b980 <__swhatbuf_r+0x40>
 800b95c:	2380      	movs	r3, #128	; 0x80
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	e00f      	b.n	800b982 <__swhatbuf_r+0x42>
 800b962:	466a      	mov	r2, sp
 800b964:	f000 f91c 	bl	800bba0 <_fstat_r>
 800b968:	2800      	cmp	r0, #0
 800b96a:	dbf2      	blt.n	800b952 <__swhatbuf_r+0x12>
 800b96c:	23f0      	movs	r3, #240	; 0xf0
 800b96e:	9901      	ldr	r1, [sp, #4]
 800b970:	021b      	lsls	r3, r3, #8
 800b972:	4019      	ands	r1, r3
 800b974:	4b05      	ldr	r3, [pc, #20]	; (800b98c <__swhatbuf_r+0x4c>)
 800b976:	18c9      	adds	r1, r1, r3
 800b978:	424b      	negs	r3, r1
 800b97a:	4159      	adcs	r1, r3
 800b97c:	6029      	str	r1, [r5, #0]
 800b97e:	e7ed      	b.n	800b95c <__swhatbuf_r+0x1c>
 800b980:	2340      	movs	r3, #64	; 0x40
 800b982:	2000      	movs	r0, #0
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	b016      	add	sp, #88	; 0x58
 800b988:	bd70      	pop	{r4, r5, r6, pc}
 800b98a:	46c0      	nop			; (mov r8, r8)
 800b98c:	ffffe000 	.word	0xffffe000

0800b990 <__smakebuf_r>:
 800b990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b992:	2602      	movs	r6, #2
 800b994:	898b      	ldrh	r3, [r1, #12]
 800b996:	0005      	movs	r5, r0
 800b998:	000c      	movs	r4, r1
 800b99a:	4233      	tst	r3, r6
 800b99c:	d006      	beq.n	800b9ac <__smakebuf_r+0x1c>
 800b99e:	0023      	movs	r3, r4
 800b9a0:	3347      	adds	r3, #71	; 0x47
 800b9a2:	6023      	str	r3, [r4, #0]
 800b9a4:	6123      	str	r3, [r4, #16]
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	6163      	str	r3, [r4, #20]
 800b9aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b9ac:	466a      	mov	r2, sp
 800b9ae:	ab01      	add	r3, sp, #4
 800b9b0:	f7ff ffc6 	bl	800b940 <__swhatbuf_r>
 800b9b4:	9900      	ldr	r1, [sp, #0]
 800b9b6:	0007      	movs	r7, r0
 800b9b8:	0028      	movs	r0, r5
 800b9ba:	f7ff f94d 	bl	800ac58 <_malloc_r>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d108      	bne.n	800b9d4 <__smakebuf_r+0x44>
 800b9c2:	220c      	movs	r2, #12
 800b9c4:	5ea3      	ldrsh	r3, [r4, r2]
 800b9c6:	059a      	lsls	r2, r3, #22
 800b9c8:	d4ef      	bmi.n	800b9aa <__smakebuf_r+0x1a>
 800b9ca:	2203      	movs	r2, #3
 800b9cc:	4393      	bics	r3, r2
 800b9ce:	431e      	orrs	r6, r3
 800b9d0:	81a6      	strh	r6, [r4, #12]
 800b9d2:	e7e4      	b.n	800b99e <__smakebuf_r+0xe>
 800b9d4:	4b0f      	ldr	r3, [pc, #60]	; (800ba14 <__smakebuf_r+0x84>)
 800b9d6:	62ab      	str	r3, [r5, #40]	; 0x28
 800b9d8:	2380      	movs	r3, #128	; 0x80
 800b9da:	89a2      	ldrh	r2, [r4, #12]
 800b9dc:	6020      	str	r0, [r4, #0]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	81a3      	strh	r3, [r4, #12]
 800b9e2:	9b00      	ldr	r3, [sp, #0]
 800b9e4:	6120      	str	r0, [r4, #16]
 800b9e6:	6163      	str	r3, [r4, #20]
 800b9e8:	9b01      	ldr	r3, [sp, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00d      	beq.n	800ba0a <__smakebuf_r+0x7a>
 800b9ee:	0028      	movs	r0, r5
 800b9f0:	230e      	movs	r3, #14
 800b9f2:	5ee1      	ldrsh	r1, [r4, r3]
 800b9f4:	f000 f8e6 	bl	800bbc4 <_isatty_r>
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	d006      	beq.n	800ba0a <__smakebuf_r+0x7a>
 800b9fc:	2203      	movs	r2, #3
 800b9fe:	89a3      	ldrh	r3, [r4, #12]
 800ba00:	4393      	bics	r3, r2
 800ba02:	001a      	movs	r2, r3
 800ba04:	2301      	movs	r3, #1
 800ba06:	4313      	orrs	r3, r2
 800ba08:	81a3      	strh	r3, [r4, #12]
 800ba0a:	89a0      	ldrh	r0, [r4, #12]
 800ba0c:	4307      	orrs	r7, r0
 800ba0e:	81a7      	strh	r7, [r4, #12]
 800ba10:	e7cb      	b.n	800b9aa <__smakebuf_r+0x1a>
 800ba12:	46c0      	nop			; (mov r8, r8)
 800ba14:	0800b77d 	.word	0x0800b77d

0800ba18 <_malloc_usable_size_r>:
 800ba18:	1f0b      	subs	r3, r1, #4
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	1f18      	subs	r0, r3, #4
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	da01      	bge.n	800ba26 <_malloc_usable_size_r+0xe>
 800ba22:	580b      	ldr	r3, [r1, r0]
 800ba24:	18c0      	adds	r0, r0, r3
 800ba26:	4770      	bx	lr

0800ba28 <_raise_r>:
 800ba28:	b570      	push	{r4, r5, r6, lr}
 800ba2a:	0004      	movs	r4, r0
 800ba2c:	000d      	movs	r5, r1
 800ba2e:	291f      	cmp	r1, #31
 800ba30:	d904      	bls.n	800ba3c <_raise_r+0x14>
 800ba32:	2316      	movs	r3, #22
 800ba34:	6003      	str	r3, [r0, #0]
 800ba36:	2001      	movs	r0, #1
 800ba38:	4240      	negs	r0, r0
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}
 800ba3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d004      	beq.n	800ba4c <_raise_r+0x24>
 800ba42:	008a      	lsls	r2, r1, #2
 800ba44:	189b      	adds	r3, r3, r2
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	2a00      	cmp	r2, #0
 800ba4a:	d108      	bne.n	800ba5e <_raise_r+0x36>
 800ba4c:	0020      	movs	r0, r4
 800ba4e:	f000 f831 	bl	800bab4 <_getpid_r>
 800ba52:	002a      	movs	r2, r5
 800ba54:	0001      	movs	r1, r0
 800ba56:	0020      	movs	r0, r4
 800ba58:	f000 f81a 	bl	800ba90 <_kill_r>
 800ba5c:	e7ed      	b.n	800ba3a <_raise_r+0x12>
 800ba5e:	2000      	movs	r0, #0
 800ba60:	2a01      	cmp	r2, #1
 800ba62:	d0ea      	beq.n	800ba3a <_raise_r+0x12>
 800ba64:	1c51      	adds	r1, r2, #1
 800ba66:	d103      	bne.n	800ba70 <_raise_r+0x48>
 800ba68:	2316      	movs	r3, #22
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	e7e4      	b.n	800ba3a <_raise_r+0x12>
 800ba70:	2400      	movs	r4, #0
 800ba72:	0028      	movs	r0, r5
 800ba74:	601c      	str	r4, [r3, #0]
 800ba76:	4790      	blx	r2
 800ba78:	0020      	movs	r0, r4
 800ba7a:	e7de      	b.n	800ba3a <_raise_r+0x12>

0800ba7c <raise>:
 800ba7c:	b510      	push	{r4, lr}
 800ba7e:	4b03      	ldr	r3, [pc, #12]	; (800ba8c <raise+0x10>)
 800ba80:	0001      	movs	r1, r0
 800ba82:	6818      	ldr	r0, [r3, #0]
 800ba84:	f7ff ffd0 	bl	800ba28 <_raise_r>
 800ba88:	bd10      	pop	{r4, pc}
 800ba8a:	46c0      	nop			; (mov r8, r8)
 800ba8c:	20000014 	.word	0x20000014

0800ba90 <_kill_r>:
 800ba90:	2300      	movs	r3, #0
 800ba92:	b570      	push	{r4, r5, r6, lr}
 800ba94:	4d06      	ldr	r5, [pc, #24]	; (800bab0 <_kill_r+0x20>)
 800ba96:	0004      	movs	r4, r0
 800ba98:	0008      	movs	r0, r1
 800ba9a:	0011      	movs	r1, r2
 800ba9c:	602b      	str	r3, [r5, #0]
 800ba9e:	f7f9 ff0c 	bl	80058ba <_kill>
 800baa2:	1c43      	adds	r3, r0, #1
 800baa4:	d103      	bne.n	800baae <_kill_r+0x1e>
 800baa6:	682b      	ldr	r3, [r5, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d000      	beq.n	800baae <_kill_r+0x1e>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	20000594 	.word	0x20000594

0800bab4 <_getpid_r>:
 800bab4:	b510      	push	{r4, lr}
 800bab6:	f7f9 fefa 	bl	80058ae <_getpid>
 800baba:	bd10      	pop	{r4, pc}

0800babc <__sread>:
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	000c      	movs	r4, r1
 800bac0:	250e      	movs	r5, #14
 800bac2:	5f49      	ldrsh	r1, [r1, r5]
 800bac4:	f000 f8a4 	bl	800bc10 <_read_r>
 800bac8:	2800      	cmp	r0, #0
 800baca:	db03      	blt.n	800bad4 <__sread+0x18>
 800bacc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bace:	181b      	adds	r3, r3, r0
 800bad0:	6563      	str	r3, [r4, #84]	; 0x54
 800bad2:	bd70      	pop	{r4, r5, r6, pc}
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	4a02      	ldr	r2, [pc, #8]	; (800bae0 <__sread+0x24>)
 800bad8:	4013      	ands	r3, r2
 800bada:	81a3      	strh	r3, [r4, #12]
 800badc:	e7f9      	b.n	800bad2 <__sread+0x16>
 800bade:	46c0      	nop			; (mov r8, r8)
 800bae0:	ffffefff 	.word	0xffffefff

0800bae4 <__swrite>:
 800bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae6:	001f      	movs	r7, r3
 800bae8:	898b      	ldrh	r3, [r1, #12]
 800baea:	0005      	movs	r5, r0
 800baec:	000c      	movs	r4, r1
 800baee:	0016      	movs	r6, r2
 800baf0:	05db      	lsls	r3, r3, #23
 800baf2:	d505      	bpl.n	800bb00 <__swrite+0x1c>
 800baf4:	230e      	movs	r3, #14
 800baf6:	5ec9      	ldrsh	r1, [r1, r3]
 800baf8:	2200      	movs	r2, #0
 800bafa:	2302      	movs	r3, #2
 800bafc:	f000 f874 	bl	800bbe8 <_lseek_r>
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	4a05      	ldr	r2, [pc, #20]	; (800bb18 <__swrite+0x34>)
 800bb04:	0028      	movs	r0, r5
 800bb06:	4013      	ands	r3, r2
 800bb08:	81a3      	strh	r3, [r4, #12]
 800bb0a:	0032      	movs	r2, r6
 800bb0c:	230e      	movs	r3, #14
 800bb0e:	5ee1      	ldrsh	r1, [r4, r3]
 800bb10:	003b      	movs	r3, r7
 800bb12:	f000 f81f 	bl	800bb54 <_write_r>
 800bb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb18:	ffffefff 	.word	0xffffefff

0800bb1c <__sseek>:
 800bb1c:	b570      	push	{r4, r5, r6, lr}
 800bb1e:	000c      	movs	r4, r1
 800bb20:	250e      	movs	r5, #14
 800bb22:	5f49      	ldrsh	r1, [r1, r5]
 800bb24:	f000 f860 	bl	800bbe8 <_lseek_r>
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	1c42      	adds	r2, r0, #1
 800bb2c:	d103      	bne.n	800bb36 <__sseek+0x1a>
 800bb2e:	4a05      	ldr	r2, [pc, #20]	; (800bb44 <__sseek+0x28>)
 800bb30:	4013      	ands	r3, r2
 800bb32:	81a3      	strh	r3, [r4, #12]
 800bb34:	bd70      	pop	{r4, r5, r6, pc}
 800bb36:	2280      	movs	r2, #128	; 0x80
 800bb38:	0152      	lsls	r2, r2, #5
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	81a3      	strh	r3, [r4, #12]
 800bb3e:	6560      	str	r0, [r4, #84]	; 0x54
 800bb40:	e7f8      	b.n	800bb34 <__sseek+0x18>
 800bb42:	46c0      	nop			; (mov r8, r8)
 800bb44:	ffffefff 	.word	0xffffefff

0800bb48 <__sclose>:
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	230e      	movs	r3, #14
 800bb4c:	5ec9      	ldrsh	r1, [r1, r3]
 800bb4e:	f000 f815 	bl	800bb7c <_close_r>
 800bb52:	bd10      	pop	{r4, pc}

0800bb54 <_write_r>:
 800bb54:	b570      	push	{r4, r5, r6, lr}
 800bb56:	0004      	movs	r4, r0
 800bb58:	0008      	movs	r0, r1
 800bb5a:	0011      	movs	r1, r2
 800bb5c:	001a      	movs	r2, r3
 800bb5e:	2300      	movs	r3, #0
 800bb60:	4d05      	ldr	r5, [pc, #20]	; (800bb78 <_write_r+0x24>)
 800bb62:	602b      	str	r3, [r5, #0]
 800bb64:	f7f9 fee2 	bl	800592c <_write>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d103      	bne.n	800bb74 <_write_r+0x20>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d000      	beq.n	800bb74 <_write_r+0x20>
 800bb72:	6023      	str	r3, [r4, #0]
 800bb74:	bd70      	pop	{r4, r5, r6, pc}
 800bb76:	46c0      	nop			; (mov r8, r8)
 800bb78:	20000594 	.word	0x20000594

0800bb7c <_close_r>:
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	b570      	push	{r4, r5, r6, lr}
 800bb80:	4d06      	ldr	r5, [pc, #24]	; (800bb9c <_close_r+0x20>)
 800bb82:	0004      	movs	r4, r0
 800bb84:	0008      	movs	r0, r1
 800bb86:	602b      	str	r3, [r5, #0]
 800bb88:	f7f9 feec 	bl	8005964 <_close>
 800bb8c:	1c43      	adds	r3, r0, #1
 800bb8e:	d103      	bne.n	800bb98 <_close_r+0x1c>
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d000      	beq.n	800bb98 <_close_r+0x1c>
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	bd70      	pop	{r4, r5, r6, pc}
 800bb9a:	46c0      	nop			; (mov r8, r8)
 800bb9c:	20000594 	.word	0x20000594

0800bba0 <_fstat_r>:
 800bba0:	2300      	movs	r3, #0
 800bba2:	b570      	push	{r4, r5, r6, lr}
 800bba4:	4d06      	ldr	r5, [pc, #24]	; (800bbc0 <_fstat_r+0x20>)
 800bba6:	0004      	movs	r4, r0
 800bba8:	0008      	movs	r0, r1
 800bbaa:	0011      	movs	r1, r2
 800bbac:	602b      	str	r3, [r5, #0]
 800bbae:	f7f9 fee3 	bl	8005978 <_fstat>
 800bbb2:	1c43      	adds	r3, r0, #1
 800bbb4:	d103      	bne.n	800bbbe <_fstat_r+0x1e>
 800bbb6:	682b      	ldr	r3, [r5, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d000      	beq.n	800bbbe <_fstat_r+0x1e>
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	bd70      	pop	{r4, r5, r6, pc}
 800bbc0:	20000594 	.word	0x20000594

0800bbc4 <_isatty_r>:
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	b570      	push	{r4, r5, r6, lr}
 800bbc8:	4d06      	ldr	r5, [pc, #24]	; (800bbe4 <_isatty_r+0x20>)
 800bbca:	0004      	movs	r4, r0
 800bbcc:	0008      	movs	r0, r1
 800bbce:	602b      	str	r3, [r5, #0]
 800bbd0:	f7f9 fee0 	bl	8005994 <_isatty>
 800bbd4:	1c43      	adds	r3, r0, #1
 800bbd6:	d103      	bne.n	800bbe0 <_isatty_r+0x1c>
 800bbd8:	682b      	ldr	r3, [r5, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d000      	beq.n	800bbe0 <_isatty_r+0x1c>
 800bbde:	6023      	str	r3, [r4, #0]
 800bbe0:	bd70      	pop	{r4, r5, r6, pc}
 800bbe2:	46c0      	nop			; (mov r8, r8)
 800bbe4:	20000594 	.word	0x20000594

0800bbe8 <_lseek_r>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	0004      	movs	r4, r0
 800bbec:	0008      	movs	r0, r1
 800bbee:	0011      	movs	r1, r2
 800bbf0:	001a      	movs	r2, r3
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	4d05      	ldr	r5, [pc, #20]	; (800bc0c <_lseek_r+0x24>)
 800bbf6:	602b      	str	r3, [r5, #0]
 800bbf8:	f7f9 fed5 	bl	80059a6 <_lseek>
 800bbfc:	1c43      	adds	r3, r0, #1
 800bbfe:	d103      	bne.n	800bc08 <_lseek_r+0x20>
 800bc00:	682b      	ldr	r3, [r5, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d000      	beq.n	800bc08 <_lseek_r+0x20>
 800bc06:	6023      	str	r3, [r4, #0]
 800bc08:	bd70      	pop	{r4, r5, r6, pc}
 800bc0a:	46c0      	nop			; (mov r8, r8)
 800bc0c:	20000594 	.word	0x20000594

0800bc10 <_read_r>:
 800bc10:	b570      	push	{r4, r5, r6, lr}
 800bc12:	0004      	movs	r4, r0
 800bc14:	0008      	movs	r0, r1
 800bc16:	0011      	movs	r1, r2
 800bc18:	001a      	movs	r2, r3
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	4d05      	ldr	r5, [pc, #20]	; (800bc34 <_read_r+0x24>)
 800bc1e:	602b      	str	r3, [r5, #0]
 800bc20:	f7f9 fe67 	bl	80058f2 <_read>
 800bc24:	1c43      	adds	r3, r0, #1
 800bc26:	d103      	bne.n	800bc30 <_read_r+0x20>
 800bc28:	682b      	ldr	r3, [r5, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d000      	beq.n	800bc30 <_read_r+0x20>
 800bc2e:	6023      	str	r3, [r4, #0]
 800bc30:	bd70      	pop	{r4, r5, r6, pc}
 800bc32:	46c0      	nop			; (mov r8, r8)
 800bc34:	20000594 	.word	0x20000594

0800bc38 <atan>:
 800bc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc3a:	4b98      	ldr	r3, [pc, #608]	; (800be9c <atan+0x264>)
 800bc3c:	b085      	sub	sp, #20
 800bc3e:	004e      	lsls	r6, r1, #1
 800bc40:	0004      	movs	r4, r0
 800bc42:	000d      	movs	r5, r1
 800bc44:	9103      	str	r1, [sp, #12]
 800bc46:	0876      	lsrs	r6, r6, #1
 800bc48:	429e      	cmp	r6, r3
 800bc4a:	dd18      	ble.n	800bc7e <atan+0x46>
 800bc4c:	4b94      	ldr	r3, [pc, #592]	; (800bea0 <atan+0x268>)
 800bc4e:	429e      	cmp	r6, r3
 800bc50:	dc02      	bgt.n	800bc58 <atan+0x20>
 800bc52:	d10a      	bne.n	800bc6a <atan+0x32>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d008      	beq.n	800bc6a <atan+0x32>
 800bc58:	0022      	movs	r2, r4
 800bc5a:	002b      	movs	r3, r5
 800bc5c:	0020      	movs	r0, r4
 800bc5e:	0029      	movs	r1, r5
 800bc60:	f7f5 fb5a 	bl	8001318 <__aeabi_dadd>
 800bc64:	0004      	movs	r4, r0
 800bc66:	000d      	movs	r5, r1
 800bc68:	e005      	b.n	800bc76 <atan+0x3e>
 800bc6a:	9b03      	ldr	r3, [sp, #12]
 800bc6c:	4c8d      	ldr	r4, [pc, #564]	; (800bea4 <atan+0x26c>)
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	dd00      	ble.n	800bc74 <atan+0x3c>
 800bc72:	e110      	b.n	800be96 <atan+0x25e>
 800bc74:	4d8c      	ldr	r5, [pc, #560]	; (800bea8 <atan+0x270>)
 800bc76:	0020      	movs	r0, r4
 800bc78:	0029      	movs	r1, r5
 800bc7a:	b005      	add	sp, #20
 800bc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc7e:	4b8b      	ldr	r3, [pc, #556]	; (800beac <atan+0x274>)
 800bc80:	429e      	cmp	r6, r3
 800bc82:	dc0f      	bgt.n	800bca4 <atan+0x6c>
 800bc84:	4b8a      	ldr	r3, [pc, #552]	; (800beb0 <atan+0x278>)
 800bc86:	429e      	cmp	r6, r3
 800bc88:	dc09      	bgt.n	800bc9e <atan+0x66>
 800bc8a:	4a8a      	ldr	r2, [pc, #552]	; (800beb4 <atan+0x27c>)
 800bc8c:	4b8a      	ldr	r3, [pc, #552]	; (800beb8 <atan+0x280>)
 800bc8e:	f7f5 fb43 	bl	8001318 <__aeabi_dadd>
 800bc92:	2200      	movs	r2, #0
 800bc94:	4b89      	ldr	r3, [pc, #548]	; (800bebc <atan+0x284>)
 800bc96:	f7f4 fbef 	bl	8000478 <__aeabi_dcmpgt>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d1eb      	bne.n	800bc76 <atan+0x3e>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	425b      	negs	r3, r3
 800bca2:	e025      	b.n	800bcf0 <atan+0xb8>
 800bca4:	f000 f948 	bl	800bf38 <fabs>
 800bca8:	4b85      	ldr	r3, [pc, #532]	; (800bec0 <atan+0x288>)
 800bcaa:	0004      	movs	r4, r0
 800bcac:	000d      	movs	r5, r1
 800bcae:	429e      	cmp	r6, r3
 800bcb0:	dd00      	ble.n	800bcb4 <atan+0x7c>
 800bcb2:	e0aa      	b.n	800be0a <atan+0x1d2>
 800bcb4:	4b83      	ldr	r3, [pc, #524]	; (800bec4 <atan+0x28c>)
 800bcb6:	429e      	cmp	r6, r3
 800bcb8:	dd00      	ble.n	800bcbc <atan+0x84>
 800bcba:	e090      	b.n	800bdde <atan+0x1a6>
 800bcbc:	0002      	movs	r2, r0
 800bcbe:	000b      	movs	r3, r1
 800bcc0:	f7f5 fb2a 	bl	8001318 <__aeabi_dadd>
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	4b7d      	ldr	r3, [pc, #500]	; (800bebc <atan+0x284>)
 800bcc8:	f7f6 fd02 	bl	80026d0 <__aeabi_dsub>
 800bccc:	2380      	movs	r3, #128	; 0x80
 800bcce:	0006      	movs	r6, r0
 800bcd0:	000f      	movs	r7, r1
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	0020      	movs	r0, r4
 800bcd6:	0029      	movs	r1, r5
 800bcd8:	05db      	lsls	r3, r3, #23
 800bcda:	f7f5 fb1d 	bl	8001318 <__aeabi_dadd>
 800bcde:	000b      	movs	r3, r1
 800bce0:	0002      	movs	r2, r0
 800bce2:	0039      	movs	r1, r7
 800bce4:	0030      	movs	r0, r6
 800bce6:	f7f5 fe81 	bl	80019ec <__aeabi_ddiv>
 800bcea:	2300      	movs	r3, #0
 800bcec:	0004      	movs	r4, r0
 800bcee:	000d      	movs	r5, r1
 800bcf0:	0022      	movs	r2, r4
 800bcf2:	9302      	str	r3, [sp, #8]
 800bcf4:	0020      	movs	r0, r4
 800bcf6:	002b      	movs	r3, r5
 800bcf8:	0029      	movs	r1, r5
 800bcfa:	f7f6 fa7d 	bl	80021f8 <__aeabi_dmul>
 800bcfe:	0002      	movs	r2, r0
 800bd00:	000b      	movs	r3, r1
 800bd02:	9000      	str	r0, [sp, #0]
 800bd04:	9101      	str	r1, [sp, #4]
 800bd06:	f7f6 fa77 	bl	80021f8 <__aeabi_dmul>
 800bd0a:	0006      	movs	r6, r0
 800bd0c:	000f      	movs	r7, r1
 800bd0e:	4a6e      	ldr	r2, [pc, #440]	; (800bec8 <atan+0x290>)
 800bd10:	4b6e      	ldr	r3, [pc, #440]	; (800becc <atan+0x294>)
 800bd12:	f7f6 fa71 	bl	80021f8 <__aeabi_dmul>
 800bd16:	4a6e      	ldr	r2, [pc, #440]	; (800bed0 <atan+0x298>)
 800bd18:	4b6e      	ldr	r3, [pc, #440]	; (800bed4 <atan+0x29c>)
 800bd1a:	f7f5 fafd 	bl	8001318 <__aeabi_dadd>
 800bd1e:	0032      	movs	r2, r6
 800bd20:	003b      	movs	r3, r7
 800bd22:	f7f6 fa69 	bl	80021f8 <__aeabi_dmul>
 800bd26:	4a6c      	ldr	r2, [pc, #432]	; (800bed8 <atan+0x2a0>)
 800bd28:	4b6c      	ldr	r3, [pc, #432]	; (800bedc <atan+0x2a4>)
 800bd2a:	f7f5 faf5 	bl	8001318 <__aeabi_dadd>
 800bd2e:	0032      	movs	r2, r6
 800bd30:	003b      	movs	r3, r7
 800bd32:	f7f6 fa61 	bl	80021f8 <__aeabi_dmul>
 800bd36:	4a6a      	ldr	r2, [pc, #424]	; (800bee0 <atan+0x2a8>)
 800bd38:	4b6a      	ldr	r3, [pc, #424]	; (800bee4 <atan+0x2ac>)
 800bd3a:	f7f5 faed 	bl	8001318 <__aeabi_dadd>
 800bd3e:	0032      	movs	r2, r6
 800bd40:	003b      	movs	r3, r7
 800bd42:	f7f6 fa59 	bl	80021f8 <__aeabi_dmul>
 800bd46:	4a68      	ldr	r2, [pc, #416]	; (800bee8 <atan+0x2b0>)
 800bd48:	4b68      	ldr	r3, [pc, #416]	; (800beec <atan+0x2b4>)
 800bd4a:	f7f5 fae5 	bl	8001318 <__aeabi_dadd>
 800bd4e:	0032      	movs	r2, r6
 800bd50:	003b      	movs	r3, r7
 800bd52:	f7f6 fa51 	bl	80021f8 <__aeabi_dmul>
 800bd56:	4a66      	ldr	r2, [pc, #408]	; (800bef0 <atan+0x2b8>)
 800bd58:	4b66      	ldr	r3, [pc, #408]	; (800bef4 <atan+0x2bc>)
 800bd5a:	f7f5 fadd 	bl	8001318 <__aeabi_dadd>
 800bd5e:	9a00      	ldr	r2, [sp, #0]
 800bd60:	9b01      	ldr	r3, [sp, #4]
 800bd62:	f7f6 fa49 	bl	80021f8 <__aeabi_dmul>
 800bd66:	4a64      	ldr	r2, [pc, #400]	; (800bef8 <atan+0x2c0>)
 800bd68:	9000      	str	r0, [sp, #0]
 800bd6a:	9101      	str	r1, [sp, #4]
 800bd6c:	4b63      	ldr	r3, [pc, #396]	; (800befc <atan+0x2c4>)
 800bd6e:	0030      	movs	r0, r6
 800bd70:	0039      	movs	r1, r7
 800bd72:	f7f6 fa41 	bl	80021f8 <__aeabi_dmul>
 800bd76:	4a62      	ldr	r2, [pc, #392]	; (800bf00 <atan+0x2c8>)
 800bd78:	4b62      	ldr	r3, [pc, #392]	; (800bf04 <atan+0x2cc>)
 800bd7a:	f7f6 fca9 	bl	80026d0 <__aeabi_dsub>
 800bd7e:	0032      	movs	r2, r6
 800bd80:	003b      	movs	r3, r7
 800bd82:	f7f6 fa39 	bl	80021f8 <__aeabi_dmul>
 800bd86:	4a60      	ldr	r2, [pc, #384]	; (800bf08 <atan+0x2d0>)
 800bd88:	4b60      	ldr	r3, [pc, #384]	; (800bf0c <atan+0x2d4>)
 800bd8a:	f7f6 fca1 	bl	80026d0 <__aeabi_dsub>
 800bd8e:	0032      	movs	r2, r6
 800bd90:	003b      	movs	r3, r7
 800bd92:	f7f6 fa31 	bl	80021f8 <__aeabi_dmul>
 800bd96:	4a5e      	ldr	r2, [pc, #376]	; (800bf10 <atan+0x2d8>)
 800bd98:	4b5e      	ldr	r3, [pc, #376]	; (800bf14 <atan+0x2dc>)
 800bd9a:	f7f6 fc99 	bl	80026d0 <__aeabi_dsub>
 800bd9e:	0032      	movs	r2, r6
 800bda0:	003b      	movs	r3, r7
 800bda2:	f7f6 fa29 	bl	80021f8 <__aeabi_dmul>
 800bda6:	4a5c      	ldr	r2, [pc, #368]	; (800bf18 <atan+0x2e0>)
 800bda8:	4b5c      	ldr	r3, [pc, #368]	; (800bf1c <atan+0x2e4>)
 800bdaa:	f7f6 fc91 	bl	80026d0 <__aeabi_dsub>
 800bdae:	0032      	movs	r2, r6
 800bdb0:	003b      	movs	r3, r7
 800bdb2:	f7f6 fa21 	bl	80021f8 <__aeabi_dmul>
 800bdb6:	0002      	movs	r2, r0
 800bdb8:	000b      	movs	r3, r1
 800bdba:	9800      	ldr	r0, [sp, #0]
 800bdbc:	9901      	ldr	r1, [sp, #4]
 800bdbe:	f7f5 faab 	bl	8001318 <__aeabi_dadd>
 800bdc2:	002b      	movs	r3, r5
 800bdc4:	0022      	movs	r2, r4
 800bdc6:	f7f6 fa17 	bl	80021f8 <__aeabi_dmul>
 800bdca:	9b02      	ldr	r3, [sp, #8]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	d143      	bne.n	800be58 <atan+0x220>
 800bdd0:	0002      	movs	r2, r0
 800bdd2:	000b      	movs	r3, r1
 800bdd4:	0020      	movs	r0, r4
 800bdd6:	0029      	movs	r1, r5
 800bdd8:	f7f6 fc7a 	bl	80026d0 <__aeabi_dsub>
 800bddc:	e742      	b.n	800bc64 <atan+0x2c>
 800bdde:	2200      	movs	r2, #0
 800bde0:	4b36      	ldr	r3, [pc, #216]	; (800bebc <atan+0x284>)
 800bde2:	f7f6 fc75 	bl	80026d0 <__aeabi_dsub>
 800bde6:	2200      	movs	r2, #0
 800bde8:	0006      	movs	r6, r0
 800bdea:	000f      	movs	r7, r1
 800bdec:	0020      	movs	r0, r4
 800bdee:	0029      	movs	r1, r5
 800bdf0:	4b32      	ldr	r3, [pc, #200]	; (800bebc <atan+0x284>)
 800bdf2:	f7f5 fa91 	bl	8001318 <__aeabi_dadd>
 800bdf6:	000b      	movs	r3, r1
 800bdf8:	0002      	movs	r2, r0
 800bdfa:	0039      	movs	r1, r7
 800bdfc:	0030      	movs	r0, r6
 800bdfe:	f7f5 fdf5 	bl	80019ec <__aeabi_ddiv>
 800be02:	2301      	movs	r3, #1
 800be04:	0004      	movs	r4, r0
 800be06:	000d      	movs	r5, r1
 800be08:	e772      	b.n	800bcf0 <atan+0xb8>
 800be0a:	4b45      	ldr	r3, [pc, #276]	; (800bf20 <atan+0x2e8>)
 800be0c:	429e      	cmp	r6, r3
 800be0e:	dc19      	bgt.n	800be44 <atan+0x20c>
 800be10:	2200      	movs	r2, #0
 800be12:	4b44      	ldr	r3, [pc, #272]	; (800bf24 <atan+0x2ec>)
 800be14:	f7f6 fc5c 	bl	80026d0 <__aeabi_dsub>
 800be18:	2200      	movs	r2, #0
 800be1a:	0006      	movs	r6, r0
 800be1c:	000f      	movs	r7, r1
 800be1e:	0020      	movs	r0, r4
 800be20:	0029      	movs	r1, r5
 800be22:	4b40      	ldr	r3, [pc, #256]	; (800bf24 <atan+0x2ec>)
 800be24:	f7f6 f9e8 	bl	80021f8 <__aeabi_dmul>
 800be28:	2200      	movs	r2, #0
 800be2a:	4b24      	ldr	r3, [pc, #144]	; (800bebc <atan+0x284>)
 800be2c:	f7f5 fa74 	bl	8001318 <__aeabi_dadd>
 800be30:	000b      	movs	r3, r1
 800be32:	0002      	movs	r2, r0
 800be34:	0039      	movs	r1, r7
 800be36:	0030      	movs	r0, r6
 800be38:	f7f5 fdd8 	bl	80019ec <__aeabi_ddiv>
 800be3c:	2302      	movs	r3, #2
 800be3e:	0004      	movs	r4, r0
 800be40:	000d      	movs	r5, r1
 800be42:	e755      	b.n	800bcf0 <atan+0xb8>
 800be44:	000b      	movs	r3, r1
 800be46:	0002      	movs	r2, r0
 800be48:	4937      	ldr	r1, [pc, #220]	; (800bf28 <atan+0x2f0>)
 800be4a:	2000      	movs	r0, #0
 800be4c:	f7f5 fdce 	bl	80019ec <__aeabi_ddiv>
 800be50:	2303      	movs	r3, #3
 800be52:	0004      	movs	r4, r0
 800be54:	000d      	movs	r5, r1
 800be56:	e74b      	b.n	800bcf0 <atan+0xb8>
 800be58:	9b02      	ldr	r3, [sp, #8]
 800be5a:	4f34      	ldr	r7, [pc, #208]	; (800bf2c <atan+0x2f4>)
 800be5c:	00de      	lsls	r6, r3, #3
 800be5e:	4b34      	ldr	r3, [pc, #208]	; (800bf30 <atan+0x2f8>)
 800be60:	19bf      	adds	r7, r7, r6
 800be62:	199e      	adds	r6, r3, r6
 800be64:	6832      	ldr	r2, [r6, #0]
 800be66:	6873      	ldr	r3, [r6, #4]
 800be68:	f7f6 fc32 	bl	80026d0 <__aeabi_dsub>
 800be6c:	0022      	movs	r2, r4
 800be6e:	002b      	movs	r3, r5
 800be70:	f7f6 fc2e 	bl	80026d0 <__aeabi_dsub>
 800be74:	000b      	movs	r3, r1
 800be76:	0002      	movs	r2, r0
 800be78:	6838      	ldr	r0, [r7, #0]
 800be7a:	6879      	ldr	r1, [r7, #4]
 800be7c:	f7f6 fc28 	bl	80026d0 <__aeabi_dsub>
 800be80:	9b03      	ldr	r3, [sp, #12]
 800be82:	0004      	movs	r4, r0
 800be84:	000d      	movs	r5, r1
 800be86:	2b00      	cmp	r3, #0
 800be88:	db00      	blt.n	800be8c <atan+0x254>
 800be8a:	e6f4      	b.n	800bc76 <atan+0x3e>
 800be8c:	2180      	movs	r1, #128	; 0x80
 800be8e:	0609      	lsls	r1, r1, #24
 800be90:	186b      	adds	r3, r5, r1
 800be92:	001d      	movs	r5, r3
 800be94:	e6ef      	b.n	800bc76 <atan+0x3e>
 800be96:	4d27      	ldr	r5, [pc, #156]	; (800bf34 <atan+0x2fc>)
 800be98:	e6ed      	b.n	800bc76 <atan+0x3e>
 800be9a:	46c0      	nop			; (mov r8, r8)
 800be9c:	440fffff 	.word	0x440fffff
 800bea0:	7ff00000 	.word	0x7ff00000
 800bea4:	54442d18 	.word	0x54442d18
 800bea8:	bff921fb 	.word	0xbff921fb
 800beac:	3fdbffff 	.word	0x3fdbffff
 800beb0:	3e1fffff 	.word	0x3e1fffff
 800beb4:	8800759c 	.word	0x8800759c
 800beb8:	7e37e43c 	.word	0x7e37e43c
 800bebc:	3ff00000 	.word	0x3ff00000
 800bec0:	3ff2ffff 	.word	0x3ff2ffff
 800bec4:	3fe5ffff 	.word	0x3fe5ffff
 800bec8:	e322da11 	.word	0xe322da11
 800becc:	3f90ad3a 	.word	0x3f90ad3a
 800bed0:	24760deb 	.word	0x24760deb
 800bed4:	3fa97b4b 	.word	0x3fa97b4b
 800bed8:	a0d03d51 	.word	0xa0d03d51
 800bedc:	3fb10d66 	.word	0x3fb10d66
 800bee0:	c54c206e 	.word	0xc54c206e
 800bee4:	3fb745cd 	.word	0x3fb745cd
 800bee8:	920083ff 	.word	0x920083ff
 800beec:	3fc24924 	.word	0x3fc24924
 800bef0:	5555550d 	.word	0x5555550d
 800bef4:	3fd55555 	.word	0x3fd55555
 800bef8:	2c6a6c2f 	.word	0x2c6a6c2f
 800befc:	bfa2b444 	.word	0xbfa2b444
 800bf00:	52defd9a 	.word	0x52defd9a
 800bf04:	3fadde2d 	.word	0x3fadde2d
 800bf08:	af749a6d 	.word	0xaf749a6d
 800bf0c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bf10:	fe231671 	.word	0xfe231671
 800bf14:	3fbc71c6 	.word	0x3fbc71c6
 800bf18:	9998ebc4 	.word	0x9998ebc4
 800bf1c:	3fc99999 	.word	0x3fc99999
 800bf20:	40037fff 	.word	0x40037fff
 800bf24:	3ff80000 	.word	0x3ff80000
 800bf28:	bff00000 	.word	0xbff00000
 800bf2c:	0800dbd0 	.word	0x0800dbd0
 800bf30:	0800dbf0 	.word	0x0800dbf0
 800bf34:	3ff921fb 	.word	0x3ff921fb

0800bf38 <fabs>:
 800bf38:	004b      	lsls	r3, r1, #1
 800bf3a:	0859      	lsrs	r1, r3, #1
 800bf3c:	4770      	bx	lr
	...

0800bf40 <asin>:
 800bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf42:	0004      	movs	r4, r0
 800bf44:	000d      	movs	r5, r1
 800bf46:	f000 f915 	bl	800c174 <__ieee754_asin>
 800bf4a:	4b12      	ldr	r3, [pc, #72]	; (800bf94 <asin+0x54>)
 800bf4c:	0006      	movs	r6, r0
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	000f      	movs	r7, r1
 800bf52:	b25b      	sxtb	r3, r3
 800bf54:	3301      	adds	r3, #1
 800bf56:	d01a      	beq.n	800bf8e <asin+0x4e>
 800bf58:	0022      	movs	r2, r4
 800bf5a:	002b      	movs	r3, r5
 800bf5c:	0020      	movs	r0, r4
 800bf5e:	0029      	movs	r1, r5
 800bf60:	f7f6 ff48 	bl	8002df4 <__aeabi_dcmpun>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d112      	bne.n	800bf8e <asin+0x4e>
 800bf68:	0020      	movs	r0, r4
 800bf6a:	0029      	movs	r1, r5
 800bf6c:	f7ff ffe4 	bl	800bf38 <fabs>
 800bf70:	2200      	movs	r2, #0
 800bf72:	4b09      	ldr	r3, [pc, #36]	; (800bf98 <asin+0x58>)
 800bf74:	f7f4 fa80 	bl	8000478 <__aeabi_dcmpgt>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	d008      	beq.n	800bf8e <asin+0x4e>
 800bf7c:	f7fc fede 	bl	8008d3c <__errno>
 800bf80:	2321      	movs	r3, #33	; 0x21
 800bf82:	6003      	str	r3, [r0, #0]
 800bf84:	4805      	ldr	r0, [pc, #20]	; (800bf9c <asin+0x5c>)
 800bf86:	f001 f935 	bl	800d1f4 <nan>
 800bf8a:	0006      	movs	r6, r0
 800bf8c:	000f      	movs	r7, r1
 800bf8e:	0030      	movs	r0, r6
 800bf90:	0039      	movs	r1, r7
 800bf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf94:	200001e4 	.word	0x200001e4
 800bf98:	3ff00000 	.word	0x3ff00000
 800bf9c:	0800da60 	.word	0x0800da60

0800bfa0 <atan2>:
 800bfa0:	b510      	push	{r4, lr}
 800bfa2:	f000 fabf 	bl	800c524 <__ieee754_atan2>
 800bfa6:	bd10      	pop	{r4, pc}

0800bfa8 <pow>:
 800bfa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfaa:	001d      	movs	r5, r3
 800bfac:	0014      	movs	r4, r2
 800bfae:	9000      	str	r0, [sp, #0]
 800bfb0:	9101      	str	r1, [sp, #4]
 800bfb2:	f000 fb63 	bl	800c67c <__ieee754_pow>
 800bfb6:	4b54      	ldr	r3, [pc, #336]	; (800c108 <pow+0x160>)
 800bfb8:	0006      	movs	r6, r0
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	000f      	movs	r7, r1
 800bfbe:	b25b      	sxtb	r3, r3
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	d018      	beq.n	800bff6 <pow+0x4e>
 800bfc4:	0022      	movs	r2, r4
 800bfc6:	002b      	movs	r3, r5
 800bfc8:	0020      	movs	r0, r4
 800bfca:	0029      	movs	r1, r5
 800bfcc:	f7f6 ff12 	bl	8002df4 <__aeabi_dcmpun>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d110      	bne.n	800bff6 <pow+0x4e>
 800bfd4:	9a00      	ldr	r2, [sp, #0]
 800bfd6:	9b01      	ldr	r3, [sp, #4]
 800bfd8:	0010      	movs	r0, r2
 800bfda:	0019      	movs	r1, r3
 800bfdc:	f7f6 ff0a 	bl	8002df4 <__aeabi_dcmpun>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d00a      	beq.n	800bffe <pow+0x56>
 800bfe8:	0020      	movs	r0, r4
 800bfea:	0029      	movs	r1, r5
 800bfec:	f7f4 fa2a 	bl	8000444 <__aeabi_dcmpeq>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d000      	beq.n	800bff6 <pow+0x4e>
 800bff4:	e084      	b.n	800c100 <pow+0x158>
 800bff6:	0030      	movs	r0, r6
 800bff8:	0039      	movs	r1, r7
 800bffa:	b003      	add	sp, #12
 800bffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bffe:	9800      	ldr	r0, [sp, #0]
 800c000:	9901      	ldr	r1, [sp, #4]
 800c002:	f7f4 fa1f 	bl	8000444 <__aeabi_dcmpeq>
 800c006:	2800      	cmp	r0, #0
 800c008:	d01c      	beq.n	800c044 <pow+0x9c>
 800c00a:	2200      	movs	r2, #0
 800c00c:	2300      	movs	r3, #0
 800c00e:	0020      	movs	r0, r4
 800c010:	0029      	movs	r1, r5
 800c012:	f7f4 fa17 	bl	8000444 <__aeabi_dcmpeq>
 800c016:	2800      	cmp	r0, #0
 800c018:	d172      	bne.n	800c100 <pow+0x158>
 800c01a:	0020      	movs	r0, r4
 800c01c:	0029      	movs	r1, r5
 800c01e:	f001 f8e1 	bl	800d1e4 <finite>
 800c022:	2800      	cmp	r0, #0
 800c024:	d0e7      	beq.n	800bff6 <pow+0x4e>
 800c026:	2200      	movs	r2, #0
 800c028:	2300      	movs	r3, #0
 800c02a:	0020      	movs	r0, r4
 800c02c:	0029      	movs	r1, r5
 800c02e:	f7f4 fa0f 	bl	8000450 <__aeabi_dcmplt>
 800c032:	2800      	cmp	r0, #0
 800c034:	d0df      	beq.n	800bff6 <pow+0x4e>
 800c036:	f7fc fe81 	bl	8008d3c <__errno>
 800c03a:	2321      	movs	r3, #33	; 0x21
 800c03c:	2600      	movs	r6, #0
 800c03e:	6003      	str	r3, [r0, #0]
 800c040:	4f32      	ldr	r7, [pc, #200]	; (800c10c <pow+0x164>)
 800c042:	e7d8      	b.n	800bff6 <pow+0x4e>
 800c044:	0030      	movs	r0, r6
 800c046:	0039      	movs	r1, r7
 800c048:	f001 f8cc 	bl	800d1e4 <finite>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	d139      	bne.n	800c0c4 <pow+0x11c>
 800c050:	9800      	ldr	r0, [sp, #0]
 800c052:	9901      	ldr	r1, [sp, #4]
 800c054:	f001 f8c6 	bl	800d1e4 <finite>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d033      	beq.n	800c0c4 <pow+0x11c>
 800c05c:	0020      	movs	r0, r4
 800c05e:	0029      	movs	r1, r5
 800c060:	f001 f8c0 	bl	800d1e4 <finite>
 800c064:	2800      	cmp	r0, #0
 800c066:	d02d      	beq.n	800c0c4 <pow+0x11c>
 800c068:	0032      	movs	r2, r6
 800c06a:	003b      	movs	r3, r7
 800c06c:	0030      	movs	r0, r6
 800c06e:	0039      	movs	r1, r7
 800c070:	f7f6 fec0 	bl	8002df4 <__aeabi_dcmpun>
 800c074:	2800      	cmp	r0, #0
 800c076:	d00c      	beq.n	800c092 <pow+0xea>
 800c078:	f7fc fe60 	bl	8008d3c <__errno>
 800c07c:	2321      	movs	r3, #33	; 0x21
 800c07e:	2200      	movs	r2, #0
 800c080:	6003      	str	r3, [r0, #0]
 800c082:	2300      	movs	r3, #0
 800c084:	0010      	movs	r0, r2
 800c086:	0019      	movs	r1, r3
 800c088:	f7f5 fcb0 	bl	80019ec <__aeabi_ddiv>
 800c08c:	0006      	movs	r6, r0
 800c08e:	000f      	movs	r7, r1
 800c090:	e7b1      	b.n	800bff6 <pow+0x4e>
 800c092:	f7fc fe53 	bl	8008d3c <__errno>
 800c096:	2322      	movs	r3, #34	; 0x22
 800c098:	2200      	movs	r2, #0
 800c09a:	6003      	str	r3, [r0, #0]
 800c09c:	2300      	movs	r3, #0
 800c09e:	9800      	ldr	r0, [sp, #0]
 800c0a0:	9901      	ldr	r1, [sp, #4]
 800c0a2:	f7f4 f9d5 	bl	8000450 <__aeabi_dcmplt>
 800c0a6:	2600      	movs	r6, #0
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d009      	beq.n	800c0c0 <pow+0x118>
 800c0ac:	0020      	movs	r0, r4
 800c0ae:	0029      	movs	r1, r5
 800c0b0:	f001 f8a6 	bl	800d200 <rint>
 800c0b4:	0022      	movs	r2, r4
 800c0b6:	002b      	movs	r3, r5
 800c0b8:	f7f4 f9c4 	bl	8000444 <__aeabi_dcmpeq>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d0bf      	beq.n	800c040 <pow+0x98>
 800c0c0:	4f13      	ldr	r7, [pc, #76]	; (800c110 <pow+0x168>)
 800c0c2:	e798      	b.n	800bff6 <pow+0x4e>
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	0030      	movs	r0, r6
 800c0ca:	0039      	movs	r1, r7
 800c0cc:	f7f4 f9ba 	bl	8000444 <__aeabi_dcmpeq>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d100      	bne.n	800c0d6 <pow+0x12e>
 800c0d4:	e78f      	b.n	800bff6 <pow+0x4e>
 800c0d6:	9800      	ldr	r0, [sp, #0]
 800c0d8:	9901      	ldr	r1, [sp, #4]
 800c0da:	f001 f883 	bl	800d1e4 <finite>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	d100      	bne.n	800c0e4 <pow+0x13c>
 800c0e2:	e788      	b.n	800bff6 <pow+0x4e>
 800c0e4:	0020      	movs	r0, r4
 800c0e6:	0029      	movs	r1, r5
 800c0e8:	f001 f87c 	bl	800d1e4 <finite>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d100      	bne.n	800c0f2 <pow+0x14a>
 800c0f0:	e781      	b.n	800bff6 <pow+0x4e>
 800c0f2:	f7fc fe23 	bl	8008d3c <__errno>
 800c0f6:	2322      	movs	r3, #34	; 0x22
 800c0f8:	2600      	movs	r6, #0
 800c0fa:	2700      	movs	r7, #0
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	e77a      	b.n	800bff6 <pow+0x4e>
 800c100:	2600      	movs	r6, #0
 800c102:	4f04      	ldr	r7, [pc, #16]	; (800c114 <pow+0x16c>)
 800c104:	e777      	b.n	800bff6 <pow+0x4e>
 800c106:	46c0      	nop			; (mov r8, r8)
 800c108:	200001e4 	.word	0x200001e4
 800c10c:	fff00000 	.word	0xfff00000
 800c110:	7ff00000 	.word	0x7ff00000
 800c114:	3ff00000 	.word	0x3ff00000

0800c118 <sqrt>:
 800c118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11a:	0004      	movs	r4, r0
 800c11c:	000d      	movs	r5, r1
 800c11e:	f000 ffad 	bl	800d07c <__ieee754_sqrt>
 800c122:	4b13      	ldr	r3, [pc, #76]	; (800c170 <sqrt+0x58>)
 800c124:	0006      	movs	r6, r0
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	000f      	movs	r7, r1
 800c12a:	b25b      	sxtb	r3, r3
 800c12c:	3301      	adds	r3, #1
 800c12e:	d01b      	beq.n	800c168 <sqrt+0x50>
 800c130:	0022      	movs	r2, r4
 800c132:	002b      	movs	r3, r5
 800c134:	0020      	movs	r0, r4
 800c136:	0029      	movs	r1, r5
 800c138:	f7f6 fe5c 	bl	8002df4 <__aeabi_dcmpun>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d113      	bne.n	800c168 <sqrt+0x50>
 800c140:	2200      	movs	r2, #0
 800c142:	2300      	movs	r3, #0
 800c144:	0020      	movs	r0, r4
 800c146:	0029      	movs	r1, r5
 800c148:	f7f4 f982 	bl	8000450 <__aeabi_dcmplt>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	d00b      	beq.n	800c168 <sqrt+0x50>
 800c150:	f7fc fdf4 	bl	8008d3c <__errno>
 800c154:	2321      	movs	r3, #33	; 0x21
 800c156:	2200      	movs	r2, #0
 800c158:	6003      	str	r3, [r0, #0]
 800c15a:	2300      	movs	r3, #0
 800c15c:	0010      	movs	r0, r2
 800c15e:	0019      	movs	r1, r3
 800c160:	f7f5 fc44 	bl	80019ec <__aeabi_ddiv>
 800c164:	0006      	movs	r6, r0
 800c166:	000f      	movs	r7, r1
 800c168:	0030      	movs	r0, r6
 800c16a:	0039      	movs	r1, r7
 800c16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c16e:	46c0      	nop			; (mov r8, r8)
 800c170:	200001e4 	.word	0x200001e4

0800c174 <__ieee754_asin>:
 800c174:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c176:	4bca      	ldr	r3, [pc, #808]	; (800c4a0 <__ieee754_asin+0x32c>)
 800c178:	b08b      	sub	sp, #44	; 0x2c
 800c17a:	004e      	lsls	r6, r1, #1
 800c17c:	0004      	movs	r4, r0
 800c17e:	000d      	movs	r5, r1
 800c180:	9107      	str	r1, [sp, #28]
 800c182:	0876      	lsrs	r6, r6, #1
 800c184:	429e      	cmp	r6, r3
 800c186:	dd24      	ble.n	800c1d2 <__ieee754_asin+0x5e>
 800c188:	4bc6      	ldr	r3, [pc, #792]	; (800c4a4 <__ieee754_asin+0x330>)
 800c18a:	18f6      	adds	r6, r6, r3
 800c18c:	4306      	orrs	r6, r0
 800c18e:	d112      	bne.n	800c1b6 <__ieee754_asin+0x42>
 800c190:	4ac5      	ldr	r2, [pc, #788]	; (800c4a8 <__ieee754_asin+0x334>)
 800c192:	4bc6      	ldr	r3, [pc, #792]	; (800c4ac <__ieee754_asin+0x338>)
 800c194:	f7f6 f830 	bl	80021f8 <__aeabi_dmul>
 800c198:	4ac5      	ldr	r2, [pc, #788]	; (800c4b0 <__ieee754_asin+0x33c>)
 800c19a:	0006      	movs	r6, r0
 800c19c:	000f      	movs	r7, r1
 800c19e:	4bc5      	ldr	r3, [pc, #788]	; (800c4b4 <__ieee754_asin+0x340>)
 800c1a0:	0020      	movs	r0, r4
 800c1a2:	0029      	movs	r1, r5
 800c1a4:	f7f6 f828 	bl	80021f8 <__aeabi_dmul>
 800c1a8:	0002      	movs	r2, r0
 800c1aa:	000b      	movs	r3, r1
 800c1ac:	0030      	movs	r0, r6
 800c1ae:	0039      	movs	r1, r7
 800c1b0:	f7f5 f8b2 	bl	8001318 <__aeabi_dadd>
 800c1b4:	e007      	b.n	800c1c6 <__ieee754_asin+0x52>
 800c1b6:	0002      	movs	r2, r0
 800c1b8:	000b      	movs	r3, r1
 800c1ba:	f7f6 fa89 	bl	80026d0 <__aeabi_dsub>
 800c1be:	0002      	movs	r2, r0
 800c1c0:	000b      	movs	r3, r1
 800c1c2:	f7f5 fc13 	bl	80019ec <__aeabi_ddiv>
 800c1c6:	0004      	movs	r4, r0
 800c1c8:	000d      	movs	r5, r1
 800c1ca:	0020      	movs	r0, r4
 800c1cc:	0029      	movs	r1, r5
 800c1ce:	b00b      	add	sp, #44	; 0x2c
 800c1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1d2:	4bb9      	ldr	r3, [pc, #740]	; (800c4b8 <__ieee754_asin+0x344>)
 800c1d4:	429e      	cmp	r6, r3
 800c1d6:	dc0e      	bgt.n	800c1f6 <__ieee754_asin+0x82>
 800c1d8:	23f9      	movs	r3, #249	; 0xf9
 800c1da:	059b      	lsls	r3, r3, #22
 800c1dc:	429e      	cmp	r6, r3
 800c1de:	db00      	blt.n	800c1e2 <__ieee754_asin+0x6e>
 800c1e0:	e09c      	b.n	800c31c <__ieee754_asin+0x1a8>
 800c1e2:	4ab6      	ldr	r2, [pc, #728]	; (800c4bc <__ieee754_asin+0x348>)
 800c1e4:	4bb6      	ldr	r3, [pc, #728]	; (800c4c0 <__ieee754_asin+0x34c>)
 800c1e6:	f7f5 f897 	bl	8001318 <__aeabi_dadd>
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	4bb5      	ldr	r3, [pc, #724]	; (800c4c4 <__ieee754_asin+0x350>)
 800c1ee:	f7f4 f943 	bl	8000478 <__aeabi_dcmpgt>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	d1e9      	bne.n	800c1ca <__ieee754_asin+0x56>
 800c1f6:	0020      	movs	r0, r4
 800c1f8:	0029      	movs	r1, r5
 800c1fa:	f7ff fe9d 	bl	800bf38 <fabs>
 800c1fe:	0002      	movs	r2, r0
 800c200:	000b      	movs	r3, r1
 800c202:	2000      	movs	r0, #0
 800c204:	49af      	ldr	r1, [pc, #700]	; (800c4c4 <__ieee754_asin+0x350>)
 800c206:	f7f6 fa63 	bl	80026d0 <__aeabi_dsub>
 800c20a:	2200      	movs	r2, #0
 800c20c:	4bae      	ldr	r3, [pc, #696]	; (800c4c8 <__ieee754_asin+0x354>)
 800c20e:	f7f5 fff3 	bl	80021f8 <__aeabi_dmul>
 800c212:	0004      	movs	r4, r0
 800c214:	000d      	movs	r5, r1
 800c216:	4aad      	ldr	r2, [pc, #692]	; (800c4cc <__ieee754_asin+0x358>)
 800c218:	4bad      	ldr	r3, [pc, #692]	; (800c4d0 <__ieee754_asin+0x35c>)
 800c21a:	f7f5 ffed 	bl	80021f8 <__aeabi_dmul>
 800c21e:	4aad      	ldr	r2, [pc, #692]	; (800c4d4 <__ieee754_asin+0x360>)
 800c220:	4bad      	ldr	r3, [pc, #692]	; (800c4d8 <__ieee754_asin+0x364>)
 800c222:	f7f5 f879 	bl	8001318 <__aeabi_dadd>
 800c226:	0022      	movs	r2, r4
 800c228:	002b      	movs	r3, r5
 800c22a:	f7f5 ffe5 	bl	80021f8 <__aeabi_dmul>
 800c22e:	4aab      	ldr	r2, [pc, #684]	; (800c4dc <__ieee754_asin+0x368>)
 800c230:	4bab      	ldr	r3, [pc, #684]	; (800c4e0 <__ieee754_asin+0x36c>)
 800c232:	f7f6 fa4d 	bl	80026d0 <__aeabi_dsub>
 800c236:	0022      	movs	r2, r4
 800c238:	002b      	movs	r3, r5
 800c23a:	f7f5 ffdd 	bl	80021f8 <__aeabi_dmul>
 800c23e:	4aa9      	ldr	r2, [pc, #676]	; (800c4e4 <__ieee754_asin+0x370>)
 800c240:	4ba9      	ldr	r3, [pc, #676]	; (800c4e8 <__ieee754_asin+0x374>)
 800c242:	f7f5 f869 	bl	8001318 <__aeabi_dadd>
 800c246:	0022      	movs	r2, r4
 800c248:	002b      	movs	r3, r5
 800c24a:	f7f5 ffd5 	bl	80021f8 <__aeabi_dmul>
 800c24e:	4aa7      	ldr	r2, [pc, #668]	; (800c4ec <__ieee754_asin+0x378>)
 800c250:	4ba7      	ldr	r3, [pc, #668]	; (800c4f0 <__ieee754_asin+0x37c>)
 800c252:	f7f6 fa3d 	bl	80026d0 <__aeabi_dsub>
 800c256:	0022      	movs	r2, r4
 800c258:	002b      	movs	r3, r5
 800c25a:	f7f5 ffcd 	bl	80021f8 <__aeabi_dmul>
 800c25e:	4aa5      	ldr	r2, [pc, #660]	; (800c4f4 <__ieee754_asin+0x380>)
 800c260:	4ba5      	ldr	r3, [pc, #660]	; (800c4f8 <__ieee754_asin+0x384>)
 800c262:	f7f5 f859 	bl	8001318 <__aeabi_dadd>
 800c266:	0022      	movs	r2, r4
 800c268:	002b      	movs	r3, r5
 800c26a:	f7f5 ffc5 	bl	80021f8 <__aeabi_dmul>
 800c26e:	4aa3      	ldr	r2, [pc, #652]	; (800c4fc <__ieee754_asin+0x388>)
 800c270:	9002      	str	r0, [sp, #8]
 800c272:	9103      	str	r1, [sp, #12]
 800c274:	4ba2      	ldr	r3, [pc, #648]	; (800c500 <__ieee754_asin+0x38c>)
 800c276:	0020      	movs	r0, r4
 800c278:	0029      	movs	r1, r5
 800c27a:	f7f5 ffbd 	bl	80021f8 <__aeabi_dmul>
 800c27e:	4aa1      	ldr	r2, [pc, #644]	; (800c504 <__ieee754_asin+0x390>)
 800c280:	4ba1      	ldr	r3, [pc, #644]	; (800c508 <__ieee754_asin+0x394>)
 800c282:	f7f6 fa25 	bl	80026d0 <__aeabi_dsub>
 800c286:	0022      	movs	r2, r4
 800c288:	002b      	movs	r3, r5
 800c28a:	f7f5 ffb5 	bl	80021f8 <__aeabi_dmul>
 800c28e:	4a9f      	ldr	r2, [pc, #636]	; (800c50c <__ieee754_asin+0x398>)
 800c290:	4b9f      	ldr	r3, [pc, #636]	; (800c510 <__ieee754_asin+0x39c>)
 800c292:	f7f5 f841 	bl	8001318 <__aeabi_dadd>
 800c296:	0022      	movs	r2, r4
 800c298:	002b      	movs	r3, r5
 800c29a:	f7f5 ffad 	bl	80021f8 <__aeabi_dmul>
 800c29e:	4a9d      	ldr	r2, [pc, #628]	; (800c514 <__ieee754_asin+0x3a0>)
 800c2a0:	4b9d      	ldr	r3, [pc, #628]	; (800c518 <__ieee754_asin+0x3a4>)
 800c2a2:	f7f6 fa15 	bl	80026d0 <__aeabi_dsub>
 800c2a6:	0022      	movs	r2, r4
 800c2a8:	002b      	movs	r3, r5
 800c2aa:	f7f5 ffa5 	bl	80021f8 <__aeabi_dmul>
 800c2ae:	4b85      	ldr	r3, [pc, #532]	; (800c4c4 <__ieee754_asin+0x350>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f7f5 f831 	bl	8001318 <__aeabi_dadd>
 800c2b6:	9004      	str	r0, [sp, #16]
 800c2b8:	9105      	str	r1, [sp, #20]
 800c2ba:	0020      	movs	r0, r4
 800c2bc:	0029      	movs	r1, r5
 800c2be:	f000 fedd 	bl	800d07c <__ieee754_sqrt>
 800c2c2:	4b96      	ldr	r3, [pc, #600]	; (800c51c <__ieee754_asin+0x3a8>)
 800c2c4:	9000      	str	r0, [sp, #0]
 800c2c6:	9101      	str	r1, [sp, #4]
 800c2c8:	429e      	cmp	r6, r3
 800c2ca:	dc00      	bgt.n	800c2ce <__ieee754_asin+0x15a>
 800c2cc:	e08b      	b.n	800c3e6 <__ieee754_asin+0x272>
 800c2ce:	9a04      	ldr	r2, [sp, #16]
 800c2d0:	9b05      	ldr	r3, [sp, #20]
 800c2d2:	9802      	ldr	r0, [sp, #8]
 800c2d4:	9903      	ldr	r1, [sp, #12]
 800c2d6:	f7f5 fb89 	bl	80019ec <__aeabi_ddiv>
 800c2da:	9a00      	ldr	r2, [sp, #0]
 800c2dc:	9b01      	ldr	r3, [sp, #4]
 800c2de:	f7f5 ff8b 	bl	80021f8 <__aeabi_dmul>
 800c2e2:	9a00      	ldr	r2, [sp, #0]
 800c2e4:	9b01      	ldr	r3, [sp, #4]
 800c2e6:	f7f5 f817 	bl	8001318 <__aeabi_dadd>
 800c2ea:	0002      	movs	r2, r0
 800c2ec:	000b      	movs	r3, r1
 800c2ee:	f7f5 f813 	bl	8001318 <__aeabi_dadd>
 800c2f2:	4a6f      	ldr	r2, [pc, #444]	; (800c4b0 <__ieee754_asin+0x33c>)
 800c2f4:	4b6f      	ldr	r3, [pc, #444]	; (800c4b4 <__ieee754_asin+0x340>)
 800c2f6:	f7f6 f9eb 	bl	80026d0 <__aeabi_dsub>
 800c2fa:	0002      	movs	r2, r0
 800c2fc:	000b      	movs	r3, r1
 800c2fe:	486a      	ldr	r0, [pc, #424]	; (800c4a8 <__ieee754_asin+0x334>)
 800c300:	496a      	ldr	r1, [pc, #424]	; (800c4ac <__ieee754_asin+0x338>)
 800c302:	f7f6 f9e5 	bl	80026d0 <__aeabi_dsub>
 800c306:	9b07      	ldr	r3, [sp, #28]
 800c308:	0004      	movs	r4, r0
 800c30a:	000d      	movs	r5, r1
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	dd00      	ble.n	800c312 <__ieee754_asin+0x19e>
 800c310:	e75b      	b.n	800c1ca <__ieee754_asin+0x56>
 800c312:	2180      	movs	r1, #128	; 0x80
 800c314:	0609      	lsls	r1, r1, #24
 800c316:	186b      	adds	r3, r5, r1
 800c318:	001d      	movs	r5, r3
 800c31a:	e756      	b.n	800c1ca <__ieee754_asin+0x56>
 800c31c:	0002      	movs	r2, r0
 800c31e:	000b      	movs	r3, r1
 800c320:	f7f5 ff6a 	bl	80021f8 <__aeabi_dmul>
 800c324:	0006      	movs	r6, r0
 800c326:	000f      	movs	r7, r1
 800c328:	4a68      	ldr	r2, [pc, #416]	; (800c4cc <__ieee754_asin+0x358>)
 800c32a:	4b69      	ldr	r3, [pc, #420]	; (800c4d0 <__ieee754_asin+0x35c>)
 800c32c:	f7f5 ff64 	bl	80021f8 <__aeabi_dmul>
 800c330:	4a68      	ldr	r2, [pc, #416]	; (800c4d4 <__ieee754_asin+0x360>)
 800c332:	4b69      	ldr	r3, [pc, #420]	; (800c4d8 <__ieee754_asin+0x364>)
 800c334:	f7f4 fff0 	bl	8001318 <__aeabi_dadd>
 800c338:	0032      	movs	r2, r6
 800c33a:	003b      	movs	r3, r7
 800c33c:	f7f5 ff5c 	bl	80021f8 <__aeabi_dmul>
 800c340:	4a66      	ldr	r2, [pc, #408]	; (800c4dc <__ieee754_asin+0x368>)
 800c342:	4b67      	ldr	r3, [pc, #412]	; (800c4e0 <__ieee754_asin+0x36c>)
 800c344:	f7f6 f9c4 	bl	80026d0 <__aeabi_dsub>
 800c348:	0032      	movs	r2, r6
 800c34a:	003b      	movs	r3, r7
 800c34c:	f7f5 ff54 	bl	80021f8 <__aeabi_dmul>
 800c350:	4a64      	ldr	r2, [pc, #400]	; (800c4e4 <__ieee754_asin+0x370>)
 800c352:	4b65      	ldr	r3, [pc, #404]	; (800c4e8 <__ieee754_asin+0x374>)
 800c354:	f7f4 ffe0 	bl	8001318 <__aeabi_dadd>
 800c358:	0032      	movs	r2, r6
 800c35a:	003b      	movs	r3, r7
 800c35c:	f7f5 ff4c 	bl	80021f8 <__aeabi_dmul>
 800c360:	4a62      	ldr	r2, [pc, #392]	; (800c4ec <__ieee754_asin+0x378>)
 800c362:	4b63      	ldr	r3, [pc, #396]	; (800c4f0 <__ieee754_asin+0x37c>)
 800c364:	f7f6 f9b4 	bl	80026d0 <__aeabi_dsub>
 800c368:	0032      	movs	r2, r6
 800c36a:	003b      	movs	r3, r7
 800c36c:	f7f5 ff44 	bl	80021f8 <__aeabi_dmul>
 800c370:	4a60      	ldr	r2, [pc, #384]	; (800c4f4 <__ieee754_asin+0x380>)
 800c372:	4b61      	ldr	r3, [pc, #388]	; (800c4f8 <__ieee754_asin+0x384>)
 800c374:	f7f4 ffd0 	bl	8001318 <__aeabi_dadd>
 800c378:	0032      	movs	r2, r6
 800c37a:	003b      	movs	r3, r7
 800c37c:	f7f5 ff3c 	bl	80021f8 <__aeabi_dmul>
 800c380:	4a5e      	ldr	r2, [pc, #376]	; (800c4fc <__ieee754_asin+0x388>)
 800c382:	9000      	str	r0, [sp, #0]
 800c384:	9101      	str	r1, [sp, #4]
 800c386:	4b5e      	ldr	r3, [pc, #376]	; (800c500 <__ieee754_asin+0x38c>)
 800c388:	0030      	movs	r0, r6
 800c38a:	0039      	movs	r1, r7
 800c38c:	f7f5 ff34 	bl	80021f8 <__aeabi_dmul>
 800c390:	4a5c      	ldr	r2, [pc, #368]	; (800c504 <__ieee754_asin+0x390>)
 800c392:	4b5d      	ldr	r3, [pc, #372]	; (800c508 <__ieee754_asin+0x394>)
 800c394:	f7f6 f99c 	bl	80026d0 <__aeabi_dsub>
 800c398:	0032      	movs	r2, r6
 800c39a:	003b      	movs	r3, r7
 800c39c:	f7f5 ff2c 	bl	80021f8 <__aeabi_dmul>
 800c3a0:	4a5a      	ldr	r2, [pc, #360]	; (800c50c <__ieee754_asin+0x398>)
 800c3a2:	4b5b      	ldr	r3, [pc, #364]	; (800c510 <__ieee754_asin+0x39c>)
 800c3a4:	f7f4 ffb8 	bl	8001318 <__aeabi_dadd>
 800c3a8:	0032      	movs	r2, r6
 800c3aa:	003b      	movs	r3, r7
 800c3ac:	f7f5 ff24 	bl	80021f8 <__aeabi_dmul>
 800c3b0:	4a58      	ldr	r2, [pc, #352]	; (800c514 <__ieee754_asin+0x3a0>)
 800c3b2:	4b59      	ldr	r3, [pc, #356]	; (800c518 <__ieee754_asin+0x3a4>)
 800c3b4:	f7f6 f98c 	bl	80026d0 <__aeabi_dsub>
 800c3b8:	0032      	movs	r2, r6
 800c3ba:	003b      	movs	r3, r7
 800c3bc:	f7f5 ff1c 	bl	80021f8 <__aeabi_dmul>
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	4b40      	ldr	r3, [pc, #256]	; (800c4c4 <__ieee754_asin+0x350>)
 800c3c4:	f7f4 ffa8 	bl	8001318 <__aeabi_dadd>
 800c3c8:	0002      	movs	r2, r0
 800c3ca:	000b      	movs	r3, r1
 800c3cc:	9800      	ldr	r0, [sp, #0]
 800c3ce:	9901      	ldr	r1, [sp, #4]
 800c3d0:	f7f5 fb0c 	bl	80019ec <__aeabi_ddiv>
 800c3d4:	0022      	movs	r2, r4
 800c3d6:	002b      	movs	r3, r5
 800c3d8:	f7f5 ff0e 	bl	80021f8 <__aeabi_dmul>
 800c3dc:	0002      	movs	r2, r0
 800c3de:	000b      	movs	r3, r1
 800c3e0:	0020      	movs	r0, r4
 800c3e2:	0029      	movs	r1, r5
 800c3e4:	e6e4      	b.n	800c1b0 <__ieee754_asin+0x3c>
 800c3e6:	9a00      	ldr	r2, [sp, #0]
 800c3e8:	9b01      	ldr	r3, [sp, #4]
 800c3ea:	0010      	movs	r0, r2
 800c3ec:	9e00      	ldr	r6, [sp, #0]
 800c3ee:	9f01      	ldr	r7, [sp, #4]
 800c3f0:	0019      	movs	r1, r3
 800c3f2:	f7f4 ff91 	bl	8001318 <__aeabi_dadd>
 800c3f6:	9a04      	ldr	r2, [sp, #16]
 800c3f8:	9b05      	ldr	r3, [sp, #20]
 800c3fa:	9008      	str	r0, [sp, #32]
 800c3fc:	9109      	str	r1, [sp, #36]	; 0x24
 800c3fe:	9802      	ldr	r0, [sp, #8]
 800c400:	9903      	ldr	r1, [sp, #12]
 800c402:	f7f5 faf3 	bl	80019ec <__aeabi_ddiv>
 800c406:	0002      	movs	r2, r0
 800c408:	000b      	movs	r3, r1
 800c40a:	9808      	ldr	r0, [sp, #32]
 800c40c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c40e:	f7f5 fef3 	bl	80021f8 <__aeabi_dmul>
 800c412:	2600      	movs	r6, #0
 800c414:	9002      	str	r0, [sp, #8]
 800c416:	9103      	str	r1, [sp, #12]
 800c418:	0032      	movs	r2, r6
 800c41a:	003b      	movs	r3, r7
 800c41c:	0030      	movs	r0, r6
 800c41e:	0039      	movs	r1, r7
 800c420:	f7f5 feea 	bl	80021f8 <__aeabi_dmul>
 800c424:	0002      	movs	r2, r0
 800c426:	000b      	movs	r3, r1
 800c428:	0020      	movs	r0, r4
 800c42a:	0029      	movs	r1, r5
 800c42c:	f7f6 f950 	bl	80026d0 <__aeabi_dsub>
 800c430:	0032      	movs	r2, r6
 800c432:	0004      	movs	r4, r0
 800c434:	000d      	movs	r5, r1
 800c436:	9800      	ldr	r0, [sp, #0]
 800c438:	9901      	ldr	r1, [sp, #4]
 800c43a:	003b      	movs	r3, r7
 800c43c:	f7f4 ff6c 	bl	8001318 <__aeabi_dadd>
 800c440:	0002      	movs	r2, r0
 800c442:	000b      	movs	r3, r1
 800c444:	0020      	movs	r0, r4
 800c446:	0029      	movs	r1, r5
 800c448:	f7f5 fad0 	bl	80019ec <__aeabi_ddiv>
 800c44c:	0002      	movs	r2, r0
 800c44e:	000b      	movs	r3, r1
 800c450:	f7f4 ff62 	bl	8001318 <__aeabi_dadd>
 800c454:	0002      	movs	r2, r0
 800c456:	000b      	movs	r3, r1
 800c458:	4815      	ldr	r0, [pc, #84]	; (800c4b0 <__ieee754_asin+0x33c>)
 800c45a:	4916      	ldr	r1, [pc, #88]	; (800c4b4 <__ieee754_asin+0x340>)
 800c45c:	f7f6 f938 	bl	80026d0 <__aeabi_dsub>
 800c460:	0002      	movs	r2, r0
 800c462:	000b      	movs	r3, r1
 800c464:	9802      	ldr	r0, [sp, #8]
 800c466:	9903      	ldr	r1, [sp, #12]
 800c468:	f7f6 f932 	bl	80026d0 <__aeabi_dsub>
 800c46c:	0032      	movs	r2, r6
 800c46e:	0004      	movs	r4, r0
 800c470:	000d      	movs	r5, r1
 800c472:	003b      	movs	r3, r7
 800c474:	0030      	movs	r0, r6
 800c476:	0039      	movs	r1, r7
 800c478:	f7f4 ff4e 	bl	8001318 <__aeabi_dadd>
 800c47c:	0002      	movs	r2, r0
 800c47e:	000b      	movs	r3, r1
 800c480:	4809      	ldr	r0, [pc, #36]	; (800c4a8 <__ieee754_asin+0x334>)
 800c482:	4927      	ldr	r1, [pc, #156]	; (800c520 <__ieee754_asin+0x3ac>)
 800c484:	f7f6 f924 	bl	80026d0 <__aeabi_dsub>
 800c488:	0002      	movs	r2, r0
 800c48a:	000b      	movs	r3, r1
 800c48c:	0020      	movs	r0, r4
 800c48e:	0029      	movs	r1, r5
 800c490:	f7f6 f91e 	bl	80026d0 <__aeabi_dsub>
 800c494:	0002      	movs	r2, r0
 800c496:	000b      	movs	r3, r1
 800c498:	4803      	ldr	r0, [pc, #12]	; (800c4a8 <__ieee754_asin+0x334>)
 800c49a:	4921      	ldr	r1, [pc, #132]	; (800c520 <__ieee754_asin+0x3ac>)
 800c49c:	e731      	b.n	800c302 <__ieee754_asin+0x18e>
 800c49e:	46c0      	nop			; (mov r8, r8)
 800c4a0:	3fefffff 	.word	0x3fefffff
 800c4a4:	c0100000 	.word	0xc0100000
 800c4a8:	54442d18 	.word	0x54442d18
 800c4ac:	3ff921fb 	.word	0x3ff921fb
 800c4b0:	33145c07 	.word	0x33145c07
 800c4b4:	3c91a626 	.word	0x3c91a626
 800c4b8:	3fdfffff 	.word	0x3fdfffff
 800c4bc:	8800759c 	.word	0x8800759c
 800c4c0:	7e37e43c 	.word	0x7e37e43c
 800c4c4:	3ff00000 	.word	0x3ff00000
 800c4c8:	3fe00000 	.word	0x3fe00000
 800c4cc:	0dfdf709 	.word	0x0dfdf709
 800c4d0:	3f023de1 	.word	0x3f023de1
 800c4d4:	7501b288 	.word	0x7501b288
 800c4d8:	3f49efe0 	.word	0x3f49efe0
 800c4dc:	b5688f3b 	.word	0xb5688f3b
 800c4e0:	3fa48228 	.word	0x3fa48228
 800c4e4:	0e884455 	.word	0x0e884455
 800c4e8:	3fc9c155 	.word	0x3fc9c155
 800c4ec:	03eb6f7d 	.word	0x03eb6f7d
 800c4f0:	3fd4d612 	.word	0x3fd4d612
 800c4f4:	55555555 	.word	0x55555555
 800c4f8:	3fc55555 	.word	0x3fc55555
 800c4fc:	b12e9282 	.word	0xb12e9282
 800c500:	3fb3b8c5 	.word	0x3fb3b8c5
 800c504:	1b8d0159 	.word	0x1b8d0159
 800c508:	3fe6066c 	.word	0x3fe6066c
 800c50c:	9c598ac8 	.word	0x9c598ac8
 800c510:	40002ae5 	.word	0x40002ae5
 800c514:	1c8a2d4b 	.word	0x1c8a2d4b
 800c518:	40033a27 	.word	0x40033a27
 800c51c:	3fef3332 	.word	0x3fef3332
 800c520:	3fe921fb 	.word	0x3fe921fb

0800c524 <__ieee754_atan2>:
 800c524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c526:	0016      	movs	r6, r2
 800c528:	001d      	movs	r5, r3
 800c52a:	005a      	lsls	r2, r3, #1
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	4273      	negs	r3, r6
 800c530:	4333      	orrs	r3, r6
 800c532:	4f46      	ldr	r7, [pc, #280]	; (800c64c <__ieee754_atan2+0x128>)
 800c534:	0852      	lsrs	r2, r2, #1
 800c536:	0fdb      	lsrs	r3, r3, #31
 800c538:	4313      	orrs	r3, r2
 800c53a:	42bb      	cmp	r3, r7
 800c53c:	d809      	bhi.n	800c552 <__ieee754_atan2+0x2e>
 800c53e:	4244      	negs	r4, r0
 800c540:	004b      	lsls	r3, r1, #1
 800c542:	4304      	orrs	r4, r0
 800c544:	085b      	lsrs	r3, r3, #1
 800c546:	0fe4      	lsrs	r4, r4, #31
 800c548:	9100      	str	r1, [sp, #0]
 800c54a:	9001      	str	r0, [sp, #4]
 800c54c:	431c      	orrs	r4, r3
 800c54e:	42bc      	cmp	r4, r7
 800c550:	d905      	bls.n	800c55e <__ieee754_atan2+0x3a>
 800c552:	0032      	movs	r2, r6
 800c554:	002b      	movs	r3, r5
 800c556:	f7f4 fedf 	bl	8001318 <__aeabi_dadd>
 800c55a:	b003      	add	sp, #12
 800c55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c55e:	4c3c      	ldr	r4, [pc, #240]	; (800c650 <__ieee754_atan2+0x12c>)
 800c560:	192c      	adds	r4, r5, r4
 800c562:	4334      	orrs	r4, r6
 800c564:	d102      	bne.n	800c56c <__ieee754_atan2+0x48>
 800c566:	f7ff fb67 	bl	800bc38 <atan>
 800c56a:	e7f6      	b.n	800c55a <__ieee754_atan2+0x36>
 800c56c:	17ac      	asrs	r4, r5, #30
 800c56e:	46a4      	mov	ip, r4
 800c570:	2402      	movs	r4, #2
 800c572:	4667      	mov	r7, ip
 800c574:	403c      	ands	r4, r7
 800c576:	9f00      	ldr	r7, [sp, #0]
 800c578:	0fff      	lsrs	r7, r7, #31
 800c57a:	433c      	orrs	r4, r7
 800c57c:	9f01      	ldr	r7, [sp, #4]
 800c57e:	431f      	orrs	r7, r3
 800c580:	d106      	bne.n	800c590 <__ieee754_atan2+0x6c>
 800c582:	2c02      	cmp	r4, #2
 800c584:	d056      	beq.n	800c634 <__ieee754_atan2+0x110>
 800c586:	2c03      	cmp	r4, #3
 800c588:	d1e7      	bne.n	800c55a <__ieee754_atan2+0x36>
 800c58a:	4832      	ldr	r0, [pc, #200]	; (800c654 <__ieee754_atan2+0x130>)
 800c58c:	4932      	ldr	r1, [pc, #200]	; (800c658 <__ieee754_atan2+0x134>)
 800c58e:	e7e4      	b.n	800c55a <__ieee754_atan2+0x36>
 800c590:	0017      	movs	r7, r2
 800c592:	4337      	orrs	r7, r6
 800c594:	d105      	bne.n	800c5a2 <__ieee754_atan2+0x7e>
 800c596:	9b00      	ldr	r3, [sp, #0]
 800c598:	482e      	ldr	r0, [pc, #184]	; (800c654 <__ieee754_atan2+0x130>)
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	da53      	bge.n	800c646 <__ieee754_atan2+0x122>
 800c59e:	492f      	ldr	r1, [pc, #188]	; (800c65c <__ieee754_atan2+0x138>)
 800c5a0:	e7db      	b.n	800c55a <__ieee754_atan2+0x36>
 800c5a2:	4f2a      	ldr	r7, [pc, #168]	; (800c64c <__ieee754_atan2+0x128>)
 800c5a4:	42ba      	cmp	r2, r7
 800c5a6:	d10f      	bne.n	800c5c8 <__ieee754_atan2+0xa4>
 800c5a8:	3c01      	subs	r4, #1
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d107      	bne.n	800c5be <__ieee754_atan2+0x9a>
 800c5ae:	2c02      	cmp	r4, #2
 800c5b0:	d843      	bhi.n	800c63a <__ieee754_atan2+0x116>
 800c5b2:	4b2b      	ldr	r3, [pc, #172]	; (800c660 <__ieee754_atan2+0x13c>)
 800c5b4:	00e4      	lsls	r4, r4, #3
 800c5b6:	191c      	adds	r4, r3, r4
 800c5b8:	6820      	ldr	r0, [r4, #0]
 800c5ba:	6861      	ldr	r1, [r4, #4]
 800c5bc:	e7cd      	b.n	800c55a <__ieee754_atan2+0x36>
 800c5be:	2c02      	cmp	r4, #2
 800c5c0:	d83e      	bhi.n	800c640 <__ieee754_atan2+0x11c>
 800c5c2:	4b28      	ldr	r3, [pc, #160]	; (800c664 <__ieee754_atan2+0x140>)
 800c5c4:	00e4      	lsls	r4, r4, #3
 800c5c6:	e7f6      	b.n	800c5b6 <__ieee754_atan2+0x92>
 800c5c8:	4f20      	ldr	r7, [pc, #128]	; (800c64c <__ieee754_atan2+0x128>)
 800c5ca:	42bb      	cmp	r3, r7
 800c5cc:	d0e3      	beq.n	800c596 <__ieee754_atan2+0x72>
 800c5ce:	1a9b      	subs	r3, r3, r2
 800c5d0:	151b      	asrs	r3, r3, #20
 800c5d2:	2b3c      	cmp	r3, #60	; 0x3c
 800c5d4:	dc18      	bgt.n	800c608 <__ieee754_atan2+0xe4>
 800c5d6:	2d00      	cmp	r5, #0
 800c5d8:	da01      	bge.n	800c5de <__ieee754_atan2+0xba>
 800c5da:	333c      	adds	r3, #60	; 0x3c
 800c5dc:	db17      	blt.n	800c60e <__ieee754_atan2+0xea>
 800c5de:	0032      	movs	r2, r6
 800c5e0:	002b      	movs	r3, r5
 800c5e2:	f7f5 fa03 	bl	80019ec <__aeabi_ddiv>
 800c5e6:	f7ff fca7 	bl	800bf38 <fabs>
 800c5ea:	f7ff fb25 	bl	800bc38 <atan>
 800c5ee:	2c01      	cmp	r4, #1
 800c5f0:	d010      	beq.n	800c614 <__ieee754_atan2+0xf0>
 800c5f2:	2c02      	cmp	r4, #2
 800c5f4:	d013      	beq.n	800c61e <__ieee754_atan2+0xfa>
 800c5f6:	2c00      	cmp	r4, #0
 800c5f8:	d0af      	beq.n	800c55a <__ieee754_atan2+0x36>
 800c5fa:	4a1b      	ldr	r2, [pc, #108]	; (800c668 <__ieee754_atan2+0x144>)
 800c5fc:	4b1b      	ldr	r3, [pc, #108]	; (800c66c <__ieee754_atan2+0x148>)
 800c5fe:	f7f6 f867 	bl	80026d0 <__aeabi_dsub>
 800c602:	4a14      	ldr	r2, [pc, #80]	; (800c654 <__ieee754_atan2+0x130>)
 800c604:	4b1a      	ldr	r3, [pc, #104]	; (800c670 <__ieee754_atan2+0x14c>)
 800c606:	e012      	b.n	800c62e <__ieee754_atan2+0x10a>
 800c608:	4812      	ldr	r0, [pc, #72]	; (800c654 <__ieee754_atan2+0x130>)
 800c60a:	491a      	ldr	r1, [pc, #104]	; (800c674 <__ieee754_atan2+0x150>)
 800c60c:	e7ef      	b.n	800c5ee <__ieee754_atan2+0xca>
 800c60e:	2000      	movs	r0, #0
 800c610:	2100      	movs	r1, #0
 800c612:	e7ec      	b.n	800c5ee <__ieee754_atan2+0xca>
 800c614:	2480      	movs	r4, #128	; 0x80
 800c616:	0624      	lsls	r4, r4, #24
 800c618:	190b      	adds	r3, r1, r4
 800c61a:	0019      	movs	r1, r3
 800c61c:	e79d      	b.n	800c55a <__ieee754_atan2+0x36>
 800c61e:	4a12      	ldr	r2, [pc, #72]	; (800c668 <__ieee754_atan2+0x144>)
 800c620:	4b12      	ldr	r3, [pc, #72]	; (800c66c <__ieee754_atan2+0x148>)
 800c622:	f7f6 f855 	bl	80026d0 <__aeabi_dsub>
 800c626:	0002      	movs	r2, r0
 800c628:	000b      	movs	r3, r1
 800c62a:	480a      	ldr	r0, [pc, #40]	; (800c654 <__ieee754_atan2+0x130>)
 800c62c:	4910      	ldr	r1, [pc, #64]	; (800c670 <__ieee754_atan2+0x14c>)
 800c62e:	f7f6 f84f 	bl	80026d0 <__aeabi_dsub>
 800c632:	e792      	b.n	800c55a <__ieee754_atan2+0x36>
 800c634:	4807      	ldr	r0, [pc, #28]	; (800c654 <__ieee754_atan2+0x130>)
 800c636:	490e      	ldr	r1, [pc, #56]	; (800c670 <__ieee754_atan2+0x14c>)
 800c638:	e78f      	b.n	800c55a <__ieee754_atan2+0x36>
 800c63a:	4806      	ldr	r0, [pc, #24]	; (800c654 <__ieee754_atan2+0x130>)
 800c63c:	490e      	ldr	r1, [pc, #56]	; (800c678 <__ieee754_atan2+0x154>)
 800c63e:	e78c      	b.n	800c55a <__ieee754_atan2+0x36>
 800c640:	2000      	movs	r0, #0
 800c642:	2100      	movs	r1, #0
 800c644:	e789      	b.n	800c55a <__ieee754_atan2+0x36>
 800c646:	490b      	ldr	r1, [pc, #44]	; (800c674 <__ieee754_atan2+0x150>)
 800c648:	e787      	b.n	800c55a <__ieee754_atan2+0x36>
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	7ff00000 	.word	0x7ff00000
 800c650:	c0100000 	.word	0xc0100000
 800c654:	54442d18 	.word	0x54442d18
 800c658:	c00921fb 	.word	0xc00921fb
 800c65c:	bff921fb 	.word	0xbff921fb
 800c660:	0800dc10 	.word	0x0800dc10
 800c664:	0800dc28 	.word	0x0800dc28
 800c668:	33145c07 	.word	0x33145c07
 800c66c:	3ca1a626 	.word	0x3ca1a626
 800c670:	400921fb 	.word	0x400921fb
 800c674:	3ff921fb 	.word	0x3ff921fb
 800c678:	3fe921fb 	.word	0x3fe921fb

0800c67c <__ieee754_pow>:
 800c67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c67e:	b095      	sub	sp, #84	; 0x54
 800c680:	9202      	str	r2, [sp, #8]
 800c682:	9303      	str	r3, [sp, #12]
 800c684:	9b03      	ldr	r3, [sp, #12]
 800c686:	9a03      	ldr	r2, [sp, #12]
 800c688:	9304      	str	r3, [sp, #16]
 800c68a:	9b02      	ldr	r3, [sp, #8]
 800c68c:	0055      	lsls	r5, r2, #1
 800c68e:	001a      	movs	r2, r3
 800c690:	086d      	lsrs	r5, r5, #1
 800c692:	0007      	movs	r7, r0
 800c694:	000e      	movs	r6, r1
 800c696:	432a      	orrs	r2, r5
 800c698:	d101      	bne.n	800c69e <__ieee754_pow+0x22>
 800c69a:	f000 fcb6 	bl	800d00a <__ieee754_pow+0x98e>
 800c69e:	4a82      	ldr	r2, [pc, #520]	; (800c8a8 <__ieee754_pow+0x22c>)
 800c6a0:	004c      	lsls	r4, r1, #1
 800c6a2:	9108      	str	r1, [sp, #32]
 800c6a4:	9000      	str	r0, [sp, #0]
 800c6a6:	0864      	lsrs	r4, r4, #1
 800c6a8:	4294      	cmp	r4, r2
 800c6aa:	dc0d      	bgt.n	800c6c8 <__ieee754_pow+0x4c>
 800c6ac:	d104      	bne.n	800c6b8 <__ieee754_pow+0x3c>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d110      	bne.n	800c6d4 <__ieee754_pow+0x58>
 800c6b2:	42a5      	cmp	r5, r4
 800c6b4:	dd03      	ble.n	800c6be <__ieee754_pow+0x42>
 800c6b6:	e00d      	b.n	800c6d4 <__ieee754_pow+0x58>
 800c6b8:	4a7b      	ldr	r2, [pc, #492]	; (800c8a8 <__ieee754_pow+0x22c>)
 800c6ba:	4295      	cmp	r5, r2
 800c6bc:	dc04      	bgt.n	800c6c8 <__ieee754_pow+0x4c>
 800c6be:	4a7a      	ldr	r2, [pc, #488]	; (800c8a8 <__ieee754_pow+0x22c>)
 800c6c0:	4295      	cmp	r5, r2
 800c6c2:	d10d      	bne.n	800c6e0 <__ieee754_pow+0x64>
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00b      	beq.n	800c6e0 <__ieee754_pow+0x64>
 800c6c8:	4b78      	ldr	r3, [pc, #480]	; (800c8ac <__ieee754_pow+0x230>)
 800c6ca:	18e4      	adds	r4, r4, r3
 800c6cc:	4327      	orrs	r7, r4
 800c6ce:	d101      	bne.n	800c6d4 <__ieee754_pow+0x58>
 800c6d0:	f000 fc9b 	bl	800d00a <__ieee754_pow+0x98e>
 800c6d4:	4876      	ldr	r0, [pc, #472]	; (800c8b0 <__ieee754_pow+0x234>)
 800c6d6:	f000 fd8d 	bl	800d1f4 <nan>
 800c6da:	9000      	str	r0, [sp, #0]
 800c6dc:	9101      	str	r1, [sp, #4]
 800c6de:	e092      	b.n	800c806 <__ieee754_pow+0x18a>
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	9206      	str	r2, [sp, #24]
 800c6e4:	2e00      	cmp	r6, #0
 800c6e6:	da69      	bge.n	800c7bc <__ieee754_pow+0x140>
 800c6e8:	4a72      	ldr	r2, [pc, #456]	; (800c8b4 <__ieee754_pow+0x238>)
 800c6ea:	4295      	cmp	r5, r2
 800c6ec:	dc64      	bgt.n	800c7b8 <__ieee754_pow+0x13c>
 800c6ee:	4a72      	ldr	r2, [pc, #456]	; (800c8b8 <__ieee754_pow+0x23c>)
 800c6f0:	4295      	cmp	r5, r2
 800c6f2:	dd11      	ble.n	800c718 <__ieee754_pow+0x9c>
 800c6f4:	4971      	ldr	r1, [pc, #452]	; (800c8bc <__ieee754_pow+0x240>)
 800c6f6:	152a      	asrs	r2, r5, #20
 800c6f8:	1852      	adds	r2, r2, r1
 800c6fa:	2a14      	cmp	r2, #20
 800c6fc:	dd3c      	ble.n	800c778 <__ieee754_pow+0xfc>
 800c6fe:	2134      	movs	r1, #52	; 0x34
 800c700:	1a8a      	subs	r2, r1, r2
 800c702:	9902      	ldr	r1, [sp, #8]
 800c704:	40d1      	lsrs	r1, r2
 800c706:	0008      	movs	r0, r1
 800c708:	4090      	lsls	r0, r2
 800c70a:	4298      	cmp	r0, r3
 800c70c:	d104      	bne.n	800c718 <__ieee754_pow+0x9c>
 800c70e:	2201      	movs	r2, #1
 800c710:	4011      	ands	r1, r2
 800c712:	1892      	adds	r2, r2, r2
 800c714:	1a52      	subs	r2, r2, r1
 800c716:	9206      	str	r2, [sp, #24]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d03c      	beq.n	800c796 <__ieee754_pow+0x11a>
 800c71c:	0038      	movs	r0, r7
 800c71e:	0031      	movs	r1, r6
 800c720:	f7ff fc0a 	bl	800bf38 <fabs>
 800c724:	9000      	str	r0, [sp, #0]
 800c726:	9101      	str	r1, [sp, #4]
 800c728:	2f00      	cmp	r7, #0
 800c72a:	d000      	beq.n	800c72e <__ieee754_pow+0xb2>
 800c72c:	e094      	b.n	800c858 <__ieee754_pow+0x1dc>
 800c72e:	2c00      	cmp	r4, #0
 800c730:	d005      	beq.n	800c73e <__ieee754_pow+0xc2>
 800c732:	4a63      	ldr	r2, [pc, #396]	; (800c8c0 <__ieee754_pow+0x244>)
 800c734:	00b3      	lsls	r3, r6, #2
 800c736:	089b      	lsrs	r3, r3, #2
 800c738:	4293      	cmp	r3, r2
 800c73a:	d000      	beq.n	800c73e <__ieee754_pow+0xc2>
 800c73c:	e08c      	b.n	800c858 <__ieee754_pow+0x1dc>
 800c73e:	9b04      	ldr	r3, [sp, #16]
 800c740:	2b00      	cmp	r3, #0
 800c742:	da07      	bge.n	800c754 <__ieee754_pow+0xd8>
 800c744:	9a00      	ldr	r2, [sp, #0]
 800c746:	9b01      	ldr	r3, [sp, #4]
 800c748:	2000      	movs	r0, #0
 800c74a:	495d      	ldr	r1, [pc, #372]	; (800c8c0 <__ieee754_pow+0x244>)
 800c74c:	f7f5 f94e 	bl	80019ec <__aeabi_ddiv>
 800c750:	9000      	str	r0, [sp, #0]
 800c752:	9101      	str	r1, [sp, #4]
 800c754:	9b08      	ldr	r3, [sp, #32]
 800c756:	2b00      	cmp	r3, #0
 800c758:	da55      	bge.n	800c806 <__ieee754_pow+0x18a>
 800c75a:	4b54      	ldr	r3, [pc, #336]	; (800c8ac <__ieee754_pow+0x230>)
 800c75c:	18e4      	adds	r4, r4, r3
 800c75e:	9b06      	ldr	r3, [sp, #24]
 800c760:	431c      	orrs	r4, r3
 800c762:	d000      	beq.n	800c766 <__ieee754_pow+0xea>
 800c764:	e06c      	b.n	800c840 <__ieee754_pow+0x1c4>
 800c766:	9a00      	ldr	r2, [sp, #0]
 800c768:	9b01      	ldr	r3, [sp, #4]
 800c76a:	0010      	movs	r0, r2
 800c76c:	0019      	movs	r1, r3
 800c76e:	f7f5 ffaf 	bl	80026d0 <__aeabi_dsub>
 800c772:	0002      	movs	r2, r0
 800c774:	000b      	movs	r3, r1
 800c776:	e01c      	b.n	800c7b2 <__ieee754_pow+0x136>
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1cf      	bne.n	800c71c <__ieee754_pow+0xa0>
 800c77c:	3314      	adds	r3, #20
 800c77e:	1a9a      	subs	r2, r3, r2
 800c780:	002b      	movs	r3, r5
 800c782:	4113      	asrs	r3, r2
 800c784:	0019      	movs	r1, r3
 800c786:	4091      	lsls	r1, r2
 800c788:	42a9      	cmp	r1, r5
 800c78a:	d104      	bne.n	800c796 <__ieee754_pow+0x11a>
 800c78c:	2201      	movs	r2, #1
 800c78e:	4013      	ands	r3, r2
 800c790:	1892      	adds	r2, r2, r2
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	9306      	str	r3, [sp, #24]
 800c796:	4b4a      	ldr	r3, [pc, #296]	; (800c8c0 <__ieee754_pow+0x244>)
 800c798:	429d      	cmp	r5, r3
 800c79a:	d138      	bne.n	800c80e <__ieee754_pow+0x192>
 800c79c:	0038      	movs	r0, r7
 800c79e:	0031      	movs	r1, r6
 800c7a0:	9b04      	ldr	r3, [sp, #16]
 800c7a2:	9000      	str	r0, [sp, #0]
 800c7a4:	9101      	str	r1, [sp, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	da2d      	bge.n	800c806 <__ieee754_pow+0x18a>
 800c7aa:	003a      	movs	r2, r7
 800c7ac:	0033      	movs	r3, r6
 800c7ae:	2000      	movs	r0, #0
 800c7b0:	4943      	ldr	r1, [pc, #268]	; (800c8c0 <__ieee754_pow+0x244>)
 800c7b2:	f7f5 f91b 	bl	80019ec <__aeabi_ddiv>
 800c7b6:	e790      	b.n	800c6da <__ieee754_pow+0x5e>
 800c7b8:	2202      	movs	r2, #2
 800c7ba:	9206      	str	r2, [sp, #24]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1ad      	bne.n	800c71c <__ieee754_pow+0xa0>
 800c7c0:	4b39      	ldr	r3, [pc, #228]	; (800c8a8 <__ieee754_pow+0x22c>)
 800c7c2:	429d      	cmp	r5, r3
 800c7c4:	d1e7      	bne.n	800c796 <__ieee754_pow+0x11a>
 800c7c6:	4b39      	ldr	r3, [pc, #228]	; (800c8ac <__ieee754_pow+0x230>)
 800c7c8:	18e3      	adds	r3, r4, r3
 800c7ca:	431f      	orrs	r7, r3
 800c7cc:	d101      	bne.n	800c7d2 <__ieee754_pow+0x156>
 800c7ce:	f000 fc1c 	bl	800d00a <__ieee754_pow+0x98e>
 800c7d2:	4b39      	ldr	r3, [pc, #228]	; (800c8b8 <__ieee754_pow+0x23c>)
 800c7d4:	429c      	cmp	r4, r3
 800c7d6:	dd0b      	ble.n	800c7f0 <__ieee754_pow+0x174>
 800c7d8:	9b02      	ldr	r3, [sp, #8]
 800c7da:	9c03      	ldr	r4, [sp, #12]
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	9401      	str	r4, [sp, #4]
 800c7e0:	9b04      	ldr	r3, [sp, #16]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	da0f      	bge.n	800c806 <__ieee754_pow+0x18a>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	2400      	movs	r4, #0
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	9401      	str	r4, [sp, #4]
 800c7ee:	e00a      	b.n	800c806 <__ieee754_pow+0x18a>
 800c7f0:	9b04      	ldr	r3, [sp, #16]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	daf7      	bge.n	800c7e6 <__ieee754_pow+0x16a>
 800c7f6:	2280      	movs	r2, #128	; 0x80
 800c7f8:	0612      	lsls	r2, r2, #24
 800c7fa:	4694      	mov	ip, r2
 800c7fc:	9b02      	ldr	r3, [sp, #8]
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	9b03      	ldr	r3, [sp, #12]
 800c802:	4463      	add	r3, ip
 800c804:	9301      	str	r3, [sp, #4]
 800c806:	9800      	ldr	r0, [sp, #0]
 800c808:	9901      	ldr	r1, [sp, #4]
 800c80a:	b015      	add	sp, #84	; 0x54
 800c80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c80e:	2380      	movs	r3, #128	; 0x80
 800c810:	9a04      	ldr	r2, [sp, #16]
 800c812:	05db      	lsls	r3, r3, #23
 800c814:	429a      	cmp	r2, r3
 800c816:	d106      	bne.n	800c826 <__ieee754_pow+0x1aa>
 800c818:	003a      	movs	r2, r7
 800c81a:	0033      	movs	r3, r6
 800c81c:	0038      	movs	r0, r7
 800c81e:	0031      	movs	r1, r6
 800c820:	f7f5 fcea 	bl	80021f8 <__aeabi_dmul>
 800c824:	e759      	b.n	800c6da <__ieee754_pow+0x5e>
 800c826:	4b27      	ldr	r3, [pc, #156]	; (800c8c4 <__ieee754_pow+0x248>)
 800c828:	9a04      	ldr	r2, [sp, #16]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d000      	beq.n	800c830 <__ieee754_pow+0x1b4>
 800c82e:	e775      	b.n	800c71c <__ieee754_pow+0xa0>
 800c830:	2e00      	cmp	r6, #0
 800c832:	da00      	bge.n	800c836 <__ieee754_pow+0x1ba>
 800c834:	e772      	b.n	800c71c <__ieee754_pow+0xa0>
 800c836:	0038      	movs	r0, r7
 800c838:	0031      	movs	r1, r6
 800c83a:	f000 fc1f 	bl	800d07c <__ieee754_sqrt>
 800c83e:	e74c      	b.n	800c6da <__ieee754_pow+0x5e>
 800c840:	9b06      	ldr	r3, [sp, #24]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d1df      	bne.n	800c806 <__ieee754_pow+0x18a>
 800c846:	9800      	ldr	r0, [sp, #0]
 800c848:	2180      	movs	r1, #128	; 0x80
 800c84a:	0002      	movs	r2, r0
 800c84c:	9801      	ldr	r0, [sp, #4]
 800c84e:	0609      	lsls	r1, r1, #24
 800c850:	1843      	adds	r3, r0, r1
 800c852:	9200      	str	r2, [sp, #0]
 800c854:	9301      	str	r3, [sp, #4]
 800c856:	e7d6      	b.n	800c806 <__ieee754_pow+0x18a>
 800c858:	0ff3      	lsrs	r3, r6, #31
 800c85a:	3b01      	subs	r3, #1
 800c85c:	9310      	str	r3, [sp, #64]	; 0x40
 800c85e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c860:	9b06      	ldr	r3, [sp, #24]
 800c862:	4313      	orrs	r3, r2
 800c864:	d104      	bne.n	800c870 <__ieee754_pow+0x1f4>
 800c866:	003a      	movs	r2, r7
 800c868:	0033      	movs	r3, r6
 800c86a:	0038      	movs	r0, r7
 800c86c:	0031      	movs	r1, r6
 800c86e:	e77e      	b.n	800c76e <__ieee754_pow+0xf2>
 800c870:	4b15      	ldr	r3, [pc, #84]	; (800c8c8 <__ieee754_pow+0x24c>)
 800c872:	429d      	cmp	r5, r3
 800c874:	dc00      	bgt.n	800c878 <__ieee754_pow+0x1fc>
 800c876:	e0f5      	b.n	800ca64 <__ieee754_pow+0x3e8>
 800c878:	4b14      	ldr	r3, [pc, #80]	; (800c8cc <__ieee754_pow+0x250>)
 800c87a:	429d      	cmp	r5, r3
 800c87c:	dd0a      	ble.n	800c894 <__ieee754_pow+0x218>
 800c87e:	4b0e      	ldr	r3, [pc, #56]	; (800c8b8 <__ieee754_pow+0x23c>)
 800c880:	429c      	cmp	r4, r3
 800c882:	dc0d      	bgt.n	800c8a0 <__ieee754_pow+0x224>
 800c884:	9b04      	ldr	r3, [sp, #16]
 800c886:	2b00      	cmp	r3, #0
 800c888:	daad      	bge.n	800c7e6 <__ieee754_pow+0x16a>
 800c88a:	4a11      	ldr	r2, [pc, #68]	; (800c8d0 <__ieee754_pow+0x254>)
 800c88c:	4b11      	ldr	r3, [pc, #68]	; (800c8d4 <__ieee754_pow+0x258>)
 800c88e:	0010      	movs	r0, r2
 800c890:	0019      	movs	r1, r3
 800c892:	e7c5      	b.n	800c820 <__ieee754_pow+0x1a4>
 800c894:	4b10      	ldr	r3, [pc, #64]	; (800c8d8 <__ieee754_pow+0x25c>)
 800c896:	429c      	cmp	r4, r3
 800c898:	ddf4      	ble.n	800c884 <__ieee754_pow+0x208>
 800c89a:	4b09      	ldr	r3, [pc, #36]	; (800c8c0 <__ieee754_pow+0x244>)
 800c89c:	429c      	cmp	r4, r3
 800c89e:	dd1d      	ble.n	800c8dc <__ieee754_pow+0x260>
 800c8a0:	9b04      	ldr	r3, [sp, #16]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	dcf1      	bgt.n	800c88a <__ieee754_pow+0x20e>
 800c8a6:	e79e      	b.n	800c7e6 <__ieee754_pow+0x16a>
 800c8a8:	7ff00000 	.word	0x7ff00000
 800c8ac:	c0100000 	.word	0xc0100000
 800c8b0:	0800da60 	.word	0x0800da60
 800c8b4:	433fffff 	.word	0x433fffff
 800c8b8:	3fefffff 	.word	0x3fefffff
 800c8bc:	fffffc01 	.word	0xfffffc01
 800c8c0:	3ff00000 	.word	0x3ff00000
 800c8c4:	3fe00000 	.word	0x3fe00000
 800c8c8:	41e00000 	.word	0x41e00000
 800c8cc:	43f00000 	.word	0x43f00000
 800c8d0:	8800759c 	.word	0x8800759c
 800c8d4:	7e37e43c 	.word	0x7e37e43c
 800c8d8:	3feffffe 	.word	0x3feffffe
 800c8dc:	2200      	movs	r2, #0
 800c8de:	9800      	ldr	r0, [sp, #0]
 800c8e0:	9901      	ldr	r1, [sp, #4]
 800c8e2:	4b52      	ldr	r3, [pc, #328]	; (800ca2c <__ieee754_pow+0x3b0>)
 800c8e4:	f7f5 fef4 	bl	80026d0 <__aeabi_dsub>
 800c8e8:	22c0      	movs	r2, #192	; 0xc0
 800c8ea:	4b51      	ldr	r3, [pc, #324]	; (800ca30 <__ieee754_pow+0x3b4>)
 800c8ec:	05d2      	lsls	r2, r2, #23
 800c8ee:	0004      	movs	r4, r0
 800c8f0:	000d      	movs	r5, r1
 800c8f2:	f7f5 fc81 	bl	80021f8 <__aeabi_dmul>
 800c8f6:	4a4f      	ldr	r2, [pc, #316]	; (800ca34 <__ieee754_pow+0x3b8>)
 800c8f8:	9000      	str	r0, [sp, #0]
 800c8fa:	9101      	str	r1, [sp, #4]
 800c8fc:	4b4e      	ldr	r3, [pc, #312]	; (800ca38 <__ieee754_pow+0x3bc>)
 800c8fe:	0020      	movs	r0, r4
 800c900:	0029      	movs	r1, r5
 800c902:	f7f5 fc79 	bl	80021f8 <__aeabi_dmul>
 800c906:	2200      	movs	r2, #0
 800c908:	9004      	str	r0, [sp, #16]
 800c90a:	9105      	str	r1, [sp, #20]
 800c90c:	4b4b      	ldr	r3, [pc, #300]	; (800ca3c <__ieee754_pow+0x3c0>)
 800c90e:	0020      	movs	r0, r4
 800c910:	0029      	movs	r1, r5
 800c912:	f7f5 fc71 	bl	80021f8 <__aeabi_dmul>
 800c916:	0002      	movs	r2, r0
 800c918:	000b      	movs	r3, r1
 800c91a:	4849      	ldr	r0, [pc, #292]	; (800ca40 <__ieee754_pow+0x3c4>)
 800c91c:	4949      	ldr	r1, [pc, #292]	; (800ca44 <__ieee754_pow+0x3c8>)
 800c91e:	f7f5 fed7 	bl	80026d0 <__aeabi_dsub>
 800c922:	0022      	movs	r2, r4
 800c924:	002b      	movs	r3, r5
 800c926:	f7f5 fc67 	bl	80021f8 <__aeabi_dmul>
 800c92a:	0002      	movs	r2, r0
 800c92c:	000b      	movs	r3, r1
 800c92e:	2000      	movs	r0, #0
 800c930:	4945      	ldr	r1, [pc, #276]	; (800ca48 <__ieee754_pow+0x3cc>)
 800c932:	f7f5 fecd 	bl	80026d0 <__aeabi_dsub>
 800c936:	0022      	movs	r2, r4
 800c938:	0006      	movs	r6, r0
 800c93a:	000f      	movs	r7, r1
 800c93c:	002b      	movs	r3, r5
 800c93e:	0020      	movs	r0, r4
 800c940:	0029      	movs	r1, r5
 800c942:	f7f5 fc59 	bl	80021f8 <__aeabi_dmul>
 800c946:	0002      	movs	r2, r0
 800c948:	000b      	movs	r3, r1
 800c94a:	0030      	movs	r0, r6
 800c94c:	0039      	movs	r1, r7
 800c94e:	f7f5 fc53 	bl	80021f8 <__aeabi_dmul>
 800c952:	4a3e      	ldr	r2, [pc, #248]	; (800ca4c <__ieee754_pow+0x3d0>)
 800c954:	4b36      	ldr	r3, [pc, #216]	; (800ca30 <__ieee754_pow+0x3b4>)
 800c956:	f7f5 fc4f 	bl	80021f8 <__aeabi_dmul>
 800c95a:	0002      	movs	r2, r0
 800c95c:	000b      	movs	r3, r1
 800c95e:	9804      	ldr	r0, [sp, #16]
 800c960:	9905      	ldr	r1, [sp, #20]
 800c962:	f7f5 feb5 	bl	80026d0 <__aeabi_dsub>
 800c966:	0002      	movs	r2, r0
 800c968:	000b      	movs	r3, r1
 800c96a:	0004      	movs	r4, r0
 800c96c:	000d      	movs	r5, r1
 800c96e:	9800      	ldr	r0, [sp, #0]
 800c970:	9901      	ldr	r1, [sp, #4]
 800c972:	f7f4 fcd1 	bl	8001318 <__aeabi_dadd>
 800c976:	9a00      	ldr	r2, [sp, #0]
 800c978:	9b01      	ldr	r3, [sp, #4]
 800c97a:	2000      	movs	r0, #0
 800c97c:	000f      	movs	r7, r1
 800c97e:	0006      	movs	r6, r0
 800c980:	f7f5 fea6 	bl	80026d0 <__aeabi_dsub>
 800c984:	0002      	movs	r2, r0
 800c986:	000b      	movs	r3, r1
 800c988:	0020      	movs	r0, r4
 800c98a:	0029      	movs	r1, r5
 800c98c:	f7f5 fea0 	bl	80026d0 <__aeabi_dsub>
 800c990:	9b06      	ldr	r3, [sp, #24]
 800c992:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c994:	3b01      	subs	r3, #1
 800c996:	9004      	str	r0, [sp, #16]
 800c998:	9105      	str	r1, [sp, #20]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	d000      	beq.n	800c9a0 <__ieee754_pow+0x324>
 800c99e:	e1e0      	b.n	800cd62 <__ieee754_pow+0x6e6>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4c2b      	ldr	r4, [pc, #172]	; (800ca50 <__ieee754_pow+0x3d4>)
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	9401      	str	r4, [sp, #4]
 800c9a8:	9c02      	ldr	r4, [sp, #8]
 800c9aa:	9d03      	ldr	r5, [sp, #12]
 800c9ac:	9802      	ldr	r0, [sp, #8]
 800c9ae:	9903      	ldr	r1, [sp, #12]
 800c9b0:	2400      	movs	r4, #0
 800c9b2:	002b      	movs	r3, r5
 800c9b4:	0022      	movs	r2, r4
 800c9b6:	f7f5 fe8b 	bl	80026d0 <__aeabi_dsub>
 800c9ba:	0032      	movs	r2, r6
 800c9bc:	003b      	movs	r3, r7
 800c9be:	f7f5 fc1b 	bl	80021f8 <__aeabi_dmul>
 800c9c2:	9a02      	ldr	r2, [sp, #8]
 800c9c4:	9b03      	ldr	r3, [sp, #12]
 800c9c6:	9006      	str	r0, [sp, #24]
 800c9c8:	9107      	str	r1, [sp, #28]
 800c9ca:	9804      	ldr	r0, [sp, #16]
 800c9cc:	9905      	ldr	r1, [sp, #20]
 800c9ce:	f7f5 fc13 	bl	80021f8 <__aeabi_dmul>
 800c9d2:	0002      	movs	r2, r0
 800c9d4:	000b      	movs	r3, r1
 800c9d6:	9806      	ldr	r0, [sp, #24]
 800c9d8:	9907      	ldr	r1, [sp, #28]
 800c9da:	f7f4 fc9d 	bl	8001318 <__aeabi_dadd>
 800c9de:	0022      	movs	r2, r4
 800c9e0:	002b      	movs	r3, r5
 800c9e2:	9004      	str	r0, [sp, #16]
 800c9e4:	9105      	str	r1, [sp, #20]
 800c9e6:	0030      	movs	r0, r6
 800c9e8:	0039      	movs	r1, r7
 800c9ea:	f7f5 fc05 	bl	80021f8 <__aeabi_dmul>
 800c9ee:	0006      	movs	r6, r0
 800c9f0:	000f      	movs	r7, r1
 800c9f2:	000b      	movs	r3, r1
 800c9f4:	0002      	movs	r2, r0
 800c9f6:	9804      	ldr	r0, [sp, #16]
 800c9f8:	9905      	ldr	r1, [sp, #20]
 800c9fa:	9606      	str	r6, [sp, #24]
 800c9fc:	9707      	str	r7, [sp, #28]
 800c9fe:	f7f4 fc8b 	bl	8001318 <__aeabi_dadd>
 800ca02:	4b14      	ldr	r3, [pc, #80]	; (800ca54 <__ieee754_pow+0x3d8>)
 800ca04:	0005      	movs	r5, r0
 800ca06:	000c      	movs	r4, r1
 800ca08:	9108      	str	r1, [sp, #32]
 800ca0a:	4299      	cmp	r1, r3
 800ca0c:	dc00      	bgt.n	800ca10 <__ieee754_pow+0x394>
 800ca0e:	e2da      	b.n	800cfc6 <__ieee754_pow+0x94a>
 800ca10:	4b11      	ldr	r3, [pc, #68]	; (800ca58 <__ieee754_pow+0x3dc>)
 800ca12:	18cb      	adds	r3, r1, r3
 800ca14:	4303      	orrs	r3, r0
 800ca16:	d100      	bne.n	800ca1a <__ieee754_pow+0x39e>
 800ca18:	e1dc      	b.n	800cdd4 <__ieee754_pow+0x758>
 800ca1a:	9800      	ldr	r0, [sp, #0]
 800ca1c:	9901      	ldr	r1, [sp, #4]
 800ca1e:	4a0f      	ldr	r2, [pc, #60]	; (800ca5c <__ieee754_pow+0x3e0>)
 800ca20:	4b0f      	ldr	r3, [pc, #60]	; (800ca60 <__ieee754_pow+0x3e4>)
 800ca22:	f7f5 fbe9 	bl	80021f8 <__aeabi_dmul>
 800ca26:	4a0d      	ldr	r2, [pc, #52]	; (800ca5c <__ieee754_pow+0x3e0>)
 800ca28:	4b0d      	ldr	r3, [pc, #52]	; (800ca60 <__ieee754_pow+0x3e4>)
 800ca2a:	e6f9      	b.n	800c820 <__ieee754_pow+0x1a4>
 800ca2c:	3ff00000 	.word	0x3ff00000
 800ca30:	3ff71547 	.word	0x3ff71547
 800ca34:	f85ddf44 	.word	0xf85ddf44
 800ca38:	3e54ae0b 	.word	0x3e54ae0b
 800ca3c:	3fd00000 	.word	0x3fd00000
 800ca40:	55555555 	.word	0x55555555
 800ca44:	3fd55555 	.word	0x3fd55555
 800ca48:	3fe00000 	.word	0x3fe00000
 800ca4c:	652b82fe 	.word	0x652b82fe
 800ca50:	bff00000 	.word	0xbff00000
 800ca54:	408fffff 	.word	0x408fffff
 800ca58:	bf700000 	.word	0xbf700000
 800ca5c:	8800759c 	.word	0x8800759c
 800ca60:	7e37e43c 	.word	0x7e37e43c
 800ca64:	4bc0      	ldr	r3, [pc, #768]	; (800cd68 <__ieee754_pow+0x6ec>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	4233      	tst	r3, r6
 800ca6a:	d10a      	bne.n	800ca82 <__ieee754_pow+0x406>
 800ca6c:	9800      	ldr	r0, [sp, #0]
 800ca6e:	9901      	ldr	r1, [sp, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	4bbe      	ldr	r3, [pc, #760]	; (800cd6c <__ieee754_pow+0x6f0>)
 800ca74:	f7f5 fbc0 	bl	80021f8 <__aeabi_dmul>
 800ca78:	2235      	movs	r2, #53	; 0x35
 800ca7a:	9000      	str	r0, [sp, #0]
 800ca7c:	9101      	str	r1, [sp, #4]
 800ca7e:	9c01      	ldr	r4, [sp, #4]
 800ca80:	4252      	negs	r2, r2
 800ca82:	49bb      	ldr	r1, [pc, #748]	; (800cd70 <__ieee754_pow+0x6f4>)
 800ca84:	1523      	asrs	r3, r4, #20
 800ca86:	185b      	adds	r3, r3, r1
 800ca88:	189b      	adds	r3, r3, r2
 800ca8a:	0324      	lsls	r4, r4, #12
 800ca8c:	4db9      	ldr	r5, [pc, #740]	; (800cd74 <__ieee754_pow+0x6f8>)
 800ca8e:	930d      	str	r3, [sp, #52]	; 0x34
 800ca90:	4bb9      	ldr	r3, [pc, #740]	; (800cd78 <__ieee754_pow+0x6fc>)
 800ca92:	0b22      	lsrs	r2, r4, #12
 800ca94:	4315      	orrs	r5, r2
 800ca96:	2400      	movs	r4, #0
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	dd09      	ble.n	800cab0 <__ieee754_pow+0x434>
 800ca9c:	4bb7      	ldr	r3, [pc, #732]	; (800cd7c <__ieee754_pow+0x700>)
 800ca9e:	3401      	adds	r4, #1
 800caa0:	429a      	cmp	r2, r3
 800caa2:	dd05      	ble.n	800cab0 <__ieee754_pow+0x434>
 800caa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caa6:	191b      	adds	r3, r3, r4
 800caa8:	2400      	movs	r4, #0
 800caaa:	930d      	str	r3, [sp, #52]	; 0x34
 800caac:	4bb4      	ldr	r3, [pc, #720]	; (800cd80 <__ieee754_pow+0x704>)
 800caae:	18ed      	adds	r5, r5, r3
 800cab0:	9800      	ldr	r0, [sp, #0]
 800cab2:	9901      	ldr	r1, [sp, #4]
 800cab4:	0029      	movs	r1, r5
 800cab6:	00e3      	lsls	r3, r4, #3
 800cab8:	9311      	str	r3, [sp, #68]	; 0x44
 800caba:	4bb2      	ldr	r3, [pc, #712]	; (800cd84 <__ieee754_pow+0x708>)
 800cabc:	00e2      	lsls	r2, r4, #3
 800cabe:	189b      	adds	r3, r3, r2
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	900e      	str	r0, [sp, #56]	; 0x38
 800cac6:	910f      	str	r1, [sp, #60]	; 0x3c
 800cac8:	920a      	str	r2, [sp, #40]	; 0x28
 800caca:	930b      	str	r3, [sp, #44]	; 0x2c
 800cacc:	f7f5 fe00 	bl	80026d0 <__aeabi_dsub>
 800cad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cad4:	0006      	movs	r6, r0
 800cad6:	000f      	movs	r7, r1
 800cad8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cada:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cadc:	f7f4 fc1c 	bl	8001318 <__aeabi_dadd>
 800cae0:	0002      	movs	r2, r0
 800cae2:	000b      	movs	r3, r1
 800cae4:	2000      	movs	r0, #0
 800cae6:	49a3      	ldr	r1, [pc, #652]	; (800cd74 <__ieee754_pow+0x6f8>)
 800cae8:	f7f4 ff80 	bl	80019ec <__aeabi_ddiv>
 800caec:	0002      	movs	r2, r0
 800caee:	000b      	movs	r3, r1
 800caf0:	9012      	str	r0, [sp, #72]	; 0x48
 800caf2:	9113      	str	r1, [sp, #76]	; 0x4c
 800caf4:	0030      	movs	r0, r6
 800caf6:	0039      	movs	r1, r7
 800caf8:	f7f5 fb7e 	bl	80021f8 <__aeabi_dmul>
 800cafc:	9008      	str	r0, [sp, #32]
 800cafe:	9109      	str	r1, [sp, #36]	; 0x24
 800cb00:	9a08      	ldr	r2, [sp, #32]
 800cb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb04:	2180      	movs	r1, #128	; 0x80
 800cb06:	9204      	str	r2, [sp, #16]
 800cb08:	9305      	str	r3, [sp, #20]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	0589      	lsls	r1, r1, #22
 800cb0e:	106d      	asrs	r5, r5, #1
 800cb10:	430d      	orrs	r5, r1
 800cb12:	2180      	movs	r1, #128	; 0x80
 800cb14:	9304      	str	r3, [sp, #16]
 800cb16:	9a04      	ldr	r2, [sp, #16]
 800cb18:	9b05      	ldr	r3, [sp, #20]
 800cb1a:	9200      	str	r2, [sp, #0]
 800cb1c:	9301      	str	r3, [sp, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	0309      	lsls	r1, r1, #12
 800cb22:	186d      	adds	r5, r5, r1
 800cb24:	04a1      	lsls	r1, r4, #18
 800cb26:	186b      	adds	r3, r5, r1
 800cb28:	9800      	ldr	r0, [sp, #0]
 800cb2a:	9901      	ldr	r1, [sp, #4]
 800cb2c:	0014      	movs	r4, r2
 800cb2e:	001d      	movs	r5, r3
 800cb30:	f7f5 fb62 	bl	80021f8 <__aeabi_dmul>
 800cb34:	0002      	movs	r2, r0
 800cb36:	000b      	movs	r3, r1
 800cb38:	0030      	movs	r0, r6
 800cb3a:	0039      	movs	r1, r7
 800cb3c:	f7f5 fdc8 	bl	80026d0 <__aeabi_dsub>
 800cb40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb44:	0006      	movs	r6, r0
 800cb46:	000f      	movs	r7, r1
 800cb48:	0020      	movs	r0, r4
 800cb4a:	0029      	movs	r1, r5
 800cb4c:	f7f5 fdc0 	bl	80026d0 <__aeabi_dsub>
 800cb50:	0002      	movs	r2, r0
 800cb52:	000b      	movs	r3, r1
 800cb54:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cb56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cb58:	f7f5 fdba 	bl	80026d0 <__aeabi_dsub>
 800cb5c:	9a00      	ldr	r2, [sp, #0]
 800cb5e:	9b01      	ldr	r3, [sp, #4]
 800cb60:	f7f5 fb4a 	bl	80021f8 <__aeabi_dmul>
 800cb64:	0002      	movs	r2, r0
 800cb66:	000b      	movs	r3, r1
 800cb68:	0030      	movs	r0, r6
 800cb6a:	0039      	movs	r1, r7
 800cb6c:	f7f5 fdb0 	bl	80026d0 <__aeabi_dsub>
 800cb70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb74:	f7f5 fb40 	bl	80021f8 <__aeabi_dmul>
 800cb78:	9a08      	ldr	r2, [sp, #32]
 800cb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb7c:	900a      	str	r0, [sp, #40]	; 0x28
 800cb7e:	910b      	str	r1, [sp, #44]	; 0x2c
 800cb80:	0010      	movs	r0, r2
 800cb82:	0019      	movs	r1, r3
 800cb84:	f7f5 fb38 	bl	80021f8 <__aeabi_dmul>
 800cb88:	0006      	movs	r6, r0
 800cb8a:	000f      	movs	r7, r1
 800cb8c:	4a7e      	ldr	r2, [pc, #504]	; (800cd88 <__ieee754_pow+0x70c>)
 800cb8e:	4b7f      	ldr	r3, [pc, #508]	; (800cd8c <__ieee754_pow+0x710>)
 800cb90:	f7f5 fb32 	bl	80021f8 <__aeabi_dmul>
 800cb94:	4a7e      	ldr	r2, [pc, #504]	; (800cd90 <__ieee754_pow+0x714>)
 800cb96:	4b7f      	ldr	r3, [pc, #508]	; (800cd94 <__ieee754_pow+0x718>)
 800cb98:	f7f4 fbbe 	bl	8001318 <__aeabi_dadd>
 800cb9c:	0032      	movs	r2, r6
 800cb9e:	003b      	movs	r3, r7
 800cba0:	f7f5 fb2a 	bl	80021f8 <__aeabi_dmul>
 800cba4:	4a7c      	ldr	r2, [pc, #496]	; (800cd98 <__ieee754_pow+0x71c>)
 800cba6:	4b7d      	ldr	r3, [pc, #500]	; (800cd9c <__ieee754_pow+0x720>)
 800cba8:	f7f4 fbb6 	bl	8001318 <__aeabi_dadd>
 800cbac:	0032      	movs	r2, r6
 800cbae:	003b      	movs	r3, r7
 800cbb0:	f7f5 fb22 	bl	80021f8 <__aeabi_dmul>
 800cbb4:	4a7a      	ldr	r2, [pc, #488]	; (800cda0 <__ieee754_pow+0x724>)
 800cbb6:	4b7b      	ldr	r3, [pc, #492]	; (800cda4 <__ieee754_pow+0x728>)
 800cbb8:	f7f4 fbae 	bl	8001318 <__aeabi_dadd>
 800cbbc:	0032      	movs	r2, r6
 800cbbe:	003b      	movs	r3, r7
 800cbc0:	f7f5 fb1a 	bl	80021f8 <__aeabi_dmul>
 800cbc4:	4a78      	ldr	r2, [pc, #480]	; (800cda8 <__ieee754_pow+0x72c>)
 800cbc6:	4b79      	ldr	r3, [pc, #484]	; (800cdac <__ieee754_pow+0x730>)
 800cbc8:	f7f4 fba6 	bl	8001318 <__aeabi_dadd>
 800cbcc:	0032      	movs	r2, r6
 800cbce:	003b      	movs	r3, r7
 800cbd0:	f7f5 fb12 	bl	80021f8 <__aeabi_dmul>
 800cbd4:	4a76      	ldr	r2, [pc, #472]	; (800cdb0 <__ieee754_pow+0x734>)
 800cbd6:	4b77      	ldr	r3, [pc, #476]	; (800cdb4 <__ieee754_pow+0x738>)
 800cbd8:	f7f4 fb9e 	bl	8001318 <__aeabi_dadd>
 800cbdc:	0032      	movs	r2, r6
 800cbde:	0004      	movs	r4, r0
 800cbe0:	000d      	movs	r5, r1
 800cbe2:	003b      	movs	r3, r7
 800cbe4:	0030      	movs	r0, r6
 800cbe6:	0039      	movs	r1, r7
 800cbe8:	f7f5 fb06 	bl	80021f8 <__aeabi_dmul>
 800cbec:	0002      	movs	r2, r0
 800cbee:	000b      	movs	r3, r1
 800cbf0:	0020      	movs	r0, r4
 800cbf2:	0029      	movs	r1, r5
 800cbf4:	f7f5 fb00 	bl	80021f8 <__aeabi_dmul>
 800cbf8:	9a00      	ldr	r2, [sp, #0]
 800cbfa:	9b01      	ldr	r3, [sp, #4]
 800cbfc:	0004      	movs	r4, r0
 800cbfe:	000d      	movs	r5, r1
 800cc00:	9808      	ldr	r0, [sp, #32]
 800cc02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc04:	f7f4 fb88 	bl	8001318 <__aeabi_dadd>
 800cc08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc0c:	f7f5 faf4 	bl	80021f8 <__aeabi_dmul>
 800cc10:	0022      	movs	r2, r4
 800cc12:	002b      	movs	r3, r5
 800cc14:	f7f4 fb80 	bl	8001318 <__aeabi_dadd>
 800cc18:	9a00      	ldr	r2, [sp, #0]
 800cc1a:	9b01      	ldr	r3, [sp, #4]
 800cc1c:	900e      	str	r0, [sp, #56]	; 0x38
 800cc1e:	910f      	str	r1, [sp, #60]	; 0x3c
 800cc20:	0010      	movs	r0, r2
 800cc22:	0019      	movs	r1, r3
 800cc24:	f7f5 fae8 	bl	80021f8 <__aeabi_dmul>
 800cc28:	2200      	movs	r2, #0
 800cc2a:	4b63      	ldr	r3, [pc, #396]	; (800cdb8 <__ieee754_pow+0x73c>)
 800cc2c:	0004      	movs	r4, r0
 800cc2e:	000d      	movs	r5, r1
 800cc30:	f7f4 fb72 	bl	8001318 <__aeabi_dadd>
 800cc34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc38:	f7f4 fb6e 	bl	8001318 <__aeabi_dadd>
 800cc3c:	9e04      	ldr	r6, [sp, #16]
 800cc3e:	000f      	movs	r7, r1
 800cc40:	0032      	movs	r2, r6
 800cc42:	000b      	movs	r3, r1
 800cc44:	9800      	ldr	r0, [sp, #0]
 800cc46:	9901      	ldr	r1, [sp, #4]
 800cc48:	f7f5 fad6 	bl	80021f8 <__aeabi_dmul>
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	9000      	str	r0, [sp, #0]
 800cc50:	9101      	str	r1, [sp, #4]
 800cc52:	4b59      	ldr	r3, [pc, #356]	; (800cdb8 <__ieee754_pow+0x73c>)
 800cc54:	0030      	movs	r0, r6
 800cc56:	0039      	movs	r1, r7
 800cc58:	f7f5 fd3a 	bl	80026d0 <__aeabi_dsub>
 800cc5c:	0022      	movs	r2, r4
 800cc5e:	002b      	movs	r3, r5
 800cc60:	f7f5 fd36 	bl	80026d0 <__aeabi_dsub>
 800cc64:	0002      	movs	r2, r0
 800cc66:	000b      	movs	r3, r1
 800cc68:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cc6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cc6c:	f7f5 fd30 	bl	80026d0 <__aeabi_dsub>
 800cc70:	9a08      	ldr	r2, [sp, #32]
 800cc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc74:	f7f5 fac0 	bl	80021f8 <__aeabi_dmul>
 800cc78:	0032      	movs	r2, r6
 800cc7a:	0004      	movs	r4, r0
 800cc7c:	000d      	movs	r5, r1
 800cc7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc82:	003b      	movs	r3, r7
 800cc84:	f7f5 fab8 	bl	80021f8 <__aeabi_dmul>
 800cc88:	0002      	movs	r2, r0
 800cc8a:	000b      	movs	r3, r1
 800cc8c:	0020      	movs	r0, r4
 800cc8e:	0029      	movs	r1, r5
 800cc90:	f7f4 fb42 	bl	8001318 <__aeabi_dadd>
 800cc94:	0004      	movs	r4, r0
 800cc96:	000d      	movs	r5, r1
 800cc98:	0002      	movs	r2, r0
 800cc9a:	000b      	movs	r3, r1
 800cc9c:	9800      	ldr	r0, [sp, #0]
 800cc9e:	9901      	ldr	r1, [sp, #4]
 800cca0:	f7f4 fb3a 	bl	8001318 <__aeabi_dadd>
 800cca4:	22e0      	movs	r2, #224	; 0xe0
 800cca6:	9e04      	ldr	r6, [sp, #16]
 800cca8:	4b44      	ldr	r3, [pc, #272]	; (800cdbc <__ieee754_pow+0x740>)
 800ccaa:	0030      	movs	r0, r6
 800ccac:	0612      	lsls	r2, r2, #24
 800ccae:	000f      	movs	r7, r1
 800ccb0:	f7f5 faa2 	bl	80021f8 <__aeabi_dmul>
 800ccb4:	9008      	str	r0, [sp, #32]
 800ccb6:	9109      	str	r1, [sp, #36]	; 0x24
 800ccb8:	9a00      	ldr	r2, [sp, #0]
 800ccba:	9b01      	ldr	r3, [sp, #4]
 800ccbc:	0030      	movs	r0, r6
 800ccbe:	0039      	movs	r1, r7
 800ccc0:	f7f5 fd06 	bl	80026d0 <__aeabi_dsub>
 800ccc4:	0002      	movs	r2, r0
 800ccc6:	000b      	movs	r3, r1
 800ccc8:	0020      	movs	r0, r4
 800ccca:	0029      	movs	r1, r5
 800cccc:	f7f5 fd00 	bl	80026d0 <__aeabi_dsub>
 800ccd0:	4a3b      	ldr	r2, [pc, #236]	; (800cdc0 <__ieee754_pow+0x744>)
 800ccd2:	4b3a      	ldr	r3, [pc, #232]	; (800cdbc <__ieee754_pow+0x740>)
 800ccd4:	f7f5 fa90 	bl	80021f8 <__aeabi_dmul>
 800ccd8:	4a3a      	ldr	r2, [pc, #232]	; (800cdc4 <__ieee754_pow+0x748>)
 800ccda:	0004      	movs	r4, r0
 800ccdc:	000d      	movs	r5, r1
 800ccde:	0030      	movs	r0, r6
 800cce0:	0039      	movs	r1, r7
 800cce2:	4b39      	ldr	r3, [pc, #228]	; (800cdc8 <__ieee754_pow+0x74c>)
 800cce4:	f7f5 fa88 	bl	80021f8 <__aeabi_dmul>
 800cce8:	0002      	movs	r2, r0
 800ccea:	000b      	movs	r3, r1
 800ccec:	0020      	movs	r0, r4
 800ccee:	0029      	movs	r1, r5
 800ccf0:	f7f4 fb12 	bl	8001318 <__aeabi_dadd>
 800ccf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ccf6:	4b35      	ldr	r3, [pc, #212]	; (800cdcc <__ieee754_pow+0x750>)
 800ccf8:	189b      	adds	r3, r3, r2
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	f7f4 fb0b 	bl	8001318 <__aeabi_dadd>
 800cd02:	900a      	str	r0, [sp, #40]	; 0x28
 800cd04:	910b      	str	r1, [sp, #44]	; 0x2c
 800cd06:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cd08:	f7f6 f8c8 	bl	8002e9c <__aeabi_i2d>
 800cd0c:	0004      	movs	r4, r0
 800cd0e:	000d      	movs	r5, r1
 800cd10:	9808      	ldr	r0, [sp, #32]
 800cd12:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cd16:	4b2e      	ldr	r3, [pc, #184]	; (800cdd0 <__ieee754_pow+0x754>)
 800cd18:	189b      	adds	r3, r3, r2
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	9200      	str	r2, [sp, #0]
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd26:	f7f4 faf7 	bl	8001318 <__aeabi_dadd>
 800cd2a:	9a00      	ldr	r2, [sp, #0]
 800cd2c:	9b01      	ldr	r3, [sp, #4]
 800cd2e:	f7f4 faf3 	bl	8001318 <__aeabi_dadd>
 800cd32:	0022      	movs	r2, r4
 800cd34:	002b      	movs	r3, r5
 800cd36:	f7f4 faef 	bl	8001318 <__aeabi_dadd>
 800cd3a:	9804      	ldr	r0, [sp, #16]
 800cd3c:	0022      	movs	r2, r4
 800cd3e:	002b      	movs	r3, r5
 800cd40:	0006      	movs	r6, r0
 800cd42:	000f      	movs	r7, r1
 800cd44:	f7f5 fcc4 	bl	80026d0 <__aeabi_dsub>
 800cd48:	9a00      	ldr	r2, [sp, #0]
 800cd4a:	9b01      	ldr	r3, [sp, #4]
 800cd4c:	f7f5 fcc0 	bl	80026d0 <__aeabi_dsub>
 800cd50:	9a08      	ldr	r2, [sp, #32]
 800cd52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd54:	f7f5 fcbc 	bl	80026d0 <__aeabi_dsub>
 800cd58:	0002      	movs	r2, r0
 800cd5a:	000b      	movs	r3, r1
 800cd5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd60:	e614      	b.n	800c98c <__ieee754_pow+0x310>
 800cd62:	2300      	movs	r3, #0
 800cd64:	4c03      	ldr	r4, [pc, #12]	; (800cd74 <__ieee754_pow+0x6f8>)
 800cd66:	e61d      	b.n	800c9a4 <__ieee754_pow+0x328>
 800cd68:	7ff00000 	.word	0x7ff00000
 800cd6c:	43400000 	.word	0x43400000
 800cd70:	fffffc01 	.word	0xfffffc01
 800cd74:	3ff00000 	.word	0x3ff00000
 800cd78:	0003988e 	.word	0x0003988e
 800cd7c:	000bb679 	.word	0x000bb679
 800cd80:	fff00000 	.word	0xfff00000
 800cd84:	0800dc40 	.word	0x0800dc40
 800cd88:	4a454eef 	.word	0x4a454eef
 800cd8c:	3fca7e28 	.word	0x3fca7e28
 800cd90:	93c9db65 	.word	0x93c9db65
 800cd94:	3fcd864a 	.word	0x3fcd864a
 800cd98:	a91d4101 	.word	0xa91d4101
 800cd9c:	3fd17460 	.word	0x3fd17460
 800cda0:	518f264d 	.word	0x518f264d
 800cda4:	3fd55555 	.word	0x3fd55555
 800cda8:	db6fabff 	.word	0xdb6fabff
 800cdac:	3fdb6db6 	.word	0x3fdb6db6
 800cdb0:	33333303 	.word	0x33333303
 800cdb4:	3fe33333 	.word	0x3fe33333
 800cdb8:	40080000 	.word	0x40080000
 800cdbc:	3feec709 	.word	0x3feec709
 800cdc0:	dc3a03fd 	.word	0xdc3a03fd
 800cdc4:	145b01f5 	.word	0x145b01f5
 800cdc8:	be3e2fe0 	.word	0xbe3e2fe0
 800cdcc:	0800dc60 	.word	0x0800dc60
 800cdd0:	0800dc50 	.word	0x0800dc50
 800cdd4:	4a8f      	ldr	r2, [pc, #572]	; (800d014 <__ieee754_pow+0x998>)
 800cdd6:	4b90      	ldr	r3, [pc, #576]	; (800d018 <__ieee754_pow+0x99c>)
 800cdd8:	9804      	ldr	r0, [sp, #16]
 800cdda:	9905      	ldr	r1, [sp, #20]
 800cddc:	f7f4 fa9c 	bl	8001318 <__aeabi_dadd>
 800cde0:	0032      	movs	r2, r6
 800cde2:	9002      	str	r0, [sp, #8]
 800cde4:	9103      	str	r1, [sp, #12]
 800cde6:	003b      	movs	r3, r7
 800cde8:	0028      	movs	r0, r5
 800cdea:	0021      	movs	r1, r4
 800cdec:	f7f5 fc70 	bl	80026d0 <__aeabi_dsub>
 800cdf0:	0002      	movs	r2, r0
 800cdf2:	000b      	movs	r3, r1
 800cdf4:	9802      	ldr	r0, [sp, #8]
 800cdf6:	9903      	ldr	r1, [sp, #12]
 800cdf8:	f7f3 fb3e 	bl	8000478 <__aeabi_dcmpgt>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d000      	beq.n	800ce02 <__ieee754_pow+0x786>
 800ce00:	e60b      	b.n	800ca1a <__ieee754_pow+0x39e>
 800ce02:	2100      	movs	r1, #0
 800ce04:	4a85      	ldr	r2, [pc, #532]	; (800d01c <__ieee754_pow+0x9a0>)
 800ce06:	0063      	lsls	r3, r4, #1
 800ce08:	085b      	lsrs	r3, r3, #1
 800ce0a:	9102      	str	r1, [sp, #8]
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	dd25      	ble.n	800ce5c <__ieee754_pow+0x7e0>
 800ce10:	4a83      	ldr	r2, [pc, #524]	; (800d020 <__ieee754_pow+0x9a4>)
 800ce12:	151b      	asrs	r3, r3, #20
 800ce14:	189b      	adds	r3, r3, r2
 800ce16:	2280      	movs	r2, #128	; 0x80
 800ce18:	0352      	lsls	r2, r2, #13
 800ce1a:	4694      	mov	ip, r2
 800ce1c:	411a      	asrs	r2, r3
 800ce1e:	1914      	adds	r4, r2, r4
 800ce20:	4b80      	ldr	r3, [pc, #512]	; (800d024 <__ieee754_pow+0x9a8>)
 800ce22:	0060      	lsls	r0, r4, #1
 800ce24:	4d80      	ldr	r5, [pc, #512]	; (800d028 <__ieee754_pow+0x9ac>)
 800ce26:	0d40      	lsrs	r0, r0, #21
 800ce28:	18c0      	adds	r0, r0, r3
 800ce2a:	4105      	asrs	r5, r0
 800ce2c:	0021      	movs	r1, r4
 800ce2e:	43a9      	bics	r1, r5
 800ce30:	000b      	movs	r3, r1
 800ce32:	4661      	mov	r1, ip
 800ce34:	0324      	lsls	r4, r4, #12
 800ce36:	0b24      	lsrs	r4, r4, #12
 800ce38:	4321      	orrs	r1, r4
 800ce3a:	2414      	movs	r4, #20
 800ce3c:	1a20      	subs	r0, r4, r0
 800ce3e:	4101      	asrs	r1, r0
 800ce40:	9102      	str	r1, [sp, #8]
 800ce42:	9908      	ldr	r1, [sp, #32]
 800ce44:	2200      	movs	r2, #0
 800ce46:	2900      	cmp	r1, #0
 800ce48:	da02      	bge.n	800ce50 <__ieee754_pow+0x7d4>
 800ce4a:	9902      	ldr	r1, [sp, #8]
 800ce4c:	4249      	negs	r1, r1
 800ce4e:	9102      	str	r1, [sp, #8]
 800ce50:	0030      	movs	r0, r6
 800ce52:	0039      	movs	r1, r7
 800ce54:	f7f5 fc3c 	bl	80026d0 <__aeabi_dsub>
 800ce58:	9006      	str	r0, [sp, #24]
 800ce5a:	9107      	str	r1, [sp, #28]
 800ce5c:	9a04      	ldr	r2, [sp, #16]
 800ce5e:	9b05      	ldr	r3, [sp, #20]
 800ce60:	9806      	ldr	r0, [sp, #24]
 800ce62:	9907      	ldr	r1, [sp, #28]
 800ce64:	2600      	movs	r6, #0
 800ce66:	f7f4 fa57 	bl	8001318 <__aeabi_dadd>
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	0030      	movs	r0, r6
 800ce6e:	4b6f      	ldr	r3, [pc, #444]	; (800d02c <__ieee754_pow+0x9b0>)
 800ce70:	000f      	movs	r7, r1
 800ce72:	f7f5 f9c1 	bl	80021f8 <__aeabi_dmul>
 800ce76:	9a06      	ldr	r2, [sp, #24]
 800ce78:	9b07      	ldr	r3, [sp, #28]
 800ce7a:	9008      	str	r0, [sp, #32]
 800ce7c:	9109      	str	r1, [sp, #36]	; 0x24
 800ce7e:	0030      	movs	r0, r6
 800ce80:	0039      	movs	r1, r7
 800ce82:	f7f5 fc25 	bl	80026d0 <__aeabi_dsub>
 800ce86:	0002      	movs	r2, r0
 800ce88:	000b      	movs	r3, r1
 800ce8a:	9804      	ldr	r0, [sp, #16]
 800ce8c:	9905      	ldr	r1, [sp, #20]
 800ce8e:	f7f5 fc1f 	bl	80026d0 <__aeabi_dsub>
 800ce92:	4a67      	ldr	r2, [pc, #412]	; (800d030 <__ieee754_pow+0x9b4>)
 800ce94:	4b67      	ldr	r3, [pc, #412]	; (800d034 <__ieee754_pow+0x9b8>)
 800ce96:	f7f5 f9af 	bl	80021f8 <__aeabi_dmul>
 800ce9a:	4a67      	ldr	r2, [pc, #412]	; (800d038 <__ieee754_pow+0x9bc>)
 800ce9c:	0004      	movs	r4, r0
 800ce9e:	000d      	movs	r5, r1
 800cea0:	0030      	movs	r0, r6
 800cea2:	0039      	movs	r1, r7
 800cea4:	4b65      	ldr	r3, [pc, #404]	; (800d03c <__ieee754_pow+0x9c0>)
 800cea6:	f7f5 f9a7 	bl	80021f8 <__aeabi_dmul>
 800ceaa:	0002      	movs	r2, r0
 800ceac:	000b      	movs	r3, r1
 800ceae:	0020      	movs	r0, r4
 800ceb0:	0029      	movs	r1, r5
 800ceb2:	f7f4 fa31 	bl	8001318 <__aeabi_dadd>
 800ceb6:	0004      	movs	r4, r0
 800ceb8:	000d      	movs	r5, r1
 800ceba:	0002      	movs	r2, r0
 800cebc:	000b      	movs	r3, r1
 800cebe:	9808      	ldr	r0, [sp, #32]
 800cec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cec2:	f7f4 fa29 	bl	8001318 <__aeabi_dadd>
 800cec6:	9a08      	ldr	r2, [sp, #32]
 800cec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceca:	0006      	movs	r6, r0
 800cecc:	000f      	movs	r7, r1
 800cece:	f7f5 fbff 	bl	80026d0 <__aeabi_dsub>
 800ced2:	0002      	movs	r2, r0
 800ced4:	000b      	movs	r3, r1
 800ced6:	0020      	movs	r0, r4
 800ced8:	0029      	movs	r1, r5
 800ceda:	f7f5 fbf9 	bl	80026d0 <__aeabi_dsub>
 800cede:	0032      	movs	r2, r6
 800cee0:	9004      	str	r0, [sp, #16]
 800cee2:	9105      	str	r1, [sp, #20]
 800cee4:	003b      	movs	r3, r7
 800cee6:	0030      	movs	r0, r6
 800cee8:	0039      	movs	r1, r7
 800ceea:	f7f5 f985 	bl	80021f8 <__aeabi_dmul>
 800ceee:	0004      	movs	r4, r0
 800cef0:	000d      	movs	r5, r1
 800cef2:	4a53      	ldr	r2, [pc, #332]	; (800d040 <__ieee754_pow+0x9c4>)
 800cef4:	4b53      	ldr	r3, [pc, #332]	; (800d044 <__ieee754_pow+0x9c8>)
 800cef6:	f7f5 f97f 	bl	80021f8 <__aeabi_dmul>
 800cefa:	4a53      	ldr	r2, [pc, #332]	; (800d048 <__ieee754_pow+0x9cc>)
 800cefc:	4b53      	ldr	r3, [pc, #332]	; (800d04c <__ieee754_pow+0x9d0>)
 800cefe:	f7f5 fbe7 	bl	80026d0 <__aeabi_dsub>
 800cf02:	0022      	movs	r2, r4
 800cf04:	002b      	movs	r3, r5
 800cf06:	f7f5 f977 	bl	80021f8 <__aeabi_dmul>
 800cf0a:	4a51      	ldr	r2, [pc, #324]	; (800d050 <__ieee754_pow+0x9d4>)
 800cf0c:	4b51      	ldr	r3, [pc, #324]	; (800d054 <__ieee754_pow+0x9d8>)
 800cf0e:	f7f4 fa03 	bl	8001318 <__aeabi_dadd>
 800cf12:	0022      	movs	r2, r4
 800cf14:	002b      	movs	r3, r5
 800cf16:	f7f5 f96f 	bl	80021f8 <__aeabi_dmul>
 800cf1a:	4a4f      	ldr	r2, [pc, #316]	; (800d058 <__ieee754_pow+0x9dc>)
 800cf1c:	4b4f      	ldr	r3, [pc, #316]	; (800d05c <__ieee754_pow+0x9e0>)
 800cf1e:	f7f5 fbd7 	bl	80026d0 <__aeabi_dsub>
 800cf22:	0022      	movs	r2, r4
 800cf24:	002b      	movs	r3, r5
 800cf26:	f7f5 f967 	bl	80021f8 <__aeabi_dmul>
 800cf2a:	4a4d      	ldr	r2, [pc, #308]	; (800d060 <__ieee754_pow+0x9e4>)
 800cf2c:	4b4d      	ldr	r3, [pc, #308]	; (800d064 <__ieee754_pow+0x9e8>)
 800cf2e:	f7f4 f9f3 	bl	8001318 <__aeabi_dadd>
 800cf32:	0022      	movs	r2, r4
 800cf34:	002b      	movs	r3, r5
 800cf36:	f7f5 f95f 	bl	80021f8 <__aeabi_dmul>
 800cf3a:	0002      	movs	r2, r0
 800cf3c:	000b      	movs	r3, r1
 800cf3e:	0030      	movs	r0, r6
 800cf40:	0039      	movs	r1, r7
 800cf42:	f7f5 fbc5 	bl	80026d0 <__aeabi_dsub>
 800cf46:	0004      	movs	r4, r0
 800cf48:	000d      	movs	r5, r1
 800cf4a:	0002      	movs	r2, r0
 800cf4c:	000b      	movs	r3, r1
 800cf4e:	0030      	movs	r0, r6
 800cf50:	0039      	movs	r1, r7
 800cf52:	f7f5 f951 	bl	80021f8 <__aeabi_dmul>
 800cf56:	2380      	movs	r3, #128	; 0x80
 800cf58:	9006      	str	r0, [sp, #24]
 800cf5a:	9107      	str	r1, [sp, #28]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	0020      	movs	r0, r4
 800cf60:	0029      	movs	r1, r5
 800cf62:	05db      	lsls	r3, r3, #23
 800cf64:	f7f5 fbb4 	bl	80026d0 <__aeabi_dsub>
 800cf68:	0002      	movs	r2, r0
 800cf6a:	000b      	movs	r3, r1
 800cf6c:	9806      	ldr	r0, [sp, #24]
 800cf6e:	9907      	ldr	r1, [sp, #28]
 800cf70:	f7f4 fd3c 	bl	80019ec <__aeabi_ddiv>
 800cf74:	9a04      	ldr	r2, [sp, #16]
 800cf76:	9b05      	ldr	r3, [sp, #20]
 800cf78:	0004      	movs	r4, r0
 800cf7a:	000d      	movs	r5, r1
 800cf7c:	0030      	movs	r0, r6
 800cf7e:	0039      	movs	r1, r7
 800cf80:	f7f5 f93a 	bl	80021f8 <__aeabi_dmul>
 800cf84:	9a04      	ldr	r2, [sp, #16]
 800cf86:	9b05      	ldr	r3, [sp, #20]
 800cf88:	f7f4 f9c6 	bl	8001318 <__aeabi_dadd>
 800cf8c:	0002      	movs	r2, r0
 800cf8e:	000b      	movs	r3, r1
 800cf90:	0020      	movs	r0, r4
 800cf92:	0029      	movs	r1, r5
 800cf94:	f7f5 fb9c 	bl	80026d0 <__aeabi_dsub>
 800cf98:	0032      	movs	r2, r6
 800cf9a:	003b      	movs	r3, r7
 800cf9c:	f7f5 fb98 	bl	80026d0 <__aeabi_dsub>
 800cfa0:	0002      	movs	r2, r0
 800cfa2:	000b      	movs	r3, r1
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	4930      	ldr	r1, [pc, #192]	; (800d068 <__ieee754_pow+0x9ec>)
 800cfa8:	f7f5 fb92 	bl	80026d0 <__aeabi_dsub>
 800cfac:	9b02      	ldr	r3, [sp, #8]
 800cfae:	051b      	lsls	r3, r3, #20
 800cfb0:	185b      	adds	r3, r3, r1
 800cfb2:	151a      	asrs	r2, r3, #20
 800cfb4:	2a00      	cmp	r2, #0
 800cfb6:	dc26      	bgt.n	800d006 <__ieee754_pow+0x98a>
 800cfb8:	9a02      	ldr	r2, [sp, #8]
 800cfba:	f000 f9a9 	bl	800d310 <scalbn>
 800cfbe:	9a00      	ldr	r2, [sp, #0]
 800cfc0:	9b01      	ldr	r3, [sp, #4]
 800cfc2:	f7ff fc2d 	bl	800c820 <__ieee754_pow+0x1a4>
 800cfc6:	4a29      	ldr	r2, [pc, #164]	; (800d06c <__ieee754_pow+0x9f0>)
 800cfc8:	004b      	lsls	r3, r1, #1
 800cfca:	085b      	lsrs	r3, r3, #1
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	dc00      	bgt.n	800cfd2 <__ieee754_pow+0x956>
 800cfd0:	e717      	b.n	800ce02 <__ieee754_pow+0x786>
 800cfd2:	4b27      	ldr	r3, [pc, #156]	; (800d070 <__ieee754_pow+0x9f4>)
 800cfd4:	18cb      	adds	r3, r1, r3
 800cfd6:	4303      	orrs	r3, r0
 800cfd8:	d009      	beq.n	800cfee <__ieee754_pow+0x972>
 800cfda:	9800      	ldr	r0, [sp, #0]
 800cfdc:	9901      	ldr	r1, [sp, #4]
 800cfde:	4a25      	ldr	r2, [pc, #148]	; (800d074 <__ieee754_pow+0x9f8>)
 800cfe0:	4b25      	ldr	r3, [pc, #148]	; (800d078 <__ieee754_pow+0x9fc>)
 800cfe2:	f7f5 f909 	bl	80021f8 <__aeabi_dmul>
 800cfe6:	4a23      	ldr	r2, [pc, #140]	; (800d074 <__ieee754_pow+0x9f8>)
 800cfe8:	4b23      	ldr	r3, [pc, #140]	; (800d078 <__ieee754_pow+0x9fc>)
 800cfea:	f7ff fc19 	bl	800c820 <__ieee754_pow+0x1a4>
 800cfee:	0032      	movs	r2, r6
 800cff0:	003b      	movs	r3, r7
 800cff2:	f7f5 fb6d 	bl	80026d0 <__aeabi_dsub>
 800cff6:	9a04      	ldr	r2, [sp, #16]
 800cff8:	9b05      	ldr	r3, [sp, #20]
 800cffa:	f7f3 fa47 	bl	800048c <__aeabi_dcmpge>
 800cffe:	2800      	cmp	r0, #0
 800d000:	d100      	bne.n	800d004 <__ieee754_pow+0x988>
 800d002:	e6fe      	b.n	800ce02 <__ieee754_pow+0x786>
 800d004:	e7e9      	b.n	800cfda <__ieee754_pow+0x95e>
 800d006:	0019      	movs	r1, r3
 800d008:	e7d9      	b.n	800cfbe <__ieee754_pow+0x942>
 800d00a:	2300      	movs	r3, #0
 800d00c:	4c16      	ldr	r4, [pc, #88]	; (800d068 <__ieee754_pow+0x9ec>)
 800d00e:	f7ff fbec 	bl	800c7ea <__ieee754_pow+0x16e>
 800d012:	46c0      	nop			; (mov r8, r8)
 800d014:	652b82fe 	.word	0x652b82fe
 800d018:	3c971547 	.word	0x3c971547
 800d01c:	3fe00000 	.word	0x3fe00000
 800d020:	fffffc02 	.word	0xfffffc02
 800d024:	fffffc01 	.word	0xfffffc01
 800d028:	000fffff 	.word	0x000fffff
 800d02c:	3fe62e43 	.word	0x3fe62e43
 800d030:	fefa39ef 	.word	0xfefa39ef
 800d034:	3fe62e42 	.word	0x3fe62e42
 800d038:	0ca86c39 	.word	0x0ca86c39
 800d03c:	be205c61 	.word	0xbe205c61
 800d040:	72bea4d0 	.word	0x72bea4d0
 800d044:	3e663769 	.word	0x3e663769
 800d048:	c5d26bf1 	.word	0xc5d26bf1
 800d04c:	3ebbbd41 	.word	0x3ebbbd41
 800d050:	af25de2c 	.word	0xaf25de2c
 800d054:	3f11566a 	.word	0x3f11566a
 800d058:	16bebd93 	.word	0x16bebd93
 800d05c:	3f66c16c 	.word	0x3f66c16c
 800d060:	5555553e 	.word	0x5555553e
 800d064:	3fc55555 	.word	0x3fc55555
 800d068:	3ff00000 	.word	0x3ff00000
 800d06c:	4090cbff 	.word	0x4090cbff
 800d070:	3f6f3400 	.word	0x3f6f3400
 800d074:	c2f8f359 	.word	0xc2f8f359
 800d078:	01a56e1f 	.word	0x01a56e1f

0800d07c <__ieee754_sqrt>:
 800d07c:	4b56      	ldr	r3, [pc, #344]	; (800d1d8 <__ieee754_sqrt+0x15c>)
 800d07e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d080:	0002      	movs	r2, r0
 800d082:	0005      	movs	r5, r0
 800d084:	0018      	movs	r0, r3
 800d086:	000c      	movs	r4, r1
 800d088:	b085      	sub	sp, #20
 800d08a:	4008      	ands	r0, r1
 800d08c:	4298      	cmp	r0, r3
 800d08e:	d10f      	bne.n	800d0b0 <__ieee754_sqrt+0x34>
 800d090:	000b      	movs	r3, r1
 800d092:	0028      	movs	r0, r5
 800d094:	f7f5 f8b0 	bl	80021f8 <__aeabi_dmul>
 800d098:	0002      	movs	r2, r0
 800d09a:	000b      	movs	r3, r1
 800d09c:	0028      	movs	r0, r5
 800d09e:	0021      	movs	r1, r4
 800d0a0:	f7f4 f93a 	bl	8001318 <__aeabi_dadd>
 800d0a4:	0005      	movs	r5, r0
 800d0a6:	000c      	movs	r4, r1
 800d0a8:	0028      	movs	r0, r5
 800d0aa:	0021      	movs	r1, r4
 800d0ac:	b005      	add	sp, #20
 800d0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0b0:	2900      	cmp	r1, #0
 800d0b2:	dc10      	bgt.n	800d0d6 <__ieee754_sqrt+0x5a>
 800d0b4:	004b      	lsls	r3, r1, #1
 800d0b6:	085b      	lsrs	r3, r3, #1
 800d0b8:	432b      	orrs	r3, r5
 800d0ba:	d0f5      	beq.n	800d0a8 <__ieee754_sqrt+0x2c>
 800d0bc:	2000      	movs	r0, #0
 800d0be:	4281      	cmp	r1, r0
 800d0c0:	d100      	bne.n	800d0c4 <__ieee754_sqrt+0x48>
 800d0c2:	e080      	b.n	800d1c6 <__ieee754_sqrt+0x14a>
 800d0c4:	000b      	movs	r3, r1
 800d0c6:	0028      	movs	r0, r5
 800d0c8:	f7f5 fb02 	bl	80026d0 <__aeabi_dsub>
 800d0cc:	0002      	movs	r2, r0
 800d0ce:	000b      	movs	r3, r1
 800d0d0:	f7f4 fc8c 	bl	80019ec <__aeabi_ddiv>
 800d0d4:	e7e6      	b.n	800d0a4 <__ieee754_sqrt+0x28>
 800d0d6:	1508      	asrs	r0, r1, #20
 800d0d8:	d075      	beq.n	800d1c6 <__ieee754_sqrt+0x14a>
 800d0da:	4b40      	ldr	r3, [pc, #256]	; (800d1dc <__ieee754_sqrt+0x160>)
 800d0dc:	0309      	lsls	r1, r1, #12
 800d0de:	18c4      	adds	r4, r0, r3
 800d0e0:	2380      	movs	r3, #128	; 0x80
 800d0e2:	0b09      	lsrs	r1, r1, #12
 800d0e4:	035b      	lsls	r3, r3, #13
 800d0e6:	4319      	orrs	r1, r3
 800d0e8:	07c3      	lsls	r3, r0, #31
 800d0ea:	d403      	bmi.n	800d0f4 <__ieee754_sqrt+0x78>
 800d0ec:	0fd3      	lsrs	r3, r2, #31
 800d0ee:	0049      	lsls	r1, r1, #1
 800d0f0:	18c9      	adds	r1, r1, r3
 800d0f2:	0052      	lsls	r2, r2, #1
 800d0f4:	1063      	asrs	r3, r4, #1
 800d0f6:	2400      	movs	r4, #0
 800d0f8:	0049      	lsls	r1, r1, #1
 800d0fa:	9303      	str	r3, [sp, #12]
 800d0fc:	0fd3      	lsrs	r3, r2, #31
 800d0fe:	18cb      	adds	r3, r1, r3
 800d100:	2180      	movs	r1, #128	; 0x80
 800d102:	2516      	movs	r5, #22
 800d104:	0020      	movs	r0, r4
 800d106:	0052      	lsls	r2, r2, #1
 800d108:	0389      	lsls	r1, r1, #14
 800d10a:	1846      	adds	r6, r0, r1
 800d10c:	429e      	cmp	r6, r3
 800d10e:	dc02      	bgt.n	800d116 <__ieee754_sqrt+0x9a>
 800d110:	1870      	adds	r0, r6, r1
 800d112:	1b9b      	subs	r3, r3, r6
 800d114:	1864      	adds	r4, r4, r1
 800d116:	0fd6      	lsrs	r6, r2, #31
 800d118:	005b      	lsls	r3, r3, #1
 800d11a:	3d01      	subs	r5, #1
 800d11c:	18f3      	adds	r3, r6, r3
 800d11e:	0052      	lsls	r2, r2, #1
 800d120:	0849      	lsrs	r1, r1, #1
 800d122:	2d00      	cmp	r5, #0
 800d124:	d1f1      	bne.n	800d10a <__ieee754_sqrt+0x8e>
 800d126:	2620      	movs	r6, #32
 800d128:	2780      	movs	r7, #128	; 0x80
 800d12a:	0029      	movs	r1, r5
 800d12c:	9601      	str	r6, [sp, #4]
 800d12e:	063f      	lsls	r7, r7, #24
 800d130:	197e      	adds	r6, r7, r5
 800d132:	46b4      	mov	ip, r6
 800d134:	4283      	cmp	r3, r0
 800d136:	dc02      	bgt.n	800d13e <__ieee754_sqrt+0xc2>
 800d138:	d114      	bne.n	800d164 <__ieee754_sqrt+0xe8>
 800d13a:	4296      	cmp	r6, r2
 800d13c:	d812      	bhi.n	800d164 <__ieee754_sqrt+0xe8>
 800d13e:	4665      	mov	r5, ip
 800d140:	4666      	mov	r6, ip
 800d142:	19ed      	adds	r5, r5, r7
 800d144:	9002      	str	r0, [sp, #8]
 800d146:	2e00      	cmp	r6, #0
 800d148:	da03      	bge.n	800d152 <__ieee754_sqrt+0xd6>
 800d14a:	43ee      	mvns	r6, r5
 800d14c:	0ff6      	lsrs	r6, r6, #31
 800d14e:	1986      	adds	r6, r0, r6
 800d150:	9602      	str	r6, [sp, #8]
 800d152:	1a1b      	subs	r3, r3, r0
 800d154:	4562      	cmp	r2, ip
 800d156:	4180      	sbcs	r0, r0
 800d158:	4240      	negs	r0, r0
 800d15a:	1a1b      	subs	r3, r3, r0
 800d15c:	4660      	mov	r0, ip
 800d15e:	1a12      	subs	r2, r2, r0
 800d160:	9802      	ldr	r0, [sp, #8]
 800d162:	19c9      	adds	r1, r1, r7
 800d164:	0fd6      	lsrs	r6, r2, #31
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	18f3      	adds	r3, r6, r3
 800d16a:	9e01      	ldr	r6, [sp, #4]
 800d16c:	0052      	lsls	r2, r2, #1
 800d16e:	3e01      	subs	r6, #1
 800d170:	087f      	lsrs	r7, r7, #1
 800d172:	9601      	str	r6, [sp, #4]
 800d174:	2e00      	cmp	r6, #0
 800d176:	d1db      	bne.n	800d130 <__ieee754_sqrt+0xb4>
 800d178:	4313      	orrs	r3, r2
 800d17a:	d003      	beq.n	800d184 <__ieee754_sqrt+0x108>
 800d17c:	1c4b      	adds	r3, r1, #1
 800d17e:	d127      	bne.n	800d1d0 <__ieee754_sqrt+0x154>
 800d180:	0031      	movs	r1, r6
 800d182:	3401      	adds	r4, #1
 800d184:	4b16      	ldr	r3, [pc, #88]	; (800d1e0 <__ieee754_sqrt+0x164>)
 800d186:	1060      	asrs	r0, r4, #1
 800d188:	18c0      	adds	r0, r0, r3
 800d18a:	0849      	lsrs	r1, r1, #1
 800d18c:	07e3      	lsls	r3, r4, #31
 800d18e:	d502      	bpl.n	800d196 <__ieee754_sqrt+0x11a>
 800d190:	2380      	movs	r3, #128	; 0x80
 800d192:	061b      	lsls	r3, r3, #24
 800d194:	4319      	orrs	r1, r3
 800d196:	9b03      	ldr	r3, [sp, #12]
 800d198:	000d      	movs	r5, r1
 800d19a:	051c      	lsls	r4, r3, #20
 800d19c:	1823      	adds	r3, r4, r0
 800d19e:	001c      	movs	r4, r3
 800d1a0:	e782      	b.n	800d0a8 <__ieee754_sqrt+0x2c>
 800d1a2:	0ad1      	lsrs	r1, r2, #11
 800d1a4:	3b15      	subs	r3, #21
 800d1a6:	0552      	lsls	r2, r2, #21
 800d1a8:	2900      	cmp	r1, #0
 800d1aa:	d0fa      	beq.n	800d1a2 <__ieee754_sqrt+0x126>
 800d1ac:	2480      	movs	r4, #128	; 0x80
 800d1ae:	0364      	lsls	r4, r4, #13
 800d1b0:	4221      	tst	r1, r4
 800d1b2:	d00a      	beq.n	800d1ca <__ieee754_sqrt+0x14e>
 800d1b4:	2420      	movs	r4, #32
 800d1b6:	0016      	movs	r6, r2
 800d1b8:	1a24      	subs	r4, r4, r0
 800d1ba:	40e6      	lsrs	r6, r4
 800d1bc:	1e45      	subs	r5, r0, #1
 800d1be:	4082      	lsls	r2, r0
 800d1c0:	4331      	orrs	r1, r6
 800d1c2:	1b58      	subs	r0, r3, r5
 800d1c4:	e789      	b.n	800d0da <__ieee754_sqrt+0x5e>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e7ee      	b.n	800d1a8 <__ieee754_sqrt+0x12c>
 800d1ca:	0049      	lsls	r1, r1, #1
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	e7ef      	b.n	800d1b0 <__ieee754_sqrt+0x134>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	3101      	adds	r1, #1
 800d1d4:	4399      	bics	r1, r3
 800d1d6:	e7d5      	b.n	800d184 <__ieee754_sqrt+0x108>
 800d1d8:	7ff00000 	.word	0x7ff00000
 800d1dc:	fffffc01 	.word	0xfffffc01
 800d1e0:	3fe00000 	.word	0x3fe00000

0800d1e4 <finite>:
 800d1e4:	4b02      	ldr	r3, [pc, #8]	; (800d1f0 <finite+0xc>)
 800d1e6:	0048      	lsls	r0, r1, #1
 800d1e8:	0840      	lsrs	r0, r0, #1
 800d1ea:	18c0      	adds	r0, r0, r3
 800d1ec:	0fc0      	lsrs	r0, r0, #31
 800d1ee:	4770      	bx	lr
 800d1f0:	80100000 	.word	0x80100000

0800d1f4 <nan>:
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	4901      	ldr	r1, [pc, #4]	; (800d1fc <nan+0x8>)
 800d1f8:	4770      	bx	lr
 800d1fa:	46c0      	nop			; (mov r8, r8)
 800d1fc:	7ff80000 	.word	0x7ff80000

0800d200 <rint>:
 800d200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d202:	004a      	lsls	r2, r1, #1
 800d204:	4e3e      	ldr	r6, [pc, #248]	; (800d300 <rint+0x100>)
 800d206:	0d52      	lsrs	r2, r2, #21
 800d208:	b085      	sub	sp, #20
 800d20a:	1996      	adds	r6, r2, r6
 800d20c:	000d      	movs	r5, r1
 800d20e:	0003      	movs	r3, r0
 800d210:	9101      	str	r1, [sp, #4]
 800d212:	0fcc      	lsrs	r4, r1, #31
 800d214:	2e13      	cmp	r6, #19
 800d216:	dc57      	bgt.n	800d2c8 <rint+0xc8>
 800d218:	2e00      	cmp	r6, #0
 800d21a:	da2a      	bge.n	800d272 <rint+0x72>
 800d21c:	004a      	lsls	r2, r1, #1
 800d21e:	0852      	lsrs	r2, r2, #1
 800d220:	4302      	orrs	r2, r0
 800d222:	d024      	beq.n	800d26e <rint+0x6e>
 800d224:	030a      	lsls	r2, r1, #12
 800d226:	0b12      	lsrs	r2, r2, #12
 800d228:	4302      	orrs	r2, r0
 800d22a:	4253      	negs	r3, r2
 800d22c:	4313      	orrs	r3, r2
 800d22e:	2280      	movs	r2, #128	; 0x80
 800d230:	0c4d      	lsrs	r5, r1, #17
 800d232:	0312      	lsls	r2, r2, #12
 800d234:	0b1b      	lsrs	r3, r3, #12
 800d236:	4013      	ands	r3, r2
 800d238:	046d      	lsls	r5, r5, #17
 800d23a:	432b      	orrs	r3, r5
 800d23c:	0019      	movs	r1, r3
 800d23e:	4b31      	ldr	r3, [pc, #196]	; (800d304 <rint+0x104>)
 800d240:	00e2      	lsls	r2, r4, #3
 800d242:	189b      	adds	r3, r3, r2
 800d244:	681e      	ldr	r6, [r3, #0]
 800d246:	685f      	ldr	r7, [r3, #4]
 800d248:	0002      	movs	r2, r0
 800d24a:	000b      	movs	r3, r1
 800d24c:	0030      	movs	r0, r6
 800d24e:	0039      	movs	r1, r7
 800d250:	f7f4 f862 	bl	8001318 <__aeabi_dadd>
 800d254:	9002      	str	r0, [sp, #8]
 800d256:	9103      	str	r1, [sp, #12]
 800d258:	9802      	ldr	r0, [sp, #8]
 800d25a:	9903      	ldr	r1, [sp, #12]
 800d25c:	003b      	movs	r3, r7
 800d25e:	0032      	movs	r2, r6
 800d260:	f7f5 fa36 	bl	80026d0 <__aeabi_dsub>
 800d264:	004b      	lsls	r3, r1, #1
 800d266:	085b      	lsrs	r3, r3, #1
 800d268:	07e4      	lsls	r4, r4, #31
 800d26a:	4323      	orrs	r3, r4
 800d26c:	0019      	movs	r1, r3
 800d26e:	b005      	add	sp, #20
 800d270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d272:	4a25      	ldr	r2, [pc, #148]	; (800d308 <rint+0x108>)
 800d274:	4132      	asrs	r2, r6
 800d276:	0017      	movs	r7, r2
 800d278:	400f      	ands	r7, r1
 800d27a:	4307      	orrs	r7, r0
 800d27c:	d0f7      	beq.n	800d26e <rint+0x6e>
 800d27e:	0852      	lsrs	r2, r2, #1
 800d280:	0011      	movs	r1, r2
 800d282:	4029      	ands	r1, r5
 800d284:	430b      	orrs	r3, r1
 800d286:	d00a      	beq.n	800d29e <rint+0x9e>
 800d288:	2300      	movs	r3, #0
 800d28a:	2e13      	cmp	r6, #19
 800d28c:	d101      	bne.n	800d292 <rint+0x92>
 800d28e:	2380      	movs	r3, #128	; 0x80
 800d290:	061b      	lsls	r3, r3, #24
 800d292:	2780      	movs	r7, #128	; 0x80
 800d294:	02ff      	lsls	r7, r7, #11
 800d296:	4137      	asrs	r7, r6
 800d298:	4395      	bics	r5, r2
 800d29a:	432f      	orrs	r7, r5
 800d29c:	9701      	str	r7, [sp, #4]
 800d29e:	9901      	ldr	r1, [sp, #4]
 800d2a0:	001a      	movs	r2, r3
 800d2a2:	000b      	movs	r3, r1
 800d2a4:	4917      	ldr	r1, [pc, #92]	; (800d304 <rint+0x104>)
 800d2a6:	00e4      	lsls	r4, r4, #3
 800d2a8:	190c      	adds	r4, r1, r4
 800d2aa:	6865      	ldr	r5, [r4, #4]
 800d2ac:	6824      	ldr	r4, [r4, #0]
 800d2ae:	0020      	movs	r0, r4
 800d2b0:	0029      	movs	r1, r5
 800d2b2:	f7f4 f831 	bl	8001318 <__aeabi_dadd>
 800d2b6:	9002      	str	r0, [sp, #8]
 800d2b8:	9103      	str	r1, [sp, #12]
 800d2ba:	9802      	ldr	r0, [sp, #8]
 800d2bc:	9903      	ldr	r1, [sp, #12]
 800d2be:	0022      	movs	r2, r4
 800d2c0:	002b      	movs	r3, r5
 800d2c2:	f7f5 fa05 	bl	80026d0 <__aeabi_dsub>
 800d2c6:	e7d2      	b.n	800d26e <rint+0x6e>
 800d2c8:	2e33      	cmp	r6, #51	; 0x33
 800d2ca:	dd08      	ble.n	800d2de <rint+0xde>
 800d2cc:	2380      	movs	r3, #128	; 0x80
 800d2ce:	00db      	lsls	r3, r3, #3
 800d2d0:	429e      	cmp	r6, r3
 800d2d2:	d1cc      	bne.n	800d26e <rint+0x6e>
 800d2d4:	0002      	movs	r2, r0
 800d2d6:	000b      	movs	r3, r1
 800d2d8:	f7f4 f81e 	bl	8001318 <__aeabi_dadd>
 800d2dc:	e7c7      	b.n	800d26e <rint+0x6e>
 800d2de:	2601      	movs	r6, #1
 800d2e0:	4d0a      	ldr	r5, [pc, #40]	; (800d30c <rint+0x10c>)
 800d2e2:	4276      	negs	r6, r6
 800d2e4:	1952      	adds	r2, r2, r5
 800d2e6:	40d6      	lsrs	r6, r2
 800d2e8:	4206      	tst	r6, r0
 800d2ea:	d0c0      	beq.n	800d26e <rint+0x6e>
 800d2ec:	0876      	lsrs	r6, r6, #1
 800d2ee:	4206      	tst	r6, r0
 800d2f0:	d0d5      	beq.n	800d29e <rint+0x9e>
 800d2f2:	2180      	movs	r1, #128	; 0x80
 800d2f4:	05c9      	lsls	r1, r1, #23
 800d2f6:	4111      	asrs	r1, r2
 800d2f8:	43b3      	bics	r3, r6
 800d2fa:	430b      	orrs	r3, r1
 800d2fc:	e7cf      	b.n	800d29e <rint+0x9e>
 800d2fe:	46c0      	nop			; (mov r8, r8)
 800d300:	fffffc01 	.word	0xfffffc01
 800d304:	0800dc70 	.word	0x0800dc70
 800d308:	000fffff 	.word	0x000fffff
 800d30c:	fffffbed 	.word	0xfffffbed

0800d310 <scalbn>:
 800d310:	004b      	lsls	r3, r1, #1
 800d312:	b570      	push	{r4, r5, r6, lr}
 800d314:	0d5b      	lsrs	r3, r3, #21
 800d316:	0014      	movs	r4, r2
 800d318:	000a      	movs	r2, r1
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d10d      	bne.n	800d33a <scalbn+0x2a>
 800d31e:	004b      	lsls	r3, r1, #1
 800d320:	085b      	lsrs	r3, r3, #1
 800d322:	4303      	orrs	r3, r0
 800d324:	d010      	beq.n	800d348 <scalbn+0x38>
 800d326:	4b27      	ldr	r3, [pc, #156]	; (800d3c4 <scalbn+0xb4>)
 800d328:	2200      	movs	r2, #0
 800d32a:	f7f4 ff65 	bl	80021f8 <__aeabi_dmul>
 800d32e:	4b26      	ldr	r3, [pc, #152]	; (800d3c8 <scalbn+0xb8>)
 800d330:	429c      	cmp	r4, r3
 800d332:	da0a      	bge.n	800d34a <scalbn+0x3a>
 800d334:	4a25      	ldr	r2, [pc, #148]	; (800d3cc <scalbn+0xbc>)
 800d336:	4b26      	ldr	r3, [pc, #152]	; (800d3d0 <scalbn+0xc0>)
 800d338:	e019      	b.n	800d36e <scalbn+0x5e>
 800d33a:	4d26      	ldr	r5, [pc, #152]	; (800d3d4 <scalbn+0xc4>)
 800d33c:	42ab      	cmp	r3, r5
 800d33e:	d108      	bne.n	800d352 <scalbn+0x42>
 800d340:	0002      	movs	r2, r0
 800d342:	000b      	movs	r3, r1
 800d344:	f7f3 ffe8 	bl	8001318 <__aeabi_dadd>
 800d348:	bd70      	pop	{r4, r5, r6, pc}
 800d34a:	000a      	movs	r2, r1
 800d34c:	004b      	lsls	r3, r1, #1
 800d34e:	0d5b      	lsrs	r3, r3, #21
 800d350:	3b36      	subs	r3, #54	; 0x36
 800d352:	4d21      	ldr	r5, [pc, #132]	; (800d3d8 <scalbn+0xc8>)
 800d354:	18e3      	adds	r3, r4, r3
 800d356:	42ab      	cmp	r3, r5
 800d358:	dd0c      	ble.n	800d374 <scalbn+0x64>
 800d35a:	4c20      	ldr	r4, [pc, #128]	; (800d3dc <scalbn+0xcc>)
 800d35c:	4d20      	ldr	r5, [pc, #128]	; (800d3e0 <scalbn+0xd0>)
 800d35e:	2900      	cmp	r1, #0
 800d360:	da01      	bge.n	800d366 <scalbn+0x56>
 800d362:	4c1e      	ldr	r4, [pc, #120]	; (800d3dc <scalbn+0xcc>)
 800d364:	4d1f      	ldr	r5, [pc, #124]	; (800d3e4 <scalbn+0xd4>)
 800d366:	0020      	movs	r0, r4
 800d368:	0029      	movs	r1, r5
 800d36a:	4a1c      	ldr	r2, [pc, #112]	; (800d3dc <scalbn+0xcc>)
 800d36c:	4b1c      	ldr	r3, [pc, #112]	; (800d3e0 <scalbn+0xd0>)
 800d36e:	f7f4 ff43 	bl	80021f8 <__aeabi_dmul>
 800d372:	e7e9      	b.n	800d348 <scalbn+0x38>
 800d374:	2b00      	cmp	r3, #0
 800d376:	dd05      	ble.n	800d384 <scalbn+0x74>
 800d378:	4c1b      	ldr	r4, [pc, #108]	; (800d3e8 <scalbn+0xd8>)
 800d37a:	051b      	lsls	r3, r3, #20
 800d37c:	4022      	ands	r2, r4
 800d37e:	431a      	orrs	r2, r3
 800d380:	0011      	movs	r1, r2
 800d382:	e7e1      	b.n	800d348 <scalbn+0x38>
 800d384:	001d      	movs	r5, r3
 800d386:	3535      	adds	r5, #53	; 0x35
 800d388:	da13      	bge.n	800d3b2 <scalbn+0xa2>
 800d38a:	4a18      	ldr	r2, [pc, #96]	; (800d3ec <scalbn+0xdc>)
 800d38c:	0fcb      	lsrs	r3, r1, #31
 800d38e:	4294      	cmp	r4, r2
 800d390:	dd08      	ble.n	800d3a4 <scalbn+0x94>
 800d392:	4812      	ldr	r0, [pc, #72]	; (800d3dc <scalbn+0xcc>)
 800d394:	4912      	ldr	r1, [pc, #72]	; (800d3e0 <scalbn+0xd0>)
 800d396:	2b00      	cmp	r3, #0
 800d398:	d001      	beq.n	800d39e <scalbn+0x8e>
 800d39a:	4810      	ldr	r0, [pc, #64]	; (800d3dc <scalbn+0xcc>)
 800d39c:	4911      	ldr	r1, [pc, #68]	; (800d3e4 <scalbn+0xd4>)
 800d39e:	4a0f      	ldr	r2, [pc, #60]	; (800d3dc <scalbn+0xcc>)
 800d3a0:	4b0f      	ldr	r3, [pc, #60]	; (800d3e0 <scalbn+0xd0>)
 800d3a2:	e7e4      	b.n	800d36e <scalbn+0x5e>
 800d3a4:	4809      	ldr	r0, [pc, #36]	; (800d3cc <scalbn+0xbc>)
 800d3a6:	490a      	ldr	r1, [pc, #40]	; (800d3d0 <scalbn+0xc0>)
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d0c3      	beq.n	800d334 <scalbn+0x24>
 800d3ac:	4807      	ldr	r0, [pc, #28]	; (800d3cc <scalbn+0xbc>)
 800d3ae:	4910      	ldr	r1, [pc, #64]	; (800d3f0 <scalbn+0xe0>)
 800d3b0:	e7c0      	b.n	800d334 <scalbn+0x24>
 800d3b2:	4c0d      	ldr	r4, [pc, #52]	; (800d3e8 <scalbn+0xd8>)
 800d3b4:	3336      	adds	r3, #54	; 0x36
 800d3b6:	4022      	ands	r2, r4
 800d3b8:	051b      	lsls	r3, r3, #20
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	0019      	movs	r1, r3
 800d3be:	2200      	movs	r2, #0
 800d3c0:	4b0c      	ldr	r3, [pc, #48]	; (800d3f4 <scalbn+0xe4>)
 800d3c2:	e7d4      	b.n	800d36e <scalbn+0x5e>
 800d3c4:	43500000 	.word	0x43500000
 800d3c8:	ffff3cb0 	.word	0xffff3cb0
 800d3cc:	c2f8f359 	.word	0xc2f8f359
 800d3d0:	01a56e1f 	.word	0x01a56e1f
 800d3d4:	000007ff 	.word	0x000007ff
 800d3d8:	000007fe 	.word	0x000007fe
 800d3dc:	8800759c 	.word	0x8800759c
 800d3e0:	7e37e43c 	.word	0x7e37e43c
 800d3e4:	fe37e43c 	.word	0xfe37e43c
 800d3e8:	800fffff 	.word	0x800fffff
 800d3ec:	0000c350 	.word	0x0000c350
 800d3f0:	81a56e1f 	.word	0x81a56e1f
 800d3f4:	3c900000 	.word	0x3c900000

0800d3f8 <_init>:
 800d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fa:	46c0      	nop			; (mov r8, r8)
 800d3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3fe:	bc08      	pop	{r3}
 800d400:	469e      	mov	lr, r3
 800d402:	4770      	bx	lr

0800d404 <_fini>:
 800d404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d406:	46c0      	nop			; (mov r8, r8)
 800d408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d40a:	bc08      	pop	{r3}
 800d40c:	469e      	mov	lr, r3
 800d40e:	4770      	bx	lr
