
Exjobb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c4c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  08011d08  08011d08  00021d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012860  08012860  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08012860  08012860  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012860  08012860  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012860  08012860  00022860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012864  08012864  00022864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08012868  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001e4  08012a4c  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  08012a4c  000305f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b241  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000304a  00000000  00000000  0004b44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0004e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001288  00000000  00000000  0004f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197f6  00000000  00000000  00050ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196ee  00000000  00000000  0006a2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b81c  00000000  00000000  000839b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f1d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fac  00000000  00000000  0011f224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e4 	.word	0x200001e4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08011cec 	.word	0x08011cec

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e8 	.word	0x200001e8
 80000fc:	08011cec 	.word	0x08011cec

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	1c10      	adds	r0, r2, #0
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	1c19      	adds	r1, r3, #0
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fe33 	bl	80020a0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd7d 	bl	8001f44 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fe25 	bl	80020a0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe1b 	bl	80020a0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fd9f 	bl	8001fbc <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd95 	bl	8001fbc <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	1c08      	adds	r0, r1, #0
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fb67 	bl	8000b7c <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 faeb 	bl	8000a94 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb59 	bl	8000b7c <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb4f 	bl	8000b7c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 faf9 	bl	8000ae4 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 faef 	bl	8000ae4 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_f2uiz>:
 8000514:	219e      	movs	r1, #158	; 0x9e
 8000516:	b510      	push	{r4, lr}
 8000518:	05c9      	lsls	r1, r1, #23
 800051a:	1c04      	adds	r4, r0, #0
 800051c:	f7ff fff0 	bl	8000500 <__aeabi_fcmpge>
 8000520:	2800      	cmp	r0, #0
 8000522:	d103      	bne.n	800052c <__aeabi_f2uiz+0x18>
 8000524:	1c20      	adds	r0, r4, #0
 8000526:	f000 fe55 	bl	80011d4 <__aeabi_f2iz>
 800052a:	bd10      	pop	{r4, pc}
 800052c:	219e      	movs	r1, #158	; 0x9e
 800052e:	1c20      	adds	r0, r4, #0
 8000530:	05c9      	lsls	r1, r1, #23
 8000532:	f000 fc87 	bl	8000e44 <__aeabi_fsub>
 8000536:	f000 fe4d 	bl	80011d4 <__aeabi_f2iz>
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	061b      	lsls	r3, r3, #24
 800053e:	469c      	mov	ip, r3
 8000540:	4460      	add	r0, ip
 8000542:	e7f2      	b.n	800052a <__aeabi_f2uiz+0x16>

08000544 <__aeabi_fadd>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4646      	mov	r6, r8
 8000548:	46d6      	mov	lr, sl
 800054a:	464f      	mov	r7, r9
 800054c:	024d      	lsls	r5, r1, #9
 800054e:	0242      	lsls	r2, r0, #9
 8000550:	b5c0      	push	{r6, r7, lr}
 8000552:	0a52      	lsrs	r2, r2, #9
 8000554:	0a6e      	lsrs	r6, r5, #9
 8000556:	0047      	lsls	r7, r0, #1
 8000558:	46b0      	mov	r8, r6
 800055a:	0e3f      	lsrs	r7, r7, #24
 800055c:	004e      	lsls	r6, r1, #1
 800055e:	0fc4      	lsrs	r4, r0, #31
 8000560:	00d0      	lsls	r0, r2, #3
 8000562:	4694      	mov	ip, r2
 8000564:	003b      	movs	r3, r7
 8000566:	4682      	mov	sl, r0
 8000568:	0e36      	lsrs	r6, r6, #24
 800056a:	0fc9      	lsrs	r1, r1, #31
 800056c:	09ad      	lsrs	r5, r5, #6
 800056e:	428c      	cmp	r4, r1
 8000570:	d06d      	beq.n	800064e <__aeabi_fadd+0x10a>
 8000572:	1bb8      	subs	r0, r7, r6
 8000574:	4681      	mov	r9, r0
 8000576:	2800      	cmp	r0, #0
 8000578:	dd4d      	ble.n	8000616 <__aeabi_fadd+0xd2>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x3c>
 800057e:	e088      	b.n	8000692 <__aeabi_fadd+0x14e>
 8000580:	2fff      	cmp	r7, #255	; 0xff
 8000582:	d05a      	beq.n	800063a <__aeabi_fadd+0xf6>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	04db      	lsls	r3, r3, #19
 8000588:	431d      	orrs	r5, r3
 800058a:	464b      	mov	r3, r9
 800058c:	2201      	movs	r2, #1
 800058e:	2b1b      	cmp	r3, #27
 8000590:	dc0a      	bgt.n	80005a8 <__aeabi_fadd+0x64>
 8000592:	002b      	movs	r3, r5
 8000594:	464a      	mov	r2, r9
 8000596:	4649      	mov	r1, r9
 8000598:	40d3      	lsrs	r3, r2
 800059a:	2220      	movs	r2, #32
 800059c:	1a52      	subs	r2, r2, r1
 800059e:	4095      	lsls	r5, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	1e55      	subs	r5, r2, #1
 80005a4:	41aa      	sbcs	r2, r5
 80005a6:	431a      	orrs	r2, r3
 80005a8:	4653      	mov	r3, sl
 80005aa:	1a9a      	subs	r2, r3, r2
 80005ac:	0153      	lsls	r3, r2, #5
 80005ae:	d400      	bmi.n	80005b2 <__aeabi_fadd+0x6e>
 80005b0:	e0b9      	b.n	8000726 <__aeabi_fadd+0x1e2>
 80005b2:	0192      	lsls	r2, r2, #6
 80005b4:	0996      	lsrs	r6, r2, #6
 80005b6:	0030      	movs	r0, r6
 80005b8:	f002 fd5a 	bl	8003070 <__clzsi2>
 80005bc:	3805      	subs	r0, #5
 80005be:	4086      	lsls	r6, r0
 80005c0:	4287      	cmp	r7, r0
 80005c2:	dd00      	ble.n	80005c6 <__aeabi_fadd+0x82>
 80005c4:	e0d4      	b.n	8000770 <__aeabi_fadd+0x22c>
 80005c6:	0033      	movs	r3, r6
 80005c8:	1bc7      	subs	r7, r0, r7
 80005ca:	2020      	movs	r0, #32
 80005cc:	3701      	adds	r7, #1
 80005ce:	40fb      	lsrs	r3, r7
 80005d0:	1bc7      	subs	r7, r0, r7
 80005d2:	40be      	lsls	r6, r7
 80005d4:	0032      	movs	r2, r6
 80005d6:	1e56      	subs	r6, r2, #1
 80005d8:	41b2      	sbcs	r2, r6
 80005da:	2700      	movs	r7, #0
 80005dc:	431a      	orrs	r2, r3
 80005de:	0753      	lsls	r3, r2, #29
 80005e0:	d004      	beq.n	80005ec <__aeabi_fadd+0xa8>
 80005e2:	230f      	movs	r3, #15
 80005e4:	4013      	ands	r3, r2
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d000      	beq.n	80005ec <__aeabi_fadd+0xa8>
 80005ea:	3204      	adds	r2, #4
 80005ec:	0153      	lsls	r3, r2, #5
 80005ee:	d400      	bmi.n	80005f2 <__aeabi_fadd+0xae>
 80005f0:	e09c      	b.n	800072c <__aeabi_fadd+0x1e8>
 80005f2:	1c7b      	adds	r3, r7, #1
 80005f4:	2ffe      	cmp	r7, #254	; 0xfe
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0xb6>
 80005f8:	e09a      	b.n	8000730 <__aeabi_fadd+0x1ec>
 80005fa:	0192      	lsls	r2, r2, #6
 80005fc:	0a52      	lsrs	r2, r2, #9
 80005fe:	4694      	mov	ip, r2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	05d8      	lsls	r0, r3, #23
 8000604:	4663      	mov	r3, ip
 8000606:	07e4      	lsls	r4, r4, #31
 8000608:	4318      	orrs	r0, r3
 800060a:	4320      	orrs	r0, r4
 800060c:	bce0      	pop	{r5, r6, r7}
 800060e:	46ba      	mov	sl, r7
 8000610:	46b1      	mov	r9, r6
 8000612:	46a8      	mov	r8, r5
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	2800      	cmp	r0, #0
 8000618:	d049      	beq.n	80006ae <__aeabi_fadd+0x16a>
 800061a:	1bf3      	subs	r3, r6, r7
 800061c:	2f00      	cmp	r7, #0
 800061e:	d000      	beq.n	8000622 <__aeabi_fadd+0xde>
 8000620:	e0b6      	b.n	8000790 <__aeabi_fadd+0x24c>
 8000622:	4652      	mov	r2, sl
 8000624:	2a00      	cmp	r2, #0
 8000626:	d060      	beq.n	80006ea <__aeabi_fadd+0x1a6>
 8000628:	3b01      	subs	r3, #1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_fadd+0xec>
 800062e:	e0fc      	b.n	800082a <__aeabi_fadd+0x2e6>
 8000630:	2eff      	cmp	r6, #255	; 0xff
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0xf2>
 8000634:	e0b4      	b.n	80007a0 <__aeabi_fadd+0x25c>
 8000636:	000c      	movs	r4, r1
 8000638:	4642      	mov	r2, r8
 800063a:	2a00      	cmp	r2, #0
 800063c:	d078      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4310      	orrs	r0, r2
 8000644:	0242      	lsls	r2, r0, #9
 8000646:	0a53      	lsrs	r3, r2, #9
 8000648:	469c      	mov	ip, r3
 800064a:	23ff      	movs	r3, #255	; 0xff
 800064c:	e7d9      	b.n	8000602 <__aeabi_fadd+0xbe>
 800064e:	1bb9      	subs	r1, r7, r6
 8000650:	2900      	cmp	r1, #0
 8000652:	dd71      	ble.n	8000738 <__aeabi_fadd+0x1f4>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d03f      	beq.n	80006d8 <__aeabi_fadd+0x194>
 8000658:	2fff      	cmp	r7, #255	; 0xff
 800065a:	d0ee      	beq.n	800063a <__aeabi_fadd+0xf6>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	04db      	lsls	r3, r3, #19
 8000660:	431d      	orrs	r5, r3
 8000662:	2201      	movs	r2, #1
 8000664:	291b      	cmp	r1, #27
 8000666:	dc07      	bgt.n	8000678 <__aeabi_fadd+0x134>
 8000668:	002a      	movs	r2, r5
 800066a:	2320      	movs	r3, #32
 800066c:	40ca      	lsrs	r2, r1
 800066e:	1a59      	subs	r1, r3, r1
 8000670:	408d      	lsls	r5, r1
 8000672:	1e6b      	subs	r3, r5, #1
 8000674:	419d      	sbcs	r5, r3
 8000676:	432a      	orrs	r2, r5
 8000678:	4452      	add	r2, sl
 800067a:	0153      	lsls	r3, r2, #5
 800067c:	d553      	bpl.n	8000726 <__aeabi_fadd+0x1e2>
 800067e:	3701      	adds	r7, #1
 8000680:	2fff      	cmp	r7, #255	; 0xff
 8000682:	d055      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 8000684:	2301      	movs	r3, #1
 8000686:	497b      	ldr	r1, [pc, #492]	; (8000874 <__aeabi_fadd+0x330>)
 8000688:	4013      	ands	r3, r2
 800068a:	0852      	lsrs	r2, r2, #1
 800068c:	400a      	ands	r2, r1
 800068e:	431a      	orrs	r2, r3
 8000690:	e7a5      	b.n	80005de <__aeabi_fadd+0x9a>
 8000692:	2d00      	cmp	r5, #0
 8000694:	d02c      	beq.n	80006f0 <__aeabi_fadd+0x1ac>
 8000696:	2301      	movs	r3, #1
 8000698:	425b      	negs	r3, r3
 800069a:	469c      	mov	ip, r3
 800069c:	44e1      	add	r9, ip
 800069e:	464b      	mov	r3, r9
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x162>
 80006a4:	e0ad      	b.n	8000802 <__aeabi_fadd+0x2be>
 80006a6:	2fff      	cmp	r7, #255	; 0xff
 80006a8:	d000      	beq.n	80006ac <__aeabi_fadd+0x168>
 80006aa:	e76e      	b.n	800058a <__aeabi_fadd+0x46>
 80006ac:	e7c5      	b.n	800063a <__aeabi_fadd+0xf6>
 80006ae:	20fe      	movs	r0, #254	; 0xfe
 80006b0:	1c7e      	adds	r6, r7, #1
 80006b2:	4230      	tst	r0, r6
 80006b4:	d160      	bne.n	8000778 <__aeabi_fadd+0x234>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d000      	beq.n	80006bc <__aeabi_fadd+0x178>
 80006ba:	e093      	b.n	80007e4 <__aeabi_fadd+0x2a0>
 80006bc:	4652      	mov	r2, sl
 80006be:	2a00      	cmp	r2, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0x180>
 80006c2:	e0b6      	b.n	8000832 <__aeabi_fadd+0x2ee>
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d09c      	beq.n	8000602 <__aeabi_fadd+0xbe>
 80006c8:	1b52      	subs	r2, r2, r5
 80006ca:	0150      	lsls	r0, r2, #5
 80006cc:	d400      	bmi.n	80006d0 <__aeabi_fadd+0x18c>
 80006ce:	e0c3      	b.n	8000858 <__aeabi_fadd+0x314>
 80006d0:	4653      	mov	r3, sl
 80006d2:	000c      	movs	r4, r1
 80006d4:	1aea      	subs	r2, r5, r3
 80006d6:	e782      	b.n	80005de <__aeabi_fadd+0x9a>
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d009      	beq.n	80006f0 <__aeabi_fadd+0x1ac>
 80006dc:	3901      	subs	r1, #1
 80006de:	2900      	cmp	r1, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0x1a0>
 80006e2:	e08b      	b.n	80007fc <__aeabi_fadd+0x2b8>
 80006e4:	2fff      	cmp	r7, #255	; 0xff
 80006e6:	d1bc      	bne.n	8000662 <__aeabi_fadd+0x11e>
 80006e8:	e7a7      	b.n	800063a <__aeabi_fadd+0xf6>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4642      	mov	r2, r8
 80006ee:	0037      	movs	r7, r6
 80006f0:	2fff      	cmp	r7, #255	; 0xff
 80006f2:	d0a2      	beq.n	800063a <__aeabi_fadd+0xf6>
 80006f4:	0252      	lsls	r2, r2, #9
 80006f6:	0a53      	lsrs	r3, r2, #9
 80006f8:	469c      	mov	ip, r3
 80006fa:	b2fb      	uxtb	r3, r7
 80006fc:	e781      	b.n	8000602 <__aeabi_fadd+0xbe>
 80006fe:	21fe      	movs	r1, #254	; 0xfe
 8000700:	3701      	adds	r7, #1
 8000702:	4239      	tst	r1, r7
 8000704:	d165      	bne.n	80007d2 <__aeabi_fadd+0x28e>
 8000706:	2b00      	cmp	r3, #0
 8000708:	d17e      	bne.n	8000808 <__aeabi_fadd+0x2c4>
 800070a:	2800      	cmp	r0, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x1cc>
 800070e:	e0aa      	b.n	8000866 <__aeabi_fadd+0x322>
 8000710:	2d00      	cmp	r5, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_fadd+0x1d2>
 8000714:	e775      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000716:	002a      	movs	r2, r5
 8000718:	4452      	add	r2, sl
 800071a:	2700      	movs	r7, #0
 800071c:	0153      	lsls	r3, r2, #5
 800071e:	d502      	bpl.n	8000726 <__aeabi_fadd+0x1e2>
 8000720:	4b55      	ldr	r3, [pc, #340]	; (8000878 <__aeabi_fadd+0x334>)
 8000722:	3701      	adds	r7, #1
 8000724:	401a      	ands	r2, r3
 8000726:	0753      	lsls	r3, r2, #29
 8000728:	d000      	beq.n	800072c <__aeabi_fadd+0x1e8>
 800072a:	e75a      	b.n	80005e2 <__aeabi_fadd+0x9e>
 800072c:	08d2      	lsrs	r2, r2, #3
 800072e:	e7df      	b.n	80006f0 <__aeabi_fadd+0x1ac>
 8000730:	2200      	movs	r2, #0
 8000732:	23ff      	movs	r3, #255	; 0xff
 8000734:	4694      	mov	ip, r2
 8000736:	e764      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000738:	2900      	cmp	r1, #0
 800073a:	d0e0      	beq.n	80006fe <__aeabi_fadd+0x1ba>
 800073c:	1bf3      	subs	r3, r6, r7
 800073e:	2f00      	cmp	r7, #0
 8000740:	d03e      	beq.n	80007c0 <__aeabi_fadd+0x27c>
 8000742:	2eff      	cmp	r6, #255	; 0xff
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x204>
 8000746:	e777      	b.n	8000638 <__aeabi_fadd+0xf4>
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0001      	movs	r1, r0
 800074c:	04d2      	lsls	r2, r2, #19
 800074e:	4311      	orrs	r1, r2
 8000750:	468a      	mov	sl, r1
 8000752:	2201      	movs	r2, #1
 8000754:	2b1b      	cmp	r3, #27
 8000756:	dc08      	bgt.n	800076a <__aeabi_fadd+0x226>
 8000758:	4652      	mov	r2, sl
 800075a:	2120      	movs	r1, #32
 800075c:	4650      	mov	r0, sl
 800075e:	40da      	lsrs	r2, r3
 8000760:	1acb      	subs	r3, r1, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	1e43      	subs	r3, r0, #1
 8000766:	4198      	sbcs	r0, r3
 8000768:	4302      	orrs	r2, r0
 800076a:	0037      	movs	r7, r6
 800076c:	1952      	adds	r2, r2, r5
 800076e:	e784      	b.n	800067a <__aeabi_fadd+0x136>
 8000770:	4a41      	ldr	r2, [pc, #260]	; (8000878 <__aeabi_fadd+0x334>)
 8000772:	1a3f      	subs	r7, r7, r0
 8000774:	4032      	ands	r2, r6
 8000776:	e732      	b.n	80005de <__aeabi_fadd+0x9a>
 8000778:	4653      	mov	r3, sl
 800077a:	1b5e      	subs	r6, r3, r5
 800077c:	0173      	lsls	r3, r6, #5
 800077e:	d42d      	bmi.n	80007dc <__aeabi_fadd+0x298>
 8000780:	2e00      	cmp	r6, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0x242>
 8000784:	e717      	b.n	80005b6 <__aeabi_fadd+0x72>
 8000786:	2200      	movs	r2, #0
 8000788:	2400      	movs	r4, #0
 800078a:	2300      	movs	r3, #0
 800078c:	4694      	mov	ip, r2
 800078e:	e738      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000790:	2eff      	cmp	r6, #255	; 0xff
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x252>
 8000794:	e74f      	b.n	8000636 <__aeabi_fadd+0xf2>
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	4650      	mov	r0, sl
 800079a:	04d2      	lsls	r2, r2, #19
 800079c:	4310      	orrs	r0, r2
 800079e:	4682      	mov	sl, r0
 80007a0:	2201      	movs	r2, #1
 80007a2:	2b1b      	cmp	r3, #27
 80007a4:	dc08      	bgt.n	80007b8 <__aeabi_fadd+0x274>
 80007a6:	4652      	mov	r2, sl
 80007a8:	2420      	movs	r4, #32
 80007aa:	4650      	mov	r0, sl
 80007ac:	40da      	lsrs	r2, r3
 80007ae:	1ae3      	subs	r3, r4, r3
 80007b0:	4098      	lsls	r0, r3
 80007b2:	1e43      	subs	r3, r0, #1
 80007b4:	4198      	sbcs	r0, r3
 80007b6:	4302      	orrs	r2, r0
 80007b8:	000c      	movs	r4, r1
 80007ba:	0037      	movs	r7, r6
 80007bc:	1aaa      	subs	r2, r5, r2
 80007be:	e6f5      	b.n	80005ac <__aeabi_fadd+0x68>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d093      	beq.n	80006ec <__aeabi_fadd+0x1a8>
 80007c4:	3b01      	subs	r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d04f      	beq.n	800086a <__aeabi_fadd+0x326>
 80007ca:	2eff      	cmp	r6, #255	; 0xff
 80007cc:	d1c1      	bne.n	8000752 <__aeabi_fadd+0x20e>
 80007ce:	4642      	mov	r2, r8
 80007d0:	e733      	b.n	800063a <__aeabi_fadd+0xf6>
 80007d2:	2fff      	cmp	r7, #255	; 0xff
 80007d4:	d0ac      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 80007d6:	4455      	add	r5, sl
 80007d8:	086a      	lsrs	r2, r5, #1
 80007da:	e7a4      	b.n	8000726 <__aeabi_fadd+0x1e2>
 80007dc:	4653      	mov	r3, sl
 80007de:	000c      	movs	r4, r1
 80007e0:	1aee      	subs	r6, r5, r3
 80007e2:	e6e8      	b.n	80005b6 <__aeabi_fadd+0x72>
 80007e4:	4653      	mov	r3, sl
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d128      	bne.n	800083c <__aeabi_fadd+0x2f8>
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fadd+0x2ac>
 80007ee:	e722      	b.n	8000636 <__aeabi_fadd+0xf2>
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	03db      	lsls	r3, r3, #15
 80007f4:	469c      	mov	ip, r3
 80007f6:	2400      	movs	r4, #0
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	e702      	b.n	8000602 <__aeabi_fadd+0xbe>
 80007fc:	002a      	movs	r2, r5
 80007fe:	4452      	add	r2, sl
 8000800:	e73b      	b.n	800067a <__aeabi_fadd+0x136>
 8000802:	4653      	mov	r3, sl
 8000804:	1b5a      	subs	r2, r3, r5
 8000806:	e6d1      	b.n	80005ac <__aeabi_fadd+0x68>
 8000808:	2800      	cmp	r0, #0
 800080a:	d100      	bne.n	800080e <__aeabi_fadd+0x2ca>
 800080c:	e714      	b.n	8000638 <__aeabi_fadd+0xf4>
 800080e:	2d00      	cmp	r5, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x2d0>
 8000812:	e712      	b.n	800063a <__aeabi_fadd+0xf6>
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	03db      	lsls	r3, r3, #15
 8000818:	421a      	tst	r2, r3
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x2da>
 800081c:	e70d      	b.n	800063a <__aeabi_fadd+0xf6>
 800081e:	4641      	mov	r1, r8
 8000820:	4219      	tst	r1, r3
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x2e2>
 8000824:	e709      	b.n	800063a <__aeabi_fadd+0xf6>
 8000826:	4642      	mov	r2, r8
 8000828:	e707      	b.n	800063a <__aeabi_fadd+0xf6>
 800082a:	000c      	movs	r4, r1
 800082c:	0037      	movs	r7, r6
 800082e:	1aaa      	subs	r2, r5, r2
 8000830:	e6bc      	b.n	80005ac <__aeabi_fadd+0x68>
 8000832:	2d00      	cmp	r5, #0
 8000834:	d013      	beq.n	800085e <__aeabi_fadd+0x31a>
 8000836:	000c      	movs	r4, r1
 8000838:	46c4      	mov	ip, r8
 800083a:	e6e2      	b.n	8000602 <__aeabi_fadd+0xbe>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x2fe>
 8000840:	e6fb      	b.n	800063a <__aeabi_fadd+0xf6>
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	03db      	lsls	r3, r3, #15
 8000846:	421a      	tst	r2, r3
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0x308>
 800084a:	e6f6      	b.n	800063a <__aeabi_fadd+0xf6>
 800084c:	4640      	mov	r0, r8
 800084e:	4218      	tst	r0, r3
 8000850:	d000      	beq.n	8000854 <__aeabi_fadd+0x310>
 8000852:	e6f2      	b.n	800063a <__aeabi_fadd+0xf6>
 8000854:	000c      	movs	r4, r1
 8000856:	e6ef      	b.n	8000638 <__aeabi_fadd+0xf4>
 8000858:	2a00      	cmp	r2, #0
 800085a:	d000      	beq.n	800085e <__aeabi_fadd+0x31a>
 800085c:	e763      	b.n	8000726 <__aeabi_fadd+0x1e2>
 800085e:	2200      	movs	r2, #0
 8000860:	2400      	movs	r4, #0
 8000862:	4694      	mov	ip, r2
 8000864:	e6cd      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000866:	46c4      	mov	ip, r8
 8000868:	e6cb      	b.n	8000602 <__aeabi_fadd+0xbe>
 800086a:	002a      	movs	r2, r5
 800086c:	0037      	movs	r7, r6
 800086e:	4452      	add	r2, sl
 8000870:	e703      	b.n	800067a <__aeabi_fadd+0x136>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	7dffffff 	.word	0x7dffffff
 8000878:	fbffffff 	.word	0xfbffffff

0800087c <__aeabi_fdiv>:
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	464f      	mov	r7, r9
 8000880:	4646      	mov	r6, r8
 8000882:	46d6      	mov	lr, sl
 8000884:	0245      	lsls	r5, r0, #9
 8000886:	b5c0      	push	{r6, r7, lr}
 8000888:	0047      	lsls	r7, r0, #1
 800088a:	1c0c      	adds	r4, r1, #0
 800088c:	0a6d      	lsrs	r5, r5, #9
 800088e:	0e3f      	lsrs	r7, r7, #24
 8000890:	0fc6      	lsrs	r6, r0, #31
 8000892:	2f00      	cmp	r7, #0
 8000894:	d066      	beq.n	8000964 <__aeabi_fdiv+0xe8>
 8000896:	2fff      	cmp	r7, #255	; 0xff
 8000898:	d06c      	beq.n	8000974 <__aeabi_fdiv+0xf8>
 800089a:	2300      	movs	r3, #0
 800089c:	00ea      	lsls	r2, r5, #3
 800089e:	2580      	movs	r5, #128	; 0x80
 80008a0:	4699      	mov	r9, r3
 80008a2:	469a      	mov	sl, r3
 80008a4:	04ed      	lsls	r5, r5, #19
 80008a6:	4315      	orrs	r5, r2
 80008a8:	3f7f      	subs	r7, #127	; 0x7f
 80008aa:	0260      	lsls	r0, r4, #9
 80008ac:	0061      	lsls	r1, r4, #1
 80008ae:	0a43      	lsrs	r3, r0, #9
 80008b0:	4698      	mov	r8, r3
 80008b2:	0e09      	lsrs	r1, r1, #24
 80008b4:	0fe4      	lsrs	r4, r4, #31
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d048      	beq.n	800094c <__aeabi_fdiv+0xd0>
 80008ba:	29ff      	cmp	r1, #255	; 0xff
 80008bc:	d010      	beq.n	80008e0 <__aeabi_fdiv+0x64>
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	00d8      	lsls	r0, r3, #3
 80008c2:	04d2      	lsls	r2, r2, #19
 80008c4:	4302      	orrs	r2, r0
 80008c6:	4690      	mov	r8, r2
 80008c8:	2000      	movs	r0, #0
 80008ca:	397f      	subs	r1, #127	; 0x7f
 80008cc:	464a      	mov	r2, r9
 80008ce:	0033      	movs	r3, r6
 80008d0:	1a7f      	subs	r7, r7, r1
 80008d2:	4302      	orrs	r2, r0
 80008d4:	496c      	ldr	r1, [pc, #432]	; (8000a88 <__aeabi_fdiv+0x20c>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	588a      	ldr	r2, [r1, r2]
 80008da:	4063      	eors	r3, r4
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4697      	mov	pc, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d16d      	bne.n	80009c0 <__aeabi_fdiv+0x144>
 80008e4:	2002      	movs	r0, #2
 80008e6:	3fff      	subs	r7, #255	; 0xff
 80008e8:	e033      	b.n	8000952 <__aeabi_fdiv+0xd6>
 80008ea:	2300      	movs	r3, #0
 80008ec:	4698      	mov	r8, r3
 80008ee:	0026      	movs	r6, r4
 80008f0:	4645      	mov	r5, r8
 80008f2:	4682      	mov	sl, r0
 80008f4:	4653      	mov	r3, sl
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fdiv+0x80>
 80008fa:	e07f      	b.n	80009fc <__aeabi_fdiv+0x180>
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d100      	bne.n	8000902 <__aeabi_fdiv+0x86>
 8000900:	e094      	b.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d017      	beq.n	8000936 <__aeabi_fdiv+0xba>
 8000906:	0038      	movs	r0, r7
 8000908:	307f      	adds	r0, #127	; 0x7f
 800090a:	2800      	cmp	r0, #0
 800090c:	dd5f      	ble.n	80009ce <__aeabi_fdiv+0x152>
 800090e:	076b      	lsls	r3, r5, #29
 8000910:	d004      	beq.n	800091c <__aeabi_fdiv+0xa0>
 8000912:	230f      	movs	r3, #15
 8000914:	402b      	ands	r3, r5
 8000916:	2b04      	cmp	r3, #4
 8000918:	d000      	beq.n	800091c <__aeabi_fdiv+0xa0>
 800091a:	3504      	adds	r5, #4
 800091c:	012b      	lsls	r3, r5, #4
 800091e:	d503      	bpl.n	8000928 <__aeabi_fdiv+0xac>
 8000920:	0038      	movs	r0, r7
 8000922:	4b5a      	ldr	r3, [pc, #360]	; (8000a8c <__aeabi_fdiv+0x210>)
 8000924:	3080      	adds	r0, #128	; 0x80
 8000926:	401d      	ands	r5, r3
 8000928:	28fe      	cmp	r0, #254	; 0xfe
 800092a:	dc67      	bgt.n	80009fc <__aeabi_fdiv+0x180>
 800092c:	01ad      	lsls	r5, r5, #6
 800092e:	0a6d      	lsrs	r5, r5, #9
 8000930:	b2c0      	uxtb	r0, r0
 8000932:	e002      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000934:	001e      	movs	r6, r3
 8000936:	2000      	movs	r0, #0
 8000938:	2500      	movs	r5, #0
 800093a:	05c0      	lsls	r0, r0, #23
 800093c:	4328      	orrs	r0, r5
 800093e:	07f6      	lsls	r6, r6, #31
 8000940:	4330      	orrs	r0, r6
 8000942:	bce0      	pop	{r5, r6, r7}
 8000944:	46ba      	mov	sl, r7
 8000946:	46b1      	mov	r9, r6
 8000948:	46a8      	mov	r8, r5
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	2b00      	cmp	r3, #0
 800094e:	d12b      	bne.n	80009a8 <__aeabi_fdiv+0x12c>
 8000950:	2001      	movs	r0, #1
 8000952:	464a      	mov	r2, r9
 8000954:	0033      	movs	r3, r6
 8000956:	494e      	ldr	r1, [pc, #312]	; (8000a90 <__aeabi_fdiv+0x214>)
 8000958:	4302      	orrs	r2, r0
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	588a      	ldr	r2, [r1, r2]
 800095e:	4063      	eors	r3, r4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4697      	mov	pc, r2
 8000964:	2d00      	cmp	r5, #0
 8000966:	d113      	bne.n	8000990 <__aeabi_fdiv+0x114>
 8000968:	2304      	movs	r3, #4
 800096a:	4699      	mov	r9, r3
 800096c:	3b03      	subs	r3, #3
 800096e:	2700      	movs	r7, #0
 8000970:	469a      	mov	sl, r3
 8000972:	e79a      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000974:	2d00      	cmp	r5, #0
 8000976:	d105      	bne.n	8000984 <__aeabi_fdiv+0x108>
 8000978:	2308      	movs	r3, #8
 800097a:	4699      	mov	r9, r3
 800097c:	3b06      	subs	r3, #6
 800097e:	27ff      	movs	r7, #255	; 0xff
 8000980:	469a      	mov	sl, r3
 8000982:	e792      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000984:	230c      	movs	r3, #12
 8000986:	4699      	mov	r9, r3
 8000988:	3b09      	subs	r3, #9
 800098a:	27ff      	movs	r7, #255	; 0xff
 800098c:	469a      	mov	sl, r3
 800098e:	e78c      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000990:	0028      	movs	r0, r5
 8000992:	f002 fb6d 	bl	8003070 <__clzsi2>
 8000996:	2776      	movs	r7, #118	; 0x76
 8000998:	1f43      	subs	r3, r0, #5
 800099a:	409d      	lsls	r5, r3
 800099c:	2300      	movs	r3, #0
 800099e:	427f      	negs	r7, r7
 80009a0:	4699      	mov	r9, r3
 80009a2:	469a      	mov	sl, r3
 80009a4:	1a3f      	subs	r7, r7, r0
 80009a6:	e780      	b.n	80008aa <__aeabi_fdiv+0x2e>
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 fb61 	bl	8003070 <__clzsi2>
 80009ae:	4642      	mov	r2, r8
 80009b0:	1f43      	subs	r3, r0, #5
 80009b2:	2176      	movs	r1, #118	; 0x76
 80009b4:	409a      	lsls	r2, r3
 80009b6:	4249      	negs	r1, r1
 80009b8:	1a09      	subs	r1, r1, r0
 80009ba:	4690      	mov	r8, r2
 80009bc:	2000      	movs	r0, #0
 80009be:	e785      	b.n	80008cc <__aeabi_fdiv+0x50>
 80009c0:	21ff      	movs	r1, #255	; 0xff
 80009c2:	2003      	movs	r0, #3
 80009c4:	e782      	b.n	80008cc <__aeabi_fdiv+0x50>
 80009c6:	001e      	movs	r6, r3
 80009c8:	20ff      	movs	r0, #255	; 0xff
 80009ca:	2500      	movs	r5, #0
 80009cc:	e7b5      	b.n	800093a <__aeabi_fdiv+0xbe>
 80009ce:	2301      	movs	r3, #1
 80009d0:	1a1b      	subs	r3, r3, r0
 80009d2:	2b1b      	cmp	r3, #27
 80009d4:	dcaf      	bgt.n	8000936 <__aeabi_fdiv+0xba>
 80009d6:	379e      	adds	r7, #158	; 0x9e
 80009d8:	0029      	movs	r1, r5
 80009da:	40bd      	lsls	r5, r7
 80009dc:	40d9      	lsrs	r1, r3
 80009de:	1e6a      	subs	r2, r5, #1
 80009e0:	4195      	sbcs	r5, r2
 80009e2:	430d      	orrs	r5, r1
 80009e4:	076b      	lsls	r3, r5, #29
 80009e6:	d004      	beq.n	80009f2 <__aeabi_fdiv+0x176>
 80009e8:	230f      	movs	r3, #15
 80009ea:	402b      	ands	r3, r5
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	d000      	beq.n	80009f2 <__aeabi_fdiv+0x176>
 80009f0:	3504      	adds	r5, #4
 80009f2:	016b      	lsls	r3, r5, #5
 80009f4:	d544      	bpl.n	8000a80 <__aeabi_fdiv+0x204>
 80009f6:	2001      	movs	r0, #1
 80009f8:	2500      	movs	r5, #0
 80009fa:	e79e      	b.n	800093a <__aeabi_fdiv+0xbe>
 80009fc:	20ff      	movs	r0, #255	; 0xff
 80009fe:	2500      	movs	r5, #0
 8000a00:	e79b      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a02:	2580      	movs	r5, #128	; 0x80
 8000a04:	2600      	movs	r6, #0
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	03ed      	lsls	r5, r5, #15
 8000a0a:	e796      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	4698      	mov	r8, r3
 8000a10:	2080      	movs	r0, #128	; 0x80
 8000a12:	03c0      	lsls	r0, r0, #15
 8000a14:	4205      	tst	r5, r0
 8000a16:	d009      	beq.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	4203      	tst	r3, r0
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	4305      	orrs	r5, r0
 8000a22:	026d      	lsls	r5, r5, #9
 8000a24:	0026      	movs	r6, r4
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	e786      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a2c:	2080      	movs	r0, #128	; 0x80
 8000a2e:	03c0      	lsls	r0, r0, #15
 8000a30:	4305      	orrs	r5, r0
 8000a32:	026d      	lsls	r5, r5, #9
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	0a6d      	lsrs	r5, r5, #9
 8000a38:	e77f      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	016a      	lsls	r2, r5, #5
 8000a3e:	0148      	lsls	r0, r1, #5
 8000a40:	4282      	cmp	r2, r0
 8000a42:	d219      	bcs.n	8000a78 <__aeabi_fdiv+0x1fc>
 8000a44:	211b      	movs	r1, #27
 8000a46:	2500      	movs	r5, #0
 8000a48:	3f01      	subs	r7, #1
 8000a4a:	2601      	movs	r6, #1
 8000a4c:	0014      	movs	r4, r2
 8000a4e:	006d      	lsls	r5, r5, #1
 8000a50:	0052      	lsls	r2, r2, #1
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	db01      	blt.n	8000a5a <__aeabi_fdiv+0x1de>
 8000a56:	4290      	cmp	r0, r2
 8000a58:	d801      	bhi.n	8000a5e <__aeabi_fdiv+0x1e2>
 8000a5a:	1a12      	subs	r2, r2, r0
 8000a5c:	4335      	orrs	r5, r6
 8000a5e:	3901      	subs	r1, #1
 8000a60:	2900      	cmp	r1, #0
 8000a62:	d1f3      	bne.n	8000a4c <__aeabi_fdiv+0x1d0>
 8000a64:	1e50      	subs	r0, r2, #1
 8000a66:	4182      	sbcs	r2, r0
 8000a68:	0038      	movs	r0, r7
 8000a6a:	307f      	adds	r0, #127	; 0x7f
 8000a6c:	001e      	movs	r6, r3
 8000a6e:	4315      	orrs	r5, r2
 8000a70:	2800      	cmp	r0, #0
 8000a72:	dd00      	ble.n	8000a76 <__aeabi_fdiv+0x1fa>
 8000a74:	e74b      	b.n	800090e <__aeabi_fdiv+0x92>
 8000a76:	e7aa      	b.n	80009ce <__aeabi_fdiv+0x152>
 8000a78:	211a      	movs	r1, #26
 8000a7a:	2501      	movs	r5, #1
 8000a7c:	1a12      	subs	r2, r2, r0
 8000a7e:	e7e4      	b.n	8000a4a <__aeabi_fdiv+0x1ce>
 8000a80:	01ad      	lsls	r5, r5, #6
 8000a82:	2000      	movs	r0, #0
 8000a84:	0a6d      	lsrs	r5, r5, #9
 8000a86:	e758      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a88:	0801202c 	.word	0x0801202c
 8000a8c:	f7ffffff 	.word	0xf7ffffff
 8000a90:	0801206c 	.word	0x0801206c

08000a94 <__eqsf2>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	0042      	lsls	r2, r0, #1
 8000a98:	024e      	lsls	r6, r1, #9
 8000a9a:	004c      	lsls	r4, r1, #1
 8000a9c:	0245      	lsls	r5, r0, #9
 8000a9e:	0a6d      	lsrs	r5, r5, #9
 8000aa0:	0e12      	lsrs	r2, r2, #24
 8000aa2:	0fc3      	lsrs	r3, r0, #31
 8000aa4:	0a76      	lsrs	r6, r6, #9
 8000aa6:	0e24      	lsrs	r4, r4, #24
 8000aa8:	0fc9      	lsrs	r1, r1, #31
 8000aaa:	2aff      	cmp	r2, #255	; 0xff
 8000aac:	d00f      	beq.n	8000ace <__eqsf2+0x3a>
 8000aae:	2cff      	cmp	r4, #255	; 0xff
 8000ab0:	d011      	beq.n	8000ad6 <__eqsf2+0x42>
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	42a2      	cmp	r2, r4
 8000ab6:	d000      	beq.n	8000aba <__eqsf2+0x26>
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	42b5      	cmp	r5, r6
 8000abc:	d1fc      	bne.n	8000ab8 <__eqsf2+0x24>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d00d      	beq.n	8000ade <__eqsf2+0x4a>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d1f8      	bne.n	8000ab8 <__eqsf2+0x24>
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	1e45      	subs	r5, r0, #1
 8000aca:	41a8      	sbcs	r0, r5
 8000acc:	e7f4      	b.n	8000ab8 <__eqsf2+0x24>
 8000ace:	2001      	movs	r0, #1
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d1f1      	bne.n	8000ab8 <__eqsf2+0x24>
 8000ad4:	e7eb      	b.n	8000aae <__eqsf2+0x1a>
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d1ed      	bne.n	8000ab8 <__eqsf2+0x24>
 8000adc:	e7e9      	b.n	8000ab2 <__eqsf2+0x1e>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	e7ea      	b.n	8000ab8 <__eqsf2+0x24>
 8000ae2:	46c0      	nop			; (mov r8, r8)

08000ae4 <__gesf2>:
 8000ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae6:	0042      	lsls	r2, r0, #1
 8000ae8:	0246      	lsls	r6, r0, #9
 8000aea:	024d      	lsls	r5, r1, #9
 8000aec:	004c      	lsls	r4, r1, #1
 8000aee:	0fc3      	lsrs	r3, r0, #31
 8000af0:	0a76      	lsrs	r6, r6, #9
 8000af2:	0e12      	lsrs	r2, r2, #24
 8000af4:	0a6d      	lsrs	r5, r5, #9
 8000af6:	0e24      	lsrs	r4, r4, #24
 8000af8:	0fc8      	lsrs	r0, r1, #31
 8000afa:	2aff      	cmp	r2, #255	; 0xff
 8000afc:	d01f      	beq.n	8000b3e <__gesf2+0x5a>
 8000afe:	2cff      	cmp	r4, #255	; 0xff
 8000b00:	d010      	beq.n	8000b24 <__gesf2+0x40>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d11f      	bne.n	8000b46 <__gesf2+0x62>
 8000b06:	4271      	negs	r1, r6
 8000b08:	4171      	adcs	r1, r6
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d101      	bne.n	8000b12 <__gesf2+0x2e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d01e      	beq.n	8000b50 <__gesf2+0x6c>
 8000b12:	2900      	cmp	r1, #0
 8000b14:	d10e      	bne.n	8000b34 <__gesf2+0x50>
 8000b16:	4283      	cmp	r3, r0
 8000b18:	d01e      	beq.n	8000b58 <__gesf2+0x74>
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	1e58      	subs	r0, r3, #1
 8000b1e:	4008      	ands	r0, r1
 8000b20:	3801      	subs	r0, #1
 8000b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d126      	bne.n	8000b76 <__gesf2+0x92>
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d1f4      	bne.n	8000b16 <__gesf2+0x32>
 8000b2c:	4271      	negs	r1, r6
 8000b2e:	4171      	adcs	r1, r6
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d0f0      	beq.n	8000b16 <__gesf2+0x32>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d1f4      	bne.n	8000b22 <__gesf2+0x3e>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	e7f1      	b.n	8000b22 <__gesf2+0x3e>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	d119      	bne.n	8000b76 <__gesf2+0x92>
 8000b42:	2cff      	cmp	r4, #255	; 0xff
 8000b44:	d0ee      	beq.n	8000b24 <__gesf2+0x40>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d1e5      	bne.n	8000b16 <__gesf2+0x32>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d1e3      	bne.n	8000b16 <__gesf2+0x32>
 8000b4e:	e7e4      	b.n	8000b1a <__gesf2+0x36>
 8000b50:	2000      	movs	r0, #0
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d0e5      	beq.n	8000b22 <__gesf2+0x3e>
 8000b56:	e7e0      	b.n	8000b1a <__gesf2+0x36>
 8000b58:	42a2      	cmp	r2, r4
 8000b5a:	dc05      	bgt.n	8000b68 <__gesf2+0x84>
 8000b5c:	dbea      	blt.n	8000b34 <__gesf2+0x50>
 8000b5e:	42ae      	cmp	r6, r5
 8000b60:	d802      	bhi.n	8000b68 <__gesf2+0x84>
 8000b62:	d3e7      	bcc.n	8000b34 <__gesf2+0x50>
 8000b64:	2000      	movs	r0, #0
 8000b66:	e7dc      	b.n	8000b22 <__gesf2+0x3e>
 8000b68:	4241      	negs	r1, r0
 8000b6a:	4141      	adcs	r1, r0
 8000b6c:	4248      	negs	r0, r1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4008      	ands	r0, r1
 8000b72:	3801      	subs	r0, #1
 8000b74:	e7d5      	b.n	8000b22 <__gesf2+0x3e>
 8000b76:	2002      	movs	r0, #2
 8000b78:	4240      	negs	r0, r0
 8000b7a:	e7d2      	b.n	8000b22 <__gesf2+0x3e>

08000b7c <__lesf2>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0246      	lsls	r6, r0, #9
 8000b82:	024d      	lsls	r5, r1, #9
 8000b84:	004c      	lsls	r4, r1, #1
 8000b86:	0fc3      	lsrs	r3, r0, #31
 8000b88:	0a76      	lsrs	r6, r6, #9
 8000b8a:	0e12      	lsrs	r2, r2, #24
 8000b8c:	0a6d      	lsrs	r5, r5, #9
 8000b8e:	0e24      	lsrs	r4, r4, #24
 8000b90:	0fc8      	lsrs	r0, r1, #31
 8000b92:	2aff      	cmp	r2, #255	; 0xff
 8000b94:	d00d      	beq.n	8000bb2 <__lesf2+0x36>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <__lesf2+0x3e>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d123      	bne.n	8000be6 <__lesf2+0x6a>
 8000b9e:	4271      	negs	r1, r6
 8000ba0:	4171      	adcs	r1, r6
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d10f      	bne.n	8000bc6 <__lesf2+0x4a>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d10d      	bne.n	8000bc6 <__lesf2+0x4a>
 8000baa:	2000      	movs	r0, #0
 8000bac:	2e00      	cmp	r6, #0
 8000bae:	d014      	beq.n	8000bda <__lesf2+0x5e>
 8000bb0:	e00d      	b.n	8000bce <__lesf2+0x52>
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d110      	bne.n	8000bd8 <__lesf2+0x5c>
 8000bb6:	2cff      	cmp	r4, #255	; 0xff
 8000bb8:	d115      	bne.n	8000be6 <__lesf2+0x6a>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d10c      	bne.n	8000bd8 <__lesf2+0x5c>
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d103      	bne.n	8000bca <__lesf2+0x4e>
 8000bc2:	4271      	negs	r1, r6
 8000bc4:	4171      	adcs	r1, r6
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	d108      	bne.n	8000bdc <__lesf2+0x60>
 8000bca:	4283      	cmp	r3, r0
 8000bcc:	d010      	beq.n	8000bf0 <__lesf2+0x74>
 8000bce:	2102      	movs	r1, #2
 8000bd0:	1e58      	subs	r0, r3, #1
 8000bd2:	4008      	ands	r0, r1
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	e000      	b.n	8000bda <__lesf2+0x5e>
 8000bd8:	2002      	movs	r0, #2
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d1fc      	bne.n	8000bda <__lesf2+0x5e>
 8000be0:	2001      	movs	r0, #1
 8000be2:	4240      	negs	r0, r0
 8000be4:	e7f9      	b.n	8000bda <__lesf2+0x5e>
 8000be6:	2c00      	cmp	r4, #0
 8000be8:	d1ef      	bne.n	8000bca <__lesf2+0x4e>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d1ed      	bne.n	8000bca <__lesf2+0x4e>
 8000bee:	e7ee      	b.n	8000bce <__lesf2+0x52>
 8000bf0:	42a2      	cmp	r2, r4
 8000bf2:	dc05      	bgt.n	8000c00 <__lesf2+0x84>
 8000bf4:	dbf2      	blt.n	8000bdc <__lesf2+0x60>
 8000bf6:	42ae      	cmp	r6, r5
 8000bf8:	d802      	bhi.n	8000c00 <__lesf2+0x84>
 8000bfa:	d3ef      	bcc.n	8000bdc <__lesf2+0x60>
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	e7ec      	b.n	8000bda <__lesf2+0x5e>
 8000c00:	4241      	negs	r1, r0
 8000c02:	4141      	adcs	r1, r0
 8000c04:	4248      	negs	r0, r1
 8000c06:	2102      	movs	r1, #2
 8000c08:	4008      	ands	r0, r1
 8000c0a:	3801      	subs	r0, #1
 8000c0c:	e7e5      	b.n	8000bda <__lesf2+0x5e>
 8000c0e:	46c0      	nop			; (mov r8, r8)

08000c10 <__aeabi_fmul>:
 8000c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c12:	4657      	mov	r7, sl
 8000c14:	464e      	mov	r6, r9
 8000c16:	4645      	mov	r5, r8
 8000c18:	46de      	mov	lr, fp
 8000c1a:	0244      	lsls	r4, r0, #9
 8000c1c:	b5e0      	push	{r5, r6, r7, lr}
 8000c1e:	0045      	lsls	r5, r0, #1
 8000c20:	1c0f      	adds	r7, r1, #0
 8000c22:	0a64      	lsrs	r4, r4, #9
 8000c24:	0e2d      	lsrs	r5, r5, #24
 8000c26:	0fc6      	lsrs	r6, r0, #31
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d047      	beq.n	8000cbc <__aeabi_fmul+0xac>
 8000c2c:	2dff      	cmp	r5, #255	; 0xff
 8000c2e:	d04d      	beq.n	8000ccc <__aeabi_fmul+0xbc>
 8000c30:	2300      	movs	r3, #0
 8000c32:	2080      	movs	r0, #128	; 0x80
 8000c34:	469a      	mov	sl, r3
 8000c36:	469b      	mov	fp, r3
 8000c38:	00e4      	lsls	r4, r4, #3
 8000c3a:	04c0      	lsls	r0, r0, #19
 8000c3c:	4304      	orrs	r4, r0
 8000c3e:	3d7f      	subs	r5, #127	; 0x7f
 8000c40:	0278      	lsls	r0, r7, #9
 8000c42:	0a43      	lsrs	r3, r0, #9
 8000c44:	4699      	mov	r9, r3
 8000c46:	007a      	lsls	r2, r7, #1
 8000c48:	0ffb      	lsrs	r3, r7, #31
 8000c4a:	4698      	mov	r8, r3
 8000c4c:	0e12      	lsrs	r2, r2, #24
 8000c4e:	464b      	mov	r3, r9
 8000c50:	d044      	beq.n	8000cdc <__aeabi_fmul+0xcc>
 8000c52:	2aff      	cmp	r2, #255	; 0xff
 8000c54:	d011      	beq.n	8000c7a <__aeabi_fmul+0x6a>
 8000c56:	00d8      	lsls	r0, r3, #3
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	04db      	lsls	r3, r3, #19
 8000c5c:	4303      	orrs	r3, r0
 8000c5e:	4699      	mov	r9, r3
 8000c60:	2000      	movs	r0, #0
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	18ad      	adds	r5, r5, r2
 8000c66:	4647      	mov	r7, r8
 8000c68:	4653      	mov	r3, sl
 8000c6a:	4077      	eors	r7, r6
 8000c6c:	1c69      	adds	r1, r5, #1
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	d83f      	bhi.n	8000cf2 <__aeabi_fmul+0xe2>
 8000c72:	4a72      	ldr	r2, [pc, #456]	; (8000e3c <__aeabi_fmul+0x22c>)
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	58d3      	ldr	r3, [r2, r3]
 8000c78:	469f      	mov	pc, r3
 8000c7a:	35ff      	adds	r5, #255	; 0xff
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_fmul+0x72>
 8000c80:	e079      	b.n	8000d76 <__aeabi_fmul+0x166>
 8000c82:	4652      	mov	r2, sl
 8000c84:	2302      	movs	r3, #2
 8000c86:	431a      	orrs	r2, r3
 8000c88:	4692      	mov	sl, r2
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	e7eb      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000c8e:	4647      	mov	r7, r8
 8000c90:	464c      	mov	r4, r9
 8000c92:	4683      	mov	fp, r0
 8000c94:	465b      	mov	r3, fp
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d028      	beq.n	8000cec <__aeabi_fmul+0xdc>
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fmul+0x90>
 8000c9e:	e0c6      	b.n	8000e2e <__aeabi_fmul+0x21e>
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d14f      	bne.n	8000d44 <__aeabi_fmul+0x134>
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	05c0      	lsls	r0, r0, #23
 8000caa:	07ff      	lsls	r7, r7, #31
 8000cac:	4320      	orrs	r0, r4
 8000cae:	4338      	orrs	r0, r7
 8000cb0:	bcf0      	pop	{r4, r5, r6, r7}
 8000cb2:	46bb      	mov	fp, r7
 8000cb4:	46b2      	mov	sl, r6
 8000cb6:	46a9      	mov	r9, r5
 8000cb8:	46a0      	mov	r8, r4
 8000cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d171      	bne.n	8000da4 <__aeabi_fmul+0x194>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	469a      	mov	sl, r3
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	2500      	movs	r5, #0
 8000cc8:	469b      	mov	fp, r3
 8000cca:	e7b9      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d163      	bne.n	8000d98 <__aeabi_fmul+0x188>
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	3b06      	subs	r3, #6
 8000cd6:	25ff      	movs	r5, #255	; 0xff
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e7b1      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d150      	bne.n	8000d82 <__aeabi_fmul+0x172>
 8000ce0:	4652      	mov	r2, sl
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	4692      	mov	sl, r2
 8000ce8:	2001      	movs	r0, #1
 8000cea:	e7bc      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000cec:	20ff      	movs	r0, #255	; 0xff
 8000cee:	2400      	movs	r4, #0
 8000cf0:	e7da      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000cf2:	4648      	mov	r0, r9
 8000cf4:	0c26      	lsrs	r6, r4, #16
 8000cf6:	0424      	lsls	r4, r4, #16
 8000cf8:	0c22      	lsrs	r2, r4, #16
 8000cfa:	0404      	lsls	r4, r0, #16
 8000cfc:	0c24      	lsrs	r4, r4, #16
 8000cfe:	464b      	mov	r3, r9
 8000d00:	0020      	movs	r0, r4
 8000d02:	0c1b      	lsrs	r3, r3, #16
 8000d04:	4350      	muls	r0, r2
 8000d06:	4374      	muls	r4, r6
 8000d08:	435a      	muls	r2, r3
 8000d0a:	435e      	muls	r6, r3
 8000d0c:	1912      	adds	r2, r2, r4
 8000d0e:	0c03      	lsrs	r3, r0, #16
 8000d10:	189b      	adds	r3, r3, r2
 8000d12:	429c      	cmp	r4, r3
 8000d14:	d903      	bls.n	8000d1e <__aeabi_fmul+0x10e>
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	0252      	lsls	r2, r2, #9
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	4466      	add	r6, ip
 8000d1e:	0400      	lsls	r0, r0, #16
 8000d20:	041a      	lsls	r2, r3, #16
 8000d22:	0c00      	lsrs	r0, r0, #16
 8000d24:	1812      	adds	r2, r2, r0
 8000d26:	0194      	lsls	r4, r2, #6
 8000d28:	1e60      	subs	r0, r4, #1
 8000d2a:	4184      	sbcs	r4, r0
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	0e92      	lsrs	r2, r2, #26
 8000d30:	199b      	adds	r3, r3, r6
 8000d32:	4314      	orrs	r4, r2
 8000d34:	019b      	lsls	r3, r3, #6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	d572      	bpl.n	8000e22 <__aeabi_fmul+0x212>
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	0863      	lsrs	r3, r4, #1
 8000d40:	4004      	ands	r4, r0
 8000d42:	431c      	orrs	r4, r3
 8000d44:	0008      	movs	r0, r1
 8000d46:	307f      	adds	r0, #127	; 0x7f
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	dd3c      	ble.n	8000dc6 <__aeabi_fmul+0x1b6>
 8000d4c:	0763      	lsls	r3, r4, #29
 8000d4e:	d004      	beq.n	8000d5a <__aeabi_fmul+0x14a>
 8000d50:	230f      	movs	r3, #15
 8000d52:	4023      	ands	r3, r4
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d000      	beq.n	8000d5a <__aeabi_fmul+0x14a>
 8000d58:	3404      	adds	r4, #4
 8000d5a:	0123      	lsls	r3, r4, #4
 8000d5c:	d503      	bpl.n	8000d66 <__aeabi_fmul+0x156>
 8000d5e:	3180      	adds	r1, #128	; 0x80
 8000d60:	0008      	movs	r0, r1
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <__aeabi_fmul+0x230>)
 8000d64:	401c      	ands	r4, r3
 8000d66:	28fe      	cmp	r0, #254	; 0xfe
 8000d68:	dcc0      	bgt.n	8000cec <__aeabi_fmul+0xdc>
 8000d6a:	01a4      	lsls	r4, r4, #6
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	b2c0      	uxtb	r0, r0
 8000d70:	e79a      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000d72:	0037      	movs	r7, r6
 8000d74:	e78e      	b.n	8000c94 <__aeabi_fmul+0x84>
 8000d76:	4652      	mov	r2, sl
 8000d78:	2303      	movs	r3, #3
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	4692      	mov	sl, r2
 8000d7e:	2003      	movs	r0, #3
 8000d80:	e771      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000d82:	4648      	mov	r0, r9
 8000d84:	f002 f974 	bl	8003070 <__clzsi2>
 8000d88:	464a      	mov	r2, r9
 8000d8a:	1f43      	subs	r3, r0, #5
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	1a2d      	subs	r5, r5, r0
 8000d90:	4691      	mov	r9, r2
 8000d92:	2000      	movs	r0, #0
 8000d94:	3d76      	subs	r5, #118	; 0x76
 8000d96:	e766      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000d98:	230c      	movs	r3, #12
 8000d9a:	469a      	mov	sl, r3
 8000d9c:	3b09      	subs	r3, #9
 8000d9e:	25ff      	movs	r5, #255	; 0xff
 8000da0:	469b      	mov	fp, r3
 8000da2:	e74d      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000da4:	0020      	movs	r0, r4
 8000da6:	f002 f963 	bl	8003070 <__clzsi2>
 8000daa:	2576      	movs	r5, #118	; 0x76
 8000dac:	1f43      	subs	r3, r0, #5
 8000dae:	409c      	lsls	r4, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	426d      	negs	r5, r5
 8000db4:	469a      	mov	sl, r3
 8000db6:	469b      	mov	fp, r3
 8000db8:	1a2d      	subs	r5, r5, r0
 8000dba:	e741      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000dbc:	2480      	movs	r4, #128	; 0x80
 8000dbe:	2700      	movs	r7, #0
 8000dc0:	20ff      	movs	r0, #255	; 0xff
 8000dc2:	03e4      	lsls	r4, r4, #15
 8000dc4:	e770      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	1a1b      	subs	r3, r3, r0
 8000dca:	2b1b      	cmp	r3, #27
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_fmul+0x1c0>
 8000dce:	e769      	b.n	8000ca4 <__aeabi_fmul+0x94>
 8000dd0:	319e      	adds	r1, #158	; 0x9e
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	408c      	lsls	r4, r1
 8000dd6:	40d8      	lsrs	r0, r3
 8000dd8:	1e63      	subs	r3, r4, #1
 8000dda:	419c      	sbcs	r4, r3
 8000ddc:	4304      	orrs	r4, r0
 8000dde:	0763      	lsls	r3, r4, #29
 8000de0:	d004      	beq.n	8000dec <__aeabi_fmul+0x1dc>
 8000de2:	230f      	movs	r3, #15
 8000de4:	4023      	ands	r3, r4
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d000      	beq.n	8000dec <__aeabi_fmul+0x1dc>
 8000dea:	3404      	adds	r4, #4
 8000dec:	0163      	lsls	r3, r4, #5
 8000dee:	d51a      	bpl.n	8000e26 <__aeabi_fmul+0x216>
 8000df0:	2001      	movs	r0, #1
 8000df2:	2400      	movs	r4, #0
 8000df4:	e758      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000df6:	2080      	movs	r0, #128	; 0x80
 8000df8:	03c0      	lsls	r0, r0, #15
 8000dfa:	4204      	tst	r4, r0
 8000dfc:	d009      	beq.n	8000e12 <__aeabi_fmul+0x202>
 8000dfe:	464b      	mov	r3, r9
 8000e00:	4203      	tst	r3, r0
 8000e02:	d106      	bne.n	8000e12 <__aeabi_fmul+0x202>
 8000e04:	464c      	mov	r4, r9
 8000e06:	4304      	orrs	r4, r0
 8000e08:	0264      	lsls	r4, r4, #9
 8000e0a:	4647      	mov	r7, r8
 8000e0c:	20ff      	movs	r0, #255	; 0xff
 8000e0e:	0a64      	lsrs	r4, r4, #9
 8000e10:	e74a      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e12:	2080      	movs	r0, #128	; 0x80
 8000e14:	03c0      	lsls	r0, r0, #15
 8000e16:	4304      	orrs	r4, r0
 8000e18:	0264      	lsls	r4, r4, #9
 8000e1a:	0037      	movs	r7, r6
 8000e1c:	20ff      	movs	r0, #255	; 0xff
 8000e1e:	0a64      	lsrs	r4, r4, #9
 8000e20:	e742      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e22:	0029      	movs	r1, r5
 8000e24:	e78e      	b.n	8000d44 <__aeabi_fmul+0x134>
 8000e26:	01a4      	lsls	r4, r4, #6
 8000e28:	2000      	movs	r0, #0
 8000e2a:	0a64      	lsrs	r4, r4, #9
 8000e2c:	e73c      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e2e:	2080      	movs	r0, #128	; 0x80
 8000e30:	03c0      	lsls	r0, r0, #15
 8000e32:	4304      	orrs	r4, r0
 8000e34:	0264      	lsls	r4, r4, #9
 8000e36:	20ff      	movs	r0, #255	; 0xff
 8000e38:	0a64      	lsrs	r4, r4, #9
 8000e3a:	e735      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e3c:	080120ac 	.word	0x080120ac
 8000e40:	f7ffffff 	.word	0xf7ffffff

08000e44 <__aeabi_fsub>:
 8000e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e46:	4646      	mov	r6, r8
 8000e48:	46d6      	mov	lr, sl
 8000e4a:	464f      	mov	r7, r9
 8000e4c:	0243      	lsls	r3, r0, #9
 8000e4e:	0a5b      	lsrs	r3, r3, #9
 8000e50:	00da      	lsls	r2, r3, #3
 8000e52:	4694      	mov	ip, r2
 8000e54:	024a      	lsls	r2, r1, #9
 8000e56:	b5c0      	push	{r6, r7, lr}
 8000e58:	0044      	lsls	r4, r0, #1
 8000e5a:	0a56      	lsrs	r6, r2, #9
 8000e5c:	1c05      	adds	r5, r0, #0
 8000e5e:	46b0      	mov	r8, r6
 8000e60:	0e24      	lsrs	r4, r4, #24
 8000e62:	004e      	lsls	r6, r1, #1
 8000e64:	0992      	lsrs	r2, r2, #6
 8000e66:	001f      	movs	r7, r3
 8000e68:	0020      	movs	r0, r4
 8000e6a:	4692      	mov	sl, r2
 8000e6c:	0fed      	lsrs	r5, r5, #31
 8000e6e:	0e36      	lsrs	r6, r6, #24
 8000e70:	0fc9      	lsrs	r1, r1, #31
 8000e72:	2eff      	cmp	r6, #255	; 0xff
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0x34>
 8000e76:	e07f      	b.n	8000f78 <__aeabi_fsub+0x134>
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4051      	eors	r1, r2
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d051      	beq.n	8000f24 <__aeabi_fsub+0xe0>
 8000e80:	1ba2      	subs	r2, r4, r6
 8000e82:	4691      	mov	r9, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	dc00      	bgt.n	8000e8a <__aeabi_fsub+0x46>
 8000e88:	e07e      	b.n	8000f88 <__aeabi_fsub+0x144>
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x4c>
 8000e8e:	e099      	b.n	8000fc4 <__aeabi_fsub+0x180>
 8000e90:	2cff      	cmp	r4, #255	; 0xff
 8000e92:	d100      	bne.n	8000e96 <__aeabi_fsub+0x52>
 8000e94:	e08c      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	4652      	mov	r2, sl
 8000e9a:	04db      	lsls	r3, r3, #19
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	4692      	mov	sl, r2
 8000ea0:	464a      	mov	r2, r9
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	2a1b      	cmp	r2, #27
 8000ea6:	dc08      	bgt.n	8000eba <__aeabi_fsub+0x76>
 8000ea8:	4653      	mov	r3, sl
 8000eaa:	2120      	movs	r1, #32
 8000eac:	40d3      	lsrs	r3, r2
 8000eae:	1a89      	subs	r1, r1, r2
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	408a      	lsls	r2, r1
 8000eb4:	1e51      	subs	r1, r2, #1
 8000eb6:	418a      	sbcs	r2, r1
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	4662      	mov	r2, ip
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	015a      	lsls	r2, r3, #5
 8000ec0:	d400      	bmi.n	8000ec4 <__aeabi_fsub+0x80>
 8000ec2:	e0f3      	b.n	80010ac <__aeabi_fsub+0x268>
 8000ec4:	019b      	lsls	r3, r3, #6
 8000ec6:	099e      	lsrs	r6, r3, #6
 8000ec8:	0030      	movs	r0, r6
 8000eca:	f002 f8d1 	bl	8003070 <__clzsi2>
 8000ece:	3805      	subs	r0, #5
 8000ed0:	4086      	lsls	r6, r0
 8000ed2:	4284      	cmp	r4, r0
 8000ed4:	dd00      	ble.n	8000ed8 <__aeabi_fsub+0x94>
 8000ed6:	e0f7      	b.n	80010c8 <__aeabi_fsub+0x284>
 8000ed8:	0032      	movs	r2, r6
 8000eda:	1b04      	subs	r4, r0, r4
 8000edc:	2020      	movs	r0, #32
 8000ede:	3401      	adds	r4, #1
 8000ee0:	40e2      	lsrs	r2, r4
 8000ee2:	1b04      	subs	r4, r0, r4
 8000ee4:	40a6      	lsls	r6, r4
 8000ee6:	0033      	movs	r3, r6
 8000ee8:	1e5e      	subs	r6, r3, #1
 8000eea:	41b3      	sbcs	r3, r6
 8000eec:	2400      	movs	r4, #0
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	075a      	lsls	r2, r3, #29
 8000ef2:	d004      	beq.n	8000efe <__aeabi_fsub+0xba>
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	2a04      	cmp	r2, #4
 8000efa:	d000      	beq.n	8000efe <__aeabi_fsub+0xba>
 8000efc:	3304      	adds	r3, #4
 8000efe:	015a      	lsls	r2, r3, #5
 8000f00:	d400      	bmi.n	8000f04 <__aeabi_fsub+0xc0>
 8000f02:	e0d6      	b.n	80010b2 <__aeabi_fsub+0x26e>
 8000f04:	1c62      	adds	r2, r4, #1
 8000f06:	2cfe      	cmp	r4, #254	; 0xfe
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0xc8>
 8000f0a:	e0da      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000f0c:	019b      	lsls	r3, r3, #6
 8000f0e:	0a5f      	lsrs	r7, r3, #9
 8000f10:	b2d0      	uxtb	r0, r2
 8000f12:	05c0      	lsls	r0, r0, #23
 8000f14:	4338      	orrs	r0, r7
 8000f16:	07ed      	lsls	r5, r5, #31
 8000f18:	4328      	orrs	r0, r5
 8000f1a:	bce0      	pop	{r5, r6, r7}
 8000f1c:	46ba      	mov	sl, r7
 8000f1e:	46b1      	mov	r9, r6
 8000f20:	46a8      	mov	r8, r5
 8000f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f24:	1ba2      	subs	r2, r4, r6
 8000f26:	4691      	mov	r9, r2
 8000f28:	2a00      	cmp	r2, #0
 8000f2a:	dd63      	ble.n	8000ff4 <__aeabi_fsub+0x1b0>
 8000f2c:	2e00      	cmp	r6, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0xee>
 8000f30:	e099      	b.n	8001066 <__aeabi_fsub+0x222>
 8000f32:	2cff      	cmp	r4, #255	; 0xff
 8000f34:	d03c      	beq.n	8000fb0 <__aeabi_fsub+0x16c>
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	4652      	mov	r2, sl
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	4692      	mov	sl, r2
 8000f40:	464a      	mov	r2, r9
 8000f42:	2301      	movs	r3, #1
 8000f44:	2a1b      	cmp	r2, #27
 8000f46:	dc08      	bgt.n	8000f5a <__aeabi_fsub+0x116>
 8000f48:	4653      	mov	r3, sl
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	40d3      	lsrs	r3, r2
 8000f4e:	1a89      	subs	r1, r1, r2
 8000f50:	4652      	mov	r2, sl
 8000f52:	408a      	lsls	r2, r1
 8000f54:	1e51      	subs	r1, r2, #1
 8000f56:	418a      	sbcs	r2, r1
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	4463      	add	r3, ip
 8000f5c:	015a      	lsls	r2, r3, #5
 8000f5e:	d400      	bmi.n	8000f62 <__aeabi_fsub+0x11e>
 8000f60:	e0a4      	b.n	80010ac <__aeabi_fsub+0x268>
 8000f62:	3401      	adds	r4, #1
 8000f64:	2cff      	cmp	r4, #255	; 0xff
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fsub+0x126>
 8000f68:	e0ab      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4997      	ldr	r1, [pc, #604]	; (80011cc <__aeabi_fsub+0x388>)
 8000f6e:	401a      	ands	r2, r3
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	400b      	ands	r3, r1
 8000f74:	4313      	orrs	r3, r2
 8000f76:	e7bb      	b.n	8000ef0 <__aeabi_fsub+0xac>
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d032      	beq.n	8000fe2 <__aeabi_fsub+0x19e>
 8000f7c:	428d      	cmp	r5, r1
 8000f7e:	d035      	beq.n	8000fec <__aeabi_fsub+0x1a8>
 8000f80:	22ff      	movs	r2, #255	; 0xff
 8000f82:	4252      	negs	r2, r2
 8000f84:	4691      	mov	r9, r2
 8000f86:	44a1      	add	r9, r4
 8000f88:	464a      	mov	r2, r9
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d051      	beq.n	8001032 <__aeabi_fsub+0x1ee>
 8000f8e:	1b30      	subs	r0, r6, r4
 8000f90:	2c00      	cmp	r4, #0
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fsub+0x152>
 8000f94:	e09c      	b.n	80010d0 <__aeabi_fsub+0x28c>
 8000f96:	4663      	mov	r3, ip
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_fsub+0x15a>
 8000f9c:	e0df      	b.n	800115e <__aeabi_fsub+0x31a>
 8000f9e:	3801      	subs	r0, #1
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_fsub+0x162>
 8000fa4:	e0f7      	b.n	8001196 <__aeabi_fsub+0x352>
 8000fa6:	2eff      	cmp	r6, #255	; 0xff
 8000fa8:	d000      	beq.n	8000fac <__aeabi_fsub+0x168>
 8000faa:	e099      	b.n	80010e0 <__aeabi_fsub+0x29c>
 8000fac:	000d      	movs	r5, r1
 8000fae:	4643      	mov	r3, r8
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0x172>
 8000fb4:	e085      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000fb6:	2780      	movs	r7, #128	; 0x80
 8000fb8:	03ff      	lsls	r7, r7, #15
 8000fba:	431f      	orrs	r7, r3
 8000fbc:	027f      	lsls	r7, r7, #9
 8000fbe:	20ff      	movs	r0, #255	; 0xff
 8000fc0:	0a7f      	lsrs	r7, r7, #9
 8000fc2:	e7a6      	b.n	8000f12 <__aeabi_fsub+0xce>
 8000fc4:	4652      	mov	r2, sl
 8000fc6:	2a00      	cmp	r2, #0
 8000fc8:	d074      	beq.n	80010b4 <__aeabi_fsub+0x270>
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4252      	negs	r2, r2
 8000fce:	4690      	mov	r8, r2
 8000fd0:	44c1      	add	r9, r8
 8000fd2:	464a      	mov	r2, r9
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_fsub+0x196>
 8000fd8:	e0c8      	b.n	800116c <__aeabi_fsub+0x328>
 8000fda:	2cff      	cmp	r4, #255	; 0xff
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_fsub+0x19c>
 8000fde:	e75f      	b.n	8000ea0 <__aeabi_fsub+0x5c>
 8000fe0:	e7e6      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4051      	eors	r1, r2
 8000fe6:	42a9      	cmp	r1, r5
 8000fe8:	d000      	beq.n	8000fec <__aeabi_fsub+0x1a8>
 8000fea:	e749      	b.n	8000e80 <__aeabi_fsub+0x3c>
 8000fec:	22ff      	movs	r2, #255	; 0xff
 8000fee:	4252      	negs	r2, r2
 8000ff0:	4691      	mov	r9, r2
 8000ff2:	44a1      	add	r9, r4
 8000ff4:	464a      	mov	r2, r9
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d043      	beq.n	8001082 <__aeabi_fsub+0x23e>
 8000ffa:	1b31      	subs	r1, r6, r4
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_fsub+0x1be>
 8001000:	e08c      	b.n	800111c <__aeabi_fsub+0x2d8>
 8001002:	2eff      	cmp	r6, #255	; 0xff
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x1c4>
 8001006:	e092      	b.n	800112e <__aeabi_fsub+0x2ea>
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	4662      	mov	r2, ip
 800100c:	04db      	lsls	r3, r3, #19
 800100e:	431a      	orrs	r2, r3
 8001010:	4694      	mov	ip, r2
 8001012:	2301      	movs	r3, #1
 8001014:	291b      	cmp	r1, #27
 8001016:	dc09      	bgt.n	800102c <__aeabi_fsub+0x1e8>
 8001018:	2020      	movs	r0, #32
 800101a:	4663      	mov	r3, ip
 800101c:	4662      	mov	r2, ip
 800101e:	40cb      	lsrs	r3, r1
 8001020:	1a41      	subs	r1, r0, r1
 8001022:	408a      	lsls	r2, r1
 8001024:	0011      	movs	r1, r2
 8001026:	1e48      	subs	r0, r1, #1
 8001028:	4181      	sbcs	r1, r0
 800102a:	430b      	orrs	r3, r1
 800102c:	0034      	movs	r4, r6
 800102e:	4453      	add	r3, sl
 8001030:	e794      	b.n	8000f5c <__aeabi_fsub+0x118>
 8001032:	22fe      	movs	r2, #254	; 0xfe
 8001034:	1c66      	adds	r6, r4, #1
 8001036:	4232      	tst	r2, r6
 8001038:	d164      	bne.n	8001104 <__aeabi_fsub+0x2c0>
 800103a:	2c00      	cmp	r4, #0
 800103c:	d000      	beq.n	8001040 <__aeabi_fsub+0x1fc>
 800103e:	e082      	b.n	8001146 <__aeabi_fsub+0x302>
 8001040:	4663      	mov	r3, ip
 8001042:	2b00      	cmp	r3, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_fsub+0x204>
 8001046:	e0ab      	b.n	80011a0 <__aeabi_fsub+0x35c>
 8001048:	4653      	mov	r3, sl
 800104a:	2b00      	cmp	r3, #0
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0x20c>
 800104e:	e760      	b.n	8000f12 <__aeabi_fsub+0xce>
 8001050:	4663      	mov	r3, ip
 8001052:	4652      	mov	r2, sl
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	015a      	lsls	r2, r3, #5
 8001058:	d400      	bmi.n	800105c <__aeabi_fsub+0x218>
 800105a:	e0aa      	b.n	80011b2 <__aeabi_fsub+0x36e>
 800105c:	4663      	mov	r3, ip
 800105e:	4652      	mov	r2, sl
 8001060:	000d      	movs	r5, r1
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	e744      	b.n	8000ef0 <__aeabi_fsub+0xac>
 8001066:	4652      	mov	r2, sl
 8001068:	2a00      	cmp	r2, #0
 800106a:	d023      	beq.n	80010b4 <__aeabi_fsub+0x270>
 800106c:	2201      	movs	r2, #1
 800106e:	4252      	negs	r2, r2
 8001070:	4690      	mov	r8, r2
 8001072:	44c1      	add	r9, r8
 8001074:	464a      	mov	r2, r9
 8001076:	2a00      	cmp	r2, #0
 8001078:	d075      	beq.n	8001166 <__aeabi_fsub+0x322>
 800107a:	2cff      	cmp	r4, #255	; 0xff
 800107c:	d000      	beq.n	8001080 <__aeabi_fsub+0x23c>
 800107e:	e75f      	b.n	8000f40 <__aeabi_fsub+0xfc>
 8001080:	e796      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001082:	26fe      	movs	r6, #254	; 0xfe
 8001084:	3401      	adds	r4, #1
 8001086:	4226      	tst	r6, r4
 8001088:	d153      	bne.n	8001132 <__aeabi_fsub+0x2ee>
 800108a:	2800      	cmp	r0, #0
 800108c:	d172      	bne.n	8001174 <__aeabi_fsub+0x330>
 800108e:	4663      	mov	r3, ip
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_fsub+0x252>
 8001094:	e093      	b.n	80011be <__aeabi_fsub+0x37a>
 8001096:	4653      	mov	r3, sl
 8001098:	2b00      	cmp	r3, #0
 800109a:	d100      	bne.n	800109e <__aeabi_fsub+0x25a>
 800109c:	e739      	b.n	8000f12 <__aeabi_fsub+0xce>
 800109e:	4463      	add	r3, ip
 80010a0:	2400      	movs	r4, #0
 80010a2:	015a      	lsls	r2, r3, #5
 80010a4:	d502      	bpl.n	80010ac <__aeabi_fsub+0x268>
 80010a6:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <__aeabi_fsub+0x38c>)
 80010a8:	3401      	adds	r4, #1
 80010aa:	4013      	ands	r3, r2
 80010ac:	075a      	lsls	r2, r3, #29
 80010ae:	d000      	beq.n	80010b2 <__aeabi_fsub+0x26e>
 80010b0:	e720      	b.n	8000ef4 <__aeabi_fsub+0xb0>
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	2cff      	cmp	r4, #255	; 0xff
 80010b6:	d100      	bne.n	80010ba <__aeabi_fsub+0x276>
 80010b8:	e77a      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 80010ba:	025b      	lsls	r3, r3, #9
 80010bc:	0a5f      	lsrs	r7, r3, #9
 80010be:	b2e0      	uxtb	r0, r4
 80010c0:	e727      	b.n	8000f12 <__aeabi_fsub+0xce>
 80010c2:	20ff      	movs	r0, #255	; 0xff
 80010c4:	2700      	movs	r7, #0
 80010c6:	e724      	b.n	8000f12 <__aeabi_fsub+0xce>
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <__aeabi_fsub+0x38c>)
 80010ca:	1a24      	subs	r4, r4, r0
 80010cc:	4033      	ands	r3, r6
 80010ce:	e70f      	b.n	8000ef0 <__aeabi_fsub+0xac>
 80010d0:	2eff      	cmp	r6, #255	; 0xff
 80010d2:	d100      	bne.n	80010d6 <__aeabi_fsub+0x292>
 80010d4:	e76a      	b.n	8000fac <__aeabi_fsub+0x168>
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	4662      	mov	r2, ip
 80010da:	04db      	lsls	r3, r3, #19
 80010dc:	431a      	orrs	r2, r3
 80010de:	4694      	mov	ip, r2
 80010e0:	2301      	movs	r3, #1
 80010e2:	281b      	cmp	r0, #27
 80010e4:	dc09      	bgt.n	80010fa <__aeabi_fsub+0x2b6>
 80010e6:	2420      	movs	r4, #32
 80010e8:	4663      	mov	r3, ip
 80010ea:	4662      	mov	r2, ip
 80010ec:	40c3      	lsrs	r3, r0
 80010ee:	1a20      	subs	r0, r4, r0
 80010f0:	4082      	lsls	r2, r0
 80010f2:	0010      	movs	r0, r2
 80010f4:	1e44      	subs	r4, r0, #1
 80010f6:	41a0      	sbcs	r0, r4
 80010f8:	4303      	orrs	r3, r0
 80010fa:	4652      	mov	r2, sl
 80010fc:	000d      	movs	r5, r1
 80010fe:	0034      	movs	r4, r6
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	e6dc      	b.n	8000ebe <__aeabi_fsub+0x7a>
 8001104:	4663      	mov	r3, ip
 8001106:	4652      	mov	r2, sl
 8001108:	1a9e      	subs	r6, r3, r2
 800110a:	0173      	lsls	r3, r6, #5
 800110c:	d417      	bmi.n	800113e <__aeabi_fsub+0x2fa>
 800110e:	2e00      	cmp	r6, #0
 8001110:	d000      	beq.n	8001114 <__aeabi_fsub+0x2d0>
 8001112:	e6d9      	b.n	8000ec8 <__aeabi_fsub+0x84>
 8001114:	2500      	movs	r5, #0
 8001116:	2000      	movs	r0, #0
 8001118:	2700      	movs	r7, #0
 800111a:	e6fa      	b.n	8000f12 <__aeabi_fsub+0xce>
 800111c:	4663      	mov	r3, ip
 800111e:	2b00      	cmp	r3, #0
 8001120:	d044      	beq.n	80011ac <__aeabi_fsub+0x368>
 8001122:	3901      	subs	r1, #1
 8001124:	2900      	cmp	r1, #0
 8001126:	d04c      	beq.n	80011c2 <__aeabi_fsub+0x37e>
 8001128:	2eff      	cmp	r6, #255	; 0xff
 800112a:	d000      	beq.n	800112e <__aeabi_fsub+0x2ea>
 800112c:	e771      	b.n	8001012 <__aeabi_fsub+0x1ce>
 800112e:	4643      	mov	r3, r8
 8001130:	e73e      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001132:	2cff      	cmp	r4, #255	; 0xff
 8001134:	d0c5      	beq.n	80010c2 <__aeabi_fsub+0x27e>
 8001136:	4652      	mov	r2, sl
 8001138:	4462      	add	r2, ip
 800113a:	0853      	lsrs	r3, r2, #1
 800113c:	e7b6      	b.n	80010ac <__aeabi_fsub+0x268>
 800113e:	4663      	mov	r3, ip
 8001140:	000d      	movs	r5, r1
 8001142:	1ad6      	subs	r6, r2, r3
 8001144:	e6c0      	b.n	8000ec8 <__aeabi_fsub+0x84>
 8001146:	4662      	mov	r2, ip
 8001148:	2a00      	cmp	r2, #0
 800114a:	d116      	bne.n	800117a <__aeabi_fsub+0x336>
 800114c:	4653      	mov	r3, sl
 800114e:	2b00      	cmp	r3, #0
 8001150:	d000      	beq.n	8001154 <__aeabi_fsub+0x310>
 8001152:	e72b      	b.n	8000fac <__aeabi_fsub+0x168>
 8001154:	2780      	movs	r7, #128	; 0x80
 8001156:	2500      	movs	r5, #0
 8001158:	20ff      	movs	r0, #255	; 0xff
 800115a:	03ff      	lsls	r7, r7, #15
 800115c:	e6d9      	b.n	8000f12 <__aeabi_fsub+0xce>
 800115e:	000d      	movs	r5, r1
 8001160:	4643      	mov	r3, r8
 8001162:	0034      	movs	r4, r6
 8001164:	e7a6      	b.n	80010b4 <__aeabi_fsub+0x270>
 8001166:	4653      	mov	r3, sl
 8001168:	4463      	add	r3, ip
 800116a:	e6f7      	b.n	8000f5c <__aeabi_fsub+0x118>
 800116c:	4663      	mov	r3, ip
 800116e:	4652      	mov	r2, sl
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	e6a4      	b.n	8000ebe <__aeabi_fsub+0x7a>
 8001174:	4662      	mov	r2, ip
 8001176:	2a00      	cmp	r2, #0
 8001178:	d0d9      	beq.n	800112e <__aeabi_fsub+0x2ea>
 800117a:	4652      	mov	r2, sl
 800117c:	2a00      	cmp	r2, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x33e>
 8001180:	e716      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	03d2      	lsls	r2, r2, #15
 8001186:	4213      	tst	r3, r2
 8001188:	d100      	bne.n	800118c <__aeabi_fsub+0x348>
 800118a:	e711      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 800118c:	4640      	mov	r0, r8
 800118e:	4210      	tst	r0, r2
 8001190:	d000      	beq.n	8001194 <__aeabi_fsub+0x350>
 8001192:	e70d      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001194:	e70a      	b.n	8000fac <__aeabi_fsub+0x168>
 8001196:	4652      	mov	r2, sl
 8001198:	000d      	movs	r5, r1
 800119a:	0034      	movs	r4, r6
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	e68e      	b.n	8000ebe <__aeabi_fsub+0x7a>
 80011a0:	4653      	mov	r3, sl
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <__aeabi_fsub+0x374>
 80011a6:	000d      	movs	r5, r1
 80011a8:	4647      	mov	r7, r8
 80011aa:	e6b2      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011ac:	4643      	mov	r3, r8
 80011ae:	0034      	movs	r4, r6
 80011b0:	e780      	b.n	80010b4 <__aeabi_fsub+0x270>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d000      	beq.n	80011b8 <__aeabi_fsub+0x374>
 80011b6:	e779      	b.n	80010ac <__aeabi_fsub+0x268>
 80011b8:	2500      	movs	r5, #0
 80011ba:	2700      	movs	r7, #0
 80011bc:	e6a9      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011be:	4647      	mov	r7, r8
 80011c0:	e6a7      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011c2:	4653      	mov	r3, sl
 80011c4:	0034      	movs	r4, r6
 80011c6:	4463      	add	r3, ip
 80011c8:	e6c8      	b.n	8000f5c <__aeabi_fsub+0x118>
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	7dffffff 	.word	0x7dffffff
 80011d0:	fbffffff 	.word	0xfbffffff

080011d4 <__aeabi_f2iz>:
 80011d4:	0241      	lsls	r1, r0, #9
 80011d6:	0042      	lsls	r2, r0, #1
 80011d8:	0fc3      	lsrs	r3, r0, #31
 80011da:	0a49      	lsrs	r1, r1, #9
 80011dc:	2000      	movs	r0, #0
 80011de:	0e12      	lsrs	r2, r2, #24
 80011e0:	2a7e      	cmp	r2, #126	; 0x7e
 80011e2:	d903      	bls.n	80011ec <__aeabi_f2iz+0x18>
 80011e4:	2a9d      	cmp	r2, #157	; 0x9d
 80011e6:	d902      	bls.n	80011ee <__aeabi_f2iz+0x1a>
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <__aeabi_f2iz+0x3c>)
 80011ea:	1898      	adds	r0, r3, r2
 80011ec:	4770      	bx	lr
 80011ee:	2080      	movs	r0, #128	; 0x80
 80011f0:	0400      	lsls	r0, r0, #16
 80011f2:	4301      	orrs	r1, r0
 80011f4:	2a95      	cmp	r2, #149	; 0x95
 80011f6:	dc07      	bgt.n	8001208 <__aeabi_f2iz+0x34>
 80011f8:	2096      	movs	r0, #150	; 0x96
 80011fa:	1a82      	subs	r2, r0, r2
 80011fc:	40d1      	lsrs	r1, r2
 80011fe:	4248      	negs	r0, r1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f3      	bne.n	80011ec <__aeabi_f2iz+0x18>
 8001204:	0008      	movs	r0, r1
 8001206:	e7f1      	b.n	80011ec <__aeabi_f2iz+0x18>
 8001208:	3a96      	subs	r2, #150	; 0x96
 800120a:	4091      	lsls	r1, r2
 800120c:	e7f7      	b.n	80011fe <__aeabi_f2iz+0x2a>
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	7fffffff 	.word	0x7fffffff

08001214 <__aeabi_i2f>:
 8001214:	b570      	push	{r4, r5, r6, lr}
 8001216:	2800      	cmp	r0, #0
 8001218:	d013      	beq.n	8001242 <__aeabi_i2f+0x2e>
 800121a:	17c3      	asrs	r3, r0, #31
 800121c:	18c5      	adds	r5, r0, r3
 800121e:	405d      	eors	r5, r3
 8001220:	0fc4      	lsrs	r4, r0, #31
 8001222:	0028      	movs	r0, r5
 8001224:	f001 ff24 	bl	8003070 <__clzsi2>
 8001228:	239e      	movs	r3, #158	; 0x9e
 800122a:	0001      	movs	r1, r0
 800122c:	1a1b      	subs	r3, r3, r0
 800122e:	2b96      	cmp	r3, #150	; 0x96
 8001230:	dc0f      	bgt.n	8001252 <__aeabi_i2f+0x3e>
 8001232:	2808      	cmp	r0, #8
 8001234:	dd01      	ble.n	800123a <__aeabi_i2f+0x26>
 8001236:	3908      	subs	r1, #8
 8001238:	408d      	lsls	r5, r1
 800123a:	026d      	lsls	r5, r5, #9
 800123c:	0a6d      	lsrs	r5, r5, #9
 800123e:	b2d8      	uxtb	r0, r3
 8001240:	e002      	b.n	8001248 <__aeabi_i2f+0x34>
 8001242:	2400      	movs	r4, #0
 8001244:	2000      	movs	r0, #0
 8001246:	2500      	movs	r5, #0
 8001248:	05c0      	lsls	r0, r0, #23
 800124a:	4328      	orrs	r0, r5
 800124c:	07e4      	lsls	r4, r4, #31
 800124e:	4320      	orrs	r0, r4
 8001250:	bd70      	pop	{r4, r5, r6, pc}
 8001252:	2b99      	cmp	r3, #153	; 0x99
 8001254:	dd0b      	ble.n	800126e <__aeabi_i2f+0x5a>
 8001256:	2205      	movs	r2, #5
 8001258:	002e      	movs	r6, r5
 800125a:	1a12      	subs	r2, r2, r0
 800125c:	40d6      	lsrs	r6, r2
 800125e:	0002      	movs	r2, r0
 8001260:	321b      	adds	r2, #27
 8001262:	4095      	lsls	r5, r2
 8001264:	0028      	movs	r0, r5
 8001266:	1e45      	subs	r5, r0, #1
 8001268:	41a8      	sbcs	r0, r5
 800126a:	0035      	movs	r5, r6
 800126c:	4305      	orrs	r5, r0
 800126e:	2905      	cmp	r1, #5
 8001270:	dd01      	ble.n	8001276 <__aeabi_i2f+0x62>
 8001272:	1f4a      	subs	r2, r1, #5
 8001274:	4095      	lsls	r5, r2
 8001276:	002a      	movs	r2, r5
 8001278:	4e08      	ldr	r6, [pc, #32]	; (800129c <__aeabi_i2f+0x88>)
 800127a:	4032      	ands	r2, r6
 800127c:	0768      	lsls	r0, r5, #29
 800127e:	d009      	beq.n	8001294 <__aeabi_i2f+0x80>
 8001280:	200f      	movs	r0, #15
 8001282:	4028      	ands	r0, r5
 8001284:	2804      	cmp	r0, #4
 8001286:	d005      	beq.n	8001294 <__aeabi_i2f+0x80>
 8001288:	3204      	adds	r2, #4
 800128a:	0150      	lsls	r0, r2, #5
 800128c:	d502      	bpl.n	8001294 <__aeabi_i2f+0x80>
 800128e:	239f      	movs	r3, #159	; 0x9f
 8001290:	4032      	ands	r2, r6
 8001292:	1a5b      	subs	r3, r3, r1
 8001294:	0192      	lsls	r2, r2, #6
 8001296:	0a55      	lsrs	r5, r2, #9
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	e7d5      	b.n	8001248 <__aeabi_i2f+0x34>
 800129c:	fbffffff 	.word	0xfbffffff

080012a0 <__aeabi_dadd>:
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	464f      	mov	r7, r9
 80012a4:	46d6      	mov	lr, sl
 80012a6:	4646      	mov	r6, r8
 80012a8:	000d      	movs	r5, r1
 80012aa:	0001      	movs	r1, r0
 80012ac:	0018      	movs	r0, r3
 80012ae:	b5c0      	push	{r6, r7, lr}
 80012b0:	0017      	movs	r7, r2
 80012b2:	032b      	lsls	r3, r5, #12
 80012b4:	0a5a      	lsrs	r2, r3, #9
 80012b6:	0f4b      	lsrs	r3, r1, #29
 80012b8:	4313      	orrs	r3, r2
 80012ba:	00ca      	lsls	r2, r1, #3
 80012bc:	4691      	mov	r9, r2
 80012be:	0302      	lsls	r2, r0, #12
 80012c0:	006e      	lsls	r6, r5, #1
 80012c2:	0041      	lsls	r1, r0, #1
 80012c4:	0a52      	lsrs	r2, r2, #9
 80012c6:	0fec      	lsrs	r4, r5, #31
 80012c8:	0f7d      	lsrs	r5, r7, #29
 80012ca:	4315      	orrs	r5, r2
 80012cc:	0d76      	lsrs	r6, r6, #21
 80012ce:	0d49      	lsrs	r1, r1, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	4682      	mov	sl, r0
 80012d4:	46ac      	mov	ip, r5
 80012d6:	00ff      	lsls	r7, r7, #3
 80012d8:	1a72      	subs	r2, r6, r1
 80012da:	4284      	cmp	r4, r0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dadd+0x40>
 80012de:	e098      	b.n	8001412 <__aeabi_dadd+0x172>
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	dc00      	bgt.n	80012e6 <__aeabi_dadd+0x46>
 80012e4:	e081      	b.n	80013ea <__aeabi_dadd+0x14a>
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d100      	bne.n	80012ec <__aeabi_dadd+0x4c>
 80012ea:	e0b6      	b.n	800145a <__aeabi_dadd+0x1ba>
 80012ec:	49c9      	ldr	r1, [pc, #804]	; (8001614 <__aeabi_dadd+0x374>)
 80012ee:	428e      	cmp	r6, r1
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dadd+0x54>
 80012f2:	e172      	b.n	80015da <__aeabi_dadd+0x33a>
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	0028      	movs	r0, r5
 80012f8:	0409      	lsls	r1, r1, #16
 80012fa:	4308      	orrs	r0, r1
 80012fc:	4684      	mov	ip, r0
 80012fe:	2a38      	cmp	r2, #56	; 0x38
 8001300:	dd00      	ble.n	8001304 <__aeabi_dadd+0x64>
 8001302:	e15e      	b.n	80015c2 <__aeabi_dadd+0x322>
 8001304:	2a1f      	cmp	r2, #31
 8001306:	dd00      	ble.n	800130a <__aeabi_dadd+0x6a>
 8001308:	e1ee      	b.n	80016e8 <__aeabi_dadd+0x448>
 800130a:	2020      	movs	r0, #32
 800130c:	0039      	movs	r1, r7
 800130e:	4665      	mov	r5, ip
 8001310:	1a80      	subs	r0, r0, r2
 8001312:	4087      	lsls	r7, r0
 8001314:	40d1      	lsrs	r1, r2
 8001316:	4085      	lsls	r5, r0
 8001318:	430d      	orrs	r5, r1
 800131a:	0039      	movs	r1, r7
 800131c:	1e4f      	subs	r7, r1, #1
 800131e:	41b9      	sbcs	r1, r7
 8001320:	4667      	mov	r7, ip
 8001322:	40d7      	lsrs	r7, r2
 8001324:	4329      	orrs	r1, r5
 8001326:	1bdb      	subs	r3, r3, r7
 8001328:	464a      	mov	r2, r9
 800132a:	1a55      	subs	r5, r2, r1
 800132c:	45a9      	cmp	r9, r5
 800132e:	4189      	sbcs	r1, r1
 8001330:	4249      	negs	r1, r1
 8001332:	1a5b      	subs	r3, r3, r1
 8001334:	4698      	mov	r8, r3
 8001336:	4643      	mov	r3, r8
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	d400      	bmi.n	800133e <__aeabi_dadd+0x9e>
 800133c:	e0cc      	b.n	80014d8 <__aeabi_dadd+0x238>
 800133e:	4643      	mov	r3, r8
 8001340:	025b      	lsls	r3, r3, #9
 8001342:	0a5b      	lsrs	r3, r3, #9
 8001344:	4698      	mov	r8, r3
 8001346:	4643      	mov	r3, r8
 8001348:	2b00      	cmp	r3, #0
 800134a:	d100      	bne.n	800134e <__aeabi_dadd+0xae>
 800134c:	e12c      	b.n	80015a8 <__aeabi_dadd+0x308>
 800134e:	4640      	mov	r0, r8
 8001350:	f001 fe8e 	bl	8003070 <__clzsi2>
 8001354:	0001      	movs	r1, r0
 8001356:	3908      	subs	r1, #8
 8001358:	2220      	movs	r2, #32
 800135a:	0028      	movs	r0, r5
 800135c:	4643      	mov	r3, r8
 800135e:	1a52      	subs	r2, r2, r1
 8001360:	408b      	lsls	r3, r1
 8001362:	40d0      	lsrs	r0, r2
 8001364:	408d      	lsls	r5, r1
 8001366:	4303      	orrs	r3, r0
 8001368:	428e      	cmp	r6, r1
 800136a:	dd00      	ble.n	800136e <__aeabi_dadd+0xce>
 800136c:	e117      	b.n	800159e <__aeabi_dadd+0x2fe>
 800136e:	1b8e      	subs	r6, r1, r6
 8001370:	1c72      	adds	r2, r6, #1
 8001372:	2a1f      	cmp	r2, #31
 8001374:	dd00      	ble.n	8001378 <__aeabi_dadd+0xd8>
 8001376:	e1a7      	b.n	80016c8 <__aeabi_dadd+0x428>
 8001378:	2120      	movs	r1, #32
 800137a:	0018      	movs	r0, r3
 800137c:	002e      	movs	r6, r5
 800137e:	1a89      	subs	r1, r1, r2
 8001380:	408d      	lsls	r5, r1
 8001382:	4088      	lsls	r0, r1
 8001384:	40d6      	lsrs	r6, r2
 8001386:	40d3      	lsrs	r3, r2
 8001388:	1e69      	subs	r1, r5, #1
 800138a:	418d      	sbcs	r5, r1
 800138c:	4330      	orrs	r0, r6
 800138e:	4698      	mov	r8, r3
 8001390:	2600      	movs	r6, #0
 8001392:	4305      	orrs	r5, r0
 8001394:	076b      	lsls	r3, r5, #29
 8001396:	d009      	beq.n	80013ac <__aeabi_dadd+0x10c>
 8001398:	230f      	movs	r3, #15
 800139a:	402b      	ands	r3, r5
 800139c:	2b04      	cmp	r3, #4
 800139e:	d005      	beq.n	80013ac <__aeabi_dadd+0x10c>
 80013a0:	1d2b      	adds	r3, r5, #4
 80013a2:	42ab      	cmp	r3, r5
 80013a4:	41ad      	sbcs	r5, r5
 80013a6:	426d      	negs	r5, r5
 80013a8:	44a8      	add	r8, r5
 80013aa:	001d      	movs	r5, r3
 80013ac:	4643      	mov	r3, r8
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	d400      	bmi.n	80013b4 <__aeabi_dadd+0x114>
 80013b2:	e094      	b.n	80014de <__aeabi_dadd+0x23e>
 80013b4:	4b97      	ldr	r3, [pc, #604]	; (8001614 <__aeabi_dadd+0x374>)
 80013b6:	1c72      	adds	r2, r6, #1
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x11e>
 80013bc:	e09d      	b.n	80014fa <__aeabi_dadd+0x25a>
 80013be:	4641      	mov	r1, r8
 80013c0:	4b95      	ldr	r3, [pc, #596]	; (8001618 <__aeabi_dadd+0x378>)
 80013c2:	08ed      	lsrs	r5, r5, #3
 80013c4:	4019      	ands	r1, r3
 80013c6:	000b      	movs	r3, r1
 80013c8:	0552      	lsls	r2, r2, #21
 80013ca:	0749      	lsls	r1, r1, #29
 80013cc:	025b      	lsls	r3, r3, #9
 80013ce:	4329      	orrs	r1, r5
 80013d0:	0b1b      	lsrs	r3, r3, #12
 80013d2:	0d52      	lsrs	r2, r2, #21
 80013d4:	0512      	lsls	r2, r2, #20
 80013d6:	4313      	orrs	r3, r2
 80013d8:	07e4      	lsls	r4, r4, #31
 80013da:	4323      	orrs	r3, r4
 80013dc:	0008      	movs	r0, r1
 80013de:	0019      	movs	r1, r3
 80013e0:	bce0      	pop	{r5, r6, r7}
 80013e2:	46ba      	mov	sl, r7
 80013e4:	46b1      	mov	r9, r6
 80013e6:	46a8      	mov	r8, r5
 80013e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d043      	beq.n	8001476 <__aeabi_dadd+0x1d6>
 80013ee:	1b8a      	subs	r2, r1, r6
 80013f0:	2e00      	cmp	r6, #0
 80013f2:	d000      	beq.n	80013f6 <__aeabi_dadd+0x156>
 80013f4:	e12a      	b.n	800164c <__aeabi_dadd+0x3ac>
 80013f6:	464c      	mov	r4, r9
 80013f8:	431c      	orrs	r4, r3
 80013fa:	d100      	bne.n	80013fe <__aeabi_dadd+0x15e>
 80013fc:	e1d1      	b.n	80017a2 <__aeabi_dadd+0x502>
 80013fe:	1e54      	subs	r4, r2, #1
 8001400:	2a01      	cmp	r2, #1
 8001402:	d100      	bne.n	8001406 <__aeabi_dadd+0x166>
 8001404:	e21f      	b.n	8001846 <__aeabi_dadd+0x5a6>
 8001406:	4d83      	ldr	r5, [pc, #524]	; (8001614 <__aeabi_dadd+0x374>)
 8001408:	42aa      	cmp	r2, r5
 800140a:	d100      	bne.n	800140e <__aeabi_dadd+0x16e>
 800140c:	e272      	b.n	80018f4 <__aeabi_dadd+0x654>
 800140e:	0022      	movs	r2, r4
 8001410:	e123      	b.n	800165a <__aeabi_dadd+0x3ba>
 8001412:	2a00      	cmp	r2, #0
 8001414:	dc00      	bgt.n	8001418 <__aeabi_dadd+0x178>
 8001416:	e098      	b.n	800154a <__aeabi_dadd+0x2aa>
 8001418:	2900      	cmp	r1, #0
 800141a:	d042      	beq.n	80014a2 <__aeabi_dadd+0x202>
 800141c:	497d      	ldr	r1, [pc, #500]	; (8001614 <__aeabi_dadd+0x374>)
 800141e:	428e      	cmp	r6, r1
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x184>
 8001422:	e0da      	b.n	80015da <__aeabi_dadd+0x33a>
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	0028      	movs	r0, r5
 8001428:	0409      	lsls	r1, r1, #16
 800142a:	4308      	orrs	r0, r1
 800142c:	4684      	mov	ip, r0
 800142e:	2a38      	cmp	r2, #56	; 0x38
 8001430:	dd00      	ble.n	8001434 <__aeabi_dadd+0x194>
 8001432:	e129      	b.n	8001688 <__aeabi_dadd+0x3e8>
 8001434:	2a1f      	cmp	r2, #31
 8001436:	dc00      	bgt.n	800143a <__aeabi_dadd+0x19a>
 8001438:	e187      	b.n	800174a <__aeabi_dadd+0x4aa>
 800143a:	0011      	movs	r1, r2
 800143c:	4665      	mov	r5, ip
 800143e:	3920      	subs	r1, #32
 8001440:	40cd      	lsrs	r5, r1
 8001442:	2a20      	cmp	r2, #32
 8001444:	d004      	beq.n	8001450 <__aeabi_dadd+0x1b0>
 8001446:	2040      	movs	r0, #64	; 0x40
 8001448:	4661      	mov	r1, ip
 800144a:	1a82      	subs	r2, r0, r2
 800144c:	4091      	lsls	r1, r2
 800144e:	430f      	orrs	r7, r1
 8001450:	0039      	movs	r1, r7
 8001452:	1e4f      	subs	r7, r1, #1
 8001454:	41b9      	sbcs	r1, r7
 8001456:	430d      	orrs	r5, r1
 8001458:	e11b      	b.n	8001692 <__aeabi_dadd+0x3f2>
 800145a:	0029      	movs	r1, r5
 800145c:	4339      	orrs	r1, r7
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x1c2>
 8001460:	e0b5      	b.n	80015ce <__aeabi_dadd+0x32e>
 8001462:	1e51      	subs	r1, r2, #1
 8001464:	2a01      	cmp	r2, #1
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x1ca>
 8001468:	e1ab      	b.n	80017c2 <__aeabi_dadd+0x522>
 800146a:	486a      	ldr	r0, [pc, #424]	; (8001614 <__aeabi_dadd+0x374>)
 800146c:	4282      	cmp	r2, r0
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x1d2>
 8001470:	e1b2      	b.n	80017d8 <__aeabi_dadd+0x538>
 8001472:	000a      	movs	r2, r1
 8001474:	e743      	b.n	80012fe <__aeabi_dadd+0x5e>
 8001476:	4969      	ldr	r1, [pc, #420]	; (800161c <__aeabi_dadd+0x37c>)
 8001478:	1c75      	adds	r5, r6, #1
 800147a:	420d      	tst	r5, r1
 800147c:	d000      	beq.n	8001480 <__aeabi_dadd+0x1e0>
 800147e:	e0cf      	b.n	8001620 <__aeabi_dadd+0x380>
 8001480:	2e00      	cmp	r6, #0
 8001482:	d000      	beq.n	8001486 <__aeabi_dadd+0x1e6>
 8001484:	e193      	b.n	80017ae <__aeabi_dadd+0x50e>
 8001486:	4649      	mov	r1, r9
 8001488:	4319      	orrs	r1, r3
 800148a:	d100      	bne.n	800148e <__aeabi_dadd+0x1ee>
 800148c:	e1d1      	b.n	8001832 <__aeabi_dadd+0x592>
 800148e:	4661      	mov	r1, ip
 8001490:	4339      	orrs	r1, r7
 8001492:	d000      	beq.n	8001496 <__aeabi_dadd+0x1f6>
 8001494:	e1e3      	b.n	800185e <__aeabi_dadd+0x5be>
 8001496:	4649      	mov	r1, r9
 8001498:	0758      	lsls	r0, r3, #29
 800149a:	08c9      	lsrs	r1, r1, #3
 800149c:	4301      	orrs	r1, r0
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	e026      	b.n	80014f0 <__aeabi_dadd+0x250>
 80014a2:	0029      	movs	r1, r5
 80014a4:	4339      	orrs	r1, r7
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x20a>
 80014a8:	e091      	b.n	80015ce <__aeabi_dadd+0x32e>
 80014aa:	1e51      	subs	r1, r2, #1
 80014ac:	2a01      	cmp	r2, #1
 80014ae:	d005      	beq.n	80014bc <__aeabi_dadd+0x21c>
 80014b0:	4858      	ldr	r0, [pc, #352]	; (8001614 <__aeabi_dadd+0x374>)
 80014b2:	4282      	cmp	r2, r0
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dadd+0x218>
 80014b6:	e18f      	b.n	80017d8 <__aeabi_dadd+0x538>
 80014b8:	000a      	movs	r2, r1
 80014ba:	e7b8      	b.n	800142e <__aeabi_dadd+0x18e>
 80014bc:	003d      	movs	r5, r7
 80014be:	444d      	add	r5, r9
 80014c0:	454d      	cmp	r5, r9
 80014c2:	4189      	sbcs	r1, r1
 80014c4:	4463      	add	r3, ip
 80014c6:	4698      	mov	r8, r3
 80014c8:	4249      	negs	r1, r1
 80014ca:	4488      	add	r8, r1
 80014cc:	4643      	mov	r3, r8
 80014ce:	2602      	movs	r6, #2
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	d500      	bpl.n	80014d6 <__aeabi_dadd+0x236>
 80014d4:	e0eb      	b.n	80016ae <__aeabi_dadd+0x40e>
 80014d6:	3e01      	subs	r6, #1
 80014d8:	076b      	lsls	r3, r5, #29
 80014da:	d000      	beq.n	80014de <__aeabi_dadd+0x23e>
 80014dc:	e75c      	b.n	8001398 <__aeabi_dadd+0xf8>
 80014de:	4643      	mov	r3, r8
 80014e0:	08e9      	lsrs	r1, r5, #3
 80014e2:	075a      	lsls	r2, r3, #29
 80014e4:	4311      	orrs	r1, r2
 80014e6:	0032      	movs	r2, r6
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	484a      	ldr	r0, [pc, #296]	; (8001614 <__aeabi_dadd+0x374>)
 80014ec:	4282      	cmp	r2, r0
 80014ee:	d021      	beq.n	8001534 <__aeabi_dadd+0x294>
 80014f0:	031b      	lsls	r3, r3, #12
 80014f2:	0552      	lsls	r2, r2, #21
 80014f4:	0b1b      	lsrs	r3, r3, #12
 80014f6:	0d52      	lsrs	r2, r2, #21
 80014f8:	e76c      	b.n	80013d4 <__aeabi_dadd+0x134>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	e769      	b.n	80013d4 <__aeabi_dadd+0x134>
 8001500:	002a      	movs	r2, r5
 8001502:	433a      	orrs	r2, r7
 8001504:	d069      	beq.n	80015da <__aeabi_dadd+0x33a>
 8001506:	464a      	mov	r2, r9
 8001508:	0758      	lsls	r0, r3, #29
 800150a:	08d1      	lsrs	r1, r2, #3
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	031b      	lsls	r3, r3, #12
 8001512:	4308      	orrs	r0, r1
 8001514:	421a      	tst	r2, r3
 8001516:	d007      	beq.n	8001528 <__aeabi_dadd+0x288>
 8001518:	0029      	movs	r1, r5
 800151a:	08ed      	lsrs	r5, r5, #3
 800151c:	421d      	tst	r5, r3
 800151e:	d103      	bne.n	8001528 <__aeabi_dadd+0x288>
 8001520:	002a      	movs	r2, r5
 8001522:	08ff      	lsrs	r7, r7, #3
 8001524:	0748      	lsls	r0, r1, #29
 8001526:	4338      	orrs	r0, r7
 8001528:	0f43      	lsrs	r3, r0, #29
 800152a:	00c1      	lsls	r1, r0, #3
 800152c:	075b      	lsls	r3, r3, #29
 800152e:	08c9      	lsrs	r1, r1, #3
 8001530:	4319      	orrs	r1, r3
 8001532:	0013      	movs	r3, r2
 8001534:	000a      	movs	r2, r1
 8001536:	431a      	orrs	r2, r3
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x29c>
 800153a:	e213      	b.n	8001964 <__aeabi_dadd+0x6c4>
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	0312      	lsls	r2, r2, #12
 8001540:	4313      	orrs	r3, r2
 8001542:	031b      	lsls	r3, r3, #12
 8001544:	4a33      	ldr	r2, [pc, #204]	; (8001614 <__aeabi_dadd+0x374>)
 8001546:	0b1b      	lsrs	r3, r3, #12
 8001548:	e744      	b.n	80013d4 <__aeabi_dadd+0x134>
 800154a:	2a00      	cmp	r2, #0
 800154c:	d04b      	beq.n	80015e6 <__aeabi_dadd+0x346>
 800154e:	1b8a      	subs	r2, r1, r6
 8001550:	2e00      	cmp	r6, #0
 8001552:	d100      	bne.n	8001556 <__aeabi_dadd+0x2b6>
 8001554:	e0e7      	b.n	8001726 <__aeabi_dadd+0x486>
 8001556:	482f      	ldr	r0, [pc, #188]	; (8001614 <__aeabi_dadd+0x374>)
 8001558:	4281      	cmp	r1, r0
 800155a:	d100      	bne.n	800155e <__aeabi_dadd+0x2be>
 800155c:	e195      	b.n	800188a <__aeabi_dadd+0x5ea>
 800155e:	2080      	movs	r0, #128	; 0x80
 8001560:	0400      	lsls	r0, r0, #16
 8001562:	4303      	orrs	r3, r0
 8001564:	2a38      	cmp	r2, #56	; 0x38
 8001566:	dd00      	ble.n	800156a <__aeabi_dadd+0x2ca>
 8001568:	e143      	b.n	80017f2 <__aeabi_dadd+0x552>
 800156a:	2a1f      	cmp	r2, #31
 800156c:	dd00      	ble.n	8001570 <__aeabi_dadd+0x2d0>
 800156e:	e1db      	b.n	8001928 <__aeabi_dadd+0x688>
 8001570:	2020      	movs	r0, #32
 8001572:	001d      	movs	r5, r3
 8001574:	464e      	mov	r6, r9
 8001576:	1a80      	subs	r0, r0, r2
 8001578:	4085      	lsls	r5, r0
 800157a:	40d6      	lsrs	r6, r2
 800157c:	4335      	orrs	r5, r6
 800157e:	464e      	mov	r6, r9
 8001580:	4086      	lsls	r6, r0
 8001582:	0030      	movs	r0, r6
 8001584:	40d3      	lsrs	r3, r2
 8001586:	1e46      	subs	r6, r0, #1
 8001588:	41b0      	sbcs	r0, r6
 800158a:	449c      	add	ip, r3
 800158c:	4305      	orrs	r5, r0
 800158e:	19ed      	adds	r5, r5, r7
 8001590:	42bd      	cmp	r5, r7
 8001592:	419b      	sbcs	r3, r3
 8001594:	425b      	negs	r3, r3
 8001596:	4463      	add	r3, ip
 8001598:	4698      	mov	r8, r3
 800159a:	000e      	movs	r6, r1
 800159c:	e07f      	b.n	800169e <__aeabi_dadd+0x3fe>
 800159e:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <__aeabi_dadd+0x378>)
 80015a0:	1a76      	subs	r6, r6, r1
 80015a2:	4013      	ands	r3, r2
 80015a4:	4698      	mov	r8, r3
 80015a6:	e6f5      	b.n	8001394 <__aeabi_dadd+0xf4>
 80015a8:	0028      	movs	r0, r5
 80015aa:	f001 fd61 	bl	8003070 <__clzsi2>
 80015ae:	0001      	movs	r1, r0
 80015b0:	3118      	adds	r1, #24
 80015b2:	291f      	cmp	r1, #31
 80015b4:	dc00      	bgt.n	80015b8 <__aeabi_dadd+0x318>
 80015b6:	e6cf      	b.n	8001358 <__aeabi_dadd+0xb8>
 80015b8:	002b      	movs	r3, r5
 80015ba:	3808      	subs	r0, #8
 80015bc:	4083      	lsls	r3, r0
 80015be:	2500      	movs	r5, #0
 80015c0:	e6d2      	b.n	8001368 <__aeabi_dadd+0xc8>
 80015c2:	4662      	mov	r2, ip
 80015c4:	433a      	orrs	r2, r7
 80015c6:	0011      	movs	r1, r2
 80015c8:	1e4f      	subs	r7, r1, #1
 80015ca:	41b9      	sbcs	r1, r7
 80015cc:	e6ac      	b.n	8001328 <__aeabi_dadd+0x88>
 80015ce:	4649      	mov	r1, r9
 80015d0:	0758      	lsls	r0, r3, #29
 80015d2:	08c9      	lsrs	r1, r1, #3
 80015d4:	4301      	orrs	r1, r0
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	e787      	b.n	80014ea <__aeabi_dadd+0x24a>
 80015da:	4649      	mov	r1, r9
 80015dc:	075a      	lsls	r2, r3, #29
 80015de:	08c9      	lsrs	r1, r1, #3
 80015e0:	4311      	orrs	r1, r2
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	e7a6      	b.n	8001534 <__aeabi_dadd+0x294>
 80015e6:	490d      	ldr	r1, [pc, #52]	; (800161c <__aeabi_dadd+0x37c>)
 80015e8:	1c70      	adds	r0, r6, #1
 80015ea:	4208      	tst	r0, r1
 80015ec:	d000      	beq.n	80015f0 <__aeabi_dadd+0x350>
 80015ee:	e0bb      	b.n	8001768 <__aeabi_dadd+0x4c8>
 80015f0:	2e00      	cmp	r6, #0
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x356>
 80015f4:	e114      	b.n	8001820 <__aeabi_dadd+0x580>
 80015f6:	4649      	mov	r1, r9
 80015f8:	4319      	orrs	r1, r3
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0x35e>
 80015fc:	e175      	b.n	80018ea <__aeabi_dadd+0x64a>
 80015fe:	0029      	movs	r1, r5
 8001600:	4339      	orrs	r1, r7
 8001602:	d000      	beq.n	8001606 <__aeabi_dadd+0x366>
 8001604:	e17e      	b.n	8001904 <__aeabi_dadd+0x664>
 8001606:	4649      	mov	r1, r9
 8001608:	0758      	lsls	r0, r3, #29
 800160a:	08c9      	lsrs	r1, r1, #3
 800160c:	4301      	orrs	r1, r0
 800160e:	08db      	lsrs	r3, r3, #3
 8001610:	e76e      	b.n	80014f0 <__aeabi_dadd+0x250>
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	000007ff 	.word	0x000007ff
 8001618:	ff7fffff 	.word	0xff7fffff
 800161c:	000007fe 	.word	0x000007fe
 8001620:	4649      	mov	r1, r9
 8001622:	1bcd      	subs	r5, r1, r7
 8001624:	4661      	mov	r1, ip
 8001626:	1a58      	subs	r0, r3, r1
 8001628:	45a9      	cmp	r9, r5
 800162a:	4189      	sbcs	r1, r1
 800162c:	4249      	negs	r1, r1
 800162e:	4688      	mov	r8, r1
 8001630:	0001      	movs	r1, r0
 8001632:	4640      	mov	r0, r8
 8001634:	1a09      	subs	r1, r1, r0
 8001636:	4688      	mov	r8, r1
 8001638:	0209      	lsls	r1, r1, #8
 800163a:	d500      	bpl.n	800163e <__aeabi_dadd+0x39e>
 800163c:	e0a6      	b.n	800178c <__aeabi_dadd+0x4ec>
 800163e:	4641      	mov	r1, r8
 8001640:	4329      	orrs	r1, r5
 8001642:	d000      	beq.n	8001646 <__aeabi_dadd+0x3a6>
 8001644:	e67f      	b.n	8001346 <__aeabi_dadd+0xa6>
 8001646:	2300      	movs	r3, #0
 8001648:	2400      	movs	r4, #0
 800164a:	e751      	b.n	80014f0 <__aeabi_dadd+0x250>
 800164c:	4cc7      	ldr	r4, [pc, #796]	; (800196c <__aeabi_dadd+0x6cc>)
 800164e:	42a1      	cmp	r1, r4
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x3b4>
 8001652:	e0c7      	b.n	80017e4 <__aeabi_dadd+0x544>
 8001654:	2480      	movs	r4, #128	; 0x80
 8001656:	0424      	lsls	r4, r4, #16
 8001658:	4323      	orrs	r3, r4
 800165a:	2a38      	cmp	r2, #56	; 0x38
 800165c:	dc54      	bgt.n	8001708 <__aeabi_dadd+0x468>
 800165e:	2a1f      	cmp	r2, #31
 8001660:	dd00      	ble.n	8001664 <__aeabi_dadd+0x3c4>
 8001662:	e0cc      	b.n	80017fe <__aeabi_dadd+0x55e>
 8001664:	2420      	movs	r4, #32
 8001666:	4648      	mov	r0, r9
 8001668:	1aa4      	subs	r4, r4, r2
 800166a:	001d      	movs	r5, r3
 800166c:	464e      	mov	r6, r9
 800166e:	40a0      	lsls	r0, r4
 8001670:	40d6      	lsrs	r6, r2
 8001672:	40a5      	lsls	r5, r4
 8001674:	0004      	movs	r4, r0
 8001676:	40d3      	lsrs	r3, r2
 8001678:	4662      	mov	r2, ip
 800167a:	4335      	orrs	r5, r6
 800167c:	1e66      	subs	r6, r4, #1
 800167e:	41b4      	sbcs	r4, r6
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	469c      	mov	ip, r3
 8001684:	4325      	orrs	r5, r4
 8001686:	e044      	b.n	8001712 <__aeabi_dadd+0x472>
 8001688:	4662      	mov	r2, ip
 800168a:	433a      	orrs	r2, r7
 800168c:	0015      	movs	r5, r2
 800168e:	1e6f      	subs	r7, r5, #1
 8001690:	41bd      	sbcs	r5, r7
 8001692:	444d      	add	r5, r9
 8001694:	454d      	cmp	r5, r9
 8001696:	4189      	sbcs	r1, r1
 8001698:	4249      	negs	r1, r1
 800169a:	4688      	mov	r8, r1
 800169c:	4498      	add	r8, r3
 800169e:	4643      	mov	r3, r8
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	d400      	bmi.n	80016a6 <__aeabi_dadd+0x406>
 80016a4:	e718      	b.n	80014d8 <__aeabi_dadd+0x238>
 80016a6:	4bb1      	ldr	r3, [pc, #708]	; (800196c <__aeabi_dadd+0x6cc>)
 80016a8:	3601      	adds	r6, #1
 80016aa:	429e      	cmp	r6, r3
 80016ac:	d049      	beq.n	8001742 <__aeabi_dadd+0x4a2>
 80016ae:	4642      	mov	r2, r8
 80016b0:	4baf      	ldr	r3, [pc, #700]	; (8001970 <__aeabi_dadd+0x6d0>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	401a      	ands	r2, r3
 80016b6:	0013      	movs	r3, r2
 80016b8:	086a      	lsrs	r2, r5, #1
 80016ba:	400d      	ands	r5, r1
 80016bc:	4315      	orrs	r5, r2
 80016be:	07d9      	lsls	r1, r3, #31
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	4698      	mov	r8, r3
 80016c4:	430d      	orrs	r5, r1
 80016c6:	e665      	b.n	8001394 <__aeabi_dadd+0xf4>
 80016c8:	0018      	movs	r0, r3
 80016ca:	3e1f      	subs	r6, #31
 80016cc:	40f0      	lsrs	r0, r6
 80016ce:	2a20      	cmp	r2, #32
 80016d0:	d003      	beq.n	80016da <__aeabi_dadd+0x43a>
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	1a8a      	subs	r2, r1, r2
 80016d6:	4093      	lsls	r3, r2
 80016d8:	431d      	orrs	r5, r3
 80016da:	1e69      	subs	r1, r5, #1
 80016dc:	418d      	sbcs	r5, r1
 80016de:	2300      	movs	r3, #0
 80016e0:	2600      	movs	r6, #0
 80016e2:	4698      	mov	r8, r3
 80016e4:	4305      	orrs	r5, r0
 80016e6:	e6f7      	b.n	80014d8 <__aeabi_dadd+0x238>
 80016e8:	0011      	movs	r1, r2
 80016ea:	4665      	mov	r5, ip
 80016ec:	3920      	subs	r1, #32
 80016ee:	40cd      	lsrs	r5, r1
 80016f0:	2a20      	cmp	r2, #32
 80016f2:	d004      	beq.n	80016fe <__aeabi_dadd+0x45e>
 80016f4:	2040      	movs	r0, #64	; 0x40
 80016f6:	4661      	mov	r1, ip
 80016f8:	1a82      	subs	r2, r0, r2
 80016fa:	4091      	lsls	r1, r2
 80016fc:	430f      	orrs	r7, r1
 80016fe:	0039      	movs	r1, r7
 8001700:	1e4f      	subs	r7, r1, #1
 8001702:	41b9      	sbcs	r1, r7
 8001704:	4329      	orrs	r1, r5
 8001706:	e60f      	b.n	8001328 <__aeabi_dadd+0x88>
 8001708:	464a      	mov	r2, r9
 800170a:	4313      	orrs	r3, r2
 800170c:	001d      	movs	r5, r3
 800170e:	1e6b      	subs	r3, r5, #1
 8001710:	419d      	sbcs	r5, r3
 8001712:	1b7d      	subs	r5, r7, r5
 8001714:	42af      	cmp	r7, r5
 8001716:	419b      	sbcs	r3, r3
 8001718:	4662      	mov	r2, ip
 800171a:	425b      	negs	r3, r3
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	4698      	mov	r8, r3
 8001720:	4654      	mov	r4, sl
 8001722:	000e      	movs	r6, r1
 8001724:	e607      	b.n	8001336 <__aeabi_dadd+0x96>
 8001726:	4648      	mov	r0, r9
 8001728:	4318      	orrs	r0, r3
 800172a:	d100      	bne.n	800172e <__aeabi_dadd+0x48e>
 800172c:	e0b3      	b.n	8001896 <__aeabi_dadd+0x5f6>
 800172e:	1e50      	subs	r0, r2, #1
 8001730:	2a01      	cmp	r2, #1
 8001732:	d100      	bne.n	8001736 <__aeabi_dadd+0x496>
 8001734:	e10d      	b.n	8001952 <__aeabi_dadd+0x6b2>
 8001736:	4d8d      	ldr	r5, [pc, #564]	; (800196c <__aeabi_dadd+0x6cc>)
 8001738:	42aa      	cmp	r2, r5
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x49e>
 800173c:	e0a5      	b.n	800188a <__aeabi_dadd+0x5ea>
 800173e:	0002      	movs	r2, r0
 8001740:	e710      	b.n	8001564 <__aeabi_dadd+0x2c4>
 8001742:	0032      	movs	r2, r6
 8001744:	2300      	movs	r3, #0
 8001746:	2100      	movs	r1, #0
 8001748:	e644      	b.n	80013d4 <__aeabi_dadd+0x134>
 800174a:	2120      	movs	r1, #32
 800174c:	0038      	movs	r0, r7
 800174e:	1a89      	subs	r1, r1, r2
 8001750:	4665      	mov	r5, ip
 8001752:	408f      	lsls	r7, r1
 8001754:	408d      	lsls	r5, r1
 8001756:	40d0      	lsrs	r0, r2
 8001758:	1e79      	subs	r1, r7, #1
 800175a:	418f      	sbcs	r7, r1
 800175c:	4305      	orrs	r5, r0
 800175e:	433d      	orrs	r5, r7
 8001760:	4667      	mov	r7, ip
 8001762:	40d7      	lsrs	r7, r2
 8001764:	19db      	adds	r3, r3, r7
 8001766:	e794      	b.n	8001692 <__aeabi_dadd+0x3f2>
 8001768:	4a80      	ldr	r2, [pc, #512]	; (800196c <__aeabi_dadd+0x6cc>)
 800176a:	4290      	cmp	r0, r2
 800176c:	d100      	bne.n	8001770 <__aeabi_dadd+0x4d0>
 800176e:	e0ec      	b.n	800194a <__aeabi_dadd+0x6aa>
 8001770:	0039      	movs	r1, r7
 8001772:	4449      	add	r1, r9
 8001774:	4549      	cmp	r1, r9
 8001776:	4192      	sbcs	r2, r2
 8001778:	4463      	add	r3, ip
 800177a:	4252      	negs	r2, r2
 800177c:	189b      	adds	r3, r3, r2
 800177e:	07dd      	lsls	r5, r3, #31
 8001780:	0849      	lsrs	r1, r1, #1
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	4698      	mov	r8, r3
 8001786:	0006      	movs	r6, r0
 8001788:	430d      	orrs	r5, r1
 800178a:	e6a5      	b.n	80014d8 <__aeabi_dadd+0x238>
 800178c:	464a      	mov	r2, r9
 800178e:	1abd      	subs	r5, r7, r2
 8001790:	42af      	cmp	r7, r5
 8001792:	4189      	sbcs	r1, r1
 8001794:	4662      	mov	r2, ip
 8001796:	4249      	negs	r1, r1
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	1a5b      	subs	r3, r3, r1
 800179c:	4698      	mov	r8, r3
 800179e:	4654      	mov	r4, sl
 80017a0:	e5d1      	b.n	8001346 <__aeabi_dadd+0xa6>
 80017a2:	076c      	lsls	r4, r5, #29
 80017a4:	08f9      	lsrs	r1, r7, #3
 80017a6:	4321      	orrs	r1, r4
 80017a8:	08eb      	lsrs	r3, r5, #3
 80017aa:	0004      	movs	r4, r0
 80017ac:	e69d      	b.n	80014ea <__aeabi_dadd+0x24a>
 80017ae:	464a      	mov	r2, r9
 80017b0:	431a      	orrs	r2, r3
 80017b2:	d175      	bne.n	80018a0 <__aeabi_dadd+0x600>
 80017b4:	4661      	mov	r1, ip
 80017b6:	4339      	orrs	r1, r7
 80017b8:	d114      	bne.n	80017e4 <__aeabi_dadd+0x544>
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	2400      	movs	r4, #0
 80017be:	031b      	lsls	r3, r3, #12
 80017c0:	e6bc      	b.n	800153c <__aeabi_dadd+0x29c>
 80017c2:	464a      	mov	r2, r9
 80017c4:	1bd5      	subs	r5, r2, r7
 80017c6:	45a9      	cmp	r9, r5
 80017c8:	4189      	sbcs	r1, r1
 80017ca:	4662      	mov	r2, ip
 80017cc:	4249      	negs	r1, r1
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	1a5b      	subs	r3, r3, r1
 80017d2:	4698      	mov	r8, r3
 80017d4:	2601      	movs	r6, #1
 80017d6:	e5ae      	b.n	8001336 <__aeabi_dadd+0x96>
 80017d8:	464a      	mov	r2, r9
 80017da:	08d1      	lsrs	r1, r2, #3
 80017dc:	075a      	lsls	r2, r3, #29
 80017de:	4311      	orrs	r1, r2
 80017e0:	08db      	lsrs	r3, r3, #3
 80017e2:	e6a7      	b.n	8001534 <__aeabi_dadd+0x294>
 80017e4:	4663      	mov	r3, ip
 80017e6:	08f9      	lsrs	r1, r7, #3
 80017e8:	075a      	lsls	r2, r3, #29
 80017ea:	4654      	mov	r4, sl
 80017ec:	4311      	orrs	r1, r2
 80017ee:	08db      	lsrs	r3, r3, #3
 80017f0:	e6a0      	b.n	8001534 <__aeabi_dadd+0x294>
 80017f2:	464a      	mov	r2, r9
 80017f4:	4313      	orrs	r3, r2
 80017f6:	001d      	movs	r5, r3
 80017f8:	1e6b      	subs	r3, r5, #1
 80017fa:	419d      	sbcs	r5, r3
 80017fc:	e6c7      	b.n	800158e <__aeabi_dadd+0x2ee>
 80017fe:	0014      	movs	r4, r2
 8001800:	001e      	movs	r6, r3
 8001802:	3c20      	subs	r4, #32
 8001804:	40e6      	lsrs	r6, r4
 8001806:	2a20      	cmp	r2, #32
 8001808:	d005      	beq.n	8001816 <__aeabi_dadd+0x576>
 800180a:	2440      	movs	r4, #64	; 0x40
 800180c:	1aa2      	subs	r2, r4, r2
 800180e:	4093      	lsls	r3, r2
 8001810:	464a      	mov	r2, r9
 8001812:	431a      	orrs	r2, r3
 8001814:	4691      	mov	r9, r2
 8001816:	464d      	mov	r5, r9
 8001818:	1e6b      	subs	r3, r5, #1
 800181a:	419d      	sbcs	r5, r3
 800181c:	4335      	orrs	r5, r6
 800181e:	e778      	b.n	8001712 <__aeabi_dadd+0x472>
 8001820:	464a      	mov	r2, r9
 8001822:	431a      	orrs	r2, r3
 8001824:	d000      	beq.n	8001828 <__aeabi_dadd+0x588>
 8001826:	e66b      	b.n	8001500 <__aeabi_dadd+0x260>
 8001828:	076b      	lsls	r3, r5, #29
 800182a:	08f9      	lsrs	r1, r7, #3
 800182c:	4319      	orrs	r1, r3
 800182e:	08eb      	lsrs	r3, r5, #3
 8001830:	e680      	b.n	8001534 <__aeabi_dadd+0x294>
 8001832:	4661      	mov	r1, ip
 8001834:	4339      	orrs	r1, r7
 8001836:	d054      	beq.n	80018e2 <__aeabi_dadd+0x642>
 8001838:	4663      	mov	r3, ip
 800183a:	08f9      	lsrs	r1, r7, #3
 800183c:	075c      	lsls	r4, r3, #29
 800183e:	4321      	orrs	r1, r4
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	0004      	movs	r4, r0
 8001844:	e654      	b.n	80014f0 <__aeabi_dadd+0x250>
 8001846:	464a      	mov	r2, r9
 8001848:	1abd      	subs	r5, r7, r2
 800184a:	42af      	cmp	r7, r5
 800184c:	4189      	sbcs	r1, r1
 800184e:	4662      	mov	r2, ip
 8001850:	4249      	negs	r1, r1
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	1a5b      	subs	r3, r3, r1
 8001856:	4698      	mov	r8, r3
 8001858:	0004      	movs	r4, r0
 800185a:	2601      	movs	r6, #1
 800185c:	e56b      	b.n	8001336 <__aeabi_dadd+0x96>
 800185e:	464a      	mov	r2, r9
 8001860:	1bd5      	subs	r5, r2, r7
 8001862:	45a9      	cmp	r9, r5
 8001864:	4189      	sbcs	r1, r1
 8001866:	4662      	mov	r2, ip
 8001868:	4249      	negs	r1, r1
 800186a:	1a9a      	subs	r2, r3, r2
 800186c:	1a52      	subs	r2, r2, r1
 800186e:	4690      	mov	r8, r2
 8001870:	0212      	lsls	r2, r2, #8
 8001872:	d532      	bpl.n	80018da <__aeabi_dadd+0x63a>
 8001874:	464a      	mov	r2, r9
 8001876:	1abd      	subs	r5, r7, r2
 8001878:	42af      	cmp	r7, r5
 800187a:	4189      	sbcs	r1, r1
 800187c:	4662      	mov	r2, ip
 800187e:	4249      	negs	r1, r1
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	1a5b      	subs	r3, r3, r1
 8001884:	4698      	mov	r8, r3
 8001886:	0004      	movs	r4, r0
 8001888:	e584      	b.n	8001394 <__aeabi_dadd+0xf4>
 800188a:	4663      	mov	r3, ip
 800188c:	08f9      	lsrs	r1, r7, #3
 800188e:	075a      	lsls	r2, r3, #29
 8001890:	4311      	orrs	r1, r2
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	e64e      	b.n	8001534 <__aeabi_dadd+0x294>
 8001896:	08f9      	lsrs	r1, r7, #3
 8001898:	0768      	lsls	r0, r5, #29
 800189a:	4301      	orrs	r1, r0
 800189c:	08eb      	lsrs	r3, r5, #3
 800189e:	e624      	b.n	80014ea <__aeabi_dadd+0x24a>
 80018a0:	4662      	mov	r2, ip
 80018a2:	433a      	orrs	r2, r7
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dadd+0x608>
 80018a6:	e698      	b.n	80015da <__aeabi_dadd+0x33a>
 80018a8:	464a      	mov	r2, r9
 80018aa:	08d1      	lsrs	r1, r2, #3
 80018ac:	075a      	lsls	r2, r3, #29
 80018ae:	4311      	orrs	r1, r2
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	031b      	lsls	r3, r3, #12
 80018b6:	421a      	tst	r2, r3
 80018b8:	d008      	beq.n	80018cc <__aeabi_dadd+0x62c>
 80018ba:	4660      	mov	r0, ip
 80018bc:	08c5      	lsrs	r5, r0, #3
 80018be:	421d      	tst	r5, r3
 80018c0:	d104      	bne.n	80018cc <__aeabi_dadd+0x62c>
 80018c2:	4654      	mov	r4, sl
 80018c4:	002a      	movs	r2, r5
 80018c6:	08f9      	lsrs	r1, r7, #3
 80018c8:	0743      	lsls	r3, r0, #29
 80018ca:	4319      	orrs	r1, r3
 80018cc:	0f4b      	lsrs	r3, r1, #29
 80018ce:	00c9      	lsls	r1, r1, #3
 80018d0:	075b      	lsls	r3, r3, #29
 80018d2:	08c9      	lsrs	r1, r1, #3
 80018d4:	4319      	orrs	r1, r3
 80018d6:	0013      	movs	r3, r2
 80018d8:	e62c      	b.n	8001534 <__aeabi_dadd+0x294>
 80018da:	4641      	mov	r1, r8
 80018dc:	4329      	orrs	r1, r5
 80018de:	d000      	beq.n	80018e2 <__aeabi_dadd+0x642>
 80018e0:	e5fa      	b.n	80014d8 <__aeabi_dadd+0x238>
 80018e2:	2300      	movs	r3, #0
 80018e4:	000a      	movs	r2, r1
 80018e6:	2400      	movs	r4, #0
 80018e8:	e602      	b.n	80014f0 <__aeabi_dadd+0x250>
 80018ea:	076b      	lsls	r3, r5, #29
 80018ec:	08f9      	lsrs	r1, r7, #3
 80018ee:	4319      	orrs	r1, r3
 80018f0:	08eb      	lsrs	r3, r5, #3
 80018f2:	e5fd      	b.n	80014f0 <__aeabi_dadd+0x250>
 80018f4:	4663      	mov	r3, ip
 80018f6:	08f9      	lsrs	r1, r7, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4319      	orrs	r1, r3
 80018fc:	4663      	mov	r3, ip
 80018fe:	0004      	movs	r4, r0
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	e617      	b.n	8001534 <__aeabi_dadd+0x294>
 8001904:	003d      	movs	r5, r7
 8001906:	444d      	add	r5, r9
 8001908:	4463      	add	r3, ip
 800190a:	454d      	cmp	r5, r9
 800190c:	4189      	sbcs	r1, r1
 800190e:	4698      	mov	r8, r3
 8001910:	4249      	negs	r1, r1
 8001912:	4488      	add	r8, r1
 8001914:	4643      	mov	r3, r8
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	d400      	bmi.n	800191c <__aeabi_dadd+0x67c>
 800191a:	e5dd      	b.n	80014d8 <__aeabi_dadd+0x238>
 800191c:	4642      	mov	r2, r8
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <__aeabi_dadd+0x6d0>)
 8001920:	2601      	movs	r6, #1
 8001922:	401a      	ands	r2, r3
 8001924:	4690      	mov	r8, r2
 8001926:	e5d7      	b.n	80014d8 <__aeabi_dadd+0x238>
 8001928:	0010      	movs	r0, r2
 800192a:	001e      	movs	r6, r3
 800192c:	3820      	subs	r0, #32
 800192e:	40c6      	lsrs	r6, r0
 8001930:	2a20      	cmp	r2, #32
 8001932:	d005      	beq.n	8001940 <__aeabi_dadd+0x6a0>
 8001934:	2040      	movs	r0, #64	; 0x40
 8001936:	1a82      	subs	r2, r0, r2
 8001938:	4093      	lsls	r3, r2
 800193a:	464a      	mov	r2, r9
 800193c:	431a      	orrs	r2, r3
 800193e:	4691      	mov	r9, r2
 8001940:	464d      	mov	r5, r9
 8001942:	1e6b      	subs	r3, r5, #1
 8001944:	419d      	sbcs	r5, r3
 8001946:	4335      	orrs	r5, r6
 8001948:	e621      	b.n	800158e <__aeabi_dadd+0x2ee>
 800194a:	0002      	movs	r2, r0
 800194c:	2300      	movs	r3, #0
 800194e:	2100      	movs	r1, #0
 8001950:	e540      	b.n	80013d4 <__aeabi_dadd+0x134>
 8001952:	464a      	mov	r2, r9
 8001954:	19d5      	adds	r5, r2, r7
 8001956:	42bd      	cmp	r5, r7
 8001958:	4189      	sbcs	r1, r1
 800195a:	4463      	add	r3, ip
 800195c:	4698      	mov	r8, r3
 800195e:	4249      	negs	r1, r1
 8001960:	4488      	add	r8, r1
 8001962:	e5b3      	b.n	80014cc <__aeabi_dadd+0x22c>
 8001964:	2100      	movs	r1, #0
 8001966:	4a01      	ldr	r2, [pc, #4]	; (800196c <__aeabi_dadd+0x6cc>)
 8001968:	000b      	movs	r3, r1
 800196a:	e533      	b.n	80013d4 <__aeabi_dadd+0x134>
 800196c:	000007ff 	.word	0x000007ff
 8001970:	ff7fffff 	.word	0xff7fffff

08001974 <__aeabi_ddiv>:
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	4657      	mov	r7, sl
 8001978:	464e      	mov	r6, r9
 800197a:	4645      	mov	r5, r8
 800197c:	46de      	mov	lr, fp
 800197e:	b5e0      	push	{r5, r6, r7, lr}
 8001980:	4681      	mov	r9, r0
 8001982:	0005      	movs	r5, r0
 8001984:	030c      	lsls	r4, r1, #12
 8001986:	0048      	lsls	r0, r1, #1
 8001988:	4692      	mov	sl, r2
 800198a:	001f      	movs	r7, r3
 800198c:	b085      	sub	sp, #20
 800198e:	0b24      	lsrs	r4, r4, #12
 8001990:	0d40      	lsrs	r0, r0, #21
 8001992:	0fce      	lsrs	r6, r1, #31
 8001994:	2800      	cmp	r0, #0
 8001996:	d059      	beq.n	8001a4c <__aeabi_ddiv+0xd8>
 8001998:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <__aeabi_ddiv+0x244>)
 800199a:	4298      	cmp	r0, r3
 800199c:	d100      	bne.n	80019a0 <__aeabi_ddiv+0x2c>
 800199e:	e098      	b.n	8001ad2 <__aeabi_ddiv+0x15e>
 80019a0:	0f6b      	lsrs	r3, r5, #29
 80019a2:	00e4      	lsls	r4, r4, #3
 80019a4:	431c      	orrs	r4, r3
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	4323      	orrs	r3, r4
 80019ac:	4698      	mov	r8, r3
 80019ae:	4b83      	ldr	r3, [pc, #524]	; (8001bbc <__aeabi_ddiv+0x248>)
 80019b0:	00ed      	lsls	r5, r5, #3
 80019b2:	469b      	mov	fp, r3
 80019b4:	2300      	movs	r3, #0
 80019b6:	4699      	mov	r9, r3
 80019b8:	4483      	add	fp, r0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	033c      	lsls	r4, r7, #12
 80019be:	007b      	lsls	r3, r7, #1
 80019c0:	4650      	mov	r0, sl
 80019c2:	0b24      	lsrs	r4, r4, #12
 80019c4:	0d5b      	lsrs	r3, r3, #21
 80019c6:	0fff      	lsrs	r7, r7, #31
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d067      	beq.n	8001a9c <__aeabi_ddiv+0x128>
 80019cc:	4a7a      	ldr	r2, [pc, #488]	; (8001bb8 <__aeabi_ddiv+0x244>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d018      	beq.n	8001a04 <__aeabi_ddiv+0x90>
 80019d2:	497a      	ldr	r1, [pc, #488]	; (8001bbc <__aeabi_ddiv+0x248>)
 80019d4:	0f42      	lsrs	r2, r0, #29
 80019d6:	468c      	mov	ip, r1
 80019d8:	00e4      	lsls	r4, r4, #3
 80019da:	4659      	mov	r1, fp
 80019dc:	4314      	orrs	r4, r2
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	4463      	add	r3, ip
 80019e2:	0412      	lsls	r2, r2, #16
 80019e4:	1acb      	subs	r3, r1, r3
 80019e6:	4314      	orrs	r4, r2
 80019e8:	469b      	mov	fp, r3
 80019ea:	00c2      	lsls	r2, r0, #3
 80019ec:	2000      	movs	r0, #0
 80019ee:	0033      	movs	r3, r6
 80019f0:	407b      	eors	r3, r7
 80019f2:	469a      	mov	sl, r3
 80019f4:	464b      	mov	r3, r9
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	d900      	bls.n	80019fc <__aeabi_ddiv+0x88>
 80019fa:	e0ef      	b.n	8001bdc <__aeabi_ddiv+0x268>
 80019fc:	4970      	ldr	r1, [pc, #448]	; (8001bc0 <__aeabi_ddiv+0x24c>)
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	58cb      	ldr	r3, [r1, r3]
 8001a02:	469f      	mov	pc, r3
 8001a04:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <__aeabi_ddiv+0x250>)
 8001a06:	4652      	mov	r2, sl
 8001a08:	469c      	mov	ip, r3
 8001a0a:	4322      	orrs	r2, r4
 8001a0c:	44e3      	add	fp, ip
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d000      	beq.n	8001a14 <__aeabi_ddiv+0xa0>
 8001a12:	e095      	b.n	8001b40 <__aeabi_ddiv+0x1cc>
 8001a14:	4649      	mov	r1, r9
 8001a16:	2302      	movs	r3, #2
 8001a18:	4319      	orrs	r1, r3
 8001a1a:	4689      	mov	r9, r1
 8001a1c:	2400      	movs	r4, #0
 8001a1e:	2002      	movs	r0, #2
 8001a20:	e7e5      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001a22:	2300      	movs	r3, #0
 8001a24:	2400      	movs	r4, #0
 8001a26:	2500      	movs	r5, #0
 8001a28:	4652      	mov	r2, sl
 8001a2a:	051b      	lsls	r3, r3, #20
 8001a2c:	4323      	orrs	r3, r4
 8001a2e:	07d2      	lsls	r2, r2, #31
 8001a30:	4313      	orrs	r3, r2
 8001a32:	0028      	movs	r0, r5
 8001a34:	0019      	movs	r1, r3
 8001a36:	b005      	add	sp, #20
 8001a38:	bcf0      	pop	{r4, r5, r6, r7}
 8001a3a:	46bb      	mov	fp, r7
 8001a3c:	46b2      	mov	sl, r6
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	46a0      	mov	r8, r4
 8001a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a44:	2400      	movs	r4, #0
 8001a46:	2500      	movs	r5, #0
 8001a48:	4b5b      	ldr	r3, [pc, #364]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001a4a:	e7ed      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001a4c:	464b      	mov	r3, r9
 8001a4e:	4323      	orrs	r3, r4
 8001a50:	4698      	mov	r8, r3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_ddiv+0xe2>
 8001a54:	e089      	b.n	8001b6a <__aeabi_ddiv+0x1f6>
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_ddiv+0xe8>
 8001a5a:	e1e0      	b.n	8001e1e <__aeabi_ddiv+0x4aa>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f001 fb07 	bl	8003070 <__clzsi2>
 8001a62:	0001      	movs	r1, r0
 8001a64:	0002      	movs	r2, r0
 8001a66:	390b      	subs	r1, #11
 8001a68:	231d      	movs	r3, #29
 8001a6a:	1a5b      	subs	r3, r3, r1
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	0010      	movs	r0, r2
 8001a70:	40d9      	lsrs	r1, r3
 8001a72:	3808      	subs	r0, #8
 8001a74:	4084      	lsls	r4, r0
 8001a76:	000b      	movs	r3, r1
 8001a78:	464d      	mov	r5, r9
 8001a7a:	4323      	orrs	r3, r4
 8001a7c:	4698      	mov	r8, r3
 8001a7e:	4085      	lsls	r5, r0
 8001a80:	4851      	ldr	r0, [pc, #324]	; (8001bc8 <__aeabi_ddiv+0x254>)
 8001a82:	033c      	lsls	r4, r7, #12
 8001a84:	1a83      	subs	r3, r0, r2
 8001a86:	469b      	mov	fp, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	007b      	lsls	r3, r7, #1
 8001a90:	4650      	mov	r0, sl
 8001a92:	0b24      	lsrs	r4, r4, #12
 8001a94:	0d5b      	lsrs	r3, r3, #21
 8001a96:	0fff      	lsrs	r7, r7, #31
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d197      	bne.n	80019cc <__aeabi_ddiv+0x58>
 8001a9c:	4652      	mov	r2, sl
 8001a9e:	4322      	orrs	r2, r4
 8001aa0:	d055      	beq.n	8001b4e <__aeabi_ddiv+0x1da>
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_ddiv+0x134>
 8001aa6:	e1ca      	b.n	8001e3e <__aeabi_ddiv+0x4ca>
 8001aa8:	0020      	movs	r0, r4
 8001aaa:	f001 fae1 	bl	8003070 <__clzsi2>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	3a0b      	subs	r2, #11
 8001ab2:	231d      	movs	r3, #29
 8001ab4:	0001      	movs	r1, r0
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	4652      	mov	r2, sl
 8001aba:	3908      	subs	r1, #8
 8001abc:	40da      	lsrs	r2, r3
 8001abe:	408c      	lsls	r4, r1
 8001ac0:	4314      	orrs	r4, r2
 8001ac2:	4652      	mov	r2, sl
 8001ac4:	408a      	lsls	r2, r1
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <__aeabi_ddiv+0x258>)
 8001ac8:	4458      	add	r0, fp
 8001aca:	469b      	mov	fp, r3
 8001acc:	4483      	add	fp, r0
 8001ace:	2000      	movs	r0, #0
 8001ad0:	e78d      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	4323      	orrs	r3, r4
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	d140      	bne.n	8001b5c <__aeabi_ddiv+0x1e8>
 8001ada:	2308      	movs	r3, #8
 8001adc:	4699      	mov	r9, r3
 8001ade:	3b06      	subs	r3, #6
 8001ae0:	2500      	movs	r5, #0
 8001ae2:	4683      	mov	fp, r0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	e769      	b.n	80019bc <__aeabi_ddiv+0x48>
 8001ae8:	46b2      	mov	sl, r6
 8001aea:	9b00      	ldr	r3, [sp, #0]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d0a9      	beq.n	8001a44 <__aeabi_ddiv+0xd0>
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d100      	bne.n	8001af6 <__aeabi_ddiv+0x182>
 8001af4:	e211      	b.n	8001f1a <__aeabi_ddiv+0x5a6>
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d093      	beq.n	8001a22 <__aeabi_ddiv+0xae>
 8001afa:	4a35      	ldr	r2, [pc, #212]	; (8001bd0 <__aeabi_ddiv+0x25c>)
 8001afc:	445a      	add	r2, fp
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	dc00      	bgt.n	8001b04 <__aeabi_ddiv+0x190>
 8001b02:	e13c      	b.n	8001d7e <__aeabi_ddiv+0x40a>
 8001b04:	076b      	lsls	r3, r5, #29
 8001b06:	d000      	beq.n	8001b0a <__aeabi_ddiv+0x196>
 8001b08:	e1a7      	b.n	8001e5a <__aeabi_ddiv+0x4e6>
 8001b0a:	08ed      	lsrs	r5, r5, #3
 8001b0c:	4643      	mov	r3, r8
 8001b0e:	01db      	lsls	r3, r3, #7
 8001b10:	d506      	bpl.n	8001b20 <__aeabi_ddiv+0x1ac>
 8001b12:	4642      	mov	r2, r8
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <__aeabi_ddiv+0x260>)
 8001b16:	401a      	ands	r2, r3
 8001b18:	4690      	mov	r8, r2
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	00d2      	lsls	r2, r2, #3
 8001b1e:	445a      	add	r2, fp
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <__aeabi_ddiv+0x264>)
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dc8e      	bgt.n	8001a44 <__aeabi_ddiv+0xd0>
 8001b26:	4643      	mov	r3, r8
 8001b28:	0552      	lsls	r2, r2, #21
 8001b2a:	0758      	lsls	r0, r3, #29
 8001b2c:	025c      	lsls	r4, r3, #9
 8001b2e:	4305      	orrs	r5, r0
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d53      	lsrs	r3, r2, #21
 8001b34:	e778      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001b36:	46ba      	mov	sl, r7
 8001b38:	46a0      	mov	r8, r4
 8001b3a:	0015      	movs	r5, r2
 8001b3c:	9000      	str	r0, [sp, #0]
 8001b3e:	e7d4      	b.n	8001aea <__aeabi_ddiv+0x176>
 8001b40:	464a      	mov	r2, r9
 8001b42:	2303      	movs	r3, #3
 8001b44:	431a      	orrs	r2, r3
 8001b46:	4691      	mov	r9, r2
 8001b48:	2003      	movs	r0, #3
 8001b4a:	4652      	mov	r2, sl
 8001b4c:	e74f      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001b4e:	4649      	mov	r1, r9
 8001b50:	2301      	movs	r3, #1
 8001b52:	4319      	orrs	r1, r3
 8001b54:	4689      	mov	r9, r1
 8001b56:	2400      	movs	r4, #0
 8001b58:	2001      	movs	r0, #1
 8001b5a:	e748      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	4699      	mov	r9, r3
 8001b60:	3b09      	subs	r3, #9
 8001b62:	46a0      	mov	r8, r4
 8001b64:	4683      	mov	fp, r0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	e728      	b.n	80019bc <__aeabi_ddiv+0x48>
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	2300      	movs	r3, #0
 8001b70:	469b      	mov	fp, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	2500      	movs	r5, #0
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	e720      	b.n	80019bc <__aeabi_ddiv+0x48>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	2480      	movs	r4, #128	; 0x80
 8001b7e:	469a      	mov	sl, r3
 8001b80:	2500      	movs	r5, #0
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001b84:	0324      	lsls	r4, r4, #12
 8001b86:	e74f      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	4641      	mov	r1, r8
 8001b8c:	031b      	lsls	r3, r3, #12
 8001b8e:	4219      	tst	r1, r3
 8001b90:	d008      	beq.n	8001ba4 <__aeabi_ddiv+0x230>
 8001b92:	421c      	tst	r4, r3
 8001b94:	d106      	bne.n	8001ba4 <__aeabi_ddiv+0x230>
 8001b96:	431c      	orrs	r4, r3
 8001b98:	0324      	lsls	r4, r4, #12
 8001b9a:	46ba      	mov	sl, r7
 8001b9c:	0015      	movs	r5, r2
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001ba0:	0b24      	lsrs	r4, r4, #12
 8001ba2:	e741      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001ba4:	2480      	movs	r4, #128	; 0x80
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	0324      	lsls	r4, r4, #12
 8001baa:	431c      	orrs	r4, r3
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	46b2      	mov	sl, r6
 8001bb0:	4b01      	ldr	r3, [pc, #4]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e738      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	000007ff 	.word	0x000007ff
 8001bbc:	fffffc01 	.word	0xfffffc01
 8001bc0:	080120ec 	.word	0x080120ec
 8001bc4:	fffff801 	.word	0xfffff801
 8001bc8:	fffffc0d 	.word	0xfffffc0d
 8001bcc:	000003f3 	.word	0x000003f3
 8001bd0:	000003ff 	.word	0x000003ff
 8001bd4:	feffffff 	.word	0xfeffffff
 8001bd8:	000007fe 	.word	0x000007fe
 8001bdc:	4544      	cmp	r4, r8
 8001bde:	d200      	bcs.n	8001be2 <__aeabi_ddiv+0x26e>
 8001be0:	e116      	b.n	8001e10 <__aeabi_ddiv+0x49c>
 8001be2:	d100      	bne.n	8001be6 <__aeabi_ddiv+0x272>
 8001be4:	e111      	b.n	8001e0a <__aeabi_ddiv+0x496>
 8001be6:	2301      	movs	r3, #1
 8001be8:	425b      	negs	r3, r3
 8001bea:	469c      	mov	ip, r3
 8001bec:	002e      	movs	r6, r5
 8001bee:	4640      	mov	r0, r8
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	44e3      	add	fp, ip
 8001bf4:	0223      	lsls	r3, r4, #8
 8001bf6:	0e14      	lsrs	r4, r2, #24
 8001bf8:	431c      	orrs	r4, r3
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	0423      	lsls	r3, r4, #16
 8001c00:	0c1f      	lsrs	r7, r3, #16
 8001c02:	0212      	lsls	r2, r2, #8
 8001c04:	4649      	mov	r1, r9
 8001c06:	9200      	str	r2, [sp, #0]
 8001c08:	9701      	str	r7, [sp, #4]
 8001c0a:	f7fe fb1b 	bl	8000244 <__aeabi_uidivmod>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	437a      	muls	r2, r7
 8001c12:	040b      	lsls	r3, r1, #16
 8001c14:	0c31      	lsrs	r1, r6, #16
 8001c16:	4680      	mov	r8, r0
 8001c18:	4319      	orrs	r1, r3
 8001c1a:	428a      	cmp	r2, r1
 8001c1c:	d90b      	bls.n	8001c36 <__aeabi_ddiv+0x2c2>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	425b      	negs	r3, r3
 8001c22:	469c      	mov	ip, r3
 8001c24:	1909      	adds	r1, r1, r4
 8001c26:	44e0      	add	r8, ip
 8001c28:	428c      	cmp	r4, r1
 8001c2a:	d804      	bhi.n	8001c36 <__aeabi_ddiv+0x2c2>
 8001c2c:	428a      	cmp	r2, r1
 8001c2e:	d902      	bls.n	8001c36 <__aeabi_ddiv+0x2c2>
 8001c30:	1e83      	subs	r3, r0, #2
 8001c32:	4698      	mov	r8, r3
 8001c34:	1909      	adds	r1, r1, r4
 8001c36:	1a88      	subs	r0, r1, r2
 8001c38:	4649      	mov	r1, r9
 8001c3a:	f7fe fb03 	bl	8000244 <__aeabi_uidivmod>
 8001c3e:	0409      	lsls	r1, r1, #16
 8001c40:	468c      	mov	ip, r1
 8001c42:	0431      	lsls	r1, r6, #16
 8001c44:	4666      	mov	r6, ip
 8001c46:	9a01      	ldr	r2, [sp, #4]
 8001c48:	0c09      	lsrs	r1, r1, #16
 8001c4a:	4342      	muls	r2, r0
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	4331      	orrs	r1, r6
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d904      	bls.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001c54:	1909      	adds	r1, r1, r4
 8001c56:	3b01      	subs	r3, #1
 8001c58:	428c      	cmp	r4, r1
 8001c5a:	d800      	bhi.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001c5c:	e111      	b.n	8001e82 <__aeabi_ddiv+0x50e>
 8001c5e:	1a89      	subs	r1, r1, r2
 8001c60:	4642      	mov	r2, r8
 8001c62:	9e00      	ldr	r6, [sp, #0]
 8001c64:	0412      	lsls	r2, r2, #16
 8001c66:	431a      	orrs	r2, r3
 8001c68:	0c33      	lsrs	r3, r6, #16
 8001c6a:	001f      	movs	r7, r3
 8001c6c:	0c10      	lsrs	r0, r2, #16
 8001c6e:	4690      	mov	r8, r2
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	0413      	lsls	r3, r2, #16
 8001c74:	0432      	lsls	r2, r6, #16
 8001c76:	0c16      	lsrs	r6, r2, #16
 8001c78:	0032      	movs	r2, r6
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	435a      	muls	r2, r3
 8001c7e:	9603      	str	r6, [sp, #12]
 8001c80:	437b      	muls	r3, r7
 8001c82:	4346      	muls	r6, r0
 8001c84:	4378      	muls	r0, r7
 8001c86:	0c17      	lsrs	r7, r2, #16
 8001c88:	46bc      	mov	ip, r7
 8001c8a:	199b      	adds	r3, r3, r6
 8001c8c:	4463      	add	r3, ip
 8001c8e:	429e      	cmp	r6, r3
 8001c90:	d903      	bls.n	8001c9a <__aeabi_ddiv+0x326>
 8001c92:	2680      	movs	r6, #128	; 0x80
 8001c94:	0276      	lsls	r6, r6, #9
 8001c96:	46b4      	mov	ip, r6
 8001c98:	4460      	add	r0, ip
 8001c9a:	0c1e      	lsrs	r6, r3, #16
 8001c9c:	1830      	adds	r0, r6, r0
 8001c9e:	0416      	lsls	r6, r2, #16
 8001ca0:	041b      	lsls	r3, r3, #16
 8001ca2:	0c36      	lsrs	r6, r6, #16
 8001ca4:	199e      	adds	r6, r3, r6
 8001ca6:	4281      	cmp	r1, r0
 8001ca8:	d200      	bcs.n	8001cac <__aeabi_ddiv+0x338>
 8001caa:	e09c      	b.n	8001de6 <__aeabi_ddiv+0x472>
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001cae:	e097      	b.n	8001de0 <__aeabi_ddiv+0x46c>
 8001cb0:	1bae      	subs	r6, r5, r6
 8001cb2:	1a09      	subs	r1, r1, r0
 8001cb4:	42b5      	cmp	r5, r6
 8001cb6:	4180      	sbcs	r0, r0
 8001cb8:	4240      	negs	r0, r0
 8001cba:	1a08      	subs	r0, r1, r0
 8001cbc:	4284      	cmp	r4, r0
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_ddiv+0x34e>
 8001cc0:	e111      	b.n	8001ee6 <__aeabi_ddiv+0x572>
 8001cc2:	4649      	mov	r1, r9
 8001cc4:	f7fe fabe 	bl	8000244 <__aeabi_uidivmod>
 8001cc8:	9a01      	ldr	r2, [sp, #4]
 8001cca:	040b      	lsls	r3, r1, #16
 8001ccc:	4342      	muls	r2, r0
 8001cce:	0c31      	lsrs	r1, r6, #16
 8001cd0:	0005      	movs	r5, r0
 8001cd2:	4319      	orrs	r1, r3
 8001cd4:	428a      	cmp	r2, r1
 8001cd6:	d907      	bls.n	8001ce8 <__aeabi_ddiv+0x374>
 8001cd8:	1909      	adds	r1, r1, r4
 8001cda:	3d01      	subs	r5, #1
 8001cdc:	428c      	cmp	r4, r1
 8001cde:	d803      	bhi.n	8001ce8 <__aeabi_ddiv+0x374>
 8001ce0:	428a      	cmp	r2, r1
 8001ce2:	d901      	bls.n	8001ce8 <__aeabi_ddiv+0x374>
 8001ce4:	1e85      	subs	r5, r0, #2
 8001ce6:	1909      	adds	r1, r1, r4
 8001ce8:	1a88      	subs	r0, r1, r2
 8001cea:	4649      	mov	r1, r9
 8001cec:	f7fe faaa 	bl	8000244 <__aeabi_uidivmod>
 8001cf0:	0409      	lsls	r1, r1, #16
 8001cf2:	468c      	mov	ip, r1
 8001cf4:	0431      	lsls	r1, r6, #16
 8001cf6:	4666      	mov	r6, ip
 8001cf8:	9a01      	ldr	r2, [sp, #4]
 8001cfa:	0c09      	lsrs	r1, r1, #16
 8001cfc:	4342      	muls	r2, r0
 8001cfe:	0003      	movs	r3, r0
 8001d00:	4331      	orrs	r1, r6
 8001d02:	428a      	cmp	r2, r1
 8001d04:	d907      	bls.n	8001d16 <__aeabi_ddiv+0x3a2>
 8001d06:	1909      	adds	r1, r1, r4
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	428c      	cmp	r4, r1
 8001d0c:	d803      	bhi.n	8001d16 <__aeabi_ddiv+0x3a2>
 8001d0e:	428a      	cmp	r2, r1
 8001d10:	d901      	bls.n	8001d16 <__aeabi_ddiv+0x3a2>
 8001d12:	1e83      	subs	r3, r0, #2
 8001d14:	1909      	adds	r1, r1, r4
 8001d16:	9e03      	ldr	r6, [sp, #12]
 8001d18:	1a89      	subs	r1, r1, r2
 8001d1a:	0032      	movs	r2, r6
 8001d1c:	042d      	lsls	r5, r5, #16
 8001d1e:	431d      	orrs	r5, r3
 8001d20:	9f02      	ldr	r7, [sp, #8]
 8001d22:	042b      	lsls	r3, r5, #16
 8001d24:	0c1b      	lsrs	r3, r3, #16
 8001d26:	435a      	muls	r2, r3
 8001d28:	437b      	muls	r3, r7
 8001d2a:	469c      	mov	ip, r3
 8001d2c:	0c28      	lsrs	r0, r5, #16
 8001d2e:	4346      	muls	r6, r0
 8001d30:	0c13      	lsrs	r3, r2, #16
 8001d32:	44b4      	add	ip, r6
 8001d34:	4463      	add	r3, ip
 8001d36:	4378      	muls	r0, r7
 8001d38:	429e      	cmp	r6, r3
 8001d3a:	d903      	bls.n	8001d44 <__aeabi_ddiv+0x3d0>
 8001d3c:	2680      	movs	r6, #128	; 0x80
 8001d3e:	0276      	lsls	r6, r6, #9
 8001d40:	46b4      	mov	ip, r6
 8001d42:	4460      	add	r0, ip
 8001d44:	0c1e      	lsrs	r6, r3, #16
 8001d46:	0412      	lsls	r2, r2, #16
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	0c12      	lsrs	r2, r2, #16
 8001d4c:	1830      	adds	r0, r6, r0
 8001d4e:	189b      	adds	r3, r3, r2
 8001d50:	4281      	cmp	r1, r0
 8001d52:	d306      	bcc.n	8001d62 <__aeabi_ddiv+0x3ee>
 8001d54:	d002      	beq.n	8001d5c <__aeabi_ddiv+0x3e8>
 8001d56:	2301      	movs	r3, #1
 8001d58:	431d      	orrs	r5, r3
 8001d5a:	e6ce      	b.n	8001afa <__aeabi_ddiv+0x186>
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0x3ee>
 8001d60:	e6cb      	b.n	8001afa <__aeabi_ddiv+0x186>
 8001d62:	1861      	adds	r1, r4, r1
 8001d64:	1e6e      	subs	r6, r5, #1
 8001d66:	42a1      	cmp	r1, r4
 8001d68:	d200      	bcs.n	8001d6c <__aeabi_ddiv+0x3f8>
 8001d6a:	e0a4      	b.n	8001eb6 <__aeabi_ddiv+0x542>
 8001d6c:	4281      	cmp	r1, r0
 8001d6e:	d200      	bcs.n	8001d72 <__aeabi_ddiv+0x3fe>
 8001d70:	e0c9      	b.n	8001f06 <__aeabi_ddiv+0x592>
 8001d72:	d100      	bne.n	8001d76 <__aeabi_ddiv+0x402>
 8001d74:	e0d9      	b.n	8001f2a <__aeabi_ddiv+0x5b6>
 8001d76:	0035      	movs	r5, r6
 8001d78:	e7ed      	b.n	8001d56 <__aeabi_ddiv+0x3e2>
 8001d7a:	2501      	movs	r5, #1
 8001d7c:	426d      	negs	r5, r5
 8001d7e:	2101      	movs	r1, #1
 8001d80:	1a89      	subs	r1, r1, r2
 8001d82:	2938      	cmp	r1, #56	; 0x38
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_ddiv+0x414>
 8001d86:	e64c      	b.n	8001a22 <__aeabi_ddiv+0xae>
 8001d88:	291f      	cmp	r1, #31
 8001d8a:	dc00      	bgt.n	8001d8e <__aeabi_ddiv+0x41a>
 8001d8c:	e07f      	b.n	8001e8e <__aeabi_ddiv+0x51a>
 8001d8e:	231f      	movs	r3, #31
 8001d90:	425b      	negs	r3, r3
 8001d92:	1a9a      	subs	r2, r3, r2
 8001d94:	4643      	mov	r3, r8
 8001d96:	40d3      	lsrs	r3, r2
 8001d98:	2920      	cmp	r1, #32
 8001d9a:	d004      	beq.n	8001da6 <__aeabi_ddiv+0x432>
 8001d9c:	4644      	mov	r4, r8
 8001d9e:	4a65      	ldr	r2, [pc, #404]	; (8001f34 <__aeabi_ddiv+0x5c0>)
 8001da0:	445a      	add	r2, fp
 8001da2:	4094      	lsls	r4, r2
 8001da4:	4325      	orrs	r5, r4
 8001da6:	1e6a      	subs	r2, r5, #1
 8001da8:	4195      	sbcs	r5, r2
 8001daa:	2207      	movs	r2, #7
 8001dac:	432b      	orrs	r3, r5
 8001dae:	0015      	movs	r5, r2
 8001db0:	2400      	movs	r4, #0
 8001db2:	401d      	ands	r5, r3
 8001db4:	421a      	tst	r2, r3
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x446>
 8001db8:	e0a1      	b.n	8001efe <__aeabi_ddiv+0x58a>
 8001dba:	220f      	movs	r2, #15
 8001dbc:	2400      	movs	r4, #0
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	2a04      	cmp	r2, #4
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_ddiv+0x452>
 8001dc4:	e098      	b.n	8001ef8 <__aeabi_ddiv+0x584>
 8001dc6:	1d1a      	adds	r2, r3, #4
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	419b      	sbcs	r3, r3
 8001dcc:	425b      	negs	r3, r3
 8001dce:	18e4      	adds	r4, r4, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	0222      	lsls	r2, r4, #8
 8001dd4:	d400      	bmi.n	8001dd8 <__aeabi_ddiv+0x464>
 8001dd6:	e08f      	b.n	8001ef8 <__aeabi_ddiv+0x584>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2500      	movs	r5, #0
 8001dde:	e623      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001de0:	42b5      	cmp	r5, r6
 8001de2:	d300      	bcc.n	8001de6 <__aeabi_ddiv+0x472>
 8001de4:	e764      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001de6:	4643      	mov	r3, r8
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	9b00      	ldr	r3, [sp, #0]
 8001dec:	469c      	mov	ip, r3
 8001dee:	4465      	add	r5, ip
 8001df0:	001f      	movs	r7, r3
 8001df2:	429d      	cmp	r5, r3
 8001df4:	419b      	sbcs	r3, r3
 8001df6:	425b      	negs	r3, r3
 8001df8:	191b      	adds	r3, r3, r4
 8001dfa:	18c9      	adds	r1, r1, r3
 8001dfc:	428c      	cmp	r4, r1
 8001dfe:	d23a      	bcs.n	8001e76 <__aeabi_ddiv+0x502>
 8001e00:	4288      	cmp	r0, r1
 8001e02:	d863      	bhi.n	8001ecc <__aeabi_ddiv+0x558>
 8001e04:	d060      	beq.n	8001ec8 <__aeabi_ddiv+0x554>
 8001e06:	4690      	mov	r8, r2
 8001e08:	e752      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001e0a:	42aa      	cmp	r2, r5
 8001e0c:	d900      	bls.n	8001e10 <__aeabi_ddiv+0x49c>
 8001e0e:	e6ea      	b.n	8001be6 <__aeabi_ddiv+0x272>
 8001e10:	4643      	mov	r3, r8
 8001e12:	07de      	lsls	r6, r3, #31
 8001e14:	0858      	lsrs	r0, r3, #1
 8001e16:	086b      	lsrs	r3, r5, #1
 8001e18:	431e      	orrs	r6, r3
 8001e1a:	07ed      	lsls	r5, r5, #31
 8001e1c:	e6ea      	b.n	8001bf4 <__aeabi_ddiv+0x280>
 8001e1e:	4648      	mov	r0, r9
 8001e20:	f001 f926 	bl	8003070 <__clzsi2>
 8001e24:	0001      	movs	r1, r0
 8001e26:	0002      	movs	r2, r0
 8001e28:	3115      	adds	r1, #21
 8001e2a:	3220      	adds	r2, #32
 8001e2c:	291c      	cmp	r1, #28
 8001e2e:	dc00      	bgt.n	8001e32 <__aeabi_ddiv+0x4be>
 8001e30:	e61a      	b.n	8001a68 <__aeabi_ddiv+0xf4>
 8001e32:	464b      	mov	r3, r9
 8001e34:	3808      	subs	r0, #8
 8001e36:	4083      	lsls	r3, r0
 8001e38:	2500      	movs	r5, #0
 8001e3a:	4698      	mov	r8, r3
 8001e3c:	e620      	b.n	8001a80 <__aeabi_ddiv+0x10c>
 8001e3e:	f001 f917 	bl	8003070 <__clzsi2>
 8001e42:	0003      	movs	r3, r0
 8001e44:	001a      	movs	r2, r3
 8001e46:	3215      	adds	r2, #21
 8001e48:	3020      	adds	r0, #32
 8001e4a:	2a1c      	cmp	r2, #28
 8001e4c:	dc00      	bgt.n	8001e50 <__aeabi_ddiv+0x4dc>
 8001e4e:	e630      	b.n	8001ab2 <__aeabi_ddiv+0x13e>
 8001e50:	4654      	mov	r4, sl
 8001e52:	3b08      	subs	r3, #8
 8001e54:	2200      	movs	r2, #0
 8001e56:	409c      	lsls	r4, r3
 8001e58:	e635      	b.n	8001ac6 <__aeabi_ddiv+0x152>
 8001e5a:	230f      	movs	r3, #15
 8001e5c:	402b      	ands	r3, r5
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d100      	bne.n	8001e64 <__aeabi_ddiv+0x4f0>
 8001e62:	e652      	b.n	8001b0a <__aeabi_ddiv+0x196>
 8001e64:	2305      	movs	r3, #5
 8001e66:	425b      	negs	r3, r3
 8001e68:	42ab      	cmp	r3, r5
 8001e6a:	419b      	sbcs	r3, r3
 8001e6c:	3504      	adds	r5, #4
 8001e6e:	425b      	negs	r3, r3
 8001e70:	08ed      	lsrs	r5, r5, #3
 8001e72:	4498      	add	r8, r3
 8001e74:	e64a      	b.n	8001b0c <__aeabi_ddiv+0x198>
 8001e76:	428c      	cmp	r4, r1
 8001e78:	d1c5      	bne.n	8001e06 <__aeabi_ddiv+0x492>
 8001e7a:	42af      	cmp	r7, r5
 8001e7c:	d9c0      	bls.n	8001e00 <__aeabi_ddiv+0x48c>
 8001e7e:	4690      	mov	r8, r2
 8001e80:	e716      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001e82:	428a      	cmp	r2, r1
 8001e84:	d800      	bhi.n	8001e88 <__aeabi_ddiv+0x514>
 8001e86:	e6ea      	b.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001e88:	1e83      	subs	r3, r0, #2
 8001e8a:	1909      	adds	r1, r1, r4
 8001e8c:	e6e7      	b.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001e8e:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <__aeabi_ddiv+0x5c4>)
 8001e90:	0028      	movs	r0, r5
 8001e92:	445a      	add	r2, fp
 8001e94:	4643      	mov	r3, r8
 8001e96:	4095      	lsls	r5, r2
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	40c8      	lsrs	r0, r1
 8001e9c:	1e6a      	subs	r2, r5, #1
 8001e9e:	4195      	sbcs	r5, r2
 8001ea0:	4644      	mov	r4, r8
 8001ea2:	4303      	orrs	r3, r0
 8001ea4:	432b      	orrs	r3, r5
 8001ea6:	40cc      	lsrs	r4, r1
 8001ea8:	075a      	lsls	r2, r3, #29
 8001eaa:	d092      	beq.n	8001dd2 <__aeabi_ddiv+0x45e>
 8001eac:	220f      	movs	r2, #15
 8001eae:	401a      	ands	r2, r3
 8001eb0:	2a04      	cmp	r2, #4
 8001eb2:	d188      	bne.n	8001dc6 <__aeabi_ddiv+0x452>
 8001eb4:	e78d      	b.n	8001dd2 <__aeabi_ddiv+0x45e>
 8001eb6:	0035      	movs	r5, r6
 8001eb8:	4281      	cmp	r1, r0
 8001eba:	d000      	beq.n	8001ebe <__aeabi_ddiv+0x54a>
 8001ebc:	e74b      	b.n	8001d56 <__aeabi_ddiv+0x3e2>
 8001ebe:	9a00      	ldr	r2, [sp, #0]
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d000      	beq.n	8001ec6 <__aeabi_ddiv+0x552>
 8001ec4:	e747      	b.n	8001d56 <__aeabi_ddiv+0x3e2>
 8001ec6:	e618      	b.n	8001afa <__aeabi_ddiv+0x186>
 8001ec8:	42ae      	cmp	r6, r5
 8001eca:	d99c      	bls.n	8001e06 <__aeabi_ddiv+0x492>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	425b      	negs	r3, r3
 8001ed0:	469c      	mov	ip, r3
 8001ed2:	9b00      	ldr	r3, [sp, #0]
 8001ed4:	44e0      	add	r8, ip
 8001ed6:	469c      	mov	ip, r3
 8001ed8:	4465      	add	r5, ip
 8001eda:	429d      	cmp	r5, r3
 8001edc:	419b      	sbcs	r3, r3
 8001ede:	425b      	negs	r3, r3
 8001ee0:	191b      	adds	r3, r3, r4
 8001ee2:	18c9      	adds	r1, r1, r3
 8001ee4:	e6e4      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001ee6:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <__aeabi_ddiv+0x5c8>)
 8001ee8:	445a      	add	r2, fp
 8001eea:	2a00      	cmp	r2, #0
 8001eec:	dc00      	bgt.n	8001ef0 <__aeabi_ddiv+0x57c>
 8001eee:	e744      	b.n	8001d7a <__aeabi_ddiv+0x406>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	4498      	add	r8, r3
 8001ef6:	e609      	b.n	8001b0c <__aeabi_ddiv+0x198>
 8001ef8:	0765      	lsls	r5, r4, #29
 8001efa:	0264      	lsls	r4, r4, #9
 8001efc:	0b24      	lsrs	r4, r4, #12
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	431d      	orrs	r5, r3
 8001f02:	2300      	movs	r3, #0
 8001f04:	e590      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001f06:	9e00      	ldr	r6, [sp, #0]
 8001f08:	3d02      	subs	r5, #2
 8001f0a:	0072      	lsls	r2, r6, #1
 8001f0c:	42b2      	cmp	r2, r6
 8001f0e:	41bf      	sbcs	r7, r7
 8001f10:	427f      	negs	r7, r7
 8001f12:	193c      	adds	r4, r7, r4
 8001f14:	1909      	adds	r1, r1, r4
 8001f16:	9200      	str	r2, [sp, #0]
 8001f18:	e7ce      	b.n	8001eb8 <__aeabi_ddiv+0x544>
 8001f1a:	2480      	movs	r4, #128	; 0x80
 8001f1c:	4643      	mov	r3, r8
 8001f1e:	0324      	lsls	r4, r4, #12
 8001f20:	431c      	orrs	r4, r3
 8001f22:	0324      	lsls	r4, r4, #12
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <__aeabi_ddiv+0x5cc>)
 8001f26:	0b24      	lsrs	r4, r4, #12
 8001f28:	e57e      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001f2a:	9a00      	ldr	r2, [sp, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3ea      	bcc.n	8001f06 <__aeabi_ddiv+0x592>
 8001f30:	0035      	movs	r5, r6
 8001f32:	e7c4      	b.n	8001ebe <__aeabi_ddiv+0x54a>
 8001f34:	0000043e 	.word	0x0000043e
 8001f38:	0000041e 	.word	0x0000041e
 8001f3c:	000003ff 	.word	0x000003ff
 8001f40:	000007ff 	.word	0x000007ff

08001f44 <__eqdf2>:
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	464f      	mov	r7, r9
 8001f48:	4646      	mov	r6, r8
 8001f4a:	46d6      	mov	lr, sl
 8001f4c:	4694      	mov	ip, r2
 8001f4e:	4691      	mov	r9, r2
 8001f50:	031a      	lsls	r2, r3, #12
 8001f52:	0b12      	lsrs	r2, r2, #12
 8001f54:	4d18      	ldr	r5, [pc, #96]	; (8001fb8 <__eqdf2+0x74>)
 8001f56:	b5c0      	push	{r6, r7, lr}
 8001f58:	004c      	lsls	r4, r1, #1
 8001f5a:	030f      	lsls	r7, r1, #12
 8001f5c:	4692      	mov	sl, r2
 8001f5e:	005a      	lsls	r2, r3, #1
 8001f60:	0006      	movs	r6, r0
 8001f62:	4680      	mov	r8, r0
 8001f64:	0b3f      	lsrs	r7, r7, #12
 8001f66:	2001      	movs	r0, #1
 8001f68:	0d64      	lsrs	r4, r4, #21
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	0d52      	lsrs	r2, r2, #21
 8001f6e:	0fdb      	lsrs	r3, r3, #31
 8001f70:	42ac      	cmp	r4, r5
 8001f72:	d00a      	beq.n	8001f8a <__eqdf2+0x46>
 8001f74:	42aa      	cmp	r2, r5
 8001f76:	d003      	beq.n	8001f80 <__eqdf2+0x3c>
 8001f78:	4294      	cmp	r4, r2
 8001f7a:	d101      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f7c:	4557      	cmp	r7, sl
 8001f7e:	d00d      	beq.n	8001f9c <__eqdf2+0x58>
 8001f80:	bce0      	pop	{r5, r6, r7}
 8001f82:	46ba      	mov	sl, r7
 8001f84:	46b1      	mov	r9, r6
 8001f86:	46a8      	mov	r8, r5
 8001f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8a:	003d      	movs	r5, r7
 8001f8c:	4335      	orrs	r5, r6
 8001f8e:	d1f7      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f90:	42a2      	cmp	r2, r4
 8001f92:	d1f5      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f94:	4652      	mov	r2, sl
 8001f96:	4665      	mov	r5, ip
 8001f98:	432a      	orrs	r2, r5
 8001f9a:	d1f1      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	45c8      	cmp	r8, r9
 8001fa0:	d1ee      	bne.n	8001f80 <__eqdf2+0x3c>
 8001fa2:	4299      	cmp	r1, r3
 8001fa4:	d006      	beq.n	8001fb4 <__eqdf2+0x70>
 8001fa6:	2c00      	cmp	r4, #0
 8001fa8:	d1ea      	bne.n	8001f80 <__eqdf2+0x3c>
 8001faa:	433e      	orrs	r6, r7
 8001fac:	0030      	movs	r0, r6
 8001fae:	1e46      	subs	r6, r0, #1
 8001fb0:	41b0      	sbcs	r0, r6
 8001fb2:	e7e5      	b.n	8001f80 <__eqdf2+0x3c>
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	e7e3      	b.n	8001f80 <__eqdf2+0x3c>
 8001fb8:	000007ff 	.word	0x000007ff

08001fbc <__gedf2>:
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	464e      	mov	r6, r9
 8001fc0:	4645      	mov	r5, r8
 8001fc2:	4657      	mov	r7, sl
 8001fc4:	46de      	mov	lr, fp
 8001fc6:	0004      	movs	r4, r0
 8001fc8:	0018      	movs	r0, r3
 8001fca:	b5e0      	push	{r5, r6, r7, lr}
 8001fcc:	0016      	movs	r6, r2
 8001fce:	031b      	lsls	r3, r3, #12
 8001fd0:	0b1b      	lsrs	r3, r3, #12
 8001fd2:	4d32      	ldr	r5, [pc, #200]	; (800209c <__gedf2+0xe0>)
 8001fd4:	030f      	lsls	r7, r1, #12
 8001fd6:	004a      	lsls	r2, r1, #1
 8001fd8:	4699      	mov	r9, r3
 8001fda:	0043      	lsls	r3, r0, #1
 8001fdc:	46a4      	mov	ip, r4
 8001fde:	46b0      	mov	r8, r6
 8001fe0:	0b3f      	lsrs	r7, r7, #12
 8001fe2:	0d52      	lsrs	r2, r2, #21
 8001fe4:	0fc9      	lsrs	r1, r1, #31
 8001fe6:	0d5b      	lsrs	r3, r3, #21
 8001fe8:	0fc0      	lsrs	r0, r0, #31
 8001fea:	42aa      	cmp	r2, r5
 8001fec:	d029      	beq.n	8002042 <__gedf2+0x86>
 8001fee:	42ab      	cmp	r3, r5
 8001ff0:	d018      	beq.n	8002024 <__gedf2+0x68>
 8001ff2:	2a00      	cmp	r2, #0
 8001ff4:	d12a      	bne.n	800204c <__gedf2+0x90>
 8001ff6:	433c      	orrs	r4, r7
 8001ff8:	46a3      	mov	fp, r4
 8001ffa:	4265      	negs	r5, r4
 8001ffc:	4165      	adcs	r5, r4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <__gedf2+0x4c>
 8002002:	464c      	mov	r4, r9
 8002004:	4326      	orrs	r6, r4
 8002006:	d027      	beq.n	8002058 <__gedf2+0x9c>
 8002008:	2d00      	cmp	r5, #0
 800200a:	d115      	bne.n	8002038 <__gedf2+0x7c>
 800200c:	4281      	cmp	r1, r0
 800200e:	d028      	beq.n	8002062 <__gedf2+0xa6>
 8002010:	2002      	movs	r0, #2
 8002012:	3901      	subs	r1, #1
 8002014:	4008      	ands	r0, r1
 8002016:	3801      	subs	r0, #1
 8002018:	bcf0      	pop	{r4, r5, r6, r7}
 800201a:	46bb      	mov	fp, r7
 800201c:	46b2      	mov	sl, r6
 800201e:	46a9      	mov	r9, r5
 8002020:	46a0      	mov	r8, r4
 8002022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002024:	464d      	mov	r5, r9
 8002026:	432e      	orrs	r6, r5
 8002028:	d12f      	bne.n	800208a <__gedf2+0xce>
 800202a:	2a00      	cmp	r2, #0
 800202c:	d1ee      	bne.n	800200c <__gedf2+0x50>
 800202e:	433c      	orrs	r4, r7
 8002030:	4265      	negs	r5, r4
 8002032:	4165      	adcs	r5, r4
 8002034:	2d00      	cmp	r5, #0
 8002036:	d0e9      	beq.n	800200c <__gedf2+0x50>
 8002038:	2800      	cmp	r0, #0
 800203a:	d1ed      	bne.n	8002018 <__gedf2+0x5c>
 800203c:	2001      	movs	r0, #1
 800203e:	4240      	negs	r0, r0
 8002040:	e7ea      	b.n	8002018 <__gedf2+0x5c>
 8002042:	003d      	movs	r5, r7
 8002044:	4325      	orrs	r5, r4
 8002046:	d120      	bne.n	800208a <__gedf2+0xce>
 8002048:	4293      	cmp	r3, r2
 800204a:	d0eb      	beq.n	8002024 <__gedf2+0x68>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1dd      	bne.n	800200c <__gedf2+0x50>
 8002050:	464c      	mov	r4, r9
 8002052:	4326      	orrs	r6, r4
 8002054:	d1da      	bne.n	800200c <__gedf2+0x50>
 8002056:	e7db      	b.n	8002010 <__gedf2+0x54>
 8002058:	465b      	mov	r3, fp
 800205a:	2000      	movs	r0, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0db      	beq.n	8002018 <__gedf2+0x5c>
 8002060:	e7d6      	b.n	8002010 <__gedf2+0x54>
 8002062:	429a      	cmp	r2, r3
 8002064:	dc0a      	bgt.n	800207c <__gedf2+0xc0>
 8002066:	dbe7      	blt.n	8002038 <__gedf2+0x7c>
 8002068:	454f      	cmp	r7, r9
 800206a:	d8d1      	bhi.n	8002010 <__gedf2+0x54>
 800206c:	d010      	beq.n	8002090 <__gedf2+0xd4>
 800206e:	2000      	movs	r0, #0
 8002070:	454f      	cmp	r7, r9
 8002072:	d2d1      	bcs.n	8002018 <__gedf2+0x5c>
 8002074:	2900      	cmp	r1, #0
 8002076:	d0e1      	beq.n	800203c <__gedf2+0x80>
 8002078:	0008      	movs	r0, r1
 800207a:	e7cd      	b.n	8002018 <__gedf2+0x5c>
 800207c:	4243      	negs	r3, r0
 800207e:	4158      	adcs	r0, r3
 8002080:	2302      	movs	r3, #2
 8002082:	4240      	negs	r0, r0
 8002084:	4018      	ands	r0, r3
 8002086:	3801      	subs	r0, #1
 8002088:	e7c6      	b.n	8002018 <__gedf2+0x5c>
 800208a:	2002      	movs	r0, #2
 800208c:	4240      	negs	r0, r0
 800208e:	e7c3      	b.n	8002018 <__gedf2+0x5c>
 8002090:	45c4      	cmp	ip, r8
 8002092:	d8bd      	bhi.n	8002010 <__gedf2+0x54>
 8002094:	2000      	movs	r0, #0
 8002096:	45c4      	cmp	ip, r8
 8002098:	d2be      	bcs.n	8002018 <__gedf2+0x5c>
 800209a:	e7eb      	b.n	8002074 <__gedf2+0xb8>
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__ledf2>:
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	464e      	mov	r6, r9
 80020a4:	4645      	mov	r5, r8
 80020a6:	4657      	mov	r7, sl
 80020a8:	46de      	mov	lr, fp
 80020aa:	0004      	movs	r4, r0
 80020ac:	0018      	movs	r0, r3
 80020ae:	b5e0      	push	{r5, r6, r7, lr}
 80020b0:	0016      	movs	r6, r2
 80020b2:	031b      	lsls	r3, r3, #12
 80020b4:	0b1b      	lsrs	r3, r3, #12
 80020b6:	4d31      	ldr	r5, [pc, #196]	; (800217c <__ledf2+0xdc>)
 80020b8:	030f      	lsls	r7, r1, #12
 80020ba:	004a      	lsls	r2, r1, #1
 80020bc:	4699      	mov	r9, r3
 80020be:	0043      	lsls	r3, r0, #1
 80020c0:	46a4      	mov	ip, r4
 80020c2:	46b0      	mov	r8, r6
 80020c4:	0b3f      	lsrs	r7, r7, #12
 80020c6:	0d52      	lsrs	r2, r2, #21
 80020c8:	0fc9      	lsrs	r1, r1, #31
 80020ca:	0d5b      	lsrs	r3, r3, #21
 80020cc:	0fc0      	lsrs	r0, r0, #31
 80020ce:	42aa      	cmp	r2, r5
 80020d0:	d011      	beq.n	80020f6 <__ledf2+0x56>
 80020d2:	42ab      	cmp	r3, r5
 80020d4:	d014      	beq.n	8002100 <__ledf2+0x60>
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	d12f      	bne.n	800213a <__ledf2+0x9a>
 80020da:	433c      	orrs	r4, r7
 80020dc:	46a3      	mov	fp, r4
 80020de:	4265      	negs	r5, r4
 80020e0:	4165      	adcs	r5, r4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d114      	bne.n	8002110 <__ledf2+0x70>
 80020e6:	464c      	mov	r4, r9
 80020e8:	4326      	orrs	r6, r4
 80020ea:	d111      	bne.n	8002110 <__ledf2+0x70>
 80020ec:	465b      	mov	r3, fp
 80020ee:	2000      	movs	r0, #0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d017      	beq.n	8002124 <__ledf2+0x84>
 80020f4:	e010      	b.n	8002118 <__ledf2+0x78>
 80020f6:	003d      	movs	r5, r7
 80020f8:	4325      	orrs	r5, r4
 80020fa:	d112      	bne.n	8002122 <__ledf2+0x82>
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d11c      	bne.n	800213a <__ledf2+0x9a>
 8002100:	464d      	mov	r5, r9
 8002102:	432e      	orrs	r6, r5
 8002104:	d10d      	bne.n	8002122 <__ledf2+0x82>
 8002106:	2a00      	cmp	r2, #0
 8002108:	d104      	bne.n	8002114 <__ledf2+0x74>
 800210a:	433c      	orrs	r4, r7
 800210c:	4265      	negs	r5, r4
 800210e:	4165      	adcs	r5, r4
 8002110:	2d00      	cmp	r5, #0
 8002112:	d10d      	bne.n	8002130 <__ledf2+0x90>
 8002114:	4281      	cmp	r1, r0
 8002116:	d016      	beq.n	8002146 <__ledf2+0xa6>
 8002118:	2002      	movs	r0, #2
 800211a:	3901      	subs	r1, #1
 800211c:	4008      	ands	r0, r1
 800211e:	3801      	subs	r0, #1
 8002120:	e000      	b.n	8002124 <__ledf2+0x84>
 8002122:	2002      	movs	r0, #2
 8002124:	bcf0      	pop	{r4, r5, r6, r7}
 8002126:	46bb      	mov	fp, r7
 8002128:	46b2      	mov	sl, r6
 800212a:	46a9      	mov	r9, r5
 800212c:	46a0      	mov	r8, r4
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002130:	2800      	cmp	r0, #0
 8002132:	d1f7      	bne.n	8002124 <__ledf2+0x84>
 8002134:	2001      	movs	r0, #1
 8002136:	4240      	negs	r0, r0
 8002138:	e7f4      	b.n	8002124 <__ledf2+0x84>
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ea      	bne.n	8002114 <__ledf2+0x74>
 800213e:	464c      	mov	r4, r9
 8002140:	4326      	orrs	r6, r4
 8002142:	d1e7      	bne.n	8002114 <__ledf2+0x74>
 8002144:	e7e8      	b.n	8002118 <__ledf2+0x78>
 8002146:	429a      	cmp	r2, r3
 8002148:	dd06      	ble.n	8002158 <__ledf2+0xb8>
 800214a:	4243      	negs	r3, r0
 800214c:	4158      	adcs	r0, r3
 800214e:	2302      	movs	r3, #2
 8002150:	4240      	negs	r0, r0
 8002152:	4018      	ands	r0, r3
 8002154:	3801      	subs	r0, #1
 8002156:	e7e5      	b.n	8002124 <__ledf2+0x84>
 8002158:	429a      	cmp	r2, r3
 800215a:	dbe9      	blt.n	8002130 <__ledf2+0x90>
 800215c:	454f      	cmp	r7, r9
 800215e:	d8db      	bhi.n	8002118 <__ledf2+0x78>
 8002160:	d006      	beq.n	8002170 <__ledf2+0xd0>
 8002162:	2000      	movs	r0, #0
 8002164:	454f      	cmp	r7, r9
 8002166:	d2dd      	bcs.n	8002124 <__ledf2+0x84>
 8002168:	2900      	cmp	r1, #0
 800216a:	d0e3      	beq.n	8002134 <__ledf2+0x94>
 800216c:	0008      	movs	r0, r1
 800216e:	e7d9      	b.n	8002124 <__ledf2+0x84>
 8002170:	45c4      	cmp	ip, r8
 8002172:	d8d1      	bhi.n	8002118 <__ledf2+0x78>
 8002174:	2000      	movs	r0, #0
 8002176:	45c4      	cmp	ip, r8
 8002178:	d2d4      	bcs.n	8002124 <__ledf2+0x84>
 800217a:	e7f5      	b.n	8002168 <__ledf2+0xc8>
 800217c:	000007ff 	.word	0x000007ff

08002180 <__aeabi_dmul>:
 8002180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002182:	4657      	mov	r7, sl
 8002184:	464e      	mov	r6, r9
 8002186:	4645      	mov	r5, r8
 8002188:	46de      	mov	lr, fp
 800218a:	b5e0      	push	{r5, r6, r7, lr}
 800218c:	4698      	mov	r8, r3
 800218e:	030c      	lsls	r4, r1, #12
 8002190:	004b      	lsls	r3, r1, #1
 8002192:	0006      	movs	r6, r0
 8002194:	4692      	mov	sl, r2
 8002196:	b087      	sub	sp, #28
 8002198:	0b24      	lsrs	r4, r4, #12
 800219a:	0d5b      	lsrs	r3, r3, #21
 800219c:	0fcf      	lsrs	r7, r1, #31
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d06c      	beq.n	800227c <__aeabi_dmul+0xfc>
 80021a2:	4add      	ldr	r2, [pc, #884]	; (8002518 <__aeabi_dmul+0x398>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d100      	bne.n	80021aa <__aeabi_dmul+0x2a>
 80021a8:	e086      	b.n	80022b8 <__aeabi_dmul+0x138>
 80021aa:	0f42      	lsrs	r2, r0, #29
 80021ac:	00e4      	lsls	r4, r4, #3
 80021ae:	4314      	orrs	r4, r2
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	0412      	lsls	r2, r2, #16
 80021b4:	4314      	orrs	r4, r2
 80021b6:	4ad9      	ldr	r2, [pc, #868]	; (800251c <__aeabi_dmul+0x39c>)
 80021b8:	00c5      	lsls	r5, r0, #3
 80021ba:	4694      	mov	ip, r2
 80021bc:	4463      	add	r3, ip
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2300      	movs	r3, #0
 80021c2:	4699      	mov	r9, r3
 80021c4:	469b      	mov	fp, r3
 80021c6:	4643      	mov	r3, r8
 80021c8:	4642      	mov	r2, r8
 80021ca:	031e      	lsls	r6, r3, #12
 80021cc:	0fd2      	lsrs	r2, r2, #31
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4650      	mov	r0, sl
 80021d2:	4690      	mov	r8, r2
 80021d4:	0b36      	lsrs	r6, r6, #12
 80021d6:	0d5b      	lsrs	r3, r3, #21
 80021d8:	d100      	bne.n	80021dc <__aeabi_dmul+0x5c>
 80021da:	e078      	b.n	80022ce <__aeabi_dmul+0x14e>
 80021dc:	4ace      	ldr	r2, [pc, #824]	; (8002518 <__aeabi_dmul+0x398>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01d      	beq.n	800221e <__aeabi_dmul+0x9e>
 80021e2:	49ce      	ldr	r1, [pc, #824]	; (800251c <__aeabi_dmul+0x39c>)
 80021e4:	0f42      	lsrs	r2, r0, #29
 80021e6:	468c      	mov	ip, r1
 80021e8:	9900      	ldr	r1, [sp, #0]
 80021ea:	4463      	add	r3, ip
 80021ec:	00f6      	lsls	r6, r6, #3
 80021ee:	468c      	mov	ip, r1
 80021f0:	4316      	orrs	r6, r2
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	449c      	add	ip, r3
 80021f6:	0412      	lsls	r2, r2, #16
 80021f8:	4663      	mov	r3, ip
 80021fa:	4316      	orrs	r6, r2
 80021fc:	00c2      	lsls	r2, r0, #3
 80021fe:	2000      	movs	r0, #0
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	9900      	ldr	r1, [sp, #0]
 8002204:	4643      	mov	r3, r8
 8002206:	3101      	adds	r1, #1
 8002208:	468c      	mov	ip, r1
 800220a:	4649      	mov	r1, r9
 800220c:	407b      	eors	r3, r7
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	290f      	cmp	r1, #15
 8002212:	d900      	bls.n	8002216 <__aeabi_dmul+0x96>
 8002214:	e07e      	b.n	8002314 <__aeabi_dmul+0x194>
 8002216:	4bc2      	ldr	r3, [pc, #776]	; (8002520 <__aeabi_dmul+0x3a0>)
 8002218:	0089      	lsls	r1, r1, #2
 800221a:	5859      	ldr	r1, [r3, r1]
 800221c:	468f      	mov	pc, r1
 800221e:	4652      	mov	r2, sl
 8002220:	9b00      	ldr	r3, [sp, #0]
 8002222:	4332      	orrs	r2, r6
 8002224:	d000      	beq.n	8002228 <__aeabi_dmul+0xa8>
 8002226:	e156      	b.n	80024d6 <__aeabi_dmul+0x356>
 8002228:	49bb      	ldr	r1, [pc, #748]	; (8002518 <__aeabi_dmul+0x398>)
 800222a:	2600      	movs	r6, #0
 800222c:	468c      	mov	ip, r1
 800222e:	4463      	add	r3, ip
 8002230:	4649      	mov	r1, r9
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2302      	movs	r3, #2
 8002236:	4319      	orrs	r1, r3
 8002238:	4689      	mov	r9, r1
 800223a:	2002      	movs	r0, #2
 800223c:	e7e1      	b.n	8002202 <__aeabi_dmul+0x82>
 800223e:	4643      	mov	r3, r8
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	0034      	movs	r4, r6
 8002244:	0015      	movs	r5, r2
 8002246:	4683      	mov	fp, r0
 8002248:	465b      	mov	r3, fp
 800224a:	2b02      	cmp	r3, #2
 800224c:	d05e      	beq.n	800230c <__aeabi_dmul+0x18c>
 800224e:	2b03      	cmp	r3, #3
 8002250:	d100      	bne.n	8002254 <__aeabi_dmul+0xd4>
 8002252:	e1f3      	b.n	800263c <__aeabi_dmul+0x4bc>
 8002254:	2b01      	cmp	r3, #1
 8002256:	d000      	beq.n	800225a <__aeabi_dmul+0xda>
 8002258:	e118      	b.n	800248c <__aeabi_dmul+0x30c>
 800225a:	2200      	movs	r2, #0
 800225c:	2400      	movs	r4, #0
 800225e:	2500      	movs	r5, #0
 8002260:	9b01      	ldr	r3, [sp, #4]
 8002262:	0512      	lsls	r2, r2, #20
 8002264:	4322      	orrs	r2, r4
 8002266:	07db      	lsls	r3, r3, #31
 8002268:	431a      	orrs	r2, r3
 800226a:	0028      	movs	r0, r5
 800226c:	0011      	movs	r1, r2
 800226e:	b007      	add	sp, #28
 8002270:	bcf0      	pop	{r4, r5, r6, r7}
 8002272:	46bb      	mov	fp, r7
 8002274:	46b2      	mov	sl, r6
 8002276:	46a9      	mov	r9, r5
 8002278:	46a0      	mov	r8, r4
 800227a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800227c:	0025      	movs	r5, r4
 800227e:	4305      	orrs	r5, r0
 8002280:	d100      	bne.n	8002284 <__aeabi_dmul+0x104>
 8002282:	e141      	b.n	8002508 <__aeabi_dmul+0x388>
 8002284:	2c00      	cmp	r4, #0
 8002286:	d100      	bne.n	800228a <__aeabi_dmul+0x10a>
 8002288:	e1ad      	b.n	80025e6 <__aeabi_dmul+0x466>
 800228a:	0020      	movs	r0, r4
 800228c:	f000 fef0 	bl	8003070 <__clzsi2>
 8002290:	0001      	movs	r1, r0
 8002292:	0002      	movs	r2, r0
 8002294:	390b      	subs	r1, #11
 8002296:	231d      	movs	r3, #29
 8002298:	0010      	movs	r0, r2
 800229a:	1a5b      	subs	r3, r3, r1
 800229c:	0031      	movs	r1, r6
 800229e:	0035      	movs	r5, r6
 80022a0:	3808      	subs	r0, #8
 80022a2:	4084      	lsls	r4, r0
 80022a4:	40d9      	lsrs	r1, r3
 80022a6:	4085      	lsls	r5, r0
 80022a8:	430c      	orrs	r4, r1
 80022aa:	489e      	ldr	r0, [pc, #632]	; (8002524 <__aeabi_dmul+0x3a4>)
 80022ac:	1a83      	subs	r3, r0, r2
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2300      	movs	r3, #0
 80022b2:	4699      	mov	r9, r3
 80022b4:	469b      	mov	fp, r3
 80022b6:	e786      	b.n	80021c6 <__aeabi_dmul+0x46>
 80022b8:	0005      	movs	r5, r0
 80022ba:	4325      	orrs	r5, r4
 80022bc:	d000      	beq.n	80022c0 <__aeabi_dmul+0x140>
 80022be:	e11c      	b.n	80024fa <__aeabi_dmul+0x37a>
 80022c0:	2208      	movs	r2, #8
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2302      	movs	r3, #2
 80022c6:	2400      	movs	r4, #0
 80022c8:	4691      	mov	r9, r2
 80022ca:	469b      	mov	fp, r3
 80022cc:	e77b      	b.n	80021c6 <__aeabi_dmul+0x46>
 80022ce:	4652      	mov	r2, sl
 80022d0:	4332      	orrs	r2, r6
 80022d2:	d100      	bne.n	80022d6 <__aeabi_dmul+0x156>
 80022d4:	e10a      	b.n	80024ec <__aeabi_dmul+0x36c>
 80022d6:	2e00      	cmp	r6, #0
 80022d8:	d100      	bne.n	80022dc <__aeabi_dmul+0x15c>
 80022da:	e176      	b.n	80025ca <__aeabi_dmul+0x44a>
 80022dc:	0030      	movs	r0, r6
 80022de:	f000 fec7 	bl	8003070 <__clzsi2>
 80022e2:	0002      	movs	r2, r0
 80022e4:	3a0b      	subs	r2, #11
 80022e6:	231d      	movs	r3, #29
 80022e8:	0001      	movs	r1, r0
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	4652      	mov	r2, sl
 80022ee:	3908      	subs	r1, #8
 80022f0:	40da      	lsrs	r2, r3
 80022f2:	408e      	lsls	r6, r1
 80022f4:	4316      	orrs	r6, r2
 80022f6:	4652      	mov	r2, sl
 80022f8:	408a      	lsls	r2, r1
 80022fa:	9b00      	ldr	r3, [sp, #0]
 80022fc:	4989      	ldr	r1, [pc, #548]	; (8002524 <__aeabi_dmul+0x3a4>)
 80022fe:	1a18      	subs	r0, r3, r0
 8002300:	0003      	movs	r3, r0
 8002302:	468c      	mov	ip, r1
 8002304:	4463      	add	r3, ip
 8002306:	2000      	movs	r0, #0
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	e77a      	b.n	8002202 <__aeabi_dmul+0x82>
 800230c:	2400      	movs	r4, #0
 800230e:	2500      	movs	r5, #0
 8002310:	4a81      	ldr	r2, [pc, #516]	; (8002518 <__aeabi_dmul+0x398>)
 8002312:	e7a5      	b.n	8002260 <__aeabi_dmul+0xe0>
 8002314:	0c2f      	lsrs	r7, r5, #16
 8002316:	042d      	lsls	r5, r5, #16
 8002318:	0c2d      	lsrs	r5, r5, #16
 800231a:	002b      	movs	r3, r5
 800231c:	0c11      	lsrs	r1, r2, #16
 800231e:	0412      	lsls	r2, r2, #16
 8002320:	0c12      	lsrs	r2, r2, #16
 8002322:	4353      	muls	r3, r2
 8002324:	4698      	mov	r8, r3
 8002326:	0013      	movs	r3, r2
 8002328:	0028      	movs	r0, r5
 800232a:	437b      	muls	r3, r7
 800232c:	4699      	mov	r9, r3
 800232e:	4348      	muls	r0, r1
 8002330:	4448      	add	r0, r9
 8002332:	4683      	mov	fp, r0
 8002334:	4640      	mov	r0, r8
 8002336:	000b      	movs	r3, r1
 8002338:	0c00      	lsrs	r0, r0, #16
 800233a:	4682      	mov	sl, r0
 800233c:	4658      	mov	r0, fp
 800233e:	437b      	muls	r3, r7
 8002340:	4450      	add	r0, sl
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	4581      	cmp	r9, r0
 8002346:	d906      	bls.n	8002356 <__aeabi_dmul+0x1d6>
 8002348:	469a      	mov	sl, r3
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	025b      	lsls	r3, r3, #9
 800234e:	4699      	mov	r9, r3
 8002350:	44ca      	add	sl, r9
 8002352:	4653      	mov	r3, sl
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	0c03      	lsrs	r3, r0, #16
 8002358:	469b      	mov	fp, r3
 800235a:	4643      	mov	r3, r8
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	0400      	lsls	r0, r0, #16
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	4698      	mov	r8, r3
 8002364:	0003      	movs	r3, r0
 8002366:	4443      	add	r3, r8
 8002368:	9304      	str	r3, [sp, #16]
 800236a:	0c33      	lsrs	r3, r6, #16
 800236c:	4699      	mov	r9, r3
 800236e:	002b      	movs	r3, r5
 8002370:	0436      	lsls	r6, r6, #16
 8002372:	0c36      	lsrs	r6, r6, #16
 8002374:	4373      	muls	r3, r6
 8002376:	4698      	mov	r8, r3
 8002378:	0033      	movs	r3, r6
 800237a:	437b      	muls	r3, r7
 800237c:	469a      	mov	sl, r3
 800237e:	464b      	mov	r3, r9
 8002380:	435d      	muls	r5, r3
 8002382:	435f      	muls	r7, r3
 8002384:	4643      	mov	r3, r8
 8002386:	4455      	add	r5, sl
 8002388:	0c18      	lsrs	r0, r3, #16
 800238a:	1940      	adds	r0, r0, r5
 800238c:	4582      	cmp	sl, r0
 800238e:	d903      	bls.n	8002398 <__aeabi_dmul+0x218>
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	469a      	mov	sl, r3
 8002396:	4457      	add	r7, sl
 8002398:	0c05      	lsrs	r5, r0, #16
 800239a:	19eb      	adds	r3, r5, r7
 800239c:	9305      	str	r3, [sp, #20]
 800239e:	4643      	mov	r3, r8
 80023a0:	041d      	lsls	r5, r3, #16
 80023a2:	0c2d      	lsrs	r5, r5, #16
 80023a4:	0400      	lsls	r0, r0, #16
 80023a6:	1940      	adds	r0, r0, r5
 80023a8:	0c25      	lsrs	r5, r4, #16
 80023aa:	0424      	lsls	r4, r4, #16
 80023ac:	0c24      	lsrs	r4, r4, #16
 80023ae:	0027      	movs	r7, r4
 80023b0:	4357      	muls	r7, r2
 80023b2:	436a      	muls	r2, r5
 80023b4:	4690      	mov	r8, r2
 80023b6:	002a      	movs	r2, r5
 80023b8:	0c3b      	lsrs	r3, r7, #16
 80023ba:	469a      	mov	sl, r3
 80023bc:	434a      	muls	r2, r1
 80023be:	4361      	muls	r1, r4
 80023c0:	4441      	add	r1, r8
 80023c2:	4451      	add	r1, sl
 80023c4:	4483      	add	fp, r0
 80023c6:	4588      	cmp	r8, r1
 80023c8:	d903      	bls.n	80023d2 <__aeabi_dmul+0x252>
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	4698      	mov	r8, r3
 80023d0:	4442      	add	r2, r8
 80023d2:	043f      	lsls	r7, r7, #16
 80023d4:	0c0b      	lsrs	r3, r1, #16
 80023d6:	0c3f      	lsrs	r7, r7, #16
 80023d8:	0409      	lsls	r1, r1, #16
 80023da:	19c9      	adds	r1, r1, r7
 80023dc:	0027      	movs	r7, r4
 80023de:	4698      	mov	r8, r3
 80023e0:	464b      	mov	r3, r9
 80023e2:	4377      	muls	r7, r6
 80023e4:	435c      	muls	r4, r3
 80023e6:	436e      	muls	r6, r5
 80023e8:	435d      	muls	r5, r3
 80023ea:	0c3b      	lsrs	r3, r7, #16
 80023ec:	4699      	mov	r9, r3
 80023ee:	19a4      	adds	r4, r4, r6
 80023f0:	444c      	add	r4, r9
 80023f2:	4442      	add	r2, r8
 80023f4:	9503      	str	r5, [sp, #12]
 80023f6:	42a6      	cmp	r6, r4
 80023f8:	d904      	bls.n	8002404 <__aeabi_dmul+0x284>
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	025b      	lsls	r3, r3, #9
 80023fe:	4698      	mov	r8, r3
 8002400:	4445      	add	r5, r8
 8002402:	9503      	str	r5, [sp, #12]
 8002404:	9b02      	ldr	r3, [sp, #8]
 8002406:	043f      	lsls	r7, r7, #16
 8002408:	445b      	add	r3, fp
 800240a:	001e      	movs	r6, r3
 800240c:	4283      	cmp	r3, r0
 800240e:	4180      	sbcs	r0, r0
 8002410:	0423      	lsls	r3, r4, #16
 8002412:	4698      	mov	r8, r3
 8002414:	9b05      	ldr	r3, [sp, #20]
 8002416:	0c3f      	lsrs	r7, r7, #16
 8002418:	4447      	add	r7, r8
 800241a:	4698      	mov	r8, r3
 800241c:	1876      	adds	r6, r6, r1
 800241e:	428e      	cmp	r6, r1
 8002420:	4189      	sbcs	r1, r1
 8002422:	4447      	add	r7, r8
 8002424:	4240      	negs	r0, r0
 8002426:	183d      	adds	r5, r7, r0
 8002428:	46a8      	mov	r8, r5
 800242a:	4693      	mov	fp, r2
 800242c:	4249      	negs	r1, r1
 800242e:	468a      	mov	sl, r1
 8002430:	44c3      	add	fp, r8
 8002432:	429f      	cmp	r7, r3
 8002434:	41bf      	sbcs	r7, r7
 8002436:	4580      	cmp	r8, r0
 8002438:	4180      	sbcs	r0, r0
 800243a:	9b03      	ldr	r3, [sp, #12]
 800243c:	44da      	add	sl, fp
 800243e:	4698      	mov	r8, r3
 8002440:	4653      	mov	r3, sl
 8002442:	4240      	negs	r0, r0
 8002444:	427f      	negs	r7, r7
 8002446:	4307      	orrs	r7, r0
 8002448:	0c24      	lsrs	r4, r4, #16
 800244a:	4593      	cmp	fp, r2
 800244c:	4192      	sbcs	r2, r2
 800244e:	458a      	cmp	sl, r1
 8002450:	4189      	sbcs	r1, r1
 8002452:	193f      	adds	r7, r7, r4
 8002454:	0ddc      	lsrs	r4, r3, #23
 8002456:	9b04      	ldr	r3, [sp, #16]
 8002458:	0275      	lsls	r5, r6, #9
 800245a:	431d      	orrs	r5, r3
 800245c:	1e68      	subs	r0, r5, #1
 800245e:	4185      	sbcs	r5, r0
 8002460:	4653      	mov	r3, sl
 8002462:	4252      	negs	r2, r2
 8002464:	4249      	negs	r1, r1
 8002466:	430a      	orrs	r2, r1
 8002468:	18bf      	adds	r7, r7, r2
 800246a:	4447      	add	r7, r8
 800246c:	0df6      	lsrs	r6, r6, #23
 800246e:	027f      	lsls	r7, r7, #9
 8002470:	4335      	orrs	r5, r6
 8002472:	025a      	lsls	r2, r3, #9
 8002474:	433c      	orrs	r4, r7
 8002476:	4315      	orrs	r5, r2
 8002478:	01fb      	lsls	r3, r7, #7
 800247a:	d400      	bmi.n	800247e <__aeabi_dmul+0x2fe>
 800247c:	e0c1      	b.n	8002602 <__aeabi_dmul+0x482>
 800247e:	2101      	movs	r1, #1
 8002480:	086a      	lsrs	r2, r5, #1
 8002482:	400d      	ands	r5, r1
 8002484:	4315      	orrs	r5, r2
 8002486:	07e2      	lsls	r2, r4, #31
 8002488:	4315      	orrs	r5, r2
 800248a:	0864      	lsrs	r4, r4, #1
 800248c:	4926      	ldr	r1, [pc, #152]	; (8002528 <__aeabi_dmul+0x3a8>)
 800248e:	4461      	add	r1, ip
 8002490:	2900      	cmp	r1, #0
 8002492:	dd56      	ble.n	8002542 <__aeabi_dmul+0x3c2>
 8002494:	076b      	lsls	r3, r5, #29
 8002496:	d009      	beq.n	80024ac <__aeabi_dmul+0x32c>
 8002498:	220f      	movs	r2, #15
 800249a:	402a      	ands	r2, r5
 800249c:	2a04      	cmp	r2, #4
 800249e:	d005      	beq.n	80024ac <__aeabi_dmul+0x32c>
 80024a0:	1d2a      	adds	r2, r5, #4
 80024a2:	42aa      	cmp	r2, r5
 80024a4:	41ad      	sbcs	r5, r5
 80024a6:	426d      	negs	r5, r5
 80024a8:	1964      	adds	r4, r4, r5
 80024aa:	0015      	movs	r5, r2
 80024ac:	01e3      	lsls	r3, r4, #7
 80024ae:	d504      	bpl.n	80024ba <__aeabi_dmul+0x33a>
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	4a1e      	ldr	r2, [pc, #120]	; (800252c <__aeabi_dmul+0x3ac>)
 80024b4:	00c9      	lsls	r1, r1, #3
 80024b6:	4014      	ands	r4, r2
 80024b8:	4461      	add	r1, ip
 80024ba:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <__aeabi_dmul+0x3b0>)
 80024bc:	4291      	cmp	r1, r2
 80024be:	dd00      	ble.n	80024c2 <__aeabi_dmul+0x342>
 80024c0:	e724      	b.n	800230c <__aeabi_dmul+0x18c>
 80024c2:	0762      	lsls	r2, r4, #29
 80024c4:	08ed      	lsrs	r5, r5, #3
 80024c6:	0264      	lsls	r4, r4, #9
 80024c8:	0549      	lsls	r1, r1, #21
 80024ca:	4315      	orrs	r5, r2
 80024cc:	0b24      	lsrs	r4, r4, #12
 80024ce:	0d4a      	lsrs	r2, r1, #21
 80024d0:	e6c6      	b.n	8002260 <__aeabi_dmul+0xe0>
 80024d2:	9701      	str	r7, [sp, #4]
 80024d4:	e6b8      	b.n	8002248 <__aeabi_dmul+0xc8>
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <__aeabi_dmul+0x398>)
 80024d8:	2003      	movs	r0, #3
 80024da:	4694      	mov	ip, r2
 80024dc:	4463      	add	r3, ip
 80024de:	464a      	mov	r2, r9
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2303      	movs	r3, #3
 80024e4:	431a      	orrs	r2, r3
 80024e6:	4691      	mov	r9, r2
 80024e8:	4652      	mov	r2, sl
 80024ea:	e68a      	b.n	8002202 <__aeabi_dmul+0x82>
 80024ec:	4649      	mov	r1, r9
 80024ee:	2301      	movs	r3, #1
 80024f0:	4319      	orrs	r1, r3
 80024f2:	4689      	mov	r9, r1
 80024f4:	2600      	movs	r6, #0
 80024f6:	2001      	movs	r0, #1
 80024f8:	e683      	b.n	8002202 <__aeabi_dmul+0x82>
 80024fa:	220c      	movs	r2, #12
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2303      	movs	r3, #3
 8002500:	0005      	movs	r5, r0
 8002502:	4691      	mov	r9, r2
 8002504:	469b      	mov	fp, r3
 8002506:	e65e      	b.n	80021c6 <__aeabi_dmul+0x46>
 8002508:	2304      	movs	r3, #4
 800250a:	4699      	mov	r9, r3
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	2400      	movs	r4, #0
 8002514:	469b      	mov	fp, r3
 8002516:	e656      	b.n	80021c6 <__aeabi_dmul+0x46>
 8002518:	000007ff 	.word	0x000007ff
 800251c:	fffffc01 	.word	0xfffffc01
 8002520:	0801212c 	.word	0x0801212c
 8002524:	fffffc0d 	.word	0xfffffc0d
 8002528:	000003ff 	.word	0x000003ff
 800252c:	feffffff 	.word	0xfeffffff
 8002530:	000007fe 	.word	0x000007fe
 8002534:	2300      	movs	r3, #0
 8002536:	2480      	movs	r4, #128	; 0x80
 8002538:	2500      	movs	r5, #0
 800253a:	4a44      	ldr	r2, [pc, #272]	; (800264c <__aeabi_dmul+0x4cc>)
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	0324      	lsls	r4, r4, #12
 8002540:	e68e      	b.n	8002260 <__aeabi_dmul+0xe0>
 8002542:	2001      	movs	r0, #1
 8002544:	1a40      	subs	r0, r0, r1
 8002546:	2838      	cmp	r0, #56	; 0x38
 8002548:	dd00      	ble.n	800254c <__aeabi_dmul+0x3cc>
 800254a:	e686      	b.n	800225a <__aeabi_dmul+0xda>
 800254c:	281f      	cmp	r0, #31
 800254e:	dd5b      	ble.n	8002608 <__aeabi_dmul+0x488>
 8002550:	221f      	movs	r2, #31
 8002552:	0023      	movs	r3, r4
 8002554:	4252      	negs	r2, r2
 8002556:	1a51      	subs	r1, r2, r1
 8002558:	40cb      	lsrs	r3, r1
 800255a:	0019      	movs	r1, r3
 800255c:	2820      	cmp	r0, #32
 800255e:	d003      	beq.n	8002568 <__aeabi_dmul+0x3e8>
 8002560:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <__aeabi_dmul+0x4d0>)
 8002562:	4462      	add	r2, ip
 8002564:	4094      	lsls	r4, r2
 8002566:	4325      	orrs	r5, r4
 8002568:	1e6a      	subs	r2, r5, #1
 800256a:	4195      	sbcs	r5, r2
 800256c:	002a      	movs	r2, r5
 800256e:	430a      	orrs	r2, r1
 8002570:	2107      	movs	r1, #7
 8002572:	000d      	movs	r5, r1
 8002574:	2400      	movs	r4, #0
 8002576:	4015      	ands	r5, r2
 8002578:	4211      	tst	r1, r2
 800257a:	d05b      	beq.n	8002634 <__aeabi_dmul+0x4b4>
 800257c:	210f      	movs	r1, #15
 800257e:	2400      	movs	r4, #0
 8002580:	4011      	ands	r1, r2
 8002582:	2904      	cmp	r1, #4
 8002584:	d053      	beq.n	800262e <__aeabi_dmul+0x4ae>
 8002586:	1d11      	adds	r1, r2, #4
 8002588:	4291      	cmp	r1, r2
 800258a:	4192      	sbcs	r2, r2
 800258c:	4252      	negs	r2, r2
 800258e:	18a4      	adds	r4, r4, r2
 8002590:	000a      	movs	r2, r1
 8002592:	0223      	lsls	r3, r4, #8
 8002594:	d54b      	bpl.n	800262e <__aeabi_dmul+0x4ae>
 8002596:	2201      	movs	r2, #1
 8002598:	2400      	movs	r4, #0
 800259a:	2500      	movs	r5, #0
 800259c:	e660      	b.n	8002260 <__aeabi_dmul+0xe0>
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	031b      	lsls	r3, r3, #12
 80025a2:	421c      	tst	r4, r3
 80025a4:	d009      	beq.n	80025ba <__aeabi_dmul+0x43a>
 80025a6:	421e      	tst	r6, r3
 80025a8:	d107      	bne.n	80025ba <__aeabi_dmul+0x43a>
 80025aa:	4333      	orrs	r3, r6
 80025ac:	031c      	lsls	r4, r3, #12
 80025ae:	4643      	mov	r3, r8
 80025b0:	0015      	movs	r5, r2
 80025b2:	0b24      	lsrs	r4, r4, #12
 80025b4:	4a25      	ldr	r2, [pc, #148]	; (800264c <__aeabi_dmul+0x4cc>)
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	e652      	b.n	8002260 <__aeabi_dmul+0xe0>
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	0312      	lsls	r2, r2, #12
 80025be:	4314      	orrs	r4, r2
 80025c0:	0324      	lsls	r4, r4, #12
 80025c2:	4a22      	ldr	r2, [pc, #136]	; (800264c <__aeabi_dmul+0x4cc>)
 80025c4:	0b24      	lsrs	r4, r4, #12
 80025c6:	9701      	str	r7, [sp, #4]
 80025c8:	e64a      	b.n	8002260 <__aeabi_dmul+0xe0>
 80025ca:	f000 fd51 	bl	8003070 <__clzsi2>
 80025ce:	0003      	movs	r3, r0
 80025d0:	001a      	movs	r2, r3
 80025d2:	3215      	adds	r2, #21
 80025d4:	3020      	adds	r0, #32
 80025d6:	2a1c      	cmp	r2, #28
 80025d8:	dc00      	bgt.n	80025dc <__aeabi_dmul+0x45c>
 80025da:	e684      	b.n	80022e6 <__aeabi_dmul+0x166>
 80025dc:	4656      	mov	r6, sl
 80025de:	3b08      	subs	r3, #8
 80025e0:	2200      	movs	r2, #0
 80025e2:	409e      	lsls	r6, r3
 80025e4:	e689      	b.n	80022fa <__aeabi_dmul+0x17a>
 80025e6:	f000 fd43 	bl	8003070 <__clzsi2>
 80025ea:	0001      	movs	r1, r0
 80025ec:	0002      	movs	r2, r0
 80025ee:	3115      	adds	r1, #21
 80025f0:	3220      	adds	r2, #32
 80025f2:	291c      	cmp	r1, #28
 80025f4:	dc00      	bgt.n	80025f8 <__aeabi_dmul+0x478>
 80025f6:	e64e      	b.n	8002296 <__aeabi_dmul+0x116>
 80025f8:	0034      	movs	r4, r6
 80025fa:	3808      	subs	r0, #8
 80025fc:	2500      	movs	r5, #0
 80025fe:	4084      	lsls	r4, r0
 8002600:	e653      	b.n	80022aa <__aeabi_dmul+0x12a>
 8002602:	9b00      	ldr	r3, [sp, #0]
 8002604:	469c      	mov	ip, r3
 8002606:	e741      	b.n	800248c <__aeabi_dmul+0x30c>
 8002608:	4912      	ldr	r1, [pc, #72]	; (8002654 <__aeabi_dmul+0x4d4>)
 800260a:	0022      	movs	r2, r4
 800260c:	4461      	add	r1, ip
 800260e:	002e      	movs	r6, r5
 8002610:	408d      	lsls	r5, r1
 8002612:	408a      	lsls	r2, r1
 8002614:	40c6      	lsrs	r6, r0
 8002616:	1e69      	subs	r1, r5, #1
 8002618:	418d      	sbcs	r5, r1
 800261a:	4332      	orrs	r2, r6
 800261c:	432a      	orrs	r2, r5
 800261e:	40c4      	lsrs	r4, r0
 8002620:	0753      	lsls	r3, r2, #29
 8002622:	d0b6      	beq.n	8002592 <__aeabi_dmul+0x412>
 8002624:	210f      	movs	r1, #15
 8002626:	4011      	ands	r1, r2
 8002628:	2904      	cmp	r1, #4
 800262a:	d1ac      	bne.n	8002586 <__aeabi_dmul+0x406>
 800262c:	e7b1      	b.n	8002592 <__aeabi_dmul+0x412>
 800262e:	0765      	lsls	r5, r4, #29
 8002630:	0264      	lsls	r4, r4, #9
 8002632:	0b24      	lsrs	r4, r4, #12
 8002634:	08d2      	lsrs	r2, r2, #3
 8002636:	4315      	orrs	r5, r2
 8002638:	2200      	movs	r2, #0
 800263a:	e611      	b.n	8002260 <__aeabi_dmul+0xe0>
 800263c:	2280      	movs	r2, #128	; 0x80
 800263e:	0312      	lsls	r2, r2, #12
 8002640:	4314      	orrs	r4, r2
 8002642:	0324      	lsls	r4, r4, #12
 8002644:	4a01      	ldr	r2, [pc, #4]	; (800264c <__aeabi_dmul+0x4cc>)
 8002646:	0b24      	lsrs	r4, r4, #12
 8002648:	e60a      	b.n	8002260 <__aeabi_dmul+0xe0>
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	000007ff 	.word	0x000007ff
 8002650:	0000043e 	.word	0x0000043e
 8002654:	0000041e 	.word	0x0000041e

08002658 <__aeabi_dsub>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	4657      	mov	r7, sl
 800265c:	464e      	mov	r6, r9
 800265e:	4645      	mov	r5, r8
 8002660:	46de      	mov	lr, fp
 8002662:	0004      	movs	r4, r0
 8002664:	b5e0      	push	{r5, r6, r7, lr}
 8002666:	001f      	movs	r7, r3
 8002668:	0010      	movs	r0, r2
 800266a:	030b      	lsls	r3, r1, #12
 800266c:	0f62      	lsrs	r2, r4, #29
 800266e:	004e      	lsls	r6, r1, #1
 8002670:	0fcd      	lsrs	r5, r1, #31
 8002672:	0a5b      	lsrs	r3, r3, #9
 8002674:	0339      	lsls	r1, r7, #12
 8002676:	4313      	orrs	r3, r2
 8002678:	0a49      	lsrs	r1, r1, #9
 800267a:	00e2      	lsls	r2, r4, #3
 800267c:	0f44      	lsrs	r4, r0, #29
 800267e:	4321      	orrs	r1, r4
 8002680:	4cc2      	ldr	r4, [pc, #776]	; (800298c <__aeabi_dsub+0x334>)
 8002682:	4691      	mov	r9, r2
 8002684:	4692      	mov	sl, r2
 8002686:	00c0      	lsls	r0, r0, #3
 8002688:	007a      	lsls	r2, r7, #1
 800268a:	4680      	mov	r8, r0
 800268c:	0d76      	lsrs	r6, r6, #21
 800268e:	0d52      	lsrs	r2, r2, #21
 8002690:	0fff      	lsrs	r7, r7, #31
 8002692:	42a2      	cmp	r2, r4
 8002694:	d100      	bne.n	8002698 <__aeabi_dsub+0x40>
 8002696:	e0b4      	b.n	8002802 <__aeabi_dsub+0x1aa>
 8002698:	2401      	movs	r4, #1
 800269a:	4067      	eors	r7, r4
 800269c:	46bb      	mov	fp, r7
 800269e:	42bd      	cmp	r5, r7
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x4c>
 80026a2:	e088      	b.n	80027b6 <__aeabi_dsub+0x15e>
 80026a4:	1ab4      	subs	r4, r6, r2
 80026a6:	46a4      	mov	ip, r4
 80026a8:	2c00      	cmp	r4, #0
 80026aa:	dc00      	bgt.n	80026ae <__aeabi_dsub+0x56>
 80026ac:	e0b2      	b.n	8002814 <__aeabi_dsub+0x1bc>
 80026ae:	2a00      	cmp	r2, #0
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x5c>
 80026b2:	e0c5      	b.n	8002840 <__aeabi_dsub+0x1e8>
 80026b4:	4ab5      	ldr	r2, [pc, #724]	; (800298c <__aeabi_dsub+0x334>)
 80026b6:	4296      	cmp	r6, r2
 80026b8:	d100      	bne.n	80026bc <__aeabi_dsub+0x64>
 80026ba:	e28b      	b.n	8002bd4 <__aeabi_dsub+0x57c>
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	0412      	lsls	r2, r2, #16
 80026c0:	4311      	orrs	r1, r2
 80026c2:	4662      	mov	r2, ip
 80026c4:	2a38      	cmp	r2, #56	; 0x38
 80026c6:	dd00      	ble.n	80026ca <__aeabi_dsub+0x72>
 80026c8:	e1a1      	b.n	8002a0e <__aeabi_dsub+0x3b6>
 80026ca:	2a1f      	cmp	r2, #31
 80026cc:	dd00      	ble.n	80026d0 <__aeabi_dsub+0x78>
 80026ce:	e216      	b.n	8002afe <__aeabi_dsub+0x4a6>
 80026d0:	2720      	movs	r7, #32
 80026d2:	000c      	movs	r4, r1
 80026d4:	1abf      	subs	r7, r7, r2
 80026d6:	40bc      	lsls	r4, r7
 80026d8:	0002      	movs	r2, r0
 80026da:	46a0      	mov	r8, r4
 80026dc:	4664      	mov	r4, ip
 80026de:	40b8      	lsls	r0, r7
 80026e0:	40e2      	lsrs	r2, r4
 80026e2:	4644      	mov	r4, r8
 80026e4:	4314      	orrs	r4, r2
 80026e6:	0002      	movs	r2, r0
 80026e8:	1e50      	subs	r0, r2, #1
 80026ea:	4182      	sbcs	r2, r0
 80026ec:	4660      	mov	r0, ip
 80026ee:	40c1      	lsrs	r1, r0
 80026f0:	4322      	orrs	r2, r4
 80026f2:	1a5b      	subs	r3, r3, r1
 80026f4:	4649      	mov	r1, r9
 80026f6:	1a8c      	subs	r4, r1, r2
 80026f8:	45a1      	cmp	r9, r4
 80026fa:	4192      	sbcs	r2, r2
 80026fc:	4252      	negs	r2, r2
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	4698      	mov	r8, r3
 8002702:	4643      	mov	r3, r8
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	d400      	bmi.n	800270a <__aeabi_dsub+0xb2>
 8002708:	e117      	b.n	800293a <__aeabi_dsub+0x2e2>
 800270a:	4643      	mov	r3, r8
 800270c:	025b      	lsls	r3, r3, #9
 800270e:	0a5b      	lsrs	r3, r3, #9
 8002710:	4698      	mov	r8, r3
 8002712:	4643      	mov	r3, r8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dsub+0xc2>
 8002718:	e16c      	b.n	80029f4 <__aeabi_dsub+0x39c>
 800271a:	4640      	mov	r0, r8
 800271c:	f000 fca8 	bl	8003070 <__clzsi2>
 8002720:	0002      	movs	r2, r0
 8002722:	3a08      	subs	r2, #8
 8002724:	2120      	movs	r1, #32
 8002726:	0020      	movs	r0, r4
 8002728:	4643      	mov	r3, r8
 800272a:	1a89      	subs	r1, r1, r2
 800272c:	4093      	lsls	r3, r2
 800272e:	40c8      	lsrs	r0, r1
 8002730:	4094      	lsls	r4, r2
 8002732:	4303      	orrs	r3, r0
 8002734:	4296      	cmp	r6, r2
 8002736:	dd00      	ble.n	800273a <__aeabi_dsub+0xe2>
 8002738:	e157      	b.n	80029ea <__aeabi_dsub+0x392>
 800273a:	1b96      	subs	r6, r2, r6
 800273c:	1c71      	adds	r1, r6, #1
 800273e:	291f      	cmp	r1, #31
 8002740:	dd00      	ble.n	8002744 <__aeabi_dsub+0xec>
 8002742:	e1cb      	b.n	8002adc <__aeabi_dsub+0x484>
 8002744:	2220      	movs	r2, #32
 8002746:	0018      	movs	r0, r3
 8002748:	0026      	movs	r6, r4
 800274a:	1a52      	subs	r2, r2, r1
 800274c:	4094      	lsls	r4, r2
 800274e:	4090      	lsls	r0, r2
 8002750:	40ce      	lsrs	r6, r1
 8002752:	40cb      	lsrs	r3, r1
 8002754:	1e62      	subs	r2, r4, #1
 8002756:	4194      	sbcs	r4, r2
 8002758:	4330      	orrs	r0, r6
 800275a:	4698      	mov	r8, r3
 800275c:	2600      	movs	r6, #0
 800275e:	4304      	orrs	r4, r0
 8002760:	0763      	lsls	r3, r4, #29
 8002762:	d009      	beq.n	8002778 <__aeabi_dsub+0x120>
 8002764:	230f      	movs	r3, #15
 8002766:	4023      	ands	r3, r4
 8002768:	2b04      	cmp	r3, #4
 800276a:	d005      	beq.n	8002778 <__aeabi_dsub+0x120>
 800276c:	1d23      	adds	r3, r4, #4
 800276e:	42a3      	cmp	r3, r4
 8002770:	41a4      	sbcs	r4, r4
 8002772:	4264      	negs	r4, r4
 8002774:	44a0      	add	r8, r4
 8002776:	001c      	movs	r4, r3
 8002778:	4643      	mov	r3, r8
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	d400      	bmi.n	8002780 <__aeabi_dsub+0x128>
 800277e:	e0df      	b.n	8002940 <__aeabi_dsub+0x2e8>
 8002780:	4b82      	ldr	r3, [pc, #520]	; (800298c <__aeabi_dsub+0x334>)
 8002782:	3601      	adds	r6, #1
 8002784:	429e      	cmp	r6, r3
 8002786:	d100      	bne.n	800278a <__aeabi_dsub+0x132>
 8002788:	e0fb      	b.n	8002982 <__aeabi_dsub+0x32a>
 800278a:	4642      	mov	r2, r8
 800278c:	4b80      	ldr	r3, [pc, #512]	; (8002990 <__aeabi_dsub+0x338>)
 800278e:	08e4      	lsrs	r4, r4, #3
 8002790:	401a      	ands	r2, r3
 8002792:	0013      	movs	r3, r2
 8002794:	0571      	lsls	r1, r6, #21
 8002796:	0752      	lsls	r2, r2, #29
 8002798:	025b      	lsls	r3, r3, #9
 800279a:	4322      	orrs	r2, r4
 800279c:	0b1b      	lsrs	r3, r3, #12
 800279e:	0d49      	lsrs	r1, r1, #21
 80027a0:	0509      	lsls	r1, r1, #20
 80027a2:	07ed      	lsls	r5, r5, #31
 80027a4:	4319      	orrs	r1, r3
 80027a6:	4329      	orrs	r1, r5
 80027a8:	0010      	movs	r0, r2
 80027aa:	bcf0      	pop	{r4, r5, r6, r7}
 80027ac:	46bb      	mov	fp, r7
 80027ae:	46b2      	mov	sl, r6
 80027b0:	46a9      	mov	r9, r5
 80027b2:	46a0      	mov	r8, r4
 80027b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027b6:	1ab4      	subs	r4, r6, r2
 80027b8:	46a4      	mov	ip, r4
 80027ba:	2c00      	cmp	r4, #0
 80027bc:	dd58      	ble.n	8002870 <__aeabi_dsub+0x218>
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x16c>
 80027c2:	e09e      	b.n	8002902 <__aeabi_dsub+0x2aa>
 80027c4:	4a71      	ldr	r2, [pc, #452]	; (800298c <__aeabi_dsub+0x334>)
 80027c6:	4296      	cmp	r6, r2
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x174>
 80027ca:	e13b      	b.n	8002a44 <__aeabi_dsub+0x3ec>
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	0412      	lsls	r2, r2, #16
 80027d0:	4311      	orrs	r1, r2
 80027d2:	4662      	mov	r2, ip
 80027d4:	2a38      	cmp	r2, #56	; 0x38
 80027d6:	dd00      	ble.n	80027da <__aeabi_dsub+0x182>
 80027d8:	e0c1      	b.n	800295e <__aeabi_dsub+0x306>
 80027da:	2a1f      	cmp	r2, #31
 80027dc:	dc00      	bgt.n	80027e0 <__aeabi_dsub+0x188>
 80027de:	e1bb      	b.n	8002b58 <__aeabi_dsub+0x500>
 80027e0:	000c      	movs	r4, r1
 80027e2:	3a20      	subs	r2, #32
 80027e4:	40d4      	lsrs	r4, r2
 80027e6:	0022      	movs	r2, r4
 80027e8:	4664      	mov	r4, ip
 80027ea:	2c20      	cmp	r4, #32
 80027ec:	d004      	beq.n	80027f8 <__aeabi_dsub+0x1a0>
 80027ee:	2740      	movs	r7, #64	; 0x40
 80027f0:	1b3f      	subs	r7, r7, r4
 80027f2:	40b9      	lsls	r1, r7
 80027f4:	4308      	orrs	r0, r1
 80027f6:	4680      	mov	r8, r0
 80027f8:	4644      	mov	r4, r8
 80027fa:	1e61      	subs	r1, r4, #1
 80027fc:	418c      	sbcs	r4, r1
 80027fe:	4314      	orrs	r4, r2
 8002800:	e0b1      	b.n	8002966 <__aeabi_dsub+0x30e>
 8002802:	000c      	movs	r4, r1
 8002804:	4304      	orrs	r4, r0
 8002806:	d02a      	beq.n	800285e <__aeabi_dsub+0x206>
 8002808:	46bb      	mov	fp, r7
 800280a:	42bd      	cmp	r5, r7
 800280c:	d02d      	beq.n	800286a <__aeabi_dsub+0x212>
 800280e:	4c61      	ldr	r4, [pc, #388]	; (8002994 <__aeabi_dsub+0x33c>)
 8002810:	46a4      	mov	ip, r4
 8002812:	44b4      	add	ip, r6
 8002814:	4664      	mov	r4, ip
 8002816:	2c00      	cmp	r4, #0
 8002818:	d05c      	beq.n	80028d4 <__aeabi_dsub+0x27c>
 800281a:	1b94      	subs	r4, r2, r6
 800281c:	46a4      	mov	ip, r4
 800281e:	2e00      	cmp	r6, #0
 8002820:	d000      	beq.n	8002824 <__aeabi_dsub+0x1cc>
 8002822:	e115      	b.n	8002a50 <__aeabi_dsub+0x3f8>
 8002824:	464d      	mov	r5, r9
 8002826:	431d      	orrs	r5, r3
 8002828:	d100      	bne.n	800282c <__aeabi_dsub+0x1d4>
 800282a:	e1c3      	b.n	8002bb4 <__aeabi_dsub+0x55c>
 800282c:	1e65      	subs	r5, r4, #1
 800282e:	2c01      	cmp	r4, #1
 8002830:	d100      	bne.n	8002834 <__aeabi_dsub+0x1dc>
 8002832:	e20c      	b.n	8002c4e <__aeabi_dsub+0x5f6>
 8002834:	4e55      	ldr	r6, [pc, #340]	; (800298c <__aeabi_dsub+0x334>)
 8002836:	42b4      	cmp	r4, r6
 8002838:	d100      	bne.n	800283c <__aeabi_dsub+0x1e4>
 800283a:	e1f8      	b.n	8002c2e <__aeabi_dsub+0x5d6>
 800283c:	46ac      	mov	ip, r5
 800283e:	e10e      	b.n	8002a5e <__aeabi_dsub+0x406>
 8002840:	000a      	movs	r2, r1
 8002842:	4302      	orrs	r2, r0
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x1f0>
 8002846:	e136      	b.n	8002ab6 <__aeabi_dsub+0x45e>
 8002848:	0022      	movs	r2, r4
 800284a:	3a01      	subs	r2, #1
 800284c:	2c01      	cmp	r4, #1
 800284e:	d100      	bne.n	8002852 <__aeabi_dsub+0x1fa>
 8002850:	e1c6      	b.n	8002be0 <__aeabi_dsub+0x588>
 8002852:	4c4e      	ldr	r4, [pc, #312]	; (800298c <__aeabi_dsub+0x334>)
 8002854:	45a4      	cmp	ip, r4
 8002856:	d100      	bne.n	800285a <__aeabi_dsub+0x202>
 8002858:	e0f4      	b.n	8002a44 <__aeabi_dsub+0x3ec>
 800285a:	4694      	mov	ip, r2
 800285c:	e731      	b.n	80026c2 <__aeabi_dsub+0x6a>
 800285e:	2401      	movs	r4, #1
 8002860:	4067      	eors	r7, r4
 8002862:	46bb      	mov	fp, r7
 8002864:	42bd      	cmp	r5, r7
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x212>
 8002868:	e71c      	b.n	80026a4 <__aeabi_dsub+0x4c>
 800286a:	4c4a      	ldr	r4, [pc, #296]	; (8002994 <__aeabi_dsub+0x33c>)
 800286c:	46a4      	mov	ip, r4
 800286e:	44b4      	add	ip, r6
 8002870:	4664      	mov	r4, ip
 8002872:	2c00      	cmp	r4, #0
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x220>
 8002876:	e0cf      	b.n	8002a18 <__aeabi_dsub+0x3c0>
 8002878:	1b94      	subs	r4, r2, r6
 800287a:	46a4      	mov	ip, r4
 800287c:	2e00      	cmp	r6, #0
 800287e:	d100      	bne.n	8002882 <__aeabi_dsub+0x22a>
 8002880:	e15c      	b.n	8002b3c <__aeabi_dsub+0x4e4>
 8002882:	4e42      	ldr	r6, [pc, #264]	; (800298c <__aeabi_dsub+0x334>)
 8002884:	42b2      	cmp	r2, r6
 8002886:	d100      	bne.n	800288a <__aeabi_dsub+0x232>
 8002888:	e1ec      	b.n	8002c64 <__aeabi_dsub+0x60c>
 800288a:	2680      	movs	r6, #128	; 0x80
 800288c:	0436      	lsls	r6, r6, #16
 800288e:	4333      	orrs	r3, r6
 8002890:	4664      	mov	r4, ip
 8002892:	2c38      	cmp	r4, #56	; 0x38
 8002894:	dd00      	ble.n	8002898 <__aeabi_dsub+0x240>
 8002896:	e1b3      	b.n	8002c00 <__aeabi_dsub+0x5a8>
 8002898:	2c1f      	cmp	r4, #31
 800289a:	dd00      	ble.n	800289e <__aeabi_dsub+0x246>
 800289c:	e238      	b.n	8002d10 <__aeabi_dsub+0x6b8>
 800289e:	2620      	movs	r6, #32
 80028a0:	1b36      	subs	r6, r6, r4
 80028a2:	001c      	movs	r4, r3
 80028a4:	40b4      	lsls	r4, r6
 80028a6:	464f      	mov	r7, r9
 80028a8:	46a0      	mov	r8, r4
 80028aa:	4664      	mov	r4, ip
 80028ac:	40e7      	lsrs	r7, r4
 80028ae:	4644      	mov	r4, r8
 80028b0:	433c      	orrs	r4, r7
 80028b2:	464f      	mov	r7, r9
 80028b4:	40b7      	lsls	r7, r6
 80028b6:	003e      	movs	r6, r7
 80028b8:	1e77      	subs	r7, r6, #1
 80028ba:	41be      	sbcs	r6, r7
 80028bc:	4334      	orrs	r4, r6
 80028be:	4666      	mov	r6, ip
 80028c0:	40f3      	lsrs	r3, r6
 80028c2:	18c9      	adds	r1, r1, r3
 80028c4:	1824      	adds	r4, r4, r0
 80028c6:	4284      	cmp	r4, r0
 80028c8:	419b      	sbcs	r3, r3
 80028ca:	425b      	negs	r3, r3
 80028cc:	4698      	mov	r8, r3
 80028ce:	0016      	movs	r6, r2
 80028d0:	4488      	add	r8, r1
 80028d2:	e04e      	b.n	8002972 <__aeabi_dsub+0x31a>
 80028d4:	4a30      	ldr	r2, [pc, #192]	; (8002998 <__aeabi_dsub+0x340>)
 80028d6:	1c74      	adds	r4, r6, #1
 80028d8:	4214      	tst	r4, r2
 80028da:	d000      	beq.n	80028de <__aeabi_dsub+0x286>
 80028dc:	e0d6      	b.n	8002a8c <__aeabi_dsub+0x434>
 80028de:	464a      	mov	r2, r9
 80028e0:	431a      	orrs	r2, r3
 80028e2:	2e00      	cmp	r6, #0
 80028e4:	d000      	beq.n	80028e8 <__aeabi_dsub+0x290>
 80028e6:	e15b      	b.n	8002ba0 <__aeabi_dsub+0x548>
 80028e8:	2a00      	cmp	r2, #0
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x296>
 80028ec:	e1a5      	b.n	8002c3a <__aeabi_dsub+0x5e2>
 80028ee:	000a      	movs	r2, r1
 80028f0:	4302      	orrs	r2, r0
 80028f2:	d000      	beq.n	80028f6 <__aeabi_dsub+0x29e>
 80028f4:	e1bb      	b.n	8002c6e <__aeabi_dsub+0x616>
 80028f6:	464a      	mov	r2, r9
 80028f8:	0759      	lsls	r1, r3, #29
 80028fa:	08d2      	lsrs	r2, r2, #3
 80028fc:	430a      	orrs	r2, r1
 80028fe:	08db      	lsrs	r3, r3, #3
 8002900:	e027      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002902:	000a      	movs	r2, r1
 8002904:	4302      	orrs	r2, r0
 8002906:	d100      	bne.n	800290a <__aeabi_dsub+0x2b2>
 8002908:	e174      	b.n	8002bf4 <__aeabi_dsub+0x59c>
 800290a:	0022      	movs	r2, r4
 800290c:	3a01      	subs	r2, #1
 800290e:	2c01      	cmp	r4, #1
 8002910:	d005      	beq.n	800291e <__aeabi_dsub+0x2c6>
 8002912:	4c1e      	ldr	r4, [pc, #120]	; (800298c <__aeabi_dsub+0x334>)
 8002914:	45a4      	cmp	ip, r4
 8002916:	d100      	bne.n	800291a <__aeabi_dsub+0x2c2>
 8002918:	e094      	b.n	8002a44 <__aeabi_dsub+0x3ec>
 800291a:	4694      	mov	ip, r2
 800291c:	e759      	b.n	80027d2 <__aeabi_dsub+0x17a>
 800291e:	4448      	add	r0, r9
 8002920:	4548      	cmp	r0, r9
 8002922:	4192      	sbcs	r2, r2
 8002924:	185b      	adds	r3, r3, r1
 8002926:	4698      	mov	r8, r3
 8002928:	0004      	movs	r4, r0
 800292a:	4252      	negs	r2, r2
 800292c:	4490      	add	r8, r2
 800292e:	4643      	mov	r3, r8
 8002930:	2602      	movs	r6, #2
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	d500      	bpl.n	8002938 <__aeabi_dsub+0x2e0>
 8002936:	e0c4      	b.n	8002ac2 <__aeabi_dsub+0x46a>
 8002938:	3e01      	subs	r6, #1
 800293a:	0763      	lsls	r3, r4, #29
 800293c:	d000      	beq.n	8002940 <__aeabi_dsub+0x2e8>
 800293e:	e711      	b.n	8002764 <__aeabi_dsub+0x10c>
 8002940:	4643      	mov	r3, r8
 8002942:	46b4      	mov	ip, r6
 8002944:	0759      	lsls	r1, r3, #29
 8002946:	08e2      	lsrs	r2, r4, #3
 8002948:	430a      	orrs	r2, r1
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	490f      	ldr	r1, [pc, #60]	; (800298c <__aeabi_dsub+0x334>)
 800294e:	458c      	cmp	ip, r1
 8002950:	d040      	beq.n	80029d4 <__aeabi_dsub+0x37c>
 8002952:	4661      	mov	r1, ip
 8002954:	031b      	lsls	r3, r3, #12
 8002956:	0549      	lsls	r1, r1, #21
 8002958:	0b1b      	lsrs	r3, r3, #12
 800295a:	0d49      	lsrs	r1, r1, #21
 800295c:	e720      	b.n	80027a0 <__aeabi_dsub+0x148>
 800295e:	4301      	orrs	r1, r0
 8002960:	000c      	movs	r4, r1
 8002962:	1e61      	subs	r1, r4, #1
 8002964:	418c      	sbcs	r4, r1
 8002966:	444c      	add	r4, r9
 8002968:	454c      	cmp	r4, r9
 800296a:	4192      	sbcs	r2, r2
 800296c:	4252      	negs	r2, r2
 800296e:	4690      	mov	r8, r2
 8002970:	4498      	add	r8, r3
 8002972:	4643      	mov	r3, r8
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	d5e0      	bpl.n	800293a <__aeabi_dsub+0x2e2>
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <__aeabi_dsub+0x334>)
 800297a:	3601      	adds	r6, #1
 800297c:	429e      	cmp	r6, r3
 800297e:	d000      	beq.n	8002982 <__aeabi_dsub+0x32a>
 8002980:	e09f      	b.n	8002ac2 <__aeabi_dsub+0x46a>
 8002982:	0031      	movs	r1, r6
 8002984:	2300      	movs	r3, #0
 8002986:	2200      	movs	r2, #0
 8002988:	e70a      	b.n	80027a0 <__aeabi_dsub+0x148>
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	000007ff 	.word	0x000007ff
 8002990:	ff7fffff 	.word	0xff7fffff
 8002994:	fffff801 	.word	0xfffff801
 8002998:	000007fe 	.word	0x000007fe
 800299c:	2a00      	cmp	r2, #0
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x34a>
 80029a0:	e160      	b.n	8002c64 <__aeabi_dsub+0x60c>
 80029a2:	000a      	movs	r2, r1
 80029a4:	4302      	orrs	r2, r0
 80029a6:	d04d      	beq.n	8002a44 <__aeabi_dsub+0x3ec>
 80029a8:	464a      	mov	r2, r9
 80029aa:	075c      	lsls	r4, r3, #29
 80029ac:	08d2      	lsrs	r2, r2, #3
 80029ae:	4322      	orrs	r2, r4
 80029b0:	2480      	movs	r4, #128	; 0x80
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	0324      	lsls	r4, r4, #12
 80029b6:	4223      	tst	r3, r4
 80029b8:	d007      	beq.n	80029ca <__aeabi_dsub+0x372>
 80029ba:	08ce      	lsrs	r6, r1, #3
 80029bc:	4226      	tst	r6, r4
 80029be:	d104      	bne.n	80029ca <__aeabi_dsub+0x372>
 80029c0:	465d      	mov	r5, fp
 80029c2:	0033      	movs	r3, r6
 80029c4:	08c2      	lsrs	r2, r0, #3
 80029c6:	0749      	lsls	r1, r1, #29
 80029c8:	430a      	orrs	r2, r1
 80029ca:	0f51      	lsrs	r1, r2, #29
 80029cc:	00d2      	lsls	r2, r2, #3
 80029ce:	08d2      	lsrs	r2, r2, #3
 80029d0:	0749      	lsls	r1, r1, #29
 80029d2:	430a      	orrs	r2, r1
 80029d4:	0011      	movs	r1, r2
 80029d6:	4319      	orrs	r1, r3
 80029d8:	d100      	bne.n	80029dc <__aeabi_dsub+0x384>
 80029da:	e1c8      	b.n	8002d6e <__aeabi_dsub+0x716>
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	0309      	lsls	r1, r1, #12
 80029e0:	430b      	orrs	r3, r1
 80029e2:	031b      	lsls	r3, r3, #12
 80029e4:	49d5      	ldr	r1, [pc, #852]	; (8002d3c <__aeabi_dsub+0x6e4>)
 80029e6:	0b1b      	lsrs	r3, r3, #12
 80029e8:	e6da      	b.n	80027a0 <__aeabi_dsub+0x148>
 80029ea:	49d5      	ldr	r1, [pc, #852]	; (8002d40 <__aeabi_dsub+0x6e8>)
 80029ec:	1ab6      	subs	r6, r6, r2
 80029ee:	400b      	ands	r3, r1
 80029f0:	4698      	mov	r8, r3
 80029f2:	e6b5      	b.n	8002760 <__aeabi_dsub+0x108>
 80029f4:	0020      	movs	r0, r4
 80029f6:	f000 fb3b 	bl	8003070 <__clzsi2>
 80029fa:	0002      	movs	r2, r0
 80029fc:	3218      	adds	r2, #24
 80029fe:	2a1f      	cmp	r2, #31
 8002a00:	dc00      	bgt.n	8002a04 <__aeabi_dsub+0x3ac>
 8002a02:	e68f      	b.n	8002724 <__aeabi_dsub+0xcc>
 8002a04:	0023      	movs	r3, r4
 8002a06:	3808      	subs	r0, #8
 8002a08:	4083      	lsls	r3, r0
 8002a0a:	2400      	movs	r4, #0
 8002a0c:	e692      	b.n	8002734 <__aeabi_dsub+0xdc>
 8002a0e:	4308      	orrs	r0, r1
 8002a10:	0002      	movs	r2, r0
 8002a12:	1e50      	subs	r0, r2, #1
 8002a14:	4182      	sbcs	r2, r0
 8002a16:	e66d      	b.n	80026f4 <__aeabi_dsub+0x9c>
 8002a18:	4cca      	ldr	r4, [pc, #808]	; (8002d44 <__aeabi_dsub+0x6ec>)
 8002a1a:	1c72      	adds	r2, r6, #1
 8002a1c:	4222      	tst	r2, r4
 8002a1e:	d000      	beq.n	8002a22 <__aeabi_dsub+0x3ca>
 8002a20:	e0ad      	b.n	8002b7e <__aeabi_dsub+0x526>
 8002a22:	464a      	mov	r2, r9
 8002a24:	431a      	orrs	r2, r3
 8002a26:	2e00      	cmp	r6, #0
 8002a28:	d1b8      	bne.n	800299c <__aeabi_dsub+0x344>
 8002a2a:	2a00      	cmp	r2, #0
 8002a2c:	d100      	bne.n	8002a30 <__aeabi_dsub+0x3d8>
 8002a2e:	e158      	b.n	8002ce2 <__aeabi_dsub+0x68a>
 8002a30:	000a      	movs	r2, r1
 8002a32:	4302      	orrs	r2, r0
 8002a34:	d000      	beq.n	8002a38 <__aeabi_dsub+0x3e0>
 8002a36:	e159      	b.n	8002cec <__aeabi_dsub+0x694>
 8002a38:	464a      	mov	r2, r9
 8002a3a:	0759      	lsls	r1, r3, #29
 8002a3c:	08d2      	lsrs	r2, r2, #3
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	e786      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002a44:	464a      	mov	r2, r9
 8002a46:	0759      	lsls	r1, r3, #29
 8002a48:	08d2      	lsrs	r2, r2, #3
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	08db      	lsrs	r3, r3, #3
 8002a4e:	e7c1      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002a50:	4dba      	ldr	r5, [pc, #744]	; (8002d3c <__aeabi_dsub+0x6e4>)
 8002a52:	42aa      	cmp	r2, r5
 8002a54:	d100      	bne.n	8002a58 <__aeabi_dsub+0x400>
 8002a56:	e11e      	b.n	8002c96 <__aeabi_dsub+0x63e>
 8002a58:	2580      	movs	r5, #128	; 0x80
 8002a5a:	042d      	lsls	r5, r5, #16
 8002a5c:	432b      	orrs	r3, r5
 8002a5e:	4664      	mov	r4, ip
 8002a60:	2c38      	cmp	r4, #56	; 0x38
 8002a62:	dc5d      	bgt.n	8002b20 <__aeabi_dsub+0x4c8>
 8002a64:	2c1f      	cmp	r4, #31
 8002a66:	dd00      	ble.n	8002a6a <__aeabi_dsub+0x412>
 8002a68:	e0d0      	b.n	8002c0c <__aeabi_dsub+0x5b4>
 8002a6a:	2520      	movs	r5, #32
 8002a6c:	4667      	mov	r7, ip
 8002a6e:	1b2d      	subs	r5, r5, r4
 8002a70:	464e      	mov	r6, r9
 8002a72:	001c      	movs	r4, r3
 8002a74:	40fe      	lsrs	r6, r7
 8002a76:	40ac      	lsls	r4, r5
 8002a78:	4334      	orrs	r4, r6
 8002a7a:	464e      	mov	r6, r9
 8002a7c:	40ae      	lsls	r6, r5
 8002a7e:	0035      	movs	r5, r6
 8002a80:	40fb      	lsrs	r3, r7
 8002a82:	1e6e      	subs	r6, r5, #1
 8002a84:	41b5      	sbcs	r5, r6
 8002a86:	1ac9      	subs	r1, r1, r3
 8002a88:	432c      	orrs	r4, r5
 8002a8a:	e04e      	b.n	8002b2a <__aeabi_dsub+0x4d2>
 8002a8c:	464a      	mov	r2, r9
 8002a8e:	1a14      	subs	r4, r2, r0
 8002a90:	45a1      	cmp	r9, r4
 8002a92:	4192      	sbcs	r2, r2
 8002a94:	4252      	negs	r2, r2
 8002a96:	4690      	mov	r8, r2
 8002a98:	1a5f      	subs	r7, r3, r1
 8002a9a:	003a      	movs	r2, r7
 8002a9c:	4647      	mov	r7, r8
 8002a9e:	1bd2      	subs	r2, r2, r7
 8002aa0:	4690      	mov	r8, r2
 8002aa2:	0212      	lsls	r2, r2, #8
 8002aa4:	d500      	bpl.n	8002aa8 <__aeabi_dsub+0x450>
 8002aa6:	e08b      	b.n	8002bc0 <__aeabi_dsub+0x568>
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	4322      	orrs	r2, r4
 8002aac:	d000      	beq.n	8002ab0 <__aeabi_dsub+0x458>
 8002aae:	e630      	b.n	8002712 <__aeabi_dsub+0xba>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	e74d      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002ab6:	464a      	mov	r2, r9
 8002ab8:	0759      	lsls	r1, r3, #29
 8002aba:	08d2      	lsrs	r2, r2, #3
 8002abc:	430a      	orrs	r2, r1
 8002abe:	08db      	lsrs	r3, r3, #3
 8002ac0:	e744      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002ac2:	4642      	mov	r2, r8
 8002ac4:	4b9e      	ldr	r3, [pc, #632]	; (8002d40 <__aeabi_dsub+0x6e8>)
 8002ac6:	0861      	lsrs	r1, r4, #1
 8002ac8:	401a      	ands	r2, r3
 8002aca:	0013      	movs	r3, r2
 8002acc:	2201      	movs	r2, #1
 8002ace:	4014      	ands	r4, r2
 8002ad0:	430c      	orrs	r4, r1
 8002ad2:	07da      	lsls	r2, r3, #31
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	4698      	mov	r8, r3
 8002ad8:	4314      	orrs	r4, r2
 8002ada:	e641      	b.n	8002760 <__aeabi_dsub+0x108>
 8002adc:	001a      	movs	r2, r3
 8002ade:	3e1f      	subs	r6, #31
 8002ae0:	40f2      	lsrs	r2, r6
 8002ae2:	0016      	movs	r6, r2
 8002ae4:	2920      	cmp	r1, #32
 8002ae6:	d003      	beq.n	8002af0 <__aeabi_dsub+0x498>
 8002ae8:	2240      	movs	r2, #64	; 0x40
 8002aea:	1a51      	subs	r1, r2, r1
 8002aec:	408b      	lsls	r3, r1
 8002aee:	431c      	orrs	r4, r3
 8002af0:	1e62      	subs	r2, r4, #1
 8002af2:	4194      	sbcs	r4, r2
 8002af4:	2300      	movs	r3, #0
 8002af6:	4334      	orrs	r4, r6
 8002af8:	4698      	mov	r8, r3
 8002afa:	2600      	movs	r6, #0
 8002afc:	e71d      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002afe:	000c      	movs	r4, r1
 8002b00:	3a20      	subs	r2, #32
 8002b02:	40d4      	lsrs	r4, r2
 8002b04:	0022      	movs	r2, r4
 8002b06:	4664      	mov	r4, ip
 8002b08:	2c20      	cmp	r4, #32
 8002b0a:	d004      	beq.n	8002b16 <__aeabi_dsub+0x4be>
 8002b0c:	2740      	movs	r7, #64	; 0x40
 8002b0e:	1b3f      	subs	r7, r7, r4
 8002b10:	40b9      	lsls	r1, r7
 8002b12:	4308      	orrs	r0, r1
 8002b14:	4680      	mov	r8, r0
 8002b16:	4644      	mov	r4, r8
 8002b18:	1e61      	subs	r1, r4, #1
 8002b1a:	418c      	sbcs	r4, r1
 8002b1c:	4322      	orrs	r2, r4
 8002b1e:	e5e9      	b.n	80026f4 <__aeabi_dsub+0x9c>
 8002b20:	464c      	mov	r4, r9
 8002b22:	4323      	orrs	r3, r4
 8002b24:	001c      	movs	r4, r3
 8002b26:	1e63      	subs	r3, r4, #1
 8002b28:	419c      	sbcs	r4, r3
 8002b2a:	1b04      	subs	r4, r0, r4
 8002b2c:	42a0      	cmp	r0, r4
 8002b2e:	419b      	sbcs	r3, r3
 8002b30:	425b      	negs	r3, r3
 8002b32:	1acb      	subs	r3, r1, r3
 8002b34:	4698      	mov	r8, r3
 8002b36:	465d      	mov	r5, fp
 8002b38:	0016      	movs	r6, r2
 8002b3a:	e5e2      	b.n	8002702 <__aeabi_dsub+0xaa>
 8002b3c:	464e      	mov	r6, r9
 8002b3e:	431e      	orrs	r6, r3
 8002b40:	d100      	bne.n	8002b44 <__aeabi_dsub+0x4ec>
 8002b42:	e0ae      	b.n	8002ca2 <__aeabi_dsub+0x64a>
 8002b44:	1e66      	subs	r6, r4, #1
 8002b46:	2c01      	cmp	r4, #1
 8002b48:	d100      	bne.n	8002b4c <__aeabi_dsub+0x4f4>
 8002b4a:	e0fd      	b.n	8002d48 <__aeabi_dsub+0x6f0>
 8002b4c:	4f7b      	ldr	r7, [pc, #492]	; (8002d3c <__aeabi_dsub+0x6e4>)
 8002b4e:	42bc      	cmp	r4, r7
 8002b50:	d100      	bne.n	8002b54 <__aeabi_dsub+0x4fc>
 8002b52:	e107      	b.n	8002d64 <__aeabi_dsub+0x70c>
 8002b54:	46b4      	mov	ip, r6
 8002b56:	e69b      	b.n	8002890 <__aeabi_dsub+0x238>
 8002b58:	4664      	mov	r4, ip
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	1b12      	subs	r2, r2, r4
 8002b5e:	000c      	movs	r4, r1
 8002b60:	4094      	lsls	r4, r2
 8002b62:	0007      	movs	r7, r0
 8002b64:	4090      	lsls	r0, r2
 8002b66:	46a0      	mov	r8, r4
 8002b68:	4664      	mov	r4, ip
 8002b6a:	1e42      	subs	r2, r0, #1
 8002b6c:	4190      	sbcs	r0, r2
 8002b6e:	4662      	mov	r2, ip
 8002b70:	40e7      	lsrs	r7, r4
 8002b72:	4644      	mov	r4, r8
 8002b74:	40d1      	lsrs	r1, r2
 8002b76:	433c      	orrs	r4, r7
 8002b78:	4304      	orrs	r4, r0
 8002b7a:	185b      	adds	r3, r3, r1
 8002b7c:	e6f3      	b.n	8002966 <__aeabi_dsub+0x30e>
 8002b7e:	4c6f      	ldr	r4, [pc, #444]	; (8002d3c <__aeabi_dsub+0x6e4>)
 8002b80:	42a2      	cmp	r2, r4
 8002b82:	d100      	bne.n	8002b86 <__aeabi_dsub+0x52e>
 8002b84:	e0d5      	b.n	8002d32 <__aeabi_dsub+0x6da>
 8002b86:	4448      	add	r0, r9
 8002b88:	185b      	adds	r3, r3, r1
 8002b8a:	4548      	cmp	r0, r9
 8002b8c:	4189      	sbcs	r1, r1
 8002b8e:	4249      	negs	r1, r1
 8002b90:	185b      	adds	r3, r3, r1
 8002b92:	07dc      	lsls	r4, r3, #31
 8002b94:	0840      	lsrs	r0, r0, #1
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	4698      	mov	r8, r3
 8002b9a:	0016      	movs	r6, r2
 8002b9c:	4304      	orrs	r4, r0
 8002b9e:	e6cc      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002ba0:	2a00      	cmp	r2, #0
 8002ba2:	d000      	beq.n	8002ba6 <__aeabi_dsub+0x54e>
 8002ba4:	e082      	b.n	8002cac <__aeabi_dsub+0x654>
 8002ba6:	000a      	movs	r2, r1
 8002ba8:	4302      	orrs	r2, r0
 8002baa:	d140      	bne.n	8002c2e <__aeabi_dsub+0x5d6>
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	2500      	movs	r5, #0
 8002bb0:	031b      	lsls	r3, r3, #12
 8002bb2:	e713      	b.n	80029dc <__aeabi_dsub+0x384>
 8002bb4:	074b      	lsls	r3, r1, #29
 8002bb6:	08c2      	lsrs	r2, r0, #3
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	465d      	mov	r5, fp
 8002bbc:	08cb      	lsrs	r3, r1, #3
 8002bbe:	e6c5      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002bc0:	464a      	mov	r2, r9
 8002bc2:	1a84      	subs	r4, r0, r2
 8002bc4:	42a0      	cmp	r0, r4
 8002bc6:	4192      	sbcs	r2, r2
 8002bc8:	1acb      	subs	r3, r1, r3
 8002bca:	4252      	negs	r2, r2
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	4698      	mov	r8, r3
 8002bd0:	465d      	mov	r5, fp
 8002bd2:	e59e      	b.n	8002712 <__aeabi_dsub+0xba>
 8002bd4:	464a      	mov	r2, r9
 8002bd6:	0759      	lsls	r1, r3, #29
 8002bd8:	08d2      	lsrs	r2, r2, #3
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	e6f9      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002be0:	464a      	mov	r2, r9
 8002be2:	1a14      	subs	r4, r2, r0
 8002be4:	45a1      	cmp	r9, r4
 8002be6:	4192      	sbcs	r2, r2
 8002be8:	1a5b      	subs	r3, r3, r1
 8002bea:	4252      	negs	r2, r2
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	4698      	mov	r8, r3
 8002bf0:	2601      	movs	r6, #1
 8002bf2:	e586      	b.n	8002702 <__aeabi_dsub+0xaa>
 8002bf4:	464a      	mov	r2, r9
 8002bf6:	0759      	lsls	r1, r3, #29
 8002bf8:	08d2      	lsrs	r2, r2, #3
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	e6a5      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002c00:	464c      	mov	r4, r9
 8002c02:	4323      	orrs	r3, r4
 8002c04:	001c      	movs	r4, r3
 8002c06:	1e63      	subs	r3, r4, #1
 8002c08:	419c      	sbcs	r4, r3
 8002c0a:	e65b      	b.n	80028c4 <__aeabi_dsub+0x26c>
 8002c0c:	4665      	mov	r5, ip
 8002c0e:	001e      	movs	r6, r3
 8002c10:	3d20      	subs	r5, #32
 8002c12:	40ee      	lsrs	r6, r5
 8002c14:	2c20      	cmp	r4, #32
 8002c16:	d005      	beq.n	8002c24 <__aeabi_dsub+0x5cc>
 8002c18:	2540      	movs	r5, #64	; 0x40
 8002c1a:	1b2d      	subs	r5, r5, r4
 8002c1c:	40ab      	lsls	r3, r5
 8002c1e:	464c      	mov	r4, r9
 8002c20:	431c      	orrs	r4, r3
 8002c22:	46a2      	mov	sl, r4
 8002c24:	4654      	mov	r4, sl
 8002c26:	1e63      	subs	r3, r4, #1
 8002c28:	419c      	sbcs	r4, r3
 8002c2a:	4334      	orrs	r4, r6
 8002c2c:	e77d      	b.n	8002b2a <__aeabi_dsub+0x4d2>
 8002c2e:	074b      	lsls	r3, r1, #29
 8002c30:	08c2      	lsrs	r2, r0, #3
 8002c32:	431a      	orrs	r2, r3
 8002c34:	465d      	mov	r5, fp
 8002c36:	08cb      	lsrs	r3, r1, #3
 8002c38:	e6cc      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002c3a:	000a      	movs	r2, r1
 8002c3c:	4302      	orrs	r2, r0
 8002c3e:	d100      	bne.n	8002c42 <__aeabi_dsub+0x5ea>
 8002c40:	e736      	b.n	8002ab0 <__aeabi_dsub+0x458>
 8002c42:	074b      	lsls	r3, r1, #29
 8002c44:	08c2      	lsrs	r2, r0, #3
 8002c46:	431a      	orrs	r2, r3
 8002c48:	465d      	mov	r5, fp
 8002c4a:	08cb      	lsrs	r3, r1, #3
 8002c4c:	e681      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002c4e:	464a      	mov	r2, r9
 8002c50:	1a84      	subs	r4, r0, r2
 8002c52:	42a0      	cmp	r0, r4
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	1acb      	subs	r3, r1, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	465d      	mov	r5, fp
 8002c60:	2601      	movs	r6, #1
 8002c62:	e54e      	b.n	8002702 <__aeabi_dsub+0xaa>
 8002c64:	074b      	lsls	r3, r1, #29
 8002c66:	08c2      	lsrs	r2, r0, #3
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	08cb      	lsrs	r3, r1, #3
 8002c6c:	e6b2      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002c6e:	464a      	mov	r2, r9
 8002c70:	1a14      	subs	r4, r2, r0
 8002c72:	45a1      	cmp	r9, r4
 8002c74:	4192      	sbcs	r2, r2
 8002c76:	1a5f      	subs	r7, r3, r1
 8002c78:	4252      	negs	r2, r2
 8002c7a:	1aba      	subs	r2, r7, r2
 8002c7c:	4690      	mov	r8, r2
 8002c7e:	0212      	lsls	r2, r2, #8
 8002c80:	d56b      	bpl.n	8002d5a <__aeabi_dsub+0x702>
 8002c82:	464a      	mov	r2, r9
 8002c84:	1a84      	subs	r4, r0, r2
 8002c86:	42a0      	cmp	r0, r4
 8002c88:	4192      	sbcs	r2, r2
 8002c8a:	1acb      	subs	r3, r1, r3
 8002c8c:	4252      	negs	r2, r2
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	4698      	mov	r8, r3
 8002c92:	465d      	mov	r5, fp
 8002c94:	e564      	b.n	8002760 <__aeabi_dsub+0x108>
 8002c96:	074b      	lsls	r3, r1, #29
 8002c98:	08c2      	lsrs	r2, r0, #3
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	465d      	mov	r5, fp
 8002c9e:	08cb      	lsrs	r3, r1, #3
 8002ca0:	e698      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002ca2:	074b      	lsls	r3, r1, #29
 8002ca4:	08c2      	lsrs	r2, r0, #3
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	08cb      	lsrs	r3, r1, #3
 8002caa:	e64f      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002cac:	000a      	movs	r2, r1
 8002cae:	4302      	orrs	r2, r0
 8002cb0:	d090      	beq.n	8002bd4 <__aeabi_dsub+0x57c>
 8002cb2:	464a      	mov	r2, r9
 8002cb4:	075c      	lsls	r4, r3, #29
 8002cb6:	08d2      	lsrs	r2, r2, #3
 8002cb8:	4314      	orrs	r4, r2
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	08db      	lsrs	r3, r3, #3
 8002cbe:	0312      	lsls	r2, r2, #12
 8002cc0:	4213      	tst	r3, r2
 8002cc2:	d008      	beq.n	8002cd6 <__aeabi_dsub+0x67e>
 8002cc4:	08ce      	lsrs	r6, r1, #3
 8002cc6:	4216      	tst	r6, r2
 8002cc8:	d105      	bne.n	8002cd6 <__aeabi_dsub+0x67e>
 8002cca:	08c0      	lsrs	r0, r0, #3
 8002ccc:	0749      	lsls	r1, r1, #29
 8002cce:	4308      	orrs	r0, r1
 8002cd0:	0004      	movs	r4, r0
 8002cd2:	465d      	mov	r5, fp
 8002cd4:	0033      	movs	r3, r6
 8002cd6:	0f61      	lsrs	r1, r4, #29
 8002cd8:	00e2      	lsls	r2, r4, #3
 8002cda:	0749      	lsls	r1, r1, #29
 8002cdc:	08d2      	lsrs	r2, r2, #3
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	e678      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002ce2:	074b      	lsls	r3, r1, #29
 8002ce4:	08c2      	lsrs	r2, r0, #3
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	08cb      	lsrs	r3, r1, #3
 8002cea:	e632      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002cec:	4448      	add	r0, r9
 8002cee:	185b      	adds	r3, r3, r1
 8002cf0:	4548      	cmp	r0, r9
 8002cf2:	4192      	sbcs	r2, r2
 8002cf4:	4698      	mov	r8, r3
 8002cf6:	4252      	negs	r2, r2
 8002cf8:	4490      	add	r8, r2
 8002cfa:	4643      	mov	r3, r8
 8002cfc:	0004      	movs	r4, r0
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	d400      	bmi.n	8002d04 <__aeabi_dsub+0x6ac>
 8002d02:	e61a      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002d04:	4642      	mov	r2, r8
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <__aeabi_dsub+0x6e8>)
 8002d08:	2601      	movs	r6, #1
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	4690      	mov	r8, r2
 8002d0e:	e614      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002d10:	4666      	mov	r6, ip
 8002d12:	001f      	movs	r7, r3
 8002d14:	3e20      	subs	r6, #32
 8002d16:	40f7      	lsrs	r7, r6
 8002d18:	2c20      	cmp	r4, #32
 8002d1a:	d005      	beq.n	8002d28 <__aeabi_dsub+0x6d0>
 8002d1c:	2640      	movs	r6, #64	; 0x40
 8002d1e:	1b36      	subs	r6, r6, r4
 8002d20:	40b3      	lsls	r3, r6
 8002d22:	464c      	mov	r4, r9
 8002d24:	431c      	orrs	r4, r3
 8002d26:	46a2      	mov	sl, r4
 8002d28:	4654      	mov	r4, sl
 8002d2a:	1e63      	subs	r3, r4, #1
 8002d2c:	419c      	sbcs	r4, r3
 8002d2e:	433c      	orrs	r4, r7
 8002d30:	e5c8      	b.n	80028c4 <__aeabi_dsub+0x26c>
 8002d32:	0011      	movs	r1, r2
 8002d34:	2300      	movs	r3, #0
 8002d36:	2200      	movs	r2, #0
 8002d38:	e532      	b.n	80027a0 <__aeabi_dsub+0x148>
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	000007ff 	.word	0x000007ff
 8002d40:	ff7fffff 	.word	0xff7fffff
 8002d44:	000007fe 	.word	0x000007fe
 8002d48:	464a      	mov	r2, r9
 8002d4a:	1814      	adds	r4, r2, r0
 8002d4c:	4284      	cmp	r4, r0
 8002d4e:	4192      	sbcs	r2, r2
 8002d50:	185b      	adds	r3, r3, r1
 8002d52:	4698      	mov	r8, r3
 8002d54:	4252      	negs	r2, r2
 8002d56:	4490      	add	r8, r2
 8002d58:	e5e9      	b.n	800292e <__aeabi_dsub+0x2d6>
 8002d5a:	4642      	mov	r2, r8
 8002d5c:	4322      	orrs	r2, r4
 8002d5e:	d100      	bne.n	8002d62 <__aeabi_dsub+0x70a>
 8002d60:	e6a6      	b.n	8002ab0 <__aeabi_dsub+0x458>
 8002d62:	e5ea      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002d64:	074b      	lsls	r3, r1, #29
 8002d66:	08c2      	lsrs	r2, r0, #3
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	08cb      	lsrs	r3, r1, #3
 8002d6c:	e632      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4901      	ldr	r1, [pc, #4]	; (8002d78 <__aeabi_dsub+0x720>)
 8002d72:	0013      	movs	r3, r2
 8002d74:	e514      	b.n	80027a0 <__aeabi_dsub+0x148>
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	000007ff 	.word	0x000007ff

08002d7c <__aeabi_dcmpun>:
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	0005      	movs	r5, r0
 8002d80:	480c      	ldr	r0, [pc, #48]	; (8002db4 <__aeabi_dcmpun+0x38>)
 8002d82:	030c      	lsls	r4, r1, #12
 8002d84:	0016      	movs	r6, r2
 8002d86:	0049      	lsls	r1, r1, #1
 8002d88:	031a      	lsls	r2, r3, #12
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	0d49      	lsrs	r1, r1, #21
 8002d90:	0b12      	lsrs	r2, r2, #12
 8002d92:	0d5b      	lsrs	r3, r3, #21
 8002d94:	4281      	cmp	r1, r0
 8002d96:	d008      	beq.n	8002daa <__aeabi_dcmpun+0x2e>
 8002d98:	4906      	ldr	r1, [pc, #24]	; (8002db4 <__aeabi_dcmpun+0x38>)
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	428b      	cmp	r3, r1
 8002d9e:	d103      	bne.n	8002da8 <__aeabi_dcmpun+0x2c>
 8002da0:	4332      	orrs	r2, r6
 8002da2:	0010      	movs	r0, r2
 8002da4:	1e42      	subs	r2, r0, #1
 8002da6:	4190      	sbcs	r0, r2
 8002da8:	bd70      	pop	{r4, r5, r6, pc}
 8002daa:	2001      	movs	r0, #1
 8002dac:	432c      	orrs	r4, r5
 8002dae:	d1fb      	bne.n	8002da8 <__aeabi_dcmpun+0x2c>
 8002db0:	e7f2      	b.n	8002d98 <__aeabi_dcmpun+0x1c>
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	000007ff 	.word	0x000007ff

08002db8 <__aeabi_d2iz>:
 8002db8:	000a      	movs	r2, r1
 8002dba:	b530      	push	{r4, r5, lr}
 8002dbc:	4c13      	ldr	r4, [pc, #76]	; (8002e0c <__aeabi_d2iz+0x54>)
 8002dbe:	0053      	lsls	r3, r2, #1
 8002dc0:	0309      	lsls	r1, r1, #12
 8002dc2:	0005      	movs	r5, r0
 8002dc4:	0b09      	lsrs	r1, r1, #12
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	0d5b      	lsrs	r3, r3, #21
 8002dca:	0fd2      	lsrs	r2, r2, #31
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	dd04      	ble.n	8002dda <__aeabi_d2iz+0x22>
 8002dd0:	480f      	ldr	r0, [pc, #60]	; (8002e10 <__aeabi_d2iz+0x58>)
 8002dd2:	4283      	cmp	r3, r0
 8002dd4:	dd02      	ble.n	8002ddc <__aeabi_d2iz+0x24>
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <__aeabi_d2iz+0x5c>)
 8002dd8:	18d0      	adds	r0, r2, r3
 8002dda:	bd30      	pop	{r4, r5, pc}
 8002ddc:	2080      	movs	r0, #128	; 0x80
 8002dde:	0340      	lsls	r0, r0, #13
 8002de0:	4301      	orrs	r1, r0
 8002de2:	480d      	ldr	r0, [pc, #52]	; (8002e18 <__aeabi_d2iz+0x60>)
 8002de4:	1ac0      	subs	r0, r0, r3
 8002de6:	281f      	cmp	r0, #31
 8002de8:	dd08      	ble.n	8002dfc <__aeabi_d2iz+0x44>
 8002dea:	480c      	ldr	r0, [pc, #48]	; (8002e1c <__aeabi_d2iz+0x64>)
 8002dec:	1ac3      	subs	r3, r0, r3
 8002dee:	40d9      	lsrs	r1, r3
 8002df0:	000b      	movs	r3, r1
 8002df2:	4258      	negs	r0, r3
 8002df4:	2a00      	cmp	r2, #0
 8002df6:	d1f0      	bne.n	8002dda <__aeabi_d2iz+0x22>
 8002df8:	0018      	movs	r0, r3
 8002dfa:	e7ee      	b.n	8002dda <__aeabi_d2iz+0x22>
 8002dfc:	4c08      	ldr	r4, [pc, #32]	; (8002e20 <__aeabi_d2iz+0x68>)
 8002dfe:	40c5      	lsrs	r5, r0
 8002e00:	46a4      	mov	ip, r4
 8002e02:	4463      	add	r3, ip
 8002e04:	4099      	lsls	r1, r3
 8002e06:	000b      	movs	r3, r1
 8002e08:	432b      	orrs	r3, r5
 8002e0a:	e7f2      	b.n	8002df2 <__aeabi_d2iz+0x3a>
 8002e0c:	000003fe 	.word	0x000003fe
 8002e10:	0000041d 	.word	0x0000041d
 8002e14:	7fffffff 	.word	0x7fffffff
 8002e18:	00000433 	.word	0x00000433
 8002e1c:	00000413 	.word	0x00000413
 8002e20:	fffffbed 	.word	0xfffffbed

08002e24 <__aeabi_i2d>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d016      	beq.n	8002e58 <__aeabi_i2d+0x34>
 8002e2a:	17c3      	asrs	r3, r0, #31
 8002e2c:	18c5      	adds	r5, r0, r3
 8002e2e:	405d      	eors	r5, r3
 8002e30:	0fc4      	lsrs	r4, r0, #31
 8002e32:	0028      	movs	r0, r5
 8002e34:	f000 f91c 	bl	8003070 <__clzsi2>
 8002e38:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <__aeabi_i2d+0x5c>)
 8002e3a:	1a12      	subs	r2, r2, r0
 8002e3c:	280a      	cmp	r0, #10
 8002e3e:	dc16      	bgt.n	8002e6e <__aeabi_i2d+0x4a>
 8002e40:	0003      	movs	r3, r0
 8002e42:	002e      	movs	r6, r5
 8002e44:	3315      	adds	r3, #21
 8002e46:	409e      	lsls	r6, r3
 8002e48:	230b      	movs	r3, #11
 8002e4a:	1a18      	subs	r0, r3, r0
 8002e4c:	40c5      	lsrs	r5, r0
 8002e4e:	0553      	lsls	r3, r2, #21
 8002e50:	032d      	lsls	r5, r5, #12
 8002e52:	0b2d      	lsrs	r5, r5, #12
 8002e54:	0d5b      	lsrs	r3, r3, #21
 8002e56:	e003      	b.n	8002e60 <__aeabi_i2d+0x3c>
 8002e58:	2400      	movs	r4, #0
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2500      	movs	r5, #0
 8002e5e:	2600      	movs	r6, #0
 8002e60:	051b      	lsls	r3, r3, #20
 8002e62:	432b      	orrs	r3, r5
 8002e64:	07e4      	lsls	r4, r4, #31
 8002e66:	4323      	orrs	r3, r4
 8002e68:	0030      	movs	r0, r6
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
 8002e6e:	380b      	subs	r0, #11
 8002e70:	4085      	lsls	r5, r0
 8002e72:	0553      	lsls	r3, r2, #21
 8002e74:	032d      	lsls	r5, r5, #12
 8002e76:	2600      	movs	r6, #0
 8002e78:	0b2d      	lsrs	r5, r5, #12
 8002e7a:	0d5b      	lsrs	r3, r3, #21
 8002e7c:	e7f0      	b.n	8002e60 <__aeabi_i2d+0x3c>
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	0000041e 	.word	0x0000041e

08002e84 <__aeabi_ui2d>:
 8002e84:	b510      	push	{r4, lr}
 8002e86:	1e04      	subs	r4, r0, #0
 8002e88:	d010      	beq.n	8002eac <__aeabi_ui2d+0x28>
 8002e8a:	f000 f8f1 	bl	8003070 <__clzsi2>
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <__aeabi_ui2d+0x48>)
 8002e90:	1a1b      	subs	r3, r3, r0
 8002e92:	280a      	cmp	r0, #10
 8002e94:	dc11      	bgt.n	8002eba <__aeabi_ui2d+0x36>
 8002e96:	220b      	movs	r2, #11
 8002e98:	0021      	movs	r1, r4
 8002e9a:	1a12      	subs	r2, r2, r0
 8002e9c:	40d1      	lsrs	r1, r2
 8002e9e:	3015      	adds	r0, #21
 8002ea0:	030a      	lsls	r2, r1, #12
 8002ea2:	055b      	lsls	r3, r3, #21
 8002ea4:	4084      	lsls	r4, r0
 8002ea6:	0b12      	lsrs	r2, r2, #12
 8002ea8:	0d5b      	lsrs	r3, r3, #21
 8002eaa:	e001      	b.n	8002eb0 <__aeabi_ui2d+0x2c>
 8002eac:	2300      	movs	r3, #0
 8002eae:	2200      	movs	r2, #0
 8002eb0:	051b      	lsls	r3, r3, #20
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	0020      	movs	r0, r4
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	bd10      	pop	{r4, pc}
 8002eba:	0022      	movs	r2, r4
 8002ebc:	380b      	subs	r0, #11
 8002ebe:	4082      	lsls	r2, r0
 8002ec0:	055b      	lsls	r3, r3, #21
 8002ec2:	0312      	lsls	r2, r2, #12
 8002ec4:	2400      	movs	r4, #0
 8002ec6:	0b12      	lsrs	r2, r2, #12
 8002ec8:	0d5b      	lsrs	r3, r3, #21
 8002eca:	e7f1      	b.n	8002eb0 <__aeabi_ui2d+0x2c>
 8002ecc:	0000041e 	.word	0x0000041e

08002ed0 <__aeabi_f2d>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	0043      	lsls	r3, r0, #1
 8002ed4:	0246      	lsls	r6, r0, #9
 8002ed6:	0fc4      	lsrs	r4, r0, #31
 8002ed8:	20fe      	movs	r0, #254	; 0xfe
 8002eda:	0e1b      	lsrs	r3, r3, #24
 8002edc:	1c59      	adds	r1, r3, #1
 8002ede:	0a75      	lsrs	r5, r6, #9
 8002ee0:	4208      	tst	r0, r1
 8002ee2:	d00c      	beq.n	8002efe <__aeabi_f2d+0x2e>
 8002ee4:	22e0      	movs	r2, #224	; 0xe0
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	4694      	mov	ip, r2
 8002eea:	076d      	lsls	r5, r5, #29
 8002eec:	0b36      	lsrs	r6, r6, #12
 8002eee:	4463      	add	r3, ip
 8002ef0:	051b      	lsls	r3, r3, #20
 8002ef2:	4333      	orrs	r3, r6
 8002ef4:	07e4      	lsls	r4, r4, #31
 8002ef6:	4323      	orrs	r3, r4
 8002ef8:	0028      	movs	r0, r5
 8002efa:	0019      	movs	r1, r3
 8002efc:	bd70      	pop	{r4, r5, r6, pc}
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d114      	bne.n	8002f2c <__aeabi_f2d+0x5c>
 8002f02:	2d00      	cmp	r5, #0
 8002f04:	d01b      	beq.n	8002f3e <__aeabi_f2d+0x6e>
 8002f06:	0028      	movs	r0, r5
 8002f08:	f000 f8b2 	bl	8003070 <__clzsi2>
 8002f0c:	280a      	cmp	r0, #10
 8002f0e:	dc1c      	bgt.n	8002f4a <__aeabi_f2d+0x7a>
 8002f10:	230b      	movs	r3, #11
 8002f12:	002a      	movs	r2, r5
 8002f14:	1a1b      	subs	r3, r3, r0
 8002f16:	40da      	lsrs	r2, r3
 8002f18:	0003      	movs	r3, r0
 8002f1a:	3315      	adds	r3, #21
 8002f1c:	409d      	lsls	r5, r3
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <__aeabi_f2d+0x88>)
 8002f20:	0312      	lsls	r2, r2, #12
 8002f22:	1a1b      	subs	r3, r3, r0
 8002f24:	055b      	lsls	r3, r3, #21
 8002f26:	0b16      	lsrs	r6, r2, #12
 8002f28:	0d5b      	lsrs	r3, r3, #21
 8002f2a:	e7e1      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f2c:	2d00      	cmp	r5, #0
 8002f2e:	d009      	beq.n	8002f44 <__aeabi_f2d+0x74>
 8002f30:	0b32      	lsrs	r2, r6, #12
 8002f32:	2680      	movs	r6, #128	; 0x80
 8002f34:	0336      	lsls	r6, r6, #12
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <__aeabi_f2d+0x8c>)
 8002f38:	076d      	lsls	r5, r5, #29
 8002f3a:	4316      	orrs	r6, r2
 8002f3c:	e7d8      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2600      	movs	r6, #0
 8002f42:	e7d5      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f44:	2600      	movs	r6, #0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <__aeabi_f2d+0x8c>)
 8002f48:	e7d2      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	002a      	movs	r2, r5
 8002f4e:	3b0b      	subs	r3, #11
 8002f50:	409a      	lsls	r2, r3
 8002f52:	2500      	movs	r5, #0
 8002f54:	e7e3      	b.n	8002f1e <__aeabi_f2d+0x4e>
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	00000389 	.word	0x00000389
 8002f5c:	000007ff 	.word	0x000007ff

08002f60 <__aeabi_d2f>:
 8002f60:	0002      	movs	r2, r0
 8002f62:	004b      	lsls	r3, r1, #1
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f66:	0308      	lsls	r0, r1, #12
 8002f68:	0d5b      	lsrs	r3, r3, #21
 8002f6a:	4e3d      	ldr	r6, [pc, #244]	; (8003060 <__aeabi_d2f+0x100>)
 8002f6c:	0fcc      	lsrs	r4, r1, #31
 8002f6e:	0a40      	lsrs	r0, r0, #9
 8002f70:	0f51      	lsrs	r1, r2, #29
 8002f72:	1c5f      	adds	r7, r3, #1
 8002f74:	4308      	orrs	r0, r1
 8002f76:	00d5      	lsls	r5, r2, #3
 8002f78:	4237      	tst	r7, r6
 8002f7a:	d00a      	beq.n	8002f92 <__aeabi_d2f+0x32>
 8002f7c:	4939      	ldr	r1, [pc, #228]	; (8003064 <__aeabi_d2f+0x104>)
 8002f7e:	185e      	adds	r6, r3, r1
 8002f80:	2efe      	cmp	r6, #254	; 0xfe
 8002f82:	dd16      	ble.n	8002fb2 <__aeabi_d2f+0x52>
 8002f84:	23ff      	movs	r3, #255	; 0xff
 8002f86:	2100      	movs	r1, #0
 8002f88:	05db      	lsls	r3, r3, #23
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	07e0      	lsls	r0, r4, #31
 8002f8e:	4318      	orrs	r0, r3
 8002f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <__aeabi_d2f+0x44>
 8002f96:	4328      	orrs	r0, r5
 8002f98:	d027      	beq.n	8002fea <__aeabi_d2f+0x8a>
 8002f9a:	2105      	movs	r1, #5
 8002f9c:	0189      	lsls	r1, r1, #6
 8002f9e:	0a49      	lsrs	r1, r1, #9
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e7f1      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002fa4:	4305      	orrs	r5, r0
 8002fa6:	d0ed      	beq.n	8002f84 <__aeabi_d2f+0x24>
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	03c9      	lsls	r1, r1, #15
 8002fac:	23ff      	movs	r3, #255	; 0xff
 8002fae:	4301      	orrs	r1, r0
 8002fb0:	e7ea      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002fb2:	2e00      	cmp	r6, #0
 8002fb4:	dd1c      	ble.n	8002ff0 <__aeabi_d2f+0x90>
 8002fb6:	0192      	lsls	r2, r2, #6
 8002fb8:	0011      	movs	r1, r2
 8002fba:	1e4a      	subs	r2, r1, #1
 8002fbc:	4191      	sbcs	r1, r2
 8002fbe:	00c0      	lsls	r0, r0, #3
 8002fc0:	0f6d      	lsrs	r5, r5, #29
 8002fc2:	4301      	orrs	r1, r0
 8002fc4:	4329      	orrs	r1, r5
 8002fc6:	074b      	lsls	r3, r1, #29
 8002fc8:	d048      	beq.n	800305c <__aeabi_d2f+0xfc>
 8002fca:	230f      	movs	r3, #15
 8002fcc:	400b      	ands	r3, r1
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d000      	beq.n	8002fd4 <__aeabi_d2f+0x74>
 8002fd2:	3104      	adds	r1, #4
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	04db      	lsls	r3, r3, #19
 8002fd8:	400b      	ands	r3, r1
 8002fda:	d03f      	beq.n	800305c <__aeabi_d2f+0xfc>
 8002fdc:	1c72      	adds	r2, r6, #1
 8002fde:	2efe      	cmp	r6, #254	; 0xfe
 8002fe0:	d0d0      	beq.n	8002f84 <__aeabi_d2f+0x24>
 8002fe2:	0189      	lsls	r1, r1, #6
 8002fe4:	0a49      	lsrs	r1, r1, #9
 8002fe6:	b2d3      	uxtb	r3, r2
 8002fe8:	e7ce      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	e7cb      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002ff0:	0032      	movs	r2, r6
 8002ff2:	3217      	adds	r2, #23
 8002ff4:	db22      	blt.n	800303c <__aeabi_d2f+0xdc>
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	221e      	movs	r2, #30
 8002ffa:	0409      	lsls	r1, r1, #16
 8002ffc:	4308      	orrs	r0, r1
 8002ffe:	1b92      	subs	r2, r2, r6
 8003000:	2a1f      	cmp	r2, #31
 8003002:	dd1d      	ble.n	8003040 <__aeabi_d2f+0xe0>
 8003004:	2102      	movs	r1, #2
 8003006:	4249      	negs	r1, r1
 8003008:	1b8e      	subs	r6, r1, r6
 800300a:	0001      	movs	r1, r0
 800300c:	40f1      	lsrs	r1, r6
 800300e:	000e      	movs	r6, r1
 8003010:	2a20      	cmp	r2, #32
 8003012:	d004      	beq.n	800301e <__aeabi_d2f+0xbe>
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <__aeabi_d2f+0x108>)
 8003016:	4694      	mov	ip, r2
 8003018:	4463      	add	r3, ip
 800301a:	4098      	lsls	r0, r3
 800301c:	4305      	orrs	r5, r0
 800301e:	0029      	movs	r1, r5
 8003020:	1e4d      	subs	r5, r1, #1
 8003022:	41a9      	sbcs	r1, r5
 8003024:	4331      	orrs	r1, r6
 8003026:	2600      	movs	r6, #0
 8003028:	074b      	lsls	r3, r1, #29
 800302a:	d1ce      	bne.n	8002fca <__aeabi_d2f+0x6a>
 800302c:	2080      	movs	r0, #128	; 0x80
 800302e:	000b      	movs	r3, r1
 8003030:	04c0      	lsls	r0, r0, #19
 8003032:	2201      	movs	r2, #1
 8003034:	4003      	ands	r3, r0
 8003036:	4201      	tst	r1, r0
 8003038:	d1d3      	bne.n	8002fe2 <__aeabi_d2f+0x82>
 800303a:	e7af      	b.n	8002f9c <__aeabi_d2f+0x3c>
 800303c:	2300      	movs	r3, #0
 800303e:	e7ac      	b.n	8002f9a <__aeabi_d2f+0x3a>
 8003040:	490a      	ldr	r1, [pc, #40]	; (800306c <__aeabi_d2f+0x10c>)
 8003042:	468c      	mov	ip, r1
 8003044:	0029      	movs	r1, r5
 8003046:	4463      	add	r3, ip
 8003048:	40d1      	lsrs	r1, r2
 800304a:	409d      	lsls	r5, r3
 800304c:	000a      	movs	r2, r1
 800304e:	0029      	movs	r1, r5
 8003050:	4098      	lsls	r0, r3
 8003052:	1e4d      	subs	r5, r1, #1
 8003054:	41a9      	sbcs	r1, r5
 8003056:	4301      	orrs	r1, r0
 8003058:	4311      	orrs	r1, r2
 800305a:	e7e4      	b.n	8003026 <__aeabi_d2f+0xc6>
 800305c:	0033      	movs	r3, r6
 800305e:	e79d      	b.n	8002f9c <__aeabi_d2f+0x3c>
 8003060:	000007fe 	.word	0x000007fe
 8003064:	fffffc80 	.word	0xfffffc80
 8003068:	fffffca2 	.word	0xfffffca2
 800306c:	fffffc82 	.word	0xfffffc82

08003070 <__clzsi2>:
 8003070:	211c      	movs	r1, #28
 8003072:	2301      	movs	r3, #1
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	4298      	cmp	r0, r3
 8003078:	d301      	bcc.n	800307e <__clzsi2+0xe>
 800307a:	0c00      	lsrs	r0, r0, #16
 800307c:	3910      	subs	r1, #16
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	4298      	cmp	r0, r3
 8003082:	d301      	bcc.n	8003088 <__clzsi2+0x18>
 8003084:	0a00      	lsrs	r0, r0, #8
 8003086:	3908      	subs	r1, #8
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	4298      	cmp	r0, r3
 800308c:	d301      	bcc.n	8003092 <__clzsi2+0x22>
 800308e:	0900      	lsrs	r0, r0, #4
 8003090:	3904      	subs	r1, #4
 8003092:	a202      	add	r2, pc, #8	; (adr r2, 800309c <__clzsi2+0x2c>)
 8003094:	5c10      	ldrb	r0, [r2, r0]
 8003096:	1840      	adds	r0, r0, r1
 8003098:	4770      	bx	lr
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	02020304 	.word	0x02020304
 80030a0:	01010101 	.word	0x01010101
	...

080030ac <ICM_CS_Low>:
	dst <<= 8; \
	dst |= (src_low); \
} while (0);

void ICM_CS_Low(uint8_t index)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	0002      	movs	r2, r0
 80030b4:	1dfb      	adds	r3, r7, #7
 80030b6:	701a      	strb	r2, [r3, #0]
	if (index == 0)
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <ICM_CS_Low+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	480a      	ldr	r0, [pc, #40]	; (80030f0 <ICM_CS_Low+0x44>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	0019      	movs	r1, r3
 80030ca:	f006 fc4d 	bl	8009968 <HAL_GPIO_WritePin>

	else if (index == 1)
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
	}
}
 80030ce:	e00a      	b.n	80030e6 <ICM_CS_Low+0x3a>
	else if (index == 1)
 80030d0:	1dfb      	adds	r3, r7, #7
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d106      	bne.n	80030e6 <ICM_CS_Low+0x3a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	015b      	lsls	r3, r3, #5
 80030dc:	4805      	ldr	r0, [pc, #20]	; (80030f4 <ICM_CS_Low+0x48>)
 80030de:	2200      	movs	r2, #0
 80030e0:	0019      	movs	r1, r3
 80030e2:	f006 fc41 	bl	8009968 <HAL_GPIO_WritePin>
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	50000800 	.word	0x50000800
 80030f4:	50000400 	.word	0x50000400

080030f8 <ICM_CS_High>:

void ICM_CS_High(uint8_t index)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	0002      	movs	r2, r0
 8003100:	1dfb      	adds	r3, r7, #7
 8003102:	701a      	strb	r2, [r3, #0]
	if (index == 0)
 8003104:	1dfb      	adds	r3, r7, #7
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <ICM_CS_High+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	480a      	ldr	r0, [pc, #40]	; (800313c <ICM_CS_High+0x44>)
 8003112:	2201      	movs	r2, #1
 8003114:	0019      	movs	r1, r3
 8003116:	f006 fc27 	bl	8009968 <HAL_GPIO_WritePin>

	else if (index == 1)
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
	}
}
 800311a:	e00a      	b.n	8003132 <ICM_CS_High+0x3a>
	else if (index == 1)
 800311c:	1dfb      	adds	r3, r7, #7
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d106      	bne.n	8003132 <ICM_CS_High+0x3a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	015b      	lsls	r3, r3, #5
 8003128:	4805      	ldr	r0, [pc, #20]	; (8003140 <ICM_CS_High+0x48>)
 800312a:	2201      	movs	r2, #1
 800312c:	0019      	movs	r1, r3
 800312e:	f006 fc1b 	bl	8009968 <HAL_GPIO_WritePin>
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b002      	add	sp, #8
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	50000800 	.word	0x50000800
 8003140:	50000400 	.word	0x50000400

08003144 <ICM_ReadBytes>:

void ICM_ReadBytes(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t *pData, uint16_t Size, uint8_t index) // ***
{
 8003144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	0008      	movs	r0, r1
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	0019      	movs	r1, r3
 8003152:	240b      	movs	r4, #11
 8003154:	193b      	adds	r3, r7, r4
 8003156:	1c02      	adds	r2, r0, #0
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	2508      	movs	r5, #8
 800315c:	197b      	adds	r3, r7, r5
 800315e:	1c0a      	adds	r2, r1, #0
 8003160:	801a      	strh	r2, [r3, #0]
	reg = reg | READ_FLAG;
 8003162:	193b      	adds	r3, r7, r4
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	4252      	negs	r2, r2
 800316a:	4313      	orrs	r3, r2
 800316c:	b2da      	uxtb	r2, r3
 800316e:	193b      	adds	r3, r7, r4
 8003170:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 8003172:	2620      	movs	r6, #32
 8003174:	2308      	movs	r3, #8
 8003176:	18fa      	adds	r2, r7, r3
 8003178:	1993      	adds	r3, r2, r6
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	0018      	movs	r0, r3
 800317e:	f7ff ff95 	bl	80030ac <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 8003182:	2301      	movs	r3, #1
 8003184:	425b      	negs	r3, r3
 8003186:	1939      	adds	r1, r7, r4
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f007 fd74 	bl	800ac78 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, pData, Size,HAL_MAX_DELAY);
 8003190:	2301      	movs	r3, #1
 8003192:	425c      	negs	r4, r3
 8003194:	197b      	adds	r3, r7, r5
 8003196:	881a      	ldrh	r2, [r3, #0]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	0023      	movs	r3, r4
 800319e:	f007 fec3 	bl	800af28 <HAL_SPI_Receive>
	ICM_CS_High(index);
 80031a2:	2308      	movs	r3, #8
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	199b      	adds	r3, r3, r6
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f7ff ffa4 	bl	80030f8 <ICM_CS_High>
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b005      	add	sp, #20
 80031b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b8 <ICM_ReadOneByte>:
	ICM_CS_High(index);

}

void ICM_ReadOneByte(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t* pData, uint8_t index) // ***
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	0008      	movs	r0, r1
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	0019      	movs	r1, r3
 80031c6:	240b      	movs	r4, #11
 80031c8:	193b      	adds	r3, r7, r4
 80031ca:	1c02      	adds	r2, r0, #0
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	200a      	movs	r0, #10
 80031d0:	183b      	adds	r3, r7, r0
 80031d2:	1c0a      	adds	r2, r1, #0
 80031d4:	701a      	strb	r2, [r3, #0]
	reg = reg | READ_FLAG;
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	4252      	negs	r2, r2
 80031de:	4313      	orrs	r3, r2
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 80031e6:	183b      	adds	r3, r7, r0
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff ff5e 	bl	80030ac <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 80031f0:	2301      	movs	r3, #1
 80031f2:	425b      	negs	r3, r3
 80031f4:	1939      	adds	r1, r7, r4
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f007 fd3d 	bl	800ac78 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	0018      	movs	r0, r3
 8003204:	f008 f9ae 	bl	800b564 <HAL_SPI_GetState>
 8003208:	0003      	movs	r3, r0
 800320a:	2b01      	cmp	r3, #1
 800320c:	d1f8      	bne.n	8003200 <ICM_ReadOneByte+0x48>
		;
	HAL_SPI_Receive(hspi, pData, 1,HAL_MAX_DELAY);
 800320e:	2301      	movs	r3, #1
 8003210:	425b      	negs	r3, r3
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f007 fe86 	bl	800af28 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	0018      	movs	r0, r3
 8003222:	f008 f99f 	bl	800b564 <HAL_SPI_GetState>
 8003226:	0003      	movs	r3, r0
 8003228:	2b01      	cmp	r3, #1
 800322a:	d1f8      	bne.n	800321e <ICM_ReadOneByte+0x66>
		;
	ICM_CS_High(index);
 800322c:	230a      	movs	r3, #10
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	0018      	movs	r0, r3
 8003234:	f7ff ff60 	bl	80030f8 <ICM_CS_High>
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b005      	add	sp, #20
 800323e:	bd90      	pop	{r4, r7, pc}

08003240 <ICM_WriteOneByte>:

void ICM_WriteOneByte(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t Data, uint8_t index) // ***
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	000c      	movs	r4, r1
 800324a:	0010      	movs	r0, r2
 800324c:	0019      	movs	r1, r3
 800324e:	1cfb      	adds	r3, r7, #3
 8003250:	1c22      	adds	r2, r4, #0
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	1cbb      	adds	r3, r7, #2
 8003256:	1c02      	adds	r2, r0, #0
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	1c7b      	adds	r3, r7, #1
 800325c:	1c0a      	adds	r2, r1, #0
 800325e:	701a      	strb	r2, [r3, #0]
	reg = reg & WRITE_FLAG;
 8003260:	1cfb      	adds	r3, r7, #3
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	227f      	movs	r2, #127	; 0x7f
 8003266:	4013      	ands	r3, r2
 8003268:	b2da      	uxtb	r2, r3
 800326a:	1cfb      	adds	r3, r7, #3
 800326c:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 800326e:	1c7b      	adds	r3, r7, #1
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff ff1a 	bl	80030ac <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 8003278:	2301      	movs	r3, #1
 800327a:	425b      	negs	r3, r3
 800327c:	1cf9      	adds	r1, r7, #3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f007 fcf9 	bl	800ac78 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &Data, 1,HAL_MAX_DELAY);
 8003286:	2301      	movs	r3, #1
 8003288:	425b      	negs	r3, r3
 800328a:	1cb9      	adds	r1, r7, #2
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f007 fcf2 	bl	800ac78 <HAL_SPI_Transmit>
	ICM_CS_High(index);
 8003294:	1c7b      	adds	r3, r7, #1
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	0018      	movs	r0, r3
 800329a:	f7ff ff2d 	bl	80030f8 <ICM_CS_High>
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b003      	add	sp, #12
 80032a4:	bd90      	pop	{r4, r7, pc}

080032a6 <ICM_SelectBank>:

void ICM_SelectBank(SPI_HandleTypeDef* hspi,uint8_t reg, uint8_t index){
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	0008      	movs	r0, r1
 80032b0:	0011      	movs	r1, r2
 80032b2:	1cfb      	adds	r3, r7, #3
 80032b4:	1c02      	adds	r2, r0, #0
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	1cbb      	adds	r3, r7, #2
 80032ba:	1c0a      	adds	r2, r1, #0
 80032bc:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,USER_BANK_SEL,reg, index);
 80032be:	1cbb      	adds	r3, r7, #2
 80032c0:	7819      	ldrb	r1, [r3, #0]
 80032c2:	1cfb      	adds	r3, r7, #3
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	000b      	movs	r3, r1
 80032ca:	217f      	movs	r1, #127	; 0x7f
 80032cc:	f7ff ffb8 	bl	8003240 <ICM_WriteOneByte>
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <ICM_Initialize>:

/*Initializing the ICM20602*/
void ICM_Initialize(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t index)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b0a0      	sub	sp, #128	; 0x80
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	1dfb      	adds	r3, r7, #7
 80032e4:	701a      	strb	r2, [r3, #0]

	uint8_t temp;

	ICM_SelectBank(hspi,USER_BANK_0, index);
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2100      	movs	r1, #0
 80032ee:	0018      	movs	r0, r3
 80032f0:	f7ff ffd9 	bl	80032a6 <ICM_SelectBank>
	temp = PWR_MGT_RESET;
 80032f4:	207f      	movs	r0, #127	; 0x7f
 80032f6:	183b      	adds	r3, r7, r0
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,REG_PWR_MGMT_1,temp, index);
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	7819      	ldrb	r1, [r3, #0]
 8003300:	183b      	adds	r3, r7, r0
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	000b      	movs	r3, r1
 8003308:	2106      	movs	r1, #6
 800330a:	f7ff ff99 	bl	8003240 <ICM_WriteOneByte>
	HAL_Delay(20);
 800330e:	2014      	movs	r0, #20
 8003310:	f006 f8d8 	bl	80094c4 <HAL_Delay>

	char uart_buffer[100];
	sprintf((char*) uart_buffer, "SLAVE %i: Initializing IMU \r\n", index);
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	781a      	ldrb	r2, [r3, #0]
 8003318:	499f      	ldr	r1, [pc, #636]	; (8003598 <ICM_Initialize+0x2c0>)
 800331a:	2414      	movs	r4, #20
 800331c:	193b      	adds	r3, r7, r4
 800331e:	0018      	movs	r0, r3
 8003320:	f009 fe5a 	bl	800cfd8 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003324:	193b      	adds	r3, r7, r4
 8003326:	0018      	movs	r0, r3
 8003328:	f7fc feea 	bl	8000100 <strlen>
 800332c:	0003      	movs	r3, r0
 800332e:	b29a      	uxth	r2, r3
 8003330:	23fa      	movs	r3, #250	; 0xfa
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	1939      	adds	r1, r7, r4
 8003336:	68b8      	ldr	r0, [r7, #8]
 8003338:	f008 fc66 	bl	800bc08 <HAL_UART_Transmit>
	HAL_Delay(100);
 800333c:	2064      	movs	r0, #100	; 0x64
 800333e:	f006 f8c1 	bl	80094c4 <HAL_Delay>

	/* Who am i test
	 WhoAmI is in register bank 0* */
	ICM_SelectBank(hspi,USER_BANK_0, index);
 8003342:	1dfb      	adds	r3, r7, #7
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2100      	movs	r1, #0
 800334a:	0018      	movs	r0, r3
 800334c:	f7ff ffab 	bl	80032a6 <ICM_SelectBank>
	if (ICM_WHOAMI(hspi, index))
 8003350:	1dfb      	adds	r3, r7, #7
 8003352:	781a      	ldrb	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	0011      	movs	r1, r2
 8003358:	0018      	movs	r0, r3
 800335a:	f000 fe11 	bl	8003f80 <ICM_WHOAMI>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d013      	beq.n	800338a <ICM_Initialize+0xb2>
	{
		sprintf((char*) uart_buffer, "SLAVE %i: WHO AM I Success \r\n", index);
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	781a      	ldrb	r2, [r3, #0]
 8003366:	498d      	ldr	r1, [pc, #564]	; (800359c <ICM_Initialize+0x2c4>)
 8003368:	193b      	adds	r3, r7, r4
 800336a:	0018      	movs	r0, r3
 800336c:	f009 fe34 	bl	800cfd8 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003370:	193b      	adds	r3, r7, r4
 8003372:	0018      	movs	r0, r3
 8003374:	f7fc fec4 	bl	8000100 <strlen>
 8003378:	0003      	movs	r3, r0
 800337a:	b29a      	uxth	r2, r3
 800337c:	23fa      	movs	r3, #250	; 0xfa
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	1939      	adds	r1, r7, r4
 8003382:	68b8      	ldr	r0, [r7, #8]
 8003384:	f008 fc40 	bl	800bc08 <HAL_UART_Transmit>
 8003388:	e013      	b.n	80033b2 <ICM_Initialize+0xda>
	} else {
		sprintf((char*) uart_buffer, "SLAVE %i: WHO AM I Failed \r\n", index);
 800338a:	1dfb      	adds	r3, r7, #7
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	4984      	ldr	r1, [pc, #528]	; (80035a0 <ICM_Initialize+0x2c8>)
 8003390:	2414      	movs	r4, #20
 8003392:	193b      	adds	r3, r7, r4
 8003394:	0018      	movs	r0, r3
 8003396:	f009 fe1f 	bl	800cfd8 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 800339a:	193b      	adds	r3, r7, r4
 800339c:	0018      	movs	r0, r3
 800339e:	f7fc feaf 	bl	8000100 <strlen>
 80033a2:	0003      	movs	r3, r0
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	23fa      	movs	r3, #250	; 0xfa
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	1939      	adds	r1, r7, r4
 80033ac:	68b8      	ldr	r0, [r7, #8]
 80033ae:	f008 fc2b 	bl	800bc08 <HAL_UART_Transmit>
	}

	HAL_Delay(50);
 80033b2:	2032      	movs	r0, #50	; 0x32
 80033b4:	f006 f886 	bl	80094c4 <HAL_Delay>

	uint8_t pwr_config = PWR_MGMT_1_CONFIG;
 80033b8:	247e      	movs	r4, #126	; 0x7e
 80033ba:	193b      	adds	r3, r7, r4
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
	uint8_t pwr_config2 = PWR_MGMT_2_CONFIG;
 80033c0:	257d      	movs	r5, #125	; 0x7d
 80033c2:	197b      	adds	r3, r7, r5
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]

	ICM_WriteOneByte(hspi, REG_PWR_MGMT_1, pwr_config, index);
 80033c8:	1dfb      	adds	r3, r7, #7
 80033ca:	7819      	ldrb	r1, [r3, #0]
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	000b      	movs	r3, r1
 80033d4:	2106      	movs	r1, #6
 80033d6:	f7ff ff33 	bl	8003240 <ICM_WriteOneByte>
	HAL_Delay(20);
 80033da:	2014      	movs	r0, #20
 80033dc:	f006 f872 	bl	80094c4 <HAL_Delay>
	ICM_WriteOneByte(hspi,REG_PWR_MGMT_2,pwr_config2, index);
 80033e0:	1dfb      	adds	r3, r7, #7
 80033e2:	7819      	ldrb	r1, [r3, #0]
 80033e4:	197b      	adds	r3, r7, r5
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	000b      	movs	r3, r1
 80033ec:	2107      	movs	r1, #7
 80033ee:	f7ff ff27 	bl	8003240 <ICM_WriteOneByte>


	/*Turn Acceleration and Gyro OFF*/
	HAL_Delay(20);
 80033f2:	2014      	movs	r0, #20
 80033f4:	f006 f866 	bl	80094c4 <HAL_Delay>
	pwr_config = ACC_GYRO_OFF;
 80033f8:	193b      	adds	r3, r7, r4
 80033fa:	223f      	movs	r2, #63	; 0x3f
 80033fc:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_PWR_MGMT_2, pwr_config, index);
 80033fe:	1dfb      	adds	r3, r7, #7
 8003400:	7819      	ldrb	r1, [r3, #0]
 8003402:	193b      	adds	r3, r7, r4
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	000b      	movs	r3, r1
 800340a:	2107      	movs	r1, #7
 800340c:	f7ff ff18 	bl	8003240 <ICM_WriteOneByte>

	/* Disable Fifo and I2C slave*/
	temp = 0b00010000;
 8003410:	247f      	movs	r4, #127	; 0x7f
 8003412:	193b      	adds	r3, r7, r4
 8003414:	2210      	movs	r2, #16
 8003416:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_USER_CTRL, temp, index);
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	7819      	ldrb	r1, [r3, #0]
 800341c:	193b      	adds	r3, r7, r4
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	000b      	movs	r3, r1
 8003424:	2103      	movs	r1, #3
 8003426:	f7ff ff0b 	bl	8003240 <ICM_WriteOneByte>


	/* Configure Gyro */
	ICM_SelectBank(hspi, USER_BANK_2, index);
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2120      	movs	r1, #32
 8003432:	0018      	movs	r0, r3
 8003434:	f7ff ff37 	bl	80032a6 <ICM_SelectBank>
	temp = 0;
 8003438:	0020      	movs	r0, r4
 800343a:	183b      	adds	r3, r7, r0
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_2, temp, index);
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	7819      	ldrb	r1, [r3, #0]
 8003444:	183b      	adds	r3, r7, r0
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	000b      	movs	r3, r1
 800344c:	2102      	movs	r1, #2
 800344e:	f7ff fef7 	bl	8003240 <ICM_WriteOneByte>

	uint16_t dps = GYRO_DPS;
 8003452:	247a      	movs	r4, #122	; 0x7a
 8003454:	193b      	adds	r3, r7, r4
 8003456:	22fa      	movs	r2, #250	; 0xfa
 8003458:	0092      	lsls	r2, r2, #2
 800345a:	801a      	strh	r2, [r3, #0]
	if (ICM_GyroConfig(hspi, dps, index))
 800345c:	1dfb      	adds	r3, r7, #7
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	193b      	adds	r3, r7, r4
 8003462:	8819      	ldrh	r1, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 f8a4 	bl	80035b4 <ICM_GyroConfig>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d015      	beq.n	800349c <ICM_Initialize+0x1c4>
	{
		sprintf((char*) uart_buffer, "SLAVE %i: Gyro Configuration success DPS: %d \r\n", index, dps);
 8003470:	1dfb      	adds	r3, r7, #7
 8003472:	781a      	ldrb	r2, [r3, #0]
 8003474:	193b      	adds	r3, r7, r4
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	494a      	ldr	r1, [pc, #296]	; (80035a4 <ICM_Initialize+0x2cc>)
 800347a:	2414      	movs	r4, #20
 800347c:	1938      	adds	r0, r7, r4
 800347e:	f009 fdab 	bl	800cfd8 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003482:	193b      	adds	r3, r7, r4
 8003484:	0018      	movs	r0, r3
 8003486:	f7fc fe3b 	bl	8000100 <strlen>
 800348a:	0003      	movs	r3, r0
 800348c:	b29a      	uxth	r2, r3
 800348e:	23fa      	movs	r3, #250	; 0xfa
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	1939      	adds	r1, r7, r4
 8003494:	68b8      	ldr	r0, [r7, #8]
 8003496:	f008 fbb7 	bl	800bc08 <HAL_UART_Transmit>
 800349a:	e013      	b.n	80034c4 <ICM_Initialize+0x1ec>

	} else {
		sprintf((char*) uart_buffer, "SLAVE %i: Gyro Configuration failed \r\n", index);
 800349c:	1dfb      	adds	r3, r7, #7
 800349e:	781a      	ldrb	r2, [r3, #0]
 80034a0:	4941      	ldr	r1, [pc, #260]	; (80035a8 <ICM_Initialize+0x2d0>)
 80034a2:	2414      	movs	r4, #20
 80034a4:	193b      	adds	r3, r7, r4
 80034a6:	0018      	movs	r0, r3
 80034a8:	f009 fd96 	bl	800cfd8 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 80034ac:	193b      	adds	r3, r7, r4
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7fc fe26 	bl	8000100 <strlen>
 80034b4:	0003      	movs	r3, r0
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	23fa      	movs	r3, #250	; 0xfa
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	1939      	adds	r1, r7, r4
 80034be:	68b8      	ldr	r0, [r7, #8]
 80034c0:	f008 fba2 	bl	800bc08 <HAL_UART_Transmit>

	}

	temp = 0;
 80034c4:	207f      	movs	r0, #127	; 0x7f
 80034c6:	183b      	adds	r3, r7, r0
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG_2,temp, index);
 80034cc:	1dfb      	adds	r3, r7, #7
 80034ce:	7819      	ldrb	r1, [r3, #0]
 80034d0:	183b      	adds	r3, r7, r0
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	000b      	movs	r3, r1
 80034d8:	2115      	movs	r1, #21
 80034da:	f7ff feb1 	bl	8003240 <ICM_WriteOneByte>
	/*Turn Acceleartion and Gyro ON*/
	HAL_Delay(20);
 80034de:	2014      	movs	r0, #20
 80034e0:	f005 fff0 	bl	80094c4 <HAL_Delay>
	pwr_config = ACC_GYRO_ON;
 80034e4:	247e      	movs	r4, #126	; 0x7e
 80034e6:	193b      	adds	r3, r7, r4
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
	ICM_SelectBank(hspi,USER_BANK_0, index);
 80034ec:	1dfb      	adds	r3, r7, #7
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2100      	movs	r1, #0
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7ff fed6 	bl	80032a6 <ICM_SelectBank>
	HAL_Delay(20);
 80034fa:	2014      	movs	r0, #20
 80034fc:	f005 ffe2 	bl	80094c4 <HAL_Delay>
	ICM_WriteOneByte(hspi, REG_PWR_MGMT_2, pwr_config, index);
 8003500:	1dfb      	adds	r3, r7, #7
 8003502:	7819      	ldrb	r1, [r3, #0]
 8003504:	193b      	adds	r3, r7, r4
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	000b      	movs	r3, r1
 800350c:	2107      	movs	r1, #7
 800350e:	f7ff fe97 	bl	8003240 <ICM_WriteOneByte>
	HAL_Delay(20);
 8003512:	2014      	movs	r0, #20
 8003514:	f005 ffd6 	bl	80094c4 <HAL_Delay>
	/* Configure Accelerometer */
	uint8_t acc_scale = ACCEL_SCALE_SELECT;
 8003518:	2479      	movs	r4, #121	; 0x79
 800351a:	193b      	adds	r3, r7, r4
 800351c:	2208      	movs	r2, #8
 800351e:	701a      	strb	r2, [r3, #0]

	if(ICM_AccConfig(hspi,acc_scale, index)){
 8003520:	1dfb      	adds	r3, r7, #7
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	193b      	adds	r3, r7, r4
 8003526:	7819      	ldrb	r1, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 fc70 	bl	8003e10 <ICM_AccConfig>
 8003530:	1e03      	subs	r3, r0, #0
 8003532:	d015      	beq.n	8003560 <ICM_Initialize+0x288>
		sprintf((char*) uart_buffer,"SLAVE %i: Accelerometer Configuration success SELECT +-G: %d \r\n",index, acc_scale);
 8003534:	1dfb      	adds	r3, r7, #7
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	193b      	adds	r3, r7, r4
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	491b      	ldr	r1, [pc, #108]	; (80035ac <ICM_Initialize+0x2d4>)
 800353e:	2414      	movs	r4, #20
 8003540:	1938      	adds	r0, r7, r4
 8003542:	f009 fd49 	bl	800cfd8 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003546:	193b      	adds	r3, r7, r4
 8003548:	0018      	movs	r0, r3
 800354a:	f7fc fdd9 	bl	8000100 <strlen>
 800354e:	0003      	movs	r3, r0
 8003550:	b29a      	uxth	r2, r3
 8003552:	23fa      	movs	r3, #250	; 0xfa
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	1939      	adds	r1, r7, r4
 8003558:	68b8      	ldr	r0, [r7, #8]
 800355a:	f008 fb55 	bl	800bc08 <HAL_UART_Transmit>
 800355e:	e013      	b.n	8003588 <ICM_Initialize+0x2b0>
	}else{
		sprintf((char*) uart_buffer, "SLAVE %i: Accelerometer Configuration failed \r\n", index);
 8003560:	1dfb      	adds	r3, r7, #7
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	4912      	ldr	r1, [pc, #72]	; (80035b0 <ICM_Initialize+0x2d8>)
 8003566:	2414      	movs	r4, #20
 8003568:	193b      	adds	r3, r7, r4
 800356a:	0018      	movs	r0, r3
 800356c:	f009 fd34 	bl	800cfd8 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003570:	193b      	adds	r3, r7, r4
 8003572:	0018      	movs	r0, r3
 8003574:	f7fc fdc4 	bl	8000100 <strlen>
 8003578:	0003      	movs	r3, r0
 800357a:	b29a      	uxth	r2, r3
 800357c:	23fa      	movs	r3, #250	; 0xfa
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	1939      	adds	r1, r7, r4
 8003582:	68b8      	ldr	r0, [r7, #8]
 8003584:	f008 fb40 	bl	800bc08 <HAL_UART_Transmit>
	}


	HAL_Delay(20);
 8003588:	2014      	movs	r0, #20
 800358a:	f005 ff9b 	bl	80094c4 <HAL_Delay>

	/*Configure*/


}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b020      	add	sp, #128	; 0x80
 8003594:	bdb0      	pop	{r4, r5, r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	08011d08 	.word	0x08011d08
 800359c:	08011d28 	.word	0x08011d28
 80035a0:	08011d48 	.word	0x08011d48
 80035a4:	08011d68 	.word	0x08011d68
 80035a8:	08011d98 	.word	0x08011d98
 80035ac:	08011dc0 	.word	0x08011dc0
 80035b0:	08011e00 	.word	0x08011e00

080035b4 <ICM_GyroConfig>:


/*Configuring Gyro DPS settings in Gyro Config Register */
uint8_t ICM_GyroConfig(SPI_HandleTypeDef *hspi, uint16_t dps, uint8_t index)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	0008      	movs	r0, r1
 80035be:	0011      	movs	r1, r2
 80035c0:	1cbb      	adds	r3, r7, #2
 80035c2:	1c02      	adds	r2, r0, #0
 80035c4:	801a      	strh	r2, [r3, #0]
 80035c6:	1c7b      	adds	r3, r7, #1
 80035c8:	1c0a      	adds	r2, r1, #0
 80035ca:	701a      	strb	r2, [r3, #0]
	uint8_t config_byte;
	switch(dps)
 80035cc:	1cbb      	adds	r3, r7, #2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	22fa      	movs	r2, #250	; 0xfa
 80035d2:	00d2      	lsls	r2, r2, #3
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d045      	beq.n	8003664 <ICM_GyroConfig+0xb0>
 80035d8:	22fa      	movs	r2, #250	; 0xfa
 80035da:	00d2      	lsls	r2, r2, #3
 80035dc:	4293      	cmp	r3, r2
 80035de:	dc52      	bgt.n	8003686 <ICM_GyroConfig+0xd2>
 80035e0:	22fa      	movs	r2, #250	; 0xfa
 80035e2:	0092      	lsls	r2, r2, #2
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d02c      	beq.n	8003642 <ICM_GyroConfig+0x8e>
 80035e8:	22fa      	movs	r2, #250	; 0xfa
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	4293      	cmp	r3, r2
 80035ee:	dc4a      	bgt.n	8003686 <ICM_GyroConfig+0xd2>
 80035f0:	2bfa      	cmp	r3, #250	; 0xfa
 80035f2:	d004      	beq.n	80035fe <ICM_GyroConfig+0x4a>
 80035f4:	22fa      	movs	r2, #250	; 0xfa
 80035f6:	0052      	lsls	r2, r2, #1
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d011      	beq.n	8003620 <ICM_GyroConfig+0x6c>
 80035fc:	e043      	b.n	8003686 <ICM_GyroConfig+0xd2>
	{
		case 250:
			config_byte = GYRO_250_DPS | GYRO_FILTER;
 80035fe:	200f      	movs	r0, #15
 8003600:	183b      	adds	r3, r7, r0
 8003602:	2229      	movs	r2, #41	; 0x29
 8003604:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_250DPS;
 8003606:	4b35      	ldr	r3, [pc, #212]	; (80036dc <ICM_GyroConfig+0x128>)
 8003608:	4a35      	ldr	r2, [pc, #212]	; (80036e0 <ICM_GyroConfig+0x12c>)
 800360a:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 800360c:	1c7b      	adds	r3, r7, #1
 800360e:	7819      	ldrb	r1, [r3, #0]
 8003610:	183b      	adds	r3, r7, r0
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	000b      	movs	r3, r1
 8003618:	2101      	movs	r1, #1
 800361a:	f7ff fe11 	bl	8003240 <ICM_WriteOneByte>
			break;
 800361e:	e040      	b.n	80036a2 <ICM_GyroConfig+0xee>
		case 500:
			config_byte = GYRO_500_DPS | GYRO_FILTER;
 8003620:	200f      	movs	r0, #15
 8003622:	183b      	adds	r3, r7, r0
 8003624:	222b      	movs	r2, #43	; 0x2b
 8003626:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_500DPS;
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <ICM_GyroConfig+0x128>)
 800362a:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <ICM_GyroConfig+0x130>)
 800362c:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 800362e:	1c7b      	adds	r3, r7, #1
 8003630:	7819      	ldrb	r1, [r3, #0]
 8003632:	183b      	adds	r3, r7, r0
 8003634:	781a      	ldrb	r2, [r3, #0]
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	000b      	movs	r3, r1
 800363a:	2101      	movs	r1, #1
 800363c:	f7ff fe00 	bl	8003240 <ICM_WriteOneByte>
			break;
 8003640:	e02f      	b.n	80036a2 <ICM_GyroConfig+0xee>
		case 1000:
			config_byte = GYRO_1000_DPS | GYRO_FILTER;
 8003642:	200f      	movs	r0, #15
 8003644:	183b      	adds	r3, r7, r0
 8003646:	222d      	movs	r2, #45	; 0x2d
 8003648:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_1000DPS;
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <ICM_GyroConfig+0x128>)
 800364c:	4a26      	ldr	r2, [pc, #152]	; (80036e8 <ICM_GyroConfig+0x134>)
 800364e:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1,(uint8_t)config_byte, index);
 8003650:	1c7b      	adds	r3, r7, #1
 8003652:	7819      	ldrb	r1, [r3, #0]
 8003654:	183b      	adds	r3, r7, r0
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	000b      	movs	r3, r1
 800365c:	2101      	movs	r1, #1
 800365e:	f7ff fdef 	bl	8003240 <ICM_WriteOneByte>
			break;
 8003662:	e01e      	b.n	80036a2 <ICM_GyroConfig+0xee>
		case 2000:
			config_byte = GYRO_2000_DPS | GYRO_FILTER;
 8003664:	200f      	movs	r0, #15
 8003666:	183b      	adds	r3, r7, r0
 8003668:	222f      	movs	r2, #47	; 0x2f
 800366a:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_2000DPS;
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <ICM_GyroConfig+0x128>)
 800366e:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <ICM_GyroConfig+0x138>)
 8003670:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 8003672:	1c7b      	adds	r3, r7, #1
 8003674:	7819      	ldrb	r1, [r3, #0]
 8003676:	183b      	adds	r3, r7, r0
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	000b      	movs	r3, r1
 800367e:	2101      	movs	r1, #1
 8003680:	f7ff fdde 	bl	8003240 <ICM_WriteOneByte>
			break;
 8003684:	e00d      	b.n	80036a2 <ICM_GyroConfig+0xee>
		default:
			config_byte = GYRO_1000_DPS | GYRO_FILTER;
 8003686:	200f      	movs	r0, #15
 8003688:	183b      	adds	r3, r7, r0
 800368a:	222d      	movs	r2, #45	; 0x2d
 800368c:	701a      	strb	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 800368e:	1c7b      	adds	r3, r7, #1
 8003690:	7819      	ldrb	r1, [r3, #0]
 8003692:	183b      	adds	r3, r7, r0
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	000b      	movs	r3, r1
 800369a:	2101      	movs	r1, #1
 800369c:	f7ff fdd0 	bl	8003240 <ICM_WriteOneByte>
			break;
 80036a0:	46c0      	nop			; (mov r8, r8)
	}

	HAL_Delay(10);
 80036a2:	200a      	movs	r0, #10
 80036a4:	f005 ff0e 	bl	80094c4 <HAL_Delay>

	uint8_t test = 0;
 80036a8:	210e      	movs	r1, #14
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]

	ICM_ReadOneByte(hspi, REG_GYRO_CONFIG_1, &test, index);
 80036b0:	1c7b      	adds	r3, r7, #1
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	000c      	movs	r4, r1
 80036b6:	187a      	adds	r2, r7, r1
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	2101      	movs	r1, #1
 80036bc:	f7ff fd7c 	bl	80031b8 <ICM_ReadOneByte>

	if (test != config_byte)
 80036c0:	193b      	adds	r3, r7, r4
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	220f      	movs	r2, #15
 80036c6:	18ba      	adds	r2, r7, r2
 80036c8:	7812      	ldrb	r2, [r2, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <ICM_GyroConfig+0x11e>
	{

		return 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <ICM_GyroConfig+0x120>
	}
	return 1;
 80036d2:	2301      	movs	r3, #1
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b005      	add	sp, #20
 80036da:	bd90      	pop	{r4, r7, pc}
 80036dc:	200003a0 	.word	0x200003a0
 80036e0:	43030000 	.word	0x43030000
 80036e4:	42830000 	.word	0x42830000
 80036e8:	42033333 	.word	0x42033333
 80036ec:	41833333 	.word	0x41833333

080036f0 <ICM_GyroCalibration>:


void ICM_GyroCalibration(SPI_HandleTypeDef *hspi,UART_HandleTypeDef* huart, float *gyro_bias, uint8_t index)
{
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	46c6      	mov	lr, r8
 80036f4:	b500      	push	{lr}
 80036f6:	b0ca      	sub	sp, #296	; 0x128
 80036f8:	af06      	add	r7, sp, #24
 80036fa:	61f8      	str	r0, [r7, #28]
 80036fc:	61b9      	str	r1, [r7, #24]
 80036fe:	617a      	str	r2, [r7, #20]
 8003700:	001a      	movs	r2, r3
 8003702:	240b      	movs	r4, #11
 8003704:	2308      	movs	r3, #8
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	191b      	adds	r3, r3, r4
 800370a:	701a      	strb	r2, [r3, #0]
	char uart_buffer[200];
	float gyro_data[3] = {0,0,0};
 800370c:	2128      	movs	r1, #40	; 0x28
 800370e:	2008      	movs	r0, #8
 8003710:	2308      	movs	r3, #8
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	181b      	adds	r3, r3, r0
 8003716:	185b      	adds	r3, r3, r1
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	2308      	movs	r3, #8
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	181b      	adds	r3, r3, r0
 8003722:	185b      	adds	r3, r3, r1
 8003724:	2200      	movs	r2, #0
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	2308      	movs	r3, #8
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	181b      	adds	r3, r3, r0
 800372e:	185b      	adds	r3, r3, r1
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
	float zero_bias[3] = {0,0,0};
 8003734:	211c      	movs	r1, #28
 8003736:	2308      	movs	r3, #8
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	181b      	adds	r3, r3, r0
 800373c:	185b      	adds	r3, r3, r1
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	2308      	movs	r3, #8
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	181b      	adds	r3, r3, r0
 8003748:	185b      	adds	r3, r3, r1
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	2308      	movs	r3, #8
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	181b      	adds	r3, r3, r0
 8003754:	185b      	adds	r3, r3, r1
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
	float gyro_accumulated[3] = {0,0,0};
 800375a:	2110      	movs	r1, #16
 800375c:	2308      	movs	r3, #8
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	181b      	adds	r3, r3, r0
 8003762:	185b      	adds	r3, r3, r1
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	2308      	movs	r3, #8
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	181b      	adds	r3, r3, r0
 800376e:	185b      	adds	r3, r3, r1
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	2308      	movs	r3, #8
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	181b      	adds	r3, r3, r0
 800377a:	185b      	adds	r3, r3, r1
 800377c:	2200      	movs	r2, #0
 800377e:	609a      	str	r2, [r3, #8]

	ICM_SelectBank(hspi,USER_BANK_0, index);
 8003780:	2308      	movs	r3, #8
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	191b      	adds	r3, r3, r4
 8003786:	781a      	ldrb	r2, [r3, #0]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2100      	movs	r1, #0
 800378c:	0018      	movs	r0, r3
 800378e:	f7ff fd8a 	bl	80032a6 <ICM_SelectBank>
	HAL_Delay(10);
 8003792:	200a      	movs	r0, #10
 8003794:	f005 fe96 	bl	80094c4 <HAL_Delay>

	for (int16_t i = 0; i < GYRO_CALIBRATION_SAMPLES; i++)
 8003798:	23fe      	movs	r3, #254	; 0xfe
 800379a:	2208      	movs	r2, #8
 800379c:	4694      	mov	ip, r2
 800379e:	2208      	movs	r2, #8
 80037a0:	4690      	mov	r8, r2
 80037a2:	44b8      	add	r8, r7
 80037a4:	44c4      	add	ip, r8
 80037a6:	4463      	add	r3, ip
 80037a8:	2200      	movs	r2, #0
 80037aa:	801a      	strh	r2, [r3, #0]
 80037ac:	e069      	b.n	8003882 <ICM_GyroCalibration+0x192>
	{
		ICM_ReadGyroData(hspi, gyro_data, zero_bias, index);
 80037ae:	230b      	movs	r3, #11
 80037b0:	2208      	movs	r2, #8
 80037b2:	4694      	mov	ip, r2
 80037b4:	44bc      	add	ip, r7
 80037b6:	4463      	add	r3, ip
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	221c      	movs	r2, #28
 80037bc:	2108      	movs	r1, #8
 80037be:	468c      	mov	ip, r1
 80037c0:	2108      	movs	r1, #8
 80037c2:	4688      	mov	r8, r1
 80037c4:	44b8      	add	r8, r7
 80037c6:	44c4      	add	ip, r8
 80037c8:	4462      	add	r2, ip
 80037ca:	2528      	movs	r5, #40	; 0x28
 80037cc:	2608      	movs	r6, #8
 80037ce:	2108      	movs	r1, #8
 80037d0:	1879      	adds	r1, r7, r1
 80037d2:	1989      	adds	r1, r1, r6
 80037d4:	1949      	adds	r1, r1, r5
 80037d6:	69f8      	ldr	r0, [r7, #28]
 80037d8:	f000 f9bc 	bl	8003b54 <ICM_ReadGyroData>
		gyro_accumulated[0] += gyro_data[0];
 80037dc:	2410      	movs	r4, #16
 80037de:	2308      	movs	r3, #8
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	199b      	adds	r3, r3, r6
 80037e4:	191b      	adds	r3, r3, r4
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	2308      	movs	r3, #8
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	199b      	adds	r3, r3, r6
 80037ee:	195b      	adds	r3, r3, r5
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	1c19      	adds	r1, r3, #0
 80037f4:	1c10      	adds	r0, r2, #0
 80037f6:	f7fc fea5 	bl	8000544 <__aeabi_fadd>
 80037fa:	1c03      	adds	r3, r0, #0
 80037fc:	1c1a      	adds	r2, r3, #0
 80037fe:	2308      	movs	r3, #8
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	199b      	adds	r3, r3, r6
 8003804:	191b      	adds	r3, r3, r4
 8003806:	601a      	str	r2, [r3, #0]
		gyro_accumulated[1] += gyro_data[1];
 8003808:	2308      	movs	r3, #8
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	199b      	adds	r3, r3, r6
 800380e:	191b      	adds	r3, r3, r4
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	2308      	movs	r3, #8
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	199b      	adds	r3, r3, r6
 8003818:	195b      	adds	r3, r3, r5
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	1c19      	adds	r1, r3, #0
 800381e:	1c10      	adds	r0, r2, #0
 8003820:	f7fc fe90 	bl	8000544 <__aeabi_fadd>
 8003824:	1c03      	adds	r3, r0, #0
 8003826:	1c1a      	adds	r2, r3, #0
 8003828:	2308      	movs	r3, #8
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	199b      	adds	r3, r3, r6
 800382e:	191b      	adds	r3, r3, r4
 8003830:	605a      	str	r2, [r3, #4]
		gyro_accumulated[2] += gyro_data[2];
 8003832:	2308      	movs	r3, #8
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	199b      	adds	r3, r3, r6
 8003838:	191b      	adds	r3, r3, r4
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	2308      	movs	r3, #8
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	199b      	adds	r3, r3, r6
 8003842:	195b      	adds	r3, r3, r5
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	1c19      	adds	r1, r3, #0
 8003848:	1c10      	adds	r0, r2, #0
 800384a:	f7fc fe7b 	bl	8000544 <__aeabi_fadd>
 800384e:	1c03      	adds	r3, r0, #0
 8003850:	1c1a      	adds	r2, r3, #0
 8003852:	2308      	movs	r3, #8
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	199b      	adds	r3, r3, r6
 8003858:	191b      	adds	r3, r3, r4
 800385a:	609a      	str	r2, [r3, #8]
		HAL_Delay(20);
 800385c:	2014      	movs	r0, #20
 800385e:	f005 fe31 	bl	80094c4 <HAL_Delay>
	for (int16_t i = 0; i < GYRO_CALIBRATION_SAMPLES; i++)
 8003862:	21fe      	movs	r1, #254	; 0xfe
 8003864:	0030      	movs	r0, r6
 8003866:	2308      	movs	r3, #8
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	199b      	adds	r3, r3, r6
 800386c:	185b      	adds	r3, r3, r1
 800386e:	2200      	movs	r2, #0
 8003870:	5e9b      	ldrsh	r3, [r3, r2]
 8003872:	b29b      	uxth	r3, r3
 8003874:	3301      	adds	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	2308      	movs	r3, #8
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	181b      	adds	r3, r3, r0
 800387e:	185b      	adds	r3, r3, r1
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	23fe      	movs	r3, #254	; 0xfe
 8003884:	2208      	movs	r2, #8
 8003886:	4694      	mov	ip, r2
 8003888:	2208      	movs	r2, #8
 800388a:	4690      	mov	r8, r2
 800388c:	44b8      	add	r8, r7
 800388e:	44c4      	add	ip, r8
 8003890:	4463      	add	r3, ip
 8003892:	2200      	movs	r2, #0
 8003894:	5e9a      	ldrsh	r2, [r3, r2]
 8003896:	23fa      	movs	r3, #250	; 0xfa
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	429a      	cmp	r2, r3
 800389c:	db87      	blt.n	80037ae <ICM_GyroCalibration+0xbe>
	}

	gyro_bias[0] =  -1*gyro_accumulated[0] / GYRO_CALIBRATION_SAMPLES;
 800389e:	2510      	movs	r5, #16
 80038a0:	2608      	movs	r6, #8
 80038a2:	2308      	movs	r3, #8
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	199b      	adds	r3, r3, r6
 80038a8:	195b      	adds	r3, r3, r5
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2280      	movs	r2, #128	; 0x80
 80038ae:	0612      	lsls	r2, r2, #24
 80038b0:	4053      	eors	r3, r2
 80038b2:	493b      	ldr	r1, [pc, #236]	; (80039a0 <ICM_GyroCalibration+0x2b0>)
 80038b4:	1c18      	adds	r0, r3, #0
 80038b6:	f7fc ffe1 	bl	800087c <__aeabi_fdiv>
 80038ba:	1c03      	adds	r3, r0, #0
 80038bc:	1c1a      	adds	r2, r3, #0
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	601a      	str	r2, [r3, #0]
	gyro_bias[1] =  -1*gyro_accumulated[1] / GYRO_CALIBRATION_SAMPLES;
 80038c2:	2308      	movs	r3, #8
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	199b      	adds	r3, r3, r6
 80038c8:	195b      	adds	r3, r3, r5
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	0612      	lsls	r2, r2, #24
 80038d0:	405a      	eors	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1d1c      	adds	r4, r3, #4
 80038d6:	4932      	ldr	r1, [pc, #200]	; (80039a0 <ICM_GyroCalibration+0x2b0>)
 80038d8:	1c10      	adds	r0, r2, #0
 80038da:	f7fc ffcf 	bl	800087c <__aeabi_fdiv>
 80038de:	1c03      	adds	r3, r0, #0
 80038e0:	6023      	str	r3, [r4, #0]
	gyro_bias[2] =  -1*gyro_accumulated[2] / GYRO_CALIBRATION_SAMPLES;
 80038e2:	2308      	movs	r3, #8
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	199b      	adds	r3, r3, r6
 80038e8:	195b      	adds	r3, r3, r5
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2280      	movs	r2, #128	; 0x80
 80038ee:	0612      	lsls	r2, r2, #24
 80038f0:	405a      	eors	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3308      	adds	r3, #8
 80038f6:	001c      	movs	r4, r3
 80038f8:	4929      	ldr	r1, [pc, #164]	; (80039a0 <ICM_GyroCalibration+0x2b0>)
 80038fa:	1c10      	adds	r0, r2, #0
 80038fc:	f7fc ffbe 	bl	800087c <__aeabi_fdiv>
 8003900:	1c03      	adds	r3, r0, #0
 8003902:	6023      	str	r3, [r4, #0]

	sprintf(uart_buffer,
 8003904:	230b      	movs	r3, #11
 8003906:	2208      	movs	r2, #8
 8003908:	4694      	mov	ip, r2
 800390a:	44bc      	add	ip, r7
 800390c:	4463      	add	r3, ip
 800390e:	781e      	ldrb	r6, [r3, #0]
					"SLAVE %i: Calibrating Gyroscope:"
					"Gyro x-offset: %.5f | Gyro y-offset: %.5f | Gyro z-offset: %.5f"
					"\r\n",
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 8003914:	1c18      	adds	r0, r3, #0
 8003916:	f7ff fadb 	bl	8002ed0 <__aeabi_f2d>
 800391a:	0004      	movs	r4, r0
 800391c:	000d      	movs	r5, r1
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3304      	adds	r3, #4
 8003922:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 8003924:	1c18      	adds	r0, r3, #0
 8003926:	f7ff fad3 	bl	8002ed0 <__aeabi_f2d>
 800392a:	60b8      	str	r0, [r7, #8]
 800392c:	60f9      	str	r1, [r7, #12]
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	3308      	adds	r3, #8
 8003932:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 8003934:	1c18      	adds	r0, r3, #0
 8003936:	f7ff facb 	bl	8002ed0 <__aeabi_f2d>
 800393a:	6038      	str	r0, [r7, #0]
 800393c:	6079      	str	r1, [r7, #4]
 800393e:	4919      	ldr	r1, [pc, #100]	; (80039a4 <ICM_GyroCalibration+0x2b4>)
 8003940:	2034      	movs	r0, #52	; 0x34
 8003942:	2308      	movs	r3, #8
 8003944:	469c      	mov	ip, r3
 8003946:	2308      	movs	r3, #8
 8003948:	4698      	mov	r8, r3
 800394a:	44b8      	add	r8, r7
 800394c:	44c4      	add	ip, r8
 800394e:	4460      	add	r0, ip
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	9204      	str	r2, [sp, #16]
 8003956:	9305      	str	r3, [sp, #20]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	9202      	str	r2, [sp, #8]
 800395e:	9303      	str	r3, [sp, #12]
 8003960:	9400      	str	r4, [sp, #0]
 8003962:	9501      	str	r5, [sp, #4]
 8003964:	0032      	movs	r2, r6
 8003966:	f009 fb37 	bl	800cfd8 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*) uart_buffer ,strlen(uart_buffer),1000);
 800396a:	2434      	movs	r4, #52	; 0x34
 800396c:	2608      	movs	r6, #8
 800396e:	2308      	movs	r3, #8
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	199b      	adds	r3, r3, r6
 8003974:	191b      	adds	r3, r3, r4
 8003976:	0018      	movs	r0, r3
 8003978:	f7fc fbc2 	bl	8000100 <strlen>
 800397c:	0003      	movs	r3, r0
 800397e:	b29a      	uxth	r2, r3
 8003980:	23fa      	movs	r3, #250	; 0xfa
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	2108      	movs	r1, #8
 8003986:	1879      	adds	r1, r7, r1
 8003988:	1989      	adds	r1, r1, r6
 800398a:	1909      	adds	r1, r1, r4
 800398c:	69b8      	ldr	r0, [r7, #24]
 800398e:	f008 f93b 	bl	800bc08 <HAL_UART_Transmit>
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b044      	add	sp, #272	; 0x110
 8003998:	bc80      	pop	{r7}
 800399a:	46b8      	mov	r8, r7
 800399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	43fa0000 	.word	0x43fa0000
 80039a4:	08011e30 	.word	0x08011e30

080039a8 <ICM_AccCalibration>:
					acc_bias[0], acc_bias[1], acc_bias[2]);
	HAL_UART_Transmit(huart, (uint8_t*)uart_buffer ,strlen(uart_buffer),1000);
}
**/

void ICM_AccCalibration(SPI_HandleTypeDef *hspi, UART_HandleTypeDef* huart, float *acc_bias, uint8_t index){
 80039a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039aa:	b0c7      	sub	sp, #284	; 0x11c
 80039ac:	af04      	add	r7, sp, #16
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	001a      	movs	r2, r3
 80039b6:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <ICM_AccCalibration+0x1a0>)
 80039b8:	2184      	movs	r1, #132	; 0x84
 80039ba:	0049      	lsls	r1, r1, #1
 80039bc:	468c      	mov	ip, r1
 80039be:	44bc      	add	ip, r7
 80039c0:	4463      	add	r3, ip
 80039c2:	701a      	strb	r2, [r3, #0]

	char uart_buffer[200];
	float acc_data[3] = {0,0,0};
 80039c4:	2128      	movs	r1, #40	; 0x28
 80039c6:	187b      	adds	r3, r7, r1
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	2200      	movs	r2, #0
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	187b      	adds	r3, r7, r1
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
	float acc_angle[2] = {0,0};
 80039d8:	2120      	movs	r1, #32
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2200      	movs	r2, #0
 80039e4:	605a      	str	r2, [r3, #4]
	struct euler_angles temp = {0,0,0};
 80039e6:	2114      	movs	r1, #20
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	2200      	movs	r2, #0
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]

	ICM_SelectBank(hspi,USER_BANK_0, index);
 80039fa:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <ICM_AccCalibration+0x1a0>)
 80039fc:	2284      	movs	r2, #132	; 0x84
 80039fe:	0052      	lsls	r2, r2, #1
 8003a00:	4694      	mov	ip, r2
 8003a02:	44bc      	add	ip, r7
 8003a04:	4463      	add	r3, ip
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7ff fc4a 	bl	80032a6 <ICM_SelectBank>
	for (int16_t i = 0; i < 500; i++)
 8003a12:	1dfb      	adds	r3, r7, #7
 8003a14:	33ff      	adds	r3, #255	; 0xff
 8003a16:	2200      	movs	r2, #0
 8003a18:	801a      	strh	r2, [r3, #0]
 8003a1a:	e039      	b.n	8003a90 <ICM_AccCalibration+0xe8>
	{
		ICM_ReadAccData(hspi, acc_data, index);
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <ICM_AccCalibration+0x1a0>)
 8003a1e:	2284      	movs	r2, #132	; 0x84
 8003a20:	0052      	lsls	r2, r2, #1
 8003a22:	4694      	mov	ip, r2
 8003a24:	44bc      	add	ip, r7
 8003a26:	4463      	add	r3, ip
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	2428      	movs	r4, #40	; 0x28
 8003a2c:	1939      	adds	r1, r7, r4
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 f94d 	bl	8003cd0 <ICM_ReadAccData>
		CalcAccLinearToEuler(acc_data, &temp);
 8003a36:	2514      	movs	r5, #20
 8003a38:	197a      	adds	r2, r7, r5
 8003a3a:	193b      	adds	r3, r7, r4
 8003a3c:	0011      	movs	r1, r2
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 fc5e 	bl	8004300 <CalcAccLinearToEuler>
		acc_angle[0] += temp.roll;
 8003a44:	2420      	movs	r4, #32
 8003a46:	193b      	adds	r3, r7, r4
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	197b      	adds	r3, r7, r5
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	1c19      	adds	r1, r3, #0
 8003a50:	1c10      	adds	r0, r2, #0
 8003a52:	f7fc fd77 	bl	8000544 <__aeabi_fadd>
 8003a56:	1c03      	adds	r3, r0, #0
 8003a58:	1c1a      	adds	r2, r3, #0
 8003a5a:	193b      	adds	r3, r7, r4
 8003a5c:	601a      	str	r2, [r3, #0]
		acc_angle[1] += temp.pitch;
 8003a5e:	193b      	adds	r3, r7, r4
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	197b      	adds	r3, r7, r5
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	1c19      	adds	r1, r3, #0
 8003a68:	1c10      	adds	r0, r2, #0
 8003a6a:	f7fc fd6b 	bl	8000544 <__aeabi_fadd>
 8003a6e:	1c03      	adds	r3, r0, #0
 8003a70:	1c1a      	adds	r2, r3, #0
 8003a72:	193b      	adds	r3, r7, r4
 8003a74:	605a      	str	r2, [r3, #4]
		HAL_Delay(10);
 8003a76:	200a      	movs	r0, #10
 8003a78:	f005 fd24 	bl	80094c4 <HAL_Delay>
	for (int16_t i = 0; i < 500; i++)
 8003a7c:	1dfb      	adds	r3, r7, #7
 8003a7e:	33ff      	adds	r3, #255	; 0xff
 8003a80:	2200      	movs	r2, #0
 8003a82:	5e9b      	ldrsh	r3, [r3, r2]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	1dfb      	adds	r3, r7, #7
 8003a8c:	33ff      	adds	r3, #255	; 0xff
 8003a8e:	801a      	strh	r2, [r3, #0]
 8003a90:	1dfb      	adds	r3, r7, #7
 8003a92:	33ff      	adds	r3, #255	; 0xff
 8003a94:	2200      	movs	r2, #0
 8003a96:	5e9a      	ldrsh	r2, [r3, r2]
 8003a98:	23fa      	movs	r3, #250	; 0xfa
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	dbbd      	blt.n	8003a1c <ICM_AccCalibration+0x74>
	}

	float temp1 =  (acc_angle[0] / 500.0);
 8003aa0:	2420      	movs	r4, #32
 8003aa2:	193b      	adds	r3, r7, r4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4929      	ldr	r1, [pc, #164]	; (8003b4c <ICM_AccCalibration+0x1a4>)
 8003aa8:	1c18      	adds	r0, r3, #0
 8003aaa:	f7fc fee7 	bl	800087c <__aeabi_fdiv>
 8003aae:	1c03      	adds	r3, r0, #0
 8003ab0:	1c7a      	adds	r2, r7, #1
 8003ab2:	32ff      	adds	r2, #255	; 0xff
 8003ab4:	6013      	str	r3, [r2, #0]
	float temp2 =  -(acc_angle[1] / 500.0);
 8003ab6:	193b      	adds	r3, r7, r4
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4924      	ldr	r1, [pc, #144]	; (8003b4c <ICM_AccCalibration+0x1a4>)
 8003abc:	1c18      	adds	r0, r3, #0
 8003abe:	f7fc fedd 	bl	800087c <__aeabi_fdiv>
 8003ac2:	1c03      	adds	r3, r0, #0
 8003ac4:	1c1a      	adds	r2, r3, #0
 8003ac6:	2380      	movs	r3, #128	; 0x80
 8003ac8:	061b      	lsls	r3, r3, #24
 8003aca:	4053      	eors	r3, r2
 8003acc:	21fc      	movs	r1, #252	; 0xfc
 8003ace:	187a      	adds	r2, r7, r1
 8003ad0:	6013      	str	r3, [r2, #0]

	acc_bias[0] = temp1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	1c7a      	adds	r2, r7, #1
 8003ad6:	32ff      	adds	r2, #255	; 0xff
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	601a      	str	r2, [r3, #0]
	acc_bias[1] = temp2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	187a      	adds	r2, r7, r1
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	601a      	str	r2, [r3, #0]

	sprintf(uart_buffer,
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <ICM_AccCalibration+0x1a0>)
 8003ae8:	2284      	movs	r2, #132	; 0x84
 8003aea:	0052      	lsls	r2, r2, #1
 8003aec:	4694      	mov	ip, r2
 8003aee:	44bc      	add	ip, r7
 8003af0:	4463      	add	r3, ip
 8003af2:	781e      	ldrb	r6, [r3, #0]
 8003af4:	1c7b      	adds	r3, r7, #1
 8003af6:	33ff      	adds	r3, #255	; 0xff
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	f7ff f9e9 	bl	8002ed0 <__aeabi_f2d>
 8003afe:	0004      	movs	r4, r0
 8003b00:	000d      	movs	r5, r1
 8003b02:	21fc      	movs	r1, #252	; 0xfc
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	f7ff f9e2 	bl	8002ed0 <__aeabi_f2d>
 8003b0c:	0002      	movs	r2, r0
 8003b0e:	000b      	movs	r3, r1
 8003b10:	490f      	ldr	r1, [pc, #60]	; (8003b50 <ICM_AccCalibration+0x1a8>)
 8003b12:	2034      	movs	r0, #52	; 0x34
 8003b14:	1838      	adds	r0, r7, r0
 8003b16:	9202      	str	r2, [sp, #8]
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	9400      	str	r4, [sp, #0]
 8003b1c:	9501      	str	r5, [sp, #4]
 8003b1e:	0032      	movs	r2, r6
 8003b20:	f009 fa5a 	bl	800cfd8 <siprintf>
		  "SLAVE %i: Accelerometer Calibration Succes: "
		  "Pitch: %.3f, Roll: %.3f \r\n",
		  index, temp1, temp2);
	HAL_UART_Transmit(huart,(uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8003b24:	2434      	movs	r4, #52	; 0x34
 8003b26:	193b      	adds	r3, r7, r4
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7fc fae9 	bl	8000100 <strlen>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	23fa      	movs	r3, #250	; 0xfa
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	1939      	adds	r1, r7, r4
 8003b38:	68b8      	ldr	r0, [r7, #8]
 8003b3a:	f008 f865 	bl	800bc08 <HAL_UART_Transmit>
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b043      	add	sp, #268	; 0x10c
 8003b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	fffffefb 	.word	0xfffffefb
 8003b4c:	43fa0000 	.word	0x43fa0000
 8003b50:	08011e94 	.word	0x08011e94

08003b54 <ICM_ReadGyroData>:


void ICM_ReadGyroData(SPI_HandleTypeDef *hspi, float* gyro_data, float *gyro_bias, uint8_t index)
{
 8003b54:	b5b0      	push	{r4, r5, r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	001a      	movs	r2, r3
 8003b62:	1cfb      	adds	r3, r7, #3
 8003b64:	701a      	strb	r2, [r3, #0]
	uint8_t gyro_raw[6] = {0,0,0,0,0,0};
 8003b66:	2018      	movs	r0, #24
 8003b68:	183b      	adds	r3, r7, r0
 8003b6a:	4a57      	ldr	r2, [pc, #348]	; (8003cc8 <ICM_ReadGyroData+0x174>)
 8003b6c:	6811      	ldr	r1, [r2, #0]
 8003b6e:	6019      	str	r1, [r3, #0]
 8003b70:	8892      	ldrh	r2, [r2, #4]
 8003b72:	809a      	strh	r2, [r3, #4]
	int16_t gyro_int[3] = {0,0,0};
 8003b74:	2410      	movs	r4, #16
 8003b76:	193b      	adds	r3, r7, r4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	193b      	adds	r3, r7, r4
 8003b7e:	2200      	movs	r2, #0
 8003b80:	805a      	strh	r2, [r3, #2]
 8003b82:	193b      	adds	r3, r7, r4
 8003b84:	2200      	movs	r2, #0
 8003b86:	809a      	strh	r2, [r3, #4]

	ICM_ReadBytes(hspi, REG_GYRO_XOUT_H, gyro_raw, 6, index);
 8003b88:	0005      	movs	r5, r0
 8003b8a:	183a      	adds	r2, r7, r0
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	1cfb      	adds	r3, r7, #3
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	2306      	movs	r3, #6
 8003b96:	2133      	movs	r1, #51	; 0x33
 8003b98:	f7ff fad4 	bl	8003144 <ICM_ReadBytes>
	UINT8_TO_INT16(gyro_int[0], gyro_raw[0], gyro_raw[1]);
 8003b9c:	0028      	movs	r0, r5
 8003b9e:	183b      	adds	r3, r7, r0
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	b21a      	sxth	r2, r3
 8003ba4:	0021      	movs	r1, r4
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	2200      	movs	r2, #0
 8003bae:	5e9b      	ldrsh	r3, [r3, r2]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	b21a      	sxth	r2, r3
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	801a      	strh	r2, [r3, #0]
 8003bb8:	187b      	adds	r3, r7, r1
 8003bba:	2200      	movs	r2, #0
 8003bbc:	5e9a      	ldrsh	r2, [r3, r2]
 8003bbe:	183b      	adds	r3, r7, r0
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	b21b      	sxth	r3, r3
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	b21a      	sxth	r2, r3
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro_int[1], gyro_raw[2], gyro_raw[3]);
 8003bcc:	183b      	adds	r3, r7, r0
 8003bce:	789b      	ldrb	r3, [r3, #2]
 8003bd0:	b21a      	sxth	r2, r3
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	805a      	strh	r2, [r3, #2]
 8003bd6:	187b      	adds	r3, r7, r1
 8003bd8:	2202      	movs	r2, #2
 8003bda:	5e9b      	ldrsh	r3, [r3, r2]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	b21a      	sxth	r2, r3
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	805a      	strh	r2, [r3, #2]
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	2202      	movs	r2, #2
 8003be8:	5e9a      	ldrsh	r2, [r3, r2]
 8003bea:	183b      	adds	r3, r7, r0
 8003bec:	78db      	ldrb	r3, [r3, #3]
 8003bee:	b21b      	sxth	r3, r3
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b21a      	sxth	r2, r3
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	805a      	strh	r2, [r3, #2]
	UINT8_TO_INT16(gyro_int[2], gyro_raw[4], gyro_raw[5]);
 8003bf8:	183b      	adds	r3, r7, r0
 8003bfa:	791b      	ldrb	r3, [r3, #4]
 8003bfc:	b21a      	sxth	r2, r3
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	809a      	strh	r2, [r3, #4]
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	2204      	movs	r2, #4
 8003c06:	5e9b      	ldrsh	r3, [r3, r2]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	b21a      	sxth	r2, r3
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	809a      	strh	r2, [r3, #4]
 8003c10:	000d      	movs	r5, r1
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	2204      	movs	r2, #4
 8003c16:	5e9a      	ldrsh	r2, [r3, r2]
 8003c18:	183b      	adds	r3, r7, r0
 8003c1a:	795b      	ldrb	r3, [r3, #5]
 8003c1c:	b21b      	sxth	r3, r3
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b21a      	sxth	r2, r3
 8003c22:	197b      	adds	r3, r7, r5
 8003c24:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (((float) gyro_int[0]  / g_gyro_scale_factor) + gyro_bias[0]);
 8003c26:	197b      	adds	r3, r7, r5
 8003c28:	2200      	movs	r2, #0
 8003c2a:	5e9b      	ldrsh	r3, [r3, r2]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7fd faf1 	bl	8001214 <__aeabi_i2f>
 8003c32:	1c02      	adds	r2, r0, #0
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <ICM_ReadGyroData+0x178>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	1c19      	adds	r1, r3, #0
 8003c3a:	1c10      	adds	r0, r2, #0
 8003c3c:	f7fc fe1e 	bl	800087c <__aeabi_fdiv>
 8003c40:	1c03      	adds	r3, r0, #0
 8003c42:	1c1a      	adds	r2, r3, #0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1c19      	adds	r1, r3, #0
 8003c4a:	1c10      	adds	r0, r2, #0
 8003c4c:	f7fc fc7a 	bl	8000544 <__aeabi_fadd>
 8003c50:	1c03      	adds	r3, r0, #0
 8003c52:	1c1a      	adds	r2, r3, #0
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	601a      	str	r2, [r3, #0]
	gyro_data[1] = (((float) gyro_int[1]  / g_gyro_scale_factor) + gyro_bias[1]);
 8003c58:	197b      	adds	r3, r7, r5
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	5e9b      	ldrsh	r3, [r3, r2]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f7fd fad8 	bl	8001214 <__aeabi_i2f>
 8003c64:	1c02      	adds	r2, r0, #0
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <ICM_ReadGyroData+0x178>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	1c19      	adds	r1, r3, #0
 8003c6c:	1c10      	adds	r0, r2, #0
 8003c6e:	f7fc fe05 	bl	800087c <__aeabi_fdiv>
 8003c72:	1c03      	adds	r3, r0, #0
 8003c74:	1c18      	adds	r0, r3, #0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	1d1c      	adds	r4, r3, #4
 8003c80:	1c11      	adds	r1, r2, #0
 8003c82:	f7fc fc5f 	bl	8000544 <__aeabi_fadd>
 8003c86:	1c03      	adds	r3, r0, #0
 8003c88:	6023      	str	r3, [r4, #0]
	gyro_data[2] = (((float) gyro_int[2]  / g_gyro_scale_factor) + gyro_bias[2]);
 8003c8a:	197b      	adds	r3, r7, r5
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	5e9b      	ldrsh	r3, [r3, r2]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7fd fabf 	bl	8001214 <__aeabi_i2f>
 8003c96:	1c02      	adds	r2, r0, #0
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <ICM_ReadGyroData+0x178>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	1c19      	adds	r1, r3, #0
 8003c9e:	1c10      	adds	r0, r2, #0
 8003ca0:	f7fc fdec 	bl	800087c <__aeabi_fdiv>
 8003ca4:	1c03      	adds	r3, r0, #0
 8003ca6:	1c18      	adds	r0, r3, #0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3308      	adds	r3, #8
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	001c      	movs	r4, r3
 8003cb4:	1c11      	adds	r1, r2, #0
 8003cb6:	f7fc fc45 	bl	8000544 <__aeabi_fadd>
 8003cba:	1c03      	adds	r3, r0, #0
 8003cbc:	6023      	str	r3, [r4, #0]
}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b008      	add	sp, #32
 8003cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	08011edc 	.word	0x08011edc
 8003ccc:	200003a0 	.word	0x200003a0

08003cd0 <ICM_ReadAccData>:


void ICM_ReadAccData(SPI_HandleTypeDef *hspi, float* accel_data, uint8_t index){
 8003cd0:	b5b0      	push	{r4, r5, r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	1dfb      	adds	r3, r7, #7
 8003cdc:	701a      	strb	r2, [r3, #0]

	uint8_t acc_data[6] = {0,0,0,0,0,0};
 8003cde:	2018      	movs	r0, #24
 8003ce0:	183b      	adds	r3, r7, r0
 8003ce2:	4a49      	ldr	r2, [pc, #292]	; (8003e08 <ICM_ReadAccData+0x138>)
 8003ce4:	6811      	ldr	r1, [r2, #0]
 8003ce6:	6019      	str	r1, [r3, #0]
 8003ce8:	8892      	ldrh	r2, [r2, #4]
 8003cea:	809a      	strh	r2, [r3, #4]
	int16_t acc_int[3] = {0,0,0};
 8003cec:	2410      	movs	r4, #16
 8003cee:	193b      	adds	r3, r7, r4
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	193b      	adds	r3, r7, r4
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	805a      	strh	r2, [r3, #2]
 8003cfa:	193b      	adds	r3, r7, r4
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	809a      	strh	r2, [r3, #4]
	ICM_ReadBytes(hspi, REG_ACCEL_XOUT_H, acc_data, 6, index);
 8003d00:	0005      	movs	r5, r0
 8003d02:	183a      	adds	r2, r7, r0
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	1dfb      	adds	r3, r7, #7
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2306      	movs	r3, #6
 8003d0e:	212d      	movs	r1, #45	; 0x2d
 8003d10:	f7ff fa18 	bl	8003144 <ICM_ReadBytes>

	UINT8_TO_INT16(acc_int[0],acc_data[0], acc_data[1]);
 8003d14:	0028      	movs	r0, r5
 8003d16:	183b      	adds	r3, r7, r0
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b21a      	sxth	r2, r3
 8003d1c:	0021      	movs	r1, r4
 8003d1e:	187b      	adds	r3, r7, r1
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	2200      	movs	r2, #0
 8003d26:	5e9b      	ldrsh	r3, [r3, r2]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	801a      	strh	r2, [r3, #0]
 8003d30:	187b      	adds	r3, r7, r1
 8003d32:	2200      	movs	r2, #0
 8003d34:	5e9a      	ldrsh	r2, [r3, r2]
 8003d36:	183b      	adds	r3, r7, r0
 8003d38:	785b      	ldrb	r3, [r3, #1]
 8003d3a:	b21b      	sxth	r3, r3
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b21a      	sxth	r2, r3
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(acc_int[1],acc_data[2], acc_data[3]);
 8003d44:	183b      	adds	r3, r7, r0
 8003d46:	789b      	ldrb	r3, [r3, #2]
 8003d48:	b21a      	sxth	r2, r3
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	805a      	strh	r2, [r3, #2]
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	2202      	movs	r2, #2
 8003d52:	5e9b      	ldrsh	r3, [r3, r2]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	b21a      	sxth	r2, r3
 8003d58:	187b      	adds	r3, r7, r1
 8003d5a:	805a      	strh	r2, [r3, #2]
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	2202      	movs	r2, #2
 8003d60:	5e9a      	ldrsh	r2, [r3, r2]
 8003d62:	183b      	adds	r3, r7, r0
 8003d64:	78db      	ldrb	r3, [r3, #3]
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	b21a      	sxth	r2, r3
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	805a      	strh	r2, [r3, #2]
	UINT8_TO_INT16(acc_int[2],acc_data[4], acc_data[5]);
 8003d70:	183b      	adds	r3, r7, r0
 8003d72:	791b      	ldrb	r3, [r3, #4]
 8003d74:	b21a      	sxth	r2, r3
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	809a      	strh	r2, [r3, #4]
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	5e9b      	ldrsh	r3, [r3, r2]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	b21a      	sxth	r2, r3
 8003d84:	187b      	adds	r3, r7, r1
 8003d86:	809a      	strh	r2, [r3, #4]
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	5e9a      	ldrsh	r2, [r3, r2]
 8003d8e:	183b      	adds	r3, r7, r0
 8003d90:	795b      	ldrb	r3, [r3, #5]
 8003d92:	b21b      	sxth	r3, r3
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b21a      	sxth	r2, r3
 8003d98:	000d      	movs	r5, r1
 8003d9a:	197b      	adds	r3, r7, r5
 8003d9c:	809a      	strh	r2, [r3, #4]

	accel_data[0] = (float)acc_int[0] / acc_scale_factor;
 8003d9e:	197b      	adds	r3, r7, r5
 8003da0:	2200      	movs	r2, #0
 8003da2:	5e9b      	ldrsh	r3, [r3, r2]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7fd fa35 	bl	8001214 <__aeabi_i2f>
 8003daa:	1c02      	adds	r2, r0, #0
 8003dac:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <ICM_ReadAccData+0x13c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1c19      	adds	r1, r3, #0
 8003db2:	1c10      	adds	r0, r2, #0
 8003db4:	f7fc fd62 	bl	800087c <__aeabi_fdiv>
 8003db8:	1c03      	adds	r3, r0, #0
 8003dba:	1c1a      	adds	r2, r3, #0
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	601a      	str	r2, [r3, #0]
	accel_data[1] = (float)acc_int[1] / acc_scale_factor;
 8003dc0:	197b      	adds	r3, r7, r5
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	5e9b      	ldrsh	r3, [r3, r2]
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7fd fa24 	bl	8001214 <__aeabi_i2f>
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <ICM_ReadAccData+0x13c>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	1d1c      	adds	r4, r3, #4
 8003dd4:	1c11      	adds	r1, r2, #0
 8003dd6:	f7fc fd51 	bl	800087c <__aeabi_fdiv>
 8003dda:	1c03      	adds	r3, r0, #0
 8003ddc:	6023      	str	r3, [r4, #0]
	accel_data[2] = (float)acc_int[2] / acc_scale_factor;
 8003dde:	197b      	adds	r3, r7, r5
 8003de0:	2204      	movs	r2, #4
 8003de2:	5e9b      	ldrsh	r3, [r3, r2]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7fd fa15 	bl	8001214 <__aeabi_i2f>
 8003dea:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <ICM_ReadAccData+0x13c>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3308      	adds	r3, #8
 8003df2:	001c      	movs	r4, r3
 8003df4:	1c11      	adds	r1, r2, #0
 8003df6:	f7fc fd41 	bl	800087c <__aeabi_fdiv>
 8003dfa:	1c03      	adds	r3, r0, #0
 8003dfc:	6023      	str	r3, [r4, #0]
}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b008      	add	sp, #32
 8003e04:	bdb0      	pop	{r4, r5, r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	08011edc 	.word	0x08011edc
 8003e0c:	20000338 	.word	0x20000338

08003e10 <ICM_AccConfig>:

/*configure accelerometer sensitivity and scaler**/
uint8_t ICM_AccConfig(SPI_HandleTypeDef *hspi, uint8_t sensitivity, uint8_t index){
 8003e10:	b5b0      	push	{r4, r5, r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	0008      	movs	r0, r1
 8003e1a:	0011      	movs	r1, r2
 8003e1c:	1cfb      	adds	r3, r7, #3
 8003e1e:	1c02      	adds	r2, r0, #0
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	1cbb      	adds	r3, r7, #2
 8003e24:	1c0a      	adds	r2, r1, #0
 8003e26:	701a      	strb	r2, [r3, #0]

	ICM_SelectBank(hspi,USER_BANK_2, index);
 8003e28:	1cbb      	adds	r3, r7, #2
 8003e2a:	781a      	ldrb	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2120      	movs	r1, #32
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7ff fa38 	bl	80032a6 <ICM_SelectBank>
	uint8_t config_byte_acc;
	uint8_t config2 = 0;
 8003e36:	200e      	movs	r0, #14
 8003e38:	183b      	adds	r3, r7, r0
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_ACCEL_CONFIG_2, (uint8_t)config2, index);
 8003e3e:	1cbb      	adds	r3, r7, #2
 8003e40:	7819      	ldrb	r1, [r3, #0]
 8003e42:	183b      	adds	r3, r7, r0
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	000b      	movs	r3, r1
 8003e4a:	2115      	movs	r1, #21
 8003e4c:	f7ff f9f8 	bl	8003240 <ICM_WriteOneByte>

	switch(sensitivity){
 8003e50:	1cfb      	adds	r3, r7, #3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d03e      	beq.n	8003ed6 <ICM_AccConfig+0xc6>
 8003e58:	dc4f      	bgt.n	8003efa <ICM_AccConfig+0xea>
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d029      	beq.n	8003eb2 <ICM_AccConfig+0xa2>
 8003e5e:	dc4c      	bgt.n	8003efa <ICM_AccConfig+0xea>
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d002      	beq.n	8003e6a <ICM_AccConfig+0x5a>
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d012      	beq.n	8003e8e <ICM_AccConfig+0x7e>
 8003e68:	e047      	b.n	8003efa <ICM_AccConfig+0xea>
	case 2:
		config_byte_acc = ACCEL_CONFIG_2G | ACC_FILTER;
 8003e6a:	200f      	movs	r0, #15
 8003e6c:	183b      	adds	r3, r7, r0
 8003e6e:	2231      	movs	r2, #49	; 0x31
 8003e70:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_2G;
 8003e72:	4b42      	ldr	r3, [pc, #264]	; (8003f7c <ICM_AccConfig+0x16c>)
 8003e74:	228d      	movs	r2, #141	; 0x8d
 8003e76:	05d2      	lsls	r2, r2, #23
 8003e78:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003e7a:	1cbb      	adds	r3, r7, #2
 8003e7c:	7819      	ldrb	r1, [r3, #0]
 8003e7e:	183b      	adds	r3, r7, r0
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	000b      	movs	r3, r1
 8003e86:	2114      	movs	r1, #20
 8003e88:	f7ff f9da 	bl	8003240 <ICM_WriteOneByte>
	break;
 8003e8c:	e046      	b.n	8003f1c <ICM_AccConfig+0x10c>
	case 4:
		config_byte_acc = ACCEL_CONFIG_4G | ACC_FILTER;
 8003e8e:	200f      	movs	r0, #15
 8003e90:	183b      	adds	r3, r7, r0
 8003e92:	2233      	movs	r2, #51	; 0x33
 8003e94:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_4G;
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <ICM_AccConfig+0x16c>)
 8003e98:	228c      	movs	r2, #140	; 0x8c
 8003e9a:	05d2      	lsls	r2, r2, #23
 8003e9c:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003e9e:	1cbb      	adds	r3, r7, #2
 8003ea0:	7819      	ldrb	r1, [r3, #0]
 8003ea2:	183b      	adds	r3, r7, r0
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	000b      	movs	r3, r1
 8003eaa:	2114      	movs	r1, #20
 8003eac:	f7ff f9c8 	bl	8003240 <ICM_WriteOneByte>
	break;
 8003eb0:	e034      	b.n	8003f1c <ICM_AccConfig+0x10c>
	case 8:
		config_byte_acc = ACCEL_CONFIG_8G | ACC_FILTER;
 8003eb2:	200f      	movs	r0, #15
 8003eb4:	183b      	adds	r3, r7, r0
 8003eb6:	2235      	movs	r2, #53	; 0x35
 8003eb8:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_8G;
 8003eba:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <ICM_AccConfig+0x16c>)
 8003ebc:	228b      	movs	r2, #139	; 0x8b
 8003ebe:	05d2      	lsls	r2, r2, #23
 8003ec0:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003ec2:	1cbb      	adds	r3, r7, #2
 8003ec4:	7819      	ldrb	r1, [r3, #0]
 8003ec6:	183b      	adds	r3, r7, r0
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	000b      	movs	r3, r1
 8003ece:	2114      	movs	r1, #20
 8003ed0:	f7ff f9b6 	bl	8003240 <ICM_WriteOneByte>
	break;
 8003ed4:	e022      	b.n	8003f1c <ICM_AccConfig+0x10c>
	case 16:
		config_byte_acc = ACCEL_CONFIG_16G | ACC_FILTER;
 8003ed6:	200f      	movs	r0, #15
 8003ed8:	183b      	adds	r3, r7, r0
 8003eda:	2237      	movs	r2, #55	; 0x37
 8003edc:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_16G;
 8003ede:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <ICM_AccConfig+0x16c>)
 8003ee0:	228a      	movs	r2, #138	; 0x8a
 8003ee2:	05d2      	lsls	r2, r2, #23
 8003ee4:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003ee6:	1cbb      	adds	r3, r7, #2
 8003ee8:	7819      	ldrb	r1, [r3, #0]
 8003eea:	183b      	adds	r3, r7, r0
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	000b      	movs	r3, r1
 8003ef2:	2114      	movs	r1, #20
 8003ef4:	f7ff f9a4 	bl	8003240 <ICM_WriteOneByte>
	break;
 8003ef8:	e010      	b.n	8003f1c <ICM_AccConfig+0x10c>
	default:
		config_byte_acc = ACCEL_CONFIG_2G | ACC_FILTER;
 8003efa:	200f      	movs	r0, #15
 8003efc:	183b      	adds	r3, r7, r0
 8003efe:	2231      	movs	r2, #49	; 0x31
 8003f00:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_2G;
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <ICM_AccConfig+0x16c>)
 8003f04:	228d      	movs	r2, #141	; 0x8d
 8003f06:	05d2      	lsls	r2, r2, #23
 8003f08:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003f0a:	1cbb      	adds	r3, r7, #2
 8003f0c:	7819      	ldrb	r1, [r3, #0]
 8003f0e:	183b      	adds	r3, r7, r0
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	000b      	movs	r3, r1
 8003f16:	2114      	movs	r1, #20
 8003f18:	f7ff f992 	bl	8003240 <ICM_WriteOneByte>
	}

	HAL_Delay(20);
 8003f1c:	2014      	movs	r0, #20
 8003f1e:	f005 fad1 	bl	80094c4 <HAL_Delay>

	uint8_t test1 = 0;
 8003f22:	210d      	movs	r1, #13
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]
	uint8_t test2 = 0;
 8003f2a:	250c      	movs	r5, #12
 8003f2c:	197b      	adds	r3, r7, r5
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]

	ICM_ReadOneByte(hspi, REG_ACCEL_CONFIG, &test1, index);
 8003f32:	1cbb      	adds	r3, r7, #2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	000c      	movs	r4, r1
 8003f38:	187a      	adds	r2, r7, r1
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	2114      	movs	r1, #20
 8003f3e:	f7ff f93b 	bl	80031b8 <ICM_ReadOneByte>
	ICM_ReadOneByte(hspi, REG_ACCEL_CONFIG_2, &test2, index);
 8003f42:	1cbb      	adds	r3, r7, #2
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	197a      	adds	r2, r7, r5
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	2115      	movs	r1, #21
 8003f4c:	f7ff f934 	bl	80031b8 <ICM_ReadOneByte>

	if((test1 != config_byte_acc) || (test2 != config2)){
 8003f50:	193b      	adds	r3, r7, r4
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	220f      	movs	r2, #15
 8003f56:	18ba      	adds	r2, r7, r2
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d106      	bne.n	8003f6c <ICM_AccConfig+0x15c>
 8003f5e:	197b      	adds	r3, r7, r5
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	220e      	movs	r2, #14
 8003f64:	18ba      	adds	r2, r7, r2
 8003f66:	7812      	ldrb	r2, [r2, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <ICM_AccConfig+0x160>
		return 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <ICM_AccConfig+0x162>
	}else{
		return 1;
 8003f70:	2301      	movs	r3, #1
	}

}
 8003f72:	0018      	movs	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b004      	add	sp, #16
 8003f78:	bdb0      	pop	{r4, r5, r7, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	20000338 	.word	0x20000338

08003f80 <ICM_WHOAMI>:

uint8_t ICM_WHOAMI(SPI_HandleTypeDef *hspi, uint8_t index) {
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	000a      	movs	r2, r1
 8003f8a:	1cfb      	adds	r3, r7, #3
 8003f8c:	701a      	strb	r2, [r3, #0]
	uint8_t test = 0x00;
 8003f8e:	210f      	movs	r1, #15
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
	ICM_ReadOneByte(hspi, REG_WHO_AM_I , &test, index);
 8003f96:	1cfb      	adds	r3, r7, #3
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	000c      	movs	r4, r1
 8003f9c:	187a      	adds	r2, r7, r1
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	f7ff f909 	bl	80031b8 <ICM_ReadOneByte>
	if (test != REG_WHO_AM_I_CONST)
 8003fa6:	193b      	adds	r3, r7, r4
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2bea      	cmp	r3, #234	; 0xea
 8003fac:	d001      	beq.n	8003fb2 <ICM_WHOAMI+0x32>
	{
		return 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e000      	b.n	8003fb4 <ICM_WHOAMI+0x34>
	} else {
		return 1;
 8003fb2:	2301      	movs	r3, #1
	}
}
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b005      	add	sp, #20
 8003fba:	bd90      	pop	{r4, r7, pc}

08003fbc <CalcQuaternionToEuler>:

/*Madgwick Filter Parameters */
static float Beta = 0.1;

void CalcQuaternionToEuler(struct quaternion quat, struct euler_angles* eu)
{
 8003fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	2608      	movs	r6, #8
 8003fc4:	19bc      	adds	r4, r7, r6
 8003fc6:	6020      	str	r0, [r4, #0]
 8003fc8:	6061      	str	r1, [r4, #4]
 8003fca:	60a2      	str	r2, [r4, #8]
 8003fcc:	60e3      	str	r3, [r4, #12]
	eu->roll = atan2((quat.q1*quat.q2 + quat.q3*quat.q4),0.5 - (quat.q2*quat.q2 + quat.q3*quat.q3))*RAD_2_DEG;
 8003fce:	19bb      	adds	r3, r7, r6
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	19bb      	adds	r3, r7, r6
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	1c19      	adds	r1, r3, #0
 8003fd8:	1c10      	adds	r0, r2, #0
 8003fda:	f7fc fe19 	bl	8000c10 <__aeabi_fmul>
 8003fde:	1c03      	adds	r3, r0, #0
 8003fe0:	1c1c      	adds	r4, r3, #0
 8003fe2:	19bb      	adds	r3, r7, r6
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	19bb      	adds	r3, r7, r6
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	1c19      	adds	r1, r3, #0
 8003fec:	1c10      	adds	r0, r2, #0
 8003fee:	f7fc fe0f 	bl	8000c10 <__aeabi_fmul>
 8003ff2:	1c03      	adds	r3, r0, #0
 8003ff4:	1c19      	adds	r1, r3, #0
 8003ff6:	1c20      	adds	r0, r4, #0
 8003ff8:	f7fc faa4 	bl	8000544 <__aeabi_fadd>
 8003ffc:	1c03      	adds	r3, r0, #0
 8003ffe:	1c18      	adds	r0, r3, #0
 8004000:	f7fe ff66 	bl	8002ed0 <__aeabi_f2d>
 8004004:	0004      	movs	r4, r0
 8004006:	000d      	movs	r5, r1
 8004008:	19bb      	adds	r3, r7, r6
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	19bb      	adds	r3, r7, r6
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	1c19      	adds	r1, r3, #0
 8004012:	1c10      	adds	r0, r2, #0
 8004014:	f7fc fdfc 	bl	8000c10 <__aeabi_fmul>
 8004018:	1c03      	adds	r3, r0, #0
 800401a:	1c1e      	adds	r6, r3, #0
 800401c:	2108      	movs	r1, #8
 800401e:	187b      	adds	r3, r7, r1
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	187b      	adds	r3, r7, r1
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	1c19      	adds	r1, r3, #0
 8004028:	1c10      	adds	r0, r2, #0
 800402a:	f7fc fdf1 	bl	8000c10 <__aeabi_fmul>
 800402e:	1c03      	adds	r3, r0, #0
 8004030:	1c19      	adds	r1, r3, #0
 8004032:	1c30      	adds	r0, r6, #0
 8004034:	f7fc fa86 	bl	8000544 <__aeabi_fadd>
 8004038:	1c03      	adds	r3, r0, #0
 800403a:	1c18      	adds	r0, r3, #0
 800403c:	f7fe ff48 	bl	8002ed0 <__aeabi_f2d>
 8004040:	0002      	movs	r2, r0
 8004042:	000b      	movs	r3, r1
 8004044:	2000      	movs	r0, #0
 8004046:	4955      	ldr	r1, [pc, #340]	; (800419c <CalcQuaternionToEuler+0x1e0>)
 8004048:	f7fe fb06 	bl	8002658 <__aeabi_dsub>
 800404c:	0002      	movs	r2, r0
 800404e:	000b      	movs	r3, r1
 8004050:	0020      	movs	r0, r4
 8004052:	0029      	movs	r1, r5
 8004054:	f00b fcc6 	bl	800f9e4 <atan2>
 8004058:	4a51      	ldr	r2, [pc, #324]	; (80041a0 <CalcQuaternionToEuler+0x1e4>)
 800405a:	4b52      	ldr	r3, [pc, #328]	; (80041a4 <CalcQuaternionToEuler+0x1e8>)
 800405c:	f7fe f890 	bl	8002180 <__aeabi_dmul>
 8004060:	0002      	movs	r2, r0
 8004062:	000b      	movs	r3, r1
 8004064:	0010      	movs	r0, r2
 8004066:	0019      	movs	r1, r3
 8004068:	f7fe ff7a 	bl	8002f60 <__aeabi_d2f>
 800406c:	1c02      	adds	r2, r0, #0
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	601a      	str	r2, [r3, #0]
	eu->pitch = asin(2.0*(quat.q1*quat.q3 - quat.q2*quat.q4))*RAD_2_DEG;
 8004072:	2508      	movs	r5, #8
 8004074:	197b      	adds	r3, r7, r5
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	197b      	adds	r3, r7, r5
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	1c19      	adds	r1, r3, #0
 800407e:	1c10      	adds	r0, r2, #0
 8004080:	f7fc fdc6 	bl	8000c10 <__aeabi_fmul>
 8004084:	1c03      	adds	r3, r0, #0
 8004086:	1c1c      	adds	r4, r3, #0
 8004088:	197b      	adds	r3, r7, r5
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	197b      	adds	r3, r7, r5
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	1c19      	adds	r1, r3, #0
 8004092:	1c10      	adds	r0, r2, #0
 8004094:	f7fc fdbc 	bl	8000c10 <__aeabi_fmul>
 8004098:	1c03      	adds	r3, r0, #0
 800409a:	1c19      	adds	r1, r3, #0
 800409c:	1c20      	adds	r0, r4, #0
 800409e:	f7fc fed1 	bl	8000e44 <__aeabi_fsub>
 80040a2:	1c03      	adds	r3, r0, #0
 80040a4:	1c18      	adds	r0, r3, #0
 80040a6:	f7fe ff13 	bl	8002ed0 <__aeabi_f2d>
 80040aa:	0002      	movs	r2, r0
 80040ac:	000b      	movs	r3, r1
 80040ae:	f7fd f8f7 	bl	80012a0 <__aeabi_dadd>
 80040b2:	0002      	movs	r2, r0
 80040b4:	000b      	movs	r3, r1
 80040b6:	0010      	movs	r0, r2
 80040b8:	0019      	movs	r1, r3
 80040ba:	f00b fc63 	bl	800f984 <asin>
 80040be:	4a38      	ldr	r2, [pc, #224]	; (80041a0 <CalcQuaternionToEuler+0x1e4>)
 80040c0:	4b38      	ldr	r3, [pc, #224]	; (80041a4 <CalcQuaternionToEuler+0x1e8>)
 80040c2:	f7fe f85d 	bl	8002180 <__aeabi_dmul>
 80040c6:	0002      	movs	r2, r0
 80040c8:	000b      	movs	r3, r1
 80040ca:	0010      	movs	r0, r2
 80040cc:	0019      	movs	r1, r3
 80040ce:	f7fe ff47 	bl	8002f60 <__aeabi_d2f>
 80040d2:	1c02      	adds	r2, r0, #0
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	605a      	str	r2, [r3, #4]
	eu->yaw = -atan2((quat.q2*quat.q3 + quat.q1*quat.q4), 0.5 - (quat.q3*quat.q3 + quat.q4*quat.q4))*RAD_2_DEG;
 80040d8:	197b      	adds	r3, r7, r5
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	197b      	adds	r3, r7, r5
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	1c19      	adds	r1, r3, #0
 80040e2:	1c10      	adds	r0, r2, #0
 80040e4:	f7fc fd94 	bl	8000c10 <__aeabi_fmul>
 80040e8:	1c03      	adds	r3, r0, #0
 80040ea:	1c1c      	adds	r4, r3, #0
 80040ec:	197b      	adds	r3, r7, r5
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	002e      	movs	r6, r5
 80040f2:	197b      	adds	r3, r7, r5
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	1c19      	adds	r1, r3, #0
 80040f8:	1c10      	adds	r0, r2, #0
 80040fa:	f7fc fd89 	bl	8000c10 <__aeabi_fmul>
 80040fe:	1c03      	adds	r3, r0, #0
 8004100:	1c19      	adds	r1, r3, #0
 8004102:	1c20      	adds	r0, r4, #0
 8004104:	f7fc fa1e 	bl	8000544 <__aeabi_fadd>
 8004108:	1c03      	adds	r3, r0, #0
 800410a:	1c18      	adds	r0, r3, #0
 800410c:	f7fe fee0 	bl	8002ed0 <__aeabi_f2d>
 8004110:	0004      	movs	r4, r0
 8004112:	000d      	movs	r5, r1
 8004114:	19bb      	adds	r3, r7, r6
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	19bb      	adds	r3, r7, r6
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	1c19      	adds	r1, r3, #0
 800411e:	1c10      	adds	r0, r2, #0
 8004120:	f7fc fd76 	bl	8000c10 <__aeabi_fmul>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c1e      	adds	r6, r3, #0
 8004128:	2108      	movs	r1, #8
 800412a:	187b      	adds	r3, r7, r1
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	187b      	adds	r3, r7, r1
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	1c19      	adds	r1, r3, #0
 8004134:	1c10      	adds	r0, r2, #0
 8004136:	f7fc fd6b 	bl	8000c10 <__aeabi_fmul>
 800413a:	1c03      	adds	r3, r0, #0
 800413c:	1c19      	adds	r1, r3, #0
 800413e:	1c30      	adds	r0, r6, #0
 8004140:	f7fc fa00 	bl	8000544 <__aeabi_fadd>
 8004144:	1c03      	adds	r3, r0, #0
 8004146:	1c18      	adds	r0, r3, #0
 8004148:	f7fe fec2 	bl	8002ed0 <__aeabi_f2d>
 800414c:	0002      	movs	r2, r0
 800414e:	000b      	movs	r3, r1
 8004150:	2000      	movs	r0, #0
 8004152:	4912      	ldr	r1, [pc, #72]	; (800419c <CalcQuaternionToEuler+0x1e0>)
 8004154:	f7fe fa80 	bl	8002658 <__aeabi_dsub>
 8004158:	0002      	movs	r2, r0
 800415a:	000b      	movs	r3, r1
 800415c:	0020      	movs	r0, r4
 800415e:	0029      	movs	r1, r5
 8004160:	f00b fc40 	bl	800f9e4 <atan2>
 8004164:	0002      	movs	r2, r0
 8004166:	000b      	movs	r3, r1
 8004168:	0011      	movs	r1, r2
 800416a:	6039      	str	r1, [r7, #0]
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	0609      	lsls	r1, r1, #24
 8004170:	4059      	eors	r1, r3
 8004172:	6079      	str	r1, [r7, #4]
 8004174:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <CalcQuaternionToEuler+0x1e4>)
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <CalcQuaternionToEuler+0x1e8>)
 8004178:	6838      	ldr	r0, [r7, #0]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	f7fe f800 	bl	8002180 <__aeabi_dmul>
 8004180:	0002      	movs	r2, r0
 8004182:	000b      	movs	r3, r1
 8004184:	0010      	movs	r0, r2
 8004186:	0019      	movs	r1, r3
 8004188:	f7fe feea 	bl	8002f60 <__aeabi_d2f>
 800418c:	1c02      	adds	r2, r0, #0
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	609a      	str	r2, [r3, #8]
}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	46bd      	mov	sp, r7
 8004196:	b007      	add	sp, #28
 8004198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	3fe00000 	.word	0x3fe00000
 80041a0:	1a63c1f8 	.word	0x1a63c1f8
 80041a4:	404ca5dc 	.word	0x404ca5dc

080041a8 <CalcAngleDifference>:
					pow(quat.q1,2) - pow(quat.q2,2) - pow(quat.q3,2) + pow(quat.q4,2))*RAD_2_DEG;
	}
}

void CalcAngleDifference(struct euler_angles *diff, struct euler_angles *a, struct euler_angles *b, struct euler_angles *add_on)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
	diff->yaw = (a->yaw - b->yaw);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	1c19      	adds	r1, r3, #0
 80041c0:	1c10      	adds	r0, r2, #0
 80041c2:	f7fc fe3f 	bl	8000e44 <__aeabi_fsub>
 80041c6:	1c03      	adds	r3, r0, #0
 80041c8:	1c1a      	adds	r2, r3, #0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	609a      	str	r2, [r3, #8]
	diff->pitch = (a->pitch - b->pitch);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	1c19      	adds	r1, r3, #0
 80041d8:	1c10      	adds	r0, r2, #0
 80041da:	f7fc fe33 	bl	8000e44 <__aeabi_fsub>
 80041de:	1c03      	adds	r3, r0, #0
 80041e0:	1c1a      	adds	r2, r3, #0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	605a      	str	r2, [r3, #4]
	diff->roll = (a->roll - b->roll);
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	1c19      	adds	r1, r3, #0
 80041f0:	1c10      	adds	r0, r2, #0
 80041f2:	f7fc fe27 	bl	8000e44 <__aeabi_fsub>
 80041f6:	1c03      	adds	r3, r0, #0
 80041f8:	1c1a      	adds	r2, r3, #0
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	601a      	str	r2, [r3, #0]

	if (diff->yaw > 180.0)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	493c      	ldr	r1, [pc, #240]	; (80042f4 <CalcAngleDifference+0x14c>)
 8004204:	1c18      	adds	r0, r3, #0
 8004206:	f7fc f971 	bl	80004ec <__aeabi_fcmpgt>
 800420a:	1e03      	subs	r3, r0, #0
 800420c:	d009      	beq.n	8004222 <CalcAngleDifference+0x7a>
	{
		diff->yaw = 360.0 - diff->yaw;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	1c19      	adds	r1, r3, #0
 8004214:	4838      	ldr	r0, [pc, #224]	; (80042f8 <CalcAngleDifference+0x150>)
 8004216:	f7fc fe15 	bl	8000e44 <__aeabi_fsub>
 800421a:	1c03      	adds	r3, r0, #0
 800421c:	1c1a      	adds	r2, r3, #0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	609a      	str	r2, [r3, #8]
	}

	if (diff->yaw < -180.0)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	4935      	ldr	r1, [pc, #212]	; (80042fc <CalcAngleDifference+0x154>)
 8004228:	1c18      	adds	r0, r3, #0
 800422a:	f7fc f94b 	bl	80004c4 <__aeabi_fcmplt>
 800422e:	1e03      	subs	r3, r0, #0
 8004230:	d00c      	beq.n	800424c <CalcAngleDifference+0xa4>
	{
		diff->yaw = -(diff->yaw + 360.0);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	4930      	ldr	r1, [pc, #192]	; (80042f8 <CalcAngleDifference+0x150>)
 8004238:	1c18      	adds	r0, r3, #0
 800423a:	f7fc f983 	bl	8000544 <__aeabi_fadd>
 800423e:	1c03      	adds	r3, r0, #0
 8004240:	1c1a      	adds	r2, r3, #0
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	061b      	lsls	r3, r3, #24
 8004246:	405a      	eors	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	609a      	str	r2, [r3, #8]
	}

	if (diff->pitch > 180.0)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4928      	ldr	r1, [pc, #160]	; (80042f4 <CalcAngleDifference+0x14c>)
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7fc f94a 	bl	80004ec <__aeabi_fcmpgt>
 8004258:	1e03      	subs	r3, r0, #0
 800425a:	d009      	beq.n	8004270 <CalcAngleDifference+0xc8>
	{
		diff->pitch = 360.0 - diff->pitch;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	1c19      	adds	r1, r3, #0
 8004262:	4825      	ldr	r0, [pc, #148]	; (80042f8 <CalcAngleDifference+0x150>)
 8004264:	f7fc fdee 	bl	8000e44 <__aeabi_fsub>
 8004268:	1c03      	adds	r3, r0, #0
 800426a:	1c1a      	adds	r2, r3, #0
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	605a      	str	r2, [r3, #4]
	}

	if (diff->pitch < -180.0)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4921      	ldr	r1, [pc, #132]	; (80042fc <CalcAngleDifference+0x154>)
 8004276:	1c18      	adds	r0, r3, #0
 8004278:	f7fc f924 	bl	80004c4 <__aeabi_fcmplt>
 800427c:	1e03      	subs	r3, r0, #0
 800427e:	d00c      	beq.n	800429a <CalcAngleDifference+0xf2>
	{
		diff->pitch = -(diff->pitch + 360.0);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	491c      	ldr	r1, [pc, #112]	; (80042f8 <CalcAngleDifference+0x150>)
 8004286:	1c18      	adds	r0, r3, #0
 8004288:	f7fc f95c 	bl	8000544 <__aeabi_fadd>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	1c1a      	adds	r2, r3, #0
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	061b      	lsls	r3, r3, #24
 8004294:	405a      	eors	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]
	}

	if (diff->roll > 180.0)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4915      	ldr	r1, [pc, #84]	; (80042f4 <CalcAngleDifference+0x14c>)
 80042a0:	1c18      	adds	r0, r3, #0
 80042a2:	f7fc f923 	bl	80004ec <__aeabi_fcmpgt>
 80042a6:	1e03      	subs	r3, r0, #0
 80042a8:	d009      	beq.n	80042be <CalcAngleDifference+0x116>
	{
		diff->roll = 360.0 - diff->roll;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	1c19      	adds	r1, r3, #0
 80042b0:	4811      	ldr	r0, [pc, #68]	; (80042f8 <CalcAngleDifference+0x150>)
 80042b2:	f7fc fdc7 	bl	8000e44 <__aeabi_fsub>
 80042b6:	1c03      	adds	r3, r0, #0
 80042b8:	1c1a      	adds	r2, r3, #0
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	601a      	str	r2, [r3, #0]
	}

	if (diff->roll < -180.0)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	490e      	ldr	r1, [pc, #56]	; (80042fc <CalcAngleDifference+0x154>)
 80042c4:	1c18      	adds	r0, r3, #0
 80042c6:	f7fc f8fd 	bl	80004c4 <__aeabi_fcmplt>
 80042ca:	1e03      	subs	r3, r0, #0
 80042cc:	d100      	bne.n	80042d0 <CalcAngleDifference+0x128>
	{
		diff->roll = -(diff->roll + 360.0);
	}

}
 80042ce:	e00c      	b.n	80042ea <CalcAngleDifference+0x142>
		diff->roll = -(diff->roll + 360.0);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4908      	ldr	r1, [pc, #32]	; (80042f8 <CalcAngleDifference+0x150>)
 80042d6:	1c18      	adds	r0, r3, #0
 80042d8:	f7fc f934 	bl	8000544 <__aeabi_fadd>
 80042dc:	1c03      	adds	r3, r0, #0
 80042de:	1c1a      	adds	r2, r3, #0
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	061b      	lsls	r3, r3, #24
 80042e4:	405a      	eors	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	601a      	str	r2, [r3, #0]
}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b004      	add	sp, #16
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	43340000 	.word	0x43340000
 80042f8:	43b40000 	.word	0x43b40000
 80042fc:	c3340000 	.word	0xc3340000

08004300 <CalcAccLinearToEuler>:
	eu_gyro_est->pitch += gyro_data[1]*SAMPLE_TIME_ICM/1000.0*RAD_2_DEG;
	eu_gyro_est->roll += gyro_data[0]*SAMPLE_TIME_ICM/1000.0*RAD_2_DEG;
}

void CalcAccLinearToEuler(float* accel_data, struct euler_angles* eu_acc_est)
{
 8004300:	b5b0      	push	{r4, r5, r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
		float pitch = atan(accel_data[0]/accel_data[2])* RAD_2_DEG;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3308      	adds	r3, #8
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1c19      	adds	r1, r3, #0
 8004316:	1c10      	adds	r0, r2, #0
 8004318:	f7fc fab0 	bl	800087c <__aeabi_fdiv>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	1c18      	adds	r0, r3, #0
 8004320:	f7fe fdd6 	bl	8002ed0 <__aeabi_f2d>
 8004324:	0002      	movs	r2, r0
 8004326:	000b      	movs	r3, r1
 8004328:	0010      	movs	r0, r2
 800432a:	0019      	movs	r1, r3
 800432c:	f00b f91e 	bl	800f56c <atan>
 8004330:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <CalcAccLinearToEuler+0xe4>)
 8004332:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <CalcAccLinearToEuler+0xe8>)
 8004334:	f7fd ff24 	bl	8002180 <__aeabi_dmul>
 8004338:	0002      	movs	r2, r0
 800433a:	000b      	movs	r3, r1
 800433c:	0010      	movs	r0, r2
 800433e:	0019      	movs	r1, r3
 8004340:	f7fe fe0e 	bl	8002f60 <__aeabi_d2f>
 8004344:	1c03      	adds	r3, r0, #0
 8004346:	617b      	str	r3, [r7, #20]
		float roll = atan(accel_data[1]/sqrt(pow(accel_data[0],2) + pow(accel_data[2],2))) * RAD_2_DEG;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3304      	adds	r3, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	1c18      	adds	r0, r3, #0
 8004350:	f7fe fdbe 	bl	8002ed0 <__aeabi_f2d>
 8004354:	0004      	movs	r4, r0
 8004356:	000d      	movs	r5, r1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	1c18      	adds	r0, r3, #0
 800435e:	f7fe fdb7 	bl	8002ed0 <__aeabi_f2d>
 8004362:	2200      	movs	r2, #0
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	05db      	lsls	r3, r3, #23
 8004368:	f00b fb40 	bl	800f9ec <pow>
 800436c:	6038      	str	r0, [r7, #0]
 800436e:	6079      	str	r1, [r7, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3308      	adds	r3, #8
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	1c18      	adds	r0, r3, #0
 8004378:	f7fe fdaa 	bl	8002ed0 <__aeabi_f2d>
 800437c:	2200      	movs	r2, #0
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	05db      	lsls	r3, r3, #23
 8004382:	f00b fb33 	bl	800f9ec <pow>
 8004386:	0002      	movs	r2, r0
 8004388:	000b      	movs	r3, r1
 800438a:	6838      	ldr	r0, [r7, #0]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	f7fc ff87 	bl	80012a0 <__aeabi_dadd>
 8004392:	0002      	movs	r2, r0
 8004394:	000b      	movs	r3, r1
 8004396:	0010      	movs	r0, r2
 8004398:	0019      	movs	r1, r3
 800439a:	f00b fbdf 	bl	800fb5c <sqrt>
 800439e:	0002      	movs	r2, r0
 80043a0:	000b      	movs	r3, r1
 80043a2:	0020      	movs	r0, r4
 80043a4:	0029      	movs	r1, r5
 80043a6:	f7fd fae5 	bl	8001974 <__aeabi_ddiv>
 80043aa:	0002      	movs	r2, r0
 80043ac:	000b      	movs	r3, r1
 80043ae:	0010      	movs	r0, r2
 80043b0:	0019      	movs	r1, r3
 80043b2:	f00b f8db 	bl	800f56c <atan>
 80043b6:	4a0b      	ldr	r2, [pc, #44]	; (80043e4 <CalcAccLinearToEuler+0xe4>)
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <CalcAccLinearToEuler+0xe8>)
 80043ba:	f7fd fee1 	bl	8002180 <__aeabi_dmul>
 80043be:	0002      	movs	r2, r0
 80043c0:	000b      	movs	r3, r1
 80043c2:	0010      	movs	r0, r2
 80043c4:	0019      	movs	r1, r3
 80043c6:	f7fe fdcb 	bl	8002f60 <__aeabi_d2f>
 80043ca:	1c03      	adds	r3, r0, #0
 80043cc:	613b      	str	r3, [r7, #16]

	eu_acc_est->roll = roll;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	601a      	str	r2, [r3, #0]
	eu_acc_est->pitch = pitch;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	605a      	str	r2, [r3, #4]
}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	46bd      	mov	sp, r7
 80043de:	b006      	add	sp, #24
 80043e0:	bdb0      	pop	{r4, r5, r7, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	1a63c1f8 	.word	0x1a63c1f8
 80043e8:	404ca5dc 	.word	0x404ca5dc

080043ec <MadgwickFilterXIO>:
	q->q4 = q4 * norm;
}

/* Credit to xio-technologies for open-source implementation https://github.com/xioTechnologies/Open-Source-AHRS-With-x-IMU*/
void MadgwickFilterXIO(float *gyro_data, float *accel_data, struct quaternion *q)
{
 80043ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ee:	b0a7      	sub	sp, #156	; 0x9c
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6178      	str	r0, [r7, #20]
 80043f4:	6139      	str	r1, [r7, #16]
 80043f6:	60fa      	str	r2, [r7, #12]
	float q1 = q->q1, q2 = q->q2, q3 = q->q3, q4 = q->q4;   // short name local variable for readability
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	268c      	movs	r6, #140	; 0x8c
 80043fe:	2108      	movs	r1, #8
 8004400:	187a      	adds	r2, r7, r1
 8004402:	1992      	adds	r2, r2, r6
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2488      	movs	r4, #136	; 0x88
 800440c:	187a      	adds	r2, r7, r1
 800440e:	1912      	adds	r2, r2, r4
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2584      	movs	r5, #132	; 0x84
 8004418:	187a      	adds	r2, r7, r1
 800441a:	1952      	adds	r2, r2, r5
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2680      	movs	r6, #128	; 0x80
 8004424:	1878      	adds	r0, r7, r1
 8004426:	1982      	adds	r2, r0, r6
 8004428:	6013      	str	r3, [r2, #0]
	float ax = accel_data[0], ay = accel_data[1], az = accel_data[2];
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2084      	movs	r0, #132	; 0x84
 8004430:	1838      	adds	r0, r7, r0
 8004432:	6003      	str	r3, [r0, #0]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2080      	movs	r0, #128	; 0x80
 800443a:	183a      	adds	r2, r7, r0
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	67fb      	str	r3, [r7, #124]	; 0x7c
	float gx = gyro_data[0]*DEG_2_RAD, gy = gyro_data[1]*DEG_2_RAD, gz = gyro_data[2]*DEG_2_RAD;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	1c18      	adds	r0, r3, #0
 800444a:	f7fe fd41 	bl	8002ed0 <__aeabi_f2d>
 800444e:	4afd      	ldr	r2, [pc, #1012]	; (8004844 <MadgwickFilterXIO+0x458>)
 8004450:	4bfd      	ldr	r3, [pc, #1012]	; (8004848 <MadgwickFilterXIO+0x45c>)
 8004452:	f7fd fe95 	bl	8002180 <__aeabi_dmul>
 8004456:	0002      	movs	r2, r0
 8004458:	000b      	movs	r3, r1
 800445a:	0010      	movs	r0, r2
 800445c:	0019      	movs	r1, r3
 800445e:	f7fe fd7f 	bl	8002f60 <__aeabi_d2f>
 8004462:	1c03      	adds	r3, r0, #0
 8004464:	67bb      	str	r3, [r7, #120]	; 0x78
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	3304      	adds	r3, #4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	1c18      	adds	r0, r3, #0
 800446e:	f7fe fd2f 	bl	8002ed0 <__aeabi_f2d>
 8004472:	4af4      	ldr	r2, [pc, #976]	; (8004844 <MadgwickFilterXIO+0x458>)
 8004474:	4bf4      	ldr	r3, [pc, #976]	; (8004848 <MadgwickFilterXIO+0x45c>)
 8004476:	f7fd fe83 	bl	8002180 <__aeabi_dmul>
 800447a:	0002      	movs	r2, r0
 800447c:	000b      	movs	r3, r1
 800447e:	0010      	movs	r0, r2
 8004480:	0019      	movs	r1, r3
 8004482:	f7fe fd6d 	bl	8002f60 <__aeabi_d2f>
 8004486:	1c03      	adds	r3, r0, #0
 8004488:	677b      	str	r3, [r7, #116]	; 0x74
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	3308      	adds	r3, #8
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	1c18      	adds	r0, r3, #0
 8004492:	f7fe fd1d 	bl	8002ed0 <__aeabi_f2d>
 8004496:	4aeb      	ldr	r2, [pc, #940]	; (8004844 <MadgwickFilterXIO+0x458>)
 8004498:	4beb      	ldr	r3, [pc, #940]	; (8004848 <MadgwickFilterXIO+0x45c>)
 800449a:	f7fd fe71 	bl	8002180 <__aeabi_dmul>
 800449e:	0002      	movs	r2, r0
 80044a0:	000b      	movs	r3, r1
 80044a2:	0010      	movs	r0, r2
 80044a4:	0019      	movs	r1, r3
 80044a6:	f7fe fd5b 	bl	8002f60 <__aeabi_d2f>
 80044aa:	1c03      	adds	r3, r0, #0
 80044ac:	673b      	str	r3, [r7, #112]	; 0x70
	float norm;
	float s1, s2, s3, s4;
	float qDot1, qDot2, qDot3, qDot4;

	// Auxiliary variables to avoid repeated arithmetic
	float _2q1 = 2.0 * q1;
 80044ae:	238c      	movs	r3, #140	; 0x8c
 80044b0:	2208      	movs	r2, #8
 80044b2:	18b9      	adds	r1, r7, r2
 80044b4:	18ca      	adds	r2, r1, r3
 80044b6:	6813      	ldr	r3, [r2, #0]
 80044b8:	1c19      	adds	r1, r3, #0
 80044ba:	1c18      	adds	r0, r3, #0
 80044bc:	f7fc f842 	bl	8000544 <__aeabi_fadd>
 80044c0:	1c03      	adds	r3, r0, #0
 80044c2:	66fb      	str	r3, [r7, #108]	; 0x6c
	float _2q2 = 2.0 * q2;
 80044c4:	2208      	movs	r2, #8
 80044c6:	18bb      	adds	r3, r7, r2
 80044c8:	191a      	adds	r2, r3, r4
 80044ca:	6813      	ldr	r3, [r2, #0]
 80044cc:	1c19      	adds	r1, r3, #0
 80044ce:	1c18      	adds	r0, r3, #0
 80044d0:	f7fc f838 	bl	8000544 <__aeabi_fadd>
 80044d4:	1c03      	adds	r3, r0, #0
 80044d6:	66bb      	str	r3, [r7, #104]	; 0x68
	float _2q3 = 2.0 * q3;
 80044d8:	2208      	movs	r2, #8
 80044da:	18bb      	adds	r3, r7, r2
 80044dc:	195a      	adds	r2, r3, r5
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	1c19      	adds	r1, r3, #0
 80044e2:	1c18      	adds	r0, r3, #0
 80044e4:	f7fc f82e 	bl	8000544 <__aeabi_fadd>
 80044e8:	1c03      	adds	r3, r0, #0
 80044ea:	667b      	str	r3, [r7, #100]	; 0x64
	float _2q4 = 2.0 * q4;
 80044ec:	2208      	movs	r2, #8
 80044ee:	18bb      	adds	r3, r7, r2
 80044f0:	1999      	adds	r1, r3, r6
 80044f2:	680b      	ldr	r3, [r1, #0]
 80044f4:	1c19      	adds	r1, r3, #0
 80044f6:	1c18      	adds	r0, r3, #0
 80044f8:	f7fc f824 	bl	8000544 <__aeabi_fadd>
 80044fc:	1c03      	adds	r3, r0, #0
 80044fe:	663b      	str	r3, [r7, #96]	; 0x60
	float _4q1 = 4.0 * q1;
 8004500:	2181      	movs	r1, #129	; 0x81
 8004502:	05c9      	lsls	r1, r1, #23
 8004504:	238c      	movs	r3, #140	; 0x8c
 8004506:	001e      	movs	r6, r3
 8004508:	2008      	movs	r0, #8
 800450a:	4684      	mov	ip, r0
 800450c:	44bc      	add	ip, r7
 800450e:	4463      	add	r3, ip
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	f7fc fb7d 	bl	8000c10 <__aeabi_fmul>
 8004516:	1c03      	adds	r3, r0, #0
 8004518:	65fb      	str	r3, [r7, #92]	; 0x5c
	float _4q2 = 4.0 * q2;
 800451a:	2181      	movs	r1, #129	; 0x81
 800451c:	05c9      	lsls	r1, r1, #23
 800451e:	2208      	movs	r2, #8
 8004520:	18bb      	adds	r3, r7, r2
 8004522:	191b      	adds	r3, r3, r4
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	f7fc fb73 	bl	8000c10 <__aeabi_fmul>
 800452a:	1c03      	adds	r3, r0, #0
 800452c:	65bb      	str	r3, [r7, #88]	; 0x58
	float _4q3 = 4.0 * q3;
 800452e:	2181      	movs	r1, #129	; 0x81
 8004530:	05c9      	lsls	r1, r1, #23
 8004532:	2208      	movs	r2, #8
 8004534:	18bb      	adds	r3, r7, r2
 8004536:	195b      	adds	r3, r3, r5
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f7fc fb69 	bl	8000c10 <__aeabi_fmul>
 800453e:	1c03      	adds	r3, r0, #0
 8004540:	657b      	str	r3, [r7, #84]	; 0x54
	float _8q2 = 8.0 * q2;
 8004542:	2182      	movs	r1, #130	; 0x82
 8004544:	05c9      	lsls	r1, r1, #23
 8004546:	2208      	movs	r2, #8
 8004548:	18bb      	adds	r3, r7, r2
 800454a:	191b      	adds	r3, r3, r4
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f7fc fb5f 	bl	8000c10 <__aeabi_fmul>
 8004552:	1c03      	adds	r3, r0, #0
 8004554:	653b      	str	r3, [r7, #80]	; 0x50
	float _8q3 = 8.0 * q3;
 8004556:	2182      	movs	r1, #130	; 0x82
 8004558:	05c9      	lsls	r1, r1, #23
 800455a:	2208      	movs	r2, #8
 800455c:	18bb      	adds	r3, r7, r2
 800455e:	195b      	adds	r3, r3, r5
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	f7fc fb55 	bl	8000c10 <__aeabi_fmul>
 8004566:	1c03      	adds	r3, r0, #0
 8004568:	64fb      	str	r3, [r7, #76]	; 0x4c
	float q1q1 = q1 * q1;
 800456a:	0033      	movs	r3, r6
 800456c:	2208      	movs	r2, #8
 800456e:	18b9      	adds	r1, r7, r2
 8004570:	18c9      	adds	r1, r1, r3
 8004572:	6809      	ldr	r1, [r1, #0]
 8004574:	18be      	adds	r6, r7, r2
 8004576:	18f0      	adds	r0, r6, r3
 8004578:	6800      	ldr	r0, [r0, #0]
 800457a:	f7fc fb49 	bl	8000c10 <__aeabi_fmul>
 800457e:	1c03      	adds	r3, r0, #0
 8004580:	64bb      	str	r3, [r7, #72]	; 0x48
	float q2q2 = q2 * q2;
 8004582:	0026      	movs	r6, r4
 8004584:	2308      	movs	r3, #8
 8004586:	18fa      	adds	r2, r7, r3
 8004588:	1991      	adds	r1, r2, r6
 800458a:	6809      	ldr	r1, [r1, #0]
 800458c:	18fa      	adds	r2, r7, r3
 800458e:	1994      	adds	r4, r2, r6
 8004590:	6820      	ldr	r0, [r4, #0]
 8004592:	f7fc fb3d 	bl	8000c10 <__aeabi_fmul>
 8004596:	1c03      	adds	r3, r0, #0
 8004598:	647b      	str	r3, [r7, #68]	; 0x44
	float q3q3 = q3 * q3;
 800459a:	2308      	movs	r3, #8
 800459c:	18fa      	adds	r2, r7, r3
 800459e:	1951      	adds	r1, r2, r5
 80045a0:	6809      	ldr	r1, [r1, #0]
 80045a2:	18fa      	adds	r2, r7, r3
 80045a4:	1954      	adds	r4, r2, r5
 80045a6:	6820      	ldr	r0, [r4, #0]
 80045a8:	f7fc fb32 	bl	8000c10 <__aeabi_fmul>
 80045ac:	1c03      	adds	r3, r0, #0
 80045ae:	643b      	str	r3, [r7, #64]	; 0x40
	float q4q4 = q4 * q4;
 80045b0:	2280      	movs	r2, #128	; 0x80
 80045b2:	2308      	movs	r3, #8
 80045b4:	18f9      	adds	r1, r7, r3
 80045b6:	1889      	adds	r1, r1, r2
 80045b8:	6809      	ldr	r1, [r1, #0]
 80045ba:	18fc      	adds	r4, r7, r3
 80045bc:	18a4      	adds	r4, r4, r2
 80045be:	6820      	ldr	r0, [r4, #0]
 80045c0:	f7fc fb26 	bl	8000c10 <__aeabi_fmul>
 80045c4:	1c03      	adds	r3, r0, #0
 80045c6:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 80045c8:	2484      	movs	r4, #132	; 0x84
 80045ca:	1939      	adds	r1, r7, r4
 80045cc:	6809      	ldr	r1, [r1, #0]
 80045ce:	1938      	adds	r0, r7, r4
 80045d0:	6800      	ldr	r0, [r0, #0]
 80045d2:	f7fc fb1d 	bl	8000c10 <__aeabi_fmul>
 80045d6:	1c03      	adds	r3, r0, #0
 80045d8:	1c1c      	adds	r4, r3, #0
 80045da:	2580      	movs	r5, #128	; 0x80
 80045dc:	1979      	adds	r1, r7, r5
 80045de:	6809      	ldr	r1, [r1, #0]
 80045e0:	1978      	adds	r0, r7, r5
 80045e2:	6800      	ldr	r0, [r0, #0]
 80045e4:	f7fc fb14 	bl	8000c10 <__aeabi_fmul>
 80045e8:	1c03      	adds	r3, r0, #0
 80045ea:	1c19      	adds	r1, r3, #0
 80045ec:	1c20      	adds	r0, r4, #0
 80045ee:	f7fb ffa9 	bl	8000544 <__aeabi_fadd>
 80045f2:	1c03      	adds	r3, r0, #0
 80045f4:	1c1c      	adds	r4, r3, #0
 80045f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045f8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80045fa:	f7fc fb09 	bl	8000c10 <__aeabi_fmul>
 80045fe:	1c03      	adds	r3, r0, #0
 8004600:	1c19      	adds	r1, r3, #0
 8004602:	1c20      	adds	r0, r4, #0
 8004604:	f7fb ff9e 	bl	8000544 <__aeabi_fadd>
 8004608:	1c03      	adds	r3, r0, #0
 800460a:	1c18      	adds	r0, r3, #0
 800460c:	f7fe fc60 	bl	8002ed0 <__aeabi_f2d>
 8004610:	0002      	movs	r2, r0
 8004612:	000b      	movs	r3, r1
 8004614:	0010      	movs	r0, r2
 8004616:	0019      	movs	r1, r3
 8004618:	f00b faa0 	bl	800fb5c <sqrt>
 800461c:	0002      	movs	r2, r0
 800461e:	000b      	movs	r3, r1
 8004620:	0010      	movs	r0, r2
 8004622:	0019      	movs	r1, r3
 8004624:	f7fe fc9c 	bl	8002f60 <__aeabi_d2f>
 8004628:	1c03      	adds	r3, r0, #0
 800462a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (norm == 0) return; // handle NaN
 800462c:	2100      	movs	r1, #0
 800462e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004630:	f7fb ff42 	bl	80004b8 <__aeabi_fcmpeq>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d001      	beq.n	800463c <MadgwickFilterXIO+0x250>
 8004638:	f000 fc8a 	bl	8004f50 <MadgwickFilterXIO+0xb64>
	norm = 1.0 / norm;        // use reciprocal for division
 800463c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800463e:	20fe      	movs	r0, #254	; 0xfe
 8004640:	0580      	lsls	r0, r0, #22
 8004642:	f7fc f91b 	bl	800087c <__aeabi_fdiv>
 8004646:	1c03      	adds	r3, r0, #0
 8004648:	63bb      	str	r3, [r7, #56]	; 0x38
	ax *= norm;
 800464a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800464c:	2484      	movs	r4, #132	; 0x84
 800464e:	1938      	adds	r0, r7, r4
 8004650:	6800      	ldr	r0, [r0, #0]
 8004652:	f7fc fadd 	bl	8000c10 <__aeabi_fmul>
 8004656:	1c03      	adds	r3, r0, #0
 8004658:	1939      	adds	r1, r7, r4
 800465a:	600b      	str	r3, [r1, #0]
	ay *= norm;
 800465c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800465e:	197a      	adds	r2, r7, r5
 8004660:	6810      	ldr	r0, [r2, #0]
 8004662:	f7fc fad5 	bl	8000c10 <__aeabi_fmul>
 8004666:	1c03      	adds	r3, r0, #0
 8004668:	1979      	adds	r1, r7, r5
 800466a:	600b      	str	r3, [r1, #0]
	az *= norm;
 800466c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800466e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004670:	f7fc face 	bl	8000c10 <__aeabi_fmul>
 8004674:	1c03      	adds	r3, r0, #0
 8004676:	67fb      	str	r3, [r7, #124]	; 0x7c

	// Gradient decent algorithm corrective step
	s1 = _4q1 * q3q3 + _2q3 * ax + _4q1 * q2q2 - _2q2 * ay;
 8004678:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800467a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800467c:	f7fc fac8 	bl	8000c10 <__aeabi_fmul>
 8004680:	1c03      	adds	r3, r0, #0
 8004682:	1c1c      	adds	r4, r3, #0
 8004684:	2084      	movs	r0, #132	; 0x84
 8004686:	1839      	adds	r1, r7, r0
 8004688:	6809      	ldr	r1, [r1, #0]
 800468a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800468c:	f7fc fac0 	bl	8000c10 <__aeabi_fmul>
 8004690:	1c03      	adds	r3, r0, #0
 8004692:	1c19      	adds	r1, r3, #0
 8004694:	1c20      	adds	r0, r4, #0
 8004696:	f7fb ff55 	bl	8000544 <__aeabi_fadd>
 800469a:	1c03      	adds	r3, r0, #0
 800469c:	1c1c      	adds	r4, r3, #0
 800469e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046a0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80046a2:	f7fc fab5 	bl	8000c10 <__aeabi_fmul>
 80046a6:	1c03      	adds	r3, r0, #0
 80046a8:	1c19      	adds	r1, r3, #0
 80046aa:	1c20      	adds	r0, r4, #0
 80046ac:	f7fb ff4a 	bl	8000544 <__aeabi_fadd>
 80046b0:	1c03      	adds	r3, r0, #0
 80046b2:	1c1c      	adds	r4, r3, #0
 80046b4:	197a      	adds	r2, r7, r5
 80046b6:	6811      	ldr	r1, [r2, #0]
 80046b8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80046ba:	f7fc faa9 	bl	8000c10 <__aeabi_fmul>
 80046be:	1c03      	adds	r3, r0, #0
 80046c0:	1c19      	adds	r1, r3, #0
 80046c2:	1c20      	adds	r0, r4, #0
 80046c4:	f7fc fbbe 	bl	8000e44 <__aeabi_fsub>
 80046c8:	1c03      	adds	r3, r0, #0
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
	s2 = _4q2 * q4q4 - _2q4 * ax + 4.0 * q1q1 * q2 - _2q1 * ay - _4q2 + _8q2 * q2q2 + _8q2 * q3q3 + _4q2 * az;
 80046cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80046d0:	f7fc fa9e 	bl	8000c10 <__aeabi_fmul>
 80046d4:	1c03      	adds	r3, r0, #0
 80046d6:	1c1c      	adds	r4, r3, #0
 80046d8:	2084      	movs	r0, #132	; 0x84
 80046da:	183a      	adds	r2, r7, r0
 80046dc:	6811      	ldr	r1, [r2, #0]
 80046de:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80046e0:	f7fc fa96 	bl	8000c10 <__aeabi_fmul>
 80046e4:	1c03      	adds	r3, r0, #0
 80046e6:	1c19      	adds	r1, r3, #0
 80046e8:	1c20      	adds	r0, r4, #0
 80046ea:	f7fc fbab 	bl	8000e44 <__aeabi_fsub>
 80046ee:	1c03      	adds	r3, r0, #0
 80046f0:	1c18      	adds	r0, r3, #0
 80046f2:	f7fe fbed 	bl	8002ed0 <__aeabi_f2d>
 80046f6:	0004      	movs	r4, r0
 80046f8:	000d      	movs	r5, r1
 80046fa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046fc:	f7fe fbe8 	bl	8002ed0 <__aeabi_f2d>
 8004700:	2200      	movs	r2, #0
 8004702:	4b52      	ldr	r3, [pc, #328]	; (800484c <MadgwickFilterXIO+0x460>)
 8004704:	f7fd fd3c 	bl	8002180 <__aeabi_dmul>
 8004708:	0002      	movs	r2, r0
 800470a:	000b      	movs	r3, r1
 800470c:	603a      	str	r2, [r7, #0]
 800470e:	607b      	str	r3, [r7, #4]
 8004710:	2208      	movs	r2, #8
 8004712:	18bb      	adds	r3, r7, r2
 8004714:	1999      	adds	r1, r3, r6
 8004716:	6808      	ldr	r0, [r1, #0]
 8004718:	f7fe fbda 	bl	8002ed0 <__aeabi_f2d>
 800471c:	0002      	movs	r2, r0
 800471e:	000b      	movs	r3, r1
 8004720:	6838      	ldr	r0, [r7, #0]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	f7fd fd2c 	bl	8002180 <__aeabi_dmul>
 8004728:	0002      	movs	r2, r0
 800472a:	000b      	movs	r3, r1
 800472c:	0020      	movs	r0, r4
 800472e:	0029      	movs	r1, r5
 8004730:	f7fc fdb6 	bl	80012a0 <__aeabi_dadd>
 8004734:	0002      	movs	r2, r0
 8004736:	000b      	movs	r3, r1
 8004738:	0014      	movs	r4, r2
 800473a:	001d      	movs	r5, r3
 800473c:	2180      	movs	r1, #128	; 0x80
 800473e:	187b      	adds	r3, r7, r1
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004744:	f7fc fa64 	bl	8000c10 <__aeabi_fmul>
 8004748:	1c03      	adds	r3, r0, #0
 800474a:	1c18      	adds	r0, r3, #0
 800474c:	f7fe fbc0 	bl	8002ed0 <__aeabi_f2d>
 8004750:	0002      	movs	r2, r0
 8004752:	000b      	movs	r3, r1
 8004754:	0020      	movs	r0, r4
 8004756:	0029      	movs	r1, r5
 8004758:	f7fd ff7e 	bl	8002658 <__aeabi_dsub>
 800475c:	0002      	movs	r2, r0
 800475e:	000b      	movs	r3, r1
 8004760:	0014      	movs	r4, r2
 8004762:	001d      	movs	r5, r3
 8004764:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004766:	f7fe fbb3 	bl	8002ed0 <__aeabi_f2d>
 800476a:	0002      	movs	r2, r0
 800476c:	000b      	movs	r3, r1
 800476e:	0020      	movs	r0, r4
 8004770:	0029      	movs	r1, r5
 8004772:	f7fd ff71 	bl	8002658 <__aeabi_dsub>
 8004776:	0002      	movs	r2, r0
 8004778:	000b      	movs	r3, r1
 800477a:	0014      	movs	r4, r2
 800477c:	001d      	movs	r5, r3
 800477e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004780:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004782:	f7fc fa45 	bl	8000c10 <__aeabi_fmul>
 8004786:	1c03      	adds	r3, r0, #0
 8004788:	1c18      	adds	r0, r3, #0
 800478a:	f7fe fba1 	bl	8002ed0 <__aeabi_f2d>
 800478e:	0002      	movs	r2, r0
 8004790:	000b      	movs	r3, r1
 8004792:	0020      	movs	r0, r4
 8004794:	0029      	movs	r1, r5
 8004796:	f7fc fd83 	bl	80012a0 <__aeabi_dadd>
 800479a:	0002      	movs	r2, r0
 800479c:	000b      	movs	r3, r1
 800479e:	0014      	movs	r4, r2
 80047a0:	001d      	movs	r5, r3
 80047a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047a4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80047a6:	f7fc fa33 	bl	8000c10 <__aeabi_fmul>
 80047aa:	1c03      	adds	r3, r0, #0
 80047ac:	1c18      	adds	r0, r3, #0
 80047ae:	f7fe fb8f 	bl	8002ed0 <__aeabi_f2d>
 80047b2:	0002      	movs	r2, r0
 80047b4:	000b      	movs	r3, r1
 80047b6:	0020      	movs	r0, r4
 80047b8:	0029      	movs	r1, r5
 80047ba:	f7fc fd71 	bl	80012a0 <__aeabi_dadd>
 80047be:	0002      	movs	r2, r0
 80047c0:	000b      	movs	r3, r1
 80047c2:	0014      	movs	r4, r2
 80047c4:	001d      	movs	r5, r3
 80047c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80047ca:	f7fc fa21 	bl	8000c10 <__aeabi_fmul>
 80047ce:	1c03      	adds	r3, r0, #0
 80047d0:	1c18      	adds	r0, r3, #0
 80047d2:	f7fe fb7d 	bl	8002ed0 <__aeabi_f2d>
 80047d6:	0002      	movs	r2, r0
 80047d8:	000b      	movs	r3, r1
 80047da:	0020      	movs	r0, r4
 80047dc:	0029      	movs	r1, r5
 80047de:	f7fc fd5f 	bl	80012a0 <__aeabi_dadd>
 80047e2:	0002      	movs	r2, r0
 80047e4:	000b      	movs	r3, r1
 80047e6:	0010      	movs	r0, r2
 80047e8:	0019      	movs	r1, r3
 80047ea:	f7fe fbb9 	bl	8002f60 <__aeabi_d2f>
 80047ee:	1c03      	adds	r3, r0, #0
 80047f0:	633b      	str	r3, [r7, #48]	; 0x30
	s3 = 4.0 * q1q1 * q3 + _2q1 * ax + _4q3 * q4q4 - _2q4 * ay - _4q3 + _8q3 * q2q2 + _8q3 * q3q3 + _4q3 * az;
 80047f2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80047f4:	f7fe fb6c 	bl	8002ed0 <__aeabi_f2d>
 80047f8:	2200      	movs	r2, #0
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <MadgwickFilterXIO+0x460>)
 80047fc:	f7fd fcc0 	bl	8002180 <__aeabi_dmul>
 8004800:	0002      	movs	r2, r0
 8004802:	000b      	movs	r3, r1
 8004804:	0014      	movs	r4, r2
 8004806:	001d      	movs	r5, r3
 8004808:	2384      	movs	r3, #132	; 0x84
 800480a:	2208      	movs	r2, #8
 800480c:	18ba      	adds	r2, r7, r2
 800480e:	18d1      	adds	r1, r2, r3
 8004810:	6808      	ldr	r0, [r1, #0]
 8004812:	f7fe fb5d 	bl	8002ed0 <__aeabi_f2d>
 8004816:	0002      	movs	r2, r0
 8004818:	000b      	movs	r3, r1
 800481a:	0020      	movs	r0, r4
 800481c:	0029      	movs	r1, r5
 800481e:	f7fd fcaf 	bl	8002180 <__aeabi_dmul>
 8004822:	0002      	movs	r2, r0
 8004824:	000b      	movs	r3, r1
 8004826:	0014      	movs	r4, r2
 8004828:	001d      	movs	r5, r3
 800482a:	2084      	movs	r0, #132	; 0x84
 800482c:	183b      	adds	r3, r7, r0
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004832:	f7fc f9ed 	bl	8000c10 <__aeabi_fmul>
 8004836:	1c03      	adds	r3, r0, #0
 8004838:	1c18      	adds	r0, r3, #0
 800483a:	f7fe fb49 	bl	8002ed0 <__aeabi_f2d>
 800483e:	0002      	movs	r2, r0
 8004840:	e006      	b.n	8004850 <MadgwickFilterXIO+0x464>
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	a2529d39 	.word	0xa2529d39
 8004848:	3f91df46 	.word	0x3f91df46
 800484c:	40100000 	.word	0x40100000
 8004850:	000b      	movs	r3, r1
 8004852:	0020      	movs	r0, r4
 8004854:	0029      	movs	r1, r5
 8004856:	f7fc fd23 	bl	80012a0 <__aeabi_dadd>
 800485a:	0002      	movs	r2, r0
 800485c:	000b      	movs	r3, r1
 800485e:	0014      	movs	r4, r2
 8004860:	001d      	movs	r5, r3
 8004862:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004864:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004866:	f7fc f9d3 	bl	8000c10 <__aeabi_fmul>
 800486a:	1c03      	adds	r3, r0, #0
 800486c:	1c18      	adds	r0, r3, #0
 800486e:	f7fe fb2f 	bl	8002ed0 <__aeabi_f2d>
 8004872:	0002      	movs	r2, r0
 8004874:	000b      	movs	r3, r1
 8004876:	0020      	movs	r0, r4
 8004878:	0029      	movs	r1, r5
 800487a:	f7fc fd11 	bl	80012a0 <__aeabi_dadd>
 800487e:	0002      	movs	r2, r0
 8004880:	000b      	movs	r3, r1
 8004882:	0014      	movs	r4, r2
 8004884:	001d      	movs	r5, r3
 8004886:	2180      	movs	r1, #128	; 0x80
 8004888:	1879      	adds	r1, r7, r1
 800488a:	6809      	ldr	r1, [r1, #0]
 800488c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800488e:	f7fc f9bf 	bl	8000c10 <__aeabi_fmul>
 8004892:	1c03      	adds	r3, r0, #0
 8004894:	1c18      	adds	r0, r3, #0
 8004896:	f7fe fb1b 	bl	8002ed0 <__aeabi_f2d>
 800489a:	0002      	movs	r2, r0
 800489c:	000b      	movs	r3, r1
 800489e:	0020      	movs	r0, r4
 80048a0:	0029      	movs	r1, r5
 80048a2:	f7fd fed9 	bl	8002658 <__aeabi_dsub>
 80048a6:	0002      	movs	r2, r0
 80048a8:	000b      	movs	r3, r1
 80048aa:	0014      	movs	r4, r2
 80048ac:	001d      	movs	r5, r3
 80048ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80048b0:	f7fe fb0e 	bl	8002ed0 <__aeabi_f2d>
 80048b4:	0002      	movs	r2, r0
 80048b6:	000b      	movs	r3, r1
 80048b8:	0020      	movs	r0, r4
 80048ba:	0029      	movs	r1, r5
 80048bc:	f7fd fecc 	bl	8002658 <__aeabi_dsub>
 80048c0:	0002      	movs	r2, r0
 80048c2:	000b      	movs	r3, r1
 80048c4:	0014      	movs	r4, r2
 80048c6:	001d      	movs	r5, r3
 80048c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80048cc:	f7fc f9a0 	bl	8000c10 <__aeabi_fmul>
 80048d0:	1c03      	adds	r3, r0, #0
 80048d2:	1c18      	adds	r0, r3, #0
 80048d4:	f7fe fafc 	bl	8002ed0 <__aeabi_f2d>
 80048d8:	0002      	movs	r2, r0
 80048da:	000b      	movs	r3, r1
 80048dc:	0020      	movs	r0, r4
 80048de:	0029      	movs	r1, r5
 80048e0:	f7fc fcde 	bl	80012a0 <__aeabi_dadd>
 80048e4:	0002      	movs	r2, r0
 80048e6:	000b      	movs	r3, r1
 80048e8:	0014      	movs	r4, r2
 80048ea:	001d      	movs	r5, r3
 80048ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80048f0:	f7fc f98e 	bl	8000c10 <__aeabi_fmul>
 80048f4:	1c03      	adds	r3, r0, #0
 80048f6:	1c18      	adds	r0, r3, #0
 80048f8:	f7fe faea 	bl	8002ed0 <__aeabi_f2d>
 80048fc:	0002      	movs	r2, r0
 80048fe:	000b      	movs	r3, r1
 8004900:	0020      	movs	r0, r4
 8004902:	0029      	movs	r1, r5
 8004904:	f7fc fccc 	bl	80012a0 <__aeabi_dadd>
 8004908:	0002      	movs	r2, r0
 800490a:	000b      	movs	r3, r1
 800490c:	0014      	movs	r4, r2
 800490e:	001d      	movs	r5, r3
 8004910:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004912:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004914:	f7fc f97c 	bl	8000c10 <__aeabi_fmul>
 8004918:	1c03      	adds	r3, r0, #0
 800491a:	1c18      	adds	r0, r3, #0
 800491c:	f7fe fad8 	bl	8002ed0 <__aeabi_f2d>
 8004920:	0002      	movs	r2, r0
 8004922:	000b      	movs	r3, r1
 8004924:	0020      	movs	r0, r4
 8004926:	0029      	movs	r1, r5
 8004928:	f7fc fcba 	bl	80012a0 <__aeabi_dadd>
 800492c:	0002      	movs	r2, r0
 800492e:	000b      	movs	r3, r1
 8004930:	0010      	movs	r0, r2
 8004932:	0019      	movs	r1, r3
 8004934:	f7fe fb14 	bl	8002f60 <__aeabi_d2f>
 8004938:	1c03      	adds	r3, r0, #0
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
	s4 = 4.0 * q2q2 * q4 - _2q2 * ax + 4.0 * q3q3 * q4 - _2q3 * ay;
 800493c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800493e:	f7fe fac7 	bl	8002ed0 <__aeabi_f2d>
 8004942:	2200      	movs	r2, #0
 8004944:	4bfd      	ldr	r3, [pc, #1012]	; (8004d3c <MadgwickFilterXIO+0x950>)
 8004946:	f7fd fc1b 	bl	8002180 <__aeabi_dmul>
 800494a:	0002      	movs	r2, r0
 800494c:	000b      	movs	r3, r1
 800494e:	0014      	movs	r4, r2
 8004950:	001d      	movs	r5, r3
 8004952:	2280      	movs	r2, #128	; 0x80
 8004954:	2308      	movs	r3, #8
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	1899      	adds	r1, r3, r2
 800495a:	6808      	ldr	r0, [r1, #0]
 800495c:	f7fe fab8 	bl	8002ed0 <__aeabi_f2d>
 8004960:	0002      	movs	r2, r0
 8004962:	000b      	movs	r3, r1
 8004964:	0020      	movs	r0, r4
 8004966:	0029      	movs	r1, r5
 8004968:	f7fd fc0a 	bl	8002180 <__aeabi_dmul>
 800496c:	0002      	movs	r2, r0
 800496e:	000b      	movs	r3, r1
 8004970:	0014      	movs	r4, r2
 8004972:	001d      	movs	r5, r3
 8004974:	2084      	movs	r0, #132	; 0x84
 8004976:	1838      	adds	r0, r7, r0
 8004978:	6801      	ldr	r1, [r0, #0]
 800497a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800497c:	f7fc f948 	bl	8000c10 <__aeabi_fmul>
 8004980:	1c03      	adds	r3, r0, #0
 8004982:	1c18      	adds	r0, r3, #0
 8004984:	f7fe faa4 	bl	8002ed0 <__aeabi_f2d>
 8004988:	0002      	movs	r2, r0
 800498a:	000b      	movs	r3, r1
 800498c:	0020      	movs	r0, r4
 800498e:	0029      	movs	r1, r5
 8004990:	f7fd fe62 	bl	8002658 <__aeabi_dsub>
 8004994:	0002      	movs	r2, r0
 8004996:	000b      	movs	r3, r1
 8004998:	0014      	movs	r4, r2
 800499a:	001d      	movs	r5, r3
 800499c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800499e:	f7fe fa97 	bl	8002ed0 <__aeabi_f2d>
 80049a2:	2200      	movs	r2, #0
 80049a4:	4be5      	ldr	r3, [pc, #916]	; (8004d3c <MadgwickFilterXIO+0x950>)
 80049a6:	f7fd fbeb 	bl	8002180 <__aeabi_dmul>
 80049aa:	0002      	movs	r2, r0
 80049ac:	000b      	movs	r3, r1
 80049ae:	603a      	str	r2, [r7, #0]
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	2180      	movs	r1, #128	; 0x80
 80049b4:	2008      	movs	r0, #8
 80049b6:	4684      	mov	ip, r0
 80049b8:	44bc      	add	ip, r7
 80049ba:	4461      	add	r1, ip
 80049bc:	6808      	ldr	r0, [r1, #0]
 80049be:	f7fe fa87 	bl	8002ed0 <__aeabi_f2d>
 80049c2:	0002      	movs	r2, r0
 80049c4:	000b      	movs	r3, r1
 80049c6:	6838      	ldr	r0, [r7, #0]
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	f7fd fbd9 	bl	8002180 <__aeabi_dmul>
 80049ce:	0002      	movs	r2, r0
 80049d0:	000b      	movs	r3, r1
 80049d2:	0020      	movs	r0, r4
 80049d4:	0029      	movs	r1, r5
 80049d6:	f7fc fc63 	bl	80012a0 <__aeabi_dadd>
 80049da:	0002      	movs	r2, r0
 80049dc:	000b      	movs	r3, r1
 80049de:	0014      	movs	r4, r2
 80049e0:	001d      	movs	r5, r3
 80049e2:	2280      	movs	r2, #128	; 0x80
 80049e4:	18ba      	adds	r2, r7, r2
 80049e6:	6811      	ldr	r1, [r2, #0]
 80049e8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80049ea:	f7fc f911 	bl	8000c10 <__aeabi_fmul>
 80049ee:	1c03      	adds	r3, r0, #0
 80049f0:	1c18      	adds	r0, r3, #0
 80049f2:	f7fe fa6d 	bl	8002ed0 <__aeabi_f2d>
 80049f6:	0002      	movs	r2, r0
 80049f8:	000b      	movs	r3, r1
 80049fa:	0020      	movs	r0, r4
 80049fc:	0029      	movs	r1, r5
 80049fe:	f7fd fe2b 	bl	8002658 <__aeabi_dsub>
 8004a02:	0002      	movs	r2, r0
 8004a04:	000b      	movs	r3, r1
 8004a06:	0010      	movs	r0, r2
 8004a08:	0019      	movs	r1, r3
 8004a0a:	f7fe faa9 	bl	8002f60 <__aeabi_d2f>
 8004a0e:	1c03      	adds	r3, r0, #0
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
	norm = 1.0 / sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8004a12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a16:	f7fc f8fb 	bl	8000c10 <__aeabi_fmul>
 8004a1a:	1c03      	adds	r3, r0, #0
 8004a1c:	1c1c      	adds	r4, r3, #0
 8004a1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a22:	f7fc f8f5 	bl	8000c10 <__aeabi_fmul>
 8004a26:	1c03      	adds	r3, r0, #0
 8004a28:	1c19      	adds	r1, r3, #0
 8004a2a:	1c20      	adds	r0, r4, #0
 8004a2c:	f7fb fd8a 	bl	8000544 <__aeabi_fadd>
 8004a30:	1c03      	adds	r3, r0, #0
 8004a32:	1c1c      	adds	r4, r3, #0
 8004a34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a38:	f7fc f8ea 	bl	8000c10 <__aeabi_fmul>
 8004a3c:	1c03      	adds	r3, r0, #0
 8004a3e:	1c19      	adds	r1, r3, #0
 8004a40:	1c20      	adds	r0, r4, #0
 8004a42:	f7fb fd7f 	bl	8000544 <__aeabi_fadd>
 8004a46:	1c03      	adds	r3, r0, #0
 8004a48:	1c1c      	adds	r4, r3, #0
 8004a4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a4e:	f7fc f8df 	bl	8000c10 <__aeabi_fmul>
 8004a52:	1c03      	adds	r3, r0, #0
 8004a54:	1c19      	adds	r1, r3, #0
 8004a56:	1c20      	adds	r0, r4, #0
 8004a58:	f7fb fd74 	bl	8000544 <__aeabi_fadd>
 8004a5c:	1c03      	adds	r3, r0, #0
 8004a5e:	1c18      	adds	r0, r3, #0
 8004a60:	f7fe fa36 	bl	8002ed0 <__aeabi_f2d>
 8004a64:	0002      	movs	r2, r0
 8004a66:	000b      	movs	r3, r1
 8004a68:	0010      	movs	r0, r2
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	f00b f876 	bl	800fb5c <sqrt>
 8004a70:	0002      	movs	r2, r0
 8004a72:	000b      	movs	r3, r1
 8004a74:	2000      	movs	r0, #0
 8004a76:	49b2      	ldr	r1, [pc, #712]	; (8004d40 <MadgwickFilterXIO+0x954>)
 8004a78:	f7fc ff7c 	bl	8001974 <__aeabi_ddiv>
 8004a7c:	0002      	movs	r2, r0
 8004a7e:	000b      	movs	r3, r1
 8004a80:	0010      	movs	r0, r2
 8004a82:	0019      	movs	r1, r3
 8004a84:	f7fe fa6c 	bl	8002f60 <__aeabi_d2f>
 8004a88:	1c03      	adds	r3, r0, #0
 8004a8a:	63bb      	str	r3, [r7, #56]	; 0x38
	s1 *= norm;
 8004a8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a90:	f7fc f8be 	bl	8000c10 <__aeabi_fmul>
 8004a94:	1c03      	adds	r3, r0, #0
 8004a96:	637b      	str	r3, [r7, #52]	; 0x34
	s2 *= norm;
 8004a98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a9c:	f7fc f8b8 	bl	8000c10 <__aeabi_fmul>
 8004aa0:	1c03      	adds	r3, r0, #0
 8004aa2:	633b      	str	r3, [r7, #48]	; 0x30
	s3 *= norm;
 8004aa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004aa8:	f7fc f8b2 	bl	8000c10 <__aeabi_fmul>
 8004aac:	1c03      	adds	r3, r0, #0
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	s4 *= norm;
 8004ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab4:	f7fc f8ac 	bl	8000c10 <__aeabi_fmul>
 8004ab8:	1c03      	adds	r3, r0, #0
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28

	// Compute rate of change of quaternion
	qDot1 = 0.5 * (-q2 * gx - q3 * gy - q4 * gz) - Beta * s1;
 8004abc:	2508      	movs	r5, #8
 8004abe:	197b      	adds	r3, r7, r5
 8004ac0:	199c      	adds	r4, r3, r6
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	2280      	movs	r2, #128	; 0x80
 8004ac6:	0612      	lsls	r2, r2, #24
 8004ac8:	4053      	eors	r3, r2
 8004aca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004acc:	1c18      	adds	r0, r3, #0
 8004ace:	f7fc f89f 	bl	8000c10 <__aeabi_fmul>
 8004ad2:	1c03      	adds	r3, r0, #0
 8004ad4:	1c1c      	adds	r4, r3, #0
 8004ad6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004ad8:	2384      	movs	r3, #132	; 0x84
 8004ada:	197a      	adds	r2, r7, r5
 8004adc:	18d5      	adds	r5, r2, r3
 8004ade:	6828      	ldr	r0, [r5, #0]
 8004ae0:	f7fc f896 	bl	8000c10 <__aeabi_fmul>
 8004ae4:	1c03      	adds	r3, r0, #0
 8004ae6:	1c19      	adds	r1, r3, #0
 8004ae8:	1c20      	adds	r0, r4, #0
 8004aea:	f7fc f9ab 	bl	8000e44 <__aeabi_fsub>
 8004aee:	1c03      	adds	r3, r0, #0
 8004af0:	1c1c      	adds	r4, r3, #0
 8004af2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004af4:	2280      	movs	r2, #128	; 0x80
 8004af6:	2508      	movs	r5, #8
 8004af8:	197b      	adds	r3, r7, r5
 8004afa:	189d      	adds	r5, r3, r2
 8004afc:	6828      	ldr	r0, [r5, #0]
 8004afe:	f7fc f887 	bl	8000c10 <__aeabi_fmul>
 8004b02:	1c03      	adds	r3, r0, #0
 8004b04:	1c19      	adds	r1, r3, #0
 8004b06:	1c20      	adds	r0, r4, #0
 8004b08:	f7fc f99c 	bl	8000e44 <__aeabi_fsub>
 8004b0c:	1c03      	adds	r3, r0, #0
 8004b0e:	1c18      	adds	r0, r3, #0
 8004b10:	f7fe f9de 	bl	8002ed0 <__aeabi_f2d>
 8004b14:	2200      	movs	r2, #0
 8004b16:	4b8b      	ldr	r3, [pc, #556]	; (8004d44 <MadgwickFilterXIO+0x958>)
 8004b18:	f7fd fb32 	bl	8002180 <__aeabi_dmul>
 8004b1c:	0002      	movs	r2, r0
 8004b1e:	000b      	movs	r3, r1
 8004b20:	0014      	movs	r4, r2
 8004b22:	001d      	movs	r5, r3
 8004b24:	4b88      	ldr	r3, [pc, #544]	; (8004d48 <MadgwickFilterXIO+0x95c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b2a:	1c18      	adds	r0, r3, #0
 8004b2c:	f7fc f870 	bl	8000c10 <__aeabi_fmul>
 8004b30:	1c03      	adds	r3, r0, #0
 8004b32:	1c18      	adds	r0, r3, #0
 8004b34:	f7fe f9cc 	bl	8002ed0 <__aeabi_f2d>
 8004b38:	0002      	movs	r2, r0
 8004b3a:	000b      	movs	r3, r1
 8004b3c:	0020      	movs	r0, r4
 8004b3e:	0029      	movs	r1, r5
 8004b40:	f7fd fd8a 	bl	8002658 <__aeabi_dsub>
 8004b44:	0002      	movs	r2, r0
 8004b46:	000b      	movs	r3, r1
 8004b48:	0010      	movs	r0, r2
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	f7fe fa08 	bl	8002f60 <__aeabi_d2f>
 8004b50:	1c03      	adds	r3, r0, #0
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
	qDot2 = 0.5 * (q1 * gx + q3 * gz - q4 * gy) - Beta * s2;
 8004b54:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004b56:	208c      	movs	r0, #140	; 0x8c
 8004b58:	2508      	movs	r5, #8
 8004b5a:	197b      	adds	r3, r7, r5
 8004b5c:	181c      	adds	r4, r3, r0
 8004b5e:	6820      	ldr	r0, [r4, #0]
 8004b60:	f7fc f856 	bl	8000c10 <__aeabi_fmul>
 8004b64:	1c03      	adds	r3, r0, #0
 8004b66:	1c1c      	adds	r4, r3, #0
 8004b68:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004b6a:	2384      	movs	r3, #132	; 0x84
 8004b6c:	197a      	adds	r2, r7, r5
 8004b6e:	18d5      	adds	r5, r2, r3
 8004b70:	6828      	ldr	r0, [r5, #0]
 8004b72:	f7fc f84d 	bl	8000c10 <__aeabi_fmul>
 8004b76:	1c03      	adds	r3, r0, #0
 8004b78:	1c19      	adds	r1, r3, #0
 8004b7a:	1c20      	adds	r0, r4, #0
 8004b7c:	f7fb fce2 	bl	8000544 <__aeabi_fadd>
 8004b80:	1c03      	adds	r3, r0, #0
 8004b82:	1c1c      	adds	r4, r3, #0
 8004b84:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004b86:	2280      	movs	r2, #128	; 0x80
 8004b88:	2508      	movs	r5, #8
 8004b8a:	197b      	adds	r3, r7, r5
 8004b8c:	189d      	adds	r5, r3, r2
 8004b8e:	6828      	ldr	r0, [r5, #0]
 8004b90:	f7fc f83e 	bl	8000c10 <__aeabi_fmul>
 8004b94:	1c03      	adds	r3, r0, #0
 8004b96:	1c19      	adds	r1, r3, #0
 8004b98:	1c20      	adds	r0, r4, #0
 8004b9a:	f7fc f953 	bl	8000e44 <__aeabi_fsub>
 8004b9e:	1c03      	adds	r3, r0, #0
 8004ba0:	1c18      	adds	r0, r3, #0
 8004ba2:	f7fe f995 	bl	8002ed0 <__aeabi_f2d>
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	4b66      	ldr	r3, [pc, #408]	; (8004d44 <MadgwickFilterXIO+0x958>)
 8004baa:	f7fd fae9 	bl	8002180 <__aeabi_dmul>
 8004bae:	0002      	movs	r2, r0
 8004bb0:	000b      	movs	r3, r1
 8004bb2:	0014      	movs	r4, r2
 8004bb4:	001d      	movs	r5, r3
 8004bb6:	4b64      	ldr	r3, [pc, #400]	; (8004d48 <MadgwickFilterXIO+0x95c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bbc:	1c18      	adds	r0, r3, #0
 8004bbe:	f7fc f827 	bl	8000c10 <__aeabi_fmul>
 8004bc2:	1c03      	adds	r3, r0, #0
 8004bc4:	1c18      	adds	r0, r3, #0
 8004bc6:	f7fe f983 	bl	8002ed0 <__aeabi_f2d>
 8004bca:	0002      	movs	r2, r0
 8004bcc:	000b      	movs	r3, r1
 8004bce:	0020      	movs	r0, r4
 8004bd0:	0029      	movs	r1, r5
 8004bd2:	f7fd fd41 	bl	8002658 <__aeabi_dsub>
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	000b      	movs	r3, r1
 8004bda:	0010      	movs	r0, r2
 8004bdc:	0019      	movs	r1, r3
 8004bde:	f7fe f9bf 	bl	8002f60 <__aeabi_d2f>
 8004be2:	1c03      	adds	r3, r0, #0
 8004be4:	623b      	str	r3, [r7, #32]
	qDot3 = 0.5 * (q1 * gy - q2 * gz + q4 * gx) - Beta * s3;
 8004be6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004be8:	208c      	movs	r0, #140	; 0x8c
 8004bea:	2508      	movs	r5, #8
 8004bec:	197b      	adds	r3, r7, r5
 8004bee:	181c      	adds	r4, r3, r0
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	f7fc f80d 	bl	8000c10 <__aeabi_fmul>
 8004bf6:	1c03      	adds	r3, r0, #0
 8004bf8:	1c1c      	adds	r4, r3, #0
 8004bfa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004bfc:	197b      	adds	r3, r7, r5
 8004bfe:	199d      	adds	r5, r3, r6
 8004c00:	6828      	ldr	r0, [r5, #0]
 8004c02:	f7fc f805 	bl	8000c10 <__aeabi_fmul>
 8004c06:	1c03      	adds	r3, r0, #0
 8004c08:	1c19      	adds	r1, r3, #0
 8004c0a:	1c20      	adds	r0, r4, #0
 8004c0c:	f7fc f91a 	bl	8000e44 <__aeabi_fsub>
 8004c10:	1c03      	adds	r3, r0, #0
 8004c12:	1c1c      	adds	r4, r3, #0
 8004c14:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004c16:	2280      	movs	r2, #128	; 0x80
 8004c18:	2508      	movs	r5, #8
 8004c1a:	197b      	adds	r3, r7, r5
 8004c1c:	189d      	adds	r5, r3, r2
 8004c1e:	6828      	ldr	r0, [r5, #0]
 8004c20:	f7fb fff6 	bl	8000c10 <__aeabi_fmul>
 8004c24:	1c03      	adds	r3, r0, #0
 8004c26:	1c19      	adds	r1, r3, #0
 8004c28:	1c20      	adds	r0, r4, #0
 8004c2a:	f7fb fc8b 	bl	8000544 <__aeabi_fadd>
 8004c2e:	1c03      	adds	r3, r0, #0
 8004c30:	1c18      	adds	r0, r3, #0
 8004c32:	f7fe f94d 	bl	8002ed0 <__aeabi_f2d>
 8004c36:	2200      	movs	r2, #0
 8004c38:	4b42      	ldr	r3, [pc, #264]	; (8004d44 <MadgwickFilterXIO+0x958>)
 8004c3a:	f7fd faa1 	bl	8002180 <__aeabi_dmul>
 8004c3e:	0002      	movs	r2, r0
 8004c40:	000b      	movs	r3, r1
 8004c42:	0014      	movs	r4, r2
 8004c44:	001d      	movs	r5, r3
 8004c46:	4b40      	ldr	r3, [pc, #256]	; (8004d48 <MadgwickFilterXIO+0x95c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c4c:	1c18      	adds	r0, r3, #0
 8004c4e:	f7fb ffdf 	bl	8000c10 <__aeabi_fmul>
 8004c52:	1c03      	adds	r3, r0, #0
 8004c54:	1c18      	adds	r0, r3, #0
 8004c56:	f7fe f93b 	bl	8002ed0 <__aeabi_f2d>
 8004c5a:	0002      	movs	r2, r0
 8004c5c:	000b      	movs	r3, r1
 8004c5e:	0020      	movs	r0, r4
 8004c60:	0029      	movs	r1, r5
 8004c62:	f7fd fcf9 	bl	8002658 <__aeabi_dsub>
 8004c66:	0002      	movs	r2, r0
 8004c68:	000b      	movs	r3, r1
 8004c6a:	0010      	movs	r0, r2
 8004c6c:	0019      	movs	r1, r3
 8004c6e:	f7fe f977 	bl	8002f60 <__aeabi_d2f>
 8004c72:	1c03      	adds	r3, r0, #0
 8004c74:	61fb      	str	r3, [r7, #28]
	qDot4 = 0.5 * (q1 * gz + q2 * gy - q3 * gx) - Beta * s4;
 8004c76:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004c78:	208c      	movs	r0, #140	; 0x8c
 8004c7a:	2508      	movs	r5, #8
 8004c7c:	197b      	adds	r3, r7, r5
 8004c7e:	181c      	adds	r4, r3, r0
 8004c80:	6820      	ldr	r0, [r4, #0]
 8004c82:	f7fb ffc5 	bl	8000c10 <__aeabi_fmul>
 8004c86:	1c03      	adds	r3, r0, #0
 8004c88:	1c1c      	adds	r4, r3, #0
 8004c8a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004c8c:	197b      	adds	r3, r7, r5
 8004c8e:	199d      	adds	r5, r3, r6
 8004c90:	6828      	ldr	r0, [r5, #0]
 8004c92:	f7fb ffbd 	bl	8000c10 <__aeabi_fmul>
 8004c96:	1c03      	adds	r3, r0, #0
 8004c98:	1c19      	adds	r1, r3, #0
 8004c9a:	1c20      	adds	r0, r4, #0
 8004c9c:	f7fb fc52 	bl	8000544 <__aeabi_fadd>
 8004ca0:	1c03      	adds	r3, r0, #0
 8004ca2:	1c1c      	adds	r4, r3, #0
 8004ca4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004ca6:	2384      	movs	r3, #132	; 0x84
 8004ca8:	2208      	movs	r2, #8
 8004caa:	18b8      	adds	r0, r7, r2
 8004cac:	18c5      	adds	r5, r0, r3
 8004cae:	6828      	ldr	r0, [r5, #0]
 8004cb0:	f7fb ffae 	bl	8000c10 <__aeabi_fmul>
 8004cb4:	1c03      	adds	r3, r0, #0
 8004cb6:	1c19      	adds	r1, r3, #0
 8004cb8:	1c20      	adds	r0, r4, #0
 8004cba:	f7fc f8c3 	bl	8000e44 <__aeabi_fsub>
 8004cbe:	1c03      	adds	r3, r0, #0
 8004cc0:	1c18      	adds	r0, r3, #0
 8004cc2:	f7fe f905 	bl	8002ed0 <__aeabi_f2d>
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <MadgwickFilterXIO+0x958>)
 8004cca:	f7fd fa59 	bl	8002180 <__aeabi_dmul>
 8004cce:	0002      	movs	r2, r0
 8004cd0:	000b      	movs	r3, r1
 8004cd2:	0014      	movs	r4, r2
 8004cd4:	001d      	movs	r5, r3
 8004cd6:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <MadgwickFilterXIO+0x95c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cdc:	1c18      	adds	r0, r3, #0
 8004cde:	f7fb ff97 	bl	8000c10 <__aeabi_fmul>
 8004ce2:	1c03      	adds	r3, r0, #0
 8004ce4:	1c18      	adds	r0, r3, #0
 8004ce6:	f7fe f8f3 	bl	8002ed0 <__aeabi_f2d>
 8004cea:	0002      	movs	r2, r0
 8004cec:	000b      	movs	r3, r1
 8004cee:	0020      	movs	r0, r4
 8004cf0:	0029      	movs	r1, r5
 8004cf2:	f7fd fcb1 	bl	8002658 <__aeabi_dsub>
 8004cf6:	0002      	movs	r2, r0
 8004cf8:	000b      	movs	r3, r1
 8004cfa:	0010      	movs	r0, r2
 8004cfc:	0019      	movs	r1, r3
 8004cfe:	f7fe f92f 	bl	8002f60 <__aeabi_d2f>
 8004d02:	1c03      	adds	r3, r0, #0
 8004d04:	61bb      	str	r3, [r7, #24]

	// Integrate to yield quaternion
	q1 += qDot1 * SAMPLE_TIME_ICM/1000.0;
 8004d06:	208c      	movs	r0, #140	; 0x8c
 8004d08:	2208      	movs	r2, #8
 8004d0a:	18bb      	adds	r3, r7, r2
 8004d0c:	1819      	adds	r1, r3, r0
 8004d0e:	6808      	ldr	r0, [r1, #0]
 8004d10:	f7fe f8de 	bl	8002ed0 <__aeabi_f2d>
 8004d14:	0004      	movs	r4, r0
 8004d16:	000d      	movs	r5, r1
 8004d18:	490c      	ldr	r1, [pc, #48]	; (8004d4c <MadgwickFilterXIO+0x960>)
 8004d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d1c:	f7fb ff78 	bl	8000c10 <__aeabi_fmul>
 8004d20:	1c03      	adds	r3, r0, #0
 8004d22:	1c18      	adds	r0, r3, #0
 8004d24:	f7fe f8d4 	bl	8002ed0 <__aeabi_f2d>
 8004d28:	2200      	movs	r2, #0
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <MadgwickFilterXIO+0x964>)
 8004d2c:	f7fc fe22 	bl	8001974 <__aeabi_ddiv>
 8004d30:	0002      	movs	r2, r0
 8004d32:	000b      	movs	r3, r1
 8004d34:	0020      	movs	r0, r4
 8004d36:	0029      	movs	r1, r5
 8004d38:	e00c      	b.n	8004d54 <MadgwickFilterXIO+0x968>
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	40100000 	.word	0x40100000
 8004d40:	3ff00000 	.word	0x3ff00000
 8004d44:	3fe00000 	.word	0x3fe00000
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	41f00000 	.word	0x41f00000
 8004d50:	408f4000 	.word	0x408f4000
 8004d54:	f7fc faa4 	bl	80012a0 <__aeabi_dadd>
 8004d58:	0002      	movs	r2, r0
 8004d5a:	000b      	movs	r3, r1
 8004d5c:	0010      	movs	r0, r2
 8004d5e:	0019      	movs	r1, r3
 8004d60:	f7fe f8fe 	bl	8002f60 <__aeabi_d2f>
 8004d64:	1c03      	adds	r3, r0, #0
 8004d66:	208c      	movs	r0, #140	; 0x8c
 8004d68:	2208      	movs	r2, #8
 8004d6a:	18b9      	adds	r1, r7, r2
 8004d6c:	1809      	adds	r1, r1, r0
 8004d6e:	600b      	str	r3, [r1, #0]
	q2 += qDot2 * SAMPLE_TIME_ICM/1000.0;
 8004d70:	18bb      	adds	r3, r7, r2
 8004d72:	1999      	adds	r1, r3, r6
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	f7fe f8ab 	bl	8002ed0 <__aeabi_f2d>
 8004d7a:	0004      	movs	r4, r0
 8004d7c:	000d      	movs	r5, r1
 8004d7e:	4976      	ldr	r1, [pc, #472]	; (8004f58 <MadgwickFilterXIO+0xb6c>)
 8004d80:	6a38      	ldr	r0, [r7, #32]
 8004d82:	f7fb ff45 	bl	8000c10 <__aeabi_fmul>
 8004d86:	1c03      	adds	r3, r0, #0
 8004d88:	1c18      	adds	r0, r3, #0
 8004d8a:	f7fe f8a1 	bl	8002ed0 <__aeabi_f2d>
 8004d8e:	2200      	movs	r2, #0
 8004d90:	4b72      	ldr	r3, [pc, #456]	; (8004f5c <MadgwickFilterXIO+0xb70>)
 8004d92:	f7fc fdef 	bl	8001974 <__aeabi_ddiv>
 8004d96:	0002      	movs	r2, r0
 8004d98:	000b      	movs	r3, r1
 8004d9a:	0020      	movs	r0, r4
 8004d9c:	0029      	movs	r1, r5
 8004d9e:	f7fc fa7f 	bl	80012a0 <__aeabi_dadd>
 8004da2:	0002      	movs	r2, r0
 8004da4:	000b      	movs	r3, r1
 8004da6:	0010      	movs	r0, r2
 8004da8:	0019      	movs	r1, r3
 8004daa:	f7fe f8d9 	bl	8002f60 <__aeabi_d2f>
 8004dae:	1c03      	adds	r3, r0, #0
 8004db0:	2008      	movs	r0, #8
 8004db2:	183a      	adds	r2, r7, r0
 8004db4:	1991      	adds	r1, r2, r6
 8004db6:	600b      	str	r3, [r1, #0]
	q3 += qDot3 * SAMPLE_TIME_ICM/1000.0;
 8004db8:	2384      	movs	r3, #132	; 0x84
 8004dba:	183a      	adds	r2, r7, r0
 8004dbc:	18d1      	adds	r1, r2, r3
 8004dbe:	6808      	ldr	r0, [r1, #0]
 8004dc0:	f7fe f886 	bl	8002ed0 <__aeabi_f2d>
 8004dc4:	0004      	movs	r4, r0
 8004dc6:	000d      	movs	r5, r1
 8004dc8:	4963      	ldr	r1, [pc, #396]	; (8004f58 <MadgwickFilterXIO+0xb6c>)
 8004dca:	69f8      	ldr	r0, [r7, #28]
 8004dcc:	f7fb ff20 	bl	8000c10 <__aeabi_fmul>
 8004dd0:	1c03      	adds	r3, r0, #0
 8004dd2:	1c18      	adds	r0, r3, #0
 8004dd4:	f7fe f87c 	bl	8002ed0 <__aeabi_f2d>
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <MadgwickFilterXIO+0xb70>)
 8004ddc:	f7fc fdca 	bl	8001974 <__aeabi_ddiv>
 8004de0:	0002      	movs	r2, r0
 8004de2:	000b      	movs	r3, r1
 8004de4:	0020      	movs	r0, r4
 8004de6:	0029      	movs	r1, r5
 8004de8:	f7fc fa5a 	bl	80012a0 <__aeabi_dadd>
 8004dec:	0002      	movs	r2, r0
 8004dee:	000b      	movs	r3, r1
 8004df0:	0010      	movs	r0, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	f7fe f8b4 	bl	8002f60 <__aeabi_d2f>
 8004df8:	1c03      	adds	r3, r0, #0
 8004dfa:	2584      	movs	r5, #132	; 0x84
 8004dfc:	2008      	movs	r0, #8
 8004dfe:	183a      	adds	r2, r7, r0
 8004e00:	1951      	adds	r1, r2, r5
 8004e02:	600b      	str	r3, [r1, #0]
	q4 += qDot4 * SAMPLE_TIME_ICM/1000.0;
 8004e04:	2280      	movs	r2, #128	; 0x80
 8004e06:	183b      	adds	r3, r7, r0
 8004e08:	1899      	adds	r1, r3, r2
 8004e0a:	6808      	ldr	r0, [r1, #0]
 8004e0c:	f7fe f860 	bl	8002ed0 <__aeabi_f2d>
 8004e10:	0004      	movs	r4, r0
 8004e12:	000d      	movs	r5, r1
 8004e14:	4950      	ldr	r1, [pc, #320]	; (8004f58 <MadgwickFilterXIO+0xb6c>)
 8004e16:	69b8      	ldr	r0, [r7, #24]
 8004e18:	f7fb fefa 	bl	8000c10 <__aeabi_fmul>
 8004e1c:	1c03      	adds	r3, r0, #0
 8004e1e:	1c18      	adds	r0, r3, #0
 8004e20:	f7fe f856 	bl	8002ed0 <__aeabi_f2d>
 8004e24:	2200      	movs	r2, #0
 8004e26:	4b4d      	ldr	r3, [pc, #308]	; (8004f5c <MadgwickFilterXIO+0xb70>)
 8004e28:	f7fc fda4 	bl	8001974 <__aeabi_ddiv>
 8004e2c:	0002      	movs	r2, r0
 8004e2e:	000b      	movs	r3, r1
 8004e30:	0020      	movs	r0, r4
 8004e32:	0029      	movs	r1, r5
 8004e34:	f7fc fa34 	bl	80012a0 <__aeabi_dadd>
 8004e38:	0002      	movs	r2, r0
 8004e3a:	000b      	movs	r3, r1
 8004e3c:	0010      	movs	r0, r2
 8004e3e:	0019      	movs	r1, r3
 8004e40:	f7fe f88e 	bl	8002f60 <__aeabi_d2f>
 8004e44:	1c03      	adds	r3, r0, #0
 8004e46:	2280      	movs	r2, #128	; 0x80
 8004e48:	2508      	movs	r5, #8
 8004e4a:	1979      	adds	r1, r7, r5
 8004e4c:	1889      	adds	r1, r1, r2
 8004e4e:	600b      	str	r3, [r1, #0]

	norm = 1 / (float) sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8004e50:	208c      	movs	r0, #140	; 0x8c
 8004e52:	197b      	adds	r3, r7, r5
 8004e54:	1819      	adds	r1, r3, r0
 8004e56:	6809      	ldr	r1, [r1, #0]
 8004e58:	197b      	adds	r3, r7, r5
 8004e5a:	181c      	adds	r4, r3, r0
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	f7fb fed7 	bl	8000c10 <__aeabi_fmul>
 8004e62:	1c03      	adds	r3, r0, #0
 8004e64:	1c1c      	adds	r4, r3, #0
 8004e66:	197b      	adds	r3, r7, r5
 8004e68:	1999      	adds	r1, r3, r6
 8004e6a:	6809      	ldr	r1, [r1, #0]
 8004e6c:	197b      	adds	r3, r7, r5
 8004e6e:	199a      	adds	r2, r3, r6
 8004e70:	6810      	ldr	r0, [r2, #0]
 8004e72:	f7fb fecd 	bl	8000c10 <__aeabi_fmul>
 8004e76:	1c03      	adds	r3, r0, #0
 8004e78:	1c19      	adds	r1, r3, #0
 8004e7a:	1c20      	adds	r0, r4, #0
 8004e7c:	f7fb fb62 	bl	8000544 <__aeabi_fadd>
 8004e80:	1c03      	adds	r3, r0, #0
 8004e82:	1c1c      	adds	r4, r3, #0
 8004e84:	2584      	movs	r5, #132	; 0x84
 8004e86:	2008      	movs	r0, #8
 8004e88:	183b      	adds	r3, r7, r0
 8004e8a:	1959      	adds	r1, r3, r5
 8004e8c:	6809      	ldr	r1, [r1, #0]
 8004e8e:	183b      	adds	r3, r7, r0
 8004e90:	195a      	adds	r2, r3, r5
 8004e92:	6810      	ldr	r0, [r2, #0]
 8004e94:	f7fb febc 	bl	8000c10 <__aeabi_fmul>
 8004e98:	1c03      	adds	r3, r0, #0
 8004e9a:	1c19      	adds	r1, r3, #0
 8004e9c:	1c20      	adds	r0, r4, #0
 8004e9e:	f7fb fb51 	bl	8000544 <__aeabi_fadd>
 8004ea2:	1c03      	adds	r3, r0, #0
 8004ea4:	1c1c      	adds	r4, r3, #0
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	2008      	movs	r0, #8
 8004eaa:	183a      	adds	r2, r7, r0
 8004eac:	18d2      	adds	r2, r2, r3
 8004eae:	6811      	ldr	r1, [r2, #0]
 8004eb0:	183a      	adds	r2, r7, r0
 8004eb2:	18d2      	adds	r2, r2, r3
 8004eb4:	6810      	ldr	r0, [r2, #0]
 8004eb6:	f7fb feab 	bl	8000c10 <__aeabi_fmul>
 8004eba:	1c03      	adds	r3, r0, #0
 8004ebc:	1c19      	adds	r1, r3, #0
 8004ebe:	1c20      	adds	r0, r4, #0
 8004ec0:	f7fb fb40 	bl	8000544 <__aeabi_fadd>
 8004ec4:	1c03      	adds	r3, r0, #0
 8004ec6:	1c18      	adds	r0, r3, #0
 8004ec8:	f7fe f802 	bl	8002ed0 <__aeabi_f2d>
 8004ecc:	0002      	movs	r2, r0
 8004ece:	000b      	movs	r3, r1
 8004ed0:	0010      	movs	r0, r2
 8004ed2:	0019      	movs	r1, r3
 8004ed4:	f00a fe42 	bl	800fb5c <sqrt>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	000b      	movs	r3, r1
 8004edc:	0010      	movs	r0, r2
 8004ede:	0019      	movs	r1, r3
 8004ee0:	f7fe f83e 	bl	8002f60 <__aeabi_d2f>
 8004ee4:	1c03      	adds	r3, r0, #0
 8004ee6:	1c19      	adds	r1, r3, #0
 8004ee8:	20fe      	movs	r0, #254	; 0xfe
 8004eea:	0580      	lsls	r0, r0, #22
 8004eec:	f7fb fcc6 	bl	800087c <__aeabi_fdiv>
 8004ef0:	1c03      	adds	r3, r0, #0
 8004ef2:	63bb      	str	r3, [r7, #56]	; 0x38
	q->q1 = q1 * norm;
 8004ef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ef6:	208c      	movs	r0, #140	; 0x8c
 8004ef8:	2408      	movs	r4, #8
 8004efa:	193b      	adds	r3, r7, r4
 8004efc:	181a      	adds	r2, r3, r0
 8004efe:	6810      	ldr	r0, [r2, #0]
 8004f00:	f7fb fe86 	bl	8000c10 <__aeabi_fmul>
 8004f04:	1c03      	adds	r3, r0, #0
 8004f06:	1c1a      	adds	r2, r3, #0
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	601a      	str	r2, [r3, #0]
	q->q2 = q2 * norm;
 8004f0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f0e:	193b      	adds	r3, r7, r4
 8004f10:	199a      	adds	r2, r3, r6
 8004f12:	6810      	ldr	r0, [r2, #0]
 8004f14:	f7fb fe7c 	bl	8000c10 <__aeabi_fmul>
 8004f18:	1c03      	adds	r3, r0, #0
 8004f1a:	1c1a      	adds	r2, r3, #0
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	605a      	str	r2, [r3, #4]
	q->q3 = q3 * norm;
 8004f20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f22:	193b      	adds	r3, r7, r4
 8004f24:	195a      	adds	r2, r3, r5
 8004f26:	6810      	ldr	r0, [r2, #0]
 8004f28:	f7fb fe72 	bl	8000c10 <__aeabi_fmul>
 8004f2c:	1c03      	adds	r3, r0, #0
 8004f2e:	1c1a      	adds	r2, r3, #0
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	609a      	str	r2, [r3, #8]
	q->q4 = q4 * norm;
 8004f34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f36:	2380      	movs	r3, #128	; 0x80
 8004f38:	2208      	movs	r2, #8
 8004f3a:	4694      	mov	ip, r2
 8004f3c:	44bc      	add	ip, r7
 8004f3e:	4463      	add	r3, ip
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	f7fb fe65 	bl	8000c10 <__aeabi_fmul>
 8004f46:	1c03      	adds	r3, r0, #0
 8004f48:	1c1a      	adds	r2, r3, #0
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	60da      	str	r2, [r3, #12]
 8004f4e:	e000      	b.n	8004f52 <MadgwickFilterXIO+0xb66>
	if (norm == 0) return; // handle NaN
 8004f50:	46c0      	nop			; (mov r8, r8)
}
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b027      	add	sp, #156	; 0x9c
 8004f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f58:	41f00000 	.word	0x41f00000
 8004f5c:	408f4000 	.word	0x408f4000

08004f60 <GyroLowPassFilter>:
	q->q3 = q2;
	q->q4 = q3;
}

void GyroLowPassFilter(float *gyro_data, float* prev_filt, float* filt, float a)
{
 8004f60:	b5b0      	push	{r4, r5, r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
	// Calculating new high-pass filtered data
	filt[0] = prev_filt[0] + a*(gyro_data[0] - prev_filt[0]);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	681c      	ldr	r4, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	1c19      	adds	r1, r3, #0
 8004f7c:	1c10      	adds	r0, r2, #0
 8004f7e:	f7fb ff61 	bl	8000e44 <__aeabi_fsub>
 8004f82:	1c03      	adds	r3, r0, #0
 8004f84:	6839      	ldr	r1, [r7, #0]
 8004f86:	1c18      	adds	r0, r3, #0
 8004f88:	f7fb fe42 	bl	8000c10 <__aeabi_fmul>
 8004f8c:	1c03      	adds	r3, r0, #0
 8004f8e:	1c19      	adds	r1, r3, #0
 8004f90:	1c20      	adds	r0, r4, #0
 8004f92:	f7fb fad7 	bl	8000544 <__aeabi_fadd>
 8004f96:	1c03      	adds	r3, r0, #0
 8004f98:	1c1a      	adds	r2, r3, #0
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
	filt[1] = prev_filt[1] + a*(gyro_data[1] - prev_filt[1]);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	681d      	ldr	r5, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	3304      	adds	r3, #4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	1c19      	adds	r1, r3, #0
 8004fb2:	1c10      	adds	r0, r2, #0
 8004fb4:	f7fb ff46 	bl	8000e44 <__aeabi_fsub>
 8004fb8:	1c03      	adds	r3, r0, #0
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	1c18      	adds	r0, r3, #0
 8004fbe:	f7fb fe27 	bl	8000c10 <__aeabi_fmul>
 8004fc2:	1c03      	adds	r3, r0, #0
 8004fc4:	1c1a      	adds	r2, r3, #0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	1d1c      	adds	r4, r3, #4
 8004fca:	1c11      	adds	r1, r2, #0
 8004fcc:	1c28      	adds	r0, r5, #0
 8004fce:	f7fb fab9 	bl	8000544 <__aeabi_fadd>
 8004fd2:	1c03      	adds	r3, r0, #0
 8004fd4:	6023      	str	r3, [r4, #0]
	filt[2] = prev_filt[2] + a*(gyro_data[2] - prev_filt[2]);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	681d      	ldr	r5, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	1c19      	adds	r1, r3, #0
 8004fea:	1c10      	adds	r0, r2, #0
 8004fec:	f7fb ff2a 	bl	8000e44 <__aeabi_fsub>
 8004ff0:	1c03      	adds	r3, r0, #0
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	1c18      	adds	r0, r3, #0
 8004ff6:	f7fb fe0b 	bl	8000c10 <__aeabi_fmul>
 8004ffa:	1c03      	adds	r3, r0, #0
 8004ffc:	1c1a      	adds	r2, r3, #0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3308      	adds	r3, #8
 8005002:	001c      	movs	r4, r3
 8005004:	1c11      	adds	r1, r2, #0
 8005006:	1c28      	adds	r0, r5, #0
 8005008:	f7fb fa9c 	bl	8000544 <__aeabi_fadd>
 800500c:	1c03      	adds	r3, r0, #0
 800500e:	6023      	str	r3, [r4, #0]

	prev_filt[0] = filt[0];
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	601a      	str	r2, [r3, #0]
	prev_filt[1] = filt[1];
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	3304      	adds	r3, #4
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6852      	ldr	r2, [r2, #4]
 8005020:	601a      	str	r2, [r3, #0]
	prev_filt[2] = filt[2];
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	3308      	adds	r3, #8
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6892      	ldr	r2, [r2, #8]
 800502a:	601a      	str	r2, [r3, #0]
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	46bd      	mov	sp, r7
 8005030:	b004      	add	sp, #16
 8005032:	bdb0      	pop	{r4, r5, r7, pc}

08005034 <CalculateRotationMatrix>:
	quad->q3 /= length;
	quad->q4 /= length;

}

void CalculateRotationMatrix(float* acc_bias, struct matrix *RotationMatrix){
 8005034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005036:	b0a7      	sub	sp, #156	; 0x9c
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
	struct matrix Roll;
	struct matrix Pitch;
	struct matrix Yaw;
	struct matrix YawTimesPitch;

	Roll.a11 = 1.0;
 800503e:	2474      	movs	r4, #116	; 0x74
 8005040:	193b      	adds	r3, r7, r4
 8005042:	22fe      	movs	r2, #254	; 0xfe
 8005044:	0592      	lsls	r2, r2, #22
 8005046:	601a      	str	r2, [r3, #0]
	Roll.a12 = 0.0;
 8005048:	193b      	adds	r3, r7, r4
 800504a:	2200      	movs	r2, #0
 800504c:	605a      	str	r2, [r3, #4]
	Roll.a13 = 0.0;
 800504e:	193b      	adds	r3, r7, r4
 8005050:	2200      	movs	r2, #0
 8005052:	609a      	str	r2, [r3, #8]
	Roll.a21 = 0.0;
 8005054:	193b      	adds	r3, r7, r4
 8005056:	2200      	movs	r2, #0
 8005058:	60da      	str	r2, [r3, #12]
	Roll.a22= cos(acc_bias[0]*DEG_2_RAD);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	1c18      	adds	r0, r3, #0
 8005060:	f7fd ff36 	bl	8002ed0 <__aeabi_f2d>
 8005064:	4afd      	ldr	r2, [pc, #1012]	; (800545c <CalculateRotationMatrix+0x428>)
 8005066:	4bfe      	ldr	r3, [pc, #1016]	; (8005460 <CalculateRotationMatrix+0x42c>)
 8005068:	f7fd f88a 	bl	8002180 <__aeabi_dmul>
 800506c:	0002      	movs	r2, r0
 800506e:	000b      	movs	r3, r1
 8005070:	0010      	movs	r0, r2
 8005072:	0019      	movs	r1, r3
 8005074:	f00a fbfa 	bl	800f86c <cos>
 8005078:	0002      	movs	r2, r0
 800507a:	000b      	movs	r3, r1
 800507c:	0010      	movs	r0, r2
 800507e:	0019      	movs	r1, r3
 8005080:	f7fd ff6e 	bl	8002f60 <__aeabi_d2f>
 8005084:	1c02      	adds	r2, r0, #0
 8005086:	193b      	adds	r3, r7, r4
 8005088:	611a      	str	r2, [r3, #16]
	Roll.a23 = -sin(acc_bias[0]*DEG_2_RAD);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	1c18      	adds	r0, r3, #0
 8005090:	f7fd ff1e 	bl	8002ed0 <__aeabi_f2d>
 8005094:	4af1      	ldr	r2, [pc, #964]	; (800545c <CalculateRotationMatrix+0x428>)
 8005096:	4bf2      	ldr	r3, [pc, #968]	; (8005460 <CalculateRotationMatrix+0x42c>)
 8005098:	f7fd f872 	bl	8002180 <__aeabi_dmul>
 800509c:	0002      	movs	r2, r0
 800509e:	000b      	movs	r3, r1
 80050a0:	0010      	movs	r0, r2
 80050a2:	0019      	movs	r1, r3
 80050a4:	f00a fc28 	bl	800f8f8 <sin>
 80050a8:	0002      	movs	r2, r0
 80050aa:	000b      	movs	r3, r1
 80050ac:	0010      	movs	r0, r2
 80050ae:	0019      	movs	r1, r3
 80050b0:	f7fd ff56 	bl	8002f60 <__aeabi_d2f>
 80050b4:	1c02      	adds	r2, r0, #0
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	061b      	lsls	r3, r3, #24
 80050ba:	405a      	eors	r2, r3
 80050bc:	0025      	movs	r5, r4
 80050be:	197b      	adds	r3, r7, r5
 80050c0:	615a      	str	r2, [r3, #20]
	Roll.a31 = 0.0;
 80050c2:	197b      	adds	r3, r7, r5
 80050c4:	2200      	movs	r2, #0
 80050c6:	619a      	str	r2, [r3, #24]
	Roll.a32 = sin(acc_bias[0]*DEG_2_RAD);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	1c18      	adds	r0, r3, #0
 80050ce:	f7fd feff 	bl	8002ed0 <__aeabi_f2d>
 80050d2:	4ae2      	ldr	r2, [pc, #904]	; (800545c <CalculateRotationMatrix+0x428>)
 80050d4:	4be2      	ldr	r3, [pc, #904]	; (8005460 <CalculateRotationMatrix+0x42c>)
 80050d6:	f7fd f853 	bl	8002180 <__aeabi_dmul>
 80050da:	0002      	movs	r2, r0
 80050dc:	000b      	movs	r3, r1
 80050de:	0010      	movs	r0, r2
 80050e0:	0019      	movs	r1, r3
 80050e2:	f00a fc09 	bl	800f8f8 <sin>
 80050e6:	0002      	movs	r2, r0
 80050e8:	000b      	movs	r3, r1
 80050ea:	0010      	movs	r0, r2
 80050ec:	0019      	movs	r1, r3
 80050ee:	f7fd ff37 	bl	8002f60 <__aeabi_d2f>
 80050f2:	1c02      	adds	r2, r0, #0
 80050f4:	197b      	adds	r3, r7, r5
 80050f6:	61da      	str	r2, [r3, #28]
	Roll.a33 = cos(acc_bias[0]*DEG_2_RAD);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	1c18      	adds	r0, r3, #0
 80050fe:	f7fd fee7 	bl	8002ed0 <__aeabi_f2d>
 8005102:	4ad6      	ldr	r2, [pc, #856]	; (800545c <CalculateRotationMatrix+0x428>)
 8005104:	4bd6      	ldr	r3, [pc, #856]	; (8005460 <CalculateRotationMatrix+0x42c>)
 8005106:	f7fd f83b 	bl	8002180 <__aeabi_dmul>
 800510a:	0002      	movs	r2, r0
 800510c:	000b      	movs	r3, r1
 800510e:	0010      	movs	r0, r2
 8005110:	0019      	movs	r1, r3
 8005112:	f00a fbab 	bl	800f86c <cos>
 8005116:	0002      	movs	r2, r0
 8005118:	000b      	movs	r3, r1
 800511a:	0010      	movs	r0, r2
 800511c:	0019      	movs	r1, r3
 800511e:	f7fd ff1f 	bl	8002f60 <__aeabi_d2f>
 8005122:	1c02      	adds	r2, r0, #0
 8005124:	197b      	adds	r3, r7, r5
 8005126:	621a      	str	r2, [r3, #32]

	Pitch.a11 = cos(acc_bias[1]*DEG_2_RAD);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	1c18      	adds	r0, r3, #0
 8005130:	f7fd fece 	bl	8002ed0 <__aeabi_f2d>
 8005134:	4ac9      	ldr	r2, [pc, #804]	; (800545c <CalculateRotationMatrix+0x428>)
 8005136:	4bca      	ldr	r3, [pc, #808]	; (8005460 <CalculateRotationMatrix+0x42c>)
 8005138:	f7fd f822 	bl	8002180 <__aeabi_dmul>
 800513c:	0002      	movs	r2, r0
 800513e:	000b      	movs	r3, r1
 8005140:	0010      	movs	r0, r2
 8005142:	0019      	movs	r1, r3
 8005144:	f00a fb92 	bl	800f86c <cos>
 8005148:	0002      	movs	r2, r0
 800514a:	000b      	movs	r3, r1
 800514c:	0010      	movs	r0, r2
 800514e:	0019      	movs	r1, r3
 8005150:	f7fd ff06 	bl	8002f60 <__aeabi_d2f>
 8005154:	1c02      	adds	r2, r0, #0
 8005156:	2450      	movs	r4, #80	; 0x50
 8005158:	193b      	adds	r3, r7, r4
 800515a:	601a      	str	r2, [r3, #0]
	Pitch.a12 = 0.0;
 800515c:	193b      	adds	r3, r7, r4
 800515e:	2200      	movs	r2, #0
 8005160:	605a      	str	r2, [r3, #4]
	Pitch.a13 = sin(acc_bias[1]*DEG_2_RAD);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	1c18      	adds	r0, r3, #0
 800516a:	f7fd feb1 	bl	8002ed0 <__aeabi_f2d>
 800516e:	4abb      	ldr	r2, [pc, #748]	; (800545c <CalculateRotationMatrix+0x428>)
 8005170:	4bbb      	ldr	r3, [pc, #748]	; (8005460 <CalculateRotationMatrix+0x42c>)
 8005172:	f7fd f805 	bl	8002180 <__aeabi_dmul>
 8005176:	0002      	movs	r2, r0
 8005178:	000b      	movs	r3, r1
 800517a:	0010      	movs	r0, r2
 800517c:	0019      	movs	r1, r3
 800517e:	f00a fbbb 	bl	800f8f8 <sin>
 8005182:	0002      	movs	r2, r0
 8005184:	000b      	movs	r3, r1
 8005186:	0010      	movs	r0, r2
 8005188:	0019      	movs	r1, r3
 800518a:	f7fd fee9 	bl	8002f60 <__aeabi_d2f>
 800518e:	1c02      	adds	r2, r0, #0
 8005190:	193b      	adds	r3, r7, r4
 8005192:	609a      	str	r2, [r3, #8]
	Pitch.a21 = 0.0;
 8005194:	193b      	adds	r3, r7, r4
 8005196:	2200      	movs	r2, #0
 8005198:	60da      	str	r2, [r3, #12]
	Pitch.a22 = 1.0;
 800519a:	193b      	adds	r3, r7, r4
 800519c:	22fe      	movs	r2, #254	; 0xfe
 800519e:	0592      	lsls	r2, r2, #22
 80051a0:	611a      	str	r2, [r3, #16]
	Pitch.a23 = 0.0;
 80051a2:	193b      	adds	r3, r7, r4
 80051a4:	2200      	movs	r2, #0
 80051a6:	615a      	str	r2, [r3, #20]
	Pitch.a31 = -sin(acc_bias[1]*DEG_2_RAD);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	1c18      	adds	r0, r3, #0
 80051b0:	f7fd fe8e 	bl	8002ed0 <__aeabi_f2d>
 80051b4:	4aa9      	ldr	r2, [pc, #676]	; (800545c <CalculateRotationMatrix+0x428>)
 80051b6:	4baa      	ldr	r3, [pc, #680]	; (8005460 <CalculateRotationMatrix+0x42c>)
 80051b8:	f7fc ffe2 	bl	8002180 <__aeabi_dmul>
 80051bc:	0002      	movs	r2, r0
 80051be:	000b      	movs	r3, r1
 80051c0:	0010      	movs	r0, r2
 80051c2:	0019      	movs	r1, r3
 80051c4:	f00a fb98 	bl	800f8f8 <sin>
 80051c8:	0002      	movs	r2, r0
 80051ca:	000b      	movs	r3, r1
 80051cc:	0010      	movs	r0, r2
 80051ce:	0019      	movs	r1, r3
 80051d0:	f7fd fec6 	bl	8002f60 <__aeabi_d2f>
 80051d4:	1c02      	adds	r2, r0, #0
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	405a      	eors	r2, r3
 80051dc:	193b      	adds	r3, r7, r4
 80051de:	619a      	str	r2, [r3, #24]
	Pitch.a32 = 0.0;
 80051e0:	193b      	adds	r3, r7, r4
 80051e2:	2200      	movs	r2, #0
 80051e4:	61da      	str	r2, [r3, #28]
	Pitch.a33 = cos(acc_bias[1]*DEG_2_RAD);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3304      	adds	r3, #4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	1c18      	adds	r0, r3, #0
 80051ee:	f7fd fe6f 	bl	8002ed0 <__aeabi_f2d>
 80051f2:	4a9a      	ldr	r2, [pc, #616]	; (800545c <CalculateRotationMatrix+0x428>)
 80051f4:	4b9a      	ldr	r3, [pc, #616]	; (8005460 <CalculateRotationMatrix+0x42c>)
 80051f6:	f7fc ffc3 	bl	8002180 <__aeabi_dmul>
 80051fa:	0002      	movs	r2, r0
 80051fc:	000b      	movs	r3, r1
 80051fe:	0010      	movs	r0, r2
 8005200:	0019      	movs	r1, r3
 8005202:	f00a fb33 	bl	800f86c <cos>
 8005206:	0002      	movs	r2, r0
 8005208:	000b      	movs	r3, r1
 800520a:	0010      	movs	r0, r2
 800520c:	0019      	movs	r1, r3
 800520e:	f7fd fea7 	bl	8002f60 <__aeabi_d2f>
 8005212:	1c02      	adds	r2, r0, #0
 8005214:	0021      	movs	r1, r4
 8005216:	193b      	adds	r3, r7, r4
 8005218:	621a      	str	r2, [r3, #32]

	Yaw.a11 = 1.0;
 800521a:	202c      	movs	r0, #44	; 0x2c
 800521c:	183b      	adds	r3, r7, r0
 800521e:	22fe      	movs	r2, #254	; 0xfe
 8005220:	0592      	lsls	r2, r2, #22
 8005222:	601a      	str	r2, [r3, #0]
	Yaw.a12 = 0.0;
 8005224:	183b      	adds	r3, r7, r0
 8005226:	2200      	movs	r2, #0
 8005228:	605a      	str	r2, [r3, #4]
	Yaw.a13 = 0.0;
 800522a:	183b      	adds	r3, r7, r0
 800522c:	2200      	movs	r2, #0
 800522e:	609a      	str	r2, [r3, #8]
	Yaw.a21 = 0.0;
 8005230:	183b      	adds	r3, r7, r0
 8005232:	2200      	movs	r2, #0
 8005234:	60da      	str	r2, [r3, #12]
	Yaw.a22 = 1.0;
 8005236:	183b      	adds	r3, r7, r0
 8005238:	22fe      	movs	r2, #254	; 0xfe
 800523a:	0592      	lsls	r2, r2, #22
 800523c:	611a      	str	r2, [r3, #16]
	Yaw.a23 = 0.0;
 800523e:	183b      	adds	r3, r7, r0
 8005240:	2200      	movs	r2, #0
 8005242:	615a      	str	r2, [r3, #20]
	Yaw.a31 = 0.0;
 8005244:	183b      	adds	r3, r7, r0
 8005246:	2200      	movs	r2, #0
 8005248:	619a      	str	r2, [r3, #24]
	Yaw.a32 = 0.0;
 800524a:	183b      	adds	r3, r7, r0
 800524c:	2200      	movs	r2, #0
 800524e:	61da      	str	r2, [r3, #28]
	Yaw.a33 = 1.0;
 8005250:	183b      	adds	r3, r7, r0
 8005252:	22fe      	movs	r2, #254	; 0xfe
 8005254:	0592      	lsls	r2, r2, #22
 8005256:	621a      	str	r2, [r3, #32]

	YawTimesPitch.a11 = Yaw.a11*Pitch.a11 + Yaw.a12*Pitch.a21 + Yaw.a13*Pitch.a31;
 8005258:	183b      	adds	r3, r7, r0
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	000e      	movs	r6, r1
 800525e:	19bb      	adds	r3, r7, r6
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	1c19      	adds	r1, r3, #0
 8005264:	1c10      	adds	r0, r2, #0
 8005266:	f7fb fcd3 	bl	8000c10 <__aeabi_fmul>
 800526a:	1c03      	adds	r3, r0, #0
 800526c:	1c1c      	adds	r4, r3, #0
 800526e:	202c      	movs	r0, #44	; 0x2c
 8005270:	183b      	adds	r3, r7, r0
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	19bb      	adds	r3, r7, r6
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	1c19      	adds	r1, r3, #0
 800527a:	1c10      	adds	r0, r2, #0
 800527c:	f7fb fcc8 	bl	8000c10 <__aeabi_fmul>
 8005280:	1c03      	adds	r3, r0, #0
 8005282:	1c19      	adds	r1, r3, #0
 8005284:	1c20      	adds	r0, r4, #0
 8005286:	f7fb f95d 	bl	8000544 <__aeabi_fadd>
 800528a:	1c03      	adds	r3, r0, #0
 800528c:	1c1c      	adds	r4, r3, #0
 800528e:	202c      	movs	r0, #44	; 0x2c
 8005290:	183b      	adds	r3, r7, r0
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	19bb      	adds	r3, r7, r6
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	1c19      	adds	r1, r3, #0
 800529a:	1c10      	adds	r0, r2, #0
 800529c:	f7fb fcb8 	bl	8000c10 <__aeabi_fmul>
 80052a0:	1c03      	adds	r3, r0, #0
 80052a2:	1c19      	adds	r1, r3, #0
 80052a4:	1c20      	adds	r0, r4, #0
 80052a6:	f7fb f94d 	bl	8000544 <__aeabi_fadd>
 80052aa:	1c03      	adds	r3, r0, #0
 80052ac:	1c1a      	adds	r2, r3, #0
 80052ae:	2308      	movs	r3, #8
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	601a      	str	r2, [r3, #0]
	YawTimesPitch.a12 = Yaw.a11*Pitch.a12 + Yaw.a12*Pitch.a22 + Yaw.a13*Pitch.a32;
 80052b4:	202c      	movs	r0, #44	; 0x2c
 80052b6:	183b      	adds	r3, r7, r0
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	19bb      	adds	r3, r7, r6
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	1c19      	adds	r1, r3, #0
 80052c0:	1c10      	adds	r0, r2, #0
 80052c2:	f7fb fca5 	bl	8000c10 <__aeabi_fmul>
 80052c6:	1c03      	adds	r3, r0, #0
 80052c8:	1c1c      	adds	r4, r3, #0
 80052ca:	202c      	movs	r0, #44	; 0x2c
 80052cc:	183b      	adds	r3, r7, r0
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	19bb      	adds	r3, r7, r6
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	1c19      	adds	r1, r3, #0
 80052d6:	1c10      	adds	r0, r2, #0
 80052d8:	f7fb fc9a 	bl	8000c10 <__aeabi_fmul>
 80052dc:	1c03      	adds	r3, r0, #0
 80052de:	1c19      	adds	r1, r3, #0
 80052e0:	1c20      	adds	r0, r4, #0
 80052e2:	f7fb f92f 	bl	8000544 <__aeabi_fadd>
 80052e6:	1c03      	adds	r3, r0, #0
 80052e8:	1c1c      	adds	r4, r3, #0
 80052ea:	202c      	movs	r0, #44	; 0x2c
 80052ec:	183b      	adds	r3, r7, r0
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	19bb      	adds	r3, r7, r6
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	1c19      	adds	r1, r3, #0
 80052f6:	1c10      	adds	r0, r2, #0
 80052f8:	f7fb fc8a 	bl	8000c10 <__aeabi_fmul>
 80052fc:	1c03      	adds	r3, r0, #0
 80052fe:	1c19      	adds	r1, r3, #0
 8005300:	1c20      	adds	r0, r4, #0
 8005302:	f7fb f91f 	bl	8000544 <__aeabi_fadd>
 8005306:	1c03      	adds	r3, r0, #0
 8005308:	1c1a      	adds	r2, r3, #0
 800530a:	2308      	movs	r3, #8
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	605a      	str	r2, [r3, #4]
	YawTimesPitch.a13 = Yaw.a11*Pitch.a13 + Yaw.a12*Pitch.a23 + Yaw.a13*Pitch.a33;
 8005310:	202c      	movs	r0, #44	; 0x2c
 8005312:	183b      	adds	r3, r7, r0
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	19bb      	adds	r3, r7, r6
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	1c19      	adds	r1, r3, #0
 800531c:	1c10      	adds	r0, r2, #0
 800531e:	f7fb fc77 	bl	8000c10 <__aeabi_fmul>
 8005322:	1c03      	adds	r3, r0, #0
 8005324:	1c1c      	adds	r4, r3, #0
 8005326:	202c      	movs	r0, #44	; 0x2c
 8005328:	183b      	adds	r3, r7, r0
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	19bb      	adds	r3, r7, r6
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	1c19      	adds	r1, r3, #0
 8005332:	1c10      	adds	r0, r2, #0
 8005334:	f7fb fc6c 	bl	8000c10 <__aeabi_fmul>
 8005338:	1c03      	adds	r3, r0, #0
 800533a:	1c19      	adds	r1, r3, #0
 800533c:	1c20      	adds	r0, r4, #0
 800533e:	f7fb f901 	bl	8000544 <__aeabi_fadd>
 8005342:	1c03      	adds	r3, r0, #0
 8005344:	1c1c      	adds	r4, r3, #0
 8005346:	202c      	movs	r0, #44	; 0x2c
 8005348:	183b      	adds	r3, r7, r0
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	19bb      	adds	r3, r7, r6
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	1c19      	adds	r1, r3, #0
 8005352:	1c10      	adds	r0, r2, #0
 8005354:	f7fb fc5c 	bl	8000c10 <__aeabi_fmul>
 8005358:	1c03      	adds	r3, r0, #0
 800535a:	1c19      	adds	r1, r3, #0
 800535c:	1c20      	adds	r0, r4, #0
 800535e:	f7fb f8f1 	bl	8000544 <__aeabi_fadd>
 8005362:	1c03      	adds	r3, r0, #0
 8005364:	1c1a      	adds	r2, r3, #0
 8005366:	2308      	movs	r3, #8
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	609a      	str	r2, [r3, #8]
	YawTimesPitch.a21 = Yaw.a21*Pitch.a11 + Yaw.a22*Pitch.a21 + Yaw.a23*Pitch.a31;
 800536c:	202c      	movs	r0, #44	; 0x2c
 800536e:	183b      	adds	r3, r7, r0
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	19bb      	adds	r3, r7, r6
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	1c19      	adds	r1, r3, #0
 8005378:	1c10      	adds	r0, r2, #0
 800537a:	f7fb fc49 	bl	8000c10 <__aeabi_fmul>
 800537e:	1c03      	adds	r3, r0, #0
 8005380:	1c1c      	adds	r4, r3, #0
 8005382:	202c      	movs	r0, #44	; 0x2c
 8005384:	183b      	adds	r3, r7, r0
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	19bb      	adds	r3, r7, r6
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	1c19      	adds	r1, r3, #0
 800538e:	1c10      	adds	r0, r2, #0
 8005390:	f7fb fc3e 	bl	8000c10 <__aeabi_fmul>
 8005394:	1c03      	adds	r3, r0, #0
 8005396:	1c19      	adds	r1, r3, #0
 8005398:	1c20      	adds	r0, r4, #0
 800539a:	f7fb f8d3 	bl	8000544 <__aeabi_fadd>
 800539e:	1c03      	adds	r3, r0, #0
 80053a0:	1c1c      	adds	r4, r3, #0
 80053a2:	202c      	movs	r0, #44	; 0x2c
 80053a4:	183b      	adds	r3, r7, r0
 80053a6:	695a      	ldr	r2, [r3, #20]
 80053a8:	19bb      	adds	r3, r7, r6
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	1c19      	adds	r1, r3, #0
 80053ae:	1c10      	adds	r0, r2, #0
 80053b0:	f7fb fc2e 	bl	8000c10 <__aeabi_fmul>
 80053b4:	1c03      	adds	r3, r0, #0
 80053b6:	1c19      	adds	r1, r3, #0
 80053b8:	1c20      	adds	r0, r4, #0
 80053ba:	f7fb f8c3 	bl	8000544 <__aeabi_fadd>
 80053be:	1c03      	adds	r3, r0, #0
 80053c0:	1c1a      	adds	r2, r3, #0
 80053c2:	2308      	movs	r3, #8
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	60da      	str	r2, [r3, #12]
	YawTimesPitch.a22 = Yaw.a21*Pitch.a12 + Yaw.a22*Pitch.a22 + Yaw.a23*Pitch.a32;
 80053c8:	202c      	movs	r0, #44	; 0x2c
 80053ca:	183b      	adds	r3, r7, r0
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	19bb      	adds	r3, r7, r6
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	1c19      	adds	r1, r3, #0
 80053d4:	1c10      	adds	r0, r2, #0
 80053d6:	f7fb fc1b 	bl	8000c10 <__aeabi_fmul>
 80053da:	1c03      	adds	r3, r0, #0
 80053dc:	1c1c      	adds	r4, r3, #0
 80053de:	202c      	movs	r0, #44	; 0x2c
 80053e0:	183b      	adds	r3, r7, r0
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	19bb      	adds	r3, r7, r6
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	1c19      	adds	r1, r3, #0
 80053ea:	1c10      	adds	r0, r2, #0
 80053ec:	f7fb fc10 	bl	8000c10 <__aeabi_fmul>
 80053f0:	1c03      	adds	r3, r0, #0
 80053f2:	1c19      	adds	r1, r3, #0
 80053f4:	1c20      	adds	r0, r4, #0
 80053f6:	f7fb f8a5 	bl	8000544 <__aeabi_fadd>
 80053fa:	1c03      	adds	r3, r0, #0
 80053fc:	1c1c      	adds	r4, r3, #0
 80053fe:	202c      	movs	r0, #44	; 0x2c
 8005400:	183b      	adds	r3, r7, r0
 8005402:	695a      	ldr	r2, [r3, #20]
 8005404:	19bb      	adds	r3, r7, r6
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	1c19      	adds	r1, r3, #0
 800540a:	1c10      	adds	r0, r2, #0
 800540c:	f7fb fc00 	bl	8000c10 <__aeabi_fmul>
 8005410:	1c03      	adds	r3, r0, #0
 8005412:	1c19      	adds	r1, r3, #0
 8005414:	1c20      	adds	r0, r4, #0
 8005416:	f7fb f895 	bl	8000544 <__aeabi_fadd>
 800541a:	1c03      	adds	r3, r0, #0
 800541c:	1c1a      	adds	r2, r3, #0
 800541e:	2308      	movs	r3, #8
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	611a      	str	r2, [r3, #16]
	YawTimesPitch.a23 = Yaw.a21*Pitch.a13 + Yaw.a22*Pitch.a23 + Yaw.a23*Pitch.a33;
 8005424:	202c      	movs	r0, #44	; 0x2c
 8005426:	183b      	adds	r3, r7, r0
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	19bb      	adds	r3, r7, r6
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	1c19      	adds	r1, r3, #0
 8005430:	1c10      	adds	r0, r2, #0
 8005432:	f7fb fbed 	bl	8000c10 <__aeabi_fmul>
 8005436:	1c03      	adds	r3, r0, #0
 8005438:	1c1c      	adds	r4, r3, #0
 800543a:	202c      	movs	r0, #44	; 0x2c
 800543c:	183b      	adds	r3, r7, r0
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	19bb      	adds	r3, r7, r6
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	1c19      	adds	r1, r3, #0
 8005446:	1c10      	adds	r0, r2, #0
 8005448:	f7fb fbe2 	bl	8000c10 <__aeabi_fmul>
 800544c:	1c03      	adds	r3, r0, #0
 800544e:	1c19      	adds	r1, r3, #0
 8005450:	1c20      	adds	r0, r4, #0
 8005452:	f7fb f877 	bl	8000544 <__aeabi_fadd>
 8005456:	1c03      	adds	r3, r0, #0
 8005458:	1c1c      	adds	r4, r3, #0
 800545a:	e003      	b.n	8005464 <CalculateRotationMatrix+0x430>
 800545c:	a2529d39 	.word	0xa2529d39
 8005460:	3f91df46 	.word	0x3f91df46
 8005464:	202c      	movs	r0, #44	; 0x2c
 8005466:	183b      	adds	r3, r7, r0
 8005468:	695a      	ldr	r2, [r3, #20]
 800546a:	19bb      	adds	r3, r7, r6
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	1c19      	adds	r1, r3, #0
 8005470:	1c10      	adds	r0, r2, #0
 8005472:	f7fb fbcd 	bl	8000c10 <__aeabi_fmul>
 8005476:	1c03      	adds	r3, r0, #0
 8005478:	1c19      	adds	r1, r3, #0
 800547a:	1c20      	adds	r0, r4, #0
 800547c:	f7fb f862 	bl	8000544 <__aeabi_fadd>
 8005480:	1c03      	adds	r3, r0, #0
 8005482:	1c1a      	adds	r2, r3, #0
 8005484:	2308      	movs	r3, #8
 8005486:	18fb      	adds	r3, r7, r3
 8005488:	615a      	str	r2, [r3, #20]
	YawTimesPitch.a31 = Yaw.a31*Pitch.a11 + Yaw.a32*Pitch.a21 + Yaw.a33*Pitch.a31;
 800548a:	202c      	movs	r0, #44	; 0x2c
 800548c:	183b      	adds	r3, r7, r0
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	19bb      	adds	r3, r7, r6
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	1c19      	adds	r1, r3, #0
 8005496:	1c10      	adds	r0, r2, #0
 8005498:	f7fb fbba 	bl	8000c10 <__aeabi_fmul>
 800549c:	1c03      	adds	r3, r0, #0
 800549e:	1c1c      	adds	r4, r3, #0
 80054a0:	202c      	movs	r0, #44	; 0x2c
 80054a2:	183b      	adds	r3, r7, r0
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	19bb      	adds	r3, r7, r6
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	1c19      	adds	r1, r3, #0
 80054ac:	1c10      	adds	r0, r2, #0
 80054ae:	f7fb fbaf 	bl	8000c10 <__aeabi_fmul>
 80054b2:	1c03      	adds	r3, r0, #0
 80054b4:	1c19      	adds	r1, r3, #0
 80054b6:	1c20      	adds	r0, r4, #0
 80054b8:	f7fb f844 	bl	8000544 <__aeabi_fadd>
 80054bc:	1c03      	adds	r3, r0, #0
 80054be:	1c1c      	adds	r4, r3, #0
 80054c0:	202c      	movs	r0, #44	; 0x2c
 80054c2:	183b      	adds	r3, r7, r0
 80054c4:	6a1a      	ldr	r2, [r3, #32]
 80054c6:	19bb      	adds	r3, r7, r6
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	1c19      	adds	r1, r3, #0
 80054cc:	1c10      	adds	r0, r2, #0
 80054ce:	f7fb fb9f 	bl	8000c10 <__aeabi_fmul>
 80054d2:	1c03      	adds	r3, r0, #0
 80054d4:	1c19      	adds	r1, r3, #0
 80054d6:	1c20      	adds	r0, r4, #0
 80054d8:	f7fb f834 	bl	8000544 <__aeabi_fadd>
 80054dc:	1c03      	adds	r3, r0, #0
 80054de:	1c1a      	adds	r2, r3, #0
 80054e0:	2308      	movs	r3, #8
 80054e2:	18fb      	adds	r3, r7, r3
 80054e4:	619a      	str	r2, [r3, #24]
	YawTimesPitch.a32 = Yaw.a31*Pitch.a12 + Yaw.a32*Pitch.a22 + Yaw.a33*Pitch.a32;
 80054e6:	202c      	movs	r0, #44	; 0x2c
 80054e8:	183b      	adds	r3, r7, r0
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	19bb      	adds	r3, r7, r6
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	1c19      	adds	r1, r3, #0
 80054f2:	1c10      	adds	r0, r2, #0
 80054f4:	f7fb fb8c 	bl	8000c10 <__aeabi_fmul>
 80054f8:	1c03      	adds	r3, r0, #0
 80054fa:	1c1c      	adds	r4, r3, #0
 80054fc:	202c      	movs	r0, #44	; 0x2c
 80054fe:	183b      	adds	r3, r7, r0
 8005500:	69da      	ldr	r2, [r3, #28]
 8005502:	19bb      	adds	r3, r7, r6
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	1c19      	adds	r1, r3, #0
 8005508:	1c10      	adds	r0, r2, #0
 800550a:	f7fb fb81 	bl	8000c10 <__aeabi_fmul>
 800550e:	1c03      	adds	r3, r0, #0
 8005510:	1c19      	adds	r1, r3, #0
 8005512:	1c20      	adds	r0, r4, #0
 8005514:	f7fb f816 	bl	8000544 <__aeabi_fadd>
 8005518:	1c03      	adds	r3, r0, #0
 800551a:	1c1c      	adds	r4, r3, #0
 800551c:	202c      	movs	r0, #44	; 0x2c
 800551e:	183b      	adds	r3, r7, r0
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	19bb      	adds	r3, r7, r6
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	1c19      	adds	r1, r3, #0
 8005528:	1c10      	adds	r0, r2, #0
 800552a:	f7fb fb71 	bl	8000c10 <__aeabi_fmul>
 800552e:	1c03      	adds	r3, r0, #0
 8005530:	1c19      	adds	r1, r3, #0
 8005532:	1c20      	adds	r0, r4, #0
 8005534:	f7fb f806 	bl	8000544 <__aeabi_fadd>
 8005538:	1c03      	adds	r3, r0, #0
 800553a:	1c1a      	adds	r2, r3, #0
 800553c:	2308      	movs	r3, #8
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	61da      	str	r2, [r3, #28]
	YawTimesPitch.a33 = Yaw.a31*Pitch.a13 + Yaw.a32*Pitch.a23 + Yaw.a33*Pitch.a33;
 8005542:	202c      	movs	r0, #44	; 0x2c
 8005544:	183b      	adds	r3, r7, r0
 8005546:	699a      	ldr	r2, [r3, #24]
 8005548:	19bb      	adds	r3, r7, r6
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	1c19      	adds	r1, r3, #0
 800554e:	1c10      	adds	r0, r2, #0
 8005550:	f7fb fb5e 	bl	8000c10 <__aeabi_fmul>
 8005554:	1c03      	adds	r3, r0, #0
 8005556:	1c1c      	adds	r4, r3, #0
 8005558:	202c      	movs	r0, #44	; 0x2c
 800555a:	183b      	adds	r3, r7, r0
 800555c:	69da      	ldr	r2, [r3, #28]
 800555e:	19bb      	adds	r3, r7, r6
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	1c19      	adds	r1, r3, #0
 8005564:	1c10      	adds	r0, r2, #0
 8005566:	f7fb fb53 	bl	8000c10 <__aeabi_fmul>
 800556a:	1c03      	adds	r3, r0, #0
 800556c:	1c19      	adds	r1, r3, #0
 800556e:	1c20      	adds	r0, r4, #0
 8005570:	f7fa ffe8 	bl	8000544 <__aeabi_fadd>
 8005574:	1c03      	adds	r3, r0, #0
 8005576:	1c1c      	adds	r4, r3, #0
 8005578:	202c      	movs	r0, #44	; 0x2c
 800557a:	183b      	adds	r3, r7, r0
 800557c:	6a1a      	ldr	r2, [r3, #32]
 800557e:	19bb      	adds	r3, r7, r6
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	1c19      	adds	r1, r3, #0
 8005584:	1c10      	adds	r0, r2, #0
 8005586:	f7fb fb43 	bl	8000c10 <__aeabi_fmul>
 800558a:	1c03      	adds	r3, r0, #0
 800558c:	1c19      	adds	r1, r3, #0
 800558e:	1c20      	adds	r0, r4, #0
 8005590:	f7fa ffd8 	bl	8000544 <__aeabi_fadd>
 8005594:	1c03      	adds	r3, r0, #0
 8005596:	1c1a      	adds	r2, r3, #0
 8005598:	2608      	movs	r6, #8
 800559a:	19bb      	adds	r3, r7, r6
 800559c:	621a      	str	r2, [r3, #32]

	RotationMatrix->a11 = YawTimesPitch.a11*Roll.a11 + YawTimesPitch.a12*Roll.a21 + YawTimesPitch.a13*Roll.a31;
 800559e:	19bb      	adds	r3, r7, r6
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	197b      	adds	r3, r7, r5
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	1c19      	adds	r1, r3, #0
 80055a8:	1c10      	adds	r0, r2, #0
 80055aa:	f7fb fb31 	bl	8000c10 <__aeabi_fmul>
 80055ae:	1c03      	adds	r3, r0, #0
 80055b0:	1c1c      	adds	r4, r3, #0
 80055b2:	19bb      	adds	r3, r7, r6
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	197b      	adds	r3, r7, r5
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	1c19      	adds	r1, r3, #0
 80055bc:	1c10      	adds	r0, r2, #0
 80055be:	f7fb fb27 	bl	8000c10 <__aeabi_fmul>
 80055c2:	1c03      	adds	r3, r0, #0
 80055c4:	1c19      	adds	r1, r3, #0
 80055c6:	1c20      	adds	r0, r4, #0
 80055c8:	f7fa ffbc 	bl	8000544 <__aeabi_fadd>
 80055cc:	1c03      	adds	r3, r0, #0
 80055ce:	1c1c      	adds	r4, r3, #0
 80055d0:	19bb      	adds	r3, r7, r6
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	197b      	adds	r3, r7, r5
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	1c19      	adds	r1, r3, #0
 80055da:	1c10      	adds	r0, r2, #0
 80055dc:	f7fb fb18 	bl	8000c10 <__aeabi_fmul>
 80055e0:	1c03      	adds	r3, r0, #0
 80055e2:	1c19      	adds	r1, r3, #0
 80055e4:	1c20      	adds	r0, r4, #0
 80055e6:	f7fa ffad 	bl	8000544 <__aeabi_fadd>
 80055ea:	1c03      	adds	r3, r0, #0
 80055ec:	1c1a      	adds	r2, r3, #0
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	601a      	str	r2, [r3, #0]
	RotationMatrix->a12 = YawTimesPitch.a11*Roll.a12 + YawTimesPitch.a12*Roll.a22 + YawTimesPitch.a13*Roll.a32;
 80055f2:	19bb      	adds	r3, r7, r6
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	197b      	adds	r3, r7, r5
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	1c19      	adds	r1, r3, #0
 80055fc:	1c10      	adds	r0, r2, #0
 80055fe:	f7fb fb07 	bl	8000c10 <__aeabi_fmul>
 8005602:	1c03      	adds	r3, r0, #0
 8005604:	1c1c      	adds	r4, r3, #0
 8005606:	19bb      	adds	r3, r7, r6
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	197b      	adds	r3, r7, r5
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	1c19      	adds	r1, r3, #0
 8005610:	1c10      	adds	r0, r2, #0
 8005612:	f7fb fafd 	bl	8000c10 <__aeabi_fmul>
 8005616:	1c03      	adds	r3, r0, #0
 8005618:	1c19      	adds	r1, r3, #0
 800561a:	1c20      	adds	r0, r4, #0
 800561c:	f7fa ff92 	bl	8000544 <__aeabi_fadd>
 8005620:	1c03      	adds	r3, r0, #0
 8005622:	1c1c      	adds	r4, r3, #0
 8005624:	19bb      	adds	r3, r7, r6
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	197b      	adds	r3, r7, r5
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	1c19      	adds	r1, r3, #0
 800562e:	1c10      	adds	r0, r2, #0
 8005630:	f7fb faee 	bl	8000c10 <__aeabi_fmul>
 8005634:	1c03      	adds	r3, r0, #0
 8005636:	1c19      	adds	r1, r3, #0
 8005638:	1c20      	adds	r0, r4, #0
 800563a:	f7fa ff83 	bl	8000544 <__aeabi_fadd>
 800563e:	1c03      	adds	r3, r0, #0
 8005640:	1c1a      	adds	r2, r3, #0
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	605a      	str	r2, [r3, #4]
	RotationMatrix->a13 = YawTimesPitch.a11*Roll.a13 + YawTimesPitch.a12*Roll.a23 + YawTimesPitch.a13*Roll.a33;
 8005646:	19bb      	adds	r3, r7, r6
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	197b      	adds	r3, r7, r5
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	1c19      	adds	r1, r3, #0
 8005650:	1c10      	adds	r0, r2, #0
 8005652:	f7fb fadd 	bl	8000c10 <__aeabi_fmul>
 8005656:	1c03      	adds	r3, r0, #0
 8005658:	1c1c      	adds	r4, r3, #0
 800565a:	19bb      	adds	r3, r7, r6
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	197b      	adds	r3, r7, r5
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	1c19      	adds	r1, r3, #0
 8005664:	1c10      	adds	r0, r2, #0
 8005666:	f7fb fad3 	bl	8000c10 <__aeabi_fmul>
 800566a:	1c03      	adds	r3, r0, #0
 800566c:	1c19      	adds	r1, r3, #0
 800566e:	1c20      	adds	r0, r4, #0
 8005670:	f7fa ff68 	bl	8000544 <__aeabi_fadd>
 8005674:	1c03      	adds	r3, r0, #0
 8005676:	1c1c      	adds	r4, r3, #0
 8005678:	19bb      	adds	r3, r7, r6
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	197b      	adds	r3, r7, r5
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	1c19      	adds	r1, r3, #0
 8005682:	1c10      	adds	r0, r2, #0
 8005684:	f7fb fac4 	bl	8000c10 <__aeabi_fmul>
 8005688:	1c03      	adds	r3, r0, #0
 800568a:	1c19      	adds	r1, r3, #0
 800568c:	1c20      	adds	r0, r4, #0
 800568e:	f7fa ff59 	bl	8000544 <__aeabi_fadd>
 8005692:	1c03      	adds	r3, r0, #0
 8005694:	1c1a      	adds	r2, r3, #0
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	609a      	str	r2, [r3, #8]
	RotationMatrix->a21 = YawTimesPitch.a21*Roll.a11 + YawTimesPitch.a22*Roll.a21 + YawTimesPitch.a23*Roll.a31;
 800569a:	19bb      	adds	r3, r7, r6
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	197b      	adds	r3, r7, r5
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	1c19      	adds	r1, r3, #0
 80056a4:	1c10      	adds	r0, r2, #0
 80056a6:	f7fb fab3 	bl	8000c10 <__aeabi_fmul>
 80056aa:	1c03      	adds	r3, r0, #0
 80056ac:	1c1c      	adds	r4, r3, #0
 80056ae:	19bb      	adds	r3, r7, r6
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	197b      	adds	r3, r7, r5
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	1c19      	adds	r1, r3, #0
 80056b8:	1c10      	adds	r0, r2, #0
 80056ba:	f7fb faa9 	bl	8000c10 <__aeabi_fmul>
 80056be:	1c03      	adds	r3, r0, #0
 80056c0:	1c19      	adds	r1, r3, #0
 80056c2:	1c20      	adds	r0, r4, #0
 80056c4:	f7fa ff3e 	bl	8000544 <__aeabi_fadd>
 80056c8:	1c03      	adds	r3, r0, #0
 80056ca:	1c1c      	adds	r4, r3, #0
 80056cc:	19bb      	adds	r3, r7, r6
 80056ce:	695a      	ldr	r2, [r3, #20]
 80056d0:	197b      	adds	r3, r7, r5
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	1c19      	adds	r1, r3, #0
 80056d6:	1c10      	adds	r0, r2, #0
 80056d8:	f7fb fa9a 	bl	8000c10 <__aeabi_fmul>
 80056dc:	1c03      	adds	r3, r0, #0
 80056de:	1c19      	adds	r1, r3, #0
 80056e0:	1c20      	adds	r0, r4, #0
 80056e2:	f7fa ff2f 	bl	8000544 <__aeabi_fadd>
 80056e6:	1c03      	adds	r3, r0, #0
 80056e8:	1c1a      	adds	r2, r3, #0
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	60da      	str	r2, [r3, #12]
	RotationMatrix->a22 = YawTimesPitch.a21*Roll.a12 + YawTimesPitch.a22*Roll.a22 + YawTimesPitch.a23*Roll.a32;
 80056ee:	19bb      	adds	r3, r7, r6
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	197b      	adds	r3, r7, r5
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	1c19      	adds	r1, r3, #0
 80056f8:	1c10      	adds	r0, r2, #0
 80056fa:	f7fb fa89 	bl	8000c10 <__aeabi_fmul>
 80056fe:	1c03      	adds	r3, r0, #0
 8005700:	1c1c      	adds	r4, r3, #0
 8005702:	19bb      	adds	r3, r7, r6
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	197b      	adds	r3, r7, r5
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	1c19      	adds	r1, r3, #0
 800570c:	1c10      	adds	r0, r2, #0
 800570e:	f7fb fa7f 	bl	8000c10 <__aeabi_fmul>
 8005712:	1c03      	adds	r3, r0, #0
 8005714:	1c19      	adds	r1, r3, #0
 8005716:	1c20      	adds	r0, r4, #0
 8005718:	f7fa ff14 	bl	8000544 <__aeabi_fadd>
 800571c:	1c03      	adds	r3, r0, #0
 800571e:	1c1c      	adds	r4, r3, #0
 8005720:	19bb      	adds	r3, r7, r6
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	197b      	adds	r3, r7, r5
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	1c19      	adds	r1, r3, #0
 800572a:	1c10      	adds	r0, r2, #0
 800572c:	f7fb fa70 	bl	8000c10 <__aeabi_fmul>
 8005730:	1c03      	adds	r3, r0, #0
 8005732:	1c19      	adds	r1, r3, #0
 8005734:	1c20      	adds	r0, r4, #0
 8005736:	f7fa ff05 	bl	8000544 <__aeabi_fadd>
 800573a:	1c03      	adds	r3, r0, #0
 800573c:	1c1a      	adds	r2, r3, #0
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	611a      	str	r2, [r3, #16]
	RotationMatrix->a23 = YawTimesPitch.a21*Roll.a13 + YawTimesPitch.a22*Roll.a23 + YawTimesPitch.a23*Roll.a33;
 8005742:	19bb      	adds	r3, r7, r6
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	197b      	adds	r3, r7, r5
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	1c19      	adds	r1, r3, #0
 800574c:	1c10      	adds	r0, r2, #0
 800574e:	f7fb fa5f 	bl	8000c10 <__aeabi_fmul>
 8005752:	1c03      	adds	r3, r0, #0
 8005754:	1c1c      	adds	r4, r3, #0
 8005756:	19bb      	adds	r3, r7, r6
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	197b      	adds	r3, r7, r5
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	1c19      	adds	r1, r3, #0
 8005760:	1c10      	adds	r0, r2, #0
 8005762:	f7fb fa55 	bl	8000c10 <__aeabi_fmul>
 8005766:	1c03      	adds	r3, r0, #0
 8005768:	1c19      	adds	r1, r3, #0
 800576a:	1c20      	adds	r0, r4, #0
 800576c:	f7fa feea 	bl	8000544 <__aeabi_fadd>
 8005770:	1c03      	adds	r3, r0, #0
 8005772:	1c1c      	adds	r4, r3, #0
 8005774:	19bb      	adds	r3, r7, r6
 8005776:	695a      	ldr	r2, [r3, #20]
 8005778:	197b      	adds	r3, r7, r5
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	1c19      	adds	r1, r3, #0
 800577e:	1c10      	adds	r0, r2, #0
 8005780:	f7fb fa46 	bl	8000c10 <__aeabi_fmul>
 8005784:	1c03      	adds	r3, r0, #0
 8005786:	1c19      	adds	r1, r3, #0
 8005788:	1c20      	adds	r0, r4, #0
 800578a:	f7fa fedb 	bl	8000544 <__aeabi_fadd>
 800578e:	1c03      	adds	r3, r0, #0
 8005790:	1c1a      	adds	r2, r3, #0
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	615a      	str	r2, [r3, #20]
	RotationMatrix->a31 = YawTimesPitch.a31*Roll.a11 + YawTimesPitch.a32*Roll.a21 + YawTimesPitch.a33*Roll.a31;
 8005796:	19bb      	adds	r3, r7, r6
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	197b      	adds	r3, r7, r5
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	1c19      	adds	r1, r3, #0
 80057a0:	1c10      	adds	r0, r2, #0
 80057a2:	f7fb fa35 	bl	8000c10 <__aeabi_fmul>
 80057a6:	1c03      	adds	r3, r0, #0
 80057a8:	1c1c      	adds	r4, r3, #0
 80057aa:	19bb      	adds	r3, r7, r6
 80057ac:	69da      	ldr	r2, [r3, #28]
 80057ae:	197b      	adds	r3, r7, r5
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	1c19      	adds	r1, r3, #0
 80057b4:	1c10      	adds	r0, r2, #0
 80057b6:	f7fb fa2b 	bl	8000c10 <__aeabi_fmul>
 80057ba:	1c03      	adds	r3, r0, #0
 80057bc:	1c19      	adds	r1, r3, #0
 80057be:	1c20      	adds	r0, r4, #0
 80057c0:	f7fa fec0 	bl	8000544 <__aeabi_fadd>
 80057c4:	1c03      	adds	r3, r0, #0
 80057c6:	1c1c      	adds	r4, r3, #0
 80057c8:	19bb      	adds	r3, r7, r6
 80057ca:	6a1a      	ldr	r2, [r3, #32]
 80057cc:	197b      	adds	r3, r7, r5
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	1c19      	adds	r1, r3, #0
 80057d2:	1c10      	adds	r0, r2, #0
 80057d4:	f7fb fa1c 	bl	8000c10 <__aeabi_fmul>
 80057d8:	1c03      	adds	r3, r0, #0
 80057da:	1c19      	adds	r1, r3, #0
 80057dc:	1c20      	adds	r0, r4, #0
 80057de:	f7fa feb1 	bl	8000544 <__aeabi_fadd>
 80057e2:	1c03      	adds	r3, r0, #0
 80057e4:	1c1a      	adds	r2, r3, #0
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	619a      	str	r2, [r3, #24]
	RotationMatrix->a32 = YawTimesPitch.a31*Roll.a12 + YawTimesPitch.a32*Roll.a22 + YawTimesPitch.a33*Roll.a32;
 80057ea:	19bb      	adds	r3, r7, r6
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	197b      	adds	r3, r7, r5
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	1c19      	adds	r1, r3, #0
 80057f4:	1c10      	adds	r0, r2, #0
 80057f6:	f7fb fa0b 	bl	8000c10 <__aeabi_fmul>
 80057fa:	1c03      	adds	r3, r0, #0
 80057fc:	1c1c      	adds	r4, r3, #0
 80057fe:	19bb      	adds	r3, r7, r6
 8005800:	69da      	ldr	r2, [r3, #28]
 8005802:	197b      	adds	r3, r7, r5
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	1c19      	adds	r1, r3, #0
 8005808:	1c10      	adds	r0, r2, #0
 800580a:	f7fb fa01 	bl	8000c10 <__aeabi_fmul>
 800580e:	1c03      	adds	r3, r0, #0
 8005810:	1c19      	adds	r1, r3, #0
 8005812:	1c20      	adds	r0, r4, #0
 8005814:	f7fa fe96 	bl	8000544 <__aeabi_fadd>
 8005818:	1c03      	adds	r3, r0, #0
 800581a:	1c1c      	adds	r4, r3, #0
 800581c:	19bb      	adds	r3, r7, r6
 800581e:	6a1a      	ldr	r2, [r3, #32]
 8005820:	197b      	adds	r3, r7, r5
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	1c19      	adds	r1, r3, #0
 8005826:	1c10      	adds	r0, r2, #0
 8005828:	f7fb f9f2 	bl	8000c10 <__aeabi_fmul>
 800582c:	1c03      	adds	r3, r0, #0
 800582e:	1c19      	adds	r1, r3, #0
 8005830:	1c20      	adds	r0, r4, #0
 8005832:	f7fa fe87 	bl	8000544 <__aeabi_fadd>
 8005836:	1c03      	adds	r3, r0, #0
 8005838:	1c1a      	adds	r2, r3, #0
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	61da      	str	r2, [r3, #28]
	RotationMatrix->a33 = YawTimesPitch.a31*Roll.a13 + YawTimesPitch.a32*Roll.a23 + YawTimesPitch.a33*Roll.a33;
 800583e:	19bb      	adds	r3, r7, r6
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	197b      	adds	r3, r7, r5
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	1c19      	adds	r1, r3, #0
 8005848:	1c10      	adds	r0, r2, #0
 800584a:	f7fb f9e1 	bl	8000c10 <__aeabi_fmul>
 800584e:	1c03      	adds	r3, r0, #0
 8005850:	1c1c      	adds	r4, r3, #0
 8005852:	19bb      	adds	r3, r7, r6
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	197b      	adds	r3, r7, r5
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	1c19      	adds	r1, r3, #0
 800585c:	1c10      	adds	r0, r2, #0
 800585e:	f7fb f9d7 	bl	8000c10 <__aeabi_fmul>
 8005862:	1c03      	adds	r3, r0, #0
 8005864:	1c19      	adds	r1, r3, #0
 8005866:	1c20      	adds	r0, r4, #0
 8005868:	f7fa fe6c 	bl	8000544 <__aeabi_fadd>
 800586c:	1c03      	adds	r3, r0, #0
 800586e:	1c1c      	adds	r4, r3, #0
 8005870:	19bb      	adds	r3, r7, r6
 8005872:	6a1a      	ldr	r2, [r3, #32]
 8005874:	197b      	adds	r3, r7, r5
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	1c19      	adds	r1, r3, #0
 800587a:	1c10      	adds	r0, r2, #0
 800587c:	f7fb f9c8 	bl	8000c10 <__aeabi_fmul>
 8005880:	1c03      	adds	r3, r0, #0
 8005882:	1c19      	adds	r1, r3, #0
 8005884:	1c20      	adds	r0, r4, #0
 8005886:	f7fa fe5d 	bl	8000544 <__aeabi_fadd>
 800588a:	1c03      	adds	r3, r0, #0
 800588c:	1c1a      	adds	r2, r3, #0
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	46bd      	mov	sp, r7
 8005896:	b027      	add	sp, #156	; 0x9c
 8005898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800589a:	46c0      	nop			; (mov r8, r8)

0800589c <CalculateAccelerometerInEarthFrame>:

void CalculateAccelerometerInEarthFrame(struct matrix *RotationMatrix, float* accel_data, float* new_data){
 800589c:	b5b0      	push	{r4, r5, r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
	new_data[0] = accel_data[0]*RotationMatrix->a11 + accel_data[1]*RotationMatrix->a12 + accel_data[2]*RotationMatrix->a13;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	1c19      	adds	r1, r3, #0
 80058b2:	1c10      	adds	r0, r2, #0
 80058b4:	f7fb f9ac 	bl	8000c10 <__aeabi_fmul>
 80058b8:	1c03      	adds	r3, r0, #0
 80058ba:	1c1c      	adds	r4, r3, #0
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	3304      	adds	r3, #4
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	1c19      	adds	r1, r3, #0
 80058c8:	1c10      	adds	r0, r2, #0
 80058ca:	f7fb f9a1 	bl	8000c10 <__aeabi_fmul>
 80058ce:	1c03      	adds	r3, r0, #0
 80058d0:	1c19      	adds	r1, r3, #0
 80058d2:	1c20      	adds	r0, r4, #0
 80058d4:	f7fa fe36 	bl	8000544 <__aeabi_fadd>
 80058d8:	1c03      	adds	r3, r0, #0
 80058da:	1c1c      	adds	r4, r3, #0
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	3308      	adds	r3, #8
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	1c19      	adds	r1, r3, #0
 80058e8:	1c10      	adds	r0, r2, #0
 80058ea:	f7fb f991 	bl	8000c10 <__aeabi_fmul>
 80058ee:	1c03      	adds	r3, r0, #0
 80058f0:	1c19      	adds	r1, r3, #0
 80058f2:	1c20      	adds	r0, r4, #0
 80058f4:	f7fa fe26 	bl	8000544 <__aeabi_fadd>
 80058f8:	1c03      	adds	r3, r0, #0
 80058fa:	1c1a      	adds	r2, r3, #0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	601a      	str	r2, [r3, #0]
	new_data[1] = accel_data[0]*RotationMatrix->a21 + accel_data[1]*RotationMatrix->a22 + accel_data[2]*RotationMatrix->a23;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	1c19      	adds	r1, r3, #0
 800590a:	1c10      	adds	r0, r2, #0
 800590c:	f7fb f980 	bl	8000c10 <__aeabi_fmul>
 8005910:	1c03      	adds	r3, r0, #0
 8005912:	1c1c      	adds	r4, r3, #0
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	3304      	adds	r3, #4
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	1c19      	adds	r1, r3, #0
 8005920:	1c10      	adds	r0, r2, #0
 8005922:	f7fb f975 	bl	8000c10 <__aeabi_fmul>
 8005926:	1c03      	adds	r3, r0, #0
 8005928:	1c19      	adds	r1, r3, #0
 800592a:	1c20      	adds	r0, r4, #0
 800592c:	f7fa fe0a 	bl	8000544 <__aeabi_fadd>
 8005930:	1c03      	adds	r3, r0, #0
 8005932:	1c1d      	adds	r5, r3, #0
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	3308      	adds	r3, #8
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	1c19      	adds	r1, r3, #0
 8005940:	1c10      	adds	r0, r2, #0
 8005942:	f7fb f965 	bl	8000c10 <__aeabi_fmul>
 8005946:	1c03      	adds	r3, r0, #0
 8005948:	1c1a      	adds	r2, r3, #0
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	1d1c      	adds	r4, r3, #4
 800594e:	1c11      	adds	r1, r2, #0
 8005950:	1c28      	adds	r0, r5, #0
 8005952:	f7fa fdf7 	bl	8000544 <__aeabi_fadd>
 8005956:	1c03      	adds	r3, r0, #0
 8005958:	6023      	str	r3, [r4, #0]
	new_data[2] = accel_data[0]*RotationMatrix->a31 + accel_data[1]*RotationMatrix->a32 + accel_data[2]*RotationMatrix->a33;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	1c19      	adds	r1, r3, #0
 8005964:	1c10      	adds	r0, r2, #0
 8005966:	f7fb f953 	bl	8000c10 <__aeabi_fmul>
 800596a:	1c03      	adds	r3, r0, #0
 800596c:	1c1c      	adds	r4, r3, #0
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	3304      	adds	r3, #4
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	1c19      	adds	r1, r3, #0
 800597a:	1c10      	adds	r0, r2, #0
 800597c:	f7fb f948 	bl	8000c10 <__aeabi_fmul>
 8005980:	1c03      	adds	r3, r0, #0
 8005982:	1c19      	adds	r1, r3, #0
 8005984:	1c20      	adds	r0, r4, #0
 8005986:	f7fa fddd 	bl	8000544 <__aeabi_fadd>
 800598a:	1c03      	adds	r3, r0, #0
 800598c:	1c1d      	adds	r5, r3, #0
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	3308      	adds	r3, #8
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	1c19      	adds	r1, r3, #0
 800599a:	1c10      	adds	r0, r2, #0
 800599c:	f7fb f938 	bl	8000c10 <__aeabi_fmul>
 80059a0:	1c03      	adds	r3, r0, #0
 80059a2:	1c1a      	adds	r2, r3, #0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3308      	adds	r3, #8
 80059a8:	001c      	movs	r4, r3
 80059aa:	1c11      	adds	r1, r2, #0
 80059ac:	1c28      	adds	r0, r5, #0
 80059ae:	f7fa fdc9 	bl	8000544 <__aeabi_fadd>
 80059b2:	1c03      	adds	r3, r0, #0
 80059b4:	6023      	str	r3, [r4, #0]

	float norm = 1.0 / sqrt(new_data[0]*new_data[0] + new_data[1]*new_data[1] + new_data[2]*new_data[2]);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	1c19      	adds	r1, r3, #0
 80059c0:	1c10      	adds	r0, r2, #0
 80059c2:	f7fb f925 	bl	8000c10 <__aeabi_fmul>
 80059c6:	1c03      	adds	r3, r0, #0
 80059c8:	1c1c      	adds	r4, r3, #0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3304      	adds	r3, #4
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	1c19      	adds	r1, r3, #0
 80059d8:	1c10      	adds	r0, r2, #0
 80059da:	f7fb f919 	bl	8000c10 <__aeabi_fmul>
 80059de:	1c03      	adds	r3, r0, #0
 80059e0:	1c19      	adds	r1, r3, #0
 80059e2:	1c20      	adds	r0, r4, #0
 80059e4:	f7fa fdae 	bl	8000544 <__aeabi_fadd>
 80059e8:	1c03      	adds	r3, r0, #0
 80059ea:	1c1c      	adds	r4, r3, #0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3308      	adds	r3, #8
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3308      	adds	r3, #8
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	1c19      	adds	r1, r3, #0
 80059fa:	1c10      	adds	r0, r2, #0
 80059fc:	f7fb f908 	bl	8000c10 <__aeabi_fmul>
 8005a00:	1c03      	adds	r3, r0, #0
 8005a02:	1c19      	adds	r1, r3, #0
 8005a04:	1c20      	adds	r0, r4, #0
 8005a06:	f7fa fd9d 	bl	8000544 <__aeabi_fadd>
 8005a0a:	1c03      	adds	r3, r0, #0
 8005a0c:	1c18      	adds	r0, r3, #0
 8005a0e:	f7fd fa5f 	bl	8002ed0 <__aeabi_f2d>
 8005a12:	0002      	movs	r2, r0
 8005a14:	000b      	movs	r3, r1
 8005a16:	0010      	movs	r0, r2
 8005a18:	0019      	movs	r1, r3
 8005a1a:	f00a f89f 	bl	800fb5c <sqrt>
 8005a1e:	0002      	movs	r2, r0
 8005a20:	000b      	movs	r3, r1
 8005a22:	2000      	movs	r0, #0
 8005a24:	4917      	ldr	r1, [pc, #92]	; (8005a84 <CalculateAccelerometerInEarthFrame+0x1e8>)
 8005a26:	f7fb ffa5 	bl	8001974 <__aeabi_ddiv>
 8005a2a:	0002      	movs	r2, r0
 8005a2c:	000b      	movs	r3, r1
 8005a2e:	0010      	movs	r0, r2
 8005a30:	0019      	movs	r1, r3
 8005a32:	f7fd fa95 	bl	8002f60 <__aeabi_d2f>
 8005a36:	1c03      	adds	r3, r0, #0
 8005a38:	617b      	str	r3, [r7, #20]
	new_data[0] *= norm;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6979      	ldr	r1, [r7, #20]
 8005a40:	1c18      	adds	r0, r3, #0
 8005a42:	f7fb f8e5 	bl	8000c10 <__aeabi_fmul>
 8005a46:	1c03      	adds	r3, r0, #0
 8005a48:	1c1a      	adds	r2, r3, #0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
	new_data[1] *= norm;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3304      	adds	r3, #4
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	1d1c      	adds	r4, r3, #4
 8005a58:	6979      	ldr	r1, [r7, #20]
 8005a5a:	1c10      	adds	r0, r2, #0
 8005a5c:	f7fb f8d8 	bl	8000c10 <__aeabi_fmul>
 8005a60:	1c03      	adds	r3, r0, #0
 8005a62:	6023      	str	r3, [r4, #0]
	new_data[2] *= norm;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3308      	adds	r3, #8
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	001c      	movs	r4, r3
 8005a70:	6979      	ldr	r1, [r7, #20]
 8005a72:	1c10      	adds	r0, r2, #0
 8005a74:	f7fb f8cc 	bl	8000c10 <__aeabi_fmul>
 8005a78:	1c03      	adds	r3, r0, #0
 8005a7a:	6023      	str	r3, [r4, #0]
}
 8005a7c:	46c0      	nop			; (mov r8, r8)
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b006      	add	sp, #24
 8005a82:	bdb0      	pop	{r4, r5, r7, pc}
 8005a84:	3ff00000 	.word	0x3ff00000

08005a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8a:	46de      	mov	lr, fp
 8005a8c:	4657      	mov	r7, sl
 8005a8e:	464e      	mov	r6, r9
 8005a90:	4645      	mov	r5, r8
 8005a92:	b5e0      	push	{r5, r6, r7, lr}
 8005a94:	4cfe      	ldr	r4, [pc, #1016]	; (8005e90 <main+0x408>)
 8005a96:	44a5      	add	sp, r4
 8005a98:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a9a:	f003 fc8d 	bl	80093b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a9e:	f002 ff65 	bl	800896c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005aa2:	f003 f90f 	bl	8008cc4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005aa6:	f003 f81b 	bl	8008ae0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8005aaa:	f003 f8bd 	bl	8008c28 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8005aae:	f002 ffe9 	bl	8008a84 <MX_RTC_Init>
  MX_TIM16_Init();
 8005ab2:	f003 f891 	bl	8008bd8 <MX_TIM16_Init>
  MX_I2C1_Init();
 8005ab6:	f002 ffa5 	bl	8008a04 <MX_I2C1_Init>
  MX_SPI2_Init();
 8005aba:	f003 f84f 	bl	8008b5c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  	ICM_Initialize(&hspi1, &huart2, IMU_MOVABLE);
 8005abe:	49f5      	ldr	r1, [pc, #980]	; (8005e94 <main+0x40c>)
 8005ac0:	4bf5      	ldr	r3, [pc, #980]	; (8005e98 <main+0x410>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7fd fc07 	bl	80032d8 <ICM_Initialize>
	ICM_Initialize(&hspi2, &huart2, IMU_FIXED);
 8005aca:	49f2      	ldr	r1, [pc, #968]	; (8005e94 <main+0x40c>)
 8005acc:	4bf3      	ldr	r3, [pc, #972]	; (8005e9c <main+0x414>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7fd fc01 	bl	80032d8 <ICM_Initialize>

	char uart_buffer[200];

	float accel_data_0[3] = {0,0,0};
 8005ad6:	49f2      	ldr	r1, [pc, #968]	; (8005ea0 <main+0x418>)
 8005ad8:	2520      	movs	r5, #32
 8005ada:	2308      	movs	r3, #8
 8005adc:	2208      	movs	r2, #8
 8005ade:	4694      	mov	ip, r2
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	4690      	mov	r8, r2
 8005ae4:	44b8      	add	r8, r7
 8005ae6:	44c4      	add	ip, r8
 8005ae8:	4463      	add	r3, ip
 8005aea:	195b      	adds	r3, r3, r5
 8005aec:	185b      	adds	r3, r3, r1
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	2308      	movs	r3, #8
 8005af4:	2208      	movs	r2, #8
 8005af6:	4694      	mov	ip, r2
 8005af8:	2208      	movs	r2, #8
 8005afa:	4690      	mov	r8, r2
 8005afc:	44b8      	add	r8, r7
 8005afe:	44c4      	add	ip, r8
 8005b00:	4463      	add	r3, ip
 8005b02:	195b      	adds	r3, r3, r5
 8005b04:	185b      	adds	r3, r3, r1
 8005b06:	2200      	movs	r2, #0
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	4694      	mov	ip, r2
 8005b10:	2208      	movs	r2, #8
 8005b12:	4690      	mov	r8, r2
 8005b14:	44b8      	add	r8, r7
 8005b16:	44c4      	add	ip, r8
 8005b18:	4463      	add	r3, ip
 8005b1a:	195b      	adds	r3, r3, r5
 8005b1c:	185b      	adds	r3, r3, r1
 8005b1e:	2200      	movs	r2, #0
 8005b20:	609a      	str	r2, [r3, #8]
	float accel_data_1[3] = {0,0,0};
 8005b22:	4be0      	ldr	r3, [pc, #896]	; (8005ea4 <main+0x41c>)
 8005b24:	4ae0      	ldr	r2, [pc, #896]	; (8005ea8 <main+0x420>)
 8005b26:	4694      	mov	ip, r2
 8005b28:	2220      	movs	r2, #32
 8005b2a:	4690      	mov	r8, r2
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	4691      	mov	r9, r2
 8005b30:	2208      	movs	r2, #8
 8005b32:	4692      	mov	sl, r2
 8005b34:	2208      	movs	r2, #8
 8005b36:	4693      	mov	fp, r2
 8005b38:	44bb      	add	fp, r7
 8005b3a:	44da      	add	sl, fp
 8005b3c:	44d1      	add	r9, sl
 8005b3e:	44c8      	add	r8, r9
 8005b40:	44c4      	add	ip, r8
 8005b42:	4463      	add	r3, ip
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	4bd6      	ldr	r3, [pc, #856]	; (8005ea4 <main+0x41c>)
 8005b4a:	4ad7      	ldr	r2, [pc, #860]	; (8005ea8 <main+0x420>)
 8005b4c:	4694      	mov	ip, r2
 8005b4e:	2220      	movs	r2, #32
 8005b50:	4690      	mov	r8, r2
 8005b52:	2208      	movs	r2, #8
 8005b54:	4691      	mov	r9, r2
 8005b56:	2208      	movs	r2, #8
 8005b58:	4692      	mov	sl, r2
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	4693      	mov	fp, r2
 8005b5e:	44bb      	add	fp, r7
 8005b60:	44da      	add	sl, fp
 8005b62:	44d1      	add	r9, sl
 8005b64:	44c8      	add	r8, r9
 8005b66:	44c4      	add	ip, r8
 8005b68:	4463      	add	r3, ip
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	4bcd      	ldr	r3, [pc, #820]	; (8005ea4 <main+0x41c>)
 8005b70:	4acd      	ldr	r2, [pc, #820]	; (8005ea8 <main+0x420>)
 8005b72:	4694      	mov	ip, r2
 8005b74:	2220      	movs	r2, #32
 8005b76:	4690      	mov	r8, r2
 8005b78:	2208      	movs	r2, #8
 8005b7a:	4691      	mov	r9, r2
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	4692      	mov	sl, r2
 8005b80:	2208      	movs	r2, #8
 8005b82:	4693      	mov	fp, r2
 8005b84:	44bb      	add	fp, r7
 8005b86:	44da      	add	sl, fp
 8005b88:	44d1      	add	r9, sl
 8005b8a:	44c8      	add	r8, r9
 8005b8c:	44c4      	add	ip, r8
 8005b8e:	4463      	add	r3, ip
 8005b90:	2200      	movs	r2, #0
 8005b92:	609a      	str	r2, [r3, #8]
	float gyro_data_0[3] = {0,0,0};
 8005b94:	4bc5      	ldr	r3, [pc, #788]	; (8005eac <main+0x424>)
 8005b96:	4ac4      	ldr	r2, [pc, #784]	; (8005ea8 <main+0x420>)
 8005b98:	4694      	mov	ip, r2
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	4690      	mov	r8, r2
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	4691      	mov	r9, r2
 8005ba2:	2208      	movs	r2, #8
 8005ba4:	4692      	mov	sl, r2
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	4693      	mov	fp, r2
 8005baa:	44bb      	add	fp, r7
 8005bac:	44da      	add	sl, fp
 8005bae:	44d1      	add	r9, sl
 8005bb0:	44c8      	add	r8, r9
 8005bb2:	44c4      	add	ip, r8
 8005bb4:	4463      	add	r3, ip
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	4bbc      	ldr	r3, [pc, #752]	; (8005eac <main+0x424>)
 8005bbc:	4aba      	ldr	r2, [pc, #744]	; (8005ea8 <main+0x420>)
 8005bbe:	4694      	mov	ip, r2
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	4690      	mov	r8, r2
 8005bc4:	2208      	movs	r2, #8
 8005bc6:	4691      	mov	r9, r2
 8005bc8:	2208      	movs	r2, #8
 8005bca:	4692      	mov	sl, r2
 8005bcc:	2208      	movs	r2, #8
 8005bce:	4693      	mov	fp, r2
 8005bd0:	44bb      	add	fp, r7
 8005bd2:	44da      	add	sl, fp
 8005bd4:	44d1      	add	r9, sl
 8005bd6:	44c8      	add	r8, r9
 8005bd8:	44c4      	add	ip, r8
 8005bda:	4463      	add	r3, ip
 8005bdc:	2200      	movs	r2, #0
 8005bde:	605a      	str	r2, [r3, #4]
 8005be0:	4bb2      	ldr	r3, [pc, #712]	; (8005eac <main+0x424>)
 8005be2:	4ab1      	ldr	r2, [pc, #708]	; (8005ea8 <main+0x420>)
 8005be4:	4694      	mov	ip, r2
 8005be6:	2220      	movs	r2, #32
 8005be8:	4690      	mov	r8, r2
 8005bea:	2208      	movs	r2, #8
 8005bec:	4691      	mov	r9, r2
 8005bee:	2208      	movs	r2, #8
 8005bf0:	4692      	mov	sl, r2
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	4693      	mov	fp, r2
 8005bf6:	44bb      	add	fp, r7
 8005bf8:	44da      	add	sl, fp
 8005bfa:	44d1      	add	r9, sl
 8005bfc:	44c8      	add	r8, r9
 8005bfe:	44c4      	add	ip, r8
 8005c00:	4463      	add	r3, ip
 8005c02:	2200      	movs	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]
	float gyro_data_1[3] = {0,0,0};
 8005c06:	4baa      	ldr	r3, [pc, #680]	; (8005eb0 <main+0x428>)
 8005c08:	4aa7      	ldr	r2, [pc, #668]	; (8005ea8 <main+0x420>)
 8005c0a:	4694      	mov	ip, r2
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	4690      	mov	r8, r2
 8005c10:	2208      	movs	r2, #8
 8005c12:	4691      	mov	r9, r2
 8005c14:	2208      	movs	r2, #8
 8005c16:	4692      	mov	sl, r2
 8005c18:	2208      	movs	r2, #8
 8005c1a:	4693      	mov	fp, r2
 8005c1c:	44bb      	add	fp, r7
 8005c1e:	44da      	add	sl, fp
 8005c20:	44d1      	add	r9, sl
 8005c22:	44c8      	add	r8, r9
 8005c24:	44c4      	add	ip, r8
 8005c26:	4463      	add	r3, ip
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	4ba0      	ldr	r3, [pc, #640]	; (8005eb0 <main+0x428>)
 8005c2e:	4a9e      	ldr	r2, [pc, #632]	; (8005ea8 <main+0x420>)
 8005c30:	4694      	mov	ip, r2
 8005c32:	2220      	movs	r2, #32
 8005c34:	4690      	mov	r8, r2
 8005c36:	2208      	movs	r2, #8
 8005c38:	4691      	mov	r9, r2
 8005c3a:	2208      	movs	r2, #8
 8005c3c:	4692      	mov	sl, r2
 8005c3e:	2208      	movs	r2, #8
 8005c40:	4693      	mov	fp, r2
 8005c42:	44bb      	add	fp, r7
 8005c44:	44da      	add	sl, fp
 8005c46:	44d1      	add	r9, sl
 8005c48:	44c8      	add	r8, r9
 8005c4a:	44c4      	add	ip, r8
 8005c4c:	4463      	add	r3, ip
 8005c4e:	2200      	movs	r2, #0
 8005c50:	605a      	str	r2, [r3, #4]
 8005c52:	4b97      	ldr	r3, [pc, #604]	; (8005eb0 <main+0x428>)
 8005c54:	4a94      	ldr	r2, [pc, #592]	; (8005ea8 <main+0x420>)
 8005c56:	4694      	mov	ip, r2
 8005c58:	2220      	movs	r2, #32
 8005c5a:	4690      	mov	r8, r2
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	4691      	mov	r9, r2
 8005c60:	2208      	movs	r2, #8
 8005c62:	4692      	mov	sl, r2
 8005c64:	2208      	movs	r2, #8
 8005c66:	4693      	mov	fp, r2
 8005c68:	44bb      	add	fp, r7
 8005c6a:	44da      	add	sl, fp
 8005c6c:	44d1      	add	r9, sl
 8005c6e:	44c8      	add	r8, r9
 8005c70:	44c4      	add	ip, r8
 8005c72:	4463      	add	r3, ip
 8005c74:	2200      	movs	r2, #0
 8005c76:	609a      	str	r2, [r3, #8]
	float accel_data_earthframe_0[3] = {0,0,0};
 8005c78:	4b8e      	ldr	r3, [pc, #568]	; (8005eb4 <main+0x42c>)
 8005c7a:	4a8b      	ldr	r2, [pc, #556]	; (8005ea8 <main+0x420>)
 8005c7c:	4694      	mov	ip, r2
 8005c7e:	2220      	movs	r2, #32
 8005c80:	4690      	mov	r8, r2
 8005c82:	2208      	movs	r2, #8
 8005c84:	4691      	mov	r9, r2
 8005c86:	2208      	movs	r2, #8
 8005c88:	4692      	mov	sl, r2
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	4693      	mov	fp, r2
 8005c8e:	44bb      	add	fp, r7
 8005c90:	44da      	add	sl, fp
 8005c92:	44d1      	add	r9, sl
 8005c94:	44c8      	add	r8, r9
 8005c96:	44c4      	add	ip, r8
 8005c98:	4463      	add	r3, ip
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	4b85      	ldr	r3, [pc, #532]	; (8005eb4 <main+0x42c>)
 8005ca0:	4a81      	ldr	r2, [pc, #516]	; (8005ea8 <main+0x420>)
 8005ca2:	4694      	mov	ip, r2
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	4690      	mov	r8, r2
 8005ca8:	2208      	movs	r2, #8
 8005caa:	4691      	mov	r9, r2
 8005cac:	2208      	movs	r2, #8
 8005cae:	4692      	mov	sl, r2
 8005cb0:	2208      	movs	r2, #8
 8005cb2:	4693      	mov	fp, r2
 8005cb4:	44bb      	add	fp, r7
 8005cb6:	44da      	add	sl, fp
 8005cb8:	44d1      	add	r9, sl
 8005cba:	44c8      	add	r8, r9
 8005cbc:	44c4      	add	ip, r8
 8005cbe:	4463      	add	r3, ip
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	605a      	str	r2, [r3, #4]
 8005cc4:	4b7b      	ldr	r3, [pc, #492]	; (8005eb4 <main+0x42c>)
 8005cc6:	4a78      	ldr	r2, [pc, #480]	; (8005ea8 <main+0x420>)
 8005cc8:	4694      	mov	ip, r2
 8005cca:	2220      	movs	r2, #32
 8005ccc:	4690      	mov	r8, r2
 8005cce:	2208      	movs	r2, #8
 8005cd0:	4691      	mov	r9, r2
 8005cd2:	2208      	movs	r2, #8
 8005cd4:	4692      	mov	sl, r2
 8005cd6:	2208      	movs	r2, #8
 8005cd8:	4693      	mov	fp, r2
 8005cda:	44bb      	add	fp, r7
 8005cdc:	44da      	add	sl, fp
 8005cde:	44d1      	add	r9, sl
 8005ce0:	44c8      	add	r8, r9
 8005ce2:	44c4      	add	ip, r8
 8005ce4:	4463      	add	r3, ip
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	609a      	str	r2, [r3, #8]
	float accel_data_earthframe_1[3] = {0,0,0};
 8005cea:	4b73      	ldr	r3, [pc, #460]	; (8005eb8 <main+0x430>)
 8005cec:	4a6e      	ldr	r2, [pc, #440]	; (8005ea8 <main+0x420>)
 8005cee:	4694      	mov	ip, r2
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	4690      	mov	r8, r2
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	4691      	mov	r9, r2
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	4692      	mov	sl, r2
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	4693      	mov	fp, r2
 8005d00:	44bb      	add	fp, r7
 8005d02:	44da      	add	sl, fp
 8005d04:	44d1      	add	r9, sl
 8005d06:	44c8      	add	r8, r9
 8005d08:	44c4      	add	ip, r8
 8005d0a:	4463      	add	r3, ip
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	4b69      	ldr	r3, [pc, #420]	; (8005eb8 <main+0x430>)
 8005d12:	4a65      	ldr	r2, [pc, #404]	; (8005ea8 <main+0x420>)
 8005d14:	4694      	mov	ip, r2
 8005d16:	2220      	movs	r2, #32
 8005d18:	4690      	mov	r8, r2
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	4691      	mov	r9, r2
 8005d1e:	2208      	movs	r2, #8
 8005d20:	4692      	mov	sl, r2
 8005d22:	2208      	movs	r2, #8
 8005d24:	4693      	mov	fp, r2
 8005d26:	44bb      	add	fp, r7
 8005d28:	44da      	add	sl, fp
 8005d2a:	44d1      	add	r9, sl
 8005d2c:	44c8      	add	r8, r9
 8005d2e:	44c4      	add	ip, r8
 8005d30:	4463      	add	r3, ip
 8005d32:	2200      	movs	r2, #0
 8005d34:	605a      	str	r2, [r3, #4]
 8005d36:	4b60      	ldr	r3, [pc, #384]	; (8005eb8 <main+0x430>)
 8005d38:	4a5b      	ldr	r2, [pc, #364]	; (8005ea8 <main+0x420>)
 8005d3a:	4694      	mov	ip, r2
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	4690      	mov	r8, r2
 8005d40:	2208      	movs	r2, #8
 8005d42:	4691      	mov	r9, r2
 8005d44:	2208      	movs	r2, #8
 8005d46:	4692      	mov	sl, r2
 8005d48:	2208      	movs	r2, #8
 8005d4a:	4693      	mov	fp, r2
 8005d4c:	44bb      	add	fp, r7
 8005d4e:	44da      	add	sl, fp
 8005d50:	44d1      	add	r9, sl
 8005d52:	44c8      	add	r8, r9
 8005d54:	44c4      	add	ip, r8
 8005d56:	4463      	add	r3, ip
 8005d58:	2200      	movs	r2, #0
 8005d5a:	609a      	str	r2, [r3, #8]
	float gyro_bias_0[3] = {0,0,0};
 8005d5c:	4b57      	ldr	r3, [pc, #348]	; (8005ebc <main+0x434>)
 8005d5e:	4a52      	ldr	r2, [pc, #328]	; (8005ea8 <main+0x420>)
 8005d60:	4694      	mov	ip, r2
 8005d62:	2220      	movs	r2, #32
 8005d64:	4690      	mov	r8, r2
 8005d66:	2208      	movs	r2, #8
 8005d68:	4691      	mov	r9, r2
 8005d6a:	2208      	movs	r2, #8
 8005d6c:	4692      	mov	sl, r2
 8005d6e:	2208      	movs	r2, #8
 8005d70:	4693      	mov	fp, r2
 8005d72:	44bb      	add	fp, r7
 8005d74:	44da      	add	sl, fp
 8005d76:	44d1      	add	r9, sl
 8005d78:	44c8      	add	r8, r9
 8005d7a:	44c4      	add	ip, r8
 8005d7c:	4463      	add	r3, ip
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	4b4e      	ldr	r3, [pc, #312]	; (8005ebc <main+0x434>)
 8005d84:	4a48      	ldr	r2, [pc, #288]	; (8005ea8 <main+0x420>)
 8005d86:	4694      	mov	ip, r2
 8005d88:	2220      	movs	r2, #32
 8005d8a:	4690      	mov	r8, r2
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	4691      	mov	r9, r2
 8005d90:	2208      	movs	r2, #8
 8005d92:	4692      	mov	sl, r2
 8005d94:	2208      	movs	r2, #8
 8005d96:	4693      	mov	fp, r2
 8005d98:	44bb      	add	fp, r7
 8005d9a:	44da      	add	sl, fp
 8005d9c:	44d1      	add	r9, sl
 8005d9e:	44c8      	add	r8, r9
 8005da0:	44c4      	add	ip, r8
 8005da2:	4463      	add	r3, ip
 8005da4:	2200      	movs	r2, #0
 8005da6:	605a      	str	r2, [r3, #4]
 8005da8:	4b44      	ldr	r3, [pc, #272]	; (8005ebc <main+0x434>)
 8005daa:	4a3f      	ldr	r2, [pc, #252]	; (8005ea8 <main+0x420>)
 8005dac:	4694      	mov	ip, r2
 8005dae:	2220      	movs	r2, #32
 8005db0:	4690      	mov	r8, r2
 8005db2:	2208      	movs	r2, #8
 8005db4:	4691      	mov	r9, r2
 8005db6:	2208      	movs	r2, #8
 8005db8:	4692      	mov	sl, r2
 8005dba:	2208      	movs	r2, #8
 8005dbc:	4693      	mov	fp, r2
 8005dbe:	44bb      	add	fp, r7
 8005dc0:	44da      	add	sl, fp
 8005dc2:	44d1      	add	r9, sl
 8005dc4:	44c8      	add	r8, r9
 8005dc6:	44c4      	add	ip, r8
 8005dc8:	4463      	add	r3, ip
 8005dca:	2200      	movs	r2, #0
 8005dcc:	609a      	str	r2, [r3, #8]
	float gyro_bias_1[3] = {0,0,0};
 8005dce:	4b3c      	ldr	r3, [pc, #240]	; (8005ec0 <main+0x438>)
 8005dd0:	4a35      	ldr	r2, [pc, #212]	; (8005ea8 <main+0x420>)
 8005dd2:	4694      	mov	ip, r2
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	4690      	mov	r8, r2
 8005dd8:	2208      	movs	r2, #8
 8005dda:	4691      	mov	r9, r2
 8005ddc:	2208      	movs	r2, #8
 8005dde:	4692      	mov	sl, r2
 8005de0:	2208      	movs	r2, #8
 8005de2:	4693      	mov	fp, r2
 8005de4:	44bb      	add	fp, r7
 8005de6:	44da      	add	sl, fp
 8005de8:	44d1      	add	r9, sl
 8005dea:	44c8      	add	r8, r9
 8005dec:	44c4      	add	ip, r8
 8005dee:	4463      	add	r3, ip
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	4b32      	ldr	r3, [pc, #200]	; (8005ec0 <main+0x438>)
 8005df6:	4a2c      	ldr	r2, [pc, #176]	; (8005ea8 <main+0x420>)
 8005df8:	4694      	mov	ip, r2
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	4690      	mov	r8, r2
 8005dfe:	2208      	movs	r2, #8
 8005e00:	4691      	mov	r9, r2
 8005e02:	2208      	movs	r2, #8
 8005e04:	4692      	mov	sl, r2
 8005e06:	2208      	movs	r2, #8
 8005e08:	4693      	mov	fp, r2
 8005e0a:	44bb      	add	fp, r7
 8005e0c:	44da      	add	sl, fp
 8005e0e:	44d1      	add	r9, sl
 8005e10:	44c8      	add	r8, r9
 8005e12:	44c4      	add	ip, r8
 8005e14:	4463      	add	r3, ip
 8005e16:	2200      	movs	r2, #0
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	4b29      	ldr	r3, [pc, #164]	; (8005ec0 <main+0x438>)
 8005e1c:	4a22      	ldr	r2, [pc, #136]	; (8005ea8 <main+0x420>)
 8005e1e:	4694      	mov	ip, r2
 8005e20:	2220      	movs	r2, #32
 8005e22:	4690      	mov	r8, r2
 8005e24:	2208      	movs	r2, #8
 8005e26:	4691      	mov	r9, r2
 8005e28:	2208      	movs	r2, #8
 8005e2a:	4692      	mov	sl, r2
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	4693      	mov	fp, r2
 8005e30:	44bb      	add	fp, r7
 8005e32:	44da      	add	sl, fp
 8005e34:	44d1      	add	r9, sl
 8005e36:	44c8      	add	r8, r9
 8005e38:	44c4      	add	ip, r8
 8005e3a:	4463      	add	r3, ip
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	609a      	str	r2, [r3, #8]
	float accel_bias_0[2] = {0,0};
 8005e40:	4b20      	ldr	r3, [pc, #128]	; (8005ec4 <main+0x43c>)
 8005e42:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <main+0x420>)
 8005e44:	4694      	mov	ip, r2
 8005e46:	2220      	movs	r2, #32
 8005e48:	4690      	mov	r8, r2
 8005e4a:	2208      	movs	r2, #8
 8005e4c:	4691      	mov	r9, r2
 8005e4e:	2208      	movs	r2, #8
 8005e50:	4692      	mov	sl, r2
 8005e52:	2208      	movs	r2, #8
 8005e54:	4693      	mov	fp, r2
 8005e56:	44bb      	add	fp, r7
 8005e58:	44da      	add	sl, fp
 8005e5a:	44d1      	add	r9, sl
 8005e5c:	44c8      	add	r8, r9
 8005e5e:	44c4      	add	ip, r8
 8005e60:	4463      	add	r3, ip
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	4b17      	ldr	r3, [pc, #92]	; (8005ec4 <main+0x43c>)
 8005e68:	4a0f      	ldr	r2, [pc, #60]	; (8005ea8 <main+0x420>)
 8005e6a:	4694      	mov	ip, r2
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	4690      	mov	r8, r2
 8005e70:	2208      	movs	r2, #8
 8005e72:	4691      	mov	r9, r2
 8005e74:	2208      	movs	r2, #8
 8005e76:	4692      	mov	sl, r2
 8005e78:	2208      	movs	r2, #8
 8005e7a:	4693      	mov	fp, r2
 8005e7c:	44bb      	add	fp, r7
 8005e7e:	44da      	add	sl, fp
 8005e80:	44d1      	add	r9, sl
 8005e82:	44c8      	add	r8, r9
 8005e84:	44c4      	add	ip, r8
 8005e86:	4463      	add	r3, ip
 8005e88:	2200      	movs	r2, #0
 8005e8a:	605a      	str	r2, [r3, #4]
 8005e8c:	e01c      	b.n	8005ec8 <main+0x440>
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	fffff394 	.word	0xfffff394
 8005e94:	20000500 	.word	0x20000500
 8005e98:	2000049c 	.word	0x2000049c
 8005e9c:	200003c0 	.word	0x200003c0
 8005ea0:	00000b14 	.word	0x00000b14
 8005ea4:	ffffff00 	.word	0xffffff00
 8005ea8:	00000c08 	.word	0x00000c08
 8005eac:	fffffef4 	.word	0xfffffef4
 8005eb0:	fffffee8 	.word	0xfffffee8
 8005eb4:	fffffedc 	.word	0xfffffedc
 8005eb8:	fffffed0 	.word	0xfffffed0
 8005ebc:	fffffec4 	.word	0xfffffec4
 8005ec0:	fffffeb8 	.word	0xfffffeb8
 8005ec4:	fffffeb0 	.word	0xfffffeb0
	float accel_bias_1[2] = {0,0};
 8005ec8:	4bfd      	ldr	r3, [pc, #1012]	; (80062c0 <main+0x838>)
 8005eca:	4afe      	ldr	r2, [pc, #1016]	; (80062c4 <main+0x83c>)
 8005ecc:	4694      	mov	ip, r2
 8005ece:	2220      	movs	r2, #32
 8005ed0:	4690      	mov	r8, r2
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	4691      	mov	r9, r2
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	4692      	mov	sl, r2
 8005eda:	2208      	movs	r2, #8
 8005edc:	4693      	mov	fp, r2
 8005ede:	44bb      	add	fp, r7
 8005ee0:	44da      	add	sl, fp
 8005ee2:	44d1      	add	r9, sl
 8005ee4:	44c8      	add	r8, r9
 8005ee6:	44c4      	add	ip, r8
 8005ee8:	4463      	add	r3, ip
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	4bf4      	ldr	r3, [pc, #976]	; (80062c0 <main+0x838>)
 8005ef0:	4af4      	ldr	r2, [pc, #976]	; (80062c4 <main+0x83c>)
 8005ef2:	4694      	mov	ip, r2
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	4690      	mov	r8, r2
 8005ef8:	2208      	movs	r2, #8
 8005efa:	4691      	mov	r9, r2
 8005efc:	2208      	movs	r2, #8
 8005efe:	4692      	mov	sl, r2
 8005f00:	2208      	movs	r2, #8
 8005f02:	4693      	mov	fp, r2
 8005f04:	44bb      	add	fp, r7
 8005f06:	44da      	add	sl, fp
 8005f08:	44d1      	add	r9, sl
 8005f0a:	44c8      	add	r8, r9
 8005f0c:	44c4      	add	ip, r8
 8005f0e:	4463      	add	r3, ip
 8005f10:	2200      	movs	r2, #0
 8005f12:	605a      	str	r2, [r3, #4]

	float tampering_buffer_0[6][TAMPERING_BUFFER_SIZE];
	float tampering_buffer_1[6][TAMPERING_BUFFER_SIZE];

	// High pass Filter Variables
	float low_pass_gyro_0[3] = {0,0,0};
 8005f14:	4bec      	ldr	r3, [pc, #944]	; (80062c8 <main+0x840>)
 8005f16:	4aeb      	ldr	r2, [pc, #940]	; (80062c4 <main+0x83c>)
 8005f18:	4694      	mov	ip, r2
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	4690      	mov	r8, r2
 8005f1e:	2208      	movs	r2, #8
 8005f20:	4691      	mov	r9, r2
 8005f22:	2208      	movs	r2, #8
 8005f24:	4692      	mov	sl, r2
 8005f26:	2208      	movs	r2, #8
 8005f28:	4693      	mov	fp, r2
 8005f2a:	44bb      	add	fp, r7
 8005f2c:	44da      	add	sl, fp
 8005f2e:	44d1      	add	r9, sl
 8005f30:	44c8      	add	r8, r9
 8005f32:	44c4      	add	ip, r8
 8005f34:	4463      	add	r3, ip
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	4be3      	ldr	r3, [pc, #908]	; (80062c8 <main+0x840>)
 8005f3c:	4ae1      	ldr	r2, [pc, #900]	; (80062c4 <main+0x83c>)
 8005f3e:	4694      	mov	ip, r2
 8005f40:	2220      	movs	r2, #32
 8005f42:	4690      	mov	r8, r2
 8005f44:	2208      	movs	r2, #8
 8005f46:	4691      	mov	r9, r2
 8005f48:	2208      	movs	r2, #8
 8005f4a:	4692      	mov	sl, r2
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	4693      	mov	fp, r2
 8005f50:	44bb      	add	fp, r7
 8005f52:	44da      	add	sl, fp
 8005f54:	44d1      	add	r9, sl
 8005f56:	44c8      	add	r8, r9
 8005f58:	44c4      	add	ip, r8
 8005f5a:	4463      	add	r3, ip
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	605a      	str	r2, [r3, #4]
 8005f60:	4bd9      	ldr	r3, [pc, #868]	; (80062c8 <main+0x840>)
 8005f62:	4ad8      	ldr	r2, [pc, #864]	; (80062c4 <main+0x83c>)
 8005f64:	4694      	mov	ip, r2
 8005f66:	2220      	movs	r2, #32
 8005f68:	4690      	mov	r8, r2
 8005f6a:	2208      	movs	r2, #8
 8005f6c:	4691      	mov	r9, r2
 8005f6e:	2208      	movs	r2, #8
 8005f70:	4692      	mov	sl, r2
 8005f72:	2208      	movs	r2, #8
 8005f74:	4693      	mov	fp, r2
 8005f76:	44bb      	add	fp, r7
 8005f78:	44da      	add	sl, fp
 8005f7a:	44d1      	add	r9, sl
 8005f7c:	44c8      	add	r8, r9
 8005f7e:	44c4      	add	ip, r8
 8005f80:	4463      	add	r3, ip
 8005f82:	2200      	movs	r2, #0
 8005f84:	609a      	str	r2, [r3, #8]
	float low_pass_gyro_1[3] = {0,0,0};
 8005f86:	4bd1      	ldr	r3, [pc, #836]	; (80062cc <main+0x844>)
 8005f88:	4ace      	ldr	r2, [pc, #824]	; (80062c4 <main+0x83c>)
 8005f8a:	4694      	mov	ip, r2
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	4690      	mov	r8, r2
 8005f90:	2208      	movs	r2, #8
 8005f92:	4691      	mov	r9, r2
 8005f94:	2208      	movs	r2, #8
 8005f96:	4692      	mov	sl, r2
 8005f98:	2208      	movs	r2, #8
 8005f9a:	4693      	mov	fp, r2
 8005f9c:	44bb      	add	fp, r7
 8005f9e:	44da      	add	sl, fp
 8005fa0:	44d1      	add	r9, sl
 8005fa2:	44c8      	add	r8, r9
 8005fa4:	44c4      	add	ip, r8
 8005fa6:	4463      	add	r3, ip
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	4bc7      	ldr	r3, [pc, #796]	; (80062cc <main+0x844>)
 8005fae:	4ac5      	ldr	r2, [pc, #788]	; (80062c4 <main+0x83c>)
 8005fb0:	4694      	mov	ip, r2
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	4690      	mov	r8, r2
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	4691      	mov	r9, r2
 8005fba:	2208      	movs	r2, #8
 8005fbc:	4692      	mov	sl, r2
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	4693      	mov	fp, r2
 8005fc2:	44bb      	add	fp, r7
 8005fc4:	44da      	add	sl, fp
 8005fc6:	44d1      	add	r9, sl
 8005fc8:	44c8      	add	r8, r9
 8005fca:	44c4      	add	ip, r8
 8005fcc:	4463      	add	r3, ip
 8005fce:	2200      	movs	r2, #0
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	4bbe      	ldr	r3, [pc, #760]	; (80062cc <main+0x844>)
 8005fd4:	4abb      	ldr	r2, [pc, #748]	; (80062c4 <main+0x83c>)
 8005fd6:	4694      	mov	ip, r2
 8005fd8:	2220      	movs	r2, #32
 8005fda:	4690      	mov	r8, r2
 8005fdc:	2208      	movs	r2, #8
 8005fde:	4691      	mov	r9, r2
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	4692      	mov	sl, r2
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	4693      	mov	fp, r2
 8005fe8:	44bb      	add	fp, r7
 8005fea:	44da      	add	sl, fp
 8005fec:	44d1      	add	r9, sl
 8005fee:	44c8      	add	r8, r9
 8005ff0:	44c4      	add	ip, r8
 8005ff2:	4463      	add	r3, ip
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	609a      	str	r2, [r3, #8]
	float prev_low_pass_gyro_0[3] = {0,0,0};
 8005ff8:	4bb5      	ldr	r3, [pc, #724]	; (80062d0 <main+0x848>)
 8005ffa:	4ab2      	ldr	r2, [pc, #712]	; (80062c4 <main+0x83c>)
 8005ffc:	4694      	mov	ip, r2
 8005ffe:	2220      	movs	r2, #32
 8006000:	4690      	mov	r8, r2
 8006002:	2208      	movs	r2, #8
 8006004:	4691      	mov	r9, r2
 8006006:	2208      	movs	r2, #8
 8006008:	4692      	mov	sl, r2
 800600a:	2208      	movs	r2, #8
 800600c:	4693      	mov	fp, r2
 800600e:	44bb      	add	fp, r7
 8006010:	44da      	add	sl, fp
 8006012:	44d1      	add	r9, sl
 8006014:	44c8      	add	r8, r9
 8006016:	44c4      	add	ip, r8
 8006018:	4463      	add	r3, ip
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	4bac      	ldr	r3, [pc, #688]	; (80062d0 <main+0x848>)
 8006020:	4aa8      	ldr	r2, [pc, #672]	; (80062c4 <main+0x83c>)
 8006022:	4694      	mov	ip, r2
 8006024:	2220      	movs	r2, #32
 8006026:	4690      	mov	r8, r2
 8006028:	2208      	movs	r2, #8
 800602a:	4691      	mov	r9, r2
 800602c:	2208      	movs	r2, #8
 800602e:	4692      	mov	sl, r2
 8006030:	2208      	movs	r2, #8
 8006032:	4693      	mov	fp, r2
 8006034:	44bb      	add	fp, r7
 8006036:	44da      	add	sl, fp
 8006038:	44d1      	add	r9, sl
 800603a:	44c8      	add	r8, r9
 800603c:	44c4      	add	ip, r8
 800603e:	4463      	add	r3, ip
 8006040:	2200      	movs	r2, #0
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	4ba2      	ldr	r3, [pc, #648]	; (80062d0 <main+0x848>)
 8006046:	4a9f      	ldr	r2, [pc, #636]	; (80062c4 <main+0x83c>)
 8006048:	4694      	mov	ip, r2
 800604a:	2220      	movs	r2, #32
 800604c:	4690      	mov	r8, r2
 800604e:	2208      	movs	r2, #8
 8006050:	4691      	mov	r9, r2
 8006052:	2208      	movs	r2, #8
 8006054:	4692      	mov	sl, r2
 8006056:	2208      	movs	r2, #8
 8006058:	4693      	mov	fp, r2
 800605a:	44bb      	add	fp, r7
 800605c:	44da      	add	sl, fp
 800605e:	44d1      	add	r9, sl
 8006060:	44c8      	add	r8, r9
 8006062:	44c4      	add	ip, r8
 8006064:	4463      	add	r3, ip
 8006066:	2200      	movs	r2, #0
 8006068:	609a      	str	r2, [r3, #8]
	float prev_low_pass_gyro_1[3] = {0,0,0};
 800606a:	4b9a      	ldr	r3, [pc, #616]	; (80062d4 <main+0x84c>)
 800606c:	4a95      	ldr	r2, [pc, #596]	; (80062c4 <main+0x83c>)
 800606e:	4694      	mov	ip, r2
 8006070:	2220      	movs	r2, #32
 8006072:	4690      	mov	r8, r2
 8006074:	2208      	movs	r2, #8
 8006076:	4691      	mov	r9, r2
 8006078:	2208      	movs	r2, #8
 800607a:	4692      	mov	sl, r2
 800607c:	2208      	movs	r2, #8
 800607e:	4693      	mov	fp, r2
 8006080:	44bb      	add	fp, r7
 8006082:	44da      	add	sl, fp
 8006084:	44d1      	add	r9, sl
 8006086:	44c8      	add	r8, r9
 8006088:	44c4      	add	ip, r8
 800608a:	4463      	add	r3, ip
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	4b90      	ldr	r3, [pc, #576]	; (80062d4 <main+0x84c>)
 8006092:	4a8c      	ldr	r2, [pc, #560]	; (80062c4 <main+0x83c>)
 8006094:	4694      	mov	ip, r2
 8006096:	2220      	movs	r2, #32
 8006098:	4690      	mov	r8, r2
 800609a:	2208      	movs	r2, #8
 800609c:	4691      	mov	r9, r2
 800609e:	2208      	movs	r2, #8
 80060a0:	4692      	mov	sl, r2
 80060a2:	2208      	movs	r2, #8
 80060a4:	4693      	mov	fp, r2
 80060a6:	44bb      	add	fp, r7
 80060a8:	44da      	add	sl, fp
 80060aa:	44d1      	add	r9, sl
 80060ac:	44c8      	add	r8, r9
 80060ae:	44c4      	add	ip, r8
 80060b0:	4463      	add	r3, ip
 80060b2:	2200      	movs	r2, #0
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	4b87      	ldr	r3, [pc, #540]	; (80062d4 <main+0x84c>)
 80060b8:	4a82      	ldr	r2, [pc, #520]	; (80062c4 <main+0x83c>)
 80060ba:	4694      	mov	ip, r2
 80060bc:	2220      	movs	r2, #32
 80060be:	4690      	mov	r8, r2
 80060c0:	2208      	movs	r2, #8
 80060c2:	4691      	mov	r9, r2
 80060c4:	2208      	movs	r2, #8
 80060c6:	4692      	mov	sl, r2
 80060c8:	2208      	movs	r2, #8
 80060ca:	4693      	mov	fp, r2
 80060cc:	44bb      	add	fp, r7
 80060ce:	44da      	add	sl, fp
 80060d0:	44d1      	add	r9, sl
 80060d2:	44c8      	add	r8, r9
 80060d4:	44c4      	add	ip, r8
 80060d6:	4463      	add	r3, ip
 80060d8:	2200      	movs	r2, #0
 80060da:	609a      	str	r2, [r3, #8]
	float low_alpha = 0.2;
 80060dc:	4b7e      	ldr	r3, [pc, #504]	; (80062d8 <main+0x850>)
 80060de:	4a7f      	ldr	r2, [pc, #508]	; (80062dc <main+0x854>)
 80060e0:	2120      	movs	r1, #32
 80060e2:	468c      	mov	ip, r1
 80060e4:	2108      	movs	r1, #8
 80060e6:	4688      	mov	r8, r1
 80060e8:	2108      	movs	r1, #8
 80060ea:	4689      	mov	r9, r1
 80060ec:	2108      	movs	r1, #8
 80060ee:	468a      	mov	sl, r1
 80060f0:	44ba      	add	sl, r7
 80060f2:	44d1      	add	r9, sl
 80060f4:	44c8      	add	r8, r9
 80060f6:	44c4      	add	ip, r8
 80060f8:	4462      	add	r2, ip
 80060fa:	6013      	str	r3, [r2, #0]

	float low_pass_accel_0[3] = {0,0,0};
 80060fc:	4b78      	ldr	r3, [pc, #480]	; (80062e0 <main+0x858>)
 80060fe:	4a71      	ldr	r2, [pc, #452]	; (80062c4 <main+0x83c>)
 8006100:	4694      	mov	ip, r2
 8006102:	2220      	movs	r2, #32
 8006104:	4690      	mov	r8, r2
 8006106:	2208      	movs	r2, #8
 8006108:	4691      	mov	r9, r2
 800610a:	2208      	movs	r2, #8
 800610c:	4692      	mov	sl, r2
 800610e:	2208      	movs	r2, #8
 8006110:	4693      	mov	fp, r2
 8006112:	44bb      	add	fp, r7
 8006114:	44da      	add	sl, fp
 8006116:	44d1      	add	r9, sl
 8006118:	44c8      	add	r8, r9
 800611a:	44c4      	add	ip, r8
 800611c:	4463      	add	r3, ip
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	4b6f      	ldr	r3, [pc, #444]	; (80062e0 <main+0x858>)
 8006124:	4a67      	ldr	r2, [pc, #412]	; (80062c4 <main+0x83c>)
 8006126:	4694      	mov	ip, r2
 8006128:	2220      	movs	r2, #32
 800612a:	4690      	mov	r8, r2
 800612c:	2208      	movs	r2, #8
 800612e:	4691      	mov	r9, r2
 8006130:	2208      	movs	r2, #8
 8006132:	4692      	mov	sl, r2
 8006134:	2208      	movs	r2, #8
 8006136:	4693      	mov	fp, r2
 8006138:	44bb      	add	fp, r7
 800613a:	44da      	add	sl, fp
 800613c:	44d1      	add	r9, sl
 800613e:	44c8      	add	r8, r9
 8006140:	44c4      	add	ip, r8
 8006142:	4463      	add	r3, ip
 8006144:	2200      	movs	r2, #0
 8006146:	605a      	str	r2, [r3, #4]
 8006148:	4b65      	ldr	r3, [pc, #404]	; (80062e0 <main+0x858>)
 800614a:	4a5e      	ldr	r2, [pc, #376]	; (80062c4 <main+0x83c>)
 800614c:	4694      	mov	ip, r2
 800614e:	2220      	movs	r2, #32
 8006150:	4690      	mov	r8, r2
 8006152:	2208      	movs	r2, #8
 8006154:	4691      	mov	r9, r2
 8006156:	2208      	movs	r2, #8
 8006158:	4692      	mov	sl, r2
 800615a:	2208      	movs	r2, #8
 800615c:	4693      	mov	fp, r2
 800615e:	44bb      	add	fp, r7
 8006160:	44da      	add	sl, fp
 8006162:	44d1      	add	r9, sl
 8006164:	44c8      	add	r8, r9
 8006166:	44c4      	add	ip, r8
 8006168:	4463      	add	r3, ip
 800616a:	2200      	movs	r2, #0
 800616c:	609a      	str	r2, [r3, #8]
	float low_pass_accel_1[3] = {0,0,0};
 800616e:	4b5d      	ldr	r3, [pc, #372]	; (80062e4 <main+0x85c>)
 8006170:	4a54      	ldr	r2, [pc, #336]	; (80062c4 <main+0x83c>)
 8006172:	4694      	mov	ip, r2
 8006174:	2220      	movs	r2, #32
 8006176:	4690      	mov	r8, r2
 8006178:	2208      	movs	r2, #8
 800617a:	4691      	mov	r9, r2
 800617c:	2208      	movs	r2, #8
 800617e:	4692      	mov	sl, r2
 8006180:	2208      	movs	r2, #8
 8006182:	4693      	mov	fp, r2
 8006184:	44bb      	add	fp, r7
 8006186:	44da      	add	sl, fp
 8006188:	44d1      	add	r9, sl
 800618a:	44c8      	add	r8, r9
 800618c:	44c4      	add	ip, r8
 800618e:	4463      	add	r3, ip
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	4b53      	ldr	r3, [pc, #332]	; (80062e4 <main+0x85c>)
 8006196:	4a4b      	ldr	r2, [pc, #300]	; (80062c4 <main+0x83c>)
 8006198:	4694      	mov	ip, r2
 800619a:	2220      	movs	r2, #32
 800619c:	4690      	mov	r8, r2
 800619e:	2208      	movs	r2, #8
 80061a0:	4691      	mov	r9, r2
 80061a2:	2208      	movs	r2, #8
 80061a4:	4692      	mov	sl, r2
 80061a6:	2208      	movs	r2, #8
 80061a8:	4693      	mov	fp, r2
 80061aa:	44bb      	add	fp, r7
 80061ac:	44da      	add	sl, fp
 80061ae:	44d1      	add	r9, sl
 80061b0:	44c8      	add	r8, r9
 80061b2:	44c4      	add	ip, r8
 80061b4:	4463      	add	r3, ip
 80061b6:	2200      	movs	r2, #0
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	4b4a      	ldr	r3, [pc, #296]	; (80062e4 <main+0x85c>)
 80061bc:	4a41      	ldr	r2, [pc, #260]	; (80062c4 <main+0x83c>)
 80061be:	4694      	mov	ip, r2
 80061c0:	2220      	movs	r2, #32
 80061c2:	4690      	mov	r8, r2
 80061c4:	2208      	movs	r2, #8
 80061c6:	4691      	mov	r9, r2
 80061c8:	2208      	movs	r2, #8
 80061ca:	4692      	mov	sl, r2
 80061cc:	2208      	movs	r2, #8
 80061ce:	4693      	mov	fp, r2
 80061d0:	44bb      	add	fp, r7
 80061d2:	44da      	add	sl, fp
 80061d4:	44d1      	add	r9, sl
 80061d6:	44c8      	add	r8, r9
 80061d8:	44c4      	add	ip, r8
 80061da:	4463      	add	r3, ip
 80061dc:	2200      	movs	r2, #0
 80061de:	609a      	str	r2, [r3, #8]
	float prev_low_pass_accel_0[3] = {0,0,0};
 80061e0:	4b41      	ldr	r3, [pc, #260]	; (80062e8 <main+0x860>)
 80061e2:	4a38      	ldr	r2, [pc, #224]	; (80062c4 <main+0x83c>)
 80061e4:	4694      	mov	ip, r2
 80061e6:	2220      	movs	r2, #32
 80061e8:	4690      	mov	r8, r2
 80061ea:	2208      	movs	r2, #8
 80061ec:	4691      	mov	r9, r2
 80061ee:	2208      	movs	r2, #8
 80061f0:	4692      	mov	sl, r2
 80061f2:	2208      	movs	r2, #8
 80061f4:	4693      	mov	fp, r2
 80061f6:	44bb      	add	fp, r7
 80061f8:	44da      	add	sl, fp
 80061fa:	44d1      	add	r9, sl
 80061fc:	44c8      	add	r8, r9
 80061fe:	44c4      	add	ip, r8
 8006200:	4463      	add	r3, ip
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	4b38      	ldr	r3, [pc, #224]	; (80062e8 <main+0x860>)
 8006208:	4a2e      	ldr	r2, [pc, #184]	; (80062c4 <main+0x83c>)
 800620a:	4694      	mov	ip, r2
 800620c:	2220      	movs	r2, #32
 800620e:	4690      	mov	r8, r2
 8006210:	2208      	movs	r2, #8
 8006212:	4691      	mov	r9, r2
 8006214:	2208      	movs	r2, #8
 8006216:	4692      	mov	sl, r2
 8006218:	2208      	movs	r2, #8
 800621a:	4693      	mov	fp, r2
 800621c:	44bb      	add	fp, r7
 800621e:	44da      	add	sl, fp
 8006220:	44d1      	add	r9, sl
 8006222:	44c8      	add	r8, r9
 8006224:	44c4      	add	ip, r8
 8006226:	4463      	add	r3, ip
 8006228:	2200      	movs	r2, #0
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	4b2e      	ldr	r3, [pc, #184]	; (80062e8 <main+0x860>)
 800622e:	4a25      	ldr	r2, [pc, #148]	; (80062c4 <main+0x83c>)
 8006230:	4694      	mov	ip, r2
 8006232:	2220      	movs	r2, #32
 8006234:	4690      	mov	r8, r2
 8006236:	2208      	movs	r2, #8
 8006238:	4691      	mov	r9, r2
 800623a:	2208      	movs	r2, #8
 800623c:	4692      	mov	sl, r2
 800623e:	2208      	movs	r2, #8
 8006240:	4693      	mov	fp, r2
 8006242:	44bb      	add	fp, r7
 8006244:	44da      	add	sl, fp
 8006246:	44d1      	add	r9, sl
 8006248:	44c8      	add	r8, r9
 800624a:	44c4      	add	ip, r8
 800624c:	4463      	add	r3, ip
 800624e:	2200      	movs	r2, #0
 8006250:	609a      	str	r2, [r3, #8]
	float prev_low_pass_accel_1[3] = {0,0,0};
 8006252:	4b26      	ldr	r3, [pc, #152]	; (80062ec <main+0x864>)
 8006254:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <main+0x83c>)
 8006256:	4694      	mov	ip, r2
 8006258:	2220      	movs	r2, #32
 800625a:	4690      	mov	r8, r2
 800625c:	2208      	movs	r2, #8
 800625e:	4691      	mov	r9, r2
 8006260:	2208      	movs	r2, #8
 8006262:	4692      	mov	sl, r2
 8006264:	2208      	movs	r2, #8
 8006266:	4693      	mov	fp, r2
 8006268:	44bb      	add	fp, r7
 800626a:	44da      	add	sl, fp
 800626c:	44d1      	add	r9, sl
 800626e:	44c8      	add	r8, r9
 8006270:	44c4      	add	ip, r8
 8006272:	4463      	add	r3, ip
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	4b1c      	ldr	r3, [pc, #112]	; (80062ec <main+0x864>)
 800627a:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <main+0x83c>)
 800627c:	4694      	mov	ip, r2
 800627e:	2220      	movs	r2, #32
 8006280:	4690      	mov	r8, r2
 8006282:	2208      	movs	r2, #8
 8006284:	4691      	mov	r9, r2
 8006286:	2208      	movs	r2, #8
 8006288:	4692      	mov	sl, r2
 800628a:	2208      	movs	r2, #8
 800628c:	4693      	mov	fp, r2
 800628e:	44bb      	add	fp, r7
 8006290:	44da      	add	sl, fp
 8006292:	44d1      	add	r9, sl
 8006294:	44c8      	add	r8, r9
 8006296:	44c4      	add	ip, r8
 8006298:	4463      	add	r3, ip
 800629a:	2200      	movs	r2, #0
 800629c:	605a      	str	r2, [r3, #4]
 800629e:	4b13      	ldr	r3, [pc, #76]	; (80062ec <main+0x864>)
 80062a0:	4a08      	ldr	r2, [pc, #32]	; (80062c4 <main+0x83c>)
 80062a2:	4694      	mov	ip, r2
 80062a4:	2220      	movs	r2, #32
 80062a6:	4690      	mov	r8, r2
 80062a8:	2208      	movs	r2, #8
 80062aa:	4691      	mov	r9, r2
 80062ac:	2208      	movs	r2, #8
 80062ae:	4692      	mov	sl, r2
 80062b0:	2208      	movs	r2, #8
 80062b2:	4693      	mov	fp, r2
 80062b4:	44bb      	add	fp, r7
 80062b6:	44da      	add	sl, fp
 80062b8:	44d1      	add	r9, sl
 80062ba:	44c8      	add	r8, r9
 80062bc:	44c4      	add	ip, r8
 80062be:	e017      	b.n	80062f0 <main+0x868>
 80062c0:	fffffea8 	.word	0xfffffea8
 80062c4:	00000c08 	.word	0x00000c08
 80062c8:	fffff53c 	.word	0xfffff53c
 80062cc:	fffff530 	.word	0xfffff530
 80062d0:	fffff524 	.word	0xfffff524
 80062d4:	fffff518 	.word	0xfffff518
 80062d8:	3e4ccccd 	.word	0x3e4ccccd
 80062dc:	00000bf8 	.word	0x00000bf8
 80062e0:	fffff50c 	.word	0xfffff50c
 80062e4:	fffff500 	.word	0xfffff500
 80062e8:	fffff4f4 	.word	0xfffff4f4
 80062ec:	fffff4e8 	.word	0xfffff4e8
 80062f0:	4463      	add	r3, ip
 80062f2:	2200      	movs	r2, #0
 80062f4:	609a      	str	r2, [r3, #8]
	float low_alpha_acc = 0.2;
 80062f6:	4bfe      	ldr	r3, [pc, #1016]	; (80066f0 <main+0xc68>)
 80062f8:	4afe      	ldr	r2, [pc, #1016]	; (80066f4 <main+0xc6c>)
 80062fa:	2120      	movs	r1, #32
 80062fc:	468c      	mov	ip, r1
 80062fe:	2108      	movs	r1, #8
 8006300:	4688      	mov	r8, r1
 8006302:	2108      	movs	r1, #8
 8006304:	4689      	mov	r9, r1
 8006306:	2108      	movs	r1, #8
 8006308:	468a      	mov	sl, r1
 800630a:	44ba      	add	sl, r7
 800630c:	44d1      	add	r9, sl
 800630e:	44c8      	add	r8, r9
 8006310:	44c4      	add	ip, r8
 8006312:	4462      	add	r2, ip
 8006314:	6013      	str	r3, [r2, #0]

	struct quaternion quat_0 = {1,0,0,0};
 8006316:	4bf8      	ldr	r3, [pc, #992]	; (80066f8 <main+0xc70>)
 8006318:	4af8      	ldr	r2, [pc, #992]	; (80066fc <main+0xc74>)
 800631a:	4694      	mov	ip, r2
 800631c:	2220      	movs	r2, #32
 800631e:	4690      	mov	r8, r2
 8006320:	2208      	movs	r2, #8
 8006322:	4691      	mov	r9, r2
 8006324:	2208      	movs	r2, #8
 8006326:	4692      	mov	sl, r2
 8006328:	2208      	movs	r2, #8
 800632a:	4693      	mov	fp, r2
 800632c:	44bb      	add	fp, r7
 800632e:	44da      	add	sl, fp
 8006330:	44d1      	add	r9, sl
 8006332:	44c8      	add	r8, r9
 8006334:	44c4      	add	ip, r8
 8006336:	4463      	add	r3, ip
 8006338:	22fe      	movs	r2, #254	; 0xfe
 800633a:	0592      	lsls	r2, r2, #22
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	4bee      	ldr	r3, [pc, #952]	; (80066f8 <main+0xc70>)
 8006340:	4aee      	ldr	r2, [pc, #952]	; (80066fc <main+0xc74>)
 8006342:	4694      	mov	ip, r2
 8006344:	2220      	movs	r2, #32
 8006346:	4690      	mov	r8, r2
 8006348:	2208      	movs	r2, #8
 800634a:	4691      	mov	r9, r2
 800634c:	2208      	movs	r2, #8
 800634e:	4692      	mov	sl, r2
 8006350:	2208      	movs	r2, #8
 8006352:	4693      	mov	fp, r2
 8006354:	44bb      	add	fp, r7
 8006356:	44da      	add	sl, fp
 8006358:	44d1      	add	r9, sl
 800635a:	44c8      	add	r8, r9
 800635c:	44c4      	add	ip, r8
 800635e:	4463      	add	r3, ip
 8006360:	2200      	movs	r2, #0
 8006362:	605a      	str	r2, [r3, #4]
 8006364:	4be4      	ldr	r3, [pc, #912]	; (80066f8 <main+0xc70>)
 8006366:	4ae5      	ldr	r2, [pc, #916]	; (80066fc <main+0xc74>)
 8006368:	4694      	mov	ip, r2
 800636a:	2220      	movs	r2, #32
 800636c:	4690      	mov	r8, r2
 800636e:	2208      	movs	r2, #8
 8006370:	4691      	mov	r9, r2
 8006372:	2208      	movs	r2, #8
 8006374:	4692      	mov	sl, r2
 8006376:	2208      	movs	r2, #8
 8006378:	4693      	mov	fp, r2
 800637a:	44bb      	add	fp, r7
 800637c:	44da      	add	sl, fp
 800637e:	44d1      	add	r9, sl
 8006380:	44c8      	add	r8, r9
 8006382:	44c4      	add	ip, r8
 8006384:	4463      	add	r3, ip
 8006386:	2200      	movs	r2, #0
 8006388:	609a      	str	r2, [r3, #8]
 800638a:	4bdb      	ldr	r3, [pc, #876]	; (80066f8 <main+0xc70>)
 800638c:	4adb      	ldr	r2, [pc, #876]	; (80066fc <main+0xc74>)
 800638e:	4694      	mov	ip, r2
 8006390:	2220      	movs	r2, #32
 8006392:	4690      	mov	r8, r2
 8006394:	2208      	movs	r2, #8
 8006396:	4691      	mov	r9, r2
 8006398:	2208      	movs	r2, #8
 800639a:	4692      	mov	sl, r2
 800639c:	2208      	movs	r2, #8
 800639e:	4693      	mov	fp, r2
 80063a0:	44bb      	add	fp, r7
 80063a2:	44da      	add	sl, fp
 80063a4:	44d1      	add	r9, sl
 80063a6:	44c8      	add	r8, r9
 80063a8:	44c4      	add	ip, r8
 80063aa:	4463      	add	r3, ip
 80063ac:	2200      	movs	r2, #0
 80063ae:	60da      	str	r2, [r3, #12]
	struct quaternion quat_1 = {1,0,0,0};
 80063b0:	4bd3      	ldr	r3, [pc, #844]	; (8006700 <main+0xc78>)
 80063b2:	4ad2      	ldr	r2, [pc, #840]	; (80066fc <main+0xc74>)
 80063b4:	4694      	mov	ip, r2
 80063b6:	2220      	movs	r2, #32
 80063b8:	4690      	mov	r8, r2
 80063ba:	2208      	movs	r2, #8
 80063bc:	4691      	mov	r9, r2
 80063be:	2208      	movs	r2, #8
 80063c0:	4692      	mov	sl, r2
 80063c2:	2208      	movs	r2, #8
 80063c4:	4693      	mov	fp, r2
 80063c6:	44bb      	add	fp, r7
 80063c8:	44da      	add	sl, fp
 80063ca:	44d1      	add	r9, sl
 80063cc:	44c8      	add	r8, r9
 80063ce:	44c4      	add	ip, r8
 80063d0:	4463      	add	r3, ip
 80063d2:	22fe      	movs	r2, #254	; 0xfe
 80063d4:	0592      	lsls	r2, r2, #22
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	4bc9      	ldr	r3, [pc, #804]	; (8006700 <main+0xc78>)
 80063da:	4ac8      	ldr	r2, [pc, #800]	; (80066fc <main+0xc74>)
 80063dc:	4694      	mov	ip, r2
 80063de:	2220      	movs	r2, #32
 80063e0:	4690      	mov	r8, r2
 80063e2:	2208      	movs	r2, #8
 80063e4:	4691      	mov	r9, r2
 80063e6:	2208      	movs	r2, #8
 80063e8:	4692      	mov	sl, r2
 80063ea:	2208      	movs	r2, #8
 80063ec:	4693      	mov	fp, r2
 80063ee:	44bb      	add	fp, r7
 80063f0:	44da      	add	sl, fp
 80063f2:	44d1      	add	r9, sl
 80063f4:	44c8      	add	r8, r9
 80063f6:	44c4      	add	ip, r8
 80063f8:	4463      	add	r3, ip
 80063fa:	2200      	movs	r2, #0
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	4bc0      	ldr	r3, [pc, #768]	; (8006700 <main+0xc78>)
 8006400:	4abe      	ldr	r2, [pc, #760]	; (80066fc <main+0xc74>)
 8006402:	4694      	mov	ip, r2
 8006404:	2220      	movs	r2, #32
 8006406:	4690      	mov	r8, r2
 8006408:	2208      	movs	r2, #8
 800640a:	4691      	mov	r9, r2
 800640c:	2208      	movs	r2, #8
 800640e:	4692      	mov	sl, r2
 8006410:	2208      	movs	r2, #8
 8006412:	4693      	mov	fp, r2
 8006414:	44bb      	add	fp, r7
 8006416:	44da      	add	sl, fp
 8006418:	44d1      	add	r9, sl
 800641a:	44c8      	add	r8, r9
 800641c:	44c4      	add	ip, r8
 800641e:	4463      	add	r3, ip
 8006420:	2200      	movs	r2, #0
 8006422:	609a      	str	r2, [r3, #8]
 8006424:	4bb6      	ldr	r3, [pc, #728]	; (8006700 <main+0xc78>)
 8006426:	4ab5      	ldr	r2, [pc, #724]	; (80066fc <main+0xc74>)
 8006428:	4694      	mov	ip, r2
 800642a:	2220      	movs	r2, #32
 800642c:	4690      	mov	r8, r2
 800642e:	2208      	movs	r2, #8
 8006430:	4691      	mov	r9, r2
 8006432:	2208      	movs	r2, #8
 8006434:	4692      	mov	sl, r2
 8006436:	2208      	movs	r2, #8
 8006438:	4693      	mov	fp, r2
 800643a:	44bb      	add	fp, r7
 800643c:	44da      	add	sl, fp
 800643e:	44d1      	add	r9, sl
 8006440:	44c8      	add	r8, r9
 8006442:	44c4      	add	ip, r8
 8006444:	4463      	add	r3, ip
 8006446:	2200      	movs	r2, #0
 8006448:	60da      	str	r2, [r3, #12]
	struct quaternion quat_buffer_0 = {1,0,0,0};
 800644a:	4bae      	ldr	r3, [pc, #696]	; (8006704 <main+0xc7c>)
 800644c:	4aab      	ldr	r2, [pc, #684]	; (80066fc <main+0xc74>)
 800644e:	4694      	mov	ip, r2
 8006450:	2220      	movs	r2, #32
 8006452:	4690      	mov	r8, r2
 8006454:	2208      	movs	r2, #8
 8006456:	4691      	mov	r9, r2
 8006458:	2208      	movs	r2, #8
 800645a:	4692      	mov	sl, r2
 800645c:	2208      	movs	r2, #8
 800645e:	4693      	mov	fp, r2
 8006460:	44bb      	add	fp, r7
 8006462:	44da      	add	sl, fp
 8006464:	44d1      	add	r9, sl
 8006466:	44c8      	add	r8, r9
 8006468:	44c4      	add	ip, r8
 800646a:	4463      	add	r3, ip
 800646c:	22fe      	movs	r2, #254	; 0xfe
 800646e:	0592      	lsls	r2, r2, #22
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	4ba4      	ldr	r3, [pc, #656]	; (8006704 <main+0xc7c>)
 8006474:	4aa1      	ldr	r2, [pc, #644]	; (80066fc <main+0xc74>)
 8006476:	4694      	mov	ip, r2
 8006478:	2220      	movs	r2, #32
 800647a:	4690      	mov	r8, r2
 800647c:	2208      	movs	r2, #8
 800647e:	4691      	mov	r9, r2
 8006480:	2208      	movs	r2, #8
 8006482:	4692      	mov	sl, r2
 8006484:	2208      	movs	r2, #8
 8006486:	4693      	mov	fp, r2
 8006488:	44bb      	add	fp, r7
 800648a:	44da      	add	sl, fp
 800648c:	44d1      	add	r9, sl
 800648e:	44c8      	add	r8, r9
 8006490:	44c4      	add	ip, r8
 8006492:	4463      	add	r3, ip
 8006494:	2200      	movs	r2, #0
 8006496:	605a      	str	r2, [r3, #4]
 8006498:	4b9a      	ldr	r3, [pc, #616]	; (8006704 <main+0xc7c>)
 800649a:	4a98      	ldr	r2, [pc, #608]	; (80066fc <main+0xc74>)
 800649c:	4694      	mov	ip, r2
 800649e:	2220      	movs	r2, #32
 80064a0:	4690      	mov	r8, r2
 80064a2:	2208      	movs	r2, #8
 80064a4:	4691      	mov	r9, r2
 80064a6:	2208      	movs	r2, #8
 80064a8:	4692      	mov	sl, r2
 80064aa:	2208      	movs	r2, #8
 80064ac:	4693      	mov	fp, r2
 80064ae:	44bb      	add	fp, r7
 80064b0:	44da      	add	sl, fp
 80064b2:	44d1      	add	r9, sl
 80064b4:	44c8      	add	r8, r9
 80064b6:	44c4      	add	ip, r8
 80064b8:	4463      	add	r3, ip
 80064ba:	2200      	movs	r2, #0
 80064bc:	609a      	str	r2, [r3, #8]
 80064be:	4b91      	ldr	r3, [pc, #580]	; (8006704 <main+0xc7c>)
 80064c0:	4a8e      	ldr	r2, [pc, #568]	; (80066fc <main+0xc74>)
 80064c2:	4694      	mov	ip, r2
 80064c4:	2220      	movs	r2, #32
 80064c6:	4690      	mov	r8, r2
 80064c8:	2208      	movs	r2, #8
 80064ca:	4691      	mov	r9, r2
 80064cc:	2208      	movs	r2, #8
 80064ce:	4692      	mov	sl, r2
 80064d0:	2208      	movs	r2, #8
 80064d2:	4693      	mov	fp, r2
 80064d4:	44bb      	add	fp, r7
 80064d6:	44da      	add	sl, fp
 80064d8:	44d1      	add	r9, sl
 80064da:	44c8      	add	r8, r9
 80064dc:	44c4      	add	ip, r8
 80064de:	4463      	add	r3, ip
 80064e0:	2200      	movs	r2, #0
 80064e2:	60da      	str	r2, [r3, #12]
	struct quaternion quat_buffer_1 = {1,0,0,0};
 80064e4:	4b88      	ldr	r3, [pc, #544]	; (8006708 <main+0xc80>)
 80064e6:	4a85      	ldr	r2, [pc, #532]	; (80066fc <main+0xc74>)
 80064e8:	4694      	mov	ip, r2
 80064ea:	2220      	movs	r2, #32
 80064ec:	4690      	mov	r8, r2
 80064ee:	2208      	movs	r2, #8
 80064f0:	4691      	mov	r9, r2
 80064f2:	2208      	movs	r2, #8
 80064f4:	4692      	mov	sl, r2
 80064f6:	2208      	movs	r2, #8
 80064f8:	4693      	mov	fp, r2
 80064fa:	44bb      	add	fp, r7
 80064fc:	44da      	add	sl, fp
 80064fe:	44d1      	add	r9, sl
 8006500:	44c8      	add	r8, r9
 8006502:	44c4      	add	ip, r8
 8006504:	4463      	add	r3, ip
 8006506:	22fe      	movs	r2, #254	; 0xfe
 8006508:	0592      	lsls	r2, r2, #22
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	4b7e      	ldr	r3, [pc, #504]	; (8006708 <main+0xc80>)
 800650e:	4a7b      	ldr	r2, [pc, #492]	; (80066fc <main+0xc74>)
 8006510:	4694      	mov	ip, r2
 8006512:	2220      	movs	r2, #32
 8006514:	4690      	mov	r8, r2
 8006516:	2208      	movs	r2, #8
 8006518:	4691      	mov	r9, r2
 800651a:	2208      	movs	r2, #8
 800651c:	4692      	mov	sl, r2
 800651e:	2208      	movs	r2, #8
 8006520:	4693      	mov	fp, r2
 8006522:	44bb      	add	fp, r7
 8006524:	44da      	add	sl, fp
 8006526:	44d1      	add	r9, sl
 8006528:	44c8      	add	r8, r9
 800652a:	44c4      	add	ip, r8
 800652c:	4463      	add	r3, ip
 800652e:	2200      	movs	r2, #0
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	4b75      	ldr	r3, [pc, #468]	; (8006708 <main+0xc80>)
 8006534:	4a71      	ldr	r2, [pc, #452]	; (80066fc <main+0xc74>)
 8006536:	4694      	mov	ip, r2
 8006538:	2220      	movs	r2, #32
 800653a:	4690      	mov	r8, r2
 800653c:	2208      	movs	r2, #8
 800653e:	4691      	mov	r9, r2
 8006540:	2208      	movs	r2, #8
 8006542:	4692      	mov	sl, r2
 8006544:	2208      	movs	r2, #8
 8006546:	4693      	mov	fp, r2
 8006548:	44bb      	add	fp, r7
 800654a:	44da      	add	sl, fp
 800654c:	44d1      	add	r9, sl
 800654e:	44c8      	add	r8, r9
 8006550:	44c4      	add	ip, r8
 8006552:	4463      	add	r3, ip
 8006554:	2200      	movs	r2, #0
 8006556:	609a      	str	r2, [r3, #8]
 8006558:	4b6b      	ldr	r3, [pc, #428]	; (8006708 <main+0xc80>)
 800655a:	4a68      	ldr	r2, [pc, #416]	; (80066fc <main+0xc74>)
 800655c:	4694      	mov	ip, r2
 800655e:	2220      	movs	r2, #32
 8006560:	4690      	mov	r8, r2
 8006562:	2208      	movs	r2, #8
 8006564:	4691      	mov	r9, r2
 8006566:	2208      	movs	r2, #8
 8006568:	4692      	mov	sl, r2
 800656a:	2208      	movs	r2, #8
 800656c:	4693      	mov	fp, r2
 800656e:	44bb      	add	fp, r7
 8006570:	44da      	add	sl, fp
 8006572:	44d1      	add	r9, sl
 8006574:	44c8      	add	r8, r9
 8006576:	44c4      	add	ip, r8
 8006578:	4463      	add	r3, ip
 800657a:	2200      	movs	r2, #0
 800657c:	60da      	str	r2, [r3, #12]
	struct euler_angles angles_0 = {0,0,0};
 800657e:	4b63      	ldr	r3, [pc, #396]	; (800670c <main+0xc84>)
 8006580:	4a5e      	ldr	r2, [pc, #376]	; (80066fc <main+0xc74>)
 8006582:	4694      	mov	ip, r2
 8006584:	2220      	movs	r2, #32
 8006586:	4690      	mov	r8, r2
 8006588:	2208      	movs	r2, #8
 800658a:	4691      	mov	r9, r2
 800658c:	2208      	movs	r2, #8
 800658e:	4692      	mov	sl, r2
 8006590:	2208      	movs	r2, #8
 8006592:	4693      	mov	fp, r2
 8006594:	44bb      	add	fp, r7
 8006596:	44da      	add	sl, fp
 8006598:	44d1      	add	r9, sl
 800659a:	44c8      	add	r8, r9
 800659c:	44c4      	add	ip, r8
 800659e:	4463      	add	r3, ip
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	4b59      	ldr	r3, [pc, #356]	; (800670c <main+0xc84>)
 80065a6:	4a55      	ldr	r2, [pc, #340]	; (80066fc <main+0xc74>)
 80065a8:	4694      	mov	ip, r2
 80065aa:	2220      	movs	r2, #32
 80065ac:	4690      	mov	r8, r2
 80065ae:	2208      	movs	r2, #8
 80065b0:	4691      	mov	r9, r2
 80065b2:	2208      	movs	r2, #8
 80065b4:	4692      	mov	sl, r2
 80065b6:	2208      	movs	r2, #8
 80065b8:	4693      	mov	fp, r2
 80065ba:	44bb      	add	fp, r7
 80065bc:	44da      	add	sl, fp
 80065be:	44d1      	add	r9, sl
 80065c0:	44c8      	add	r8, r9
 80065c2:	44c4      	add	ip, r8
 80065c4:	4463      	add	r3, ip
 80065c6:	2200      	movs	r2, #0
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	4b50      	ldr	r3, [pc, #320]	; (800670c <main+0xc84>)
 80065cc:	4a4b      	ldr	r2, [pc, #300]	; (80066fc <main+0xc74>)
 80065ce:	4694      	mov	ip, r2
 80065d0:	2220      	movs	r2, #32
 80065d2:	4690      	mov	r8, r2
 80065d4:	2208      	movs	r2, #8
 80065d6:	4691      	mov	r9, r2
 80065d8:	2208      	movs	r2, #8
 80065da:	4692      	mov	sl, r2
 80065dc:	2208      	movs	r2, #8
 80065de:	4693      	mov	fp, r2
 80065e0:	44bb      	add	fp, r7
 80065e2:	44da      	add	sl, fp
 80065e4:	44d1      	add	r9, sl
 80065e6:	44c8      	add	r8, r9
 80065e8:	44c4      	add	ip, r8
 80065ea:	4463      	add	r3, ip
 80065ec:	2200      	movs	r2, #0
 80065ee:	609a      	str	r2, [r3, #8]
	struct euler_angles angles_1 = {0,0,0};
 80065f0:	4b47      	ldr	r3, [pc, #284]	; (8006710 <main+0xc88>)
 80065f2:	4a42      	ldr	r2, [pc, #264]	; (80066fc <main+0xc74>)
 80065f4:	4694      	mov	ip, r2
 80065f6:	2220      	movs	r2, #32
 80065f8:	4690      	mov	r8, r2
 80065fa:	2208      	movs	r2, #8
 80065fc:	4691      	mov	r9, r2
 80065fe:	2208      	movs	r2, #8
 8006600:	4692      	mov	sl, r2
 8006602:	2208      	movs	r2, #8
 8006604:	4693      	mov	fp, r2
 8006606:	44bb      	add	fp, r7
 8006608:	44da      	add	sl, fp
 800660a:	44d1      	add	r9, sl
 800660c:	44c8      	add	r8, r9
 800660e:	44c4      	add	ip, r8
 8006610:	4463      	add	r3, ip
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	4b3e      	ldr	r3, [pc, #248]	; (8006710 <main+0xc88>)
 8006618:	4a38      	ldr	r2, [pc, #224]	; (80066fc <main+0xc74>)
 800661a:	4694      	mov	ip, r2
 800661c:	2220      	movs	r2, #32
 800661e:	4690      	mov	r8, r2
 8006620:	2208      	movs	r2, #8
 8006622:	4691      	mov	r9, r2
 8006624:	2208      	movs	r2, #8
 8006626:	4692      	mov	sl, r2
 8006628:	2208      	movs	r2, #8
 800662a:	4693      	mov	fp, r2
 800662c:	44bb      	add	fp, r7
 800662e:	44da      	add	sl, fp
 8006630:	44d1      	add	r9, sl
 8006632:	44c8      	add	r8, r9
 8006634:	44c4      	add	ip, r8
 8006636:	4463      	add	r3, ip
 8006638:	2200      	movs	r2, #0
 800663a:	605a      	str	r2, [r3, #4]
 800663c:	4b34      	ldr	r3, [pc, #208]	; (8006710 <main+0xc88>)
 800663e:	4a2f      	ldr	r2, [pc, #188]	; (80066fc <main+0xc74>)
 8006640:	4694      	mov	ip, r2
 8006642:	2220      	movs	r2, #32
 8006644:	4690      	mov	r8, r2
 8006646:	2208      	movs	r2, #8
 8006648:	4691      	mov	r9, r2
 800664a:	2208      	movs	r2, #8
 800664c:	4692      	mov	sl, r2
 800664e:	2208      	movs	r2, #8
 8006650:	4693      	mov	fp, r2
 8006652:	44bb      	add	fp, r7
 8006654:	44da      	add	sl, fp
 8006656:	44d1      	add	r9, sl
 8006658:	44c8      	add	r8, r9
 800665a:	44c4      	add	ip, r8
 800665c:	4463      	add	r3, ip
 800665e:	2200      	movs	r2, #0
 8006660:	609a      	str	r2, [r3, #8]
	struct euler_angles angles_buffer_0 = {0,0,0};
 8006662:	4b2c      	ldr	r3, [pc, #176]	; (8006714 <main+0xc8c>)
 8006664:	4a25      	ldr	r2, [pc, #148]	; (80066fc <main+0xc74>)
 8006666:	4694      	mov	ip, r2
 8006668:	2220      	movs	r2, #32
 800666a:	4690      	mov	r8, r2
 800666c:	2208      	movs	r2, #8
 800666e:	4691      	mov	r9, r2
 8006670:	2208      	movs	r2, #8
 8006672:	4692      	mov	sl, r2
 8006674:	2208      	movs	r2, #8
 8006676:	4693      	mov	fp, r2
 8006678:	44bb      	add	fp, r7
 800667a:	44da      	add	sl, fp
 800667c:	44d1      	add	r9, sl
 800667e:	44c8      	add	r8, r9
 8006680:	44c4      	add	ip, r8
 8006682:	4463      	add	r3, ip
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	4b22      	ldr	r3, [pc, #136]	; (8006714 <main+0xc8c>)
 800668a:	4a1c      	ldr	r2, [pc, #112]	; (80066fc <main+0xc74>)
 800668c:	4694      	mov	ip, r2
 800668e:	2220      	movs	r2, #32
 8006690:	4690      	mov	r8, r2
 8006692:	2208      	movs	r2, #8
 8006694:	4691      	mov	r9, r2
 8006696:	2208      	movs	r2, #8
 8006698:	4692      	mov	sl, r2
 800669a:	2208      	movs	r2, #8
 800669c:	4693      	mov	fp, r2
 800669e:	44bb      	add	fp, r7
 80066a0:	44da      	add	sl, fp
 80066a2:	44d1      	add	r9, sl
 80066a4:	44c8      	add	r8, r9
 80066a6:	44c4      	add	ip, r8
 80066a8:	4463      	add	r3, ip
 80066aa:	2200      	movs	r2, #0
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	4b19      	ldr	r3, [pc, #100]	; (8006714 <main+0xc8c>)
 80066b0:	4a12      	ldr	r2, [pc, #72]	; (80066fc <main+0xc74>)
 80066b2:	4694      	mov	ip, r2
 80066b4:	2220      	movs	r2, #32
 80066b6:	4690      	mov	r8, r2
 80066b8:	2208      	movs	r2, #8
 80066ba:	4691      	mov	r9, r2
 80066bc:	2208      	movs	r2, #8
 80066be:	4692      	mov	sl, r2
 80066c0:	2208      	movs	r2, #8
 80066c2:	4693      	mov	fp, r2
 80066c4:	44bb      	add	fp, r7
 80066c6:	44da      	add	sl, fp
 80066c8:	44d1      	add	r9, sl
 80066ca:	44c8      	add	r8, r9
 80066cc:	44c4      	add	ip, r8
 80066ce:	4463      	add	r3, ip
 80066d0:	2200      	movs	r2, #0
 80066d2:	609a      	str	r2, [r3, #8]
	struct euler_angles angles_buffer_1 = {0,0,0};
 80066d4:	4b10      	ldr	r3, [pc, #64]	; (8006718 <main+0xc90>)
 80066d6:	4a09      	ldr	r2, [pc, #36]	; (80066fc <main+0xc74>)
 80066d8:	4694      	mov	ip, r2
 80066da:	2220      	movs	r2, #32
 80066dc:	4690      	mov	r8, r2
 80066de:	2208      	movs	r2, #8
 80066e0:	4691      	mov	r9, r2
 80066e2:	2208      	movs	r2, #8
 80066e4:	4692      	mov	sl, r2
 80066e6:	2208      	movs	r2, #8
 80066e8:	4693      	mov	fp, r2
 80066ea:	44bb      	add	fp, r7
 80066ec:	e016      	b.n	800671c <main+0xc94>
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	3e4ccccd 	.word	0x3e4ccccd
 80066f4:	00000bf4 	.word	0x00000bf4
 80066f8:	fffff4d8 	.word	0xfffff4d8
 80066fc:	00000c08 	.word	0x00000c08
 8006700:	fffff4c8 	.word	0xfffff4c8
 8006704:	fffff4b8 	.word	0xfffff4b8
 8006708:	fffff4a8 	.word	0xfffff4a8
 800670c:	fffff49c 	.word	0xfffff49c
 8006710:	fffff490 	.word	0xfffff490
 8006714:	fffff484 	.word	0xfffff484
 8006718:	fffff478 	.word	0xfffff478
 800671c:	44da      	add	sl, fp
 800671e:	44d1      	add	r9, sl
 8006720:	44c8      	add	r8, r9
 8006722:	44c4      	add	ip, r8
 8006724:	4463      	add	r3, ip
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	4bfd      	ldr	r3, [pc, #1012]	; (8006b20 <main+0x1098>)
 800672c:	4afd      	ldr	r2, [pc, #1012]	; (8006b24 <main+0x109c>)
 800672e:	4694      	mov	ip, r2
 8006730:	2220      	movs	r2, #32
 8006732:	4690      	mov	r8, r2
 8006734:	2208      	movs	r2, #8
 8006736:	4691      	mov	r9, r2
 8006738:	2208      	movs	r2, #8
 800673a:	4692      	mov	sl, r2
 800673c:	2208      	movs	r2, #8
 800673e:	4693      	mov	fp, r2
 8006740:	44bb      	add	fp, r7
 8006742:	44da      	add	sl, fp
 8006744:	44d1      	add	r9, sl
 8006746:	44c8      	add	r8, r9
 8006748:	44c4      	add	ip, r8
 800674a:	4463      	add	r3, ip
 800674c:	2200      	movs	r2, #0
 800674e:	605a      	str	r2, [r3, #4]
 8006750:	4bf3      	ldr	r3, [pc, #972]	; (8006b20 <main+0x1098>)
 8006752:	4af4      	ldr	r2, [pc, #976]	; (8006b24 <main+0x109c>)
 8006754:	4694      	mov	ip, r2
 8006756:	2220      	movs	r2, #32
 8006758:	4690      	mov	r8, r2
 800675a:	2208      	movs	r2, #8
 800675c:	4691      	mov	r9, r2
 800675e:	2208      	movs	r2, #8
 8006760:	4692      	mov	sl, r2
 8006762:	2208      	movs	r2, #8
 8006764:	4693      	mov	fp, r2
 8006766:	44bb      	add	fp, r7
 8006768:	44da      	add	sl, fp
 800676a:	44d1      	add	r9, sl
 800676c:	44c8      	add	r8, r9
 800676e:	44c4      	add	ip, r8
 8006770:	4463      	add	r3, ip
 8006772:	2200      	movs	r2, #0
 8006774:	609a      	str	r2, [r3, #8]
	struct euler_angles diff_0 = {0,0,0};
 8006776:	4bec      	ldr	r3, [pc, #944]	; (8006b28 <main+0x10a0>)
 8006778:	4aea      	ldr	r2, [pc, #936]	; (8006b24 <main+0x109c>)
 800677a:	4694      	mov	ip, r2
 800677c:	2220      	movs	r2, #32
 800677e:	4690      	mov	r8, r2
 8006780:	2208      	movs	r2, #8
 8006782:	4691      	mov	r9, r2
 8006784:	2208      	movs	r2, #8
 8006786:	4692      	mov	sl, r2
 8006788:	2208      	movs	r2, #8
 800678a:	4693      	mov	fp, r2
 800678c:	44bb      	add	fp, r7
 800678e:	44da      	add	sl, fp
 8006790:	44d1      	add	r9, sl
 8006792:	44c8      	add	r8, r9
 8006794:	44c4      	add	ip, r8
 8006796:	4463      	add	r3, ip
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	4be2      	ldr	r3, [pc, #904]	; (8006b28 <main+0x10a0>)
 800679e:	4ae1      	ldr	r2, [pc, #900]	; (8006b24 <main+0x109c>)
 80067a0:	4694      	mov	ip, r2
 80067a2:	2220      	movs	r2, #32
 80067a4:	4690      	mov	r8, r2
 80067a6:	2208      	movs	r2, #8
 80067a8:	4691      	mov	r9, r2
 80067aa:	2208      	movs	r2, #8
 80067ac:	4692      	mov	sl, r2
 80067ae:	2208      	movs	r2, #8
 80067b0:	4693      	mov	fp, r2
 80067b2:	44bb      	add	fp, r7
 80067b4:	44da      	add	sl, fp
 80067b6:	44d1      	add	r9, sl
 80067b8:	44c8      	add	r8, r9
 80067ba:	44c4      	add	ip, r8
 80067bc:	4463      	add	r3, ip
 80067be:	2200      	movs	r2, #0
 80067c0:	605a      	str	r2, [r3, #4]
 80067c2:	4bd9      	ldr	r3, [pc, #868]	; (8006b28 <main+0x10a0>)
 80067c4:	4ad7      	ldr	r2, [pc, #860]	; (8006b24 <main+0x109c>)
 80067c6:	4694      	mov	ip, r2
 80067c8:	2220      	movs	r2, #32
 80067ca:	4690      	mov	r8, r2
 80067cc:	2208      	movs	r2, #8
 80067ce:	4691      	mov	r9, r2
 80067d0:	2208      	movs	r2, #8
 80067d2:	4692      	mov	sl, r2
 80067d4:	2208      	movs	r2, #8
 80067d6:	4693      	mov	fp, r2
 80067d8:	44bb      	add	fp, r7
 80067da:	44da      	add	sl, fp
 80067dc:	44d1      	add	r9, sl
 80067de:	44c8      	add	r8, r9
 80067e0:	44c4      	add	ip, r8
 80067e2:	4463      	add	r3, ip
 80067e4:	2200      	movs	r2, #0
 80067e6:	609a      	str	r2, [r3, #8]
	struct euler_angles diff_1 = {0,0,0};
 80067e8:	4bd0      	ldr	r3, [pc, #832]	; (8006b2c <main+0x10a4>)
 80067ea:	4ace      	ldr	r2, [pc, #824]	; (8006b24 <main+0x109c>)
 80067ec:	4694      	mov	ip, r2
 80067ee:	2220      	movs	r2, #32
 80067f0:	4690      	mov	r8, r2
 80067f2:	2208      	movs	r2, #8
 80067f4:	4691      	mov	r9, r2
 80067f6:	2208      	movs	r2, #8
 80067f8:	4692      	mov	sl, r2
 80067fa:	2208      	movs	r2, #8
 80067fc:	4693      	mov	fp, r2
 80067fe:	44bb      	add	fp, r7
 8006800:	44da      	add	sl, fp
 8006802:	44d1      	add	r9, sl
 8006804:	44c8      	add	r8, r9
 8006806:	44c4      	add	ip, r8
 8006808:	4463      	add	r3, ip
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	4bc7      	ldr	r3, [pc, #796]	; (8006b2c <main+0x10a4>)
 8006810:	4ac4      	ldr	r2, [pc, #784]	; (8006b24 <main+0x109c>)
 8006812:	4694      	mov	ip, r2
 8006814:	2220      	movs	r2, #32
 8006816:	4690      	mov	r8, r2
 8006818:	2208      	movs	r2, #8
 800681a:	4691      	mov	r9, r2
 800681c:	2208      	movs	r2, #8
 800681e:	4692      	mov	sl, r2
 8006820:	2208      	movs	r2, #8
 8006822:	4693      	mov	fp, r2
 8006824:	44bb      	add	fp, r7
 8006826:	44da      	add	sl, fp
 8006828:	44d1      	add	r9, sl
 800682a:	44c8      	add	r8, r9
 800682c:	44c4      	add	ip, r8
 800682e:	4463      	add	r3, ip
 8006830:	2200      	movs	r2, #0
 8006832:	605a      	str	r2, [r3, #4]
 8006834:	4bbd      	ldr	r3, [pc, #756]	; (8006b2c <main+0x10a4>)
 8006836:	4abb      	ldr	r2, [pc, #748]	; (8006b24 <main+0x109c>)
 8006838:	4694      	mov	ip, r2
 800683a:	2220      	movs	r2, #32
 800683c:	4690      	mov	r8, r2
 800683e:	2208      	movs	r2, #8
 8006840:	4691      	mov	r9, r2
 8006842:	2208      	movs	r2, #8
 8006844:	4692      	mov	sl, r2
 8006846:	2208      	movs	r2, #8
 8006848:	4693      	mov	fp, r2
 800684a:	44bb      	add	fp, r7
 800684c:	44da      	add	sl, fp
 800684e:	44d1      	add	r9, sl
 8006850:	44c8      	add	r8, r9
 8006852:	44c4      	add	ip, r8
 8006854:	4463      	add	r3, ip
 8006856:	2200      	movs	r2, #0
 8006858:	609a      	str	r2, [r3, #8]
	struct euler_angles prev_0 = {0,0,0};
 800685a:	4bb5      	ldr	r3, [pc, #724]	; (8006b30 <main+0x10a8>)
 800685c:	4ab1      	ldr	r2, [pc, #708]	; (8006b24 <main+0x109c>)
 800685e:	4694      	mov	ip, r2
 8006860:	2220      	movs	r2, #32
 8006862:	4690      	mov	r8, r2
 8006864:	2208      	movs	r2, #8
 8006866:	4691      	mov	r9, r2
 8006868:	2208      	movs	r2, #8
 800686a:	4692      	mov	sl, r2
 800686c:	2208      	movs	r2, #8
 800686e:	4693      	mov	fp, r2
 8006870:	44bb      	add	fp, r7
 8006872:	44da      	add	sl, fp
 8006874:	44d1      	add	r9, sl
 8006876:	44c8      	add	r8, r9
 8006878:	44c4      	add	ip, r8
 800687a:	4463      	add	r3, ip
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	4bab      	ldr	r3, [pc, #684]	; (8006b30 <main+0x10a8>)
 8006882:	4aa8      	ldr	r2, [pc, #672]	; (8006b24 <main+0x109c>)
 8006884:	4694      	mov	ip, r2
 8006886:	2220      	movs	r2, #32
 8006888:	4690      	mov	r8, r2
 800688a:	2208      	movs	r2, #8
 800688c:	4691      	mov	r9, r2
 800688e:	2208      	movs	r2, #8
 8006890:	4692      	mov	sl, r2
 8006892:	2208      	movs	r2, #8
 8006894:	4693      	mov	fp, r2
 8006896:	44bb      	add	fp, r7
 8006898:	44da      	add	sl, fp
 800689a:	44d1      	add	r9, sl
 800689c:	44c8      	add	r8, r9
 800689e:	44c4      	add	ip, r8
 80068a0:	4463      	add	r3, ip
 80068a2:	2200      	movs	r2, #0
 80068a4:	605a      	str	r2, [r3, #4]
 80068a6:	4ba2      	ldr	r3, [pc, #648]	; (8006b30 <main+0x10a8>)
 80068a8:	4a9e      	ldr	r2, [pc, #632]	; (8006b24 <main+0x109c>)
 80068aa:	4694      	mov	ip, r2
 80068ac:	2220      	movs	r2, #32
 80068ae:	4690      	mov	r8, r2
 80068b0:	2208      	movs	r2, #8
 80068b2:	4691      	mov	r9, r2
 80068b4:	2208      	movs	r2, #8
 80068b6:	4692      	mov	sl, r2
 80068b8:	2208      	movs	r2, #8
 80068ba:	4693      	mov	fp, r2
 80068bc:	44bb      	add	fp, r7
 80068be:	44da      	add	sl, fp
 80068c0:	44d1      	add	r9, sl
 80068c2:	44c8      	add	r8, r9
 80068c4:	44c4      	add	ip, r8
 80068c6:	4463      	add	r3, ip
 80068c8:	2200      	movs	r2, #0
 80068ca:	609a      	str	r2, [r3, #8]
	struct euler_angles prev_1 = {0,0,0};
 80068cc:	4b99      	ldr	r3, [pc, #612]	; (8006b34 <main+0x10ac>)
 80068ce:	4a95      	ldr	r2, [pc, #596]	; (8006b24 <main+0x109c>)
 80068d0:	4694      	mov	ip, r2
 80068d2:	2220      	movs	r2, #32
 80068d4:	4690      	mov	r8, r2
 80068d6:	2208      	movs	r2, #8
 80068d8:	4691      	mov	r9, r2
 80068da:	2208      	movs	r2, #8
 80068dc:	4692      	mov	sl, r2
 80068de:	2208      	movs	r2, #8
 80068e0:	4693      	mov	fp, r2
 80068e2:	44bb      	add	fp, r7
 80068e4:	44da      	add	sl, fp
 80068e6:	44d1      	add	r9, sl
 80068e8:	44c8      	add	r8, r9
 80068ea:	44c4      	add	ip, r8
 80068ec:	4463      	add	r3, ip
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	4b90      	ldr	r3, [pc, #576]	; (8006b34 <main+0x10ac>)
 80068f4:	4a8b      	ldr	r2, [pc, #556]	; (8006b24 <main+0x109c>)
 80068f6:	4694      	mov	ip, r2
 80068f8:	2220      	movs	r2, #32
 80068fa:	4690      	mov	r8, r2
 80068fc:	2208      	movs	r2, #8
 80068fe:	4691      	mov	r9, r2
 8006900:	2208      	movs	r2, #8
 8006902:	4692      	mov	sl, r2
 8006904:	2208      	movs	r2, #8
 8006906:	4693      	mov	fp, r2
 8006908:	44bb      	add	fp, r7
 800690a:	44da      	add	sl, fp
 800690c:	44d1      	add	r9, sl
 800690e:	44c8      	add	r8, r9
 8006910:	44c4      	add	ip, r8
 8006912:	4463      	add	r3, ip
 8006914:	2200      	movs	r2, #0
 8006916:	605a      	str	r2, [r3, #4]
 8006918:	4b86      	ldr	r3, [pc, #536]	; (8006b34 <main+0x10ac>)
 800691a:	4a82      	ldr	r2, [pc, #520]	; (8006b24 <main+0x109c>)
 800691c:	4694      	mov	ip, r2
 800691e:	2220      	movs	r2, #32
 8006920:	4690      	mov	r8, r2
 8006922:	2208      	movs	r2, #8
 8006924:	4691      	mov	r9, r2
 8006926:	2208      	movs	r2, #8
 8006928:	4692      	mov	sl, r2
 800692a:	2208      	movs	r2, #8
 800692c:	4693      	mov	fp, r2
 800692e:	44bb      	add	fp, r7
 8006930:	44da      	add	sl, fp
 8006932:	44d1      	add	r9, sl
 8006934:	44c8      	add	r8, r9
 8006936:	44c4      	add	ip, r8
 8006938:	4463      	add	r3, ip
 800693a:	2200      	movs	r2, #0
 800693c:	609a      	str	r2, [r3, #8]
	struct matrix rotation_matrix_earth_0 = {0,0,0,0,0,0,0,0,0};
 800693e:	4b7e      	ldr	r3, [pc, #504]	; (8006b38 <main+0x10b0>)
 8006940:	4a78      	ldr	r2, [pc, #480]	; (8006b24 <main+0x109c>)
 8006942:	4694      	mov	ip, r2
 8006944:	2220      	movs	r2, #32
 8006946:	4690      	mov	r8, r2
 8006948:	2208      	movs	r2, #8
 800694a:	4691      	mov	r9, r2
 800694c:	2208      	movs	r2, #8
 800694e:	4692      	mov	sl, r2
 8006950:	2208      	movs	r2, #8
 8006952:	4693      	mov	fp, r2
 8006954:	44bb      	add	fp, r7
 8006956:	44da      	add	sl, fp
 8006958:	44d1      	add	r9, sl
 800695a:	44c8      	add	r8, r9
 800695c:	44c4      	add	ip, r8
 800695e:	4463      	add	r3, ip
 8006960:	0018      	movs	r0, r3
 8006962:	2324      	movs	r3, #36	; 0x24
 8006964:	001a      	movs	r2, r3
 8006966:	2100      	movs	r1, #0
 8006968:	f005 feb3 	bl	800c6d2 <memset>
	struct matrix rotation_matrix_earth_1 = {0,0,0,0,0,0,0,0,0};
 800696c:	4b73      	ldr	r3, [pc, #460]	; (8006b3c <main+0x10b4>)
 800696e:	4a6d      	ldr	r2, [pc, #436]	; (8006b24 <main+0x109c>)
 8006970:	4694      	mov	ip, r2
 8006972:	2220      	movs	r2, #32
 8006974:	4690      	mov	r8, r2
 8006976:	2208      	movs	r2, #8
 8006978:	4691      	mov	r9, r2
 800697a:	2208      	movs	r2, #8
 800697c:	4692      	mov	sl, r2
 800697e:	2208      	movs	r2, #8
 8006980:	4693      	mov	fp, r2
 8006982:	44bb      	add	fp, r7
 8006984:	44da      	add	sl, fp
 8006986:	44d1      	add	r9, sl
 8006988:	44c8      	add	r8, r9
 800698a:	44c4      	add	ip, r8
 800698c:	4463      	add	r3, ip
 800698e:	0018      	movs	r0, r3
 8006990:	2324      	movs	r3, #36	; 0x24
 8006992:	001a      	movs	r2, r3
 8006994:	2100      	movs	r1, #0
 8006996:	f005 fe9c 	bl	800c6d2 <memset>

	float duration_diff = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	22bf      	movs	r2, #191	; 0xbf
 800699e:	0112      	lsls	r2, r2, #4
 80069a0:	2120      	movs	r1, #32
 80069a2:	468c      	mov	ip, r1
 80069a4:	2108      	movs	r1, #8
 80069a6:	4688      	mov	r8, r1
 80069a8:	2108      	movs	r1, #8
 80069aa:	4689      	mov	r9, r1
 80069ac:	2108      	movs	r1, #8
 80069ae:	468a      	mov	sl, r1
 80069b0:	44ba      	add	sl, r7
 80069b2:	44d1      	add	r9, sl
 80069b4:	44c8      	add	r8, r9
 80069b6:	44c4      	add	ip, r8
 80069b8:	4462      	add	r2, ip
 80069ba:	6013      	str	r3, [r2, #0]
	float duration = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	4a60      	ldr	r2, [pc, #384]	; (8006b40 <main+0x10b8>)
 80069c0:	2120      	movs	r1, #32
 80069c2:	468c      	mov	ip, r1
 80069c4:	2108      	movs	r1, #8
 80069c6:	4688      	mov	r8, r1
 80069c8:	2108      	movs	r1, #8
 80069ca:	4689      	mov	r9, r1
 80069cc:	2108      	movs	r1, #8
 80069ce:	468a      	mov	sl, r1
 80069d0:	44ba      	add	sl, r7
 80069d2:	44d1      	add	r9, sl
 80069d4:	44c8      	add	r8, r9
 80069d6:	44c4      	add	ip, r8
 80069d8:	4462      	add	r2, ip
 80069da:	6013      	str	r3, [r2, #0]
	float clock = 16000000/16.0;
 80069dc:	4b59      	ldr	r3, [pc, #356]	; (8006b44 <main+0x10bc>)
 80069de:	4a5a      	ldr	r2, [pc, #360]	; (8006b48 <main+0x10c0>)
 80069e0:	2120      	movs	r1, #32
 80069e2:	468c      	mov	ip, r1
 80069e4:	2108      	movs	r1, #8
 80069e6:	4688      	mov	r8, r1
 80069e8:	2108      	movs	r1, #8
 80069ea:	4689      	mov	r9, r1
 80069ec:	2108      	movs	r1, #8
 80069ee:	468a      	mov	sl, r1
 80069f0:	44ba      	add	sl, r7
 80069f2:	44d1      	add	r9, sl
 80069f4:	44c8      	add	r8, r9
 80069f6:	44c4      	add	ip, r8
 80069f8:	4462      	add	r2, ip
 80069fa:	6013      	str	r3, [r2, #0]

	int8_t is_moving[3] = {0,0,0};
 80069fc:	4b53      	ldr	r3, [pc, #332]	; (8006b4c <main+0x10c4>)
 80069fe:	4a49      	ldr	r2, [pc, #292]	; (8006b24 <main+0x109c>)
 8006a00:	4694      	mov	ip, r2
 8006a02:	2220      	movs	r2, #32
 8006a04:	4690      	mov	r8, r2
 8006a06:	2208      	movs	r2, #8
 8006a08:	4691      	mov	r9, r2
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	4692      	mov	sl, r2
 8006a0e:	2208      	movs	r2, #8
 8006a10:	4693      	mov	fp, r2
 8006a12:	44bb      	add	fp, r7
 8006a14:	44da      	add	sl, fp
 8006a16:	44d1      	add	r9, sl
 8006a18:	44c8      	add	r8, r9
 8006a1a:	44c4      	add	ip, r8
 8006a1c:	4463      	add	r3, ip
 8006a1e:	4a4c      	ldr	r2, [pc, #304]	; (8006b50 <main+0x10c8>)
 8006a20:	8811      	ldrh	r1, [r2, #0]
 8006a22:	8019      	strh	r1, [r3, #0]
 8006a24:	7892      	ldrb	r2, [r2, #2]
 8006a26:	709a      	strb	r2, [r3, #2]
	int8_t was_moving = 0;
 8006a28:	4b4a      	ldr	r3, [pc, #296]	; (8006b54 <main+0x10cc>)
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	4694      	mov	ip, r2
 8006a2e:	2208      	movs	r2, #8
 8006a30:	4690      	mov	r8, r2
 8006a32:	2208      	movs	r2, #8
 8006a34:	4691      	mov	r9, r2
 8006a36:	2208      	movs	r2, #8
 8006a38:	4692      	mov	sl, r2
 8006a3a:	44ba      	add	sl, r7
 8006a3c:	44d1      	add	r9, sl
 8006a3e:	44c8      	add	r8, r9
 8006a40:	44c4      	add	ip, r8
 8006a42:	4463      	add	r3, ip
 8006a44:	2200      	movs	r2, #0
 8006a46:	701a      	strb	r2, [r3, #0]
	int8_t moving_expected = 0;
 8006a48:	4b43      	ldr	r3, [pc, #268]	; (8006b58 <main+0x10d0>)
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	4694      	mov	ip, r2
 8006a4e:	2208      	movs	r2, #8
 8006a50:	4690      	mov	r8, r2
 8006a52:	2208      	movs	r2, #8
 8006a54:	4691      	mov	r9, r2
 8006a56:	2208      	movs	r2, #8
 8006a58:	4692      	mov	sl, r2
 8006a5a:	44ba      	add	sl, r7
 8006a5c:	44d1      	add	r9, sl
 8006a5e:	44c8      	add	r8, r9
 8006a60:	44c4      	add	ip, r8
 8006a62:	4463      	add	r3, ip
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
	uint8_t uart_prescaler = 0;
 8006a68:	4b3c      	ldr	r3, [pc, #240]	; (8006b5c <main+0x10d4>)
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	4694      	mov	ip, r2
 8006a6e:	2208      	movs	r2, #8
 8006a70:	4690      	mov	r8, r2
 8006a72:	2208      	movs	r2, #8
 8006a74:	4691      	mov	r9, r2
 8006a76:	2208      	movs	r2, #8
 8006a78:	4692      	mov	sl, r2
 8006a7a:	44ba      	add	sl, r7
 8006a7c:	44d1      	add	r9, sl
 8006a7e:	44c8      	add	r8, r9
 8006a80:	44c4      	add	ip, r8
 8006a82:	4463      	add	r3, ip
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);
 8006a88:	4b35      	ldr	r3, [pc, #212]	; (8006b60 <main+0x10d8>)
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f004 ffa2 	bl	800b9d4 <HAL_TIM_Base_Start>
	ICM_AccCalibration(&hspi1,&huart2,accel_bias_0, IMU_MOVABLE);
 8006a90:	4c34      	ldr	r4, [pc, #208]	; (8006b64 <main+0x10dc>)
 8006a92:	002e      	movs	r6, r5
 8006a94:	2308      	movs	r3, #8
 8006a96:	2208      	movs	r2, #8
 8006a98:	4694      	mov	ip, r2
 8006a9a:	2208      	movs	r2, #8
 8006a9c:	4690      	mov	r8, r2
 8006a9e:	44b8      	add	r8, r7
 8006aa0:	44c4      	add	ip, r8
 8006aa2:	4463      	add	r3, ip
 8006aa4:	199b      	adds	r3, r3, r6
 8006aa6:	191a      	adds	r2, r3, r4
 8006aa8:	492f      	ldr	r1, [pc, #188]	; (8006b68 <main+0x10e0>)
 8006aaa:	4830      	ldr	r0, [pc, #192]	; (8006b6c <main+0x10e4>)
 8006aac:	2300      	movs	r3, #0
 8006aae:	f7fc ff7b 	bl	80039a8 <ICM_AccCalibration>
	ICM_AccCalibration(&hspi2,&huart2,accel_bias_1, IMU_FIXED);
 8006ab2:	25ab      	movs	r5, #171	; 0xab
 8006ab4:	012d      	lsls	r5, r5, #4
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	2208      	movs	r2, #8
 8006aba:	4694      	mov	ip, r2
 8006abc:	2208      	movs	r2, #8
 8006abe:	4690      	mov	r8, r2
 8006ac0:	44b8      	add	r8, r7
 8006ac2:	44c4      	add	ip, r8
 8006ac4:	4463      	add	r3, ip
 8006ac6:	199b      	adds	r3, r3, r6
 8006ac8:	195a      	adds	r2, r3, r5
 8006aca:	4927      	ldr	r1, [pc, #156]	; (8006b68 <main+0x10e0>)
 8006acc:	4828      	ldr	r0, [pc, #160]	; (8006b70 <main+0x10e8>)
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f7fc ff6a 	bl	80039a8 <ICM_AccCalibration>
	CalculateRotationMatrix(accel_bias_0, &rotation_matrix_earth_0);
 8006ad4:	232c      	movs	r3, #44	; 0x2c
 8006ad6:	2208      	movs	r2, #8
 8006ad8:	2108      	movs	r1, #8
 8006ada:	468c      	mov	ip, r1
 8006adc:	2108      	movs	r1, #8
 8006ade:	4688      	mov	r8, r1
 8006ae0:	44b8      	add	r8, r7
 8006ae2:	44c4      	add	ip, r8
 8006ae4:	4462      	add	r2, ip
 8006ae6:	1992      	adds	r2, r2, r6
 8006ae8:	18d2      	adds	r2, r2, r3
 8006aea:	2308      	movs	r3, #8
 8006aec:	2108      	movs	r1, #8
 8006aee:	468c      	mov	ip, r1
 8006af0:	2108      	movs	r1, #8
 8006af2:	4688      	mov	r8, r1
 8006af4:	44b8      	add	r8, r7
 8006af6:	44c4      	add	ip, r8
 8006af8:	4463      	add	r3, ip
 8006afa:	199b      	adds	r3, r3, r6
 8006afc:	191b      	adds	r3, r3, r4
 8006afe:	0011      	movs	r1, r2
 8006b00:	0018      	movs	r0, r3
 8006b02:	f7fe fa97 	bl	8005034 <CalculateRotationMatrix>
	CalculateRotationMatrix(accel_bias_1, &rotation_matrix_earth_1);
 8006b06:	2308      	movs	r3, #8
 8006b08:	0034      	movs	r4, r6
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	2108      	movs	r1, #8
 8006b0e:	468c      	mov	ip, r1
 8006b10:	2108      	movs	r1, #8
 8006b12:	4688      	mov	r8, r1
 8006b14:	44b8      	add	r8, r7
 8006b16:	44c4      	add	ip, r8
 8006b18:	4462      	add	r2, ip
 8006b1a:	1912      	adds	r2, r2, r4
 8006b1c:	18d2      	adds	r2, r2, r3
 8006b1e:	e029      	b.n	8006b74 <main+0x10ec>
 8006b20:	fffff478 	.word	0xfffff478
 8006b24:	00000c08 	.word	0x00000c08
 8006b28:	fffff46c 	.word	0xfffff46c
 8006b2c:	fffff460 	.word	0xfffff460
 8006b30:	fffff454 	.word	0xfffff454
 8006b34:	fffff448 	.word	0xfffff448
 8006b38:	fffff424 	.word	0xfffff424
 8006b3c:	fffff400 	.word	0xfffff400
 8006b40:	00000c04 	.word	0x00000c04
 8006b44:	49742400 	.word	0x49742400
 8006b48:	00000bec 	.word	0x00000bec
 8006b4c:	fffff3fc 	.word	0xfffff3fc
 8006b50:	08012028 	.word	0x08012028
 8006b54:	00000c03 	.word	0x00000c03
 8006b58:	00000beb 	.word	0x00000beb
 8006b5c:	00000c02 	.word	0x00000c02
 8006b60:	20000590 	.word	0x20000590
 8006b64:	00000ab8 	.word	0x00000ab8
 8006b68:	20000500 	.word	0x20000500
 8006b6c:	2000049c 	.word	0x2000049c
 8006b70:	200003c0 	.word	0x200003c0
 8006b74:	2308      	movs	r3, #8
 8006b76:	2108      	movs	r1, #8
 8006b78:	468c      	mov	ip, r1
 8006b7a:	2108      	movs	r1, #8
 8006b7c:	4688      	mov	r8, r1
 8006b7e:	44b8      	add	r8, r7
 8006b80:	44c4      	add	ip, r8
 8006b82:	4463      	add	r3, ip
 8006b84:	191b      	adds	r3, r3, r4
 8006b86:	195b      	adds	r3, r3, r5
 8006b88:	0011      	movs	r1, r2
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f7fe fa52 	bl	8005034 <CalculateRotationMatrix>
	ICM_GyroCalibration(&hspi1,&huart2, gyro_bias_0, IMU_MOVABLE);
 8006b90:	4bfe      	ldr	r3, [pc, #1016]	; (8006f8c <main+0x1504>)
 8006b92:	0025      	movs	r5, r4
 8006b94:	2208      	movs	r2, #8
 8006b96:	2108      	movs	r1, #8
 8006b98:	468c      	mov	ip, r1
 8006b9a:	2108      	movs	r1, #8
 8006b9c:	4688      	mov	r8, r1
 8006b9e:	44b8      	add	r8, r7
 8006ba0:	44c4      	add	ip, r8
 8006ba2:	4462      	add	r2, ip
 8006ba4:	1952      	adds	r2, r2, r5
 8006ba6:	18d2      	adds	r2, r2, r3
 8006ba8:	49f9      	ldr	r1, [pc, #996]	; (8006f90 <main+0x1508>)
 8006baa:	48fa      	ldr	r0, [pc, #1000]	; (8006f94 <main+0x150c>)
 8006bac:	2300      	movs	r3, #0
 8006bae:	f7fc fd9f 	bl	80036f0 <ICM_GyroCalibration>
	ICM_GyroCalibration(&hspi2,&huart2, gyro_bias_1, IMU_FIXED);
 8006bb2:	23ac      	movs	r3, #172	; 0xac
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	2108      	movs	r1, #8
 8006bba:	468c      	mov	ip, r1
 8006bbc:	2108      	movs	r1, #8
 8006bbe:	4688      	mov	r8, r1
 8006bc0:	44b8      	add	r8, r7
 8006bc2:	44c4      	add	ip, r8
 8006bc4:	4462      	add	r2, ip
 8006bc6:	1952      	adds	r2, r2, r5
 8006bc8:	18d2      	adds	r2, r2, r3
 8006bca:	49f1      	ldr	r1, [pc, #964]	; (8006f90 <main+0x1508>)
 8006bcc:	48f2      	ldr	r0, [pc, #968]	; (8006f98 <main+0x1510>)
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f7fc fd8e 	bl	80036f0 <ICM_GyroCalibration>

	sprintf(uart_buffer, "UART_PREAMBLE\r\n");
 8006bd4:	4af1      	ldr	r2, [pc, #964]	; (8006f9c <main+0x1514>)
 8006bd6:	24b2      	movs	r4, #178	; 0xb2
 8006bd8:	0124      	lsls	r4, r4, #4
 8006bda:	2308      	movs	r3, #8
 8006bdc:	2108      	movs	r1, #8
 8006bde:	468c      	mov	ip, r1
 8006be0:	2108      	movs	r1, #8
 8006be2:	4688      	mov	r8, r1
 8006be4:	44b8      	add	r8, r7
 8006be6:	44c4      	add	ip, r8
 8006be8:	4463      	add	r3, ip
 8006bea:	195b      	adds	r3, r3, r5
 8006bec:	191b      	adds	r3, r3, r4
 8006bee:	0011      	movs	r1, r2
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f006 f9f1 	bl	800cfd8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	4694      	mov	ip, r2
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	4690      	mov	r8, r2
 8006c00:	44b8      	add	r8, r7
 8006c02:	44c4      	add	ip, r8
 8006c04:	4463      	add	r3, ip
 8006c06:	195b      	adds	r3, r3, r5
 8006c08:	191b      	adds	r3, r3, r4
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	f7f9 fa78 	bl	8000100 <strlen>
 8006c10:	0003      	movs	r3, r0
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	23fa      	movs	r3, #250	; 0xfa
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	2108      	movs	r1, #8
 8006c1a:	2008      	movs	r0, #8
 8006c1c:	4684      	mov	ip, r0
 8006c1e:	2008      	movs	r0, #8
 8006c20:	4680      	mov	r8, r0
 8006c22:	44b8      	add	r8, r7
 8006c24:	44c4      	add	ip, r8
 8006c26:	4461      	add	r1, ip
 8006c28:	1949      	adds	r1, r1, r5
 8006c2a:	1909      	adds	r1, r1, r4
 8006c2c:	48d8      	ldr	r0, [pc, #864]	; (8006f90 <main+0x1508>)
 8006c2e:	f004 ffeb 	bl	800bc08 <HAL_UART_Transmit>


  while (1)
  {

	__HAL_TIM_SET_COUNTER(&htim16,0);
 8006c32:	4bdb      	ldr	r3, [pc, #876]	; (8006fa0 <main+0x1518>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2200      	movs	r2, #0
 8006c38:	625a      	str	r2, [r3, #36]	; 0x24
			moving_expected = 1;
		}
	}
	*/

	uart_prescaler = (uart_prescaler + 1) % 50;
 8006c3a:	4cda      	ldr	r4, [pc, #872]	; (8006fa4 <main+0x151c>)
 8006c3c:	2520      	movs	r5, #32
 8006c3e:	2308      	movs	r3, #8
 8006c40:	2208      	movs	r2, #8
 8006c42:	4694      	mov	ip, r2
 8006c44:	2208      	movs	r2, #8
 8006c46:	4690      	mov	r8, r2
 8006c48:	44b8      	add	r8, r7
 8006c4a:	44c4      	add	ip, r8
 8006c4c:	4463      	add	r3, ip
 8006c4e:	195b      	adds	r3, r3, r5
 8006c50:	191b      	adds	r3, r3, r4
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	3301      	adds	r3, #1
 8006c56:	2132      	movs	r1, #50	; 0x32
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f7f9 fbdd 	bl	8000418 <__aeabi_idivmod>
 8006c5e:	000b      	movs	r3, r1
 8006c60:	001a      	movs	r2, r3
 8006c62:	2308      	movs	r3, #8
 8006c64:	2108      	movs	r1, #8
 8006c66:	468c      	mov	ip, r1
 8006c68:	2108      	movs	r1, #8
 8006c6a:	4688      	mov	r8, r1
 8006c6c:	44b8      	add	r8, r7
 8006c6e:	44c4      	add	ip, r8
 8006c70:	4463      	add	r3, ip
 8006c72:	195b      	adds	r3, r3, r5
 8006c74:	191b      	adds	r3, r3, r4
 8006c76:	701a      	strb	r2, [r3, #0]

	// Read Gyroscope
	ICM_ReadGyroData(&hspi1, gyro_data_0, gyro_bias_0, IMU_MOVABLE);
 8006c78:	4bc4      	ldr	r3, [pc, #784]	; (8006f8c <main+0x1504>)
 8006c7a:	2208      	movs	r2, #8
 8006c7c:	2108      	movs	r1, #8
 8006c7e:	468c      	mov	ip, r1
 8006c80:	2108      	movs	r1, #8
 8006c82:	4688      	mov	r8, r1
 8006c84:	44b8      	add	r8, r7
 8006c86:	44c4      	add	ip, r8
 8006c88:	4462      	add	r2, ip
 8006c8a:	1952      	adds	r2, r2, r5
 8006c8c:	18d2      	adds	r2, r2, r3
 8006c8e:	4cc6      	ldr	r4, [pc, #792]	; (8006fa8 <main+0x1520>)
 8006c90:	617c      	str	r4, [r7, #20]
 8006c92:	2308      	movs	r3, #8
 8006c94:	2108      	movs	r1, #8
 8006c96:	468c      	mov	ip, r1
 8006c98:	2108      	movs	r1, #8
 8006c9a:	4688      	mov	r8, r1
 8006c9c:	44b8      	add	r8, r7
 8006c9e:	44c4      	add	ip, r8
 8006ca0:	4463      	add	r3, ip
 8006ca2:	195b      	adds	r3, r3, r5
 8006ca4:	1919      	adds	r1, r3, r4
 8006ca6:	48bb      	ldr	r0, [pc, #748]	; (8006f94 <main+0x150c>)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f7fc ff53 	bl	8003b54 <ICM_ReadGyroData>
	ICM_ReadGyroData(&hspi2, gyro_data_1, gyro_bias_1, IMU_FIXED);
 8006cae:	23ac      	movs	r3, #172	; 0xac
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	0029      	movs	r1, r5
 8006cb4:	2208      	movs	r2, #8
 8006cb6:	2008      	movs	r0, #8
 8006cb8:	4684      	mov	ip, r0
 8006cba:	2008      	movs	r0, #8
 8006cbc:	4680      	mov	r8, r0
 8006cbe:	44b8      	add	r8, r7
 8006cc0:	44c4      	add	ip, r8
 8006cc2:	4462      	add	r2, ip
 8006cc4:	1952      	adds	r2, r2, r5
 8006cc6:	18d2      	adds	r2, r2, r3
 8006cc8:	25af      	movs	r5, #175	; 0xaf
 8006cca:	012d      	lsls	r5, r5, #4
 8006ccc:	000c      	movs	r4, r1
 8006cce:	2308      	movs	r3, #8
 8006cd0:	2008      	movs	r0, #8
 8006cd2:	4684      	mov	ip, r0
 8006cd4:	2008      	movs	r0, #8
 8006cd6:	4680      	mov	r8, r0
 8006cd8:	44b8      	add	r8, r7
 8006cda:	44c4      	add	ip, r8
 8006cdc:	4463      	add	r3, ip
 8006cde:	185b      	adds	r3, r3, r1
 8006ce0:	1959      	adds	r1, r3, r5
 8006ce2:	48ad      	ldr	r0, [pc, #692]	; (8006f98 <main+0x1510>)
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f7fc ff35 	bl	8003b54 <ICM_ReadGyroData>

	// Read Acceleration
	ICM_ReadAccData(&hspi1, accel_data_0, IMU_MOVABLE);
 8006cea:	4eb0      	ldr	r6, [pc, #704]	; (8006fac <main+0x1524>)
 8006cec:	0020      	movs	r0, r4
 8006cee:	0004      	movs	r4, r0
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	2208      	movs	r2, #8
 8006cf4:	4694      	mov	ip, r2
 8006cf6:	2208      	movs	r2, #8
 8006cf8:	4690      	mov	r8, r2
 8006cfa:	44b8      	add	r8, r7
 8006cfc:	44c4      	add	ip, r8
 8006cfe:	4463      	add	r3, ip
 8006d00:	181b      	adds	r3, r3, r0
 8006d02:	1999      	adds	r1, r3, r6
 8006d04:	4ba3      	ldr	r3, [pc, #652]	; (8006f94 <main+0x150c>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f7fc ffe1 	bl	8003cd0 <ICM_ReadAccData>
	ICM_ReadAccData(&hspi2, accel_data_1, IMU_FIXED);
 8006d0e:	4ba8      	ldr	r3, [pc, #672]	; (8006fb0 <main+0x1528>)
 8006d10:	0020      	movs	r0, r4
 8006d12:	0004      	movs	r4, r0
 8006d14:	2208      	movs	r2, #8
 8006d16:	2108      	movs	r1, #8
 8006d18:	468c      	mov	ip, r1
 8006d1a:	2108      	movs	r1, #8
 8006d1c:	4688      	mov	r8, r1
 8006d1e:	44b8      	add	r8, r7
 8006d20:	44c4      	add	ip, r8
 8006d22:	4462      	add	r2, ip
 8006d24:	1812      	adds	r2, r2, r0
 8006d26:	18d1      	adds	r1, r2, r3
 8006d28:	4b9b      	ldr	r3, [pc, #620]	; (8006f98 <main+0x1510>)
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	f7fc ffcf 	bl	8003cd0 <ICM_ReadAccData>

	// Low-pass Filter Gyroscope
	GyroLowPassFilter(gyro_data_0, prev_low_pass_gyro_0, low_pass_gyro_0, low_alpha);
 8006d32:	4aa0      	ldr	r2, [pc, #640]	; (8006fb4 <main+0x152c>)
 8006d34:	0020      	movs	r0, r4
 8006d36:	2308      	movs	r3, #8
 8006d38:	2108      	movs	r1, #8
 8006d3a:	468c      	mov	ip, r1
 8006d3c:	2108      	movs	r1, #8
 8006d3e:	4688      	mov	r8, r1
 8006d40:	44b8      	add	r8, r7
 8006d42:	44c4      	add	ip, r8
 8006d44:	4463      	add	r3, ip
 8006d46:	181b      	adds	r3, r3, r0
 8006d48:	1899      	adds	r1, r3, r2
 8006d4a:	680b      	ldr	r3, [r1, #0]
 8006d4c:	4699      	mov	r9, r3
 8006d4e:	21a2      	movs	r1, #162	; 0xa2
 8006d50:	0049      	lsls	r1, r1, #1
 8006d52:	2208      	movs	r2, #8
 8006d54:	2308      	movs	r3, #8
 8006d56:	469c      	mov	ip, r3
 8006d58:	2308      	movs	r3, #8
 8006d5a:	4698      	mov	r8, r3
 8006d5c:	44b8      	add	r8, r7
 8006d5e:	44c4      	add	ip, r8
 8006d60:	4462      	add	r2, ip
 8006d62:	1812      	adds	r2, r2, r0
 8006d64:	1852      	adds	r2, r2, r1
 8006d66:	2196      	movs	r1, #150	; 0x96
 8006d68:	0049      	lsls	r1, r1, #1
 8006d6a:	2420      	movs	r4, #32
 8006d6c:	46a4      	mov	ip, r4
 8006d6e:	2408      	movs	r4, #8
 8006d70:	46a0      	mov	r8, r4
 8006d72:	2308      	movs	r3, #8
 8006d74:	469a      	mov	sl, r3
 8006d76:	2308      	movs	r3, #8
 8006d78:	469b      	mov	fp, r3
 8006d7a:	44bb      	add	fp, r7
 8006d7c:	44da      	add	sl, fp
 8006d7e:	44d0      	add	r8, sl
 8006d80:	44c4      	add	ip, r8
 8006d82:	4461      	add	r1, ip
 8006d84:	697c      	ldr	r4, [r7, #20]
 8006d86:	2308      	movs	r3, #8
 8006d88:	469c      	mov	ip, r3
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	4698      	mov	r8, r3
 8006d8e:	2308      	movs	r3, #8
 8006d90:	469a      	mov	sl, r3
 8006d92:	44ba      	add	sl, r7
 8006d94:	44d0      	add	r8, sl
 8006d96:	44c4      	add	ip, r8
 8006d98:	4460      	add	r0, ip
 8006d9a:	1900      	adds	r0, r0, r4
 8006d9c:	464b      	mov	r3, r9
 8006d9e:	f7fe f8df 	bl	8004f60 <GyroLowPassFilter>
	GyroLowPassFilter(gyro_data_1, prev_low_pass_gyro_1, low_pass_gyro_1, low_alpha);
 8006da2:	4a84      	ldr	r2, [pc, #528]	; (8006fb4 <main+0x152c>)
 8006da4:	2320      	movs	r3, #32
 8006da6:	469c      	mov	ip, r3
 8006da8:	2308      	movs	r3, #8
 8006daa:	4698      	mov	r8, r3
 8006dac:	2308      	movs	r3, #8
 8006dae:	4699      	mov	r9, r3
 8006db0:	2308      	movs	r3, #8
 8006db2:	469a      	mov	sl, r3
 8006db4:	44ba      	add	sl, r7
 8006db6:	44d1      	add	r9, sl
 8006db8:	44c8      	add	r8, r9
 8006dba:	44c4      	add	ip, r8
 8006dbc:	4462      	add	r2, ip
 8006dbe:	6813      	ldr	r3, [r2, #0]
 8006dc0:	469a      	mov	sl, r3
 8006dc2:	229c      	movs	r2, #156	; 0x9c
 8006dc4:	0052      	lsls	r2, r2, #1
 8006dc6:	2120      	movs	r1, #32
 8006dc8:	468c      	mov	ip, r1
 8006dca:	2108      	movs	r1, #8
 8006dcc:	4688      	mov	r8, r1
 8006dce:	2308      	movs	r3, #8
 8006dd0:	4699      	mov	r9, r3
 8006dd2:	2308      	movs	r3, #8
 8006dd4:	469b      	mov	fp, r3
 8006dd6:	44bb      	add	fp, r7
 8006dd8:	44d9      	add	r9, fp
 8006dda:	44c8      	add	r8, r9
 8006ddc:	44c4      	add	ip, r8
 8006dde:	4462      	add	r2, ip
 8006de0:	2190      	movs	r1, #144	; 0x90
 8006de2:	0049      	lsls	r1, r1, #1
 8006de4:	2420      	movs	r4, #32
 8006de6:	46a4      	mov	ip, r4
 8006de8:	2008      	movs	r0, #8
 8006dea:	4680      	mov	r8, r0
 8006dec:	2308      	movs	r3, #8
 8006dee:	4699      	mov	r9, r3
 8006df0:	2308      	movs	r3, #8
 8006df2:	469b      	mov	fp, r3
 8006df4:	44bb      	add	fp, r7
 8006df6:	44d9      	add	r9, fp
 8006df8:	44c8      	add	r8, r9
 8006dfa:	44c4      	add	ip, r8
 8006dfc:	4461      	add	r1, ip
 8006dfe:	2020      	movs	r0, #32
 8006e00:	2408      	movs	r4, #8
 8006e02:	2308      	movs	r3, #8
 8006e04:	469c      	mov	ip, r3
 8006e06:	2308      	movs	r3, #8
 8006e08:	4698      	mov	r8, r3
 8006e0a:	44b8      	add	r8, r7
 8006e0c:	44c4      	add	ip, r8
 8006e0e:	4464      	add	r4, ip
 8006e10:	1824      	adds	r4, r4, r0
 8006e12:	1960      	adds	r0, r4, r5
 8006e14:	4653      	mov	r3, sl
 8006e16:	f7fe f8a3 	bl	8004f60 <GyroLowPassFilter>

	// Low-pass Filter Acceleration
	GyroLowPassFilter(accel_data_0, prev_low_pass_accel_0, low_pass_accel_0, low_alpha_acc);
 8006e1a:	4c67      	ldr	r4, [pc, #412]	; (8006fb8 <main+0x1530>)
 8006e1c:	2020      	movs	r0, #32
 8006e1e:	2308      	movs	r3, #8
 8006e20:	2208      	movs	r2, #8
 8006e22:	4694      	mov	ip, r2
 8006e24:	2208      	movs	r2, #8
 8006e26:	4690      	mov	r8, r2
 8006e28:	44b8      	add	r8, r7
 8006e2a:	44c4      	add	ip, r8
 8006e2c:	4463      	add	r3, ip
 8006e2e:	181b      	adds	r3, r3, r0
 8006e30:	191a      	adds	r2, r3, r4
 8006e32:	6813      	ldr	r3, [r2, #0]
 8006e34:	469a      	mov	sl, r3
 8006e36:	258a      	movs	r5, #138	; 0x8a
 8006e38:	006d      	lsls	r5, r5, #1
 8006e3a:	617d      	str	r5, [r7, #20]
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	2308      	movs	r3, #8
 8006e40:	469c      	mov	ip, r3
 8006e42:	2308      	movs	r3, #8
 8006e44:	4698      	mov	r8, r3
 8006e46:	44b8      	add	r8, r7
 8006e48:	44c4      	add	ip, r8
 8006e4a:	4462      	add	r2, ip
 8006e4c:	1812      	adds	r2, r2, r0
 8006e4e:	1952      	adds	r2, r2, r5
 8006e50:	21fc      	movs	r1, #252	; 0xfc
 8006e52:	2520      	movs	r5, #32
 8006e54:	46ac      	mov	ip, r5
 8006e56:	2508      	movs	r5, #8
 8006e58:	46a8      	mov	r8, r5
 8006e5a:	2308      	movs	r3, #8
 8006e5c:	4699      	mov	r9, r3
 8006e5e:	2308      	movs	r3, #8
 8006e60:	469b      	mov	fp, r3
 8006e62:	44bb      	add	fp, r7
 8006e64:	44d9      	add	r9, fp
 8006e66:	44c8      	add	r8, r9
 8006e68:	44c4      	add	ip, r8
 8006e6a:	4461      	add	r1, ip
 8006e6c:	2508      	movs	r5, #8
 8006e6e:	2308      	movs	r3, #8
 8006e70:	469c      	mov	ip, r3
 8006e72:	2308      	movs	r3, #8
 8006e74:	4698      	mov	r8, r3
 8006e76:	44b8      	add	r8, r7
 8006e78:	44c4      	add	ip, r8
 8006e7a:	4465      	add	r5, ip
 8006e7c:	182d      	adds	r5, r5, r0
 8006e7e:	19a8      	adds	r0, r5, r6
 8006e80:	4653      	mov	r3, sl
 8006e82:	f7fe f86d 	bl	8004f60 <GyroLowPassFilter>
	GyroLowPassFilter(accel_data_1, prev_low_pass_accel_1, low_pass_accel_1, low_alpha_acc);
 8006e86:	2620      	movs	r6, #32
 8006e88:	2308      	movs	r3, #8
 8006e8a:	2208      	movs	r2, #8
 8006e8c:	4694      	mov	ip, r2
 8006e8e:	2208      	movs	r2, #8
 8006e90:	4690      	mov	r8, r2
 8006e92:	44b8      	add	r8, r7
 8006e94:	44c4      	add	ip, r8
 8006e96:	4463      	add	r3, ip
 8006e98:	199b      	adds	r3, r3, r6
 8006e9a:	191a      	adds	r2, r3, r4
 8006e9c:	6813      	ldr	r3, [r2, #0]
 8006e9e:	2484      	movs	r4, #132	; 0x84
 8006ea0:	0064      	lsls	r4, r4, #1
 8006ea2:	2208      	movs	r2, #8
 8006ea4:	2108      	movs	r1, #8
 8006ea6:	468c      	mov	ip, r1
 8006ea8:	2108      	movs	r1, #8
 8006eaa:	4688      	mov	r8, r1
 8006eac:	44b8      	add	r8, r7
 8006eae:	44c4      	add	ip, r8
 8006eb0:	4462      	add	r2, ip
 8006eb2:	1992      	adds	r2, r2, r6
 8006eb4:	1912      	adds	r2, r2, r4
 8006eb6:	21f0      	movs	r1, #240	; 0xf0
 8006eb8:	2020      	movs	r0, #32
 8006eba:	4684      	mov	ip, r0
 8006ebc:	2008      	movs	r0, #8
 8006ebe:	4680      	mov	r8, r0
 8006ec0:	2008      	movs	r0, #8
 8006ec2:	4681      	mov	r9, r0
 8006ec4:	2008      	movs	r0, #8
 8006ec6:	4682      	mov	sl, r0
 8006ec8:	44ba      	add	sl, r7
 8006eca:	44d1      	add	r9, sl
 8006ecc:	44c8      	add	r8, r9
 8006ece:	44c4      	add	ip, r8
 8006ed0:	4461      	add	r1, ip
 8006ed2:	4837      	ldr	r0, [pc, #220]	; (8006fb0 <main+0x1528>)
 8006ed4:	2520      	movs	r5, #32
 8006ed6:	46ac      	mov	ip, r5
 8006ed8:	2508      	movs	r5, #8
 8006eda:	46a8      	mov	r8, r5
 8006edc:	2508      	movs	r5, #8
 8006ede:	46a9      	mov	r9, r5
 8006ee0:	2508      	movs	r5, #8
 8006ee2:	46aa      	mov	sl, r5
 8006ee4:	44ba      	add	sl, r7
 8006ee6:	44d1      	add	r9, sl
 8006ee8:	44c8      	add	r8, r9
 8006eea:	44c4      	add	ip, r8
 8006eec:	4460      	add	r0, ip
 8006eee:	f7fe f837 	bl	8004f60 <GyroLowPassFilter>

	// Rotate Accelerometer into earthframe
	CalculateAccelerometerInEarthFrame(&rotation_matrix_earth_0, low_pass_accel_0, accel_data_earthframe_0);
 8006ef2:	4b32      	ldr	r3, [pc, #200]	; (8006fbc <main+0x1534>)
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	2108      	movs	r1, #8
 8006ef8:	468c      	mov	ip, r1
 8006efa:	2108      	movs	r1, #8
 8006efc:	4688      	mov	r8, r1
 8006efe:	44b8      	add	r8, r7
 8006f00:	44c4      	add	ip, r8
 8006f02:	4462      	add	r2, ip
 8006f04:	1992      	adds	r2, r2, r6
 8006f06:	18d2      	adds	r2, r2, r3
 8006f08:	697d      	ldr	r5, [r7, #20]
 8006f0a:	2308      	movs	r3, #8
 8006f0c:	2108      	movs	r1, #8
 8006f0e:	468c      	mov	ip, r1
 8006f10:	2108      	movs	r1, #8
 8006f12:	4688      	mov	r8, r1
 8006f14:	44b8      	add	r8, r7
 8006f16:	44c4      	add	ip, r8
 8006f18:	4463      	add	r3, ip
 8006f1a:	199b      	adds	r3, r3, r6
 8006f1c:	1959      	adds	r1, r3, r5
 8006f1e:	232c      	movs	r3, #44	; 0x2c
 8006f20:	2020      	movs	r0, #32
 8006f22:	4684      	mov	ip, r0
 8006f24:	2008      	movs	r0, #8
 8006f26:	4680      	mov	r8, r0
 8006f28:	2008      	movs	r0, #8
 8006f2a:	4681      	mov	r9, r0
 8006f2c:	2008      	movs	r0, #8
 8006f2e:	4682      	mov	sl, r0
 8006f30:	44ba      	add	sl, r7
 8006f32:	44d1      	add	r9, sl
 8006f34:	44c8      	add	r8, r9
 8006f36:	44c4      	add	ip, r8
 8006f38:	4463      	add	r3, ip
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f7fe fcae 	bl	800589c <CalculateAccelerometerInEarthFrame>
	CalculateAccelerometerInEarthFrame(&rotation_matrix_earth_1, low_pass_accel_1, accel_data_earthframe_1);
 8006f40:	4b1f      	ldr	r3, [pc, #124]	; (8006fc0 <main+0x1538>)
 8006f42:	2208      	movs	r2, #8
 8006f44:	2108      	movs	r1, #8
 8006f46:	468c      	mov	ip, r1
 8006f48:	2108      	movs	r1, #8
 8006f4a:	4688      	mov	r8, r1
 8006f4c:	44b8      	add	r8, r7
 8006f4e:	44c4      	add	ip, r8
 8006f50:	4462      	add	r2, ip
 8006f52:	1992      	adds	r2, r2, r6
 8006f54:	18d2      	adds	r2, r2, r3
 8006f56:	2308      	movs	r3, #8
 8006f58:	2108      	movs	r1, #8
 8006f5a:	468c      	mov	ip, r1
 8006f5c:	2108      	movs	r1, #8
 8006f5e:	4688      	mov	r8, r1
 8006f60:	44b8      	add	r8, r7
 8006f62:	44c4      	add	ip, r8
 8006f64:	4463      	add	r3, ip
 8006f66:	199b      	adds	r3, r3, r6
 8006f68:	1919      	adds	r1, r3, r4
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	2020      	movs	r0, #32
 8006f6e:	4684      	mov	ip, r0
 8006f70:	2008      	movs	r0, #8
 8006f72:	4680      	mov	r8, r0
 8006f74:	2008      	movs	r0, #8
 8006f76:	4681      	mov	r9, r0
 8006f78:	2008      	movs	r0, #8
 8006f7a:	4682      	mov	sl, r0
 8006f7c:	44ba      	add	sl, r7
 8006f7e:	44d1      	add	r9, sl
 8006f80:	44c8      	add	r8, r9
 8006f82:	44c4      	add	ip, r8
 8006f84:	4463      	add	r3, ip
 8006f86:	0018      	movs	r0, r3
 8006f88:	e01c      	b.n	8006fc4 <main+0x153c>
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	00000acc 	.word	0x00000acc
 8006f90:	20000500 	.word	0x20000500
 8006f94:	2000049c 	.word	0x2000049c
 8006f98:	200003c0 	.word	0x200003c0
 8006f9c:	08011f38 	.word	0x08011f38
 8006fa0:	20000590 	.word	0x20000590
 8006fa4:	00000c02 	.word	0x00000c02
 8006fa8:	00000afc 	.word	0x00000afc
 8006fac:	00000b14 	.word	0x00000b14
 8006fb0:	00000b08 	.word	0x00000b08
 8006fb4:	00000bf8 	.word	0x00000bf8
 8006fb8:	00000bf4 	.word	0x00000bf4
 8006fbc:	00000ae4 	.word	0x00000ae4
 8006fc0:	00000ad8 	.word	0x00000ad8
 8006fc4:	f7fe fc6a 	bl	800589c <CalculateAccelerometerInEarthFrame>

	*/

	// Record 50 previous samples from MOVING IMU
// Record 50 previous samples from FIXED IMU
	for (uint8_t j = 0; j < 6; j++)
 8006fc8:	4b11      	ldr	r3, [pc, #68]	; (8007010 <main+0x1588>)
 8006fca:	2220      	movs	r2, #32
 8006fcc:	4694      	mov	ip, r2
 8006fce:	2208      	movs	r2, #8
 8006fd0:	4690      	mov	r8, r2
 8006fd2:	2208      	movs	r2, #8
 8006fd4:	4691      	mov	r9, r2
 8006fd6:	2208      	movs	r2, #8
 8006fd8:	4692      	mov	sl, r2
 8006fda:	44ba      	add	sl, r7
 8006fdc:	44d1      	add	r9, sl
 8006fde:	44c8      	add	r8, r9
 8006fe0:	44c4      	add	ip, r8
 8006fe2:	4463      	add	r3, ip
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	701a      	strb	r2, [r3, #0]
 8006fe8:	e110      	b.n	800720c <main+0x1784>
	{
		for (uint8_t i =  0; i < (TAMPERING_BUFFER_SIZE - 1); i++)
 8006fea:	23c0      	movs	r3, #192	; 0xc0
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	2220      	movs	r2, #32
 8006ff0:	4694      	mov	ip, r2
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	4690      	mov	r8, r2
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	4691      	mov	r9, r2
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	4692      	mov	sl, r2
 8006ffe:	44ba      	add	sl, r7
 8007000:	44d1      	add	r9, sl
 8007002:	44c8      	add	r8, r9
 8007004:	44c4      	add	ip, r8
 8007006:	4463      	add	r3, ip
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	e0d2      	b.n	80071b4 <main+0x172c>
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	00000c01 	.word	0x00000c01
		{
			tampering_buffer_0[j][i+1] = tampering_buffer_0[j][i];
 8007014:	4afd      	ldr	r2, [pc, #1012]	; (800740c <main+0x1984>)
 8007016:	2520      	movs	r5, #32
 8007018:	2308      	movs	r3, #8
 800701a:	2108      	movs	r1, #8
 800701c:	468c      	mov	ip, r1
 800701e:	2108      	movs	r1, #8
 8007020:	4688      	mov	r8, r1
 8007022:	44b8      	add	r8, r7
 8007024:	44c4      	add	ip, r8
 8007026:	4463      	add	r3, ip
 8007028:	195b      	adds	r3, r3, r5
 800702a:	189b      	adds	r3, r3, r2
 800702c:	781c      	ldrb	r4, [r3, #0]
 800702e:	26c0      	movs	r6, #192	; 0xc0
 8007030:	0136      	lsls	r6, r6, #4
 8007032:	2308      	movs	r3, #8
 8007034:	2108      	movs	r1, #8
 8007036:	468c      	mov	ip, r1
 8007038:	2108      	movs	r1, #8
 800703a:	4688      	mov	r8, r1
 800703c:	44b8      	add	r8, r7
 800703e:	44c4      	add	ip, r8
 8007040:	4463      	add	r3, ip
 8007042:	195b      	adds	r3, r3, r5
 8007044:	199b      	adds	r3, r3, r6
 8007046:	7819      	ldrb	r1, [r3, #0]
 8007048:	2308      	movs	r3, #8
 800704a:	2008      	movs	r0, #8
 800704c:	4684      	mov	ip, r0
 800704e:	2008      	movs	r0, #8
 8007050:	4680      	mov	r8, r0
 8007052:	44b8      	add	r8, r7
 8007054:	44c4      	add	ip, r8
 8007056:	4463      	add	r3, ip
 8007058:	195b      	adds	r3, r3, r5
 800705a:	189b      	adds	r3, r3, r2
 800705c:	7818      	ldrb	r0, [r3, #0]
 800705e:	2308      	movs	r3, #8
 8007060:	2208      	movs	r2, #8
 8007062:	4694      	mov	ip, r2
 8007064:	2208      	movs	r2, #8
 8007066:	4690      	mov	r8, r2
 8007068:	44b8      	add	r8, r7
 800706a:	44c4      	add	ip, r8
 800706c:	4463      	add	r3, ip
 800706e:	195b      	adds	r3, r3, r5
 8007070:	199b      	adds	r3, r3, r6
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	4be6      	ldr	r3, [pc, #920]	; (8007410 <main+0x1988>)
 8007078:	4de6      	ldr	r5, [pc, #920]	; (8007414 <main+0x198c>)
 800707a:	46ac      	mov	ip, r5
 800707c:	2520      	movs	r5, #32
 800707e:	46a8      	mov	r8, r5
 8007080:	2508      	movs	r5, #8
 8007082:	46a9      	mov	r9, r5
 8007084:	2508      	movs	r5, #8
 8007086:	46aa      	mov	sl, r5
 8007088:	2508      	movs	r5, #8
 800708a:	46ab      	mov	fp, r5
 800708c:	44bb      	add	fp, r7
 800708e:	44da      	add	sl, fp
 8007090:	44d1      	add	r9, sl
 8007092:	44c8      	add	r8, r9
 8007094:	44c4      	add	ip, r8
 8007096:	4463      	add	r3, ip
 8007098:	2532      	movs	r5, #50	; 0x32
 800709a:	436c      	muls	r4, r5
 800709c:	1861      	adds	r1, r4, r1
 800709e:	0089      	lsls	r1, r1, #2
 80070a0:	58c9      	ldr	r1, [r1, r3]
 80070a2:	4bdb      	ldr	r3, [pc, #876]	; (8007410 <main+0x1988>)
 80070a4:	4cdb      	ldr	r4, [pc, #876]	; (8007414 <main+0x198c>)
 80070a6:	46a4      	mov	ip, r4
 80070a8:	2420      	movs	r4, #32
 80070aa:	46a0      	mov	r8, r4
 80070ac:	2408      	movs	r4, #8
 80070ae:	46a1      	mov	r9, r4
 80070b0:	2408      	movs	r4, #8
 80070b2:	46a2      	mov	sl, r4
 80070b4:	2408      	movs	r4, #8
 80070b6:	46a3      	mov	fp, r4
 80070b8:	44bb      	add	fp, r7
 80070ba:	44da      	add	sl, fp
 80070bc:	44d1      	add	r9, sl
 80070be:	44c8      	add	r8, r9
 80070c0:	44c4      	add	ip, r8
 80070c2:	4463      	add	r3, ip
 80070c4:	2432      	movs	r4, #50	; 0x32
 80070c6:	4360      	muls	r0, r4
 80070c8:	1882      	adds	r2, r0, r2
 80070ca:	0092      	lsls	r2, r2, #2
 80070cc:	50d1      	str	r1, [r2, r3]
			tampering_buffer_1[j][i+1] = tampering_buffer_0[j][i];
 80070ce:	4acf      	ldr	r2, [pc, #828]	; (800740c <main+0x1984>)
 80070d0:	2520      	movs	r5, #32
 80070d2:	2308      	movs	r3, #8
 80070d4:	2108      	movs	r1, #8
 80070d6:	468c      	mov	ip, r1
 80070d8:	2108      	movs	r1, #8
 80070da:	4688      	mov	r8, r1
 80070dc:	44b8      	add	r8, r7
 80070de:	44c4      	add	ip, r8
 80070e0:	4463      	add	r3, ip
 80070e2:	195b      	adds	r3, r3, r5
 80070e4:	189b      	adds	r3, r3, r2
 80070e6:	781c      	ldrb	r4, [r3, #0]
 80070e8:	2308      	movs	r3, #8
 80070ea:	2108      	movs	r1, #8
 80070ec:	468c      	mov	ip, r1
 80070ee:	2108      	movs	r1, #8
 80070f0:	4688      	mov	r8, r1
 80070f2:	44b8      	add	r8, r7
 80070f4:	44c4      	add	ip, r8
 80070f6:	4463      	add	r3, ip
 80070f8:	195b      	adds	r3, r3, r5
 80070fa:	199b      	adds	r3, r3, r6
 80070fc:	7819      	ldrb	r1, [r3, #0]
 80070fe:	2308      	movs	r3, #8
 8007100:	2008      	movs	r0, #8
 8007102:	4684      	mov	ip, r0
 8007104:	2008      	movs	r0, #8
 8007106:	4680      	mov	r8, r0
 8007108:	44b8      	add	r8, r7
 800710a:	44c4      	add	ip, r8
 800710c:	4463      	add	r3, ip
 800710e:	195b      	adds	r3, r3, r5
 8007110:	189b      	adds	r3, r3, r2
 8007112:	7818      	ldrb	r0, [r3, #0]
 8007114:	2308      	movs	r3, #8
 8007116:	2208      	movs	r2, #8
 8007118:	4694      	mov	ip, r2
 800711a:	2208      	movs	r2, #8
 800711c:	4690      	mov	r8, r2
 800711e:	44b8      	add	r8, r7
 8007120:	44c4      	add	ip, r8
 8007122:	4463      	add	r3, ip
 8007124:	195b      	adds	r3, r3, r5
 8007126:	199b      	adds	r3, r3, r6
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	4bb8      	ldr	r3, [pc, #736]	; (8007410 <main+0x1988>)
 800712e:	4db9      	ldr	r5, [pc, #740]	; (8007414 <main+0x198c>)
 8007130:	46ac      	mov	ip, r5
 8007132:	2520      	movs	r5, #32
 8007134:	46a8      	mov	r8, r5
 8007136:	2508      	movs	r5, #8
 8007138:	46a9      	mov	r9, r5
 800713a:	2508      	movs	r5, #8
 800713c:	46aa      	mov	sl, r5
 800713e:	2508      	movs	r5, #8
 8007140:	46ab      	mov	fp, r5
 8007142:	44bb      	add	fp, r7
 8007144:	44da      	add	sl, fp
 8007146:	44d1      	add	r9, sl
 8007148:	44c8      	add	r8, r9
 800714a:	44c4      	add	ip, r8
 800714c:	4463      	add	r3, ip
 800714e:	2532      	movs	r5, #50	; 0x32
 8007150:	436c      	muls	r4, r5
 8007152:	1861      	adds	r1, r4, r1
 8007154:	0089      	lsls	r1, r1, #2
 8007156:	58c9      	ldr	r1, [r1, r3]
 8007158:	4baf      	ldr	r3, [pc, #700]	; (8007418 <main+0x1990>)
 800715a:	4cae      	ldr	r4, [pc, #696]	; (8007414 <main+0x198c>)
 800715c:	46a4      	mov	ip, r4
 800715e:	2420      	movs	r4, #32
 8007160:	46a0      	mov	r8, r4
 8007162:	2408      	movs	r4, #8
 8007164:	46a1      	mov	r9, r4
 8007166:	2408      	movs	r4, #8
 8007168:	46a2      	mov	sl, r4
 800716a:	2408      	movs	r4, #8
 800716c:	46a3      	mov	fp, r4
 800716e:	44bb      	add	fp, r7
 8007170:	44da      	add	sl, fp
 8007172:	44d1      	add	r9, sl
 8007174:	44c8      	add	r8, r9
 8007176:	44c4      	add	ip, r8
 8007178:	4463      	add	r3, ip
 800717a:	2432      	movs	r4, #50	; 0x32
 800717c:	4360      	muls	r0, r4
 800717e:	1882      	adds	r2, r0, r2
 8007180:	0092      	lsls	r2, r2, #2
 8007182:	50d1      	str	r1, [r2, r3]
		for (uint8_t i =  0; i < (TAMPERING_BUFFER_SIZE - 1); i++)
 8007184:	2120      	movs	r1, #32
 8007186:	2308      	movs	r3, #8
 8007188:	2208      	movs	r2, #8
 800718a:	4694      	mov	ip, r2
 800718c:	2208      	movs	r2, #8
 800718e:	4690      	mov	r8, r2
 8007190:	44b8      	add	r8, r7
 8007192:	44c4      	add	ip, r8
 8007194:	4463      	add	r3, ip
 8007196:	185b      	adds	r3, r3, r1
 8007198:	199b      	adds	r3, r3, r6
 800719a:	781a      	ldrb	r2, [r3, #0]
 800719c:	2308      	movs	r3, #8
 800719e:	2008      	movs	r0, #8
 80071a0:	4684      	mov	ip, r0
 80071a2:	2008      	movs	r0, #8
 80071a4:	4680      	mov	r8, r0
 80071a6:	44b8      	add	r8, r7
 80071a8:	44c4      	add	ip, r8
 80071aa:	4463      	add	r3, ip
 80071ac:	185b      	adds	r3, r3, r1
 80071ae:	199b      	adds	r3, r3, r6
 80071b0:	3201      	adds	r2, #1
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	23c0      	movs	r3, #192	; 0xc0
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	2220      	movs	r2, #32
 80071ba:	4694      	mov	ip, r2
 80071bc:	2208      	movs	r2, #8
 80071be:	4690      	mov	r8, r2
 80071c0:	2208      	movs	r2, #8
 80071c2:	4691      	mov	r9, r2
 80071c4:	2208      	movs	r2, #8
 80071c6:	4692      	mov	sl, r2
 80071c8:	44ba      	add	sl, r7
 80071ca:	44d1      	add	r9, sl
 80071cc:	44c8      	add	r8, r9
 80071ce:	44c4      	add	ip, r8
 80071d0:	4463      	add	r3, ip
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b30      	cmp	r3, #48	; 0x30
 80071d6:	d800      	bhi.n	80071da <main+0x1752>
 80071d8:	e71c      	b.n	8007014 <main+0x158c>
	for (uint8_t j = 0; j < 6; j++)
 80071da:	498c      	ldr	r1, [pc, #560]	; (800740c <main+0x1984>)
 80071dc:	2020      	movs	r0, #32
 80071de:	2308      	movs	r3, #8
 80071e0:	2208      	movs	r2, #8
 80071e2:	4694      	mov	ip, r2
 80071e4:	2208      	movs	r2, #8
 80071e6:	4690      	mov	r8, r2
 80071e8:	44b8      	add	r8, r7
 80071ea:	44c4      	add	ip, r8
 80071ec:	4463      	add	r3, ip
 80071ee:	181b      	adds	r3, r3, r0
 80071f0:	185b      	adds	r3, r3, r1
 80071f2:	781a      	ldrb	r2, [r3, #0]
 80071f4:	2308      	movs	r3, #8
 80071f6:	2408      	movs	r4, #8
 80071f8:	46a4      	mov	ip, r4
 80071fa:	2408      	movs	r4, #8
 80071fc:	46a0      	mov	r8, r4
 80071fe:	44b8      	add	r8, r7
 8007200:	44c4      	add	ip, r8
 8007202:	4463      	add	r3, ip
 8007204:	181b      	adds	r3, r3, r0
 8007206:	185b      	adds	r3, r3, r1
 8007208:	3201      	adds	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	4b7f      	ldr	r3, [pc, #508]	; (800740c <main+0x1984>)
 800720e:	2220      	movs	r2, #32
 8007210:	4694      	mov	ip, r2
 8007212:	2208      	movs	r2, #8
 8007214:	4690      	mov	r8, r2
 8007216:	2208      	movs	r2, #8
 8007218:	4691      	mov	r9, r2
 800721a:	2208      	movs	r2, #8
 800721c:	4692      	mov	sl, r2
 800721e:	44ba      	add	sl, r7
 8007220:	44d1      	add	r9, sl
 8007222:	44c8      	add	r8, r9
 8007224:	44c4      	add	ip, r8
 8007226:	4463      	add	r3, ip
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	2b05      	cmp	r3, #5
 800722c:	d800      	bhi.n	8007230 <main+0x17a8>
 800722e:	e6dc      	b.n	8006fea <main+0x1562>
		}
	}
	tampering_buffer_0[0][0] = accel_data_earthframe_0[0];
 8007230:	4b7a      	ldr	r3, [pc, #488]	; (800741c <main+0x1994>)
 8007232:	4a78      	ldr	r2, [pc, #480]	; (8007414 <main+0x198c>)
 8007234:	4694      	mov	ip, r2
 8007236:	2220      	movs	r2, #32
 8007238:	4690      	mov	r8, r2
 800723a:	2208      	movs	r2, #8
 800723c:	4691      	mov	r9, r2
 800723e:	2208      	movs	r2, #8
 8007240:	4692      	mov	sl, r2
 8007242:	2208      	movs	r2, #8
 8007244:	4693      	mov	fp, r2
 8007246:	44bb      	add	fp, r7
 8007248:	44da      	add	sl, fp
 800724a:	44d1      	add	r9, sl
 800724c:	44c8      	add	r8, r9
 800724e:	44c4      	add	ip, r8
 8007250:	4463      	add	r3, ip
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	4b6e      	ldr	r3, [pc, #440]	; (8007410 <main+0x1988>)
 8007256:	496f      	ldr	r1, [pc, #444]	; (8007414 <main+0x198c>)
 8007258:	468c      	mov	ip, r1
 800725a:	2120      	movs	r1, #32
 800725c:	4688      	mov	r8, r1
 800725e:	2108      	movs	r1, #8
 8007260:	4689      	mov	r9, r1
 8007262:	2108      	movs	r1, #8
 8007264:	468a      	mov	sl, r1
 8007266:	2108      	movs	r1, #8
 8007268:	468b      	mov	fp, r1
 800726a:	44bb      	add	fp, r7
 800726c:	44da      	add	sl, fp
 800726e:	44d1      	add	r9, sl
 8007270:	44c8      	add	r8, r9
 8007272:	44c4      	add	ip, r8
 8007274:	4463      	add	r3, ip
 8007276:	601a      	str	r2, [r3, #0]
	tampering_buffer_0[1][0] = accel_data_earthframe_0[1];
 8007278:	4b68      	ldr	r3, [pc, #416]	; (800741c <main+0x1994>)
 800727a:	4a66      	ldr	r2, [pc, #408]	; (8007414 <main+0x198c>)
 800727c:	4694      	mov	ip, r2
 800727e:	2220      	movs	r2, #32
 8007280:	4690      	mov	r8, r2
 8007282:	2208      	movs	r2, #8
 8007284:	4691      	mov	r9, r2
 8007286:	2208      	movs	r2, #8
 8007288:	4692      	mov	sl, r2
 800728a:	2208      	movs	r2, #8
 800728c:	4693      	mov	fp, r2
 800728e:	44bb      	add	fp, r7
 8007290:	44da      	add	sl, fp
 8007292:	44d1      	add	r9, sl
 8007294:	44c8      	add	r8, r9
 8007296:	44c4      	add	ip, r8
 8007298:	4463      	add	r3, ip
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	4b5c      	ldr	r3, [pc, #368]	; (8007410 <main+0x1988>)
 800729e:	495d      	ldr	r1, [pc, #372]	; (8007414 <main+0x198c>)
 80072a0:	468c      	mov	ip, r1
 80072a2:	2120      	movs	r1, #32
 80072a4:	4688      	mov	r8, r1
 80072a6:	2108      	movs	r1, #8
 80072a8:	4689      	mov	r9, r1
 80072aa:	2108      	movs	r1, #8
 80072ac:	468a      	mov	sl, r1
 80072ae:	2108      	movs	r1, #8
 80072b0:	468b      	mov	fp, r1
 80072b2:	44bb      	add	fp, r7
 80072b4:	44da      	add	sl, fp
 80072b6:	44d1      	add	r9, sl
 80072b8:	44c8      	add	r8, r9
 80072ba:	44c4      	add	ip, r8
 80072bc:	4463      	add	r3, ip
 80072be:	21c8      	movs	r1, #200	; 0xc8
 80072c0:	505a      	str	r2, [r3, r1]
	tampering_buffer_0[2][0] = accel_data_earthframe_0[2];
 80072c2:	4b56      	ldr	r3, [pc, #344]	; (800741c <main+0x1994>)
 80072c4:	4a53      	ldr	r2, [pc, #332]	; (8007414 <main+0x198c>)
 80072c6:	4694      	mov	ip, r2
 80072c8:	2220      	movs	r2, #32
 80072ca:	4690      	mov	r8, r2
 80072cc:	2208      	movs	r2, #8
 80072ce:	4691      	mov	r9, r2
 80072d0:	2208      	movs	r2, #8
 80072d2:	4692      	mov	sl, r2
 80072d4:	2208      	movs	r2, #8
 80072d6:	4693      	mov	fp, r2
 80072d8:	44bb      	add	fp, r7
 80072da:	44da      	add	sl, fp
 80072dc:	44d1      	add	r9, sl
 80072de:	44c8      	add	r8, r9
 80072e0:	44c4      	add	ip, r8
 80072e2:	4463      	add	r3, ip
 80072e4:	6899      	ldr	r1, [r3, #8]
 80072e6:	4b4a      	ldr	r3, [pc, #296]	; (8007410 <main+0x1988>)
 80072e8:	484a      	ldr	r0, [pc, #296]	; (8007414 <main+0x198c>)
 80072ea:	2420      	movs	r4, #32
 80072ec:	2208      	movs	r2, #8
 80072ee:	2508      	movs	r5, #8
 80072f0:	46ac      	mov	ip, r5
 80072f2:	2508      	movs	r5, #8
 80072f4:	46a8      	mov	r8, r5
 80072f6:	44b8      	add	r8, r7
 80072f8:	44c4      	add	ip, r8
 80072fa:	4462      	add	r2, ip
 80072fc:	1912      	adds	r2, r2, r4
 80072fe:	1812      	adds	r2, r2, r0
 8007300:	18d2      	adds	r2, r2, r3
 8007302:	23c8      	movs	r3, #200	; 0xc8
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	50d1      	str	r1, [r2, r3]
	tampering_buffer_0[3][0] = low_pass_gyro_0[0];
 8007308:	4b45      	ldr	r3, [pc, #276]	; (8007420 <main+0x1998>)
 800730a:	4a42      	ldr	r2, [pc, #264]	; (8007414 <main+0x198c>)
 800730c:	4694      	mov	ip, r2
 800730e:	2220      	movs	r2, #32
 8007310:	4690      	mov	r8, r2
 8007312:	2208      	movs	r2, #8
 8007314:	4691      	mov	r9, r2
 8007316:	2208      	movs	r2, #8
 8007318:	4692      	mov	sl, r2
 800731a:	2208      	movs	r2, #8
 800731c:	4693      	mov	fp, r2
 800731e:	44bb      	add	fp, r7
 8007320:	44da      	add	sl, fp
 8007322:	44d1      	add	r9, sl
 8007324:	44c8      	add	r8, r9
 8007326:	44c4      	add	ip, r8
 8007328:	4463      	add	r3, ip
 800732a:	6819      	ldr	r1, [r3, #0]
 800732c:	4b38      	ldr	r3, [pc, #224]	; (8007410 <main+0x1988>)
 800732e:	2208      	movs	r2, #8
 8007330:	2508      	movs	r5, #8
 8007332:	46ac      	mov	ip, r5
 8007334:	2508      	movs	r5, #8
 8007336:	46a8      	mov	r8, r5
 8007338:	44b8      	add	r8, r7
 800733a:	44c4      	add	ip, r8
 800733c:	4462      	add	r2, ip
 800733e:	1912      	adds	r2, r2, r4
 8007340:	1812      	adds	r2, r2, r0
 8007342:	18d2      	adds	r2, r2, r3
 8007344:	2396      	movs	r3, #150	; 0x96
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	50d1      	str	r1, [r2, r3]
	tampering_buffer_0[4][0] = low_pass_gyro_0[1];
 800734a:	4b35      	ldr	r3, [pc, #212]	; (8007420 <main+0x1998>)
 800734c:	4a31      	ldr	r2, [pc, #196]	; (8007414 <main+0x198c>)
 800734e:	4694      	mov	ip, r2
 8007350:	2220      	movs	r2, #32
 8007352:	4690      	mov	r8, r2
 8007354:	2208      	movs	r2, #8
 8007356:	4691      	mov	r9, r2
 8007358:	2208      	movs	r2, #8
 800735a:	4692      	mov	sl, r2
 800735c:	2208      	movs	r2, #8
 800735e:	4693      	mov	fp, r2
 8007360:	44bb      	add	fp, r7
 8007362:	44da      	add	sl, fp
 8007364:	44d1      	add	r9, sl
 8007366:	44c8      	add	r8, r9
 8007368:	44c4      	add	ip, r8
 800736a:	4463      	add	r3, ip
 800736c:	6859      	ldr	r1, [r3, #4]
 800736e:	4b28      	ldr	r3, [pc, #160]	; (8007410 <main+0x1988>)
 8007370:	2208      	movs	r2, #8
 8007372:	2508      	movs	r5, #8
 8007374:	46ac      	mov	ip, r5
 8007376:	2508      	movs	r5, #8
 8007378:	46a8      	mov	r8, r5
 800737a:	44b8      	add	r8, r7
 800737c:	44c4      	add	ip, r8
 800737e:	4462      	add	r2, ip
 8007380:	1912      	adds	r2, r2, r4
 8007382:	1812      	adds	r2, r2, r0
 8007384:	18d2      	adds	r2, r2, r3
 8007386:	23c8      	movs	r3, #200	; 0xc8
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	50d1      	str	r1, [r2, r3]
	tampering_buffer_0[5][0] = low_pass_gyro_0[2];
 800738c:	4b24      	ldr	r3, [pc, #144]	; (8007420 <main+0x1998>)
 800738e:	4a21      	ldr	r2, [pc, #132]	; (8007414 <main+0x198c>)
 8007390:	4694      	mov	ip, r2
 8007392:	2220      	movs	r2, #32
 8007394:	4690      	mov	r8, r2
 8007396:	2208      	movs	r2, #8
 8007398:	4691      	mov	r9, r2
 800739a:	2208      	movs	r2, #8
 800739c:	4692      	mov	sl, r2
 800739e:	2208      	movs	r2, #8
 80073a0:	4693      	mov	fp, r2
 80073a2:	44bb      	add	fp, r7
 80073a4:	44da      	add	sl, fp
 80073a6:	44d1      	add	r9, sl
 80073a8:	44c8      	add	r8, r9
 80073aa:	44c4      	add	ip, r8
 80073ac:	4463      	add	r3, ip
 80073ae:	6899      	ldr	r1, [r3, #8]
 80073b0:	4b17      	ldr	r3, [pc, #92]	; (8007410 <main+0x1988>)
 80073b2:	2208      	movs	r2, #8
 80073b4:	2508      	movs	r5, #8
 80073b6:	46ac      	mov	ip, r5
 80073b8:	2508      	movs	r5, #8
 80073ba:	46a8      	mov	r8, r5
 80073bc:	44b8      	add	r8, r7
 80073be:	44c4      	add	ip, r8
 80073c0:	4462      	add	r2, ip
 80073c2:	1912      	adds	r2, r2, r4
 80073c4:	1812      	adds	r2, r2, r0
 80073c6:	18d2      	adds	r2, r2, r3
 80073c8:	23fa      	movs	r3, #250	; 0xfa
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	50d1      	str	r1, [r2, r3]

	tampering_buffer_1[0][0] = accel_data_earthframe_1[0];
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <main+0x199c>)
 80073d0:	4a10      	ldr	r2, [pc, #64]	; (8007414 <main+0x198c>)
 80073d2:	4694      	mov	ip, r2
 80073d4:	2220      	movs	r2, #32
 80073d6:	4690      	mov	r8, r2
 80073d8:	2208      	movs	r2, #8
 80073da:	4691      	mov	r9, r2
 80073dc:	2208      	movs	r2, #8
 80073de:	4692      	mov	sl, r2
 80073e0:	2208      	movs	r2, #8
 80073e2:	4693      	mov	fp, r2
 80073e4:	44bb      	add	fp, r7
 80073e6:	44da      	add	sl, fp
 80073e8:	44d1      	add	r9, sl
 80073ea:	44c8      	add	r8, r9
 80073ec:	44c4      	add	ip, r8
 80073ee:	4463      	add	r3, ip
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <main+0x1990>)
 80073f4:	4907      	ldr	r1, [pc, #28]	; (8007414 <main+0x198c>)
 80073f6:	468c      	mov	ip, r1
 80073f8:	2120      	movs	r1, #32
 80073fa:	4688      	mov	r8, r1
 80073fc:	2108      	movs	r1, #8
 80073fe:	4689      	mov	r9, r1
 8007400:	2108      	movs	r1, #8
 8007402:	468a      	mov	sl, r1
 8007404:	2108      	movs	r1, #8
 8007406:	468b      	mov	fp, r1
 8007408:	e00e      	b.n	8007428 <main+0x19a0>
 800740a:	46c0      	nop			; (mov r8, r8)
 800740c:	00000c01 	.word	0x00000c01
 8007410:	fffff9f8 	.word	0xfffff9f8
 8007414:	00000c08 	.word	0x00000c08
 8007418:	fffff548 	.word	0xfffff548
 800741c:	fffffedc 	.word	0xfffffedc
 8007420:	fffff53c 	.word	0xfffff53c
 8007424:	fffffed0 	.word	0xfffffed0
 8007428:	44bb      	add	fp, r7
 800742a:	44da      	add	sl, fp
 800742c:	44d1      	add	r9, sl
 800742e:	44c8      	add	r8, r9
 8007430:	44c4      	add	ip, r8
 8007432:	4463      	add	r3, ip
 8007434:	601a      	str	r2, [r3, #0]
	tampering_buffer_1[1][0] = accel_data_earthframe_1[1];
 8007436:	4bf0      	ldr	r3, [pc, #960]	; (80077f8 <main+0x1d70>)
 8007438:	4af0      	ldr	r2, [pc, #960]	; (80077fc <main+0x1d74>)
 800743a:	4694      	mov	ip, r2
 800743c:	2220      	movs	r2, #32
 800743e:	4690      	mov	r8, r2
 8007440:	2208      	movs	r2, #8
 8007442:	4691      	mov	r9, r2
 8007444:	2208      	movs	r2, #8
 8007446:	4692      	mov	sl, r2
 8007448:	2208      	movs	r2, #8
 800744a:	4693      	mov	fp, r2
 800744c:	44bb      	add	fp, r7
 800744e:	44da      	add	sl, fp
 8007450:	44d1      	add	r9, sl
 8007452:	44c8      	add	r8, r9
 8007454:	44c4      	add	ip, r8
 8007456:	4463      	add	r3, ip
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	4be9      	ldr	r3, [pc, #932]	; (8007800 <main+0x1d78>)
 800745c:	49e7      	ldr	r1, [pc, #924]	; (80077fc <main+0x1d74>)
 800745e:	468c      	mov	ip, r1
 8007460:	2120      	movs	r1, #32
 8007462:	4688      	mov	r8, r1
 8007464:	2108      	movs	r1, #8
 8007466:	4689      	mov	r9, r1
 8007468:	2108      	movs	r1, #8
 800746a:	468a      	mov	sl, r1
 800746c:	2108      	movs	r1, #8
 800746e:	468b      	mov	fp, r1
 8007470:	44bb      	add	fp, r7
 8007472:	44da      	add	sl, fp
 8007474:	44d1      	add	r9, sl
 8007476:	44c8      	add	r8, r9
 8007478:	44c4      	add	ip, r8
 800747a:	4463      	add	r3, ip
 800747c:	21c8      	movs	r1, #200	; 0xc8
 800747e:	505a      	str	r2, [r3, r1]
	tampering_buffer_1[2][0] = accel_data_earthframe_1[2];
 8007480:	4bdd      	ldr	r3, [pc, #884]	; (80077f8 <main+0x1d70>)
 8007482:	4ade      	ldr	r2, [pc, #888]	; (80077fc <main+0x1d74>)
 8007484:	4694      	mov	ip, r2
 8007486:	2220      	movs	r2, #32
 8007488:	4690      	mov	r8, r2
 800748a:	2208      	movs	r2, #8
 800748c:	4691      	mov	r9, r2
 800748e:	2208      	movs	r2, #8
 8007490:	4692      	mov	sl, r2
 8007492:	2208      	movs	r2, #8
 8007494:	4693      	mov	fp, r2
 8007496:	44bb      	add	fp, r7
 8007498:	44da      	add	sl, fp
 800749a:	44d1      	add	r9, sl
 800749c:	44c8      	add	r8, r9
 800749e:	44c4      	add	ip, r8
 80074a0:	4463      	add	r3, ip
 80074a2:	6899      	ldr	r1, [r3, #8]
 80074a4:	4bd6      	ldr	r3, [pc, #856]	; (8007800 <main+0x1d78>)
 80074a6:	2208      	movs	r2, #8
 80074a8:	2508      	movs	r5, #8
 80074aa:	46ac      	mov	ip, r5
 80074ac:	2508      	movs	r5, #8
 80074ae:	46a8      	mov	r8, r5
 80074b0:	44b8      	add	r8, r7
 80074b2:	44c4      	add	ip, r8
 80074b4:	4462      	add	r2, ip
 80074b6:	1912      	adds	r2, r2, r4
 80074b8:	1812      	adds	r2, r2, r0
 80074ba:	18d2      	adds	r2, r2, r3
 80074bc:	23c8      	movs	r3, #200	; 0xc8
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	50d1      	str	r1, [r2, r3]
	tampering_buffer_1[3][0] = low_pass_gyro_1[0];
 80074c2:	4bd0      	ldr	r3, [pc, #832]	; (8007804 <main+0x1d7c>)
 80074c4:	4acd      	ldr	r2, [pc, #820]	; (80077fc <main+0x1d74>)
 80074c6:	4694      	mov	ip, r2
 80074c8:	2220      	movs	r2, #32
 80074ca:	4690      	mov	r8, r2
 80074cc:	2208      	movs	r2, #8
 80074ce:	4691      	mov	r9, r2
 80074d0:	2208      	movs	r2, #8
 80074d2:	4692      	mov	sl, r2
 80074d4:	2208      	movs	r2, #8
 80074d6:	4693      	mov	fp, r2
 80074d8:	44bb      	add	fp, r7
 80074da:	44da      	add	sl, fp
 80074dc:	44d1      	add	r9, sl
 80074de:	44c8      	add	r8, r9
 80074e0:	44c4      	add	ip, r8
 80074e2:	4463      	add	r3, ip
 80074e4:	6819      	ldr	r1, [r3, #0]
 80074e6:	4bc6      	ldr	r3, [pc, #792]	; (8007800 <main+0x1d78>)
 80074e8:	2208      	movs	r2, #8
 80074ea:	2508      	movs	r5, #8
 80074ec:	46ac      	mov	ip, r5
 80074ee:	2508      	movs	r5, #8
 80074f0:	46a8      	mov	r8, r5
 80074f2:	44b8      	add	r8, r7
 80074f4:	44c4      	add	ip, r8
 80074f6:	4462      	add	r2, ip
 80074f8:	1912      	adds	r2, r2, r4
 80074fa:	1812      	adds	r2, r2, r0
 80074fc:	18d2      	adds	r2, r2, r3
 80074fe:	2396      	movs	r3, #150	; 0x96
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	50d1      	str	r1, [r2, r3]
	tampering_buffer_1[4][0] = low_pass_gyro_1[1];
 8007504:	4bbf      	ldr	r3, [pc, #764]	; (8007804 <main+0x1d7c>)
 8007506:	4abd      	ldr	r2, [pc, #756]	; (80077fc <main+0x1d74>)
 8007508:	4694      	mov	ip, r2
 800750a:	2220      	movs	r2, #32
 800750c:	4690      	mov	r8, r2
 800750e:	2208      	movs	r2, #8
 8007510:	4691      	mov	r9, r2
 8007512:	2208      	movs	r2, #8
 8007514:	4692      	mov	sl, r2
 8007516:	2208      	movs	r2, #8
 8007518:	4693      	mov	fp, r2
 800751a:	44bb      	add	fp, r7
 800751c:	44da      	add	sl, fp
 800751e:	44d1      	add	r9, sl
 8007520:	44c8      	add	r8, r9
 8007522:	44c4      	add	ip, r8
 8007524:	4463      	add	r3, ip
 8007526:	6859      	ldr	r1, [r3, #4]
 8007528:	4bb5      	ldr	r3, [pc, #724]	; (8007800 <main+0x1d78>)
 800752a:	2208      	movs	r2, #8
 800752c:	2508      	movs	r5, #8
 800752e:	46ac      	mov	ip, r5
 8007530:	2508      	movs	r5, #8
 8007532:	46a8      	mov	r8, r5
 8007534:	44b8      	add	r8, r7
 8007536:	44c4      	add	ip, r8
 8007538:	4462      	add	r2, ip
 800753a:	1912      	adds	r2, r2, r4
 800753c:	1812      	adds	r2, r2, r0
 800753e:	18d2      	adds	r2, r2, r3
 8007540:	23c8      	movs	r3, #200	; 0xc8
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	50d1      	str	r1, [r2, r3]
	tampering_buffer_1[5][0] = low_pass_gyro_1[2];
 8007546:	4baf      	ldr	r3, [pc, #700]	; (8007804 <main+0x1d7c>)
 8007548:	4aac      	ldr	r2, [pc, #688]	; (80077fc <main+0x1d74>)
 800754a:	4694      	mov	ip, r2
 800754c:	2220      	movs	r2, #32
 800754e:	4690      	mov	r8, r2
 8007550:	2208      	movs	r2, #8
 8007552:	4691      	mov	r9, r2
 8007554:	2208      	movs	r2, #8
 8007556:	4692      	mov	sl, r2
 8007558:	2208      	movs	r2, #8
 800755a:	4693      	mov	fp, r2
 800755c:	44bb      	add	fp, r7
 800755e:	44da      	add	sl, fp
 8007560:	44d1      	add	r9, sl
 8007562:	44c8      	add	r8, r9
 8007564:	44c4      	add	ip, r8
 8007566:	4463      	add	r3, ip
 8007568:	6899      	ldr	r1, [r3, #8]
 800756a:	4ba5      	ldr	r3, [pc, #660]	; (8007800 <main+0x1d78>)
 800756c:	2208      	movs	r2, #8
 800756e:	2508      	movs	r5, #8
 8007570:	46ac      	mov	ip, r5
 8007572:	2508      	movs	r5, #8
 8007574:	46a8      	mov	r8, r5
 8007576:	44b8      	add	r8, r7
 8007578:	44c4      	add	ip, r8
 800757a:	4462      	add	r2, ip
 800757c:	1912      	adds	r2, r2, r4
 800757e:	1812      	adds	r2, r2, r0
 8007580:	18d2      	adds	r2, r2, r3
 8007582:	23fa      	movs	r3, #250	; 0xfa
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	50d1      	str	r1, [r2, r3]

	if (low_pass_gyro_0[0] > TAMPERING_UPPER_THRESHOLD || low_pass_gyro_0[0] < -TAMPERING_UPPER_THRESHOLD)
 8007588:	4b9f      	ldr	r3, [pc, #636]	; (8007808 <main+0x1d80>)
 800758a:	4a9c      	ldr	r2, [pc, #624]	; (80077fc <main+0x1d74>)
 800758c:	4694      	mov	ip, r2
 800758e:	2220      	movs	r2, #32
 8007590:	4690      	mov	r8, r2
 8007592:	2208      	movs	r2, #8
 8007594:	4691      	mov	r9, r2
 8007596:	2208      	movs	r2, #8
 8007598:	4692      	mov	sl, r2
 800759a:	2208      	movs	r2, #8
 800759c:	4693      	mov	fp, r2
 800759e:	44bb      	add	fp, r7
 80075a0:	44da      	add	sl, fp
 80075a2:	44d1      	add	r9, sl
 80075a4:	44c8      	add	r8, r9
 80075a6:	44c4      	add	ip, r8
 80075a8:	4463      	add	r3, ip
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4997      	ldr	r1, [pc, #604]	; (800780c <main+0x1d84>)
 80075ae:	1c18      	adds	r0, r3, #0
 80075b0:	f7f8 ff9c 	bl	80004ec <__aeabi_fcmpgt>
 80075b4:	1e03      	subs	r3, r0, #0
 80075b6:	d117      	bne.n	80075e8 <main+0x1b60>
 80075b8:	4b93      	ldr	r3, [pc, #588]	; (8007808 <main+0x1d80>)
 80075ba:	4a90      	ldr	r2, [pc, #576]	; (80077fc <main+0x1d74>)
 80075bc:	4694      	mov	ip, r2
 80075be:	2220      	movs	r2, #32
 80075c0:	4690      	mov	r8, r2
 80075c2:	2208      	movs	r2, #8
 80075c4:	4691      	mov	r9, r2
 80075c6:	2208      	movs	r2, #8
 80075c8:	4692      	mov	sl, r2
 80075ca:	2208      	movs	r2, #8
 80075cc:	4693      	mov	fp, r2
 80075ce:	44bb      	add	fp, r7
 80075d0:	44da      	add	sl, fp
 80075d2:	44d1      	add	r9, sl
 80075d4:	44c8      	add	r8, r9
 80075d6:	44c4      	add	ip, r8
 80075d8:	4463      	add	r3, ip
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	498c      	ldr	r1, [pc, #560]	; (8007810 <main+0x1d88>)
 80075de:	1c18      	adds	r0, r3, #0
 80075e0:	f7f8 ff70 	bl	80004c4 <__aeabi_fcmplt>
 80075e4:	1e03      	subs	r3, r0, #0
 80075e6:	d012      	beq.n	800760e <main+0x1b86>
	{
		is_moving[0] = 1;
 80075e8:	4b8a      	ldr	r3, [pc, #552]	; (8007814 <main+0x1d8c>)
 80075ea:	4a84      	ldr	r2, [pc, #528]	; (80077fc <main+0x1d74>)
 80075ec:	4694      	mov	ip, r2
 80075ee:	2220      	movs	r2, #32
 80075f0:	4690      	mov	r8, r2
 80075f2:	2208      	movs	r2, #8
 80075f4:	4691      	mov	r9, r2
 80075f6:	2208      	movs	r2, #8
 80075f8:	4692      	mov	sl, r2
 80075fa:	2208      	movs	r2, #8
 80075fc:	4693      	mov	fp, r2
 80075fe:	44bb      	add	fp, r7
 8007600:	44da      	add	sl, fp
 8007602:	44d1      	add	r9, sl
 8007604:	44c8      	add	r8, r9
 8007606:	44c4      	add	ip, r8
 8007608:	4463      	add	r3, ip
 800760a:	2201      	movs	r2, #1
 800760c:	701a      	strb	r2, [r3, #0]
	}

	if (low_pass_gyro_0[1] > TAMPERING_UPPER_THRESHOLD || low_pass_gyro_0[1] < -TAMPERING_UPPER_THRESHOLD)
 800760e:	4b7e      	ldr	r3, [pc, #504]	; (8007808 <main+0x1d80>)
 8007610:	4a7a      	ldr	r2, [pc, #488]	; (80077fc <main+0x1d74>)
 8007612:	4694      	mov	ip, r2
 8007614:	2220      	movs	r2, #32
 8007616:	4690      	mov	r8, r2
 8007618:	2208      	movs	r2, #8
 800761a:	4691      	mov	r9, r2
 800761c:	2208      	movs	r2, #8
 800761e:	4692      	mov	sl, r2
 8007620:	2208      	movs	r2, #8
 8007622:	4693      	mov	fp, r2
 8007624:	44bb      	add	fp, r7
 8007626:	44da      	add	sl, fp
 8007628:	44d1      	add	r9, sl
 800762a:	44c8      	add	r8, r9
 800762c:	44c4      	add	ip, r8
 800762e:	4463      	add	r3, ip
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	4976      	ldr	r1, [pc, #472]	; (800780c <main+0x1d84>)
 8007634:	1c18      	adds	r0, r3, #0
 8007636:	f7f8 ff59 	bl	80004ec <__aeabi_fcmpgt>
 800763a:	1e03      	subs	r3, r0, #0
 800763c:	d117      	bne.n	800766e <main+0x1be6>
 800763e:	4b72      	ldr	r3, [pc, #456]	; (8007808 <main+0x1d80>)
 8007640:	4a6e      	ldr	r2, [pc, #440]	; (80077fc <main+0x1d74>)
 8007642:	4694      	mov	ip, r2
 8007644:	2220      	movs	r2, #32
 8007646:	4690      	mov	r8, r2
 8007648:	2208      	movs	r2, #8
 800764a:	4691      	mov	r9, r2
 800764c:	2208      	movs	r2, #8
 800764e:	4692      	mov	sl, r2
 8007650:	2208      	movs	r2, #8
 8007652:	4693      	mov	fp, r2
 8007654:	44bb      	add	fp, r7
 8007656:	44da      	add	sl, fp
 8007658:	44d1      	add	r9, sl
 800765a:	44c8      	add	r8, r9
 800765c:	44c4      	add	ip, r8
 800765e:	4463      	add	r3, ip
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	496b      	ldr	r1, [pc, #428]	; (8007810 <main+0x1d88>)
 8007664:	1c18      	adds	r0, r3, #0
 8007666:	f7f8 ff2d 	bl	80004c4 <__aeabi_fcmplt>
 800766a:	1e03      	subs	r3, r0, #0
 800766c:	d012      	beq.n	8007694 <main+0x1c0c>
	{
		is_moving[1] = 1;
 800766e:	4b69      	ldr	r3, [pc, #420]	; (8007814 <main+0x1d8c>)
 8007670:	4a62      	ldr	r2, [pc, #392]	; (80077fc <main+0x1d74>)
 8007672:	4694      	mov	ip, r2
 8007674:	2220      	movs	r2, #32
 8007676:	4690      	mov	r8, r2
 8007678:	2208      	movs	r2, #8
 800767a:	4691      	mov	r9, r2
 800767c:	2208      	movs	r2, #8
 800767e:	4692      	mov	sl, r2
 8007680:	2208      	movs	r2, #8
 8007682:	4693      	mov	fp, r2
 8007684:	44bb      	add	fp, r7
 8007686:	44da      	add	sl, fp
 8007688:	44d1      	add	r9, sl
 800768a:	44c8      	add	r8, r9
 800768c:	44c4      	add	ip, r8
 800768e:	4463      	add	r3, ip
 8007690:	2201      	movs	r2, #1
 8007692:	705a      	strb	r2, [r3, #1]
	}

	if (low_pass_gyro_0[2] > TAMPERING_UPPER_THRESHOLD || low_pass_gyro_0[2] < -TAMPERING_UPPER_THRESHOLD)
 8007694:	4b5c      	ldr	r3, [pc, #368]	; (8007808 <main+0x1d80>)
 8007696:	4a59      	ldr	r2, [pc, #356]	; (80077fc <main+0x1d74>)
 8007698:	4694      	mov	ip, r2
 800769a:	2220      	movs	r2, #32
 800769c:	4690      	mov	r8, r2
 800769e:	2208      	movs	r2, #8
 80076a0:	4691      	mov	r9, r2
 80076a2:	2208      	movs	r2, #8
 80076a4:	4692      	mov	sl, r2
 80076a6:	2208      	movs	r2, #8
 80076a8:	4693      	mov	fp, r2
 80076aa:	44bb      	add	fp, r7
 80076ac:	44da      	add	sl, fp
 80076ae:	44d1      	add	r9, sl
 80076b0:	44c8      	add	r8, r9
 80076b2:	44c4      	add	ip, r8
 80076b4:	4463      	add	r3, ip
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	4954      	ldr	r1, [pc, #336]	; (800780c <main+0x1d84>)
 80076ba:	1c18      	adds	r0, r3, #0
 80076bc:	f7f8 ff16 	bl	80004ec <__aeabi_fcmpgt>
 80076c0:	1e03      	subs	r3, r0, #0
 80076c2:	d117      	bne.n	80076f4 <main+0x1c6c>
 80076c4:	4b50      	ldr	r3, [pc, #320]	; (8007808 <main+0x1d80>)
 80076c6:	4a4d      	ldr	r2, [pc, #308]	; (80077fc <main+0x1d74>)
 80076c8:	4694      	mov	ip, r2
 80076ca:	2220      	movs	r2, #32
 80076cc:	4690      	mov	r8, r2
 80076ce:	2208      	movs	r2, #8
 80076d0:	4691      	mov	r9, r2
 80076d2:	2208      	movs	r2, #8
 80076d4:	4692      	mov	sl, r2
 80076d6:	2208      	movs	r2, #8
 80076d8:	4693      	mov	fp, r2
 80076da:	44bb      	add	fp, r7
 80076dc:	44da      	add	sl, fp
 80076de:	44d1      	add	r9, sl
 80076e0:	44c8      	add	r8, r9
 80076e2:	44c4      	add	ip, r8
 80076e4:	4463      	add	r3, ip
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	4949      	ldr	r1, [pc, #292]	; (8007810 <main+0x1d88>)
 80076ea:	1c18      	adds	r0, r3, #0
 80076ec:	f7f8 feea 	bl	80004c4 <__aeabi_fcmplt>
 80076f0:	1e03      	subs	r3, r0, #0
 80076f2:	d012      	beq.n	800771a <main+0x1c92>
	{
		is_moving[2] = 1;
 80076f4:	4b47      	ldr	r3, [pc, #284]	; (8007814 <main+0x1d8c>)
 80076f6:	4a41      	ldr	r2, [pc, #260]	; (80077fc <main+0x1d74>)
 80076f8:	4694      	mov	ip, r2
 80076fa:	2220      	movs	r2, #32
 80076fc:	4690      	mov	r8, r2
 80076fe:	2208      	movs	r2, #8
 8007700:	4691      	mov	r9, r2
 8007702:	2208      	movs	r2, #8
 8007704:	4692      	mov	sl, r2
 8007706:	2208      	movs	r2, #8
 8007708:	4693      	mov	fp, r2
 800770a:	44bb      	add	fp, r7
 800770c:	44da      	add	sl, fp
 800770e:	44d1      	add	r9, sl
 8007710:	44c8      	add	r8, r9
 8007712:	44c4      	add	ip, r8
 8007714:	4463      	add	r3, ip
 8007716:	2201      	movs	r2, #1
 8007718:	709a      	strb	r2, [r3, #2]
	}

	if (low_pass_gyro_0[0] < TAMPERING_LOWER_THRESHOLD && low_pass_gyro_0[0] > -TAMPERING_LOWER_THRESHOLD)
 800771a:	4b3b      	ldr	r3, [pc, #236]	; (8007808 <main+0x1d80>)
 800771c:	4a37      	ldr	r2, [pc, #220]	; (80077fc <main+0x1d74>)
 800771e:	4694      	mov	ip, r2
 8007720:	2220      	movs	r2, #32
 8007722:	4690      	mov	r8, r2
 8007724:	2208      	movs	r2, #8
 8007726:	4691      	mov	r9, r2
 8007728:	2208      	movs	r2, #8
 800772a:	4692      	mov	sl, r2
 800772c:	2208      	movs	r2, #8
 800772e:	4693      	mov	fp, r2
 8007730:	44bb      	add	fp, r7
 8007732:	44da      	add	sl, fp
 8007734:	44d1      	add	r9, sl
 8007736:	44c8      	add	r8, r9
 8007738:	44c4      	add	ip, r8
 800773a:	4463      	add	r3, ip
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	1c18      	adds	r0, r3, #0
 8007740:	f7fb fbc6 	bl	8002ed0 <__aeabi_f2d>
 8007744:	4a34      	ldr	r2, [pc, #208]	; (8007818 <main+0x1d90>)
 8007746:	4b35      	ldr	r3, [pc, #212]	; (800781c <main+0x1d94>)
 8007748:	f7f8 fe82 	bl	8000450 <__aeabi_dcmplt>
 800774c:	1e03      	subs	r3, r0, #0
 800774e:	d02d      	beq.n	80077ac <main+0x1d24>
 8007750:	4b2d      	ldr	r3, [pc, #180]	; (8007808 <main+0x1d80>)
 8007752:	4a2a      	ldr	r2, [pc, #168]	; (80077fc <main+0x1d74>)
 8007754:	4694      	mov	ip, r2
 8007756:	2220      	movs	r2, #32
 8007758:	4690      	mov	r8, r2
 800775a:	2208      	movs	r2, #8
 800775c:	4691      	mov	r9, r2
 800775e:	2208      	movs	r2, #8
 8007760:	4692      	mov	sl, r2
 8007762:	2208      	movs	r2, #8
 8007764:	4693      	mov	fp, r2
 8007766:	44bb      	add	fp, r7
 8007768:	44da      	add	sl, fp
 800776a:	44d1      	add	r9, sl
 800776c:	44c8      	add	r8, r9
 800776e:	44c4      	add	ip, r8
 8007770:	4463      	add	r3, ip
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	1c18      	adds	r0, r3, #0
 8007776:	f7fb fbab 	bl	8002ed0 <__aeabi_f2d>
 800777a:	4a27      	ldr	r2, [pc, #156]	; (8007818 <main+0x1d90>)
 800777c:	4b28      	ldr	r3, [pc, #160]	; (8007820 <main+0x1d98>)
 800777e:	f7f8 fe7b 	bl	8000478 <__aeabi_dcmpgt>
 8007782:	1e03      	subs	r3, r0, #0
 8007784:	d012      	beq.n	80077ac <main+0x1d24>
	{
		is_moving[0] = 0;
 8007786:	4b23      	ldr	r3, [pc, #140]	; (8007814 <main+0x1d8c>)
 8007788:	4a1c      	ldr	r2, [pc, #112]	; (80077fc <main+0x1d74>)
 800778a:	4694      	mov	ip, r2
 800778c:	2220      	movs	r2, #32
 800778e:	4690      	mov	r8, r2
 8007790:	2208      	movs	r2, #8
 8007792:	4691      	mov	r9, r2
 8007794:	2208      	movs	r2, #8
 8007796:	4692      	mov	sl, r2
 8007798:	2208      	movs	r2, #8
 800779a:	4693      	mov	fp, r2
 800779c:	44bb      	add	fp, r7
 800779e:	44da      	add	sl, fp
 80077a0:	44d1      	add	r9, sl
 80077a2:	44c8      	add	r8, r9
 80077a4:	44c4      	add	ip, r8
 80077a6:	4463      	add	r3, ip
 80077a8:	2200      	movs	r2, #0
 80077aa:	701a      	strb	r2, [r3, #0]
	}

	if (low_pass_gyro_0[1] < TAMPERING_LOWER_THRESHOLD && low_pass_gyro_0[1] > -TAMPERING_LOWER_THRESHOLD)
 80077ac:	4b16      	ldr	r3, [pc, #88]	; (8007808 <main+0x1d80>)
 80077ae:	4a13      	ldr	r2, [pc, #76]	; (80077fc <main+0x1d74>)
 80077b0:	4694      	mov	ip, r2
 80077b2:	2220      	movs	r2, #32
 80077b4:	4690      	mov	r8, r2
 80077b6:	2208      	movs	r2, #8
 80077b8:	4691      	mov	r9, r2
 80077ba:	2208      	movs	r2, #8
 80077bc:	4692      	mov	sl, r2
 80077be:	2208      	movs	r2, #8
 80077c0:	4693      	mov	fp, r2
 80077c2:	44bb      	add	fp, r7
 80077c4:	44da      	add	sl, fp
 80077c6:	44d1      	add	r9, sl
 80077c8:	44c8      	add	r8, r9
 80077ca:	44c4      	add	ip, r8
 80077cc:	4463      	add	r3, ip
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	1c18      	adds	r0, r3, #0
 80077d2:	f7fb fb7d 	bl	8002ed0 <__aeabi_f2d>
 80077d6:	4a10      	ldr	r2, [pc, #64]	; (8007818 <main+0x1d90>)
 80077d8:	4b10      	ldr	r3, [pc, #64]	; (800781c <main+0x1d94>)
 80077da:	f7f8 fe39 	bl	8000450 <__aeabi_dcmplt>
 80077de:	1e03      	subs	r3, r0, #0
 80077e0:	d044      	beq.n	800786c <main+0x1de4>
 80077e2:	4b09      	ldr	r3, [pc, #36]	; (8007808 <main+0x1d80>)
 80077e4:	4a05      	ldr	r2, [pc, #20]	; (80077fc <main+0x1d74>)
 80077e6:	4694      	mov	ip, r2
 80077e8:	2220      	movs	r2, #32
 80077ea:	4690      	mov	r8, r2
 80077ec:	2208      	movs	r2, #8
 80077ee:	4691      	mov	r9, r2
 80077f0:	2208      	movs	r2, #8
 80077f2:	4692      	mov	sl, r2
 80077f4:	2208      	movs	r2, #8
 80077f6:	e015      	b.n	8007824 <main+0x1d9c>
 80077f8:	fffffed0 	.word	0xfffffed0
 80077fc:	00000c08 	.word	0x00000c08
 8007800:	fffff548 	.word	0xfffff548
 8007804:	fffff530 	.word	0xfffff530
 8007808:	fffff53c 	.word	0xfffff53c
 800780c:	40a00000 	.word	0x40a00000
 8007810:	c0a00000 	.word	0xc0a00000
 8007814:	fffff3fc 	.word	0xfffff3fc
 8007818:	9999999a 	.word	0x9999999a
 800781c:	3fb99999 	.word	0x3fb99999
 8007820:	bfb99999 	.word	0xbfb99999
 8007824:	4693      	mov	fp, r2
 8007826:	44bb      	add	fp, r7
 8007828:	44da      	add	sl, fp
 800782a:	44d1      	add	r9, sl
 800782c:	44c8      	add	r8, r9
 800782e:	44c4      	add	ip, r8
 8007830:	4463      	add	r3, ip
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	1c18      	adds	r0, r3, #0
 8007836:	f7fb fb4b 	bl	8002ed0 <__aeabi_f2d>
 800783a:	4a94      	ldr	r2, [pc, #592]	; (8007a8c <main+0x2004>)
 800783c:	4b94      	ldr	r3, [pc, #592]	; (8007a90 <main+0x2008>)
 800783e:	f7f8 fe1b 	bl	8000478 <__aeabi_dcmpgt>
 8007842:	1e03      	subs	r3, r0, #0
 8007844:	d012      	beq.n	800786c <main+0x1de4>
	{
		is_moving[1] = 0;
 8007846:	4b93      	ldr	r3, [pc, #588]	; (8007a94 <main+0x200c>)
 8007848:	4a93      	ldr	r2, [pc, #588]	; (8007a98 <main+0x2010>)
 800784a:	4694      	mov	ip, r2
 800784c:	2220      	movs	r2, #32
 800784e:	4690      	mov	r8, r2
 8007850:	2208      	movs	r2, #8
 8007852:	4691      	mov	r9, r2
 8007854:	2208      	movs	r2, #8
 8007856:	4692      	mov	sl, r2
 8007858:	2208      	movs	r2, #8
 800785a:	4693      	mov	fp, r2
 800785c:	44bb      	add	fp, r7
 800785e:	44da      	add	sl, fp
 8007860:	44d1      	add	r9, sl
 8007862:	44c8      	add	r8, r9
 8007864:	44c4      	add	ip, r8
 8007866:	4463      	add	r3, ip
 8007868:	2200      	movs	r2, #0
 800786a:	705a      	strb	r2, [r3, #1]
	}
	if (low_pass_gyro_0[2] < TAMPERING_LOWER_THRESHOLD && low_pass_gyro_0[2] > -TAMPERING_LOWER_THRESHOLD)
 800786c:	4b8b      	ldr	r3, [pc, #556]	; (8007a9c <main+0x2014>)
 800786e:	4a8a      	ldr	r2, [pc, #552]	; (8007a98 <main+0x2010>)
 8007870:	4694      	mov	ip, r2
 8007872:	2220      	movs	r2, #32
 8007874:	4690      	mov	r8, r2
 8007876:	2208      	movs	r2, #8
 8007878:	4691      	mov	r9, r2
 800787a:	2208      	movs	r2, #8
 800787c:	4692      	mov	sl, r2
 800787e:	2208      	movs	r2, #8
 8007880:	4693      	mov	fp, r2
 8007882:	44bb      	add	fp, r7
 8007884:	44da      	add	sl, fp
 8007886:	44d1      	add	r9, sl
 8007888:	44c8      	add	r8, r9
 800788a:	44c4      	add	ip, r8
 800788c:	4463      	add	r3, ip
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	1c18      	adds	r0, r3, #0
 8007892:	f7fb fb1d 	bl	8002ed0 <__aeabi_f2d>
 8007896:	4a7d      	ldr	r2, [pc, #500]	; (8007a8c <main+0x2004>)
 8007898:	4b81      	ldr	r3, [pc, #516]	; (8007aa0 <main+0x2018>)
 800789a:	f7f8 fdd9 	bl	8000450 <__aeabi_dcmplt>
 800789e:	1e03      	subs	r3, r0, #0
 80078a0:	d02d      	beq.n	80078fe <main+0x1e76>
 80078a2:	4b7e      	ldr	r3, [pc, #504]	; (8007a9c <main+0x2014>)
 80078a4:	4a7c      	ldr	r2, [pc, #496]	; (8007a98 <main+0x2010>)
 80078a6:	4694      	mov	ip, r2
 80078a8:	2220      	movs	r2, #32
 80078aa:	4690      	mov	r8, r2
 80078ac:	2208      	movs	r2, #8
 80078ae:	4691      	mov	r9, r2
 80078b0:	2208      	movs	r2, #8
 80078b2:	4692      	mov	sl, r2
 80078b4:	2208      	movs	r2, #8
 80078b6:	4693      	mov	fp, r2
 80078b8:	44bb      	add	fp, r7
 80078ba:	44da      	add	sl, fp
 80078bc:	44d1      	add	r9, sl
 80078be:	44c8      	add	r8, r9
 80078c0:	44c4      	add	ip, r8
 80078c2:	4463      	add	r3, ip
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	1c18      	adds	r0, r3, #0
 80078c8:	f7fb fb02 	bl	8002ed0 <__aeabi_f2d>
 80078cc:	4a6f      	ldr	r2, [pc, #444]	; (8007a8c <main+0x2004>)
 80078ce:	4b70      	ldr	r3, [pc, #448]	; (8007a90 <main+0x2008>)
 80078d0:	f7f8 fdd2 	bl	8000478 <__aeabi_dcmpgt>
 80078d4:	1e03      	subs	r3, r0, #0
 80078d6:	d012      	beq.n	80078fe <main+0x1e76>
	{
		is_moving[2] = 0;
 80078d8:	4b6e      	ldr	r3, [pc, #440]	; (8007a94 <main+0x200c>)
 80078da:	4a6f      	ldr	r2, [pc, #444]	; (8007a98 <main+0x2010>)
 80078dc:	4694      	mov	ip, r2
 80078de:	2220      	movs	r2, #32
 80078e0:	4690      	mov	r8, r2
 80078e2:	2208      	movs	r2, #8
 80078e4:	4691      	mov	r9, r2
 80078e6:	2208      	movs	r2, #8
 80078e8:	4692      	mov	sl, r2
 80078ea:	2208      	movs	r2, #8
 80078ec:	4693      	mov	fp, r2
 80078ee:	44bb      	add	fp, r7
 80078f0:	44da      	add	sl, fp
 80078f2:	44d1      	add	r9, sl
 80078f4:	44c8      	add	r8, r9
 80078f6:	44c4      	add	ip, r8
 80078f8:	4463      	add	r3, ip
 80078fa:	2200      	movs	r2, #0
 80078fc:	709a      	strb	r2, [r3, #2]
	}

	// Camera went from not moving to moving
	if (is_moving[0] == 1 || is_moving[1] == 1 || is_moving[2] == 1)
 80078fe:	4b65      	ldr	r3, [pc, #404]	; (8007a94 <main+0x200c>)
 8007900:	4a65      	ldr	r2, [pc, #404]	; (8007a98 <main+0x2010>)
 8007902:	4694      	mov	ip, r2
 8007904:	2220      	movs	r2, #32
 8007906:	4690      	mov	r8, r2
 8007908:	2208      	movs	r2, #8
 800790a:	4691      	mov	r9, r2
 800790c:	2208      	movs	r2, #8
 800790e:	4692      	mov	sl, r2
 8007910:	2208      	movs	r2, #8
 8007912:	4693      	mov	fp, r2
 8007914:	44bb      	add	fp, r7
 8007916:	44da      	add	sl, fp
 8007918:	44d1      	add	r9, sl
 800791a:	44c8      	add	r8, r9
 800791c:	44c4      	add	ip, r8
 800791e:	4463      	add	r3, ip
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b25b      	sxtb	r3, r3
 8007924:	2b01      	cmp	r3, #1
 8007926:	d029      	beq.n	800797c <main+0x1ef4>
 8007928:	4b5a      	ldr	r3, [pc, #360]	; (8007a94 <main+0x200c>)
 800792a:	4a5b      	ldr	r2, [pc, #364]	; (8007a98 <main+0x2010>)
 800792c:	4694      	mov	ip, r2
 800792e:	2220      	movs	r2, #32
 8007930:	4690      	mov	r8, r2
 8007932:	2208      	movs	r2, #8
 8007934:	4691      	mov	r9, r2
 8007936:	2208      	movs	r2, #8
 8007938:	4692      	mov	sl, r2
 800793a:	2208      	movs	r2, #8
 800793c:	4693      	mov	fp, r2
 800793e:	44bb      	add	fp, r7
 8007940:	44da      	add	sl, fp
 8007942:	44d1      	add	r9, sl
 8007944:	44c8      	add	r8, r9
 8007946:	44c4      	add	ip, r8
 8007948:	4463      	add	r3, ip
 800794a:	785b      	ldrb	r3, [r3, #1]
 800794c:	b25b      	sxtb	r3, r3
 800794e:	2b01      	cmp	r3, #1
 8007950:	d014      	beq.n	800797c <main+0x1ef4>
 8007952:	4b50      	ldr	r3, [pc, #320]	; (8007a94 <main+0x200c>)
 8007954:	4a50      	ldr	r2, [pc, #320]	; (8007a98 <main+0x2010>)
 8007956:	4694      	mov	ip, r2
 8007958:	2220      	movs	r2, #32
 800795a:	4690      	mov	r8, r2
 800795c:	2208      	movs	r2, #8
 800795e:	4691      	mov	r9, r2
 8007960:	2208      	movs	r2, #8
 8007962:	4692      	mov	sl, r2
 8007964:	2208      	movs	r2, #8
 8007966:	4693      	mov	fp, r2
 8007968:	44bb      	add	fp, r7
 800796a:	44da      	add	sl, fp
 800796c:	44d1      	add	r9, sl
 800796e:	44c8      	add	r8, r9
 8007970:	44c4      	add	ip, r8
 8007972:	4463      	add	r3, ip
 8007974:	789b      	ldrb	r3, [r3, #2]
 8007976:	b25b      	sxtb	r3, r3
 8007978:	2b01      	cmp	r3, #1
 800797a:	d162      	bne.n	8007a42 <main+0x1fba>
	{
		MadgwickFilterXIO(low_pass_gyro_0, accel_data_earthframe_0, &quat_0);
 800797c:	23e0      	movs	r3, #224	; 0xe0
 800797e:	2420      	movs	r4, #32
 8007980:	2208      	movs	r2, #8
 8007982:	2108      	movs	r1, #8
 8007984:	468c      	mov	ip, r1
 8007986:	2108      	movs	r1, #8
 8007988:	4688      	mov	r8, r1
 800798a:	44b8      	add	r8, r7
 800798c:	44c4      	add	ip, r8
 800798e:	4462      	add	r2, ip
 8007990:	1912      	adds	r2, r2, r4
 8007992:	18d2      	adds	r2, r2, r3
 8007994:	4b43      	ldr	r3, [pc, #268]	; (8007aa4 <main+0x201c>)
 8007996:	2108      	movs	r1, #8
 8007998:	2008      	movs	r0, #8
 800799a:	4684      	mov	ip, r0
 800799c:	2008      	movs	r0, #8
 800799e:	4680      	mov	r8, r0
 80079a0:	44b8      	add	r8, r7
 80079a2:	44c4      	add	ip, r8
 80079a4:	4461      	add	r1, ip
 80079a6:	1909      	adds	r1, r1, r4
 80079a8:	18c9      	adds	r1, r1, r3
 80079aa:	23a2      	movs	r3, #162	; 0xa2
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	2020      	movs	r0, #32
 80079b0:	4684      	mov	ip, r0
 80079b2:	2008      	movs	r0, #8
 80079b4:	4680      	mov	r8, r0
 80079b6:	2008      	movs	r0, #8
 80079b8:	4681      	mov	r9, r0
 80079ba:	2008      	movs	r0, #8
 80079bc:	4682      	mov	sl, r0
 80079be:	44ba      	add	sl, r7
 80079c0:	44d1      	add	r9, sl
 80079c2:	44c8      	add	r8, r9
 80079c4:	44c4      	add	ip, r8
 80079c6:	4463      	add	r3, ip
 80079c8:	0018      	movs	r0, r3
 80079ca:	f7fc fd0f 	bl	80043ec <MadgwickFilterXIO>
		MadgwickFilterXIO(low_pass_gyro_1, accel_data_earthframe_1, &quat_1);
 80079ce:	23d0      	movs	r3, #208	; 0xd0
 80079d0:	2208      	movs	r2, #8
 80079d2:	2108      	movs	r1, #8
 80079d4:	468c      	mov	ip, r1
 80079d6:	2108      	movs	r1, #8
 80079d8:	4688      	mov	r8, r1
 80079da:	44b8      	add	r8, r7
 80079dc:	44c4      	add	ip, r8
 80079de:	4462      	add	r2, ip
 80079e0:	1912      	adds	r2, r2, r4
 80079e2:	18d2      	adds	r2, r2, r3
 80079e4:	4b30      	ldr	r3, [pc, #192]	; (8007aa8 <main+0x2020>)
 80079e6:	2108      	movs	r1, #8
 80079e8:	2008      	movs	r0, #8
 80079ea:	4684      	mov	ip, r0
 80079ec:	2008      	movs	r0, #8
 80079ee:	4680      	mov	r8, r0
 80079f0:	44b8      	add	r8, r7
 80079f2:	44c4      	add	ip, r8
 80079f4:	4461      	add	r1, ip
 80079f6:	1909      	adds	r1, r1, r4
 80079f8:	18c9      	adds	r1, r1, r3
 80079fa:	239c      	movs	r3, #156	; 0x9c
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	2020      	movs	r0, #32
 8007a00:	4684      	mov	ip, r0
 8007a02:	2008      	movs	r0, #8
 8007a04:	4680      	mov	r8, r0
 8007a06:	2008      	movs	r0, #8
 8007a08:	4681      	mov	r9, r0
 8007a0a:	2008      	movs	r0, #8
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	44ba      	add	sl, r7
 8007a10:	44d1      	add	r9, sl
 8007a12:	44c8      	add	r8, r9
 8007a14:	44c4      	add	ip, r8
 8007a16:	4463      	add	r3, ip
 8007a18:	0018      	movs	r0, r3
 8007a1a:	f7fc fce7 	bl	80043ec <MadgwickFilterXIO>
		was_moving = 1;
 8007a1e:	4b23      	ldr	r3, [pc, #140]	; (8007aac <main+0x2024>)
 8007a20:	2220      	movs	r2, #32
 8007a22:	4694      	mov	ip, r2
 8007a24:	2208      	movs	r2, #8
 8007a26:	4690      	mov	r8, r2
 8007a28:	2208      	movs	r2, #8
 8007a2a:	4691      	mov	r9, r2
 8007a2c:	2208      	movs	r2, #8
 8007a2e:	4692      	mov	sl, r2
 8007a30:	44ba      	add	sl, r7
 8007a32:	44d1      	add	r9, sl
 8007a34:	44c8      	add	r8, r9
 8007a36:	44c4      	add	ip, r8
 8007a38:	4463      	add	r3, ip
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	701a      	strb	r2, [r3, #0]
 8007a3e:	f000 ff08 	bl	8008852 <main+0x2dca>
	}
	else {
		if (was_moving)
 8007a42:	4b1a      	ldr	r3, [pc, #104]	; (8007aac <main+0x2024>)
 8007a44:	2220      	movs	r2, #32
 8007a46:	4694      	mov	ip, r2
 8007a48:	2208      	movs	r2, #8
 8007a4a:	4690      	mov	r8, r2
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	4691      	mov	r9, r2
 8007a50:	2208      	movs	r2, #8
 8007a52:	4692      	mov	sl, r2
 8007a54:	44ba      	add	sl, r7
 8007a56:	44d1      	add	r9, sl
 8007a58:	44c8      	add	r8, r9
 8007a5a:	44c4      	add	ip, r8
 8007a5c:	4463      	add	r3, ip
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	b25b      	sxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <main+0x1fe2>
 8007a66:	f000 fe7b 	bl	8008760 <main+0x2cd8>
		{

			// MOVING IMU
			for (uint8_t i = 0; i < TAMPERING_BUFFER_SIZE; i++)
 8007a6a:	4b11      	ldr	r3, [pc, #68]	; (8007ab0 <main+0x2028>)
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	4694      	mov	ip, r2
 8007a70:	2208      	movs	r2, #8
 8007a72:	4690      	mov	r8, r2
 8007a74:	2208      	movs	r2, #8
 8007a76:	4691      	mov	r9, r2
 8007a78:	2208      	movs	r2, #8
 8007a7a:	4692      	mov	sl, r2
 8007a7c:	44ba      	add	sl, r7
 8007a7e:	44d1      	add	r9, sl
 8007a80:	44c8      	add	r8, r9
 8007a82:	44c4      	add	ip, r8
 8007a84:	4463      	add	r3, ip
 8007a86:	2200      	movs	r2, #0
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	e166      	b.n	8007d5a <main+0x22d2>
 8007a8c:	9999999a 	.word	0x9999999a
 8007a90:	bfb99999 	.word	0xbfb99999
 8007a94:	fffff3fc 	.word	0xfffff3fc
 8007a98:	00000c08 	.word	0x00000c08
 8007a9c:	fffff53c 	.word	0xfffff53c
 8007aa0:	3fb99999 	.word	0x3fb99999
 8007aa4:	00000ae4 	.word	0x00000ae4
 8007aa8:	00000ad8 	.word	0x00000ad8
 8007aac:	00000c03 	.word	0x00000c03
 8007ab0:	00000bff 	.word	0x00000bff
			{
				accel_data_0[0] = tampering_buffer_0[0][i];
 8007ab4:	4cf7      	ldr	r4, [pc, #988]	; (8007e94 <main+0x240c>)
 8007ab6:	2520      	movs	r5, #32
 8007ab8:	2308      	movs	r3, #8
 8007aba:	2208      	movs	r2, #8
 8007abc:	4694      	mov	ip, r2
 8007abe:	2208      	movs	r2, #8
 8007ac0:	4690      	mov	r8, r2
 8007ac2:	44b8      	add	r8, r7
 8007ac4:	44c4      	add	ip, r8
 8007ac6:	4463      	add	r3, ip
 8007ac8:	195b      	adds	r3, r3, r5
 8007aca:	191b      	adds	r3, r3, r4
 8007acc:	781a      	ldrb	r2, [r3, #0]
 8007ace:	4bf2      	ldr	r3, [pc, #968]	; (8007e98 <main+0x2410>)
 8007ad0:	49f2      	ldr	r1, [pc, #968]	; (8007e9c <main+0x2414>)
 8007ad2:	468c      	mov	ip, r1
 8007ad4:	2120      	movs	r1, #32
 8007ad6:	4688      	mov	r8, r1
 8007ad8:	2108      	movs	r1, #8
 8007ada:	4689      	mov	r9, r1
 8007adc:	2108      	movs	r1, #8
 8007ade:	468a      	mov	sl, r1
 8007ae0:	2108      	movs	r1, #8
 8007ae2:	468b      	mov	fp, r1
 8007ae4:	44bb      	add	fp, r7
 8007ae6:	44da      	add	sl, fp
 8007ae8:	44d1      	add	r9, sl
 8007aea:	44c8      	add	r8, r9
 8007aec:	44c4      	add	ip, r8
 8007aee:	4463      	add	r3, ip
 8007af0:	0092      	lsls	r2, r2, #2
 8007af2:	58d2      	ldr	r2, [r2, r3]
 8007af4:	49ea      	ldr	r1, [pc, #936]	; (8007ea0 <main+0x2418>)
 8007af6:	2308      	movs	r3, #8
 8007af8:	2008      	movs	r0, #8
 8007afa:	4684      	mov	ip, r0
 8007afc:	2008      	movs	r0, #8
 8007afe:	4680      	mov	r8, r0
 8007b00:	44b8      	add	r8, r7
 8007b02:	44c4      	add	ip, r8
 8007b04:	4463      	add	r3, ip
 8007b06:	195b      	adds	r3, r3, r5
 8007b08:	185b      	adds	r3, r3, r1
 8007b0a:	601a      	str	r2, [r3, #0]
				accel_data_0[1] = tampering_buffer_0[1][i];
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	2208      	movs	r2, #8
 8007b10:	4694      	mov	ip, r2
 8007b12:	2208      	movs	r2, #8
 8007b14:	4690      	mov	r8, r2
 8007b16:	44b8      	add	r8, r7
 8007b18:	44c4      	add	ip, r8
 8007b1a:	4463      	add	r3, ip
 8007b1c:	195b      	adds	r3, r3, r5
 8007b1e:	191b      	adds	r3, r3, r4
 8007b20:	781a      	ldrb	r2, [r3, #0]
 8007b22:	4bdd      	ldr	r3, [pc, #884]	; (8007e98 <main+0x2410>)
 8007b24:	48dd      	ldr	r0, [pc, #884]	; (8007e9c <main+0x2414>)
 8007b26:	4684      	mov	ip, r0
 8007b28:	2020      	movs	r0, #32
 8007b2a:	4680      	mov	r8, r0
 8007b2c:	2008      	movs	r0, #8
 8007b2e:	4681      	mov	r9, r0
 8007b30:	2008      	movs	r0, #8
 8007b32:	4682      	mov	sl, r0
 8007b34:	2008      	movs	r0, #8
 8007b36:	4683      	mov	fp, r0
 8007b38:	44bb      	add	fp, r7
 8007b3a:	44da      	add	sl, fp
 8007b3c:	44d1      	add	r9, sl
 8007b3e:	44c8      	add	r8, r9
 8007b40:	44c4      	add	ip, r8
 8007b42:	4463      	add	r3, ip
 8007b44:	3232      	adds	r2, #50	; 0x32
 8007b46:	0092      	lsls	r2, r2, #2
 8007b48:	58d2      	ldr	r2, [r2, r3]
 8007b4a:	2308      	movs	r3, #8
 8007b4c:	2008      	movs	r0, #8
 8007b4e:	4684      	mov	ip, r0
 8007b50:	2008      	movs	r0, #8
 8007b52:	4680      	mov	r8, r0
 8007b54:	44b8      	add	r8, r7
 8007b56:	44c4      	add	ip, r8
 8007b58:	4463      	add	r3, ip
 8007b5a:	195b      	adds	r3, r3, r5
 8007b5c:	185b      	adds	r3, r3, r1
 8007b5e:	605a      	str	r2, [r3, #4]
				accel_data_0[2] = tampering_buffer_0[2][i];
 8007b60:	2308      	movs	r3, #8
 8007b62:	2208      	movs	r2, #8
 8007b64:	4694      	mov	ip, r2
 8007b66:	2208      	movs	r2, #8
 8007b68:	4690      	mov	r8, r2
 8007b6a:	44b8      	add	r8, r7
 8007b6c:	44c4      	add	ip, r8
 8007b6e:	4463      	add	r3, ip
 8007b70:	195b      	adds	r3, r3, r5
 8007b72:	191b      	adds	r3, r3, r4
 8007b74:	781a      	ldrb	r2, [r3, #0]
 8007b76:	4bc8      	ldr	r3, [pc, #800]	; (8007e98 <main+0x2410>)
 8007b78:	48c8      	ldr	r0, [pc, #800]	; (8007e9c <main+0x2414>)
 8007b7a:	4684      	mov	ip, r0
 8007b7c:	2020      	movs	r0, #32
 8007b7e:	4680      	mov	r8, r0
 8007b80:	2008      	movs	r0, #8
 8007b82:	4681      	mov	r9, r0
 8007b84:	2008      	movs	r0, #8
 8007b86:	4682      	mov	sl, r0
 8007b88:	2008      	movs	r0, #8
 8007b8a:	4683      	mov	fp, r0
 8007b8c:	44bb      	add	fp, r7
 8007b8e:	44da      	add	sl, fp
 8007b90:	44d1      	add	r9, sl
 8007b92:	44c8      	add	r8, r9
 8007b94:	44c4      	add	ip, r8
 8007b96:	4463      	add	r3, ip
 8007b98:	3264      	adds	r2, #100	; 0x64
 8007b9a:	0092      	lsls	r2, r2, #2
 8007b9c:	58d2      	ldr	r2, [r2, r3]
 8007b9e:	2308      	movs	r3, #8
 8007ba0:	2008      	movs	r0, #8
 8007ba2:	4684      	mov	ip, r0
 8007ba4:	2008      	movs	r0, #8
 8007ba6:	4680      	mov	r8, r0
 8007ba8:	44b8      	add	r8, r7
 8007baa:	44c4      	add	ip, r8
 8007bac:	4463      	add	r3, ip
 8007bae:	195b      	adds	r3, r3, r5
 8007bb0:	185b      	adds	r3, r3, r1
 8007bb2:	609a      	str	r2, [r3, #8]
				gyro_data_0[0] = tampering_buffer_0[3][i];
 8007bb4:	2308      	movs	r3, #8
 8007bb6:	2208      	movs	r2, #8
 8007bb8:	4694      	mov	ip, r2
 8007bba:	2208      	movs	r2, #8
 8007bbc:	4690      	mov	r8, r2
 8007bbe:	44b8      	add	r8, r7
 8007bc0:	44c4      	add	ip, r8
 8007bc2:	4463      	add	r3, ip
 8007bc4:	195b      	adds	r3, r3, r5
 8007bc6:	191b      	adds	r3, r3, r4
 8007bc8:	781a      	ldrb	r2, [r3, #0]
 8007bca:	4bb3      	ldr	r3, [pc, #716]	; (8007e98 <main+0x2410>)
 8007bcc:	48b3      	ldr	r0, [pc, #716]	; (8007e9c <main+0x2414>)
 8007bce:	4684      	mov	ip, r0
 8007bd0:	2020      	movs	r0, #32
 8007bd2:	4680      	mov	r8, r0
 8007bd4:	2008      	movs	r0, #8
 8007bd6:	4681      	mov	r9, r0
 8007bd8:	2008      	movs	r0, #8
 8007bda:	4682      	mov	sl, r0
 8007bdc:	2008      	movs	r0, #8
 8007bde:	4683      	mov	fp, r0
 8007be0:	44bb      	add	fp, r7
 8007be2:	44da      	add	sl, fp
 8007be4:	44d1      	add	r9, sl
 8007be6:	44c8      	add	r8, r9
 8007be8:	44c4      	add	ip, r8
 8007bea:	4463      	add	r3, ip
 8007bec:	3296      	adds	r2, #150	; 0x96
 8007bee:	0092      	lsls	r2, r2, #2
 8007bf0:	58d2      	ldr	r2, [r2, r3]
 8007bf2:	4bac      	ldr	r3, [pc, #688]	; (8007ea4 <main+0x241c>)
 8007bf4:	48a9      	ldr	r0, [pc, #676]	; (8007e9c <main+0x2414>)
 8007bf6:	4684      	mov	ip, r0
 8007bf8:	2020      	movs	r0, #32
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	2008      	movs	r0, #8
 8007bfe:	4681      	mov	r9, r0
 8007c00:	2008      	movs	r0, #8
 8007c02:	4682      	mov	sl, r0
 8007c04:	2008      	movs	r0, #8
 8007c06:	4683      	mov	fp, r0
 8007c08:	44bb      	add	fp, r7
 8007c0a:	44da      	add	sl, fp
 8007c0c:	44d1      	add	r9, sl
 8007c0e:	44c8      	add	r8, r9
 8007c10:	44c4      	add	ip, r8
 8007c12:	4463      	add	r3, ip
 8007c14:	601a      	str	r2, [r3, #0]
				gyro_data_0[1] = tampering_buffer_0[4][i];
 8007c16:	2308      	movs	r3, #8
 8007c18:	2208      	movs	r2, #8
 8007c1a:	4694      	mov	ip, r2
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	4690      	mov	r8, r2
 8007c20:	44b8      	add	r8, r7
 8007c22:	44c4      	add	ip, r8
 8007c24:	4463      	add	r3, ip
 8007c26:	195b      	adds	r3, r3, r5
 8007c28:	191b      	adds	r3, r3, r4
 8007c2a:	781a      	ldrb	r2, [r3, #0]
 8007c2c:	4b9a      	ldr	r3, [pc, #616]	; (8007e98 <main+0x2410>)
 8007c2e:	489b      	ldr	r0, [pc, #620]	; (8007e9c <main+0x2414>)
 8007c30:	4684      	mov	ip, r0
 8007c32:	2020      	movs	r0, #32
 8007c34:	4680      	mov	r8, r0
 8007c36:	2008      	movs	r0, #8
 8007c38:	4681      	mov	r9, r0
 8007c3a:	2008      	movs	r0, #8
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	2008      	movs	r0, #8
 8007c40:	4683      	mov	fp, r0
 8007c42:	44bb      	add	fp, r7
 8007c44:	44da      	add	sl, fp
 8007c46:	44d1      	add	r9, sl
 8007c48:	44c8      	add	r8, r9
 8007c4a:	44c4      	add	ip, r8
 8007c4c:	4463      	add	r3, ip
 8007c4e:	32c8      	adds	r2, #200	; 0xc8
 8007c50:	0092      	lsls	r2, r2, #2
 8007c52:	58d2      	ldr	r2, [r2, r3]
 8007c54:	4b93      	ldr	r3, [pc, #588]	; (8007ea4 <main+0x241c>)
 8007c56:	4891      	ldr	r0, [pc, #580]	; (8007e9c <main+0x2414>)
 8007c58:	4684      	mov	ip, r0
 8007c5a:	2020      	movs	r0, #32
 8007c5c:	4680      	mov	r8, r0
 8007c5e:	2008      	movs	r0, #8
 8007c60:	4681      	mov	r9, r0
 8007c62:	2008      	movs	r0, #8
 8007c64:	4682      	mov	sl, r0
 8007c66:	2008      	movs	r0, #8
 8007c68:	4683      	mov	fp, r0
 8007c6a:	44bb      	add	fp, r7
 8007c6c:	44da      	add	sl, fp
 8007c6e:	44d1      	add	r9, sl
 8007c70:	44c8      	add	r8, r9
 8007c72:	44c4      	add	ip, r8
 8007c74:	4463      	add	r3, ip
 8007c76:	605a      	str	r2, [r3, #4]
				gyro_data_0[2] = tampering_buffer_0[5][i];
 8007c78:	2308      	movs	r3, #8
 8007c7a:	2208      	movs	r2, #8
 8007c7c:	4694      	mov	ip, r2
 8007c7e:	2208      	movs	r2, #8
 8007c80:	4690      	mov	r8, r2
 8007c82:	44b8      	add	r8, r7
 8007c84:	44c4      	add	ip, r8
 8007c86:	4463      	add	r3, ip
 8007c88:	195b      	adds	r3, r3, r5
 8007c8a:	191b      	adds	r3, r3, r4
 8007c8c:	781a      	ldrb	r2, [r3, #0]
 8007c8e:	4b82      	ldr	r3, [pc, #520]	; (8007e98 <main+0x2410>)
 8007c90:	4882      	ldr	r0, [pc, #520]	; (8007e9c <main+0x2414>)
 8007c92:	4684      	mov	ip, r0
 8007c94:	2020      	movs	r0, #32
 8007c96:	4680      	mov	r8, r0
 8007c98:	2008      	movs	r0, #8
 8007c9a:	4681      	mov	r9, r0
 8007c9c:	2008      	movs	r0, #8
 8007c9e:	4682      	mov	sl, r0
 8007ca0:	2008      	movs	r0, #8
 8007ca2:	4683      	mov	fp, r0
 8007ca4:	44bb      	add	fp, r7
 8007ca6:	44da      	add	sl, fp
 8007ca8:	44d1      	add	r9, sl
 8007caa:	44c8      	add	r8, r9
 8007cac:	44c4      	add	ip, r8
 8007cae:	4463      	add	r3, ip
 8007cb0:	32fa      	adds	r2, #250	; 0xfa
 8007cb2:	0092      	lsls	r2, r2, #2
 8007cb4:	58d2      	ldr	r2, [r2, r3]
 8007cb6:	4b7b      	ldr	r3, [pc, #492]	; (8007ea4 <main+0x241c>)
 8007cb8:	4878      	ldr	r0, [pc, #480]	; (8007e9c <main+0x2414>)
 8007cba:	4684      	mov	ip, r0
 8007cbc:	2020      	movs	r0, #32
 8007cbe:	4680      	mov	r8, r0
 8007cc0:	2008      	movs	r0, #8
 8007cc2:	4681      	mov	r9, r0
 8007cc4:	2008      	movs	r0, #8
 8007cc6:	4682      	mov	sl, r0
 8007cc8:	2008      	movs	r0, #8
 8007cca:	4683      	mov	fp, r0
 8007ccc:	44bb      	add	fp, r7
 8007cce:	44da      	add	sl, fp
 8007cd0:	44d1      	add	r9, sl
 8007cd2:	44c8      	add	r8, r9
 8007cd4:	44c4      	add	ip, r8
 8007cd6:	4463      	add	r3, ip
 8007cd8:	609a      	str	r2, [r3, #8]
				MadgwickFilterXIO(gyro_data_0, accel_data_0, &quat_buffer_0);
 8007cda:	23c0      	movs	r3, #192	; 0xc0
 8007cdc:	2208      	movs	r2, #8
 8007cde:	2008      	movs	r0, #8
 8007ce0:	4684      	mov	ip, r0
 8007ce2:	2008      	movs	r0, #8
 8007ce4:	4680      	mov	r8, r0
 8007ce6:	44b8      	add	r8, r7
 8007ce8:	44c4      	add	ip, r8
 8007cea:	4462      	add	r2, ip
 8007cec:	1952      	adds	r2, r2, r5
 8007cee:	18d2      	adds	r2, r2, r3
 8007cf0:	2320      	movs	r3, #32
 8007cf2:	469c      	mov	ip, r3
 8007cf4:	2308      	movs	r3, #8
 8007cf6:	4698      	mov	r8, r3
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	4699      	mov	r9, r3
 8007cfc:	2308      	movs	r3, #8
 8007cfe:	469a      	mov	sl, r3
 8007d00:	44ba      	add	sl, r7
 8007d02:	44d1      	add	r9, sl
 8007d04:	44c8      	add	r8, r9
 8007d06:	44c4      	add	ip, r8
 8007d08:	4461      	add	r1, ip
 8007d0a:	4b67      	ldr	r3, [pc, #412]	; (8007ea8 <main+0x2420>)
 8007d0c:	2020      	movs	r0, #32
 8007d0e:	4684      	mov	ip, r0
 8007d10:	2008      	movs	r0, #8
 8007d12:	4680      	mov	r8, r0
 8007d14:	2008      	movs	r0, #8
 8007d16:	4681      	mov	r9, r0
 8007d18:	2008      	movs	r0, #8
 8007d1a:	4682      	mov	sl, r0
 8007d1c:	44ba      	add	sl, r7
 8007d1e:	44d1      	add	r9, sl
 8007d20:	44c8      	add	r8, r9
 8007d22:	44c4      	add	ip, r8
 8007d24:	4463      	add	r3, ip
 8007d26:	0018      	movs	r0, r3
 8007d28:	f7fc fb60 	bl	80043ec <MadgwickFilterXIO>
			for (uint8_t i = 0; i < TAMPERING_BUFFER_SIZE; i++)
 8007d2c:	2308      	movs	r3, #8
 8007d2e:	2208      	movs	r2, #8
 8007d30:	4694      	mov	ip, r2
 8007d32:	2208      	movs	r2, #8
 8007d34:	4690      	mov	r8, r2
 8007d36:	44b8      	add	r8, r7
 8007d38:	44c4      	add	ip, r8
 8007d3a:	4463      	add	r3, ip
 8007d3c:	195b      	adds	r3, r3, r5
 8007d3e:	191b      	adds	r3, r3, r4
 8007d40:	781a      	ldrb	r2, [r3, #0]
 8007d42:	2308      	movs	r3, #8
 8007d44:	2108      	movs	r1, #8
 8007d46:	468c      	mov	ip, r1
 8007d48:	2108      	movs	r1, #8
 8007d4a:	4688      	mov	r8, r1
 8007d4c:	44b8      	add	r8, r7
 8007d4e:	44c4      	add	ip, r8
 8007d50:	4463      	add	r3, ip
 8007d52:	195b      	adds	r3, r3, r5
 8007d54:	191b      	adds	r3, r3, r4
 8007d56:	3201      	adds	r2, #1
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	4b4e      	ldr	r3, [pc, #312]	; (8007e94 <main+0x240c>)
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	4694      	mov	ip, r2
 8007d60:	2208      	movs	r2, #8
 8007d62:	4690      	mov	r8, r2
 8007d64:	2208      	movs	r2, #8
 8007d66:	4691      	mov	r9, r2
 8007d68:	2208      	movs	r2, #8
 8007d6a:	4692      	mov	sl, r2
 8007d6c:	44ba      	add	sl, r7
 8007d6e:	44d1      	add	r9, sl
 8007d70:	44c8      	add	r8, r9
 8007d72:	44c4      	add	ip, r8
 8007d74:	4463      	add	r3, ip
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b31      	cmp	r3, #49	; 0x31
 8007d7a:	d800      	bhi.n	8007d7e <main+0x22f6>
 8007d7c:	e69a      	b.n	8007ab4 <main+0x202c>
			}

			// Calc buffer and remove interpolated error
			CalcQuaternionToEuler(quat_buffer_0, &angles_buffer_0);
 8007d7e:	4b4b      	ldr	r3, [pc, #300]	; (8007eac <main+0x2424>)
 8007d80:	4a46      	ldr	r2, [pc, #280]	; (8007e9c <main+0x2414>)
 8007d82:	4694      	mov	ip, r2
 8007d84:	2220      	movs	r2, #32
 8007d86:	4690      	mov	r8, r2
 8007d88:	2208      	movs	r2, #8
 8007d8a:	4691      	mov	r9, r2
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	4692      	mov	sl, r2
 8007d90:	2208      	movs	r2, #8
 8007d92:	4693      	mov	fp, r2
 8007d94:	44bb      	add	fp, r7
 8007d96:	44da      	add	sl, fp
 8007d98:	44d1      	add	r9, sl
 8007d9a:	44c8      	add	r8, r9
 8007d9c:	44c4      	add	ip, r8
 8007d9e:	4463      	add	r3, ip
 8007da0:	248c      	movs	r4, #140	; 0x8c
 8007da2:	2620      	movs	r6, #32
 8007da4:	2208      	movs	r2, #8
 8007da6:	2108      	movs	r1, #8
 8007da8:	468c      	mov	ip, r1
 8007daa:	2108      	movs	r1, #8
 8007dac:	4688      	mov	r8, r1
 8007dae:	44b8      	add	r8, r7
 8007db0:	44c4      	add	ip, r8
 8007db2:	4462      	add	r2, ip
 8007db4:	1992      	adds	r2, r2, r6
 8007db6:	1912      	adds	r2, r2, r4
 8007db8:	9200      	str	r2, [sp, #0]
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	6859      	ldr	r1, [r3, #4]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f7fc f8fb 	bl	8003fbc <CalcQuaternionToEuler>
			//angles_buffer_0.yaw -= CalcPoly32Error(angles_buffer_0.yaw, 90 - angles_buffer_0.roll);
			//angles_buffer_0.roll -= CalcPoly23Error(angles_buffer_0.yaw, 90 - angles_buffer_0.roll);

			// Calc buffer and remove interpolated error
			CalcQuaternionToEuler(quat_0, &angles_0);
 8007dc6:	4b3a      	ldr	r3, [pc, #232]	; (8007eb0 <main+0x2428>)
 8007dc8:	4a34      	ldr	r2, [pc, #208]	; (8007e9c <main+0x2414>)
 8007dca:	4694      	mov	ip, r2
 8007dcc:	2220      	movs	r2, #32
 8007dce:	4690      	mov	r8, r2
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	4691      	mov	r9, r2
 8007dd4:	2208      	movs	r2, #8
 8007dd6:	4692      	mov	sl, r2
 8007dd8:	2208      	movs	r2, #8
 8007dda:	4693      	mov	fp, r2
 8007ddc:	44bb      	add	fp, r7
 8007dde:	44da      	add	sl, fp
 8007de0:	44d1      	add	r9, sl
 8007de2:	44c8      	add	r8, r9
 8007de4:	44c4      	add	ip, r8
 8007de6:	4463      	add	r3, ip
 8007de8:	25a4      	movs	r5, #164	; 0xa4
 8007dea:	2208      	movs	r2, #8
 8007dec:	2108      	movs	r1, #8
 8007dee:	468c      	mov	ip, r1
 8007df0:	2108      	movs	r1, #8
 8007df2:	4688      	mov	r8, r1
 8007df4:	44b8      	add	r8, r7
 8007df6:	44c4      	add	ip, r8
 8007df8:	4462      	add	r2, ip
 8007dfa:	1992      	adds	r2, r2, r6
 8007dfc:	1952      	adds	r2, r2, r5
 8007dfe:	9200      	str	r2, [sp, #0]
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	6859      	ldr	r1, [r3, #4]
 8007e04:	689a      	ldr	r2, [r3, #8]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f7fc f8d8 	bl	8003fbc <CalcQuaternionToEuler>
			//angles_0.yaw -= CalcPoly32Error(angles_0.yaw, 90 - angles_0.roll);
			//angles_0.roll += CalcPoly23Error(angles_0.yaw, 90 - angles_0.roll);

			CalcAngleDifference(&diff_0, &angles_0, &prev_0, &angles_buffer_0);
 8007e0c:	2308      	movs	r3, #8
 8007e0e:	2208      	movs	r2, #8
 8007e10:	4694      	mov	ip, r2
 8007e12:	2208      	movs	r2, #8
 8007e14:	4690      	mov	r8, r2
 8007e16:	44b8      	add	r8, r7
 8007e18:	44c4      	add	ip, r8
 8007e1a:	4463      	add	r3, ip
 8007e1c:	199b      	adds	r3, r3, r6
 8007e1e:	191b      	adds	r3, r3, r4
 8007e20:	225c      	movs	r2, #92	; 0x5c
 8007e22:	2120      	movs	r1, #32
 8007e24:	468c      	mov	ip, r1
 8007e26:	2108      	movs	r1, #8
 8007e28:	4688      	mov	r8, r1
 8007e2a:	2108      	movs	r1, #8
 8007e2c:	4689      	mov	r9, r1
 8007e2e:	2108      	movs	r1, #8
 8007e30:	468a      	mov	sl, r1
 8007e32:	44ba      	add	sl, r7
 8007e34:	44d1      	add	r9, sl
 8007e36:	44c8      	add	r8, r9
 8007e38:	44c4      	add	ip, r8
 8007e3a:	4462      	add	r2, ip
 8007e3c:	2108      	movs	r1, #8
 8007e3e:	2008      	movs	r0, #8
 8007e40:	4684      	mov	ip, r0
 8007e42:	2008      	movs	r0, #8
 8007e44:	4680      	mov	r8, r0
 8007e46:	44b8      	add	r8, r7
 8007e48:	44c4      	add	ip, r8
 8007e4a:	4461      	add	r1, ip
 8007e4c:	1989      	adds	r1, r1, r6
 8007e4e:	1949      	adds	r1, r1, r5
 8007e50:	2074      	movs	r0, #116	; 0x74
 8007e52:	2420      	movs	r4, #32
 8007e54:	46a4      	mov	ip, r4
 8007e56:	2408      	movs	r4, #8
 8007e58:	46a0      	mov	r8, r4
 8007e5a:	2408      	movs	r4, #8
 8007e5c:	46a1      	mov	r9, r4
 8007e5e:	2408      	movs	r4, #8
 8007e60:	46a2      	mov	sl, r4
 8007e62:	44ba      	add	sl, r7
 8007e64:	44d1      	add	r9, sl
 8007e66:	44c8      	add	r8, r9
 8007e68:	44c4      	add	ip, r8
 8007e6a:	4460      	add	r0, ip
 8007e6c:	f7fc f99c 	bl	80041a8 <CalcAngleDifference>

			for (uint8_t i = 0; i < TAMPERING_BUFFER_SIZE; i++)
 8007e70:	4b10      	ldr	r3, [pc, #64]	; (8007eb4 <main+0x242c>)
 8007e72:	2220      	movs	r2, #32
 8007e74:	4694      	mov	ip, r2
 8007e76:	2208      	movs	r2, #8
 8007e78:	4690      	mov	r8, r2
 8007e7a:	2208      	movs	r2, #8
 8007e7c:	4691      	mov	r9, r2
 8007e7e:	2208      	movs	r2, #8
 8007e80:	4692      	mov	sl, r2
 8007e82:	44ba      	add	sl, r7
 8007e84:	44d1      	add	r9, sl
 8007e86:	44c8      	add	r8, r9
 8007e88:	44c4      	add	ip, r8
 8007e8a:	4463      	add	r3, ip
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]
 8007e90:	e179      	b.n	8008186 <main+0x26fe>
 8007e92:	46c0      	nop			; (mov r8, r8)
 8007e94:	00000bff 	.word	0x00000bff
 8007e98:	fffff9f8 	.word	0xfffff9f8
 8007e9c:	00000c08 	.word	0x00000c08
 8007ea0:	00000b14 	.word	0x00000b14
 8007ea4:	fffffef4 	.word	0xfffffef4
 8007ea8:	00000afc 	.word	0x00000afc
 8007eac:	fffff4b8 	.word	0xfffff4b8
 8007eb0:	fffff4d8 	.word	0xfffff4d8
 8007eb4:	00000bfe 	.word	0x00000bfe
			{
				accel_data_1[0] = tampering_buffer_1[0][i];
 8007eb8:	4cfd      	ldr	r4, [pc, #1012]	; (80082b0 <main+0x2828>)
 8007eba:	2020      	movs	r0, #32
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	4694      	mov	ip, r2
 8007ec2:	2208      	movs	r2, #8
 8007ec4:	4690      	mov	r8, r2
 8007ec6:	44b8      	add	r8, r7
 8007ec8:	44c4      	add	ip, r8
 8007eca:	4463      	add	r3, ip
 8007ecc:	181b      	adds	r3, r3, r0
 8007ece:	191b      	adds	r3, r3, r4
 8007ed0:	781a      	ldrb	r2, [r3, #0]
 8007ed2:	4bf8      	ldr	r3, [pc, #992]	; (80082b4 <main+0x282c>)
 8007ed4:	49f8      	ldr	r1, [pc, #992]	; (80082b8 <main+0x2830>)
 8007ed6:	468c      	mov	ip, r1
 8007ed8:	2120      	movs	r1, #32
 8007eda:	4688      	mov	r8, r1
 8007edc:	2108      	movs	r1, #8
 8007ede:	4689      	mov	r9, r1
 8007ee0:	2108      	movs	r1, #8
 8007ee2:	468a      	mov	sl, r1
 8007ee4:	2108      	movs	r1, #8
 8007ee6:	468b      	mov	fp, r1
 8007ee8:	44bb      	add	fp, r7
 8007eea:	44da      	add	sl, fp
 8007eec:	44d1      	add	r9, sl
 8007eee:	44c8      	add	r8, r9
 8007ef0:	44c4      	add	ip, r8
 8007ef2:	4463      	add	r3, ip
 8007ef4:	0092      	lsls	r2, r2, #2
 8007ef6:	58d2      	ldr	r2, [r2, r3]
 8007ef8:	4bf0      	ldr	r3, [pc, #960]	; (80082bc <main+0x2834>)
 8007efa:	49ef      	ldr	r1, [pc, #956]	; (80082b8 <main+0x2830>)
 8007efc:	468c      	mov	ip, r1
 8007efe:	2120      	movs	r1, #32
 8007f00:	4688      	mov	r8, r1
 8007f02:	2108      	movs	r1, #8
 8007f04:	4689      	mov	r9, r1
 8007f06:	2108      	movs	r1, #8
 8007f08:	468a      	mov	sl, r1
 8007f0a:	2108      	movs	r1, #8
 8007f0c:	468b      	mov	fp, r1
 8007f0e:	44bb      	add	fp, r7
 8007f10:	44da      	add	sl, fp
 8007f12:	44d1      	add	r9, sl
 8007f14:	44c8      	add	r8, r9
 8007f16:	44c4      	add	ip, r8
 8007f18:	4463      	add	r3, ip
 8007f1a:	601a      	str	r2, [r3, #0]
				accel_data_1[1] = tampering_buffer_1[1][i];
 8007f1c:	2308      	movs	r3, #8
 8007f1e:	2208      	movs	r2, #8
 8007f20:	4694      	mov	ip, r2
 8007f22:	2208      	movs	r2, #8
 8007f24:	4690      	mov	r8, r2
 8007f26:	44b8      	add	r8, r7
 8007f28:	44c4      	add	ip, r8
 8007f2a:	4463      	add	r3, ip
 8007f2c:	181b      	adds	r3, r3, r0
 8007f2e:	191b      	adds	r3, r3, r4
 8007f30:	781a      	ldrb	r2, [r3, #0]
 8007f32:	4be0      	ldr	r3, [pc, #896]	; (80082b4 <main+0x282c>)
 8007f34:	49e0      	ldr	r1, [pc, #896]	; (80082b8 <main+0x2830>)
 8007f36:	468c      	mov	ip, r1
 8007f38:	2120      	movs	r1, #32
 8007f3a:	4688      	mov	r8, r1
 8007f3c:	2108      	movs	r1, #8
 8007f3e:	4689      	mov	r9, r1
 8007f40:	2108      	movs	r1, #8
 8007f42:	468a      	mov	sl, r1
 8007f44:	2108      	movs	r1, #8
 8007f46:	468b      	mov	fp, r1
 8007f48:	44bb      	add	fp, r7
 8007f4a:	44da      	add	sl, fp
 8007f4c:	44d1      	add	r9, sl
 8007f4e:	44c8      	add	r8, r9
 8007f50:	44c4      	add	ip, r8
 8007f52:	4463      	add	r3, ip
 8007f54:	3232      	adds	r2, #50	; 0x32
 8007f56:	0092      	lsls	r2, r2, #2
 8007f58:	58d2      	ldr	r2, [r2, r3]
 8007f5a:	4bd8      	ldr	r3, [pc, #864]	; (80082bc <main+0x2834>)
 8007f5c:	49d6      	ldr	r1, [pc, #856]	; (80082b8 <main+0x2830>)
 8007f5e:	468c      	mov	ip, r1
 8007f60:	2120      	movs	r1, #32
 8007f62:	4688      	mov	r8, r1
 8007f64:	2108      	movs	r1, #8
 8007f66:	4689      	mov	r9, r1
 8007f68:	2108      	movs	r1, #8
 8007f6a:	468a      	mov	sl, r1
 8007f6c:	2108      	movs	r1, #8
 8007f6e:	468b      	mov	fp, r1
 8007f70:	44bb      	add	fp, r7
 8007f72:	44da      	add	sl, fp
 8007f74:	44d1      	add	r9, sl
 8007f76:	44c8      	add	r8, r9
 8007f78:	44c4      	add	ip, r8
 8007f7a:	4463      	add	r3, ip
 8007f7c:	605a      	str	r2, [r3, #4]
				accel_data_1[2] = tampering_buffer_1[2][i];
 8007f7e:	2308      	movs	r3, #8
 8007f80:	2208      	movs	r2, #8
 8007f82:	4694      	mov	ip, r2
 8007f84:	2208      	movs	r2, #8
 8007f86:	4690      	mov	r8, r2
 8007f88:	44b8      	add	r8, r7
 8007f8a:	44c4      	add	ip, r8
 8007f8c:	4463      	add	r3, ip
 8007f8e:	181b      	adds	r3, r3, r0
 8007f90:	191b      	adds	r3, r3, r4
 8007f92:	781a      	ldrb	r2, [r3, #0]
 8007f94:	4bc7      	ldr	r3, [pc, #796]	; (80082b4 <main+0x282c>)
 8007f96:	49c8      	ldr	r1, [pc, #800]	; (80082b8 <main+0x2830>)
 8007f98:	468c      	mov	ip, r1
 8007f9a:	2120      	movs	r1, #32
 8007f9c:	4688      	mov	r8, r1
 8007f9e:	2108      	movs	r1, #8
 8007fa0:	4689      	mov	r9, r1
 8007fa2:	2108      	movs	r1, #8
 8007fa4:	468a      	mov	sl, r1
 8007fa6:	2108      	movs	r1, #8
 8007fa8:	468b      	mov	fp, r1
 8007faa:	44bb      	add	fp, r7
 8007fac:	44da      	add	sl, fp
 8007fae:	44d1      	add	r9, sl
 8007fb0:	44c8      	add	r8, r9
 8007fb2:	44c4      	add	ip, r8
 8007fb4:	4463      	add	r3, ip
 8007fb6:	3264      	adds	r2, #100	; 0x64
 8007fb8:	0092      	lsls	r2, r2, #2
 8007fba:	58d2      	ldr	r2, [r2, r3]
 8007fbc:	4bbf      	ldr	r3, [pc, #764]	; (80082bc <main+0x2834>)
 8007fbe:	49be      	ldr	r1, [pc, #760]	; (80082b8 <main+0x2830>)
 8007fc0:	468c      	mov	ip, r1
 8007fc2:	2120      	movs	r1, #32
 8007fc4:	4688      	mov	r8, r1
 8007fc6:	2108      	movs	r1, #8
 8007fc8:	4689      	mov	r9, r1
 8007fca:	2108      	movs	r1, #8
 8007fcc:	468a      	mov	sl, r1
 8007fce:	2108      	movs	r1, #8
 8007fd0:	468b      	mov	fp, r1
 8007fd2:	44bb      	add	fp, r7
 8007fd4:	44da      	add	sl, fp
 8007fd6:	44d1      	add	r9, sl
 8007fd8:	44c8      	add	r8, r9
 8007fda:	44c4      	add	ip, r8
 8007fdc:	4463      	add	r3, ip
 8007fde:	609a      	str	r2, [r3, #8]
				gyro_data_1[0] = tampering_buffer_1[3][i];
 8007fe0:	2308      	movs	r3, #8
 8007fe2:	2208      	movs	r2, #8
 8007fe4:	4694      	mov	ip, r2
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	4690      	mov	r8, r2
 8007fea:	44b8      	add	r8, r7
 8007fec:	44c4      	add	ip, r8
 8007fee:	4463      	add	r3, ip
 8007ff0:	181b      	adds	r3, r3, r0
 8007ff2:	191b      	adds	r3, r3, r4
 8007ff4:	781a      	ldrb	r2, [r3, #0]
 8007ff6:	4baf      	ldr	r3, [pc, #700]	; (80082b4 <main+0x282c>)
 8007ff8:	49af      	ldr	r1, [pc, #700]	; (80082b8 <main+0x2830>)
 8007ffa:	468c      	mov	ip, r1
 8007ffc:	2120      	movs	r1, #32
 8007ffe:	4688      	mov	r8, r1
 8008000:	2108      	movs	r1, #8
 8008002:	4689      	mov	r9, r1
 8008004:	2108      	movs	r1, #8
 8008006:	468a      	mov	sl, r1
 8008008:	2108      	movs	r1, #8
 800800a:	468b      	mov	fp, r1
 800800c:	44bb      	add	fp, r7
 800800e:	44da      	add	sl, fp
 8008010:	44d1      	add	r9, sl
 8008012:	44c8      	add	r8, r9
 8008014:	44c4      	add	ip, r8
 8008016:	4463      	add	r3, ip
 8008018:	3296      	adds	r2, #150	; 0x96
 800801a:	0092      	lsls	r2, r2, #2
 800801c:	58d2      	ldr	r2, [r2, r3]
 800801e:	4ba8      	ldr	r3, [pc, #672]	; (80082c0 <main+0x2838>)
 8008020:	49a5      	ldr	r1, [pc, #660]	; (80082b8 <main+0x2830>)
 8008022:	468c      	mov	ip, r1
 8008024:	2120      	movs	r1, #32
 8008026:	4688      	mov	r8, r1
 8008028:	2108      	movs	r1, #8
 800802a:	4689      	mov	r9, r1
 800802c:	2108      	movs	r1, #8
 800802e:	468a      	mov	sl, r1
 8008030:	2108      	movs	r1, #8
 8008032:	468b      	mov	fp, r1
 8008034:	44bb      	add	fp, r7
 8008036:	44da      	add	sl, fp
 8008038:	44d1      	add	r9, sl
 800803a:	44c8      	add	r8, r9
 800803c:	44c4      	add	ip, r8
 800803e:	4463      	add	r3, ip
 8008040:	601a      	str	r2, [r3, #0]
				gyro_data_1[1] = tampering_buffer_1[4][i];
 8008042:	2308      	movs	r3, #8
 8008044:	2208      	movs	r2, #8
 8008046:	4694      	mov	ip, r2
 8008048:	2208      	movs	r2, #8
 800804a:	4690      	mov	r8, r2
 800804c:	44b8      	add	r8, r7
 800804e:	44c4      	add	ip, r8
 8008050:	4463      	add	r3, ip
 8008052:	181b      	adds	r3, r3, r0
 8008054:	191b      	adds	r3, r3, r4
 8008056:	781a      	ldrb	r2, [r3, #0]
 8008058:	4b96      	ldr	r3, [pc, #600]	; (80082b4 <main+0x282c>)
 800805a:	4997      	ldr	r1, [pc, #604]	; (80082b8 <main+0x2830>)
 800805c:	468c      	mov	ip, r1
 800805e:	2120      	movs	r1, #32
 8008060:	4688      	mov	r8, r1
 8008062:	2108      	movs	r1, #8
 8008064:	4689      	mov	r9, r1
 8008066:	2108      	movs	r1, #8
 8008068:	468a      	mov	sl, r1
 800806a:	2108      	movs	r1, #8
 800806c:	468b      	mov	fp, r1
 800806e:	44bb      	add	fp, r7
 8008070:	44da      	add	sl, fp
 8008072:	44d1      	add	r9, sl
 8008074:	44c8      	add	r8, r9
 8008076:	44c4      	add	ip, r8
 8008078:	4463      	add	r3, ip
 800807a:	32c8      	adds	r2, #200	; 0xc8
 800807c:	0092      	lsls	r2, r2, #2
 800807e:	58d2      	ldr	r2, [r2, r3]
 8008080:	4b8f      	ldr	r3, [pc, #572]	; (80082c0 <main+0x2838>)
 8008082:	498d      	ldr	r1, [pc, #564]	; (80082b8 <main+0x2830>)
 8008084:	468c      	mov	ip, r1
 8008086:	2120      	movs	r1, #32
 8008088:	4688      	mov	r8, r1
 800808a:	2108      	movs	r1, #8
 800808c:	4689      	mov	r9, r1
 800808e:	2108      	movs	r1, #8
 8008090:	468a      	mov	sl, r1
 8008092:	2108      	movs	r1, #8
 8008094:	468b      	mov	fp, r1
 8008096:	44bb      	add	fp, r7
 8008098:	44da      	add	sl, fp
 800809a:	44d1      	add	r9, sl
 800809c:	44c8      	add	r8, r9
 800809e:	44c4      	add	ip, r8
 80080a0:	4463      	add	r3, ip
 80080a2:	605a      	str	r2, [r3, #4]
				gyro_data_1[2] = tampering_buffer_1[5][i];
 80080a4:	2308      	movs	r3, #8
 80080a6:	2208      	movs	r2, #8
 80080a8:	4694      	mov	ip, r2
 80080aa:	2208      	movs	r2, #8
 80080ac:	4690      	mov	r8, r2
 80080ae:	44b8      	add	r8, r7
 80080b0:	44c4      	add	ip, r8
 80080b2:	4463      	add	r3, ip
 80080b4:	181b      	adds	r3, r3, r0
 80080b6:	191b      	adds	r3, r3, r4
 80080b8:	781a      	ldrb	r2, [r3, #0]
 80080ba:	4b7e      	ldr	r3, [pc, #504]	; (80082b4 <main+0x282c>)
 80080bc:	497e      	ldr	r1, [pc, #504]	; (80082b8 <main+0x2830>)
 80080be:	468c      	mov	ip, r1
 80080c0:	2120      	movs	r1, #32
 80080c2:	4688      	mov	r8, r1
 80080c4:	2108      	movs	r1, #8
 80080c6:	4689      	mov	r9, r1
 80080c8:	2108      	movs	r1, #8
 80080ca:	468a      	mov	sl, r1
 80080cc:	2108      	movs	r1, #8
 80080ce:	468b      	mov	fp, r1
 80080d0:	44bb      	add	fp, r7
 80080d2:	44da      	add	sl, fp
 80080d4:	44d1      	add	r9, sl
 80080d6:	44c8      	add	r8, r9
 80080d8:	44c4      	add	ip, r8
 80080da:	4463      	add	r3, ip
 80080dc:	32fa      	adds	r2, #250	; 0xfa
 80080de:	0092      	lsls	r2, r2, #2
 80080e0:	58d2      	ldr	r2, [r2, r3]
 80080e2:	4b77      	ldr	r3, [pc, #476]	; (80082c0 <main+0x2838>)
 80080e4:	4974      	ldr	r1, [pc, #464]	; (80082b8 <main+0x2830>)
 80080e6:	468c      	mov	ip, r1
 80080e8:	2120      	movs	r1, #32
 80080ea:	4688      	mov	r8, r1
 80080ec:	2108      	movs	r1, #8
 80080ee:	4689      	mov	r9, r1
 80080f0:	2108      	movs	r1, #8
 80080f2:	468a      	mov	sl, r1
 80080f4:	2108      	movs	r1, #8
 80080f6:	468b      	mov	fp, r1
 80080f8:	44bb      	add	fp, r7
 80080fa:	44da      	add	sl, fp
 80080fc:	44d1      	add	r9, sl
 80080fe:	44c8      	add	r8, r9
 8008100:	44c4      	add	ip, r8
 8008102:	4463      	add	r3, ip
 8008104:	609a      	str	r2, [r3, #8]
				MadgwickFilterXIO(gyro_data_1, accel_data_1, &quat_buffer_1);
 8008106:	23b0      	movs	r3, #176	; 0xb0
 8008108:	2208      	movs	r2, #8
 800810a:	2108      	movs	r1, #8
 800810c:	468c      	mov	ip, r1
 800810e:	2108      	movs	r1, #8
 8008110:	4688      	mov	r8, r1
 8008112:	44b8      	add	r8, r7
 8008114:	44c4      	add	ip, r8
 8008116:	4462      	add	r2, ip
 8008118:	1812      	adds	r2, r2, r0
 800811a:	18d2      	adds	r2, r2, r3
 800811c:	4b69      	ldr	r3, [pc, #420]	; (80082c4 <main+0x283c>)
 800811e:	0005      	movs	r5, r0
 8008120:	2108      	movs	r1, #8
 8008122:	2608      	movs	r6, #8
 8008124:	46b4      	mov	ip, r6
 8008126:	2608      	movs	r6, #8
 8008128:	46b0      	mov	r8, r6
 800812a:	44b8      	add	r8, r7
 800812c:	44c4      	add	ip, r8
 800812e:	4461      	add	r1, ip
 8008130:	1809      	adds	r1, r1, r0
 8008132:	18c9      	adds	r1, r1, r3
 8008134:	23af      	movs	r3, #175	; 0xaf
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	2020      	movs	r0, #32
 800813a:	4684      	mov	ip, r0
 800813c:	2008      	movs	r0, #8
 800813e:	4680      	mov	r8, r0
 8008140:	2008      	movs	r0, #8
 8008142:	4681      	mov	r9, r0
 8008144:	2008      	movs	r0, #8
 8008146:	4682      	mov	sl, r0
 8008148:	44ba      	add	sl, r7
 800814a:	44d1      	add	r9, sl
 800814c:	44c8      	add	r8, r9
 800814e:	44c4      	add	ip, r8
 8008150:	4463      	add	r3, ip
 8008152:	0018      	movs	r0, r3
 8008154:	f7fc f94a 	bl	80043ec <MadgwickFilterXIO>
			for (uint8_t i = 0; i < TAMPERING_BUFFER_SIZE; i++)
 8008158:	2308      	movs	r3, #8
 800815a:	2208      	movs	r2, #8
 800815c:	4694      	mov	ip, r2
 800815e:	2208      	movs	r2, #8
 8008160:	4690      	mov	r8, r2
 8008162:	44b8      	add	r8, r7
 8008164:	44c4      	add	ip, r8
 8008166:	4463      	add	r3, ip
 8008168:	195b      	adds	r3, r3, r5
 800816a:	191b      	adds	r3, r3, r4
 800816c:	781a      	ldrb	r2, [r3, #0]
 800816e:	2308      	movs	r3, #8
 8008170:	2108      	movs	r1, #8
 8008172:	468c      	mov	ip, r1
 8008174:	2108      	movs	r1, #8
 8008176:	4688      	mov	r8, r1
 8008178:	44b8      	add	r8, r7
 800817a:	44c4      	add	ip, r8
 800817c:	4463      	add	r3, ip
 800817e:	195b      	adds	r3, r3, r5
 8008180:	191b      	adds	r3, r3, r4
 8008182:	3201      	adds	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	4b4a      	ldr	r3, [pc, #296]	; (80082b0 <main+0x2828>)
 8008188:	2220      	movs	r2, #32
 800818a:	4694      	mov	ip, r2
 800818c:	2208      	movs	r2, #8
 800818e:	4690      	mov	r8, r2
 8008190:	2208      	movs	r2, #8
 8008192:	4691      	mov	r9, r2
 8008194:	2208      	movs	r2, #8
 8008196:	4692      	mov	sl, r2
 8008198:	44ba      	add	sl, r7
 800819a:	44d1      	add	r9, sl
 800819c:	44c8      	add	r8, r9
 800819e:	44c4      	add	ip, r8
 80081a0:	4463      	add	r3, ip
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	2b31      	cmp	r3, #49	; 0x31
 80081a6:	d800      	bhi.n	80081aa <main+0x2722>
 80081a8:	e686      	b.n	8007eb8 <main+0x2430>
			}

			// Calc buffer and remove interpolated error
			CalcQuaternionToEuler(quat_buffer_1, &angles_buffer_1);
 80081aa:	4b47      	ldr	r3, [pc, #284]	; (80082c8 <main+0x2840>)
 80081ac:	4a42      	ldr	r2, [pc, #264]	; (80082b8 <main+0x2830>)
 80081ae:	4694      	mov	ip, r2
 80081b0:	2220      	movs	r2, #32
 80081b2:	4690      	mov	r8, r2
 80081b4:	2208      	movs	r2, #8
 80081b6:	4691      	mov	r9, r2
 80081b8:	2208      	movs	r2, #8
 80081ba:	4692      	mov	sl, r2
 80081bc:	2208      	movs	r2, #8
 80081be:	4693      	mov	fp, r2
 80081c0:	44bb      	add	fp, r7
 80081c2:	44da      	add	sl, fp
 80081c4:	44d1      	add	r9, sl
 80081c6:	44c8      	add	r8, r9
 80081c8:	44c4      	add	ip, r8
 80081ca:	4463      	add	r3, ip
 80081cc:	2480      	movs	r4, #128	; 0x80
 80081ce:	2620      	movs	r6, #32
 80081d0:	2208      	movs	r2, #8
 80081d2:	2108      	movs	r1, #8
 80081d4:	468c      	mov	ip, r1
 80081d6:	2108      	movs	r1, #8
 80081d8:	4688      	mov	r8, r1
 80081da:	44b8      	add	r8, r7
 80081dc:	44c4      	add	ip, r8
 80081de:	4462      	add	r2, ip
 80081e0:	1992      	adds	r2, r2, r6
 80081e2:	1912      	adds	r2, r2, r4
 80081e4:	9200      	str	r2, [sp, #0]
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	6859      	ldr	r1, [r3, #4]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	f7fb fee5 	bl	8003fbc <CalcQuaternionToEuler>
			CalcQuaternionToEuler(quat_1, &angles_1);
 80081f2:	4b36      	ldr	r3, [pc, #216]	; (80082cc <main+0x2844>)
 80081f4:	4a30      	ldr	r2, [pc, #192]	; (80082b8 <main+0x2830>)
 80081f6:	4694      	mov	ip, r2
 80081f8:	2220      	movs	r2, #32
 80081fa:	4690      	mov	r8, r2
 80081fc:	2208      	movs	r2, #8
 80081fe:	4691      	mov	r9, r2
 8008200:	2208      	movs	r2, #8
 8008202:	4692      	mov	sl, r2
 8008204:	2208      	movs	r2, #8
 8008206:	4693      	mov	fp, r2
 8008208:	44bb      	add	fp, r7
 800820a:	44da      	add	sl, fp
 800820c:	44d1      	add	r9, sl
 800820e:	44c8      	add	r8, r9
 8008210:	44c4      	add	ip, r8
 8008212:	4463      	add	r3, ip
 8008214:	2598      	movs	r5, #152	; 0x98
 8008216:	2208      	movs	r2, #8
 8008218:	2108      	movs	r1, #8
 800821a:	468c      	mov	ip, r1
 800821c:	2108      	movs	r1, #8
 800821e:	4688      	mov	r8, r1
 8008220:	44b8      	add	r8, r7
 8008222:	44c4      	add	ip, r8
 8008224:	4462      	add	r2, ip
 8008226:	1992      	adds	r2, r2, r6
 8008228:	1952      	adds	r2, r2, r5
 800822a:	9200      	str	r2, [sp, #0]
 800822c:	6818      	ldr	r0, [r3, #0]
 800822e:	6859      	ldr	r1, [r3, #4]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f7fb fec2 	bl	8003fbc <CalcQuaternionToEuler>
			CalcAngleDifference(&diff_1, &angles_1, &prev_1, &angles_buffer_1);
 8008238:	2308      	movs	r3, #8
 800823a:	2208      	movs	r2, #8
 800823c:	4694      	mov	ip, r2
 800823e:	2208      	movs	r2, #8
 8008240:	4690      	mov	r8, r2
 8008242:	44b8      	add	r8, r7
 8008244:	44c4      	add	ip, r8
 8008246:	4463      	add	r3, ip
 8008248:	199b      	adds	r3, r3, r6
 800824a:	191b      	adds	r3, r3, r4
 800824c:	2250      	movs	r2, #80	; 0x50
 800824e:	2120      	movs	r1, #32
 8008250:	468c      	mov	ip, r1
 8008252:	2108      	movs	r1, #8
 8008254:	4688      	mov	r8, r1
 8008256:	2108      	movs	r1, #8
 8008258:	4689      	mov	r9, r1
 800825a:	2108      	movs	r1, #8
 800825c:	468a      	mov	sl, r1
 800825e:	44ba      	add	sl, r7
 8008260:	44d1      	add	r9, sl
 8008262:	44c8      	add	r8, r9
 8008264:	44c4      	add	ip, r8
 8008266:	4462      	add	r2, ip
 8008268:	2108      	movs	r1, #8
 800826a:	2008      	movs	r0, #8
 800826c:	4684      	mov	ip, r0
 800826e:	2008      	movs	r0, #8
 8008270:	4680      	mov	r8, r0
 8008272:	44b8      	add	r8, r7
 8008274:	44c4      	add	ip, r8
 8008276:	4461      	add	r1, ip
 8008278:	1989      	adds	r1, r1, r6
 800827a:	1949      	adds	r1, r1, r5
 800827c:	2068      	movs	r0, #104	; 0x68
 800827e:	2420      	movs	r4, #32
 8008280:	46a4      	mov	ip, r4
 8008282:	2408      	movs	r4, #8
 8008284:	46a0      	mov	r8, r4
 8008286:	2408      	movs	r4, #8
 8008288:	46a1      	mov	r9, r4
 800828a:	2408      	movs	r4, #8
 800828c:	46a2      	mov	sl, r4
 800828e:	44ba      	add	sl, r7
 8008290:	44d1      	add	r9, sl
 8008292:	44c8      	add	r8, r9
 8008294:	44c4      	add	ip, r8
 8008296:	4460      	add	r0, ip
 8008298:	f7fb ff86 	bl	80041a8 <CalcAngleDifference>



			// Simulate expected movements vs not expected movement
			if (!moving_expected)
 800829c:	4b0c      	ldr	r3, [pc, #48]	; (80082d0 <main+0x2848>)
 800829e:	2220      	movs	r2, #32
 80082a0:	4694      	mov	ip, r2
 80082a2:	2208      	movs	r2, #8
 80082a4:	4690      	mov	r8, r2
 80082a6:	2208      	movs	r2, #8
 80082a8:	4691      	mov	r9, r2
 80082aa:	2208      	movs	r2, #8
 80082ac:	4692      	mov	sl, r2
 80082ae:	e011      	b.n	80082d4 <main+0x284c>
 80082b0:	00000bfe 	.word	0x00000bfe
 80082b4:	fffff548 	.word	0xfffff548
 80082b8:	00000c08 	.word	0x00000c08
 80082bc:	ffffff00 	.word	0xffffff00
 80082c0:	fffffee8 	.word	0xfffffee8
 80082c4:	00000b08 	.word	0x00000b08
 80082c8:	fffff4a8 	.word	0xfffff4a8
 80082cc:	fffff4c8 	.word	0xfffff4c8
 80082d0:	00000beb 	.word	0x00000beb
 80082d4:	44ba      	add	sl, r7
 80082d6:	44d1      	add	r9, sl
 80082d8:	44c8      	add	r8, r9
 80082da:	44c4      	add	ip, r8
 80082dc:	4463      	add	r3, ip
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	b25b      	sxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d000      	beq.n	80082e8 <main+0x2860>
 80082e6:	e0e5      	b.n	80084b4 <main+0x2a2c>
			{
				sprintf(uart_buffer, "Movement Detected 0:Pan %.3f, 1:Pan %.3f, 0:Tilt %.3f, 1:Tilt %.3f, Diff Pan: %.3f, Diff Tilt: %.3f \r\n", diff_0.yaw, diff_1.yaw, diff_0.roll, diff_1.roll, (diff_0.yaw - diff_1.yaw), (diff_0.roll - diff_1.roll));
 80082e8:	4b6e      	ldr	r3, [pc, #440]	; (80084a4 <main+0x2a1c>)
 80082ea:	4a6f      	ldr	r2, [pc, #444]	; (80084a8 <main+0x2a20>)
 80082ec:	4694      	mov	ip, r2
 80082ee:	2220      	movs	r2, #32
 80082f0:	4690      	mov	r8, r2
 80082f2:	2208      	movs	r2, #8
 80082f4:	4691      	mov	r9, r2
 80082f6:	2208      	movs	r2, #8
 80082f8:	4692      	mov	sl, r2
 80082fa:	2208      	movs	r2, #8
 80082fc:	4693      	mov	fp, r2
 80082fe:	44bb      	add	fp, r7
 8008300:	44da      	add	sl, fp
 8008302:	44d1      	add	r9, sl
 8008304:	44c8      	add	r8, r9
 8008306:	44c4      	add	ip, r8
 8008308:	4463      	add	r3, ip
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	1c18      	adds	r0, r3, #0
 800830e:	f7fa fddf 	bl	8002ed0 <__aeabi_f2d>
 8008312:	6338      	str	r0, [r7, #48]	; 0x30
 8008314:	6379      	str	r1, [r7, #52]	; 0x34
 8008316:	4b65      	ldr	r3, [pc, #404]	; (80084ac <main+0x2a24>)
 8008318:	4963      	ldr	r1, [pc, #396]	; (80084a8 <main+0x2a20>)
 800831a:	468c      	mov	ip, r1
 800831c:	2220      	movs	r2, #32
 800831e:	4690      	mov	r8, r2
 8008320:	2208      	movs	r2, #8
 8008322:	4691      	mov	r9, r2
 8008324:	2208      	movs	r2, #8
 8008326:	4692      	mov	sl, r2
 8008328:	2208      	movs	r2, #8
 800832a:	4693      	mov	fp, r2
 800832c:	44bb      	add	fp, r7
 800832e:	44da      	add	sl, fp
 8008330:	44d1      	add	r9, sl
 8008332:	44c8      	add	r8, r9
 8008334:	44c4      	add	ip, r8
 8008336:	4463      	add	r3, ip
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	1c18      	adds	r0, r3, #0
 800833c:	f7fa fdc8 	bl	8002ed0 <__aeabi_f2d>
 8008340:	0004      	movs	r4, r0
 8008342:	000d      	movs	r5, r1
 8008344:	4b57      	ldr	r3, [pc, #348]	; (80084a4 <main+0x2a1c>)
 8008346:	4958      	ldr	r1, [pc, #352]	; (80084a8 <main+0x2a20>)
 8008348:	468c      	mov	ip, r1
 800834a:	2220      	movs	r2, #32
 800834c:	4690      	mov	r8, r2
 800834e:	2208      	movs	r2, #8
 8008350:	4691      	mov	r9, r2
 8008352:	2208      	movs	r2, #8
 8008354:	4692      	mov	sl, r2
 8008356:	2208      	movs	r2, #8
 8008358:	4693      	mov	fp, r2
 800835a:	44bb      	add	fp, r7
 800835c:	44da      	add	sl, fp
 800835e:	44d1      	add	r9, sl
 8008360:	44c8      	add	r8, r9
 8008362:	44c4      	add	ip, r8
 8008364:	4463      	add	r3, ip
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	1c18      	adds	r0, r3, #0
 800836a:	f7fa fdb1 	bl	8002ed0 <__aeabi_f2d>
 800836e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008370:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008372:	4b4e      	ldr	r3, [pc, #312]	; (80084ac <main+0x2a24>)
 8008374:	494c      	ldr	r1, [pc, #304]	; (80084a8 <main+0x2a20>)
 8008376:	468c      	mov	ip, r1
 8008378:	2220      	movs	r2, #32
 800837a:	4690      	mov	r8, r2
 800837c:	2208      	movs	r2, #8
 800837e:	4691      	mov	r9, r2
 8008380:	2208      	movs	r2, #8
 8008382:	4692      	mov	sl, r2
 8008384:	2208      	movs	r2, #8
 8008386:	4693      	mov	fp, r2
 8008388:	44bb      	add	fp, r7
 800838a:	44da      	add	sl, fp
 800838c:	44d1      	add	r9, sl
 800838e:	44c8      	add	r8, r9
 8008390:	44c4      	add	ip, r8
 8008392:	4463      	add	r3, ip
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	1c18      	adds	r0, r3, #0
 8008398:	f7fa fd9a 	bl	8002ed0 <__aeabi_f2d>
 800839c:	6238      	str	r0, [r7, #32]
 800839e:	6279      	str	r1, [r7, #36]	; 0x24
 80083a0:	4b40      	ldr	r3, [pc, #256]	; (80084a4 <main+0x2a1c>)
 80083a2:	4941      	ldr	r1, [pc, #260]	; (80084a8 <main+0x2a20>)
 80083a4:	468c      	mov	ip, r1
 80083a6:	2220      	movs	r2, #32
 80083a8:	4690      	mov	r8, r2
 80083aa:	2208      	movs	r2, #8
 80083ac:	4691      	mov	r9, r2
 80083ae:	2208      	movs	r2, #8
 80083b0:	4692      	mov	sl, r2
 80083b2:	2208      	movs	r2, #8
 80083b4:	4693      	mov	fp, r2
 80083b6:	44bb      	add	fp, r7
 80083b8:	44da      	add	sl, fp
 80083ba:	44d1      	add	r9, sl
 80083bc:	44c8      	add	r8, r9
 80083be:	44c4      	add	ip, r8
 80083c0:	4463      	add	r3, ip
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	4b39      	ldr	r3, [pc, #228]	; (80084ac <main+0x2a24>)
 80083c6:	4938      	ldr	r1, [pc, #224]	; (80084a8 <main+0x2a20>)
 80083c8:	468c      	mov	ip, r1
 80083ca:	2120      	movs	r1, #32
 80083cc:	4688      	mov	r8, r1
 80083ce:	2108      	movs	r1, #8
 80083d0:	4689      	mov	r9, r1
 80083d2:	2108      	movs	r1, #8
 80083d4:	468a      	mov	sl, r1
 80083d6:	2108      	movs	r1, #8
 80083d8:	468b      	mov	fp, r1
 80083da:	44bb      	add	fp, r7
 80083dc:	44da      	add	sl, fp
 80083de:	44d1      	add	r9, sl
 80083e0:	44c8      	add	r8, r9
 80083e2:	44c4      	add	ip, r8
 80083e4:	4463      	add	r3, ip
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	1c19      	adds	r1, r3, #0
 80083ea:	1c10      	adds	r0, r2, #0
 80083ec:	f7f8 fd2a 	bl	8000e44 <__aeabi_fsub>
 80083f0:	1c03      	adds	r3, r0, #0
 80083f2:	1c18      	adds	r0, r3, #0
 80083f4:	f7fa fd6c 	bl	8002ed0 <__aeabi_f2d>
 80083f8:	61b8      	str	r0, [r7, #24]
 80083fa:	61f9      	str	r1, [r7, #28]
 80083fc:	4b29      	ldr	r3, [pc, #164]	; (80084a4 <main+0x2a1c>)
 80083fe:	492a      	ldr	r1, [pc, #168]	; (80084a8 <main+0x2a20>)
 8008400:	468c      	mov	ip, r1
 8008402:	2220      	movs	r2, #32
 8008404:	4690      	mov	r8, r2
 8008406:	2208      	movs	r2, #8
 8008408:	4691      	mov	r9, r2
 800840a:	2208      	movs	r2, #8
 800840c:	4692      	mov	sl, r2
 800840e:	2208      	movs	r2, #8
 8008410:	4693      	mov	fp, r2
 8008412:	44bb      	add	fp, r7
 8008414:	44da      	add	sl, fp
 8008416:	44d1      	add	r9, sl
 8008418:	44c8      	add	r8, r9
 800841a:	44c4      	add	ip, r8
 800841c:	4463      	add	r3, ip
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4b22      	ldr	r3, [pc, #136]	; (80084ac <main+0x2a24>)
 8008422:	4921      	ldr	r1, [pc, #132]	; (80084a8 <main+0x2a20>)
 8008424:	468c      	mov	ip, r1
 8008426:	2120      	movs	r1, #32
 8008428:	4688      	mov	r8, r1
 800842a:	2108      	movs	r1, #8
 800842c:	4689      	mov	r9, r1
 800842e:	2108      	movs	r1, #8
 8008430:	468a      	mov	sl, r1
 8008432:	2108      	movs	r1, #8
 8008434:	468b      	mov	fp, r1
 8008436:	44bb      	add	fp, r7
 8008438:	44da      	add	sl, fp
 800843a:	44d1      	add	r9, sl
 800843c:	44c8      	add	r8, r9
 800843e:	44c4      	add	ip, r8
 8008440:	4463      	add	r3, ip
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	1c19      	adds	r1, r3, #0
 8008446:	1c10      	adds	r0, r2, #0
 8008448:	f7f8 fcfc 	bl	8000e44 <__aeabi_fsub>
 800844c:	1c03      	adds	r3, r0, #0
 800844e:	1c18      	adds	r0, r3, #0
 8008450:	f7fa fd3e 	bl	8002ed0 <__aeabi_f2d>
 8008454:	60b8      	str	r0, [r7, #8]
 8008456:	60f9      	str	r1, [r7, #12]
 8008458:	4915      	ldr	r1, [pc, #84]	; (80084b0 <main+0x2a28>)
 800845a:	26b2      	movs	r6, #178	; 0xb2
 800845c:	0136      	lsls	r6, r6, #4
 800845e:	2020      	movs	r0, #32
 8008460:	2308      	movs	r3, #8
 8008462:	469c      	mov	ip, r3
 8008464:	2308      	movs	r3, #8
 8008466:	4698      	mov	r8, r3
 8008468:	2308      	movs	r3, #8
 800846a:	4699      	mov	r9, r3
 800846c:	44b9      	add	r9, r7
 800846e:	44c8      	add	r8, r9
 8008470:	44c4      	add	ip, r8
 8008472:	4460      	add	r0, ip
 8008474:	1980      	adds	r0, r0, r6
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	9208      	str	r2, [sp, #32]
 800847c:	9309      	str	r3, [sp, #36]	; 0x24
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	9206      	str	r2, [sp, #24]
 8008484:	9307      	str	r3, [sp, #28]
 8008486:	6a3a      	ldr	r2, [r7, #32]
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	9204      	str	r2, [sp, #16]
 800848c:	9305      	str	r3, [sp, #20]
 800848e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008492:	9202      	str	r2, [sp, #8]
 8008494:	9303      	str	r3, [sp, #12]
 8008496:	9400      	str	r4, [sp, #0]
 8008498:	9501      	str	r5, [sp, #4]
 800849a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800849c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849e:	f004 fd9b 	bl	800cfd8 <siprintf>
 80084a2:	e04b      	b.n	800853c <main+0x2ab4>
 80084a4:	fffff46c 	.word	0xfffff46c
 80084a8:	00000c08 	.word	0x00000c08
 80084ac:	fffff460 	.word	0xfffff460
 80084b0:	08011f48 	.word	0x08011f48
			} else {
				sprintf(uart_buffer, "TAMPERING DETECTED -> Pan %.4f  Tilt %.4f \r\n", diff_0.yaw, diff_0.roll);
 80084b4:	4b9e      	ldr	r3, [pc, #632]	; (8008730 <main+0x2ca8>)
 80084b6:	4a9f      	ldr	r2, [pc, #636]	; (8008734 <main+0x2cac>)
 80084b8:	4694      	mov	ip, r2
 80084ba:	2220      	movs	r2, #32
 80084bc:	4690      	mov	r8, r2
 80084be:	2208      	movs	r2, #8
 80084c0:	4691      	mov	r9, r2
 80084c2:	2208      	movs	r2, #8
 80084c4:	4692      	mov	sl, r2
 80084c6:	2208      	movs	r2, #8
 80084c8:	4693      	mov	fp, r2
 80084ca:	44bb      	add	fp, r7
 80084cc:	44da      	add	sl, fp
 80084ce:	44d1      	add	r9, sl
 80084d0:	44c8      	add	r8, r9
 80084d2:	44c4      	add	ip, r8
 80084d4:	4463      	add	r3, ip
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	1c18      	adds	r0, r3, #0
 80084da:	f7fa fcf9 	bl	8002ed0 <__aeabi_f2d>
 80084de:	0004      	movs	r4, r0
 80084e0:	000d      	movs	r5, r1
 80084e2:	4b93      	ldr	r3, [pc, #588]	; (8008730 <main+0x2ca8>)
 80084e4:	4a93      	ldr	r2, [pc, #588]	; (8008734 <main+0x2cac>)
 80084e6:	4694      	mov	ip, r2
 80084e8:	2220      	movs	r2, #32
 80084ea:	4690      	mov	r8, r2
 80084ec:	2208      	movs	r2, #8
 80084ee:	4691      	mov	r9, r2
 80084f0:	2208      	movs	r2, #8
 80084f2:	4692      	mov	sl, r2
 80084f4:	2208      	movs	r2, #8
 80084f6:	4693      	mov	fp, r2
 80084f8:	44bb      	add	fp, r7
 80084fa:	44da      	add	sl, fp
 80084fc:	44d1      	add	r9, sl
 80084fe:	44c8      	add	r8, r9
 8008500:	44c4      	add	ip, r8
 8008502:	4463      	add	r3, ip
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	1c18      	adds	r0, r3, #0
 8008508:	f7fa fce2 	bl	8002ed0 <__aeabi_f2d>
 800850c:	0002      	movs	r2, r0
 800850e:	000b      	movs	r3, r1
 8008510:	4989      	ldr	r1, [pc, #548]	; (8008738 <main+0x2cb0>)
 8008512:	20b2      	movs	r0, #178	; 0xb2
 8008514:	0100      	lsls	r0, r0, #4
 8008516:	2620      	movs	r6, #32
 8008518:	46b4      	mov	ip, r6
 800851a:	2608      	movs	r6, #8
 800851c:	46b0      	mov	r8, r6
 800851e:	2608      	movs	r6, #8
 8008520:	46b1      	mov	r9, r6
 8008522:	2608      	movs	r6, #8
 8008524:	46b2      	mov	sl, r6
 8008526:	44ba      	add	sl, r7
 8008528:	44d1      	add	r9, sl
 800852a:	44c8      	add	r8, r9
 800852c:	44c4      	add	ip, r8
 800852e:	4460      	add	r0, ip
 8008530:	9200      	str	r2, [sp, #0]
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	0022      	movs	r2, r4
 8008536:	002b      	movs	r3, r5
 8008538:	f004 fd4e 	bl	800cfd8 <siprintf>
			}

			HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 800853c:	24b2      	movs	r4, #178	; 0xb2
 800853e:	0124      	lsls	r4, r4, #4
 8008540:	2520      	movs	r5, #32
 8008542:	2308      	movs	r3, #8
 8008544:	2208      	movs	r2, #8
 8008546:	4694      	mov	ip, r2
 8008548:	2208      	movs	r2, #8
 800854a:	4690      	mov	r8, r2
 800854c:	44b8      	add	r8, r7
 800854e:	44c4      	add	ip, r8
 8008550:	4463      	add	r3, ip
 8008552:	195b      	adds	r3, r3, r5
 8008554:	191b      	adds	r3, r3, r4
 8008556:	0018      	movs	r0, r3
 8008558:	f7f7 fdd2 	bl	8000100 <strlen>
 800855c:	0003      	movs	r3, r0
 800855e:	b29a      	uxth	r2, r3
 8008560:	23fa      	movs	r3, #250	; 0xfa
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	2108      	movs	r1, #8
 8008566:	2008      	movs	r0, #8
 8008568:	4684      	mov	ip, r0
 800856a:	2008      	movs	r0, #8
 800856c:	4680      	mov	r8, r0
 800856e:	44b8      	add	r8, r7
 8008570:	44c4      	add	ip, r8
 8008572:	4461      	add	r1, ip
 8008574:	1949      	adds	r1, r1, r5
 8008576:	1909      	adds	r1, r1, r4
 8008578:	4870      	ldr	r0, [pc, #448]	; (800873c <main+0x2cb4>)
 800857a:	f003 fb45 	bl	800bc08 <HAL_UART_Transmit>

			// Update IMU 0 state
			prev_0.roll = angles_0.roll;
 800857e:	4b70      	ldr	r3, [pc, #448]	; (8008740 <main+0x2cb8>)
 8008580:	4a6c      	ldr	r2, [pc, #432]	; (8008734 <main+0x2cac>)
 8008582:	4694      	mov	ip, r2
 8008584:	2220      	movs	r2, #32
 8008586:	4690      	mov	r8, r2
 8008588:	2208      	movs	r2, #8
 800858a:	4691      	mov	r9, r2
 800858c:	2208      	movs	r2, #8
 800858e:	4692      	mov	sl, r2
 8008590:	2208      	movs	r2, #8
 8008592:	4693      	mov	fp, r2
 8008594:	44bb      	add	fp, r7
 8008596:	44da      	add	sl, fp
 8008598:	44d1      	add	r9, sl
 800859a:	44c8      	add	r8, r9
 800859c:	44c4      	add	ip, r8
 800859e:	4463      	add	r3, ip
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b68      	ldr	r3, [pc, #416]	; (8008744 <main+0x2cbc>)
 80085a4:	4963      	ldr	r1, [pc, #396]	; (8008734 <main+0x2cac>)
 80085a6:	468c      	mov	ip, r1
 80085a8:	2120      	movs	r1, #32
 80085aa:	4688      	mov	r8, r1
 80085ac:	2108      	movs	r1, #8
 80085ae:	4689      	mov	r9, r1
 80085b0:	2108      	movs	r1, #8
 80085b2:	468a      	mov	sl, r1
 80085b4:	2108      	movs	r1, #8
 80085b6:	468b      	mov	fp, r1
 80085b8:	44bb      	add	fp, r7
 80085ba:	44da      	add	sl, fp
 80085bc:	44d1      	add	r9, sl
 80085be:	44c8      	add	r8, r9
 80085c0:	44c4      	add	ip, r8
 80085c2:	4463      	add	r3, ip
 80085c4:	601a      	str	r2, [r3, #0]
			prev_0.yaw = angles_0.yaw;
 80085c6:	4b5e      	ldr	r3, [pc, #376]	; (8008740 <main+0x2cb8>)
 80085c8:	4a5a      	ldr	r2, [pc, #360]	; (8008734 <main+0x2cac>)
 80085ca:	4694      	mov	ip, r2
 80085cc:	2220      	movs	r2, #32
 80085ce:	4690      	mov	r8, r2
 80085d0:	2208      	movs	r2, #8
 80085d2:	4691      	mov	r9, r2
 80085d4:	2208      	movs	r2, #8
 80085d6:	4692      	mov	sl, r2
 80085d8:	2208      	movs	r2, #8
 80085da:	4693      	mov	fp, r2
 80085dc:	44bb      	add	fp, r7
 80085de:	44da      	add	sl, fp
 80085e0:	44d1      	add	r9, sl
 80085e2:	44c8      	add	r8, r9
 80085e4:	44c4      	add	ip, r8
 80085e6:	4463      	add	r3, ip
 80085e8:	689a      	ldr	r2, [r3, #8]
 80085ea:	4b56      	ldr	r3, [pc, #344]	; (8008744 <main+0x2cbc>)
 80085ec:	4951      	ldr	r1, [pc, #324]	; (8008734 <main+0x2cac>)
 80085ee:	468c      	mov	ip, r1
 80085f0:	2120      	movs	r1, #32
 80085f2:	4688      	mov	r8, r1
 80085f4:	2108      	movs	r1, #8
 80085f6:	4689      	mov	r9, r1
 80085f8:	2108      	movs	r1, #8
 80085fa:	468a      	mov	sl, r1
 80085fc:	2108      	movs	r1, #8
 80085fe:	468b      	mov	fp, r1
 8008600:	44bb      	add	fp, r7
 8008602:	44da      	add	sl, fp
 8008604:	44d1      	add	r9, sl
 8008606:	44c8      	add	r8, r9
 8008608:	44c4      	add	ip, r8
 800860a:	4463      	add	r3, ip
 800860c:	609a      	str	r2, [r3, #8]
			quat_buffer_0 = quat_0;
 800860e:	4b4e      	ldr	r3, [pc, #312]	; (8008748 <main+0x2cc0>)
 8008610:	4c48      	ldr	r4, [pc, #288]	; (8008734 <main+0x2cac>)
 8008612:	2208      	movs	r2, #8
 8008614:	2108      	movs	r1, #8
 8008616:	468c      	mov	ip, r1
 8008618:	2108      	movs	r1, #8
 800861a:	4688      	mov	r8, r1
 800861c:	44b8      	add	r8, r7
 800861e:	44c4      	add	ip, r8
 8008620:	4462      	add	r2, ip
 8008622:	1952      	adds	r2, r2, r5
 8008624:	1912      	adds	r2, r2, r4
 8008626:	18d2      	adds	r2, r2, r3
 8008628:	4b48      	ldr	r3, [pc, #288]	; (800874c <main+0x2cc4>)
 800862a:	4942      	ldr	r1, [pc, #264]	; (8008734 <main+0x2cac>)
 800862c:	468c      	mov	ip, r1
 800862e:	2120      	movs	r1, #32
 8008630:	4688      	mov	r8, r1
 8008632:	2108      	movs	r1, #8
 8008634:	4689      	mov	r9, r1
 8008636:	2108      	movs	r1, #8
 8008638:	468a      	mov	sl, r1
 800863a:	2108      	movs	r1, #8
 800863c:	468b      	mov	fp, r1
 800863e:	44bb      	add	fp, r7
 8008640:	44da      	add	sl, fp
 8008642:	44d1      	add	r9, sl
 8008644:	44c8      	add	r8, r9
 8008646:	44c4      	add	ip, r8
 8008648:	4463      	add	r3, ip
 800864a:	0010      	movs	r0, r2
 800864c:	0019      	movs	r1, r3
 800864e:	2310      	movs	r3, #16
 8008650:	001a      	movs	r2, r3
 8008652:	f004 f835 	bl	800c6c0 <memcpy>

			// Update IMU 1 state
			prev_1.roll = angles_1.roll;
 8008656:	4b3e      	ldr	r3, [pc, #248]	; (8008750 <main+0x2cc8>)
 8008658:	4a36      	ldr	r2, [pc, #216]	; (8008734 <main+0x2cac>)
 800865a:	4694      	mov	ip, r2
 800865c:	2220      	movs	r2, #32
 800865e:	4690      	mov	r8, r2
 8008660:	2208      	movs	r2, #8
 8008662:	4691      	mov	r9, r2
 8008664:	2208      	movs	r2, #8
 8008666:	4692      	mov	sl, r2
 8008668:	2208      	movs	r2, #8
 800866a:	4693      	mov	fp, r2
 800866c:	44bb      	add	fp, r7
 800866e:	44da      	add	sl, fp
 8008670:	44d1      	add	r9, sl
 8008672:	44c8      	add	r8, r9
 8008674:	44c4      	add	ip, r8
 8008676:	4463      	add	r3, ip
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	4b36      	ldr	r3, [pc, #216]	; (8008754 <main+0x2ccc>)
 800867c:	492d      	ldr	r1, [pc, #180]	; (8008734 <main+0x2cac>)
 800867e:	468c      	mov	ip, r1
 8008680:	2120      	movs	r1, #32
 8008682:	4688      	mov	r8, r1
 8008684:	2108      	movs	r1, #8
 8008686:	4689      	mov	r9, r1
 8008688:	2108      	movs	r1, #8
 800868a:	468a      	mov	sl, r1
 800868c:	2108      	movs	r1, #8
 800868e:	468b      	mov	fp, r1
 8008690:	44bb      	add	fp, r7
 8008692:	44da      	add	sl, fp
 8008694:	44d1      	add	r9, sl
 8008696:	44c8      	add	r8, r9
 8008698:	44c4      	add	ip, r8
 800869a:	4463      	add	r3, ip
 800869c:	601a      	str	r2, [r3, #0]
			prev_1.yaw = angles_1.yaw;
 800869e:	4b2c      	ldr	r3, [pc, #176]	; (8008750 <main+0x2cc8>)
 80086a0:	4a24      	ldr	r2, [pc, #144]	; (8008734 <main+0x2cac>)
 80086a2:	4694      	mov	ip, r2
 80086a4:	2220      	movs	r2, #32
 80086a6:	4690      	mov	r8, r2
 80086a8:	2208      	movs	r2, #8
 80086aa:	4691      	mov	r9, r2
 80086ac:	2208      	movs	r2, #8
 80086ae:	4692      	mov	sl, r2
 80086b0:	2208      	movs	r2, #8
 80086b2:	4693      	mov	fp, r2
 80086b4:	44bb      	add	fp, r7
 80086b6:	44da      	add	sl, fp
 80086b8:	44d1      	add	r9, sl
 80086ba:	44c8      	add	r8, r9
 80086bc:	44c4      	add	ip, r8
 80086be:	4463      	add	r3, ip
 80086c0:	689a      	ldr	r2, [r3, #8]
 80086c2:	4b24      	ldr	r3, [pc, #144]	; (8008754 <main+0x2ccc>)
 80086c4:	491b      	ldr	r1, [pc, #108]	; (8008734 <main+0x2cac>)
 80086c6:	468c      	mov	ip, r1
 80086c8:	2120      	movs	r1, #32
 80086ca:	4688      	mov	r8, r1
 80086cc:	2108      	movs	r1, #8
 80086ce:	4689      	mov	r9, r1
 80086d0:	2108      	movs	r1, #8
 80086d2:	468a      	mov	sl, r1
 80086d4:	2108      	movs	r1, #8
 80086d6:	468b      	mov	fp, r1
 80086d8:	44bb      	add	fp, r7
 80086da:	44da      	add	sl, fp
 80086dc:	44d1      	add	r9, sl
 80086de:	44c8      	add	r8, r9
 80086e0:	44c4      	add	ip, r8
 80086e2:	4463      	add	r3, ip
 80086e4:	609a      	str	r2, [r3, #8]
			quat_buffer_1 = quat_1;
 80086e6:	4b1c      	ldr	r3, [pc, #112]	; (8008758 <main+0x2cd0>)
 80086e8:	2208      	movs	r2, #8
 80086ea:	2108      	movs	r1, #8
 80086ec:	468c      	mov	ip, r1
 80086ee:	2108      	movs	r1, #8
 80086f0:	4688      	mov	r8, r1
 80086f2:	44b8      	add	r8, r7
 80086f4:	44c4      	add	ip, r8
 80086f6:	4462      	add	r2, ip
 80086f8:	1952      	adds	r2, r2, r5
 80086fa:	1912      	adds	r2, r2, r4
 80086fc:	18d2      	adds	r2, r2, r3
 80086fe:	4b17      	ldr	r3, [pc, #92]	; (800875c <main+0x2cd4>)
 8008700:	490c      	ldr	r1, [pc, #48]	; (8008734 <main+0x2cac>)
 8008702:	468c      	mov	ip, r1
 8008704:	2120      	movs	r1, #32
 8008706:	4688      	mov	r8, r1
 8008708:	2108      	movs	r1, #8
 800870a:	4689      	mov	r9, r1
 800870c:	2108      	movs	r1, #8
 800870e:	468a      	mov	sl, r1
 8008710:	2108      	movs	r1, #8
 8008712:	468b      	mov	fp, r1
 8008714:	44bb      	add	fp, r7
 8008716:	44da      	add	sl, fp
 8008718:	44d1      	add	r9, sl
 800871a:	44c8      	add	r8, r9
 800871c:	44c4      	add	ip, r8
 800871e:	4463      	add	r3, ip
 8008720:	0010      	movs	r0, r2
 8008722:	0019      	movs	r1, r3
 8008724:	2310      	movs	r3, #16
 8008726:	001a      	movs	r2, r3
 8008728:	f003 ffca 	bl	800c6c0 <memcpy>
 800872c:	e081      	b.n	8008832 <main+0x2daa>
 800872e:	46c0      	nop			; (mov r8, r8)
 8008730:	fffff46c 	.word	0xfffff46c
 8008734:	00000c08 	.word	0x00000c08
 8008738:	08011fb0 	.word	0x08011fb0
 800873c:	20000500 	.word	0x20000500
 8008740:	fffff49c 	.word	0xfffff49c
 8008744:	fffff454 	.word	0xfffff454
 8008748:	fffff4b8 	.word	0xfffff4b8
 800874c:	fffff4d8 	.word	0xfffff4d8
 8008750:	fffff490 	.word	0xfffff490
 8008754:	fffff448 	.word	0xfffff448
 8008758:	fffff4a8 	.word	0xfffff4a8
 800875c:	fffff4c8 	.word	0xfffff4c8
		}

		else if (uart_prescaler == 0)
 8008760:	4b78      	ldr	r3, [pc, #480]	; (8008944 <main+0x2ebc>)
 8008762:	2220      	movs	r2, #32
 8008764:	4694      	mov	ip, r2
 8008766:	2208      	movs	r2, #8
 8008768:	4690      	mov	r8, r2
 800876a:	2208      	movs	r2, #8
 800876c:	4691      	mov	r9, r2
 800876e:	2208      	movs	r2, #8
 8008770:	4692      	mov	sl, r2
 8008772:	44ba      	add	sl, r7
 8008774:	44d1      	add	r9, sl
 8008776:	44c8      	add	r8, r9
 8008778:	44c4      	add	ip, r8
 800877a:	4463      	add	r3, ip
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d157      	bne.n	8008832 <main+0x2daa>
		{
			sprintf(uart_buffer, "NO TAMPERING DETECTED -> MOVE EXPECTED: %i -> LOOP DURATION: %.3f \r\n", moving_expected, duration);
 8008782:	4b71      	ldr	r3, [pc, #452]	; (8008948 <main+0x2ec0>)
 8008784:	2220      	movs	r2, #32
 8008786:	4694      	mov	ip, r2
 8008788:	2208      	movs	r2, #8
 800878a:	4690      	mov	r8, r2
 800878c:	2208      	movs	r2, #8
 800878e:	4691      	mov	r9, r2
 8008790:	2208      	movs	r2, #8
 8008792:	4692      	mov	sl, r2
 8008794:	44ba      	add	sl, r7
 8008796:	44d1      	add	r9, sl
 8008798:	44c8      	add	r8, r9
 800879a:	44c4      	add	ip, r8
 800879c:	4463      	add	r3, ip
 800879e:	2400      	movs	r4, #0
 80087a0:	571c      	ldrsb	r4, [r3, r4]
 80087a2:	4b6a      	ldr	r3, [pc, #424]	; (800894c <main+0x2ec4>)
 80087a4:	2220      	movs	r2, #32
 80087a6:	4694      	mov	ip, r2
 80087a8:	2208      	movs	r2, #8
 80087aa:	4690      	mov	r8, r2
 80087ac:	2208      	movs	r2, #8
 80087ae:	4691      	mov	r9, r2
 80087b0:	2208      	movs	r2, #8
 80087b2:	4692      	mov	sl, r2
 80087b4:	44ba      	add	sl, r7
 80087b6:	44d1      	add	r9, sl
 80087b8:	44c8      	add	r8, r9
 80087ba:	44c4      	add	ip, r8
 80087bc:	4463      	add	r3, ip
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	f7fa fb86 	bl	8002ed0 <__aeabi_f2d>
 80087c4:	6038      	str	r0, [r7, #0]
 80087c6:	6079      	str	r1, [r7, #4]
 80087c8:	4961      	ldr	r1, [pc, #388]	; (8008950 <main+0x2ec8>)
 80087ca:	25b2      	movs	r5, #178	; 0xb2
 80087cc:	012d      	lsls	r5, r5, #4
 80087ce:	2620      	movs	r6, #32
 80087d0:	2008      	movs	r0, #8
 80087d2:	2308      	movs	r3, #8
 80087d4:	469c      	mov	ip, r3
 80087d6:	2308      	movs	r3, #8
 80087d8:	4698      	mov	r8, r3
 80087da:	44b8      	add	r8, r7
 80087dc:	44c4      	add	ip, r8
 80087de:	4460      	add	r0, ip
 80087e0:	1980      	adds	r0, r0, r6
 80087e2:	1940      	adds	r0, r0, r5
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	9200      	str	r2, [sp, #0]
 80087ea:	9301      	str	r3, [sp, #4]
 80087ec:	0022      	movs	r2, r4
 80087ee:	f004 fbf3 	bl	800cfd8 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 80087f2:	002c      	movs	r4, r5
 80087f4:	0035      	movs	r5, r6
 80087f6:	2308      	movs	r3, #8
 80087f8:	2208      	movs	r2, #8
 80087fa:	4694      	mov	ip, r2
 80087fc:	2208      	movs	r2, #8
 80087fe:	4690      	mov	r8, r2
 8008800:	44b8      	add	r8, r7
 8008802:	44c4      	add	ip, r8
 8008804:	4463      	add	r3, ip
 8008806:	195b      	adds	r3, r3, r5
 8008808:	191b      	adds	r3, r3, r4
 800880a:	0018      	movs	r0, r3
 800880c:	f7f7 fc78 	bl	8000100 <strlen>
 8008810:	0003      	movs	r3, r0
 8008812:	b29a      	uxth	r2, r3
 8008814:	23fa      	movs	r3, #250	; 0xfa
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	2108      	movs	r1, #8
 800881a:	2008      	movs	r0, #8
 800881c:	4684      	mov	ip, r0
 800881e:	2008      	movs	r0, #8
 8008820:	4680      	mov	r8, r0
 8008822:	44b8      	add	r8, r7
 8008824:	44c4      	add	ip, r8
 8008826:	4461      	add	r1, ip
 8008828:	1949      	adds	r1, r1, r5
 800882a:	1909      	adds	r1, r1, r4
 800882c:	4849      	ldr	r0, [pc, #292]	; (8008954 <main+0x2ecc>)
 800882e:	f003 f9eb 	bl	800bc08 <HAL_UART_Transmit>
		}
		was_moving = 0;
 8008832:	4b49      	ldr	r3, [pc, #292]	; (8008958 <main+0x2ed0>)
 8008834:	2220      	movs	r2, #32
 8008836:	4694      	mov	ip, r2
 8008838:	2208      	movs	r2, #8
 800883a:	4690      	mov	r8, r2
 800883c:	2208      	movs	r2, #8
 800883e:	4691      	mov	r9, r2
 8008840:	2208      	movs	r2, #8
 8008842:	4692      	mov	sl, r2
 8008844:	44ba      	add	sl, r7
 8008846:	44d1      	add	r9, sl
 8008848:	44c8      	add	r8, r9
 800884a:	44c4      	add	ip, r8
 800884c:	4463      	add	r3, ip
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
	}
	duration = (__HAL_TIM_GET_COUNTER(&htim16))*1000.0/clock;
 8008852:	4b42      	ldr	r3, [pc, #264]	; (800895c <main+0x2ed4>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	0018      	movs	r0, r3
 800885a:	f7fa fb13 	bl	8002e84 <__aeabi_ui2d>
 800885e:	2200      	movs	r2, #0
 8008860:	4b3f      	ldr	r3, [pc, #252]	; (8008960 <main+0x2ed8>)
 8008862:	f7f9 fc8d 	bl	8002180 <__aeabi_dmul>
 8008866:	0002      	movs	r2, r0
 8008868:	000b      	movs	r3, r1
 800886a:	0014      	movs	r4, r2
 800886c:	001d      	movs	r5, r3
 800886e:	4b3d      	ldr	r3, [pc, #244]	; (8008964 <main+0x2edc>)
 8008870:	2220      	movs	r2, #32
 8008872:	4694      	mov	ip, r2
 8008874:	2208      	movs	r2, #8
 8008876:	4690      	mov	r8, r2
 8008878:	2208      	movs	r2, #8
 800887a:	4691      	mov	r9, r2
 800887c:	2208      	movs	r2, #8
 800887e:	4692      	mov	sl, r2
 8008880:	44ba      	add	sl, r7
 8008882:	44d1      	add	r9, sl
 8008884:	44c8      	add	r8, r9
 8008886:	44c4      	add	ip, r8
 8008888:	4463      	add	r3, ip
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	f7fa fb20 	bl	8002ed0 <__aeabi_f2d>
 8008890:	0002      	movs	r2, r0
 8008892:	000b      	movs	r3, r1
 8008894:	0020      	movs	r0, r4
 8008896:	0029      	movs	r1, r5
 8008898:	f7f9 f86c 	bl	8001974 <__aeabi_ddiv>
 800889c:	0002      	movs	r2, r0
 800889e:	000b      	movs	r3, r1
 80088a0:	0010      	movs	r0, r2
 80088a2:	0019      	movs	r1, r3
 80088a4:	f7fa fb5c 	bl	8002f60 <__aeabi_d2f>
 80088a8:	1c03      	adds	r3, r0, #0
 80088aa:	4a28      	ldr	r2, [pc, #160]	; (800894c <main+0x2ec4>)
 80088ac:	2520      	movs	r5, #32
 80088ae:	2108      	movs	r1, #8
 80088b0:	2008      	movs	r0, #8
 80088b2:	4684      	mov	ip, r0
 80088b4:	2008      	movs	r0, #8
 80088b6:	4680      	mov	r8, r0
 80088b8:	44b8      	add	r8, r7
 80088ba:	44c4      	add	ip, r8
 80088bc:	4461      	add	r1, ip
 80088be:	1949      	adds	r1, r1, r5
 80088c0:	1889      	adds	r1, r1, r2
 80088c2:	600b      	str	r3, [r1, #0]
	duration_diff = SAMPLE_TIME_ICM - duration;
 80088c4:	2308      	movs	r3, #8
 80088c6:	2108      	movs	r1, #8
 80088c8:	468c      	mov	ip, r1
 80088ca:	2108      	movs	r1, #8
 80088cc:	4688      	mov	r8, r1
 80088ce:	44b8      	add	r8, r7
 80088d0:	44c4      	add	ip, r8
 80088d2:	4463      	add	r3, ip
 80088d4:	195b      	adds	r3, r3, r5
 80088d6:	189b      	adds	r3, r3, r2
 80088d8:	6819      	ldr	r1, [r3, #0]
 80088da:	4823      	ldr	r0, [pc, #140]	; (8008968 <main+0x2ee0>)
 80088dc:	f7f8 fab2 	bl	8000e44 <__aeabi_fsub>
 80088e0:	1c03      	adds	r3, r0, #0
 80088e2:	24bf      	movs	r4, #191	; 0xbf
 80088e4:	0124      	lsls	r4, r4, #4
 80088e6:	2208      	movs	r2, #8
 80088e8:	2108      	movs	r1, #8
 80088ea:	468c      	mov	ip, r1
 80088ec:	2108      	movs	r1, #8
 80088ee:	4688      	mov	r8, r1
 80088f0:	44b8      	add	r8, r7
 80088f2:	44c4      	add	ip, r8
 80088f4:	4462      	add	r2, ip
 80088f6:	1952      	adds	r2, r2, r5
 80088f8:	1912      	adds	r2, r2, r4
 80088fa:	6013      	str	r3, [r2, #0]

	if(duration_diff > 0)
 80088fc:	2100      	movs	r1, #0
 80088fe:	2308      	movs	r3, #8
 8008900:	2208      	movs	r2, #8
 8008902:	4694      	mov	ip, r2
 8008904:	2208      	movs	r2, #8
 8008906:	4690      	mov	r8, r2
 8008908:	44b8      	add	r8, r7
 800890a:	44c4      	add	ip, r8
 800890c:	4463      	add	r3, ip
 800890e:	195b      	adds	r3, r3, r5
 8008910:	191b      	adds	r3, r3, r4
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	f7f7 fdea 	bl	80004ec <__aeabi_fcmpgt>
 8008918:	1e03      	subs	r3, r0, #0
 800891a:	d010      	beq.n	800893e <main+0x2eb6>
	{
	  HAL_Delay(duration_diff);
 800891c:	2308      	movs	r3, #8
 800891e:	2208      	movs	r2, #8
 8008920:	4694      	mov	ip, r2
 8008922:	2208      	movs	r2, #8
 8008924:	4690      	mov	r8, r2
 8008926:	44b8      	add	r8, r7
 8008928:	44c4      	add	ip, r8
 800892a:	4463      	add	r3, ip
 800892c:	195b      	adds	r3, r3, r5
 800892e:	191b      	adds	r3, r3, r4
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	f7f7 fdef 	bl	8000514 <__aeabi_f2uiz>
 8008936:	0003      	movs	r3, r0
 8008938:	0018      	movs	r0, r3
 800893a:	f000 fdc3 	bl	80094c4 <HAL_Delay>
	__HAL_TIM_SET_COUNTER(&htim16,0);
 800893e:	f7fe f978 	bl	8006c32 <main+0x11aa>
 8008942:	46c0      	nop			; (mov r8, r8)
 8008944:	00000c02 	.word	0x00000c02
 8008948:	00000beb 	.word	0x00000beb
 800894c:	00000c04 	.word	0x00000c04
 8008950:	08011fe0 	.word	0x08011fe0
 8008954:	20000500 	.word	0x20000500
 8008958:	00000c03 	.word	0x00000c03
 800895c:	20000590 	.word	0x20000590
 8008960:	408f4000 	.word	0x408f4000
 8008964:	00000bec 	.word	0x00000bec
 8008968:	41f00000 	.word	0x41f00000

0800896c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b093      	sub	sp, #76	; 0x4c
 8008970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008972:	2414      	movs	r4, #20
 8008974:	193b      	adds	r3, r7, r4
 8008976:	0018      	movs	r0, r3
 8008978:	2334      	movs	r3, #52	; 0x34
 800897a:	001a      	movs	r2, r3
 800897c:	2100      	movs	r1, #0
 800897e:	f003 fea8 	bl	800c6d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008982:	1d3b      	adds	r3, r7, #4
 8008984:	0018      	movs	r0, r3
 8008986:	2310      	movs	r3, #16
 8008988:	001a      	movs	r2, r3
 800898a:	2100      	movs	r1, #0
 800898c:	f003 fea1 	bl	800c6d2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008990:	2380      	movs	r3, #128	; 0x80
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	0018      	movs	r0, r3
 8008996:	f001 f933 	bl	8009c00 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800899a:	193b      	adds	r3, r7, r4
 800899c:	220a      	movs	r2, #10
 800899e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80089a0:	193b      	adds	r3, r7, r4
 80089a2:	2280      	movs	r2, #128	; 0x80
 80089a4:	0052      	lsls	r2, r2, #1
 80089a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80089a8:	0021      	movs	r1, r4
 80089aa:	187b      	adds	r3, r7, r1
 80089ac:	2200      	movs	r2, #0
 80089ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80089b0:	187b      	adds	r3, r7, r1
 80089b2:	2240      	movs	r2, #64	; 0x40
 80089b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80089b6:	187b      	adds	r3, r7, r1
 80089b8:	2201      	movs	r2, #1
 80089ba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80089bc:	187b      	adds	r3, r7, r1
 80089be:	2200      	movs	r2, #0
 80089c0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80089c2:	187b      	adds	r3, r7, r1
 80089c4:	0018      	movs	r0, r3
 80089c6:	f001 f967 	bl	8009c98 <HAL_RCC_OscConfig>
 80089ca:	1e03      	subs	r3, r0, #0
 80089cc:	d001      	beq.n	80089d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80089ce:	f000 f9f9 	bl	8008dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80089d2:	1d3b      	adds	r3, r7, #4
 80089d4:	2207      	movs	r2, #7
 80089d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80089d8:	1d3b      	adds	r3, r7, #4
 80089da:	2200      	movs	r2, #0
 80089dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80089de:	1d3b      	adds	r3, r7, #4
 80089e0:	2200      	movs	r2, #0
 80089e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80089e4:	1d3b      	adds	r3, r7, #4
 80089e6:	2200      	movs	r2, #0
 80089e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80089ea:	1d3b      	adds	r3, r7, #4
 80089ec:	2100      	movs	r1, #0
 80089ee:	0018      	movs	r0, r3
 80089f0:	f001 fc68 	bl	800a2c4 <HAL_RCC_ClockConfig>
 80089f4:	1e03      	subs	r3, r0, #0
 80089f6:	d001      	beq.n	80089fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80089f8:	f000 f9e4 	bl	8008dc4 <Error_Handler>
  }
}
 80089fc:	46c0      	nop			; (mov r8, r8)
 80089fe:	46bd      	mov	sp, r7
 8008a00:	b013      	add	sp, #76	; 0x4c
 8008a02:	bd90      	pop	{r4, r7, pc}

08008a04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008a08:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a0a:	4a1c      	ldr	r2, [pc, #112]	; (8008a7c <MX_I2C1_Init+0x78>)
 8008a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8008a0e:	4b1a      	ldr	r3, [pc, #104]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a10:	4a1b      	ldr	r2, [pc, #108]	; (8008a80 <MX_I2C1_Init+0x7c>)
 8008a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008a14:	4b18      	ldr	r3, [pc, #96]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a1a:	4b17      	ldr	r3, [pc, #92]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a20:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008a26:	4b14      	ldr	r3, [pc, #80]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008a2c:	4b12      	ldr	r3, [pc, #72]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008a32:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008a38:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008a3e:	4b0e      	ldr	r3, [pc, #56]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a40:	0018      	movs	r0, r3
 8008a42:	f000 ffaf 	bl	80099a4 <HAL_I2C_Init>
 8008a46:	1e03      	subs	r3, r0, #0
 8008a48:	d001      	beq.n	8008a4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008a4a:	f000 f9bb 	bl	8008dc4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008a4e:	4b0a      	ldr	r3, [pc, #40]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a50:	2100      	movs	r1, #0
 8008a52:	0018      	movs	r0, r3
 8008a54:	f001 f83c 	bl	8009ad0 <HAL_I2CEx_ConfigAnalogFilter>
 8008a58:	1e03      	subs	r3, r0, #0
 8008a5a:	d001      	beq.n	8008a60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008a5c:	f000 f9b2 	bl	8008dc4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008a60:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a62:	2100      	movs	r1, #0
 8008a64:	0018      	movs	r0, r3
 8008a66:	f001 f87f 	bl	8009b68 <HAL_I2CEx_ConfigDigitalFilter>
 8008a6a:	1e03      	subs	r3, r0, #0
 8008a6c:	d001      	beq.n	8008a72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008a6e:	f000 f9a9 	bl	8008dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008a72:	46c0      	nop			; (mov r8, r8)
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20000424 	.word	0x20000424
 8008a7c:	40005400 	.word	0x40005400
 8008a80:	00303d5b 	.word	0x00303d5b

08008a84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008a88:	4b13      	ldr	r3, [pc, #76]	; (8008ad8 <MX_RTC_Init+0x54>)
 8008a8a:	4a14      	ldr	r2, [pc, #80]	; (8008adc <MX_RTC_Init+0x58>)
 8008a8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008a8e:	4b12      	ldr	r3, [pc, #72]	; (8008ad8 <MX_RTC_Init+0x54>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8008a94:	4b10      	ldr	r3, [pc, #64]	; (8008ad8 <MX_RTC_Init+0x54>)
 8008a96:	227f      	movs	r2, #127	; 0x7f
 8008a98:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8008a9a:	4b0f      	ldr	r3, [pc, #60]	; (8008ad8 <MX_RTC_Init+0x54>)
 8008a9c:	22ff      	movs	r2, #255	; 0xff
 8008a9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008aa0:	4b0d      	ldr	r3, [pc, #52]	; (8008ad8 <MX_RTC_Init+0x54>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008aa6:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <MX_RTC_Init+0x54>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <MX_RTC_Init+0x54>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008ab2:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <MX_RTC_Init+0x54>)
 8008ab4:	2280      	movs	r2, #128	; 0x80
 8008ab6:	05d2      	lsls	r2, r2, #23
 8008ab8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8008aba:	4b07      	ldr	r3, [pc, #28]	; (8008ad8 <MX_RTC_Init+0x54>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <MX_RTC_Init+0x54>)
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f001 fedc 	bl	800a880 <HAL_RTC_Init>
 8008ac8:	1e03      	subs	r3, r0, #0
 8008aca:	d001      	beq.n	8008ad0 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8008acc:	f000 f97a 	bl	8008dc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008ad0:	46c0      	nop			; (mov r8, r8)
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	46c0      	nop			; (mov r8, r8)
 8008ad8:	20000470 	.word	0x20000470
 8008adc:	40002800 	.word	0x40002800

08008ae0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008ae4:	4b1b      	ldr	r3, [pc, #108]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008ae6:	4a1c      	ldr	r2, [pc, #112]	; (8008b58 <MX_SPI1_Init+0x78>)
 8008ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008aea:	4b1a      	ldr	r3, [pc, #104]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008aec:	2282      	movs	r2, #130	; 0x82
 8008aee:	0052      	lsls	r2, r2, #1
 8008af0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008af2:	4b18      	ldr	r3, [pc, #96]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008af8:	4b16      	ldr	r3, [pc, #88]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008afa:	22e0      	movs	r2, #224	; 0xe0
 8008afc:	00d2      	lsls	r2, r2, #3
 8008afe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b00:	4b14      	ldr	r3, [pc, #80]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008b06:	4b13      	ldr	r3, [pc, #76]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008b0c:	4b11      	ldr	r3, [pc, #68]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008b0e:	2280      	movs	r2, #128	; 0x80
 8008b10:	0092      	lsls	r2, r2, #2
 8008b12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008b1a:	4b0e      	ldr	r3, [pc, #56]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008b20:	4b0c      	ldr	r3, [pc, #48]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b26:	4b0b      	ldr	r3, [pc, #44]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008b2c:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008b2e:	2207      	movs	r2, #7
 8008b30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008b32:	4b08      	ldr	r3, [pc, #32]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008b38:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008b3a:	2208      	movs	r2, #8
 8008b3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008b3e:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <MX_SPI1_Init+0x74>)
 8008b40:	0018      	movs	r0, r3
 8008b42:	f001 ffe1 	bl	800ab08 <HAL_SPI_Init>
 8008b46:	1e03      	subs	r3, r0, #0
 8008b48:	d001      	beq.n	8008b4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8008b4a:	f000 f93b 	bl	8008dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008b4e:	46c0      	nop			; (mov r8, r8)
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	2000049c 	.word	0x2000049c
 8008b58:	40013000 	.word	0x40013000

08008b5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008b60:	4b1b      	ldr	r3, [pc, #108]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008b62:	4a1c      	ldr	r2, [pc, #112]	; (8008bd4 <MX_SPI2_Init+0x78>)
 8008b64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008b66:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008b68:	2282      	movs	r2, #130	; 0x82
 8008b6a:	0052      	lsls	r2, r2, #1
 8008b6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008b6e:	4b18      	ldr	r3, [pc, #96]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008b74:	4b16      	ldr	r3, [pc, #88]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008b76:	22e0      	movs	r2, #224	; 0xe0
 8008b78:	00d2      	lsls	r2, r2, #3
 8008b7a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b7c:	4b14      	ldr	r3, [pc, #80]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008b82:	4b13      	ldr	r3, [pc, #76]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008b88:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008b8a:	2280      	movs	r2, #128	; 0x80
 8008b8c:	0092      	lsls	r2, r2, #2
 8008b8e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b90:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008b96:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008b9c:	4b0c      	ldr	r3, [pc, #48]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8008ba8:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008baa:	2207      	movs	r2, #7
 8008bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008bae:	4b08      	ldr	r3, [pc, #32]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008bb4:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008bb6:	2208      	movs	r2, #8
 8008bb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008bba:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <MX_SPI2_Init+0x74>)
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f001 ffa3 	bl	800ab08 <HAL_SPI_Init>
 8008bc2:	1e03      	subs	r3, r0, #0
 8008bc4:	d001      	beq.n	8008bca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8008bc6:	f000 f8fd 	bl	8008dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	200003c0 	.word	0x200003c0
 8008bd4:	40003800 	.word	0x40003800

08008bd8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8008bdc:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <MX_TIM16_Init+0x44>)
 8008bde:	4a10      	ldr	r2, [pc, #64]	; (8008c20 <MX_TIM16_Init+0x48>)
 8008be0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16;
 8008be2:	4b0e      	ldr	r3, [pc, #56]	; (8008c1c <MX_TIM16_Init+0x44>)
 8008be4:	2210      	movs	r2, #16
 8008be6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <MX_TIM16_Init+0x44>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008bee:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <MX_TIM16_Init+0x44>)
 8008bf0:	4a0c      	ldr	r2, [pc, #48]	; (8008c24 <MX_TIM16_Init+0x4c>)
 8008bf2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008bf4:	4b09      	ldr	r3, [pc, #36]	; (8008c1c <MX_TIM16_Init+0x44>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008bfa:	4b08      	ldr	r3, [pc, #32]	; (8008c1c <MX_TIM16_Init+0x44>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <MX_TIM16_Init+0x44>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008c06:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <MX_TIM16_Init+0x44>)
 8008c08:	0018      	movs	r0, r3
 8008c0a:	f002 fe8b 	bl	800b924 <HAL_TIM_Base_Init>
 8008c0e:	1e03      	subs	r3, r0, #0
 8008c10:	d001      	beq.n	8008c16 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8008c12:	f000 f8d7 	bl	8008dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8008c16:	46c0      	nop			; (mov r8, r8)
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20000590 	.word	0x20000590
 8008c20:	40014400 	.word	0x40014400
 8008c24:	0000ffff 	.word	0x0000ffff

08008c28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008c2c:	4b23      	ldr	r3, [pc, #140]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c2e:	4a24      	ldr	r2, [pc, #144]	; (8008cc0 <MX_USART2_UART_Init+0x98>)
 8008c30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008c32:	4b22      	ldr	r3, [pc, #136]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c34:	22e1      	movs	r2, #225	; 0xe1
 8008c36:	0252      	lsls	r2, r2, #9
 8008c38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008c3a:	4b20      	ldr	r3, [pc, #128]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008c40:	4b1e      	ldr	r3, [pc, #120]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008c46:	4b1d      	ldr	r3, [pc, #116]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008c4c:	4b1b      	ldr	r3, [pc, #108]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c4e:	220c      	movs	r2, #12
 8008c50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c52:	4b1a      	ldr	r3, [pc, #104]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c58:	4b18      	ldr	r3, [pc, #96]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008c5e:	4b17      	ldr	r3, [pc, #92]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008c64:	4b15      	ldr	r3, [pc, #84]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008c6a:	4b14      	ldr	r3, [pc, #80]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008c70:	4b12      	ldr	r3, [pc, #72]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c72:	0018      	movs	r0, r3
 8008c74:	f002 ff72 	bl	800bb5c <HAL_UART_Init>
 8008c78:	1e03      	subs	r3, r0, #0
 8008c7a:	d001      	beq.n	8008c80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008c7c:	f000 f8a2 	bl	8008dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008c80:	4b0e      	ldr	r3, [pc, #56]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c82:	2100      	movs	r1, #0
 8008c84:	0018      	movs	r0, r3
 8008c86:	f003 fc11 	bl	800c4ac <HAL_UARTEx_SetTxFifoThreshold>
 8008c8a:	1e03      	subs	r3, r0, #0
 8008c8c:	d001      	beq.n	8008c92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8008c8e:	f000 f899 	bl	8008dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008c92:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008c94:	2100      	movs	r1, #0
 8008c96:	0018      	movs	r0, r3
 8008c98:	f003 fc48 	bl	800c52c <HAL_UARTEx_SetRxFifoThreshold>
 8008c9c:	1e03      	subs	r3, r0, #0
 8008c9e:	d001      	beq.n	8008ca4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008ca0:	f000 f890 	bl	8008dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008ca4:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <MX_USART2_UART_Init+0x94>)
 8008ca6:	0018      	movs	r0, r3
 8008ca8:	f003 fbc6 	bl	800c438 <HAL_UARTEx_DisableFifoMode>
 8008cac:	1e03      	subs	r3, r0, #0
 8008cae:	d001      	beq.n	8008cb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008cb0:	f000 f888 	bl	8008dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008cb4:	46c0      	nop			; (mov r8, r8)
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	46c0      	nop			; (mov r8, r8)
 8008cbc:	20000500 	.word	0x20000500
 8008cc0:	40004400 	.word	0x40004400

08008cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008cc4:	b590      	push	{r4, r7, lr}
 8008cc6:	b089      	sub	sp, #36	; 0x24
 8008cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cca:	240c      	movs	r4, #12
 8008ccc:	193b      	adds	r3, r7, r4
 8008cce:	0018      	movs	r0, r3
 8008cd0:	2314      	movs	r3, #20
 8008cd2:	001a      	movs	r2, r3
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	f003 fcfc 	bl	800c6d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008cda:	4b37      	ldr	r3, [pc, #220]	; (8008db8 <MX_GPIO_Init+0xf4>)
 8008cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cde:	4b36      	ldr	r3, [pc, #216]	; (8008db8 <MX_GPIO_Init+0xf4>)
 8008ce0:	2104      	movs	r1, #4
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8008ce6:	4b34      	ldr	r3, [pc, #208]	; (8008db8 <MX_GPIO_Init+0xf4>)
 8008ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cea:	2204      	movs	r2, #4
 8008cec:	4013      	ands	r3, r2
 8008cee:	60bb      	str	r3, [r7, #8]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cf2:	4b31      	ldr	r3, [pc, #196]	; (8008db8 <MX_GPIO_Init+0xf4>)
 8008cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cf6:	4b30      	ldr	r3, [pc, #192]	; (8008db8 <MX_GPIO_Init+0xf4>)
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8008cfe:	4b2e      	ldr	r3, [pc, #184]	; (8008db8 <MX_GPIO_Init+0xf4>)
 8008d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d02:	2201      	movs	r2, #1
 8008d04:	4013      	ands	r3, r2
 8008d06:	607b      	str	r3, [r7, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d0a:	4b2b      	ldr	r3, [pc, #172]	; (8008db8 <MX_GPIO_Init+0xf4>)
 8008d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d0e:	4b2a      	ldr	r3, [pc, #168]	; (8008db8 <MX_GPIO_Init+0xf4>)
 8008d10:	2102      	movs	r1, #2
 8008d12:	430a      	orrs	r2, r1
 8008d14:	635a      	str	r2, [r3, #52]	; 0x34
 8008d16:	4b28      	ldr	r3, [pc, #160]	; (8008db8 <MX_GPIO_Init+0xf4>)
 8008d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8008d22:	2380      	movs	r3, #128	; 0x80
 8008d24:	015b      	lsls	r3, r3, #5
 8008d26:	4825      	ldr	r0, [pc, #148]	; (8008dbc <MX_GPIO_Init+0xf8>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	0019      	movs	r1, r3
 8008d2c:	f000 fe1c 	bl	8009968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8008d30:	2380      	movs	r3, #128	; 0x80
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4822      	ldr	r0, [pc, #136]	; (8008dc0 <MX_GPIO_Init+0xfc>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	0019      	movs	r1, r3
 8008d3a:	f000 fe15 	bl	8009968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008d3e:	193b      	adds	r3, r7, r4
 8008d40:	2280      	movs	r2, #128	; 0x80
 8008d42:	0192      	lsls	r2, r2, #6
 8008d44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d46:	193b      	adds	r3, r7, r4
 8008d48:	2200      	movs	r2, #0
 8008d4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d4c:	193b      	adds	r3, r7, r4
 8008d4e:	2200      	movs	r2, #0
 8008d50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d52:	193b      	adds	r3, r7, r4
 8008d54:	4a1a      	ldr	r2, [pc, #104]	; (8008dc0 <MX_GPIO_Init+0xfc>)
 8008d56:	0019      	movs	r1, r3
 8008d58:	0010      	movs	r0, r2
 8008d5a:	f000 fca1 	bl	80096a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008d5e:	0021      	movs	r1, r4
 8008d60:	187b      	adds	r3, r7, r1
 8008d62:	2280      	movs	r2, #128	; 0x80
 8008d64:	0152      	lsls	r2, r2, #5
 8008d66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d68:	000c      	movs	r4, r1
 8008d6a:	193b      	adds	r3, r7, r4
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d70:	193b      	adds	r3, r7, r4
 8008d72:	2200      	movs	r2, #0
 8008d74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d76:	193b      	adds	r3, r7, r4
 8008d78:	2200      	movs	r2, #0
 8008d7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d7c:	193b      	adds	r3, r7, r4
 8008d7e:	4a0f      	ldr	r2, [pc, #60]	; (8008dbc <MX_GPIO_Init+0xf8>)
 8008d80:	0019      	movs	r1, r3
 8008d82:	0010      	movs	r0, r2
 8008d84:	f000 fc8c 	bl	80096a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008d88:	0021      	movs	r1, r4
 8008d8a:	187b      	adds	r3, r7, r1
 8008d8c:	2280      	movs	r2, #128	; 0x80
 8008d8e:	0092      	lsls	r2, r2, #2
 8008d90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d92:	187b      	adds	r3, r7, r1
 8008d94:	2201      	movs	r2, #1
 8008d96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d98:	187b      	adds	r3, r7, r1
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d9e:	187b      	adds	r3, r7, r1
 8008da0:	2200      	movs	r2, #0
 8008da2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008da4:	187b      	adds	r3, r7, r1
 8008da6:	4a06      	ldr	r2, [pc, #24]	; (8008dc0 <MX_GPIO_Init+0xfc>)
 8008da8:	0019      	movs	r1, r3
 8008daa:	0010      	movs	r0, r2
 8008dac:	f000 fc78 	bl	80096a0 <HAL_GPIO_Init>

}
 8008db0:	46c0      	nop			; (mov r8, r8)
 8008db2:	46bd      	mov	sp, r7
 8008db4:	b009      	add	sp, #36	; 0x24
 8008db6:	bd90      	pop	{r4, r7, pc}
 8008db8:	40021000 	.word	0x40021000
 8008dbc:	50000400 	.word	0x50000400
 8008dc0:	50000800 	.word	0x50000800

08008dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008dc8:	b672      	cpsid	i
}
 8008dca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8008dcc:	e7fe      	b.n	8008dcc <Error_Handler+0x8>
	...

08008dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dd6:	4b11      	ldr	r3, [pc, #68]	; (8008e1c <HAL_MspInit+0x4c>)
 8008dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dda:	4b10      	ldr	r3, [pc, #64]	; (8008e1c <HAL_MspInit+0x4c>)
 8008ddc:	2101      	movs	r1, #1
 8008dde:	430a      	orrs	r2, r1
 8008de0:	641a      	str	r2, [r3, #64]	; 0x40
 8008de2:	4b0e      	ldr	r3, [pc, #56]	; (8008e1c <HAL_MspInit+0x4c>)
 8008de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de6:	2201      	movs	r2, #1
 8008de8:	4013      	ands	r3, r2
 8008dea:	607b      	str	r3, [r7, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008dee:	4b0b      	ldr	r3, [pc, #44]	; (8008e1c <HAL_MspInit+0x4c>)
 8008df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008df2:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <HAL_MspInit+0x4c>)
 8008df4:	2180      	movs	r1, #128	; 0x80
 8008df6:	0549      	lsls	r1, r1, #21
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8008dfc:	4b07      	ldr	r3, [pc, #28]	; (8008e1c <HAL_MspInit+0x4c>)
 8008dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e00:	2380      	movs	r3, #128	; 0x80
 8008e02:	055b      	lsls	r3, r3, #21
 8008e04:	4013      	ands	r3, r2
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8008e0a:	23c0      	movs	r3, #192	; 0xc0
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f000 fb7c 	bl	800950c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e14:	46c0      	nop			; (mov r8, r8)
 8008e16:	46bd      	mov	sp, r7
 8008e18:	b002      	add	sp, #8
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	40021000 	.word	0x40021000

08008e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b091      	sub	sp, #68	; 0x44
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e28:	232c      	movs	r3, #44	; 0x2c
 8008e2a:	18fb      	adds	r3, r7, r3
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	2314      	movs	r3, #20
 8008e30:	001a      	movs	r2, r3
 8008e32:	2100      	movs	r1, #0
 8008e34:	f003 fc4d 	bl	800c6d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008e38:	2410      	movs	r4, #16
 8008e3a:	193b      	adds	r3, r7, r4
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	231c      	movs	r3, #28
 8008e40:	001a      	movs	r2, r3
 8008e42:	2100      	movs	r1, #0
 8008e44:	f003 fc45 	bl	800c6d2 <memset>
  if(hi2c->Instance==I2C1)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a23      	ldr	r2, [pc, #140]	; (8008edc <HAL_I2C_MspInit+0xbc>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d13f      	bne.n	8008ed2 <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8008e52:	193b      	adds	r3, r7, r4
 8008e54:	2220      	movs	r2, #32
 8008e56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008e58:	193b      	adds	r3, r7, r4
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e5e:	193b      	adds	r3, r7, r4
 8008e60:	0018      	movs	r0, r3
 8008e62:	f001 fbd9 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 8008e66:	1e03      	subs	r3, r0, #0
 8008e68:	d001      	beq.n	8008e6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8008e6a:	f7ff ffab 	bl	8008dc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ee0 <HAL_I2C_MspInit+0xc0>)
 8008e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e72:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <HAL_I2C_MspInit+0xc0>)
 8008e74:	2101      	movs	r1, #1
 8008e76:	430a      	orrs	r2, r1
 8008e78:	635a      	str	r2, [r3, #52]	; 0x34
 8008e7a:	4b19      	ldr	r3, [pc, #100]	; (8008ee0 <HAL_I2C_MspInit+0xc0>)
 8008e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4013      	ands	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008e86:	212c      	movs	r1, #44	; 0x2c
 8008e88:	187b      	adds	r3, r7, r1
 8008e8a:	22c0      	movs	r2, #192	; 0xc0
 8008e8c:	00d2      	lsls	r2, r2, #3
 8008e8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008e90:	187b      	adds	r3, r7, r1
 8008e92:	2212      	movs	r2, #18
 8008e94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e96:	187b      	adds	r3, r7, r1
 8008e98:	2200      	movs	r2, #0
 8008e9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e9c:	187b      	adds	r3, r7, r1
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8008ea2:	187b      	adds	r3, r7, r1
 8008ea4:	2206      	movs	r2, #6
 8008ea6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ea8:	187a      	adds	r2, r7, r1
 8008eaa:	23a0      	movs	r3, #160	; 0xa0
 8008eac:	05db      	lsls	r3, r3, #23
 8008eae:	0011      	movs	r1, r2
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f000 fbf5 	bl	80096a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008eb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <HAL_I2C_MspInit+0xc0>)
 8008eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eba:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <HAL_I2C_MspInit+0xc0>)
 8008ebc:	2180      	movs	r1, #128	; 0x80
 8008ebe:	0389      	lsls	r1, r1, #14
 8008ec0:	430a      	orrs	r2, r1
 8008ec2:	63da      	str	r2, [r3, #60]	; 0x3c
 8008ec4:	4b06      	ldr	r3, [pc, #24]	; (8008ee0 <HAL_I2C_MspInit+0xc0>)
 8008ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ec8:	2380      	movs	r3, #128	; 0x80
 8008eca:	039b      	lsls	r3, r3, #14
 8008ecc:	4013      	ands	r3, r2
 8008ece:	60bb      	str	r3, [r7, #8]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008ed2:	46c0      	nop			; (mov r8, r8)
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	b011      	add	sp, #68	; 0x44
 8008ed8:	bd90      	pop	{r4, r7, pc}
 8008eda:	46c0      	nop			; (mov r8, r8)
 8008edc:	40005400 	.word	0x40005400
 8008ee0:	40021000 	.word	0x40021000

08008ee4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008ee4:	b590      	push	{r4, r7, lr}
 8008ee6:	b08b      	sub	sp, #44	; 0x2c
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008eec:	240c      	movs	r4, #12
 8008eee:	193b      	adds	r3, r7, r4
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	231c      	movs	r3, #28
 8008ef4:	001a      	movs	r2, r3
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	f003 fbeb 	bl	800c6d2 <memset>
  if(hrtc->Instance==RTC)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a15      	ldr	r2, [pc, #84]	; (8008f58 <HAL_RTC_MspInit+0x74>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d124      	bne.n	8008f50 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008f06:	193b      	adds	r3, r7, r4
 8008f08:	2280      	movs	r2, #128	; 0x80
 8008f0a:	0292      	lsls	r2, r2, #10
 8008f0c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008f0e:	193b      	adds	r3, r7, r4
 8008f10:	2280      	movs	r2, #128	; 0x80
 8008f12:	0092      	lsls	r2, r2, #2
 8008f14:	619a      	str	r2, [r3, #24]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008f16:	193b      	adds	r3, r7, r4
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f001 fb7d 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 8008f1e:	1e03      	subs	r3, r0, #0
 8008f20:	d001      	beq.n	8008f26 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8008f22:	f7ff ff4f 	bl	8008dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008f26:	4b0d      	ldr	r3, [pc, #52]	; (8008f5c <HAL_RTC_MspInit+0x78>)
 8008f28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f2a:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <HAL_RTC_MspInit+0x78>)
 8008f2c:	2180      	movs	r1, #128	; 0x80
 8008f2e:	0209      	lsls	r1, r1, #8
 8008f30:	430a      	orrs	r2, r1
 8008f32:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8008f34:	4b09      	ldr	r3, [pc, #36]	; (8008f5c <HAL_RTC_MspInit+0x78>)
 8008f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f38:	4b08      	ldr	r3, [pc, #32]	; (8008f5c <HAL_RTC_MspInit+0x78>)
 8008f3a:	2180      	movs	r1, #128	; 0x80
 8008f3c:	00c9      	lsls	r1, r1, #3
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	63da      	str	r2, [r3, #60]	; 0x3c
 8008f42:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <HAL_RTC_MspInit+0x78>)
 8008f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f46:	2380      	movs	r3, #128	; 0x80
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	60bb      	str	r3, [r7, #8]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008f50:	46c0      	nop			; (mov r8, r8)
 8008f52:	46bd      	mov	sp, r7
 8008f54:	b00b      	add	sp, #44	; 0x2c
 8008f56:	bd90      	pop	{r4, r7, pc}
 8008f58:	40002800 	.word	0x40002800
 8008f5c:	40021000 	.word	0x40021000

08008f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b08d      	sub	sp, #52	; 0x34
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f68:	241c      	movs	r4, #28
 8008f6a:	193b      	adds	r3, r7, r4
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	2314      	movs	r3, #20
 8008f70:	001a      	movs	r2, r3
 8008f72:	2100      	movs	r1, #0
 8008f74:	f003 fbad 	bl	800c6d2 <memset>
  if(hspi->Instance==SPI1)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a48      	ldr	r2, [pc, #288]	; (80090a0 <HAL_SPI_MspInit+0x140>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d131      	bne.n	8008fe6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008f82:	4b48      	ldr	r3, [pc, #288]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8008f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f86:	4b47      	ldr	r3, [pc, #284]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8008f88:	2180      	movs	r1, #128	; 0x80
 8008f8a:	0149      	lsls	r1, r1, #5
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	641a      	str	r2, [r3, #64]	; 0x40
 8008f90:	4b44      	ldr	r3, [pc, #272]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8008f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f94:	2380      	movs	r3, #128	; 0x80
 8008f96:	015b      	lsls	r3, r3, #5
 8008f98:	4013      	ands	r3, r2
 8008f9a:	61bb      	str	r3, [r7, #24]
 8008f9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f9e:	4b41      	ldr	r3, [pc, #260]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8008fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa2:	4b40      	ldr	r3, [pc, #256]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8008faa:	4b3e      	ldr	r3, [pc, #248]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8008fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fae:	2201      	movs	r2, #1
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008fb6:	0021      	movs	r1, r4
 8008fb8:	187b      	adds	r3, r7, r1
 8008fba:	22e0      	movs	r2, #224	; 0xe0
 8008fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fbe:	187b      	adds	r3, r7, r1
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fc4:	187b      	adds	r3, r7, r1
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fca:	187b      	adds	r3, r7, r1
 8008fcc:	2200      	movs	r2, #0
 8008fce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8008fd0:	187b      	adds	r3, r7, r1
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fd6:	187a      	adds	r2, r7, r1
 8008fd8:	23a0      	movs	r3, #160	; 0xa0
 8008fda:	05db      	lsls	r3, r3, #23
 8008fdc:	0011      	movs	r1, r2
 8008fde:	0018      	movs	r0, r3
 8008fe0:	f000 fb5e 	bl	80096a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008fe4:	e057      	b.n	8009096 <HAL_SPI_MspInit+0x136>
  else if(hspi->Instance==SPI2)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a2f      	ldr	r2, [pc, #188]	; (80090a8 <HAL_SPI_MspInit+0x148>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d152      	bne.n	8009096 <HAL_SPI_MspInit+0x136>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008ff0:	4b2c      	ldr	r3, [pc, #176]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8008ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ff4:	4b2b      	ldr	r3, [pc, #172]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8008ff6:	2180      	movs	r1, #128	; 0x80
 8008ff8:	01c9      	lsls	r1, r1, #7
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	63da      	str	r2, [r3, #60]	; 0x3c
 8008ffe:	4b29      	ldr	r3, [pc, #164]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8009000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009002:	2380      	movs	r3, #128	; 0x80
 8009004:	01db      	lsls	r3, r3, #7
 8009006:	4013      	ands	r3, r2
 8009008:	613b      	str	r3, [r7, #16]
 800900a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800900c:	4b25      	ldr	r3, [pc, #148]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 800900e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009010:	4b24      	ldr	r3, [pc, #144]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8009012:	2104      	movs	r1, #4
 8009014:	430a      	orrs	r2, r1
 8009016:	635a      	str	r2, [r3, #52]	; 0x34
 8009018:	4b22      	ldr	r3, [pc, #136]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 800901a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901c:	2204      	movs	r2, #4
 800901e:	4013      	ands	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009024:	4b1f      	ldr	r3, [pc, #124]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8009026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009028:	4b1e      	ldr	r3, [pc, #120]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 800902a:	2101      	movs	r1, #1
 800902c:	430a      	orrs	r2, r1
 800902e:	635a      	str	r2, [r3, #52]	; 0x34
 8009030:	4b1c      	ldr	r3, [pc, #112]	; (80090a4 <HAL_SPI_MspInit+0x144>)
 8009032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009034:	2201      	movs	r2, #1
 8009036:	4013      	ands	r3, r2
 8009038:	60bb      	str	r3, [r7, #8]
 800903a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800903c:	241c      	movs	r4, #28
 800903e:	193b      	adds	r3, r7, r4
 8009040:	220c      	movs	r2, #12
 8009042:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009044:	193b      	adds	r3, r7, r4
 8009046:	2202      	movs	r2, #2
 8009048:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800904a:	193b      	adds	r3, r7, r4
 800904c:	2200      	movs	r2, #0
 800904e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009050:	193b      	adds	r3, r7, r4
 8009052:	2200      	movs	r2, #0
 8009054:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8009056:	193b      	adds	r3, r7, r4
 8009058:	2201      	movs	r2, #1
 800905a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800905c:	193b      	adds	r3, r7, r4
 800905e:	4a13      	ldr	r2, [pc, #76]	; (80090ac <HAL_SPI_MspInit+0x14c>)
 8009060:	0019      	movs	r1, r3
 8009062:	0010      	movs	r0, r2
 8009064:	f000 fb1c 	bl	80096a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009068:	0021      	movs	r1, r4
 800906a:	187b      	adds	r3, r7, r1
 800906c:	2201      	movs	r2, #1
 800906e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009070:	187b      	adds	r3, r7, r1
 8009072:	2202      	movs	r2, #2
 8009074:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009076:	187b      	adds	r3, r7, r1
 8009078:	2200      	movs	r2, #0
 800907a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800907c:	187b      	adds	r3, r7, r1
 800907e:	2200      	movs	r2, #0
 8009080:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8009082:	187b      	adds	r3, r7, r1
 8009084:	2200      	movs	r2, #0
 8009086:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009088:	187a      	adds	r2, r7, r1
 800908a:	23a0      	movs	r3, #160	; 0xa0
 800908c:	05db      	lsls	r3, r3, #23
 800908e:	0011      	movs	r1, r2
 8009090:	0018      	movs	r0, r3
 8009092:	f000 fb05 	bl	80096a0 <HAL_GPIO_Init>
}
 8009096:	46c0      	nop			; (mov r8, r8)
 8009098:	46bd      	mov	sp, r7
 800909a:	b00d      	add	sp, #52	; 0x34
 800909c:	bd90      	pop	{r4, r7, pc}
 800909e:	46c0      	nop			; (mov r8, r8)
 80090a0:	40013000 	.word	0x40013000
 80090a4:	40021000 	.word	0x40021000
 80090a8:	40003800 	.word	0x40003800
 80090ac:	50000800 	.word	0x50000800

080090b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a0a      	ldr	r2, [pc, #40]	; (80090e8 <HAL_TIM_Base_MspInit+0x38>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d10d      	bne.n	80090de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80090c2:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <HAL_TIM_Base_MspInit+0x3c>)
 80090c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <HAL_TIM_Base_MspInit+0x3c>)
 80090c8:	2180      	movs	r1, #128	; 0x80
 80090ca:	0289      	lsls	r1, r1, #10
 80090cc:	430a      	orrs	r2, r1
 80090ce:	641a      	str	r2, [r3, #64]	; 0x40
 80090d0:	4b06      	ldr	r3, [pc, #24]	; (80090ec <HAL_TIM_Base_MspInit+0x3c>)
 80090d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090d4:	2380      	movs	r3, #128	; 0x80
 80090d6:	029b      	lsls	r3, r3, #10
 80090d8:	4013      	ands	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80090de:	46c0      	nop			; (mov r8, r8)
 80090e0:	46bd      	mov	sp, r7
 80090e2:	b004      	add	sp, #16
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	46c0      	nop			; (mov r8, r8)
 80090e8:	40014400 	.word	0x40014400
 80090ec:	40021000 	.word	0x40021000

080090f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80090f0:	b590      	push	{r4, r7, lr}
 80090f2:	b091      	sub	sp, #68	; 0x44
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090f8:	232c      	movs	r3, #44	; 0x2c
 80090fa:	18fb      	adds	r3, r7, r3
 80090fc:	0018      	movs	r0, r3
 80090fe:	2314      	movs	r3, #20
 8009100:	001a      	movs	r2, r3
 8009102:	2100      	movs	r1, #0
 8009104:	f003 fae5 	bl	800c6d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009108:	2410      	movs	r4, #16
 800910a:	193b      	adds	r3, r7, r4
 800910c:	0018      	movs	r0, r3
 800910e:	231c      	movs	r3, #28
 8009110:	001a      	movs	r2, r3
 8009112:	2100      	movs	r1, #0
 8009114:	f003 fadd 	bl	800c6d2 <memset>
  if(huart->Instance==USART2)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a22      	ldr	r2, [pc, #136]	; (80091a8 <HAL_UART_MspInit+0xb8>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d13e      	bne.n	80091a0 <HAL_UART_MspInit+0xb0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009122:	193b      	adds	r3, r7, r4
 8009124:	2202      	movs	r2, #2
 8009126:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009128:	193b      	adds	r3, r7, r4
 800912a:	2200      	movs	r2, #0
 800912c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800912e:	193b      	adds	r3, r7, r4
 8009130:	0018      	movs	r0, r3
 8009132:	f001 fa71 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 8009136:	1e03      	subs	r3, r0, #0
 8009138:	d001      	beq.n	800913e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800913a:	f7ff fe43 	bl	8008dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800913e:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <HAL_UART_MspInit+0xbc>)
 8009140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009142:	4b1a      	ldr	r3, [pc, #104]	; (80091ac <HAL_UART_MspInit+0xbc>)
 8009144:	2180      	movs	r1, #128	; 0x80
 8009146:	0289      	lsls	r1, r1, #10
 8009148:	430a      	orrs	r2, r1
 800914a:	63da      	str	r2, [r3, #60]	; 0x3c
 800914c:	4b17      	ldr	r3, [pc, #92]	; (80091ac <HAL_UART_MspInit+0xbc>)
 800914e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009150:	2380      	movs	r3, #128	; 0x80
 8009152:	029b      	lsls	r3, r3, #10
 8009154:	4013      	ands	r3, r2
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800915a:	4b14      	ldr	r3, [pc, #80]	; (80091ac <HAL_UART_MspInit+0xbc>)
 800915c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800915e:	4b13      	ldr	r3, [pc, #76]	; (80091ac <HAL_UART_MspInit+0xbc>)
 8009160:	2101      	movs	r1, #1
 8009162:	430a      	orrs	r2, r1
 8009164:	635a      	str	r2, [r3, #52]	; 0x34
 8009166:	4b11      	ldr	r3, [pc, #68]	; (80091ac <HAL_UART_MspInit+0xbc>)
 8009168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916a:	2201      	movs	r2, #1
 800916c:	4013      	ands	r3, r2
 800916e:	60bb      	str	r3, [r7, #8]
 8009170:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009172:	212c      	movs	r1, #44	; 0x2c
 8009174:	187b      	adds	r3, r7, r1
 8009176:	220c      	movs	r2, #12
 8009178:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800917a:	187b      	adds	r3, r7, r1
 800917c:	2202      	movs	r2, #2
 800917e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009180:	187b      	adds	r3, r7, r1
 8009182:	2200      	movs	r2, #0
 8009184:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009186:	187b      	adds	r3, r7, r1
 8009188:	2200      	movs	r2, #0
 800918a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800918c:	187b      	adds	r3, r7, r1
 800918e:	2201      	movs	r2, #1
 8009190:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009192:	187a      	adds	r2, r7, r1
 8009194:	23a0      	movs	r3, #160	; 0xa0
 8009196:	05db      	lsls	r3, r3, #23
 8009198:	0011      	movs	r1, r2
 800919a:	0018      	movs	r0, r3
 800919c:	f000 fa80 	bl	80096a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80091a0:	46c0      	nop			; (mov r8, r8)
 80091a2:	46bd      	mov	sp, r7
 80091a4:	b011      	add	sp, #68	; 0x44
 80091a6:	bd90      	pop	{r4, r7, pc}
 80091a8:	40004400 	.word	0x40004400
 80091ac:	40021000 	.word	0x40021000

080091b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80091b4:	e7fe      	b.n	80091b4 <NMI_Handler+0x4>

080091b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80091ba:	e7fe      	b.n	80091ba <HardFault_Handler+0x4>

080091bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80091c0:	46c0      	nop			; (mov r8, r8)
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80091d4:	f000 f95a 	bl	800948c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80091d8:	46c0      	nop			; (mov r8, r8)
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	af00      	add	r7, sp, #0
	return 1;
 80091e2:	2301      	movs	r3, #1
}
 80091e4:	0018      	movs	r0, r3
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <_kill>:

int _kill(int pid, int sig)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80091f4:	f003 fa3a 	bl	800c66c <__errno>
 80091f8:	0003      	movs	r3, r0
 80091fa:	2216      	movs	r2, #22
 80091fc:	601a      	str	r2, [r3, #0]
	return -1;
 80091fe:	2301      	movs	r3, #1
 8009200:	425b      	negs	r3, r3
}
 8009202:	0018      	movs	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	b002      	add	sp, #8
 8009208:	bd80      	pop	{r7, pc}

0800920a <_exit>:

void _exit (int status)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009212:	2301      	movs	r3, #1
 8009214:	425a      	negs	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	0011      	movs	r1, r2
 800921a:	0018      	movs	r0, r3
 800921c:	f7ff ffe5 	bl	80091ea <_kill>
	while (1) {}		/* Make sure we hang here */
 8009220:	e7fe      	b.n	8009220 <_exit+0x16>

08009222 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b086      	sub	sp, #24
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]
 8009232:	e00a      	b.n	800924a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009234:	e000      	b.n	8009238 <_read+0x16>
 8009236:	bf00      	nop
 8009238:	0001      	movs	r1, r0
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	60ba      	str	r2, [r7, #8]
 8009240:	b2ca      	uxtb	r2, r1
 8009242:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	3301      	adds	r3, #1
 8009248:	617b      	str	r3, [r7, #20]
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	429a      	cmp	r2, r3
 8009250:	dbf0      	blt.n	8009234 <_read+0x12>
	}

return len;
 8009252:	687b      	ldr	r3, [r7, #4]
}
 8009254:	0018      	movs	r0, r3
 8009256:	46bd      	mov	sp, r7
 8009258:	b006      	add	sp, #24
 800925a:	bd80      	pop	{r7, pc}

0800925c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	e009      	b.n	8009282 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	60ba      	str	r2, [r7, #8]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	0018      	movs	r0, r3
 8009278:	e000      	b.n	800927c <_write+0x20>
 800927a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	3301      	adds	r3, #1
 8009280:	617b      	str	r3, [r7, #20]
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	dbf1      	blt.n	800926e <_write+0x12>
	}
	return len;
 800928a:	687b      	ldr	r3, [r7, #4]
}
 800928c:	0018      	movs	r0, r3
 800928e:	46bd      	mov	sp, r7
 8009290:	b006      	add	sp, #24
 8009292:	bd80      	pop	{r7, pc}

08009294 <_close>:

int _close(int file)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	return -1;
 800929c:	2301      	movs	r3, #1
 800929e:	425b      	negs	r3, r3
}
 80092a0:	0018      	movs	r0, r3
 80092a2:	46bd      	mov	sp, r7
 80092a4:	b002      	add	sp, #8
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2280      	movs	r2, #128	; 0x80
 80092b6:	0192      	lsls	r2, r2, #6
 80092b8:	605a      	str	r2, [r3, #4]
	return 0;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	0018      	movs	r0, r3
 80092be:	46bd      	mov	sp, r7
 80092c0:	b002      	add	sp, #8
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <_isatty>:

int _isatty(int file)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	return 1;
 80092cc:	2301      	movs	r3, #1
}
 80092ce:	0018      	movs	r0, r3
 80092d0:	46bd      	mov	sp, r7
 80092d2:	b002      	add	sp, #8
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	60f8      	str	r0, [r7, #12]
 80092de:	60b9      	str	r1, [r7, #8]
 80092e0:	607a      	str	r2, [r7, #4]
	return 0;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	0018      	movs	r0, r3
 80092e6:	46bd      	mov	sp, r7
 80092e8:	b004      	add	sp, #16
 80092ea:	bd80      	pop	{r7, pc}

080092ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80092f4:	4a14      	ldr	r2, [pc, #80]	; (8009348 <_sbrk+0x5c>)
 80092f6:	4b15      	ldr	r3, [pc, #84]	; (800934c <_sbrk+0x60>)
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009300:	4b13      	ldr	r3, [pc, #76]	; (8009350 <_sbrk+0x64>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d102      	bne.n	800930e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009308:	4b11      	ldr	r3, [pc, #68]	; (8009350 <_sbrk+0x64>)
 800930a:	4a12      	ldr	r2, [pc, #72]	; (8009354 <_sbrk+0x68>)
 800930c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800930e:	4b10      	ldr	r3, [pc, #64]	; (8009350 <_sbrk+0x64>)
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	18d3      	adds	r3, r2, r3
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	429a      	cmp	r2, r3
 800931a:	d207      	bcs.n	800932c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800931c:	f003 f9a6 	bl	800c66c <__errno>
 8009320:	0003      	movs	r3, r0
 8009322:	220c      	movs	r2, #12
 8009324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009326:	2301      	movs	r3, #1
 8009328:	425b      	negs	r3, r3
 800932a:	e009      	b.n	8009340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800932c:	4b08      	ldr	r3, [pc, #32]	; (8009350 <_sbrk+0x64>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009332:	4b07      	ldr	r3, [pc, #28]	; (8009350 <_sbrk+0x64>)
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	18d2      	adds	r2, r2, r3
 800933a:	4b05      	ldr	r3, [pc, #20]	; (8009350 <_sbrk+0x64>)
 800933c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800933e:	68fb      	ldr	r3, [r7, #12]
}
 8009340:	0018      	movs	r0, r3
 8009342:	46bd      	mov	sp, r7
 8009344:	b006      	add	sp, #24
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20009000 	.word	0x20009000
 800934c:	00000400 	.word	0x00000400
 8009350:	20000200 	.word	0x20000200
 8009354:	200005f0 	.word	0x200005f0

08009358 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800935c:	46c0      	nop			; (mov r8, r8)
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009364:	480d      	ldr	r0, [pc, #52]	; (800939c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009366:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009368:	f7ff fff6 	bl	8009358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800936c:	480c      	ldr	r0, [pc, #48]	; (80093a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800936e:	490d      	ldr	r1, [pc, #52]	; (80093a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009370:	4a0d      	ldr	r2, [pc, #52]	; (80093a8 <LoopForever+0xe>)
  movs r3, #0
 8009372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009374:	e002      	b.n	800937c <LoopCopyDataInit>

08009376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800937a:	3304      	adds	r3, #4

0800937c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800937c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800937e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009380:	d3f9      	bcc.n	8009376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009382:	4a0a      	ldr	r2, [pc, #40]	; (80093ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8009384:	4c0a      	ldr	r4, [pc, #40]	; (80093b0 <LoopForever+0x16>)
  movs r3, #0
 8009386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009388:	e001      	b.n	800938e <LoopFillZerobss>

0800938a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800938a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800938c:	3204      	adds	r2, #4

0800938e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800938e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009390:	d3fb      	bcc.n	800938a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009392:	f003 f971 	bl	800c678 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8009396:	f7fc fb77 	bl	8005a88 <main>

0800939a <LoopForever>:

LoopForever:
  b LoopForever
 800939a:	e7fe      	b.n	800939a <LoopForever>
  ldr   r0, =_estack
 800939c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80093a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80093a4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80093a8:	08012868 	.word	0x08012868
  ldr r2, =_sbss
 80093ac:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80093b0:	200005f0 	.word	0x200005f0

080093b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80093b4:	e7fe      	b.n	80093b4 <ADC1_IRQHandler>
	...

080093b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80093be:	1dfb      	adds	r3, r7, #7
 80093c0:	2200      	movs	r2, #0
 80093c2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80093c4:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <HAL_Init+0x3c>)
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <HAL_Init+0x3c>)
 80093ca:	2180      	movs	r1, #128	; 0x80
 80093cc:	0049      	lsls	r1, r1, #1
 80093ce:	430a      	orrs	r2, r1
 80093d0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80093d2:	2003      	movs	r0, #3
 80093d4:	f000 f810 	bl	80093f8 <HAL_InitTick>
 80093d8:	1e03      	subs	r3, r0, #0
 80093da:	d003      	beq.n	80093e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80093dc:	1dfb      	adds	r3, r7, #7
 80093de:	2201      	movs	r2, #1
 80093e0:	701a      	strb	r2, [r3, #0]
 80093e2:	e001      	b.n	80093e8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80093e4:	f7ff fcf4 	bl	8008dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80093e8:	1dfb      	adds	r3, r7, #7
 80093ea:	781b      	ldrb	r3, [r3, #0]
}
 80093ec:	0018      	movs	r0, r3
 80093ee:	46bd      	mov	sp, r7
 80093f0:	b002      	add	sp, #8
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	40022000 	.word	0x40022000

080093f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80093f8:	b590      	push	{r4, r7, lr}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009400:	230f      	movs	r3, #15
 8009402:	18fb      	adds	r3, r7, r3
 8009404:	2200      	movs	r2, #0
 8009406:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8009408:	4b1d      	ldr	r3, [pc, #116]	; (8009480 <HAL_InitTick+0x88>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d02b      	beq.n	8009468 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8009410:	4b1c      	ldr	r3, [pc, #112]	; (8009484 <HAL_InitTick+0x8c>)
 8009412:	681c      	ldr	r4, [r3, #0]
 8009414:	4b1a      	ldr	r3, [pc, #104]	; (8009480 <HAL_InitTick+0x88>)
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	0019      	movs	r1, r3
 800941a:	23fa      	movs	r3, #250	; 0xfa
 800941c:	0098      	lsls	r0, r3, #2
 800941e:	f7f6 fe8b 	bl	8000138 <__udivsi3>
 8009422:	0003      	movs	r3, r0
 8009424:	0019      	movs	r1, r3
 8009426:	0020      	movs	r0, r4
 8009428:	f7f6 fe86 	bl	8000138 <__udivsi3>
 800942c:	0003      	movs	r3, r0
 800942e:	0018      	movs	r0, r3
 8009430:	f000 f929 	bl	8009686 <HAL_SYSTICK_Config>
 8009434:	1e03      	subs	r3, r0, #0
 8009436:	d112      	bne.n	800945e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b03      	cmp	r3, #3
 800943c:	d80a      	bhi.n	8009454 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800943e:	6879      	ldr	r1, [r7, #4]
 8009440:	2301      	movs	r3, #1
 8009442:	425b      	negs	r3, r3
 8009444:	2200      	movs	r2, #0
 8009446:	0018      	movs	r0, r3
 8009448:	f000 f908 	bl	800965c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800944c:	4b0e      	ldr	r3, [pc, #56]	; (8009488 <HAL_InitTick+0x90>)
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	e00d      	b.n	8009470 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8009454:	230f      	movs	r3, #15
 8009456:	18fb      	adds	r3, r7, r3
 8009458:	2201      	movs	r2, #1
 800945a:	701a      	strb	r2, [r3, #0]
 800945c:	e008      	b.n	8009470 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800945e:	230f      	movs	r3, #15
 8009460:	18fb      	adds	r3, r7, r3
 8009462:	2201      	movs	r2, #1
 8009464:	701a      	strb	r2, [r3, #0]
 8009466:	e003      	b.n	8009470 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009468:	230f      	movs	r3, #15
 800946a:	18fb      	adds	r3, r7, r3
 800946c:	2201      	movs	r2, #1
 800946e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8009470:	230f      	movs	r3, #15
 8009472:	18fb      	adds	r3, r7, r3
 8009474:	781b      	ldrb	r3, [r3, #0]
}
 8009476:	0018      	movs	r0, r3
 8009478:	46bd      	mov	sp, r7
 800947a:	b005      	add	sp, #20
 800947c:	bd90      	pop	{r4, r7, pc}
 800947e:	46c0      	nop			; (mov r8, r8)
 8009480:	2000000c 	.word	0x2000000c
 8009484:	20000004 	.word	0x20000004
 8009488:	20000008 	.word	0x20000008

0800948c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009490:	4b05      	ldr	r3, [pc, #20]	; (80094a8 <HAL_IncTick+0x1c>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	001a      	movs	r2, r3
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <HAL_IncTick+0x20>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	18d2      	adds	r2, r2, r3
 800949c:	4b03      	ldr	r3, [pc, #12]	; (80094ac <HAL_IncTick+0x20>)
 800949e:	601a      	str	r2, [r3, #0]
}
 80094a0:	46c0      	nop			; (mov r8, r8)
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	46c0      	nop			; (mov r8, r8)
 80094a8:	2000000c 	.word	0x2000000c
 80094ac:	200005dc 	.word	0x200005dc

080094b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
  return uwTick;
 80094b4:	4b02      	ldr	r3, [pc, #8]	; (80094c0 <HAL_GetTick+0x10>)
 80094b6:	681b      	ldr	r3, [r3, #0]
}
 80094b8:	0018      	movs	r0, r3
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	46c0      	nop			; (mov r8, r8)
 80094c0:	200005dc 	.word	0x200005dc

080094c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80094cc:	f7ff fff0 	bl	80094b0 <HAL_GetTick>
 80094d0:	0003      	movs	r3, r0
 80094d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	d005      	beq.n	80094ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80094de:	4b0a      	ldr	r3, [pc, #40]	; (8009508 <HAL_Delay+0x44>)
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	001a      	movs	r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	189b      	adds	r3, r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80094ea:	46c0      	nop			; (mov r8, r8)
 80094ec:	f7ff ffe0 	bl	80094b0 <HAL_GetTick>
 80094f0:	0002      	movs	r2, r0
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d8f7      	bhi.n	80094ec <HAL_Delay+0x28>
  {
  }
}
 80094fc:	46c0      	nop			; (mov r8, r8)
 80094fe:	46c0      	nop			; (mov r8, r8)
 8009500:	46bd      	mov	sp, r7
 8009502:	b004      	add	sp, #16
 8009504:	bd80      	pop	{r7, pc}
 8009506:	46c0      	nop			; (mov r8, r8)
 8009508:	2000000c 	.word	0x2000000c

0800950c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8009514:	4b06      	ldr	r3, [pc, #24]	; (8009530 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a06      	ldr	r2, [pc, #24]	; (8009534 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800951a:	4013      	ands	r3, r2
 800951c:	0019      	movs	r1, r3
 800951e:	4b04      	ldr	r3, [pc, #16]	; (8009530 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	430a      	orrs	r2, r1
 8009524:	601a      	str	r2, [r3, #0]
}
 8009526:	46c0      	nop			; (mov r8, r8)
 8009528:	46bd      	mov	sp, r7
 800952a:	b002      	add	sp, #8
 800952c:	bd80      	pop	{r7, pc}
 800952e:	46c0      	nop			; (mov r8, r8)
 8009530:	40010000 	.word	0x40010000
 8009534:	fffff9ff 	.word	0xfffff9ff

08009538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009538:	b590      	push	{r4, r7, lr}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	0002      	movs	r2, r0
 8009540:	6039      	str	r1, [r7, #0]
 8009542:	1dfb      	adds	r3, r7, #7
 8009544:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009546:	1dfb      	adds	r3, r7, #7
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b7f      	cmp	r3, #127	; 0x7f
 800954c:	d828      	bhi.n	80095a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800954e:	4a2f      	ldr	r2, [pc, #188]	; (800960c <__NVIC_SetPriority+0xd4>)
 8009550:	1dfb      	adds	r3, r7, #7
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	b25b      	sxtb	r3, r3
 8009556:	089b      	lsrs	r3, r3, #2
 8009558:	33c0      	adds	r3, #192	; 0xc0
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	589b      	ldr	r3, [r3, r2]
 800955e:	1dfa      	adds	r2, r7, #7
 8009560:	7812      	ldrb	r2, [r2, #0]
 8009562:	0011      	movs	r1, r2
 8009564:	2203      	movs	r2, #3
 8009566:	400a      	ands	r2, r1
 8009568:	00d2      	lsls	r2, r2, #3
 800956a:	21ff      	movs	r1, #255	; 0xff
 800956c:	4091      	lsls	r1, r2
 800956e:	000a      	movs	r2, r1
 8009570:	43d2      	mvns	r2, r2
 8009572:	401a      	ands	r2, r3
 8009574:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	019b      	lsls	r3, r3, #6
 800957a:	22ff      	movs	r2, #255	; 0xff
 800957c:	401a      	ands	r2, r3
 800957e:	1dfb      	adds	r3, r7, #7
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	0018      	movs	r0, r3
 8009584:	2303      	movs	r3, #3
 8009586:	4003      	ands	r3, r0
 8009588:	00db      	lsls	r3, r3, #3
 800958a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800958c:	481f      	ldr	r0, [pc, #124]	; (800960c <__NVIC_SetPriority+0xd4>)
 800958e:	1dfb      	adds	r3, r7, #7
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	b25b      	sxtb	r3, r3
 8009594:	089b      	lsrs	r3, r3, #2
 8009596:	430a      	orrs	r2, r1
 8009598:	33c0      	adds	r3, #192	; 0xc0
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800959e:	e031      	b.n	8009604 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80095a0:	4a1b      	ldr	r2, [pc, #108]	; (8009610 <__NVIC_SetPriority+0xd8>)
 80095a2:	1dfb      	adds	r3, r7, #7
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	0019      	movs	r1, r3
 80095a8:	230f      	movs	r3, #15
 80095aa:	400b      	ands	r3, r1
 80095ac:	3b08      	subs	r3, #8
 80095ae:	089b      	lsrs	r3, r3, #2
 80095b0:	3306      	adds	r3, #6
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	18d3      	adds	r3, r2, r3
 80095b6:	3304      	adds	r3, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	1dfa      	adds	r2, r7, #7
 80095bc:	7812      	ldrb	r2, [r2, #0]
 80095be:	0011      	movs	r1, r2
 80095c0:	2203      	movs	r2, #3
 80095c2:	400a      	ands	r2, r1
 80095c4:	00d2      	lsls	r2, r2, #3
 80095c6:	21ff      	movs	r1, #255	; 0xff
 80095c8:	4091      	lsls	r1, r2
 80095ca:	000a      	movs	r2, r1
 80095cc:	43d2      	mvns	r2, r2
 80095ce:	401a      	ands	r2, r3
 80095d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	019b      	lsls	r3, r3, #6
 80095d6:	22ff      	movs	r2, #255	; 0xff
 80095d8:	401a      	ands	r2, r3
 80095da:	1dfb      	adds	r3, r7, #7
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	0018      	movs	r0, r3
 80095e0:	2303      	movs	r3, #3
 80095e2:	4003      	ands	r3, r0
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80095e8:	4809      	ldr	r0, [pc, #36]	; (8009610 <__NVIC_SetPriority+0xd8>)
 80095ea:	1dfb      	adds	r3, r7, #7
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	001c      	movs	r4, r3
 80095f0:	230f      	movs	r3, #15
 80095f2:	4023      	ands	r3, r4
 80095f4:	3b08      	subs	r3, #8
 80095f6:	089b      	lsrs	r3, r3, #2
 80095f8:	430a      	orrs	r2, r1
 80095fa:	3306      	adds	r3, #6
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	18c3      	adds	r3, r0, r3
 8009600:	3304      	adds	r3, #4
 8009602:	601a      	str	r2, [r3, #0]
}
 8009604:	46c0      	nop			; (mov r8, r8)
 8009606:	46bd      	mov	sp, r7
 8009608:	b003      	add	sp, #12
 800960a:	bd90      	pop	{r4, r7, pc}
 800960c:	e000e100 	.word	0xe000e100
 8009610:	e000ed00 	.word	0xe000ed00

08009614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	1e5a      	subs	r2, r3, #1
 8009620:	2380      	movs	r3, #128	; 0x80
 8009622:	045b      	lsls	r3, r3, #17
 8009624:	429a      	cmp	r2, r3
 8009626:	d301      	bcc.n	800962c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009628:	2301      	movs	r3, #1
 800962a:	e010      	b.n	800964e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800962c:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <SysTick_Config+0x44>)
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	3a01      	subs	r2, #1
 8009632:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009634:	2301      	movs	r3, #1
 8009636:	425b      	negs	r3, r3
 8009638:	2103      	movs	r1, #3
 800963a:	0018      	movs	r0, r3
 800963c:	f7ff ff7c 	bl	8009538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009640:	4b05      	ldr	r3, [pc, #20]	; (8009658 <SysTick_Config+0x44>)
 8009642:	2200      	movs	r2, #0
 8009644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009646:	4b04      	ldr	r3, [pc, #16]	; (8009658 <SysTick_Config+0x44>)
 8009648:	2207      	movs	r2, #7
 800964a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800964c:	2300      	movs	r3, #0
}
 800964e:	0018      	movs	r0, r3
 8009650:	46bd      	mov	sp, r7
 8009652:	b002      	add	sp, #8
 8009654:	bd80      	pop	{r7, pc}
 8009656:	46c0      	nop			; (mov r8, r8)
 8009658:	e000e010 	.word	0xe000e010

0800965c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	607a      	str	r2, [r7, #4]
 8009666:	210f      	movs	r1, #15
 8009668:	187b      	adds	r3, r7, r1
 800966a:	1c02      	adds	r2, r0, #0
 800966c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	187b      	adds	r3, r7, r1
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	b25b      	sxtb	r3, r3
 8009676:	0011      	movs	r1, r2
 8009678:	0018      	movs	r0, r3
 800967a:	f7ff ff5d 	bl	8009538 <__NVIC_SetPriority>
}
 800967e:	46c0      	nop			; (mov r8, r8)
 8009680:	46bd      	mov	sp, r7
 8009682:	b004      	add	sp, #16
 8009684:	bd80      	pop	{r7, pc}

08009686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	0018      	movs	r0, r3
 8009692:	f7ff ffbf 	bl	8009614 <SysTick_Config>
 8009696:	0003      	movs	r3, r0
}
 8009698:	0018      	movs	r0, r3
 800969a:	46bd      	mov	sp, r7
 800969c:	b002      	add	sp, #8
 800969e:	bd80      	pop	{r7, pc}

080096a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80096aa:	2300      	movs	r3, #0
 80096ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80096ae:	e147      	b.n	8009940 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2101      	movs	r1, #1
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	4091      	lsls	r1, r2
 80096ba:	000a      	movs	r2, r1
 80096bc:	4013      	ands	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d100      	bne.n	80096c8 <HAL_GPIO_Init+0x28>
 80096c6:	e138      	b.n	800993a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	2203      	movs	r2, #3
 80096ce:	4013      	ands	r3, r2
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d005      	beq.n	80096e0 <HAL_GPIO_Init+0x40>
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	2203      	movs	r2, #3
 80096da:	4013      	ands	r3, r2
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d130      	bne.n	8009742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	2203      	movs	r2, #3
 80096ec:	409a      	lsls	r2, r3
 80096ee:	0013      	movs	r3, r2
 80096f0:	43da      	mvns	r2, r3
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	4013      	ands	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	68da      	ldr	r2, [r3, #12]
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	409a      	lsls	r2, r3
 8009702:	0013      	movs	r3, r2
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	4313      	orrs	r3, r2
 8009708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009716:	2201      	movs	r2, #1
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	409a      	lsls	r2, r3
 800971c:	0013      	movs	r3, r2
 800971e:	43da      	mvns	r2, r3
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	4013      	ands	r3, r2
 8009724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	091b      	lsrs	r3, r3, #4
 800972c:	2201      	movs	r2, #1
 800972e:	401a      	ands	r2, r3
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	409a      	lsls	r2, r3
 8009734:	0013      	movs	r3, r2
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	4313      	orrs	r3, r2
 800973a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	2203      	movs	r2, #3
 8009748:	4013      	ands	r3, r2
 800974a:	2b03      	cmp	r3, #3
 800974c:	d017      	beq.n	800977e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	2203      	movs	r2, #3
 800975a:	409a      	lsls	r2, r3
 800975c:	0013      	movs	r3, r2
 800975e:	43da      	mvns	r2, r3
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	4013      	ands	r3, r2
 8009764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	409a      	lsls	r2, r3
 8009770:	0013      	movs	r3, r2
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	4313      	orrs	r3, r2
 8009776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	2203      	movs	r2, #3
 8009784:	4013      	ands	r3, r2
 8009786:	2b02      	cmp	r3, #2
 8009788:	d123      	bne.n	80097d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	08da      	lsrs	r2, r3, #3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	3208      	adds	r2, #8
 8009792:	0092      	lsls	r2, r2, #2
 8009794:	58d3      	ldr	r3, [r2, r3]
 8009796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2207      	movs	r2, #7
 800979c:	4013      	ands	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	220f      	movs	r2, #15
 80097a2:	409a      	lsls	r2, r3
 80097a4:	0013      	movs	r3, r2
 80097a6:	43da      	mvns	r2, r3
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	4013      	ands	r3, r2
 80097ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	691a      	ldr	r2, [r3, #16]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2107      	movs	r1, #7
 80097b6:	400b      	ands	r3, r1
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	409a      	lsls	r2, r3
 80097bc:	0013      	movs	r3, r2
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	08da      	lsrs	r2, r3, #3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3208      	adds	r2, #8
 80097cc:	0092      	lsls	r2, r2, #2
 80097ce:	6939      	ldr	r1, [r7, #16]
 80097d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	005b      	lsls	r3, r3, #1
 80097dc:	2203      	movs	r2, #3
 80097de:	409a      	lsls	r2, r3
 80097e0:	0013      	movs	r3, r2
 80097e2:	43da      	mvns	r2, r3
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	4013      	ands	r3, r2
 80097e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	2203      	movs	r2, #3
 80097f0:	401a      	ands	r2, r3
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	409a      	lsls	r2, r3
 80097f8:	0013      	movs	r3, r2
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	23c0      	movs	r3, #192	; 0xc0
 800980c:	029b      	lsls	r3, r3, #10
 800980e:	4013      	ands	r3, r2
 8009810:	d100      	bne.n	8009814 <HAL_GPIO_Init+0x174>
 8009812:	e092      	b.n	800993a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8009814:	4a50      	ldr	r2, [pc, #320]	; (8009958 <HAL_GPIO_Init+0x2b8>)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	089b      	lsrs	r3, r3, #2
 800981a:	3318      	adds	r3, #24
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	589b      	ldr	r3, [r3, r2]
 8009820:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	2203      	movs	r2, #3
 8009826:	4013      	ands	r3, r2
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	220f      	movs	r2, #15
 800982c:	409a      	lsls	r2, r3
 800982e:	0013      	movs	r3, r2
 8009830:	43da      	mvns	r2, r3
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	4013      	ands	r3, r2
 8009836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	23a0      	movs	r3, #160	; 0xa0
 800983c:	05db      	lsls	r3, r3, #23
 800983e:	429a      	cmp	r2, r3
 8009840:	d013      	beq.n	800986a <HAL_GPIO_Init+0x1ca>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a45      	ldr	r2, [pc, #276]	; (800995c <HAL_GPIO_Init+0x2bc>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00d      	beq.n	8009866 <HAL_GPIO_Init+0x1c6>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a44      	ldr	r2, [pc, #272]	; (8009960 <HAL_GPIO_Init+0x2c0>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d007      	beq.n	8009862 <HAL_GPIO_Init+0x1c2>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a43      	ldr	r2, [pc, #268]	; (8009964 <HAL_GPIO_Init+0x2c4>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d101      	bne.n	800985e <HAL_GPIO_Init+0x1be>
 800985a:	2303      	movs	r3, #3
 800985c:	e006      	b.n	800986c <HAL_GPIO_Init+0x1cc>
 800985e:	2305      	movs	r3, #5
 8009860:	e004      	b.n	800986c <HAL_GPIO_Init+0x1cc>
 8009862:	2302      	movs	r3, #2
 8009864:	e002      	b.n	800986c <HAL_GPIO_Init+0x1cc>
 8009866:	2301      	movs	r3, #1
 8009868:	e000      	b.n	800986c <HAL_GPIO_Init+0x1cc>
 800986a:	2300      	movs	r3, #0
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	2103      	movs	r1, #3
 8009870:	400a      	ands	r2, r1
 8009872:	00d2      	lsls	r2, r2, #3
 8009874:	4093      	lsls	r3, r2
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800987c:	4936      	ldr	r1, [pc, #216]	; (8009958 <HAL_GPIO_Init+0x2b8>)
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	089b      	lsrs	r3, r3, #2
 8009882:	3318      	adds	r3, #24
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800988a:	4a33      	ldr	r2, [pc, #204]	; (8009958 <HAL_GPIO_Init+0x2b8>)
 800988c:	2380      	movs	r3, #128	; 0x80
 800988e:	58d3      	ldr	r3, [r2, r3]
 8009890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	43da      	mvns	r2, r3
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	4013      	ands	r3, r2
 800989a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	2380      	movs	r3, #128	; 0x80
 80098a2:	025b      	lsls	r3, r3, #9
 80098a4:	4013      	ands	r3, r2
 80098a6:	d003      	beq.n	80098b0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80098b0:	4929      	ldr	r1, [pc, #164]	; (8009958 <HAL_GPIO_Init+0x2b8>)
 80098b2:	2280      	movs	r2, #128	; 0x80
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80098b8:	4a27      	ldr	r2, [pc, #156]	; (8009958 <HAL_GPIO_Init+0x2b8>)
 80098ba:	2384      	movs	r3, #132	; 0x84
 80098bc:	58d3      	ldr	r3, [r2, r3]
 80098be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	43da      	mvns	r2, r3
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	4013      	ands	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	2380      	movs	r3, #128	; 0x80
 80098d0:	029b      	lsls	r3, r3, #10
 80098d2:	4013      	ands	r3, r2
 80098d4:	d003      	beq.n	80098de <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4313      	orrs	r3, r2
 80098dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80098de:	491e      	ldr	r1, [pc, #120]	; (8009958 <HAL_GPIO_Init+0x2b8>)
 80098e0:	2284      	movs	r2, #132	; 0x84
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80098e6:	4b1c      	ldr	r3, [pc, #112]	; (8009958 <HAL_GPIO_Init+0x2b8>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	43da      	mvns	r2, r3
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	4013      	ands	r3, r2
 80098f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	2380      	movs	r3, #128	; 0x80
 80098fc:	035b      	lsls	r3, r3, #13
 80098fe:	4013      	ands	r3, r2
 8009900:	d003      	beq.n	800990a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4313      	orrs	r3, r2
 8009908:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800990a:	4b13      	ldr	r3, [pc, #76]	; (8009958 <HAL_GPIO_Init+0x2b8>)
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8009910:	4b11      	ldr	r3, [pc, #68]	; (8009958 <HAL_GPIO_Init+0x2b8>)
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	43da      	mvns	r2, r3
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	4013      	ands	r3, r2
 800991e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	2380      	movs	r3, #128	; 0x80
 8009926:	039b      	lsls	r3, r3, #14
 8009928:	4013      	ands	r3, r2
 800992a:	d003      	beq.n	8009934 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4313      	orrs	r3, r2
 8009932:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009934:	4b08      	ldr	r3, [pc, #32]	; (8009958 <HAL_GPIO_Init+0x2b8>)
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	3301      	adds	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	40da      	lsrs	r2, r3
 8009948:	1e13      	subs	r3, r2, #0
 800994a:	d000      	beq.n	800994e <HAL_GPIO_Init+0x2ae>
 800994c:	e6b0      	b.n	80096b0 <HAL_GPIO_Init+0x10>
  }
}
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	46c0      	nop			; (mov r8, r8)
 8009952:	46bd      	mov	sp, r7
 8009954:	b006      	add	sp, #24
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40021800 	.word	0x40021800
 800995c:	50000400 	.word	0x50000400
 8009960:	50000800 	.word	0x50000800
 8009964:	50000c00 	.word	0x50000c00

08009968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	0008      	movs	r0, r1
 8009972:	0011      	movs	r1, r2
 8009974:	1cbb      	adds	r3, r7, #2
 8009976:	1c02      	adds	r2, r0, #0
 8009978:	801a      	strh	r2, [r3, #0]
 800997a:	1c7b      	adds	r3, r7, #1
 800997c:	1c0a      	adds	r2, r1, #0
 800997e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009980:	1c7b      	adds	r3, r7, #1
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d004      	beq.n	8009992 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009988:	1cbb      	adds	r3, r7, #2
 800998a:	881a      	ldrh	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009990:	e003      	b.n	800999a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009992:	1cbb      	adds	r3, r7, #2
 8009994:	881a      	ldrh	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	629a      	str	r2, [r3, #40]	; 0x28
}
 800999a:	46c0      	nop			; (mov r8, r8)
 800999c:	46bd      	mov	sp, r7
 800999e:	b002      	add	sp, #8
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e082      	b.n	8009abc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2241      	movs	r2, #65	; 0x41
 80099ba:	5c9b      	ldrb	r3, [r3, r2]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d107      	bne.n	80099d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2240      	movs	r2, #64	; 0x40
 80099c6:	2100      	movs	r1, #0
 80099c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	0018      	movs	r0, r3
 80099ce:	f7ff fa27 	bl	8008e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2241      	movs	r2, #65	; 0x41
 80099d6:	2124      	movs	r1, #36	; 0x24
 80099d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2101      	movs	r1, #1
 80099e6:	438a      	bics	r2, r1
 80099e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4934      	ldr	r1, [pc, #208]	; (8009ac4 <HAL_I2C_Init+0x120>)
 80099f4:	400a      	ands	r2, r1
 80099f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	689a      	ldr	r2, [r3, #8]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4931      	ldr	r1, [pc, #196]	; (8009ac8 <HAL_I2C_Init+0x124>)
 8009a04:	400a      	ands	r2, r1
 8009a06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d108      	bne.n	8009a22 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2180      	movs	r1, #128	; 0x80
 8009a1a:	0209      	lsls	r1, r1, #8
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	609a      	str	r2, [r3, #8]
 8009a20:	e007      	b.n	8009a32 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689a      	ldr	r2, [r3, #8]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2184      	movs	r1, #132	; 0x84
 8009a2c:	0209      	lsls	r1, r1, #8
 8009a2e:	430a      	orrs	r2, r1
 8009a30:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d104      	bne.n	8009a44 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2280      	movs	r2, #128	; 0x80
 8009a40:	0112      	lsls	r2, r2, #4
 8009a42:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	685a      	ldr	r2, [r3, #4]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	491f      	ldr	r1, [pc, #124]	; (8009acc <HAL_I2C_Init+0x128>)
 8009a50:	430a      	orrs	r2, r1
 8009a52:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68da      	ldr	r2, [r3, #12]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	491a      	ldr	r1, [pc, #104]	; (8009ac8 <HAL_I2C_Init+0x124>)
 8009a60:	400a      	ands	r2, r1
 8009a62:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	691a      	ldr	r2, [r3, #16]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	695b      	ldr	r3, [r3, #20]
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	69d9      	ldr	r1, [r3, #28]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1a      	ldr	r2, [r3, #32]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2101      	movs	r1, #1
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2241      	movs	r2, #65	; 0x41
 8009aa8:	2120      	movs	r1, #32
 8009aaa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2242      	movs	r2, #66	; 0x42
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	0018      	movs	r0, r3
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	b002      	add	sp, #8
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	f0ffffff 	.word	0xf0ffffff
 8009ac8:	ffff7fff 	.word	0xffff7fff
 8009acc:	02008000 	.word	0x02008000

08009ad0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2241      	movs	r2, #65	; 0x41
 8009ade:	5c9b      	ldrb	r3, [r3, r2]
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b20      	cmp	r3, #32
 8009ae4:	d138      	bne.n	8009b58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2240      	movs	r2, #64	; 0x40
 8009aea:	5c9b      	ldrb	r3, [r3, r2]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d101      	bne.n	8009af4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009af0:	2302      	movs	r3, #2
 8009af2:	e032      	b.n	8009b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2240      	movs	r2, #64	; 0x40
 8009af8:	2101      	movs	r1, #1
 8009afa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2241      	movs	r2, #65	; 0x41
 8009b00:	2124      	movs	r1, #36	; 0x24
 8009b02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2101      	movs	r1, #1
 8009b10:	438a      	bics	r2, r1
 8009b12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4911      	ldr	r1, [pc, #68]	; (8009b64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009b20:	400a      	ands	r2, r1
 8009b22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6819      	ldr	r1, [r3, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	430a      	orrs	r2, r1
 8009b32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2101      	movs	r1, #1
 8009b40:	430a      	orrs	r2, r1
 8009b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2241      	movs	r2, #65	; 0x41
 8009b48:	2120      	movs	r1, #32
 8009b4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2240      	movs	r2, #64	; 0x40
 8009b50:	2100      	movs	r1, #0
 8009b52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	e000      	b.n	8009b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b58:	2302      	movs	r3, #2
  }
}
 8009b5a:	0018      	movs	r0, r3
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	b002      	add	sp, #8
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	46c0      	nop			; (mov r8, r8)
 8009b64:	ffffefff 	.word	0xffffefff

08009b68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2241      	movs	r2, #65	; 0x41
 8009b76:	5c9b      	ldrb	r3, [r3, r2]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	d139      	bne.n	8009bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2240      	movs	r2, #64	; 0x40
 8009b82:	5c9b      	ldrb	r3, [r3, r2]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e033      	b.n	8009bf4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2240      	movs	r2, #64	; 0x40
 8009b90:	2101      	movs	r1, #1
 8009b92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2241      	movs	r2, #65	; 0x41
 8009b98:	2124      	movs	r1, #36	; 0x24
 8009b9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	438a      	bics	r2, r1
 8009baa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4a11      	ldr	r2, [pc, #68]	; (8009bfc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009bb8:	4013      	ands	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	021b      	lsls	r3, r3, #8
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2101      	movs	r1, #1
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2241      	movs	r2, #65	; 0x41
 8009be2:	2120      	movs	r1, #32
 8009be4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2240      	movs	r2, #64	; 0x40
 8009bea:	2100      	movs	r1, #0
 8009bec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e000      	b.n	8009bf4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009bf2:	2302      	movs	r3, #2
  }
}
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	b004      	add	sp, #16
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	fffff0ff 	.word	0xfffff0ff

08009c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009c08:	4b19      	ldr	r3, [pc, #100]	; (8009c70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a19      	ldr	r2, [pc, #100]	; (8009c74 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009c0e:	4013      	ands	r3, r2
 8009c10:	0019      	movs	r1, r3
 8009c12:	4b17      	ldr	r3, [pc, #92]	; (8009c70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d11f      	bne.n	8009c64 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009c24:	4b14      	ldr	r3, [pc, #80]	; (8009c78 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	0013      	movs	r3, r2
 8009c2a:	005b      	lsls	r3, r3, #1
 8009c2c:	189b      	adds	r3, r3, r2
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	4912      	ldr	r1, [pc, #72]	; (8009c7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009c32:	0018      	movs	r0, r3
 8009c34:	f7f6 fa80 	bl	8000138 <__udivsi3>
 8009c38:	0003      	movs	r3, r0
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009c3e:	e008      	b.n	8009c52 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	e001      	b.n	8009c52 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e009      	b.n	8009c66 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009c52:	4b07      	ldr	r3, [pc, #28]	; (8009c70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009c54:	695a      	ldr	r2, [r3, #20]
 8009c56:	2380      	movs	r3, #128	; 0x80
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	401a      	ands	r2, r3
 8009c5c:	2380      	movs	r3, #128	; 0x80
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d0ed      	beq.n	8009c40 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	0018      	movs	r0, r3
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	b004      	add	sp, #16
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	46c0      	nop			; (mov r8, r8)
 8009c70:	40007000 	.word	0x40007000
 8009c74:	fffff9ff 	.word	0xfffff9ff
 8009c78:	20000004 	.word	0x20000004
 8009c7c:	000f4240 	.word	0x000f4240

08009c80 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009c84:	4b03      	ldr	r3, [pc, #12]	; (8009c94 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	23e0      	movs	r3, #224	; 0xe0
 8009c8a:	01db      	lsls	r3, r3, #7
 8009c8c:	4013      	ands	r3, r2
}
 8009c8e:	0018      	movs	r0, r3
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	40021000 	.word	0x40021000

08009c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b088      	sub	sp, #32
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d101      	bne.n	8009caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e2f9      	b.n	800a29e <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	d100      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x1e>
 8009cb4:	e07c      	b.n	8009db0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cb6:	4bc3      	ldr	r3, [pc, #780]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	2238      	movs	r2, #56	; 0x38
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009cc0:	4bc0      	ldr	r3, [pc, #768]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	2203      	movs	r2, #3
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	2b10      	cmp	r3, #16
 8009cce:	d102      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x3e>
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d002      	beq.n	8009cdc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	2b08      	cmp	r3, #8
 8009cda:	d10b      	bne.n	8009cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cdc:	4bb9      	ldr	r3, [pc, #740]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	2380      	movs	r3, #128	; 0x80
 8009ce2:	029b      	lsls	r3, r3, #10
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	d062      	beq.n	8009dae <HAL_RCC_OscConfig+0x116>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d15e      	bne.n	8009dae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e2d4      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	025b      	lsls	r3, r3, #9
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d107      	bne.n	8009d10 <HAL_RCC_OscConfig+0x78>
 8009d00:	4bb0      	ldr	r3, [pc, #704]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	4baf      	ldr	r3, [pc, #700]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009d06:	2180      	movs	r1, #128	; 0x80
 8009d08:	0249      	lsls	r1, r1, #9
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	601a      	str	r2, [r3, #0]
 8009d0e:	e020      	b.n	8009d52 <HAL_RCC_OscConfig+0xba>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	23a0      	movs	r3, #160	; 0xa0
 8009d16:	02db      	lsls	r3, r3, #11
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d10e      	bne.n	8009d3a <HAL_RCC_OscConfig+0xa2>
 8009d1c:	4ba9      	ldr	r3, [pc, #676]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	4ba8      	ldr	r3, [pc, #672]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009d22:	2180      	movs	r1, #128	; 0x80
 8009d24:	02c9      	lsls	r1, r1, #11
 8009d26:	430a      	orrs	r2, r1
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	4ba6      	ldr	r3, [pc, #664]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	4ba5      	ldr	r3, [pc, #660]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009d30:	2180      	movs	r1, #128	; 0x80
 8009d32:	0249      	lsls	r1, r1, #9
 8009d34:	430a      	orrs	r2, r1
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	e00b      	b.n	8009d52 <HAL_RCC_OscConfig+0xba>
 8009d3a:	4ba2      	ldr	r3, [pc, #648]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	4ba1      	ldr	r3, [pc, #644]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009d40:	49a1      	ldr	r1, [pc, #644]	; (8009fc8 <HAL_RCC_OscConfig+0x330>)
 8009d42:	400a      	ands	r2, r1
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	4b9f      	ldr	r3, [pc, #636]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	4b9e      	ldr	r3, [pc, #632]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009d4c:	499f      	ldr	r1, [pc, #636]	; (8009fcc <HAL_RCC_OscConfig+0x334>)
 8009d4e:	400a      	ands	r2, r1
 8009d50:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d014      	beq.n	8009d84 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d5a:	f7ff fba9 	bl	80094b0 <HAL_GetTick>
 8009d5e:	0003      	movs	r3, r0
 8009d60:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d62:	e008      	b.n	8009d76 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d64:	f7ff fba4 	bl	80094b0 <HAL_GetTick>
 8009d68:	0002      	movs	r2, r0
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	2b64      	cmp	r3, #100	; 0x64
 8009d70:	d901      	bls.n	8009d76 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e293      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d76:	4b93      	ldr	r3, [pc, #588]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	2380      	movs	r3, #128	; 0x80
 8009d7c:	029b      	lsls	r3, r3, #10
 8009d7e:	4013      	ands	r3, r2
 8009d80:	d0f0      	beq.n	8009d64 <HAL_RCC_OscConfig+0xcc>
 8009d82:	e015      	b.n	8009db0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d84:	f7ff fb94 	bl	80094b0 <HAL_GetTick>
 8009d88:	0003      	movs	r3, r0
 8009d8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d8c:	e008      	b.n	8009da0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d8e:	f7ff fb8f 	bl	80094b0 <HAL_GetTick>
 8009d92:	0002      	movs	r2, r0
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	2b64      	cmp	r3, #100	; 0x64
 8009d9a:	d901      	bls.n	8009da0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e27e      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009da0:	4b88      	ldr	r3, [pc, #544]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	2380      	movs	r3, #128	; 0x80
 8009da6:	029b      	lsls	r3, r3, #10
 8009da8:	4013      	ands	r3, r2
 8009daa:	d1f0      	bne.n	8009d8e <HAL_RCC_OscConfig+0xf6>
 8009dac:	e000      	b.n	8009db0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2202      	movs	r2, #2
 8009db6:	4013      	ands	r3, r2
 8009db8:	d100      	bne.n	8009dbc <HAL_RCC_OscConfig+0x124>
 8009dba:	e099      	b.n	8009ef0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dbc:	4b81      	ldr	r3, [pc, #516]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	2238      	movs	r2, #56	; 0x38
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009dc6:	4b7f      	ldr	r3, [pc, #508]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	2203      	movs	r2, #3
 8009dcc:	4013      	ands	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	2b10      	cmp	r3, #16
 8009dd4:	d102      	bne.n	8009ddc <HAL_RCC_OscConfig+0x144>
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d002      	beq.n	8009de2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d135      	bne.n	8009e4e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009de2:	4b78      	ldr	r3, [pc, #480]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	2380      	movs	r3, #128	; 0x80
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	4013      	ands	r3, r2
 8009dec:	d005      	beq.n	8009dfa <HAL_RCC_OscConfig+0x162>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e251      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dfa:	4b72      	ldr	r3, [pc, #456]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	4a74      	ldr	r2, [pc, #464]	; (8009fd0 <HAL_RCC_OscConfig+0x338>)
 8009e00:	4013      	ands	r3, r2
 8009e02:	0019      	movs	r1, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	021a      	lsls	r2, r3, #8
 8009e0a:	4b6e      	ldr	r3, [pc, #440]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d112      	bne.n	8009e3c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009e16:	4b6b      	ldr	r3, [pc, #428]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a6e      	ldr	r2, [pc, #440]	; (8009fd4 <HAL_RCC_OscConfig+0x33c>)
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	0019      	movs	r1, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	4b67      	ldr	r3, [pc, #412]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009e26:	430a      	orrs	r2, r1
 8009e28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009e2a:	4b66      	ldr	r3, [pc, #408]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	0adb      	lsrs	r3, r3, #11
 8009e30:	2207      	movs	r2, #7
 8009e32:	4013      	ands	r3, r2
 8009e34:	4a68      	ldr	r2, [pc, #416]	; (8009fd8 <HAL_RCC_OscConfig+0x340>)
 8009e36:	40da      	lsrs	r2, r3
 8009e38:	4b68      	ldr	r3, [pc, #416]	; (8009fdc <HAL_RCC_OscConfig+0x344>)
 8009e3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009e3c:	4b68      	ldr	r3, [pc, #416]	; (8009fe0 <HAL_RCC_OscConfig+0x348>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	0018      	movs	r0, r3
 8009e42:	f7ff fad9 	bl	80093f8 <HAL_InitTick>
 8009e46:	1e03      	subs	r3, r0, #0
 8009e48:	d051      	beq.n	8009eee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e227      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d030      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009e56:	4b5b      	ldr	r3, [pc, #364]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a5e      	ldr	r2, [pc, #376]	; (8009fd4 <HAL_RCC_OscConfig+0x33c>)
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	0019      	movs	r1, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	691a      	ldr	r2, [r3, #16]
 8009e64:	4b57      	ldr	r3, [pc, #348]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009e66:	430a      	orrs	r2, r1
 8009e68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009e6a:	4b56      	ldr	r3, [pc, #344]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	4b55      	ldr	r3, [pc, #340]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009e70:	2180      	movs	r1, #128	; 0x80
 8009e72:	0049      	lsls	r1, r1, #1
 8009e74:	430a      	orrs	r2, r1
 8009e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e78:	f7ff fb1a 	bl	80094b0 <HAL_GetTick>
 8009e7c:	0003      	movs	r3, r0
 8009e7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e80:	e008      	b.n	8009e94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e82:	f7ff fb15 	bl	80094b0 <HAL_GetTick>
 8009e86:	0002      	movs	r2, r0
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d901      	bls.n	8009e94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e204      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e94:	4b4b      	ldr	r3, [pc, #300]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	2380      	movs	r3, #128	; 0x80
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	d0f0      	beq.n	8009e82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ea0:	4b48      	ldr	r3, [pc, #288]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	4a4a      	ldr	r2, [pc, #296]	; (8009fd0 <HAL_RCC_OscConfig+0x338>)
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	0019      	movs	r1, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	021a      	lsls	r2, r3, #8
 8009eb0:	4b44      	ldr	r3, [pc, #272]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	605a      	str	r2, [r3, #4]
 8009eb6:	e01b      	b.n	8009ef0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009eb8:	4b42      	ldr	r3, [pc, #264]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	4b41      	ldr	r3, [pc, #260]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009ebe:	4949      	ldr	r1, [pc, #292]	; (8009fe4 <HAL_RCC_OscConfig+0x34c>)
 8009ec0:	400a      	ands	r2, r1
 8009ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec4:	f7ff faf4 	bl	80094b0 <HAL_GetTick>
 8009ec8:	0003      	movs	r3, r0
 8009eca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ecc:	e008      	b.n	8009ee0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ece:	f7ff faef 	bl	80094b0 <HAL_GetTick>
 8009ed2:	0002      	movs	r2, r0
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d901      	bls.n	8009ee0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e1de      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ee0:	4b38      	ldr	r3, [pc, #224]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	2380      	movs	r3, #128	; 0x80
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	4013      	ands	r3, r2
 8009eea:	d1f0      	bne.n	8009ece <HAL_RCC_OscConfig+0x236>
 8009eec:	e000      	b.n	8009ef0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009eee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2208      	movs	r2, #8
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	d047      	beq.n	8009f8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009efa:	4b32      	ldr	r3, [pc, #200]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	2238      	movs	r2, #56	; 0x38
 8009f00:	4013      	ands	r3, r2
 8009f02:	2b18      	cmp	r3, #24
 8009f04:	d10a      	bne.n	8009f1c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009f06:	4b2f      	ldr	r3, [pc, #188]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	d03c      	beq.n	8009f8a <HAL_RCC_OscConfig+0x2f2>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d138      	bne.n	8009f8a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e1c0      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d019      	beq.n	8009f58 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009f24:	4b27      	ldr	r3, [pc, #156]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009f26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009f28:	4b26      	ldr	r3, [pc, #152]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f30:	f7ff fabe 	bl	80094b0 <HAL_GetTick>
 8009f34:	0003      	movs	r3, r0
 8009f36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f38:	e008      	b.n	8009f4c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f3a:	f7ff fab9 	bl	80094b0 <HAL_GetTick>
 8009f3e:	0002      	movs	r2, r0
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d901      	bls.n	8009f4c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e1a8      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f4c:	4b1d      	ldr	r3, [pc, #116]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f50:	2202      	movs	r2, #2
 8009f52:	4013      	ands	r3, r2
 8009f54:	d0f1      	beq.n	8009f3a <HAL_RCC_OscConfig+0x2a2>
 8009f56:	e018      	b.n	8009f8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009f58:	4b1a      	ldr	r3, [pc, #104]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009f5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009f5c:	4b19      	ldr	r3, [pc, #100]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009f5e:	2101      	movs	r1, #1
 8009f60:	438a      	bics	r2, r1
 8009f62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f64:	f7ff faa4 	bl	80094b0 <HAL_GetTick>
 8009f68:	0003      	movs	r3, r0
 8009f6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009f6c:	e008      	b.n	8009f80 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f6e:	f7ff fa9f 	bl	80094b0 <HAL_GetTick>
 8009f72:	0002      	movs	r2, r0
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d901      	bls.n	8009f80 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e18e      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009f80:	4b10      	ldr	r3, [pc, #64]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f84:	2202      	movs	r2, #2
 8009f86:	4013      	ands	r3, r2
 8009f88:	d1f1      	bne.n	8009f6e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2204      	movs	r2, #4
 8009f90:	4013      	ands	r3, r2
 8009f92:	d100      	bne.n	8009f96 <HAL_RCC_OscConfig+0x2fe>
 8009f94:	e0c6      	b.n	800a124 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f96:	231f      	movs	r3, #31
 8009f98:	18fb      	adds	r3, r7, r3
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009f9e:	4b09      	ldr	r3, [pc, #36]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	2238      	movs	r2, #56	; 0x38
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	2b20      	cmp	r3, #32
 8009fa8:	d11e      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009faa:	4b06      	ldr	r3, [pc, #24]	; (8009fc4 <HAL_RCC_OscConfig+0x32c>)
 8009fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fae:	2202      	movs	r2, #2
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	d100      	bne.n	8009fb6 <HAL_RCC_OscConfig+0x31e>
 8009fb4:	e0b6      	b.n	800a124 <HAL_RCC_OscConfig+0x48c>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d000      	beq.n	8009fc0 <HAL_RCC_OscConfig+0x328>
 8009fbe:	e0b1      	b.n	800a124 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e16c      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
 8009fc4:	40021000 	.word	0x40021000
 8009fc8:	fffeffff 	.word	0xfffeffff
 8009fcc:	fffbffff 	.word	0xfffbffff
 8009fd0:	ffff80ff 	.word	0xffff80ff
 8009fd4:	ffffc7ff 	.word	0xffffc7ff
 8009fd8:	00f42400 	.word	0x00f42400
 8009fdc:	20000004 	.word	0x20000004
 8009fe0:	20000008 	.word	0x20000008
 8009fe4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009fe8:	4baf      	ldr	r3, [pc, #700]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 8009fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fec:	2380      	movs	r3, #128	; 0x80
 8009fee:	055b      	lsls	r3, r3, #21
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	d101      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x360>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e000      	b.n	8009ffa <HAL_RCC_OscConfig+0x362>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d011      	beq.n	800a022 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009ffe:	4baa      	ldr	r3, [pc, #680]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a002:	4ba9      	ldr	r3, [pc, #676]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a004:	2180      	movs	r1, #128	; 0x80
 800a006:	0549      	lsls	r1, r1, #21
 800a008:	430a      	orrs	r2, r1
 800a00a:	63da      	str	r2, [r3, #60]	; 0x3c
 800a00c:	4ba6      	ldr	r3, [pc, #664]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a00e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a010:	2380      	movs	r3, #128	; 0x80
 800a012:	055b      	lsls	r3, r3, #21
 800a014:	4013      	ands	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
 800a018:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a01a:	231f      	movs	r3, #31
 800a01c:	18fb      	adds	r3, r7, r3
 800a01e:	2201      	movs	r2, #1
 800a020:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a022:	4ba2      	ldr	r3, [pc, #648]	; (800a2ac <HAL_RCC_OscConfig+0x614>)
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	2380      	movs	r3, #128	; 0x80
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	4013      	ands	r3, r2
 800a02c:	d11a      	bne.n	800a064 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a02e:	4b9f      	ldr	r3, [pc, #636]	; (800a2ac <HAL_RCC_OscConfig+0x614>)
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	4b9e      	ldr	r3, [pc, #632]	; (800a2ac <HAL_RCC_OscConfig+0x614>)
 800a034:	2180      	movs	r1, #128	; 0x80
 800a036:	0049      	lsls	r1, r1, #1
 800a038:	430a      	orrs	r2, r1
 800a03a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a03c:	f7ff fa38 	bl	80094b0 <HAL_GetTick>
 800a040:	0003      	movs	r3, r0
 800a042:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a044:	e008      	b.n	800a058 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a046:	f7ff fa33 	bl	80094b0 <HAL_GetTick>
 800a04a:	0002      	movs	r2, r0
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d901      	bls.n	800a058 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e122      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a058:	4b94      	ldr	r3, [pc, #592]	; (800a2ac <HAL_RCC_OscConfig+0x614>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	2380      	movs	r3, #128	; 0x80
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	4013      	ands	r3, r2
 800a062:	d0f0      	beq.n	800a046 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d106      	bne.n	800a07a <HAL_RCC_OscConfig+0x3e2>
 800a06c:	4b8e      	ldr	r3, [pc, #568]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a06e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a070:	4b8d      	ldr	r3, [pc, #564]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a072:	2101      	movs	r1, #1
 800a074:	430a      	orrs	r2, r1
 800a076:	65da      	str	r2, [r3, #92]	; 0x5c
 800a078:	e01c      	b.n	800a0b4 <HAL_RCC_OscConfig+0x41c>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	2b05      	cmp	r3, #5
 800a080:	d10c      	bne.n	800a09c <HAL_RCC_OscConfig+0x404>
 800a082:	4b89      	ldr	r3, [pc, #548]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a084:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a086:	4b88      	ldr	r3, [pc, #544]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a088:	2104      	movs	r1, #4
 800a08a:	430a      	orrs	r2, r1
 800a08c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a08e:	4b86      	ldr	r3, [pc, #536]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a090:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a092:	4b85      	ldr	r3, [pc, #532]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a094:	2101      	movs	r1, #1
 800a096:	430a      	orrs	r2, r1
 800a098:	65da      	str	r2, [r3, #92]	; 0x5c
 800a09a:	e00b      	b.n	800a0b4 <HAL_RCC_OscConfig+0x41c>
 800a09c:	4b82      	ldr	r3, [pc, #520]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a09e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0a0:	4b81      	ldr	r3, [pc, #516]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	438a      	bics	r2, r1
 800a0a6:	65da      	str	r2, [r3, #92]	; 0x5c
 800a0a8:	4b7f      	ldr	r3, [pc, #508]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a0aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0ac:	4b7e      	ldr	r3, [pc, #504]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a0ae:	2104      	movs	r1, #4
 800a0b0:	438a      	bics	r2, r1
 800a0b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d014      	beq.n	800a0e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0bc:	f7ff f9f8 	bl	80094b0 <HAL_GetTick>
 800a0c0:	0003      	movs	r3, r0
 800a0c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0c4:	e009      	b.n	800a0da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0c6:	f7ff f9f3 	bl	80094b0 <HAL_GetTick>
 800a0ca:	0002      	movs	r2, r0
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	4a77      	ldr	r2, [pc, #476]	; (800a2b0 <HAL_RCC_OscConfig+0x618>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e0e1      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0da:	4b73      	ldr	r3, [pc, #460]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a0dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0de:	2202      	movs	r2, #2
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	d0f0      	beq.n	800a0c6 <HAL_RCC_OscConfig+0x42e>
 800a0e4:	e013      	b.n	800a10e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e6:	f7ff f9e3 	bl	80094b0 <HAL_GetTick>
 800a0ea:	0003      	movs	r3, r0
 800a0ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a0ee:	e009      	b.n	800a104 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0f0:	f7ff f9de 	bl	80094b0 <HAL_GetTick>
 800a0f4:	0002      	movs	r2, r0
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	4a6d      	ldr	r2, [pc, #436]	; (800a2b0 <HAL_RCC_OscConfig+0x618>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d901      	bls.n	800a104 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e0cc      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a104:	4b68      	ldr	r3, [pc, #416]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a108:	2202      	movs	r2, #2
 800a10a:	4013      	ands	r3, r2
 800a10c:	d1f0      	bne.n	800a0f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a10e:	231f      	movs	r3, #31
 800a110:	18fb      	adds	r3, r7, r3
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d105      	bne.n	800a124 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a118:	4b63      	ldr	r3, [pc, #396]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a11a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a11c:	4b62      	ldr	r3, [pc, #392]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a11e:	4965      	ldr	r1, [pc, #404]	; (800a2b4 <HAL_RCC_OscConfig+0x61c>)
 800a120:	400a      	ands	r2, r1
 800a122:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	69db      	ldr	r3, [r3, #28]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d100      	bne.n	800a12e <HAL_RCC_OscConfig+0x496>
 800a12c:	e0b6      	b.n	800a29c <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a12e:	4b5e      	ldr	r3, [pc, #376]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	2238      	movs	r2, #56	; 0x38
 800a134:	4013      	ands	r3, r2
 800a136:	2b10      	cmp	r3, #16
 800a138:	d100      	bne.n	800a13c <HAL_RCC_OscConfig+0x4a4>
 800a13a:	e07e      	b.n	800a23a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	2b02      	cmp	r3, #2
 800a142:	d153      	bne.n	800a1ec <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a144:	4b58      	ldr	r3, [pc, #352]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	4b57      	ldr	r3, [pc, #348]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a14a:	495b      	ldr	r1, [pc, #364]	; (800a2b8 <HAL_RCC_OscConfig+0x620>)
 800a14c:	400a      	ands	r2, r1
 800a14e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a150:	f7ff f9ae 	bl	80094b0 <HAL_GetTick>
 800a154:	0003      	movs	r3, r0
 800a156:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a158:	e008      	b.n	800a16c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a15a:	f7ff f9a9 	bl	80094b0 <HAL_GetTick>
 800a15e:	0002      	movs	r2, r0
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	2b02      	cmp	r3, #2
 800a166:	d901      	bls.n	800a16c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a168:	2303      	movs	r3, #3
 800a16a:	e098      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a16c:	4b4e      	ldr	r3, [pc, #312]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	2380      	movs	r3, #128	; 0x80
 800a172:	049b      	lsls	r3, r3, #18
 800a174:	4013      	ands	r3, r2
 800a176:	d1f0      	bne.n	800a15a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a178:	4b4b      	ldr	r3, [pc, #300]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	4a4f      	ldr	r2, [pc, #316]	; (800a2bc <HAL_RCC_OscConfig+0x624>)
 800a17e:	4013      	ands	r3, r2
 800a180:	0019      	movs	r1, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1a      	ldr	r2, [r3, #32]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	431a      	orrs	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	431a      	orrs	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	431a      	orrs	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	4b41      	ldr	r3, [pc, #260]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1a6:	4b40      	ldr	r3, [pc, #256]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	4b3f      	ldr	r3, [pc, #252]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a1ac:	2180      	movs	r1, #128	; 0x80
 800a1ae:	0449      	lsls	r1, r1, #17
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a1b4:	4b3c      	ldr	r3, [pc, #240]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a1b6:	68da      	ldr	r2, [r3, #12]
 800a1b8:	4b3b      	ldr	r3, [pc, #236]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a1ba:	2180      	movs	r1, #128	; 0x80
 800a1bc:	0549      	lsls	r1, r1, #21
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1c2:	f7ff f975 	bl	80094b0 <HAL_GetTick>
 800a1c6:	0003      	movs	r3, r0
 800a1c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1ca:	e008      	b.n	800a1de <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1cc:	f7ff f970 	bl	80094b0 <HAL_GetTick>
 800a1d0:	0002      	movs	r2, r0
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d901      	bls.n	800a1de <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e05f      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1de:	4b32      	ldr	r3, [pc, #200]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	2380      	movs	r3, #128	; 0x80
 800a1e4:	049b      	lsls	r3, r3, #18
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	d0f0      	beq.n	800a1cc <HAL_RCC_OscConfig+0x534>
 800a1ea:	e057      	b.n	800a29c <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1ec:	4b2e      	ldr	r3, [pc, #184]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	4b2d      	ldr	r3, [pc, #180]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a1f2:	4931      	ldr	r1, [pc, #196]	; (800a2b8 <HAL_RCC_OscConfig+0x620>)
 800a1f4:	400a      	ands	r2, r1
 800a1f6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800a1f8:	4b2b      	ldr	r3, [pc, #172]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a1fa:	68da      	ldr	r2, [r3, #12]
 800a1fc:	4b2a      	ldr	r3, [pc, #168]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a1fe:	2103      	movs	r1, #3
 800a200:	438a      	bics	r2, r1
 800a202:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800a204:	4b28      	ldr	r3, [pc, #160]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a206:	68da      	ldr	r2, [r3, #12]
 800a208:	4b27      	ldr	r3, [pc, #156]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a20a:	492d      	ldr	r1, [pc, #180]	; (800a2c0 <HAL_RCC_OscConfig+0x628>)
 800a20c:	400a      	ands	r2, r1
 800a20e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a210:	f7ff f94e 	bl	80094b0 <HAL_GetTick>
 800a214:	0003      	movs	r3, r0
 800a216:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a218:	e008      	b.n	800a22c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a21a:	f7ff f949 	bl	80094b0 <HAL_GetTick>
 800a21e:	0002      	movs	r2, r0
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	2b02      	cmp	r3, #2
 800a226:	d901      	bls.n	800a22c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e038      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a22c:	4b1e      	ldr	r3, [pc, #120]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	2380      	movs	r3, #128	; 0x80
 800a232:	049b      	lsls	r3, r3, #18
 800a234:	4013      	ands	r3, r2
 800a236:	d1f0      	bne.n	800a21a <HAL_RCC_OscConfig+0x582>
 800a238:	e030      	b.n	800a29c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d101      	bne.n	800a246 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e02b      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a246:	4b18      	ldr	r3, [pc, #96]	; (800a2a8 <HAL_RCC_OscConfig+0x610>)
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	2203      	movs	r2, #3
 800a250:	401a      	ands	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	429a      	cmp	r2, r3
 800a258:	d11e      	bne.n	800a298 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2270      	movs	r2, #112	; 0x70
 800a25e:	401a      	ands	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a264:	429a      	cmp	r2, r3
 800a266:	d117      	bne.n	800a298 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	23fe      	movs	r3, #254	; 0xfe
 800a26c:	01db      	lsls	r3, r3, #7
 800a26e:	401a      	ands	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a274:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a276:	429a      	cmp	r2, r3
 800a278:	d10e      	bne.n	800a298 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	23f8      	movs	r3, #248	; 0xf8
 800a27e:	039b      	lsls	r3, r3, #14
 800a280:	401a      	ands	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a286:	429a      	cmp	r2, r3
 800a288:	d106      	bne.n	800a298 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	0f5b      	lsrs	r3, r3, #29
 800a28e:	075a      	lsls	r2, r3, #29
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a294:	429a      	cmp	r2, r3
 800a296:	d001      	beq.n	800a29c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e000      	b.n	800a29e <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	0018      	movs	r0, r3
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	b008      	add	sp, #32
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	46c0      	nop			; (mov r8, r8)
 800a2a8:	40021000 	.word	0x40021000
 800a2ac:	40007000 	.word	0x40007000
 800a2b0:	00001388 	.word	0x00001388
 800a2b4:	efffffff 	.word	0xefffffff
 800a2b8:	feffffff 	.word	0xfeffffff
 800a2bc:	1fc1808c 	.word	0x1fc1808c
 800a2c0:	effeffff 	.word	0xeffeffff

0800a2c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e0e9      	b.n	800a4ac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a2d8:	4b76      	ldr	r3, [pc, #472]	; (800a4b4 <HAL_RCC_ClockConfig+0x1f0>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2207      	movs	r2, #7
 800a2de:	4013      	ands	r3, r2
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d91e      	bls.n	800a324 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2e6:	4b73      	ldr	r3, [pc, #460]	; (800a4b4 <HAL_RCC_ClockConfig+0x1f0>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2207      	movs	r2, #7
 800a2ec:	4393      	bics	r3, r2
 800a2ee:	0019      	movs	r1, r3
 800a2f0:	4b70      	ldr	r3, [pc, #448]	; (800a4b4 <HAL_RCC_ClockConfig+0x1f0>)
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	430a      	orrs	r2, r1
 800a2f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a2f8:	f7ff f8da 	bl	80094b0 <HAL_GetTick>
 800a2fc:	0003      	movs	r3, r0
 800a2fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a300:	e009      	b.n	800a316 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a302:	f7ff f8d5 	bl	80094b0 <HAL_GetTick>
 800a306:	0002      	movs	r2, r0
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	4a6a      	ldr	r2, [pc, #424]	; (800a4b8 <HAL_RCC_ClockConfig+0x1f4>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d901      	bls.n	800a316 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e0ca      	b.n	800a4ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a316:	4b67      	ldr	r3, [pc, #412]	; (800a4b4 <HAL_RCC_ClockConfig+0x1f0>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2207      	movs	r2, #7
 800a31c:	4013      	ands	r3, r2
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d1ee      	bne.n	800a302 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2202      	movs	r2, #2
 800a32a:	4013      	ands	r3, r2
 800a32c:	d015      	beq.n	800a35a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2204      	movs	r2, #4
 800a334:	4013      	ands	r3, r2
 800a336:	d006      	beq.n	800a346 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a338:	4b60      	ldr	r3, [pc, #384]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a33a:	689a      	ldr	r2, [r3, #8]
 800a33c:	4b5f      	ldr	r3, [pc, #380]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a33e:	21e0      	movs	r1, #224	; 0xe0
 800a340:	01c9      	lsls	r1, r1, #7
 800a342:	430a      	orrs	r2, r1
 800a344:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a346:	4b5d      	ldr	r3, [pc, #372]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	4a5d      	ldr	r2, [pc, #372]	; (800a4c0 <HAL_RCC_ClockConfig+0x1fc>)
 800a34c:	4013      	ands	r3, r2
 800a34e:	0019      	movs	r1, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	4b59      	ldr	r3, [pc, #356]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a356:	430a      	orrs	r2, r1
 800a358:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2201      	movs	r2, #1
 800a360:	4013      	ands	r3, r2
 800a362:	d057      	beq.n	800a414 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d107      	bne.n	800a37c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a36c:	4b53      	ldr	r3, [pc, #332]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	2380      	movs	r3, #128	; 0x80
 800a372:	029b      	lsls	r3, r3, #10
 800a374:	4013      	ands	r3, r2
 800a376:	d12b      	bne.n	800a3d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	e097      	b.n	800a4ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	2b02      	cmp	r3, #2
 800a382:	d107      	bne.n	800a394 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a384:	4b4d      	ldr	r3, [pc, #308]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	2380      	movs	r3, #128	; 0x80
 800a38a:	049b      	lsls	r3, r3, #18
 800a38c:	4013      	ands	r3, r2
 800a38e:	d11f      	bne.n	800a3d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e08b      	b.n	800a4ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d107      	bne.n	800a3ac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a39c:	4b47      	ldr	r3, [pc, #284]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	2380      	movs	r3, #128	; 0x80
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	d113      	bne.n	800a3d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e07f      	b.n	800a4ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d106      	bne.n	800a3c2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a3b4:	4b41      	ldr	r3, [pc, #260]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a3b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	d108      	bne.n	800a3d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e074      	b.n	800a4ac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3c2:	4b3e      	ldr	r3, [pc, #248]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a3c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	d101      	bne.n	800a3d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e06d      	b.n	800a4ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a3d0:	4b3a      	ldr	r3, [pc, #232]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	2207      	movs	r2, #7
 800a3d6:	4393      	bics	r3, r2
 800a3d8:	0019      	movs	r1, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	4b37      	ldr	r3, [pc, #220]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a3e0:	430a      	orrs	r2, r1
 800a3e2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3e4:	f7ff f864 	bl	80094b0 <HAL_GetTick>
 800a3e8:	0003      	movs	r3, r0
 800a3ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3ec:	e009      	b.n	800a402 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3ee:	f7ff f85f 	bl	80094b0 <HAL_GetTick>
 800a3f2:	0002      	movs	r2, r0
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	4a2f      	ldr	r2, [pc, #188]	; (800a4b8 <HAL_RCC_ClockConfig+0x1f4>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e054      	b.n	800a4ac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a402:	4b2e      	ldr	r3, [pc, #184]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	2238      	movs	r2, #56	; 0x38
 800a408:	401a      	ands	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	429a      	cmp	r2, r3
 800a412:	d1ec      	bne.n	800a3ee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a414:	4b27      	ldr	r3, [pc, #156]	; (800a4b4 <HAL_RCC_ClockConfig+0x1f0>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2207      	movs	r2, #7
 800a41a:	4013      	ands	r3, r2
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d21e      	bcs.n	800a460 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a422:	4b24      	ldr	r3, [pc, #144]	; (800a4b4 <HAL_RCC_ClockConfig+0x1f0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2207      	movs	r2, #7
 800a428:	4393      	bics	r3, r2
 800a42a:	0019      	movs	r1, r3
 800a42c:	4b21      	ldr	r3, [pc, #132]	; (800a4b4 <HAL_RCC_ClockConfig+0x1f0>)
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a434:	f7ff f83c 	bl	80094b0 <HAL_GetTick>
 800a438:	0003      	movs	r3, r0
 800a43a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a43c:	e009      	b.n	800a452 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a43e:	f7ff f837 	bl	80094b0 <HAL_GetTick>
 800a442:	0002      	movs	r2, r0
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	4a1b      	ldr	r2, [pc, #108]	; (800a4b8 <HAL_RCC_ClockConfig+0x1f4>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d901      	bls.n	800a452 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e02c      	b.n	800a4ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a452:	4b18      	ldr	r3, [pc, #96]	; (800a4b4 <HAL_RCC_ClockConfig+0x1f0>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2207      	movs	r2, #7
 800a458:	4013      	ands	r3, r2
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d1ee      	bne.n	800a43e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2204      	movs	r2, #4
 800a466:	4013      	ands	r3, r2
 800a468:	d009      	beq.n	800a47e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a46a:	4b14      	ldr	r3, [pc, #80]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	4a15      	ldr	r2, [pc, #84]	; (800a4c4 <HAL_RCC_ClockConfig+0x200>)
 800a470:	4013      	ands	r3, r2
 800a472:	0019      	movs	r1, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68da      	ldr	r2, [r3, #12]
 800a478:	4b10      	ldr	r3, [pc, #64]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a47a:	430a      	orrs	r2, r1
 800a47c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a47e:	f000 f829 	bl	800a4d4 <HAL_RCC_GetSysClockFreq>
 800a482:	0001      	movs	r1, r0
 800a484:	4b0d      	ldr	r3, [pc, #52]	; (800a4bc <HAL_RCC_ClockConfig+0x1f8>)
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	0a1b      	lsrs	r3, r3, #8
 800a48a:	220f      	movs	r2, #15
 800a48c:	401a      	ands	r2, r3
 800a48e:	4b0e      	ldr	r3, [pc, #56]	; (800a4c8 <HAL_RCC_ClockConfig+0x204>)
 800a490:	0092      	lsls	r2, r2, #2
 800a492:	58d3      	ldr	r3, [r2, r3]
 800a494:	221f      	movs	r2, #31
 800a496:	4013      	ands	r3, r2
 800a498:	000a      	movs	r2, r1
 800a49a:	40da      	lsrs	r2, r3
 800a49c:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <HAL_RCC_ClockConfig+0x208>)
 800a49e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <HAL_RCC_ClockConfig+0x20c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f7fe ffa7 	bl	80093f8 <HAL_InitTick>
 800a4aa:	0003      	movs	r3, r0
}
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	b004      	add	sp, #16
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	40022000 	.word	0x40022000
 800a4b8:	00001388 	.word	0x00001388
 800a4bc:	40021000 	.word	0x40021000
 800a4c0:	fffff0ff 	.word	0xfffff0ff
 800a4c4:	ffff8fff 	.word	0xffff8fff
 800a4c8:	0801216c 	.word	0x0801216c
 800a4cc:	20000004 	.word	0x20000004
 800a4d0:	20000008 	.word	0x20000008

0800a4d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a4da:	4b3c      	ldr	r3, [pc, #240]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	2238      	movs	r2, #56	; 0x38
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	d10f      	bne.n	800a504 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a4e4:	4b39      	ldr	r3, [pc, #228]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	0adb      	lsrs	r3, r3, #11
 800a4ea:	2207      	movs	r2, #7
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	409a      	lsls	r2, r3
 800a4f2:	0013      	movs	r3, r2
 800a4f4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	4835      	ldr	r0, [pc, #212]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a4fa:	f7f5 fe1d 	bl	8000138 <__udivsi3>
 800a4fe:	0003      	movs	r3, r0
 800a500:	613b      	str	r3, [r7, #16]
 800a502:	e05d      	b.n	800a5c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a504:	4b31      	ldr	r3, [pc, #196]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	2238      	movs	r2, #56	; 0x38
 800a50a:	4013      	ands	r3, r2
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d102      	bne.n	800a516 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a510:	4b30      	ldr	r3, [pc, #192]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x100>)
 800a512:	613b      	str	r3, [r7, #16]
 800a514:	e054      	b.n	800a5c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a516:	4b2d      	ldr	r3, [pc, #180]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	2238      	movs	r2, #56	; 0x38
 800a51c:	4013      	ands	r3, r2
 800a51e:	2b10      	cmp	r3, #16
 800a520:	d138      	bne.n	800a594 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a522:	4b2a      	ldr	r3, [pc, #168]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	2203      	movs	r2, #3
 800a528:	4013      	ands	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a52c:	4b27      	ldr	r3, [pc, #156]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	091b      	lsrs	r3, r3, #4
 800a532:	2207      	movs	r2, #7
 800a534:	4013      	ands	r3, r2
 800a536:	3301      	adds	r3, #1
 800a538:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d10d      	bne.n	800a55c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a540:	68b9      	ldr	r1, [r7, #8]
 800a542:	4824      	ldr	r0, [pc, #144]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x100>)
 800a544:	f7f5 fdf8 	bl	8000138 <__udivsi3>
 800a548:	0003      	movs	r3, r0
 800a54a:	0019      	movs	r1, r3
 800a54c:	4b1f      	ldr	r3, [pc, #124]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	0a1b      	lsrs	r3, r3, #8
 800a552:	227f      	movs	r2, #127	; 0x7f
 800a554:	4013      	ands	r3, r2
 800a556:	434b      	muls	r3, r1
 800a558:	617b      	str	r3, [r7, #20]
        break;
 800a55a:	e00d      	b.n	800a578 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	481c      	ldr	r0, [pc, #112]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a560:	f7f5 fdea 	bl	8000138 <__udivsi3>
 800a564:	0003      	movs	r3, r0
 800a566:	0019      	movs	r1, r3
 800a568:	4b18      	ldr	r3, [pc, #96]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	0a1b      	lsrs	r3, r3, #8
 800a56e:	227f      	movs	r2, #127	; 0x7f
 800a570:	4013      	ands	r3, r2
 800a572:	434b      	muls	r3, r1
 800a574:	617b      	str	r3, [r7, #20]
        break;
 800a576:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a578:	4b14      	ldr	r3, [pc, #80]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	0f5b      	lsrs	r3, r3, #29
 800a57e:	2207      	movs	r2, #7
 800a580:	4013      	ands	r3, r2
 800a582:	3301      	adds	r3, #1
 800a584:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a586:	6879      	ldr	r1, [r7, #4]
 800a588:	6978      	ldr	r0, [r7, #20]
 800a58a:	f7f5 fdd5 	bl	8000138 <__udivsi3>
 800a58e:	0003      	movs	r3, r0
 800a590:	613b      	str	r3, [r7, #16]
 800a592:	e015      	b.n	800a5c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a594:	4b0d      	ldr	r3, [pc, #52]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	2238      	movs	r2, #56	; 0x38
 800a59a:	4013      	ands	r3, r2
 800a59c:	2b20      	cmp	r3, #32
 800a59e:	d103      	bne.n	800a5a8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a5a0:	2380      	movs	r3, #128	; 0x80
 800a5a2:	021b      	lsls	r3, r3, #8
 800a5a4:	613b      	str	r3, [r7, #16]
 800a5a6:	e00b      	b.n	800a5c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a5a8:	4b08      	ldr	r3, [pc, #32]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	2238      	movs	r2, #56	; 0x38
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	2b18      	cmp	r3, #24
 800a5b2:	d103      	bne.n	800a5bc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a5b4:	23fa      	movs	r3, #250	; 0xfa
 800a5b6:	01db      	lsls	r3, r3, #7
 800a5b8:	613b      	str	r3, [r7, #16]
 800a5ba:	e001      	b.n	800a5c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a5c0:	693b      	ldr	r3, [r7, #16]
}
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	b006      	add	sp, #24
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	46c0      	nop			; (mov r8, r8)
 800a5cc:	40021000 	.word	0x40021000
 800a5d0:	00f42400 	.word	0x00f42400
 800a5d4:	007a1200 	.word	0x007a1200

0800a5d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a5dc:	4b02      	ldr	r3, [pc, #8]	; (800a5e8 <HAL_RCC_GetHCLKFreq+0x10>)
 800a5de:	681b      	ldr	r3, [r3, #0]
}
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	46c0      	nop			; (mov r8, r8)
 800a5e8:	20000004 	.word	0x20000004

0800a5ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5ec:	b5b0      	push	{r4, r5, r7, lr}
 800a5ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a5f0:	f7ff fff2 	bl	800a5d8 <HAL_RCC_GetHCLKFreq>
 800a5f4:	0004      	movs	r4, r0
 800a5f6:	f7ff fb43 	bl	8009c80 <LL_RCC_GetAPB1Prescaler>
 800a5fa:	0003      	movs	r3, r0
 800a5fc:	0b1a      	lsrs	r2, r3, #12
 800a5fe:	4b05      	ldr	r3, [pc, #20]	; (800a614 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a600:	0092      	lsls	r2, r2, #2
 800a602:	58d3      	ldr	r3, [r2, r3]
 800a604:	221f      	movs	r2, #31
 800a606:	4013      	ands	r3, r2
 800a608:	40dc      	lsrs	r4, r3
 800a60a:	0023      	movs	r3, r4
}
 800a60c:	0018      	movs	r0, r3
 800a60e:	46bd      	mov	sp, r7
 800a610:	bdb0      	pop	{r4, r5, r7, pc}
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	080121ac 	.word	0x080121ac

0800a618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a620:	2313      	movs	r3, #19
 800a622:	18fb      	adds	r3, r7, r3
 800a624:	2200      	movs	r2, #0
 800a626:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a628:	2312      	movs	r3, #18
 800a62a:	18fb      	adds	r3, r7, r3
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	2380      	movs	r3, #128	; 0x80
 800a636:	029b      	lsls	r3, r3, #10
 800a638:	4013      	ands	r3, r2
 800a63a:	d100      	bne.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a63c:	e0a3      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a63e:	2011      	movs	r0, #17
 800a640:	183b      	adds	r3, r7, r0
 800a642:	2200      	movs	r2, #0
 800a644:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a646:	4b86      	ldr	r3, [pc, #536]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a64a:	2380      	movs	r3, #128	; 0x80
 800a64c:	055b      	lsls	r3, r3, #21
 800a64e:	4013      	ands	r3, r2
 800a650:	d110      	bne.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a652:	4b83      	ldr	r3, [pc, #524]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a656:	4b82      	ldr	r3, [pc, #520]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a658:	2180      	movs	r1, #128	; 0x80
 800a65a:	0549      	lsls	r1, r1, #21
 800a65c:	430a      	orrs	r2, r1
 800a65e:	63da      	str	r2, [r3, #60]	; 0x3c
 800a660:	4b7f      	ldr	r3, [pc, #508]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a664:	2380      	movs	r3, #128	; 0x80
 800a666:	055b      	lsls	r3, r3, #21
 800a668:	4013      	ands	r3, r2
 800a66a:	60bb      	str	r3, [r7, #8]
 800a66c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a66e:	183b      	adds	r3, r7, r0
 800a670:	2201      	movs	r2, #1
 800a672:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a674:	4b7b      	ldr	r3, [pc, #492]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	4b7a      	ldr	r3, [pc, #488]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a67a:	2180      	movs	r1, #128	; 0x80
 800a67c:	0049      	lsls	r1, r1, #1
 800a67e:	430a      	orrs	r2, r1
 800a680:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a682:	f7fe ff15 	bl	80094b0 <HAL_GetTick>
 800a686:	0003      	movs	r3, r0
 800a688:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a68a:	e00b      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a68c:	f7fe ff10 	bl	80094b0 <HAL_GetTick>
 800a690:	0002      	movs	r2, r0
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	2b02      	cmp	r3, #2
 800a698:	d904      	bls.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a69a:	2313      	movs	r3, #19
 800a69c:	18fb      	adds	r3, r7, r3
 800a69e:	2203      	movs	r2, #3
 800a6a0:	701a      	strb	r2, [r3, #0]
        break;
 800a6a2:	e005      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a6a4:	4b6f      	ldr	r3, [pc, #444]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	2380      	movs	r3, #128	; 0x80
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	d0ed      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a6b0:	2313      	movs	r3, #19
 800a6b2:	18fb      	adds	r3, r7, r3
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d154      	bne.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a6ba:	4b69      	ldr	r3, [pc, #420]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a6bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6be:	23c0      	movs	r3, #192	; 0xc0
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d019      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d014      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a6d6:	4b62      	ldr	r3, [pc, #392]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a6d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6da:	4a63      	ldr	r2, [pc, #396]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a6dc:	4013      	ands	r3, r2
 800a6de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a6e0:	4b5f      	ldr	r3, [pc, #380]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a6e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6e4:	4b5e      	ldr	r3, [pc, #376]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a6e6:	2180      	movs	r1, #128	; 0x80
 800a6e8:	0249      	lsls	r1, r1, #9
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a6ee:	4b5c      	ldr	r3, [pc, #368]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a6f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6f2:	4b5b      	ldr	r3, [pc, #364]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a6f4:	495d      	ldr	r1, [pc, #372]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800a6f6:	400a      	ands	r2, r1
 800a6f8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a6fa:	4b59      	ldr	r3, [pc, #356]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	2201      	movs	r2, #1
 800a704:	4013      	ands	r3, r2
 800a706:	d016      	beq.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a708:	f7fe fed2 	bl	80094b0 <HAL_GetTick>
 800a70c:	0003      	movs	r3, r0
 800a70e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a710:	e00c      	b.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a712:	f7fe fecd 	bl	80094b0 <HAL_GetTick>
 800a716:	0002      	movs	r2, r0
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	4a54      	ldr	r2, [pc, #336]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d904      	bls.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a722:	2313      	movs	r3, #19
 800a724:	18fb      	adds	r3, r7, r3
 800a726:	2203      	movs	r2, #3
 800a728:	701a      	strb	r2, [r3, #0]
            break;
 800a72a:	e004      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a72c:	4b4c      	ldr	r3, [pc, #304]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a72e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a730:	2202      	movs	r2, #2
 800a732:	4013      	ands	r3, r2
 800a734:	d0ed      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a736:	2313      	movs	r3, #19
 800a738:	18fb      	adds	r3, r7, r3
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10a      	bne.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a740:	4b47      	ldr	r3, [pc, #284]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a744:	4a48      	ldr	r2, [pc, #288]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a746:	4013      	ands	r3, r2
 800a748:	0019      	movs	r1, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	699a      	ldr	r2, [r3, #24]
 800a74e:	4b44      	ldr	r3, [pc, #272]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a750:	430a      	orrs	r2, r1
 800a752:	65da      	str	r2, [r3, #92]	; 0x5c
 800a754:	e00c      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a756:	2312      	movs	r3, #18
 800a758:	18fb      	adds	r3, r7, r3
 800a75a:	2213      	movs	r2, #19
 800a75c:	18ba      	adds	r2, r7, r2
 800a75e:	7812      	ldrb	r2, [r2, #0]
 800a760:	701a      	strb	r2, [r3, #0]
 800a762:	e005      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a764:	2312      	movs	r3, #18
 800a766:	18fb      	adds	r3, r7, r3
 800a768:	2213      	movs	r2, #19
 800a76a:	18ba      	adds	r2, r7, r2
 800a76c:	7812      	ldrb	r2, [r2, #0]
 800a76e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a770:	2311      	movs	r3, #17
 800a772:	18fb      	adds	r3, r7, r3
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d105      	bne.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a77a:	4b39      	ldr	r3, [pc, #228]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a77c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a77e:	4b38      	ldr	r3, [pc, #224]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a780:	493c      	ldr	r1, [pc, #240]	; (800a874 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a782:	400a      	ands	r2, r1
 800a784:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2201      	movs	r2, #1
 800a78c:	4013      	ands	r3, r2
 800a78e:	d009      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a790:	4b33      	ldr	r3, [pc, #204]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a794:	2203      	movs	r2, #3
 800a796:	4393      	bics	r3, r2
 800a798:	0019      	movs	r1, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685a      	ldr	r2, [r3, #4]
 800a79e:	4b30      	ldr	r3, [pc, #192]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	d009      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a7ae:	4b2c      	ldr	r3, [pc, #176]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b2:	220c      	movs	r2, #12
 800a7b4:	4393      	bics	r3, r2
 800a7b6:	0019      	movs	r1, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	689a      	ldr	r2, [r3, #8]
 800a7bc:	4b28      	ldr	r3, [pc, #160]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	d009      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a7cc:	4b24      	ldr	r3, [pc, #144]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d0:	4a29      	ldr	r2, [pc, #164]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	0019      	movs	r1, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68da      	ldr	r2, [r3, #12]
 800a7da:	4b21      	ldr	r3, [pc, #132]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	2380      	movs	r3, #128	; 0x80
 800a7e6:	01db      	lsls	r3, r3, #7
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	d015      	beq.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a7ec:	4b1c      	ldr	r3, [pc, #112]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	0899      	lsrs	r1, r3, #2
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	695a      	ldr	r2, [r3, #20]
 800a7f8:	4b19      	ldr	r3, [pc, #100]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	695a      	ldr	r2, [r3, #20]
 800a802:	2380      	movs	r3, #128	; 0x80
 800a804:	05db      	lsls	r3, r3, #23
 800a806:	429a      	cmp	r2, r3
 800a808:	d106      	bne.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a80a:	4b15      	ldr	r3, [pc, #84]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a80c:	68da      	ldr	r2, [r3, #12]
 800a80e:	4b14      	ldr	r3, [pc, #80]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a810:	2180      	movs	r1, #128	; 0x80
 800a812:	0249      	lsls	r1, r1, #9
 800a814:	430a      	orrs	r2, r1
 800a816:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	2380      	movs	r3, #128	; 0x80
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	4013      	ands	r3, r2
 800a822:	d016      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a824:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a828:	4a14      	ldr	r2, [pc, #80]	; (800a87c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a82a:	4013      	ands	r3, r2
 800a82c:	0019      	movs	r1, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	691a      	ldr	r2, [r3, #16]
 800a832:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a834:	430a      	orrs	r2, r1
 800a836:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	691a      	ldr	r2, [r3, #16]
 800a83c:	2380      	movs	r3, #128	; 0x80
 800a83e:	01db      	lsls	r3, r3, #7
 800a840:	429a      	cmp	r2, r3
 800a842:	d106      	bne.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a844:	4b06      	ldr	r3, [pc, #24]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a846:	68da      	ldr	r2, [r3, #12]
 800a848:	4b05      	ldr	r3, [pc, #20]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a84a:	2180      	movs	r1, #128	; 0x80
 800a84c:	0249      	lsls	r1, r1, #9
 800a84e:	430a      	orrs	r2, r1
 800a850:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a852:	2312      	movs	r3, #18
 800a854:	18fb      	adds	r3, r7, r3
 800a856:	781b      	ldrb	r3, [r3, #0]
}
 800a858:	0018      	movs	r0, r3
 800a85a:	46bd      	mov	sp, r7
 800a85c:	b006      	add	sp, #24
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	40021000 	.word	0x40021000
 800a864:	40007000 	.word	0x40007000
 800a868:	fffffcff 	.word	0xfffffcff
 800a86c:	fffeffff 	.word	0xfffeffff
 800a870:	00001388 	.word	0x00001388
 800a874:	efffffff 	.word	0xefffffff
 800a878:	ffffcfff 	.word	0xffffcfff
 800a87c:	ffff3fff 	.word	0xffff3fff

0800a880 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a880:	b5b0      	push	{r4, r5, r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a888:	230f      	movs	r3, #15
 800a88a:	18fb      	adds	r3, r7, r3
 800a88c:	2201      	movs	r2, #1
 800a88e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d100      	bne.n	800a898 <HAL_RTC_Init+0x18>
 800a896:	e080      	b.n	800a99a <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2229      	movs	r2, #41	; 0x29
 800a89c:	5c9b      	ldrb	r3, [r3, r2]
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10b      	bne.n	800a8bc <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2228      	movs	r2, #40	; 0x28
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2288      	movs	r2, #136	; 0x88
 800a8b0:	0212      	lsls	r2, r2, #8
 800a8b2:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	0018      	movs	r0, r3
 800a8b8:	f7fe fb14 	bl	8008ee4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2229      	movs	r2, #41	; 0x29
 800a8c0:	2102      	movs	r1, #2
 800a8c2:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	22ca      	movs	r2, #202	; 0xca
 800a8ca:	625a      	str	r2, [r3, #36]	; 0x24
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2253      	movs	r2, #83	; 0x53
 800a8d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a8d4:	250f      	movs	r5, #15
 800a8d6:	197c      	adds	r4, r7, r5
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	0018      	movs	r0, r3
 800a8dc:	f000 f88d 	bl	800a9fa <RTC_EnterInitMode>
 800a8e0:	0003      	movs	r3, r0
 800a8e2:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 800a8e4:	0028      	movs	r0, r5
 800a8e6:	183b      	adds	r3, r7, r0
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d148      	bne.n	800a980 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	699a      	ldr	r2, [r3, #24]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	492b      	ldr	r1, [pc, #172]	; (800a9a8 <HAL_RTC_Init+0x128>)
 800a8fa:	400a      	ands	r2, r1
 800a8fc:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6999      	ldr	r1, [r3, #24]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	689a      	ldr	r2, [r3, #8]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	431a      	orrs	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	431a      	orrs	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	430a      	orrs	r2, r1
 800a91a:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	6912      	ldr	r2, [r2, #16]
 800a924:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	6919      	ldr	r1, [r3, #16]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	041a      	lsls	r2, r3, #16
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a93a:	0005      	movs	r5, r0
 800a93c:	183c      	adds	r4, r7, r0
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	0018      	movs	r0, r3
 800a942:	f000 f89d 	bl	800aa80 <RTC_ExitInitMode>
 800a946:	0003      	movs	r3, r0
 800a948:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800a94a:	197b      	adds	r3, r7, r5
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d116      	bne.n	800a980 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	699a      	ldr	r2, [r3, #24]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	00d2      	lsls	r2, r2, #3
 800a95e:	08d2      	lsrs	r2, r2, #3
 800a960:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6999      	ldr	r1, [r3, #24]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a1b      	ldr	r3, [r3, #32]
 800a970:	431a      	orrs	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	431a      	orrs	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	430a      	orrs	r2, r1
 800a97e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	22ff      	movs	r2, #255	; 0xff
 800a986:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800a988:	230f      	movs	r3, #15
 800a98a:	18fb      	adds	r3, r7, r3
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d103      	bne.n	800a99a <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2229      	movs	r2, #41	; 0x29
 800a996:	2101      	movs	r1, #1
 800a998:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800a99a:	230f      	movs	r3, #15
 800a99c:	18fb      	adds	r3, r7, r3
 800a99e:	781b      	ldrb	r3, [r3, #0]
}
 800a9a0:	0018      	movs	r0, r3
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	b004      	add	sp, #16
 800a9a6:	bdb0      	pop	{r4, r5, r7, pc}
 800a9a8:	fb8fffbf 	.word	0xfb8fffbf

0800a9ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	21a0      	movs	r1, #160	; 0xa0
 800a9c0:	438a      	bics	r2, r1
 800a9c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a9c4:	f7fe fd74 	bl	80094b0 <HAL_GetTick>
 800a9c8:	0003      	movs	r3, r0
 800a9ca:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800a9cc:	e00a      	b.n	800a9e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a9ce:	f7fe fd6f 	bl	80094b0 <HAL_GetTick>
 800a9d2:	0002      	movs	r2, r0
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	1ad2      	subs	r2, r2, r3
 800a9d8:	23fa      	movs	r3, #250	; 0xfa
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d901      	bls.n	800a9e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	e006      	b.n	800a9f2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	d0ee      	beq.n	800a9ce <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	b004      	add	sp, #16
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800aa02:	230f      	movs	r3, #15
 800aa04:	18fb      	adds	r3, r7, r3
 800aa06:	2200      	movs	r2, #0
 800aa08:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	2240      	movs	r2, #64	; 0x40
 800aa12:	4013      	ands	r3, r2
 800aa14:	d12c      	bne.n	800aa70 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2180      	movs	r1, #128	; 0x80
 800aa22:	430a      	orrs	r2, r1
 800aa24:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800aa26:	f7fe fd43 	bl	80094b0 <HAL_GetTick>
 800aa2a:	0003      	movs	r3, r0
 800aa2c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aa2e:	e014      	b.n	800aa5a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800aa30:	f7fe fd3e 	bl	80094b0 <HAL_GetTick>
 800aa34:	0002      	movs	r2, r0
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	1ad2      	subs	r2, r2, r3
 800aa3a:	200f      	movs	r0, #15
 800aa3c:	183b      	adds	r3, r7, r0
 800aa3e:	1839      	adds	r1, r7, r0
 800aa40:	7809      	ldrb	r1, [r1, #0]
 800aa42:	7019      	strb	r1, [r3, #0]
 800aa44:	23fa      	movs	r3, #250	; 0xfa
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d906      	bls.n	800aa5a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800aa4c:	183b      	adds	r3, r7, r0
 800aa4e:	2203      	movs	r2, #3
 800aa50:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2229      	movs	r2, #41	; 0x29
 800aa56:	2103      	movs	r1, #3
 800aa58:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	2240      	movs	r2, #64	; 0x40
 800aa62:	4013      	ands	r3, r2
 800aa64:	d104      	bne.n	800aa70 <RTC_EnterInitMode+0x76>
 800aa66:	230f      	movs	r3, #15
 800aa68:	18fb      	adds	r3, r7, r3
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d1df      	bne.n	800aa30 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800aa70:	230f      	movs	r3, #15
 800aa72:	18fb      	adds	r3, r7, r3
 800aa74:	781b      	ldrb	r3, [r3, #0]
}
 800aa76:	0018      	movs	r0, r3
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	b004      	add	sp, #16
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa80:	b590      	push	{r4, r7, lr}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa88:	240f      	movs	r4, #15
 800aa8a:	193b      	adds	r3, r7, r4
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800aa90:	4b1c      	ldr	r3, [pc, #112]	; (800ab04 <RTC_ExitInitMode+0x84>)
 800aa92:	68da      	ldr	r2, [r3, #12]
 800aa94:	4b1b      	ldr	r3, [pc, #108]	; (800ab04 <RTC_ExitInitMode+0x84>)
 800aa96:	2180      	movs	r1, #128	; 0x80
 800aa98:	438a      	bics	r2, r1
 800aa9a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800aa9c:	4b19      	ldr	r3, [pc, #100]	; (800ab04 <RTC_ExitInitMode+0x84>)
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	2220      	movs	r2, #32
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	d10d      	bne.n	800aac2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	0018      	movs	r0, r3
 800aaaa:	f7ff ff7f 	bl	800a9ac <HAL_RTC_WaitForSynchro>
 800aaae:	1e03      	subs	r3, r0, #0
 800aab0:	d021      	beq.n	800aaf6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2229      	movs	r2, #41	; 0x29
 800aab6:	2103      	movs	r1, #3
 800aab8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800aaba:	193b      	adds	r3, r7, r4
 800aabc:	2203      	movs	r2, #3
 800aabe:	701a      	strb	r2, [r3, #0]
 800aac0:	e019      	b.n	800aaf6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aac2:	4b10      	ldr	r3, [pc, #64]	; (800ab04 <RTC_ExitInitMode+0x84>)
 800aac4:	699a      	ldr	r2, [r3, #24]
 800aac6:	4b0f      	ldr	r3, [pc, #60]	; (800ab04 <RTC_ExitInitMode+0x84>)
 800aac8:	2120      	movs	r1, #32
 800aaca:	438a      	bics	r2, r1
 800aacc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	0018      	movs	r0, r3
 800aad2:	f7ff ff6b 	bl	800a9ac <HAL_RTC_WaitForSynchro>
 800aad6:	1e03      	subs	r3, r0, #0
 800aad8:	d007      	beq.n	800aaea <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2229      	movs	r2, #41	; 0x29
 800aade:	2103      	movs	r1, #3
 800aae0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800aae2:	230f      	movs	r3, #15
 800aae4:	18fb      	adds	r3, r7, r3
 800aae6:	2203      	movs	r2, #3
 800aae8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aaea:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <RTC_ExitInitMode+0x84>)
 800aaec:	699a      	ldr	r2, [r3, #24]
 800aaee:	4b05      	ldr	r3, [pc, #20]	; (800ab04 <RTC_ExitInitMode+0x84>)
 800aaf0:	2120      	movs	r1, #32
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	619a      	str	r2, [r3, #24]
  }

  return status;
 800aaf6:	230f      	movs	r3, #15
 800aaf8:	18fb      	adds	r3, r7, r3
 800aafa:	781b      	ldrb	r3, [r3, #0]
}
 800aafc:	0018      	movs	r0, r3
 800aafe:	46bd      	mov	sp, r7
 800ab00:	b005      	add	sp, #20
 800ab02:	bd90      	pop	{r4, r7, pc}
 800ab04:	40002800 	.word	0x40002800

0800ab08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d101      	bne.n	800ab1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	e0a8      	b.n	800ac6c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d109      	bne.n	800ab36 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	2382      	movs	r3, #130	; 0x82
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d009      	beq.n	800ab42 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	61da      	str	r2, [r3, #28]
 800ab34:	e005      	b.n	800ab42 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	225d      	movs	r2, #93	; 0x5d
 800ab4c:	5c9b      	ldrb	r3, [r3, r2]
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d107      	bne.n	800ab64 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	225c      	movs	r2, #92	; 0x5c
 800ab58:	2100      	movs	r1, #0
 800ab5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	0018      	movs	r0, r3
 800ab60:	f7fe f9fe 	bl	8008f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	225d      	movs	r2, #93	; 0x5d
 800ab68:	2102      	movs	r1, #2
 800ab6a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2140      	movs	r1, #64	; 0x40
 800ab78:	438a      	bics	r2, r1
 800ab7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	23e0      	movs	r3, #224	; 0xe0
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d902      	bls.n	800ab8e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	e002      	b.n	800ab94 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ab8e:	2380      	movs	r3, #128	; 0x80
 800ab90:	015b      	lsls	r3, r3, #5
 800ab92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68da      	ldr	r2, [r3, #12]
 800ab98:	23f0      	movs	r3, #240	; 0xf0
 800ab9a:	011b      	lsls	r3, r3, #4
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d008      	beq.n	800abb2 <HAL_SPI_Init+0xaa>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68da      	ldr	r2, [r3, #12]
 800aba4:	23e0      	movs	r3, #224	; 0xe0
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d002      	beq.n	800abb2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	2382      	movs	r3, #130	; 0x82
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	401a      	ands	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6899      	ldr	r1, [r3, #8]
 800abc0:	2384      	movs	r3, #132	; 0x84
 800abc2:	021b      	lsls	r3, r3, #8
 800abc4:	400b      	ands	r3, r1
 800abc6:	431a      	orrs	r2, r3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	691b      	ldr	r3, [r3, #16]
 800abcc:	2102      	movs	r1, #2
 800abce:	400b      	ands	r3, r1
 800abd0:	431a      	orrs	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	2101      	movs	r1, #1
 800abd8:	400b      	ands	r3, r1
 800abda:	431a      	orrs	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6999      	ldr	r1, [r3, #24]
 800abe0:	2380      	movs	r3, #128	; 0x80
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	400b      	ands	r3, r1
 800abe6:	431a      	orrs	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	2138      	movs	r1, #56	; 0x38
 800abee:	400b      	ands	r3, r1
 800abf0:	431a      	orrs	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	2180      	movs	r1, #128	; 0x80
 800abf8:	400b      	ands	r3, r1
 800abfa:	431a      	orrs	r2, r3
 800abfc:	0011      	movs	r1, r2
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac02:	2380      	movs	r3, #128	; 0x80
 800ac04:	019b      	lsls	r3, r3, #6
 800ac06:	401a      	ands	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	430a      	orrs	r2, r1
 800ac0e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	0c1b      	lsrs	r3, r3, #16
 800ac16:	2204      	movs	r2, #4
 800ac18:	401a      	ands	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1e:	2110      	movs	r1, #16
 800ac20:	400b      	ands	r3, r1
 800ac22:	431a      	orrs	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac28:	2108      	movs	r1, #8
 800ac2a:	400b      	ands	r3, r1
 800ac2c:	431a      	orrs	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68d9      	ldr	r1, [r3, #12]
 800ac32:	23f0      	movs	r3, #240	; 0xf0
 800ac34:	011b      	lsls	r3, r3, #4
 800ac36:	400b      	ands	r3, r1
 800ac38:	431a      	orrs	r2, r3
 800ac3a:	0011      	movs	r1, r2
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	2380      	movs	r3, #128	; 0x80
 800ac40:	015b      	lsls	r3, r3, #5
 800ac42:	401a      	ands	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	430a      	orrs	r2, r1
 800ac4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	69da      	ldr	r2, [r3, #28]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4907      	ldr	r1, [pc, #28]	; (800ac74 <HAL_SPI_Init+0x16c>)
 800ac58:	400a      	ands	r2, r1
 800ac5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	225d      	movs	r2, #93	; 0x5d
 800ac66:	2101      	movs	r1, #1
 800ac68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	0018      	movs	r0, r3
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	b004      	add	sp, #16
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	fffff7ff 	.word	0xfffff7ff

0800ac78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b088      	sub	sp, #32
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	603b      	str	r3, [r7, #0]
 800ac84:	1dbb      	adds	r3, r7, #6
 800ac86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac88:	231f      	movs	r3, #31
 800ac8a:	18fb      	adds	r3, r7, r3
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	225c      	movs	r2, #92	; 0x5c
 800ac94:	5c9b      	ldrb	r3, [r3, r2]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d101      	bne.n	800ac9e <HAL_SPI_Transmit+0x26>
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	e140      	b.n	800af20 <HAL_SPI_Transmit+0x2a8>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	225c      	movs	r2, #92	; 0x5c
 800aca2:	2101      	movs	r1, #1
 800aca4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aca6:	f7fe fc03 	bl	80094b0 <HAL_GetTick>
 800acaa:	0003      	movs	r3, r0
 800acac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800acae:	2316      	movs	r3, #22
 800acb0:	18fb      	adds	r3, r7, r3
 800acb2:	1dba      	adds	r2, r7, #6
 800acb4:	8812      	ldrh	r2, [r2, #0]
 800acb6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	225d      	movs	r2, #93	; 0x5d
 800acbc:	5c9b      	ldrb	r3, [r3, r2]
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d004      	beq.n	800acce <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800acc4:	231f      	movs	r3, #31
 800acc6:	18fb      	adds	r3, r7, r3
 800acc8:	2202      	movs	r2, #2
 800acca:	701a      	strb	r2, [r3, #0]
    goto error;
 800accc:	e11d      	b.n	800af0a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d003      	beq.n	800acdc <HAL_SPI_Transmit+0x64>
 800acd4:	1dbb      	adds	r3, r7, #6
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d104      	bne.n	800ace6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800acdc:	231f      	movs	r3, #31
 800acde:	18fb      	adds	r3, r7, r3
 800ace0:	2201      	movs	r2, #1
 800ace2:	701a      	strb	r2, [r3, #0]
    goto error;
 800ace4:	e111      	b.n	800af0a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	225d      	movs	r2, #93	; 0x5d
 800acea:	2103      	movs	r1, #3
 800acec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	1dba      	adds	r2, r7, #6
 800acfe:	8812      	ldrh	r2, [r2, #0]
 800ad00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	1dba      	adds	r2, r7, #6
 800ad06:	8812      	ldrh	r2, [r2, #0]
 800ad08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2244      	movs	r2, #68	; 0x44
 800ad14:	2100      	movs	r1, #0
 800ad16:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2246      	movs	r2, #70	; 0x46
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	689a      	ldr	r2, [r3, #8]
 800ad30:	2380      	movs	r3, #128	; 0x80
 800ad32:	021b      	lsls	r3, r3, #8
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d110      	bne.n	800ad5a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2140      	movs	r1, #64	; 0x40
 800ad44:	438a      	bics	r2, r1
 800ad46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2180      	movs	r1, #128	; 0x80
 800ad54:	01c9      	lsls	r1, r1, #7
 800ad56:	430a      	orrs	r2, r1
 800ad58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2240      	movs	r2, #64	; 0x40
 800ad62:	4013      	ands	r3, r2
 800ad64:	2b40      	cmp	r3, #64	; 0x40
 800ad66:	d007      	beq.n	800ad78 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2140      	movs	r1, #64	; 0x40
 800ad74:	430a      	orrs	r2, r1
 800ad76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	68da      	ldr	r2, [r3, #12]
 800ad7c:	23e0      	movs	r3, #224	; 0xe0
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d94e      	bls.n	800ae22 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d004      	beq.n	800ad96 <HAL_SPI_Transmit+0x11e>
 800ad8c:	2316      	movs	r3, #22
 800ad8e:	18fb      	adds	r3, r7, r3
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d13f      	bne.n	800ae16 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9a:	881a      	ldrh	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada6:	1c9a      	adds	r2, r3, #2
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	3b01      	subs	r3, #1
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800adba:	e02c      	b.n	800ae16 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	2202      	movs	r2, #2
 800adc4:	4013      	ands	r3, r2
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d112      	bne.n	800adf0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adce:	881a      	ldrh	r2, [r3, #0]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adda:	1c9a      	adds	r2, r3, #2
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	3b01      	subs	r3, #1
 800ade8:	b29a      	uxth	r2, r3
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800adee:	e012      	b.n	800ae16 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adf0:	f7fe fb5e 	bl	80094b0 <HAL_GetTick>
 800adf4:	0002      	movs	r2, r0
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d802      	bhi.n	800ae06 <HAL_SPI_Transmit+0x18e>
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	3301      	adds	r3, #1
 800ae04:	d102      	bne.n	800ae0c <HAL_SPI_Transmit+0x194>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d104      	bne.n	800ae16 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800ae0c:	231f      	movs	r3, #31
 800ae0e:	18fb      	adds	r3, r7, r3
 800ae10:	2203      	movs	r2, #3
 800ae12:	701a      	strb	r2, [r3, #0]
          goto error;
 800ae14:	e079      	b.n	800af0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1cd      	bne.n	800adbc <HAL_SPI_Transmit+0x144>
 800ae20:	e04f      	b.n	800aec2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d004      	beq.n	800ae34 <HAL_SPI_Transmit+0x1bc>
 800ae2a:	2316      	movs	r3, #22
 800ae2c:	18fb      	adds	r3, r7, r3
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d141      	bne.n	800aeb8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	7812      	ldrb	r2, [r2, #0]
 800ae40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	3b01      	subs	r3, #1
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800ae5a:	e02d      	b.n	800aeb8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	2202      	movs	r2, #2
 800ae64:	4013      	ands	r3, r2
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d113      	bne.n	800ae92 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	330c      	adds	r3, #12
 800ae74:	7812      	ldrb	r2, [r2, #0]
 800ae76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7c:	1c5a      	adds	r2, r3, #1
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ae90:	e012      	b.n	800aeb8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae92:	f7fe fb0d 	bl	80094b0 <HAL_GetTick>
 800ae96:	0002      	movs	r2, r0
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d802      	bhi.n	800aea8 <HAL_SPI_Transmit+0x230>
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	3301      	adds	r3, #1
 800aea6:	d102      	bne.n	800aeae <HAL_SPI_Transmit+0x236>
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d104      	bne.n	800aeb8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800aeae:	231f      	movs	r3, #31
 800aeb0:	18fb      	adds	r3, r7, r3
 800aeb2:	2203      	movs	r2, #3
 800aeb4:	701a      	strb	r2, [r3, #0]
          goto error;
 800aeb6:	e028      	b.n	800af0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1cc      	bne.n	800ae5c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	0018      	movs	r0, r3
 800aeca:	f000 fce5 	bl	800b898 <SPI_EndRxTxTransaction>
 800aece:	1e03      	subs	r3, r0, #0
 800aed0:	d002      	beq.n	800aed8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2220      	movs	r2, #32
 800aed6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10a      	bne.n	800aef6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aee0:	2300      	movs	r3, #0
 800aee2:	613b      	str	r3, [r7, #16]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	613b      	str	r3, [r7, #16]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	613b      	str	r3, [r7, #16]
 800aef4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d004      	beq.n	800af08 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800aefe:	231f      	movs	r3, #31
 800af00:	18fb      	adds	r3, r7, r3
 800af02:	2201      	movs	r2, #1
 800af04:	701a      	strb	r2, [r3, #0]
 800af06:	e000      	b.n	800af0a <HAL_SPI_Transmit+0x292>
  }

error:
 800af08:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	225d      	movs	r2, #93	; 0x5d
 800af0e:	2101      	movs	r1, #1
 800af10:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	225c      	movs	r2, #92	; 0x5c
 800af16:	2100      	movs	r1, #0
 800af18:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800af1a:	231f      	movs	r3, #31
 800af1c:	18fb      	adds	r3, r7, r3
 800af1e:	781b      	ldrb	r3, [r3, #0]
}
 800af20:	0018      	movs	r0, r3
 800af22:	46bd      	mov	sp, r7
 800af24:	b008      	add	sp, #32
 800af26:	bd80      	pop	{r7, pc}

0800af28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af28:	b590      	push	{r4, r7, lr}
 800af2a:	b089      	sub	sp, #36	; 0x24
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	603b      	str	r3, [r7, #0]
 800af34:	1dbb      	adds	r3, r7, #6
 800af36:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af38:	2317      	movs	r3, #23
 800af3a:	18fb      	adds	r3, r7, r3
 800af3c:	2200      	movs	r2, #0
 800af3e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	2382      	movs	r3, #130	; 0x82
 800af46:	005b      	lsls	r3, r3, #1
 800af48:	429a      	cmp	r2, r3
 800af4a:	d113      	bne.n	800af74 <HAL_SPI_Receive+0x4c>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10f      	bne.n	800af74 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	225d      	movs	r2, #93	; 0x5d
 800af58:	2104      	movs	r1, #4
 800af5a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800af5c:	1dbb      	adds	r3, r7, #6
 800af5e:	881c      	ldrh	r4, [r3, #0]
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	0023      	movs	r3, r4
 800af6c:	f000 f928 	bl	800b1c0 <HAL_SPI_TransmitReceive>
 800af70:	0003      	movs	r3, r0
 800af72:	e11c      	b.n	800b1ae <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	225c      	movs	r2, #92	; 0x5c
 800af78:	5c9b      	ldrb	r3, [r3, r2]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d101      	bne.n	800af82 <HAL_SPI_Receive+0x5a>
 800af7e:	2302      	movs	r3, #2
 800af80:	e115      	b.n	800b1ae <HAL_SPI_Receive+0x286>
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	225c      	movs	r2, #92	; 0x5c
 800af86:	2101      	movs	r1, #1
 800af88:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af8a:	f7fe fa91 	bl	80094b0 <HAL_GetTick>
 800af8e:	0003      	movs	r3, r0
 800af90:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	225d      	movs	r2, #93	; 0x5d
 800af96:	5c9b      	ldrb	r3, [r3, r2]
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d004      	beq.n	800afa8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800af9e:	2317      	movs	r3, #23
 800afa0:	18fb      	adds	r3, r7, r3
 800afa2:	2202      	movs	r2, #2
 800afa4:	701a      	strb	r2, [r3, #0]
    goto error;
 800afa6:	e0f7      	b.n	800b198 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <HAL_SPI_Receive+0x8e>
 800afae:	1dbb      	adds	r3, r7, #6
 800afb0:	881b      	ldrh	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d104      	bne.n	800afc0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800afb6:	2317      	movs	r3, #23
 800afb8:	18fb      	adds	r3, r7, r3
 800afba:	2201      	movs	r2, #1
 800afbc:	701a      	strb	r2, [r3, #0]
    goto error;
 800afbe:	e0eb      	b.n	800b198 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	225d      	movs	r2, #93	; 0x5d
 800afc4:	2104      	movs	r1, #4
 800afc6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	1dba      	adds	r2, r7, #6
 800afd8:	2144      	movs	r1, #68	; 0x44
 800afda:	8812      	ldrh	r2, [r2, #0]
 800afdc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	1dba      	adds	r2, r7, #6
 800afe2:	2146      	movs	r1, #70	; 0x46
 800afe4:	8812      	ldrh	r2, [r2, #0]
 800afe6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2200      	movs	r2, #0
 800aff2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2200      	movs	r2, #0
 800aff8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	68da      	ldr	r2, [r3, #12]
 800b00a:	23e0      	movs	r3, #224	; 0xe0
 800b00c:	00db      	lsls	r3, r3, #3
 800b00e:	429a      	cmp	r2, r3
 800b010:	d908      	bls.n	800b024 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4966      	ldr	r1, [pc, #408]	; (800b1b8 <HAL_SPI_Receive+0x290>)
 800b01e:	400a      	ands	r2, r1
 800b020:	605a      	str	r2, [r3, #4]
 800b022:	e008      	b.n	800b036 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2180      	movs	r1, #128	; 0x80
 800b030:	0149      	lsls	r1, r1, #5
 800b032:	430a      	orrs	r2, r1
 800b034:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	689a      	ldr	r2, [r3, #8]
 800b03a:	2380      	movs	r3, #128	; 0x80
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	429a      	cmp	r2, r3
 800b040:	d10f      	bne.n	800b062 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2140      	movs	r1, #64	; 0x40
 800b04e:	438a      	bics	r2, r1
 800b050:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4957      	ldr	r1, [pc, #348]	; (800b1bc <HAL_SPI_Receive+0x294>)
 800b05e:	400a      	ands	r2, r1
 800b060:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2240      	movs	r2, #64	; 0x40
 800b06a:	4013      	ands	r3, r2
 800b06c:	2b40      	cmp	r3, #64	; 0x40
 800b06e:	d007      	beq.n	800b080 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2140      	movs	r1, #64	; 0x40
 800b07c:	430a      	orrs	r2, r1
 800b07e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	68da      	ldr	r2, [r3, #12]
 800b084:	23e0      	movs	r3, #224	; 0xe0
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	429a      	cmp	r2, r3
 800b08a:	d900      	bls.n	800b08e <HAL_SPI_Receive+0x166>
 800b08c:	e069      	b.n	800b162 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b08e:	e031      	b.n	800b0f4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	2201      	movs	r2, #1
 800b098:	4013      	ands	r3, r2
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d117      	bne.n	800b0ce <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	330c      	adds	r3, #12
 800b0a4:	001a      	movs	r2, r3
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0aa:	7812      	ldrb	r2, [r2, #0]
 800b0ac:	b2d2      	uxtb	r2, r2
 800b0ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2246      	movs	r2, #70	; 0x46
 800b0be:	5a9b      	ldrh	r3, [r3, r2]
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	b299      	uxth	r1, r3
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2246      	movs	r2, #70	; 0x46
 800b0ca:	5299      	strh	r1, [r3, r2]
 800b0cc:	e012      	b.n	800b0f4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0ce:	f7fe f9ef 	bl	80094b0 <HAL_GetTick>
 800b0d2:	0002      	movs	r2, r0
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	683a      	ldr	r2, [r7, #0]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d802      	bhi.n	800b0e4 <HAL_SPI_Receive+0x1bc>
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	d102      	bne.n	800b0ea <HAL_SPI_Receive+0x1c2>
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d104      	bne.n	800b0f4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800b0ea:	2317      	movs	r3, #23
 800b0ec:	18fb      	adds	r3, r7, r3
 800b0ee:	2203      	movs	r2, #3
 800b0f0:	701a      	strb	r2, [r3, #0]
          goto error;
 800b0f2:	e051      	b.n	800b198 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2246      	movs	r2, #70	; 0x46
 800b0f8:	5a9b      	ldrh	r3, [r3, r2]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1c7      	bne.n	800b090 <HAL_SPI_Receive+0x168>
 800b100:	e035      	b.n	800b16e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	2201      	movs	r2, #1
 800b10a:	4013      	ands	r3, r2
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d115      	bne.n	800b13c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68da      	ldr	r2, [r3, #12]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11a:	b292      	uxth	r2, r2
 800b11c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b122:	1c9a      	adds	r2, r3, #2
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2246      	movs	r2, #70	; 0x46
 800b12c:	5a9b      	ldrh	r3, [r3, r2]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	3b01      	subs	r3, #1
 800b132:	b299      	uxth	r1, r3
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2246      	movs	r2, #70	; 0x46
 800b138:	5299      	strh	r1, [r3, r2]
 800b13a:	e012      	b.n	800b162 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b13c:	f7fe f9b8 	bl	80094b0 <HAL_GetTick>
 800b140:	0002      	movs	r2, r0
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d802      	bhi.n	800b152 <HAL_SPI_Receive+0x22a>
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	3301      	adds	r3, #1
 800b150:	d102      	bne.n	800b158 <HAL_SPI_Receive+0x230>
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d104      	bne.n	800b162 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800b158:	2317      	movs	r3, #23
 800b15a:	18fb      	adds	r3, r7, r3
 800b15c:	2203      	movs	r2, #3
 800b15e:	701a      	strb	r2, [r3, #0]
          goto error;
 800b160:	e01a      	b.n	800b198 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2246      	movs	r2, #70	; 0x46
 800b166:	5a9b      	ldrh	r3, [r3, r2]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1c9      	bne.n	800b102 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	6839      	ldr	r1, [r7, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	0018      	movs	r0, r3
 800b176:	f000 fb31 	bl	800b7dc <SPI_EndRxTransaction>
 800b17a:	1e03      	subs	r3, r0, #0
 800b17c:	d002      	beq.n	800b184 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2220      	movs	r2, #32
 800b182:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d004      	beq.n	800b196 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800b18c:	2317      	movs	r3, #23
 800b18e:	18fb      	adds	r3, r7, r3
 800b190:	2201      	movs	r2, #1
 800b192:	701a      	strb	r2, [r3, #0]
 800b194:	e000      	b.n	800b198 <HAL_SPI_Receive+0x270>
  }

error :
 800b196:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	225d      	movs	r2, #93	; 0x5d
 800b19c:	2101      	movs	r1, #1
 800b19e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	225c      	movs	r2, #92	; 0x5c
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b1a8:	2317      	movs	r3, #23
 800b1aa:	18fb      	adds	r3, r7, r3
 800b1ac:	781b      	ldrb	r3, [r3, #0]
}
 800b1ae:	0018      	movs	r0, r3
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	b007      	add	sp, #28
 800b1b4:	bd90      	pop	{r4, r7, pc}
 800b1b6:	46c0      	nop			; (mov r8, r8)
 800b1b8:	ffffefff 	.word	0xffffefff
 800b1bc:	ffffbfff 	.word	0xffffbfff

0800b1c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08a      	sub	sp, #40	; 0x28
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	001a      	movs	r2, r3
 800b1ce:	1cbb      	adds	r3, r7, #2
 800b1d0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b1d6:	2323      	movs	r3, #35	; 0x23
 800b1d8:	18fb      	adds	r3, r7, r3
 800b1da:	2200      	movs	r2, #0
 800b1dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	225c      	movs	r2, #92	; 0x5c
 800b1e2:	5c9b      	ldrb	r3, [r3, r2]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d101      	bne.n	800b1ec <HAL_SPI_TransmitReceive+0x2c>
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	e1b5      	b.n	800b558 <HAL_SPI_TransmitReceive+0x398>
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	225c      	movs	r2, #92	; 0x5c
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1f4:	f7fe f95c 	bl	80094b0 <HAL_GetTick>
 800b1f8:	0003      	movs	r3, r0
 800b1fa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b1fc:	201b      	movs	r0, #27
 800b1fe:	183b      	adds	r3, r7, r0
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	215d      	movs	r1, #93	; 0x5d
 800b204:	5c52      	ldrb	r2, [r2, r1]
 800b206:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b20e:	2312      	movs	r3, #18
 800b210:	18fb      	adds	r3, r7, r3
 800b212:	1cba      	adds	r2, r7, #2
 800b214:	8812      	ldrh	r2, [r2, #0]
 800b216:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b218:	183b      	adds	r3, r7, r0
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d011      	beq.n	800b244 <HAL_SPI_TransmitReceive+0x84>
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	2382      	movs	r3, #130	; 0x82
 800b224:	005b      	lsls	r3, r3, #1
 800b226:	429a      	cmp	r2, r3
 800b228:	d107      	bne.n	800b23a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d103      	bne.n	800b23a <HAL_SPI_TransmitReceive+0x7a>
 800b232:	183b      	adds	r3, r7, r0
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b04      	cmp	r3, #4
 800b238:	d004      	beq.n	800b244 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b23a:	2323      	movs	r3, #35	; 0x23
 800b23c:	18fb      	adds	r3, r7, r3
 800b23e:	2202      	movs	r2, #2
 800b240:	701a      	strb	r2, [r3, #0]
    goto error;
 800b242:	e17e      	b.n	800b542 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d006      	beq.n	800b258 <HAL_SPI_TransmitReceive+0x98>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <HAL_SPI_TransmitReceive+0x98>
 800b250:	1cbb      	adds	r3, r7, #2
 800b252:	881b      	ldrh	r3, [r3, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d104      	bne.n	800b262 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b258:	2323      	movs	r3, #35	; 0x23
 800b25a:	18fb      	adds	r3, r7, r3
 800b25c:	2201      	movs	r2, #1
 800b25e:	701a      	strb	r2, [r3, #0]
    goto error;
 800b260:	e16f      	b.n	800b542 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	225d      	movs	r2, #93	; 0x5d
 800b266:	5c9b      	ldrb	r3, [r3, r2]
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b04      	cmp	r3, #4
 800b26c:	d003      	beq.n	800b276 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	225d      	movs	r2, #93	; 0x5d
 800b272:	2105      	movs	r1, #5
 800b274:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	1cba      	adds	r2, r7, #2
 800b286:	2146      	movs	r1, #70	; 0x46
 800b288:	8812      	ldrh	r2, [r2, #0]
 800b28a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	1cba      	adds	r2, r7, #2
 800b290:	2144      	movs	r1, #68	; 0x44
 800b292:	8812      	ldrh	r2, [r2, #0]
 800b294:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	1cba      	adds	r2, r7, #2
 800b2a0:	8812      	ldrh	r2, [r2, #0]
 800b2a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	1cba      	adds	r2, r7, #2
 800b2a8:	8812      	ldrh	r2, [r2, #0]
 800b2aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	68da      	ldr	r2, [r3, #12]
 800b2bc:	23e0      	movs	r3, #224	; 0xe0
 800b2be:	00db      	lsls	r3, r3, #3
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d908      	bls.n	800b2d6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	49a4      	ldr	r1, [pc, #656]	; (800b560 <HAL_SPI_TransmitReceive+0x3a0>)
 800b2d0:	400a      	ands	r2, r1
 800b2d2:	605a      	str	r2, [r3, #4]
 800b2d4:	e008      	b.n	800b2e8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	685a      	ldr	r2, [r3, #4]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2180      	movs	r1, #128	; 0x80
 800b2e2:	0149      	lsls	r1, r1, #5
 800b2e4:	430a      	orrs	r2, r1
 800b2e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2240      	movs	r2, #64	; 0x40
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	2b40      	cmp	r3, #64	; 0x40
 800b2f4:	d007      	beq.n	800b306 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2140      	movs	r1, #64	; 0x40
 800b302:	430a      	orrs	r2, r1
 800b304:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	68da      	ldr	r2, [r3, #12]
 800b30a:	23e0      	movs	r3, #224	; 0xe0
 800b30c:	00db      	lsls	r3, r3, #3
 800b30e:	429a      	cmp	r2, r3
 800b310:	d800      	bhi.n	800b314 <HAL_SPI_TransmitReceive+0x154>
 800b312:	e07f      	b.n	800b414 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d005      	beq.n	800b328 <HAL_SPI_TransmitReceive+0x168>
 800b31c:	2312      	movs	r3, #18
 800b31e:	18fb      	adds	r3, r7, r3
 800b320:	881b      	ldrh	r3, [r3, #0]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d000      	beq.n	800b328 <HAL_SPI_TransmitReceive+0x168>
 800b326:	e069      	b.n	800b3fc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32c:	881a      	ldrh	r2, [r3, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b338:	1c9a      	adds	r2, r3, #2
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b342:	b29b      	uxth	r3, r3
 800b344:	3b01      	subs	r3, #1
 800b346:	b29a      	uxth	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b34c:	e056      	b.n	800b3fc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	2202      	movs	r2, #2
 800b356:	4013      	ands	r3, r2
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d11b      	bne.n	800b394 <HAL_SPI_TransmitReceive+0x1d4>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b360:	b29b      	uxth	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d016      	beq.n	800b394 <HAL_SPI_TransmitReceive+0x1d4>
 800b366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d113      	bne.n	800b394 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b370:	881a      	ldrh	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37c:	1c9a      	adds	r2, r3, #2
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b386:	b29b      	uxth	r3, r3
 800b388:	3b01      	subs	r3, #1
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b390:	2300      	movs	r3, #0
 800b392:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	2201      	movs	r2, #1
 800b39c:	4013      	ands	r3, r2
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d11c      	bne.n	800b3dc <HAL_SPI_TransmitReceive+0x21c>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2246      	movs	r2, #70	; 0x46
 800b3a6:	5a9b      	ldrh	r3, [r3, r2]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d016      	beq.n	800b3dc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68da      	ldr	r2, [r3, #12]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b8:	b292      	uxth	r2, r2
 800b3ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c0:	1c9a      	adds	r2, r3, #2
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2246      	movs	r2, #70	; 0x46
 800b3ca:	5a9b      	ldrh	r3, [r3, r2]
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	b299      	uxth	r1, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2246      	movs	r2, #70	; 0x46
 800b3d6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b3dc:	f7fe f868 	bl	80094b0 <HAL_GetTick>
 800b3e0:	0002      	movs	r2, r0
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d807      	bhi.n	800b3fc <HAL_SPI_TransmitReceive+0x23c>
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	d004      	beq.n	800b3fc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800b3f2:	2323      	movs	r3, #35	; 0x23
 800b3f4:	18fb      	adds	r3, r7, r3
 800b3f6:	2203      	movs	r2, #3
 800b3f8:	701a      	strb	r2, [r3, #0]
        goto error;
 800b3fa:	e0a2      	b.n	800b542 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b400:	b29b      	uxth	r3, r3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1a3      	bne.n	800b34e <HAL_SPI_TransmitReceive+0x18e>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2246      	movs	r2, #70	; 0x46
 800b40a:	5a9b      	ldrh	r3, [r3, r2]
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d19d      	bne.n	800b34e <HAL_SPI_TransmitReceive+0x18e>
 800b412:	e085      	b.n	800b520 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d005      	beq.n	800b428 <HAL_SPI_TransmitReceive+0x268>
 800b41c:	2312      	movs	r3, #18
 800b41e:	18fb      	adds	r3, r7, r3
 800b420:	881b      	ldrh	r3, [r3, #0]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d000      	beq.n	800b428 <HAL_SPI_TransmitReceive+0x268>
 800b426:	e070      	b.n	800b50a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	330c      	adds	r3, #12
 800b432:	7812      	ldrb	r2, [r2, #0]
 800b434:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b444:	b29b      	uxth	r3, r3
 800b446:	3b01      	subs	r3, #1
 800b448:	b29a      	uxth	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b44e:	e05c      	b.n	800b50a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	2202      	movs	r2, #2
 800b458:	4013      	ands	r3, r2
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d11c      	bne.n	800b498 <HAL_SPI_TransmitReceive+0x2d8>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b462:	b29b      	uxth	r3, r3
 800b464:	2b00      	cmp	r3, #0
 800b466:	d017      	beq.n	800b498 <HAL_SPI_TransmitReceive+0x2d8>
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d114      	bne.n	800b498 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	330c      	adds	r3, #12
 800b478:	7812      	ldrb	r2, [r2, #0]
 800b47a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	3b01      	subs	r3, #1
 800b48e:	b29a      	uxth	r2, r3
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b494:	2300      	movs	r3, #0
 800b496:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d11e      	bne.n	800b4e4 <HAL_SPI_TransmitReceive+0x324>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2246      	movs	r2, #70	; 0x46
 800b4aa:	5a9b      	ldrh	r3, [r3, r2]
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d018      	beq.n	800b4e4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	330c      	adds	r3, #12
 800b4b8:	001a      	movs	r2, r3
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4be:	7812      	ldrb	r2, [r2, #0]
 800b4c0:	b2d2      	uxtb	r2, r2
 800b4c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c8:	1c5a      	adds	r2, r3, #1
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2246      	movs	r2, #70	; 0x46
 800b4d2:	5a9b      	ldrh	r3, [r3, r2]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	b299      	uxth	r1, r3
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2246      	movs	r2, #70	; 0x46
 800b4de:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b4e4:	f7fd ffe4 	bl	80094b0 <HAL_GetTick>
 800b4e8:	0002      	movs	r2, r0
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d802      	bhi.n	800b4fa <HAL_SPI_TransmitReceive+0x33a>
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	d102      	bne.n	800b500 <HAL_SPI_TransmitReceive+0x340>
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d104      	bne.n	800b50a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800b500:	2323      	movs	r3, #35	; 0x23
 800b502:	18fb      	adds	r3, r7, r3
 800b504:	2203      	movs	r2, #3
 800b506:	701a      	strb	r2, [r3, #0]
        goto error;
 800b508:	e01b      	b.n	800b542 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b50e:	b29b      	uxth	r3, r3
 800b510:	2b00      	cmp	r3, #0
 800b512:	d19d      	bne.n	800b450 <HAL_SPI_TransmitReceive+0x290>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2246      	movs	r2, #70	; 0x46
 800b518:	5a9b      	ldrh	r3, [r3, r2]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d197      	bne.n	800b450 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b520:	69fa      	ldr	r2, [r7, #28]
 800b522:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	0018      	movs	r0, r3
 800b528:	f000 f9b6 	bl	800b898 <SPI_EndRxTxTransaction>
 800b52c:	1e03      	subs	r3, r0, #0
 800b52e:	d007      	beq.n	800b540 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800b530:	2323      	movs	r3, #35	; 0x23
 800b532:	18fb      	adds	r3, r7, r3
 800b534:	2201      	movs	r2, #1
 800b536:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2220      	movs	r2, #32
 800b53c:	661a      	str	r2, [r3, #96]	; 0x60
 800b53e:	e000      	b.n	800b542 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800b540:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	225d      	movs	r2, #93	; 0x5d
 800b546:	2101      	movs	r1, #1
 800b548:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	225c      	movs	r2, #92	; 0x5c
 800b54e:	2100      	movs	r1, #0
 800b550:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b552:	2323      	movs	r3, #35	; 0x23
 800b554:	18fb      	adds	r3, r7, r3
 800b556:	781b      	ldrb	r3, [r3, #0]
}
 800b558:	0018      	movs	r0, r3
 800b55a:	46bd      	mov	sp, r7
 800b55c:	b00a      	add	sp, #40	; 0x28
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	ffffefff 	.word	0xffffefff

0800b564 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	225d      	movs	r2, #93	; 0x5d
 800b570:	5c9b      	ldrb	r3, [r3, r2]
 800b572:	b2db      	uxtb	r3, r3
}
 800b574:	0018      	movs	r0, r3
 800b576:	46bd      	mov	sp, r7
 800b578:	b002      	add	sp, #8
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b088      	sub	sp, #32
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	603b      	str	r3, [r7, #0]
 800b588:	1dfb      	adds	r3, r7, #7
 800b58a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b58c:	f7fd ff90 	bl	80094b0 <HAL_GetTick>
 800b590:	0002      	movs	r2, r0
 800b592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b594:	1a9b      	subs	r3, r3, r2
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	18d3      	adds	r3, r2, r3
 800b59a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b59c:	f7fd ff88 	bl	80094b0 <HAL_GetTick>
 800b5a0:	0003      	movs	r3, r0
 800b5a2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b5a4:	4b3a      	ldr	r3, [pc, #232]	; (800b690 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	015b      	lsls	r3, r3, #5
 800b5aa:	0d1b      	lsrs	r3, r3, #20
 800b5ac:	69fa      	ldr	r2, [r7, #28]
 800b5ae:	4353      	muls	r3, r2
 800b5b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b5b2:	e058      	b.n	800b666 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	d055      	beq.n	800b666 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b5ba:	f7fd ff79 	bl	80094b0 <HAL_GetTick>
 800b5be:	0002      	movs	r2, r0
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	69fa      	ldr	r2, [r7, #28]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d902      	bls.n	800b5d0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d142      	bne.n	800b656 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	21e0      	movs	r1, #224	; 0xe0
 800b5dc:	438a      	bics	r2, r1
 800b5de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	685a      	ldr	r2, [r3, #4]
 800b5e4:	2382      	movs	r3, #130	; 0x82
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d113      	bne.n	800b614 <SPI_WaitFlagStateUntilTimeout+0x98>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	689a      	ldr	r2, [r3, #8]
 800b5f0:	2380      	movs	r3, #128	; 0x80
 800b5f2:	021b      	lsls	r3, r3, #8
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d005      	beq.n	800b604 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	689a      	ldr	r2, [r3, #8]
 800b5fc:	2380      	movs	r3, #128	; 0x80
 800b5fe:	00db      	lsls	r3, r3, #3
 800b600:	429a      	cmp	r2, r3
 800b602:	d107      	bne.n	800b614 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2140      	movs	r1, #64	; 0x40
 800b610:	438a      	bics	r2, r1
 800b612:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b618:	2380      	movs	r3, #128	; 0x80
 800b61a:	019b      	lsls	r3, r3, #6
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d110      	bne.n	800b642 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	491a      	ldr	r1, [pc, #104]	; (800b694 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b62c:	400a      	ands	r2, r1
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2180      	movs	r1, #128	; 0x80
 800b63c:	0189      	lsls	r1, r1, #6
 800b63e:	430a      	orrs	r2, r1
 800b640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	225d      	movs	r2, #93	; 0x5d
 800b646:	2101      	movs	r1, #1
 800b648:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	225c      	movs	r2, #92	; 0x5c
 800b64e:	2100      	movs	r1, #0
 800b650:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b652:	2303      	movs	r3, #3
 800b654:	e017      	b.n	800b686 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d101      	bne.n	800b660 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	3b01      	subs	r3, #1
 800b664:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	4013      	ands	r3, r2
 800b670:	68ba      	ldr	r2, [r7, #8]
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	425a      	negs	r2, r3
 800b676:	4153      	adcs	r3, r2
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	001a      	movs	r2, r3
 800b67c:	1dfb      	adds	r3, r7, #7
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	429a      	cmp	r2, r3
 800b682:	d197      	bne.n	800b5b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	0018      	movs	r0, r3
 800b688:	46bd      	mov	sp, r7
 800b68a:	b008      	add	sp, #32
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	46c0      	nop			; (mov r8, r8)
 800b690:	20000004 	.word	0x20000004
 800b694:	ffffdfff 	.word	0xffffdfff

0800b698 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08a      	sub	sp, #40	; 0x28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b6a6:	2317      	movs	r3, #23
 800b6a8:	18fb      	adds	r3, r7, r3
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b6ae:	f7fd feff 	bl	80094b0 <HAL_GetTick>
 800b6b2:	0002      	movs	r2, r0
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b6:	1a9b      	subs	r3, r3, r2
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	18d3      	adds	r3, r2, r3
 800b6bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b6be:	f7fd fef7 	bl	80094b0 <HAL_GetTick>
 800b6c2:	0003      	movs	r3, r0
 800b6c4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	330c      	adds	r3, #12
 800b6cc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b6ce:	4b41      	ldr	r3, [pc, #260]	; (800b7d4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	0013      	movs	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	189b      	adds	r3, r3, r2
 800b6d8:	00da      	lsls	r2, r3, #3
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	0d1b      	lsrs	r3, r3, #20
 800b6de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e0:	4353      	muls	r3, r2
 800b6e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b6e4:	e068      	b.n	800b7b8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	23c0      	movs	r3, #192	; 0xc0
 800b6ea:	00db      	lsls	r3, r3, #3
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d10a      	bne.n	800b706 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d107      	bne.n	800b706 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	2117      	movs	r1, #23
 800b6fe:	187b      	adds	r3, r7, r1
 800b700:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b702:	187b      	adds	r3, r7, r1
 800b704:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	d055      	beq.n	800b7b8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b70c:	f7fd fed0 	bl	80094b0 <HAL_GetTick>
 800b710:	0002      	movs	r2, r0
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b718:	429a      	cmp	r2, r3
 800b71a:	d902      	bls.n	800b722 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d142      	bne.n	800b7a8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	21e0      	movs	r1, #224	; 0xe0
 800b72e:	438a      	bics	r2, r1
 800b730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	2382      	movs	r3, #130	; 0x82
 800b738:	005b      	lsls	r3, r3, #1
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d113      	bne.n	800b766 <SPI_WaitFifoStateUntilTimeout+0xce>
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	689a      	ldr	r2, [r3, #8]
 800b742:	2380      	movs	r3, #128	; 0x80
 800b744:	021b      	lsls	r3, r3, #8
 800b746:	429a      	cmp	r2, r3
 800b748:	d005      	beq.n	800b756 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	689a      	ldr	r2, [r3, #8]
 800b74e:	2380      	movs	r3, #128	; 0x80
 800b750:	00db      	lsls	r3, r3, #3
 800b752:	429a      	cmp	r2, r3
 800b754:	d107      	bne.n	800b766 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2140      	movs	r1, #64	; 0x40
 800b762:	438a      	bics	r2, r1
 800b764:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b76a:	2380      	movs	r3, #128	; 0x80
 800b76c:	019b      	lsls	r3, r3, #6
 800b76e:	429a      	cmp	r2, r3
 800b770:	d110      	bne.n	800b794 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4916      	ldr	r1, [pc, #88]	; (800b7d8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800b77e:	400a      	ands	r2, r1
 800b780:	601a      	str	r2, [r3, #0]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2180      	movs	r1, #128	; 0x80
 800b78e:	0189      	lsls	r1, r1, #6
 800b790:	430a      	orrs	r2, r1
 800b792:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	225d      	movs	r2, #93	; 0x5d
 800b798:	2101      	movs	r1, #1
 800b79a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	225c      	movs	r2, #92	; 0x5c
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	e010      	b.n	800b7ca <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d101      	bne.n	800b7b2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d18e      	bne.n	800b6e6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	0018      	movs	r0, r3
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	b00a      	add	sp, #40	; 0x28
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	46c0      	nop			; (mov r8, r8)
 800b7d4:	20000004 	.word	0x20000004
 800b7d8:	ffffdfff 	.word	0xffffdfff

0800b7dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af02      	add	r7, sp, #8
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	2382      	movs	r3, #130	; 0x82
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d113      	bne.n	800b81c <SPI_EndRxTransaction+0x40>
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	689a      	ldr	r2, [r3, #8]
 800b7f8:	2380      	movs	r3, #128	; 0x80
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d005      	beq.n	800b80c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	689a      	ldr	r2, [r3, #8]
 800b804:	2380      	movs	r3, #128	; 0x80
 800b806:	00db      	lsls	r3, r3, #3
 800b808:	429a      	cmp	r2, r3
 800b80a:	d107      	bne.n	800b81c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2140      	movs	r1, #64	; 0x40
 800b818:	438a      	bics	r2, r1
 800b81a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	0013      	movs	r3, r2
 800b826:	2200      	movs	r2, #0
 800b828:	2180      	movs	r1, #128	; 0x80
 800b82a:	f7ff fea7 	bl	800b57c <SPI_WaitFlagStateUntilTimeout>
 800b82e:	1e03      	subs	r3, r0, #0
 800b830:	d007      	beq.n	800b842 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b836:	2220      	movs	r2, #32
 800b838:	431a      	orrs	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b83e:	2303      	movs	r3, #3
 800b840:	e026      	b.n	800b890 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	2382      	movs	r3, #130	; 0x82
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d11f      	bne.n	800b88e <SPI_EndRxTransaction+0xb2>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	689a      	ldr	r2, [r3, #8]
 800b852:	2380      	movs	r3, #128	; 0x80
 800b854:	021b      	lsls	r3, r3, #8
 800b856:	429a      	cmp	r2, r3
 800b858:	d005      	beq.n	800b866 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	689a      	ldr	r2, [r3, #8]
 800b85e:	2380      	movs	r3, #128	; 0x80
 800b860:	00db      	lsls	r3, r3, #3
 800b862:	429a      	cmp	r2, r3
 800b864:	d113      	bne.n	800b88e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b866:	68ba      	ldr	r2, [r7, #8]
 800b868:	23c0      	movs	r3, #192	; 0xc0
 800b86a:	00d9      	lsls	r1, r3, #3
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	0013      	movs	r3, r2
 800b874:	2200      	movs	r2, #0
 800b876:	f7ff ff0f 	bl	800b698 <SPI_WaitFifoStateUntilTimeout>
 800b87a:	1e03      	subs	r3, r0, #0
 800b87c:	d007      	beq.n	800b88e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b882:	2220      	movs	r2, #32
 800b884:	431a      	orrs	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e000      	b.n	800b890 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	0018      	movs	r0, r3
 800b892:	46bd      	mov	sp, r7
 800b894:	b004      	add	sp, #16
 800b896:	bd80      	pop	{r7, pc}

0800b898 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af02      	add	r7, sp, #8
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	23c0      	movs	r3, #192	; 0xc0
 800b8a8:	0159      	lsls	r1, r3, #5
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	0013      	movs	r3, r2
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f7ff fef0 	bl	800b698 <SPI_WaitFifoStateUntilTimeout>
 800b8b8:	1e03      	subs	r3, r0, #0
 800b8ba:	d007      	beq.n	800b8cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8c0:	2220      	movs	r2, #32
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	e027      	b.n	800b91c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	0013      	movs	r3, r2
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	2180      	movs	r1, #128	; 0x80
 800b8da:	f7ff fe4f 	bl	800b57c <SPI_WaitFlagStateUntilTimeout>
 800b8de:	1e03      	subs	r3, r0, #0
 800b8e0:	d007      	beq.n	800b8f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8e6:	2220      	movs	r2, #32
 800b8e8:	431a      	orrs	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	e014      	b.n	800b91c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	23c0      	movs	r3, #192	; 0xc0
 800b8f6:	00d9      	lsls	r1, r3, #3
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	0013      	movs	r3, r2
 800b900:	2200      	movs	r2, #0
 800b902:	f7ff fec9 	bl	800b698 <SPI_WaitFifoStateUntilTimeout>
 800b906:	1e03      	subs	r3, r0, #0
 800b908:	d007      	beq.n	800b91a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b90e:	2220      	movs	r2, #32
 800b910:	431a      	orrs	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b916:	2303      	movs	r3, #3
 800b918:	e000      	b.n	800b91c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	0018      	movs	r0, r3
 800b91e:	46bd      	mov	sp, r7
 800b920:	b004      	add	sp, #16
 800b922:	bd80      	pop	{r7, pc}

0800b924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d101      	bne.n	800b936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	e04a      	b.n	800b9cc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	223d      	movs	r2, #61	; 0x3d
 800b93a:	5c9b      	ldrb	r3, [r3, r2]
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d107      	bne.n	800b952 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	223c      	movs	r2, #60	; 0x3c
 800b946:	2100      	movs	r1, #0
 800b948:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	0018      	movs	r0, r3
 800b94e:	f7fd fbaf 	bl	80090b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	223d      	movs	r2, #61	; 0x3d
 800b956:	2102      	movs	r1, #2
 800b958:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3304      	adds	r3, #4
 800b962:	0019      	movs	r1, r3
 800b964:	0010      	movs	r0, r2
 800b966:	f000 f883 	bl	800ba70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2248      	movs	r2, #72	; 0x48
 800b96e:	2101      	movs	r1, #1
 800b970:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	223e      	movs	r2, #62	; 0x3e
 800b976:	2101      	movs	r1, #1
 800b978:	5499      	strb	r1, [r3, r2]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	223f      	movs	r2, #63	; 0x3f
 800b97e:	2101      	movs	r1, #1
 800b980:	5499      	strb	r1, [r3, r2]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2240      	movs	r2, #64	; 0x40
 800b986:	2101      	movs	r1, #1
 800b988:	5499      	strb	r1, [r3, r2]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2241      	movs	r2, #65	; 0x41
 800b98e:	2101      	movs	r1, #1
 800b990:	5499      	strb	r1, [r3, r2]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2242      	movs	r2, #66	; 0x42
 800b996:	2101      	movs	r1, #1
 800b998:	5499      	strb	r1, [r3, r2]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2243      	movs	r2, #67	; 0x43
 800b99e:	2101      	movs	r1, #1
 800b9a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2244      	movs	r2, #68	; 0x44
 800b9a6:	2101      	movs	r1, #1
 800b9a8:	5499      	strb	r1, [r3, r2]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2245      	movs	r2, #69	; 0x45
 800b9ae:	2101      	movs	r1, #1
 800b9b0:	5499      	strb	r1, [r3, r2]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2246      	movs	r2, #70	; 0x46
 800b9b6:	2101      	movs	r1, #1
 800b9b8:	5499      	strb	r1, [r3, r2]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2247      	movs	r2, #71	; 0x47
 800b9be:	2101      	movs	r1, #1
 800b9c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	223d      	movs	r2, #61	; 0x3d
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	0018      	movs	r0, r3
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	b002      	add	sp, #8
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	223d      	movs	r2, #61	; 0x3d
 800b9e0:	5c9b      	ldrb	r3, [r3, r2]
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d001      	beq.n	800b9ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e034      	b.n	800ba56 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	223d      	movs	r2, #61	; 0x3d
 800b9f0:	2102      	movs	r1, #2
 800b9f2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a19      	ldr	r2, [pc, #100]	; (800ba60 <HAL_TIM_Base_Start+0x8c>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d009      	beq.n	800ba12 <HAL_TIM_Base_Start+0x3e>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a18      	ldr	r2, [pc, #96]	; (800ba64 <HAL_TIM_Base_Start+0x90>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d004      	beq.n	800ba12 <HAL_TIM_Base_Start+0x3e>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a16      	ldr	r2, [pc, #88]	; (800ba68 <HAL_TIM_Base_Start+0x94>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d116      	bne.n	800ba40 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	4a14      	ldr	r2, [pc, #80]	; (800ba6c <HAL_TIM_Base_Start+0x98>)
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2b06      	cmp	r3, #6
 800ba22:	d016      	beq.n	800ba52 <HAL_TIM_Base_Start+0x7e>
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	2380      	movs	r3, #128	; 0x80
 800ba28:	025b      	lsls	r3, r3, #9
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d011      	beq.n	800ba52 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2101      	movs	r1, #1
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba3e:	e008      	b.n	800ba52 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	430a      	orrs	r2, r1
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	e000      	b.n	800ba54 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba52:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	0018      	movs	r0, r3
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	b004      	add	sp, #16
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	40012c00 	.word	0x40012c00
 800ba64:	40000400 	.word	0x40000400
 800ba68:	40014000 	.word	0x40014000
 800ba6c:	00010007 	.word	0x00010007

0800ba70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a2f      	ldr	r2, [pc, #188]	; (800bb40 <TIM_Base_SetConfig+0xd0>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d003      	beq.n	800ba90 <TIM_Base_SetConfig+0x20>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a2e      	ldr	r2, [pc, #184]	; (800bb44 <TIM_Base_SetConfig+0xd4>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d108      	bne.n	800baa2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2270      	movs	r2, #112	; 0x70
 800ba94:	4393      	bics	r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a26      	ldr	r2, [pc, #152]	; (800bb40 <TIM_Base_SetConfig+0xd0>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d013      	beq.n	800bad2 <TIM_Base_SetConfig+0x62>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4a25      	ldr	r2, [pc, #148]	; (800bb44 <TIM_Base_SetConfig+0xd4>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d00f      	beq.n	800bad2 <TIM_Base_SetConfig+0x62>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a24      	ldr	r2, [pc, #144]	; (800bb48 <TIM_Base_SetConfig+0xd8>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d00b      	beq.n	800bad2 <TIM_Base_SetConfig+0x62>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a23      	ldr	r2, [pc, #140]	; (800bb4c <TIM_Base_SetConfig+0xdc>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d007      	beq.n	800bad2 <TIM_Base_SetConfig+0x62>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a22      	ldr	r2, [pc, #136]	; (800bb50 <TIM_Base_SetConfig+0xe0>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d003      	beq.n	800bad2 <TIM_Base_SetConfig+0x62>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a21      	ldr	r2, [pc, #132]	; (800bb54 <TIM_Base_SetConfig+0xe4>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d108      	bne.n	800bae4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4a20      	ldr	r2, [pc, #128]	; (800bb58 <TIM_Base_SetConfig+0xe8>)
 800bad6:	4013      	ands	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2280      	movs	r2, #128	; 0x80
 800bae8:	4393      	bics	r3, r2
 800baea:	001a      	movs	r2, r3
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	695b      	ldr	r3, [r3, #20]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	689a      	ldr	r2, [r3, #8]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a0c      	ldr	r2, [pc, #48]	; (800bb40 <TIM_Base_SetConfig+0xd0>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d00b      	beq.n	800bb2a <TIM_Base_SetConfig+0xba>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a0d      	ldr	r2, [pc, #52]	; (800bb4c <TIM_Base_SetConfig+0xdc>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d007      	beq.n	800bb2a <TIM_Base_SetConfig+0xba>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a0c      	ldr	r2, [pc, #48]	; (800bb50 <TIM_Base_SetConfig+0xe0>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d003      	beq.n	800bb2a <TIM_Base_SetConfig+0xba>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a0b      	ldr	r2, [pc, #44]	; (800bb54 <TIM_Base_SetConfig+0xe4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d103      	bne.n	800bb32 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	691a      	ldr	r2, [r3, #16]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	615a      	str	r2, [r3, #20]
}
 800bb38:	46c0      	nop			; (mov r8, r8)
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	b004      	add	sp, #16
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	40012c00 	.word	0x40012c00
 800bb44:	40000400 	.word	0x40000400
 800bb48:	40002000 	.word	0x40002000
 800bb4c:	40014000 	.word	0x40014000
 800bb50:	40014400 	.word	0x40014400
 800bb54:	40014800 	.word	0x40014800
 800bb58:	fffffcff 	.word	0xfffffcff

0800bb5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d101      	bne.n	800bb6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e046      	b.n	800bbfc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2284      	movs	r2, #132	; 0x84
 800bb72:	589b      	ldr	r3, [r3, r2]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d107      	bne.n	800bb88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2280      	movs	r2, #128	; 0x80
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	0018      	movs	r0, r3
 800bb84:	f7fd fab4 	bl	80090f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2284      	movs	r2, #132	; 0x84
 800bb8c:	2124      	movs	r1, #36	; 0x24
 800bb8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	438a      	bics	r2, r1
 800bb9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	0018      	movs	r0, r3
 800bba4:	f000 f8dc 	bl	800bd60 <UART_SetConfig>
 800bba8:	0003      	movs	r3, r0
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d101      	bne.n	800bbb2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e024      	b.n	800bbfc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	0018      	movs	r0, r3
 800bbbe:	f000 fa75 	bl	800c0ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	685a      	ldr	r2, [r3, #4]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	490d      	ldr	r1, [pc, #52]	; (800bc04 <HAL_UART_Init+0xa8>)
 800bbce:	400a      	ands	r2, r1
 800bbd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	689a      	ldr	r2, [r3, #8]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	212a      	movs	r1, #42	; 0x2a
 800bbde:	438a      	bics	r2, r1
 800bbe0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2101      	movs	r1, #1
 800bbee:	430a      	orrs	r2, r1
 800bbf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	0018      	movs	r0, r3
 800bbf6:	f000 fb0d 	bl	800c214 <UART_CheckIdleState>
 800bbfa:	0003      	movs	r3, r0
}
 800bbfc:	0018      	movs	r0, r3
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	b002      	add	sp, #8
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	ffffb7ff 	.word	0xffffb7ff

0800bc08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08a      	sub	sp, #40	; 0x28
 800bc0c:	af02      	add	r7, sp, #8
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	603b      	str	r3, [r7, #0]
 800bc14:	1dbb      	adds	r3, r7, #6
 800bc16:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2284      	movs	r2, #132	; 0x84
 800bc1c:	589b      	ldr	r3, [r3, r2]
 800bc1e:	2b20      	cmp	r3, #32
 800bc20:	d000      	beq.n	800bc24 <HAL_UART_Transmit+0x1c>
 800bc22:	e097      	b.n	800bd54 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <HAL_UART_Transmit+0x2a>
 800bc2a:	1dbb      	adds	r3, r7, #6
 800bc2c:	881b      	ldrh	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e08f      	b.n	800bd56 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	2380      	movs	r3, #128	; 0x80
 800bc3c:	015b      	lsls	r3, r3, #5
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d109      	bne.n	800bc56 <HAL_UART_Transmit+0x4e>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d105      	bne.n	800bc56 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	4013      	ands	r3, r2
 800bc50:	d001      	beq.n	800bc56 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e07f      	b.n	800bd56 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2280      	movs	r2, #128	; 0x80
 800bc5a:	5c9b      	ldrb	r3, [r3, r2]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d101      	bne.n	800bc64 <HAL_UART_Transmit+0x5c>
 800bc60:	2302      	movs	r3, #2
 800bc62:	e078      	b.n	800bd56 <HAL_UART_Transmit+0x14e>
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2280      	movs	r2, #128	; 0x80
 800bc68:	2101      	movs	r1, #1
 800bc6a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	228c      	movs	r2, #140	; 0x8c
 800bc70:	2100      	movs	r1, #0
 800bc72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2284      	movs	r2, #132	; 0x84
 800bc78:	2121      	movs	r1, #33	; 0x21
 800bc7a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc7c:	f7fd fc18 	bl	80094b0 <HAL_GetTick>
 800bc80:	0003      	movs	r3, r0
 800bc82:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	1dba      	adds	r2, r7, #6
 800bc88:	2154      	movs	r1, #84	; 0x54
 800bc8a:	8812      	ldrh	r2, [r2, #0]
 800bc8c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	1dba      	adds	r2, r7, #6
 800bc92:	2156      	movs	r1, #86	; 0x56
 800bc94:	8812      	ldrh	r2, [r2, #0]
 800bc96:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	689a      	ldr	r2, [r3, #8]
 800bc9c:	2380      	movs	r3, #128	; 0x80
 800bc9e:	015b      	lsls	r3, r3, #5
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d108      	bne.n	800bcb6 <HAL_UART_Transmit+0xae>
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d104      	bne.n	800bcb6 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800bcac:	2300      	movs	r3, #0
 800bcae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	61bb      	str	r3, [r7, #24]
 800bcb4:	e003      	b.n	800bcbe <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2280      	movs	r2, #128	; 0x80
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800bcc6:	e02c      	b.n	800bd22 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bcc8:	697a      	ldr	r2, [r7, #20]
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	0013      	movs	r3, r2
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2180      	movs	r1, #128	; 0x80
 800bcd6:	f000 fae7 	bl	800c2a8 <UART_WaitOnFlagUntilTimeout>
 800bcda:	1e03      	subs	r3, r0, #0
 800bcdc:	d001      	beq.n	800bce2 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800bcde:	2303      	movs	r3, #3
 800bce0:	e039      	b.n	800bd56 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10b      	bne.n	800bd00 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	881b      	ldrh	r3, [r3, #0]
 800bcec:	001a      	movs	r2, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	05d2      	lsls	r2, r2, #23
 800bcf4:	0dd2      	lsrs	r2, r2, #23
 800bcf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	3302      	adds	r3, #2
 800bcfc:	61bb      	str	r3, [r7, #24]
 800bcfe:	e007      	b.n	800bd10 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	781a      	ldrb	r2, [r3, #0]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2256      	movs	r2, #86	; 0x56
 800bd14:	5a9b      	ldrh	r3, [r3, r2]
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	b299      	uxth	r1, r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2256      	movs	r2, #86	; 0x56
 800bd20:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2256      	movs	r2, #86	; 0x56
 800bd26:	5a9b      	ldrh	r3, [r3, r2]
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1cc      	bne.n	800bcc8 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	0013      	movs	r3, r2
 800bd38:	2200      	movs	r2, #0
 800bd3a:	2140      	movs	r1, #64	; 0x40
 800bd3c:	f000 fab4 	bl	800c2a8 <UART_WaitOnFlagUntilTimeout>
 800bd40:	1e03      	subs	r3, r0, #0
 800bd42:	d001      	beq.n	800bd48 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800bd44:	2303      	movs	r3, #3
 800bd46:	e006      	b.n	800bd56 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2284      	movs	r2, #132	; 0x84
 800bd4c:	2120      	movs	r1, #32
 800bd4e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	e000      	b.n	800bd56 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800bd54:	2302      	movs	r3, #2
  }
}
 800bd56:	0018      	movs	r0, r3
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	b008      	add	sp, #32
 800bd5c:	bd80      	pop	{r7, pc}
	...

0800bd60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b088      	sub	sp, #32
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd68:	231a      	movs	r3, #26
 800bd6a:	18fb      	adds	r3, r7, r3
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	689a      	ldr	r2, [r3, #8]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	431a      	orrs	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	431a      	orrs	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	69db      	ldr	r3, [r3, #28]
 800bd84:	4313      	orrs	r3, r2
 800bd86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4abd      	ldr	r2, [pc, #756]	; (800c084 <UART_SetConfig+0x324>)
 800bd90:	4013      	ands	r3, r2
 800bd92:	0019      	movs	r1, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	69fa      	ldr	r2, [r7, #28]
 800bd9a:	430a      	orrs	r2, r1
 800bd9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	4ab8      	ldr	r2, [pc, #736]	; (800c088 <UART_SetConfig+0x328>)
 800bda6:	4013      	ands	r3, r2
 800bda8:	0019      	movs	r1, r3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a1b      	ldr	r3, [r3, #32]
 800bdc0:	69fa      	ldr	r2, [r7, #28]
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	4aaf      	ldr	r2, [pc, #700]	; (800c08c <UART_SetConfig+0x32c>)
 800bdce:	4013      	ands	r3, r2
 800bdd0:	0019      	movs	r1, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	430a      	orrs	r2, r1
 800bdda:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde2:	220f      	movs	r2, #15
 800bde4:	4393      	bics	r3, r2
 800bde6:	0019      	movs	r1, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	430a      	orrs	r2, r1
 800bdf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4aa5      	ldr	r2, [pc, #660]	; (800c090 <UART_SetConfig+0x330>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d127      	bne.n	800be4e <UART_SetConfig+0xee>
 800bdfe:	4ba5      	ldr	r3, [pc, #660]	; (800c094 <UART_SetConfig+0x334>)
 800be00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be02:	2203      	movs	r2, #3
 800be04:	4013      	ands	r3, r2
 800be06:	2b03      	cmp	r3, #3
 800be08:	d017      	beq.n	800be3a <UART_SetConfig+0xda>
 800be0a:	d81b      	bhi.n	800be44 <UART_SetConfig+0xe4>
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	d00a      	beq.n	800be26 <UART_SetConfig+0xc6>
 800be10:	d818      	bhi.n	800be44 <UART_SetConfig+0xe4>
 800be12:	2b00      	cmp	r3, #0
 800be14:	d002      	beq.n	800be1c <UART_SetConfig+0xbc>
 800be16:	2b01      	cmp	r3, #1
 800be18:	d00a      	beq.n	800be30 <UART_SetConfig+0xd0>
 800be1a:	e013      	b.n	800be44 <UART_SetConfig+0xe4>
 800be1c:	231b      	movs	r3, #27
 800be1e:	18fb      	adds	r3, r7, r3
 800be20:	2200      	movs	r2, #0
 800be22:	701a      	strb	r2, [r3, #0]
 800be24:	e058      	b.n	800bed8 <UART_SetConfig+0x178>
 800be26:	231b      	movs	r3, #27
 800be28:	18fb      	adds	r3, r7, r3
 800be2a:	2202      	movs	r2, #2
 800be2c:	701a      	strb	r2, [r3, #0]
 800be2e:	e053      	b.n	800bed8 <UART_SetConfig+0x178>
 800be30:	231b      	movs	r3, #27
 800be32:	18fb      	adds	r3, r7, r3
 800be34:	2204      	movs	r2, #4
 800be36:	701a      	strb	r2, [r3, #0]
 800be38:	e04e      	b.n	800bed8 <UART_SetConfig+0x178>
 800be3a:	231b      	movs	r3, #27
 800be3c:	18fb      	adds	r3, r7, r3
 800be3e:	2208      	movs	r2, #8
 800be40:	701a      	strb	r2, [r3, #0]
 800be42:	e049      	b.n	800bed8 <UART_SetConfig+0x178>
 800be44:	231b      	movs	r3, #27
 800be46:	18fb      	adds	r3, r7, r3
 800be48:	2210      	movs	r2, #16
 800be4a:	701a      	strb	r2, [r3, #0]
 800be4c:	e044      	b.n	800bed8 <UART_SetConfig+0x178>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a91      	ldr	r2, [pc, #580]	; (800c098 <UART_SetConfig+0x338>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d127      	bne.n	800bea8 <UART_SetConfig+0x148>
 800be58:	4b8e      	ldr	r3, [pc, #568]	; (800c094 <UART_SetConfig+0x334>)
 800be5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5c:	220c      	movs	r2, #12
 800be5e:	4013      	ands	r3, r2
 800be60:	2b0c      	cmp	r3, #12
 800be62:	d017      	beq.n	800be94 <UART_SetConfig+0x134>
 800be64:	d81b      	bhi.n	800be9e <UART_SetConfig+0x13e>
 800be66:	2b08      	cmp	r3, #8
 800be68:	d00a      	beq.n	800be80 <UART_SetConfig+0x120>
 800be6a:	d818      	bhi.n	800be9e <UART_SetConfig+0x13e>
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <UART_SetConfig+0x116>
 800be70:	2b04      	cmp	r3, #4
 800be72:	d00a      	beq.n	800be8a <UART_SetConfig+0x12a>
 800be74:	e013      	b.n	800be9e <UART_SetConfig+0x13e>
 800be76:	231b      	movs	r3, #27
 800be78:	18fb      	adds	r3, r7, r3
 800be7a:	2200      	movs	r2, #0
 800be7c:	701a      	strb	r2, [r3, #0]
 800be7e:	e02b      	b.n	800bed8 <UART_SetConfig+0x178>
 800be80:	231b      	movs	r3, #27
 800be82:	18fb      	adds	r3, r7, r3
 800be84:	2202      	movs	r2, #2
 800be86:	701a      	strb	r2, [r3, #0]
 800be88:	e026      	b.n	800bed8 <UART_SetConfig+0x178>
 800be8a:	231b      	movs	r3, #27
 800be8c:	18fb      	adds	r3, r7, r3
 800be8e:	2204      	movs	r2, #4
 800be90:	701a      	strb	r2, [r3, #0]
 800be92:	e021      	b.n	800bed8 <UART_SetConfig+0x178>
 800be94:	231b      	movs	r3, #27
 800be96:	18fb      	adds	r3, r7, r3
 800be98:	2208      	movs	r2, #8
 800be9a:	701a      	strb	r2, [r3, #0]
 800be9c:	e01c      	b.n	800bed8 <UART_SetConfig+0x178>
 800be9e:	231b      	movs	r3, #27
 800bea0:	18fb      	adds	r3, r7, r3
 800bea2:	2210      	movs	r2, #16
 800bea4:	701a      	strb	r2, [r3, #0]
 800bea6:	e017      	b.n	800bed8 <UART_SetConfig+0x178>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a7b      	ldr	r2, [pc, #492]	; (800c09c <UART_SetConfig+0x33c>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d104      	bne.n	800bebc <UART_SetConfig+0x15c>
 800beb2:	231b      	movs	r3, #27
 800beb4:	18fb      	adds	r3, r7, r3
 800beb6:	2200      	movs	r2, #0
 800beb8:	701a      	strb	r2, [r3, #0]
 800beba:	e00d      	b.n	800bed8 <UART_SetConfig+0x178>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a77      	ldr	r2, [pc, #476]	; (800c0a0 <UART_SetConfig+0x340>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d104      	bne.n	800bed0 <UART_SetConfig+0x170>
 800bec6:	231b      	movs	r3, #27
 800bec8:	18fb      	adds	r3, r7, r3
 800beca:	2200      	movs	r2, #0
 800becc:	701a      	strb	r2, [r3, #0]
 800bece:	e003      	b.n	800bed8 <UART_SetConfig+0x178>
 800bed0:	231b      	movs	r3, #27
 800bed2:	18fb      	adds	r3, r7, r3
 800bed4:	2210      	movs	r2, #16
 800bed6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	69da      	ldr	r2, [r3, #28]
 800bedc:	2380      	movs	r3, #128	; 0x80
 800bede:	021b      	lsls	r3, r3, #8
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d000      	beq.n	800bee6 <UART_SetConfig+0x186>
 800bee4:	e066      	b.n	800bfb4 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 800bee6:	231b      	movs	r3, #27
 800bee8:	18fb      	adds	r3, r7, r3
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	2b08      	cmp	r3, #8
 800beee:	d015      	beq.n	800bf1c <UART_SetConfig+0x1bc>
 800bef0:	dc18      	bgt.n	800bf24 <UART_SetConfig+0x1c4>
 800bef2:	2b04      	cmp	r3, #4
 800bef4:	d00d      	beq.n	800bf12 <UART_SetConfig+0x1b2>
 800bef6:	dc15      	bgt.n	800bf24 <UART_SetConfig+0x1c4>
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d002      	beq.n	800bf02 <UART_SetConfig+0x1a2>
 800befc:	2b02      	cmp	r3, #2
 800befe:	d005      	beq.n	800bf0c <UART_SetConfig+0x1ac>
 800bf00:	e010      	b.n	800bf24 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf02:	f7fe fb73 	bl	800a5ec <HAL_RCC_GetPCLK1Freq>
 800bf06:	0003      	movs	r3, r0
 800bf08:	617b      	str	r3, [r7, #20]
        break;
 800bf0a:	e012      	b.n	800bf32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf0c:	4b65      	ldr	r3, [pc, #404]	; (800c0a4 <UART_SetConfig+0x344>)
 800bf0e:	617b      	str	r3, [r7, #20]
        break;
 800bf10:	e00f      	b.n	800bf32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf12:	f7fe fadf 	bl	800a4d4 <HAL_RCC_GetSysClockFreq>
 800bf16:	0003      	movs	r3, r0
 800bf18:	617b      	str	r3, [r7, #20]
        break;
 800bf1a:	e00a      	b.n	800bf32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf1c:	2380      	movs	r3, #128	; 0x80
 800bf1e:	021b      	lsls	r3, r3, #8
 800bf20:	617b      	str	r3, [r7, #20]
        break;
 800bf22:	e006      	b.n	800bf32 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800bf24:	2300      	movs	r3, #0
 800bf26:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bf28:	231a      	movs	r3, #26
 800bf2a:	18fb      	adds	r3, r7, r3
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	701a      	strb	r2, [r3, #0]
        break;
 800bf30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d100      	bne.n	800bf3a <UART_SetConfig+0x1da>
 800bf38:	e08e      	b.n	800c058 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf3e:	4b5a      	ldr	r3, [pc, #360]	; (800c0a8 <UART_SetConfig+0x348>)
 800bf40:	0052      	lsls	r2, r2, #1
 800bf42:	5ad3      	ldrh	r3, [r2, r3]
 800bf44:	0019      	movs	r1, r3
 800bf46:	6978      	ldr	r0, [r7, #20]
 800bf48:	f7f4 f8f6 	bl	8000138 <__udivsi3>
 800bf4c:	0003      	movs	r3, r0
 800bf4e:	005a      	lsls	r2, r3, #1
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	085b      	lsrs	r3, r3, #1
 800bf56:	18d2      	adds	r2, r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	0019      	movs	r1, r3
 800bf5e:	0010      	movs	r0, r2
 800bf60:	f7f4 f8ea 	bl	8000138 <__udivsi3>
 800bf64:	0003      	movs	r3, r0
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	2b0f      	cmp	r3, #15
 800bf6e:	d91c      	bls.n	800bfaa <UART_SetConfig+0x24a>
 800bf70:	693a      	ldr	r2, [r7, #16]
 800bf72:	2380      	movs	r3, #128	; 0x80
 800bf74:	025b      	lsls	r3, r3, #9
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d217      	bcs.n	800bfaa <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	200e      	movs	r0, #14
 800bf80:	183b      	adds	r3, r7, r0
 800bf82:	210f      	movs	r1, #15
 800bf84:	438a      	bics	r2, r1
 800bf86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	085b      	lsrs	r3, r3, #1
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	2207      	movs	r2, #7
 800bf90:	4013      	ands	r3, r2
 800bf92:	b299      	uxth	r1, r3
 800bf94:	183b      	adds	r3, r7, r0
 800bf96:	183a      	adds	r2, r7, r0
 800bf98:	8812      	ldrh	r2, [r2, #0]
 800bf9a:	430a      	orrs	r2, r1
 800bf9c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	183a      	adds	r2, r7, r0
 800bfa4:	8812      	ldrh	r2, [r2, #0]
 800bfa6:	60da      	str	r2, [r3, #12]
 800bfa8:	e056      	b.n	800c058 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 800bfaa:	231a      	movs	r3, #26
 800bfac:	18fb      	adds	r3, r7, r3
 800bfae:	2201      	movs	r2, #1
 800bfb0:	701a      	strb	r2, [r3, #0]
 800bfb2:	e051      	b.n	800c058 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bfb4:	231b      	movs	r3, #27
 800bfb6:	18fb      	adds	r3, r7, r3
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b08      	cmp	r3, #8
 800bfbc:	d015      	beq.n	800bfea <UART_SetConfig+0x28a>
 800bfbe:	dc18      	bgt.n	800bff2 <UART_SetConfig+0x292>
 800bfc0:	2b04      	cmp	r3, #4
 800bfc2:	d00d      	beq.n	800bfe0 <UART_SetConfig+0x280>
 800bfc4:	dc15      	bgt.n	800bff2 <UART_SetConfig+0x292>
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d002      	beq.n	800bfd0 <UART_SetConfig+0x270>
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	d005      	beq.n	800bfda <UART_SetConfig+0x27a>
 800bfce:	e010      	b.n	800bff2 <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfd0:	f7fe fb0c 	bl	800a5ec <HAL_RCC_GetPCLK1Freq>
 800bfd4:	0003      	movs	r3, r0
 800bfd6:	617b      	str	r3, [r7, #20]
        break;
 800bfd8:	e012      	b.n	800c000 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bfda:	4b32      	ldr	r3, [pc, #200]	; (800c0a4 <UART_SetConfig+0x344>)
 800bfdc:	617b      	str	r3, [r7, #20]
        break;
 800bfde:	e00f      	b.n	800c000 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfe0:	f7fe fa78 	bl	800a4d4 <HAL_RCC_GetSysClockFreq>
 800bfe4:	0003      	movs	r3, r0
 800bfe6:	617b      	str	r3, [r7, #20]
        break;
 800bfe8:	e00a      	b.n	800c000 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfea:	2380      	movs	r3, #128	; 0x80
 800bfec:	021b      	lsls	r3, r3, #8
 800bfee:	617b      	str	r3, [r7, #20]
        break;
 800bff0:	e006      	b.n	800c000 <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 800bff2:	2300      	movs	r3, #0
 800bff4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bff6:	231a      	movs	r3, #26
 800bff8:	18fb      	adds	r3, r7, r3
 800bffa:	2201      	movs	r2, #1
 800bffc:	701a      	strb	r2, [r3, #0]
        break;
 800bffe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d028      	beq.n	800c058 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c00a:	4b27      	ldr	r3, [pc, #156]	; (800c0a8 <UART_SetConfig+0x348>)
 800c00c:	0052      	lsls	r2, r2, #1
 800c00e:	5ad3      	ldrh	r3, [r2, r3]
 800c010:	0019      	movs	r1, r3
 800c012:	6978      	ldr	r0, [r7, #20]
 800c014:	f7f4 f890 	bl	8000138 <__udivsi3>
 800c018:	0003      	movs	r3, r0
 800c01a:	001a      	movs	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	085b      	lsrs	r3, r3, #1
 800c022:	18d2      	adds	r2, r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	0019      	movs	r1, r3
 800c02a:	0010      	movs	r0, r2
 800c02c:	f7f4 f884 	bl	8000138 <__udivsi3>
 800c030:	0003      	movs	r3, r0
 800c032:	b29b      	uxth	r3, r3
 800c034:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	2b0f      	cmp	r3, #15
 800c03a:	d909      	bls.n	800c050 <UART_SetConfig+0x2f0>
 800c03c:	693a      	ldr	r2, [r7, #16]
 800c03e:	2380      	movs	r3, #128	; 0x80
 800c040:	025b      	lsls	r3, r3, #9
 800c042:	429a      	cmp	r2, r3
 800c044:	d204      	bcs.n	800c050 <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	693a      	ldr	r2, [r7, #16]
 800c04c:	60da      	str	r2, [r3, #12]
 800c04e:	e003      	b.n	800c058 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 800c050:	231a      	movs	r3, #26
 800c052:	18fb      	adds	r3, r7, r3
 800c054:	2201      	movs	r2, #1
 800c056:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	226a      	movs	r2, #106	; 0x6a
 800c05c:	2101      	movs	r1, #1
 800c05e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2268      	movs	r2, #104	; 0x68
 800c064:	2101      	movs	r1, #1
 800c066:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c074:	231a      	movs	r3, #26
 800c076:	18fb      	adds	r3, r7, r3
 800c078:	781b      	ldrb	r3, [r3, #0]
}
 800c07a:	0018      	movs	r0, r3
 800c07c:	46bd      	mov	sp, r7
 800c07e:	b008      	add	sp, #32
 800c080:	bd80      	pop	{r7, pc}
 800c082:	46c0      	nop			; (mov r8, r8)
 800c084:	cfff69f3 	.word	0xcfff69f3
 800c088:	ffffcfff 	.word	0xffffcfff
 800c08c:	11fff4ff 	.word	0x11fff4ff
 800c090:	40013800 	.word	0x40013800
 800c094:	40021000 	.word	0x40021000
 800c098:	40004400 	.word	0x40004400
 800c09c:	40004800 	.word	0x40004800
 800c0a0:	40004c00 	.word	0x40004c00
 800c0a4:	00f42400 	.word	0x00f42400
 800c0a8:	080121cc 	.word	0x080121cc

0800c0ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	d00b      	beq.n	800c0d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	4a4a      	ldr	r2, [pc, #296]	; (800c1f0 <UART_AdvFeatureConfig+0x144>)
 800c0c6:	4013      	ands	r3, r2
 800c0c8:	0019      	movs	r1, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0da:	2202      	movs	r2, #2
 800c0dc:	4013      	ands	r3, r2
 800c0de:	d00b      	beq.n	800c0f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	4a43      	ldr	r2, [pc, #268]	; (800c1f4 <UART_AdvFeatureConfig+0x148>)
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	0019      	movs	r1, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fc:	2204      	movs	r2, #4
 800c0fe:	4013      	ands	r3, r2
 800c100:	d00b      	beq.n	800c11a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	4a3b      	ldr	r2, [pc, #236]	; (800c1f8 <UART_AdvFeatureConfig+0x14c>)
 800c10a:	4013      	ands	r3, r2
 800c10c:	0019      	movs	r1, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	430a      	orrs	r2, r1
 800c118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c11e:	2208      	movs	r2, #8
 800c120:	4013      	ands	r3, r2
 800c122:	d00b      	beq.n	800c13c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	4a34      	ldr	r2, [pc, #208]	; (800c1fc <UART_AdvFeatureConfig+0x150>)
 800c12c:	4013      	ands	r3, r2
 800c12e:	0019      	movs	r1, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	430a      	orrs	r2, r1
 800c13a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c140:	2210      	movs	r2, #16
 800c142:	4013      	ands	r3, r2
 800c144:	d00b      	beq.n	800c15e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	4a2c      	ldr	r2, [pc, #176]	; (800c200 <UART_AdvFeatureConfig+0x154>)
 800c14e:	4013      	ands	r3, r2
 800c150:	0019      	movs	r1, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	430a      	orrs	r2, r1
 800c15c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c162:	2220      	movs	r2, #32
 800c164:	4013      	ands	r3, r2
 800c166:	d00b      	beq.n	800c180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	4a25      	ldr	r2, [pc, #148]	; (800c204 <UART_AdvFeatureConfig+0x158>)
 800c170:	4013      	ands	r3, r2
 800c172:	0019      	movs	r1, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	430a      	orrs	r2, r1
 800c17e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c184:	2240      	movs	r2, #64	; 0x40
 800c186:	4013      	ands	r3, r2
 800c188:	d01d      	beq.n	800c1c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	4a1d      	ldr	r2, [pc, #116]	; (800c208 <UART_AdvFeatureConfig+0x15c>)
 800c192:	4013      	ands	r3, r2
 800c194:	0019      	movs	r1, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	430a      	orrs	r2, r1
 800c1a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1a6:	2380      	movs	r3, #128	; 0x80
 800c1a8:	035b      	lsls	r3, r3, #13
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d10b      	bne.n	800c1c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	4a15      	ldr	r2, [pc, #84]	; (800c20c <UART_AdvFeatureConfig+0x160>)
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	0019      	movs	r1, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	430a      	orrs	r2, r1
 800c1c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ca:	2280      	movs	r2, #128	; 0x80
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	d00b      	beq.n	800c1e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	4a0e      	ldr	r2, [pc, #56]	; (800c210 <UART_AdvFeatureConfig+0x164>)
 800c1d8:	4013      	ands	r3, r2
 800c1da:	0019      	movs	r1, r3
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	430a      	orrs	r2, r1
 800c1e6:	605a      	str	r2, [r3, #4]
  }
}
 800c1e8:	46c0      	nop			; (mov r8, r8)
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	b002      	add	sp, #8
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	fffdffff 	.word	0xfffdffff
 800c1f4:	fffeffff 	.word	0xfffeffff
 800c1f8:	fffbffff 	.word	0xfffbffff
 800c1fc:	ffff7fff 	.word	0xffff7fff
 800c200:	ffffefff 	.word	0xffffefff
 800c204:	ffffdfff 	.word	0xffffdfff
 800c208:	ffefffff 	.word	0xffefffff
 800c20c:	ff9fffff 	.word	0xff9fffff
 800c210:	fff7ffff 	.word	0xfff7ffff

0800c214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af02      	add	r7, sp, #8
 800c21a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	228c      	movs	r2, #140	; 0x8c
 800c220:	2100      	movs	r1, #0
 800c222:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c224:	f7fd f944 	bl	80094b0 <HAL_GetTick>
 800c228:	0003      	movs	r3, r0
 800c22a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2208      	movs	r2, #8
 800c234:	4013      	ands	r3, r2
 800c236:	2b08      	cmp	r3, #8
 800c238:	d10c      	bne.n	800c254 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2280      	movs	r2, #128	; 0x80
 800c23e:	0391      	lsls	r1, r2, #14
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	4a18      	ldr	r2, [pc, #96]	; (800c2a4 <UART_CheckIdleState+0x90>)
 800c244:	9200      	str	r2, [sp, #0]
 800c246:	2200      	movs	r2, #0
 800c248:	f000 f82e 	bl	800c2a8 <UART_WaitOnFlagUntilTimeout>
 800c24c:	1e03      	subs	r3, r0, #0
 800c24e:	d001      	beq.n	800c254 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c250:	2303      	movs	r3, #3
 800c252:	e023      	b.n	800c29c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2204      	movs	r2, #4
 800c25c:	4013      	ands	r3, r2
 800c25e:	2b04      	cmp	r3, #4
 800c260:	d10c      	bne.n	800c27c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2280      	movs	r2, #128	; 0x80
 800c266:	03d1      	lsls	r1, r2, #15
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	4a0e      	ldr	r2, [pc, #56]	; (800c2a4 <UART_CheckIdleState+0x90>)
 800c26c:	9200      	str	r2, [sp, #0]
 800c26e:	2200      	movs	r2, #0
 800c270:	f000 f81a 	bl	800c2a8 <UART_WaitOnFlagUntilTimeout>
 800c274:	1e03      	subs	r3, r0, #0
 800c276:	d001      	beq.n	800c27c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c278:	2303      	movs	r3, #3
 800c27a:	e00f      	b.n	800c29c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2284      	movs	r2, #132	; 0x84
 800c280:	2120      	movs	r1, #32
 800c282:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2288      	movs	r2, #136	; 0x88
 800c288:	2120      	movs	r1, #32
 800c28a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2280      	movs	r2, #128	; 0x80
 800c296:	2100      	movs	r1, #0
 800c298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	0018      	movs	r0, r3
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	b004      	add	sp, #16
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	01ffffff 	.word	0x01ffffff

0800c2a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b094      	sub	sp, #80	; 0x50
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	603b      	str	r3, [r7, #0]
 800c2b4:	1dfb      	adds	r3, r7, #7
 800c2b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2b8:	e0a7      	b.n	800c40a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2bc:	3301      	adds	r3, #1
 800c2be:	d100      	bne.n	800c2c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 800c2c0:	e0a3      	b.n	800c40a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2c2:	f7fd f8f5 	bl	80094b0 <HAL_GetTick>
 800c2c6:	0002      	movs	r2, r0
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d302      	bcc.n	800c2d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c2d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d13f      	bne.n	800c358 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2d8:	f3ef 8310 	mrs	r3, PRIMASK
 800c2dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c2e0:	647b      	str	r3, [r7, #68]	; 0x44
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e8:	f383 8810 	msr	PRIMASK, r3
}
 800c2ec:	46c0      	nop			; (mov r8, r8)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	494e      	ldr	r1, [pc, #312]	; (800c434 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800c2fa:	400a      	ands	r2, r1
 800c2fc:	601a      	str	r2, [r3, #0]
 800c2fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c300:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	f383 8810 	msr	PRIMASK, r3
}
 800c308:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c30a:	f3ef 8310 	mrs	r3, PRIMASK
 800c30e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800c310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c312:	643b      	str	r3, [r7, #64]	; 0x40
 800c314:	2301      	movs	r3, #1
 800c316:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31a:	f383 8810 	msr	PRIMASK, r3
}
 800c31e:	46c0      	nop			; (mov r8, r8)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	689a      	ldr	r2, [r3, #8]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2101      	movs	r1, #1
 800c32c:	438a      	bics	r2, r1
 800c32e:	609a      	str	r2, [r3, #8]
 800c330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c332:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c336:	f383 8810 	msr	PRIMASK, r3
}
 800c33a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2284      	movs	r2, #132	; 0x84
 800c340:	2120      	movs	r1, #32
 800c342:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2288      	movs	r2, #136	; 0x88
 800c348:	2120      	movs	r1, #32
 800c34a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2280      	movs	r2, #128	; 0x80
 800c350:	2100      	movs	r1, #0
 800c352:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c354:	2303      	movs	r3, #3
 800c356:	e069      	b.n	800c42c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2204      	movs	r2, #4
 800c360:	4013      	ands	r3, r2
 800c362:	d052      	beq.n	800c40a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	69da      	ldr	r2, [r3, #28]
 800c36a:	2380      	movs	r3, #128	; 0x80
 800c36c:	011b      	lsls	r3, r3, #4
 800c36e:	401a      	ands	r2, r3
 800c370:	2380      	movs	r3, #128	; 0x80
 800c372:	011b      	lsls	r3, r3, #4
 800c374:	429a      	cmp	r2, r3
 800c376:	d148      	bne.n	800c40a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2280      	movs	r2, #128	; 0x80
 800c37e:	0112      	lsls	r2, r2, #4
 800c380:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c382:	f3ef 8310 	mrs	r3, PRIMASK
 800c386:	613b      	str	r3, [r7, #16]
  return(result);
 800c388:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c38a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c38c:	2301      	movs	r3, #1
 800c38e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	f383 8810 	msr	PRIMASK, r3
}
 800c396:	46c0      	nop			; (mov r8, r8)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4924      	ldr	r1, [pc, #144]	; (800c434 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800c3a4:	400a      	ands	r2, r1
 800c3a6:	601a      	str	r2, [r3, #0]
 800c3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	f383 8810 	msr	PRIMASK, r3
}
 800c3b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3b4:	f3ef 8310 	mrs	r3, PRIMASK
 800c3b8:	61fb      	str	r3, [r7, #28]
  return(result);
 800c3ba:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3be:	2301      	movs	r3, #1
 800c3c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3c2:	6a3b      	ldr	r3, [r7, #32]
 800c3c4:	f383 8810 	msr	PRIMASK, r3
}
 800c3c8:	46c0      	nop			; (mov r8, r8)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	689a      	ldr	r2, [r3, #8]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	438a      	bics	r2, r1
 800c3d8:	609a      	str	r2, [r3, #8]
 800c3da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e0:	f383 8810 	msr	PRIMASK, r3
}
 800c3e4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2284      	movs	r2, #132	; 0x84
 800c3ea:	2120      	movs	r1, #32
 800c3ec:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2288      	movs	r2, #136	; 0x88
 800c3f2:	2120      	movs	r1, #32
 800c3f4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	228c      	movs	r2, #140	; 0x8c
 800c3fa:	2120      	movs	r1, #32
 800c3fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2280      	movs	r2, #128	; 0x80
 800c402:	2100      	movs	r1, #0
 800c404:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c406:	2303      	movs	r3, #3
 800c408:	e010      	b.n	800c42c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	69db      	ldr	r3, [r3, #28]
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	4013      	ands	r3, r2
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	425a      	negs	r2, r3
 800c41a:	4153      	adcs	r3, r2
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	001a      	movs	r2, r3
 800c420:	1dfb      	adds	r3, r7, #7
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	d100      	bne.n	800c42a <UART_WaitOnFlagUntilTimeout+0x182>
 800c428:	e747      	b.n	800c2ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	0018      	movs	r0, r3
 800c42e:	46bd      	mov	sp, r7
 800c430:	b014      	add	sp, #80	; 0x50
 800c432:	bd80      	pop	{r7, pc}
 800c434:	fffffe5f 	.word	0xfffffe5f

0800c438 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2280      	movs	r2, #128	; 0x80
 800c444:	5c9b      	ldrb	r3, [r3, r2]
 800c446:	2b01      	cmp	r3, #1
 800c448:	d101      	bne.n	800c44e <HAL_UARTEx_DisableFifoMode+0x16>
 800c44a:	2302      	movs	r3, #2
 800c44c:	e027      	b.n	800c49e <HAL_UARTEx_DisableFifoMode+0x66>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2280      	movs	r2, #128	; 0x80
 800c452:	2101      	movs	r1, #1
 800c454:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2284      	movs	r2, #132	; 0x84
 800c45a:	2124      	movs	r1, #36	; 0x24
 800c45c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2101      	movs	r1, #1
 800c472:	438a      	bics	r2, r1
 800c474:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	4a0b      	ldr	r2, [pc, #44]	; (800c4a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800c47a:	4013      	ands	r3, r2
 800c47c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2284      	movs	r2, #132	; 0x84
 800c490:	2120      	movs	r1, #32
 800c492:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2280      	movs	r2, #128	; 0x80
 800c498:	2100      	movs	r1, #0
 800c49a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	0018      	movs	r0, r3
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	b004      	add	sp, #16
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	46c0      	nop			; (mov r8, r8)
 800c4a8:	dfffffff 	.word	0xdfffffff

0800c4ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2280      	movs	r2, #128	; 0x80
 800c4ba:	5c9b      	ldrb	r3, [r3, r2]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d101      	bne.n	800c4c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	e02e      	b.n	800c522 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2280      	movs	r2, #128	; 0x80
 800c4c8:	2101      	movs	r1, #1
 800c4ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2284      	movs	r2, #132	; 0x84
 800c4d0:	2124      	movs	r1, #36	; 0x24
 800c4d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2101      	movs	r1, #1
 800c4e8:	438a      	bics	r2, r1
 800c4ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	08d9      	lsrs	r1, r3, #3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	430a      	orrs	r2, r1
 800c4fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	0018      	movs	r0, r3
 800c504:	f000 f854 	bl	800c5b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2284      	movs	r2, #132	; 0x84
 800c514:	2120      	movs	r1, #32
 800c516:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2280      	movs	r2, #128	; 0x80
 800c51c:	2100      	movs	r1, #0
 800c51e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	0018      	movs	r0, r3
 800c524:	46bd      	mov	sp, r7
 800c526:	b004      	add	sp, #16
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2280      	movs	r2, #128	; 0x80
 800c53a:	5c9b      	ldrb	r3, [r3, r2]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d101      	bne.n	800c544 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c540:	2302      	movs	r3, #2
 800c542:	e02f      	b.n	800c5a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2280      	movs	r2, #128	; 0x80
 800c548:	2101      	movs	r1, #1
 800c54a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2284      	movs	r2, #132	; 0x84
 800c550:	2124      	movs	r1, #36	; 0x24
 800c552:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2101      	movs	r1, #1
 800c568:	438a      	bics	r2, r1
 800c56a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	4a0e      	ldr	r2, [pc, #56]	; (800c5ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800c574:	4013      	ands	r3, r2
 800c576:	0019      	movs	r1, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	430a      	orrs	r2, r1
 800c580:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	0018      	movs	r0, r3
 800c586:	f000 f813 	bl	800c5b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2284      	movs	r2, #132	; 0x84
 800c596:	2120      	movs	r1, #32
 800c598:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2280      	movs	r2, #128	; 0x80
 800c59e:	2100      	movs	r1, #0
 800c5a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	0018      	movs	r0, r3
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	b004      	add	sp, #16
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	f1ffffff 	.word	0xf1ffffff

0800c5b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d108      	bne.n	800c5d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	226a      	movs	r2, #106	; 0x6a
 800c5c4:	2101      	movs	r1, #1
 800c5c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2268      	movs	r2, #104	; 0x68
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c5d0:	e043      	b.n	800c65a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c5d2:	260f      	movs	r6, #15
 800c5d4:	19bb      	adds	r3, r7, r6
 800c5d6:	2208      	movs	r2, #8
 800c5d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c5da:	200e      	movs	r0, #14
 800c5dc:	183b      	adds	r3, r7, r0
 800c5de:	2208      	movs	r2, #8
 800c5e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	0e5b      	lsrs	r3, r3, #25
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	240d      	movs	r4, #13
 800c5ee:	193b      	adds	r3, r7, r4
 800c5f0:	2107      	movs	r1, #7
 800c5f2:	400a      	ands	r2, r1
 800c5f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	0f5b      	lsrs	r3, r3, #29
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	250c      	movs	r5, #12
 800c602:	197b      	adds	r3, r7, r5
 800c604:	2107      	movs	r1, #7
 800c606:	400a      	ands	r2, r1
 800c608:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c60a:	183b      	adds	r3, r7, r0
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	197a      	adds	r2, r7, r5
 800c610:	7812      	ldrb	r2, [r2, #0]
 800c612:	4914      	ldr	r1, [pc, #80]	; (800c664 <UARTEx_SetNbDataToProcess+0xb4>)
 800c614:	5c8a      	ldrb	r2, [r1, r2]
 800c616:	435a      	muls	r2, r3
 800c618:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800c61a:	197b      	adds	r3, r7, r5
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	4a12      	ldr	r2, [pc, #72]	; (800c668 <UARTEx_SetNbDataToProcess+0xb8>)
 800c620:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c622:	0019      	movs	r1, r3
 800c624:	f7f3 fe12 	bl	800024c <__divsi3>
 800c628:	0003      	movs	r3, r0
 800c62a:	b299      	uxth	r1, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	226a      	movs	r2, #106	; 0x6a
 800c630:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c632:	19bb      	adds	r3, r7, r6
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	193a      	adds	r2, r7, r4
 800c638:	7812      	ldrb	r2, [r2, #0]
 800c63a:	490a      	ldr	r1, [pc, #40]	; (800c664 <UARTEx_SetNbDataToProcess+0xb4>)
 800c63c:	5c8a      	ldrb	r2, [r1, r2]
 800c63e:	435a      	muls	r2, r3
 800c640:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800c642:	193b      	adds	r3, r7, r4
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	4a08      	ldr	r2, [pc, #32]	; (800c668 <UARTEx_SetNbDataToProcess+0xb8>)
 800c648:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c64a:	0019      	movs	r1, r3
 800c64c:	f7f3 fdfe 	bl	800024c <__divsi3>
 800c650:	0003      	movs	r3, r0
 800c652:	b299      	uxth	r1, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2268      	movs	r2, #104	; 0x68
 800c658:	5299      	strh	r1, [r3, r2]
}
 800c65a:	46c0      	nop			; (mov r8, r8)
 800c65c:	46bd      	mov	sp, r7
 800c65e:	b005      	add	sp, #20
 800c660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c662:	46c0      	nop			; (mov r8, r8)
 800c664:	080121e4 	.word	0x080121e4
 800c668:	080121ec 	.word	0x080121ec

0800c66c <__errno>:
 800c66c:	4b01      	ldr	r3, [pc, #4]	; (800c674 <__errno+0x8>)
 800c66e:	6818      	ldr	r0, [r3, #0]
 800c670:	4770      	bx	lr
 800c672:	46c0      	nop			; (mov r8, r8)
 800c674:	20000010 	.word	0x20000010

0800c678 <__libc_init_array>:
 800c678:	b570      	push	{r4, r5, r6, lr}
 800c67a:	2600      	movs	r6, #0
 800c67c:	4d0c      	ldr	r5, [pc, #48]	; (800c6b0 <__libc_init_array+0x38>)
 800c67e:	4c0d      	ldr	r4, [pc, #52]	; (800c6b4 <__libc_init_array+0x3c>)
 800c680:	1b64      	subs	r4, r4, r5
 800c682:	10a4      	asrs	r4, r4, #2
 800c684:	42a6      	cmp	r6, r4
 800c686:	d109      	bne.n	800c69c <__libc_init_array+0x24>
 800c688:	2600      	movs	r6, #0
 800c68a:	f005 fb2f 	bl	8011cec <_init>
 800c68e:	4d0a      	ldr	r5, [pc, #40]	; (800c6b8 <__libc_init_array+0x40>)
 800c690:	4c0a      	ldr	r4, [pc, #40]	; (800c6bc <__libc_init_array+0x44>)
 800c692:	1b64      	subs	r4, r4, r5
 800c694:	10a4      	asrs	r4, r4, #2
 800c696:	42a6      	cmp	r6, r4
 800c698:	d105      	bne.n	800c6a6 <__libc_init_array+0x2e>
 800c69a:	bd70      	pop	{r4, r5, r6, pc}
 800c69c:	00b3      	lsls	r3, r6, #2
 800c69e:	58eb      	ldr	r3, [r5, r3]
 800c6a0:	4798      	blx	r3
 800c6a2:	3601      	adds	r6, #1
 800c6a4:	e7ee      	b.n	800c684 <__libc_init_array+0xc>
 800c6a6:	00b3      	lsls	r3, r6, #2
 800c6a8:	58eb      	ldr	r3, [r5, r3]
 800c6aa:	4798      	blx	r3
 800c6ac:	3601      	adds	r6, #1
 800c6ae:	e7f2      	b.n	800c696 <__libc_init_array+0x1e>
 800c6b0:	08012860 	.word	0x08012860
 800c6b4:	08012860 	.word	0x08012860
 800c6b8:	08012860 	.word	0x08012860
 800c6bc:	08012864 	.word	0x08012864

0800c6c0 <memcpy>:
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	b510      	push	{r4, lr}
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d100      	bne.n	800c6ca <memcpy+0xa>
 800c6c8:	bd10      	pop	{r4, pc}
 800c6ca:	5ccc      	ldrb	r4, [r1, r3]
 800c6cc:	54c4      	strb	r4, [r0, r3]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	e7f8      	b.n	800c6c4 <memcpy+0x4>

0800c6d2 <memset>:
 800c6d2:	0003      	movs	r3, r0
 800c6d4:	1882      	adds	r2, r0, r2
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d100      	bne.n	800c6dc <memset+0xa>
 800c6da:	4770      	bx	lr
 800c6dc:	7019      	strb	r1, [r3, #0]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	e7f9      	b.n	800c6d6 <memset+0x4>

0800c6e2 <__cvt>:
 800c6e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6e4:	001e      	movs	r6, r3
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	0014      	movs	r4, r2
 800c6ea:	b08b      	sub	sp, #44	; 0x2c
 800c6ec:	429e      	cmp	r6, r3
 800c6ee:	da04      	bge.n	800c6fa <__cvt+0x18>
 800c6f0:	2180      	movs	r1, #128	; 0x80
 800c6f2:	0609      	lsls	r1, r1, #24
 800c6f4:	1873      	adds	r3, r6, r1
 800c6f6:	001e      	movs	r6, r3
 800c6f8:	232d      	movs	r3, #45	; 0x2d
 800c6fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6fc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c6fe:	7013      	strb	r3, [r2, #0]
 800c700:	2320      	movs	r3, #32
 800c702:	2203      	movs	r2, #3
 800c704:	439f      	bics	r7, r3
 800c706:	2f46      	cmp	r7, #70	; 0x46
 800c708:	d007      	beq.n	800c71a <__cvt+0x38>
 800c70a:	003b      	movs	r3, r7
 800c70c:	3b45      	subs	r3, #69	; 0x45
 800c70e:	4259      	negs	r1, r3
 800c710:	414b      	adcs	r3, r1
 800c712:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c714:	3a01      	subs	r2, #1
 800c716:	18cb      	adds	r3, r1, r3
 800c718:	9310      	str	r3, [sp, #64]	; 0x40
 800c71a:	ab09      	add	r3, sp, #36	; 0x24
 800c71c:	9304      	str	r3, [sp, #16]
 800c71e:	ab08      	add	r3, sp, #32
 800c720:	9303      	str	r3, [sp, #12]
 800c722:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c724:	9200      	str	r2, [sp, #0]
 800c726:	9302      	str	r3, [sp, #8]
 800c728:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c72a:	0022      	movs	r2, r4
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	0033      	movs	r3, r6
 800c730:	f000 fcfe 	bl	800d130 <_dtoa_r>
 800c734:	0005      	movs	r5, r0
 800c736:	2f47      	cmp	r7, #71	; 0x47
 800c738:	d102      	bne.n	800c740 <__cvt+0x5e>
 800c73a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c73c:	07db      	lsls	r3, r3, #31
 800c73e:	d528      	bpl.n	800c792 <__cvt+0xb0>
 800c740:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c742:	18eb      	adds	r3, r5, r3
 800c744:	9307      	str	r3, [sp, #28]
 800c746:	2f46      	cmp	r7, #70	; 0x46
 800c748:	d114      	bne.n	800c774 <__cvt+0x92>
 800c74a:	782b      	ldrb	r3, [r5, #0]
 800c74c:	2b30      	cmp	r3, #48	; 0x30
 800c74e:	d10c      	bne.n	800c76a <__cvt+0x88>
 800c750:	2200      	movs	r2, #0
 800c752:	2300      	movs	r3, #0
 800c754:	0020      	movs	r0, r4
 800c756:	0031      	movs	r1, r6
 800c758:	f7f3 fe74 	bl	8000444 <__aeabi_dcmpeq>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d104      	bne.n	800c76a <__cvt+0x88>
 800c760:	2301      	movs	r3, #1
 800c762:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c764:	1a9b      	subs	r3, r3, r2
 800c766:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c768:	6013      	str	r3, [r2, #0]
 800c76a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c76c:	9a07      	ldr	r2, [sp, #28]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	18d3      	adds	r3, r2, r3
 800c772:	9307      	str	r3, [sp, #28]
 800c774:	2200      	movs	r2, #0
 800c776:	2300      	movs	r3, #0
 800c778:	0020      	movs	r0, r4
 800c77a:	0031      	movs	r1, r6
 800c77c:	f7f3 fe62 	bl	8000444 <__aeabi_dcmpeq>
 800c780:	2800      	cmp	r0, #0
 800c782:	d001      	beq.n	800c788 <__cvt+0xa6>
 800c784:	9b07      	ldr	r3, [sp, #28]
 800c786:	9309      	str	r3, [sp, #36]	; 0x24
 800c788:	2230      	movs	r2, #48	; 0x30
 800c78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c78c:	9907      	ldr	r1, [sp, #28]
 800c78e:	428b      	cmp	r3, r1
 800c790:	d306      	bcc.n	800c7a0 <__cvt+0xbe>
 800c792:	0028      	movs	r0, r5
 800c794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c796:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c798:	1b5b      	subs	r3, r3, r5
 800c79a:	6013      	str	r3, [r2, #0]
 800c79c:	b00b      	add	sp, #44	; 0x2c
 800c79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7a0:	1c59      	adds	r1, r3, #1
 800c7a2:	9109      	str	r1, [sp, #36]	; 0x24
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	e7f0      	b.n	800c78a <__cvt+0xa8>

0800c7a8 <__exponent>:
 800c7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7aa:	1c83      	adds	r3, r0, #2
 800c7ac:	b087      	sub	sp, #28
 800c7ae:	9303      	str	r3, [sp, #12]
 800c7b0:	0005      	movs	r5, r0
 800c7b2:	000c      	movs	r4, r1
 800c7b4:	232b      	movs	r3, #43	; 0x2b
 800c7b6:	7002      	strb	r2, [r0, #0]
 800c7b8:	2900      	cmp	r1, #0
 800c7ba:	da01      	bge.n	800c7c0 <__exponent+0x18>
 800c7bc:	424c      	negs	r4, r1
 800c7be:	3302      	adds	r3, #2
 800c7c0:	706b      	strb	r3, [r5, #1]
 800c7c2:	2c09      	cmp	r4, #9
 800c7c4:	dd31      	ble.n	800c82a <__exponent+0x82>
 800c7c6:	270a      	movs	r7, #10
 800c7c8:	ab04      	add	r3, sp, #16
 800c7ca:	1dde      	adds	r6, r3, #7
 800c7cc:	0020      	movs	r0, r4
 800c7ce:	0039      	movs	r1, r7
 800c7d0:	9601      	str	r6, [sp, #4]
 800c7d2:	f7f3 fe21 	bl	8000418 <__aeabi_idivmod>
 800c7d6:	3e01      	subs	r6, #1
 800c7d8:	3130      	adds	r1, #48	; 0x30
 800c7da:	0020      	movs	r0, r4
 800c7dc:	7031      	strb	r1, [r6, #0]
 800c7de:	0039      	movs	r1, r7
 800c7e0:	9402      	str	r4, [sp, #8]
 800c7e2:	f7f3 fd33 	bl	800024c <__divsi3>
 800c7e6:	9b02      	ldr	r3, [sp, #8]
 800c7e8:	0004      	movs	r4, r0
 800c7ea:	2b63      	cmp	r3, #99	; 0x63
 800c7ec:	dcee      	bgt.n	800c7cc <__exponent+0x24>
 800c7ee:	9b01      	ldr	r3, [sp, #4]
 800c7f0:	3430      	adds	r4, #48	; 0x30
 800c7f2:	1e9a      	subs	r2, r3, #2
 800c7f4:	0013      	movs	r3, r2
 800c7f6:	9903      	ldr	r1, [sp, #12]
 800c7f8:	7014      	strb	r4, [r2, #0]
 800c7fa:	a804      	add	r0, sp, #16
 800c7fc:	3007      	adds	r0, #7
 800c7fe:	4298      	cmp	r0, r3
 800c800:	d80e      	bhi.n	800c820 <__exponent+0x78>
 800c802:	ab04      	add	r3, sp, #16
 800c804:	3307      	adds	r3, #7
 800c806:	2000      	movs	r0, #0
 800c808:	429a      	cmp	r2, r3
 800c80a:	d804      	bhi.n	800c816 <__exponent+0x6e>
 800c80c:	ab04      	add	r3, sp, #16
 800c80e:	3009      	adds	r0, #9
 800c810:	18c0      	adds	r0, r0, r3
 800c812:	9b01      	ldr	r3, [sp, #4]
 800c814:	1ac0      	subs	r0, r0, r3
 800c816:	9b03      	ldr	r3, [sp, #12]
 800c818:	1818      	adds	r0, r3, r0
 800c81a:	1b40      	subs	r0, r0, r5
 800c81c:	b007      	add	sp, #28
 800c81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c820:	7818      	ldrb	r0, [r3, #0]
 800c822:	3301      	adds	r3, #1
 800c824:	7008      	strb	r0, [r1, #0]
 800c826:	3101      	adds	r1, #1
 800c828:	e7e7      	b.n	800c7fa <__exponent+0x52>
 800c82a:	2330      	movs	r3, #48	; 0x30
 800c82c:	18e4      	adds	r4, r4, r3
 800c82e:	70ab      	strb	r3, [r5, #2]
 800c830:	1d28      	adds	r0, r5, #4
 800c832:	70ec      	strb	r4, [r5, #3]
 800c834:	e7f1      	b.n	800c81a <__exponent+0x72>
	...

0800c838 <_printf_float>:
 800c838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c83a:	b095      	sub	sp, #84	; 0x54
 800c83c:	000c      	movs	r4, r1
 800c83e:	9208      	str	r2, [sp, #32]
 800c840:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c842:	9309      	str	r3, [sp, #36]	; 0x24
 800c844:	0007      	movs	r7, r0
 800c846:	f001 fa91 	bl	800dd6c <_localeconv_r>
 800c84a:	6803      	ldr	r3, [r0, #0]
 800c84c:	0018      	movs	r0, r3
 800c84e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c850:	f7f3 fc56 	bl	8000100 <strlen>
 800c854:	2300      	movs	r3, #0
 800c856:	9312      	str	r3, [sp, #72]	; 0x48
 800c858:	7e23      	ldrb	r3, [r4, #24]
 800c85a:	2207      	movs	r2, #7
 800c85c:	001e      	movs	r6, r3
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	900d      	str	r0, [sp, #52]	; 0x34
 800c862:	930c      	str	r3, [sp, #48]	; 0x30
 800c864:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c866:	682b      	ldr	r3, [r5, #0]
 800c868:	05c9      	lsls	r1, r1, #23
 800c86a:	d547      	bpl.n	800c8fc <_printf_float+0xc4>
 800c86c:	189b      	adds	r3, r3, r2
 800c86e:	4393      	bics	r3, r2
 800c870:	001a      	movs	r2, r3
 800c872:	3208      	adds	r2, #8
 800c874:	602a      	str	r2, [r5, #0]
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	64a2      	str	r2, [r4, #72]	; 0x48
 800c87c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c87e:	2201      	movs	r2, #1
 800c880:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c882:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800c884:	930a      	str	r3, [sp, #40]	; 0x28
 800c886:	006b      	lsls	r3, r5, #1
 800c888:	085b      	lsrs	r3, r3, #1
 800c88a:	930e      	str	r3, [sp, #56]	; 0x38
 800c88c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c88e:	4ba8      	ldr	r3, [pc, #672]	; (800cb30 <_printf_float+0x2f8>)
 800c890:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c892:	4252      	negs	r2, r2
 800c894:	f7f6 fa72 	bl	8002d7c <__aeabi_dcmpun>
 800c898:	2800      	cmp	r0, #0
 800c89a:	d131      	bne.n	800c900 <_printf_float+0xc8>
 800c89c:	2201      	movs	r2, #1
 800c89e:	4ba4      	ldr	r3, [pc, #656]	; (800cb30 <_printf_float+0x2f8>)
 800c8a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c8a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c8a4:	4252      	negs	r2, r2
 800c8a6:	f7f3 fddd 	bl	8000464 <__aeabi_dcmple>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d128      	bne.n	800c900 <_printf_float+0xc8>
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	0029      	movs	r1, r5
 800c8b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c8b6:	f7f3 fdcb 	bl	8000450 <__aeabi_dcmplt>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d003      	beq.n	800c8c6 <_printf_float+0x8e>
 800c8be:	0023      	movs	r3, r4
 800c8c0:	222d      	movs	r2, #45	; 0x2d
 800c8c2:	3343      	adds	r3, #67	; 0x43
 800c8c4:	701a      	strb	r2, [r3, #0]
 800c8c6:	4d9b      	ldr	r5, [pc, #620]	; (800cb34 <_printf_float+0x2fc>)
 800c8c8:	2e47      	cmp	r6, #71	; 0x47
 800c8ca:	d900      	bls.n	800c8ce <_printf_float+0x96>
 800c8cc:	4d9a      	ldr	r5, [pc, #616]	; (800cb38 <_printf_float+0x300>)
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8d2:	6123      	str	r3, [r4, #16]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	439a      	bics	r2, r3
 800c8d8:	2300      	movs	r3, #0
 800c8da:	6022      	str	r2, [r4, #0]
 800c8dc:	930a      	str	r3, [sp, #40]	; 0x28
 800c8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8e0:	0021      	movs	r1, r4
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	0038      	movs	r0, r7
 800c8e6:	9b08      	ldr	r3, [sp, #32]
 800c8e8:	aa13      	add	r2, sp, #76	; 0x4c
 800c8ea:	f000 f9f3 	bl	800ccd4 <_printf_common>
 800c8ee:	1c43      	adds	r3, r0, #1
 800c8f0:	d000      	beq.n	800c8f4 <_printf_float+0xbc>
 800c8f2:	e09e      	b.n	800ca32 <_printf_float+0x1fa>
 800c8f4:	2001      	movs	r0, #1
 800c8f6:	4240      	negs	r0, r0
 800c8f8:	b015      	add	sp, #84	; 0x54
 800c8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8fc:	3307      	adds	r3, #7
 800c8fe:	e7b6      	b.n	800c86e <_printf_float+0x36>
 800c900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c902:	002b      	movs	r3, r5
 800c904:	0010      	movs	r0, r2
 800c906:	0029      	movs	r1, r5
 800c908:	f7f6 fa38 	bl	8002d7c <__aeabi_dcmpun>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d00a      	beq.n	800c926 <_printf_float+0xee>
 800c910:	2d00      	cmp	r5, #0
 800c912:	da03      	bge.n	800c91c <_printf_float+0xe4>
 800c914:	0023      	movs	r3, r4
 800c916:	222d      	movs	r2, #45	; 0x2d
 800c918:	3343      	adds	r3, #67	; 0x43
 800c91a:	701a      	strb	r2, [r3, #0]
 800c91c:	4d87      	ldr	r5, [pc, #540]	; (800cb3c <_printf_float+0x304>)
 800c91e:	2e47      	cmp	r6, #71	; 0x47
 800c920:	d9d5      	bls.n	800c8ce <_printf_float+0x96>
 800c922:	4d87      	ldr	r5, [pc, #540]	; (800cb40 <_printf_float+0x308>)
 800c924:	e7d3      	b.n	800c8ce <_printf_float+0x96>
 800c926:	2220      	movs	r2, #32
 800c928:	0031      	movs	r1, r6
 800c92a:	6863      	ldr	r3, [r4, #4]
 800c92c:	4391      	bics	r1, r2
 800c92e:	910e      	str	r1, [sp, #56]	; 0x38
 800c930:	1c5a      	adds	r2, r3, #1
 800c932:	d147      	bne.n	800c9c4 <_printf_float+0x18c>
 800c934:	3307      	adds	r3, #7
 800c936:	6063      	str	r3, [r4, #4]
 800c938:	2380      	movs	r3, #128	; 0x80
 800c93a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c93c:	00db      	lsls	r3, r3, #3
 800c93e:	4313      	orrs	r3, r2
 800c940:	2200      	movs	r2, #0
 800c942:	9206      	str	r2, [sp, #24]
 800c944:	aa12      	add	r2, sp, #72	; 0x48
 800c946:	9205      	str	r2, [sp, #20]
 800c948:	aa11      	add	r2, sp, #68	; 0x44
 800c94a:	9203      	str	r2, [sp, #12]
 800c94c:	2223      	movs	r2, #35	; 0x23
 800c94e:	a908      	add	r1, sp, #32
 800c950:	6023      	str	r3, [r4, #0]
 800c952:	9301      	str	r3, [sp, #4]
 800c954:	6863      	ldr	r3, [r4, #4]
 800c956:	1852      	adds	r2, r2, r1
 800c958:	9202      	str	r2, [sp, #8]
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	0038      	movs	r0, r7
 800c95e:	002b      	movs	r3, r5
 800c960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c962:	9604      	str	r6, [sp, #16]
 800c964:	f7ff febd 	bl	800c6e2 <__cvt>
 800c968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c96a:	0005      	movs	r5, r0
 800c96c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c96e:	2b47      	cmp	r3, #71	; 0x47
 800c970:	d108      	bne.n	800c984 <_printf_float+0x14c>
 800c972:	1ccb      	adds	r3, r1, #3
 800c974:	db02      	blt.n	800c97c <_printf_float+0x144>
 800c976:	6863      	ldr	r3, [r4, #4]
 800c978:	4299      	cmp	r1, r3
 800c97a:	dd46      	ble.n	800ca0a <_printf_float+0x1d2>
 800c97c:	0033      	movs	r3, r6
 800c97e:	3b02      	subs	r3, #2
 800c980:	b2db      	uxtb	r3, r3
 800c982:	001e      	movs	r6, r3
 800c984:	2e65      	cmp	r6, #101	; 0x65
 800c986:	d824      	bhi.n	800c9d2 <_printf_float+0x19a>
 800c988:	0020      	movs	r0, r4
 800c98a:	0032      	movs	r2, r6
 800c98c:	3901      	subs	r1, #1
 800c98e:	3050      	adds	r0, #80	; 0x50
 800c990:	9111      	str	r1, [sp, #68]	; 0x44
 800c992:	f7ff ff09 	bl	800c7a8 <__exponent>
 800c996:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c998:	900a      	str	r0, [sp, #40]	; 0x28
 800c99a:	1813      	adds	r3, r2, r0
 800c99c:	6123      	str	r3, [r4, #16]
 800c99e:	2a01      	cmp	r2, #1
 800c9a0:	dc02      	bgt.n	800c9a8 <_printf_float+0x170>
 800c9a2:	6822      	ldr	r2, [r4, #0]
 800c9a4:	07d2      	lsls	r2, r2, #31
 800c9a6:	d501      	bpl.n	800c9ac <_printf_float+0x174>
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	6123      	str	r3, [r4, #16]
 800c9ac:	2323      	movs	r3, #35	; 0x23
 800c9ae:	aa08      	add	r2, sp, #32
 800c9b0:	189b      	adds	r3, r3, r2
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d100      	bne.n	800c9ba <_printf_float+0x182>
 800c9b8:	e791      	b.n	800c8de <_printf_float+0xa6>
 800c9ba:	0023      	movs	r3, r4
 800c9bc:	222d      	movs	r2, #45	; 0x2d
 800c9be:	3343      	adds	r3, #67	; 0x43
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	e78c      	b.n	800c8de <_printf_float+0xa6>
 800c9c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9c6:	2a47      	cmp	r2, #71	; 0x47
 800c9c8:	d1b6      	bne.n	800c938 <_printf_float+0x100>
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1b4      	bne.n	800c938 <_printf_float+0x100>
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	e7b1      	b.n	800c936 <_printf_float+0xfe>
 800c9d2:	2e66      	cmp	r6, #102	; 0x66
 800c9d4:	d11b      	bne.n	800ca0e <_printf_float+0x1d6>
 800c9d6:	6863      	ldr	r3, [r4, #4]
 800c9d8:	2900      	cmp	r1, #0
 800c9da:	dd0d      	ble.n	800c9f8 <_printf_float+0x1c0>
 800c9dc:	6121      	str	r1, [r4, #16]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d102      	bne.n	800c9e8 <_printf_float+0x1b0>
 800c9e2:	6822      	ldr	r2, [r4, #0]
 800c9e4:	07d2      	lsls	r2, r2, #31
 800c9e6:	d502      	bpl.n	800c9ee <_printf_float+0x1b6>
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	1859      	adds	r1, r3, r1
 800c9ec:	6121      	str	r1, [r4, #16]
 800c9ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9f0:	65a3      	str	r3, [r4, #88]	; 0x58
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	930a      	str	r3, [sp, #40]	; 0x28
 800c9f6:	e7d9      	b.n	800c9ac <_printf_float+0x174>
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d103      	bne.n	800ca04 <_printf_float+0x1cc>
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	6821      	ldr	r1, [r4, #0]
 800ca00:	4211      	tst	r1, r2
 800ca02:	d000      	beq.n	800ca06 <_printf_float+0x1ce>
 800ca04:	1c9a      	adds	r2, r3, #2
 800ca06:	6122      	str	r2, [r4, #16]
 800ca08:	e7f1      	b.n	800c9ee <_printf_float+0x1b6>
 800ca0a:	2367      	movs	r3, #103	; 0x67
 800ca0c:	001e      	movs	r6, r3
 800ca0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca12:	4293      	cmp	r3, r2
 800ca14:	db06      	blt.n	800ca24 <_printf_float+0x1ec>
 800ca16:	6822      	ldr	r2, [r4, #0]
 800ca18:	6123      	str	r3, [r4, #16]
 800ca1a:	07d2      	lsls	r2, r2, #31
 800ca1c:	d5e7      	bpl.n	800c9ee <_printf_float+0x1b6>
 800ca1e:	3301      	adds	r3, #1
 800ca20:	6123      	str	r3, [r4, #16]
 800ca22:	e7e4      	b.n	800c9ee <_printf_float+0x1b6>
 800ca24:	2101      	movs	r1, #1
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	dc01      	bgt.n	800ca2e <_printf_float+0x1f6>
 800ca2a:	1849      	adds	r1, r1, r1
 800ca2c:	1ac9      	subs	r1, r1, r3
 800ca2e:	1852      	adds	r2, r2, r1
 800ca30:	e7e9      	b.n	800ca06 <_printf_float+0x1ce>
 800ca32:	6822      	ldr	r2, [r4, #0]
 800ca34:	0553      	lsls	r3, r2, #21
 800ca36:	d408      	bmi.n	800ca4a <_printf_float+0x212>
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	002a      	movs	r2, r5
 800ca3c:	0038      	movs	r0, r7
 800ca3e:	9908      	ldr	r1, [sp, #32]
 800ca40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ca42:	47a8      	blx	r5
 800ca44:	1c43      	adds	r3, r0, #1
 800ca46:	d129      	bne.n	800ca9c <_printf_float+0x264>
 800ca48:	e754      	b.n	800c8f4 <_printf_float+0xbc>
 800ca4a:	2e65      	cmp	r6, #101	; 0x65
 800ca4c:	d800      	bhi.n	800ca50 <_printf_float+0x218>
 800ca4e:	e0ec      	b.n	800cc2a <_printf_float+0x3f2>
 800ca50:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ca52:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ca54:	2200      	movs	r2, #0
 800ca56:	2300      	movs	r3, #0
 800ca58:	f7f3 fcf4 	bl	8000444 <__aeabi_dcmpeq>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d034      	beq.n	800caca <_printf_float+0x292>
 800ca60:	2301      	movs	r3, #1
 800ca62:	0038      	movs	r0, r7
 800ca64:	4a37      	ldr	r2, [pc, #220]	; (800cb44 <_printf_float+0x30c>)
 800ca66:	9908      	ldr	r1, [sp, #32]
 800ca68:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ca6a:	47a8      	blx	r5
 800ca6c:	1c43      	adds	r3, r0, #1
 800ca6e:	d100      	bne.n	800ca72 <_printf_float+0x23a>
 800ca70:	e740      	b.n	800c8f4 <_printf_float+0xbc>
 800ca72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca76:	4293      	cmp	r3, r2
 800ca78:	db02      	blt.n	800ca80 <_printf_float+0x248>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	07db      	lsls	r3, r3, #31
 800ca7e:	d50d      	bpl.n	800ca9c <_printf_float+0x264>
 800ca80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ca82:	0038      	movs	r0, r7
 800ca84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca88:	9908      	ldr	r1, [sp, #32]
 800ca8a:	47a8      	blx	r5
 800ca8c:	2500      	movs	r5, #0
 800ca8e:	1c43      	adds	r3, r0, #1
 800ca90:	d100      	bne.n	800ca94 <_printf_float+0x25c>
 800ca92:	e72f      	b.n	800c8f4 <_printf_float+0xbc>
 800ca94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca96:	3b01      	subs	r3, #1
 800ca98:	42ab      	cmp	r3, r5
 800ca9a:	dc0a      	bgt.n	800cab2 <_printf_float+0x27a>
 800ca9c:	6823      	ldr	r3, [r4, #0]
 800ca9e:	079b      	lsls	r3, r3, #30
 800caa0:	d500      	bpl.n	800caa4 <_printf_float+0x26c>
 800caa2:	e114      	b.n	800ccce <_printf_float+0x496>
 800caa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800caa6:	68e0      	ldr	r0, [r4, #12]
 800caa8:	4298      	cmp	r0, r3
 800caaa:	db00      	blt.n	800caae <_printf_float+0x276>
 800caac:	e724      	b.n	800c8f8 <_printf_float+0xc0>
 800caae:	0018      	movs	r0, r3
 800cab0:	e722      	b.n	800c8f8 <_printf_float+0xc0>
 800cab2:	0022      	movs	r2, r4
 800cab4:	2301      	movs	r3, #1
 800cab6:	0038      	movs	r0, r7
 800cab8:	9908      	ldr	r1, [sp, #32]
 800caba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cabc:	321a      	adds	r2, #26
 800cabe:	47b0      	blx	r6
 800cac0:	1c43      	adds	r3, r0, #1
 800cac2:	d100      	bne.n	800cac6 <_printf_float+0x28e>
 800cac4:	e716      	b.n	800c8f4 <_printf_float+0xbc>
 800cac6:	3501      	adds	r5, #1
 800cac8:	e7e4      	b.n	800ca94 <_printf_float+0x25c>
 800caca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cacc:	2b00      	cmp	r3, #0
 800cace:	dc3b      	bgt.n	800cb48 <_printf_float+0x310>
 800cad0:	2301      	movs	r3, #1
 800cad2:	0038      	movs	r0, r7
 800cad4:	4a1b      	ldr	r2, [pc, #108]	; (800cb44 <_printf_float+0x30c>)
 800cad6:	9908      	ldr	r1, [sp, #32]
 800cad8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cada:	47b0      	blx	r6
 800cadc:	1c43      	adds	r3, r0, #1
 800cade:	d100      	bne.n	800cae2 <_printf_float+0x2aa>
 800cae0:	e708      	b.n	800c8f4 <_printf_float+0xbc>
 800cae2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cae6:	4313      	orrs	r3, r2
 800cae8:	d102      	bne.n	800caf0 <_printf_float+0x2b8>
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	07db      	lsls	r3, r3, #31
 800caee:	d5d5      	bpl.n	800ca9c <_printf_float+0x264>
 800caf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caf2:	0038      	movs	r0, r7
 800caf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800caf6:	9908      	ldr	r1, [sp, #32]
 800caf8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cafa:	47b0      	blx	r6
 800cafc:	1c43      	adds	r3, r0, #1
 800cafe:	d100      	bne.n	800cb02 <_printf_float+0x2ca>
 800cb00:	e6f8      	b.n	800c8f4 <_printf_float+0xbc>
 800cb02:	2300      	movs	r3, #0
 800cb04:	930a      	str	r3, [sp, #40]	; 0x28
 800cb06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb0a:	425b      	negs	r3, r3
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	dc01      	bgt.n	800cb14 <_printf_float+0x2dc>
 800cb10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb12:	e792      	b.n	800ca3a <_printf_float+0x202>
 800cb14:	0022      	movs	r2, r4
 800cb16:	2301      	movs	r3, #1
 800cb18:	0038      	movs	r0, r7
 800cb1a:	9908      	ldr	r1, [sp, #32]
 800cb1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cb1e:	321a      	adds	r2, #26
 800cb20:	47b0      	blx	r6
 800cb22:	1c43      	adds	r3, r0, #1
 800cb24:	d100      	bne.n	800cb28 <_printf_float+0x2f0>
 800cb26:	e6e5      	b.n	800c8f4 <_printf_float+0xbc>
 800cb28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	e7ea      	b.n	800cb04 <_printf_float+0x2cc>
 800cb2e:	46c0      	nop			; (mov r8, r8)
 800cb30:	7fefffff 	.word	0x7fefffff
 800cb34:	080121f8 	.word	0x080121f8
 800cb38:	080121fc 	.word	0x080121fc
 800cb3c:	08012200 	.word	0x08012200
 800cb40:	08012204 	.word	0x08012204
 800cb44:	08012208 	.word	0x08012208
 800cb48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb4c:	920a      	str	r2, [sp, #40]	; 0x28
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	dd00      	ble.n	800cb54 <_printf_float+0x31c>
 800cb52:	930a      	str	r3, [sp, #40]	; 0x28
 800cb54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	dc3d      	bgt.n	800cbd6 <_printf_float+0x39e>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	930e      	str	r3, [sp, #56]	; 0x38
 800cb5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb60:	43db      	mvns	r3, r3
 800cb62:	17db      	asrs	r3, r3, #31
 800cb64:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb6a:	930c      	str	r3, [sp, #48]	; 0x30
 800cb6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb6e:	4013      	ands	r3, r2
 800cb70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb76:	4293      	cmp	r3, r2
 800cb78:	dc36      	bgt.n	800cbe8 <_printf_float+0x3b0>
 800cb7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	db40      	blt.n	800cc04 <_printf_float+0x3cc>
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	07db      	lsls	r3, r3, #31
 800cb86:	d43d      	bmi.n	800cc04 <_printf_float+0x3cc>
 800cb88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cb8e:	1ad3      	subs	r3, r2, r3
 800cb90:	1a52      	subs	r2, r2, r1
 800cb92:	920a      	str	r2, [sp, #40]	; 0x28
 800cb94:	429a      	cmp	r2, r3
 800cb96:	dd00      	ble.n	800cb9a <_printf_float+0x362>
 800cb98:	930a      	str	r3, [sp, #40]	; 0x28
 800cb9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	dc3a      	bgt.n	800cc16 <_printf_float+0x3de>
 800cba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cba2:	2500      	movs	r5, #0
 800cba4:	43db      	mvns	r3, r3
 800cba6:	17db      	asrs	r3, r3, #31
 800cba8:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cbac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cbae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbb0:	1a9b      	subs	r3, r3, r2
 800cbb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbb4:	400a      	ands	r2, r1
 800cbb6:	1a9b      	subs	r3, r3, r2
 800cbb8:	42ab      	cmp	r3, r5
 800cbba:	dc00      	bgt.n	800cbbe <_printf_float+0x386>
 800cbbc:	e76e      	b.n	800ca9c <_printf_float+0x264>
 800cbbe:	0022      	movs	r2, r4
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	0038      	movs	r0, r7
 800cbc4:	9908      	ldr	r1, [sp, #32]
 800cbc6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cbc8:	321a      	adds	r2, #26
 800cbca:	47b0      	blx	r6
 800cbcc:	1c43      	adds	r3, r0, #1
 800cbce:	d100      	bne.n	800cbd2 <_printf_float+0x39a>
 800cbd0:	e690      	b.n	800c8f4 <_printf_float+0xbc>
 800cbd2:	3501      	adds	r5, #1
 800cbd4:	e7e9      	b.n	800cbaa <_printf_float+0x372>
 800cbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbd8:	002a      	movs	r2, r5
 800cbda:	0038      	movs	r0, r7
 800cbdc:	9908      	ldr	r1, [sp, #32]
 800cbde:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cbe0:	47b0      	blx	r6
 800cbe2:	1c43      	adds	r3, r0, #1
 800cbe4:	d1b9      	bne.n	800cb5a <_printf_float+0x322>
 800cbe6:	e685      	b.n	800c8f4 <_printf_float+0xbc>
 800cbe8:	0022      	movs	r2, r4
 800cbea:	2301      	movs	r3, #1
 800cbec:	0038      	movs	r0, r7
 800cbee:	9908      	ldr	r1, [sp, #32]
 800cbf0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cbf2:	321a      	adds	r2, #26
 800cbf4:	47b0      	blx	r6
 800cbf6:	1c43      	adds	r3, r0, #1
 800cbf8:	d100      	bne.n	800cbfc <_printf_float+0x3c4>
 800cbfa:	e67b      	b.n	800c8f4 <_printf_float+0xbc>
 800cbfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbfe:	3301      	adds	r3, #1
 800cc00:	930e      	str	r3, [sp, #56]	; 0x38
 800cc02:	e7b0      	b.n	800cb66 <_printf_float+0x32e>
 800cc04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc06:	0038      	movs	r0, r7
 800cc08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc0a:	9908      	ldr	r1, [sp, #32]
 800cc0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cc0e:	47b0      	blx	r6
 800cc10:	1c43      	adds	r3, r0, #1
 800cc12:	d1b9      	bne.n	800cb88 <_printf_float+0x350>
 800cc14:	e66e      	b.n	800c8f4 <_printf_float+0xbc>
 800cc16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc18:	0038      	movs	r0, r7
 800cc1a:	18ea      	adds	r2, r5, r3
 800cc1c:	9908      	ldr	r1, [sp, #32]
 800cc1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cc22:	47a8      	blx	r5
 800cc24:	1c43      	adds	r3, r0, #1
 800cc26:	d1bb      	bne.n	800cba0 <_printf_float+0x368>
 800cc28:	e664      	b.n	800c8f4 <_printf_float+0xbc>
 800cc2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	dc02      	bgt.n	800cc36 <_printf_float+0x3fe>
 800cc30:	2301      	movs	r3, #1
 800cc32:	421a      	tst	r2, r3
 800cc34:	d038      	beq.n	800cca8 <_printf_float+0x470>
 800cc36:	2301      	movs	r3, #1
 800cc38:	002a      	movs	r2, r5
 800cc3a:	0038      	movs	r0, r7
 800cc3c:	9908      	ldr	r1, [sp, #32]
 800cc3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cc40:	47b0      	blx	r6
 800cc42:	1c43      	adds	r3, r0, #1
 800cc44:	d100      	bne.n	800cc48 <_printf_float+0x410>
 800cc46:	e655      	b.n	800c8f4 <_printf_float+0xbc>
 800cc48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc4a:	0038      	movs	r0, r7
 800cc4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc4e:	9908      	ldr	r1, [sp, #32]
 800cc50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cc52:	47b0      	blx	r6
 800cc54:	1c43      	adds	r3, r0, #1
 800cc56:	d100      	bne.n	800cc5a <_printf_float+0x422>
 800cc58:	e64c      	b.n	800c8f4 <_printf_float+0xbc>
 800cc5a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800cc5c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800cc5e:	2200      	movs	r2, #0
 800cc60:	2300      	movs	r3, #0
 800cc62:	f7f3 fbef 	bl	8000444 <__aeabi_dcmpeq>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d11c      	bne.n	800cca4 <_printf_float+0x46c>
 800cc6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc6c:	1c6a      	adds	r2, r5, #1
 800cc6e:	3b01      	subs	r3, #1
 800cc70:	0038      	movs	r0, r7
 800cc72:	9908      	ldr	r1, [sp, #32]
 800cc74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cc76:	47a8      	blx	r5
 800cc78:	1c43      	adds	r3, r0, #1
 800cc7a:	d10f      	bne.n	800cc9c <_printf_float+0x464>
 800cc7c:	e63a      	b.n	800c8f4 <_printf_float+0xbc>
 800cc7e:	0022      	movs	r2, r4
 800cc80:	2301      	movs	r3, #1
 800cc82:	0038      	movs	r0, r7
 800cc84:	9908      	ldr	r1, [sp, #32]
 800cc86:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cc88:	321a      	adds	r2, #26
 800cc8a:	47b0      	blx	r6
 800cc8c:	1c43      	adds	r3, r0, #1
 800cc8e:	d100      	bne.n	800cc92 <_printf_float+0x45a>
 800cc90:	e630      	b.n	800c8f4 <_printf_float+0xbc>
 800cc92:	3501      	adds	r5, #1
 800cc94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc96:	3b01      	subs	r3, #1
 800cc98:	42ab      	cmp	r3, r5
 800cc9a:	dcf0      	bgt.n	800cc7e <_printf_float+0x446>
 800cc9c:	0022      	movs	r2, r4
 800cc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cca0:	3250      	adds	r2, #80	; 0x50
 800cca2:	e6cb      	b.n	800ca3c <_printf_float+0x204>
 800cca4:	2500      	movs	r5, #0
 800cca6:	e7f5      	b.n	800cc94 <_printf_float+0x45c>
 800cca8:	002a      	movs	r2, r5
 800ccaa:	e7e1      	b.n	800cc70 <_printf_float+0x438>
 800ccac:	0022      	movs	r2, r4
 800ccae:	2301      	movs	r3, #1
 800ccb0:	0038      	movs	r0, r7
 800ccb2:	9908      	ldr	r1, [sp, #32]
 800ccb4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ccb6:	3219      	adds	r2, #25
 800ccb8:	47b0      	blx	r6
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	d100      	bne.n	800ccc0 <_printf_float+0x488>
 800ccbe:	e619      	b.n	800c8f4 <_printf_float+0xbc>
 800ccc0:	3501      	adds	r5, #1
 800ccc2:	68e3      	ldr	r3, [r4, #12]
 800ccc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ccc6:	1a9b      	subs	r3, r3, r2
 800ccc8:	42ab      	cmp	r3, r5
 800ccca:	dcef      	bgt.n	800ccac <_printf_float+0x474>
 800cccc:	e6ea      	b.n	800caa4 <_printf_float+0x26c>
 800ccce:	2500      	movs	r5, #0
 800ccd0:	e7f7      	b.n	800ccc2 <_printf_float+0x48a>
 800ccd2:	46c0      	nop			; (mov r8, r8)

0800ccd4 <_printf_common>:
 800ccd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccd6:	0015      	movs	r5, r2
 800ccd8:	9301      	str	r3, [sp, #4]
 800ccda:	688a      	ldr	r2, [r1, #8]
 800ccdc:	690b      	ldr	r3, [r1, #16]
 800ccde:	000c      	movs	r4, r1
 800cce0:	9000      	str	r0, [sp, #0]
 800cce2:	4293      	cmp	r3, r2
 800cce4:	da00      	bge.n	800cce8 <_printf_common+0x14>
 800cce6:	0013      	movs	r3, r2
 800cce8:	0022      	movs	r2, r4
 800ccea:	602b      	str	r3, [r5, #0]
 800ccec:	3243      	adds	r2, #67	; 0x43
 800ccee:	7812      	ldrb	r2, [r2, #0]
 800ccf0:	2a00      	cmp	r2, #0
 800ccf2:	d001      	beq.n	800ccf8 <_printf_common+0x24>
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	602b      	str	r3, [r5, #0]
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	069b      	lsls	r3, r3, #26
 800ccfc:	d502      	bpl.n	800cd04 <_printf_common+0x30>
 800ccfe:	682b      	ldr	r3, [r5, #0]
 800cd00:	3302      	adds	r3, #2
 800cd02:	602b      	str	r3, [r5, #0]
 800cd04:	6822      	ldr	r2, [r4, #0]
 800cd06:	2306      	movs	r3, #6
 800cd08:	0017      	movs	r7, r2
 800cd0a:	401f      	ands	r7, r3
 800cd0c:	421a      	tst	r2, r3
 800cd0e:	d027      	beq.n	800cd60 <_printf_common+0x8c>
 800cd10:	0023      	movs	r3, r4
 800cd12:	3343      	adds	r3, #67	; 0x43
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	1e5a      	subs	r2, r3, #1
 800cd18:	4193      	sbcs	r3, r2
 800cd1a:	6822      	ldr	r2, [r4, #0]
 800cd1c:	0692      	lsls	r2, r2, #26
 800cd1e:	d430      	bmi.n	800cd82 <_printf_common+0xae>
 800cd20:	0022      	movs	r2, r4
 800cd22:	9901      	ldr	r1, [sp, #4]
 800cd24:	9800      	ldr	r0, [sp, #0]
 800cd26:	9e08      	ldr	r6, [sp, #32]
 800cd28:	3243      	adds	r2, #67	; 0x43
 800cd2a:	47b0      	blx	r6
 800cd2c:	1c43      	adds	r3, r0, #1
 800cd2e:	d025      	beq.n	800cd7c <_printf_common+0xa8>
 800cd30:	2306      	movs	r3, #6
 800cd32:	6820      	ldr	r0, [r4, #0]
 800cd34:	682a      	ldr	r2, [r5, #0]
 800cd36:	68e1      	ldr	r1, [r4, #12]
 800cd38:	2500      	movs	r5, #0
 800cd3a:	4003      	ands	r3, r0
 800cd3c:	2b04      	cmp	r3, #4
 800cd3e:	d103      	bne.n	800cd48 <_printf_common+0x74>
 800cd40:	1a8d      	subs	r5, r1, r2
 800cd42:	43eb      	mvns	r3, r5
 800cd44:	17db      	asrs	r3, r3, #31
 800cd46:	401d      	ands	r5, r3
 800cd48:	68a3      	ldr	r3, [r4, #8]
 800cd4a:	6922      	ldr	r2, [r4, #16]
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	dd01      	ble.n	800cd54 <_printf_common+0x80>
 800cd50:	1a9b      	subs	r3, r3, r2
 800cd52:	18ed      	adds	r5, r5, r3
 800cd54:	2700      	movs	r7, #0
 800cd56:	42bd      	cmp	r5, r7
 800cd58:	d120      	bne.n	800cd9c <_printf_common+0xc8>
 800cd5a:	2000      	movs	r0, #0
 800cd5c:	e010      	b.n	800cd80 <_printf_common+0xac>
 800cd5e:	3701      	adds	r7, #1
 800cd60:	68e3      	ldr	r3, [r4, #12]
 800cd62:	682a      	ldr	r2, [r5, #0]
 800cd64:	1a9b      	subs	r3, r3, r2
 800cd66:	42bb      	cmp	r3, r7
 800cd68:	ddd2      	ble.n	800cd10 <_printf_common+0x3c>
 800cd6a:	0022      	movs	r2, r4
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	9901      	ldr	r1, [sp, #4]
 800cd70:	9800      	ldr	r0, [sp, #0]
 800cd72:	9e08      	ldr	r6, [sp, #32]
 800cd74:	3219      	adds	r2, #25
 800cd76:	47b0      	blx	r6
 800cd78:	1c43      	adds	r3, r0, #1
 800cd7a:	d1f0      	bne.n	800cd5e <_printf_common+0x8a>
 800cd7c:	2001      	movs	r0, #1
 800cd7e:	4240      	negs	r0, r0
 800cd80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd82:	2030      	movs	r0, #48	; 0x30
 800cd84:	18e1      	adds	r1, r4, r3
 800cd86:	3143      	adds	r1, #67	; 0x43
 800cd88:	7008      	strb	r0, [r1, #0]
 800cd8a:	0021      	movs	r1, r4
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	3145      	adds	r1, #69	; 0x45
 800cd90:	7809      	ldrb	r1, [r1, #0]
 800cd92:	18a2      	adds	r2, r4, r2
 800cd94:	3243      	adds	r2, #67	; 0x43
 800cd96:	3302      	adds	r3, #2
 800cd98:	7011      	strb	r1, [r2, #0]
 800cd9a:	e7c1      	b.n	800cd20 <_printf_common+0x4c>
 800cd9c:	0022      	movs	r2, r4
 800cd9e:	2301      	movs	r3, #1
 800cda0:	9901      	ldr	r1, [sp, #4]
 800cda2:	9800      	ldr	r0, [sp, #0]
 800cda4:	9e08      	ldr	r6, [sp, #32]
 800cda6:	321a      	adds	r2, #26
 800cda8:	47b0      	blx	r6
 800cdaa:	1c43      	adds	r3, r0, #1
 800cdac:	d0e6      	beq.n	800cd7c <_printf_common+0xa8>
 800cdae:	3701      	adds	r7, #1
 800cdb0:	e7d1      	b.n	800cd56 <_printf_common+0x82>
	...

0800cdb4 <_printf_i>:
 800cdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb6:	b08b      	sub	sp, #44	; 0x2c
 800cdb8:	9206      	str	r2, [sp, #24]
 800cdba:	000a      	movs	r2, r1
 800cdbc:	3243      	adds	r2, #67	; 0x43
 800cdbe:	9307      	str	r3, [sp, #28]
 800cdc0:	9005      	str	r0, [sp, #20]
 800cdc2:	9204      	str	r2, [sp, #16]
 800cdc4:	7e0a      	ldrb	r2, [r1, #24]
 800cdc6:	000c      	movs	r4, r1
 800cdc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdca:	2a78      	cmp	r2, #120	; 0x78
 800cdcc:	d806      	bhi.n	800cddc <_printf_i+0x28>
 800cdce:	2a62      	cmp	r2, #98	; 0x62
 800cdd0:	d808      	bhi.n	800cde4 <_printf_i+0x30>
 800cdd2:	2a00      	cmp	r2, #0
 800cdd4:	d100      	bne.n	800cdd8 <_printf_i+0x24>
 800cdd6:	e0c0      	b.n	800cf5a <_printf_i+0x1a6>
 800cdd8:	2a58      	cmp	r2, #88	; 0x58
 800cdda:	d052      	beq.n	800ce82 <_printf_i+0xce>
 800cddc:	0026      	movs	r6, r4
 800cdde:	3642      	adds	r6, #66	; 0x42
 800cde0:	7032      	strb	r2, [r6, #0]
 800cde2:	e022      	b.n	800ce2a <_printf_i+0x76>
 800cde4:	0010      	movs	r0, r2
 800cde6:	3863      	subs	r0, #99	; 0x63
 800cde8:	2815      	cmp	r0, #21
 800cdea:	d8f7      	bhi.n	800cddc <_printf_i+0x28>
 800cdec:	f7f3 f99a 	bl	8000124 <__gnu_thumb1_case_shi>
 800cdf0:	001f0016 	.word	0x001f0016
 800cdf4:	fff6fff6 	.word	0xfff6fff6
 800cdf8:	fff6fff6 	.word	0xfff6fff6
 800cdfc:	fff6001f 	.word	0xfff6001f
 800ce00:	fff6fff6 	.word	0xfff6fff6
 800ce04:	00a8fff6 	.word	0x00a8fff6
 800ce08:	009a0036 	.word	0x009a0036
 800ce0c:	fff6fff6 	.word	0xfff6fff6
 800ce10:	fff600b9 	.word	0xfff600b9
 800ce14:	fff60036 	.word	0xfff60036
 800ce18:	009efff6 	.word	0x009efff6
 800ce1c:	0026      	movs	r6, r4
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	3642      	adds	r6, #66	; 0x42
 800ce22:	1d11      	adds	r1, r2, #4
 800ce24:	6019      	str	r1, [r3, #0]
 800ce26:	6813      	ldr	r3, [r2, #0]
 800ce28:	7033      	strb	r3, [r6, #0]
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	e0a7      	b.n	800cf7e <_printf_i+0x1ca>
 800ce2e:	6808      	ldr	r0, [r1, #0]
 800ce30:	6819      	ldr	r1, [r3, #0]
 800ce32:	1d0a      	adds	r2, r1, #4
 800ce34:	0605      	lsls	r5, r0, #24
 800ce36:	d50b      	bpl.n	800ce50 <_printf_i+0x9c>
 800ce38:	680d      	ldr	r5, [r1, #0]
 800ce3a:	601a      	str	r2, [r3, #0]
 800ce3c:	2d00      	cmp	r5, #0
 800ce3e:	da03      	bge.n	800ce48 <_printf_i+0x94>
 800ce40:	232d      	movs	r3, #45	; 0x2d
 800ce42:	9a04      	ldr	r2, [sp, #16]
 800ce44:	426d      	negs	r5, r5
 800ce46:	7013      	strb	r3, [r2, #0]
 800ce48:	4b61      	ldr	r3, [pc, #388]	; (800cfd0 <_printf_i+0x21c>)
 800ce4a:	270a      	movs	r7, #10
 800ce4c:	9303      	str	r3, [sp, #12]
 800ce4e:	e032      	b.n	800ceb6 <_printf_i+0x102>
 800ce50:	680d      	ldr	r5, [r1, #0]
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	0641      	lsls	r1, r0, #25
 800ce56:	d5f1      	bpl.n	800ce3c <_printf_i+0x88>
 800ce58:	b22d      	sxth	r5, r5
 800ce5a:	e7ef      	b.n	800ce3c <_printf_i+0x88>
 800ce5c:	680d      	ldr	r5, [r1, #0]
 800ce5e:	6819      	ldr	r1, [r3, #0]
 800ce60:	1d08      	adds	r0, r1, #4
 800ce62:	6018      	str	r0, [r3, #0]
 800ce64:	062e      	lsls	r6, r5, #24
 800ce66:	d501      	bpl.n	800ce6c <_printf_i+0xb8>
 800ce68:	680d      	ldr	r5, [r1, #0]
 800ce6a:	e003      	b.n	800ce74 <_printf_i+0xc0>
 800ce6c:	066d      	lsls	r5, r5, #25
 800ce6e:	d5fb      	bpl.n	800ce68 <_printf_i+0xb4>
 800ce70:	680d      	ldr	r5, [r1, #0]
 800ce72:	b2ad      	uxth	r5, r5
 800ce74:	4b56      	ldr	r3, [pc, #344]	; (800cfd0 <_printf_i+0x21c>)
 800ce76:	270a      	movs	r7, #10
 800ce78:	9303      	str	r3, [sp, #12]
 800ce7a:	2a6f      	cmp	r2, #111	; 0x6f
 800ce7c:	d117      	bne.n	800ceae <_printf_i+0xfa>
 800ce7e:	2708      	movs	r7, #8
 800ce80:	e015      	b.n	800ceae <_printf_i+0xfa>
 800ce82:	3145      	adds	r1, #69	; 0x45
 800ce84:	700a      	strb	r2, [r1, #0]
 800ce86:	4a52      	ldr	r2, [pc, #328]	; (800cfd0 <_printf_i+0x21c>)
 800ce88:	9203      	str	r2, [sp, #12]
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	6821      	ldr	r1, [r4, #0]
 800ce8e:	ca20      	ldmia	r2!, {r5}
 800ce90:	601a      	str	r2, [r3, #0]
 800ce92:	0608      	lsls	r0, r1, #24
 800ce94:	d550      	bpl.n	800cf38 <_printf_i+0x184>
 800ce96:	07cb      	lsls	r3, r1, #31
 800ce98:	d502      	bpl.n	800cea0 <_printf_i+0xec>
 800ce9a:	2320      	movs	r3, #32
 800ce9c:	4319      	orrs	r1, r3
 800ce9e:	6021      	str	r1, [r4, #0]
 800cea0:	2710      	movs	r7, #16
 800cea2:	2d00      	cmp	r5, #0
 800cea4:	d103      	bne.n	800ceae <_printf_i+0xfa>
 800cea6:	2320      	movs	r3, #32
 800cea8:	6822      	ldr	r2, [r4, #0]
 800ceaa:	439a      	bics	r2, r3
 800ceac:	6022      	str	r2, [r4, #0]
 800ceae:	0023      	movs	r3, r4
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	3343      	adds	r3, #67	; 0x43
 800ceb4:	701a      	strb	r2, [r3, #0]
 800ceb6:	6863      	ldr	r3, [r4, #4]
 800ceb8:	60a3      	str	r3, [r4, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	db03      	blt.n	800cec6 <_printf_i+0x112>
 800cebe:	2204      	movs	r2, #4
 800cec0:	6821      	ldr	r1, [r4, #0]
 800cec2:	4391      	bics	r1, r2
 800cec4:	6021      	str	r1, [r4, #0]
 800cec6:	2d00      	cmp	r5, #0
 800cec8:	d102      	bne.n	800ced0 <_printf_i+0x11c>
 800ceca:	9e04      	ldr	r6, [sp, #16]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00c      	beq.n	800ceea <_printf_i+0x136>
 800ced0:	9e04      	ldr	r6, [sp, #16]
 800ced2:	0028      	movs	r0, r5
 800ced4:	0039      	movs	r1, r7
 800ced6:	f7f3 f9b5 	bl	8000244 <__aeabi_uidivmod>
 800ceda:	9b03      	ldr	r3, [sp, #12]
 800cedc:	3e01      	subs	r6, #1
 800cede:	5c5b      	ldrb	r3, [r3, r1]
 800cee0:	7033      	strb	r3, [r6, #0]
 800cee2:	002b      	movs	r3, r5
 800cee4:	0005      	movs	r5, r0
 800cee6:	429f      	cmp	r7, r3
 800cee8:	d9f3      	bls.n	800ced2 <_printf_i+0x11e>
 800ceea:	2f08      	cmp	r7, #8
 800ceec:	d109      	bne.n	800cf02 <_printf_i+0x14e>
 800ceee:	6823      	ldr	r3, [r4, #0]
 800cef0:	07db      	lsls	r3, r3, #31
 800cef2:	d506      	bpl.n	800cf02 <_printf_i+0x14e>
 800cef4:	6863      	ldr	r3, [r4, #4]
 800cef6:	6922      	ldr	r2, [r4, #16]
 800cef8:	4293      	cmp	r3, r2
 800cefa:	dc02      	bgt.n	800cf02 <_printf_i+0x14e>
 800cefc:	2330      	movs	r3, #48	; 0x30
 800cefe:	3e01      	subs	r6, #1
 800cf00:	7033      	strb	r3, [r6, #0]
 800cf02:	9b04      	ldr	r3, [sp, #16]
 800cf04:	1b9b      	subs	r3, r3, r6
 800cf06:	6123      	str	r3, [r4, #16]
 800cf08:	9b07      	ldr	r3, [sp, #28]
 800cf0a:	0021      	movs	r1, r4
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	9805      	ldr	r0, [sp, #20]
 800cf10:	9b06      	ldr	r3, [sp, #24]
 800cf12:	aa09      	add	r2, sp, #36	; 0x24
 800cf14:	f7ff fede 	bl	800ccd4 <_printf_common>
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	d135      	bne.n	800cf88 <_printf_i+0x1d4>
 800cf1c:	2001      	movs	r0, #1
 800cf1e:	4240      	negs	r0, r0
 800cf20:	b00b      	add	sp, #44	; 0x2c
 800cf22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf24:	2220      	movs	r2, #32
 800cf26:	6809      	ldr	r1, [r1, #0]
 800cf28:	430a      	orrs	r2, r1
 800cf2a:	6022      	str	r2, [r4, #0]
 800cf2c:	0022      	movs	r2, r4
 800cf2e:	2178      	movs	r1, #120	; 0x78
 800cf30:	3245      	adds	r2, #69	; 0x45
 800cf32:	7011      	strb	r1, [r2, #0]
 800cf34:	4a27      	ldr	r2, [pc, #156]	; (800cfd4 <_printf_i+0x220>)
 800cf36:	e7a7      	b.n	800ce88 <_printf_i+0xd4>
 800cf38:	0648      	lsls	r0, r1, #25
 800cf3a:	d5ac      	bpl.n	800ce96 <_printf_i+0xe2>
 800cf3c:	b2ad      	uxth	r5, r5
 800cf3e:	e7aa      	b.n	800ce96 <_printf_i+0xe2>
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	680d      	ldr	r5, [r1, #0]
 800cf44:	1d10      	adds	r0, r2, #4
 800cf46:	6949      	ldr	r1, [r1, #20]
 800cf48:	6018      	str	r0, [r3, #0]
 800cf4a:	6813      	ldr	r3, [r2, #0]
 800cf4c:	062e      	lsls	r6, r5, #24
 800cf4e:	d501      	bpl.n	800cf54 <_printf_i+0x1a0>
 800cf50:	6019      	str	r1, [r3, #0]
 800cf52:	e002      	b.n	800cf5a <_printf_i+0x1a6>
 800cf54:	066d      	lsls	r5, r5, #25
 800cf56:	d5fb      	bpl.n	800cf50 <_printf_i+0x19c>
 800cf58:	8019      	strh	r1, [r3, #0]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	9e04      	ldr	r6, [sp, #16]
 800cf5e:	6123      	str	r3, [r4, #16]
 800cf60:	e7d2      	b.n	800cf08 <_printf_i+0x154>
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	1d11      	adds	r1, r2, #4
 800cf66:	6019      	str	r1, [r3, #0]
 800cf68:	6816      	ldr	r6, [r2, #0]
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	0030      	movs	r0, r6
 800cf6e:	6862      	ldr	r2, [r4, #4]
 800cf70:	f000 ff0a 	bl	800dd88 <memchr>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d001      	beq.n	800cf7c <_printf_i+0x1c8>
 800cf78:	1b80      	subs	r0, r0, r6
 800cf7a:	6060      	str	r0, [r4, #4]
 800cf7c:	6863      	ldr	r3, [r4, #4]
 800cf7e:	6123      	str	r3, [r4, #16]
 800cf80:	2300      	movs	r3, #0
 800cf82:	9a04      	ldr	r2, [sp, #16]
 800cf84:	7013      	strb	r3, [r2, #0]
 800cf86:	e7bf      	b.n	800cf08 <_printf_i+0x154>
 800cf88:	6923      	ldr	r3, [r4, #16]
 800cf8a:	0032      	movs	r2, r6
 800cf8c:	9906      	ldr	r1, [sp, #24]
 800cf8e:	9805      	ldr	r0, [sp, #20]
 800cf90:	9d07      	ldr	r5, [sp, #28]
 800cf92:	47a8      	blx	r5
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	d0c1      	beq.n	800cf1c <_printf_i+0x168>
 800cf98:	6823      	ldr	r3, [r4, #0]
 800cf9a:	079b      	lsls	r3, r3, #30
 800cf9c:	d415      	bmi.n	800cfca <_printf_i+0x216>
 800cf9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa0:	68e0      	ldr	r0, [r4, #12]
 800cfa2:	4298      	cmp	r0, r3
 800cfa4:	dabc      	bge.n	800cf20 <_printf_i+0x16c>
 800cfa6:	0018      	movs	r0, r3
 800cfa8:	e7ba      	b.n	800cf20 <_printf_i+0x16c>
 800cfaa:	0022      	movs	r2, r4
 800cfac:	2301      	movs	r3, #1
 800cfae:	9906      	ldr	r1, [sp, #24]
 800cfb0:	9805      	ldr	r0, [sp, #20]
 800cfb2:	9e07      	ldr	r6, [sp, #28]
 800cfb4:	3219      	adds	r2, #25
 800cfb6:	47b0      	blx	r6
 800cfb8:	1c43      	adds	r3, r0, #1
 800cfba:	d0af      	beq.n	800cf1c <_printf_i+0x168>
 800cfbc:	3501      	adds	r5, #1
 800cfbe:	68e3      	ldr	r3, [r4, #12]
 800cfc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfc2:	1a9b      	subs	r3, r3, r2
 800cfc4:	42ab      	cmp	r3, r5
 800cfc6:	dcf0      	bgt.n	800cfaa <_printf_i+0x1f6>
 800cfc8:	e7e9      	b.n	800cf9e <_printf_i+0x1ea>
 800cfca:	2500      	movs	r5, #0
 800cfcc:	e7f7      	b.n	800cfbe <_printf_i+0x20a>
 800cfce:	46c0      	nop			; (mov r8, r8)
 800cfd0:	0801220a 	.word	0x0801220a
 800cfd4:	0801221b 	.word	0x0801221b

0800cfd8 <siprintf>:
 800cfd8:	b40e      	push	{r1, r2, r3}
 800cfda:	b500      	push	{lr}
 800cfdc:	490b      	ldr	r1, [pc, #44]	; (800d00c <siprintf+0x34>)
 800cfde:	b09c      	sub	sp, #112	; 0x70
 800cfe0:	ab1d      	add	r3, sp, #116	; 0x74
 800cfe2:	9002      	str	r0, [sp, #8]
 800cfe4:	9006      	str	r0, [sp, #24]
 800cfe6:	9107      	str	r1, [sp, #28]
 800cfe8:	9104      	str	r1, [sp, #16]
 800cfea:	4809      	ldr	r0, [pc, #36]	; (800d010 <siprintf+0x38>)
 800cfec:	4909      	ldr	r1, [pc, #36]	; (800d014 <siprintf+0x3c>)
 800cfee:	cb04      	ldmia	r3!, {r2}
 800cff0:	9105      	str	r1, [sp, #20]
 800cff2:	6800      	ldr	r0, [r0, #0]
 800cff4:	a902      	add	r1, sp, #8
 800cff6:	9301      	str	r3, [sp, #4]
 800cff8:	f001 fb88 	bl	800e70c <_svfiprintf_r>
 800cffc:	2300      	movs	r3, #0
 800cffe:	9a02      	ldr	r2, [sp, #8]
 800d000:	7013      	strb	r3, [r2, #0]
 800d002:	b01c      	add	sp, #112	; 0x70
 800d004:	bc08      	pop	{r3}
 800d006:	b003      	add	sp, #12
 800d008:	4718      	bx	r3
 800d00a:	46c0      	nop			; (mov r8, r8)
 800d00c:	7fffffff 	.word	0x7fffffff
 800d010:	20000010 	.word	0x20000010
 800d014:	ffff0208 	.word	0xffff0208

0800d018 <quorem>:
 800d018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d01a:	0006      	movs	r6, r0
 800d01c:	690d      	ldr	r5, [r1, #16]
 800d01e:	6933      	ldr	r3, [r6, #16]
 800d020:	b087      	sub	sp, #28
 800d022:	2000      	movs	r0, #0
 800d024:	9102      	str	r1, [sp, #8]
 800d026:	42ab      	cmp	r3, r5
 800d028:	db6b      	blt.n	800d102 <quorem+0xea>
 800d02a:	000b      	movs	r3, r1
 800d02c:	3d01      	subs	r5, #1
 800d02e:	00ac      	lsls	r4, r5, #2
 800d030:	3314      	adds	r3, #20
 800d032:	9305      	str	r3, [sp, #20]
 800d034:	191b      	adds	r3, r3, r4
 800d036:	9303      	str	r3, [sp, #12]
 800d038:	0033      	movs	r3, r6
 800d03a:	3314      	adds	r3, #20
 800d03c:	9301      	str	r3, [sp, #4]
 800d03e:	191c      	adds	r4, r3, r4
 800d040:	9b03      	ldr	r3, [sp, #12]
 800d042:	6827      	ldr	r7, [r4, #0]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	0038      	movs	r0, r7
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	3301      	adds	r3, #1
 800d04c:	0019      	movs	r1, r3
 800d04e:	9304      	str	r3, [sp, #16]
 800d050:	f7f3 f872 	bl	8000138 <__udivsi3>
 800d054:	9b04      	ldr	r3, [sp, #16]
 800d056:	9000      	str	r0, [sp, #0]
 800d058:	429f      	cmp	r7, r3
 800d05a:	d329      	bcc.n	800d0b0 <quorem+0x98>
 800d05c:	2300      	movs	r3, #0
 800d05e:	469c      	mov	ip, r3
 800d060:	9801      	ldr	r0, [sp, #4]
 800d062:	9f05      	ldr	r7, [sp, #20]
 800d064:	9304      	str	r3, [sp, #16]
 800d066:	cf08      	ldmia	r7!, {r3}
 800d068:	9a00      	ldr	r2, [sp, #0]
 800d06a:	b299      	uxth	r1, r3
 800d06c:	4351      	muls	r1, r2
 800d06e:	0c1b      	lsrs	r3, r3, #16
 800d070:	4353      	muls	r3, r2
 800d072:	4461      	add	r1, ip
 800d074:	0c0a      	lsrs	r2, r1, #16
 800d076:	189b      	adds	r3, r3, r2
 800d078:	0c1a      	lsrs	r2, r3, #16
 800d07a:	9305      	str	r3, [sp, #20]
 800d07c:	6803      	ldr	r3, [r0, #0]
 800d07e:	4694      	mov	ip, r2
 800d080:	b29a      	uxth	r2, r3
 800d082:	9b04      	ldr	r3, [sp, #16]
 800d084:	b289      	uxth	r1, r1
 800d086:	18d2      	adds	r2, r2, r3
 800d088:	6803      	ldr	r3, [r0, #0]
 800d08a:	1a52      	subs	r2, r2, r1
 800d08c:	0c19      	lsrs	r1, r3, #16
 800d08e:	466b      	mov	r3, sp
 800d090:	8a9b      	ldrh	r3, [r3, #20]
 800d092:	1acb      	subs	r3, r1, r3
 800d094:	1411      	asrs	r1, r2, #16
 800d096:	185b      	adds	r3, r3, r1
 800d098:	1419      	asrs	r1, r3, #16
 800d09a:	b292      	uxth	r2, r2
 800d09c:	041b      	lsls	r3, r3, #16
 800d09e:	431a      	orrs	r2, r3
 800d0a0:	9b03      	ldr	r3, [sp, #12]
 800d0a2:	9104      	str	r1, [sp, #16]
 800d0a4:	c004      	stmia	r0!, {r2}
 800d0a6:	42bb      	cmp	r3, r7
 800d0a8:	d2dd      	bcs.n	800d066 <quorem+0x4e>
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d02e      	beq.n	800d10e <quorem+0xf6>
 800d0b0:	0030      	movs	r0, r6
 800d0b2:	9902      	ldr	r1, [sp, #8]
 800d0b4:	f001 f8fa 	bl	800e2ac <__mcmp>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	db21      	blt.n	800d100 <quorem+0xe8>
 800d0bc:	0030      	movs	r0, r6
 800d0be:	2400      	movs	r4, #0
 800d0c0:	9b00      	ldr	r3, [sp, #0]
 800d0c2:	9902      	ldr	r1, [sp, #8]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	3014      	adds	r0, #20
 800d0ca:	3114      	adds	r1, #20
 800d0cc:	6802      	ldr	r2, [r0, #0]
 800d0ce:	c908      	ldmia	r1!, {r3}
 800d0d0:	b292      	uxth	r2, r2
 800d0d2:	1914      	adds	r4, r2, r4
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	1aa2      	subs	r2, r4, r2
 800d0d8:	6804      	ldr	r4, [r0, #0]
 800d0da:	0c1b      	lsrs	r3, r3, #16
 800d0dc:	0c24      	lsrs	r4, r4, #16
 800d0de:	1ae3      	subs	r3, r4, r3
 800d0e0:	1414      	asrs	r4, r2, #16
 800d0e2:	191b      	adds	r3, r3, r4
 800d0e4:	141c      	asrs	r4, r3, #16
 800d0e6:	b292      	uxth	r2, r2
 800d0e8:	041b      	lsls	r3, r3, #16
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	c008      	stmia	r0!, {r3}
 800d0ee:	9b03      	ldr	r3, [sp, #12]
 800d0f0:	428b      	cmp	r3, r1
 800d0f2:	d2eb      	bcs.n	800d0cc <quorem+0xb4>
 800d0f4:	9a01      	ldr	r2, [sp, #4]
 800d0f6:	00ab      	lsls	r3, r5, #2
 800d0f8:	18d3      	adds	r3, r2, r3
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	2a00      	cmp	r2, #0
 800d0fe:	d010      	beq.n	800d122 <quorem+0x10a>
 800d100:	9800      	ldr	r0, [sp, #0]
 800d102:	b007      	add	sp, #28
 800d104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d104      	bne.n	800d116 <quorem+0xfe>
 800d10c:	3d01      	subs	r5, #1
 800d10e:	9b01      	ldr	r3, [sp, #4]
 800d110:	3c04      	subs	r4, #4
 800d112:	42a3      	cmp	r3, r4
 800d114:	d3f7      	bcc.n	800d106 <quorem+0xee>
 800d116:	6135      	str	r5, [r6, #16]
 800d118:	e7ca      	b.n	800d0b0 <quorem+0x98>
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	2a00      	cmp	r2, #0
 800d11e:	d104      	bne.n	800d12a <quorem+0x112>
 800d120:	3d01      	subs	r5, #1
 800d122:	9a01      	ldr	r2, [sp, #4]
 800d124:	3b04      	subs	r3, #4
 800d126:	429a      	cmp	r2, r3
 800d128:	d3f7      	bcc.n	800d11a <quorem+0x102>
 800d12a:	6135      	str	r5, [r6, #16]
 800d12c:	e7e8      	b.n	800d100 <quorem+0xe8>
	...

0800d130 <_dtoa_r>:
 800d130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d132:	b09d      	sub	sp, #116	; 0x74
 800d134:	9202      	str	r2, [sp, #8]
 800d136:	9303      	str	r3, [sp, #12]
 800d138:	9b02      	ldr	r3, [sp, #8]
 800d13a:	9c03      	ldr	r4, [sp, #12]
 800d13c:	930a      	str	r3, [sp, #40]	; 0x28
 800d13e:	940b      	str	r4, [sp, #44]	; 0x2c
 800d140:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d142:	0007      	movs	r7, r0
 800d144:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800d146:	2c00      	cmp	r4, #0
 800d148:	d10e      	bne.n	800d168 <_dtoa_r+0x38>
 800d14a:	2010      	movs	r0, #16
 800d14c:	f000 fe12 	bl	800dd74 <malloc>
 800d150:	1e02      	subs	r2, r0, #0
 800d152:	6278      	str	r0, [r7, #36]	; 0x24
 800d154:	d104      	bne.n	800d160 <_dtoa_r+0x30>
 800d156:	21ea      	movs	r1, #234	; 0xea
 800d158:	4bc0      	ldr	r3, [pc, #768]	; (800d45c <_dtoa_r+0x32c>)
 800d15a:	48c1      	ldr	r0, [pc, #772]	; (800d460 <_dtoa_r+0x330>)
 800d15c:	f001 fbe8 	bl	800e930 <__assert_func>
 800d160:	6044      	str	r4, [r0, #4]
 800d162:	6084      	str	r4, [r0, #8]
 800d164:	6004      	str	r4, [r0, #0]
 800d166:	60c4      	str	r4, [r0, #12]
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	6819      	ldr	r1, [r3, #0]
 800d16c:	2900      	cmp	r1, #0
 800d16e:	d00a      	beq.n	800d186 <_dtoa_r+0x56>
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	2301      	movs	r3, #1
 800d174:	4093      	lsls	r3, r2
 800d176:	604a      	str	r2, [r1, #4]
 800d178:	608b      	str	r3, [r1, #8]
 800d17a:	0038      	movs	r0, r7
 800d17c:	f000 fe54 	bl	800de28 <_Bfree>
 800d180:	2200      	movs	r2, #0
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	601a      	str	r2, [r3, #0]
 800d186:	9b03      	ldr	r3, [sp, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	da21      	bge.n	800d1d0 <_dtoa_r+0xa0>
 800d18c:	2301      	movs	r3, #1
 800d18e:	602b      	str	r3, [r5, #0]
 800d190:	9b03      	ldr	r3, [sp, #12]
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	085b      	lsrs	r3, r3, #1
 800d196:	930b      	str	r3, [sp, #44]	; 0x2c
 800d198:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d19a:	4bb2      	ldr	r3, [pc, #712]	; (800d464 <_dtoa_r+0x334>)
 800d19c:	002a      	movs	r2, r5
 800d19e:	9318      	str	r3, [sp, #96]	; 0x60
 800d1a0:	401a      	ands	r2, r3
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d117      	bne.n	800d1d6 <_dtoa_r+0xa6>
 800d1a6:	4bb0      	ldr	r3, [pc, #704]	; (800d468 <_dtoa_r+0x338>)
 800d1a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d1aa:	0328      	lsls	r0, r5, #12
 800d1ac:	6013      	str	r3, [r2, #0]
 800d1ae:	9b02      	ldr	r3, [sp, #8]
 800d1b0:	0b00      	lsrs	r0, r0, #12
 800d1b2:	4318      	orrs	r0, r3
 800d1b4:	d101      	bne.n	800d1ba <_dtoa_r+0x8a>
 800d1b6:	f000 fdc3 	bl	800dd40 <_dtoa_r+0xc10>
 800d1ba:	48ac      	ldr	r0, [pc, #688]	; (800d46c <_dtoa_r+0x33c>)
 800d1bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d1be:	9005      	str	r0, [sp, #20]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d002      	beq.n	800d1ca <_dtoa_r+0x9a>
 800d1c4:	4baa      	ldr	r3, [pc, #680]	; (800d470 <_dtoa_r+0x340>)
 800d1c6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d1c8:	6013      	str	r3, [r2, #0]
 800d1ca:	9805      	ldr	r0, [sp, #20]
 800d1cc:	b01d      	add	sp, #116	; 0x74
 800d1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	602b      	str	r3, [r5, #0]
 800d1d4:	e7e0      	b.n	800d198 <_dtoa_r+0x68>
 800d1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d1da:	9312      	str	r3, [sp, #72]	; 0x48
 800d1dc:	9413      	str	r4, [sp, #76]	; 0x4c
 800d1de:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d1e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f7f3 f92d 	bl	8000444 <__aeabi_dcmpeq>
 800d1ea:	1e04      	subs	r4, r0, #0
 800d1ec:	d00b      	beq.n	800d206 <_dtoa_r+0xd6>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d1f2:	6013      	str	r3, [r2, #0]
 800d1f4:	4b9f      	ldr	r3, [pc, #636]	; (800d474 <_dtoa_r+0x344>)
 800d1f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d1f8:	9305      	str	r3, [sp, #20]
 800d1fa:	2a00      	cmp	r2, #0
 800d1fc:	d0e5      	beq.n	800d1ca <_dtoa_r+0x9a>
 800d1fe:	4a9e      	ldr	r2, [pc, #632]	; (800d478 <_dtoa_r+0x348>)
 800d200:	9926      	ldr	r1, [sp, #152]	; 0x98
 800d202:	600a      	str	r2, [r1, #0]
 800d204:	e7e1      	b.n	800d1ca <_dtoa_r+0x9a>
 800d206:	ab1a      	add	r3, sp, #104	; 0x68
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	ab1b      	add	r3, sp, #108	; 0x6c
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	0038      	movs	r0, r7
 800d210:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d212:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d214:	f001 f8fe 	bl	800e414 <__d2b>
 800d218:	006e      	lsls	r6, r5, #1
 800d21a:	9004      	str	r0, [sp, #16]
 800d21c:	0d76      	lsrs	r6, r6, #21
 800d21e:	d100      	bne.n	800d222 <_dtoa_r+0xf2>
 800d220:	e07c      	b.n	800d31c <_dtoa_r+0x1ec>
 800d222:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d224:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d226:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d228:	4a94      	ldr	r2, [pc, #592]	; (800d47c <_dtoa_r+0x34c>)
 800d22a:	031b      	lsls	r3, r3, #12
 800d22c:	0b1b      	lsrs	r3, r3, #12
 800d22e:	431a      	orrs	r2, r3
 800d230:	0011      	movs	r1, r2
 800d232:	4b93      	ldr	r3, [pc, #588]	; (800d480 <_dtoa_r+0x350>)
 800d234:	9416      	str	r4, [sp, #88]	; 0x58
 800d236:	18f6      	adds	r6, r6, r3
 800d238:	2200      	movs	r2, #0
 800d23a:	4b92      	ldr	r3, [pc, #584]	; (800d484 <_dtoa_r+0x354>)
 800d23c:	f7f5 fa0c 	bl	8002658 <__aeabi_dsub>
 800d240:	4a91      	ldr	r2, [pc, #580]	; (800d488 <_dtoa_r+0x358>)
 800d242:	4b92      	ldr	r3, [pc, #584]	; (800d48c <_dtoa_r+0x35c>)
 800d244:	f7f4 ff9c 	bl	8002180 <__aeabi_dmul>
 800d248:	4a91      	ldr	r2, [pc, #580]	; (800d490 <_dtoa_r+0x360>)
 800d24a:	4b92      	ldr	r3, [pc, #584]	; (800d494 <_dtoa_r+0x364>)
 800d24c:	f7f4 f828 	bl	80012a0 <__aeabi_dadd>
 800d250:	0004      	movs	r4, r0
 800d252:	0030      	movs	r0, r6
 800d254:	000d      	movs	r5, r1
 800d256:	f7f5 fde5 	bl	8002e24 <__aeabi_i2d>
 800d25a:	4a8f      	ldr	r2, [pc, #572]	; (800d498 <_dtoa_r+0x368>)
 800d25c:	4b8f      	ldr	r3, [pc, #572]	; (800d49c <_dtoa_r+0x36c>)
 800d25e:	f7f4 ff8f 	bl	8002180 <__aeabi_dmul>
 800d262:	0002      	movs	r2, r0
 800d264:	000b      	movs	r3, r1
 800d266:	0020      	movs	r0, r4
 800d268:	0029      	movs	r1, r5
 800d26a:	f7f4 f819 	bl	80012a0 <__aeabi_dadd>
 800d26e:	0004      	movs	r4, r0
 800d270:	000d      	movs	r5, r1
 800d272:	f7f5 fda1 	bl	8002db8 <__aeabi_d2iz>
 800d276:	2200      	movs	r2, #0
 800d278:	9002      	str	r0, [sp, #8]
 800d27a:	2300      	movs	r3, #0
 800d27c:	0020      	movs	r0, r4
 800d27e:	0029      	movs	r1, r5
 800d280:	f7f3 f8e6 	bl	8000450 <__aeabi_dcmplt>
 800d284:	2800      	cmp	r0, #0
 800d286:	d00b      	beq.n	800d2a0 <_dtoa_r+0x170>
 800d288:	9802      	ldr	r0, [sp, #8]
 800d28a:	f7f5 fdcb 	bl	8002e24 <__aeabi_i2d>
 800d28e:	002b      	movs	r3, r5
 800d290:	0022      	movs	r2, r4
 800d292:	f7f3 f8d7 	bl	8000444 <__aeabi_dcmpeq>
 800d296:	4243      	negs	r3, r0
 800d298:	4158      	adcs	r0, r3
 800d29a:	9b02      	ldr	r3, [sp, #8]
 800d29c:	1a1b      	subs	r3, r3, r0
 800d29e:	9302      	str	r3, [sp, #8]
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	9315      	str	r3, [sp, #84]	; 0x54
 800d2a4:	9b02      	ldr	r3, [sp, #8]
 800d2a6:	2b16      	cmp	r3, #22
 800d2a8:	d80f      	bhi.n	800d2ca <_dtoa_r+0x19a>
 800d2aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d2ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d2ae:	00da      	lsls	r2, r3, #3
 800d2b0:	4b7b      	ldr	r3, [pc, #492]	; (800d4a0 <_dtoa_r+0x370>)
 800d2b2:	189b      	adds	r3, r3, r2
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	f7f3 f8ca 	bl	8000450 <__aeabi_dcmplt>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d049      	beq.n	800d354 <_dtoa_r+0x224>
 800d2c0:	9b02      	ldr	r3, [sp, #8]
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	9302      	str	r3, [sp, #8]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	9315      	str	r3, [sp, #84]	; 0x54
 800d2ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d2cc:	1b9e      	subs	r6, r3, r6
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	9308      	str	r3, [sp, #32]
 800d2d2:	0033      	movs	r3, r6
 800d2d4:	3b01      	subs	r3, #1
 800d2d6:	930d      	str	r3, [sp, #52]	; 0x34
 800d2d8:	d504      	bpl.n	800d2e4 <_dtoa_r+0x1b4>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	1b9b      	subs	r3, r3, r6
 800d2de:	9308      	str	r3, [sp, #32]
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	930d      	str	r3, [sp, #52]	; 0x34
 800d2e4:	9b02      	ldr	r3, [sp, #8]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	db36      	blt.n	800d358 <_dtoa_r+0x228>
 800d2ea:	9a02      	ldr	r2, [sp, #8]
 800d2ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2ee:	4694      	mov	ip, r2
 800d2f0:	4463      	add	r3, ip
 800d2f2:	930d      	str	r3, [sp, #52]	; 0x34
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	9214      	str	r2, [sp, #80]	; 0x50
 800d2f8:	930e      	str	r3, [sp, #56]	; 0x38
 800d2fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2fc:	2401      	movs	r4, #1
 800d2fe:	2b09      	cmp	r3, #9
 800d300:	d862      	bhi.n	800d3c8 <_dtoa_r+0x298>
 800d302:	2b05      	cmp	r3, #5
 800d304:	dd02      	ble.n	800d30c <_dtoa_r+0x1dc>
 800d306:	2400      	movs	r4, #0
 800d308:	3b04      	subs	r3, #4
 800d30a:	9322      	str	r3, [sp, #136]	; 0x88
 800d30c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d30e:	1e98      	subs	r0, r3, #2
 800d310:	2803      	cmp	r0, #3
 800d312:	d862      	bhi.n	800d3da <_dtoa_r+0x2aa>
 800d314:	f7f2 fefc 	bl	8000110 <__gnu_thumb1_case_uqi>
 800d318:	56343629 	.word	0x56343629
 800d31c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d31e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d320:	189e      	adds	r6, r3, r2
 800d322:	4b60      	ldr	r3, [pc, #384]	; (800d4a4 <_dtoa_r+0x374>)
 800d324:	18f2      	adds	r2, r6, r3
 800d326:	2a20      	cmp	r2, #32
 800d328:	dd0f      	ble.n	800d34a <_dtoa_r+0x21a>
 800d32a:	2340      	movs	r3, #64	; 0x40
 800d32c:	1a9b      	subs	r3, r3, r2
 800d32e:	409d      	lsls	r5, r3
 800d330:	4b5d      	ldr	r3, [pc, #372]	; (800d4a8 <_dtoa_r+0x378>)
 800d332:	9802      	ldr	r0, [sp, #8]
 800d334:	18f3      	adds	r3, r6, r3
 800d336:	40d8      	lsrs	r0, r3
 800d338:	4328      	orrs	r0, r5
 800d33a:	f7f5 fda3 	bl	8002e84 <__aeabi_ui2d>
 800d33e:	2301      	movs	r3, #1
 800d340:	4c5a      	ldr	r4, [pc, #360]	; (800d4ac <_dtoa_r+0x37c>)
 800d342:	3e01      	subs	r6, #1
 800d344:	1909      	adds	r1, r1, r4
 800d346:	9316      	str	r3, [sp, #88]	; 0x58
 800d348:	e776      	b.n	800d238 <_dtoa_r+0x108>
 800d34a:	2320      	movs	r3, #32
 800d34c:	9802      	ldr	r0, [sp, #8]
 800d34e:	1a9b      	subs	r3, r3, r2
 800d350:	4098      	lsls	r0, r3
 800d352:	e7f2      	b.n	800d33a <_dtoa_r+0x20a>
 800d354:	9015      	str	r0, [sp, #84]	; 0x54
 800d356:	e7b8      	b.n	800d2ca <_dtoa_r+0x19a>
 800d358:	9b08      	ldr	r3, [sp, #32]
 800d35a:	9a02      	ldr	r2, [sp, #8]
 800d35c:	1a9b      	subs	r3, r3, r2
 800d35e:	9308      	str	r3, [sp, #32]
 800d360:	4253      	negs	r3, r2
 800d362:	930e      	str	r3, [sp, #56]	; 0x38
 800d364:	2300      	movs	r3, #0
 800d366:	9314      	str	r3, [sp, #80]	; 0x50
 800d368:	e7c7      	b.n	800d2fa <_dtoa_r+0x1ca>
 800d36a:	2300      	movs	r3, #0
 800d36c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d36e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d370:	2b00      	cmp	r3, #0
 800d372:	dc36      	bgt.n	800d3e2 <_dtoa_r+0x2b2>
 800d374:	2301      	movs	r3, #1
 800d376:	001a      	movs	r2, r3
 800d378:	930c      	str	r3, [sp, #48]	; 0x30
 800d37a:	9306      	str	r3, [sp, #24]
 800d37c:	9223      	str	r2, [sp, #140]	; 0x8c
 800d37e:	e00d      	b.n	800d39c <_dtoa_r+0x26c>
 800d380:	2301      	movs	r3, #1
 800d382:	e7f3      	b.n	800d36c <_dtoa_r+0x23c>
 800d384:	2300      	movs	r3, #0
 800d386:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d388:	930f      	str	r3, [sp, #60]	; 0x3c
 800d38a:	4694      	mov	ip, r2
 800d38c:	9b02      	ldr	r3, [sp, #8]
 800d38e:	4463      	add	r3, ip
 800d390:	930c      	str	r3, [sp, #48]	; 0x30
 800d392:	3301      	adds	r3, #1
 800d394:	9306      	str	r3, [sp, #24]
 800d396:	2b00      	cmp	r3, #0
 800d398:	dc00      	bgt.n	800d39c <_dtoa_r+0x26c>
 800d39a:	2301      	movs	r3, #1
 800d39c:	2200      	movs	r2, #0
 800d39e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3a0:	6042      	str	r2, [r0, #4]
 800d3a2:	3204      	adds	r2, #4
 800d3a4:	0015      	movs	r5, r2
 800d3a6:	3514      	adds	r5, #20
 800d3a8:	6841      	ldr	r1, [r0, #4]
 800d3aa:	429d      	cmp	r5, r3
 800d3ac:	d91d      	bls.n	800d3ea <_dtoa_r+0x2ba>
 800d3ae:	0038      	movs	r0, r7
 800d3b0:	f000 fcf6 	bl	800dda0 <_Balloc>
 800d3b4:	9005      	str	r0, [sp, #20]
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d11b      	bne.n	800d3f2 <_dtoa_r+0x2c2>
 800d3ba:	21d5      	movs	r1, #213	; 0xd5
 800d3bc:	0002      	movs	r2, r0
 800d3be:	4b3c      	ldr	r3, [pc, #240]	; (800d4b0 <_dtoa_r+0x380>)
 800d3c0:	0049      	lsls	r1, r1, #1
 800d3c2:	e6ca      	b.n	800d15a <_dtoa_r+0x2a>
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	e7de      	b.n	800d386 <_dtoa_r+0x256>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	940f      	str	r4, [sp, #60]	; 0x3c
 800d3cc:	9322      	str	r3, [sp, #136]	; 0x88
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	930c      	str	r3, [sp, #48]	; 0x30
 800d3d2:	9306      	str	r3, [sp, #24]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	3313      	adds	r3, #19
 800d3d8:	e7d0      	b.n	800d37c <_dtoa_r+0x24c>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3de:	3b02      	subs	r3, #2
 800d3e0:	e7f6      	b.n	800d3d0 <_dtoa_r+0x2a0>
 800d3e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d3e4:	930c      	str	r3, [sp, #48]	; 0x30
 800d3e6:	9306      	str	r3, [sp, #24]
 800d3e8:	e7d8      	b.n	800d39c <_dtoa_r+0x26c>
 800d3ea:	3101      	adds	r1, #1
 800d3ec:	6041      	str	r1, [r0, #4]
 800d3ee:	0052      	lsls	r2, r2, #1
 800d3f0:	e7d8      	b.n	800d3a4 <_dtoa_r+0x274>
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	9a05      	ldr	r2, [sp, #20]
 800d3f6:	601a      	str	r2, [r3, #0]
 800d3f8:	9b06      	ldr	r3, [sp, #24]
 800d3fa:	2b0e      	cmp	r3, #14
 800d3fc:	d900      	bls.n	800d400 <_dtoa_r+0x2d0>
 800d3fe:	e0eb      	b.n	800d5d8 <_dtoa_r+0x4a8>
 800d400:	2c00      	cmp	r4, #0
 800d402:	d100      	bne.n	800d406 <_dtoa_r+0x2d6>
 800d404:	e0e8      	b.n	800d5d8 <_dtoa_r+0x4a8>
 800d406:	9b02      	ldr	r3, [sp, #8]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	dd68      	ble.n	800d4de <_dtoa_r+0x3ae>
 800d40c:	001a      	movs	r2, r3
 800d40e:	210f      	movs	r1, #15
 800d410:	4b23      	ldr	r3, [pc, #140]	; (800d4a0 <_dtoa_r+0x370>)
 800d412:	400a      	ands	r2, r1
 800d414:	00d2      	lsls	r2, r2, #3
 800d416:	189b      	adds	r3, r3, r2
 800d418:	681d      	ldr	r5, [r3, #0]
 800d41a:	685e      	ldr	r6, [r3, #4]
 800d41c:	9b02      	ldr	r3, [sp, #8]
 800d41e:	111c      	asrs	r4, r3, #4
 800d420:	2302      	movs	r3, #2
 800d422:	9310      	str	r3, [sp, #64]	; 0x40
 800d424:	9b02      	ldr	r3, [sp, #8]
 800d426:	05db      	lsls	r3, r3, #23
 800d428:	d50b      	bpl.n	800d442 <_dtoa_r+0x312>
 800d42a:	4b22      	ldr	r3, [pc, #136]	; (800d4b4 <_dtoa_r+0x384>)
 800d42c:	400c      	ands	r4, r1
 800d42e:	6a1a      	ldr	r2, [r3, #32]
 800d430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d432:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d434:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d436:	f7f4 fa9d 	bl	8001974 <__aeabi_ddiv>
 800d43a:	2303      	movs	r3, #3
 800d43c:	900a      	str	r0, [sp, #40]	; 0x28
 800d43e:	910b      	str	r1, [sp, #44]	; 0x2c
 800d440:	9310      	str	r3, [sp, #64]	; 0x40
 800d442:	4b1c      	ldr	r3, [pc, #112]	; (800d4b4 <_dtoa_r+0x384>)
 800d444:	9307      	str	r3, [sp, #28]
 800d446:	2c00      	cmp	r4, #0
 800d448:	d136      	bne.n	800d4b8 <_dtoa_r+0x388>
 800d44a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d44c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d44e:	002a      	movs	r2, r5
 800d450:	0033      	movs	r3, r6
 800d452:	f7f4 fa8f 	bl	8001974 <__aeabi_ddiv>
 800d456:	900a      	str	r0, [sp, #40]	; 0x28
 800d458:	910b      	str	r1, [sp, #44]	; 0x2c
 800d45a:	e05c      	b.n	800d516 <_dtoa_r+0x3e6>
 800d45c:	08012239 	.word	0x08012239
 800d460:	08012250 	.word	0x08012250
 800d464:	7ff00000 	.word	0x7ff00000
 800d468:	0000270f 	.word	0x0000270f
 800d46c:	08012235 	.word	0x08012235
 800d470:	08012238 	.word	0x08012238
 800d474:	08012208 	.word	0x08012208
 800d478:	08012209 	.word	0x08012209
 800d47c:	3ff00000 	.word	0x3ff00000
 800d480:	fffffc01 	.word	0xfffffc01
 800d484:	3ff80000 	.word	0x3ff80000
 800d488:	636f4361 	.word	0x636f4361
 800d48c:	3fd287a7 	.word	0x3fd287a7
 800d490:	8b60c8b3 	.word	0x8b60c8b3
 800d494:	3fc68a28 	.word	0x3fc68a28
 800d498:	509f79fb 	.word	0x509f79fb
 800d49c:	3fd34413 	.word	0x3fd34413
 800d4a0:	08012348 	.word	0x08012348
 800d4a4:	00000432 	.word	0x00000432
 800d4a8:	00000412 	.word	0x00000412
 800d4ac:	fe100000 	.word	0xfe100000
 800d4b0:	080122af 	.word	0x080122af
 800d4b4:	08012320 	.word	0x08012320
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	421c      	tst	r4, r3
 800d4bc:	d00b      	beq.n	800d4d6 <_dtoa_r+0x3a6>
 800d4be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d4c0:	0028      	movs	r0, r5
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	9310      	str	r3, [sp, #64]	; 0x40
 800d4c6:	9b07      	ldr	r3, [sp, #28]
 800d4c8:	0031      	movs	r1, r6
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	f7f4 fe57 	bl	8002180 <__aeabi_dmul>
 800d4d2:	0005      	movs	r5, r0
 800d4d4:	000e      	movs	r6, r1
 800d4d6:	9b07      	ldr	r3, [sp, #28]
 800d4d8:	1064      	asrs	r4, r4, #1
 800d4da:	3308      	adds	r3, #8
 800d4dc:	e7b2      	b.n	800d444 <_dtoa_r+0x314>
 800d4de:	2302      	movs	r3, #2
 800d4e0:	9310      	str	r3, [sp, #64]	; 0x40
 800d4e2:	9b02      	ldr	r3, [sp, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d016      	beq.n	800d516 <_dtoa_r+0x3e6>
 800d4e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d4ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d4ec:	425c      	negs	r4, r3
 800d4ee:	230f      	movs	r3, #15
 800d4f0:	4ab5      	ldr	r2, [pc, #724]	; (800d7c8 <_dtoa_r+0x698>)
 800d4f2:	4023      	ands	r3, r4
 800d4f4:	00db      	lsls	r3, r3, #3
 800d4f6:	18d3      	adds	r3, r2, r3
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	f7f4 fe40 	bl	8002180 <__aeabi_dmul>
 800d500:	2601      	movs	r6, #1
 800d502:	2300      	movs	r3, #0
 800d504:	900a      	str	r0, [sp, #40]	; 0x28
 800d506:	910b      	str	r1, [sp, #44]	; 0x2c
 800d508:	4db0      	ldr	r5, [pc, #704]	; (800d7cc <_dtoa_r+0x69c>)
 800d50a:	1124      	asrs	r4, r4, #4
 800d50c:	2c00      	cmp	r4, #0
 800d50e:	d000      	beq.n	800d512 <_dtoa_r+0x3e2>
 800d510:	e094      	b.n	800d63c <_dtoa_r+0x50c>
 800d512:	2b00      	cmp	r3, #0
 800d514:	d19f      	bne.n	800d456 <_dtoa_r+0x326>
 800d516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d100      	bne.n	800d51e <_dtoa_r+0x3ee>
 800d51c:	e09b      	b.n	800d656 <_dtoa_r+0x526>
 800d51e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d520:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d522:	2200      	movs	r2, #0
 800d524:	0020      	movs	r0, r4
 800d526:	0029      	movs	r1, r5
 800d528:	4ba9      	ldr	r3, [pc, #676]	; (800d7d0 <_dtoa_r+0x6a0>)
 800d52a:	f7f2 ff91 	bl	8000450 <__aeabi_dcmplt>
 800d52e:	2800      	cmp	r0, #0
 800d530:	d100      	bne.n	800d534 <_dtoa_r+0x404>
 800d532:	e090      	b.n	800d656 <_dtoa_r+0x526>
 800d534:	9b06      	ldr	r3, [sp, #24]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d100      	bne.n	800d53c <_dtoa_r+0x40c>
 800d53a:	e08c      	b.n	800d656 <_dtoa_r+0x526>
 800d53c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d53e:	2b00      	cmp	r3, #0
 800d540:	dd46      	ble.n	800d5d0 <_dtoa_r+0x4a0>
 800d542:	9b02      	ldr	r3, [sp, #8]
 800d544:	2200      	movs	r2, #0
 800d546:	0020      	movs	r0, r4
 800d548:	0029      	movs	r1, r5
 800d54a:	1e5e      	subs	r6, r3, #1
 800d54c:	4ba1      	ldr	r3, [pc, #644]	; (800d7d4 <_dtoa_r+0x6a4>)
 800d54e:	f7f4 fe17 	bl	8002180 <__aeabi_dmul>
 800d552:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d554:	900a      	str	r0, [sp, #40]	; 0x28
 800d556:	910b      	str	r1, [sp, #44]	; 0x2c
 800d558:	3301      	adds	r3, #1
 800d55a:	9310      	str	r3, [sp, #64]	; 0x40
 800d55c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d55e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d560:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d562:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d564:	9307      	str	r3, [sp, #28]
 800d566:	f7f5 fc5d 	bl	8002e24 <__aeabi_i2d>
 800d56a:	0022      	movs	r2, r4
 800d56c:	002b      	movs	r3, r5
 800d56e:	f7f4 fe07 	bl	8002180 <__aeabi_dmul>
 800d572:	2200      	movs	r2, #0
 800d574:	4b98      	ldr	r3, [pc, #608]	; (800d7d8 <_dtoa_r+0x6a8>)
 800d576:	f7f3 fe93 	bl	80012a0 <__aeabi_dadd>
 800d57a:	9010      	str	r0, [sp, #64]	; 0x40
 800d57c:	9111      	str	r1, [sp, #68]	; 0x44
 800d57e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d582:	920a      	str	r2, [sp, #40]	; 0x28
 800d584:	930b      	str	r3, [sp, #44]	; 0x2c
 800d586:	4a95      	ldr	r2, [pc, #596]	; (800d7dc <_dtoa_r+0x6ac>)
 800d588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d58a:	4694      	mov	ip, r2
 800d58c:	4463      	add	r3, ip
 800d58e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d590:	930b      	str	r3, [sp, #44]	; 0x2c
 800d592:	9b07      	ldr	r3, [sp, #28]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d161      	bne.n	800d65c <_dtoa_r+0x52c>
 800d598:	2200      	movs	r2, #0
 800d59a:	0020      	movs	r0, r4
 800d59c:	0029      	movs	r1, r5
 800d59e:	4b90      	ldr	r3, [pc, #576]	; (800d7e0 <_dtoa_r+0x6b0>)
 800d5a0:	f7f5 f85a 	bl	8002658 <__aeabi_dsub>
 800d5a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5a8:	0004      	movs	r4, r0
 800d5aa:	000d      	movs	r5, r1
 800d5ac:	f7f2 ff64 	bl	8000478 <__aeabi_dcmpgt>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d000      	beq.n	800d5b6 <_dtoa_r+0x486>
 800d5b4:	e2b5      	b.n	800db22 <_dtoa_r+0x9f2>
 800d5b6:	488b      	ldr	r0, [pc, #556]	; (800d7e4 <_dtoa_r+0x6b4>)
 800d5b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d5ba:	4684      	mov	ip, r0
 800d5bc:	4461      	add	r1, ip
 800d5be:	000b      	movs	r3, r1
 800d5c0:	0020      	movs	r0, r4
 800d5c2:	0029      	movs	r1, r5
 800d5c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5c6:	f7f2 ff43 	bl	8000450 <__aeabi_dcmplt>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d000      	beq.n	800d5d0 <_dtoa_r+0x4a0>
 800d5ce:	e2a5      	b.n	800db1c <_dtoa_r+0x9ec>
 800d5d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800d5d4:	930a      	str	r3, [sp, #40]	; 0x28
 800d5d6:	940b      	str	r4, [sp, #44]	; 0x2c
 800d5d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	da00      	bge.n	800d5e0 <_dtoa_r+0x4b0>
 800d5de:	e171      	b.n	800d8c4 <_dtoa_r+0x794>
 800d5e0:	9a02      	ldr	r2, [sp, #8]
 800d5e2:	2a0e      	cmp	r2, #14
 800d5e4:	dd00      	ble.n	800d5e8 <_dtoa_r+0x4b8>
 800d5e6:	e16d      	b.n	800d8c4 <_dtoa_r+0x794>
 800d5e8:	4b77      	ldr	r3, [pc, #476]	; (800d7c8 <_dtoa_r+0x698>)
 800d5ea:	00d2      	lsls	r2, r2, #3
 800d5ec:	189b      	adds	r3, r3, r2
 800d5ee:	685c      	ldr	r4, [r3, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	9308      	str	r3, [sp, #32]
 800d5f4:	9409      	str	r4, [sp, #36]	; 0x24
 800d5f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	db00      	blt.n	800d5fe <_dtoa_r+0x4ce>
 800d5fc:	e0f6      	b.n	800d7ec <_dtoa_r+0x6bc>
 800d5fe:	9b06      	ldr	r3, [sp, #24]
 800d600:	2b00      	cmp	r3, #0
 800d602:	dd00      	ble.n	800d606 <_dtoa_r+0x4d6>
 800d604:	e0f2      	b.n	800d7ec <_dtoa_r+0x6bc>
 800d606:	d000      	beq.n	800d60a <_dtoa_r+0x4da>
 800d608:	e288      	b.n	800db1c <_dtoa_r+0x9ec>
 800d60a:	9808      	ldr	r0, [sp, #32]
 800d60c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d60e:	2200      	movs	r2, #0
 800d610:	4b73      	ldr	r3, [pc, #460]	; (800d7e0 <_dtoa_r+0x6b0>)
 800d612:	f7f4 fdb5 	bl	8002180 <__aeabi_dmul>
 800d616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d61a:	f7f2 ff37 	bl	800048c <__aeabi_dcmpge>
 800d61e:	9e06      	ldr	r6, [sp, #24]
 800d620:	0035      	movs	r5, r6
 800d622:	2800      	cmp	r0, #0
 800d624:	d000      	beq.n	800d628 <_dtoa_r+0x4f8>
 800d626:	e25f      	b.n	800dae8 <_dtoa_r+0x9b8>
 800d628:	9b05      	ldr	r3, [sp, #20]
 800d62a:	9a05      	ldr	r2, [sp, #20]
 800d62c:	3301      	adds	r3, #1
 800d62e:	9307      	str	r3, [sp, #28]
 800d630:	2331      	movs	r3, #49	; 0x31
 800d632:	7013      	strb	r3, [r2, #0]
 800d634:	9b02      	ldr	r3, [sp, #8]
 800d636:	3301      	adds	r3, #1
 800d638:	9302      	str	r3, [sp, #8]
 800d63a:	e25a      	b.n	800daf2 <_dtoa_r+0x9c2>
 800d63c:	4234      	tst	r4, r6
 800d63e:	d007      	beq.n	800d650 <_dtoa_r+0x520>
 800d640:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d642:	3301      	adds	r3, #1
 800d644:	9310      	str	r3, [sp, #64]	; 0x40
 800d646:	682a      	ldr	r2, [r5, #0]
 800d648:	686b      	ldr	r3, [r5, #4]
 800d64a:	f7f4 fd99 	bl	8002180 <__aeabi_dmul>
 800d64e:	0033      	movs	r3, r6
 800d650:	1064      	asrs	r4, r4, #1
 800d652:	3508      	adds	r5, #8
 800d654:	e75a      	b.n	800d50c <_dtoa_r+0x3dc>
 800d656:	9e02      	ldr	r6, [sp, #8]
 800d658:	9b06      	ldr	r3, [sp, #24]
 800d65a:	e780      	b.n	800d55e <_dtoa_r+0x42e>
 800d65c:	9b07      	ldr	r3, [sp, #28]
 800d65e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d660:	1e5a      	subs	r2, r3, #1
 800d662:	4b59      	ldr	r3, [pc, #356]	; (800d7c8 <_dtoa_r+0x698>)
 800d664:	00d2      	lsls	r2, r2, #3
 800d666:	189b      	adds	r3, r3, r2
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	2900      	cmp	r1, #0
 800d66e:	d051      	beq.n	800d714 <_dtoa_r+0x5e4>
 800d670:	2000      	movs	r0, #0
 800d672:	495d      	ldr	r1, [pc, #372]	; (800d7e8 <_dtoa_r+0x6b8>)
 800d674:	f7f4 f97e 	bl	8001974 <__aeabi_ddiv>
 800d678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d67c:	f7f4 ffec 	bl	8002658 <__aeabi_dsub>
 800d680:	9a05      	ldr	r2, [sp, #20]
 800d682:	9b05      	ldr	r3, [sp, #20]
 800d684:	4694      	mov	ip, r2
 800d686:	9310      	str	r3, [sp, #64]	; 0x40
 800d688:	9b07      	ldr	r3, [sp, #28]
 800d68a:	900a      	str	r0, [sp, #40]	; 0x28
 800d68c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d68e:	4463      	add	r3, ip
 800d690:	9319      	str	r3, [sp, #100]	; 0x64
 800d692:	0029      	movs	r1, r5
 800d694:	0020      	movs	r0, r4
 800d696:	f7f5 fb8f 	bl	8002db8 <__aeabi_d2iz>
 800d69a:	9017      	str	r0, [sp, #92]	; 0x5c
 800d69c:	f7f5 fbc2 	bl	8002e24 <__aeabi_i2d>
 800d6a0:	0002      	movs	r2, r0
 800d6a2:	000b      	movs	r3, r1
 800d6a4:	0020      	movs	r0, r4
 800d6a6:	0029      	movs	r1, r5
 800d6a8:	f7f4 ffd6 	bl	8002658 <__aeabi_dsub>
 800d6ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	9307      	str	r3, [sp, #28]
 800d6b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6b6:	0004      	movs	r4, r0
 800d6b8:	3330      	adds	r3, #48	; 0x30
 800d6ba:	7013      	strb	r3, [r2, #0]
 800d6bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6c0:	000d      	movs	r5, r1
 800d6c2:	f7f2 fec5 	bl	8000450 <__aeabi_dcmplt>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d175      	bne.n	800d7b6 <_dtoa_r+0x686>
 800d6ca:	0022      	movs	r2, r4
 800d6cc:	002b      	movs	r3, r5
 800d6ce:	2000      	movs	r0, #0
 800d6d0:	493f      	ldr	r1, [pc, #252]	; (800d7d0 <_dtoa_r+0x6a0>)
 800d6d2:	f7f4 ffc1 	bl	8002658 <__aeabi_dsub>
 800d6d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6da:	f7f2 feb9 	bl	8000450 <__aeabi_dcmplt>
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	d000      	beq.n	800d6e4 <_dtoa_r+0x5b4>
 800d6e2:	e0d1      	b.n	800d888 <_dtoa_r+0x758>
 800d6e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6e6:	9a07      	ldr	r2, [sp, #28]
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d100      	bne.n	800d6ee <_dtoa_r+0x5be>
 800d6ec:	e770      	b.n	800d5d0 <_dtoa_r+0x4a0>
 800d6ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d6f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	4b37      	ldr	r3, [pc, #220]	; (800d7d4 <_dtoa_r+0x6a4>)
 800d6f6:	f7f4 fd43 	bl	8002180 <__aeabi_dmul>
 800d6fa:	4b36      	ldr	r3, [pc, #216]	; (800d7d4 <_dtoa_r+0x6a4>)
 800d6fc:	900a      	str	r0, [sp, #40]	; 0x28
 800d6fe:	910b      	str	r1, [sp, #44]	; 0x2c
 800d700:	2200      	movs	r2, #0
 800d702:	0020      	movs	r0, r4
 800d704:	0029      	movs	r1, r5
 800d706:	f7f4 fd3b 	bl	8002180 <__aeabi_dmul>
 800d70a:	9b07      	ldr	r3, [sp, #28]
 800d70c:	0004      	movs	r4, r0
 800d70e:	000d      	movs	r5, r1
 800d710:	9310      	str	r3, [sp, #64]	; 0x40
 800d712:	e7be      	b.n	800d692 <_dtoa_r+0x562>
 800d714:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d716:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d718:	f7f4 fd32 	bl	8002180 <__aeabi_dmul>
 800d71c:	9a05      	ldr	r2, [sp, #20]
 800d71e:	9b05      	ldr	r3, [sp, #20]
 800d720:	4694      	mov	ip, r2
 800d722:	930a      	str	r3, [sp, #40]	; 0x28
 800d724:	9b07      	ldr	r3, [sp, #28]
 800d726:	9010      	str	r0, [sp, #64]	; 0x40
 800d728:	9111      	str	r1, [sp, #68]	; 0x44
 800d72a:	4463      	add	r3, ip
 800d72c:	9319      	str	r3, [sp, #100]	; 0x64
 800d72e:	0029      	movs	r1, r5
 800d730:	0020      	movs	r0, r4
 800d732:	f7f5 fb41 	bl	8002db8 <__aeabi_d2iz>
 800d736:	9017      	str	r0, [sp, #92]	; 0x5c
 800d738:	f7f5 fb74 	bl	8002e24 <__aeabi_i2d>
 800d73c:	0002      	movs	r2, r0
 800d73e:	000b      	movs	r3, r1
 800d740:	0020      	movs	r0, r4
 800d742:	0029      	movs	r1, r5
 800d744:	f7f4 ff88 	bl	8002658 <__aeabi_dsub>
 800d748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d74c:	3330      	adds	r3, #48	; 0x30
 800d74e:	7013      	strb	r3, [r2, #0]
 800d750:	0013      	movs	r3, r2
 800d752:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d754:	3301      	adds	r3, #1
 800d756:	0004      	movs	r4, r0
 800d758:	000d      	movs	r5, r1
 800d75a:	930a      	str	r3, [sp, #40]	; 0x28
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d12c      	bne.n	800d7ba <_dtoa_r+0x68a>
 800d760:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d762:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d764:	9a05      	ldr	r2, [sp, #20]
 800d766:	9b07      	ldr	r3, [sp, #28]
 800d768:	4694      	mov	ip, r2
 800d76a:	4463      	add	r3, ip
 800d76c:	2200      	movs	r2, #0
 800d76e:	9307      	str	r3, [sp, #28]
 800d770:	4b1d      	ldr	r3, [pc, #116]	; (800d7e8 <_dtoa_r+0x6b8>)
 800d772:	f7f3 fd95 	bl	80012a0 <__aeabi_dadd>
 800d776:	0002      	movs	r2, r0
 800d778:	000b      	movs	r3, r1
 800d77a:	0020      	movs	r0, r4
 800d77c:	0029      	movs	r1, r5
 800d77e:	f7f2 fe7b 	bl	8000478 <__aeabi_dcmpgt>
 800d782:	2800      	cmp	r0, #0
 800d784:	d000      	beq.n	800d788 <_dtoa_r+0x658>
 800d786:	e07f      	b.n	800d888 <_dtoa_r+0x758>
 800d788:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d78a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d78c:	2000      	movs	r0, #0
 800d78e:	4916      	ldr	r1, [pc, #88]	; (800d7e8 <_dtoa_r+0x6b8>)
 800d790:	f7f4 ff62 	bl	8002658 <__aeabi_dsub>
 800d794:	0002      	movs	r2, r0
 800d796:	000b      	movs	r3, r1
 800d798:	0020      	movs	r0, r4
 800d79a:	0029      	movs	r1, r5
 800d79c:	f7f2 fe58 	bl	8000450 <__aeabi_dcmplt>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d100      	bne.n	800d7a6 <_dtoa_r+0x676>
 800d7a4:	e714      	b.n	800d5d0 <_dtoa_r+0x4a0>
 800d7a6:	9b07      	ldr	r3, [sp, #28]
 800d7a8:	001a      	movs	r2, r3
 800d7aa:	3a01      	subs	r2, #1
 800d7ac:	9207      	str	r2, [sp, #28]
 800d7ae:	7812      	ldrb	r2, [r2, #0]
 800d7b0:	2a30      	cmp	r2, #48	; 0x30
 800d7b2:	d0f8      	beq.n	800d7a6 <_dtoa_r+0x676>
 800d7b4:	9307      	str	r3, [sp, #28]
 800d7b6:	9602      	str	r6, [sp, #8]
 800d7b8:	e054      	b.n	800d864 <_dtoa_r+0x734>
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	4b05      	ldr	r3, [pc, #20]	; (800d7d4 <_dtoa_r+0x6a4>)
 800d7be:	f7f4 fcdf 	bl	8002180 <__aeabi_dmul>
 800d7c2:	0004      	movs	r4, r0
 800d7c4:	000d      	movs	r5, r1
 800d7c6:	e7b2      	b.n	800d72e <_dtoa_r+0x5fe>
 800d7c8:	08012348 	.word	0x08012348
 800d7cc:	08012320 	.word	0x08012320
 800d7d0:	3ff00000 	.word	0x3ff00000
 800d7d4:	40240000 	.word	0x40240000
 800d7d8:	401c0000 	.word	0x401c0000
 800d7dc:	fcc00000 	.word	0xfcc00000
 800d7e0:	40140000 	.word	0x40140000
 800d7e4:	7cc00000 	.word	0x7cc00000
 800d7e8:	3fe00000 	.word	0x3fe00000
 800d7ec:	9b06      	ldr	r3, [sp, #24]
 800d7ee:	9e05      	ldr	r6, [sp, #20]
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	199b      	adds	r3, r3, r6
 800d7f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d7f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d7f8:	930a      	str	r3, [sp, #40]	; 0x28
 800d7fa:	9a08      	ldr	r2, [sp, #32]
 800d7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7fe:	0020      	movs	r0, r4
 800d800:	0029      	movs	r1, r5
 800d802:	f7f4 f8b7 	bl	8001974 <__aeabi_ddiv>
 800d806:	f7f5 fad7 	bl	8002db8 <__aeabi_d2iz>
 800d80a:	9006      	str	r0, [sp, #24]
 800d80c:	f7f5 fb0a 	bl	8002e24 <__aeabi_i2d>
 800d810:	9a08      	ldr	r2, [sp, #32]
 800d812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d814:	f7f4 fcb4 	bl	8002180 <__aeabi_dmul>
 800d818:	0002      	movs	r2, r0
 800d81a:	000b      	movs	r3, r1
 800d81c:	0020      	movs	r0, r4
 800d81e:	0029      	movs	r1, r5
 800d820:	f7f4 ff1a 	bl	8002658 <__aeabi_dsub>
 800d824:	0033      	movs	r3, r6
 800d826:	9a06      	ldr	r2, [sp, #24]
 800d828:	3601      	adds	r6, #1
 800d82a:	3230      	adds	r2, #48	; 0x30
 800d82c:	701a      	strb	r2, [r3, #0]
 800d82e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d830:	9607      	str	r6, [sp, #28]
 800d832:	429a      	cmp	r2, r3
 800d834:	d139      	bne.n	800d8aa <_dtoa_r+0x77a>
 800d836:	0002      	movs	r2, r0
 800d838:	000b      	movs	r3, r1
 800d83a:	f7f3 fd31 	bl	80012a0 <__aeabi_dadd>
 800d83e:	9a08      	ldr	r2, [sp, #32]
 800d840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d842:	0004      	movs	r4, r0
 800d844:	000d      	movs	r5, r1
 800d846:	f7f2 fe17 	bl	8000478 <__aeabi_dcmpgt>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d11b      	bne.n	800d886 <_dtoa_r+0x756>
 800d84e:	9a08      	ldr	r2, [sp, #32]
 800d850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d852:	0020      	movs	r0, r4
 800d854:	0029      	movs	r1, r5
 800d856:	f7f2 fdf5 	bl	8000444 <__aeabi_dcmpeq>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d002      	beq.n	800d864 <_dtoa_r+0x734>
 800d85e:	9b06      	ldr	r3, [sp, #24]
 800d860:	07db      	lsls	r3, r3, #31
 800d862:	d410      	bmi.n	800d886 <_dtoa_r+0x756>
 800d864:	0038      	movs	r0, r7
 800d866:	9904      	ldr	r1, [sp, #16]
 800d868:	f000 fade 	bl	800de28 <_Bfree>
 800d86c:	2300      	movs	r3, #0
 800d86e:	9a07      	ldr	r2, [sp, #28]
 800d870:	9802      	ldr	r0, [sp, #8]
 800d872:	7013      	strb	r3, [r2, #0]
 800d874:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d876:	3001      	adds	r0, #1
 800d878:	6018      	str	r0, [r3, #0]
 800d87a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d100      	bne.n	800d882 <_dtoa_r+0x752>
 800d880:	e4a3      	b.n	800d1ca <_dtoa_r+0x9a>
 800d882:	601a      	str	r2, [r3, #0]
 800d884:	e4a1      	b.n	800d1ca <_dtoa_r+0x9a>
 800d886:	9e02      	ldr	r6, [sp, #8]
 800d888:	9b07      	ldr	r3, [sp, #28]
 800d88a:	9307      	str	r3, [sp, #28]
 800d88c:	3b01      	subs	r3, #1
 800d88e:	781a      	ldrb	r2, [r3, #0]
 800d890:	2a39      	cmp	r2, #57	; 0x39
 800d892:	d106      	bne.n	800d8a2 <_dtoa_r+0x772>
 800d894:	9a05      	ldr	r2, [sp, #20]
 800d896:	429a      	cmp	r2, r3
 800d898:	d1f7      	bne.n	800d88a <_dtoa_r+0x75a>
 800d89a:	2230      	movs	r2, #48	; 0x30
 800d89c:	9905      	ldr	r1, [sp, #20]
 800d89e:	3601      	adds	r6, #1
 800d8a0:	700a      	strb	r2, [r1, #0]
 800d8a2:	781a      	ldrb	r2, [r3, #0]
 800d8a4:	3201      	adds	r2, #1
 800d8a6:	701a      	strb	r2, [r3, #0]
 800d8a8:	e785      	b.n	800d7b6 <_dtoa_r+0x686>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	4bad      	ldr	r3, [pc, #692]	; (800db64 <_dtoa_r+0xa34>)
 800d8ae:	f7f4 fc67 	bl	8002180 <__aeabi_dmul>
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	0004      	movs	r4, r0
 800d8b8:	000d      	movs	r5, r1
 800d8ba:	f7f2 fdc3 	bl	8000444 <__aeabi_dcmpeq>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d09b      	beq.n	800d7fa <_dtoa_r+0x6ca>
 800d8c2:	e7cf      	b.n	800d864 <_dtoa_r+0x734>
 800d8c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8c6:	2a00      	cmp	r2, #0
 800d8c8:	d100      	bne.n	800d8cc <_dtoa_r+0x79c>
 800d8ca:	e082      	b.n	800d9d2 <_dtoa_r+0x8a2>
 800d8cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d8ce:	2a01      	cmp	r2, #1
 800d8d0:	dc66      	bgt.n	800d9a0 <_dtoa_r+0x870>
 800d8d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d8d4:	2a00      	cmp	r2, #0
 800d8d6:	d05f      	beq.n	800d998 <_dtoa_r+0x868>
 800d8d8:	4aa3      	ldr	r2, [pc, #652]	; (800db68 <_dtoa_r+0xa38>)
 800d8da:	189b      	adds	r3, r3, r2
 800d8dc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d8de:	9c08      	ldr	r4, [sp, #32]
 800d8e0:	9a08      	ldr	r2, [sp, #32]
 800d8e2:	2101      	movs	r1, #1
 800d8e4:	18d2      	adds	r2, r2, r3
 800d8e6:	9208      	str	r2, [sp, #32]
 800d8e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8ea:	0038      	movs	r0, r7
 800d8ec:	18d3      	adds	r3, r2, r3
 800d8ee:	930d      	str	r3, [sp, #52]	; 0x34
 800d8f0:	f000 fb4a 	bl	800df88 <__i2b>
 800d8f4:	0005      	movs	r5, r0
 800d8f6:	2c00      	cmp	r4, #0
 800d8f8:	dd0e      	ble.n	800d918 <_dtoa_r+0x7e8>
 800d8fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	dd0b      	ble.n	800d918 <_dtoa_r+0x7e8>
 800d900:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d902:	0023      	movs	r3, r4
 800d904:	4294      	cmp	r4, r2
 800d906:	dd00      	ble.n	800d90a <_dtoa_r+0x7da>
 800d908:	0013      	movs	r3, r2
 800d90a:	9a08      	ldr	r2, [sp, #32]
 800d90c:	1ae4      	subs	r4, r4, r3
 800d90e:	1ad2      	subs	r2, r2, r3
 800d910:	9208      	str	r2, [sp, #32]
 800d912:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	930d      	str	r3, [sp, #52]	; 0x34
 800d918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d01f      	beq.n	800d95e <_dtoa_r+0x82e>
 800d91e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d920:	2b00      	cmp	r3, #0
 800d922:	d05a      	beq.n	800d9da <_dtoa_r+0x8aa>
 800d924:	2e00      	cmp	r6, #0
 800d926:	dd11      	ble.n	800d94c <_dtoa_r+0x81c>
 800d928:	0029      	movs	r1, r5
 800d92a:	0032      	movs	r2, r6
 800d92c:	0038      	movs	r0, r7
 800d92e:	f000 fbf1 	bl	800e114 <__pow5mult>
 800d932:	9a04      	ldr	r2, [sp, #16]
 800d934:	0001      	movs	r1, r0
 800d936:	0005      	movs	r5, r0
 800d938:	0038      	movs	r0, r7
 800d93a:	f000 fb3b 	bl	800dfb4 <__multiply>
 800d93e:	9904      	ldr	r1, [sp, #16]
 800d940:	9007      	str	r0, [sp, #28]
 800d942:	0038      	movs	r0, r7
 800d944:	f000 fa70 	bl	800de28 <_Bfree>
 800d948:	9b07      	ldr	r3, [sp, #28]
 800d94a:	9304      	str	r3, [sp, #16]
 800d94c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d94e:	1b9a      	subs	r2, r3, r6
 800d950:	42b3      	cmp	r3, r6
 800d952:	d004      	beq.n	800d95e <_dtoa_r+0x82e>
 800d954:	0038      	movs	r0, r7
 800d956:	9904      	ldr	r1, [sp, #16]
 800d958:	f000 fbdc 	bl	800e114 <__pow5mult>
 800d95c:	9004      	str	r0, [sp, #16]
 800d95e:	2101      	movs	r1, #1
 800d960:	0038      	movs	r0, r7
 800d962:	f000 fb11 	bl	800df88 <__i2b>
 800d966:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d968:	0006      	movs	r6, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	dd37      	ble.n	800d9de <_dtoa_r+0x8ae>
 800d96e:	001a      	movs	r2, r3
 800d970:	0001      	movs	r1, r0
 800d972:	0038      	movs	r0, r7
 800d974:	f000 fbce 	bl	800e114 <__pow5mult>
 800d978:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d97a:	0006      	movs	r6, r0
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	dd33      	ble.n	800d9e8 <_dtoa_r+0x8b8>
 800d980:	2300      	movs	r3, #0
 800d982:	9307      	str	r3, [sp, #28]
 800d984:	6933      	ldr	r3, [r6, #16]
 800d986:	3303      	adds	r3, #3
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	18f3      	adds	r3, r6, r3
 800d98c:	6858      	ldr	r0, [r3, #4]
 800d98e:	f000 fab3 	bl	800def8 <__hi0bits>
 800d992:	2320      	movs	r3, #32
 800d994:	1a18      	subs	r0, r3, r0
 800d996:	e03f      	b.n	800da18 <_dtoa_r+0x8e8>
 800d998:	2336      	movs	r3, #54	; 0x36
 800d99a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d99c:	1a9b      	subs	r3, r3, r2
 800d99e:	e79d      	b.n	800d8dc <_dtoa_r+0x7ac>
 800d9a0:	9b06      	ldr	r3, [sp, #24]
 800d9a2:	1e5e      	subs	r6, r3, #1
 800d9a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9a6:	42b3      	cmp	r3, r6
 800d9a8:	db08      	blt.n	800d9bc <_dtoa_r+0x88c>
 800d9aa:	1b9e      	subs	r6, r3, r6
 800d9ac:	9b06      	ldr	r3, [sp, #24]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	da0c      	bge.n	800d9cc <_dtoa_r+0x89c>
 800d9b2:	9b08      	ldr	r3, [sp, #32]
 800d9b4:	9a06      	ldr	r2, [sp, #24]
 800d9b6:	1a9c      	subs	r4, r3, r2
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	e791      	b.n	800d8e0 <_dtoa_r+0x7b0>
 800d9bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d9c0:	1af3      	subs	r3, r6, r3
 800d9c2:	18d3      	adds	r3, r2, r3
 800d9c4:	960e      	str	r6, [sp, #56]	; 0x38
 800d9c6:	9314      	str	r3, [sp, #80]	; 0x50
 800d9c8:	2600      	movs	r6, #0
 800d9ca:	e7ef      	b.n	800d9ac <_dtoa_r+0x87c>
 800d9cc:	9c08      	ldr	r4, [sp, #32]
 800d9ce:	9b06      	ldr	r3, [sp, #24]
 800d9d0:	e786      	b.n	800d8e0 <_dtoa_r+0x7b0>
 800d9d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d9d4:	9c08      	ldr	r4, [sp, #32]
 800d9d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d9d8:	e78d      	b.n	800d8f6 <_dtoa_r+0x7c6>
 800d9da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9dc:	e7ba      	b.n	800d954 <_dtoa_r+0x824>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	9307      	str	r3, [sp, #28]
 800d9e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	dc13      	bgt.n	800da10 <_dtoa_r+0x8e0>
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	9307      	str	r3, [sp, #28]
 800d9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10e      	bne.n	800da10 <_dtoa_r+0x8e0>
 800d9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9f4:	031b      	lsls	r3, r3, #12
 800d9f6:	d10b      	bne.n	800da10 <_dtoa_r+0x8e0>
 800d9f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d9fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9fc:	4213      	tst	r3, r2
 800d9fe:	d007      	beq.n	800da10 <_dtoa_r+0x8e0>
 800da00:	9b08      	ldr	r3, [sp, #32]
 800da02:	3301      	adds	r3, #1
 800da04:	9308      	str	r3, [sp, #32]
 800da06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da08:	3301      	adds	r3, #1
 800da0a:	930d      	str	r3, [sp, #52]	; 0x34
 800da0c:	2301      	movs	r3, #1
 800da0e:	9307      	str	r3, [sp, #28]
 800da10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da12:	2001      	movs	r0, #1
 800da14:	2b00      	cmp	r3, #0
 800da16:	d1b5      	bne.n	800d984 <_dtoa_r+0x854>
 800da18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da1a:	221f      	movs	r2, #31
 800da1c:	1818      	adds	r0, r3, r0
 800da1e:	0003      	movs	r3, r0
 800da20:	4013      	ands	r3, r2
 800da22:	4210      	tst	r0, r2
 800da24:	d046      	beq.n	800dab4 <_dtoa_r+0x984>
 800da26:	3201      	adds	r2, #1
 800da28:	1ad2      	subs	r2, r2, r3
 800da2a:	2a04      	cmp	r2, #4
 800da2c:	dd3f      	ble.n	800daae <_dtoa_r+0x97e>
 800da2e:	221c      	movs	r2, #28
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	9a08      	ldr	r2, [sp, #32]
 800da34:	18e4      	adds	r4, r4, r3
 800da36:	18d2      	adds	r2, r2, r3
 800da38:	9208      	str	r2, [sp, #32]
 800da3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da3c:	18d3      	adds	r3, r2, r3
 800da3e:	930d      	str	r3, [sp, #52]	; 0x34
 800da40:	9b08      	ldr	r3, [sp, #32]
 800da42:	2b00      	cmp	r3, #0
 800da44:	dd05      	ble.n	800da52 <_dtoa_r+0x922>
 800da46:	001a      	movs	r2, r3
 800da48:	0038      	movs	r0, r7
 800da4a:	9904      	ldr	r1, [sp, #16]
 800da4c:	f000 fbbe 	bl	800e1cc <__lshift>
 800da50:	9004      	str	r0, [sp, #16]
 800da52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da54:	2b00      	cmp	r3, #0
 800da56:	dd05      	ble.n	800da64 <_dtoa_r+0x934>
 800da58:	0031      	movs	r1, r6
 800da5a:	001a      	movs	r2, r3
 800da5c:	0038      	movs	r0, r7
 800da5e:	f000 fbb5 	bl	800e1cc <__lshift>
 800da62:	0006      	movs	r6, r0
 800da64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da66:	2b00      	cmp	r3, #0
 800da68:	d026      	beq.n	800dab8 <_dtoa_r+0x988>
 800da6a:	0031      	movs	r1, r6
 800da6c:	9804      	ldr	r0, [sp, #16]
 800da6e:	f000 fc1d 	bl	800e2ac <__mcmp>
 800da72:	2800      	cmp	r0, #0
 800da74:	da20      	bge.n	800dab8 <_dtoa_r+0x988>
 800da76:	9b02      	ldr	r3, [sp, #8]
 800da78:	220a      	movs	r2, #10
 800da7a:	3b01      	subs	r3, #1
 800da7c:	9302      	str	r3, [sp, #8]
 800da7e:	0038      	movs	r0, r7
 800da80:	2300      	movs	r3, #0
 800da82:	9904      	ldr	r1, [sp, #16]
 800da84:	f000 f9f4 	bl	800de70 <__multadd>
 800da88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da8a:	9004      	str	r0, [sp, #16]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d100      	bne.n	800da92 <_dtoa_r+0x962>
 800da90:	e160      	b.n	800dd54 <_dtoa_r+0xc24>
 800da92:	2300      	movs	r3, #0
 800da94:	0029      	movs	r1, r5
 800da96:	220a      	movs	r2, #10
 800da98:	0038      	movs	r0, r7
 800da9a:	f000 f9e9 	bl	800de70 <__multadd>
 800da9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800daa0:	0005      	movs	r5, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	dc47      	bgt.n	800db36 <_dtoa_r+0xa06>
 800daa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	dc0d      	bgt.n	800dac8 <_dtoa_r+0x998>
 800daac:	e043      	b.n	800db36 <_dtoa_r+0xa06>
 800daae:	2a04      	cmp	r2, #4
 800dab0:	d0c6      	beq.n	800da40 <_dtoa_r+0x910>
 800dab2:	0013      	movs	r3, r2
 800dab4:	331c      	adds	r3, #28
 800dab6:	e7bc      	b.n	800da32 <_dtoa_r+0x902>
 800dab8:	9b06      	ldr	r3, [sp, #24]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	dc35      	bgt.n	800db2a <_dtoa_r+0x9fa>
 800dabe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	dd32      	ble.n	800db2a <_dtoa_r+0x9fa>
 800dac4:	9b06      	ldr	r3, [sp, #24]
 800dac6:	930c      	str	r3, [sp, #48]	; 0x30
 800dac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d10c      	bne.n	800dae8 <_dtoa_r+0x9b8>
 800dace:	0031      	movs	r1, r6
 800dad0:	2205      	movs	r2, #5
 800dad2:	0038      	movs	r0, r7
 800dad4:	f000 f9cc 	bl	800de70 <__multadd>
 800dad8:	0006      	movs	r6, r0
 800dada:	0001      	movs	r1, r0
 800dadc:	9804      	ldr	r0, [sp, #16]
 800dade:	f000 fbe5 	bl	800e2ac <__mcmp>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	dd00      	ble.n	800dae8 <_dtoa_r+0x9b8>
 800dae6:	e59f      	b.n	800d628 <_dtoa_r+0x4f8>
 800dae8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800daea:	43db      	mvns	r3, r3
 800daec:	9302      	str	r3, [sp, #8]
 800daee:	9b05      	ldr	r3, [sp, #20]
 800daf0:	9307      	str	r3, [sp, #28]
 800daf2:	2400      	movs	r4, #0
 800daf4:	0031      	movs	r1, r6
 800daf6:	0038      	movs	r0, r7
 800daf8:	f000 f996 	bl	800de28 <_Bfree>
 800dafc:	2d00      	cmp	r5, #0
 800dafe:	d100      	bne.n	800db02 <_dtoa_r+0x9d2>
 800db00:	e6b0      	b.n	800d864 <_dtoa_r+0x734>
 800db02:	2c00      	cmp	r4, #0
 800db04:	d005      	beq.n	800db12 <_dtoa_r+0x9e2>
 800db06:	42ac      	cmp	r4, r5
 800db08:	d003      	beq.n	800db12 <_dtoa_r+0x9e2>
 800db0a:	0021      	movs	r1, r4
 800db0c:	0038      	movs	r0, r7
 800db0e:	f000 f98b 	bl	800de28 <_Bfree>
 800db12:	0029      	movs	r1, r5
 800db14:	0038      	movs	r0, r7
 800db16:	f000 f987 	bl	800de28 <_Bfree>
 800db1a:	e6a3      	b.n	800d864 <_dtoa_r+0x734>
 800db1c:	2600      	movs	r6, #0
 800db1e:	0035      	movs	r5, r6
 800db20:	e7e2      	b.n	800dae8 <_dtoa_r+0x9b8>
 800db22:	9602      	str	r6, [sp, #8]
 800db24:	9e07      	ldr	r6, [sp, #28]
 800db26:	0035      	movs	r5, r6
 800db28:	e57e      	b.n	800d628 <_dtoa_r+0x4f8>
 800db2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d100      	bne.n	800db32 <_dtoa_r+0xa02>
 800db30:	e0c8      	b.n	800dcc4 <_dtoa_r+0xb94>
 800db32:	9b06      	ldr	r3, [sp, #24]
 800db34:	930c      	str	r3, [sp, #48]	; 0x30
 800db36:	2c00      	cmp	r4, #0
 800db38:	dd05      	ble.n	800db46 <_dtoa_r+0xa16>
 800db3a:	0029      	movs	r1, r5
 800db3c:	0022      	movs	r2, r4
 800db3e:	0038      	movs	r0, r7
 800db40:	f000 fb44 	bl	800e1cc <__lshift>
 800db44:	0005      	movs	r5, r0
 800db46:	9b07      	ldr	r3, [sp, #28]
 800db48:	0028      	movs	r0, r5
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d01f      	beq.n	800db8e <_dtoa_r+0xa5e>
 800db4e:	0038      	movs	r0, r7
 800db50:	6869      	ldr	r1, [r5, #4]
 800db52:	f000 f925 	bl	800dda0 <_Balloc>
 800db56:	1e04      	subs	r4, r0, #0
 800db58:	d10c      	bne.n	800db74 <_dtoa_r+0xa44>
 800db5a:	0002      	movs	r2, r0
 800db5c:	4b03      	ldr	r3, [pc, #12]	; (800db6c <_dtoa_r+0xa3c>)
 800db5e:	4904      	ldr	r1, [pc, #16]	; (800db70 <_dtoa_r+0xa40>)
 800db60:	f7ff fafb 	bl	800d15a <_dtoa_r+0x2a>
 800db64:	40240000 	.word	0x40240000
 800db68:	00000433 	.word	0x00000433
 800db6c:	080122af 	.word	0x080122af
 800db70:	000002ea 	.word	0x000002ea
 800db74:	0029      	movs	r1, r5
 800db76:	692b      	ldr	r3, [r5, #16]
 800db78:	310c      	adds	r1, #12
 800db7a:	1c9a      	adds	r2, r3, #2
 800db7c:	0092      	lsls	r2, r2, #2
 800db7e:	300c      	adds	r0, #12
 800db80:	f7fe fd9e 	bl	800c6c0 <memcpy>
 800db84:	2201      	movs	r2, #1
 800db86:	0021      	movs	r1, r4
 800db88:	0038      	movs	r0, r7
 800db8a:	f000 fb1f 	bl	800e1cc <__lshift>
 800db8e:	002c      	movs	r4, r5
 800db90:	0005      	movs	r5, r0
 800db92:	9b05      	ldr	r3, [sp, #20]
 800db94:	9308      	str	r3, [sp, #32]
 800db96:	0031      	movs	r1, r6
 800db98:	9804      	ldr	r0, [sp, #16]
 800db9a:	f7ff fa3d 	bl	800d018 <quorem>
 800db9e:	0003      	movs	r3, r0
 800dba0:	0021      	movs	r1, r4
 800dba2:	3330      	adds	r3, #48	; 0x30
 800dba4:	900e      	str	r0, [sp, #56]	; 0x38
 800dba6:	9804      	ldr	r0, [sp, #16]
 800dba8:	9306      	str	r3, [sp, #24]
 800dbaa:	f000 fb7f 	bl	800e2ac <__mcmp>
 800dbae:	002a      	movs	r2, r5
 800dbb0:	900f      	str	r0, [sp, #60]	; 0x3c
 800dbb2:	0031      	movs	r1, r6
 800dbb4:	0038      	movs	r0, r7
 800dbb6:	f000 fb95 	bl	800e2e4 <__mdiff>
 800dbba:	68c3      	ldr	r3, [r0, #12]
 800dbbc:	9007      	str	r0, [sp, #28]
 800dbbe:	9310      	str	r3, [sp, #64]	; 0x40
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	930d      	str	r3, [sp, #52]	; 0x34
 800dbc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d104      	bne.n	800dbd4 <_dtoa_r+0xaa4>
 800dbca:	0001      	movs	r1, r0
 800dbcc:	9804      	ldr	r0, [sp, #16]
 800dbce:	f000 fb6d 	bl	800e2ac <__mcmp>
 800dbd2:	900d      	str	r0, [sp, #52]	; 0x34
 800dbd4:	0038      	movs	r0, r7
 800dbd6:	9907      	ldr	r1, [sp, #28]
 800dbd8:	f000 f926 	bl	800de28 <_Bfree>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbe0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbe2:	4018      	ands	r0, r3
 800dbe4:	9b08      	ldr	r3, [sp, #32]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	9307      	str	r3, [sp, #28]
 800dbea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dbec:	4313      	orrs	r3, r2
 800dbee:	4303      	orrs	r3, r0
 800dbf0:	d10c      	bne.n	800dc0c <_dtoa_r+0xadc>
 800dbf2:	9b06      	ldr	r3, [sp, #24]
 800dbf4:	2b39      	cmp	r3, #57	; 0x39
 800dbf6:	d025      	beq.n	800dc44 <_dtoa_r+0xb14>
 800dbf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	dd02      	ble.n	800dc04 <_dtoa_r+0xad4>
 800dbfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc00:	3331      	adds	r3, #49	; 0x31
 800dc02:	9306      	str	r3, [sp, #24]
 800dc04:	9b08      	ldr	r3, [sp, #32]
 800dc06:	9a06      	ldr	r2, [sp, #24]
 800dc08:	701a      	strb	r2, [r3, #0]
 800dc0a:	e773      	b.n	800daf4 <_dtoa_r+0x9c4>
 800dc0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	db03      	blt.n	800dc1a <_dtoa_r+0xaea>
 800dc12:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dc14:	4313      	orrs	r3, r2
 800dc16:	4303      	orrs	r3, r0
 800dc18:	d11f      	bne.n	800dc5a <_dtoa_r+0xb2a>
 800dc1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	ddf1      	ble.n	800dc04 <_dtoa_r+0xad4>
 800dc20:	9904      	ldr	r1, [sp, #16]
 800dc22:	2201      	movs	r2, #1
 800dc24:	0038      	movs	r0, r7
 800dc26:	f000 fad1 	bl	800e1cc <__lshift>
 800dc2a:	0031      	movs	r1, r6
 800dc2c:	9004      	str	r0, [sp, #16]
 800dc2e:	f000 fb3d 	bl	800e2ac <__mcmp>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	dc03      	bgt.n	800dc3e <_dtoa_r+0xb0e>
 800dc36:	d1e5      	bne.n	800dc04 <_dtoa_r+0xad4>
 800dc38:	9b06      	ldr	r3, [sp, #24]
 800dc3a:	07db      	lsls	r3, r3, #31
 800dc3c:	d5e2      	bpl.n	800dc04 <_dtoa_r+0xad4>
 800dc3e:	9b06      	ldr	r3, [sp, #24]
 800dc40:	2b39      	cmp	r3, #57	; 0x39
 800dc42:	d1dc      	bne.n	800dbfe <_dtoa_r+0xace>
 800dc44:	2339      	movs	r3, #57	; 0x39
 800dc46:	9a08      	ldr	r2, [sp, #32]
 800dc48:	7013      	strb	r3, [r2, #0]
 800dc4a:	9b07      	ldr	r3, [sp, #28]
 800dc4c:	9307      	str	r3, [sp, #28]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	781a      	ldrb	r2, [r3, #0]
 800dc52:	2a39      	cmp	r2, #57	; 0x39
 800dc54:	d06c      	beq.n	800dd30 <_dtoa_r+0xc00>
 800dc56:	3201      	adds	r2, #1
 800dc58:	e7d6      	b.n	800dc08 <_dtoa_r+0xad8>
 800dc5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	dd07      	ble.n	800dc70 <_dtoa_r+0xb40>
 800dc60:	9b06      	ldr	r3, [sp, #24]
 800dc62:	2b39      	cmp	r3, #57	; 0x39
 800dc64:	d0ee      	beq.n	800dc44 <_dtoa_r+0xb14>
 800dc66:	9b06      	ldr	r3, [sp, #24]
 800dc68:	9a08      	ldr	r2, [sp, #32]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	7013      	strb	r3, [r2, #0]
 800dc6e:	e741      	b.n	800daf4 <_dtoa_r+0x9c4>
 800dc70:	9b08      	ldr	r3, [sp, #32]
 800dc72:	9a06      	ldr	r2, [sp, #24]
 800dc74:	701a      	strb	r2, [r3, #0]
 800dc76:	2301      	movs	r3, #1
 800dc78:	9a05      	ldr	r2, [sp, #20]
 800dc7a:	1a9b      	subs	r3, r3, r2
 800dc7c:	9a08      	ldr	r2, [sp, #32]
 800dc7e:	189b      	adds	r3, r3, r2
 800dc80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d03e      	beq.n	800dd04 <_dtoa_r+0xbd4>
 800dc86:	2300      	movs	r3, #0
 800dc88:	220a      	movs	r2, #10
 800dc8a:	9904      	ldr	r1, [sp, #16]
 800dc8c:	0038      	movs	r0, r7
 800dc8e:	f000 f8ef 	bl	800de70 <__multadd>
 800dc92:	2300      	movs	r3, #0
 800dc94:	9004      	str	r0, [sp, #16]
 800dc96:	220a      	movs	r2, #10
 800dc98:	0021      	movs	r1, r4
 800dc9a:	0038      	movs	r0, r7
 800dc9c:	42ac      	cmp	r4, r5
 800dc9e:	d106      	bne.n	800dcae <_dtoa_r+0xb7e>
 800dca0:	f000 f8e6 	bl	800de70 <__multadd>
 800dca4:	0004      	movs	r4, r0
 800dca6:	0005      	movs	r5, r0
 800dca8:	9b07      	ldr	r3, [sp, #28]
 800dcaa:	9308      	str	r3, [sp, #32]
 800dcac:	e773      	b.n	800db96 <_dtoa_r+0xa66>
 800dcae:	f000 f8df 	bl	800de70 <__multadd>
 800dcb2:	0029      	movs	r1, r5
 800dcb4:	0004      	movs	r4, r0
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	220a      	movs	r2, #10
 800dcba:	0038      	movs	r0, r7
 800dcbc:	f000 f8d8 	bl	800de70 <__multadd>
 800dcc0:	0005      	movs	r5, r0
 800dcc2:	e7f1      	b.n	800dca8 <_dtoa_r+0xb78>
 800dcc4:	9b06      	ldr	r3, [sp, #24]
 800dcc6:	930c      	str	r3, [sp, #48]	; 0x30
 800dcc8:	2400      	movs	r4, #0
 800dcca:	0031      	movs	r1, r6
 800dccc:	9804      	ldr	r0, [sp, #16]
 800dcce:	f7ff f9a3 	bl	800d018 <quorem>
 800dcd2:	9b05      	ldr	r3, [sp, #20]
 800dcd4:	3030      	adds	r0, #48	; 0x30
 800dcd6:	5518      	strb	r0, [r3, r4]
 800dcd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcda:	3401      	adds	r4, #1
 800dcdc:	9006      	str	r0, [sp, #24]
 800dcde:	42a3      	cmp	r3, r4
 800dce0:	dd07      	ble.n	800dcf2 <_dtoa_r+0xbc2>
 800dce2:	2300      	movs	r3, #0
 800dce4:	220a      	movs	r2, #10
 800dce6:	0038      	movs	r0, r7
 800dce8:	9904      	ldr	r1, [sp, #16]
 800dcea:	f000 f8c1 	bl	800de70 <__multadd>
 800dcee:	9004      	str	r0, [sp, #16]
 800dcf0:	e7eb      	b.n	800dcca <_dtoa_r+0xb9a>
 800dcf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcf4:	2001      	movs	r0, #1
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	dd00      	ble.n	800dcfc <_dtoa_r+0xbcc>
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	2400      	movs	r4, #0
 800dcfe:	9b05      	ldr	r3, [sp, #20]
 800dd00:	181b      	adds	r3, r3, r0
 800dd02:	9307      	str	r3, [sp, #28]
 800dd04:	9904      	ldr	r1, [sp, #16]
 800dd06:	2201      	movs	r2, #1
 800dd08:	0038      	movs	r0, r7
 800dd0a:	f000 fa5f 	bl	800e1cc <__lshift>
 800dd0e:	0031      	movs	r1, r6
 800dd10:	9004      	str	r0, [sp, #16]
 800dd12:	f000 facb 	bl	800e2ac <__mcmp>
 800dd16:	2800      	cmp	r0, #0
 800dd18:	dc97      	bgt.n	800dc4a <_dtoa_r+0xb1a>
 800dd1a:	d102      	bne.n	800dd22 <_dtoa_r+0xbf2>
 800dd1c:	9b06      	ldr	r3, [sp, #24]
 800dd1e:	07db      	lsls	r3, r3, #31
 800dd20:	d493      	bmi.n	800dc4a <_dtoa_r+0xb1a>
 800dd22:	9b07      	ldr	r3, [sp, #28]
 800dd24:	9307      	str	r3, [sp, #28]
 800dd26:	3b01      	subs	r3, #1
 800dd28:	781a      	ldrb	r2, [r3, #0]
 800dd2a:	2a30      	cmp	r2, #48	; 0x30
 800dd2c:	d0fa      	beq.n	800dd24 <_dtoa_r+0xbf4>
 800dd2e:	e6e1      	b.n	800daf4 <_dtoa_r+0x9c4>
 800dd30:	9a05      	ldr	r2, [sp, #20]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d18a      	bne.n	800dc4c <_dtoa_r+0xb1c>
 800dd36:	9b02      	ldr	r3, [sp, #8]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	9302      	str	r3, [sp, #8]
 800dd3c:	2331      	movs	r3, #49	; 0x31
 800dd3e:	e795      	b.n	800dc6c <_dtoa_r+0xb3c>
 800dd40:	4b08      	ldr	r3, [pc, #32]	; (800dd64 <_dtoa_r+0xc34>)
 800dd42:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800dd44:	9305      	str	r3, [sp, #20]
 800dd46:	4b08      	ldr	r3, [pc, #32]	; (800dd68 <_dtoa_r+0xc38>)
 800dd48:	2a00      	cmp	r2, #0
 800dd4a:	d001      	beq.n	800dd50 <_dtoa_r+0xc20>
 800dd4c:	f7ff fa3b 	bl	800d1c6 <_dtoa_r+0x96>
 800dd50:	f7ff fa3b 	bl	800d1ca <_dtoa_r+0x9a>
 800dd54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	dcb6      	bgt.n	800dcc8 <_dtoa_r+0xb98>
 800dd5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	dd00      	ble.n	800dd62 <_dtoa_r+0xc32>
 800dd60:	e6b2      	b.n	800dac8 <_dtoa_r+0x998>
 800dd62:	e7b1      	b.n	800dcc8 <_dtoa_r+0xb98>
 800dd64:	0801222c 	.word	0x0801222c
 800dd68:	08012234 	.word	0x08012234

0800dd6c <_localeconv_r>:
 800dd6c:	4800      	ldr	r0, [pc, #0]	; (800dd70 <_localeconv_r+0x4>)
 800dd6e:	4770      	bx	lr
 800dd70:	20000164 	.word	0x20000164

0800dd74 <malloc>:
 800dd74:	b510      	push	{r4, lr}
 800dd76:	4b03      	ldr	r3, [pc, #12]	; (800dd84 <malloc+0x10>)
 800dd78:	0001      	movs	r1, r0
 800dd7a:	6818      	ldr	r0, [r3, #0]
 800dd7c:	f000 fc06 	bl	800e58c <_malloc_r>
 800dd80:	bd10      	pop	{r4, pc}
 800dd82:	46c0      	nop			; (mov r8, r8)
 800dd84:	20000010 	.word	0x20000010

0800dd88 <memchr>:
 800dd88:	b2c9      	uxtb	r1, r1
 800dd8a:	1882      	adds	r2, r0, r2
 800dd8c:	4290      	cmp	r0, r2
 800dd8e:	d101      	bne.n	800dd94 <memchr+0xc>
 800dd90:	2000      	movs	r0, #0
 800dd92:	4770      	bx	lr
 800dd94:	7803      	ldrb	r3, [r0, #0]
 800dd96:	428b      	cmp	r3, r1
 800dd98:	d0fb      	beq.n	800dd92 <memchr+0xa>
 800dd9a:	3001      	adds	r0, #1
 800dd9c:	e7f6      	b.n	800dd8c <memchr+0x4>
	...

0800dda0 <_Balloc>:
 800dda0:	b570      	push	{r4, r5, r6, lr}
 800dda2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dda4:	0006      	movs	r6, r0
 800dda6:	000c      	movs	r4, r1
 800dda8:	2d00      	cmp	r5, #0
 800ddaa:	d10e      	bne.n	800ddca <_Balloc+0x2a>
 800ddac:	2010      	movs	r0, #16
 800ddae:	f7ff ffe1 	bl	800dd74 <malloc>
 800ddb2:	1e02      	subs	r2, r0, #0
 800ddb4:	6270      	str	r0, [r6, #36]	; 0x24
 800ddb6:	d104      	bne.n	800ddc2 <_Balloc+0x22>
 800ddb8:	2166      	movs	r1, #102	; 0x66
 800ddba:	4b19      	ldr	r3, [pc, #100]	; (800de20 <_Balloc+0x80>)
 800ddbc:	4819      	ldr	r0, [pc, #100]	; (800de24 <_Balloc+0x84>)
 800ddbe:	f000 fdb7 	bl	800e930 <__assert_func>
 800ddc2:	6045      	str	r5, [r0, #4]
 800ddc4:	6085      	str	r5, [r0, #8]
 800ddc6:	6005      	str	r5, [r0, #0]
 800ddc8:	60c5      	str	r5, [r0, #12]
 800ddca:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800ddcc:	68eb      	ldr	r3, [r5, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d013      	beq.n	800ddfa <_Balloc+0x5a>
 800ddd2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ddd4:	00a2      	lsls	r2, r4, #2
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	189b      	adds	r3, r3, r2
 800ddda:	6818      	ldr	r0, [r3, #0]
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d118      	bne.n	800de12 <_Balloc+0x72>
 800dde0:	2101      	movs	r1, #1
 800dde2:	000d      	movs	r5, r1
 800dde4:	40a5      	lsls	r5, r4
 800dde6:	1d6a      	adds	r2, r5, #5
 800dde8:	0030      	movs	r0, r6
 800ddea:	0092      	lsls	r2, r2, #2
 800ddec:	f000 fb76 	bl	800e4dc <_calloc_r>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d00c      	beq.n	800de0e <_Balloc+0x6e>
 800ddf4:	6044      	str	r4, [r0, #4]
 800ddf6:	6085      	str	r5, [r0, #8]
 800ddf8:	e00d      	b.n	800de16 <_Balloc+0x76>
 800ddfa:	2221      	movs	r2, #33	; 0x21
 800ddfc:	2104      	movs	r1, #4
 800ddfe:	0030      	movs	r0, r6
 800de00:	f000 fb6c 	bl	800e4dc <_calloc_r>
 800de04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800de06:	60e8      	str	r0, [r5, #12]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1e1      	bne.n	800ddd2 <_Balloc+0x32>
 800de0e:	2000      	movs	r0, #0
 800de10:	bd70      	pop	{r4, r5, r6, pc}
 800de12:	6802      	ldr	r2, [r0, #0]
 800de14:	601a      	str	r2, [r3, #0]
 800de16:	2300      	movs	r3, #0
 800de18:	6103      	str	r3, [r0, #16]
 800de1a:	60c3      	str	r3, [r0, #12]
 800de1c:	e7f8      	b.n	800de10 <_Balloc+0x70>
 800de1e:	46c0      	nop			; (mov r8, r8)
 800de20:	08012239 	.word	0x08012239
 800de24:	080122c0 	.word	0x080122c0

0800de28 <_Bfree>:
 800de28:	b570      	push	{r4, r5, r6, lr}
 800de2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de2c:	0005      	movs	r5, r0
 800de2e:	000c      	movs	r4, r1
 800de30:	2e00      	cmp	r6, #0
 800de32:	d10e      	bne.n	800de52 <_Bfree+0x2a>
 800de34:	2010      	movs	r0, #16
 800de36:	f7ff ff9d 	bl	800dd74 <malloc>
 800de3a:	1e02      	subs	r2, r0, #0
 800de3c:	6268      	str	r0, [r5, #36]	; 0x24
 800de3e:	d104      	bne.n	800de4a <_Bfree+0x22>
 800de40:	218a      	movs	r1, #138	; 0x8a
 800de42:	4b09      	ldr	r3, [pc, #36]	; (800de68 <_Bfree+0x40>)
 800de44:	4809      	ldr	r0, [pc, #36]	; (800de6c <_Bfree+0x44>)
 800de46:	f000 fd73 	bl	800e930 <__assert_func>
 800de4a:	6046      	str	r6, [r0, #4]
 800de4c:	6086      	str	r6, [r0, #8]
 800de4e:	6006      	str	r6, [r0, #0]
 800de50:	60c6      	str	r6, [r0, #12]
 800de52:	2c00      	cmp	r4, #0
 800de54:	d007      	beq.n	800de66 <_Bfree+0x3e>
 800de56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800de58:	6862      	ldr	r2, [r4, #4]
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	0092      	lsls	r2, r2, #2
 800de5e:	189b      	adds	r3, r3, r2
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	6022      	str	r2, [r4, #0]
 800de64:	601c      	str	r4, [r3, #0]
 800de66:	bd70      	pop	{r4, r5, r6, pc}
 800de68:	08012239 	.word	0x08012239
 800de6c:	080122c0 	.word	0x080122c0

0800de70 <__multadd>:
 800de70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de72:	000e      	movs	r6, r1
 800de74:	9001      	str	r0, [sp, #4]
 800de76:	000c      	movs	r4, r1
 800de78:	001d      	movs	r5, r3
 800de7a:	2000      	movs	r0, #0
 800de7c:	690f      	ldr	r7, [r1, #16]
 800de7e:	3614      	adds	r6, #20
 800de80:	6833      	ldr	r3, [r6, #0]
 800de82:	3001      	adds	r0, #1
 800de84:	b299      	uxth	r1, r3
 800de86:	4351      	muls	r1, r2
 800de88:	0c1b      	lsrs	r3, r3, #16
 800de8a:	4353      	muls	r3, r2
 800de8c:	1949      	adds	r1, r1, r5
 800de8e:	0c0d      	lsrs	r5, r1, #16
 800de90:	195b      	adds	r3, r3, r5
 800de92:	0c1d      	lsrs	r5, r3, #16
 800de94:	b289      	uxth	r1, r1
 800de96:	041b      	lsls	r3, r3, #16
 800de98:	185b      	adds	r3, r3, r1
 800de9a:	c608      	stmia	r6!, {r3}
 800de9c:	4287      	cmp	r7, r0
 800de9e:	dcef      	bgt.n	800de80 <__multadd+0x10>
 800dea0:	2d00      	cmp	r5, #0
 800dea2:	d022      	beq.n	800deea <__multadd+0x7a>
 800dea4:	68a3      	ldr	r3, [r4, #8]
 800dea6:	42bb      	cmp	r3, r7
 800dea8:	dc19      	bgt.n	800dede <__multadd+0x6e>
 800deaa:	6863      	ldr	r3, [r4, #4]
 800deac:	9801      	ldr	r0, [sp, #4]
 800deae:	1c59      	adds	r1, r3, #1
 800deb0:	f7ff ff76 	bl	800dda0 <_Balloc>
 800deb4:	1e06      	subs	r6, r0, #0
 800deb6:	d105      	bne.n	800dec4 <__multadd+0x54>
 800deb8:	0002      	movs	r2, r0
 800deba:	21b5      	movs	r1, #181	; 0xb5
 800debc:	4b0c      	ldr	r3, [pc, #48]	; (800def0 <__multadd+0x80>)
 800debe:	480d      	ldr	r0, [pc, #52]	; (800def4 <__multadd+0x84>)
 800dec0:	f000 fd36 	bl	800e930 <__assert_func>
 800dec4:	0021      	movs	r1, r4
 800dec6:	6923      	ldr	r3, [r4, #16]
 800dec8:	310c      	adds	r1, #12
 800deca:	1c9a      	adds	r2, r3, #2
 800decc:	0092      	lsls	r2, r2, #2
 800dece:	300c      	adds	r0, #12
 800ded0:	f7fe fbf6 	bl	800c6c0 <memcpy>
 800ded4:	0021      	movs	r1, r4
 800ded6:	9801      	ldr	r0, [sp, #4]
 800ded8:	f7ff ffa6 	bl	800de28 <_Bfree>
 800dedc:	0034      	movs	r4, r6
 800dede:	1d3b      	adds	r3, r7, #4
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	18e3      	adds	r3, r4, r3
 800dee4:	605d      	str	r5, [r3, #4]
 800dee6:	1c7b      	adds	r3, r7, #1
 800dee8:	6123      	str	r3, [r4, #16]
 800deea:	0020      	movs	r0, r4
 800deec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800deee:	46c0      	nop			; (mov r8, r8)
 800def0:	080122af 	.word	0x080122af
 800def4:	080122c0 	.word	0x080122c0

0800def8 <__hi0bits>:
 800def8:	0003      	movs	r3, r0
 800defa:	0c02      	lsrs	r2, r0, #16
 800defc:	2000      	movs	r0, #0
 800defe:	4282      	cmp	r2, r0
 800df00:	d101      	bne.n	800df06 <__hi0bits+0xe>
 800df02:	041b      	lsls	r3, r3, #16
 800df04:	3010      	adds	r0, #16
 800df06:	0e1a      	lsrs	r2, r3, #24
 800df08:	d101      	bne.n	800df0e <__hi0bits+0x16>
 800df0a:	3008      	adds	r0, #8
 800df0c:	021b      	lsls	r3, r3, #8
 800df0e:	0f1a      	lsrs	r2, r3, #28
 800df10:	d101      	bne.n	800df16 <__hi0bits+0x1e>
 800df12:	3004      	adds	r0, #4
 800df14:	011b      	lsls	r3, r3, #4
 800df16:	0f9a      	lsrs	r2, r3, #30
 800df18:	d101      	bne.n	800df1e <__hi0bits+0x26>
 800df1a:	3002      	adds	r0, #2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	2b00      	cmp	r3, #0
 800df20:	db03      	blt.n	800df2a <__hi0bits+0x32>
 800df22:	3001      	adds	r0, #1
 800df24:	005b      	lsls	r3, r3, #1
 800df26:	d400      	bmi.n	800df2a <__hi0bits+0x32>
 800df28:	2020      	movs	r0, #32
 800df2a:	4770      	bx	lr

0800df2c <__lo0bits>:
 800df2c:	6803      	ldr	r3, [r0, #0]
 800df2e:	0002      	movs	r2, r0
 800df30:	2107      	movs	r1, #7
 800df32:	0018      	movs	r0, r3
 800df34:	4008      	ands	r0, r1
 800df36:	420b      	tst	r3, r1
 800df38:	d00d      	beq.n	800df56 <__lo0bits+0x2a>
 800df3a:	3906      	subs	r1, #6
 800df3c:	2000      	movs	r0, #0
 800df3e:	420b      	tst	r3, r1
 800df40:	d105      	bne.n	800df4e <__lo0bits+0x22>
 800df42:	3002      	adds	r0, #2
 800df44:	4203      	tst	r3, r0
 800df46:	d003      	beq.n	800df50 <__lo0bits+0x24>
 800df48:	40cb      	lsrs	r3, r1
 800df4a:	0008      	movs	r0, r1
 800df4c:	6013      	str	r3, [r2, #0]
 800df4e:	4770      	bx	lr
 800df50:	089b      	lsrs	r3, r3, #2
 800df52:	6013      	str	r3, [r2, #0]
 800df54:	e7fb      	b.n	800df4e <__lo0bits+0x22>
 800df56:	b299      	uxth	r1, r3
 800df58:	2900      	cmp	r1, #0
 800df5a:	d101      	bne.n	800df60 <__lo0bits+0x34>
 800df5c:	2010      	movs	r0, #16
 800df5e:	0c1b      	lsrs	r3, r3, #16
 800df60:	b2d9      	uxtb	r1, r3
 800df62:	2900      	cmp	r1, #0
 800df64:	d101      	bne.n	800df6a <__lo0bits+0x3e>
 800df66:	3008      	adds	r0, #8
 800df68:	0a1b      	lsrs	r3, r3, #8
 800df6a:	0719      	lsls	r1, r3, #28
 800df6c:	d101      	bne.n	800df72 <__lo0bits+0x46>
 800df6e:	3004      	adds	r0, #4
 800df70:	091b      	lsrs	r3, r3, #4
 800df72:	0799      	lsls	r1, r3, #30
 800df74:	d101      	bne.n	800df7a <__lo0bits+0x4e>
 800df76:	3002      	adds	r0, #2
 800df78:	089b      	lsrs	r3, r3, #2
 800df7a:	07d9      	lsls	r1, r3, #31
 800df7c:	d4e9      	bmi.n	800df52 <__lo0bits+0x26>
 800df7e:	3001      	adds	r0, #1
 800df80:	085b      	lsrs	r3, r3, #1
 800df82:	d1e6      	bne.n	800df52 <__lo0bits+0x26>
 800df84:	2020      	movs	r0, #32
 800df86:	e7e2      	b.n	800df4e <__lo0bits+0x22>

0800df88 <__i2b>:
 800df88:	b510      	push	{r4, lr}
 800df8a:	000c      	movs	r4, r1
 800df8c:	2101      	movs	r1, #1
 800df8e:	f7ff ff07 	bl	800dda0 <_Balloc>
 800df92:	2800      	cmp	r0, #0
 800df94:	d106      	bne.n	800dfa4 <__i2b+0x1c>
 800df96:	21a0      	movs	r1, #160	; 0xa0
 800df98:	0002      	movs	r2, r0
 800df9a:	4b04      	ldr	r3, [pc, #16]	; (800dfac <__i2b+0x24>)
 800df9c:	4804      	ldr	r0, [pc, #16]	; (800dfb0 <__i2b+0x28>)
 800df9e:	0049      	lsls	r1, r1, #1
 800dfa0:	f000 fcc6 	bl	800e930 <__assert_func>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	6144      	str	r4, [r0, #20]
 800dfa8:	6103      	str	r3, [r0, #16]
 800dfaa:	bd10      	pop	{r4, pc}
 800dfac:	080122af 	.word	0x080122af
 800dfb0:	080122c0 	.word	0x080122c0

0800dfb4 <__multiply>:
 800dfb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfb6:	690b      	ldr	r3, [r1, #16]
 800dfb8:	0014      	movs	r4, r2
 800dfba:	6912      	ldr	r2, [r2, #16]
 800dfbc:	000d      	movs	r5, r1
 800dfbe:	b089      	sub	sp, #36	; 0x24
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	da01      	bge.n	800dfc8 <__multiply+0x14>
 800dfc4:	0025      	movs	r5, r4
 800dfc6:	000c      	movs	r4, r1
 800dfc8:	692f      	ldr	r7, [r5, #16]
 800dfca:	6926      	ldr	r6, [r4, #16]
 800dfcc:	6869      	ldr	r1, [r5, #4]
 800dfce:	19bb      	adds	r3, r7, r6
 800dfd0:	9302      	str	r3, [sp, #8]
 800dfd2:	68ab      	ldr	r3, [r5, #8]
 800dfd4:	19ba      	adds	r2, r7, r6
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	da00      	bge.n	800dfdc <__multiply+0x28>
 800dfda:	3101      	adds	r1, #1
 800dfdc:	f7ff fee0 	bl	800dda0 <_Balloc>
 800dfe0:	9001      	str	r0, [sp, #4]
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d106      	bne.n	800dff4 <__multiply+0x40>
 800dfe6:	215e      	movs	r1, #94	; 0x5e
 800dfe8:	0002      	movs	r2, r0
 800dfea:	4b48      	ldr	r3, [pc, #288]	; (800e10c <__multiply+0x158>)
 800dfec:	4848      	ldr	r0, [pc, #288]	; (800e110 <__multiply+0x15c>)
 800dfee:	31ff      	adds	r1, #255	; 0xff
 800dff0:	f000 fc9e 	bl	800e930 <__assert_func>
 800dff4:	9b01      	ldr	r3, [sp, #4]
 800dff6:	2200      	movs	r2, #0
 800dff8:	3314      	adds	r3, #20
 800dffa:	469c      	mov	ip, r3
 800dffc:	19bb      	adds	r3, r7, r6
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4463      	add	r3, ip
 800e002:	9303      	str	r3, [sp, #12]
 800e004:	4663      	mov	r3, ip
 800e006:	9903      	ldr	r1, [sp, #12]
 800e008:	428b      	cmp	r3, r1
 800e00a:	d32c      	bcc.n	800e066 <__multiply+0xb2>
 800e00c:	002b      	movs	r3, r5
 800e00e:	0022      	movs	r2, r4
 800e010:	3314      	adds	r3, #20
 800e012:	00bf      	lsls	r7, r7, #2
 800e014:	3214      	adds	r2, #20
 800e016:	9306      	str	r3, [sp, #24]
 800e018:	00b6      	lsls	r6, r6, #2
 800e01a:	19db      	adds	r3, r3, r7
 800e01c:	9304      	str	r3, [sp, #16]
 800e01e:	1993      	adds	r3, r2, r6
 800e020:	9307      	str	r3, [sp, #28]
 800e022:	2304      	movs	r3, #4
 800e024:	9305      	str	r3, [sp, #20]
 800e026:	002b      	movs	r3, r5
 800e028:	9904      	ldr	r1, [sp, #16]
 800e02a:	3315      	adds	r3, #21
 800e02c:	9200      	str	r2, [sp, #0]
 800e02e:	4299      	cmp	r1, r3
 800e030:	d305      	bcc.n	800e03e <__multiply+0x8a>
 800e032:	1b4b      	subs	r3, r1, r5
 800e034:	3b15      	subs	r3, #21
 800e036:	089b      	lsrs	r3, r3, #2
 800e038:	3301      	adds	r3, #1
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	9305      	str	r3, [sp, #20]
 800e03e:	9b07      	ldr	r3, [sp, #28]
 800e040:	9a00      	ldr	r2, [sp, #0]
 800e042:	429a      	cmp	r2, r3
 800e044:	d311      	bcc.n	800e06a <__multiply+0xb6>
 800e046:	9b02      	ldr	r3, [sp, #8]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	dd06      	ble.n	800e05a <__multiply+0xa6>
 800e04c:	9b03      	ldr	r3, [sp, #12]
 800e04e:	3b04      	subs	r3, #4
 800e050:	9303      	str	r3, [sp, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	9300      	str	r3, [sp, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d054      	beq.n	800e104 <__multiply+0x150>
 800e05a:	9b01      	ldr	r3, [sp, #4]
 800e05c:	9a02      	ldr	r2, [sp, #8]
 800e05e:	0018      	movs	r0, r3
 800e060:	611a      	str	r2, [r3, #16]
 800e062:	b009      	add	sp, #36	; 0x24
 800e064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e066:	c304      	stmia	r3!, {r2}
 800e068:	e7cd      	b.n	800e006 <__multiply+0x52>
 800e06a:	9b00      	ldr	r3, [sp, #0]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	b298      	uxth	r0, r3
 800e070:	2800      	cmp	r0, #0
 800e072:	d01c      	beq.n	800e0ae <__multiply+0xfa>
 800e074:	4667      	mov	r7, ip
 800e076:	2400      	movs	r4, #0
 800e078:	9e06      	ldr	r6, [sp, #24]
 800e07a:	ce02      	ldmia	r6!, {r1}
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	b28b      	uxth	r3, r1
 800e080:	4343      	muls	r3, r0
 800e082:	0c09      	lsrs	r1, r1, #16
 800e084:	4341      	muls	r1, r0
 800e086:	b292      	uxth	r2, r2
 800e088:	189b      	adds	r3, r3, r2
 800e08a:	191b      	adds	r3, r3, r4
 800e08c:	000c      	movs	r4, r1
 800e08e:	683a      	ldr	r2, [r7, #0]
 800e090:	0c11      	lsrs	r1, r2, #16
 800e092:	1861      	adds	r1, r4, r1
 800e094:	0c1c      	lsrs	r4, r3, #16
 800e096:	1909      	adds	r1, r1, r4
 800e098:	0c0c      	lsrs	r4, r1, #16
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	0409      	lsls	r1, r1, #16
 800e09e:	430b      	orrs	r3, r1
 800e0a0:	c708      	stmia	r7!, {r3}
 800e0a2:	9b04      	ldr	r3, [sp, #16]
 800e0a4:	42b3      	cmp	r3, r6
 800e0a6:	d8e8      	bhi.n	800e07a <__multiply+0xc6>
 800e0a8:	4663      	mov	r3, ip
 800e0aa:	9a05      	ldr	r2, [sp, #20]
 800e0ac:	509c      	str	r4, [r3, r2]
 800e0ae:	9b00      	ldr	r3, [sp, #0]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	0c1e      	lsrs	r6, r3, #16
 800e0b4:	d020      	beq.n	800e0f8 <__multiply+0x144>
 800e0b6:	4663      	mov	r3, ip
 800e0b8:	002c      	movs	r4, r5
 800e0ba:	4660      	mov	r0, ip
 800e0bc:	2700      	movs	r7, #0
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	3414      	adds	r4, #20
 800e0c2:	6822      	ldr	r2, [r4, #0]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	b291      	uxth	r1, r2
 800e0c8:	4371      	muls	r1, r6
 800e0ca:	6802      	ldr	r2, [r0, #0]
 800e0cc:	0c12      	lsrs	r2, r2, #16
 800e0ce:	1889      	adds	r1, r1, r2
 800e0d0:	19cf      	adds	r7, r1, r7
 800e0d2:	0439      	lsls	r1, r7, #16
 800e0d4:	430b      	orrs	r3, r1
 800e0d6:	6003      	str	r3, [r0, #0]
 800e0d8:	cc02      	ldmia	r4!, {r1}
 800e0da:	6843      	ldr	r3, [r0, #4]
 800e0dc:	0c09      	lsrs	r1, r1, #16
 800e0de:	4371      	muls	r1, r6
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	0c3f      	lsrs	r7, r7, #16
 800e0e4:	18cb      	adds	r3, r1, r3
 800e0e6:	9a04      	ldr	r2, [sp, #16]
 800e0e8:	19db      	adds	r3, r3, r7
 800e0ea:	0c1f      	lsrs	r7, r3, #16
 800e0ec:	3004      	adds	r0, #4
 800e0ee:	42a2      	cmp	r2, r4
 800e0f0:	d8e7      	bhi.n	800e0c2 <__multiply+0x10e>
 800e0f2:	4662      	mov	r2, ip
 800e0f4:	9905      	ldr	r1, [sp, #20]
 800e0f6:	5053      	str	r3, [r2, r1]
 800e0f8:	9b00      	ldr	r3, [sp, #0]
 800e0fa:	3304      	adds	r3, #4
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	2304      	movs	r3, #4
 800e100:	449c      	add	ip, r3
 800e102:	e79c      	b.n	800e03e <__multiply+0x8a>
 800e104:	9b02      	ldr	r3, [sp, #8]
 800e106:	3b01      	subs	r3, #1
 800e108:	9302      	str	r3, [sp, #8]
 800e10a:	e79c      	b.n	800e046 <__multiply+0x92>
 800e10c:	080122af 	.word	0x080122af
 800e110:	080122c0 	.word	0x080122c0

0800e114 <__pow5mult>:
 800e114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e116:	2303      	movs	r3, #3
 800e118:	0015      	movs	r5, r2
 800e11a:	0007      	movs	r7, r0
 800e11c:	000e      	movs	r6, r1
 800e11e:	401a      	ands	r2, r3
 800e120:	421d      	tst	r5, r3
 800e122:	d008      	beq.n	800e136 <__pow5mult+0x22>
 800e124:	4925      	ldr	r1, [pc, #148]	; (800e1bc <__pow5mult+0xa8>)
 800e126:	3a01      	subs	r2, #1
 800e128:	0092      	lsls	r2, r2, #2
 800e12a:	5852      	ldr	r2, [r2, r1]
 800e12c:	2300      	movs	r3, #0
 800e12e:	0031      	movs	r1, r6
 800e130:	f7ff fe9e 	bl	800de70 <__multadd>
 800e134:	0006      	movs	r6, r0
 800e136:	10ad      	asrs	r5, r5, #2
 800e138:	d03d      	beq.n	800e1b6 <__pow5mult+0xa2>
 800e13a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e13c:	2c00      	cmp	r4, #0
 800e13e:	d10f      	bne.n	800e160 <__pow5mult+0x4c>
 800e140:	2010      	movs	r0, #16
 800e142:	f7ff fe17 	bl	800dd74 <malloc>
 800e146:	1e02      	subs	r2, r0, #0
 800e148:	6278      	str	r0, [r7, #36]	; 0x24
 800e14a:	d105      	bne.n	800e158 <__pow5mult+0x44>
 800e14c:	21d7      	movs	r1, #215	; 0xd7
 800e14e:	4b1c      	ldr	r3, [pc, #112]	; (800e1c0 <__pow5mult+0xac>)
 800e150:	481c      	ldr	r0, [pc, #112]	; (800e1c4 <__pow5mult+0xb0>)
 800e152:	0049      	lsls	r1, r1, #1
 800e154:	f000 fbec 	bl	800e930 <__assert_func>
 800e158:	6044      	str	r4, [r0, #4]
 800e15a:	6084      	str	r4, [r0, #8]
 800e15c:	6004      	str	r4, [r0, #0]
 800e15e:	60c4      	str	r4, [r0, #12]
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	689c      	ldr	r4, [r3, #8]
 800e164:	9301      	str	r3, [sp, #4]
 800e166:	2c00      	cmp	r4, #0
 800e168:	d108      	bne.n	800e17c <__pow5mult+0x68>
 800e16a:	0038      	movs	r0, r7
 800e16c:	4916      	ldr	r1, [pc, #88]	; (800e1c8 <__pow5mult+0xb4>)
 800e16e:	f7ff ff0b 	bl	800df88 <__i2b>
 800e172:	9b01      	ldr	r3, [sp, #4]
 800e174:	0004      	movs	r4, r0
 800e176:	6098      	str	r0, [r3, #8]
 800e178:	2300      	movs	r3, #0
 800e17a:	6003      	str	r3, [r0, #0]
 800e17c:	2301      	movs	r3, #1
 800e17e:	421d      	tst	r5, r3
 800e180:	d00a      	beq.n	800e198 <__pow5mult+0x84>
 800e182:	0031      	movs	r1, r6
 800e184:	0022      	movs	r2, r4
 800e186:	0038      	movs	r0, r7
 800e188:	f7ff ff14 	bl	800dfb4 <__multiply>
 800e18c:	0031      	movs	r1, r6
 800e18e:	9001      	str	r0, [sp, #4]
 800e190:	0038      	movs	r0, r7
 800e192:	f7ff fe49 	bl	800de28 <_Bfree>
 800e196:	9e01      	ldr	r6, [sp, #4]
 800e198:	106d      	asrs	r5, r5, #1
 800e19a:	d00c      	beq.n	800e1b6 <__pow5mult+0xa2>
 800e19c:	6820      	ldr	r0, [r4, #0]
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d107      	bne.n	800e1b2 <__pow5mult+0x9e>
 800e1a2:	0022      	movs	r2, r4
 800e1a4:	0021      	movs	r1, r4
 800e1a6:	0038      	movs	r0, r7
 800e1a8:	f7ff ff04 	bl	800dfb4 <__multiply>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	6020      	str	r0, [r4, #0]
 800e1b0:	6003      	str	r3, [r0, #0]
 800e1b2:	0004      	movs	r4, r0
 800e1b4:	e7e2      	b.n	800e17c <__pow5mult+0x68>
 800e1b6:	0030      	movs	r0, r6
 800e1b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e1ba:	46c0      	nop			; (mov r8, r8)
 800e1bc:	08012410 	.word	0x08012410
 800e1c0:	08012239 	.word	0x08012239
 800e1c4:	080122c0 	.word	0x080122c0
 800e1c8:	00000271 	.word	0x00000271

0800e1cc <__lshift>:
 800e1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ce:	000c      	movs	r4, r1
 800e1d0:	0017      	movs	r7, r2
 800e1d2:	6923      	ldr	r3, [r4, #16]
 800e1d4:	1155      	asrs	r5, r2, #5
 800e1d6:	b087      	sub	sp, #28
 800e1d8:	18eb      	adds	r3, r5, r3
 800e1da:	9302      	str	r3, [sp, #8]
 800e1dc:	3301      	adds	r3, #1
 800e1de:	9301      	str	r3, [sp, #4]
 800e1e0:	6849      	ldr	r1, [r1, #4]
 800e1e2:	68a3      	ldr	r3, [r4, #8]
 800e1e4:	9004      	str	r0, [sp, #16]
 800e1e6:	9a01      	ldr	r2, [sp, #4]
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	db11      	blt.n	800e210 <__lshift+0x44>
 800e1ec:	9804      	ldr	r0, [sp, #16]
 800e1ee:	f7ff fdd7 	bl	800dda0 <_Balloc>
 800e1f2:	0002      	movs	r2, r0
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	3214      	adds	r2, #20
 800e1f8:	0006      	movs	r6, r0
 800e1fa:	0011      	movs	r1, r2
 800e1fc:	9203      	str	r2, [sp, #12]
 800e1fe:	4298      	cmp	r0, r3
 800e200:	d10d      	bne.n	800e21e <__lshift+0x52>
 800e202:	21da      	movs	r1, #218	; 0xda
 800e204:	0002      	movs	r2, r0
 800e206:	4b27      	ldr	r3, [pc, #156]	; (800e2a4 <__lshift+0xd8>)
 800e208:	4827      	ldr	r0, [pc, #156]	; (800e2a8 <__lshift+0xdc>)
 800e20a:	31ff      	adds	r1, #255	; 0xff
 800e20c:	f000 fb90 	bl	800e930 <__assert_func>
 800e210:	3101      	adds	r1, #1
 800e212:	005b      	lsls	r3, r3, #1
 800e214:	e7e7      	b.n	800e1e6 <__lshift+0x1a>
 800e216:	2200      	movs	r2, #0
 800e218:	0098      	lsls	r0, r3, #2
 800e21a:	500a      	str	r2, [r1, r0]
 800e21c:	3301      	adds	r3, #1
 800e21e:	42ab      	cmp	r3, r5
 800e220:	dbf9      	blt.n	800e216 <__lshift+0x4a>
 800e222:	43eb      	mvns	r3, r5
 800e224:	17db      	asrs	r3, r3, #31
 800e226:	401d      	ands	r5, r3
 800e228:	9b03      	ldr	r3, [sp, #12]
 800e22a:	00ad      	lsls	r5, r5, #2
 800e22c:	211f      	movs	r1, #31
 800e22e:	0038      	movs	r0, r7
 800e230:	195d      	adds	r5, r3, r5
 800e232:	0023      	movs	r3, r4
 800e234:	6922      	ldr	r2, [r4, #16]
 800e236:	3314      	adds	r3, #20
 800e238:	0092      	lsls	r2, r2, #2
 800e23a:	4008      	ands	r0, r1
 800e23c:	4684      	mov	ip, r0
 800e23e:	189a      	adds	r2, r3, r2
 800e240:	420f      	tst	r7, r1
 800e242:	d02a      	beq.n	800e29a <__lshift+0xce>
 800e244:	3101      	adds	r1, #1
 800e246:	1a09      	subs	r1, r1, r0
 800e248:	9105      	str	r1, [sp, #20]
 800e24a:	2100      	movs	r1, #0
 800e24c:	9503      	str	r5, [sp, #12]
 800e24e:	4667      	mov	r7, ip
 800e250:	6818      	ldr	r0, [r3, #0]
 800e252:	40b8      	lsls	r0, r7
 800e254:	4301      	orrs	r1, r0
 800e256:	9803      	ldr	r0, [sp, #12]
 800e258:	c002      	stmia	r0!, {r1}
 800e25a:	cb02      	ldmia	r3!, {r1}
 800e25c:	9003      	str	r0, [sp, #12]
 800e25e:	9805      	ldr	r0, [sp, #20]
 800e260:	40c1      	lsrs	r1, r0
 800e262:	429a      	cmp	r2, r3
 800e264:	d8f3      	bhi.n	800e24e <__lshift+0x82>
 800e266:	0020      	movs	r0, r4
 800e268:	3015      	adds	r0, #21
 800e26a:	2304      	movs	r3, #4
 800e26c:	4282      	cmp	r2, r0
 800e26e:	d304      	bcc.n	800e27a <__lshift+0xae>
 800e270:	1b13      	subs	r3, r2, r4
 800e272:	3b15      	subs	r3, #21
 800e274:	089b      	lsrs	r3, r3, #2
 800e276:	3301      	adds	r3, #1
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	50e9      	str	r1, [r5, r3]
 800e27c:	2900      	cmp	r1, #0
 800e27e:	d002      	beq.n	800e286 <__lshift+0xba>
 800e280:	9b02      	ldr	r3, [sp, #8]
 800e282:	3302      	adds	r3, #2
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	9804      	ldr	r0, [sp, #16]
 800e28a:	3b01      	subs	r3, #1
 800e28c:	0021      	movs	r1, r4
 800e28e:	6133      	str	r3, [r6, #16]
 800e290:	f7ff fdca 	bl	800de28 <_Bfree>
 800e294:	0030      	movs	r0, r6
 800e296:	b007      	add	sp, #28
 800e298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e29a:	cb02      	ldmia	r3!, {r1}
 800e29c:	c502      	stmia	r5!, {r1}
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d8fb      	bhi.n	800e29a <__lshift+0xce>
 800e2a2:	e7f0      	b.n	800e286 <__lshift+0xba>
 800e2a4:	080122af 	.word	0x080122af
 800e2a8:	080122c0 	.word	0x080122c0

0800e2ac <__mcmp>:
 800e2ac:	6902      	ldr	r2, [r0, #16]
 800e2ae:	690b      	ldr	r3, [r1, #16]
 800e2b0:	b530      	push	{r4, r5, lr}
 800e2b2:	0004      	movs	r4, r0
 800e2b4:	1ad0      	subs	r0, r2, r3
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d10d      	bne.n	800e2d6 <__mcmp+0x2a>
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	3414      	adds	r4, #20
 800e2be:	3114      	adds	r1, #20
 800e2c0:	18e2      	adds	r2, r4, r3
 800e2c2:	18c9      	adds	r1, r1, r3
 800e2c4:	3a04      	subs	r2, #4
 800e2c6:	3904      	subs	r1, #4
 800e2c8:	6815      	ldr	r5, [r2, #0]
 800e2ca:	680b      	ldr	r3, [r1, #0]
 800e2cc:	429d      	cmp	r5, r3
 800e2ce:	d003      	beq.n	800e2d8 <__mcmp+0x2c>
 800e2d0:	2001      	movs	r0, #1
 800e2d2:	429d      	cmp	r5, r3
 800e2d4:	d303      	bcc.n	800e2de <__mcmp+0x32>
 800e2d6:	bd30      	pop	{r4, r5, pc}
 800e2d8:	4294      	cmp	r4, r2
 800e2da:	d3f3      	bcc.n	800e2c4 <__mcmp+0x18>
 800e2dc:	e7fb      	b.n	800e2d6 <__mcmp+0x2a>
 800e2de:	4240      	negs	r0, r0
 800e2e0:	e7f9      	b.n	800e2d6 <__mcmp+0x2a>
	...

0800e2e4 <__mdiff>:
 800e2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2e6:	000e      	movs	r6, r1
 800e2e8:	0007      	movs	r7, r0
 800e2ea:	0011      	movs	r1, r2
 800e2ec:	0030      	movs	r0, r6
 800e2ee:	b087      	sub	sp, #28
 800e2f0:	0014      	movs	r4, r2
 800e2f2:	f7ff ffdb 	bl	800e2ac <__mcmp>
 800e2f6:	1e05      	subs	r5, r0, #0
 800e2f8:	d110      	bne.n	800e31c <__mdiff+0x38>
 800e2fa:	0001      	movs	r1, r0
 800e2fc:	0038      	movs	r0, r7
 800e2fe:	f7ff fd4f 	bl	800dda0 <_Balloc>
 800e302:	1e02      	subs	r2, r0, #0
 800e304:	d104      	bne.n	800e310 <__mdiff+0x2c>
 800e306:	4b40      	ldr	r3, [pc, #256]	; (800e408 <__mdiff+0x124>)
 800e308:	4940      	ldr	r1, [pc, #256]	; (800e40c <__mdiff+0x128>)
 800e30a:	4841      	ldr	r0, [pc, #260]	; (800e410 <__mdiff+0x12c>)
 800e30c:	f000 fb10 	bl	800e930 <__assert_func>
 800e310:	2301      	movs	r3, #1
 800e312:	6145      	str	r5, [r0, #20]
 800e314:	6103      	str	r3, [r0, #16]
 800e316:	0010      	movs	r0, r2
 800e318:	b007      	add	sp, #28
 800e31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e31c:	2301      	movs	r3, #1
 800e31e:	9301      	str	r3, [sp, #4]
 800e320:	2800      	cmp	r0, #0
 800e322:	db04      	blt.n	800e32e <__mdiff+0x4a>
 800e324:	0023      	movs	r3, r4
 800e326:	0034      	movs	r4, r6
 800e328:	001e      	movs	r6, r3
 800e32a:	2300      	movs	r3, #0
 800e32c:	9301      	str	r3, [sp, #4]
 800e32e:	0038      	movs	r0, r7
 800e330:	6861      	ldr	r1, [r4, #4]
 800e332:	f7ff fd35 	bl	800dda0 <_Balloc>
 800e336:	1e02      	subs	r2, r0, #0
 800e338:	d103      	bne.n	800e342 <__mdiff+0x5e>
 800e33a:	2190      	movs	r1, #144	; 0x90
 800e33c:	4b32      	ldr	r3, [pc, #200]	; (800e408 <__mdiff+0x124>)
 800e33e:	0089      	lsls	r1, r1, #2
 800e340:	e7e3      	b.n	800e30a <__mdiff+0x26>
 800e342:	9b01      	ldr	r3, [sp, #4]
 800e344:	2700      	movs	r7, #0
 800e346:	60c3      	str	r3, [r0, #12]
 800e348:	6920      	ldr	r0, [r4, #16]
 800e34a:	3414      	adds	r4, #20
 800e34c:	9401      	str	r4, [sp, #4]
 800e34e:	9b01      	ldr	r3, [sp, #4]
 800e350:	0084      	lsls	r4, r0, #2
 800e352:	191b      	adds	r3, r3, r4
 800e354:	0034      	movs	r4, r6
 800e356:	9302      	str	r3, [sp, #8]
 800e358:	6933      	ldr	r3, [r6, #16]
 800e35a:	3414      	adds	r4, #20
 800e35c:	0099      	lsls	r1, r3, #2
 800e35e:	1863      	adds	r3, r4, r1
 800e360:	9303      	str	r3, [sp, #12]
 800e362:	0013      	movs	r3, r2
 800e364:	3314      	adds	r3, #20
 800e366:	469c      	mov	ip, r3
 800e368:	9305      	str	r3, [sp, #20]
 800e36a:	9b01      	ldr	r3, [sp, #4]
 800e36c:	9304      	str	r3, [sp, #16]
 800e36e:	9b04      	ldr	r3, [sp, #16]
 800e370:	cc02      	ldmia	r4!, {r1}
 800e372:	cb20      	ldmia	r3!, {r5}
 800e374:	9304      	str	r3, [sp, #16]
 800e376:	b2ab      	uxth	r3, r5
 800e378:	19df      	adds	r7, r3, r7
 800e37a:	b28b      	uxth	r3, r1
 800e37c:	1afb      	subs	r3, r7, r3
 800e37e:	0c2d      	lsrs	r5, r5, #16
 800e380:	0c09      	lsrs	r1, r1, #16
 800e382:	1a69      	subs	r1, r5, r1
 800e384:	141d      	asrs	r5, r3, #16
 800e386:	1949      	adds	r1, r1, r5
 800e388:	140f      	asrs	r7, r1, #16
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	0409      	lsls	r1, r1, #16
 800e38e:	430b      	orrs	r3, r1
 800e390:	4661      	mov	r1, ip
 800e392:	c108      	stmia	r1!, {r3}
 800e394:	9b03      	ldr	r3, [sp, #12]
 800e396:	468c      	mov	ip, r1
 800e398:	42a3      	cmp	r3, r4
 800e39a:	d8e8      	bhi.n	800e36e <__mdiff+0x8a>
 800e39c:	0031      	movs	r1, r6
 800e39e:	9c03      	ldr	r4, [sp, #12]
 800e3a0:	3115      	adds	r1, #21
 800e3a2:	2304      	movs	r3, #4
 800e3a4:	428c      	cmp	r4, r1
 800e3a6:	d304      	bcc.n	800e3b2 <__mdiff+0xce>
 800e3a8:	1ba3      	subs	r3, r4, r6
 800e3aa:	3b15      	subs	r3, #21
 800e3ac:	089b      	lsrs	r3, r3, #2
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	9901      	ldr	r1, [sp, #4]
 800e3b4:	18cc      	adds	r4, r1, r3
 800e3b6:	9905      	ldr	r1, [sp, #20]
 800e3b8:	0026      	movs	r6, r4
 800e3ba:	18cb      	adds	r3, r1, r3
 800e3bc:	469c      	mov	ip, r3
 800e3be:	9902      	ldr	r1, [sp, #8]
 800e3c0:	428e      	cmp	r6, r1
 800e3c2:	d310      	bcc.n	800e3e6 <__mdiff+0x102>
 800e3c4:	9e02      	ldr	r6, [sp, #8]
 800e3c6:	1ee5      	subs	r5, r4, #3
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	42ae      	cmp	r6, r5
 800e3cc:	d304      	bcc.n	800e3d8 <__mdiff+0xf4>
 800e3ce:	0031      	movs	r1, r6
 800e3d0:	3103      	adds	r1, #3
 800e3d2:	1b09      	subs	r1, r1, r4
 800e3d4:	0889      	lsrs	r1, r1, #2
 800e3d6:	0089      	lsls	r1, r1, #2
 800e3d8:	185b      	adds	r3, r3, r1
 800e3da:	3b04      	subs	r3, #4
 800e3dc:	6819      	ldr	r1, [r3, #0]
 800e3de:	2900      	cmp	r1, #0
 800e3e0:	d00f      	beq.n	800e402 <__mdiff+0x11e>
 800e3e2:	6110      	str	r0, [r2, #16]
 800e3e4:	e797      	b.n	800e316 <__mdiff+0x32>
 800e3e6:	ce02      	ldmia	r6!, {r1}
 800e3e8:	b28d      	uxth	r5, r1
 800e3ea:	19ed      	adds	r5, r5, r7
 800e3ec:	0c0f      	lsrs	r7, r1, #16
 800e3ee:	1429      	asrs	r1, r5, #16
 800e3f0:	1879      	adds	r1, r7, r1
 800e3f2:	140f      	asrs	r7, r1, #16
 800e3f4:	b2ad      	uxth	r5, r5
 800e3f6:	0409      	lsls	r1, r1, #16
 800e3f8:	430d      	orrs	r5, r1
 800e3fa:	4661      	mov	r1, ip
 800e3fc:	c120      	stmia	r1!, {r5}
 800e3fe:	468c      	mov	ip, r1
 800e400:	e7dd      	b.n	800e3be <__mdiff+0xda>
 800e402:	3801      	subs	r0, #1
 800e404:	e7e9      	b.n	800e3da <__mdiff+0xf6>
 800e406:	46c0      	nop			; (mov r8, r8)
 800e408:	080122af 	.word	0x080122af
 800e40c:	00000232 	.word	0x00000232
 800e410:	080122c0 	.word	0x080122c0

0800e414 <__d2b>:
 800e414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e416:	2101      	movs	r1, #1
 800e418:	0014      	movs	r4, r2
 800e41a:	001e      	movs	r6, r3
 800e41c:	9f08      	ldr	r7, [sp, #32]
 800e41e:	f7ff fcbf 	bl	800dda0 <_Balloc>
 800e422:	1e05      	subs	r5, r0, #0
 800e424:	d105      	bne.n	800e432 <__d2b+0x1e>
 800e426:	0002      	movs	r2, r0
 800e428:	4b26      	ldr	r3, [pc, #152]	; (800e4c4 <__d2b+0xb0>)
 800e42a:	4927      	ldr	r1, [pc, #156]	; (800e4c8 <__d2b+0xb4>)
 800e42c:	4827      	ldr	r0, [pc, #156]	; (800e4cc <__d2b+0xb8>)
 800e42e:	f000 fa7f 	bl	800e930 <__assert_func>
 800e432:	0333      	lsls	r3, r6, #12
 800e434:	0076      	lsls	r6, r6, #1
 800e436:	0b1b      	lsrs	r3, r3, #12
 800e438:	0d76      	lsrs	r6, r6, #21
 800e43a:	d124      	bne.n	800e486 <__d2b+0x72>
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	2c00      	cmp	r4, #0
 800e440:	d027      	beq.n	800e492 <__d2b+0x7e>
 800e442:	4668      	mov	r0, sp
 800e444:	9400      	str	r4, [sp, #0]
 800e446:	f7ff fd71 	bl	800df2c <__lo0bits>
 800e44a:	9c00      	ldr	r4, [sp, #0]
 800e44c:	2800      	cmp	r0, #0
 800e44e:	d01e      	beq.n	800e48e <__d2b+0x7a>
 800e450:	9b01      	ldr	r3, [sp, #4]
 800e452:	2120      	movs	r1, #32
 800e454:	001a      	movs	r2, r3
 800e456:	1a09      	subs	r1, r1, r0
 800e458:	408a      	lsls	r2, r1
 800e45a:	40c3      	lsrs	r3, r0
 800e45c:	4322      	orrs	r2, r4
 800e45e:	616a      	str	r2, [r5, #20]
 800e460:	9301      	str	r3, [sp, #4]
 800e462:	9c01      	ldr	r4, [sp, #4]
 800e464:	61ac      	str	r4, [r5, #24]
 800e466:	1e63      	subs	r3, r4, #1
 800e468:	419c      	sbcs	r4, r3
 800e46a:	3401      	adds	r4, #1
 800e46c:	612c      	str	r4, [r5, #16]
 800e46e:	2e00      	cmp	r6, #0
 800e470:	d018      	beq.n	800e4a4 <__d2b+0x90>
 800e472:	4b17      	ldr	r3, [pc, #92]	; (800e4d0 <__d2b+0xbc>)
 800e474:	18f6      	adds	r6, r6, r3
 800e476:	2335      	movs	r3, #53	; 0x35
 800e478:	1836      	adds	r6, r6, r0
 800e47a:	1a18      	subs	r0, r3, r0
 800e47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e47e:	603e      	str	r6, [r7, #0]
 800e480:	6018      	str	r0, [r3, #0]
 800e482:	0028      	movs	r0, r5
 800e484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e486:	2280      	movs	r2, #128	; 0x80
 800e488:	0352      	lsls	r2, r2, #13
 800e48a:	4313      	orrs	r3, r2
 800e48c:	e7d6      	b.n	800e43c <__d2b+0x28>
 800e48e:	616c      	str	r4, [r5, #20]
 800e490:	e7e7      	b.n	800e462 <__d2b+0x4e>
 800e492:	a801      	add	r0, sp, #4
 800e494:	f7ff fd4a 	bl	800df2c <__lo0bits>
 800e498:	2401      	movs	r4, #1
 800e49a:	9b01      	ldr	r3, [sp, #4]
 800e49c:	612c      	str	r4, [r5, #16]
 800e49e:	616b      	str	r3, [r5, #20]
 800e4a0:	3020      	adds	r0, #32
 800e4a2:	e7e4      	b.n	800e46e <__d2b+0x5a>
 800e4a4:	4b0b      	ldr	r3, [pc, #44]	; (800e4d4 <__d2b+0xc0>)
 800e4a6:	18c0      	adds	r0, r0, r3
 800e4a8:	4b0b      	ldr	r3, [pc, #44]	; (800e4d8 <__d2b+0xc4>)
 800e4aa:	6038      	str	r0, [r7, #0]
 800e4ac:	18e3      	adds	r3, r4, r3
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	18eb      	adds	r3, r5, r3
 800e4b2:	6958      	ldr	r0, [r3, #20]
 800e4b4:	f7ff fd20 	bl	800def8 <__hi0bits>
 800e4b8:	0164      	lsls	r4, r4, #5
 800e4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4bc:	1a24      	subs	r4, r4, r0
 800e4be:	601c      	str	r4, [r3, #0]
 800e4c0:	e7df      	b.n	800e482 <__d2b+0x6e>
 800e4c2:	46c0      	nop			; (mov r8, r8)
 800e4c4:	080122af 	.word	0x080122af
 800e4c8:	0000030a 	.word	0x0000030a
 800e4cc:	080122c0 	.word	0x080122c0
 800e4d0:	fffffbcd 	.word	0xfffffbcd
 800e4d4:	fffffbce 	.word	0xfffffbce
 800e4d8:	3fffffff 	.word	0x3fffffff

0800e4dc <_calloc_r>:
 800e4dc:	434a      	muls	r2, r1
 800e4de:	b570      	push	{r4, r5, r6, lr}
 800e4e0:	0011      	movs	r1, r2
 800e4e2:	0015      	movs	r5, r2
 800e4e4:	f000 f852 	bl	800e58c <_malloc_r>
 800e4e8:	1e04      	subs	r4, r0, #0
 800e4ea:	d003      	beq.n	800e4f4 <_calloc_r+0x18>
 800e4ec:	002a      	movs	r2, r5
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	f7fe f8ef 	bl	800c6d2 <memset>
 800e4f4:	0020      	movs	r0, r4
 800e4f6:	bd70      	pop	{r4, r5, r6, pc}

0800e4f8 <_free_r>:
 800e4f8:	b570      	push	{r4, r5, r6, lr}
 800e4fa:	0005      	movs	r5, r0
 800e4fc:	2900      	cmp	r1, #0
 800e4fe:	d010      	beq.n	800e522 <_free_r+0x2a>
 800e500:	1f0c      	subs	r4, r1, #4
 800e502:	6823      	ldr	r3, [r4, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	da00      	bge.n	800e50a <_free_r+0x12>
 800e508:	18e4      	adds	r4, r4, r3
 800e50a:	0028      	movs	r0, r5
 800e50c:	f000 fa64 	bl	800e9d8 <__malloc_lock>
 800e510:	4a1d      	ldr	r2, [pc, #116]	; (800e588 <_free_r+0x90>)
 800e512:	6813      	ldr	r3, [r2, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d105      	bne.n	800e524 <_free_r+0x2c>
 800e518:	6063      	str	r3, [r4, #4]
 800e51a:	6014      	str	r4, [r2, #0]
 800e51c:	0028      	movs	r0, r5
 800e51e:	f000 fa63 	bl	800e9e8 <__malloc_unlock>
 800e522:	bd70      	pop	{r4, r5, r6, pc}
 800e524:	42a3      	cmp	r3, r4
 800e526:	d908      	bls.n	800e53a <_free_r+0x42>
 800e528:	6821      	ldr	r1, [r4, #0]
 800e52a:	1860      	adds	r0, r4, r1
 800e52c:	4283      	cmp	r3, r0
 800e52e:	d1f3      	bne.n	800e518 <_free_r+0x20>
 800e530:	6818      	ldr	r0, [r3, #0]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	1841      	adds	r1, r0, r1
 800e536:	6021      	str	r1, [r4, #0]
 800e538:	e7ee      	b.n	800e518 <_free_r+0x20>
 800e53a:	001a      	movs	r2, r3
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d001      	beq.n	800e546 <_free_r+0x4e>
 800e542:	42a3      	cmp	r3, r4
 800e544:	d9f9      	bls.n	800e53a <_free_r+0x42>
 800e546:	6811      	ldr	r1, [r2, #0]
 800e548:	1850      	adds	r0, r2, r1
 800e54a:	42a0      	cmp	r0, r4
 800e54c:	d10b      	bne.n	800e566 <_free_r+0x6e>
 800e54e:	6820      	ldr	r0, [r4, #0]
 800e550:	1809      	adds	r1, r1, r0
 800e552:	1850      	adds	r0, r2, r1
 800e554:	6011      	str	r1, [r2, #0]
 800e556:	4283      	cmp	r3, r0
 800e558:	d1e0      	bne.n	800e51c <_free_r+0x24>
 800e55a:	6818      	ldr	r0, [r3, #0]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	1841      	adds	r1, r0, r1
 800e560:	6011      	str	r1, [r2, #0]
 800e562:	6053      	str	r3, [r2, #4]
 800e564:	e7da      	b.n	800e51c <_free_r+0x24>
 800e566:	42a0      	cmp	r0, r4
 800e568:	d902      	bls.n	800e570 <_free_r+0x78>
 800e56a:	230c      	movs	r3, #12
 800e56c:	602b      	str	r3, [r5, #0]
 800e56e:	e7d5      	b.n	800e51c <_free_r+0x24>
 800e570:	6821      	ldr	r1, [r4, #0]
 800e572:	1860      	adds	r0, r4, r1
 800e574:	4283      	cmp	r3, r0
 800e576:	d103      	bne.n	800e580 <_free_r+0x88>
 800e578:	6818      	ldr	r0, [r3, #0]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	1841      	adds	r1, r0, r1
 800e57e:	6021      	str	r1, [r4, #0]
 800e580:	6063      	str	r3, [r4, #4]
 800e582:	6054      	str	r4, [r2, #4]
 800e584:	e7ca      	b.n	800e51c <_free_r+0x24>
 800e586:	46c0      	nop			; (mov r8, r8)
 800e588:	20000204 	.word	0x20000204

0800e58c <_malloc_r>:
 800e58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58e:	2303      	movs	r3, #3
 800e590:	1ccd      	adds	r5, r1, #3
 800e592:	439d      	bics	r5, r3
 800e594:	3508      	adds	r5, #8
 800e596:	0006      	movs	r6, r0
 800e598:	2d0c      	cmp	r5, #12
 800e59a:	d21f      	bcs.n	800e5dc <_malloc_r+0x50>
 800e59c:	250c      	movs	r5, #12
 800e59e:	42a9      	cmp	r1, r5
 800e5a0:	d81e      	bhi.n	800e5e0 <_malloc_r+0x54>
 800e5a2:	0030      	movs	r0, r6
 800e5a4:	f000 fa18 	bl	800e9d8 <__malloc_lock>
 800e5a8:	4925      	ldr	r1, [pc, #148]	; (800e640 <_malloc_r+0xb4>)
 800e5aa:	680a      	ldr	r2, [r1, #0]
 800e5ac:	0014      	movs	r4, r2
 800e5ae:	2c00      	cmp	r4, #0
 800e5b0:	d11a      	bne.n	800e5e8 <_malloc_r+0x5c>
 800e5b2:	4f24      	ldr	r7, [pc, #144]	; (800e644 <_malloc_r+0xb8>)
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d104      	bne.n	800e5c4 <_malloc_r+0x38>
 800e5ba:	0021      	movs	r1, r4
 800e5bc:	0030      	movs	r0, r6
 800e5be:	f000 f9a5 	bl	800e90c <_sbrk_r>
 800e5c2:	6038      	str	r0, [r7, #0]
 800e5c4:	0029      	movs	r1, r5
 800e5c6:	0030      	movs	r0, r6
 800e5c8:	f000 f9a0 	bl	800e90c <_sbrk_r>
 800e5cc:	1c43      	adds	r3, r0, #1
 800e5ce:	d12b      	bne.n	800e628 <_malloc_r+0x9c>
 800e5d0:	230c      	movs	r3, #12
 800e5d2:	0030      	movs	r0, r6
 800e5d4:	6033      	str	r3, [r6, #0]
 800e5d6:	f000 fa07 	bl	800e9e8 <__malloc_unlock>
 800e5da:	e003      	b.n	800e5e4 <_malloc_r+0x58>
 800e5dc:	2d00      	cmp	r5, #0
 800e5de:	dade      	bge.n	800e59e <_malloc_r+0x12>
 800e5e0:	230c      	movs	r3, #12
 800e5e2:	6033      	str	r3, [r6, #0]
 800e5e4:	2000      	movs	r0, #0
 800e5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	1b5b      	subs	r3, r3, r5
 800e5ec:	d419      	bmi.n	800e622 <_malloc_r+0x96>
 800e5ee:	2b0b      	cmp	r3, #11
 800e5f0:	d903      	bls.n	800e5fa <_malloc_r+0x6e>
 800e5f2:	6023      	str	r3, [r4, #0]
 800e5f4:	18e4      	adds	r4, r4, r3
 800e5f6:	6025      	str	r5, [r4, #0]
 800e5f8:	e003      	b.n	800e602 <_malloc_r+0x76>
 800e5fa:	6863      	ldr	r3, [r4, #4]
 800e5fc:	42a2      	cmp	r2, r4
 800e5fe:	d10e      	bne.n	800e61e <_malloc_r+0x92>
 800e600:	600b      	str	r3, [r1, #0]
 800e602:	0030      	movs	r0, r6
 800e604:	f000 f9f0 	bl	800e9e8 <__malloc_unlock>
 800e608:	0020      	movs	r0, r4
 800e60a:	2207      	movs	r2, #7
 800e60c:	300b      	adds	r0, #11
 800e60e:	1d23      	adds	r3, r4, #4
 800e610:	4390      	bics	r0, r2
 800e612:	1ac2      	subs	r2, r0, r3
 800e614:	4298      	cmp	r0, r3
 800e616:	d0e6      	beq.n	800e5e6 <_malloc_r+0x5a>
 800e618:	1a1b      	subs	r3, r3, r0
 800e61a:	50a3      	str	r3, [r4, r2]
 800e61c:	e7e3      	b.n	800e5e6 <_malloc_r+0x5a>
 800e61e:	6053      	str	r3, [r2, #4]
 800e620:	e7ef      	b.n	800e602 <_malloc_r+0x76>
 800e622:	0022      	movs	r2, r4
 800e624:	6864      	ldr	r4, [r4, #4]
 800e626:	e7c2      	b.n	800e5ae <_malloc_r+0x22>
 800e628:	2303      	movs	r3, #3
 800e62a:	1cc4      	adds	r4, r0, #3
 800e62c:	439c      	bics	r4, r3
 800e62e:	42a0      	cmp	r0, r4
 800e630:	d0e1      	beq.n	800e5f6 <_malloc_r+0x6a>
 800e632:	1a21      	subs	r1, r4, r0
 800e634:	0030      	movs	r0, r6
 800e636:	f000 f969 	bl	800e90c <_sbrk_r>
 800e63a:	1c43      	adds	r3, r0, #1
 800e63c:	d1db      	bne.n	800e5f6 <_malloc_r+0x6a>
 800e63e:	e7c7      	b.n	800e5d0 <_malloc_r+0x44>
 800e640:	20000204 	.word	0x20000204
 800e644:	20000208 	.word	0x20000208

0800e648 <__ssputs_r>:
 800e648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e64a:	688e      	ldr	r6, [r1, #8]
 800e64c:	b085      	sub	sp, #20
 800e64e:	0007      	movs	r7, r0
 800e650:	000c      	movs	r4, r1
 800e652:	9203      	str	r2, [sp, #12]
 800e654:	9301      	str	r3, [sp, #4]
 800e656:	429e      	cmp	r6, r3
 800e658:	d83c      	bhi.n	800e6d4 <__ssputs_r+0x8c>
 800e65a:	2390      	movs	r3, #144	; 0x90
 800e65c:	898a      	ldrh	r2, [r1, #12]
 800e65e:	00db      	lsls	r3, r3, #3
 800e660:	421a      	tst	r2, r3
 800e662:	d034      	beq.n	800e6ce <__ssputs_r+0x86>
 800e664:	2503      	movs	r5, #3
 800e666:	6909      	ldr	r1, [r1, #16]
 800e668:	6823      	ldr	r3, [r4, #0]
 800e66a:	1a5b      	subs	r3, r3, r1
 800e66c:	9302      	str	r3, [sp, #8]
 800e66e:	6963      	ldr	r3, [r4, #20]
 800e670:	9802      	ldr	r0, [sp, #8]
 800e672:	435d      	muls	r5, r3
 800e674:	0feb      	lsrs	r3, r5, #31
 800e676:	195d      	adds	r5, r3, r5
 800e678:	9b01      	ldr	r3, [sp, #4]
 800e67a:	106d      	asrs	r5, r5, #1
 800e67c:	3301      	adds	r3, #1
 800e67e:	181b      	adds	r3, r3, r0
 800e680:	42ab      	cmp	r3, r5
 800e682:	d900      	bls.n	800e686 <__ssputs_r+0x3e>
 800e684:	001d      	movs	r5, r3
 800e686:	0553      	lsls	r3, r2, #21
 800e688:	d532      	bpl.n	800e6f0 <__ssputs_r+0xa8>
 800e68a:	0029      	movs	r1, r5
 800e68c:	0038      	movs	r0, r7
 800e68e:	f7ff ff7d 	bl	800e58c <_malloc_r>
 800e692:	1e06      	subs	r6, r0, #0
 800e694:	d109      	bne.n	800e6aa <__ssputs_r+0x62>
 800e696:	230c      	movs	r3, #12
 800e698:	603b      	str	r3, [r7, #0]
 800e69a:	2340      	movs	r3, #64	; 0x40
 800e69c:	2001      	movs	r0, #1
 800e69e:	89a2      	ldrh	r2, [r4, #12]
 800e6a0:	4240      	negs	r0, r0
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	81a3      	strh	r3, [r4, #12]
 800e6a6:	b005      	add	sp, #20
 800e6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6aa:	9a02      	ldr	r2, [sp, #8]
 800e6ac:	6921      	ldr	r1, [r4, #16]
 800e6ae:	f7fe f807 	bl	800c6c0 <memcpy>
 800e6b2:	89a3      	ldrh	r3, [r4, #12]
 800e6b4:	4a14      	ldr	r2, [pc, #80]	; (800e708 <__ssputs_r+0xc0>)
 800e6b6:	401a      	ands	r2, r3
 800e6b8:	2380      	movs	r3, #128	; 0x80
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	81a3      	strh	r3, [r4, #12]
 800e6be:	9b02      	ldr	r3, [sp, #8]
 800e6c0:	6126      	str	r6, [r4, #16]
 800e6c2:	18f6      	adds	r6, r6, r3
 800e6c4:	6026      	str	r6, [r4, #0]
 800e6c6:	6165      	str	r5, [r4, #20]
 800e6c8:	9e01      	ldr	r6, [sp, #4]
 800e6ca:	1aed      	subs	r5, r5, r3
 800e6cc:	60a5      	str	r5, [r4, #8]
 800e6ce:	9b01      	ldr	r3, [sp, #4]
 800e6d0:	429e      	cmp	r6, r3
 800e6d2:	d900      	bls.n	800e6d6 <__ssputs_r+0x8e>
 800e6d4:	9e01      	ldr	r6, [sp, #4]
 800e6d6:	0032      	movs	r2, r6
 800e6d8:	9903      	ldr	r1, [sp, #12]
 800e6da:	6820      	ldr	r0, [r4, #0]
 800e6dc:	f000 f968 	bl	800e9b0 <memmove>
 800e6e0:	68a3      	ldr	r3, [r4, #8]
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	1b9b      	subs	r3, r3, r6
 800e6e6:	60a3      	str	r3, [r4, #8]
 800e6e8:	6823      	ldr	r3, [r4, #0]
 800e6ea:	199e      	adds	r6, r3, r6
 800e6ec:	6026      	str	r6, [r4, #0]
 800e6ee:	e7da      	b.n	800e6a6 <__ssputs_r+0x5e>
 800e6f0:	002a      	movs	r2, r5
 800e6f2:	0038      	movs	r0, r7
 800e6f4:	f000 f980 	bl	800e9f8 <_realloc_r>
 800e6f8:	1e06      	subs	r6, r0, #0
 800e6fa:	d1e0      	bne.n	800e6be <__ssputs_r+0x76>
 800e6fc:	0038      	movs	r0, r7
 800e6fe:	6921      	ldr	r1, [r4, #16]
 800e700:	f7ff fefa 	bl	800e4f8 <_free_r>
 800e704:	e7c7      	b.n	800e696 <__ssputs_r+0x4e>
 800e706:	46c0      	nop			; (mov r8, r8)
 800e708:	fffffb7f 	.word	0xfffffb7f

0800e70c <_svfiprintf_r>:
 800e70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e70e:	b0a1      	sub	sp, #132	; 0x84
 800e710:	9003      	str	r0, [sp, #12]
 800e712:	001d      	movs	r5, r3
 800e714:	898b      	ldrh	r3, [r1, #12]
 800e716:	000f      	movs	r7, r1
 800e718:	0016      	movs	r6, r2
 800e71a:	061b      	lsls	r3, r3, #24
 800e71c:	d511      	bpl.n	800e742 <_svfiprintf_r+0x36>
 800e71e:	690b      	ldr	r3, [r1, #16]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10e      	bne.n	800e742 <_svfiprintf_r+0x36>
 800e724:	2140      	movs	r1, #64	; 0x40
 800e726:	f7ff ff31 	bl	800e58c <_malloc_r>
 800e72a:	6038      	str	r0, [r7, #0]
 800e72c:	6138      	str	r0, [r7, #16]
 800e72e:	2800      	cmp	r0, #0
 800e730:	d105      	bne.n	800e73e <_svfiprintf_r+0x32>
 800e732:	230c      	movs	r3, #12
 800e734:	9a03      	ldr	r2, [sp, #12]
 800e736:	3801      	subs	r0, #1
 800e738:	6013      	str	r3, [r2, #0]
 800e73a:	b021      	add	sp, #132	; 0x84
 800e73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e73e:	2340      	movs	r3, #64	; 0x40
 800e740:	617b      	str	r3, [r7, #20]
 800e742:	2300      	movs	r3, #0
 800e744:	ac08      	add	r4, sp, #32
 800e746:	6163      	str	r3, [r4, #20]
 800e748:	3320      	adds	r3, #32
 800e74a:	7663      	strb	r3, [r4, #25]
 800e74c:	3310      	adds	r3, #16
 800e74e:	76a3      	strb	r3, [r4, #26]
 800e750:	9507      	str	r5, [sp, #28]
 800e752:	0035      	movs	r5, r6
 800e754:	782b      	ldrb	r3, [r5, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d001      	beq.n	800e75e <_svfiprintf_r+0x52>
 800e75a:	2b25      	cmp	r3, #37	; 0x25
 800e75c:	d147      	bne.n	800e7ee <_svfiprintf_r+0xe2>
 800e75e:	1bab      	subs	r3, r5, r6
 800e760:	9305      	str	r3, [sp, #20]
 800e762:	42b5      	cmp	r5, r6
 800e764:	d00c      	beq.n	800e780 <_svfiprintf_r+0x74>
 800e766:	0032      	movs	r2, r6
 800e768:	0039      	movs	r1, r7
 800e76a:	9803      	ldr	r0, [sp, #12]
 800e76c:	f7ff ff6c 	bl	800e648 <__ssputs_r>
 800e770:	1c43      	adds	r3, r0, #1
 800e772:	d100      	bne.n	800e776 <_svfiprintf_r+0x6a>
 800e774:	e0ae      	b.n	800e8d4 <_svfiprintf_r+0x1c8>
 800e776:	6962      	ldr	r2, [r4, #20]
 800e778:	9b05      	ldr	r3, [sp, #20]
 800e77a:	4694      	mov	ip, r2
 800e77c:	4463      	add	r3, ip
 800e77e:	6163      	str	r3, [r4, #20]
 800e780:	782b      	ldrb	r3, [r5, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d100      	bne.n	800e788 <_svfiprintf_r+0x7c>
 800e786:	e0a5      	b.n	800e8d4 <_svfiprintf_r+0x1c8>
 800e788:	2201      	movs	r2, #1
 800e78a:	2300      	movs	r3, #0
 800e78c:	4252      	negs	r2, r2
 800e78e:	6062      	str	r2, [r4, #4]
 800e790:	a904      	add	r1, sp, #16
 800e792:	3254      	adds	r2, #84	; 0x54
 800e794:	1852      	adds	r2, r2, r1
 800e796:	1c6e      	adds	r6, r5, #1
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	60e3      	str	r3, [r4, #12]
 800e79c:	60a3      	str	r3, [r4, #8]
 800e79e:	7013      	strb	r3, [r2, #0]
 800e7a0:	65a3      	str	r3, [r4, #88]	; 0x58
 800e7a2:	2205      	movs	r2, #5
 800e7a4:	7831      	ldrb	r1, [r6, #0]
 800e7a6:	4854      	ldr	r0, [pc, #336]	; (800e8f8 <_svfiprintf_r+0x1ec>)
 800e7a8:	f7ff faee 	bl	800dd88 <memchr>
 800e7ac:	1c75      	adds	r5, r6, #1
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d11f      	bne.n	800e7f2 <_svfiprintf_r+0xe6>
 800e7b2:	6822      	ldr	r2, [r4, #0]
 800e7b4:	06d3      	lsls	r3, r2, #27
 800e7b6:	d504      	bpl.n	800e7c2 <_svfiprintf_r+0xb6>
 800e7b8:	2353      	movs	r3, #83	; 0x53
 800e7ba:	a904      	add	r1, sp, #16
 800e7bc:	185b      	adds	r3, r3, r1
 800e7be:	2120      	movs	r1, #32
 800e7c0:	7019      	strb	r1, [r3, #0]
 800e7c2:	0713      	lsls	r3, r2, #28
 800e7c4:	d504      	bpl.n	800e7d0 <_svfiprintf_r+0xc4>
 800e7c6:	2353      	movs	r3, #83	; 0x53
 800e7c8:	a904      	add	r1, sp, #16
 800e7ca:	185b      	adds	r3, r3, r1
 800e7cc:	212b      	movs	r1, #43	; 0x2b
 800e7ce:	7019      	strb	r1, [r3, #0]
 800e7d0:	7833      	ldrb	r3, [r6, #0]
 800e7d2:	2b2a      	cmp	r3, #42	; 0x2a
 800e7d4:	d016      	beq.n	800e804 <_svfiprintf_r+0xf8>
 800e7d6:	0035      	movs	r5, r6
 800e7d8:	2100      	movs	r1, #0
 800e7da:	200a      	movs	r0, #10
 800e7dc:	68e3      	ldr	r3, [r4, #12]
 800e7de:	782a      	ldrb	r2, [r5, #0]
 800e7e0:	1c6e      	adds	r6, r5, #1
 800e7e2:	3a30      	subs	r2, #48	; 0x30
 800e7e4:	2a09      	cmp	r2, #9
 800e7e6:	d94e      	bls.n	800e886 <_svfiprintf_r+0x17a>
 800e7e8:	2900      	cmp	r1, #0
 800e7ea:	d111      	bne.n	800e810 <_svfiprintf_r+0x104>
 800e7ec:	e017      	b.n	800e81e <_svfiprintf_r+0x112>
 800e7ee:	3501      	adds	r5, #1
 800e7f0:	e7b0      	b.n	800e754 <_svfiprintf_r+0x48>
 800e7f2:	4b41      	ldr	r3, [pc, #260]	; (800e8f8 <_svfiprintf_r+0x1ec>)
 800e7f4:	6822      	ldr	r2, [r4, #0]
 800e7f6:	1ac0      	subs	r0, r0, r3
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	4083      	lsls	r3, r0
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	002e      	movs	r6, r5
 800e800:	6023      	str	r3, [r4, #0]
 800e802:	e7ce      	b.n	800e7a2 <_svfiprintf_r+0x96>
 800e804:	9b07      	ldr	r3, [sp, #28]
 800e806:	1d19      	adds	r1, r3, #4
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	9107      	str	r1, [sp, #28]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	db01      	blt.n	800e814 <_svfiprintf_r+0x108>
 800e810:	930b      	str	r3, [sp, #44]	; 0x2c
 800e812:	e004      	b.n	800e81e <_svfiprintf_r+0x112>
 800e814:	425b      	negs	r3, r3
 800e816:	60e3      	str	r3, [r4, #12]
 800e818:	2302      	movs	r3, #2
 800e81a:	4313      	orrs	r3, r2
 800e81c:	6023      	str	r3, [r4, #0]
 800e81e:	782b      	ldrb	r3, [r5, #0]
 800e820:	2b2e      	cmp	r3, #46	; 0x2e
 800e822:	d10a      	bne.n	800e83a <_svfiprintf_r+0x12e>
 800e824:	786b      	ldrb	r3, [r5, #1]
 800e826:	2b2a      	cmp	r3, #42	; 0x2a
 800e828:	d135      	bne.n	800e896 <_svfiprintf_r+0x18a>
 800e82a:	9b07      	ldr	r3, [sp, #28]
 800e82c:	3502      	adds	r5, #2
 800e82e:	1d1a      	adds	r2, r3, #4
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	9207      	str	r2, [sp, #28]
 800e834:	2b00      	cmp	r3, #0
 800e836:	db2b      	blt.n	800e890 <_svfiprintf_r+0x184>
 800e838:	9309      	str	r3, [sp, #36]	; 0x24
 800e83a:	4e30      	ldr	r6, [pc, #192]	; (800e8fc <_svfiprintf_r+0x1f0>)
 800e83c:	2203      	movs	r2, #3
 800e83e:	0030      	movs	r0, r6
 800e840:	7829      	ldrb	r1, [r5, #0]
 800e842:	f7ff faa1 	bl	800dd88 <memchr>
 800e846:	2800      	cmp	r0, #0
 800e848:	d006      	beq.n	800e858 <_svfiprintf_r+0x14c>
 800e84a:	2340      	movs	r3, #64	; 0x40
 800e84c:	1b80      	subs	r0, r0, r6
 800e84e:	4083      	lsls	r3, r0
 800e850:	6822      	ldr	r2, [r4, #0]
 800e852:	3501      	adds	r5, #1
 800e854:	4313      	orrs	r3, r2
 800e856:	6023      	str	r3, [r4, #0]
 800e858:	7829      	ldrb	r1, [r5, #0]
 800e85a:	2206      	movs	r2, #6
 800e85c:	4828      	ldr	r0, [pc, #160]	; (800e900 <_svfiprintf_r+0x1f4>)
 800e85e:	1c6e      	adds	r6, r5, #1
 800e860:	7621      	strb	r1, [r4, #24]
 800e862:	f7ff fa91 	bl	800dd88 <memchr>
 800e866:	2800      	cmp	r0, #0
 800e868:	d03c      	beq.n	800e8e4 <_svfiprintf_r+0x1d8>
 800e86a:	4b26      	ldr	r3, [pc, #152]	; (800e904 <_svfiprintf_r+0x1f8>)
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d125      	bne.n	800e8bc <_svfiprintf_r+0x1b0>
 800e870:	2207      	movs	r2, #7
 800e872:	9b07      	ldr	r3, [sp, #28]
 800e874:	3307      	adds	r3, #7
 800e876:	4393      	bics	r3, r2
 800e878:	3308      	adds	r3, #8
 800e87a:	9307      	str	r3, [sp, #28]
 800e87c:	6963      	ldr	r3, [r4, #20]
 800e87e:	9a04      	ldr	r2, [sp, #16]
 800e880:	189b      	adds	r3, r3, r2
 800e882:	6163      	str	r3, [r4, #20]
 800e884:	e765      	b.n	800e752 <_svfiprintf_r+0x46>
 800e886:	4343      	muls	r3, r0
 800e888:	0035      	movs	r5, r6
 800e88a:	2101      	movs	r1, #1
 800e88c:	189b      	adds	r3, r3, r2
 800e88e:	e7a6      	b.n	800e7de <_svfiprintf_r+0xd2>
 800e890:	2301      	movs	r3, #1
 800e892:	425b      	negs	r3, r3
 800e894:	e7d0      	b.n	800e838 <_svfiprintf_r+0x12c>
 800e896:	2300      	movs	r3, #0
 800e898:	200a      	movs	r0, #10
 800e89a:	001a      	movs	r2, r3
 800e89c:	3501      	adds	r5, #1
 800e89e:	6063      	str	r3, [r4, #4]
 800e8a0:	7829      	ldrb	r1, [r5, #0]
 800e8a2:	1c6e      	adds	r6, r5, #1
 800e8a4:	3930      	subs	r1, #48	; 0x30
 800e8a6:	2909      	cmp	r1, #9
 800e8a8:	d903      	bls.n	800e8b2 <_svfiprintf_r+0x1a6>
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d0c5      	beq.n	800e83a <_svfiprintf_r+0x12e>
 800e8ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e8b0:	e7c3      	b.n	800e83a <_svfiprintf_r+0x12e>
 800e8b2:	4342      	muls	r2, r0
 800e8b4:	0035      	movs	r5, r6
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	1852      	adds	r2, r2, r1
 800e8ba:	e7f1      	b.n	800e8a0 <_svfiprintf_r+0x194>
 800e8bc:	ab07      	add	r3, sp, #28
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	003a      	movs	r2, r7
 800e8c2:	0021      	movs	r1, r4
 800e8c4:	4b10      	ldr	r3, [pc, #64]	; (800e908 <_svfiprintf_r+0x1fc>)
 800e8c6:	9803      	ldr	r0, [sp, #12]
 800e8c8:	f7fd ffb6 	bl	800c838 <_printf_float>
 800e8cc:	9004      	str	r0, [sp, #16]
 800e8ce:	9b04      	ldr	r3, [sp, #16]
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	d1d3      	bne.n	800e87c <_svfiprintf_r+0x170>
 800e8d4:	89bb      	ldrh	r3, [r7, #12]
 800e8d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e8d8:	065b      	lsls	r3, r3, #25
 800e8da:	d400      	bmi.n	800e8de <_svfiprintf_r+0x1d2>
 800e8dc:	e72d      	b.n	800e73a <_svfiprintf_r+0x2e>
 800e8de:	2001      	movs	r0, #1
 800e8e0:	4240      	negs	r0, r0
 800e8e2:	e72a      	b.n	800e73a <_svfiprintf_r+0x2e>
 800e8e4:	ab07      	add	r3, sp, #28
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	003a      	movs	r2, r7
 800e8ea:	0021      	movs	r1, r4
 800e8ec:	4b06      	ldr	r3, [pc, #24]	; (800e908 <_svfiprintf_r+0x1fc>)
 800e8ee:	9803      	ldr	r0, [sp, #12]
 800e8f0:	f7fe fa60 	bl	800cdb4 <_printf_i>
 800e8f4:	e7ea      	b.n	800e8cc <_svfiprintf_r+0x1c0>
 800e8f6:	46c0      	nop			; (mov r8, r8)
 800e8f8:	0801241c 	.word	0x0801241c
 800e8fc:	08012422 	.word	0x08012422
 800e900:	08012426 	.word	0x08012426
 800e904:	0800c839 	.word	0x0800c839
 800e908:	0800e649 	.word	0x0800e649

0800e90c <_sbrk_r>:
 800e90c:	2300      	movs	r3, #0
 800e90e:	b570      	push	{r4, r5, r6, lr}
 800e910:	4d06      	ldr	r5, [pc, #24]	; (800e92c <_sbrk_r+0x20>)
 800e912:	0004      	movs	r4, r0
 800e914:	0008      	movs	r0, r1
 800e916:	602b      	str	r3, [r5, #0]
 800e918:	f7fa fce8 	bl	80092ec <_sbrk>
 800e91c:	1c43      	adds	r3, r0, #1
 800e91e:	d103      	bne.n	800e928 <_sbrk_r+0x1c>
 800e920:	682b      	ldr	r3, [r5, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d000      	beq.n	800e928 <_sbrk_r+0x1c>
 800e926:	6023      	str	r3, [r4, #0]
 800e928:	bd70      	pop	{r4, r5, r6, pc}
 800e92a:	46c0      	nop			; (mov r8, r8)
 800e92c:	200005e0 	.word	0x200005e0

0800e930 <__assert_func>:
 800e930:	b530      	push	{r4, r5, lr}
 800e932:	0014      	movs	r4, r2
 800e934:	001a      	movs	r2, r3
 800e936:	4b09      	ldr	r3, [pc, #36]	; (800e95c <__assert_func+0x2c>)
 800e938:	0005      	movs	r5, r0
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	b085      	sub	sp, #20
 800e93e:	68d8      	ldr	r0, [r3, #12]
 800e940:	4b07      	ldr	r3, [pc, #28]	; (800e960 <__assert_func+0x30>)
 800e942:	2c00      	cmp	r4, #0
 800e944:	d101      	bne.n	800e94a <__assert_func+0x1a>
 800e946:	4b07      	ldr	r3, [pc, #28]	; (800e964 <__assert_func+0x34>)
 800e948:	001c      	movs	r4, r3
 800e94a:	9301      	str	r3, [sp, #4]
 800e94c:	9100      	str	r1, [sp, #0]
 800e94e:	002b      	movs	r3, r5
 800e950:	4905      	ldr	r1, [pc, #20]	; (800e968 <__assert_func+0x38>)
 800e952:	9402      	str	r4, [sp, #8]
 800e954:	f000 f80a 	bl	800e96c <fiprintf>
 800e958:	f000 fab2 	bl	800eec0 <abort>
 800e95c:	20000010 	.word	0x20000010
 800e960:	0801242d 	.word	0x0801242d
 800e964:	08012468 	.word	0x08012468
 800e968:	0801243a 	.word	0x0801243a

0800e96c <fiprintf>:
 800e96c:	b40e      	push	{r1, r2, r3}
 800e96e:	b503      	push	{r0, r1, lr}
 800e970:	0001      	movs	r1, r0
 800e972:	ab03      	add	r3, sp, #12
 800e974:	4804      	ldr	r0, [pc, #16]	; (800e988 <fiprintf+0x1c>)
 800e976:	cb04      	ldmia	r3!, {r2}
 800e978:	6800      	ldr	r0, [r0, #0]
 800e97a:	9301      	str	r3, [sp, #4]
 800e97c:	f000 f88a 	bl	800ea94 <_vfiprintf_r>
 800e980:	b002      	add	sp, #8
 800e982:	bc08      	pop	{r3}
 800e984:	b003      	add	sp, #12
 800e986:	4718      	bx	r3
 800e988:	20000010 	.word	0x20000010

0800e98c <__ascii_mbtowc>:
 800e98c:	b082      	sub	sp, #8
 800e98e:	2900      	cmp	r1, #0
 800e990:	d100      	bne.n	800e994 <__ascii_mbtowc+0x8>
 800e992:	a901      	add	r1, sp, #4
 800e994:	1e10      	subs	r0, r2, #0
 800e996:	d006      	beq.n	800e9a6 <__ascii_mbtowc+0x1a>
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d006      	beq.n	800e9aa <__ascii_mbtowc+0x1e>
 800e99c:	7813      	ldrb	r3, [r2, #0]
 800e99e:	600b      	str	r3, [r1, #0]
 800e9a0:	7810      	ldrb	r0, [r2, #0]
 800e9a2:	1e43      	subs	r3, r0, #1
 800e9a4:	4198      	sbcs	r0, r3
 800e9a6:	b002      	add	sp, #8
 800e9a8:	4770      	bx	lr
 800e9aa:	2002      	movs	r0, #2
 800e9ac:	4240      	negs	r0, r0
 800e9ae:	e7fa      	b.n	800e9a6 <__ascii_mbtowc+0x1a>

0800e9b0 <memmove>:
 800e9b0:	b510      	push	{r4, lr}
 800e9b2:	4288      	cmp	r0, r1
 800e9b4:	d902      	bls.n	800e9bc <memmove+0xc>
 800e9b6:	188b      	adds	r3, r1, r2
 800e9b8:	4298      	cmp	r0, r3
 800e9ba:	d303      	bcc.n	800e9c4 <memmove+0x14>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	e007      	b.n	800e9d0 <memmove+0x20>
 800e9c0:	5c8b      	ldrb	r3, [r1, r2]
 800e9c2:	5483      	strb	r3, [r0, r2]
 800e9c4:	3a01      	subs	r2, #1
 800e9c6:	d2fb      	bcs.n	800e9c0 <memmove+0x10>
 800e9c8:	bd10      	pop	{r4, pc}
 800e9ca:	5ccc      	ldrb	r4, [r1, r3]
 800e9cc:	54c4      	strb	r4, [r0, r3]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d1fa      	bne.n	800e9ca <memmove+0x1a>
 800e9d4:	e7f8      	b.n	800e9c8 <memmove+0x18>
	...

0800e9d8 <__malloc_lock>:
 800e9d8:	b510      	push	{r4, lr}
 800e9da:	4802      	ldr	r0, [pc, #8]	; (800e9e4 <__malloc_lock+0xc>)
 800e9dc:	f000 fc47 	bl	800f26e <__retarget_lock_acquire_recursive>
 800e9e0:	bd10      	pop	{r4, pc}
 800e9e2:	46c0      	nop			; (mov r8, r8)
 800e9e4:	200005e8 	.word	0x200005e8

0800e9e8 <__malloc_unlock>:
 800e9e8:	b510      	push	{r4, lr}
 800e9ea:	4802      	ldr	r0, [pc, #8]	; (800e9f4 <__malloc_unlock+0xc>)
 800e9ec:	f000 fc40 	bl	800f270 <__retarget_lock_release_recursive>
 800e9f0:	bd10      	pop	{r4, pc}
 800e9f2:	46c0      	nop			; (mov r8, r8)
 800e9f4:	200005e8 	.word	0x200005e8

0800e9f8 <_realloc_r>:
 800e9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9fa:	0007      	movs	r7, r0
 800e9fc:	000d      	movs	r5, r1
 800e9fe:	0016      	movs	r6, r2
 800ea00:	2900      	cmp	r1, #0
 800ea02:	d105      	bne.n	800ea10 <_realloc_r+0x18>
 800ea04:	0011      	movs	r1, r2
 800ea06:	f7ff fdc1 	bl	800e58c <_malloc_r>
 800ea0a:	0004      	movs	r4, r0
 800ea0c:	0020      	movs	r0, r4
 800ea0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea10:	2a00      	cmp	r2, #0
 800ea12:	d103      	bne.n	800ea1c <_realloc_r+0x24>
 800ea14:	f7ff fd70 	bl	800e4f8 <_free_r>
 800ea18:	0034      	movs	r4, r6
 800ea1a:	e7f7      	b.n	800ea0c <_realloc_r+0x14>
 800ea1c:	f000 fc96 	bl	800f34c <_malloc_usable_size_r>
 800ea20:	002c      	movs	r4, r5
 800ea22:	42b0      	cmp	r0, r6
 800ea24:	d2f2      	bcs.n	800ea0c <_realloc_r+0x14>
 800ea26:	0031      	movs	r1, r6
 800ea28:	0038      	movs	r0, r7
 800ea2a:	f7ff fdaf 	bl	800e58c <_malloc_r>
 800ea2e:	1e04      	subs	r4, r0, #0
 800ea30:	d0ec      	beq.n	800ea0c <_realloc_r+0x14>
 800ea32:	0029      	movs	r1, r5
 800ea34:	0032      	movs	r2, r6
 800ea36:	f7fd fe43 	bl	800c6c0 <memcpy>
 800ea3a:	0029      	movs	r1, r5
 800ea3c:	0038      	movs	r0, r7
 800ea3e:	f7ff fd5b 	bl	800e4f8 <_free_r>
 800ea42:	e7e3      	b.n	800ea0c <_realloc_r+0x14>

0800ea44 <__sfputc_r>:
 800ea44:	6893      	ldr	r3, [r2, #8]
 800ea46:	b510      	push	{r4, lr}
 800ea48:	3b01      	subs	r3, #1
 800ea4a:	6093      	str	r3, [r2, #8]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	da04      	bge.n	800ea5a <__sfputc_r+0x16>
 800ea50:	6994      	ldr	r4, [r2, #24]
 800ea52:	42a3      	cmp	r3, r4
 800ea54:	db07      	blt.n	800ea66 <__sfputc_r+0x22>
 800ea56:	290a      	cmp	r1, #10
 800ea58:	d005      	beq.n	800ea66 <__sfputc_r+0x22>
 800ea5a:	6813      	ldr	r3, [r2, #0]
 800ea5c:	1c58      	adds	r0, r3, #1
 800ea5e:	6010      	str	r0, [r2, #0]
 800ea60:	7019      	strb	r1, [r3, #0]
 800ea62:	0008      	movs	r0, r1
 800ea64:	bd10      	pop	{r4, pc}
 800ea66:	f000 f94f 	bl	800ed08 <__swbuf_r>
 800ea6a:	0001      	movs	r1, r0
 800ea6c:	e7f9      	b.n	800ea62 <__sfputc_r+0x1e>

0800ea6e <__sfputs_r>:
 800ea6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea70:	0006      	movs	r6, r0
 800ea72:	000f      	movs	r7, r1
 800ea74:	0014      	movs	r4, r2
 800ea76:	18d5      	adds	r5, r2, r3
 800ea78:	42ac      	cmp	r4, r5
 800ea7a:	d101      	bne.n	800ea80 <__sfputs_r+0x12>
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	e007      	b.n	800ea90 <__sfputs_r+0x22>
 800ea80:	7821      	ldrb	r1, [r4, #0]
 800ea82:	003a      	movs	r2, r7
 800ea84:	0030      	movs	r0, r6
 800ea86:	f7ff ffdd 	bl	800ea44 <__sfputc_r>
 800ea8a:	3401      	adds	r4, #1
 800ea8c:	1c43      	adds	r3, r0, #1
 800ea8e:	d1f3      	bne.n	800ea78 <__sfputs_r+0xa>
 800ea90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea94 <_vfiprintf_r>:
 800ea94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea96:	b0a1      	sub	sp, #132	; 0x84
 800ea98:	0006      	movs	r6, r0
 800ea9a:	000c      	movs	r4, r1
 800ea9c:	001f      	movs	r7, r3
 800ea9e:	9203      	str	r2, [sp, #12]
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d004      	beq.n	800eaae <_vfiprintf_r+0x1a>
 800eaa4:	6983      	ldr	r3, [r0, #24]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d101      	bne.n	800eaae <_vfiprintf_r+0x1a>
 800eaaa:	f000 fb3f 	bl	800f12c <__sinit>
 800eaae:	4b8e      	ldr	r3, [pc, #568]	; (800ece8 <_vfiprintf_r+0x254>)
 800eab0:	429c      	cmp	r4, r3
 800eab2:	d11c      	bne.n	800eaee <_vfiprintf_r+0x5a>
 800eab4:	6874      	ldr	r4, [r6, #4]
 800eab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eab8:	07db      	lsls	r3, r3, #31
 800eaba:	d405      	bmi.n	800eac8 <_vfiprintf_r+0x34>
 800eabc:	89a3      	ldrh	r3, [r4, #12]
 800eabe:	059b      	lsls	r3, r3, #22
 800eac0:	d402      	bmi.n	800eac8 <_vfiprintf_r+0x34>
 800eac2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eac4:	f000 fbd3 	bl	800f26e <__retarget_lock_acquire_recursive>
 800eac8:	89a3      	ldrh	r3, [r4, #12]
 800eaca:	071b      	lsls	r3, r3, #28
 800eacc:	d502      	bpl.n	800ead4 <_vfiprintf_r+0x40>
 800eace:	6923      	ldr	r3, [r4, #16]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d11d      	bne.n	800eb10 <_vfiprintf_r+0x7c>
 800ead4:	0021      	movs	r1, r4
 800ead6:	0030      	movs	r0, r6
 800ead8:	f000 f97a 	bl	800edd0 <__swsetup_r>
 800eadc:	2800      	cmp	r0, #0
 800eade:	d017      	beq.n	800eb10 <_vfiprintf_r+0x7c>
 800eae0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eae2:	07db      	lsls	r3, r3, #31
 800eae4:	d50d      	bpl.n	800eb02 <_vfiprintf_r+0x6e>
 800eae6:	2001      	movs	r0, #1
 800eae8:	4240      	negs	r0, r0
 800eaea:	b021      	add	sp, #132	; 0x84
 800eaec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaee:	4b7f      	ldr	r3, [pc, #508]	; (800ecec <_vfiprintf_r+0x258>)
 800eaf0:	429c      	cmp	r4, r3
 800eaf2:	d101      	bne.n	800eaf8 <_vfiprintf_r+0x64>
 800eaf4:	68b4      	ldr	r4, [r6, #8]
 800eaf6:	e7de      	b.n	800eab6 <_vfiprintf_r+0x22>
 800eaf8:	4b7d      	ldr	r3, [pc, #500]	; (800ecf0 <_vfiprintf_r+0x25c>)
 800eafa:	429c      	cmp	r4, r3
 800eafc:	d1db      	bne.n	800eab6 <_vfiprintf_r+0x22>
 800eafe:	68f4      	ldr	r4, [r6, #12]
 800eb00:	e7d9      	b.n	800eab6 <_vfiprintf_r+0x22>
 800eb02:	89a3      	ldrh	r3, [r4, #12]
 800eb04:	059b      	lsls	r3, r3, #22
 800eb06:	d4ee      	bmi.n	800eae6 <_vfiprintf_r+0x52>
 800eb08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb0a:	f000 fbb1 	bl	800f270 <__retarget_lock_release_recursive>
 800eb0e:	e7ea      	b.n	800eae6 <_vfiprintf_r+0x52>
 800eb10:	2300      	movs	r3, #0
 800eb12:	ad08      	add	r5, sp, #32
 800eb14:	616b      	str	r3, [r5, #20]
 800eb16:	3320      	adds	r3, #32
 800eb18:	766b      	strb	r3, [r5, #25]
 800eb1a:	3310      	adds	r3, #16
 800eb1c:	76ab      	strb	r3, [r5, #26]
 800eb1e:	9707      	str	r7, [sp, #28]
 800eb20:	9f03      	ldr	r7, [sp, #12]
 800eb22:	783b      	ldrb	r3, [r7, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d001      	beq.n	800eb2c <_vfiprintf_r+0x98>
 800eb28:	2b25      	cmp	r3, #37	; 0x25
 800eb2a:	d14e      	bne.n	800ebca <_vfiprintf_r+0x136>
 800eb2c:	9b03      	ldr	r3, [sp, #12]
 800eb2e:	1afb      	subs	r3, r7, r3
 800eb30:	9305      	str	r3, [sp, #20]
 800eb32:	9b03      	ldr	r3, [sp, #12]
 800eb34:	429f      	cmp	r7, r3
 800eb36:	d00d      	beq.n	800eb54 <_vfiprintf_r+0xc0>
 800eb38:	9b05      	ldr	r3, [sp, #20]
 800eb3a:	0021      	movs	r1, r4
 800eb3c:	0030      	movs	r0, r6
 800eb3e:	9a03      	ldr	r2, [sp, #12]
 800eb40:	f7ff ff95 	bl	800ea6e <__sfputs_r>
 800eb44:	1c43      	adds	r3, r0, #1
 800eb46:	d100      	bne.n	800eb4a <_vfiprintf_r+0xb6>
 800eb48:	e0b5      	b.n	800ecb6 <_vfiprintf_r+0x222>
 800eb4a:	696a      	ldr	r2, [r5, #20]
 800eb4c:	9b05      	ldr	r3, [sp, #20]
 800eb4e:	4694      	mov	ip, r2
 800eb50:	4463      	add	r3, ip
 800eb52:	616b      	str	r3, [r5, #20]
 800eb54:	783b      	ldrb	r3, [r7, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d100      	bne.n	800eb5c <_vfiprintf_r+0xc8>
 800eb5a:	e0ac      	b.n	800ecb6 <_vfiprintf_r+0x222>
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	1c7b      	adds	r3, r7, #1
 800eb60:	9303      	str	r3, [sp, #12]
 800eb62:	2300      	movs	r3, #0
 800eb64:	4252      	negs	r2, r2
 800eb66:	606a      	str	r2, [r5, #4]
 800eb68:	a904      	add	r1, sp, #16
 800eb6a:	3254      	adds	r2, #84	; 0x54
 800eb6c:	1852      	adds	r2, r2, r1
 800eb6e:	602b      	str	r3, [r5, #0]
 800eb70:	60eb      	str	r3, [r5, #12]
 800eb72:	60ab      	str	r3, [r5, #8]
 800eb74:	7013      	strb	r3, [r2, #0]
 800eb76:	65ab      	str	r3, [r5, #88]	; 0x58
 800eb78:	9b03      	ldr	r3, [sp, #12]
 800eb7a:	2205      	movs	r2, #5
 800eb7c:	7819      	ldrb	r1, [r3, #0]
 800eb7e:	485d      	ldr	r0, [pc, #372]	; (800ecf4 <_vfiprintf_r+0x260>)
 800eb80:	f7ff f902 	bl	800dd88 <memchr>
 800eb84:	9b03      	ldr	r3, [sp, #12]
 800eb86:	1c5f      	adds	r7, r3, #1
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d120      	bne.n	800ebce <_vfiprintf_r+0x13a>
 800eb8c:	682a      	ldr	r2, [r5, #0]
 800eb8e:	06d3      	lsls	r3, r2, #27
 800eb90:	d504      	bpl.n	800eb9c <_vfiprintf_r+0x108>
 800eb92:	2353      	movs	r3, #83	; 0x53
 800eb94:	a904      	add	r1, sp, #16
 800eb96:	185b      	adds	r3, r3, r1
 800eb98:	2120      	movs	r1, #32
 800eb9a:	7019      	strb	r1, [r3, #0]
 800eb9c:	0713      	lsls	r3, r2, #28
 800eb9e:	d504      	bpl.n	800ebaa <_vfiprintf_r+0x116>
 800eba0:	2353      	movs	r3, #83	; 0x53
 800eba2:	a904      	add	r1, sp, #16
 800eba4:	185b      	adds	r3, r3, r1
 800eba6:	212b      	movs	r1, #43	; 0x2b
 800eba8:	7019      	strb	r1, [r3, #0]
 800ebaa:	9b03      	ldr	r3, [sp, #12]
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	2b2a      	cmp	r3, #42	; 0x2a
 800ebb0:	d016      	beq.n	800ebe0 <_vfiprintf_r+0x14c>
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	68eb      	ldr	r3, [r5, #12]
 800ebb6:	9f03      	ldr	r7, [sp, #12]
 800ebb8:	783a      	ldrb	r2, [r7, #0]
 800ebba:	1c78      	adds	r0, r7, #1
 800ebbc:	3a30      	subs	r2, #48	; 0x30
 800ebbe:	4684      	mov	ip, r0
 800ebc0:	2a09      	cmp	r2, #9
 800ebc2:	d94f      	bls.n	800ec64 <_vfiprintf_r+0x1d0>
 800ebc4:	2900      	cmp	r1, #0
 800ebc6:	d111      	bne.n	800ebec <_vfiprintf_r+0x158>
 800ebc8:	e017      	b.n	800ebfa <_vfiprintf_r+0x166>
 800ebca:	3701      	adds	r7, #1
 800ebcc:	e7a9      	b.n	800eb22 <_vfiprintf_r+0x8e>
 800ebce:	4b49      	ldr	r3, [pc, #292]	; (800ecf4 <_vfiprintf_r+0x260>)
 800ebd0:	682a      	ldr	r2, [r5, #0]
 800ebd2:	1ac0      	subs	r0, r0, r3
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	4083      	lsls	r3, r0
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	602b      	str	r3, [r5, #0]
 800ebdc:	9703      	str	r7, [sp, #12]
 800ebde:	e7cb      	b.n	800eb78 <_vfiprintf_r+0xe4>
 800ebe0:	9b07      	ldr	r3, [sp, #28]
 800ebe2:	1d19      	adds	r1, r3, #4
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	9107      	str	r1, [sp, #28]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	db01      	blt.n	800ebf0 <_vfiprintf_r+0x15c>
 800ebec:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebee:	e004      	b.n	800ebfa <_vfiprintf_r+0x166>
 800ebf0:	425b      	negs	r3, r3
 800ebf2:	60eb      	str	r3, [r5, #12]
 800ebf4:	2302      	movs	r3, #2
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	602b      	str	r3, [r5, #0]
 800ebfa:	783b      	ldrb	r3, [r7, #0]
 800ebfc:	2b2e      	cmp	r3, #46	; 0x2e
 800ebfe:	d10a      	bne.n	800ec16 <_vfiprintf_r+0x182>
 800ec00:	787b      	ldrb	r3, [r7, #1]
 800ec02:	2b2a      	cmp	r3, #42	; 0x2a
 800ec04:	d137      	bne.n	800ec76 <_vfiprintf_r+0x1e2>
 800ec06:	9b07      	ldr	r3, [sp, #28]
 800ec08:	3702      	adds	r7, #2
 800ec0a:	1d1a      	adds	r2, r3, #4
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	9207      	str	r2, [sp, #28]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	db2d      	blt.n	800ec70 <_vfiprintf_r+0x1dc>
 800ec14:	9309      	str	r3, [sp, #36]	; 0x24
 800ec16:	2203      	movs	r2, #3
 800ec18:	7839      	ldrb	r1, [r7, #0]
 800ec1a:	4837      	ldr	r0, [pc, #220]	; (800ecf8 <_vfiprintf_r+0x264>)
 800ec1c:	f7ff f8b4 	bl	800dd88 <memchr>
 800ec20:	2800      	cmp	r0, #0
 800ec22:	d007      	beq.n	800ec34 <_vfiprintf_r+0x1a0>
 800ec24:	4b34      	ldr	r3, [pc, #208]	; (800ecf8 <_vfiprintf_r+0x264>)
 800ec26:	682a      	ldr	r2, [r5, #0]
 800ec28:	1ac0      	subs	r0, r0, r3
 800ec2a:	2340      	movs	r3, #64	; 0x40
 800ec2c:	4083      	lsls	r3, r0
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	3701      	adds	r7, #1
 800ec32:	602b      	str	r3, [r5, #0]
 800ec34:	7839      	ldrb	r1, [r7, #0]
 800ec36:	1c7b      	adds	r3, r7, #1
 800ec38:	2206      	movs	r2, #6
 800ec3a:	4830      	ldr	r0, [pc, #192]	; (800ecfc <_vfiprintf_r+0x268>)
 800ec3c:	9303      	str	r3, [sp, #12]
 800ec3e:	7629      	strb	r1, [r5, #24]
 800ec40:	f7ff f8a2 	bl	800dd88 <memchr>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	d045      	beq.n	800ecd4 <_vfiprintf_r+0x240>
 800ec48:	4b2d      	ldr	r3, [pc, #180]	; (800ed00 <_vfiprintf_r+0x26c>)
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d127      	bne.n	800ec9e <_vfiprintf_r+0x20a>
 800ec4e:	2207      	movs	r2, #7
 800ec50:	9b07      	ldr	r3, [sp, #28]
 800ec52:	3307      	adds	r3, #7
 800ec54:	4393      	bics	r3, r2
 800ec56:	3308      	adds	r3, #8
 800ec58:	9307      	str	r3, [sp, #28]
 800ec5a:	696b      	ldr	r3, [r5, #20]
 800ec5c:	9a04      	ldr	r2, [sp, #16]
 800ec5e:	189b      	adds	r3, r3, r2
 800ec60:	616b      	str	r3, [r5, #20]
 800ec62:	e75d      	b.n	800eb20 <_vfiprintf_r+0x8c>
 800ec64:	210a      	movs	r1, #10
 800ec66:	434b      	muls	r3, r1
 800ec68:	4667      	mov	r7, ip
 800ec6a:	189b      	adds	r3, r3, r2
 800ec6c:	3909      	subs	r1, #9
 800ec6e:	e7a3      	b.n	800ebb8 <_vfiprintf_r+0x124>
 800ec70:	2301      	movs	r3, #1
 800ec72:	425b      	negs	r3, r3
 800ec74:	e7ce      	b.n	800ec14 <_vfiprintf_r+0x180>
 800ec76:	2300      	movs	r3, #0
 800ec78:	001a      	movs	r2, r3
 800ec7a:	3701      	adds	r7, #1
 800ec7c:	606b      	str	r3, [r5, #4]
 800ec7e:	7839      	ldrb	r1, [r7, #0]
 800ec80:	1c78      	adds	r0, r7, #1
 800ec82:	3930      	subs	r1, #48	; 0x30
 800ec84:	4684      	mov	ip, r0
 800ec86:	2909      	cmp	r1, #9
 800ec88:	d903      	bls.n	800ec92 <_vfiprintf_r+0x1fe>
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d0c3      	beq.n	800ec16 <_vfiprintf_r+0x182>
 800ec8e:	9209      	str	r2, [sp, #36]	; 0x24
 800ec90:	e7c1      	b.n	800ec16 <_vfiprintf_r+0x182>
 800ec92:	230a      	movs	r3, #10
 800ec94:	435a      	muls	r2, r3
 800ec96:	4667      	mov	r7, ip
 800ec98:	1852      	adds	r2, r2, r1
 800ec9a:	3b09      	subs	r3, #9
 800ec9c:	e7ef      	b.n	800ec7e <_vfiprintf_r+0x1ea>
 800ec9e:	ab07      	add	r3, sp, #28
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	0022      	movs	r2, r4
 800eca4:	0029      	movs	r1, r5
 800eca6:	0030      	movs	r0, r6
 800eca8:	4b16      	ldr	r3, [pc, #88]	; (800ed04 <_vfiprintf_r+0x270>)
 800ecaa:	f7fd fdc5 	bl	800c838 <_printf_float>
 800ecae:	9004      	str	r0, [sp, #16]
 800ecb0:	9b04      	ldr	r3, [sp, #16]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	d1d1      	bne.n	800ec5a <_vfiprintf_r+0x1c6>
 800ecb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecb8:	07db      	lsls	r3, r3, #31
 800ecba:	d405      	bmi.n	800ecc8 <_vfiprintf_r+0x234>
 800ecbc:	89a3      	ldrh	r3, [r4, #12]
 800ecbe:	059b      	lsls	r3, r3, #22
 800ecc0:	d402      	bmi.n	800ecc8 <_vfiprintf_r+0x234>
 800ecc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecc4:	f000 fad4 	bl	800f270 <__retarget_lock_release_recursive>
 800ecc8:	89a3      	ldrh	r3, [r4, #12]
 800ecca:	065b      	lsls	r3, r3, #25
 800eccc:	d500      	bpl.n	800ecd0 <_vfiprintf_r+0x23c>
 800ecce:	e70a      	b.n	800eae6 <_vfiprintf_r+0x52>
 800ecd0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ecd2:	e70a      	b.n	800eaea <_vfiprintf_r+0x56>
 800ecd4:	ab07      	add	r3, sp, #28
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	0022      	movs	r2, r4
 800ecda:	0029      	movs	r1, r5
 800ecdc:	0030      	movs	r0, r6
 800ecde:	4b09      	ldr	r3, [pc, #36]	; (800ed04 <_vfiprintf_r+0x270>)
 800ece0:	f7fe f868 	bl	800cdb4 <_printf_i>
 800ece4:	e7e3      	b.n	800ecae <_vfiprintf_r+0x21a>
 800ece6:	46c0      	nop			; (mov r8, r8)
 800ece8:	08012594 	.word	0x08012594
 800ecec:	080125b4 	.word	0x080125b4
 800ecf0:	08012574 	.word	0x08012574
 800ecf4:	0801241c 	.word	0x0801241c
 800ecf8:	08012422 	.word	0x08012422
 800ecfc:	08012426 	.word	0x08012426
 800ed00:	0800c839 	.word	0x0800c839
 800ed04:	0800ea6f 	.word	0x0800ea6f

0800ed08 <__swbuf_r>:
 800ed08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed0a:	0005      	movs	r5, r0
 800ed0c:	000e      	movs	r6, r1
 800ed0e:	0014      	movs	r4, r2
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d004      	beq.n	800ed1e <__swbuf_r+0x16>
 800ed14:	6983      	ldr	r3, [r0, #24]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d101      	bne.n	800ed1e <__swbuf_r+0x16>
 800ed1a:	f000 fa07 	bl	800f12c <__sinit>
 800ed1e:	4b22      	ldr	r3, [pc, #136]	; (800eda8 <__swbuf_r+0xa0>)
 800ed20:	429c      	cmp	r4, r3
 800ed22:	d12e      	bne.n	800ed82 <__swbuf_r+0x7a>
 800ed24:	686c      	ldr	r4, [r5, #4]
 800ed26:	69a3      	ldr	r3, [r4, #24]
 800ed28:	60a3      	str	r3, [r4, #8]
 800ed2a:	89a3      	ldrh	r3, [r4, #12]
 800ed2c:	071b      	lsls	r3, r3, #28
 800ed2e:	d532      	bpl.n	800ed96 <__swbuf_r+0x8e>
 800ed30:	6923      	ldr	r3, [r4, #16]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d02f      	beq.n	800ed96 <__swbuf_r+0x8e>
 800ed36:	6823      	ldr	r3, [r4, #0]
 800ed38:	6922      	ldr	r2, [r4, #16]
 800ed3a:	b2f7      	uxtb	r7, r6
 800ed3c:	1a98      	subs	r0, r3, r2
 800ed3e:	6963      	ldr	r3, [r4, #20]
 800ed40:	b2f6      	uxtb	r6, r6
 800ed42:	4283      	cmp	r3, r0
 800ed44:	dc05      	bgt.n	800ed52 <__swbuf_r+0x4a>
 800ed46:	0021      	movs	r1, r4
 800ed48:	0028      	movs	r0, r5
 800ed4a:	f000 f94d 	bl	800efe8 <_fflush_r>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d127      	bne.n	800eda2 <__swbuf_r+0x9a>
 800ed52:	68a3      	ldr	r3, [r4, #8]
 800ed54:	3001      	adds	r0, #1
 800ed56:	3b01      	subs	r3, #1
 800ed58:	60a3      	str	r3, [r4, #8]
 800ed5a:	6823      	ldr	r3, [r4, #0]
 800ed5c:	1c5a      	adds	r2, r3, #1
 800ed5e:	6022      	str	r2, [r4, #0]
 800ed60:	701f      	strb	r7, [r3, #0]
 800ed62:	6963      	ldr	r3, [r4, #20]
 800ed64:	4283      	cmp	r3, r0
 800ed66:	d004      	beq.n	800ed72 <__swbuf_r+0x6a>
 800ed68:	89a3      	ldrh	r3, [r4, #12]
 800ed6a:	07db      	lsls	r3, r3, #31
 800ed6c:	d507      	bpl.n	800ed7e <__swbuf_r+0x76>
 800ed6e:	2e0a      	cmp	r6, #10
 800ed70:	d105      	bne.n	800ed7e <__swbuf_r+0x76>
 800ed72:	0021      	movs	r1, r4
 800ed74:	0028      	movs	r0, r5
 800ed76:	f000 f937 	bl	800efe8 <_fflush_r>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	d111      	bne.n	800eda2 <__swbuf_r+0x9a>
 800ed7e:	0030      	movs	r0, r6
 800ed80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed82:	4b0a      	ldr	r3, [pc, #40]	; (800edac <__swbuf_r+0xa4>)
 800ed84:	429c      	cmp	r4, r3
 800ed86:	d101      	bne.n	800ed8c <__swbuf_r+0x84>
 800ed88:	68ac      	ldr	r4, [r5, #8]
 800ed8a:	e7cc      	b.n	800ed26 <__swbuf_r+0x1e>
 800ed8c:	4b08      	ldr	r3, [pc, #32]	; (800edb0 <__swbuf_r+0xa8>)
 800ed8e:	429c      	cmp	r4, r3
 800ed90:	d1c9      	bne.n	800ed26 <__swbuf_r+0x1e>
 800ed92:	68ec      	ldr	r4, [r5, #12]
 800ed94:	e7c7      	b.n	800ed26 <__swbuf_r+0x1e>
 800ed96:	0021      	movs	r1, r4
 800ed98:	0028      	movs	r0, r5
 800ed9a:	f000 f819 	bl	800edd0 <__swsetup_r>
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	d0c9      	beq.n	800ed36 <__swbuf_r+0x2e>
 800eda2:	2601      	movs	r6, #1
 800eda4:	4276      	negs	r6, r6
 800eda6:	e7ea      	b.n	800ed7e <__swbuf_r+0x76>
 800eda8:	08012594 	.word	0x08012594
 800edac:	080125b4 	.word	0x080125b4
 800edb0:	08012574 	.word	0x08012574

0800edb4 <__ascii_wctomb>:
 800edb4:	0003      	movs	r3, r0
 800edb6:	1e08      	subs	r0, r1, #0
 800edb8:	d005      	beq.n	800edc6 <__ascii_wctomb+0x12>
 800edba:	2aff      	cmp	r2, #255	; 0xff
 800edbc:	d904      	bls.n	800edc8 <__ascii_wctomb+0x14>
 800edbe:	228a      	movs	r2, #138	; 0x8a
 800edc0:	2001      	movs	r0, #1
 800edc2:	601a      	str	r2, [r3, #0]
 800edc4:	4240      	negs	r0, r0
 800edc6:	4770      	bx	lr
 800edc8:	2001      	movs	r0, #1
 800edca:	700a      	strb	r2, [r1, #0]
 800edcc:	e7fb      	b.n	800edc6 <__ascii_wctomb+0x12>
	...

0800edd0 <__swsetup_r>:
 800edd0:	4b37      	ldr	r3, [pc, #220]	; (800eeb0 <__swsetup_r+0xe0>)
 800edd2:	b570      	push	{r4, r5, r6, lr}
 800edd4:	681d      	ldr	r5, [r3, #0]
 800edd6:	0006      	movs	r6, r0
 800edd8:	000c      	movs	r4, r1
 800edda:	2d00      	cmp	r5, #0
 800eddc:	d005      	beq.n	800edea <__swsetup_r+0x1a>
 800edde:	69ab      	ldr	r3, [r5, #24]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d102      	bne.n	800edea <__swsetup_r+0x1a>
 800ede4:	0028      	movs	r0, r5
 800ede6:	f000 f9a1 	bl	800f12c <__sinit>
 800edea:	4b32      	ldr	r3, [pc, #200]	; (800eeb4 <__swsetup_r+0xe4>)
 800edec:	429c      	cmp	r4, r3
 800edee:	d10f      	bne.n	800ee10 <__swsetup_r+0x40>
 800edf0:	686c      	ldr	r4, [r5, #4]
 800edf2:	230c      	movs	r3, #12
 800edf4:	5ee2      	ldrsh	r2, [r4, r3]
 800edf6:	b293      	uxth	r3, r2
 800edf8:	0711      	lsls	r1, r2, #28
 800edfa:	d42d      	bmi.n	800ee58 <__swsetup_r+0x88>
 800edfc:	06d9      	lsls	r1, r3, #27
 800edfe:	d411      	bmi.n	800ee24 <__swsetup_r+0x54>
 800ee00:	2309      	movs	r3, #9
 800ee02:	2001      	movs	r0, #1
 800ee04:	6033      	str	r3, [r6, #0]
 800ee06:	3337      	adds	r3, #55	; 0x37
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	81a3      	strh	r3, [r4, #12]
 800ee0c:	4240      	negs	r0, r0
 800ee0e:	bd70      	pop	{r4, r5, r6, pc}
 800ee10:	4b29      	ldr	r3, [pc, #164]	; (800eeb8 <__swsetup_r+0xe8>)
 800ee12:	429c      	cmp	r4, r3
 800ee14:	d101      	bne.n	800ee1a <__swsetup_r+0x4a>
 800ee16:	68ac      	ldr	r4, [r5, #8]
 800ee18:	e7eb      	b.n	800edf2 <__swsetup_r+0x22>
 800ee1a:	4b28      	ldr	r3, [pc, #160]	; (800eebc <__swsetup_r+0xec>)
 800ee1c:	429c      	cmp	r4, r3
 800ee1e:	d1e8      	bne.n	800edf2 <__swsetup_r+0x22>
 800ee20:	68ec      	ldr	r4, [r5, #12]
 800ee22:	e7e6      	b.n	800edf2 <__swsetup_r+0x22>
 800ee24:	075b      	lsls	r3, r3, #29
 800ee26:	d513      	bpl.n	800ee50 <__swsetup_r+0x80>
 800ee28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee2a:	2900      	cmp	r1, #0
 800ee2c:	d008      	beq.n	800ee40 <__swsetup_r+0x70>
 800ee2e:	0023      	movs	r3, r4
 800ee30:	3344      	adds	r3, #68	; 0x44
 800ee32:	4299      	cmp	r1, r3
 800ee34:	d002      	beq.n	800ee3c <__swsetup_r+0x6c>
 800ee36:	0030      	movs	r0, r6
 800ee38:	f7ff fb5e 	bl	800e4f8 <_free_r>
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	6363      	str	r3, [r4, #52]	; 0x34
 800ee40:	2224      	movs	r2, #36	; 0x24
 800ee42:	89a3      	ldrh	r3, [r4, #12]
 800ee44:	4393      	bics	r3, r2
 800ee46:	81a3      	strh	r3, [r4, #12]
 800ee48:	2300      	movs	r3, #0
 800ee4a:	6063      	str	r3, [r4, #4]
 800ee4c:	6923      	ldr	r3, [r4, #16]
 800ee4e:	6023      	str	r3, [r4, #0]
 800ee50:	2308      	movs	r3, #8
 800ee52:	89a2      	ldrh	r2, [r4, #12]
 800ee54:	4313      	orrs	r3, r2
 800ee56:	81a3      	strh	r3, [r4, #12]
 800ee58:	6923      	ldr	r3, [r4, #16]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d10b      	bne.n	800ee76 <__swsetup_r+0xa6>
 800ee5e:	21a0      	movs	r1, #160	; 0xa0
 800ee60:	2280      	movs	r2, #128	; 0x80
 800ee62:	89a3      	ldrh	r3, [r4, #12]
 800ee64:	0089      	lsls	r1, r1, #2
 800ee66:	0092      	lsls	r2, r2, #2
 800ee68:	400b      	ands	r3, r1
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d003      	beq.n	800ee76 <__swsetup_r+0xa6>
 800ee6e:	0021      	movs	r1, r4
 800ee70:	0030      	movs	r0, r6
 800ee72:	f000 fa27 	bl	800f2c4 <__smakebuf_r>
 800ee76:	220c      	movs	r2, #12
 800ee78:	5ea3      	ldrsh	r3, [r4, r2]
 800ee7a:	2001      	movs	r0, #1
 800ee7c:	001a      	movs	r2, r3
 800ee7e:	b299      	uxth	r1, r3
 800ee80:	4002      	ands	r2, r0
 800ee82:	4203      	tst	r3, r0
 800ee84:	d00f      	beq.n	800eea6 <__swsetup_r+0xd6>
 800ee86:	2200      	movs	r2, #0
 800ee88:	60a2      	str	r2, [r4, #8]
 800ee8a:	6962      	ldr	r2, [r4, #20]
 800ee8c:	4252      	negs	r2, r2
 800ee8e:	61a2      	str	r2, [r4, #24]
 800ee90:	2000      	movs	r0, #0
 800ee92:	6922      	ldr	r2, [r4, #16]
 800ee94:	4282      	cmp	r2, r0
 800ee96:	d1ba      	bne.n	800ee0e <__swsetup_r+0x3e>
 800ee98:	060a      	lsls	r2, r1, #24
 800ee9a:	d5b8      	bpl.n	800ee0e <__swsetup_r+0x3e>
 800ee9c:	2240      	movs	r2, #64	; 0x40
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	81a3      	strh	r3, [r4, #12]
 800eea2:	3801      	subs	r0, #1
 800eea4:	e7b3      	b.n	800ee0e <__swsetup_r+0x3e>
 800eea6:	0788      	lsls	r0, r1, #30
 800eea8:	d400      	bmi.n	800eeac <__swsetup_r+0xdc>
 800eeaa:	6962      	ldr	r2, [r4, #20]
 800eeac:	60a2      	str	r2, [r4, #8]
 800eeae:	e7ef      	b.n	800ee90 <__swsetup_r+0xc0>
 800eeb0:	20000010 	.word	0x20000010
 800eeb4:	08012594 	.word	0x08012594
 800eeb8:	080125b4 	.word	0x080125b4
 800eebc:	08012574 	.word	0x08012574

0800eec0 <abort>:
 800eec0:	2006      	movs	r0, #6
 800eec2:	b510      	push	{r4, lr}
 800eec4:	f000 fa74 	bl	800f3b0 <raise>
 800eec8:	2001      	movs	r0, #1
 800eeca:	f7fa f99e 	bl	800920a <_exit>
	...

0800eed0 <__sflush_r>:
 800eed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eed2:	898b      	ldrh	r3, [r1, #12]
 800eed4:	0005      	movs	r5, r0
 800eed6:	000c      	movs	r4, r1
 800eed8:	071a      	lsls	r2, r3, #28
 800eeda:	d45f      	bmi.n	800ef9c <__sflush_r+0xcc>
 800eedc:	684a      	ldr	r2, [r1, #4]
 800eede:	2a00      	cmp	r2, #0
 800eee0:	dc04      	bgt.n	800eeec <__sflush_r+0x1c>
 800eee2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800eee4:	2a00      	cmp	r2, #0
 800eee6:	dc01      	bgt.n	800eeec <__sflush_r+0x1c>
 800eee8:	2000      	movs	r0, #0
 800eeea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eeec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800eeee:	2f00      	cmp	r7, #0
 800eef0:	d0fa      	beq.n	800eee8 <__sflush_r+0x18>
 800eef2:	2200      	movs	r2, #0
 800eef4:	2180      	movs	r1, #128	; 0x80
 800eef6:	682e      	ldr	r6, [r5, #0]
 800eef8:	602a      	str	r2, [r5, #0]
 800eefa:	001a      	movs	r2, r3
 800eefc:	0149      	lsls	r1, r1, #5
 800eefe:	400a      	ands	r2, r1
 800ef00:	420b      	tst	r3, r1
 800ef02:	d034      	beq.n	800ef6e <__sflush_r+0x9e>
 800ef04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef06:	89a3      	ldrh	r3, [r4, #12]
 800ef08:	075b      	lsls	r3, r3, #29
 800ef0a:	d506      	bpl.n	800ef1a <__sflush_r+0x4a>
 800ef0c:	6863      	ldr	r3, [r4, #4]
 800ef0e:	1ac0      	subs	r0, r0, r3
 800ef10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d001      	beq.n	800ef1a <__sflush_r+0x4a>
 800ef16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef18:	1ac0      	subs	r0, r0, r3
 800ef1a:	0002      	movs	r2, r0
 800ef1c:	6a21      	ldr	r1, [r4, #32]
 800ef1e:	2300      	movs	r3, #0
 800ef20:	0028      	movs	r0, r5
 800ef22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ef24:	47b8      	blx	r7
 800ef26:	89a1      	ldrh	r1, [r4, #12]
 800ef28:	1c43      	adds	r3, r0, #1
 800ef2a:	d106      	bne.n	800ef3a <__sflush_r+0x6a>
 800ef2c:	682b      	ldr	r3, [r5, #0]
 800ef2e:	2b1d      	cmp	r3, #29
 800ef30:	d831      	bhi.n	800ef96 <__sflush_r+0xc6>
 800ef32:	4a2c      	ldr	r2, [pc, #176]	; (800efe4 <__sflush_r+0x114>)
 800ef34:	40da      	lsrs	r2, r3
 800ef36:	07d3      	lsls	r3, r2, #31
 800ef38:	d52d      	bpl.n	800ef96 <__sflush_r+0xc6>
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	6063      	str	r3, [r4, #4]
 800ef3e:	6923      	ldr	r3, [r4, #16]
 800ef40:	6023      	str	r3, [r4, #0]
 800ef42:	04cb      	lsls	r3, r1, #19
 800ef44:	d505      	bpl.n	800ef52 <__sflush_r+0x82>
 800ef46:	1c43      	adds	r3, r0, #1
 800ef48:	d102      	bne.n	800ef50 <__sflush_r+0x80>
 800ef4a:	682b      	ldr	r3, [r5, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d100      	bne.n	800ef52 <__sflush_r+0x82>
 800ef50:	6560      	str	r0, [r4, #84]	; 0x54
 800ef52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef54:	602e      	str	r6, [r5, #0]
 800ef56:	2900      	cmp	r1, #0
 800ef58:	d0c6      	beq.n	800eee8 <__sflush_r+0x18>
 800ef5a:	0023      	movs	r3, r4
 800ef5c:	3344      	adds	r3, #68	; 0x44
 800ef5e:	4299      	cmp	r1, r3
 800ef60:	d002      	beq.n	800ef68 <__sflush_r+0x98>
 800ef62:	0028      	movs	r0, r5
 800ef64:	f7ff fac8 	bl	800e4f8 <_free_r>
 800ef68:	2000      	movs	r0, #0
 800ef6a:	6360      	str	r0, [r4, #52]	; 0x34
 800ef6c:	e7bd      	b.n	800eeea <__sflush_r+0x1a>
 800ef6e:	2301      	movs	r3, #1
 800ef70:	0028      	movs	r0, r5
 800ef72:	6a21      	ldr	r1, [r4, #32]
 800ef74:	47b8      	blx	r7
 800ef76:	1c43      	adds	r3, r0, #1
 800ef78:	d1c5      	bne.n	800ef06 <__sflush_r+0x36>
 800ef7a:	682b      	ldr	r3, [r5, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d0c2      	beq.n	800ef06 <__sflush_r+0x36>
 800ef80:	2b1d      	cmp	r3, #29
 800ef82:	d001      	beq.n	800ef88 <__sflush_r+0xb8>
 800ef84:	2b16      	cmp	r3, #22
 800ef86:	d101      	bne.n	800ef8c <__sflush_r+0xbc>
 800ef88:	602e      	str	r6, [r5, #0]
 800ef8a:	e7ad      	b.n	800eee8 <__sflush_r+0x18>
 800ef8c:	2340      	movs	r3, #64	; 0x40
 800ef8e:	89a2      	ldrh	r2, [r4, #12]
 800ef90:	4313      	orrs	r3, r2
 800ef92:	81a3      	strh	r3, [r4, #12]
 800ef94:	e7a9      	b.n	800eeea <__sflush_r+0x1a>
 800ef96:	2340      	movs	r3, #64	; 0x40
 800ef98:	430b      	orrs	r3, r1
 800ef9a:	e7fa      	b.n	800ef92 <__sflush_r+0xc2>
 800ef9c:	690f      	ldr	r7, [r1, #16]
 800ef9e:	2f00      	cmp	r7, #0
 800efa0:	d0a2      	beq.n	800eee8 <__sflush_r+0x18>
 800efa2:	680a      	ldr	r2, [r1, #0]
 800efa4:	600f      	str	r7, [r1, #0]
 800efa6:	1bd2      	subs	r2, r2, r7
 800efa8:	9201      	str	r2, [sp, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	079b      	lsls	r3, r3, #30
 800efae:	d100      	bne.n	800efb2 <__sflush_r+0xe2>
 800efb0:	694a      	ldr	r2, [r1, #20]
 800efb2:	60a2      	str	r2, [r4, #8]
 800efb4:	9b01      	ldr	r3, [sp, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	dc00      	bgt.n	800efbc <__sflush_r+0xec>
 800efba:	e795      	b.n	800eee8 <__sflush_r+0x18>
 800efbc:	003a      	movs	r2, r7
 800efbe:	0028      	movs	r0, r5
 800efc0:	9b01      	ldr	r3, [sp, #4]
 800efc2:	6a21      	ldr	r1, [r4, #32]
 800efc4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efc6:	47b0      	blx	r6
 800efc8:	2800      	cmp	r0, #0
 800efca:	dc06      	bgt.n	800efda <__sflush_r+0x10a>
 800efcc:	2340      	movs	r3, #64	; 0x40
 800efce:	2001      	movs	r0, #1
 800efd0:	89a2      	ldrh	r2, [r4, #12]
 800efd2:	4240      	negs	r0, r0
 800efd4:	4313      	orrs	r3, r2
 800efd6:	81a3      	strh	r3, [r4, #12]
 800efd8:	e787      	b.n	800eeea <__sflush_r+0x1a>
 800efda:	9b01      	ldr	r3, [sp, #4]
 800efdc:	183f      	adds	r7, r7, r0
 800efde:	1a1b      	subs	r3, r3, r0
 800efe0:	9301      	str	r3, [sp, #4]
 800efe2:	e7e7      	b.n	800efb4 <__sflush_r+0xe4>
 800efe4:	20400001 	.word	0x20400001

0800efe8 <_fflush_r>:
 800efe8:	690b      	ldr	r3, [r1, #16]
 800efea:	b570      	push	{r4, r5, r6, lr}
 800efec:	0005      	movs	r5, r0
 800efee:	000c      	movs	r4, r1
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d102      	bne.n	800effa <_fflush_r+0x12>
 800eff4:	2500      	movs	r5, #0
 800eff6:	0028      	movs	r0, r5
 800eff8:	bd70      	pop	{r4, r5, r6, pc}
 800effa:	2800      	cmp	r0, #0
 800effc:	d004      	beq.n	800f008 <_fflush_r+0x20>
 800effe:	6983      	ldr	r3, [r0, #24]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d101      	bne.n	800f008 <_fflush_r+0x20>
 800f004:	f000 f892 	bl	800f12c <__sinit>
 800f008:	4b14      	ldr	r3, [pc, #80]	; (800f05c <_fflush_r+0x74>)
 800f00a:	429c      	cmp	r4, r3
 800f00c:	d11b      	bne.n	800f046 <_fflush_r+0x5e>
 800f00e:	686c      	ldr	r4, [r5, #4]
 800f010:	220c      	movs	r2, #12
 800f012:	5ea3      	ldrsh	r3, [r4, r2]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d0ed      	beq.n	800eff4 <_fflush_r+0xc>
 800f018:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f01a:	07d2      	lsls	r2, r2, #31
 800f01c:	d404      	bmi.n	800f028 <_fflush_r+0x40>
 800f01e:	059b      	lsls	r3, r3, #22
 800f020:	d402      	bmi.n	800f028 <_fflush_r+0x40>
 800f022:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f024:	f000 f923 	bl	800f26e <__retarget_lock_acquire_recursive>
 800f028:	0028      	movs	r0, r5
 800f02a:	0021      	movs	r1, r4
 800f02c:	f7ff ff50 	bl	800eed0 <__sflush_r>
 800f030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f032:	0005      	movs	r5, r0
 800f034:	07db      	lsls	r3, r3, #31
 800f036:	d4de      	bmi.n	800eff6 <_fflush_r+0xe>
 800f038:	89a3      	ldrh	r3, [r4, #12]
 800f03a:	059b      	lsls	r3, r3, #22
 800f03c:	d4db      	bmi.n	800eff6 <_fflush_r+0xe>
 800f03e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f040:	f000 f916 	bl	800f270 <__retarget_lock_release_recursive>
 800f044:	e7d7      	b.n	800eff6 <_fflush_r+0xe>
 800f046:	4b06      	ldr	r3, [pc, #24]	; (800f060 <_fflush_r+0x78>)
 800f048:	429c      	cmp	r4, r3
 800f04a:	d101      	bne.n	800f050 <_fflush_r+0x68>
 800f04c:	68ac      	ldr	r4, [r5, #8]
 800f04e:	e7df      	b.n	800f010 <_fflush_r+0x28>
 800f050:	4b04      	ldr	r3, [pc, #16]	; (800f064 <_fflush_r+0x7c>)
 800f052:	429c      	cmp	r4, r3
 800f054:	d1dc      	bne.n	800f010 <_fflush_r+0x28>
 800f056:	68ec      	ldr	r4, [r5, #12]
 800f058:	e7da      	b.n	800f010 <_fflush_r+0x28>
 800f05a:	46c0      	nop			; (mov r8, r8)
 800f05c:	08012594 	.word	0x08012594
 800f060:	080125b4 	.word	0x080125b4
 800f064:	08012574 	.word	0x08012574

0800f068 <std>:
 800f068:	2300      	movs	r3, #0
 800f06a:	b510      	push	{r4, lr}
 800f06c:	0004      	movs	r4, r0
 800f06e:	6003      	str	r3, [r0, #0]
 800f070:	6043      	str	r3, [r0, #4]
 800f072:	6083      	str	r3, [r0, #8]
 800f074:	8181      	strh	r1, [r0, #12]
 800f076:	6643      	str	r3, [r0, #100]	; 0x64
 800f078:	0019      	movs	r1, r3
 800f07a:	81c2      	strh	r2, [r0, #14]
 800f07c:	6103      	str	r3, [r0, #16]
 800f07e:	6143      	str	r3, [r0, #20]
 800f080:	6183      	str	r3, [r0, #24]
 800f082:	2208      	movs	r2, #8
 800f084:	305c      	adds	r0, #92	; 0x5c
 800f086:	f7fd fb24 	bl	800c6d2 <memset>
 800f08a:	4b05      	ldr	r3, [pc, #20]	; (800f0a0 <std+0x38>)
 800f08c:	6263      	str	r3, [r4, #36]	; 0x24
 800f08e:	4b05      	ldr	r3, [pc, #20]	; (800f0a4 <std+0x3c>)
 800f090:	6224      	str	r4, [r4, #32]
 800f092:	62a3      	str	r3, [r4, #40]	; 0x28
 800f094:	4b04      	ldr	r3, [pc, #16]	; (800f0a8 <std+0x40>)
 800f096:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f098:	4b04      	ldr	r3, [pc, #16]	; (800f0ac <std+0x44>)
 800f09a:	6323      	str	r3, [r4, #48]	; 0x30
 800f09c:	bd10      	pop	{r4, pc}
 800f09e:	46c0      	nop			; (mov r8, r8)
 800f0a0:	0800f3f1 	.word	0x0800f3f1
 800f0a4:	0800f419 	.word	0x0800f419
 800f0a8:	0800f451 	.word	0x0800f451
 800f0ac:	0800f47d 	.word	0x0800f47d

0800f0b0 <_cleanup_r>:
 800f0b0:	b510      	push	{r4, lr}
 800f0b2:	4902      	ldr	r1, [pc, #8]	; (800f0bc <_cleanup_r+0xc>)
 800f0b4:	f000 f8ba 	bl	800f22c <_fwalk_reent>
 800f0b8:	bd10      	pop	{r4, pc}
 800f0ba:	46c0      	nop			; (mov r8, r8)
 800f0bc:	0800efe9 	.word	0x0800efe9

0800f0c0 <__sfmoreglue>:
 800f0c0:	b570      	push	{r4, r5, r6, lr}
 800f0c2:	2568      	movs	r5, #104	; 0x68
 800f0c4:	1e4a      	subs	r2, r1, #1
 800f0c6:	4355      	muls	r5, r2
 800f0c8:	000e      	movs	r6, r1
 800f0ca:	0029      	movs	r1, r5
 800f0cc:	3174      	adds	r1, #116	; 0x74
 800f0ce:	f7ff fa5d 	bl	800e58c <_malloc_r>
 800f0d2:	1e04      	subs	r4, r0, #0
 800f0d4:	d008      	beq.n	800f0e8 <__sfmoreglue+0x28>
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	002a      	movs	r2, r5
 800f0da:	6001      	str	r1, [r0, #0]
 800f0dc:	6046      	str	r6, [r0, #4]
 800f0de:	300c      	adds	r0, #12
 800f0e0:	60a0      	str	r0, [r4, #8]
 800f0e2:	3268      	adds	r2, #104	; 0x68
 800f0e4:	f7fd faf5 	bl	800c6d2 <memset>
 800f0e8:	0020      	movs	r0, r4
 800f0ea:	bd70      	pop	{r4, r5, r6, pc}

0800f0ec <__sfp_lock_acquire>:
 800f0ec:	b510      	push	{r4, lr}
 800f0ee:	4802      	ldr	r0, [pc, #8]	; (800f0f8 <__sfp_lock_acquire+0xc>)
 800f0f0:	f000 f8bd 	bl	800f26e <__retarget_lock_acquire_recursive>
 800f0f4:	bd10      	pop	{r4, pc}
 800f0f6:	46c0      	nop			; (mov r8, r8)
 800f0f8:	200005ec 	.word	0x200005ec

0800f0fc <__sfp_lock_release>:
 800f0fc:	b510      	push	{r4, lr}
 800f0fe:	4802      	ldr	r0, [pc, #8]	; (800f108 <__sfp_lock_release+0xc>)
 800f100:	f000 f8b6 	bl	800f270 <__retarget_lock_release_recursive>
 800f104:	bd10      	pop	{r4, pc}
 800f106:	46c0      	nop			; (mov r8, r8)
 800f108:	200005ec 	.word	0x200005ec

0800f10c <__sinit_lock_acquire>:
 800f10c:	b510      	push	{r4, lr}
 800f10e:	4802      	ldr	r0, [pc, #8]	; (800f118 <__sinit_lock_acquire+0xc>)
 800f110:	f000 f8ad 	bl	800f26e <__retarget_lock_acquire_recursive>
 800f114:	bd10      	pop	{r4, pc}
 800f116:	46c0      	nop			; (mov r8, r8)
 800f118:	200005e7 	.word	0x200005e7

0800f11c <__sinit_lock_release>:
 800f11c:	b510      	push	{r4, lr}
 800f11e:	4802      	ldr	r0, [pc, #8]	; (800f128 <__sinit_lock_release+0xc>)
 800f120:	f000 f8a6 	bl	800f270 <__retarget_lock_release_recursive>
 800f124:	bd10      	pop	{r4, pc}
 800f126:	46c0      	nop			; (mov r8, r8)
 800f128:	200005e7 	.word	0x200005e7

0800f12c <__sinit>:
 800f12c:	b513      	push	{r0, r1, r4, lr}
 800f12e:	0004      	movs	r4, r0
 800f130:	f7ff ffec 	bl	800f10c <__sinit_lock_acquire>
 800f134:	69a3      	ldr	r3, [r4, #24]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d002      	beq.n	800f140 <__sinit+0x14>
 800f13a:	f7ff ffef 	bl	800f11c <__sinit_lock_release>
 800f13e:	bd13      	pop	{r0, r1, r4, pc}
 800f140:	64a3      	str	r3, [r4, #72]	; 0x48
 800f142:	64e3      	str	r3, [r4, #76]	; 0x4c
 800f144:	6523      	str	r3, [r4, #80]	; 0x50
 800f146:	4b13      	ldr	r3, [pc, #76]	; (800f194 <__sinit+0x68>)
 800f148:	4a13      	ldr	r2, [pc, #76]	; (800f198 <__sinit+0x6c>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f14e:	9301      	str	r3, [sp, #4]
 800f150:	42a3      	cmp	r3, r4
 800f152:	d101      	bne.n	800f158 <__sinit+0x2c>
 800f154:	2301      	movs	r3, #1
 800f156:	61a3      	str	r3, [r4, #24]
 800f158:	0020      	movs	r0, r4
 800f15a:	f000 f81f 	bl	800f19c <__sfp>
 800f15e:	6060      	str	r0, [r4, #4]
 800f160:	0020      	movs	r0, r4
 800f162:	f000 f81b 	bl	800f19c <__sfp>
 800f166:	60a0      	str	r0, [r4, #8]
 800f168:	0020      	movs	r0, r4
 800f16a:	f000 f817 	bl	800f19c <__sfp>
 800f16e:	2200      	movs	r2, #0
 800f170:	2104      	movs	r1, #4
 800f172:	60e0      	str	r0, [r4, #12]
 800f174:	6860      	ldr	r0, [r4, #4]
 800f176:	f7ff ff77 	bl	800f068 <std>
 800f17a:	2201      	movs	r2, #1
 800f17c:	2109      	movs	r1, #9
 800f17e:	68a0      	ldr	r0, [r4, #8]
 800f180:	f7ff ff72 	bl	800f068 <std>
 800f184:	2202      	movs	r2, #2
 800f186:	2112      	movs	r1, #18
 800f188:	68e0      	ldr	r0, [r4, #12]
 800f18a:	f7ff ff6d 	bl	800f068 <std>
 800f18e:	2301      	movs	r3, #1
 800f190:	61a3      	str	r3, [r4, #24]
 800f192:	e7d2      	b.n	800f13a <__sinit+0xe>
 800f194:	080121f4 	.word	0x080121f4
 800f198:	0800f0b1 	.word	0x0800f0b1

0800f19c <__sfp>:
 800f19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19e:	0007      	movs	r7, r0
 800f1a0:	f7ff ffa4 	bl	800f0ec <__sfp_lock_acquire>
 800f1a4:	4b1f      	ldr	r3, [pc, #124]	; (800f224 <__sfp+0x88>)
 800f1a6:	681e      	ldr	r6, [r3, #0]
 800f1a8:	69b3      	ldr	r3, [r6, #24]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d102      	bne.n	800f1b4 <__sfp+0x18>
 800f1ae:	0030      	movs	r0, r6
 800f1b0:	f7ff ffbc 	bl	800f12c <__sinit>
 800f1b4:	3648      	adds	r6, #72	; 0x48
 800f1b6:	68b4      	ldr	r4, [r6, #8]
 800f1b8:	6873      	ldr	r3, [r6, #4]
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	d504      	bpl.n	800f1c8 <__sfp+0x2c>
 800f1be:	6833      	ldr	r3, [r6, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d022      	beq.n	800f20a <__sfp+0x6e>
 800f1c4:	6836      	ldr	r6, [r6, #0]
 800f1c6:	e7f6      	b.n	800f1b6 <__sfp+0x1a>
 800f1c8:	220c      	movs	r2, #12
 800f1ca:	5ea5      	ldrsh	r5, [r4, r2]
 800f1cc:	2d00      	cmp	r5, #0
 800f1ce:	d11a      	bne.n	800f206 <__sfp+0x6a>
 800f1d0:	0020      	movs	r0, r4
 800f1d2:	4b15      	ldr	r3, [pc, #84]	; (800f228 <__sfp+0x8c>)
 800f1d4:	3058      	adds	r0, #88	; 0x58
 800f1d6:	60e3      	str	r3, [r4, #12]
 800f1d8:	6665      	str	r5, [r4, #100]	; 0x64
 800f1da:	f000 f847 	bl	800f26c <__retarget_lock_init_recursive>
 800f1de:	f7ff ff8d 	bl	800f0fc <__sfp_lock_release>
 800f1e2:	0020      	movs	r0, r4
 800f1e4:	2208      	movs	r2, #8
 800f1e6:	0029      	movs	r1, r5
 800f1e8:	6025      	str	r5, [r4, #0]
 800f1ea:	60a5      	str	r5, [r4, #8]
 800f1ec:	6065      	str	r5, [r4, #4]
 800f1ee:	6125      	str	r5, [r4, #16]
 800f1f0:	6165      	str	r5, [r4, #20]
 800f1f2:	61a5      	str	r5, [r4, #24]
 800f1f4:	305c      	adds	r0, #92	; 0x5c
 800f1f6:	f7fd fa6c 	bl	800c6d2 <memset>
 800f1fa:	6365      	str	r5, [r4, #52]	; 0x34
 800f1fc:	63a5      	str	r5, [r4, #56]	; 0x38
 800f1fe:	64a5      	str	r5, [r4, #72]	; 0x48
 800f200:	64e5      	str	r5, [r4, #76]	; 0x4c
 800f202:	0020      	movs	r0, r4
 800f204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f206:	3468      	adds	r4, #104	; 0x68
 800f208:	e7d7      	b.n	800f1ba <__sfp+0x1e>
 800f20a:	2104      	movs	r1, #4
 800f20c:	0038      	movs	r0, r7
 800f20e:	f7ff ff57 	bl	800f0c0 <__sfmoreglue>
 800f212:	1e04      	subs	r4, r0, #0
 800f214:	6030      	str	r0, [r6, #0]
 800f216:	d1d5      	bne.n	800f1c4 <__sfp+0x28>
 800f218:	f7ff ff70 	bl	800f0fc <__sfp_lock_release>
 800f21c:	230c      	movs	r3, #12
 800f21e:	603b      	str	r3, [r7, #0]
 800f220:	e7ef      	b.n	800f202 <__sfp+0x66>
 800f222:	46c0      	nop			; (mov r8, r8)
 800f224:	080121f4 	.word	0x080121f4
 800f228:	ffff0001 	.word	0xffff0001

0800f22c <_fwalk_reent>:
 800f22c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f22e:	0004      	movs	r4, r0
 800f230:	0006      	movs	r6, r0
 800f232:	2700      	movs	r7, #0
 800f234:	9101      	str	r1, [sp, #4]
 800f236:	3448      	adds	r4, #72	; 0x48
 800f238:	6863      	ldr	r3, [r4, #4]
 800f23a:	68a5      	ldr	r5, [r4, #8]
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	9b00      	ldr	r3, [sp, #0]
 800f240:	3b01      	subs	r3, #1
 800f242:	9300      	str	r3, [sp, #0]
 800f244:	d504      	bpl.n	800f250 <_fwalk_reent+0x24>
 800f246:	6824      	ldr	r4, [r4, #0]
 800f248:	2c00      	cmp	r4, #0
 800f24a:	d1f5      	bne.n	800f238 <_fwalk_reent+0xc>
 800f24c:	0038      	movs	r0, r7
 800f24e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f250:	89ab      	ldrh	r3, [r5, #12]
 800f252:	2b01      	cmp	r3, #1
 800f254:	d908      	bls.n	800f268 <_fwalk_reent+0x3c>
 800f256:	220e      	movs	r2, #14
 800f258:	5eab      	ldrsh	r3, [r5, r2]
 800f25a:	3301      	adds	r3, #1
 800f25c:	d004      	beq.n	800f268 <_fwalk_reent+0x3c>
 800f25e:	0029      	movs	r1, r5
 800f260:	0030      	movs	r0, r6
 800f262:	9b01      	ldr	r3, [sp, #4]
 800f264:	4798      	blx	r3
 800f266:	4307      	orrs	r7, r0
 800f268:	3568      	adds	r5, #104	; 0x68
 800f26a:	e7e8      	b.n	800f23e <_fwalk_reent+0x12>

0800f26c <__retarget_lock_init_recursive>:
 800f26c:	4770      	bx	lr

0800f26e <__retarget_lock_acquire_recursive>:
 800f26e:	4770      	bx	lr

0800f270 <__retarget_lock_release_recursive>:
 800f270:	4770      	bx	lr
	...

0800f274 <__swhatbuf_r>:
 800f274:	b570      	push	{r4, r5, r6, lr}
 800f276:	000e      	movs	r6, r1
 800f278:	001d      	movs	r5, r3
 800f27a:	230e      	movs	r3, #14
 800f27c:	5ec9      	ldrsh	r1, [r1, r3]
 800f27e:	0014      	movs	r4, r2
 800f280:	b096      	sub	sp, #88	; 0x58
 800f282:	2900      	cmp	r1, #0
 800f284:	da07      	bge.n	800f296 <__swhatbuf_r+0x22>
 800f286:	2300      	movs	r3, #0
 800f288:	602b      	str	r3, [r5, #0]
 800f28a:	89b3      	ldrh	r3, [r6, #12]
 800f28c:	061b      	lsls	r3, r3, #24
 800f28e:	d411      	bmi.n	800f2b4 <__swhatbuf_r+0x40>
 800f290:	2380      	movs	r3, #128	; 0x80
 800f292:	00db      	lsls	r3, r3, #3
 800f294:	e00f      	b.n	800f2b6 <__swhatbuf_r+0x42>
 800f296:	466a      	mov	r2, sp
 800f298:	f000 f91c 	bl	800f4d4 <_fstat_r>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	dbf2      	blt.n	800f286 <__swhatbuf_r+0x12>
 800f2a0:	23f0      	movs	r3, #240	; 0xf0
 800f2a2:	9901      	ldr	r1, [sp, #4]
 800f2a4:	021b      	lsls	r3, r3, #8
 800f2a6:	4019      	ands	r1, r3
 800f2a8:	4b05      	ldr	r3, [pc, #20]	; (800f2c0 <__swhatbuf_r+0x4c>)
 800f2aa:	18c9      	adds	r1, r1, r3
 800f2ac:	424b      	negs	r3, r1
 800f2ae:	4159      	adcs	r1, r3
 800f2b0:	6029      	str	r1, [r5, #0]
 800f2b2:	e7ed      	b.n	800f290 <__swhatbuf_r+0x1c>
 800f2b4:	2340      	movs	r3, #64	; 0x40
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	6023      	str	r3, [r4, #0]
 800f2ba:	b016      	add	sp, #88	; 0x58
 800f2bc:	bd70      	pop	{r4, r5, r6, pc}
 800f2be:	46c0      	nop			; (mov r8, r8)
 800f2c0:	ffffe000 	.word	0xffffe000

0800f2c4 <__smakebuf_r>:
 800f2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2c6:	2602      	movs	r6, #2
 800f2c8:	898b      	ldrh	r3, [r1, #12]
 800f2ca:	0005      	movs	r5, r0
 800f2cc:	000c      	movs	r4, r1
 800f2ce:	4233      	tst	r3, r6
 800f2d0:	d006      	beq.n	800f2e0 <__smakebuf_r+0x1c>
 800f2d2:	0023      	movs	r3, r4
 800f2d4:	3347      	adds	r3, #71	; 0x47
 800f2d6:	6023      	str	r3, [r4, #0]
 800f2d8:	6123      	str	r3, [r4, #16]
 800f2da:	2301      	movs	r3, #1
 800f2dc:	6163      	str	r3, [r4, #20]
 800f2de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f2e0:	466a      	mov	r2, sp
 800f2e2:	ab01      	add	r3, sp, #4
 800f2e4:	f7ff ffc6 	bl	800f274 <__swhatbuf_r>
 800f2e8:	9900      	ldr	r1, [sp, #0]
 800f2ea:	0007      	movs	r7, r0
 800f2ec:	0028      	movs	r0, r5
 800f2ee:	f7ff f94d 	bl	800e58c <_malloc_r>
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d108      	bne.n	800f308 <__smakebuf_r+0x44>
 800f2f6:	220c      	movs	r2, #12
 800f2f8:	5ea3      	ldrsh	r3, [r4, r2]
 800f2fa:	059a      	lsls	r2, r3, #22
 800f2fc:	d4ef      	bmi.n	800f2de <__smakebuf_r+0x1a>
 800f2fe:	2203      	movs	r2, #3
 800f300:	4393      	bics	r3, r2
 800f302:	431e      	orrs	r6, r3
 800f304:	81a6      	strh	r6, [r4, #12]
 800f306:	e7e4      	b.n	800f2d2 <__smakebuf_r+0xe>
 800f308:	4b0f      	ldr	r3, [pc, #60]	; (800f348 <__smakebuf_r+0x84>)
 800f30a:	62ab      	str	r3, [r5, #40]	; 0x28
 800f30c:	2380      	movs	r3, #128	; 0x80
 800f30e:	89a2      	ldrh	r2, [r4, #12]
 800f310:	6020      	str	r0, [r4, #0]
 800f312:	4313      	orrs	r3, r2
 800f314:	81a3      	strh	r3, [r4, #12]
 800f316:	9b00      	ldr	r3, [sp, #0]
 800f318:	6120      	str	r0, [r4, #16]
 800f31a:	6163      	str	r3, [r4, #20]
 800f31c:	9b01      	ldr	r3, [sp, #4]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d00d      	beq.n	800f33e <__smakebuf_r+0x7a>
 800f322:	0028      	movs	r0, r5
 800f324:	230e      	movs	r3, #14
 800f326:	5ee1      	ldrsh	r1, [r4, r3]
 800f328:	f000 f8e6 	bl	800f4f8 <_isatty_r>
 800f32c:	2800      	cmp	r0, #0
 800f32e:	d006      	beq.n	800f33e <__smakebuf_r+0x7a>
 800f330:	2203      	movs	r2, #3
 800f332:	89a3      	ldrh	r3, [r4, #12]
 800f334:	4393      	bics	r3, r2
 800f336:	001a      	movs	r2, r3
 800f338:	2301      	movs	r3, #1
 800f33a:	4313      	orrs	r3, r2
 800f33c:	81a3      	strh	r3, [r4, #12]
 800f33e:	89a0      	ldrh	r0, [r4, #12]
 800f340:	4307      	orrs	r7, r0
 800f342:	81a7      	strh	r7, [r4, #12]
 800f344:	e7cb      	b.n	800f2de <__smakebuf_r+0x1a>
 800f346:	46c0      	nop			; (mov r8, r8)
 800f348:	0800f0b1 	.word	0x0800f0b1

0800f34c <_malloc_usable_size_r>:
 800f34c:	1f0b      	subs	r3, r1, #4
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	1f18      	subs	r0, r3, #4
 800f352:	2b00      	cmp	r3, #0
 800f354:	da01      	bge.n	800f35a <_malloc_usable_size_r+0xe>
 800f356:	580b      	ldr	r3, [r1, r0]
 800f358:	18c0      	adds	r0, r0, r3
 800f35a:	4770      	bx	lr

0800f35c <_raise_r>:
 800f35c:	b570      	push	{r4, r5, r6, lr}
 800f35e:	0004      	movs	r4, r0
 800f360:	000d      	movs	r5, r1
 800f362:	291f      	cmp	r1, #31
 800f364:	d904      	bls.n	800f370 <_raise_r+0x14>
 800f366:	2316      	movs	r3, #22
 800f368:	6003      	str	r3, [r0, #0]
 800f36a:	2001      	movs	r0, #1
 800f36c:	4240      	negs	r0, r0
 800f36e:	bd70      	pop	{r4, r5, r6, pc}
 800f370:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f372:	2b00      	cmp	r3, #0
 800f374:	d004      	beq.n	800f380 <_raise_r+0x24>
 800f376:	008a      	lsls	r2, r1, #2
 800f378:	189b      	adds	r3, r3, r2
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	2a00      	cmp	r2, #0
 800f37e:	d108      	bne.n	800f392 <_raise_r+0x36>
 800f380:	0020      	movs	r0, r4
 800f382:	f000 f831 	bl	800f3e8 <_getpid_r>
 800f386:	002a      	movs	r2, r5
 800f388:	0001      	movs	r1, r0
 800f38a:	0020      	movs	r0, r4
 800f38c:	f000 f81a 	bl	800f3c4 <_kill_r>
 800f390:	e7ed      	b.n	800f36e <_raise_r+0x12>
 800f392:	2000      	movs	r0, #0
 800f394:	2a01      	cmp	r2, #1
 800f396:	d0ea      	beq.n	800f36e <_raise_r+0x12>
 800f398:	1c51      	adds	r1, r2, #1
 800f39a:	d103      	bne.n	800f3a4 <_raise_r+0x48>
 800f39c:	2316      	movs	r3, #22
 800f39e:	3001      	adds	r0, #1
 800f3a0:	6023      	str	r3, [r4, #0]
 800f3a2:	e7e4      	b.n	800f36e <_raise_r+0x12>
 800f3a4:	2400      	movs	r4, #0
 800f3a6:	0028      	movs	r0, r5
 800f3a8:	601c      	str	r4, [r3, #0]
 800f3aa:	4790      	blx	r2
 800f3ac:	0020      	movs	r0, r4
 800f3ae:	e7de      	b.n	800f36e <_raise_r+0x12>

0800f3b0 <raise>:
 800f3b0:	b510      	push	{r4, lr}
 800f3b2:	4b03      	ldr	r3, [pc, #12]	; (800f3c0 <raise+0x10>)
 800f3b4:	0001      	movs	r1, r0
 800f3b6:	6818      	ldr	r0, [r3, #0]
 800f3b8:	f7ff ffd0 	bl	800f35c <_raise_r>
 800f3bc:	bd10      	pop	{r4, pc}
 800f3be:	46c0      	nop			; (mov r8, r8)
 800f3c0:	20000010 	.word	0x20000010

0800f3c4 <_kill_r>:
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	b570      	push	{r4, r5, r6, lr}
 800f3c8:	4d06      	ldr	r5, [pc, #24]	; (800f3e4 <_kill_r+0x20>)
 800f3ca:	0004      	movs	r4, r0
 800f3cc:	0008      	movs	r0, r1
 800f3ce:	0011      	movs	r1, r2
 800f3d0:	602b      	str	r3, [r5, #0]
 800f3d2:	f7f9 ff0a 	bl	80091ea <_kill>
 800f3d6:	1c43      	adds	r3, r0, #1
 800f3d8:	d103      	bne.n	800f3e2 <_kill_r+0x1e>
 800f3da:	682b      	ldr	r3, [r5, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d000      	beq.n	800f3e2 <_kill_r+0x1e>
 800f3e0:	6023      	str	r3, [r4, #0]
 800f3e2:	bd70      	pop	{r4, r5, r6, pc}
 800f3e4:	200005e0 	.word	0x200005e0

0800f3e8 <_getpid_r>:
 800f3e8:	b510      	push	{r4, lr}
 800f3ea:	f7f9 fef8 	bl	80091de <_getpid>
 800f3ee:	bd10      	pop	{r4, pc}

0800f3f0 <__sread>:
 800f3f0:	b570      	push	{r4, r5, r6, lr}
 800f3f2:	000c      	movs	r4, r1
 800f3f4:	250e      	movs	r5, #14
 800f3f6:	5f49      	ldrsh	r1, [r1, r5]
 800f3f8:	f000 f8a4 	bl	800f544 <_read_r>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	db03      	blt.n	800f408 <__sread+0x18>
 800f400:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f402:	181b      	adds	r3, r3, r0
 800f404:	6563      	str	r3, [r4, #84]	; 0x54
 800f406:	bd70      	pop	{r4, r5, r6, pc}
 800f408:	89a3      	ldrh	r3, [r4, #12]
 800f40a:	4a02      	ldr	r2, [pc, #8]	; (800f414 <__sread+0x24>)
 800f40c:	4013      	ands	r3, r2
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	e7f9      	b.n	800f406 <__sread+0x16>
 800f412:	46c0      	nop			; (mov r8, r8)
 800f414:	ffffefff 	.word	0xffffefff

0800f418 <__swrite>:
 800f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41a:	001f      	movs	r7, r3
 800f41c:	898b      	ldrh	r3, [r1, #12]
 800f41e:	0005      	movs	r5, r0
 800f420:	000c      	movs	r4, r1
 800f422:	0016      	movs	r6, r2
 800f424:	05db      	lsls	r3, r3, #23
 800f426:	d505      	bpl.n	800f434 <__swrite+0x1c>
 800f428:	230e      	movs	r3, #14
 800f42a:	5ec9      	ldrsh	r1, [r1, r3]
 800f42c:	2200      	movs	r2, #0
 800f42e:	2302      	movs	r3, #2
 800f430:	f000 f874 	bl	800f51c <_lseek_r>
 800f434:	89a3      	ldrh	r3, [r4, #12]
 800f436:	4a05      	ldr	r2, [pc, #20]	; (800f44c <__swrite+0x34>)
 800f438:	0028      	movs	r0, r5
 800f43a:	4013      	ands	r3, r2
 800f43c:	81a3      	strh	r3, [r4, #12]
 800f43e:	0032      	movs	r2, r6
 800f440:	230e      	movs	r3, #14
 800f442:	5ee1      	ldrsh	r1, [r4, r3]
 800f444:	003b      	movs	r3, r7
 800f446:	f000 f81f 	bl	800f488 <_write_r>
 800f44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f44c:	ffffefff 	.word	0xffffefff

0800f450 <__sseek>:
 800f450:	b570      	push	{r4, r5, r6, lr}
 800f452:	000c      	movs	r4, r1
 800f454:	250e      	movs	r5, #14
 800f456:	5f49      	ldrsh	r1, [r1, r5]
 800f458:	f000 f860 	bl	800f51c <_lseek_r>
 800f45c:	89a3      	ldrh	r3, [r4, #12]
 800f45e:	1c42      	adds	r2, r0, #1
 800f460:	d103      	bne.n	800f46a <__sseek+0x1a>
 800f462:	4a05      	ldr	r2, [pc, #20]	; (800f478 <__sseek+0x28>)
 800f464:	4013      	ands	r3, r2
 800f466:	81a3      	strh	r3, [r4, #12]
 800f468:	bd70      	pop	{r4, r5, r6, pc}
 800f46a:	2280      	movs	r2, #128	; 0x80
 800f46c:	0152      	lsls	r2, r2, #5
 800f46e:	4313      	orrs	r3, r2
 800f470:	81a3      	strh	r3, [r4, #12]
 800f472:	6560      	str	r0, [r4, #84]	; 0x54
 800f474:	e7f8      	b.n	800f468 <__sseek+0x18>
 800f476:	46c0      	nop			; (mov r8, r8)
 800f478:	ffffefff 	.word	0xffffefff

0800f47c <__sclose>:
 800f47c:	b510      	push	{r4, lr}
 800f47e:	230e      	movs	r3, #14
 800f480:	5ec9      	ldrsh	r1, [r1, r3]
 800f482:	f000 f815 	bl	800f4b0 <_close_r>
 800f486:	bd10      	pop	{r4, pc}

0800f488 <_write_r>:
 800f488:	b570      	push	{r4, r5, r6, lr}
 800f48a:	0004      	movs	r4, r0
 800f48c:	0008      	movs	r0, r1
 800f48e:	0011      	movs	r1, r2
 800f490:	001a      	movs	r2, r3
 800f492:	2300      	movs	r3, #0
 800f494:	4d05      	ldr	r5, [pc, #20]	; (800f4ac <_write_r+0x24>)
 800f496:	602b      	str	r3, [r5, #0]
 800f498:	f7f9 fee0 	bl	800925c <_write>
 800f49c:	1c43      	adds	r3, r0, #1
 800f49e:	d103      	bne.n	800f4a8 <_write_r+0x20>
 800f4a0:	682b      	ldr	r3, [r5, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d000      	beq.n	800f4a8 <_write_r+0x20>
 800f4a6:	6023      	str	r3, [r4, #0]
 800f4a8:	bd70      	pop	{r4, r5, r6, pc}
 800f4aa:	46c0      	nop			; (mov r8, r8)
 800f4ac:	200005e0 	.word	0x200005e0

0800f4b0 <_close_r>:
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	b570      	push	{r4, r5, r6, lr}
 800f4b4:	4d06      	ldr	r5, [pc, #24]	; (800f4d0 <_close_r+0x20>)
 800f4b6:	0004      	movs	r4, r0
 800f4b8:	0008      	movs	r0, r1
 800f4ba:	602b      	str	r3, [r5, #0]
 800f4bc:	f7f9 feea 	bl	8009294 <_close>
 800f4c0:	1c43      	adds	r3, r0, #1
 800f4c2:	d103      	bne.n	800f4cc <_close_r+0x1c>
 800f4c4:	682b      	ldr	r3, [r5, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d000      	beq.n	800f4cc <_close_r+0x1c>
 800f4ca:	6023      	str	r3, [r4, #0]
 800f4cc:	bd70      	pop	{r4, r5, r6, pc}
 800f4ce:	46c0      	nop			; (mov r8, r8)
 800f4d0:	200005e0 	.word	0x200005e0

0800f4d4 <_fstat_r>:
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	b570      	push	{r4, r5, r6, lr}
 800f4d8:	4d06      	ldr	r5, [pc, #24]	; (800f4f4 <_fstat_r+0x20>)
 800f4da:	0004      	movs	r4, r0
 800f4dc:	0008      	movs	r0, r1
 800f4de:	0011      	movs	r1, r2
 800f4e0:	602b      	str	r3, [r5, #0]
 800f4e2:	f7f9 fee1 	bl	80092a8 <_fstat>
 800f4e6:	1c43      	adds	r3, r0, #1
 800f4e8:	d103      	bne.n	800f4f2 <_fstat_r+0x1e>
 800f4ea:	682b      	ldr	r3, [r5, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d000      	beq.n	800f4f2 <_fstat_r+0x1e>
 800f4f0:	6023      	str	r3, [r4, #0]
 800f4f2:	bd70      	pop	{r4, r5, r6, pc}
 800f4f4:	200005e0 	.word	0x200005e0

0800f4f8 <_isatty_r>:
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	b570      	push	{r4, r5, r6, lr}
 800f4fc:	4d06      	ldr	r5, [pc, #24]	; (800f518 <_isatty_r+0x20>)
 800f4fe:	0004      	movs	r4, r0
 800f500:	0008      	movs	r0, r1
 800f502:	602b      	str	r3, [r5, #0]
 800f504:	f7f9 fede 	bl	80092c4 <_isatty>
 800f508:	1c43      	adds	r3, r0, #1
 800f50a:	d103      	bne.n	800f514 <_isatty_r+0x1c>
 800f50c:	682b      	ldr	r3, [r5, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d000      	beq.n	800f514 <_isatty_r+0x1c>
 800f512:	6023      	str	r3, [r4, #0]
 800f514:	bd70      	pop	{r4, r5, r6, pc}
 800f516:	46c0      	nop			; (mov r8, r8)
 800f518:	200005e0 	.word	0x200005e0

0800f51c <_lseek_r>:
 800f51c:	b570      	push	{r4, r5, r6, lr}
 800f51e:	0004      	movs	r4, r0
 800f520:	0008      	movs	r0, r1
 800f522:	0011      	movs	r1, r2
 800f524:	001a      	movs	r2, r3
 800f526:	2300      	movs	r3, #0
 800f528:	4d05      	ldr	r5, [pc, #20]	; (800f540 <_lseek_r+0x24>)
 800f52a:	602b      	str	r3, [r5, #0]
 800f52c:	f7f9 fed3 	bl	80092d6 <_lseek>
 800f530:	1c43      	adds	r3, r0, #1
 800f532:	d103      	bne.n	800f53c <_lseek_r+0x20>
 800f534:	682b      	ldr	r3, [r5, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d000      	beq.n	800f53c <_lseek_r+0x20>
 800f53a:	6023      	str	r3, [r4, #0]
 800f53c:	bd70      	pop	{r4, r5, r6, pc}
 800f53e:	46c0      	nop			; (mov r8, r8)
 800f540:	200005e0 	.word	0x200005e0

0800f544 <_read_r>:
 800f544:	b570      	push	{r4, r5, r6, lr}
 800f546:	0004      	movs	r4, r0
 800f548:	0008      	movs	r0, r1
 800f54a:	0011      	movs	r1, r2
 800f54c:	001a      	movs	r2, r3
 800f54e:	2300      	movs	r3, #0
 800f550:	4d05      	ldr	r5, [pc, #20]	; (800f568 <_read_r+0x24>)
 800f552:	602b      	str	r3, [r5, #0]
 800f554:	f7f9 fe65 	bl	8009222 <_read>
 800f558:	1c43      	adds	r3, r0, #1
 800f55a:	d103      	bne.n	800f564 <_read_r+0x20>
 800f55c:	682b      	ldr	r3, [r5, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d000      	beq.n	800f564 <_read_r+0x20>
 800f562:	6023      	str	r3, [r4, #0]
 800f564:	bd70      	pop	{r4, r5, r6, pc}
 800f566:	46c0      	nop			; (mov r8, r8)
 800f568:	200005e0 	.word	0x200005e0

0800f56c <atan>:
 800f56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f56e:	4b98      	ldr	r3, [pc, #608]	; (800f7d0 <atan+0x264>)
 800f570:	b085      	sub	sp, #20
 800f572:	004e      	lsls	r6, r1, #1
 800f574:	0004      	movs	r4, r0
 800f576:	000d      	movs	r5, r1
 800f578:	9103      	str	r1, [sp, #12]
 800f57a:	0876      	lsrs	r6, r6, #1
 800f57c:	429e      	cmp	r6, r3
 800f57e:	dd18      	ble.n	800f5b2 <atan+0x46>
 800f580:	4b94      	ldr	r3, [pc, #592]	; (800f7d4 <atan+0x268>)
 800f582:	429e      	cmp	r6, r3
 800f584:	dc02      	bgt.n	800f58c <atan+0x20>
 800f586:	d10a      	bne.n	800f59e <atan+0x32>
 800f588:	2800      	cmp	r0, #0
 800f58a:	d008      	beq.n	800f59e <atan+0x32>
 800f58c:	0022      	movs	r2, r4
 800f58e:	002b      	movs	r3, r5
 800f590:	0020      	movs	r0, r4
 800f592:	0029      	movs	r1, r5
 800f594:	f7f1 fe84 	bl	80012a0 <__aeabi_dadd>
 800f598:	0004      	movs	r4, r0
 800f59a:	000d      	movs	r5, r1
 800f59c:	e005      	b.n	800f5aa <atan+0x3e>
 800f59e:	9b03      	ldr	r3, [sp, #12]
 800f5a0:	4c8d      	ldr	r4, [pc, #564]	; (800f7d8 <atan+0x26c>)
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	dd00      	ble.n	800f5a8 <atan+0x3c>
 800f5a6:	e110      	b.n	800f7ca <atan+0x25e>
 800f5a8:	4d8c      	ldr	r5, [pc, #560]	; (800f7dc <atan+0x270>)
 800f5aa:	0020      	movs	r0, r4
 800f5ac:	0029      	movs	r1, r5
 800f5ae:	b005      	add	sp, #20
 800f5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5b2:	4b8b      	ldr	r3, [pc, #556]	; (800f7e0 <atan+0x274>)
 800f5b4:	429e      	cmp	r6, r3
 800f5b6:	dc0f      	bgt.n	800f5d8 <atan+0x6c>
 800f5b8:	4b8a      	ldr	r3, [pc, #552]	; (800f7e4 <atan+0x278>)
 800f5ba:	429e      	cmp	r6, r3
 800f5bc:	dc09      	bgt.n	800f5d2 <atan+0x66>
 800f5be:	4a8a      	ldr	r2, [pc, #552]	; (800f7e8 <atan+0x27c>)
 800f5c0:	4b8a      	ldr	r3, [pc, #552]	; (800f7ec <atan+0x280>)
 800f5c2:	f7f1 fe6d 	bl	80012a0 <__aeabi_dadd>
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	4b89      	ldr	r3, [pc, #548]	; (800f7f0 <atan+0x284>)
 800f5ca:	f7f0 ff55 	bl	8000478 <__aeabi_dcmpgt>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d1eb      	bne.n	800f5aa <atan+0x3e>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	425b      	negs	r3, r3
 800f5d6:	e025      	b.n	800f624 <atan+0xb8>
 800f5d8:	f000 f98a 	bl	800f8f0 <fabs>
 800f5dc:	4b85      	ldr	r3, [pc, #532]	; (800f7f4 <atan+0x288>)
 800f5de:	0004      	movs	r4, r0
 800f5e0:	000d      	movs	r5, r1
 800f5e2:	429e      	cmp	r6, r3
 800f5e4:	dd00      	ble.n	800f5e8 <atan+0x7c>
 800f5e6:	e0aa      	b.n	800f73e <atan+0x1d2>
 800f5e8:	4b83      	ldr	r3, [pc, #524]	; (800f7f8 <atan+0x28c>)
 800f5ea:	429e      	cmp	r6, r3
 800f5ec:	dd00      	ble.n	800f5f0 <atan+0x84>
 800f5ee:	e090      	b.n	800f712 <atan+0x1a6>
 800f5f0:	0002      	movs	r2, r0
 800f5f2:	000b      	movs	r3, r1
 800f5f4:	f7f1 fe54 	bl	80012a0 <__aeabi_dadd>
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	4b7d      	ldr	r3, [pc, #500]	; (800f7f0 <atan+0x284>)
 800f5fc:	f7f3 f82c 	bl	8002658 <__aeabi_dsub>
 800f600:	2380      	movs	r3, #128	; 0x80
 800f602:	0006      	movs	r6, r0
 800f604:	000f      	movs	r7, r1
 800f606:	2200      	movs	r2, #0
 800f608:	0020      	movs	r0, r4
 800f60a:	0029      	movs	r1, r5
 800f60c:	05db      	lsls	r3, r3, #23
 800f60e:	f7f1 fe47 	bl	80012a0 <__aeabi_dadd>
 800f612:	000b      	movs	r3, r1
 800f614:	0002      	movs	r2, r0
 800f616:	0039      	movs	r1, r7
 800f618:	0030      	movs	r0, r6
 800f61a:	f7f2 f9ab 	bl	8001974 <__aeabi_ddiv>
 800f61e:	2300      	movs	r3, #0
 800f620:	0004      	movs	r4, r0
 800f622:	000d      	movs	r5, r1
 800f624:	0022      	movs	r2, r4
 800f626:	9302      	str	r3, [sp, #8]
 800f628:	0020      	movs	r0, r4
 800f62a:	002b      	movs	r3, r5
 800f62c:	0029      	movs	r1, r5
 800f62e:	f7f2 fda7 	bl	8002180 <__aeabi_dmul>
 800f632:	0002      	movs	r2, r0
 800f634:	000b      	movs	r3, r1
 800f636:	9000      	str	r0, [sp, #0]
 800f638:	9101      	str	r1, [sp, #4]
 800f63a:	f7f2 fda1 	bl	8002180 <__aeabi_dmul>
 800f63e:	0006      	movs	r6, r0
 800f640:	000f      	movs	r7, r1
 800f642:	4a6e      	ldr	r2, [pc, #440]	; (800f7fc <atan+0x290>)
 800f644:	4b6e      	ldr	r3, [pc, #440]	; (800f800 <atan+0x294>)
 800f646:	f7f2 fd9b 	bl	8002180 <__aeabi_dmul>
 800f64a:	4a6e      	ldr	r2, [pc, #440]	; (800f804 <atan+0x298>)
 800f64c:	4b6e      	ldr	r3, [pc, #440]	; (800f808 <atan+0x29c>)
 800f64e:	f7f1 fe27 	bl	80012a0 <__aeabi_dadd>
 800f652:	0032      	movs	r2, r6
 800f654:	003b      	movs	r3, r7
 800f656:	f7f2 fd93 	bl	8002180 <__aeabi_dmul>
 800f65a:	4a6c      	ldr	r2, [pc, #432]	; (800f80c <atan+0x2a0>)
 800f65c:	4b6c      	ldr	r3, [pc, #432]	; (800f810 <atan+0x2a4>)
 800f65e:	f7f1 fe1f 	bl	80012a0 <__aeabi_dadd>
 800f662:	0032      	movs	r2, r6
 800f664:	003b      	movs	r3, r7
 800f666:	f7f2 fd8b 	bl	8002180 <__aeabi_dmul>
 800f66a:	4a6a      	ldr	r2, [pc, #424]	; (800f814 <atan+0x2a8>)
 800f66c:	4b6a      	ldr	r3, [pc, #424]	; (800f818 <atan+0x2ac>)
 800f66e:	f7f1 fe17 	bl	80012a0 <__aeabi_dadd>
 800f672:	0032      	movs	r2, r6
 800f674:	003b      	movs	r3, r7
 800f676:	f7f2 fd83 	bl	8002180 <__aeabi_dmul>
 800f67a:	4a68      	ldr	r2, [pc, #416]	; (800f81c <atan+0x2b0>)
 800f67c:	4b68      	ldr	r3, [pc, #416]	; (800f820 <atan+0x2b4>)
 800f67e:	f7f1 fe0f 	bl	80012a0 <__aeabi_dadd>
 800f682:	0032      	movs	r2, r6
 800f684:	003b      	movs	r3, r7
 800f686:	f7f2 fd7b 	bl	8002180 <__aeabi_dmul>
 800f68a:	4a66      	ldr	r2, [pc, #408]	; (800f824 <atan+0x2b8>)
 800f68c:	4b66      	ldr	r3, [pc, #408]	; (800f828 <atan+0x2bc>)
 800f68e:	f7f1 fe07 	bl	80012a0 <__aeabi_dadd>
 800f692:	9a00      	ldr	r2, [sp, #0]
 800f694:	9b01      	ldr	r3, [sp, #4]
 800f696:	f7f2 fd73 	bl	8002180 <__aeabi_dmul>
 800f69a:	4a64      	ldr	r2, [pc, #400]	; (800f82c <atan+0x2c0>)
 800f69c:	9000      	str	r0, [sp, #0]
 800f69e:	9101      	str	r1, [sp, #4]
 800f6a0:	4b63      	ldr	r3, [pc, #396]	; (800f830 <atan+0x2c4>)
 800f6a2:	0030      	movs	r0, r6
 800f6a4:	0039      	movs	r1, r7
 800f6a6:	f7f2 fd6b 	bl	8002180 <__aeabi_dmul>
 800f6aa:	4a62      	ldr	r2, [pc, #392]	; (800f834 <atan+0x2c8>)
 800f6ac:	4b62      	ldr	r3, [pc, #392]	; (800f838 <atan+0x2cc>)
 800f6ae:	f7f2 ffd3 	bl	8002658 <__aeabi_dsub>
 800f6b2:	0032      	movs	r2, r6
 800f6b4:	003b      	movs	r3, r7
 800f6b6:	f7f2 fd63 	bl	8002180 <__aeabi_dmul>
 800f6ba:	4a60      	ldr	r2, [pc, #384]	; (800f83c <atan+0x2d0>)
 800f6bc:	4b60      	ldr	r3, [pc, #384]	; (800f840 <atan+0x2d4>)
 800f6be:	f7f2 ffcb 	bl	8002658 <__aeabi_dsub>
 800f6c2:	0032      	movs	r2, r6
 800f6c4:	003b      	movs	r3, r7
 800f6c6:	f7f2 fd5b 	bl	8002180 <__aeabi_dmul>
 800f6ca:	4a5e      	ldr	r2, [pc, #376]	; (800f844 <atan+0x2d8>)
 800f6cc:	4b5e      	ldr	r3, [pc, #376]	; (800f848 <atan+0x2dc>)
 800f6ce:	f7f2 ffc3 	bl	8002658 <__aeabi_dsub>
 800f6d2:	0032      	movs	r2, r6
 800f6d4:	003b      	movs	r3, r7
 800f6d6:	f7f2 fd53 	bl	8002180 <__aeabi_dmul>
 800f6da:	4a5c      	ldr	r2, [pc, #368]	; (800f84c <atan+0x2e0>)
 800f6dc:	4b5c      	ldr	r3, [pc, #368]	; (800f850 <atan+0x2e4>)
 800f6de:	f7f2 ffbb 	bl	8002658 <__aeabi_dsub>
 800f6e2:	0032      	movs	r2, r6
 800f6e4:	003b      	movs	r3, r7
 800f6e6:	f7f2 fd4b 	bl	8002180 <__aeabi_dmul>
 800f6ea:	0002      	movs	r2, r0
 800f6ec:	000b      	movs	r3, r1
 800f6ee:	9800      	ldr	r0, [sp, #0]
 800f6f0:	9901      	ldr	r1, [sp, #4]
 800f6f2:	f7f1 fdd5 	bl	80012a0 <__aeabi_dadd>
 800f6f6:	002b      	movs	r3, r5
 800f6f8:	0022      	movs	r2, r4
 800f6fa:	f7f2 fd41 	bl	8002180 <__aeabi_dmul>
 800f6fe:	9b02      	ldr	r3, [sp, #8]
 800f700:	3301      	adds	r3, #1
 800f702:	d143      	bne.n	800f78c <atan+0x220>
 800f704:	0002      	movs	r2, r0
 800f706:	000b      	movs	r3, r1
 800f708:	0020      	movs	r0, r4
 800f70a:	0029      	movs	r1, r5
 800f70c:	f7f2 ffa4 	bl	8002658 <__aeabi_dsub>
 800f710:	e742      	b.n	800f598 <atan+0x2c>
 800f712:	2200      	movs	r2, #0
 800f714:	4b36      	ldr	r3, [pc, #216]	; (800f7f0 <atan+0x284>)
 800f716:	f7f2 ff9f 	bl	8002658 <__aeabi_dsub>
 800f71a:	2200      	movs	r2, #0
 800f71c:	0006      	movs	r6, r0
 800f71e:	000f      	movs	r7, r1
 800f720:	0020      	movs	r0, r4
 800f722:	0029      	movs	r1, r5
 800f724:	4b32      	ldr	r3, [pc, #200]	; (800f7f0 <atan+0x284>)
 800f726:	f7f1 fdbb 	bl	80012a0 <__aeabi_dadd>
 800f72a:	000b      	movs	r3, r1
 800f72c:	0002      	movs	r2, r0
 800f72e:	0039      	movs	r1, r7
 800f730:	0030      	movs	r0, r6
 800f732:	f7f2 f91f 	bl	8001974 <__aeabi_ddiv>
 800f736:	2301      	movs	r3, #1
 800f738:	0004      	movs	r4, r0
 800f73a:	000d      	movs	r5, r1
 800f73c:	e772      	b.n	800f624 <atan+0xb8>
 800f73e:	4b45      	ldr	r3, [pc, #276]	; (800f854 <atan+0x2e8>)
 800f740:	429e      	cmp	r6, r3
 800f742:	dc19      	bgt.n	800f778 <atan+0x20c>
 800f744:	2200      	movs	r2, #0
 800f746:	4b44      	ldr	r3, [pc, #272]	; (800f858 <atan+0x2ec>)
 800f748:	f7f2 ff86 	bl	8002658 <__aeabi_dsub>
 800f74c:	2200      	movs	r2, #0
 800f74e:	0006      	movs	r6, r0
 800f750:	000f      	movs	r7, r1
 800f752:	0020      	movs	r0, r4
 800f754:	0029      	movs	r1, r5
 800f756:	4b40      	ldr	r3, [pc, #256]	; (800f858 <atan+0x2ec>)
 800f758:	f7f2 fd12 	bl	8002180 <__aeabi_dmul>
 800f75c:	2200      	movs	r2, #0
 800f75e:	4b24      	ldr	r3, [pc, #144]	; (800f7f0 <atan+0x284>)
 800f760:	f7f1 fd9e 	bl	80012a0 <__aeabi_dadd>
 800f764:	000b      	movs	r3, r1
 800f766:	0002      	movs	r2, r0
 800f768:	0039      	movs	r1, r7
 800f76a:	0030      	movs	r0, r6
 800f76c:	f7f2 f902 	bl	8001974 <__aeabi_ddiv>
 800f770:	2302      	movs	r3, #2
 800f772:	0004      	movs	r4, r0
 800f774:	000d      	movs	r5, r1
 800f776:	e755      	b.n	800f624 <atan+0xb8>
 800f778:	000b      	movs	r3, r1
 800f77a:	0002      	movs	r2, r0
 800f77c:	4937      	ldr	r1, [pc, #220]	; (800f85c <atan+0x2f0>)
 800f77e:	2000      	movs	r0, #0
 800f780:	f7f2 f8f8 	bl	8001974 <__aeabi_ddiv>
 800f784:	2303      	movs	r3, #3
 800f786:	0004      	movs	r4, r0
 800f788:	000d      	movs	r5, r1
 800f78a:	e74b      	b.n	800f624 <atan+0xb8>
 800f78c:	9b02      	ldr	r3, [sp, #8]
 800f78e:	4f34      	ldr	r7, [pc, #208]	; (800f860 <atan+0x2f4>)
 800f790:	00de      	lsls	r6, r3, #3
 800f792:	4b34      	ldr	r3, [pc, #208]	; (800f864 <atan+0x2f8>)
 800f794:	19bf      	adds	r7, r7, r6
 800f796:	199e      	adds	r6, r3, r6
 800f798:	6832      	ldr	r2, [r6, #0]
 800f79a:	6873      	ldr	r3, [r6, #4]
 800f79c:	f7f2 ff5c 	bl	8002658 <__aeabi_dsub>
 800f7a0:	0022      	movs	r2, r4
 800f7a2:	002b      	movs	r3, r5
 800f7a4:	f7f2 ff58 	bl	8002658 <__aeabi_dsub>
 800f7a8:	000b      	movs	r3, r1
 800f7aa:	0002      	movs	r2, r0
 800f7ac:	6838      	ldr	r0, [r7, #0]
 800f7ae:	6879      	ldr	r1, [r7, #4]
 800f7b0:	f7f2 ff52 	bl	8002658 <__aeabi_dsub>
 800f7b4:	9b03      	ldr	r3, [sp, #12]
 800f7b6:	0004      	movs	r4, r0
 800f7b8:	000d      	movs	r5, r1
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	db00      	blt.n	800f7c0 <atan+0x254>
 800f7be:	e6f4      	b.n	800f5aa <atan+0x3e>
 800f7c0:	2180      	movs	r1, #128	; 0x80
 800f7c2:	0609      	lsls	r1, r1, #24
 800f7c4:	186b      	adds	r3, r5, r1
 800f7c6:	001d      	movs	r5, r3
 800f7c8:	e6ef      	b.n	800f5aa <atan+0x3e>
 800f7ca:	4d27      	ldr	r5, [pc, #156]	; (800f868 <atan+0x2fc>)
 800f7cc:	e6ed      	b.n	800f5aa <atan+0x3e>
 800f7ce:	46c0      	nop			; (mov r8, r8)
 800f7d0:	440fffff 	.word	0x440fffff
 800f7d4:	7ff00000 	.word	0x7ff00000
 800f7d8:	54442d18 	.word	0x54442d18
 800f7dc:	bff921fb 	.word	0xbff921fb
 800f7e0:	3fdbffff 	.word	0x3fdbffff
 800f7e4:	3e1fffff 	.word	0x3e1fffff
 800f7e8:	8800759c 	.word	0x8800759c
 800f7ec:	7e37e43c 	.word	0x7e37e43c
 800f7f0:	3ff00000 	.word	0x3ff00000
 800f7f4:	3ff2ffff 	.word	0x3ff2ffff
 800f7f8:	3fe5ffff 	.word	0x3fe5ffff
 800f7fc:	e322da11 	.word	0xe322da11
 800f800:	3f90ad3a 	.word	0x3f90ad3a
 800f804:	24760deb 	.word	0x24760deb
 800f808:	3fa97b4b 	.word	0x3fa97b4b
 800f80c:	a0d03d51 	.word	0xa0d03d51
 800f810:	3fb10d66 	.word	0x3fb10d66
 800f814:	c54c206e 	.word	0xc54c206e
 800f818:	3fb745cd 	.word	0x3fb745cd
 800f81c:	920083ff 	.word	0x920083ff
 800f820:	3fc24924 	.word	0x3fc24924
 800f824:	5555550d 	.word	0x5555550d
 800f828:	3fd55555 	.word	0x3fd55555
 800f82c:	2c6a6c2f 	.word	0x2c6a6c2f
 800f830:	bfa2b444 	.word	0xbfa2b444
 800f834:	52defd9a 	.word	0x52defd9a
 800f838:	3fadde2d 	.word	0x3fadde2d
 800f83c:	af749a6d 	.word	0xaf749a6d
 800f840:	3fb3b0f2 	.word	0x3fb3b0f2
 800f844:	fe231671 	.word	0xfe231671
 800f848:	3fbc71c6 	.word	0x3fbc71c6
 800f84c:	9998ebc4 	.word	0x9998ebc4
 800f850:	3fc99999 	.word	0x3fc99999
 800f854:	40037fff 	.word	0x40037fff
 800f858:	3ff80000 	.word	0x3ff80000
 800f85c:	bff00000 	.word	0xbff00000
 800f860:	080125d8 	.word	0x080125d8
 800f864:	080125f8 	.word	0x080125f8
 800f868:	3ff921fb 	.word	0x3ff921fb

0800f86c <cos>:
 800f86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f86e:	4a1e      	ldr	r2, [pc, #120]	; (800f8e8 <cos+0x7c>)
 800f870:	004b      	lsls	r3, r1, #1
 800f872:	b087      	sub	sp, #28
 800f874:	085b      	lsrs	r3, r3, #1
 800f876:	4293      	cmp	r3, r2
 800f878:	dc04      	bgt.n	800f884 <cos+0x18>
 800f87a:	2200      	movs	r2, #0
 800f87c:	2300      	movs	r3, #0
 800f87e:	f001 fbbf 	bl	8011000 <__kernel_cos>
 800f882:	e006      	b.n	800f892 <cos+0x26>
 800f884:	4a19      	ldr	r2, [pc, #100]	; (800f8ec <cos+0x80>)
 800f886:	4293      	cmp	r3, r2
 800f888:	dd05      	ble.n	800f896 <cos+0x2a>
 800f88a:	0002      	movs	r2, r0
 800f88c:	000b      	movs	r3, r1
 800f88e:	f7f2 fee3 	bl	8002658 <__aeabi_dsub>
 800f892:	b007      	add	sp, #28
 800f894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f896:	aa02      	add	r2, sp, #8
 800f898:	f001 f912 	bl	8010ac0 <__ieee754_rem_pio2>
 800f89c:	9c04      	ldr	r4, [sp, #16]
 800f89e:	9d05      	ldr	r5, [sp, #20]
 800f8a0:	2303      	movs	r3, #3
 800f8a2:	4003      	ands	r3, r0
 800f8a4:	2b01      	cmp	r3, #1
 800f8a6:	d008      	beq.n	800f8ba <cos+0x4e>
 800f8a8:	9802      	ldr	r0, [sp, #8]
 800f8aa:	9903      	ldr	r1, [sp, #12]
 800f8ac:	2b02      	cmp	r3, #2
 800f8ae:	d00f      	beq.n	800f8d0 <cos+0x64>
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d112      	bne.n	800f8da <cos+0x6e>
 800f8b4:	0022      	movs	r2, r4
 800f8b6:	002b      	movs	r3, r5
 800f8b8:	e7e1      	b.n	800f87e <cos+0x12>
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	0022      	movs	r2, r4
 800f8be:	9802      	ldr	r0, [sp, #8]
 800f8c0:	9903      	ldr	r1, [sp, #12]
 800f8c2:	002b      	movs	r3, r5
 800f8c4:	f001 ffd2 	bl	801186c <__kernel_sin>
 800f8c8:	2380      	movs	r3, #128	; 0x80
 800f8ca:	061b      	lsls	r3, r3, #24
 800f8cc:	18c9      	adds	r1, r1, r3
 800f8ce:	e7e0      	b.n	800f892 <cos+0x26>
 800f8d0:	0022      	movs	r2, r4
 800f8d2:	002b      	movs	r3, r5
 800f8d4:	f001 fb94 	bl	8011000 <__kernel_cos>
 800f8d8:	e7f6      	b.n	800f8c8 <cos+0x5c>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	0022      	movs	r2, r4
 800f8de:	9300      	str	r3, [sp, #0]
 800f8e0:	002b      	movs	r3, r5
 800f8e2:	f001 ffc3 	bl	801186c <__kernel_sin>
 800f8e6:	e7d4      	b.n	800f892 <cos+0x26>
 800f8e8:	3fe921fb 	.word	0x3fe921fb
 800f8ec:	7fefffff 	.word	0x7fefffff

0800f8f0 <fabs>:
 800f8f0:	004b      	lsls	r3, r1, #1
 800f8f2:	0859      	lsrs	r1, r3, #1
 800f8f4:	4770      	bx	lr
	...

0800f8f8 <sin>:
 800f8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8fa:	4a20      	ldr	r2, [pc, #128]	; (800f97c <sin+0x84>)
 800f8fc:	004b      	lsls	r3, r1, #1
 800f8fe:	b087      	sub	sp, #28
 800f900:	085b      	lsrs	r3, r3, #1
 800f902:	4293      	cmp	r3, r2
 800f904:	dc06      	bgt.n	800f914 <sin+0x1c>
 800f906:	2300      	movs	r3, #0
 800f908:	2200      	movs	r2, #0
 800f90a:	9300      	str	r3, [sp, #0]
 800f90c:	2300      	movs	r3, #0
 800f90e:	f001 ffad 	bl	801186c <__kernel_sin>
 800f912:	e006      	b.n	800f922 <sin+0x2a>
 800f914:	4a1a      	ldr	r2, [pc, #104]	; (800f980 <sin+0x88>)
 800f916:	4293      	cmp	r3, r2
 800f918:	dd05      	ble.n	800f926 <sin+0x2e>
 800f91a:	0002      	movs	r2, r0
 800f91c:	000b      	movs	r3, r1
 800f91e:	f7f2 fe9b 	bl	8002658 <__aeabi_dsub>
 800f922:	b007      	add	sp, #28
 800f924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f926:	aa02      	add	r2, sp, #8
 800f928:	f001 f8ca 	bl	8010ac0 <__ieee754_rem_pio2>
 800f92c:	9c04      	ldr	r4, [sp, #16]
 800f92e:	9d05      	ldr	r5, [sp, #20]
 800f930:	2303      	movs	r3, #3
 800f932:	4003      	ands	r3, r0
 800f934:	2b01      	cmp	r3, #1
 800f936:	d00a      	beq.n	800f94e <sin+0x56>
 800f938:	9802      	ldr	r0, [sp, #8]
 800f93a:	9903      	ldr	r1, [sp, #12]
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d00d      	beq.n	800f95c <sin+0x64>
 800f940:	2b00      	cmp	r3, #0
 800f942:	d115      	bne.n	800f970 <sin+0x78>
 800f944:	3301      	adds	r3, #1
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	0022      	movs	r2, r4
 800f94a:	002b      	movs	r3, r5
 800f94c:	e7df      	b.n	800f90e <sin+0x16>
 800f94e:	0022      	movs	r2, r4
 800f950:	9802      	ldr	r0, [sp, #8]
 800f952:	9903      	ldr	r1, [sp, #12]
 800f954:	002b      	movs	r3, r5
 800f956:	f001 fb53 	bl	8011000 <__kernel_cos>
 800f95a:	e7e2      	b.n	800f922 <sin+0x2a>
 800f95c:	2301      	movs	r3, #1
 800f95e:	0022      	movs	r2, r4
 800f960:	9300      	str	r3, [sp, #0]
 800f962:	002b      	movs	r3, r5
 800f964:	f001 ff82 	bl	801186c <__kernel_sin>
 800f968:	2380      	movs	r3, #128	; 0x80
 800f96a:	061b      	lsls	r3, r3, #24
 800f96c:	18c9      	adds	r1, r1, r3
 800f96e:	e7d8      	b.n	800f922 <sin+0x2a>
 800f970:	0022      	movs	r2, r4
 800f972:	002b      	movs	r3, r5
 800f974:	f001 fb44 	bl	8011000 <__kernel_cos>
 800f978:	e7f6      	b.n	800f968 <sin+0x70>
 800f97a:	46c0      	nop			; (mov r8, r8)
 800f97c:	3fe921fb 	.word	0x3fe921fb
 800f980:	7fefffff 	.word	0x7fefffff

0800f984 <asin>:
 800f984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f986:	0004      	movs	r4, r0
 800f988:	000d      	movs	r5, r1
 800f98a:	f000 f915 	bl	800fbb8 <__ieee754_asin>
 800f98e:	4b12      	ldr	r3, [pc, #72]	; (800f9d8 <asin+0x54>)
 800f990:	0006      	movs	r6, r0
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	000f      	movs	r7, r1
 800f996:	b25b      	sxtb	r3, r3
 800f998:	3301      	adds	r3, #1
 800f99a:	d01a      	beq.n	800f9d2 <asin+0x4e>
 800f99c:	0022      	movs	r2, r4
 800f99e:	002b      	movs	r3, r5
 800f9a0:	0020      	movs	r0, r4
 800f9a2:	0029      	movs	r1, r5
 800f9a4:	f7f3 f9ea 	bl	8002d7c <__aeabi_dcmpun>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	d112      	bne.n	800f9d2 <asin+0x4e>
 800f9ac:	0020      	movs	r0, r4
 800f9ae:	0029      	movs	r1, r5
 800f9b0:	f7ff ff9e 	bl	800f8f0 <fabs>
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	4b09      	ldr	r3, [pc, #36]	; (800f9dc <asin+0x58>)
 800f9b8:	f7f0 fd5e 	bl	8000478 <__aeabi_dcmpgt>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	d008      	beq.n	800f9d2 <asin+0x4e>
 800f9c0:	f7fc fe54 	bl	800c66c <__errno>
 800f9c4:	2321      	movs	r3, #33	; 0x21
 800f9c6:	6003      	str	r3, [r0, #0]
 800f9c8:	4805      	ldr	r0, [pc, #20]	; (800f9e0 <asin+0x5c>)
 800f9ca:	f002 f88d 	bl	8011ae8 <nan>
 800f9ce:	0006      	movs	r6, r0
 800f9d0:	000f      	movs	r7, r1
 800f9d2:	0030      	movs	r0, r6
 800f9d4:	0039      	movs	r1, r7
 800f9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9d8:	200001e0 	.word	0x200001e0
 800f9dc:	3ff00000 	.word	0x3ff00000
 800f9e0:	08012468 	.word	0x08012468

0800f9e4 <atan2>:
 800f9e4:	b510      	push	{r4, lr}
 800f9e6:	f000 fabf 	bl	800ff68 <__ieee754_atan2>
 800f9ea:	bd10      	pop	{r4, pc}

0800f9ec <pow>:
 800f9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9ee:	001d      	movs	r5, r3
 800f9f0:	0014      	movs	r4, r2
 800f9f2:	9000      	str	r0, [sp, #0]
 800f9f4:	9101      	str	r1, [sp, #4]
 800f9f6:	f000 fb63 	bl	80100c0 <__ieee754_pow>
 800f9fa:	4b54      	ldr	r3, [pc, #336]	; (800fb4c <pow+0x160>)
 800f9fc:	0006      	movs	r6, r0
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	000f      	movs	r7, r1
 800fa02:	b25b      	sxtb	r3, r3
 800fa04:	3301      	adds	r3, #1
 800fa06:	d018      	beq.n	800fa3a <pow+0x4e>
 800fa08:	0022      	movs	r2, r4
 800fa0a:	002b      	movs	r3, r5
 800fa0c:	0020      	movs	r0, r4
 800fa0e:	0029      	movs	r1, r5
 800fa10:	f7f3 f9b4 	bl	8002d7c <__aeabi_dcmpun>
 800fa14:	2800      	cmp	r0, #0
 800fa16:	d110      	bne.n	800fa3a <pow+0x4e>
 800fa18:	9a00      	ldr	r2, [sp, #0]
 800fa1a:	9b01      	ldr	r3, [sp, #4]
 800fa1c:	0010      	movs	r0, r2
 800fa1e:	0019      	movs	r1, r3
 800fa20:	f7f3 f9ac 	bl	8002d7c <__aeabi_dcmpun>
 800fa24:	2200      	movs	r2, #0
 800fa26:	2300      	movs	r3, #0
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	d00a      	beq.n	800fa42 <pow+0x56>
 800fa2c:	0020      	movs	r0, r4
 800fa2e:	0029      	movs	r1, r5
 800fa30:	f7f0 fd08 	bl	8000444 <__aeabi_dcmpeq>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	d000      	beq.n	800fa3a <pow+0x4e>
 800fa38:	e084      	b.n	800fb44 <pow+0x158>
 800fa3a:	0030      	movs	r0, r6
 800fa3c:	0039      	movs	r1, r7
 800fa3e:	b003      	add	sp, #12
 800fa40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa42:	9800      	ldr	r0, [sp, #0]
 800fa44:	9901      	ldr	r1, [sp, #4]
 800fa46:	f7f0 fcfd 	bl	8000444 <__aeabi_dcmpeq>
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	d01c      	beq.n	800fa88 <pow+0x9c>
 800fa4e:	2200      	movs	r2, #0
 800fa50:	2300      	movs	r3, #0
 800fa52:	0020      	movs	r0, r4
 800fa54:	0029      	movs	r1, r5
 800fa56:	f7f0 fcf5 	bl	8000444 <__aeabi_dcmpeq>
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	d172      	bne.n	800fb44 <pow+0x158>
 800fa5e:	0020      	movs	r0, r4
 800fa60:	0029      	movs	r1, r5
 800fa62:	f001 ffaf 	bl	80119c4 <finite>
 800fa66:	2800      	cmp	r0, #0
 800fa68:	d0e7      	beq.n	800fa3a <pow+0x4e>
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	0020      	movs	r0, r4
 800fa70:	0029      	movs	r1, r5
 800fa72:	f7f0 fced 	bl	8000450 <__aeabi_dcmplt>
 800fa76:	2800      	cmp	r0, #0
 800fa78:	d0df      	beq.n	800fa3a <pow+0x4e>
 800fa7a:	f7fc fdf7 	bl	800c66c <__errno>
 800fa7e:	2321      	movs	r3, #33	; 0x21
 800fa80:	2600      	movs	r6, #0
 800fa82:	6003      	str	r3, [r0, #0]
 800fa84:	4f32      	ldr	r7, [pc, #200]	; (800fb50 <pow+0x164>)
 800fa86:	e7d8      	b.n	800fa3a <pow+0x4e>
 800fa88:	0030      	movs	r0, r6
 800fa8a:	0039      	movs	r1, r7
 800fa8c:	f001 ff9a 	bl	80119c4 <finite>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d139      	bne.n	800fb08 <pow+0x11c>
 800fa94:	9800      	ldr	r0, [sp, #0]
 800fa96:	9901      	ldr	r1, [sp, #4]
 800fa98:	f001 ff94 	bl	80119c4 <finite>
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	d033      	beq.n	800fb08 <pow+0x11c>
 800faa0:	0020      	movs	r0, r4
 800faa2:	0029      	movs	r1, r5
 800faa4:	f001 ff8e 	bl	80119c4 <finite>
 800faa8:	2800      	cmp	r0, #0
 800faaa:	d02d      	beq.n	800fb08 <pow+0x11c>
 800faac:	0032      	movs	r2, r6
 800faae:	003b      	movs	r3, r7
 800fab0:	0030      	movs	r0, r6
 800fab2:	0039      	movs	r1, r7
 800fab4:	f7f3 f962 	bl	8002d7c <__aeabi_dcmpun>
 800fab8:	2800      	cmp	r0, #0
 800faba:	d00c      	beq.n	800fad6 <pow+0xea>
 800fabc:	f7fc fdd6 	bl	800c66c <__errno>
 800fac0:	2321      	movs	r3, #33	; 0x21
 800fac2:	2200      	movs	r2, #0
 800fac4:	6003      	str	r3, [r0, #0]
 800fac6:	2300      	movs	r3, #0
 800fac8:	0010      	movs	r0, r2
 800faca:	0019      	movs	r1, r3
 800facc:	f7f1 ff52 	bl	8001974 <__aeabi_ddiv>
 800fad0:	0006      	movs	r6, r0
 800fad2:	000f      	movs	r7, r1
 800fad4:	e7b1      	b.n	800fa3a <pow+0x4e>
 800fad6:	f7fc fdc9 	bl	800c66c <__errno>
 800fada:	2322      	movs	r3, #34	; 0x22
 800fadc:	2200      	movs	r2, #0
 800fade:	6003      	str	r3, [r0, #0]
 800fae0:	2300      	movs	r3, #0
 800fae2:	9800      	ldr	r0, [sp, #0]
 800fae4:	9901      	ldr	r1, [sp, #4]
 800fae6:	f7f0 fcb3 	bl	8000450 <__aeabi_dcmplt>
 800faea:	2600      	movs	r6, #0
 800faec:	2800      	cmp	r0, #0
 800faee:	d009      	beq.n	800fb04 <pow+0x118>
 800faf0:	0020      	movs	r0, r4
 800faf2:	0029      	movs	r1, r5
 800faf4:	f001 fffe 	bl	8011af4 <rint>
 800faf8:	0022      	movs	r2, r4
 800fafa:	002b      	movs	r3, r5
 800fafc:	f7f0 fca2 	bl	8000444 <__aeabi_dcmpeq>
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d0bf      	beq.n	800fa84 <pow+0x98>
 800fb04:	4f13      	ldr	r7, [pc, #76]	; (800fb54 <pow+0x168>)
 800fb06:	e798      	b.n	800fa3a <pow+0x4e>
 800fb08:	2200      	movs	r2, #0
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	0030      	movs	r0, r6
 800fb0e:	0039      	movs	r1, r7
 800fb10:	f7f0 fc98 	bl	8000444 <__aeabi_dcmpeq>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	d100      	bne.n	800fb1a <pow+0x12e>
 800fb18:	e78f      	b.n	800fa3a <pow+0x4e>
 800fb1a:	9800      	ldr	r0, [sp, #0]
 800fb1c:	9901      	ldr	r1, [sp, #4]
 800fb1e:	f001 ff51 	bl	80119c4 <finite>
 800fb22:	2800      	cmp	r0, #0
 800fb24:	d100      	bne.n	800fb28 <pow+0x13c>
 800fb26:	e788      	b.n	800fa3a <pow+0x4e>
 800fb28:	0020      	movs	r0, r4
 800fb2a:	0029      	movs	r1, r5
 800fb2c:	f001 ff4a 	bl	80119c4 <finite>
 800fb30:	2800      	cmp	r0, #0
 800fb32:	d100      	bne.n	800fb36 <pow+0x14a>
 800fb34:	e781      	b.n	800fa3a <pow+0x4e>
 800fb36:	f7fc fd99 	bl	800c66c <__errno>
 800fb3a:	2322      	movs	r3, #34	; 0x22
 800fb3c:	2600      	movs	r6, #0
 800fb3e:	2700      	movs	r7, #0
 800fb40:	6003      	str	r3, [r0, #0]
 800fb42:	e77a      	b.n	800fa3a <pow+0x4e>
 800fb44:	2600      	movs	r6, #0
 800fb46:	4f04      	ldr	r7, [pc, #16]	; (800fb58 <pow+0x16c>)
 800fb48:	e777      	b.n	800fa3a <pow+0x4e>
 800fb4a:	46c0      	nop			; (mov r8, r8)
 800fb4c:	200001e0 	.word	0x200001e0
 800fb50:	fff00000 	.word	0xfff00000
 800fb54:	7ff00000 	.word	0x7ff00000
 800fb58:	3ff00000 	.word	0x3ff00000

0800fb5c <sqrt>:
 800fb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb5e:	0004      	movs	r4, r0
 800fb60:	000d      	movs	r5, r1
 800fb62:	f001 f999 	bl	8010e98 <__ieee754_sqrt>
 800fb66:	4b13      	ldr	r3, [pc, #76]	; (800fbb4 <sqrt+0x58>)
 800fb68:	0006      	movs	r6, r0
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	000f      	movs	r7, r1
 800fb6e:	b25b      	sxtb	r3, r3
 800fb70:	3301      	adds	r3, #1
 800fb72:	d01b      	beq.n	800fbac <sqrt+0x50>
 800fb74:	0022      	movs	r2, r4
 800fb76:	002b      	movs	r3, r5
 800fb78:	0020      	movs	r0, r4
 800fb7a:	0029      	movs	r1, r5
 800fb7c:	f7f3 f8fe 	bl	8002d7c <__aeabi_dcmpun>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	d113      	bne.n	800fbac <sqrt+0x50>
 800fb84:	2200      	movs	r2, #0
 800fb86:	2300      	movs	r3, #0
 800fb88:	0020      	movs	r0, r4
 800fb8a:	0029      	movs	r1, r5
 800fb8c:	f7f0 fc60 	bl	8000450 <__aeabi_dcmplt>
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d00b      	beq.n	800fbac <sqrt+0x50>
 800fb94:	f7fc fd6a 	bl	800c66c <__errno>
 800fb98:	2321      	movs	r3, #33	; 0x21
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	6003      	str	r3, [r0, #0]
 800fb9e:	2300      	movs	r3, #0
 800fba0:	0010      	movs	r0, r2
 800fba2:	0019      	movs	r1, r3
 800fba4:	f7f1 fee6 	bl	8001974 <__aeabi_ddiv>
 800fba8:	0006      	movs	r6, r0
 800fbaa:	000f      	movs	r7, r1
 800fbac:	0030      	movs	r0, r6
 800fbae:	0039      	movs	r1, r7
 800fbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbb2:	46c0      	nop			; (mov r8, r8)
 800fbb4:	200001e0 	.word	0x200001e0

0800fbb8 <__ieee754_asin>:
 800fbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbba:	4bca      	ldr	r3, [pc, #808]	; (800fee4 <__ieee754_asin+0x32c>)
 800fbbc:	b08b      	sub	sp, #44	; 0x2c
 800fbbe:	004e      	lsls	r6, r1, #1
 800fbc0:	0004      	movs	r4, r0
 800fbc2:	000d      	movs	r5, r1
 800fbc4:	9107      	str	r1, [sp, #28]
 800fbc6:	0876      	lsrs	r6, r6, #1
 800fbc8:	429e      	cmp	r6, r3
 800fbca:	dd24      	ble.n	800fc16 <__ieee754_asin+0x5e>
 800fbcc:	4bc6      	ldr	r3, [pc, #792]	; (800fee8 <__ieee754_asin+0x330>)
 800fbce:	18f6      	adds	r6, r6, r3
 800fbd0:	4306      	orrs	r6, r0
 800fbd2:	d112      	bne.n	800fbfa <__ieee754_asin+0x42>
 800fbd4:	4ac5      	ldr	r2, [pc, #788]	; (800feec <__ieee754_asin+0x334>)
 800fbd6:	4bc6      	ldr	r3, [pc, #792]	; (800fef0 <__ieee754_asin+0x338>)
 800fbd8:	f7f2 fad2 	bl	8002180 <__aeabi_dmul>
 800fbdc:	4ac5      	ldr	r2, [pc, #788]	; (800fef4 <__ieee754_asin+0x33c>)
 800fbde:	0006      	movs	r6, r0
 800fbe0:	000f      	movs	r7, r1
 800fbe2:	4bc5      	ldr	r3, [pc, #788]	; (800fef8 <__ieee754_asin+0x340>)
 800fbe4:	0020      	movs	r0, r4
 800fbe6:	0029      	movs	r1, r5
 800fbe8:	f7f2 faca 	bl	8002180 <__aeabi_dmul>
 800fbec:	0002      	movs	r2, r0
 800fbee:	000b      	movs	r3, r1
 800fbf0:	0030      	movs	r0, r6
 800fbf2:	0039      	movs	r1, r7
 800fbf4:	f7f1 fb54 	bl	80012a0 <__aeabi_dadd>
 800fbf8:	e007      	b.n	800fc0a <__ieee754_asin+0x52>
 800fbfa:	0002      	movs	r2, r0
 800fbfc:	000b      	movs	r3, r1
 800fbfe:	f7f2 fd2b 	bl	8002658 <__aeabi_dsub>
 800fc02:	0002      	movs	r2, r0
 800fc04:	000b      	movs	r3, r1
 800fc06:	f7f1 feb5 	bl	8001974 <__aeabi_ddiv>
 800fc0a:	0004      	movs	r4, r0
 800fc0c:	000d      	movs	r5, r1
 800fc0e:	0020      	movs	r0, r4
 800fc10:	0029      	movs	r1, r5
 800fc12:	b00b      	add	sp, #44	; 0x2c
 800fc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc16:	4bb9      	ldr	r3, [pc, #740]	; (800fefc <__ieee754_asin+0x344>)
 800fc18:	429e      	cmp	r6, r3
 800fc1a:	dc0e      	bgt.n	800fc3a <__ieee754_asin+0x82>
 800fc1c:	23f9      	movs	r3, #249	; 0xf9
 800fc1e:	059b      	lsls	r3, r3, #22
 800fc20:	429e      	cmp	r6, r3
 800fc22:	db00      	blt.n	800fc26 <__ieee754_asin+0x6e>
 800fc24:	e09c      	b.n	800fd60 <__ieee754_asin+0x1a8>
 800fc26:	4ab6      	ldr	r2, [pc, #728]	; (800ff00 <__ieee754_asin+0x348>)
 800fc28:	4bb6      	ldr	r3, [pc, #728]	; (800ff04 <__ieee754_asin+0x34c>)
 800fc2a:	f7f1 fb39 	bl	80012a0 <__aeabi_dadd>
 800fc2e:	2200      	movs	r2, #0
 800fc30:	4bb5      	ldr	r3, [pc, #724]	; (800ff08 <__ieee754_asin+0x350>)
 800fc32:	f7f0 fc21 	bl	8000478 <__aeabi_dcmpgt>
 800fc36:	2800      	cmp	r0, #0
 800fc38:	d1e9      	bne.n	800fc0e <__ieee754_asin+0x56>
 800fc3a:	0020      	movs	r0, r4
 800fc3c:	0029      	movs	r1, r5
 800fc3e:	f7ff fe57 	bl	800f8f0 <fabs>
 800fc42:	0002      	movs	r2, r0
 800fc44:	000b      	movs	r3, r1
 800fc46:	2000      	movs	r0, #0
 800fc48:	49af      	ldr	r1, [pc, #700]	; (800ff08 <__ieee754_asin+0x350>)
 800fc4a:	f7f2 fd05 	bl	8002658 <__aeabi_dsub>
 800fc4e:	2200      	movs	r2, #0
 800fc50:	4bae      	ldr	r3, [pc, #696]	; (800ff0c <__ieee754_asin+0x354>)
 800fc52:	f7f2 fa95 	bl	8002180 <__aeabi_dmul>
 800fc56:	0004      	movs	r4, r0
 800fc58:	000d      	movs	r5, r1
 800fc5a:	4aad      	ldr	r2, [pc, #692]	; (800ff10 <__ieee754_asin+0x358>)
 800fc5c:	4bad      	ldr	r3, [pc, #692]	; (800ff14 <__ieee754_asin+0x35c>)
 800fc5e:	f7f2 fa8f 	bl	8002180 <__aeabi_dmul>
 800fc62:	4aad      	ldr	r2, [pc, #692]	; (800ff18 <__ieee754_asin+0x360>)
 800fc64:	4bad      	ldr	r3, [pc, #692]	; (800ff1c <__ieee754_asin+0x364>)
 800fc66:	f7f1 fb1b 	bl	80012a0 <__aeabi_dadd>
 800fc6a:	0022      	movs	r2, r4
 800fc6c:	002b      	movs	r3, r5
 800fc6e:	f7f2 fa87 	bl	8002180 <__aeabi_dmul>
 800fc72:	4aab      	ldr	r2, [pc, #684]	; (800ff20 <__ieee754_asin+0x368>)
 800fc74:	4bab      	ldr	r3, [pc, #684]	; (800ff24 <__ieee754_asin+0x36c>)
 800fc76:	f7f2 fcef 	bl	8002658 <__aeabi_dsub>
 800fc7a:	0022      	movs	r2, r4
 800fc7c:	002b      	movs	r3, r5
 800fc7e:	f7f2 fa7f 	bl	8002180 <__aeabi_dmul>
 800fc82:	4aa9      	ldr	r2, [pc, #676]	; (800ff28 <__ieee754_asin+0x370>)
 800fc84:	4ba9      	ldr	r3, [pc, #676]	; (800ff2c <__ieee754_asin+0x374>)
 800fc86:	f7f1 fb0b 	bl	80012a0 <__aeabi_dadd>
 800fc8a:	0022      	movs	r2, r4
 800fc8c:	002b      	movs	r3, r5
 800fc8e:	f7f2 fa77 	bl	8002180 <__aeabi_dmul>
 800fc92:	4aa7      	ldr	r2, [pc, #668]	; (800ff30 <__ieee754_asin+0x378>)
 800fc94:	4ba7      	ldr	r3, [pc, #668]	; (800ff34 <__ieee754_asin+0x37c>)
 800fc96:	f7f2 fcdf 	bl	8002658 <__aeabi_dsub>
 800fc9a:	0022      	movs	r2, r4
 800fc9c:	002b      	movs	r3, r5
 800fc9e:	f7f2 fa6f 	bl	8002180 <__aeabi_dmul>
 800fca2:	4aa5      	ldr	r2, [pc, #660]	; (800ff38 <__ieee754_asin+0x380>)
 800fca4:	4ba5      	ldr	r3, [pc, #660]	; (800ff3c <__ieee754_asin+0x384>)
 800fca6:	f7f1 fafb 	bl	80012a0 <__aeabi_dadd>
 800fcaa:	0022      	movs	r2, r4
 800fcac:	002b      	movs	r3, r5
 800fcae:	f7f2 fa67 	bl	8002180 <__aeabi_dmul>
 800fcb2:	4aa3      	ldr	r2, [pc, #652]	; (800ff40 <__ieee754_asin+0x388>)
 800fcb4:	9002      	str	r0, [sp, #8]
 800fcb6:	9103      	str	r1, [sp, #12]
 800fcb8:	4ba2      	ldr	r3, [pc, #648]	; (800ff44 <__ieee754_asin+0x38c>)
 800fcba:	0020      	movs	r0, r4
 800fcbc:	0029      	movs	r1, r5
 800fcbe:	f7f2 fa5f 	bl	8002180 <__aeabi_dmul>
 800fcc2:	4aa1      	ldr	r2, [pc, #644]	; (800ff48 <__ieee754_asin+0x390>)
 800fcc4:	4ba1      	ldr	r3, [pc, #644]	; (800ff4c <__ieee754_asin+0x394>)
 800fcc6:	f7f2 fcc7 	bl	8002658 <__aeabi_dsub>
 800fcca:	0022      	movs	r2, r4
 800fccc:	002b      	movs	r3, r5
 800fcce:	f7f2 fa57 	bl	8002180 <__aeabi_dmul>
 800fcd2:	4a9f      	ldr	r2, [pc, #636]	; (800ff50 <__ieee754_asin+0x398>)
 800fcd4:	4b9f      	ldr	r3, [pc, #636]	; (800ff54 <__ieee754_asin+0x39c>)
 800fcd6:	f7f1 fae3 	bl	80012a0 <__aeabi_dadd>
 800fcda:	0022      	movs	r2, r4
 800fcdc:	002b      	movs	r3, r5
 800fcde:	f7f2 fa4f 	bl	8002180 <__aeabi_dmul>
 800fce2:	4a9d      	ldr	r2, [pc, #628]	; (800ff58 <__ieee754_asin+0x3a0>)
 800fce4:	4b9d      	ldr	r3, [pc, #628]	; (800ff5c <__ieee754_asin+0x3a4>)
 800fce6:	f7f2 fcb7 	bl	8002658 <__aeabi_dsub>
 800fcea:	0022      	movs	r2, r4
 800fcec:	002b      	movs	r3, r5
 800fcee:	f7f2 fa47 	bl	8002180 <__aeabi_dmul>
 800fcf2:	4b85      	ldr	r3, [pc, #532]	; (800ff08 <__ieee754_asin+0x350>)
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f7f1 fad3 	bl	80012a0 <__aeabi_dadd>
 800fcfa:	9004      	str	r0, [sp, #16]
 800fcfc:	9105      	str	r1, [sp, #20]
 800fcfe:	0020      	movs	r0, r4
 800fd00:	0029      	movs	r1, r5
 800fd02:	f001 f8c9 	bl	8010e98 <__ieee754_sqrt>
 800fd06:	4b96      	ldr	r3, [pc, #600]	; (800ff60 <__ieee754_asin+0x3a8>)
 800fd08:	9000      	str	r0, [sp, #0]
 800fd0a:	9101      	str	r1, [sp, #4]
 800fd0c:	429e      	cmp	r6, r3
 800fd0e:	dc00      	bgt.n	800fd12 <__ieee754_asin+0x15a>
 800fd10:	e08b      	b.n	800fe2a <__ieee754_asin+0x272>
 800fd12:	9a04      	ldr	r2, [sp, #16]
 800fd14:	9b05      	ldr	r3, [sp, #20]
 800fd16:	9802      	ldr	r0, [sp, #8]
 800fd18:	9903      	ldr	r1, [sp, #12]
 800fd1a:	f7f1 fe2b 	bl	8001974 <__aeabi_ddiv>
 800fd1e:	9a00      	ldr	r2, [sp, #0]
 800fd20:	9b01      	ldr	r3, [sp, #4]
 800fd22:	f7f2 fa2d 	bl	8002180 <__aeabi_dmul>
 800fd26:	9a00      	ldr	r2, [sp, #0]
 800fd28:	9b01      	ldr	r3, [sp, #4]
 800fd2a:	f7f1 fab9 	bl	80012a0 <__aeabi_dadd>
 800fd2e:	0002      	movs	r2, r0
 800fd30:	000b      	movs	r3, r1
 800fd32:	f7f1 fab5 	bl	80012a0 <__aeabi_dadd>
 800fd36:	4a6f      	ldr	r2, [pc, #444]	; (800fef4 <__ieee754_asin+0x33c>)
 800fd38:	4b6f      	ldr	r3, [pc, #444]	; (800fef8 <__ieee754_asin+0x340>)
 800fd3a:	f7f2 fc8d 	bl	8002658 <__aeabi_dsub>
 800fd3e:	0002      	movs	r2, r0
 800fd40:	000b      	movs	r3, r1
 800fd42:	486a      	ldr	r0, [pc, #424]	; (800feec <__ieee754_asin+0x334>)
 800fd44:	496a      	ldr	r1, [pc, #424]	; (800fef0 <__ieee754_asin+0x338>)
 800fd46:	f7f2 fc87 	bl	8002658 <__aeabi_dsub>
 800fd4a:	9b07      	ldr	r3, [sp, #28]
 800fd4c:	0004      	movs	r4, r0
 800fd4e:	000d      	movs	r5, r1
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	dd00      	ble.n	800fd56 <__ieee754_asin+0x19e>
 800fd54:	e75b      	b.n	800fc0e <__ieee754_asin+0x56>
 800fd56:	2180      	movs	r1, #128	; 0x80
 800fd58:	0609      	lsls	r1, r1, #24
 800fd5a:	186b      	adds	r3, r5, r1
 800fd5c:	001d      	movs	r5, r3
 800fd5e:	e756      	b.n	800fc0e <__ieee754_asin+0x56>
 800fd60:	0002      	movs	r2, r0
 800fd62:	000b      	movs	r3, r1
 800fd64:	f7f2 fa0c 	bl	8002180 <__aeabi_dmul>
 800fd68:	0006      	movs	r6, r0
 800fd6a:	000f      	movs	r7, r1
 800fd6c:	4a68      	ldr	r2, [pc, #416]	; (800ff10 <__ieee754_asin+0x358>)
 800fd6e:	4b69      	ldr	r3, [pc, #420]	; (800ff14 <__ieee754_asin+0x35c>)
 800fd70:	f7f2 fa06 	bl	8002180 <__aeabi_dmul>
 800fd74:	4a68      	ldr	r2, [pc, #416]	; (800ff18 <__ieee754_asin+0x360>)
 800fd76:	4b69      	ldr	r3, [pc, #420]	; (800ff1c <__ieee754_asin+0x364>)
 800fd78:	f7f1 fa92 	bl	80012a0 <__aeabi_dadd>
 800fd7c:	0032      	movs	r2, r6
 800fd7e:	003b      	movs	r3, r7
 800fd80:	f7f2 f9fe 	bl	8002180 <__aeabi_dmul>
 800fd84:	4a66      	ldr	r2, [pc, #408]	; (800ff20 <__ieee754_asin+0x368>)
 800fd86:	4b67      	ldr	r3, [pc, #412]	; (800ff24 <__ieee754_asin+0x36c>)
 800fd88:	f7f2 fc66 	bl	8002658 <__aeabi_dsub>
 800fd8c:	0032      	movs	r2, r6
 800fd8e:	003b      	movs	r3, r7
 800fd90:	f7f2 f9f6 	bl	8002180 <__aeabi_dmul>
 800fd94:	4a64      	ldr	r2, [pc, #400]	; (800ff28 <__ieee754_asin+0x370>)
 800fd96:	4b65      	ldr	r3, [pc, #404]	; (800ff2c <__ieee754_asin+0x374>)
 800fd98:	f7f1 fa82 	bl	80012a0 <__aeabi_dadd>
 800fd9c:	0032      	movs	r2, r6
 800fd9e:	003b      	movs	r3, r7
 800fda0:	f7f2 f9ee 	bl	8002180 <__aeabi_dmul>
 800fda4:	4a62      	ldr	r2, [pc, #392]	; (800ff30 <__ieee754_asin+0x378>)
 800fda6:	4b63      	ldr	r3, [pc, #396]	; (800ff34 <__ieee754_asin+0x37c>)
 800fda8:	f7f2 fc56 	bl	8002658 <__aeabi_dsub>
 800fdac:	0032      	movs	r2, r6
 800fdae:	003b      	movs	r3, r7
 800fdb0:	f7f2 f9e6 	bl	8002180 <__aeabi_dmul>
 800fdb4:	4a60      	ldr	r2, [pc, #384]	; (800ff38 <__ieee754_asin+0x380>)
 800fdb6:	4b61      	ldr	r3, [pc, #388]	; (800ff3c <__ieee754_asin+0x384>)
 800fdb8:	f7f1 fa72 	bl	80012a0 <__aeabi_dadd>
 800fdbc:	0032      	movs	r2, r6
 800fdbe:	003b      	movs	r3, r7
 800fdc0:	f7f2 f9de 	bl	8002180 <__aeabi_dmul>
 800fdc4:	4a5e      	ldr	r2, [pc, #376]	; (800ff40 <__ieee754_asin+0x388>)
 800fdc6:	9000      	str	r0, [sp, #0]
 800fdc8:	9101      	str	r1, [sp, #4]
 800fdca:	4b5e      	ldr	r3, [pc, #376]	; (800ff44 <__ieee754_asin+0x38c>)
 800fdcc:	0030      	movs	r0, r6
 800fdce:	0039      	movs	r1, r7
 800fdd0:	f7f2 f9d6 	bl	8002180 <__aeabi_dmul>
 800fdd4:	4a5c      	ldr	r2, [pc, #368]	; (800ff48 <__ieee754_asin+0x390>)
 800fdd6:	4b5d      	ldr	r3, [pc, #372]	; (800ff4c <__ieee754_asin+0x394>)
 800fdd8:	f7f2 fc3e 	bl	8002658 <__aeabi_dsub>
 800fddc:	0032      	movs	r2, r6
 800fdde:	003b      	movs	r3, r7
 800fde0:	f7f2 f9ce 	bl	8002180 <__aeabi_dmul>
 800fde4:	4a5a      	ldr	r2, [pc, #360]	; (800ff50 <__ieee754_asin+0x398>)
 800fde6:	4b5b      	ldr	r3, [pc, #364]	; (800ff54 <__ieee754_asin+0x39c>)
 800fde8:	f7f1 fa5a 	bl	80012a0 <__aeabi_dadd>
 800fdec:	0032      	movs	r2, r6
 800fdee:	003b      	movs	r3, r7
 800fdf0:	f7f2 f9c6 	bl	8002180 <__aeabi_dmul>
 800fdf4:	4a58      	ldr	r2, [pc, #352]	; (800ff58 <__ieee754_asin+0x3a0>)
 800fdf6:	4b59      	ldr	r3, [pc, #356]	; (800ff5c <__ieee754_asin+0x3a4>)
 800fdf8:	f7f2 fc2e 	bl	8002658 <__aeabi_dsub>
 800fdfc:	0032      	movs	r2, r6
 800fdfe:	003b      	movs	r3, r7
 800fe00:	f7f2 f9be 	bl	8002180 <__aeabi_dmul>
 800fe04:	2200      	movs	r2, #0
 800fe06:	4b40      	ldr	r3, [pc, #256]	; (800ff08 <__ieee754_asin+0x350>)
 800fe08:	f7f1 fa4a 	bl	80012a0 <__aeabi_dadd>
 800fe0c:	0002      	movs	r2, r0
 800fe0e:	000b      	movs	r3, r1
 800fe10:	9800      	ldr	r0, [sp, #0]
 800fe12:	9901      	ldr	r1, [sp, #4]
 800fe14:	f7f1 fdae 	bl	8001974 <__aeabi_ddiv>
 800fe18:	0022      	movs	r2, r4
 800fe1a:	002b      	movs	r3, r5
 800fe1c:	f7f2 f9b0 	bl	8002180 <__aeabi_dmul>
 800fe20:	0002      	movs	r2, r0
 800fe22:	000b      	movs	r3, r1
 800fe24:	0020      	movs	r0, r4
 800fe26:	0029      	movs	r1, r5
 800fe28:	e6e4      	b.n	800fbf4 <__ieee754_asin+0x3c>
 800fe2a:	9a00      	ldr	r2, [sp, #0]
 800fe2c:	9b01      	ldr	r3, [sp, #4]
 800fe2e:	0010      	movs	r0, r2
 800fe30:	9e00      	ldr	r6, [sp, #0]
 800fe32:	9f01      	ldr	r7, [sp, #4]
 800fe34:	0019      	movs	r1, r3
 800fe36:	f7f1 fa33 	bl	80012a0 <__aeabi_dadd>
 800fe3a:	9a04      	ldr	r2, [sp, #16]
 800fe3c:	9b05      	ldr	r3, [sp, #20]
 800fe3e:	9008      	str	r0, [sp, #32]
 800fe40:	9109      	str	r1, [sp, #36]	; 0x24
 800fe42:	9802      	ldr	r0, [sp, #8]
 800fe44:	9903      	ldr	r1, [sp, #12]
 800fe46:	f7f1 fd95 	bl	8001974 <__aeabi_ddiv>
 800fe4a:	0002      	movs	r2, r0
 800fe4c:	000b      	movs	r3, r1
 800fe4e:	9808      	ldr	r0, [sp, #32]
 800fe50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe52:	f7f2 f995 	bl	8002180 <__aeabi_dmul>
 800fe56:	2600      	movs	r6, #0
 800fe58:	9002      	str	r0, [sp, #8]
 800fe5a:	9103      	str	r1, [sp, #12]
 800fe5c:	0032      	movs	r2, r6
 800fe5e:	003b      	movs	r3, r7
 800fe60:	0030      	movs	r0, r6
 800fe62:	0039      	movs	r1, r7
 800fe64:	f7f2 f98c 	bl	8002180 <__aeabi_dmul>
 800fe68:	0002      	movs	r2, r0
 800fe6a:	000b      	movs	r3, r1
 800fe6c:	0020      	movs	r0, r4
 800fe6e:	0029      	movs	r1, r5
 800fe70:	f7f2 fbf2 	bl	8002658 <__aeabi_dsub>
 800fe74:	0032      	movs	r2, r6
 800fe76:	0004      	movs	r4, r0
 800fe78:	000d      	movs	r5, r1
 800fe7a:	9800      	ldr	r0, [sp, #0]
 800fe7c:	9901      	ldr	r1, [sp, #4]
 800fe7e:	003b      	movs	r3, r7
 800fe80:	f7f1 fa0e 	bl	80012a0 <__aeabi_dadd>
 800fe84:	0002      	movs	r2, r0
 800fe86:	000b      	movs	r3, r1
 800fe88:	0020      	movs	r0, r4
 800fe8a:	0029      	movs	r1, r5
 800fe8c:	f7f1 fd72 	bl	8001974 <__aeabi_ddiv>
 800fe90:	0002      	movs	r2, r0
 800fe92:	000b      	movs	r3, r1
 800fe94:	f7f1 fa04 	bl	80012a0 <__aeabi_dadd>
 800fe98:	0002      	movs	r2, r0
 800fe9a:	000b      	movs	r3, r1
 800fe9c:	4815      	ldr	r0, [pc, #84]	; (800fef4 <__ieee754_asin+0x33c>)
 800fe9e:	4916      	ldr	r1, [pc, #88]	; (800fef8 <__ieee754_asin+0x340>)
 800fea0:	f7f2 fbda 	bl	8002658 <__aeabi_dsub>
 800fea4:	0002      	movs	r2, r0
 800fea6:	000b      	movs	r3, r1
 800fea8:	9802      	ldr	r0, [sp, #8]
 800feaa:	9903      	ldr	r1, [sp, #12]
 800feac:	f7f2 fbd4 	bl	8002658 <__aeabi_dsub>
 800feb0:	0032      	movs	r2, r6
 800feb2:	0004      	movs	r4, r0
 800feb4:	000d      	movs	r5, r1
 800feb6:	003b      	movs	r3, r7
 800feb8:	0030      	movs	r0, r6
 800feba:	0039      	movs	r1, r7
 800febc:	f7f1 f9f0 	bl	80012a0 <__aeabi_dadd>
 800fec0:	0002      	movs	r2, r0
 800fec2:	000b      	movs	r3, r1
 800fec4:	4809      	ldr	r0, [pc, #36]	; (800feec <__ieee754_asin+0x334>)
 800fec6:	4927      	ldr	r1, [pc, #156]	; (800ff64 <__ieee754_asin+0x3ac>)
 800fec8:	f7f2 fbc6 	bl	8002658 <__aeabi_dsub>
 800fecc:	0002      	movs	r2, r0
 800fece:	000b      	movs	r3, r1
 800fed0:	0020      	movs	r0, r4
 800fed2:	0029      	movs	r1, r5
 800fed4:	f7f2 fbc0 	bl	8002658 <__aeabi_dsub>
 800fed8:	0002      	movs	r2, r0
 800feda:	000b      	movs	r3, r1
 800fedc:	4803      	ldr	r0, [pc, #12]	; (800feec <__ieee754_asin+0x334>)
 800fede:	4921      	ldr	r1, [pc, #132]	; (800ff64 <__ieee754_asin+0x3ac>)
 800fee0:	e731      	b.n	800fd46 <__ieee754_asin+0x18e>
 800fee2:	46c0      	nop			; (mov r8, r8)
 800fee4:	3fefffff 	.word	0x3fefffff
 800fee8:	c0100000 	.word	0xc0100000
 800feec:	54442d18 	.word	0x54442d18
 800fef0:	3ff921fb 	.word	0x3ff921fb
 800fef4:	33145c07 	.word	0x33145c07
 800fef8:	3c91a626 	.word	0x3c91a626
 800fefc:	3fdfffff 	.word	0x3fdfffff
 800ff00:	8800759c 	.word	0x8800759c
 800ff04:	7e37e43c 	.word	0x7e37e43c
 800ff08:	3ff00000 	.word	0x3ff00000
 800ff0c:	3fe00000 	.word	0x3fe00000
 800ff10:	0dfdf709 	.word	0x0dfdf709
 800ff14:	3f023de1 	.word	0x3f023de1
 800ff18:	7501b288 	.word	0x7501b288
 800ff1c:	3f49efe0 	.word	0x3f49efe0
 800ff20:	b5688f3b 	.word	0xb5688f3b
 800ff24:	3fa48228 	.word	0x3fa48228
 800ff28:	0e884455 	.word	0x0e884455
 800ff2c:	3fc9c155 	.word	0x3fc9c155
 800ff30:	03eb6f7d 	.word	0x03eb6f7d
 800ff34:	3fd4d612 	.word	0x3fd4d612
 800ff38:	55555555 	.word	0x55555555
 800ff3c:	3fc55555 	.word	0x3fc55555
 800ff40:	b12e9282 	.word	0xb12e9282
 800ff44:	3fb3b8c5 	.word	0x3fb3b8c5
 800ff48:	1b8d0159 	.word	0x1b8d0159
 800ff4c:	3fe6066c 	.word	0x3fe6066c
 800ff50:	9c598ac8 	.word	0x9c598ac8
 800ff54:	40002ae5 	.word	0x40002ae5
 800ff58:	1c8a2d4b 	.word	0x1c8a2d4b
 800ff5c:	40033a27 	.word	0x40033a27
 800ff60:	3fef3332 	.word	0x3fef3332
 800ff64:	3fe921fb 	.word	0x3fe921fb

0800ff68 <__ieee754_atan2>:
 800ff68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff6a:	0016      	movs	r6, r2
 800ff6c:	001d      	movs	r5, r3
 800ff6e:	005a      	lsls	r2, r3, #1
 800ff70:	9300      	str	r3, [sp, #0]
 800ff72:	4273      	negs	r3, r6
 800ff74:	4333      	orrs	r3, r6
 800ff76:	4f46      	ldr	r7, [pc, #280]	; (8010090 <__ieee754_atan2+0x128>)
 800ff78:	0852      	lsrs	r2, r2, #1
 800ff7a:	0fdb      	lsrs	r3, r3, #31
 800ff7c:	4313      	orrs	r3, r2
 800ff7e:	42bb      	cmp	r3, r7
 800ff80:	d809      	bhi.n	800ff96 <__ieee754_atan2+0x2e>
 800ff82:	4244      	negs	r4, r0
 800ff84:	004b      	lsls	r3, r1, #1
 800ff86:	4304      	orrs	r4, r0
 800ff88:	085b      	lsrs	r3, r3, #1
 800ff8a:	0fe4      	lsrs	r4, r4, #31
 800ff8c:	9100      	str	r1, [sp, #0]
 800ff8e:	9001      	str	r0, [sp, #4]
 800ff90:	431c      	orrs	r4, r3
 800ff92:	42bc      	cmp	r4, r7
 800ff94:	d905      	bls.n	800ffa2 <__ieee754_atan2+0x3a>
 800ff96:	0032      	movs	r2, r6
 800ff98:	002b      	movs	r3, r5
 800ff9a:	f7f1 f981 	bl	80012a0 <__aeabi_dadd>
 800ff9e:	b003      	add	sp, #12
 800ffa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffa2:	4c3c      	ldr	r4, [pc, #240]	; (8010094 <__ieee754_atan2+0x12c>)
 800ffa4:	192c      	adds	r4, r5, r4
 800ffa6:	4334      	orrs	r4, r6
 800ffa8:	d102      	bne.n	800ffb0 <__ieee754_atan2+0x48>
 800ffaa:	f7ff fadf 	bl	800f56c <atan>
 800ffae:	e7f6      	b.n	800ff9e <__ieee754_atan2+0x36>
 800ffb0:	17ac      	asrs	r4, r5, #30
 800ffb2:	46a4      	mov	ip, r4
 800ffb4:	2402      	movs	r4, #2
 800ffb6:	4667      	mov	r7, ip
 800ffb8:	403c      	ands	r4, r7
 800ffba:	9f00      	ldr	r7, [sp, #0]
 800ffbc:	0fff      	lsrs	r7, r7, #31
 800ffbe:	433c      	orrs	r4, r7
 800ffc0:	9f01      	ldr	r7, [sp, #4]
 800ffc2:	431f      	orrs	r7, r3
 800ffc4:	d106      	bne.n	800ffd4 <__ieee754_atan2+0x6c>
 800ffc6:	2c02      	cmp	r4, #2
 800ffc8:	d056      	beq.n	8010078 <__ieee754_atan2+0x110>
 800ffca:	2c03      	cmp	r4, #3
 800ffcc:	d1e7      	bne.n	800ff9e <__ieee754_atan2+0x36>
 800ffce:	4832      	ldr	r0, [pc, #200]	; (8010098 <__ieee754_atan2+0x130>)
 800ffd0:	4932      	ldr	r1, [pc, #200]	; (801009c <__ieee754_atan2+0x134>)
 800ffd2:	e7e4      	b.n	800ff9e <__ieee754_atan2+0x36>
 800ffd4:	0017      	movs	r7, r2
 800ffd6:	4337      	orrs	r7, r6
 800ffd8:	d105      	bne.n	800ffe6 <__ieee754_atan2+0x7e>
 800ffda:	9b00      	ldr	r3, [sp, #0]
 800ffdc:	482e      	ldr	r0, [pc, #184]	; (8010098 <__ieee754_atan2+0x130>)
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	da53      	bge.n	801008a <__ieee754_atan2+0x122>
 800ffe2:	492f      	ldr	r1, [pc, #188]	; (80100a0 <__ieee754_atan2+0x138>)
 800ffe4:	e7db      	b.n	800ff9e <__ieee754_atan2+0x36>
 800ffe6:	4f2a      	ldr	r7, [pc, #168]	; (8010090 <__ieee754_atan2+0x128>)
 800ffe8:	42ba      	cmp	r2, r7
 800ffea:	d10f      	bne.n	801000c <__ieee754_atan2+0xa4>
 800ffec:	3c01      	subs	r4, #1
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d107      	bne.n	8010002 <__ieee754_atan2+0x9a>
 800fff2:	2c02      	cmp	r4, #2
 800fff4:	d843      	bhi.n	801007e <__ieee754_atan2+0x116>
 800fff6:	4b2b      	ldr	r3, [pc, #172]	; (80100a4 <__ieee754_atan2+0x13c>)
 800fff8:	00e4      	lsls	r4, r4, #3
 800fffa:	191c      	adds	r4, r3, r4
 800fffc:	6820      	ldr	r0, [r4, #0]
 800fffe:	6861      	ldr	r1, [r4, #4]
 8010000:	e7cd      	b.n	800ff9e <__ieee754_atan2+0x36>
 8010002:	2c02      	cmp	r4, #2
 8010004:	d83e      	bhi.n	8010084 <__ieee754_atan2+0x11c>
 8010006:	4b28      	ldr	r3, [pc, #160]	; (80100a8 <__ieee754_atan2+0x140>)
 8010008:	00e4      	lsls	r4, r4, #3
 801000a:	e7f6      	b.n	800fffa <__ieee754_atan2+0x92>
 801000c:	4f20      	ldr	r7, [pc, #128]	; (8010090 <__ieee754_atan2+0x128>)
 801000e:	42bb      	cmp	r3, r7
 8010010:	d0e3      	beq.n	800ffda <__ieee754_atan2+0x72>
 8010012:	1a9b      	subs	r3, r3, r2
 8010014:	151b      	asrs	r3, r3, #20
 8010016:	2b3c      	cmp	r3, #60	; 0x3c
 8010018:	dc18      	bgt.n	801004c <__ieee754_atan2+0xe4>
 801001a:	2d00      	cmp	r5, #0
 801001c:	da01      	bge.n	8010022 <__ieee754_atan2+0xba>
 801001e:	333c      	adds	r3, #60	; 0x3c
 8010020:	db17      	blt.n	8010052 <__ieee754_atan2+0xea>
 8010022:	0032      	movs	r2, r6
 8010024:	002b      	movs	r3, r5
 8010026:	f7f1 fca5 	bl	8001974 <__aeabi_ddiv>
 801002a:	f7ff fc61 	bl	800f8f0 <fabs>
 801002e:	f7ff fa9d 	bl	800f56c <atan>
 8010032:	2c01      	cmp	r4, #1
 8010034:	d010      	beq.n	8010058 <__ieee754_atan2+0xf0>
 8010036:	2c02      	cmp	r4, #2
 8010038:	d013      	beq.n	8010062 <__ieee754_atan2+0xfa>
 801003a:	2c00      	cmp	r4, #0
 801003c:	d0af      	beq.n	800ff9e <__ieee754_atan2+0x36>
 801003e:	4a1b      	ldr	r2, [pc, #108]	; (80100ac <__ieee754_atan2+0x144>)
 8010040:	4b1b      	ldr	r3, [pc, #108]	; (80100b0 <__ieee754_atan2+0x148>)
 8010042:	f7f2 fb09 	bl	8002658 <__aeabi_dsub>
 8010046:	4a14      	ldr	r2, [pc, #80]	; (8010098 <__ieee754_atan2+0x130>)
 8010048:	4b1a      	ldr	r3, [pc, #104]	; (80100b4 <__ieee754_atan2+0x14c>)
 801004a:	e012      	b.n	8010072 <__ieee754_atan2+0x10a>
 801004c:	4812      	ldr	r0, [pc, #72]	; (8010098 <__ieee754_atan2+0x130>)
 801004e:	491a      	ldr	r1, [pc, #104]	; (80100b8 <__ieee754_atan2+0x150>)
 8010050:	e7ef      	b.n	8010032 <__ieee754_atan2+0xca>
 8010052:	2000      	movs	r0, #0
 8010054:	2100      	movs	r1, #0
 8010056:	e7ec      	b.n	8010032 <__ieee754_atan2+0xca>
 8010058:	2480      	movs	r4, #128	; 0x80
 801005a:	0624      	lsls	r4, r4, #24
 801005c:	190b      	adds	r3, r1, r4
 801005e:	0019      	movs	r1, r3
 8010060:	e79d      	b.n	800ff9e <__ieee754_atan2+0x36>
 8010062:	4a12      	ldr	r2, [pc, #72]	; (80100ac <__ieee754_atan2+0x144>)
 8010064:	4b12      	ldr	r3, [pc, #72]	; (80100b0 <__ieee754_atan2+0x148>)
 8010066:	f7f2 faf7 	bl	8002658 <__aeabi_dsub>
 801006a:	0002      	movs	r2, r0
 801006c:	000b      	movs	r3, r1
 801006e:	480a      	ldr	r0, [pc, #40]	; (8010098 <__ieee754_atan2+0x130>)
 8010070:	4910      	ldr	r1, [pc, #64]	; (80100b4 <__ieee754_atan2+0x14c>)
 8010072:	f7f2 faf1 	bl	8002658 <__aeabi_dsub>
 8010076:	e792      	b.n	800ff9e <__ieee754_atan2+0x36>
 8010078:	4807      	ldr	r0, [pc, #28]	; (8010098 <__ieee754_atan2+0x130>)
 801007a:	490e      	ldr	r1, [pc, #56]	; (80100b4 <__ieee754_atan2+0x14c>)
 801007c:	e78f      	b.n	800ff9e <__ieee754_atan2+0x36>
 801007e:	4806      	ldr	r0, [pc, #24]	; (8010098 <__ieee754_atan2+0x130>)
 8010080:	490e      	ldr	r1, [pc, #56]	; (80100bc <__ieee754_atan2+0x154>)
 8010082:	e78c      	b.n	800ff9e <__ieee754_atan2+0x36>
 8010084:	2000      	movs	r0, #0
 8010086:	2100      	movs	r1, #0
 8010088:	e789      	b.n	800ff9e <__ieee754_atan2+0x36>
 801008a:	490b      	ldr	r1, [pc, #44]	; (80100b8 <__ieee754_atan2+0x150>)
 801008c:	e787      	b.n	800ff9e <__ieee754_atan2+0x36>
 801008e:	46c0      	nop			; (mov r8, r8)
 8010090:	7ff00000 	.word	0x7ff00000
 8010094:	c0100000 	.word	0xc0100000
 8010098:	54442d18 	.word	0x54442d18
 801009c:	c00921fb 	.word	0xc00921fb
 80100a0:	bff921fb 	.word	0xbff921fb
 80100a4:	08012618 	.word	0x08012618
 80100a8:	08012630 	.word	0x08012630
 80100ac:	33145c07 	.word	0x33145c07
 80100b0:	3ca1a626 	.word	0x3ca1a626
 80100b4:	400921fb 	.word	0x400921fb
 80100b8:	3ff921fb 	.word	0x3ff921fb
 80100bc:	3fe921fb 	.word	0x3fe921fb

080100c0 <__ieee754_pow>:
 80100c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100c2:	b095      	sub	sp, #84	; 0x54
 80100c4:	9202      	str	r2, [sp, #8]
 80100c6:	9303      	str	r3, [sp, #12]
 80100c8:	9b03      	ldr	r3, [sp, #12]
 80100ca:	9a03      	ldr	r2, [sp, #12]
 80100cc:	9304      	str	r3, [sp, #16]
 80100ce:	9b02      	ldr	r3, [sp, #8]
 80100d0:	0055      	lsls	r5, r2, #1
 80100d2:	001a      	movs	r2, r3
 80100d4:	086d      	lsrs	r5, r5, #1
 80100d6:	0007      	movs	r7, r0
 80100d8:	000e      	movs	r6, r1
 80100da:	432a      	orrs	r2, r5
 80100dc:	d101      	bne.n	80100e2 <__ieee754_pow+0x22>
 80100de:	f000 fcb6 	bl	8010a4e <__ieee754_pow+0x98e>
 80100e2:	4a82      	ldr	r2, [pc, #520]	; (80102ec <__ieee754_pow+0x22c>)
 80100e4:	004c      	lsls	r4, r1, #1
 80100e6:	9108      	str	r1, [sp, #32]
 80100e8:	9000      	str	r0, [sp, #0]
 80100ea:	0864      	lsrs	r4, r4, #1
 80100ec:	4294      	cmp	r4, r2
 80100ee:	dc0d      	bgt.n	801010c <__ieee754_pow+0x4c>
 80100f0:	d104      	bne.n	80100fc <__ieee754_pow+0x3c>
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d110      	bne.n	8010118 <__ieee754_pow+0x58>
 80100f6:	42a5      	cmp	r5, r4
 80100f8:	dd03      	ble.n	8010102 <__ieee754_pow+0x42>
 80100fa:	e00d      	b.n	8010118 <__ieee754_pow+0x58>
 80100fc:	4a7b      	ldr	r2, [pc, #492]	; (80102ec <__ieee754_pow+0x22c>)
 80100fe:	4295      	cmp	r5, r2
 8010100:	dc04      	bgt.n	801010c <__ieee754_pow+0x4c>
 8010102:	4a7a      	ldr	r2, [pc, #488]	; (80102ec <__ieee754_pow+0x22c>)
 8010104:	4295      	cmp	r5, r2
 8010106:	d10d      	bne.n	8010124 <__ieee754_pow+0x64>
 8010108:	2b00      	cmp	r3, #0
 801010a:	d00b      	beq.n	8010124 <__ieee754_pow+0x64>
 801010c:	4b78      	ldr	r3, [pc, #480]	; (80102f0 <__ieee754_pow+0x230>)
 801010e:	18e4      	adds	r4, r4, r3
 8010110:	4327      	orrs	r7, r4
 8010112:	d101      	bne.n	8010118 <__ieee754_pow+0x58>
 8010114:	f000 fc9b 	bl	8010a4e <__ieee754_pow+0x98e>
 8010118:	4876      	ldr	r0, [pc, #472]	; (80102f4 <__ieee754_pow+0x234>)
 801011a:	f001 fce5 	bl	8011ae8 <nan>
 801011e:	9000      	str	r0, [sp, #0]
 8010120:	9101      	str	r1, [sp, #4]
 8010122:	e092      	b.n	801024a <__ieee754_pow+0x18a>
 8010124:	2200      	movs	r2, #0
 8010126:	9206      	str	r2, [sp, #24]
 8010128:	2e00      	cmp	r6, #0
 801012a:	da69      	bge.n	8010200 <__ieee754_pow+0x140>
 801012c:	4a72      	ldr	r2, [pc, #456]	; (80102f8 <__ieee754_pow+0x238>)
 801012e:	4295      	cmp	r5, r2
 8010130:	dc64      	bgt.n	80101fc <__ieee754_pow+0x13c>
 8010132:	4a72      	ldr	r2, [pc, #456]	; (80102fc <__ieee754_pow+0x23c>)
 8010134:	4295      	cmp	r5, r2
 8010136:	dd11      	ble.n	801015c <__ieee754_pow+0x9c>
 8010138:	4971      	ldr	r1, [pc, #452]	; (8010300 <__ieee754_pow+0x240>)
 801013a:	152a      	asrs	r2, r5, #20
 801013c:	1852      	adds	r2, r2, r1
 801013e:	2a14      	cmp	r2, #20
 8010140:	dd3c      	ble.n	80101bc <__ieee754_pow+0xfc>
 8010142:	2134      	movs	r1, #52	; 0x34
 8010144:	1a8a      	subs	r2, r1, r2
 8010146:	9902      	ldr	r1, [sp, #8]
 8010148:	40d1      	lsrs	r1, r2
 801014a:	0008      	movs	r0, r1
 801014c:	4090      	lsls	r0, r2
 801014e:	4298      	cmp	r0, r3
 8010150:	d104      	bne.n	801015c <__ieee754_pow+0x9c>
 8010152:	2201      	movs	r2, #1
 8010154:	4011      	ands	r1, r2
 8010156:	1892      	adds	r2, r2, r2
 8010158:	1a52      	subs	r2, r2, r1
 801015a:	9206      	str	r2, [sp, #24]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d03c      	beq.n	80101da <__ieee754_pow+0x11a>
 8010160:	0038      	movs	r0, r7
 8010162:	0031      	movs	r1, r6
 8010164:	f7ff fbc4 	bl	800f8f0 <fabs>
 8010168:	9000      	str	r0, [sp, #0]
 801016a:	9101      	str	r1, [sp, #4]
 801016c:	2f00      	cmp	r7, #0
 801016e:	d000      	beq.n	8010172 <__ieee754_pow+0xb2>
 8010170:	e094      	b.n	801029c <__ieee754_pow+0x1dc>
 8010172:	2c00      	cmp	r4, #0
 8010174:	d005      	beq.n	8010182 <__ieee754_pow+0xc2>
 8010176:	4a63      	ldr	r2, [pc, #396]	; (8010304 <__ieee754_pow+0x244>)
 8010178:	00b3      	lsls	r3, r6, #2
 801017a:	089b      	lsrs	r3, r3, #2
 801017c:	4293      	cmp	r3, r2
 801017e:	d000      	beq.n	8010182 <__ieee754_pow+0xc2>
 8010180:	e08c      	b.n	801029c <__ieee754_pow+0x1dc>
 8010182:	9b04      	ldr	r3, [sp, #16]
 8010184:	2b00      	cmp	r3, #0
 8010186:	da07      	bge.n	8010198 <__ieee754_pow+0xd8>
 8010188:	9a00      	ldr	r2, [sp, #0]
 801018a:	9b01      	ldr	r3, [sp, #4]
 801018c:	2000      	movs	r0, #0
 801018e:	495d      	ldr	r1, [pc, #372]	; (8010304 <__ieee754_pow+0x244>)
 8010190:	f7f1 fbf0 	bl	8001974 <__aeabi_ddiv>
 8010194:	9000      	str	r0, [sp, #0]
 8010196:	9101      	str	r1, [sp, #4]
 8010198:	9b08      	ldr	r3, [sp, #32]
 801019a:	2b00      	cmp	r3, #0
 801019c:	da55      	bge.n	801024a <__ieee754_pow+0x18a>
 801019e:	4b54      	ldr	r3, [pc, #336]	; (80102f0 <__ieee754_pow+0x230>)
 80101a0:	18e4      	adds	r4, r4, r3
 80101a2:	9b06      	ldr	r3, [sp, #24]
 80101a4:	431c      	orrs	r4, r3
 80101a6:	d000      	beq.n	80101aa <__ieee754_pow+0xea>
 80101a8:	e06c      	b.n	8010284 <__ieee754_pow+0x1c4>
 80101aa:	9a00      	ldr	r2, [sp, #0]
 80101ac:	9b01      	ldr	r3, [sp, #4]
 80101ae:	0010      	movs	r0, r2
 80101b0:	0019      	movs	r1, r3
 80101b2:	f7f2 fa51 	bl	8002658 <__aeabi_dsub>
 80101b6:	0002      	movs	r2, r0
 80101b8:	000b      	movs	r3, r1
 80101ba:	e01c      	b.n	80101f6 <__ieee754_pow+0x136>
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d1cf      	bne.n	8010160 <__ieee754_pow+0xa0>
 80101c0:	3314      	adds	r3, #20
 80101c2:	1a9a      	subs	r2, r3, r2
 80101c4:	002b      	movs	r3, r5
 80101c6:	4113      	asrs	r3, r2
 80101c8:	0019      	movs	r1, r3
 80101ca:	4091      	lsls	r1, r2
 80101cc:	42a9      	cmp	r1, r5
 80101ce:	d104      	bne.n	80101da <__ieee754_pow+0x11a>
 80101d0:	2201      	movs	r2, #1
 80101d2:	4013      	ands	r3, r2
 80101d4:	1892      	adds	r2, r2, r2
 80101d6:	1ad3      	subs	r3, r2, r3
 80101d8:	9306      	str	r3, [sp, #24]
 80101da:	4b4a      	ldr	r3, [pc, #296]	; (8010304 <__ieee754_pow+0x244>)
 80101dc:	429d      	cmp	r5, r3
 80101de:	d138      	bne.n	8010252 <__ieee754_pow+0x192>
 80101e0:	0038      	movs	r0, r7
 80101e2:	0031      	movs	r1, r6
 80101e4:	9b04      	ldr	r3, [sp, #16]
 80101e6:	9000      	str	r0, [sp, #0]
 80101e8:	9101      	str	r1, [sp, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	da2d      	bge.n	801024a <__ieee754_pow+0x18a>
 80101ee:	003a      	movs	r2, r7
 80101f0:	0033      	movs	r3, r6
 80101f2:	2000      	movs	r0, #0
 80101f4:	4943      	ldr	r1, [pc, #268]	; (8010304 <__ieee754_pow+0x244>)
 80101f6:	f7f1 fbbd 	bl	8001974 <__aeabi_ddiv>
 80101fa:	e790      	b.n	801011e <__ieee754_pow+0x5e>
 80101fc:	2202      	movs	r2, #2
 80101fe:	9206      	str	r2, [sp, #24]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d1ad      	bne.n	8010160 <__ieee754_pow+0xa0>
 8010204:	4b39      	ldr	r3, [pc, #228]	; (80102ec <__ieee754_pow+0x22c>)
 8010206:	429d      	cmp	r5, r3
 8010208:	d1e7      	bne.n	80101da <__ieee754_pow+0x11a>
 801020a:	4b39      	ldr	r3, [pc, #228]	; (80102f0 <__ieee754_pow+0x230>)
 801020c:	18e3      	adds	r3, r4, r3
 801020e:	431f      	orrs	r7, r3
 8010210:	d101      	bne.n	8010216 <__ieee754_pow+0x156>
 8010212:	f000 fc1c 	bl	8010a4e <__ieee754_pow+0x98e>
 8010216:	4b39      	ldr	r3, [pc, #228]	; (80102fc <__ieee754_pow+0x23c>)
 8010218:	429c      	cmp	r4, r3
 801021a:	dd0b      	ble.n	8010234 <__ieee754_pow+0x174>
 801021c:	9b02      	ldr	r3, [sp, #8]
 801021e:	9c03      	ldr	r4, [sp, #12]
 8010220:	9300      	str	r3, [sp, #0]
 8010222:	9401      	str	r4, [sp, #4]
 8010224:	9b04      	ldr	r3, [sp, #16]
 8010226:	2b00      	cmp	r3, #0
 8010228:	da0f      	bge.n	801024a <__ieee754_pow+0x18a>
 801022a:	2300      	movs	r3, #0
 801022c:	2400      	movs	r4, #0
 801022e:	9300      	str	r3, [sp, #0]
 8010230:	9401      	str	r4, [sp, #4]
 8010232:	e00a      	b.n	801024a <__ieee754_pow+0x18a>
 8010234:	9b04      	ldr	r3, [sp, #16]
 8010236:	2b00      	cmp	r3, #0
 8010238:	daf7      	bge.n	801022a <__ieee754_pow+0x16a>
 801023a:	2280      	movs	r2, #128	; 0x80
 801023c:	0612      	lsls	r2, r2, #24
 801023e:	4694      	mov	ip, r2
 8010240:	9b02      	ldr	r3, [sp, #8]
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	9b03      	ldr	r3, [sp, #12]
 8010246:	4463      	add	r3, ip
 8010248:	9301      	str	r3, [sp, #4]
 801024a:	9800      	ldr	r0, [sp, #0]
 801024c:	9901      	ldr	r1, [sp, #4]
 801024e:	b015      	add	sp, #84	; 0x54
 8010250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010252:	2380      	movs	r3, #128	; 0x80
 8010254:	9a04      	ldr	r2, [sp, #16]
 8010256:	05db      	lsls	r3, r3, #23
 8010258:	429a      	cmp	r2, r3
 801025a:	d106      	bne.n	801026a <__ieee754_pow+0x1aa>
 801025c:	003a      	movs	r2, r7
 801025e:	0033      	movs	r3, r6
 8010260:	0038      	movs	r0, r7
 8010262:	0031      	movs	r1, r6
 8010264:	f7f1 ff8c 	bl	8002180 <__aeabi_dmul>
 8010268:	e759      	b.n	801011e <__ieee754_pow+0x5e>
 801026a:	4b27      	ldr	r3, [pc, #156]	; (8010308 <__ieee754_pow+0x248>)
 801026c:	9a04      	ldr	r2, [sp, #16]
 801026e:	429a      	cmp	r2, r3
 8010270:	d000      	beq.n	8010274 <__ieee754_pow+0x1b4>
 8010272:	e775      	b.n	8010160 <__ieee754_pow+0xa0>
 8010274:	2e00      	cmp	r6, #0
 8010276:	da00      	bge.n	801027a <__ieee754_pow+0x1ba>
 8010278:	e772      	b.n	8010160 <__ieee754_pow+0xa0>
 801027a:	0038      	movs	r0, r7
 801027c:	0031      	movs	r1, r6
 801027e:	f000 fe0b 	bl	8010e98 <__ieee754_sqrt>
 8010282:	e74c      	b.n	801011e <__ieee754_pow+0x5e>
 8010284:	9b06      	ldr	r3, [sp, #24]
 8010286:	2b01      	cmp	r3, #1
 8010288:	d1df      	bne.n	801024a <__ieee754_pow+0x18a>
 801028a:	9800      	ldr	r0, [sp, #0]
 801028c:	2180      	movs	r1, #128	; 0x80
 801028e:	0002      	movs	r2, r0
 8010290:	9801      	ldr	r0, [sp, #4]
 8010292:	0609      	lsls	r1, r1, #24
 8010294:	1843      	adds	r3, r0, r1
 8010296:	9200      	str	r2, [sp, #0]
 8010298:	9301      	str	r3, [sp, #4]
 801029a:	e7d6      	b.n	801024a <__ieee754_pow+0x18a>
 801029c:	0ff3      	lsrs	r3, r6, #31
 801029e:	3b01      	subs	r3, #1
 80102a0:	9310      	str	r3, [sp, #64]	; 0x40
 80102a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80102a4:	9b06      	ldr	r3, [sp, #24]
 80102a6:	4313      	orrs	r3, r2
 80102a8:	d104      	bne.n	80102b4 <__ieee754_pow+0x1f4>
 80102aa:	003a      	movs	r2, r7
 80102ac:	0033      	movs	r3, r6
 80102ae:	0038      	movs	r0, r7
 80102b0:	0031      	movs	r1, r6
 80102b2:	e77e      	b.n	80101b2 <__ieee754_pow+0xf2>
 80102b4:	4b15      	ldr	r3, [pc, #84]	; (801030c <__ieee754_pow+0x24c>)
 80102b6:	429d      	cmp	r5, r3
 80102b8:	dc00      	bgt.n	80102bc <__ieee754_pow+0x1fc>
 80102ba:	e0f5      	b.n	80104a8 <__ieee754_pow+0x3e8>
 80102bc:	4b14      	ldr	r3, [pc, #80]	; (8010310 <__ieee754_pow+0x250>)
 80102be:	429d      	cmp	r5, r3
 80102c0:	dd0a      	ble.n	80102d8 <__ieee754_pow+0x218>
 80102c2:	4b0e      	ldr	r3, [pc, #56]	; (80102fc <__ieee754_pow+0x23c>)
 80102c4:	429c      	cmp	r4, r3
 80102c6:	dc0d      	bgt.n	80102e4 <__ieee754_pow+0x224>
 80102c8:	9b04      	ldr	r3, [sp, #16]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	daad      	bge.n	801022a <__ieee754_pow+0x16a>
 80102ce:	4a11      	ldr	r2, [pc, #68]	; (8010314 <__ieee754_pow+0x254>)
 80102d0:	4b11      	ldr	r3, [pc, #68]	; (8010318 <__ieee754_pow+0x258>)
 80102d2:	0010      	movs	r0, r2
 80102d4:	0019      	movs	r1, r3
 80102d6:	e7c5      	b.n	8010264 <__ieee754_pow+0x1a4>
 80102d8:	4b10      	ldr	r3, [pc, #64]	; (801031c <__ieee754_pow+0x25c>)
 80102da:	429c      	cmp	r4, r3
 80102dc:	ddf4      	ble.n	80102c8 <__ieee754_pow+0x208>
 80102de:	4b09      	ldr	r3, [pc, #36]	; (8010304 <__ieee754_pow+0x244>)
 80102e0:	429c      	cmp	r4, r3
 80102e2:	dd1d      	ble.n	8010320 <__ieee754_pow+0x260>
 80102e4:	9b04      	ldr	r3, [sp, #16]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	dcf1      	bgt.n	80102ce <__ieee754_pow+0x20e>
 80102ea:	e79e      	b.n	801022a <__ieee754_pow+0x16a>
 80102ec:	7ff00000 	.word	0x7ff00000
 80102f0:	c0100000 	.word	0xc0100000
 80102f4:	08012468 	.word	0x08012468
 80102f8:	433fffff 	.word	0x433fffff
 80102fc:	3fefffff 	.word	0x3fefffff
 8010300:	fffffc01 	.word	0xfffffc01
 8010304:	3ff00000 	.word	0x3ff00000
 8010308:	3fe00000 	.word	0x3fe00000
 801030c:	41e00000 	.word	0x41e00000
 8010310:	43f00000 	.word	0x43f00000
 8010314:	8800759c 	.word	0x8800759c
 8010318:	7e37e43c 	.word	0x7e37e43c
 801031c:	3feffffe 	.word	0x3feffffe
 8010320:	2200      	movs	r2, #0
 8010322:	9800      	ldr	r0, [sp, #0]
 8010324:	9901      	ldr	r1, [sp, #4]
 8010326:	4b52      	ldr	r3, [pc, #328]	; (8010470 <__ieee754_pow+0x3b0>)
 8010328:	f7f2 f996 	bl	8002658 <__aeabi_dsub>
 801032c:	22c0      	movs	r2, #192	; 0xc0
 801032e:	4b51      	ldr	r3, [pc, #324]	; (8010474 <__ieee754_pow+0x3b4>)
 8010330:	05d2      	lsls	r2, r2, #23
 8010332:	0004      	movs	r4, r0
 8010334:	000d      	movs	r5, r1
 8010336:	f7f1 ff23 	bl	8002180 <__aeabi_dmul>
 801033a:	4a4f      	ldr	r2, [pc, #316]	; (8010478 <__ieee754_pow+0x3b8>)
 801033c:	9000      	str	r0, [sp, #0]
 801033e:	9101      	str	r1, [sp, #4]
 8010340:	4b4e      	ldr	r3, [pc, #312]	; (801047c <__ieee754_pow+0x3bc>)
 8010342:	0020      	movs	r0, r4
 8010344:	0029      	movs	r1, r5
 8010346:	f7f1 ff1b 	bl	8002180 <__aeabi_dmul>
 801034a:	2200      	movs	r2, #0
 801034c:	9004      	str	r0, [sp, #16]
 801034e:	9105      	str	r1, [sp, #20]
 8010350:	4b4b      	ldr	r3, [pc, #300]	; (8010480 <__ieee754_pow+0x3c0>)
 8010352:	0020      	movs	r0, r4
 8010354:	0029      	movs	r1, r5
 8010356:	f7f1 ff13 	bl	8002180 <__aeabi_dmul>
 801035a:	0002      	movs	r2, r0
 801035c:	000b      	movs	r3, r1
 801035e:	4849      	ldr	r0, [pc, #292]	; (8010484 <__ieee754_pow+0x3c4>)
 8010360:	4949      	ldr	r1, [pc, #292]	; (8010488 <__ieee754_pow+0x3c8>)
 8010362:	f7f2 f979 	bl	8002658 <__aeabi_dsub>
 8010366:	0022      	movs	r2, r4
 8010368:	002b      	movs	r3, r5
 801036a:	f7f1 ff09 	bl	8002180 <__aeabi_dmul>
 801036e:	0002      	movs	r2, r0
 8010370:	000b      	movs	r3, r1
 8010372:	2000      	movs	r0, #0
 8010374:	4945      	ldr	r1, [pc, #276]	; (801048c <__ieee754_pow+0x3cc>)
 8010376:	f7f2 f96f 	bl	8002658 <__aeabi_dsub>
 801037a:	0022      	movs	r2, r4
 801037c:	0006      	movs	r6, r0
 801037e:	000f      	movs	r7, r1
 8010380:	002b      	movs	r3, r5
 8010382:	0020      	movs	r0, r4
 8010384:	0029      	movs	r1, r5
 8010386:	f7f1 fefb 	bl	8002180 <__aeabi_dmul>
 801038a:	0002      	movs	r2, r0
 801038c:	000b      	movs	r3, r1
 801038e:	0030      	movs	r0, r6
 8010390:	0039      	movs	r1, r7
 8010392:	f7f1 fef5 	bl	8002180 <__aeabi_dmul>
 8010396:	4a3e      	ldr	r2, [pc, #248]	; (8010490 <__ieee754_pow+0x3d0>)
 8010398:	4b36      	ldr	r3, [pc, #216]	; (8010474 <__ieee754_pow+0x3b4>)
 801039a:	f7f1 fef1 	bl	8002180 <__aeabi_dmul>
 801039e:	0002      	movs	r2, r0
 80103a0:	000b      	movs	r3, r1
 80103a2:	9804      	ldr	r0, [sp, #16]
 80103a4:	9905      	ldr	r1, [sp, #20]
 80103a6:	f7f2 f957 	bl	8002658 <__aeabi_dsub>
 80103aa:	0002      	movs	r2, r0
 80103ac:	000b      	movs	r3, r1
 80103ae:	0004      	movs	r4, r0
 80103b0:	000d      	movs	r5, r1
 80103b2:	9800      	ldr	r0, [sp, #0]
 80103b4:	9901      	ldr	r1, [sp, #4]
 80103b6:	f7f0 ff73 	bl	80012a0 <__aeabi_dadd>
 80103ba:	9a00      	ldr	r2, [sp, #0]
 80103bc:	9b01      	ldr	r3, [sp, #4]
 80103be:	2000      	movs	r0, #0
 80103c0:	000f      	movs	r7, r1
 80103c2:	0006      	movs	r6, r0
 80103c4:	f7f2 f948 	bl	8002658 <__aeabi_dsub>
 80103c8:	0002      	movs	r2, r0
 80103ca:	000b      	movs	r3, r1
 80103cc:	0020      	movs	r0, r4
 80103ce:	0029      	movs	r1, r5
 80103d0:	f7f2 f942 	bl	8002658 <__aeabi_dsub>
 80103d4:	9b06      	ldr	r3, [sp, #24]
 80103d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80103d8:	3b01      	subs	r3, #1
 80103da:	9004      	str	r0, [sp, #16]
 80103dc:	9105      	str	r1, [sp, #20]
 80103de:	4313      	orrs	r3, r2
 80103e0:	d000      	beq.n	80103e4 <__ieee754_pow+0x324>
 80103e2:	e1e0      	b.n	80107a6 <__ieee754_pow+0x6e6>
 80103e4:	2300      	movs	r3, #0
 80103e6:	4c2b      	ldr	r4, [pc, #172]	; (8010494 <__ieee754_pow+0x3d4>)
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	9401      	str	r4, [sp, #4]
 80103ec:	9c02      	ldr	r4, [sp, #8]
 80103ee:	9d03      	ldr	r5, [sp, #12]
 80103f0:	9802      	ldr	r0, [sp, #8]
 80103f2:	9903      	ldr	r1, [sp, #12]
 80103f4:	2400      	movs	r4, #0
 80103f6:	002b      	movs	r3, r5
 80103f8:	0022      	movs	r2, r4
 80103fa:	f7f2 f92d 	bl	8002658 <__aeabi_dsub>
 80103fe:	0032      	movs	r2, r6
 8010400:	003b      	movs	r3, r7
 8010402:	f7f1 febd 	bl	8002180 <__aeabi_dmul>
 8010406:	9a02      	ldr	r2, [sp, #8]
 8010408:	9b03      	ldr	r3, [sp, #12]
 801040a:	9006      	str	r0, [sp, #24]
 801040c:	9107      	str	r1, [sp, #28]
 801040e:	9804      	ldr	r0, [sp, #16]
 8010410:	9905      	ldr	r1, [sp, #20]
 8010412:	f7f1 feb5 	bl	8002180 <__aeabi_dmul>
 8010416:	0002      	movs	r2, r0
 8010418:	000b      	movs	r3, r1
 801041a:	9806      	ldr	r0, [sp, #24]
 801041c:	9907      	ldr	r1, [sp, #28]
 801041e:	f7f0 ff3f 	bl	80012a0 <__aeabi_dadd>
 8010422:	0022      	movs	r2, r4
 8010424:	002b      	movs	r3, r5
 8010426:	9004      	str	r0, [sp, #16]
 8010428:	9105      	str	r1, [sp, #20]
 801042a:	0030      	movs	r0, r6
 801042c:	0039      	movs	r1, r7
 801042e:	f7f1 fea7 	bl	8002180 <__aeabi_dmul>
 8010432:	0006      	movs	r6, r0
 8010434:	000f      	movs	r7, r1
 8010436:	000b      	movs	r3, r1
 8010438:	0002      	movs	r2, r0
 801043a:	9804      	ldr	r0, [sp, #16]
 801043c:	9905      	ldr	r1, [sp, #20]
 801043e:	9606      	str	r6, [sp, #24]
 8010440:	9707      	str	r7, [sp, #28]
 8010442:	f7f0 ff2d 	bl	80012a0 <__aeabi_dadd>
 8010446:	4b14      	ldr	r3, [pc, #80]	; (8010498 <__ieee754_pow+0x3d8>)
 8010448:	0005      	movs	r5, r0
 801044a:	000c      	movs	r4, r1
 801044c:	9108      	str	r1, [sp, #32]
 801044e:	4299      	cmp	r1, r3
 8010450:	dc00      	bgt.n	8010454 <__ieee754_pow+0x394>
 8010452:	e2da      	b.n	8010a0a <__ieee754_pow+0x94a>
 8010454:	4b11      	ldr	r3, [pc, #68]	; (801049c <__ieee754_pow+0x3dc>)
 8010456:	18cb      	adds	r3, r1, r3
 8010458:	4303      	orrs	r3, r0
 801045a:	d100      	bne.n	801045e <__ieee754_pow+0x39e>
 801045c:	e1dc      	b.n	8010818 <__ieee754_pow+0x758>
 801045e:	9800      	ldr	r0, [sp, #0]
 8010460:	9901      	ldr	r1, [sp, #4]
 8010462:	4a0f      	ldr	r2, [pc, #60]	; (80104a0 <__ieee754_pow+0x3e0>)
 8010464:	4b0f      	ldr	r3, [pc, #60]	; (80104a4 <__ieee754_pow+0x3e4>)
 8010466:	f7f1 fe8b 	bl	8002180 <__aeabi_dmul>
 801046a:	4a0d      	ldr	r2, [pc, #52]	; (80104a0 <__ieee754_pow+0x3e0>)
 801046c:	4b0d      	ldr	r3, [pc, #52]	; (80104a4 <__ieee754_pow+0x3e4>)
 801046e:	e6f9      	b.n	8010264 <__ieee754_pow+0x1a4>
 8010470:	3ff00000 	.word	0x3ff00000
 8010474:	3ff71547 	.word	0x3ff71547
 8010478:	f85ddf44 	.word	0xf85ddf44
 801047c:	3e54ae0b 	.word	0x3e54ae0b
 8010480:	3fd00000 	.word	0x3fd00000
 8010484:	55555555 	.word	0x55555555
 8010488:	3fd55555 	.word	0x3fd55555
 801048c:	3fe00000 	.word	0x3fe00000
 8010490:	652b82fe 	.word	0x652b82fe
 8010494:	bff00000 	.word	0xbff00000
 8010498:	408fffff 	.word	0x408fffff
 801049c:	bf700000 	.word	0xbf700000
 80104a0:	8800759c 	.word	0x8800759c
 80104a4:	7e37e43c 	.word	0x7e37e43c
 80104a8:	4bc0      	ldr	r3, [pc, #768]	; (80107ac <__ieee754_pow+0x6ec>)
 80104aa:	2200      	movs	r2, #0
 80104ac:	4233      	tst	r3, r6
 80104ae:	d10a      	bne.n	80104c6 <__ieee754_pow+0x406>
 80104b0:	9800      	ldr	r0, [sp, #0]
 80104b2:	9901      	ldr	r1, [sp, #4]
 80104b4:	2200      	movs	r2, #0
 80104b6:	4bbe      	ldr	r3, [pc, #760]	; (80107b0 <__ieee754_pow+0x6f0>)
 80104b8:	f7f1 fe62 	bl	8002180 <__aeabi_dmul>
 80104bc:	2235      	movs	r2, #53	; 0x35
 80104be:	9000      	str	r0, [sp, #0]
 80104c0:	9101      	str	r1, [sp, #4]
 80104c2:	9c01      	ldr	r4, [sp, #4]
 80104c4:	4252      	negs	r2, r2
 80104c6:	49bb      	ldr	r1, [pc, #748]	; (80107b4 <__ieee754_pow+0x6f4>)
 80104c8:	1523      	asrs	r3, r4, #20
 80104ca:	185b      	adds	r3, r3, r1
 80104cc:	189b      	adds	r3, r3, r2
 80104ce:	0324      	lsls	r4, r4, #12
 80104d0:	4db9      	ldr	r5, [pc, #740]	; (80107b8 <__ieee754_pow+0x6f8>)
 80104d2:	930d      	str	r3, [sp, #52]	; 0x34
 80104d4:	4bb9      	ldr	r3, [pc, #740]	; (80107bc <__ieee754_pow+0x6fc>)
 80104d6:	0b22      	lsrs	r2, r4, #12
 80104d8:	4315      	orrs	r5, r2
 80104da:	2400      	movs	r4, #0
 80104dc:	429a      	cmp	r2, r3
 80104de:	dd09      	ble.n	80104f4 <__ieee754_pow+0x434>
 80104e0:	4bb7      	ldr	r3, [pc, #732]	; (80107c0 <__ieee754_pow+0x700>)
 80104e2:	3401      	adds	r4, #1
 80104e4:	429a      	cmp	r2, r3
 80104e6:	dd05      	ble.n	80104f4 <__ieee754_pow+0x434>
 80104e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104ea:	191b      	adds	r3, r3, r4
 80104ec:	2400      	movs	r4, #0
 80104ee:	930d      	str	r3, [sp, #52]	; 0x34
 80104f0:	4bb4      	ldr	r3, [pc, #720]	; (80107c4 <__ieee754_pow+0x704>)
 80104f2:	18ed      	adds	r5, r5, r3
 80104f4:	9800      	ldr	r0, [sp, #0]
 80104f6:	9901      	ldr	r1, [sp, #4]
 80104f8:	0029      	movs	r1, r5
 80104fa:	00e3      	lsls	r3, r4, #3
 80104fc:	9311      	str	r3, [sp, #68]	; 0x44
 80104fe:	4bb2      	ldr	r3, [pc, #712]	; (80107c8 <__ieee754_pow+0x708>)
 8010500:	00e2      	lsls	r2, r4, #3
 8010502:	189b      	adds	r3, r3, r2
 8010504:	681a      	ldr	r2, [r3, #0]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	900e      	str	r0, [sp, #56]	; 0x38
 801050a:	910f      	str	r1, [sp, #60]	; 0x3c
 801050c:	920a      	str	r2, [sp, #40]	; 0x28
 801050e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010510:	f7f2 f8a2 	bl	8002658 <__aeabi_dsub>
 8010514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010518:	0006      	movs	r6, r0
 801051a:	000f      	movs	r7, r1
 801051c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801051e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010520:	f7f0 febe 	bl	80012a0 <__aeabi_dadd>
 8010524:	0002      	movs	r2, r0
 8010526:	000b      	movs	r3, r1
 8010528:	2000      	movs	r0, #0
 801052a:	49a3      	ldr	r1, [pc, #652]	; (80107b8 <__ieee754_pow+0x6f8>)
 801052c:	f7f1 fa22 	bl	8001974 <__aeabi_ddiv>
 8010530:	0002      	movs	r2, r0
 8010532:	000b      	movs	r3, r1
 8010534:	9012      	str	r0, [sp, #72]	; 0x48
 8010536:	9113      	str	r1, [sp, #76]	; 0x4c
 8010538:	0030      	movs	r0, r6
 801053a:	0039      	movs	r1, r7
 801053c:	f7f1 fe20 	bl	8002180 <__aeabi_dmul>
 8010540:	9008      	str	r0, [sp, #32]
 8010542:	9109      	str	r1, [sp, #36]	; 0x24
 8010544:	9a08      	ldr	r2, [sp, #32]
 8010546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010548:	2180      	movs	r1, #128	; 0x80
 801054a:	9204      	str	r2, [sp, #16]
 801054c:	9305      	str	r3, [sp, #20]
 801054e:	2300      	movs	r3, #0
 8010550:	0589      	lsls	r1, r1, #22
 8010552:	106d      	asrs	r5, r5, #1
 8010554:	430d      	orrs	r5, r1
 8010556:	2180      	movs	r1, #128	; 0x80
 8010558:	9304      	str	r3, [sp, #16]
 801055a:	9a04      	ldr	r2, [sp, #16]
 801055c:	9b05      	ldr	r3, [sp, #20]
 801055e:	9200      	str	r2, [sp, #0]
 8010560:	9301      	str	r3, [sp, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	0309      	lsls	r1, r1, #12
 8010566:	186d      	adds	r5, r5, r1
 8010568:	04a1      	lsls	r1, r4, #18
 801056a:	186b      	adds	r3, r5, r1
 801056c:	9800      	ldr	r0, [sp, #0]
 801056e:	9901      	ldr	r1, [sp, #4]
 8010570:	0014      	movs	r4, r2
 8010572:	001d      	movs	r5, r3
 8010574:	f7f1 fe04 	bl	8002180 <__aeabi_dmul>
 8010578:	0002      	movs	r2, r0
 801057a:	000b      	movs	r3, r1
 801057c:	0030      	movs	r0, r6
 801057e:	0039      	movs	r1, r7
 8010580:	f7f2 f86a 	bl	8002658 <__aeabi_dsub>
 8010584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010588:	0006      	movs	r6, r0
 801058a:	000f      	movs	r7, r1
 801058c:	0020      	movs	r0, r4
 801058e:	0029      	movs	r1, r5
 8010590:	f7f2 f862 	bl	8002658 <__aeabi_dsub>
 8010594:	0002      	movs	r2, r0
 8010596:	000b      	movs	r3, r1
 8010598:	980e      	ldr	r0, [sp, #56]	; 0x38
 801059a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801059c:	f7f2 f85c 	bl	8002658 <__aeabi_dsub>
 80105a0:	9a00      	ldr	r2, [sp, #0]
 80105a2:	9b01      	ldr	r3, [sp, #4]
 80105a4:	f7f1 fdec 	bl	8002180 <__aeabi_dmul>
 80105a8:	0002      	movs	r2, r0
 80105aa:	000b      	movs	r3, r1
 80105ac:	0030      	movs	r0, r6
 80105ae:	0039      	movs	r1, r7
 80105b0:	f7f2 f852 	bl	8002658 <__aeabi_dsub>
 80105b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80105b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80105b8:	f7f1 fde2 	bl	8002180 <__aeabi_dmul>
 80105bc:	9a08      	ldr	r2, [sp, #32]
 80105be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105c0:	900a      	str	r0, [sp, #40]	; 0x28
 80105c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80105c4:	0010      	movs	r0, r2
 80105c6:	0019      	movs	r1, r3
 80105c8:	f7f1 fdda 	bl	8002180 <__aeabi_dmul>
 80105cc:	0006      	movs	r6, r0
 80105ce:	000f      	movs	r7, r1
 80105d0:	4a7e      	ldr	r2, [pc, #504]	; (80107cc <__ieee754_pow+0x70c>)
 80105d2:	4b7f      	ldr	r3, [pc, #508]	; (80107d0 <__ieee754_pow+0x710>)
 80105d4:	f7f1 fdd4 	bl	8002180 <__aeabi_dmul>
 80105d8:	4a7e      	ldr	r2, [pc, #504]	; (80107d4 <__ieee754_pow+0x714>)
 80105da:	4b7f      	ldr	r3, [pc, #508]	; (80107d8 <__ieee754_pow+0x718>)
 80105dc:	f7f0 fe60 	bl	80012a0 <__aeabi_dadd>
 80105e0:	0032      	movs	r2, r6
 80105e2:	003b      	movs	r3, r7
 80105e4:	f7f1 fdcc 	bl	8002180 <__aeabi_dmul>
 80105e8:	4a7c      	ldr	r2, [pc, #496]	; (80107dc <__ieee754_pow+0x71c>)
 80105ea:	4b7d      	ldr	r3, [pc, #500]	; (80107e0 <__ieee754_pow+0x720>)
 80105ec:	f7f0 fe58 	bl	80012a0 <__aeabi_dadd>
 80105f0:	0032      	movs	r2, r6
 80105f2:	003b      	movs	r3, r7
 80105f4:	f7f1 fdc4 	bl	8002180 <__aeabi_dmul>
 80105f8:	4a7a      	ldr	r2, [pc, #488]	; (80107e4 <__ieee754_pow+0x724>)
 80105fa:	4b7b      	ldr	r3, [pc, #492]	; (80107e8 <__ieee754_pow+0x728>)
 80105fc:	f7f0 fe50 	bl	80012a0 <__aeabi_dadd>
 8010600:	0032      	movs	r2, r6
 8010602:	003b      	movs	r3, r7
 8010604:	f7f1 fdbc 	bl	8002180 <__aeabi_dmul>
 8010608:	4a78      	ldr	r2, [pc, #480]	; (80107ec <__ieee754_pow+0x72c>)
 801060a:	4b79      	ldr	r3, [pc, #484]	; (80107f0 <__ieee754_pow+0x730>)
 801060c:	f7f0 fe48 	bl	80012a0 <__aeabi_dadd>
 8010610:	0032      	movs	r2, r6
 8010612:	003b      	movs	r3, r7
 8010614:	f7f1 fdb4 	bl	8002180 <__aeabi_dmul>
 8010618:	4a76      	ldr	r2, [pc, #472]	; (80107f4 <__ieee754_pow+0x734>)
 801061a:	4b77      	ldr	r3, [pc, #476]	; (80107f8 <__ieee754_pow+0x738>)
 801061c:	f7f0 fe40 	bl	80012a0 <__aeabi_dadd>
 8010620:	0032      	movs	r2, r6
 8010622:	0004      	movs	r4, r0
 8010624:	000d      	movs	r5, r1
 8010626:	003b      	movs	r3, r7
 8010628:	0030      	movs	r0, r6
 801062a:	0039      	movs	r1, r7
 801062c:	f7f1 fda8 	bl	8002180 <__aeabi_dmul>
 8010630:	0002      	movs	r2, r0
 8010632:	000b      	movs	r3, r1
 8010634:	0020      	movs	r0, r4
 8010636:	0029      	movs	r1, r5
 8010638:	f7f1 fda2 	bl	8002180 <__aeabi_dmul>
 801063c:	9a00      	ldr	r2, [sp, #0]
 801063e:	9b01      	ldr	r3, [sp, #4]
 8010640:	0004      	movs	r4, r0
 8010642:	000d      	movs	r5, r1
 8010644:	9808      	ldr	r0, [sp, #32]
 8010646:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010648:	f7f0 fe2a 	bl	80012a0 <__aeabi_dadd>
 801064c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801064e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010650:	f7f1 fd96 	bl	8002180 <__aeabi_dmul>
 8010654:	0022      	movs	r2, r4
 8010656:	002b      	movs	r3, r5
 8010658:	f7f0 fe22 	bl	80012a0 <__aeabi_dadd>
 801065c:	9a00      	ldr	r2, [sp, #0]
 801065e:	9b01      	ldr	r3, [sp, #4]
 8010660:	900e      	str	r0, [sp, #56]	; 0x38
 8010662:	910f      	str	r1, [sp, #60]	; 0x3c
 8010664:	0010      	movs	r0, r2
 8010666:	0019      	movs	r1, r3
 8010668:	f7f1 fd8a 	bl	8002180 <__aeabi_dmul>
 801066c:	2200      	movs	r2, #0
 801066e:	4b63      	ldr	r3, [pc, #396]	; (80107fc <__ieee754_pow+0x73c>)
 8010670:	0004      	movs	r4, r0
 8010672:	000d      	movs	r5, r1
 8010674:	f7f0 fe14 	bl	80012a0 <__aeabi_dadd>
 8010678:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801067a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801067c:	f7f0 fe10 	bl	80012a0 <__aeabi_dadd>
 8010680:	9e04      	ldr	r6, [sp, #16]
 8010682:	000f      	movs	r7, r1
 8010684:	0032      	movs	r2, r6
 8010686:	000b      	movs	r3, r1
 8010688:	9800      	ldr	r0, [sp, #0]
 801068a:	9901      	ldr	r1, [sp, #4]
 801068c:	f7f1 fd78 	bl	8002180 <__aeabi_dmul>
 8010690:	2200      	movs	r2, #0
 8010692:	9000      	str	r0, [sp, #0]
 8010694:	9101      	str	r1, [sp, #4]
 8010696:	4b59      	ldr	r3, [pc, #356]	; (80107fc <__ieee754_pow+0x73c>)
 8010698:	0030      	movs	r0, r6
 801069a:	0039      	movs	r1, r7
 801069c:	f7f1 ffdc 	bl	8002658 <__aeabi_dsub>
 80106a0:	0022      	movs	r2, r4
 80106a2:	002b      	movs	r3, r5
 80106a4:	f7f1 ffd8 	bl	8002658 <__aeabi_dsub>
 80106a8:	0002      	movs	r2, r0
 80106aa:	000b      	movs	r3, r1
 80106ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80106ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80106b0:	f7f1 ffd2 	bl	8002658 <__aeabi_dsub>
 80106b4:	9a08      	ldr	r2, [sp, #32]
 80106b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106b8:	f7f1 fd62 	bl	8002180 <__aeabi_dmul>
 80106bc:	0032      	movs	r2, r6
 80106be:	0004      	movs	r4, r0
 80106c0:	000d      	movs	r5, r1
 80106c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80106c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80106c6:	003b      	movs	r3, r7
 80106c8:	f7f1 fd5a 	bl	8002180 <__aeabi_dmul>
 80106cc:	0002      	movs	r2, r0
 80106ce:	000b      	movs	r3, r1
 80106d0:	0020      	movs	r0, r4
 80106d2:	0029      	movs	r1, r5
 80106d4:	f7f0 fde4 	bl	80012a0 <__aeabi_dadd>
 80106d8:	0004      	movs	r4, r0
 80106da:	000d      	movs	r5, r1
 80106dc:	0002      	movs	r2, r0
 80106de:	000b      	movs	r3, r1
 80106e0:	9800      	ldr	r0, [sp, #0]
 80106e2:	9901      	ldr	r1, [sp, #4]
 80106e4:	f7f0 fddc 	bl	80012a0 <__aeabi_dadd>
 80106e8:	22e0      	movs	r2, #224	; 0xe0
 80106ea:	9e04      	ldr	r6, [sp, #16]
 80106ec:	4b44      	ldr	r3, [pc, #272]	; (8010800 <__ieee754_pow+0x740>)
 80106ee:	0030      	movs	r0, r6
 80106f0:	0612      	lsls	r2, r2, #24
 80106f2:	000f      	movs	r7, r1
 80106f4:	f7f1 fd44 	bl	8002180 <__aeabi_dmul>
 80106f8:	9008      	str	r0, [sp, #32]
 80106fa:	9109      	str	r1, [sp, #36]	; 0x24
 80106fc:	9a00      	ldr	r2, [sp, #0]
 80106fe:	9b01      	ldr	r3, [sp, #4]
 8010700:	0030      	movs	r0, r6
 8010702:	0039      	movs	r1, r7
 8010704:	f7f1 ffa8 	bl	8002658 <__aeabi_dsub>
 8010708:	0002      	movs	r2, r0
 801070a:	000b      	movs	r3, r1
 801070c:	0020      	movs	r0, r4
 801070e:	0029      	movs	r1, r5
 8010710:	f7f1 ffa2 	bl	8002658 <__aeabi_dsub>
 8010714:	4a3b      	ldr	r2, [pc, #236]	; (8010804 <__ieee754_pow+0x744>)
 8010716:	4b3a      	ldr	r3, [pc, #232]	; (8010800 <__ieee754_pow+0x740>)
 8010718:	f7f1 fd32 	bl	8002180 <__aeabi_dmul>
 801071c:	4a3a      	ldr	r2, [pc, #232]	; (8010808 <__ieee754_pow+0x748>)
 801071e:	0004      	movs	r4, r0
 8010720:	000d      	movs	r5, r1
 8010722:	0030      	movs	r0, r6
 8010724:	0039      	movs	r1, r7
 8010726:	4b39      	ldr	r3, [pc, #228]	; (801080c <__ieee754_pow+0x74c>)
 8010728:	f7f1 fd2a 	bl	8002180 <__aeabi_dmul>
 801072c:	0002      	movs	r2, r0
 801072e:	000b      	movs	r3, r1
 8010730:	0020      	movs	r0, r4
 8010732:	0029      	movs	r1, r5
 8010734:	f7f0 fdb4 	bl	80012a0 <__aeabi_dadd>
 8010738:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801073a:	4b35      	ldr	r3, [pc, #212]	; (8010810 <__ieee754_pow+0x750>)
 801073c:	189b      	adds	r3, r3, r2
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	f7f0 fdad 	bl	80012a0 <__aeabi_dadd>
 8010746:	900a      	str	r0, [sp, #40]	; 0x28
 8010748:	910b      	str	r1, [sp, #44]	; 0x2c
 801074a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801074c:	f7f2 fb6a 	bl	8002e24 <__aeabi_i2d>
 8010750:	0004      	movs	r4, r0
 8010752:	000d      	movs	r5, r1
 8010754:	9808      	ldr	r0, [sp, #32]
 8010756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010758:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801075a:	4b2e      	ldr	r3, [pc, #184]	; (8010814 <__ieee754_pow+0x754>)
 801075c:	189b      	adds	r3, r3, r2
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	9200      	str	r2, [sp, #0]
 8010764:	9301      	str	r3, [sp, #4]
 8010766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801076a:	f7f0 fd99 	bl	80012a0 <__aeabi_dadd>
 801076e:	9a00      	ldr	r2, [sp, #0]
 8010770:	9b01      	ldr	r3, [sp, #4]
 8010772:	f7f0 fd95 	bl	80012a0 <__aeabi_dadd>
 8010776:	0022      	movs	r2, r4
 8010778:	002b      	movs	r3, r5
 801077a:	f7f0 fd91 	bl	80012a0 <__aeabi_dadd>
 801077e:	9804      	ldr	r0, [sp, #16]
 8010780:	0022      	movs	r2, r4
 8010782:	002b      	movs	r3, r5
 8010784:	0006      	movs	r6, r0
 8010786:	000f      	movs	r7, r1
 8010788:	f7f1 ff66 	bl	8002658 <__aeabi_dsub>
 801078c:	9a00      	ldr	r2, [sp, #0]
 801078e:	9b01      	ldr	r3, [sp, #4]
 8010790:	f7f1 ff62 	bl	8002658 <__aeabi_dsub>
 8010794:	9a08      	ldr	r2, [sp, #32]
 8010796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010798:	f7f1 ff5e 	bl	8002658 <__aeabi_dsub>
 801079c:	0002      	movs	r2, r0
 801079e:	000b      	movs	r3, r1
 80107a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80107a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80107a4:	e614      	b.n	80103d0 <__ieee754_pow+0x310>
 80107a6:	2300      	movs	r3, #0
 80107a8:	4c03      	ldr	r4, [pc, #12]	; (80107b8 <__ieee754_pow+0x6f8>)
 80107aa:	e61d      	b.n	80103e8 <__ieee754_pow+0x328>
 80107ac:	7ff00000 	.word	0x7ff00000
 80107b0:	43400000 	.word	0x43400000
 80107b4:	fffffc01 	.word	0xfffffc01
 80107b8:	3ff00000 	.word	0x3ff00000
 80107bc:	0003988e 	.word	0x0003988e
 80107c0:	000bb679 	.word	0x000bb679
 80107c4:	fff00000 	.word	0xfff00000
 80107c8:	08012648 	.word	0x08012648
 80107cc:	4a454eef 	.word	0x4a454eef
 80107d0:	3fca7e28 	.word	0x3fca7e28
 80107d4:	93c9db65 	.word	0x93c9db65
 80107d8:	3fcd864a 	.word	0x3fcd864a
 80107dc:	a91d4101 	.word	0xa91d4101
 80107e0:	3fd17460 	.word	0x3fd17460
 80107e4:	518f264d 	.word	0x518f264d
 80107e8:	3fd55555 	.word	0x3fd55555
 80107ec:	db6fabff 	.word	0xdb6fabff
 80107f0:	3fdb6db6 	.word	0x3fdb6db6
 80107f4:	33333303 	.word	0x33333303
 80107f8:	3fe33333 	.word	0x3fe33333
 80107fc:	40080000 	.word	0x40080000
 8010800:	3feec709 	.word	0x3feec709
 8010804:	dc3a03fd 	.word	0xdc3a03fd
 8010808:	145b01f5 	.word	0x145b01f5
 801080c:	be3e2fe0 	.word	0xbe3e2fe0
 8010810:	08012668 	.word	0x08012668
 8010814:	08012658 	.word	0x08012658
 8010818:	4a8f      	ldr	r2, [pc, #572]	; (8010a58 <__ieee754_pow+0x998>)
 801081a:	4b90      	ldr	r3, [pc, #576]	; (8010a5c <__ieee754_pow+0x99c>)
 801081c:	9804      	ldr	r0, [sp, #16]
 801081e:	9905      	ldr	r1, [sp, #20]
 8010820:	f7f0 fd3e 	bl	80012a0 <__aeabi_dadd>
 8010824:	0032      	movs	r2, r6
 8010826:	9002      	str	r0, [sp, #8]
 8010828:	9103      	str	r1, [sp, #12]
 801082a:	003b      	movs	r3, r7
 801082c:	0028      	movs	r0, r5
 801082e:	0021      	movs	r1, r4
 8010830:	f7f1 ff12 	bl	8002658 <__aeabi_dsub>
 8010834:	0002      	movs	r2, r0
 8010836:	000b      	movs	r3, r1
 8010838:	9802      	ldr	r0, [sp, #8]
 801083a:	9903      	ldr	r1, [sp, #12]
 801083c:	f7ef fe1c 	bl	8000478 <__aeabi_dcmpgt>
 8010840:	2800      	cmp	r0, #0
 8010842:	d000      	beq.n	8010846 <__ieee754_pow+0x786>
 8010844:	e60b      	b.n	801045e <__ieee754_pow+0x39e>
 8010846:	2100      	movs	r1, #0
 8010848:	4a85      	ldr	r2, [pc, #532]	; (8010a60 <__ieee754_pow+0x9a0>)
 801084a:	0063      	lsls	r3, r4, #1
 801084c:	085b      	lsrs	r3, r3, #1
 801084e:	9102      	str	r1, [sp, #8]
 8010850:	4293      	cmp	r3, r2
 8010852:	dd25      	ble.n	80108a0 <__ieee754_pow+0x7e0>
 8010854:	4a83      	ldr	r2, [pc, #524]	; (8010a64 <__ieee754_pow+0x9a4>)
 8010856:	151b      	asrs	r3, r3, #20
 8010858:	189b      	adds	r3, r3, r2
 801085a:	2280      	movs	r2, #128	; 0x80
 801085c:	0352      	lsls	r2, r2, #13
 801085e:	4694      	mov	ip, r2
 8010860:	411a      	asrs	r2, r3
 8010862:	1914      	adds	r4, r2, r4
 8010864:	4b80      	ldr	r3, [pc, #512]	; (8010a68 <__ieee754_pow+0x9a8>)
 8010866:	0060      	lsls	r0, r4, #1
 8010868:	4d80      	ldr	r5, [pc, #512]	; (8010a6c <__ieee754_pow+0x9ac>)
 801086a:	0d40      	lsrs	r0, r0, #21
 801086c:	18c0      	adds	r0, r0, r3
 801086e:	4105      	asrs	r5, r0
 8010870:	0021      	movs	r1, r4
 8010872:	43a9      	bics	r1, r5
 8010874:	000b      	movs	r3, r1
 8010876:	4661      	mov	r1, ip
 8010878:	0324      	lsls	r4, r4, #12
 801087a:	0b24      	lsrs	r4, r4, #12
 801087c:	4321      	orrs	r1, r4
 801087e:	2414      	movs	r4, #20
 8010880:	1a20      	subs	r0, r4, r0
 8010882:	4101      	asrs	r1, r0
 8010884:	9102      	str	r1, [sp, #8]
 8010886:	9908      	ldr	r1, [sp, #32]
 8010888:	2200      	movs	r2, #0
 801088a:	2900      	cmp	r1, #0
 801088c:	da02      	bge.n	8010894 <__ieee754_pow+0x7d4>
 801088e:	9902      	ldr	r1, [sp, #8]
 8010890:	4249      	negs	r1, r1
 8010892:	9102      	str	r1, [sp, #8]
 8010894:	0030      	movs	r0, r6
 8010896:	0039      	movs	r1, r7
 8010898:	f7f1 fede 	bl	8002658 <__aeabi_dsub>
 801089c:	9006      	str	r0, [sp, #24]
 801089e:	9107      	str	r1, [sp, #28]
 80108a0:	9a04      	ldr	r2, [sp, #16]
 80108a2:	9b05      	ldr	r3, [sp, #20]
 80108a4:	9806      	ldr	r0, [sp, #24]
 80108a6:	9907      	ldr	r1, [sp, #28]
 80108a8:	2600      	movs	r6, #0
 80108aa:	f7f0 fcf9 	bl	80012a0 <__aeabi_dadd>
 80108ae:	2200      	movs	r2, #0
 80108b0:	0030      	movs	r0, r6
 80108b2:	4b6f      	ldr	r3, [pc, #444]	; (8010a70 <__ieee754_pow+0x9b0>)
 80108b4:	000f      	movs	r7, r1
 80108b6:	f7f1 fc63 	bl	8002180 <__aeabi_dmul>
 80108ba:	9a06      	ldr	r2, [sp, #24]
 80108bc:	9b07      	ldr	r3, [sp, #28]
 80108be:	9008      	str	r0, [sp, #32]
 80108c0:	9109      	str	r1, [sp, #36]	; 0x24
 80108c2:	0030      	movs	r0, r6
 80108c4:	0039      	movs	r1, r7
 80108c6:	f7f1 fec7 	bl	8002658 <__aeabi_dsub>
 80108ca:	0002      	movs	r2, r0
 80108cc:	000b      	movs	r3, r1
 80108ce:	9804      	ldr	r0, [sp, #16]
 80108d0:	9905      	ldr	r1, [sp, #20]
 80108d2:	f7f1 fec1 	bl	8002658 <__aeabi_dsub>
 80108d6:	4a67      	ldr	r2, [pc, #412]	; (8010a74 <__ieee754_pow+0x9b4>)
 80108d8:	4b67      	ldr	r3, [pc, #412]	; (8010a78 <__ieee754_pow+0x9b8>)
 80108da:	f7f1 fc51 	bl	8002180 <__aeabi_dmul>
 80108de:	4a67      	ldr	r2, [pc, #412]	; (8010a7c <__ieee754_pow+0x9bc>)
 80108e0:	0004      	movs	r4, r0
 80108e2:	000d      	movs	r5, r1
 80108e4:	0030      	movs	r0, r6
 80108e6:	0039      	movs	r1, r7
 80108e8:	4b65      	ldr	r3, [pc, #404]	; (8010a80 <__ieee754_pow+0x9c0>)
 80108ea:	f7f1 fc49 	bl	8002180 <__aeabi_dmul>
 80108ee:	0002      	movs	r2, r0
 80108f0:	000b      	movs	r3, r1
 80108f2:	0020      	movs	r0, r4
 80108f4:	0029      	movs	r1, r5
 80108f6:	f7f0 fcd3 	bl	80012a0 <__aeabi_dadd>
 80108fa:	0004      	movs	r4, r0
 80108fc:	000d      	movs	r5, r1
 80108fe:	0002      	movs	r2, r0
 8010900:	000b      	movs	r3, r1
 8010902:	9808      	ldr	r0, [sp, #32]
 8010904:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010906:	f7f0 fccb 	bl	80012a0 <__aeabi_dadd>
 801090a:	9a08      	ldr	r2, [sp, #32]
 801090c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801090e:	0006      	movs	r6, r0
 8010910:	000f      	movs	r7, r1
 8010912:	f7f1 fea1 	bl	8002658 <__aeabi_dsub>
 8010916:	0002      	movs	r2, r0
 8010918:	000b      	movs	r3, r1
 801091a:	0020      	movs	r0, r4
 801091c:	0029      	movs	r1, r5
 801091e:	f7f1 fe9b 	bl	8002658 <__aeabi_dsub>
 8010922:	0032      	movs	r2, r6
 8010924:	9004      	str	r0, [sp, #16]
 8010926:	9105      	str	r1, [sp, #20]
 8010928:	003b      	movs	r3, r7
 801092a:	0030      	movs	r0, r6
 801092c:	0039      	movs	r1, r7
 801092e:	f7f1 fc27 	bl	8002180 <__aeabi_dmul>
 8010932:	0004      	movs	r4, r0
 8010934:	000d      	movs	r5, r1
 8010936:	4a53      	ldr	r2, [pc, #332]	; (8010a84 <__ieee754_pow+0x9c4>)
 8010938:	4b53      	ldr	r3, [pc, #332]	; (8010a88 <__ieee754_pow+0x9c8>)
 801093a:	f7f1 fc21 	bl	8002180 <__aeabi_dmul>
 801093e:	4a53      	ldr	r2, [pc, #332]	; (8010a8c <__ieee754_pow+0x9cc>)
 8010940:	4b53      	ldr	r3, [pc, #332]	; (8010a90 <__ieee754_pow+0x9d0>)
 8010942:	f7f1 fe89 	bl	8002658 <__aeabi_dsub>
 8010946:	0022      	movs	r2, r4
 8010948:	002b      	movs	r3, r5
 801094a:	f7f1 fc19 	bl	8002180 <__aeabi_dmul>
 801094e:	4a51      	ldr	r2, [pc, #324]	; (8010a94 <__ieee754_pow+0x9d4>)
 8010950:	4b51      	ldr	r3, [pc, #324]	; (8010a98 <__ieee754_pow+0x9d8>)
 8010952:	f7f0 fca5 	bl	80012a0 <__aeabi_dadd>
 8010956:	0022      	movs	r2, r4
 8010958:	002b      	movs	r3, r5
 801095a:	f7f1 fc11 	bl	8002180 <__aeabi_dmul>
 801095e:	4a4f      	ldr	r2, [pc, #316]	; (8010a9c <__ieee754_pow+0x9dc>)
 8010960:	4b4f      	ldr	r3, [pc, #316]	; (8010aa0 <__ieee754_pow+0x9e0>)
 8010962:	f7f1 fe79 	bl	8002658 <__aeabi_dsub>
 8010966:	0022      	movs	r2, r4
 8010968:	002b      	movs	r3, r5
 801096a:	f7f1 fc09 	bl	8002180 <__aeabi_dmul>
 801096e:	4a4d      	ldr	r2, [pc, #308]	; (8010aa4 <__ieee754_pow+0x9e4>)
 8010970:	4b4d      	ldr	r3, [pc, #308]	; (8010aa8 <__ieee754_pow+0x9e8>)
 8010972:	f7f0 fc95 	bl	80012a0 <__aeabi_dadd>
 8010976:	0022      	movs	r2, r4
 8010978:	002b      	movs	r3, r5
 801097a:	f7f1 fc01 	bl	8002180 <__aeabi_dmul>
 801097e:	0002      	movs	r2, r0
 8010980:	000b      	movs	r3, r1
 8010982:	0030      	movs	r0, r6
 8010984:	0039      	movs	r1, r7
 8010986:	f7f1 fe67 	bl	8002658 <__aeabi_dsub>
 801098a:	0004      	movs	r4, r0
 801098c:	000d      	movs	r5, r1
 801098e:	0002      	movs	r2, r0
 8010990:	000b      	movs	r3, r1
 8010992:	0030      	movs	r0, r6
 8010994:	0039      	movs	r1, r7
 8010996:	f7f1 fbf3 	bl	8002180 <__aeabi_dmul>
 801099a:	2380      	movs	r3, #128	; 0x80
 801099c:	9006      	str	r0, [sp, #24]
 801099e:	9107      	str	r1, [sp, #28]
 80109a0:	2200      	movs	r2, #0
 80109a2:	0020      	movs	r0, r4
 80109a4:	0029      	movs	r1, r5
 80109a6:	05db      	lsls	r3, r3, #23
 80109a8:	f7f1 fe56 	bl	8002658 <__aeabi_dsub>
 80109ac:	0002      	movs	r2, r0
 80109ae:	000b      	movs	r3, r1
 80109b0:	9806      	ldr	r0, [sp, #24]
 80109b2:	9907      	ldr	r1, [sp, #28]
 80109b4:	f7f0 ffde 	bl	8001974 <__aeabi_ddiv>
 80109b8:	9a04      	ldr	r2, [sp, #16]
 80109ba:	9b05      	ldr	r3, [sp, #20]
 80109bc:	0004      	movs	r4, r0
 80109be:	000d      	movs	r5, r1
 80109c0:	0030      	movs	r0, r6
 80109c2:	0039      	movs	r1, r7
 80109c4:	f7f1 fbdc 	bl	8002180 <__aeabi_dmul>
 80109c8:	9a04      	ldr	r2, [sp, #16]
 80109ca:	9b05      	ldr	r3, [sp, #20]
 80109cc:	f7f0 fc68 	bl	80012a0 <__aeabi_dadd>
 80109d0:	0002      	movs	r2, r0
 80109d2:	000b      	movs	r3, r1
 80109d4:	0020      	movs	r0, r4
 80109d6:	0029      	movs	r1, r5
 80109d8:	f7f1 fe3e 	bl	8002658 <__aeabi_dsub>
 80109dc:	0032      	movs	r2, r6
 80109de:	003b      	movs	r3, r7
 80109e0:	f7f1 fe3a 	bl	8002658 <__aeabi_dsub>
 80109e4:	0002      	movs	r2, r0
 80109e6:	000b      	movs	r3, r1
 80109e8:	2000      	movs	r0, #0
 80109ea:	4930      	ldr	r1, [pc, #192]	; (8010aac <__ieee754_pow+0x9ec>)
 80109ec:	f7f1 fe34 	bl	8002658 <__aeabi_dsub>
 80109f0:	9b02      	ldr	r3, [sp, #8]
 80109f2:	051b      	lsls	r3, r3, #20
 80109f4:	185b      	adds	r3, r3, r1
 80109f6:	151a      	asrs	r2, r3, #20
 80109f8:	2a00      	cmp	r2, #0
 80109fa:	dc26      	bgt.n	8010a4a <__ieee754_pow+0x98a>
 80109fc:	9a02      	ldr	r2, [sp, #8]
 80109fe:	f001 f901 	bl	8011c04 <scalbn>
 8010a02:	9a00      	ldr	r2, [sp, #0]
 8010a04:	9b01      	ldr	r3, [sp, #4]
 8010a06:	f7ff fc2d 	bl	8010264 <__ieee754_pow+0x1a4>
 8010a0a:	4a29      	ldr	r2, [pc, #164]	; (8010ab0 <__ieee754_pow+0x9f0>)
 8010a0c:	004b      	lsls	r3, r1, #1
 8010a0e:	085b      	lsrs	r3, r3, #1
 8010a10:	4293      	cmp	r3, r2
 8010a12:	dc00      	bgt.n	8010a16 <__ieee754_pow+0x956>
 8010a14:	e717      	b.n	8010846 <__ieee754_pow+0x786>
 8010a16:	4b27      	ldr	r3, [pc, #156]	; (8010ab4 <__ieee754_pow+0x9f4>)
 8010a18:	18cb      	adds	r3, r1, r3
 8010a1a:	4303      	orrs	r3, r0
 8010a1c:	d009      	beq.n	8010a32 <__ieee754_pow+0x972>
 8010a1e:	9800      	ldr	r0, [sp, #0]
 8010a20:	9901      	ldr	r1, [sp, #4]
 8010a22:	4a25      	ldr	r2, [pc, #148]	; (8010ab8 <__ieee754_pow+0x9f8>)
 8010a24:	4b25      	ldr	r3, [pc, #148]	; (8010abc <__ieee754_pow+0x9fc>)
 8010a26:	f7f1 fbab 	bl	8002180 <__aeabi_dmul>
 8010a2a:	4a23      	ldr	r2, [pc, #140]	; (8010ab8 <__ieee754_pow+0x9f8>)
 8010a2c:	4b23      	ldr	r3, [pc, #140]	; (8010abc <__ieee754_pow+0x9fc>)
 8010a2e:	f7ff fc19 	bl	8010264 <__ieee754_pow+0x1a4>
 8010a32:	0032      	movs	r2, r6
 8010a34:	003b      	movs	r3, r7
 8010a36:	f7f1 fe0f 	bl	8002658 <__aeabi_dsub>
 8010a3a:	9a04      	ldr	r2, [sp, #16]
 8010a3c:	9b05      	ldr	r3, [sp, #20]
 8010a3e:	f7ef fd25 	bl	800048c <__aeabi_dcmpge>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	d100      	bne.n	8010a48 <__ieee754_pow+0x988>
 8010a46:	e6fe      	b.n	8010846 <__ieee754_pow+0x786>
 8010a48:	e7e9      	b.n	8010a1e <__ieee754_pow+0x95e>
 8010a4a:	0019      	movs	r1, r3
 8010a4c:	e7d9      	b.n	8010a02 <__ieee754_pow+0x942>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	4c16      	ldr	r4, [pc, #88]	; (8010aac <__ieee754_pow+0x9ec>)
 8010a52:	f7ff fbec 	bl	801022e <__ieee754_pow+0x16e>
 8010a56:	46c0      	nop			; (mov r8, r8)
 8010a58:	652b82fe 	.word	0x652b82fe
 8010a5c:	3c971547 	.word	0x3c971547
 8010a60:	3fe00000 	.word	0x3fe00000
 8010a64:	fffffc02 	.word	0xfffffc02
 8010a68:	fffffc01 	.word	0xfffffc01
 8010a6c:	000fffff 	.word	0x000fffff
 8010a70:	3fe62e43 	.word	0x3fe62e43
 8010a74:	fefa39ef 	.word	0xfefa39ef
 8010a78:	3fe62e42 	.word	0x3fe62e42
 8010a7c:	0ca86c39 	.word	0x0ca86c39
 8010a80:	be205c61 	.word	0xbe205c61
 8010a84:	72bea4d0 	.word	0x72bea4d0
 8010a88:	3e663769 	.word	0x3e663769
 8010a8c:	c5d26bf1 	.word	0xc5d26bf1
 8010a90:	3ebbbd41 	.word	0x3ebbbd41
 8010a94:	af25de2c 	.word	0xaf25de2c
 8010a98:	3f11566a 	.word	0x3f11566a
 8010a9c:	16bebd93 	.word	0x16bebd93
 8010aa0:	3f66c16c 	.word	0x3f66c16c
 8010aa4:	5555553e 	.word	0x5555553e
 8010aa8:	3fc55555 	.word	0x3fc55555
 8010aac:	3ff00000 	.word	0x3ff00000
 8010ab0:	4090cbff 	.word	0x4090cbff
 8010ab4:	3f6f3400 	.word	0x3f6f3400
 8010ab8:	c2f8f359 	.word	0xc2f8f359
 8010abc:	01a56e1f 	.word	0x01a56e1f

08010ac0 <__ieee754_rem_pio2>:
 8010ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ac2:	004b      	lsls	r3, r1, #1
 8010ac4:	b091      	sub	sp, #68	; 0x44
 8010ac6:	085b      	lsrs	r3, r3, #1
 8010ac8:	9302      	str	r3, [sp, #8]
 8010aca:	0017      	movs	r7, r2
 8010acc:	4bb6      	ldr	r3, [pc, #728]	; (8010da8 <__ieee754_rem_pio2+0x2e8>)
 8010ace:	9a02      	ldr	r2, [sp, #8]
 8010ad0:	0004      	movs	r4, r0
 8010ad2:	000d      	movs	r5, r1
 8010ad4:	9109      	str	r1, [sp, #36]	; 0x24
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	dc09      	bgt.n	8010aee <__ieee754_rem_pio2+0x2e>
 8010ada:	0002      	movs	r2, r0
 8010adc:	000b      	movs	r3, r1
 8010ade:	603a      	str	r2, [r7, #0]
 8010ae0:	607b      	str	r3, [r7, #4]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	60ba      	str	r2, [r7, #8]
 8010ae8:	60fb      	str	r3, [r7, #12]
 8010aea:	2600      	movs	r6, #0
 8010aec:	e025      	b.n	8010b3a <__ieee754_rem_pio2+0x7a>
 8010aee:	4baf      	ldr	r3, [pc, #700]	; (8010dac <__ieee754_rem_pio2+0x2ec>)
 8010af0:	9a02      	ldr	r2, [sp, #8]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	dd00      	ble.n	8010af8 <__ieee754_rem_pio2+0x38>
 8010af6:	e06e      	b.n	8010bd6 <__ieee754_rem_pio2+0x116>
 8010af8:	4ead      	ldr	r6, [pc, #692]	; (8010db0 <__ieee754_rem_pio2+0x2f0>)
 8010afa:	4aae      	ldr	r2, [pc, #696]	; (8010db4 <__ieee754_rem_pio2+0x2f4>)
 8010afc:	2d00      	cmp	r5, #0
 8010afe:	dd35      	ble.n	8010b6c <__ieee754_rem_pio2+0xac>
 8010b00:	0020      	movs	r0, r4
 8010b02:	0029      	movs	r1, r5
 8010b04:	4baa      	ldr	r3, [pc, #680]	; (8010db0 <__ieee754_rem_pio2+0x2f0>)
 8010b06:	f7f1 fda7 	bl	8002658 <__aeabi_dsub>
 8010b0a:	9b02      	ldr	r3, [sp, #8]
 8010b0c:	0004      	movs	r4, r0
 8010b0e:	000d      	movs	r5, r1
 8010b10:	42b3      	cmp	r3, r6
 8010b12:	d015      	beq.n	8010b40 <__ieee754_rem_pio2+0x80>
 8010b14:	4aa8      	ldr	r2, [pc, #672]	; (8010db8 <__ieee754_rem_pio2+0x2f8>)
 8010b16:	4ba9      	ldr	r3, [pc, #676]	; (8010dbc <__ieee754_rem_pio2+0x2fc>)
 8010b18:	f7f1 fd9e 	bl	8002658 <__aeabi_dsub>
 8010b1c:	0002      	movs	r2, r0
 8010b1e:	000b      	movs	r3, r1
 8010b20:	0020      	movs	r0, r4
 8010b22:	603a      	str	r2, [r7, #0]
 8010b24:	607b      	str	r3, [r7, #4]
 8010b26:	0029      	movs	r1, r5
 8010b28:	f7f1 fd96 	bl	8002658 <__aeabi_dsub>
 8010b2c:	4aa2      	ldr	r2, [pc, #648]	; (8010db8 <__ieee754_rem_pio2+0x2f8>)
 8010b2e:	4ba3      	ldr	r3, [pc, #652]	; (8010dbc <__ieee754_rem_pio2+0x2fc>)
 8010b30:	f7f1 fd92 	bl	8002658 <__aeabi_dsub>
 8010b34:	2601      	movs	r6, #1
 8010b36:	60b8      	str	r0, [r7, #8]
 8010b38:	60f9      	str	r1, [r7, #12]
 8010b3a:	0030      	movs	r0, r6
 8010b3c:	b011      	add	sp, #68	; 0x44
 8010b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b40:	22d3      	movs	r2, #211	; 0xd3
 8010b42:	4b9e      	ldr	r3, [pc, #632]	; (8010dbc <__ieee754_rem_pio2+0x2fc>)
 8010b44:	0552      	lsls	r2, r2, #21
 8010b46:	f7f1 fd87 	bl	8002658 <__aeabi_dsub>
 8010b4a:	4a9d      	ldr	r2, [pc, #628]	; (8010dc0 <__ieee754_rem_pio2+0x300>)
 8010b4c:	4b9d      	ldr	r3, [pc, #628]	; (8010dc4 <__ieee754_rem_pio2+0x304>)
 8010b4e:	0004      	movs	r4, r0
 8010b50:	000d      	movs	r5, r1
 8010b52:	f7f1 fd81 	bl	8002658 <__aeabi_dsub>
 8010b56:	0002      	movs	r2, r0
 8010b58:	000b      	movs	r3, r1
 8010b5a:	0020      	movs	r0, r4
 8010b5c:	603a      	str	r2, [r7, #0]
 8010b5e:	607b      	str	r3, [r7, #4]
 8010b60:	0029      	movs	r1, r5
 8010b62:	f7f1 fd79 	bl	8002658 <__aeabi_dsub>
 8010b66:	4a96      	ldr	r2, [pc, #600]	; (8010dc0 <__ieee754_rem_pio2+0x300>)
 8010b68:	4b96      	ldr	r3, [pc, #600]	; (8010dc4 <__ieee754_rem_pio2+0x304>)
 8010b6a:	e7e1      	b.n	8010b30 <__ieee754_rem_pio2+0x70>
 8010b6c:	0020      	movs	r0, r4
 8010b6e:	0029      	movs	r1, r5
 8010b70:	4b8f      	ldr	r3, [pc, #572]	; (8010db0 <__ieee754_rem_pio2+0x2f0>)
 8010b72:	f7f0 fb95 	bl	80012a0 <__aeabi_dadd>
 8010b76:	9b02      	ldr	r3, [sp, #8]
 8010b78:	0004      	movs	r4, r0
 8010b7a:	000d      	movs	r5, r1
 8010b7c:	42b3      	cmp	r3, r6
 8010b7e:	d014      	beq.n	8010baa <__ieee754_rem_pio2+0xea>
 8010b80:	4a8d      	ldr	r2, [pc, #564]	; (8010db8 <__ieee754_rem_pio2+0x2f8>)
 8010b82:	4b8e      	ldr	r3, [pc, #568]	; (8010dbc <__ieee754_rem_pio2+0x2fc>)
 8010b84:	f7f0 fb8c 	bl	80012a0 <__aeabi_dadd>
 8010b88:	0002      	movs	r2, r0
 8010b8a:	000b      	movs	r3, r1
 8010b8c:	0020      	movs	r0, r4
 8010b8e:	603a      	str	r2, [r7, #0]
 8010b90:	607b      	str	r3, [r7, #4]
 8010b92:	0029      	movs	r1, r5
 8010b94:	f7f1 fd60 	bl	8002658 <__aeabi_dsub>
 8010b98:	4a87      	ldr	r2, [pc, #540]	; (8010db8 <__ieee754_rem_pio2+0x2f8>)
 8010b9a:	4b88      	ldr	r3, [pc, #544]	; (8010dbc <__ieee754_rem_pio2+0x2fc>)
 8010b9c:	f7f0 fb80 	bl	80012a0 <__aeabi_dadd>
 8010ba0:	2601      	movs	r6, #1
 8010ba2:	60b8      	str	r0, [r7, #8]
 8010ba4:	60f9      	str	r1, [r7, #12]
 8010ba6:	4276      	negs	r6, r6
 8010ba8:	e7c7      	b.n	8010b3a <__ieee754_rem_pio2+0x7a>
 8010baa:	22d3      	movs	r2, #211	; 0xd3
 8010bac:	4b83      	ldr	r3, [pc, #524]	; (8010dbc <__ieee754_rem_pio2+0x2fc>)
 8010bae:	0552      	lsls	r2, r2, #21
 8010bb0:	f7f0 fb76 	bl	80012a0 <__aeabi_dadd>
 8010bb4:	4a82      	ldr	r2, [pc, #520]	; (8010dc0 <__ieee754_rem_pio2+0x300>)
 8010bb6:	4b83      	ldr	r3, [pc, #524]	; (8010dc4 <__ieee754_rem_pio2+0x304>)
 8010bb8:	0004      	movs	r4, r0
 8010bba:	000d      	movs	r5, r1
 8010bbc:	f7f0 fb70 	bl	80012a0 <__aeabi_dadd>
 8010bc0:	0002      	movs	r2, r0
 8010bc2:	000b      	movs	r3, r1
 8010bc4:	0020      	movs	r0, r4
 8010bc6:	603a      	str	r2, [r7, #0]
 8010bc8:	607b      	str	r3, [r7, #4]
 8010bca:	0029      	movs	r1, r5
 8010bcc:	f7f1 fd44 	bl	8002658 <__aeabi_dsub>
 8010bd0:	4a7b      	ldr	r2, [pc, #492]	; (8010dc0 <__ieee754_rem_pio2+0x300>)
 8010bd2:	4b7c      	ldr	r3, [pc, #496]	; (8010dc4 <__ieee754_rem_pio2+0x304>)
 8010bd4:	e7e2      	b.n	8010b9c <__ieee754_rem_pio2+0xdc>
 8010bd6:	4b7c      	ldr	r3, [pc, #496]	; (8010dc8 <__ieee754_rem_pio2+0x308>)
 8010bd8:	9a02      	ldr	r2, [sp, #8]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	dd00      	ble.n	8010be0 <__ieee754_rem_pio2+0x120>
 8010bde:	e0d3      	b.n	8010d88 <__ieee754_rem_pio2+0x2c8>
 8010be0:	0020      	movs	r0, r4
 8010be2:	0029      	movs	r1, r5
 8010be4:	f7fe fe84 	bl	800f8f0 <fabs>
 8010be8:	4a78      	ldr	r2, [pc, #480]	; (8010dcc <__ieee754_rem_pio2+0x30c>)
 8010bea:	4b79      	ldr	r3, [pc, #484]	; (8010dd0 <__ieee754_rem_pio2+0x310>)
 8010bec:	0004      	movs	r4, r0
 8010bee:	000d      	movs	r5, r1
 8010bf0:	f7f1 fac6 	bl	8002180 <__aeabi_dmul>
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	4b77      	ldr	r3, [pc, #476]	; (8010dd4 <__ieee754_rem_pio2+0x314>)
 8010bf8:	f7f0 fb52 	bl	80012a0 <__aeabi_dadd>
 8010bfc:	f7f2 f8dc 	bl	8002db8 <__aeabi_d2iz>
 8010c00:	0006      	movs	r6, r0
 8010c02:	f7f2 f90f 	bl	8002e24 <__aeabi_i2d>
 8010c06:	4a6b      	ldr	r2, [pc, #428]	; (8010db4 <__ieee754_rem_pio2+0x2f4>)
 8010c08:	4b69      	ldr	r3, [pc, #420]	; (8010db0 <__ieee754_rem_pio2+0x2f0>)
 8010c0a:	9006      	str	r0, [sp, #24]
 8010c0c:	9107      	str	r1, [sp, #28]
 8010c0e:	f7f1 fab7 	bl	8002180 <__aeabi_dmul>
 8010c12:	0002      	movs	r2, r0
 8010c14:	000b      	movs	r3, r1
 8010c16:	0020      	movs	r0, r4
 8010c18:	0029      	movs	r1, r5
 8010c1a:	f7f1 fd1d 	bl	8002658 <__aeabi_dsub>
 8010c1e:	4a66      	ldr	r2, [pc, #408]	; (8010db8 <__ieee754_rem_pio2+0x2f8>)
 8010c20:	9004      	str	r0, [sp, #16]
 8010c22:	9105      	str	r1, [sp, #20]
 8010c24:	9806      	ldr	r0, [sp, #24]
 8010c26:	9907      	ldr	r1, [sp, #28]
 8010c28:	4b64      	ldr	r3, [pc, #400]	; (8010dbc <__ieee754_rem_pio2+0x2fc>)
 8010c2a:	f7f1 faa9 	bl	8002180 <__aeabi_dmul>
 8010c2e:	0004      	movs	r4, r0
 8010c30:	000d      	movs	r5, r1
 8010c32:	2e1f      	cmp	r6, #31
 8010c34:	dc0f      	bgt.n	8010c56 <__ieee754_rem_pio2+0x196>
 8010c36:	4a68      	ldr	r2, [pc, #416]	; (8010dd8 <__ieee754_rem_pio2+0x318>)
 8010c38:	1e73      	subs	r3, r6, #1
 8010c3a:	009b      	lsls	r3, r3, #2
 8010c3c:	589b      	ldr	r3, [r3, r2]
 8010c3e:	9a02      	ldr	r2, [sp, #8]
 8010c40:	4293      	cmp	r3, r2
 8010c42:	d008      	beq.n	8010c56 <__ieee754_rem_pio2+0x196>
 8010c44:	9804      	ldr	r0, [sp, #16]
 8010c46:	9905      	ldr	r1, [sp, #20]
 8010c48:	0022      	movs	r2, r4
 8010c4a:	002b      	movs	r3, r5
 8010c4c:	f7f1 fd04 	bl	8002658 <__aeabi_dsub>
 8010c50:	6038      	str	r0, [r7, #0]
 8010c52:	6079      	str	r1, [r7, #4]
 8010c54:	e012      	b.n	8010c7c <__ieee754_rem_pio2+0x1bc>
 8010c56:	0022      	movs	r2, r4
 8010c58:	9804      	ldr	r0, [sp, #16]
 8010c5a:	9905      	ldr	r1, [sp, #20]
 8010c5c:	002b      	movs	r3, r5
 8010c5e:	f7f1 fcfb 	bl	8002658 <__aeabi_dsub>
 8010c62:	9b02      	ldr	r3, [sp, #8]
 8010c64:	151b      	asrs	r3, r3, #20
 8010c66:	9308      	str	r3, [sp, #32]
 8010c68:	9a08      	ldr	r2, [sp, #32]
 8010c6a:	004b      	lsls	r3, r1, #1
 8010c6c:	0d5b      	lsrs	r3, r3, #21
 8010c6e:	1ad3      	subs	r3, r2, r3
 8010c70:	2b10      	cmp	r3, #16
 8010c72:	dc21      	bgt.n	8010cb8 <__ieee754_rem_pio2+0x1f8>
 8010c74:	0002      	movs	r2, r0
 8010c76:	000b      	movs	r3, r1
 8010c78:	603a      	str	r2, [r7, #0]
 8010c7a:	607b      	str	r3, [r7, #4]
 8010c7c:	9804      	ldr	r0, [sp, #16]
 8010c7e:	9905      	ldr	r1, [sp, #20]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	9302      	str	r3, [sp, #8]
 8010c86:	9b02      	ldr	r3, [sp, #8]
 8010c88:	f7f1 fce6 	bl	8002658 <__aeabi_dsub>
 8010c8c:	0022      	movs	r2, r4
 8010c8e:	002b      	movs	r3, r5
 8010c90:	f7f1 fce2 	bl	8002658 <__aeabi_dsub>
 8010c94:	000b      	movs	r3, r1
 8010c96:	0002      	movs	r2, r0
 8010c98:	60ba      	str	r2, [r7, #8]
 8010c9a:	60fb      	str	r3, [r7, #12]
 8010c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	db00      	blt.n	8010ca4 <__ieee754_rem_pio2+0x1e4>
 8010ca2:	e74a      	b.n	8010b3a <__ieee754_rem_pio2+0x7a>
 8010ca4:	2280      	movs	r2, #128	; 0x80
 8010ca6:	0612      	lsls	r2, r2, #24
 8010ca8:	4694      	mov	ip, r2
 8010caa:	9b02      	ldr	r3, [sp, #8]
 8010cac:	1889      	adds	r1, r1, r2
 8010cae:	4463      	add	r3, ip
 8010cb0:	607b      	str	r3, [r7, #4]
 8010cb2:	60b8      	str	r0, [r7, #8]
 8010cb4:	60f9      	str	r1, [r7, #12]
 8010cb6:	e776      	b.n	8010ba6 <__ieee754_rem_pio2+0xe6>
 8010cb8:	22d3      	movs	r2, #211	; 0xd3
 8010cba:	9806      	ldr	r0, [sp, #24]
 8010cbc:	9907      	ldr	r1, [sp, #28]
 8010cbe:	4b3f      	ldr	r3, [pc, #252]	; (8010dbc <__ieee754_rem_pio2+0x2fc>)
 8010cc0:	0552      	lsls	r2, r2, #21
 8010cc2:	f7f1 fa5d 	bl	8002180 <__aeabi_dmul>
 8010cc6:	0004      	movs	r4, r0
 8010cc8:	000d      	movs	r5, r1
 8010cca:	0002      	movs	r2, r0
 8010ccc:	000b      	movs	r3, r1
 8010cce:	9804      	ldr	r0, [sp, #16]
 8010cd0:	9905      	ldr	r1, [sp, #20]
 8010cd2:	f7f1 fcc1 	bl	8002658 <__aeabi_dsub>
 8010cd6:	0002      	movs	r2, r0
 8010cd8:	000b      	movs	r3, r1
 8010cda:	9002      	str	r0, [sp, #8]
 8010cdc:	9103      	str	r1, [sp, #12]
 8010cde:	9804      	ldr	r0, [sp, #16]
 8010ce0:	9905      	ldr	r1, [sp, #20]
 8010ce2:	f7f1 fcb9 	bl	8002658 <__aeabi_dsub>
 8010ce6:	0022      	movs	r2, r4
 8010ce8:	002b      	movs	r3, r5
 8010cea:	f7f1 fcb5 	bl	8002658 <__aeabi_dsub>
 8010cee:	0004      	movs	r4, r0
 8010cf0:	000d      	movs	r5, r1
 8010cf2:	9806      	ldr	r0, [sp, #24]
 8010cf4:	9907      	ldr	r1, [sp, #28]
 8010cf6:	4a32      	ldr	r2, [pc, #200]	; (8010dc0 <__ieee754_rem_pio2+0x300>)
 8010cf8:	4b32      	ldr	r3, [pc, #200]	; (8010dc4 <__ieee754_rem_pio2+0x304>)
 8010cfa:	f7f1 fa41 	bl	8002180 <__aeabi_dmul>
 8010cfe:	0022      	movs	r2, r4
 8010d00:	002b      	movs	r3, r5
 8010d02:	f7f1 fca9 	bl	8002658 <__aeabi_dsub>
 8010d06:	0002      	movs	r2, r0
 8010d08:	000b      	movs	r3, r1
 8010d0a:	0004      	movs	r4, r0
 8010d0c:	000d      	movs	r5, r1
 8010d0e:	9802      	ldr	r0, [sp, #8]
 8010d10:	9903      	ldr	r1, [sp, #12]
 8010d12:	f7f1 fca1 	bl	8002658 <__aeabi_dsub>
 8010d16:	9a08      	ldr	r2, [sp, #32]
 8010d18:	004b      	lsls	r3, r1, #1
 8010d1a:	0d5b      	lsrs	r3, r3, #21
 8010d1c:	1ad3      	subs	r3, r2, r3
 8010d1e:	2b31      	cmp	r3, #49	; 0x31
 8010d20:	dc08      	bgt.n	8010d34 <__ieee754_rem_pio2+0x274>
 8010d22:	0002      	movs	r2, r0
 8010d24:	000b      	movs	r3, r1
 8010d26:	603a      	str	r2, [r7, #0]
 8010d28:	607b      	str	r3, [r7, #4]
 8010d2a:	9a02      	ldr	r2, [sp, #8]
 8010d2c:	9b03      	ldr	r3, [sp, #12]
 8010d2e:	9204      	str	r2, [sp, #16]
 8010d30:	9305      	str	r3, [sp, #20]
 8010d32:	e7a3      	b.n	8010c7c <__ieee754_rem_pio2+0x1bc>
 8010d34:	22b8      	movs	r2, #184	; 0xb8
 8010d36:	9806      	ldr	r0, [sp, #24]
 8010d38:	9907      	ldr	r1, [sp, #28]
 8010d3a:	4b22      	ldr	r3, [pc, #136]	; (8010dc4 <__ieee754_rem_pio2+0x304>)
 8010d3c:	0592      	lsls	r2, r2, #22
 8010d3e:	f7f1 fa1f 	bl	8002180 <__aeabi_dmul>
 8010d42:	0004      	movs	r4, r0
 8010d44:	000d      	movs	r5, r1
 8010d46:	0002      	movs	r2, r0
 8010d48:	000b      	movs	r3, r1
 8010d4a:	9802      	ldr	r0, [sp, #8]
 8010d4c:	9903      	ldr	r1, [sp, #12]
 8010d4e:	f7f1 fc83 	bl	8002658 <__aeabi_dsub>
 8010d52:	0002      	movs	r2, r0
 8010d54:	000b      	movs	r3, r1
 8010d56:	9004      	str	r0, [sp, #16]
 8010d58:	9105      	str	r1, [sp, #20]
 8010d5a:	9802      	ldr	r0, [sp, #8]
 8010d5c:	9903      	ldr	r1, [sp, #12]
 8010d5e:	f7f1 fc7b 	bl	8002658 <__aeabi_dsub>
 8010d62:	0022      	movs	r2, r4
 8010d64:	002b      	movs	r3, r5
 8010d66:	f7f1 fc77 	bl	8002658 <__aeabi_dsub>
 8010d6a:	0004      	movs	r4, r0
 8010d6c:	000d      	movs	r5, r1
 8010d6e:	9806      	ldr	r0, [sp, #24]
 8010d70:	9907      	ldr	r1, [sp, #28]
 8010d72:	4a1a      	ldr	r2, [pc, #104]	; (8010ddc <__ieee754_rem_pio2+0x31c>)
 8010d74:	4b1a      	ldr	r3, [pc, #104]	; (8010de0 <__ieee754_rem_pio2+0x320>)
 8010d76:	f7f1 fa03 	bl	8002180 <__aeabi_dmul>
 8010d7a:	0022      	movs	r2, r4
 8010d7c:	002b      	movs	r3, r5
 8010d7e:	f7f1 fc6b 	bl	8002658 <__aeabi_dsub>
 8010d82:	0004      	movs	r4, r0
 8010d84:	000d      	movs	r5, r1
 8010d86:	e75d      	b.n	8010c44 <__ieee754_rem_pio2+0x184>
 8010d88:	4b16      	ldr	r3, [pc, #88]	; (8010de4 <__ieee754_rem_pio2+0x324>)
 8010d8a:	9a02      	ldr	r2, [sp, #8]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	dd2b      	ble.n	8010de8 <__ieee754_rem_pio2+0x328>
 8010d90:	0022      	movs	r2, r4
 8010d92:	002b      	movs	r3, r5
 8010d94:	0020      	movs	r0, r4
 8010d96:	0029      	movs	r1, r5
 8010d98:	f7f1 fc5e 	bl	8002658 <__aeabi_dsub>
 8010d9c:	60b8      	str	r0, [r7, #8]
 8010d9e:	60f9      	str	r1, [r7, #12]
 8010da0:	6038      	str	r0, [r7, #0]
 8010da2:	6079      	str	r1, [r7, #4]
 8010da4:	e6a1      	b.n	8010aea <__ieee754_rem_pio2+0x2a>
 8010da6:	46c0      	nop			; (mov r8, r8)
 8010da8:	3fe921fb 	.word	0x3fe921fb
 8010dac:	4002d97b 	.word	0x4002d97b
 8010db0:	3ff921fb 	.word	0x3ff921fb
 8010db4:	54400000 	.word	0x54400000
 8010db8:	1a626331 	.word	0x1a626331
 8010dbc:	3dd0b461 	.word	0x3dd0b461
 8010dc0:	2e037073 	.word	0x2e037073
 8010dc4:	3ba3198a 	.word	0x3ba3198a
 8010dc8:	413921fb 	.word	0x413921fb
 8010dcc:	6dc9c883 	.word	0x6dc9c883
 8010dd0:	3fe45f30 	.word	0x3fe45f30
 8010dd4:	3fe00000 	.word	0x3fe00000
 8010dd8:	08012678 	.word	0x08012678
 8010ddc:	252049c1 	.word	0x252049c1
 8010de0:	397b839a 	.word	0x397b839a
 8010de4:	7fefffff 	.word	0x7fefffff
 8010de8:	9a02      	ldr	r2, [sp, #8]
 8010dea:	0020      	movs	r0, r4
 8010dec:	1516      	asrs	r6, r2, #20
 8010dee:	4a27      	ldr	r2, [pc, #156]	; (8010e8c <__ieee754_rem_pio2+0x3cc>)
 8010df0:	18b6      	adds	r6, r6, r2
 8010df2:	9a02      	ldr	r2, [sp, #8]
 8010df4:	0533      	lsls	r3, r6, #20
 8010df6:	1ad5      	subs	r5, r2, r3
 8010df8:	0029      	movs	r1, r5
 8010dfa:	f7f1 ffdd 	bl	8002db8 <__aeabi_d2iz>
 8010dfe:	f7f2 f811 	bl	8002e24 <__aeabi_i2d>
 8010e02:	0002      	movs	r2, r0
 8010e04:	000b      	movs	r3, r1
 8010e06:	0020      	movs	r0, r4
 8010e08:	0029      	movs	r1, r5
 8010e0a:	920a      	str	r2, [sp, #40]	; 0x28
 8010e0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e0e:	f7f1 fc23 	bl	8002658 <__aeabi_dsub>
 8010e12:	2200      	movs	r2, #0
 8010e14:	4b1e      	ldr	r3, [pc, #120]	; (8010e90 <__ieee754_rem_pio2+0x3d0>)
 8010e16:	f7f1 f9b3 	bl	8002180 <__aeabi_dmul>
 8010e1a:	000d      	movs	r5, r1
 8010e1c:	0004      	movs	r4, r0
 8010e1e:	f7f1 ffcb 	bl	8002db8 <__aeabi_d2iz>
 8010e22:	f7f1 ffff 	bl	8002e24 <__aeabi_i2d>
 8010e26:	0002      	movs	r2, r0
 8010e28:	000b      	movs	r3, r1
 8010e2a:	0020      	movs	r0, r4
 8010e2c:	0029      	movs	r1, r5
 8010e2e:	920c      	str	r2, [sp, #48]	; 0x30
 8010e30:	930d      	str	r3, [sp, #52]	; 0x34
 8010e32:	f7f1 fc11 	bl	8002658 <__aeabi_dsub>
 8010e36:	2200      	movs	r2, #0
 8010e38:	4b15      	ldr	r3, [pc, #84]	; (8010e90 <__ieee754_rem_pio2+0x3d0>)
 8010e3a:	f7f1 f9a1 	bl	8002180 <__aeabi_dmul>
 8010e3e:	2503      	movs	r5, #3
 8010e40:	900e      	str	r0, [sp, #56]	; 0x38
 8010e42:	910f      	str	r1, [sp, #60]	; 0x3c
 8010e44:	ac0a      	add	r4, sp, #40	; 0x28
 8010e46:	2200      	movs	r2, #0
 8010e48:	6920      	ldr	r0, [r4, #16]
 8010e4a:	6961      	ldr	r1, [r4, #20]
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	9502      	str	r5, [sp, #8]
 8010e50:	3c08      	subs	r4, #8
 8010e52:	3d01      	subs	r5, #1
 8010e54:	f7ef faf6 	bl	8000444 <__aeabi_dcmpeq>
 8010e58:	2800      	cmp	r0, #0
 8010e5a:	d1f4      	bne.n	8010e46 <__ieee754_rem_pio2+0x386>
 8010e5c:	4b0d      	ldr	r3, [pc, #52]	; (8010e94 <__ieee754_rem_pio2+0x3d4>)
 8010e5e:	0032      	movs	r2, r6
 8010e60:	9301      	str	r3, [sp, #4]
 8010e62:	2302      	movs	r3, #2
 8010e64:	0039      	movs	r1, r7
 8010e66:	9300      	str	r3, [sp, #0]
 8010e68:	a80a      	add	r0, sp, #40	; 0x28
 8010e6a:	9b02      	ldr	r3, [sp, #8]
 8010e6c:	f000 f988 	bl	8011180 <__kernel_rem_pio2>
 8010e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e72:	0006      	movs	r6, r0
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	db00      	blt.n	8010e7a <__ieee754_rem_pio2+0x3ba>
 8010e78:	e65f      	b.n	8010b3a <__ieee754_rem_pio2+0x7a>
 8010e7a:	2280      	movs	r2, #128	; 0x80
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	0612      	lsls	r2, r2, #24
 8010e80:	189b      	adds	r3, r3, r2
 8010e82:	607b      	str	r3, [r7, #4]
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	189b      	adds	r3, r3, r2
 8010e88:	60fb      	str	r3, [r7, #12]
 8010e8a:	e68c      	b.n	8010ba6 <__ieee754_rem_pio2+0xe6>
 8010e8c:	fffffbea 	.word	0xfffffbea
 8010e90:	41700000 	.word	0x41700000
 8010e94:	080126f8 	.word	0x080126f8

08010e98 <__ieee754_sqrt>:
 8010e98:	4b56      	ldr	r3, [pc, #344]	; (8010ff4 <__ieee754_sqrt+0x15c>)
 8010e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e9c:	0002      	movs	r2, r0
 8010e9e:	0005      	movs	r5, r0
 8010ea0:	0018      	movs	r0, r3
 8010ea2:	000c      	movs	r4, r1
 8010ea4:	b085      	sub	sp, #20
 8010ea6:	4008      	ands	r0, r1
 8010ea8:	4298      	cmp	r0, r3
 8010eaa:	d10f      	bne.n	8010ecc <__ieee754_sqrt+0x34>
 8010eac:	000b      	movs	r3, r1
 8010eae:	0028      	movs	r0, r5
 8010eb0:	f7f1 f966 	bl	8002180 <__aeabi_dmul>
 8010eb4:	0002      	movs	r2, r0
 8010eb6:	000b      	movs	r3, r1
 8010eb8:	0028      	movs	r0, r5
 8010eba:	0021      	movs	r1, r4
 8010ebc:	f7f0 f9f0 	bl	80012a0 <__aeabi_dadd>
 8010ec0:	0005      	movs	r5, r0
 8010ec2:	000c      	movs	r4, r1
 8010ec4:	0028      	movs	r0, r5
 8010ec6:	0021      	movs	r1, r4
 8010ec8:	b005      	add	sp, #20
 8010eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ecc:	2900      	cmp	r1, #0
 8010ece:	dc10      	bgt.n	8010ef2 <__ieee754_sqrt+0x5a>
 8010ed0:	004b      	lsls	r3, r1, #1
 8010ed2:	085b      	lsrs	r3, r3, #1
 8010ed4:	432b      	orrs	r3, r5
 8010ed6:	d0f5      	beq.n	8010ec4 <__ieee754_sqrt+0x2c>
 8010ed8:	2000      	movs	r0, #0
 8010eda:	4281      	cmp	r1, r0
 8010edc:	d100      	bne.n	8010ee0 <__ieee754_sqrt+0x48>
 8010ede:	e080      	b.n	8010fe2 <__ieee754_sqrt+0x14a>
 8010ee0:	000b      	movs	r3, r1
 8010ee2:	0028      	movs	r0, r5
 8010ee4:	f7f1 fbb8 	bl	8002658 <__aeabi_dsub>
 8010ee8:	0002      	movs	r2, r0
 8010eea:	000b      	movs	r3, r1
 8010eec:	f7f0 fd42 	bl	8001974 <__aeabi_ddiv>
 8010ef0:	e7e6      	b.n	8010ec0 <__ieee754_sqrt+0x28>
 8010ef2:	1508      	asrs	r0, r1, #20
 8010ef4:	d075      	beq.n	8010fe2 <__ieee754_sqrt+0x14a>
 8010ef6:	4b40      	ldr	r3, [pc, #256]	; (8010ff8 <__ieee754_sqrt+0x160>)
 8010ef8:	0309      	lsls	r1, r1, #12
 8010efa:	18c4      	adds	r4, r0, r3
 8010efc:	2380      	movs	r3, #128	; 0x80
 8010efe:	0b09      	lsrs	r1, r1, #12
 8010f00:	035b      	lsls	r3, r3, #13
 8010f02:	4319      	orrs	r1, r3
 8010f04:	07c3      	lsls	r3, r0, #31
 8010f06:	d403      	bmi.n	8010f10 <__ieee754_sqrt+0x78>
 8010f08:	0fd3      	lsrs	r3, r2, #31
 8010f0a:	0049      	lsls	r1, r1, #1
 8010f0c:	18c9      	adds	r1, r1, r3
 8010f0e:	0052      	lsls	r2, r2, #1
 8010f10:	1063      	asrs	r3, r4, #1
 8010f12:	2400      	movs	r4, #0
 8010f14:	0049      	lsls	r1, r1, #1
 8010f16:	9303      	str	r3, [sp, #12]
 8010f18:	0fd3      	lsrs	r3, r2, #31
 8010f1a:	18cb      	adds	r3, r1, r3
 8010f1c:	2180      	movs	r1, #128	; 0x80
 8010f1e:	2516      	movs	r5, #22
 8010f20:	0020      	movs	r0, r4
 8010f22:	0052      	lsls	r2, r2, #1
 8010f24:	0389      	lsls	r1, r1, #14
 8010f26:	1846      	adds	r6, r0, r1
 8010f28:	429e      	cmp	r6, r3
 8010f2a:	dc02      	bgt.n	8010f32 <__ieee754_sqrt+0x9a>
 8010f2c:	1870      	adds	r0, r6, r1
 8010f2e:	1b9b      	subs	r3, r3, r6
 8010f30:	1864      	adds	r4, r4, r1
 8010f32:	0fd6      	lsrs	r6, r2, #31
 8010f34:	005b      	lsls	r3, r3, #1
 8010f36:	3d01      	subs	r5, #1
 8010f38:	18f3      	adds	r3, r6, r3
 8010f3a:	0052      	lsls	r2, r2, #1
 8010f3c:	0849      	lsrs	r1, r1, #1
 8010f3e:	2d00      	cmp	r5, #0
 8010f40:	d1f1      	bne.n	8010f26 <__ieee754_sqrt+0x8e>
 8010f42:	2620      	movs	r6, #32
 8010f44:	2780      	movs	r7, #128	; 0x80
 8010f46:	0029      	movs	r1, r5
 8010f48:	9601      	str	r6, [sp, #4]
 8010f4a:	063f      	lsls	r7, r7, #24
 8010f4c:	197e      	adds	r6, r7, r5
 8010f4e:	46b4      	mov	ip, r6
 8010f50:	4283      	cmp	r3, r0
 8010f52:	dc02      	bgt.n	8010f5a <__ieee754_sqrt+0xc2>
 8010f54:	d114      	bne.n	8010f80 <__ieee754_sqrt+0xe8>
 8010f56:	4296      	cmp	r6, r2
 8010f58:	d812      	bhi.n	8010f80 <__ieee754_sqrt+0xe8>
 8010f5a:	4665      	mov	r5, ip
 8010f5c:	4666      	mov	r6, ip
 8010f5e:	19ed      	adds	r5, r5, r7
 8010f60:	9002      	str	r0, [sp, #8]
 8010f62:	2e00      	cmp	r6, #0
 8010f64:	da03      	bge.n	8010f6e <__ieee754_sqrt+0xd6>
 8010f66:	43ee      	mvns	r6, r5
 8010f68:	0ff6      	lsrs	r6, r6, #31
 8010f6a:	1986      	adds	r6, r0, r6
 8010f6c:	9602      	str	r6, [sp, #8]
 8010f6e:	1a1b      	subs	r3, r3, r0
 8010f70:	4562      	cmp	r2, ip
 8010f72:	4180      	sbcs	r0, r0
 8010f74:	4240      	negs	r0, r0
 8010f76:	1a1b      	subs	r3, r3, r0
 8010f78:	4660      	mov	r0, ip
 8010f7a:	1a12      	subs	r2, r2, r0
 8010f7c:	9802      	ldr	r0, [sp, #8]
 8010f7e:	19c9      	adds	r1, r1, r7
 8010f80:	0fd6      	lsrs	r6, r2, #31
 8010f82:	005b      	lsls	r3, r3, #1
 8010f84:	18f3      	adds	r3, r6, r3
 8010f86:	9e01      	ldr	r6, [sp, #4]
 8010f88:	0052      	lsls	r2, r2, #1
 8010f8a:	3e01      	subs	r6, #1
 8010f8c:	087f      	lsrs	r7, r7, #1
 8010f8e:	9601      	str	r6, [sp, #4]
 8010f90:	2e00      	cmp	r6, #0
 8010f92:	d1db      	bne.n	8010f4c <__ieee754_sqrt+0xb4>
 8010f94:	4313      	orrs	r3, r2
 8010f96:	d003      	beq.n	8010fa0 <__ieee754_sqrt+0x108>
 8010f98:	1c4b      	adds	r3, r1, #1
 8010f9a:	d127      	bne.n	8010fec <__ieee754_sqrt+0x154>
 8010f9c:	0031      	movs	r1, r6
 8010f9e:	3401      	adds	r4, #1
 8010fa0:	4b16      	ldr	r3, [pc, #88]	; (8010ffc <__ieee754_sqrt+0x164>)
 8010fa2:	1060      	asrs	r0, r4, #1
 8010fa4:	18c0      	adds	r0, r0, r3
 8010fa6:	0849      	lsrs	r1, r1, #1
 8010fa8:	07e3      	lsls	r3, r4, #31
 8010faa:	d502      	bpl.n	8010fb2 <__ieee754_sqrt+0x11a>
 8010fac:	2380      	movs	r3, #128	; 0x80
 8010fae:	061b      	lsls	r3, r3, #24
 8010fb0:	4319      	orrs	r1, r3
 8010fb2:	9b03      	ldr	r3, [sp, #12]
 8010fb4:	000d      	movs	r5, r1
 8010fb6:	051c      	lsls	r4, r3, #20
 8010fb8:	1823      	adds	r3, r4, r0
 8010fba:	001c      	movs	r4, r3
 8010fbc:	e782      	b.n	8010ec4 <__ieee754_sqrt+0x2c>
 8010fbe:	0ad1      	lsrs	r1, r2, #11
 8010fc0:	3b15      	subs	r3, #21
 8010fc2:	0552      	lsls	r2, r2, #21
 8010fc4:	2900      	cmp	r1, #0
 8010fc6:	d0fa      	beq.n	8010fbe <__ieee754_sqrt+0x126>
 8010fc8:	2480      	movs	r4, #128	; 0x80
 8010fca:	0364      	lsls	r4, r4, #13
 8010fcc:	4221      	tst	r1, r4
 8010fce:	d00a      	beq.n	8010fe6 <__ieee754_sqrt+0x14e>
 8010fd0:	2420      	movs	r4, #32
 8010fd2:	0016      	movs	r6, r2
 8010fd4:	1a24      	subs	r4, r4, r0
 8010fd6:	40e6      	lsrs	r6, r4
 8010fd8:	1e45      	subs	r5, r0, #1
 8010fda:	4082      	lsls	r2, r0
 8010fdc:	4331      	orrs	r1, r6
 8010fde:	1b58      	subs	r0, r3, r5
 8010fe0:	e789      	b.n	8010ef6 <__ieee754_sqrt+0x5e>
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	e7ee      	b.n	8010fc4 <__ieee754_sqrt+0x12c>
 8010fe6:	0049      	lsls	r1, r1, #1
 8010fe8:	3001      	adds	r0, #1
 8010fea:	e7ef      	b.n	8010fcc <__ieee754_sqrt+0x134>
 8010fec:	2301      	movs	r3, #1
 8010fee:	3101      	adds	r1, #1
 8010ff0:	4399      	bics	r1, r3
 8010ff2:	e7d5      	b.n	8010fa0 <__ieee754_sqrt+0x108>
 8010ff4:	7ff00000 	.word	0x7ff00000
 8010ff8:	fffffc01 	.word	0xfffffc01
 8010ffc:	3fe00000 	.word	0x3fe00000

08011000 <__kernel_cos>:
 8011000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011002:	b087      	sub	sp, #28
 8011004:	9204      	str	r2, [sp, #16]
 8011006:	9305      	str	r3, [sp, #20]
 8011008:	004b      	lsls	r3, r1, #1
 801100a:	085b      	lsrs	r3, r3, #1
 801100c:	9300      	str	r3, [sp, #0]
 801100e:	23f9      	movs	r3, #249	; 0xf9
 8011010:	9a00      	ldr	r2, [sp, #0]
 8011012:	0007      	movs	r7, r0
 8011014:	000e      	movs	r6, r1
 8011016:	059b      	lsls	r3, r3, #22
 8011018:	429a      	cmp	r2, r3
 801101a:	da04      	bge.n	8011026 <__kernel_cos+0x26>
 801101c:	f7f1 fecc 	bl	8002db8 <__aeabi_d2iz>
 8011020:	2800      	cmp	r0, #0
 8011022:	d100      	bne.n	8011026 <__kernel_cos+0x26>
 8011024:	e084      	b.n	8011130 <__kernel_cos+0x130>
 8011026:	003a      	movs	r2, r7
 8011028:	0033      	movs	r3, r6
 801102a:	0038      	movs	r0, r7
 801102c:	0031      	movs	r1, r6
 801102e:	f7f1 f8a7 	bl	8002180 <__aeabi_dmul>
 8011032:	2200      	movs	r2, #0
 8011034:	4b40      	ldr	r3, [pc, #256]	; (8011138 <__kernel_cos+0x138>)
 8011036:	0004      	movs	r4, r0
 8011038:	000d      	movs	r5, r1
 801103a:	f7f1 f8a1 	bl	8002180 <__aeabi_dmul>
 801103e:	4a3f      	ldr	r2, [pc, #252]	; (801113c <__kernel_cos+0x13c>)
 8011040:	9002      	str	r0, [sp, #8]
 8011042:	9103      	str	r1, [sp, #12]
 8011044:	4b3e      	ldr	r3, [pc, #248]	; (8011140 <__kernel_cos+0x140>)
 8011046:	0020      	movs	r0, r4
 8011048:	0029      	movs	r1, r5
 801104a:	f7f1 f899 	bl	8002180 <__aeabi_dmul>
 801104e:	4a3d      	ldr	r2, [pc, #244]	; (8011144 <__kernel_cos+0x144>)
 8011050:	4b3d      	ldr	r3, [pc, #244]	; (8011148 <__kernel_cos+0x148>)
 8011052:	f7f0 f925 	bl	80012a0 <__aeabi_dadd>
 8011056:	0022      	movs	r2, r4
 8011058:	002b      	movs	r3, r5
 801105a:	f7f1 f891 	bl	8002180 <__aeabi_dmul>
 801105e:	4a3b      	ldr	r2, [pc, #236]	; (801114c <__kernel_cos+0x14c>)
 8011060:	4b3b      	ldr	r3, [pc, #236]	; (8011150 <__kernel_cos+0x150>)
 8011062:	f7f1 faf9 	bl	8002658 <__aeabi_dsub>
 8011066:	0022      	movs	r2, r4
 8011068:	002b      	movs	r3, r5
 801106a:	f7f1 f889 	bl	8002180 <__aeabi_dmul>
 801106e:	4a39      	ldr	r2, [pc, #228]	; (8011154 <__kernel_cos+0x154>)
 8011070:	4b39      	ldr	r3, [pc, #228]	; (8011158 <__kernel_cos+0x158>)
 8011072:	f7f0 f915 	bl	80012a0 <__aeabi_dadd>
 8011076:	0022      	movs	r2, r4
 8011078:	002b      	movs	r3, r5
 801107a:	f7f1 f881 	bl	8002180 <__aeabi_dmul>
 801107e:	4a37      	ldr	r2, [pc, #220]	; (801115c <__kernel_cos+0x15c>)
 8011080:	4b37      	ldr	r3, [pc, #220]	; (8011160 <__kernel_cos+0x160>)
 8011082:	f7f1 fae9 	bl	8002658 <__aeabi_dsub>
 8011086:	0022      	movs	r2, r4
 8011088:	002b      	movs	r3, r5
 801108a:	f7f1 f879 	bl	8002180 <__aeabi_dmul>
 801108e:	4a35      	ldr	r2, [pc, #212]	; (8011164 <__kernel_cos+0x164>)
 8011090:	4b35      	ldr	r3, [pc, #212]	; (8011168 <__kernel_cos+0x168>)
 8011092:	f7f0 f905 	bl	80012a0 <__aeabi_dadd>
 8011096:	0022      	movs	r2, r4
 8011098:	002b      	movs	r3, r5
 801109a:	f7f1 f871 	bl	8002180 <__aeabi_dmul>
 801109e:	0022      	movs	r2, r4
 80110a0:	002b      	movs	r3, r5
 80110a2:	f7f1 f86d 	bl	8002180 <__aeabi_dmul>
 80110a6:	9a04      	ldr	r2, [sp, #16]
 80110a8:	9b05      	ldr	r3, [sp, #20]
 80110aa:	0004      	movs	r4, r0
 80110ac:	000d      	movs	r5, r1
 80110ae:	0038      	movs	r0, r7
 80110b0:	0031      	movs	r1, r6
 80110b2:	f7f1 f865 	bl	8002180 <__aeabi_dmul>
 80110b6:	0002      	movs	r2, r0
 80110b8:	000b      	movs	r3, r1
 80110ba:	0020      	movs	r0, r4
 80110bc:	0029      	movs	r1, r5
 80110be:	f7f1 facb 	bl	8002658 <__aeabi_dsub>
 80110c2:	4b2a      	ldr	r3, [pc, #168]	; (801116c <__kernel_cos+0x16c>)
 80110c4:	9a00      	ldr	r2, [sp, #0]
 80110c6:	0004      	movs	r4, r0
 80110c8:	000d      	movs	r5, r1
 80110ca:	429a      	cmp	r2, r3
 80110cc:	dc0d      	bgt.n	80110ea <__kernel_cos+0xea>
 80110ce:	0002      	movs	r2, r0
 80110d0:	000b      	movs	r3, r1
 80110d2:	9802      	ldr	r0, [sp, #8]
 80110d4:	9903      	ldr	r1, [sp, #12]
 80110d6:	f7f1 fabf 	bl	8002658 <__aeabi_dsub>
 80110da:	0002      	movs	r2, r0
 80110dc:	2000      	movs	r0, #0
 80110de:	000b      	movs	r3, r1
 80110e0:	4923      	ldr	r1, [pc, #140]	; (8011170 <__kernel_cos+0x170>)
 80110e2:	f7f1 fab9 	bl	8002658 <__aeabi_dsub>
 80110e6:	b007      	add	sp, #28
 80110e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110ea:	4b22      	ldr	r3, [pc, #136]	; (8011174 <__kernel_cos+0x174>)
 80110ec:	9a00      	ldr	r2, [sp, #0]
 80110ee:	2600      	movs	r6, #0
 80110f0:	429a      	cmp	r2, r3
 80110f2:	dc1b      	bgt.n	801112c <__kernel_cos+0x12c>
 80110f4:	0013      	movs	r3, r2
 80110f6:	4a20      	ldr	r2, [pc, #128]	; (8011178 <__kernel_cos+0x178>)
 80110f8:	4694      	mov	ip, r2
 80110fa:	4463      	add	r3, ip
 80110fc:	001f      	movs	r7, r3
 80110fe:	0032      	movs	r2, r6
 8011100:	003b      	movs	r3, r7
 8011102:	2000      	movs	r0, #0
 8011104:	491a      	ldr	r1, [pc, #104]	; (8011170 <__kernel_cos+0x170>)
 8011106:	f7f1 faa7 	bl	8002658 <__aeabi_dsub>
 801110a:	0032      	movs	r2, r6
 801110c:	003b      	movs	r3, r7
 801110e:	9000      	str	r0, [sp, #0]
 8011110:	9101      	str	r1, [sp, #4]
 8011112:	9802      	ldr	r0, [sp, #8]
 8011114:	9903      	ldr	r1, [sp, #12]
 8011116:	f7f1 fa9f 	bl	8002658 <__aeabi_dsub>
 801111a:	0022      	movs	r2, r4
 801111c:	002b      	movs	r3, r5
 801111e:	f7f1 fa9b 	bl	8002658 <__aeabi_dsub>
 8011122:	0002      	movs	r2, r0
 8011124:	000b      	movs	r3, r1
 8011126:	9800      	ldr	r0, [sp, #0]
 8011128:	9901      	ldr	r1, [sp, #4]
 801112a:	e7da      	b.n	80110e2 <__kernel_cos+0xe2>
 801112c:	4f13      	ldr	r7, [pc, #76]	; (801117c <__kernel_cos+0x17c>)
 801112e:	e7e6      	b.n	80110fe <__kernel_cos+0xfe>
 8011130:	2000      	movs	r0, #0
 8011132:	490f      	ldr	r1, [pc, #60]	; (8011170 <__kernel_cos+0x170>)
 8011134:	e7d7      	b.n	80110e6 <__kernel_cos+0xe6>
 8011136:	46c0      	nop			; (mov r8, r8)
 8011138:	3fe00000 	.word	0x3fe00000
 801113c:	be8838d4 	.word	0xbe8838d4
 8011140:	bda8fae9 	.word	0xbda8fae9
 8011144:	bdb4b1c4 	.word	0xbdb4b1c4
 8011148:	3e21ee9e 	.word	0x3e21ee9e
 801114c:	809c52ad 	.word	0x809c52ad
 8011150:	3e927e4f 	.word	0x3e927e4f
 8011154:	19cb1590 	.word	0x19cb1590
 8011158:	3efa01a0 	.word	0x3efa01a0
 801115c:	16c15177 	.word	0x16c15177
 8011160:	3f56c16c 	.word	0x3f56c16c
 8011164:	5555554c 	.word	0x5555554c
 8011168:	3fa55555 	.word	0x3fa55555
 801116c:	3fd33332 	.word	0x3fd33332
 8011170:	3ff00000 	.word	0x3ff00000
 8011174:	3fe90000 	.word	0x3fe90000
 8011178:	ffe00000 	.word	0xffe00000
 801117c:	3fd20000 	.word	0x3fd20000

08011180 <__kernel_rem_pio2>:
 8011180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011182:	4cd0      	ldr	r4, [pc, #832]	; (80114c4 <__kernel_rem_pio2+0x344>)
 8011184:	44a5      	add	sp, r4
 8011186:	930d      	str	r3, [sp, #52]	; 0x34
 8011188:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801118a:	0014      	movs	r4, r2
 801118c:	009a      	lsls	r2, r3, #2
 801118e:	4bce      	ldr	r3, [pc, #824]	; (80114c8 <__kernel_rem_pio2+0x348>)
 8011190:	900e      	str	r0, [sp, #56]	; 0x38
 8011192:	58d3      	ldr	r3, [r2, r3]
 8011194:	9107      	str	r1, [sp, #28]
 8011196:	9308      	str	r3, [sp, #32]
 8011198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801119a:	3b01      	subs	r3, #1
 801119c:	930c      	str	r3, [sp, #48]	; 0x30
 801119e:	2300      	movs	r3, #0
 80111a0:	9300      	str	r3, [sp, #0]
 80111a2:	0023      	movs	r3, r4
 80111a4:	3314      	adds	r3, #20
 80111a6:	db04      	blt.n	80111b2 <__kernel_rem_pio2+0x32>
 80111a8:	2118      	movs	r1, #24
 80111aa:	1ee0      	subs	r0, r4, #3
 80111ac:	f7ef f84e 	bl	800024c <__divsi3>
 80111b0:	9000      	str	r0, [sp, #0]
 80111b2:	2218      	movs	r2, #24
 80111b4:	9b00      	ldr	r3, [sp, #0]
 80111b6:	4252      	negs	r2, r2
 80111b8:	3301      	adds	r3, #1
 80111ba:	435a      	muls	r2, r3
 80111bc:	1913      	adds	r3, r2, r4
 80111be:	9302      	str	r3, [sp, #8]
 80111c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80111c2:	9b00      	ldr	r3, [sp, #0]
 80111c4:	ae26      	add	r6, sp, #152	; 0x98
 80111c6:	1a9d      	subs	r5, r3, r2
 80111c8:	002c      	movs	r4, r5
 80111ca:	9b08      	ldr	r3, [sp, #32]
 80111cc:	189f      	adds	r7, r3, r2
 80111ce:	1b63      	subs	r3, r4, r5
 80111d0:	429f      	cmp	r7, r3
 80111d2:	da17      	bge.n	8011204 <__kernel_rem_pio2+0x84>
 80111d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111d8:	9304      	str	r3, [sp, #16]
 80111da:	ab76      	add	r3, sp, #472	; 0x1d8
 80111dc:	930a      	str	r3, [sp, #40]	; 0x28
 80111de:	2301      	movs	r3, #1
 80111e0:	1a9b      	subs	r3, r3, r2
 80111e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80111e4:	ab28      	add	r3, sp, #160	; 0xa0
 80111e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80111e8:	9a04      	ldr	r2, [sp, #16]
 80111ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111ec:	189b      	adds	r3, r3, r2
 80111ee:	9a08      	ldr	r2, [sp, #32]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	db31      	blt.n	8011258 <__kernel_rem_pio2+0xd8>
 80111f4:	9b04      	ldr	r3, [sp, #16]
 80111f6:	2400      	movs	r4, #0
 80111f8:	00de      	lsls	r6, r3, #3
 80111fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111fc:	2500      	movs	r5, #0
 80111fe:	2700      	movs	r7, #0
 8011200:	199e      	adds	r6, r3, r6
 8011202:	e01e      	b.n	8011242 <__kernel_rem_pio2+0xc2>
 8011204:	2c00      	cmp	r4, #0
 8011206:	db07      	blt.n	8011218 <__kernel_rem_pio2+0x98>
 8011208:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 801120a:	00a3      	lsls	r3, r4, #2
 801120c:	58d0      	ldr	r0, [r2, r3]
 801120e:	f7f1 fe09 	bl	8002e24 <__aeabi_i2d>
 8011212:	c603      	stmia	r6!, {r0, r1}
 8011214:	3401      	adds	r4, #1
 8011216:	e7da      	b.n	80111ce <__kernel_rem_pio2+0x4e>
 8011218:	2000      	movs	r0, #0
 801121a:	2100      	movs	r1, #0
 801121c:	e7f9      	b.n	8011212 <__kernel_rem_pio2+0x92>
 801121e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011220:	00f9      	lsls	r1, r7, #3
 8011222:	1859      	adds	r1, r3, r1
 8011224:	6808      	ldr	r0, [r1, #0]
 8011226:	6849      	ldr	r1, [r1, #4]
 8011228:	6832      	ldr	r2, [r6, #0]
 801122a:	6873      	ldr	r3, [r6, #4]
 801122c:	f7f0 ffa8 	bl	8002180 <__aeabi_dmul>
 8011230:	0002      	movs	r2, r0
 8011232:	000b      	movs	r3, r1
 8011234:	0020      	movs	r0, r4
 8011236:	0029      	movs	r1, r5
 8011238:	f7f0 f832 	bl	80012a0 <__aeabi_dadd>
 801123c:	0004      	movs	r4, r0
 801123e:	000d      	movs	r5, r1
 8011240:	3701      	adds	r7, #1
 8011242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011244:	3e08      	subs	r6, #8
 8011246:	429f      	cmp	r7, r3
 8011248:	dde9      	ble.n	801121e <__kernel_rem_pio2+0x9e>
 801124a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801124c:	c330      	stmia	r3!, {r4, r5}
 801124e:	930a      	str	r3, [sp, #40]	; 0x28
 8011250:	9b04      	ldr	r3, [sp, #16]
 8011252:	3301      	adds	r3, #1
 8011254:	9304      	str	r3, [sp, #16]
 8011256:	e7c7      	b.n	80111e8 <__kernel_rem_pio2+0x68>
 8011258:	9b08      	ldr	r3, [sp, #32]
 801125a:	aa12      	add	r2, sp, #72	; 0x48
 801125c:	009b      	lsls	r3, r3, #2
 801125e:	189b      	adds	r3, r3, r2
 8011260:	9310      	str	r3, [sp, #64]	; 0x40
 8011262:	9b00      	ldr	r3, [sp, #0]
 8011264:	0098      	lsls	r0, r3, #2
 8011266:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011268:	181b      	adds	r3, r3, r0
 801126a:	930f      	str	r3, [sp, #60]	; 0x3c
 801126c:	9b08      	ldr	r3, [sp, #32]
 801126e:	9304      	str	r3, [sp, #16]
 8011270:	9b04      	ldr	r3, [sp, #16]
 8011272:	aa76      	add	r2, sp, #472	; 0x1d8
 8011274:	00db      	lsls	r3, r3, #3
 8011276:	18d3      	adds	r3, r2, r3
 8011278:	681c      	ldr	r4, [r3, #0]
 801127a:	685d      	ldr	r5, [r3, #4]
 801127c:	ab12      	add	r3, sp, #72	; 0x48
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	930b      	str	r3, [sp, #44]	; 0x2c
 8011282:	9b04      	ldr	r3, [sp, #16]
 8011284:	9211      	str	r2, [sp, #68]	; 0x44
 8011286:	930a      	str	r3, [sp, #40]	; 0x28
 8011288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801128a:	2b00      	cmp	r3, #0
 801128c:	dc74      	bgt.n	8011378 <__kernel_rem_pio2+0x1f8>
 801128e:	0020      	movs	r0, r4
 8011290:	0029      	movs	r1, r5
 8011292:	9a02      	ldr	r2, [sp, #8]
 8011294:	f000 fcb6 	bl	8011c04 <scalbn>
 8011298:	23ff      	movs	r3, #255	; 0xff
 801129a:	2200      	movs	r2, #0
 801129c:	059b      	lsls	r3, r3, #22
 801129e:	0004      	movs	r4, r0
 80112a0:	000d      	movs	r5, r1
 80112a2:	f7f0 ff6d 	bl	8002180 <__aeabi_dmul>
 80112a6:	f000 fb95 	bl	80119d4 <floor>
 80112aa:	2200      	movs	r2, #0
 80112ac:	4b87      	ldr	r3, [pc, #540]	; (80114cc <__kernel_rem_pio2+0x34c>)
 80112ae:	f7f0 ff67 	bl	8002180 <__aeabi_dmul>
 80112b2:	0002      	movs	r2, r0
 80112b4:	000b      	movs	r3, r1
 80112b6:	0020      	movs	r0, r4
 80112b8:	0029      	movs	r1, r5
 80112ba:	f7f1 f9cd 	bl	8002658 <__aeabi_dsub>
 80112be:	000d      	movs	r5, r1
 80112c0:	0004      	movs	r4, r0
 80112c2:	f7f1 fd79 	bl	8002db8 <__aeabi_d2iz>
 80112c6:	900b      	str	r0, [sp, #44]	; 0x2c
 80112c8:	f7f1 fdac 	bl	8002e24 <__aeabi_i2d>
 80112cc:	000b      	movs	r3, r1
 80112ce:	0002      	movs	r2, r0
 80112d0:	0029      	movs	r1, r5
 80112d2:	0020      	movs	r0, r4
 80112d4:	f7f1 f9c0 	bl	8002658 <__aeabi_dsub>
 80112d8:	9b02      	ldr	r3, [sp, #8]
 80112da:	0006      	movs	r6, r0
 80112dc:	000f      	movs	r7, r1
 80112de:	2b00      	cmp	r3, #0
 80112e0:	dd74      	ble.n	80113cc <__kernel_rem_pio2+0x24c>
 80112e2:	2118      	movs	r1, #24
 80112e4:	9b04      	ldr	r3, [sp, #16]
 80112e6:	aa12      	add	r2, sp, #72	; 0x48
 80112e8:	3b01      	subs	r3, #1
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	589a      	ldr	r2, [r3, r2]
 80112ee:	9802      	ldr	r0, [sp, #8]
 80112f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80112f2:	1a09      	subs	r1, r1, r0
 80112f4:	0010      	movs	r0, r2
 80112f6:	4108      	asrs	r0, r1
 80112f8:	1824      	adds	r4, r4, r0
 80112fa:	4088      	lsls	r0, r1
 80112fc:	a912      	add	r1, sp, #72	; 0x48
 80112fe:	1a12      	subs	r2, r2, r0
 8011300:	505a      	str	r2, [r3, r1]
 8011302:	2317      	movs	r3, #23
 8011304:	9902      	ldr	r1, [sp, #8]
 8011306:	940b      	str	r4, [sp, #44]	; 0x2c
 8011308:	1a5b      	subs	r3, r3, r1
 801130a:	411a      	asrs	r2, r3
 801130c:	920a      	str	r2, [sp, #40]	; 0x28
 801130e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011310:	2b00      	cmp	r3, #0
 8011312:	dd6d      	ble.n	80113f0 <__kernel_rem_pio2+0x270>
 8011314:	2200      	movs	r2, #0
 8011316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011318:	2080      	movs	r0, #128	; 0x80
 801131a:	3301      	adds	r3, #1
 801131c:	930b      	str	r3, [sp, #44]	; 0x2c
 801131e:	4b6c      	ldr	r3, [pc, #432]	; (80114d0 <__kernel_rem_pio2+0x350>)
 8011320:	0014      	movs	r4, r2
 8011322:	469c      	mov	ip, r3
 8011324:	2501      	movs	r5, #1
 8011326:	0440      	lsls	r0, r0, #17
 8011328:	9b04      	ldr	r3, [sp, #16]
 801132a:	4293      	cmp	r3, r2
 801132c:	dd00      	ble.n	8011330 <__kernel_rem_pio2+0x1b0>
 801132e:	e098      	b.n	8011462 <__kernel_rem_pio2+0x2e2>
 8011330:	9b02      	ldr	r3, [sp, #8]
 8011332:	2b00      	cmp	r3, #0
 8011334:	dd05      	ble.n	8011342 <__kernel_rem_pio2+0x1c2>
 8011336:	2b01      	cmp	r3, #1
 8011338:	d100      	bne.n	801133c <__kernel_rem_pio2+0x1bc>
 801133a:	e0a8      	b.n	801148e <__kernel_rem_pio2+0x30e>
 801133c:	2b02      	cmp	r3, #2
 801133e:	d100      	bne.n	8011342 <__kernel_rem_pio2+0x1c2>
 8011340:	e0b0      	b.n	80114a4 <__kernel_rem_pio2+0x324>
 8011342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011344:	2b02      	cmp	r3, #2
 8011346:	d153      	bne.n	80113f0 <__kernel_rem_pio2+0x270>
 8011348:	0032      	movs	r2, r6
 801134a:	003b      	movs	r3, r7
 801134c:	2000      	movs	r0, #0
 801134e:	4961      	ldr	r1, [pc, #388]	; (80114d4 <__kernel_rem_pio2+0x354>)
 8011350:	f7f1 f982 	bl	8002658 <__aeabi_dsub>
 8011354:	0006      	movs	r6, r0
 8011356:	000f      	movs	r7, r1
 8011358:	2c00      	cmp	r4, #0
 801135a:	d049      	beq.n	80113f0 <__kernel_rem_pio2+0x270>
 801135c:	9a02      	ldr	r2, [sp, #8]
 801135e:	2000      	movs	r0, #0
 8011360:	495c      	ldr	r1, [pc, #368]	; (80114d4 <__kernel_rem_pio2+0x354>)
 8011362:	f000 fc4f 	bl	8011c04 <scalbn>
 8011366:	0002      	movs	r2, r0
 8011368:	000b      	movs	r3, r1
 801136a:	0030      	movs	r0, r6
 801136c:	0039      	movs	r1, r7
 801136e:	f7f1 f973 	bl	8002658 <__aeabi_dsub>
 8011372:	0006      	movs	r6, r0
 8011374:	000f      	movs	r7, r1
 8011376:	e03b      	b.n	80113f0 <__kernel_rem_pio2+0x270>
 8011378:	2200      	movs	r2, #0
 801137a:	4b57      	ldr	r3, [pc, #348]	; (80114d8 <__kernel_rem_pio2+0x358>)
 801137c:	0020      	movs	r0, r4
 801137e:	0029      	movs	r1, r5
 8011380:	f7f0 fefe 	bl	8002180 <__aeabi_dmul>
 8011384:	f7f1 fd18 	bl	8002db8 <__aeabi_d2iz>
 8011388:	f7f1 fd4c 	bl	8002e24 <__aeabi_i2d>
 801138c:	2200      	movs	r2, #0
 801138e:	4b53      	ldr	r3, [pc, #332]	; (80114dc <__kernel_rem_pio2+0x35c>)
 8011390:	0006      	movs	r6, r0
 8011392:	000f      	movs	r7, r1
 8011394:	f7f0 fef4 	bl	8002180 <__aeabi_dmul>
 8011398:	0002      	movs	r2, r0
 801139a:	000b      	movs	r3, r1
 801139c:	0020      	movs	r0, r4
 801139e:	0029      	movs	r1, r5
 80113a0:	f7f1 f95a 	bl	8002658 <__aeabi_dsub>
 80113a4:	f7f1 fd08 	bl	8002db8 <__aeabi_d2iz>
 80113a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80113ac:	c301      	stmia	r3!, {r0}
 80113ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80113b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113b2:	0030      	movs	r0, r6
 80113b4:	3b01      	subs	r3, #1
 80113b6:	930a      	str	r3, [sp, #40]	; 0x28
 80113b8:	00db      	lsls	r3, r3, #3
 80113ba:	18d3      	adds	r3, r2, r3
 80113bc:	0039      	movs	r1, r7
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	f7ef ff6d 	bl	80012a0 <__aeabi_dadd>
 80113c6:	0004      	movs	r4, r0
 80113c8:	000d      	movs	r5, r1
 80113ca:	e75d      	b.n	8011288 <__kernel_rem_pio2+0x108>
 80113cc:	9b02      	ldr	r3, [sp, #8]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d107      	bne.n	80113e2 <__kernel_rem_pio2+0x262>
 80113d2:	9b04      	ldr	r3, [sp, #16]
 80113d4:	aa12      	add	r2, sp, #72	; 0x48
 80113d6:	3b01      	subs	r3, #1
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	5898      	ldr	r0, [r3, r2]
 80113dc:	15c3      	asrs	r3, r0, #23
 80113de:	930a      	str	r3, [sp, #40]	; 0x28
 80113e0:	e795      	b.n	801130e <__kernel_rem_pio2+0x18e>
 80113e2:	2200      	movs	r2, #0
 80113e4:	4b3e      	ldr	r3, [pc, #248]	; (80114e0 <__kernel_rem_pio2+0x360>)
 80113e6:	f7ef f851 	bl	800048c <__aeabi_dcmpge>
 80113ea:	2800      	cmp	r0, #0
 80113ec:	d136      	bne.n	801145c <__kernel_rem_pio2+0x2dc>
 80113ee:	900a      	str	r0, [sp, #40]	; 0x28
 80113f0:	2200      	movs	r2, #0
 80113f2:	2300      	movs	r3, #0
 80113f4:	0030      	movs	r0, r6
 80113f6:	0039      	movs	r1, r7
 80113f8:	f7ef f824 	bl	8000444 <__aeabi_dcmpeq>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	d100      	bne.n	8011402 <__kernel_rem_pio2+0x282>
 8011400:	e0b9      	b.n	8011576 <__kernel_rem_pio2+0x3f6>
 8011402:	2200      	movs	r2, #0
 8011404:	9b04      	ldr	r3, [sp, #16]
 8011406:	3b01      	subs	r3, #1
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	9908      	ldr	r1, [sp, #32]
 801140c:	428b      	cmp	r3, r1
 801140e:	da52      	bge.n	80114b6 <__kernel_rem_pio2+0x336>
 8011410:	2a00      	cmp	r2, #0
 8011412:	d100      	bne.n	8011416 <__kernel_rem_pio2+0x296>
 8011414:	e095      	b.n	8011542 <__kernel_rem_pio2+0x3c2>
 8011416:	9b02      	ldr	r3, [sp, #8]
 8011418:	aa12      	add	r2, sp, #72	; 0x48
 801141a:	3b18      	subs	r3, #24
 801141c:	9302      	str	r3, [sp, #8]
 801141e:	9b00      	ldr	r3, [sp, #0]
 8011420:	009b      	lsls	r3, r3, #2
 8011422:	589b      	ldr	r3, [r3, r2]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d100      	bne.n	801142a <__kernel_rem_pio2+0x2aa>
 8011428:	e0a1      	b.n	801156e <__kernel_rem_pio2+0x3ee>
 801142a:	2000      	movs	r0, #0
 801142c:	9a02      	ldr	r2, [sp, #8]
 801142e:	4929      	ldr	r1, [pc, #164]	; (80114d4 <__kernel_rem_pio2+0x354>)
 8011430:	f000 fbe8 	bl	8011c04 <scalbn>
 8011434:	0006      	movs	r6, r0
 8011436:	000f      	movs	r7, r1
 8011438:	9c00      	ldr	r4, [sp, #0]
 801143a:	2c00      	cmp	r4, #0
 801143c:	db00      	blt.n	8011440 <__kernel_rem_pio2+0x2c0>
 801143e:	e0d9      	b.n	80115f4 <__kernel_rem_pio2+0x474>
 8011440:	2600      	movs	r6, #0
 8011442:	9d00      	ldr	r5, [sp, #0]
 8011444:	2d00      	cmp	r5, #0
 8011446:	da00      	bge.n	801144a <__kernel_rem_pio2+0x2ca>
 8011448:	e10c      	b.n	8011664 <__kernel_rem_pio2+0x4e4>
 801144a:	ab76      	add	r3, sp, #472	; 0x1d8
 801144c:	00ef      	lsls	r7, r5, #3
 801144e:	2400      	movs	r4, #0
 8011450:	18ff      	adds	r7, r7, r3
 8011452:	2300      	movs	r3, #0
 8011454:	9302      	str	r3, [sp, #8]
 8011456:	9403      	str	r4, [sp, #12]
 8011458:	2400      	movs	r4, #0
 801145a:	e0f4      	b.n	8011646 <__kernel_rem_pio2+0x4c6>
 801145c:	2302      	movs	r3, #2
 801145e:	930a      	str	r3, [sp, #40]	; 0x28
 8011460:	e758      	b.n	8011314 <__kernel_rem_pio2+0x194>
 8011462:	9b00      	ldr	r3, [sp, #0]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	2c00      	cmp	r4, #0
 8011468:	d10b      	bne.n	8011482 <__kernel_rem_pio2+0x302>
 801146a:	2b00      	cmp	r3, #0
 801146c:	d003      	beq.n	8011476 <__kernel_rem_pio2+0x2f6>
 801146e:	9c00      	ldr	r4, [sp, #0]
 8011470:	1ac3      	subs	r3, r0, r3
 8011472:	6023      	str	r3, [r4, #0]
 8011474:	002b      	movs	r3, r5
 8011476:	9c00      	ldr	r4, [sp, #0]
 8011478:	3201      	adds	r2, #1
 801147a:	3404      	adds	r4, #4
 801147c:	9400      	str	r4, [sp, #0]
 801147e:	001c      	movs	r4, r3
 8011480:	e752      	b.n	8011328 <__kernel_rem_pio2+0x1a8>
 8011482:	4661      	mov	r1, ip
 8011484:	1acb      	subs	r3, r1, r3
 8011486:	9900      	ldr	r1, [sp, #0]
 8011488:	600b      	str	r3, [r1, #0]
 801148a:	0023      	movs	r3, r4
 801148c:	e7f3      	b.n	8011476 <__kernel_rem_pio2+0x2f6>
 801148e:	9b04      	ldr	r3, [sp, #16]
 8011490:	aa12      	add	r2, sp, #72	; 0x48
 8011492:	3b01      	subs	r3, #1
 8011494:	009b      	lsls	r3, r3, #2
 8011496:	589a      	ldr	r2, [r3, r2]
 8011498:	9200      	str	r2, [sp, #0]
 801149a:	0252      	lsls	r2, r2, #9
 801149c:	0a52      	lsrs	r2, r2, #9
 801149e:	a912      	add	r1, sp, #72	; 0x48
 80114a0:	505a      	str	r2, [r3, r1]
 80114a2:	e74e      	b.n	8011342 <__kernel_rem_pio2+0x1c2>
 80114a4:	9b04      	ldr	r3, [sp, #16]
 80114a6:	aa12      	add	r2, sp, #72	; 0x48
 80114a8:	3b01      	subs	r3, #1
 80114aa:	009b      	lsls	r3, r3, #2
 80114ac:	589a      	ldr	r2, [r3, r2]
 80114ae:	9200      	str	r2, [sp, #0]
 80114b0:	0292      	lsls	r2, r2, #10
 80114b2:	0a92      	lsrs	r2, r2, #10
 80114b4:	e7f3      	b.n	801149e <__kernel_rem_pio2+0x31e>
 80114b6:	0099      	lsls	r1, r3, #2
 80114b8:	a812      	add	r0, sp, #72	; 0x48
 80114ba:	5809      	ldr	r1, [r1, r0]
 80114bc:	3b01      	subs	r3, #1
 80114be:	430a      	orrs	r2, r1
 80114c0:	e7a3      	b.n	801140a <__kernel_rem_pio2+0x28a>
 80114c2:	46c0      	nop			; (mov r8, r8)
 80114c4:	fffffd84 	.word	0xfffffd84
 80114c8:	08012840 	.word	0x08012840
 80114cc:	40200000 	.word	0x40200000
 80114d0:	00ffffff 	.word	0x00ffffff
 80114d4:	3ff00000 	.word	0x3ff00000
 80114d8:	3e700000 	.word	0x3e700000
 80114dc:	41700000 	.word	0x41700000
 80114e0:	3fe00000 	.word	0x3fe00000
 80114e4:	3301      	adds	r3, #1
 80114e6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80114e8:	009a      	lsls	r2, r3, #2
 80114ea:	4252      	negs	r2, r2
 80114ec:	588a      	ldr	r2, [r1, r2]
 80114ee:	2a00      	cmp	r2, #0
 80114f0:	d0f8      	beq.n	80114e4 <__kernel_rem_pio2+0x364>
 80114f2:	9a04      	ldr	r2, [sp, #16]
 80114f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80114f6:	1c57      	adds	r7, r2, #1
 80114f8:	1854      	adds	r4, r2, r1
 80114fa:	00e4      	lsls	r4, r4, #3
 80114fc:	aa26      	add	r2, sp, #152	; 0x98
 80114fe:	1914      	adds	r4, r2, r4
 8011500:	9a04      	ldr	r2, [sp, #16]
 8011502:	18d3      	adds	r3, r2, r3
 8011504:	9304      	str	r3, [sp, #16]
 8011506:	9b04      	ldr	r3, [sp, #16]
 8011508:	42bb      	cmp	r3, r7
 801150a:	da00      	bge.n	801150e <__kernel_rem_pio2+0x38e>
 801150c:	e6b0      	b.n	8011270 <__kernel_rem_pio2+0xf0>
 801150e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011510:	00bb      	lsls	r3, r7, #2
 8011512:	58d0      	ldr	r0, [r2, r3]
 8011514:	f7f1 fc86 	bl	8002e24 <__aeabi_i2d>
 8011518:	2200      	movs	r2, #0
 801151a:	2300      	movs	r3, #0
 801151c:	0026      	movs	r6, r4
 801151e:	2500      	movs	r5, #0
 8011520:	6020      	str	r0, [r4, #0]
 8011522:	6061      	str	r1, [r4, #4]
 8011524:	9200      	str	r2, [sp, #0]
 8011526:	9301      	str	r3, [sp, #4]
 8011528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801152a:	429d      	cmp	r5, r3
 801152c:	dd0b      	ble.n	8011546 <__kernel_rem_pio2+0x3c6>
 801152e:	00fb      	lsls	r3, r7, #3
 8011530:	aa76      	add	r2, sp, #472	; 0x1d8
 8011532:	18d3      	adds	r3, r2, r3
 8011534:	3701      	adds	r7, #1
 8011536:	9900      	ldr	r1, [sp, #0]
 8011538:	9a01      	ldr	r2, [sp, #4]
 801153a:	3408      	adds	r4, #8
 801153c:	6019      	str	r1, [r3, #0]
 801153e:	605a      	str	r2, [r3, #4]
 8011540:	e7e1      	b.n	8011506 <__kernel_rem_pio2+0x386>
 8011542:	2301      	movs	r3, #1
 8011544:	e7cf      	b.n	80114e6 <__kernel_rem_pio2+0x366>
 8011546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011548:	00e9      	lsls	r1, r5, #3
 801154a:	1859      	adds	r1, r3, r1
 801154c:	6808      	ldr	r0, [r1, #0]
 801154e:	6849      	ldr	r1, [r1, #4]
 8011550:	6832      	ldr	r2, [r6, #0]
 8011552:	6873      	ldr	r3, [r6, #4]
 8011554:	f7f0 fe14 	bl	8002180 <__aeabi_dmul>
 8011558:	0002      	movs	r2, r0
 801155a:	000b      	movs	r3, r1
 801155c:	9800      	ldr	r0, [sp, #0]
 801155e:	9901      	ldr	r1, [sp, #4]
 8011560:	f7ef fe9e 	bl	80012a0 <__aeabi_dadd>
 8011564:	3501      	adds	r5, #1
 8011566:	9000      	str	r0, [sp, #0]
 8011568:	9101      	str	r1, [sp, #4]
 801156a:	3e08      	subs	r6, #8
 801156c:	e7dc      	b.n	8011528 <__kernel_rem_pio2+0x3a8>
 801156e:	9b00      	ldr	r3, [sp, #0]
 8011570:	3b01      	subs	r3, #1
 8011572:	9300      	str	r3, [sp, #0]
 8011574:	e74f      	b.n	8011416 <__kernel_rem_pio2+0x296>
 8011576:	9b02      	ldr	r3, [sp, #8]
 8011578:	0030      	movs	r0, r6
 801157a:	425a      	negs	r2, r3
 801157c:	0039      	movs	r1, r7
 801157e:	f000 fb41 	bl	8011c04 <scalbn>
 8011582:	2200      	movs	r2, #0
 8011584:	4bb6      	ldr	r3, [pc, #728]	; (8011860 <__kernel_rem_pio2+0x6e0>)
 8011586:	0004      	movs	r4, r0
 8011588:	000d      	movs	r5, r1
 801158a:	f7ee ff7f 	bl	800048c <__aeabi_dcmpge>
 801158e:	2800      	cmp	r0, #0
 8011590:	d025      	beq.n	80115de <__kernel_rem_pio2+0x45e>
 8011592:	2200      	movs	r2, #0
 8011594:	4bb3      	ldr	r3, [pc, #716]	; (8011864 <__kernel_rem_pio2+0x6e4>)
 8011596:	0020      	movs	r0, r4
 8011598:	0029      	movs	r1, r5
 801159a:	f7f0 fdf1 	bl	8002180 <__aeabi_dmul>
 801159e:	f7f1 fc0b 	bl	8002db8 <__aeabi_d2iz>
 80115a2:	9b04      	ldr	r3, [sp, #16]
 80115a4:	0006      	movs	r6, r0
 80115a6:	009f      	lsls	r7, r3, #2
 80115a8:	f7f1 fc3c 	bl	8002e24 <__aeabi_i2d>
 80115ac:	2200      	movs	r2, #0
 80115ae:	4bac      	ldr	r3, [pc, #688]	; (8011860 <__kernel_rem_pio2+0x6e0>)
 80115b0:	f7f0 fde6 	bl	8002180 <__aeabi_dmul>
 80115b4:	0002      	movs	r2, r0
 80115b6:	000b      	movs	r3, r1
 80115b8:	0020      	movs	r0, r4
 80115ba:	0029      	movs	r1, r5
 80115bc:	f7f1 f84c 	bl	8002658 <__aeabi_dsub>
 80115c0:	f7f1 fbfa 	bl	8002db8 <__aeabi_d2iz>
 80115c4:	ab12      	add	r3, sp, #72	; 0x48
 80115c6:	51d8      	str	r0, [r3, r7]
 80115c8:	9b04      	ldr	r3, [sp, #16]
 80115ca:	aa12      	add	r2, sp, #72	; 0x48
 80115cc:	3301      	adds	r3, #1
 80115ce:	9300      	str	r3, [sp, #0]
 80115d0:	9b02      	ldr	r3, [sp, #8]
 80115d2:	3318      	adds	r3, #24
 80115d4:	9302      	str	r3, [sp, #8]
 80115d6:	9b00      	ldr	r3, [sp, #0]
 80115d8:	009b      	lsls	r3, r3, #2
 80115da:	509e      	str	r6, [r3, r2]
 80115dc:	e725      	b.n	801142a <__kernel_rem_pio2+0x2aa>
 80115de:	9b04      	ldr	r3, [sp, #16]
 80115e0:	0020      	movs	r0, r4
 80115e2:	0029      	movs	r1, r5
 80115e4:	009e      	lsls	r6, r3, #2
 80115e6:	f7f1 fbe7 	bl	8002db8 <__aeabi_d2iz>
 80115ea:	ab12      	add	r3, sp, #72	; 0x48
 80115ec:	5198      	str	r0, [r3, r6]
 80115ee:	9b04      	ldr	r3, [sp, #16]
 80115f0:	9300      	str	r3, [sp, #0]
 80115f2:	e71a      	b.n	801142a <__kernel_rem_pio2+0x2aa>
 80115f4:	00e5      	lsls	r5, r4, #3
 80115f6:	ab76      	add	r3, sp, #472	; 0x1d8
 80115f8:	aa12      	add	r2, sp, #72	; 0x48
 80115fa:	195d      	adds	r5, r3, r5
 80115fc:	00a3      	lsls	r3, r4, #2
 80115fe:	5898      	ldr	r0, [r3, r2]
 8011600:	f7f1 fc10 	bl	8002e24 <__aeabi_i2d>
 8011604:	0032      	movs	r2, r6
 8011606:	003b      	movs	r3, r7
 8011608:	f7f0 fdba 	bl	8002180 <__aeabi_dmul>
 801160c:	2200      	movs	r2, #0
 801160e:	6028      	str	r0, [r5, #0]
 8011610:	6069      	str	r1, [r5, #4]
 8011612:	4b94      	ldr	r3, [pc, #592]	; (8011864 <__kernel_rem_pio2+0x6e4>)
 8011614:	0030      	movs	r0, r6
 8011616:	0039      	movs	r1, r7
 8011618:	f7f0 fdb2 	bl	8002180 <__aeabi_dmul>
 801161c:	3c01      	subs	r4, #1
 801161e:	0006      	movs	r6, r0
 8011620:	000f      	movs	r7, r1
 8011622:	e70a      	b.n	801143a <__kernel_rem_pio2+0x2ba>
 8011624:	4b90      	ldr	r3, [pc, #576]	; (8011868 <__kernel_rem_pio2+0x6e8>)
 8011626:	00e1      	lsls	r1, r4, #3
 8011628:	1859      	adds	r1, r3, r1
 801162a:	6808      	ldr	r0, [r1, #0]
 801162c:	6849      	ldr	r1, [r1, #4]
 801162e:	cf0c      	ldmia	r7!, {r2, r3}
 8011630:	f7f0 fda6 	bl	8002180 <__aeabi_dmul>
 8011634:	0002      	movs	r2, r0
 8011636:	000b      	movs	r3, r1
 8011638:	9802      	ldr	r0, [sp, #8]
 801163a:	9903      	ldr	r1, [sp, #12]
 801163c:	f7ef fe30 	bl	80012a0 <__aeabi_dadd>
 8011640:	9002      	str	r0, [sp, #8]
 8011642:	9103      	str	r1, [sp, #12]
 8011644:	3401      	adds	r4, #1
 8011646:	9b08      	ldr	r3, [sp, #32]
 8011648:	429c      	cmp	r4, r3
 801164a:	dc01      	bgt.n	8011650 <__kernel_rem_pio2+0x4d0>
 801164c:	42a6      	cmp	r6, r4
 801164e:	dae9      	bge.n	8011624 <__kernel_rem_pio2+0x4a4>
 8011650:	00f3      	lsls	r3, r6, #3
 8011652:	aa4e      	add	r2, sp, #312	; 0x138
 8011654:	18d3      	adds	r3, r2, r3
 8011656:	3d01      	subs	r5, #1
 8011658:	9902      	ldr	r1, [sp, #8]
 801165a:	9a03      	ldr	r2, [sp, #12]
 801165c:	3601      	adds	r6, #1
 801165e:	6019      	str	r1, [r3, #0]
 8011660:	605a      	str	r2, [r3, #4]
 8011662:	e6ef      	b.n	8011444 <__kernel_rem_pio2+0x2c4>
 8011664:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011666:	2b02      	cmp	r3, #2
 8011668:	dc0b      	bgt.n	8011682 <__kernel_rem_pio2+0x502>
 801166a:	2b00      	cmp	r3, #0
 801166c:	dd00      	ble.n	8011670 <__kernel_rem_pio2+0x4f0>
 801166e:	e08a      	b.n	8011786 <__kernel_rem_pio2+0x606>
 8011670:	d055      	beq.n	801171e <__kernel_rem_pio2+0x59e>
 8011672:	2007      	movs	r0, #7
 8011674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011676:	4003      	ands	r3, r0
 8011678:	0018      	movs	r0, r3
 801167a:	239f      	movs	r3, #159	; 0x9f
 801167c:	009b      	lsls	r3, r3, #2
 801167e:	449d      	add	sp, r3
 8011680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011682:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011684:	2b03      	cmp	r3, #3
 8011686:	d1f4      	bne.n	8011672 <__kernel_rem_pio2+0x4f2>
 8011688:	9b00      	ldr	r3, [sp, #0]
 801168a:	00dc      	lsls	r4, r3, #3
 801168c:	ab4e      	add	r3, sp, #312	; 0x138
 801168e:	191c      	adds	r4, r3, r4
 8011690:	0025      	movs	r5, r4
 8011692:	9b00      	ldr	r3, [sp, #0]
 8011694:	9302      	str	r3, [sp, #8]
 8011696:	9b02      	ldr	r3, [sp, #8]
 8011698:	3d08      	subs	r5, #8
 801169a:	2b00      	cmp	r3, #0
 801169c:	dd00      	ble.n	80116a0 <__kernel_rem_pio2+0x520>
 801169e:	e083      	b.n	80117a8 <__kernel_rem_pio2+0x628>
 80116a0:	9d00      	ldr	r5, [sp, #0]
 80116a2:	3c08      	subs	r4, #8
 80116a4:	2d01      	cmp	r5, #1
 80116a6:	dd00      	ble.n	80116aa <__kernel_rem_pio2+0x52a>
 80116a8:	e0a0      	b.n	80117ec <__kernel_rem_pio2+0x66c>
 80116aa:	2400      	movs	r4, #0
 80116ac:	0021      	movs	r1, r4
 80116ae:	9b00      	ldr	r3, [sp, #0]
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	dd00      	ble.n	80116b6 <__kernel_rem_pio2+0x536>
 80116b4:	e0b8      	b.n	8011828 <__kernel_rem_pio2+0x6a8>
 80116b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116b8:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 80116ba:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 80116bc:	9d50      	ldr	r5, [sp, #320]	; 0x140
 80116be:	9851      	ldr	r0, [sp, #324]	; 0x144
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d000      	beq.n	80116c6 <__kernel_rem_pio2+0x546>
 80116c4:	e0be      	b.n	8011844 <__kernel_rem_pio2+0x6c4>
 80116c6:	0033      	movs	r3, r6
 80116c8:	003a      	movs	r2, r7
 80116ca:	9e07      	ldr	r6, [sp, #28]
 80116cc:	6032      	str	r2, [r6, #0]
 80116ce:	6073      	str	r3, [r6, #4]
 80116d0:	002a      	movs	r2, r5
 80116d2:	0003      	movs	r3, r0
 80116d4:	60b2      	str	r2, [r6, #8]
 80116d6:	60f3      	str	r3, [r6, #12]
 80116d8:	0022      	movs	r2, r4
 80116da:	000b      	movs	r3, r1
 80116dc:	6132      	str	r2, [r6, #16]
 80116de:	6173      	str	r3, [r6, #20]
 80116e0:	e7c7      	b.n	8011672 <__kernel_rem_pio2+0x4f2>
 80116e2:	9b00      	ldr	r3, [sp, #0]
 80116e4:	aa4e      	add	r2, sp, #312	; 0x138
 80116e6:	00db      	lsls	r3, r3, #3
 80116e8:	18d3      	adds	r3, r2, r3
 80116ea:	0028      	movs	r0, r5
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	0021      	movs	r1, r4
 80116f2:	f7ef fdd5 	bl	80012a0 <__aeabi_dadd>
 80116f6:	0005      	movs	r5, r0
 80116f8:	000c      	movs	r4, r1
 80116fa:	9b00      	ldr	r3, [sp, #0]
 80116fc:	3b01      	subs	r3, #1
 80116fe:	9300      	str	r3, [sp, #0]
 8011700:	9b00      	ldr	r3, [sp, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	daed      	bge.n	80116e2 <__kernel_rem_pio2+0x562>
 8011706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011708:	2b00      	cmp	r3, #0
 801170a:	d002      	beq.n	8011712 <__kernel_rem_pio2+0x592>
 801170c:	2380      	movs	r3, #128	; 0x80
 801170e:	061b      	lsls	r3, r3, #24
 8011710:	18e4      	adds	r4, r4, r3
 8011712:	002a      	movs	r2, r5
 8011714:	0023      	movs	r3, r4
 8011716:	9907      	ldr	r1, [sp, #28]
 8011718:	600a      	str	r2, [r1, #0]
 801171a:	604b      	str	r3, [r1, #4]
 801171c:	e7a9      	b.n	8011672 <__kernel_rem_pio2+0x4f2>
 801171e:	9da4      	ldr	r5, [sp, #656]	; 0x290
 8011720:	002c      	movs	r4, r5
 8011722:	e7ed      	b.n	8011700 <__kernel_rem_pio2+0x580>
 8011724:	00e3      	lsls	r3, r4, #3
 8011726:	aa4e      	add	r2, sp, #312	; 0x138
 8011728:	18d3      	adds	r3, r2, r3
 801172a:	0030      	movs	r0, r6
 801172c:	681a      	ldr	r2, [r3, #0]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	0029      	movs	r1, r5
 8011732:	f7ef fdb5 	bl	80012a0 <__aeabi_dadd>
 8011736:	0006      	movs	r6, r0
 8011738:	000d      	movs	r5, r1
 801173a:	3c01      	subs	r4, #1
 801173c:	2c00      	cmp	r4, #0
 801173e:	daf1      	bge.n	8011724 <__kernel_rem_pio2+0x5a4>
 8011740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011742:	0029      	movs	r1, r5
 8011744:	2b00      	cmp	r3, #0
 8011746:	d002      	beq.n	801174e <__kernel_rem_pio2+0x5ce>
 8011748:	2380      	movs	r3, #128	; 0x80
 801174a:	061b      	lsls	r3, r3, #24
 801174c:	18e9      	adds	r1, r5, r3
 801174e:	0032      	movs	r2, r6
 8011750:	000b      	movs	r3, r1
 8011752:	9907      	ldr	r1, [sp, #28]
 8011754:	2401      	movs	r4, #1
 8011756:	600a      	str	r2, [r1, #0]
 8011758:	604b      	str	r3, [r1, #4]
 801175a:	984e      	ldr	r0, [sp, #312]	; 0x138
 801175c:	994f      	ldr	r1, [sp, #316]	; 0x13c
 801175e:	002b      	movs	r3, r5
 8011760:	f7f0 ff7a 	bl	8002658 <__aeabi_dsub>
 8011764:	0006      	movs	r6, r0
 8011766:	000d      	movs	r5, r1
 8011768:	9b00      	ldr	r3, [sp, #0]
 801176a:	42a3      	cmp	r3, r4
 801176c:	da0f      	bge.n	801178e <__kernel_rem_pio2+0x60e>
 801176e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011770:	2b00      	cmp	r3, #0
 8011772:	d002      	beq.n	801177a <__kernel_rem_pio2+0x5fa>
 8011774:	2380      	movs	r3, #128	; 0x80
 8011776:	061b      	lsls	r3, r3, #24
 8011778:	18ed      	adds	r5, r5, r3
 801177a:	0032      	movs	r2, r6
 801177c:	002b      	movs	r3, r5
 801177e:	9907      	ldr	r1, [sp, #28]
 8011780:	608a      	str	r2, [r1, #8]
 8011782:	60cb      	str	r3, [r1, #12]
 8011784:	e775      	b.n	8011672 <__kernel_rem_pio2+0x4f2>
 8011786:	2600      	movs	r6, #0
 8011788:	9c00      	ldr	r4, [sp, #0]
 801178a:	0035      	movs	r5, r6
 801178c:	e7d6      	b.n	801173c <__kernel_rem_pio2+0x5bc>
 801178e:	00e3      	lsls	r3, r4, #3
 8011790:	aa4e      	add	r2, sp, #312	; 0x138
 8011792:	18d3      	adds	r3, r2, r3
 8011794:	0030      	movs	r0, r6
 8011796:	681a      	ldr	r2, [r3, #0]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	0029      	movs	r1, r5
 801179c:	f7ef fd80 	bl	80012a0 <__aeabi_dadd>
 80117a0:	3401      	adds	r4, #1
 80117a2:	0006      	movs	r6, r0
 80117a4:	000d      	movs	r5, r1
 80117a6:	e7df      	b.n	8011768 <__kernel_rem_pio2+0x5e8>
 80117a8:	9b02      	ldr	r3, [sp, #8]
 80117aa:	68ae      	ldr	r6, [r5, #8]
 80117ac:	68ef      	ldr	r7, [r5, #12]
 80117ae:	3b01      	subs	r3, #1
 80117b0:	9302      	str	r3, [sp, #8]
 80117b2:	682a      	ldr	r2, [r5, #0]
 80117b4:	686b      	ldr	r3, [r5, #4]
 80117b6:	9204      	str	r2, [sp, #16]
 80117b8:	9305      	str	r3, [sp, #20]
 80117ba:	9804      	ldr	r0, [sp, #16]
 80117bc:	9905      	ldr	r1, [sp, #20]
 80117be:	0032      	movs	r2, r6
 80117c0:	003b      	movs	r3, r7
 80117c2:	f7ef fd6d 	bl	80012a0 <__aeabi_dadd>
 80117c6:	0002      	movs	r2, r0
 80117c8:	000b      	movs	r3, r1
 80117ca:	9008      	str	r0, [sp, #32]
 80117cc:	9109      	str	r1, [sp, #36]	; 0x24
 80117ce:	9804      	ldr	r0, [sp, #16]
 80117d0:	9905      	ldr	r1, [sp, #20]
 80117d2:	f7f0 ff41 	bl	8002658 <__aeabi_dsub>
 80117d6:	0032      	movs	r2, r6
 80117d8:	003b      	movs	r3, r7
 80117da:	f7ef fd61 	bl	80012a0 <__aeabi_dadd>
 80117de:	9a08      	ldr	r2, [sp, #32]
 80117e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117e2:	60a8      	str	r0, [r5, #8]
 80117e4:	60e9      	str	r1, [r5, #12]
 80117e6:	602a      	str	r2, [r5, #0]
 80117e8:	606b      	str	r3, [r5, #4]
 80117ea:	e754      	b.n	8011696 <__kernel_rem_pio2+0x516>
 80117ec:	6826      	ldr	r6, [r4, #0]
 80117ee:	6867      	ldr	r7, [r4, #4]
 80117f0:	68a2      	ldr	r2, [r4, #8]
 80117f2:	68e3      	ldr	r3, [r4, #12]
 80117f4:	0030      	movs	r0, r6
 80117f6:	0039      	movs	r1, r7
 80117f8:	9202      	str	r2, [sp, #8]
 80117fa:	9303      	str	r3, [sp, #12]
 80117fc:	f7ef fd50 	bl	80012a0 <__aeabi_dadd>
 8011800:	0002      	movs	r2, r0
 8011802:	000b      	movs	r3, r1
 8011804:	9004      	str	r0, [sp, #16]
 8011806:	9105      	str	r1, [sp, #20]
 8011808:	0030      	movs	r0, r6
 801180a:	0039      	movs	r1, r7
 801180c:	f7f0 ff24 	bl	8002658 <__aeabi_dsub>
 8011810:	9a02      	ldr	r2, [sp, #8]
 8011812:	9b03      	ldr	r3, [sp, #12]
 8011814:	f7ef fd44 	bl	80012a0 <__aeabi_dadd>
 8011818:	9a04      	ldr	r2, [sp, #16]
 801181a:	9b05      	ldr	r3, [sp, #20]
 801181c:	60a0      	str	r0, [r4, #8]
 801181e:	60e1      	str	r1, [r4, #12]
 8011820:	6022      	str	r2, [r4, #0]
 8011822:	6063      	str	r3, [r4, #4]
 8011824:	3d01      	subs	r5, #1
 8011826:	e73c      	b.n	80116a2 <__kernel_rem_pio2+0x522>
 8011828:	9b00      	ldr	r3, [sp, #0]
 801182a:	aa4e      	add	r2, sp, #312	; 0x138
 801182c:	00db      	lsls	r3, r3, #3
 801182e:	18d3      	adds	r3, r2, r3
 8011830:	0020      	movs	r0, r4
 8011832:	681a      	ldr	r2, [r3, #0]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	f7ef fd33 	bl	80012a0 <__aeabi_dadd>
 801183a:	9b00      	ldr	r3, [sp, #0]
 801183c:	0004      	movs	r4, r0
 801183e:	3b01      	subs	r3, #1
 8011840:	9300      	str	r3, [sp, #0]
 8011842:	e734      	b.n	80116ae <__kernel_rem_pio2+0x52e>
 8011844:	9b07      	ldr	r3, [sp, #28]
 8011846:	9a07      	ldr	r2, [sp, #28]
 8011848:	601f      	str	r7, [r3, #0]
 801184a:	2380      	movs	r3, #128	; 0x80
 801184c:	061b      	lsls	r3, r3, #24
 801184e:	18f6      	adds	r6, r6, r3
 8011850:	18c0      	adds	r0, r0, r3
 8011852:	18c9      	adds	r1, r1, r3
 8011854:	6056      	str	r6, [r2, #4]
 8011856:	6095      	str	r5, [r2, #8]
 8011858:	60d0      	str	r0, [r2, #12]
 801185a:	6114      	str	r4, [r2, #16]
 801185c:	6151      	str	r1, [r2, #20]
 801185e:	e708      	b.n	8011672 <__kernel_rem_pio2+0x4f2>
 8011860:	41700000 	.word	0x41700000
 8011864:	3e700000 	.word	0x3e700000
 8011868:	08012800 	.word	0x08012800

0801186c <__kernel_sin>:
 801186c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801186e:	b089      	sub	sp, #36	; 0x24
 8011870:	9202      	str	r2, [sp, #8]
 8011872:	9303      	str	r3, [sp, #12]
 8011874:	22f9      	movs	r2, #249	; 0xf9
 8011876:	004b      	lsls	r3, r1, #1
 8011878:	0007      	movs	r7, r0
 801187a:	000e      	movs	r6, r1
 801187c:	085b      	lsrs	r3, r3, #1
 801187e:	0592      	lsls	r2, r2, #22
 8011880:	4293      	cmp	r3, r2
 8011882:	da03      	bge.n	801188c <__kernel_sin+0x20>
 8011884:	f7f1 fa98 	bl	8002db8 <__aeabi_d2iz>
 8011888:	2800      	cmp	r0, #0
 801188a:	d04c      	beq.n	8011926 <__kernel_sin+0xba>
 801188c:	003a      	movs	r2, r7
 801188e:	0033      	movs	r3, r6
 8011890:	0038      	movs	r0, r7
 8011892:	0031      	movs	r1, r6
 8011894:	f7f0 fc74 	bl	8002180 <__aeabi_dmul>
 8011898:	0004      	movs	r4, r0
 801189a:	000d      	movs	r5, r1
 801189c:	0002      	movs	r2, r0
 801189e:	000b      	movs	r3, r1
 80118a0:	0038      	movs	r0, r7
 80118a2:	0031      	movs	r1, r6
 80118a4:	f7f0 fc6c 	bl	8002180 <__aeabi_dmul>
 80118a8:	4a39      	ldr	r2, [pc, #228]	; (8011990 <__kernel_sin+0x124>)
 80118aa:	9000      	str	r0, [sp, #0]
 80118ac:	9101      	str	r1, [sp, #4]
 80118ae:	4b39      	ldr	r3, [pc, #228]	; (8011994 <__kernel_sin+0x128>)
 80118b0:	0020      	movs	r0, r4
 80118b2:	0029      	movs	r1, r5
 80118b4:	f7f0 fc64 	bl	8002180 <__aeabi_dmul>
 80118b8:	4a37      	ldr	r2, [pc, #220]	; (8011998 <__kernel_sin+0x12c>)
 80118ba:	4b38      	ldr	r3, [pc, #224]	; (801199c <__kernel_sin+0x130>)
 80118bc:	f7f0 fecc 	bl	8002658 <__aeabi_dsub>
 80118c0:	0022      	movs	r2, r4
 80118c2:	002b      	movs	r3, r5
 80118c4:	f7f0 fc5c 	bl	8002180 <__aeabi_dmul>
 80118c8:	4a35      	ldr	r2, [pc, #212]	; (80119a0 <__kernel_sin+0x134>)
 80118ca:	4b36      	ldr	r3, [pc, #216]	; (80119a4 <__kernel_sin+0x138>)
 80118cc:	f7ef fce8 	bl	80012a0 <__aeabi_dadd>
 80118d0:	0022      	movs	r2, r4
 80118d2:	002b      	movs	r3, r5
 80118d4:	f7f0 fc54 	bl	8002180 <__aeabi_dmul>
 80118d8:	4a33      	ldr	r2, [pc, #204]	; (80119a8 <__kernel_sin+0x13c>)
 80118da:	4b34      	ldr	r3, [pc, #208]	; (80119ac <__kernel_sin+0x140>)
 80118dc:	f7f0 febc 	bl	8002658 <__aeabi_dsub>
 80118e0:	0022      	movs	r2, r4
 80118e2:	002b      	movs	r3, r5
 80118e4:	f7f0 fc4c 	bl	8002180 <__aeabi_dmul>
 80118e8:	4b31      	ldr	r3, [pc, #196]	; (80119b0 <__kernel_sin+0x144>)
 80118ea:	4a32      	ldr	r2, [pc, #200]	; (80119b4 <__kernel_sin+0x148>)
 80118ec:	f7ef fcd8 	bl	80012a0 <__aeabi_dadd>
 80118f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118f2:	9004      	str	r0, [sp, #16]
 80118f4:	9105      	str	r1, [sp, #20]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d119      	bne.n	801192e <__kernel_sin+0xc2>
 80118fa:	0002      	movs	r2, r0
 80118fc:	000b      	movs	r3, r1
 80118fe:	0020      	movs	r0, r4
 8011900:	0029      	movs	r1, r5
 8011902:	f7f0 fc3d 	bl	8002180 <__aeabi_dmul>
 8011906:	4a2c      	ldr	r2, [pc, #176]	; (80119b8 <__kernel_sin+0x14c>)
 8011908:	4b2c      	ldr	r3, [pc, #176]	; (80119bc <__kernel_sin+0x150>)
 801190a:	f7f0 fea5 	bl	8002658 <__aeabi_dsub>
 801190e:	9a00      	ldr	r2, [sp, #0]
 8011910:	9b01      	ldr	r3, [sp, #4]
 8011912:	f7f0 fc35 	bl	8002180 <__aeabi_dmul>
 8011916:	0002      	movs	r2, r0
 8011918:	000b      	movs	r3, r1
 801191a:	0038      	movs	r0, r7
 801191c:	0031      	movs	r1, r6
 801191e:	f7ef fcbf 	bl	80012a0 <__aeabi_dadd>
 8011922:	0007      	movs	r7, r0
 8011924:	000e      	movs	r6, r1
 8011926:	0038      	movs	r0, r7
 8011928:	0031      	movs	r1, r6
 801192a:	b009      	add	sp, #36	; 0x24
 801192c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801192e:	2200      	movs	r2, #0
 8011930:	9802      	ldr	r0, [sp, #8]
 8011932:	9903      	ldr	r1, [sp, #12]
 8011934:	4b22      	ldr	r3, [pc, #136]	; (80119c0 <__kernel_sin+0x154>)
 8011936:	f7f0 fc23 	bl	8002180 <__aeabi_dmul>
 801193a:	9a04      	ldr	r2, [sp, #16]
 801193c:	9b05      	ldr	r3, [sp, #20]
 801193e:	9006      	str	r0, [sp, #24]
 8011940:	9107      	str	r1, [sp, #28]
 8011942:	9800      	ldr	r0, [sp, #0]
 8011944:	9901      	ldr	r1, [sp, #4]
 8011946:	f7f0 fc1b 	bl	8002180 <__aeabi_dmul>
 801194a:	0002      	movs	r2, r0
 801194c:	000b      	movs	r3, r1
 801194e:	9806      	ldr	r0, [sp, #24]
 8011950:	9907      	ldr	r1, [sp, #28]
 8011952:	f7f0 fe81 	bl	8002658 <__aeabi_dsub>
 8011956:	0022      	movs	r2, r4
 8011958:	002b      	movs	r3, r5
 801195a:	f7f0 fc11 	bl	8002180 <__aeabi_dmul>
 801195e:	9a02      	ldr	r2, [sp, #8]
 8011960:	9b03      	ldr	r3, [sp, #12]
 8011962:	f7f0 fe79 	bl	8002658 <__aeabi_dsub>
 8011966:	4a14      	ldr	r2, [pc, #80]	; (80119b8 <__kernel_sin+0x14c>)
 8011968:	0004      	movs	r4, r0
 801196a:	000d      	movs	r5, r1
 801196c:	9800      	ldr	r0, [sp, #0]
 801196e:	9901      	ldr	r1, [sp, #4]
 8011970:	4b12      	ldr	r3, [pc, #72]	; (80119bc <__kernel_sin+0x150>)
 8011972:	f7f0 fc05 	bl	8002180 <__aeabi_dmul>
 8011976:	0002      	movs	r2, r0
 8011978:	000b      	movs	r3, r1
 801197a:	0020      	movs	r0, r4
 801197c:	0029      	movs	r1, r5
 801197e:	f7ef fc8f 	bl	80012a0 <__aeabi_dadd>
 8011982:	0002      	movs	r2, r0
 8011984:	000b      	movs	r3, r1
 8011986:	0038      	movs	r0, r7
 8011988:	0031      	movs	r1, r6
 801198a:	f7f0 fe65 	bl	8002658 <__aeabi_dsub>
 801198e:	e7c8      	b.n	8011922 <__kernel_sin+0xb6>
 8011990:	5acfd57c 	.word	0x5acfd57c
 8011994:	3de5d93a 	.word	0x3de5d93a
 8011998:	8a2b9ceb 	.word	0x8a2b9ceb
 801199c:	3e5ae5e6 	.word	0x3e5ae5e6
 80119a0:	57b1fe7d 	.word	0x57b1fe7d
 80119a4:	3ec71de3 	.word	0x3ec71de3
 80119a8:	19c161d5 	.word	0x19c161d5
 80119ac:	3f2a01a0 	.word	0x3f2a01a0
 80119b0:	3f811111 	.word	0x3f811111
 80119b4:	1110f8a6 	.word	0x1110f8a6
 80119b8:	55555549 	.word	0x55555549
 80119bc:	3fc55555 	.word	0x3fc55555
 80119c0:	3fe00000 	.word	0x3fe00000

080119c4 <finite>:
 80119c4:	4b02      	ldr	r3, [pc, #8]	; (80119d0 <finite+0xc>)
 80119c6:	0048      	lsls	r0, r1, #1
 80119c8:	0840      	lsrs	r0, r0, #1
 80119ca:	18c0      	adds	r0, r0, r3
 80119cc:	0fc0      	lsrs	r0, r0, #31
 80119ce:	4770      	bx	lr
 80119d0:	80100000 	.word	0x80100000

080119d4 <floor>:
 80119d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119d6:	004b      	lsls	r3, r1, #1
 80119d8:	4a3d      	ldr	r2, [pc, #244]	; (8011ad0 <floor+0xfc>)
 80119da:	0d5b      	lsrs	r3, r3, #21
 80119dc:	189f      	adds	r7, r3, r2
 80119de:	4684      	mov	ip, r0
 80119e0:	000e      	movs	r6, r1
 80119e2:	000d      	movs	r5, r1
 80119e4:	0004      	movs	r4, r0
 80119e6:	9001      	str	r0, [sp, #4]
 80119e8:	2f13      	cmp	r7, #19
 80119ea:	dc34      	bgt.n	8011a56 <floor+0x82>
 80119ec:	2f00      	cmp	r7, #0
 80119ee:	da16      	bge.n	8011a1e <floor+0x4a>
 80119f0:	4a38      	ldr	r2, [pc, #224]	; (8011ad4 <floor+0x100>)
 80119f2:	4b39      	ldr	r3, [pc, #228]	; (8011ad8 <floor+0x104>)
 80119f4:	4660      	mov	r0, ip
 80119f6:	0031      	movs	r1, r6
 80119f8:	f7ef fc52 	bl	80012a0 <__aeabi_dadd>
 80119fc:	2200      	movs	r2, #0
 80119fe:	2300      	movs	r3, #0
 8011a00:	f7ee fd3a 	bl	8000478 <__aeabi_dcmpgt>
 8011a04:	2800      	cmp	r0, #0
 8011a06:	d007      	beq.n	8011a18 <floor+0x44>
 8011a08:	2e00      	cmp	r6, #0
 8011a0a:	da5d      	bge.n	8011ac8 <floor+0xf4>
 8011a0c:	0073      	lsls	r3, r6, #1
 8011a0e:	085b      	lsrs	r3, r3, #1
 8011a10:	431c      	orrs	r4, r3
 8011a12:	d001      	beq.n	8011a18 <floor+0x44>
 8011a14:	2400      	movs	r4, #0
 8011a16:	4d31      	ldr	r5, [pc, #196]	; (8011adc <floor+0x108>)
 8011a18:	46a4      	mov	ip, r4
 8011a1a:	002e      	movs	r6, r5
 8011a1c:	e029      	b.n	8011a72 <floor+0x9e>
 8011a1e:	4b30      	ldr	r3, [pc, #192]	; (8011ae0 <floor+0x10c>)
 8011a20:	413b      	asrs	r3, r7
 8011a22:	9300      	str	r3, [sp, #0]
 8011a24:	400b      	ands	r3, r1
 8011a26:	4303      	orrs	r3, r0
 8011a28:	d023      	beq.n	8011a72 <floor+0x9e>
 8011a2a:	4a2a      	ldr	r2, [pc, #168]	; (8011ad4 <floor+0x100>)
 8011a2c:	4b2a      	ldr	r3, [pc, #168]	; (8011ad8 <floor+0x104>)
 8011a2e:	4660      	mov	r0, ip
 8011a30:	0031      	movs	r1, r6
 8011a32:	f7ef fc35 	bl	80012a0 <__aeabi_dadd>
 8011a36:	2200      	movs	r2, #0
 8011a38:	2300      	movs	r3, #0
 8011a3a:	f7ee fd1d 	bl	8000478 <__aeabi_dcmpgt>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d0ea      	beq.n	8011a18 <floor+0x44>
 8011a42:	2e00      	cmp	r6, #0
 8011a44:	da03      	bge.n	8011a4e <floor+0x7a>
 8011a46:	2380      	movs	r3, #128	; 0x80
 8011a48:	035b      	lsls	r3, r3, #13
 8011a4a:	413b      	asrs	r3, r7
 8011a4c:	18f5      	adds	r5, r6, r3
 8011a4e:	9b00      	ldr	r3, [sp, #0]
 8011a50:	2400      	movs	r4, #0
 8011a52:	439d      	bics	r5, r3
 8011a54:	e7e0      	b.n	8011a18 <floor+0x44>
 8011a56:	2f33      	cmp	r7, #51	; 0x33
 8011a58:	dd0f      	ble.n	8011a7a <floor+0xa6>
 8011a5a:	2380      	movs	r3, #128	; 0x80
 8011a5c:	00db      	lsls	r3, r3, #3
 8011a5e:	429f      	cmp	r7, r3
 8011a60:	d107      	bne.n	8011a72 <floor+0x9e>
 8011a62:	0002      	movs	r2, r0
 8011a64:	000b      	movs	r3, r1
 8011a66:	4660      	mov	r0, ip
 8011a68:	0031      	movs	r1, r6
 8011a6a:	f7ef fc19 	bl	80012a0 <__aeabi_dadd>
 8011a6e:	4684      	mov	ip, r0
 8011a70:	000e      	movs	r6, r1
 8011a72:	4660      	mov	r0, ip
 8011a74:	0031      	movs	r1, r6
 8011a76:	b003      	add	sp, #12
 8011a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a7a:	4a1a      	ldr	r2, [pc, #104]	; (8011ae4 <floor+0x110>)
 8011a7c:	189b      	adds	r3, r3, r2
 8011a7e:	2201      	movs	r2, #1
 8011a80:	4252      	negs	r2, r2
 8011a82:	40da      	lsrs	r2, r3
 8011a84:	9200      	str	r2, [sp, #0]
 8011a86:	4210      	tst	r0, r2
 8011a88:	d0f3      	beq.n	8011a72 <floor+0x9e>
 8011a8a:	4a12      	ldr	r2, [pc, #72]	; (8011ad4 <floor+0x100>)
 8011a8c:	4b12      	ldr	r3, [pc, #72]	; (8011ad8 <floor+0x104>)
 8011a8e:	4660      	mov	r0, ip
 8011a90:	0031      	movs	r1, r6
 8011a92:	f7ef fc05 	bl	80012a0 <__aeabi_dadd>
 8011a96:	2200      	movs	r2, #0
 8011a98:	2300      	movs	r3, #0
 8011a9a:	f7ee fced 	bl	8000478 <__aeabi_dcmpgt>
 8011a9e:	2800      	cmp	r0, #0
 8011aa0:	d0ba      	beq.n	8011a18 <floor+0x44>
 8011aa2:	2e00      	cmp	r6, #0
 8011aa4:	da02      	bge.n	8011aac <floor+0xd8>
 8011aa6:	2f14      	cmp	r7, #20
 8011aa8:	d103      	bne.n	8011ab2 <floor+0xde>
 8011aaa:	3501      	adds	r5, #1
 8011aac:	9b00      	ldr	r3, [sp, #0]
 8011aae:	439c      	bics	r4, r3
 8011ab0:	e7b2      	b.n	8011a18 <floor+0x44>
 8011ab2:	2334      	movs	r3, #52	; 0x34
 8011ab4:	1bdf      	subs	r7, r3, r7
 8011ab6:	3b33      	subs	r3, #51	; 0x33
 8011ab8:	40bb      	lsls	r3, r7
 8011aba:	18e4      	adds	r4, r4, r3
 8011abc:	9b01      	ldr	r3, [sp, #4]
 8011abe:	429c      	cmp	r4, r3
 8011ac0:	419b      	sbcs	r3, r3
 8011ac2:	425b      	negs	r3, r3
 8011ac4:	18f5      	adds	r5, r6, r3
 8011ac6:	e7f1      	b.n	8011aac <floor+0xd8>
 8011ac8:	2400      	movs	r4, #0
 8011aca:	0025      	movs	r5, r4
 8011acc:	e7a4      	b.n	8011a18 <floor+0x44>
 8011ace:	46c0      	nop			; (mov r8, r8)
 8011ad0:	fffffc01 	.word	0xfffffc01
 8011ad4:	8800759c 	.word	0x8800759c
 8011ad8:	7e37e43c 	.word	0x7e37e43c
 8011adc:	bff00000 	.word	0xbff00000
 8011ae0:	000fffff 	.word	0x000fffff
 8011ae4:	fffffbed 	.word	0xfffffbed

08011ae8 <nan>:
 8011ae8:	2000      	movs	r0, #0
 8011aea:	4901      	ldr	r1, [pc, #4]	; (8011af0 <nan+0x8>)
 8011aec:	4770      	bx	lr
 8011aee:	46c0      	nop			; (mov r8, r8)
 8011af0:	7ff80000 	.word	0x7ff80000

08011af4 <rint>:
 8011af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011af6:	004a      	lsls	r2, r1, #1
 8011af8:	4e3e      	ldr	r6, [pc, #248]	; (8011bf4 <rint+0x100>)
 8011afa:	0d52      	lsrs	r2, r2, #21
 8011afc:	b085      	sub	sp, #20
 8011afe:	1996      	adds	r6, r2, r6
 8011b00:	000d      	movs	r5, r1
 8011b02:	0003      	movs	r3, r0
 8011b04:	9101      	str	r1, [sp, #4]
 8011b06:	0fcc      	lsrs	r4, r1, #31
 8011b08:	2e13      	cmp	r6, #19
 8011b0a:	dc57      	bgt.n	8011bbc <rint+0xc8>
 8011b0c:	2e00      	cmp	r6, #0
 8011b0e:	da2a      	bge.n	8011b66 <rint+0x72>
 8011b10:	004a      	lsls	r2, r1, #1
 8011b12:	0852      	lsrs	r2, r2, #1
 8011b14:	4302      	orrs	r2, r0
 8011b16:	d024      	beq.n	8011b62 <rint+0x6e>
 8011b18:	030a      	lsls	r2, r1, #12
 8011b1a:	0b12      	lsrs	r2, r2, #12
 8011b1c:	4302      	orrs	r2, r0
 8011b1e:	4253      	negs	r3, r2
 8011b20:	4313      	orrs	r3, r2
 8011b22:	2280      	movs	r2, #128	; 0x80
 8011b24:	0c4d      	lsrs	r5, r1, #17
 8011b26:	0312      	lsls	r2, r2, #12
 8011b28:	0b1b      	lsrs	r3, r3, #12
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	046d      	lsls	r5, r5, #17
 8011b2e:	432b      	orrs	r3, r5
 8011b30:	0019      	movs	r1, r3
 8011b32:	4b31      	ldr	r3, [pc, #196]	; (8011bf8 <rint+0x104>)
 8011b34:	00e2      	lsls	r2, r4, #3
 8011b36:	189b      	adds	r3, r3, r2
 8011b38:	681e      	ldr	r6, [r3, #0]
 8011b3a:	685f      	ldr	r7, [r3, #4]
 8011b3c:	0002      	movs	r2, r0
 8011b3e:	000b      	movs	r3, r1
 8011b40:	0030      	movs	r0, r6
 8011b42:	0039      	movs	r1, r7
 8011b44:	f7ef fbac 	bl	80012a0 <__aeabi_dadd>
 8011b48:	9002      	str	r0, [sp, #8]
 8011b4a:	9103      	str	r1, [sp, #12]
 8011b4c:	9802      	ldr	r0, [sp, #8]
 8011b4e:	9903      	ldr	r1, [sp, #12]
 8011b50:	003b      	movs	r3, r7
 8011b52:	0032      	movs	r2, r6
 8011b54:	f7f0 fd80 	bl	8002658 <__aeabi_dsub>
 8011b58:	004b      	lsls	r3, r1, #1
 8011b5a:	085b      	lsrs	r3, r3, #1
 8011b5c:	07e4      	lsls	r4, r4, #31
 8011b5e:	4323      	orrs	r3, r4
 8011b60:	0019      	movs	r1, r3
 8011b62:	b005      	add	sp, #20
 8011b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b66:	4a25      	ldr	r2, [pc, #148]	; (8011bfc <rint+0x108>)
 8011b68:	4132      	asrs	r2, r6
 8011b6a:	0017      	movs	r7, r2
 8011b6c:	400f      	ands	r7, r1
 8011b6e:	4307      	orrs	r7, r0
 8011b70:	d0f7      	beq.n	8011b62 <rint+0x6e>
 8011b72:	0852      	lsrs	r2, r2, #1
 8011b74:	0011      	movs	r1, r2
 8011b76:	4029      	ands	r1, r5
 8011b78:	430b      	orrs	r3, r1
 8011b7a:	d00a      	beq.n	8011b92 <rint+0x9e>
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	2e13      	cmp	r6, #19
 8011b80:	d101      	bne.n	8011b86 <rint+0x92>
 8011b82:	2380      	movs	r3, #128	; 0x80
 8011b84:	061b      	lsls	r3, r3, #24
 8011b86:	2780      	movs	r7, #128	; 0x80
 8011b88:	02ff      	lsls	r7, r7, #11
 8011b8a:	4137      	asrs	r7, r6
 8011b8c:	4395      	bics	r5, r2
 8011b8e:	432f      	orrs	r7, r5
 8011b90:	9701      	str	r7, [sp, #4]
 8011b92:	9901      	ldr	r1, [sp, #4]
 8011b94:	001a      	movs	r2, r3
 8011b96:	000b      	movs	r3, r1
 8011b98:	4917      	ldr	r1, [pc, #92]	; (8011bf8 <rint+0x104>)
 8011b9a:	00e4      	lsls	r4, r4, #3
 8011b9c:	190c      	adds	r4, r1, r4
 8011b9e:	6865      	ldr	r5, [r4, #4]
 8011ba0:	6824      	ldr	r4, [r4, #0]
 8011ba2:	0020      	movs	r0, r4
 8011ba4:	0029      	movs	r1, r5
 8011ba6:	f7ef fb7b 	bl	80012a0 <__aeabi_dadd>
 8011baa:	9002      	str	r0, [sp, #8]
 8011bac:	9103      	str	r1, [sp, #12]
 8011bae:	9802      	ldr	r0, [sp, #8]
 8011bb0:	9903      	ldr	r1, [sp, #12]
 8011bb2:	0022      	movs	r2, r4
 8011bb4:	002b      	movs	r3, r5
 8011bb6:	f7f0 fd4f 	bl	8002658 <__aeabi_dsub>
 8011bba:	e7d2      	b.n	8011b62 <rint+0x6e>
 8011bbc:	2e33      	cmp	r6, #51	; 0x33
 8011bbe:	dd08      	ble.n	8011bd2 <rint+0xde>
 8011bc0:	2380      	movs	r3, #128	; 0x80
 8011bc2:	00db      	lsls	r3, r3, #3
 8011bc4:	429e      	cmp	r6, r3
 8011bc6:	d1cc      	bne.n	8011b62 <rint+0x6e>
 8011bc8:	0002      	movs	r2, r0
 8011bca:	000b      	movs	r3, r1
 8011bcc:	f7ef fb68 	bl	80012a0 <__aeabi_dadd>
 8011bd0:	e7c7      	b.n	8011b62 <rint+0x6e>
 8011bd2:	2601      	movs	r6, #1
 8011bd4:	4d0a      	ldr	r5, [pc, #40]	; (8011c00 <rint+0x10c>)
 8011bd6:	4276      	negs	r6, r6
 8011bd8:	1952      	adds	r2, r2, r5
 8011bda:	40d6      	lsrs	r6, r2
 8011bdc:	4206      	tst	r6, r0
 8011bde:	d0c0      	beq.n	8011b62 <rint+0x6e>
 8011be0:	0876      	lsrs	r6, r6, #1
 8011be2:	4206      	tst	r6, r0
 8011be4:	d0d5      	beq.n	8011b92 <rint+0x9e>
 8011be6:	2180      	movs	r1, #128	; 0x80
 8011be8:	05c9      	lsls	r1, r1, #23
 8011bea:	4111      	asrs	r1, r2
 8011bec:	43b3      	bics	r3, r6
 8011bee:	430b      	orrs	r3, r1
 8011bf0:	e7cf      	b.n	8011b92 <rint+0x9e>
 8011bf2:	46c0      	nop			; (mov r8, r8)
 8011bf4:	fffffc01 	.word	0xfffffc01
 8011bf8:	08012850 	.word	0x08012850
 8011bfc:	000fffff 	.word	0x000fffff
 8011c00:	fffffbed 	.word	0xfffffbed

08011c04 <scalbn>:
 8011c04:	004b      	lsls	r3, r1, #1
 8011c06:	b570      	push	{r4, r5, r6, lr}
 8011c08:	0d5b      	lsrs	r3, r3, #21
 8011c0a:	0014      	movs	r4, r2
 8011c0c:	000a      	movs	r2, r1
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d10d      	bne.n	8011c2e <scalbn+0x2a>
 8011c12:	004b      	lsls	r3, r1, #1
 8011c14:	085b      	lsrs	r3, r3, #1
 8011c16:	4303      	orrs	r3, r0
 8011c18:	d010      	beq.n	8011c3c <scalbn+0x38>
 8011c1a:	4b27      	ldr	r3, [pc, #156]	; (8011cb8 <scalbn+0xb4>)
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	f7f0 faaf 	bl	8002180 <__aeabi_dmul>
 8011c22:	4b26      	ldr	r3, [pc, #152]	; (8011cbc <scalbn+0xb8>)
 8011c24:	429c      	cmp	r4, r3
 8011c26:	da0a      	bge.n	8011c3e <scalbn+0x3a>
 8011c28:	4a25      	ldr	r2, [pc, #148]	; (8011cc0 <scalbn+0xbc>)
 8011c2a:	4b26      	ldr	r3, [pc, #152]	; (8011cc4 <scalbn+0xc0>)
 8011c2c:	e019      	b.n	8011c62 <scalbn+0x5e>
 8011c2e:	4d26      	ldr	r5, [pc, #152]	; (8011cc8 <scalbn+0xc4>)
 8011c30:	42ab      	cmp	r3, r5
 8011c32:	d108      	bne.n	8011c46 <scalbn+0x42>
 8011c34:	0002      	movs	r2, r0
 8011c36:	000b      	movs	r3, r1
 8011c38:	f7ef fb32 	bl	80012a0 <__aeabi_dadd>
 8011c3c:	bd70      	pop	{r4, r5, r6, pc}
 8011c3e:	000a      	movs	r2, r1
 8011c40:	004b      	lsls	r3, r1, #1
 8011c42:	0d5b      	lsrs	r3, r3, #21
 8011c44:	3b36      	subs	r3, #54	; 0x36
 8011c46:	4d21      	ldr	r5, [pc, #132]	; (8011ccc <scalbn+0xc8>)
 8011c48:	18e3      	adds	r3, r4, r3
 8011c4a:	42ab      	cmp	r3, r5
 8011c4c:	dd0c      	ble.n	8011c68 <scalbn+0x64>
 8011c4e:	4c20      	ldr	r4, [pc, #128]	; (8011cd0 <scalbn+0xcc>)
 8011c50:	4d20      	ldr	r5, [pc, #128]	; (8011cd4 <scalbn+0xd0>)
 8011c52:	2900      	cmp	r1, #0
 8011c54:	da01      	bge.n	8011c5a <scalbn+0x56>
 8011c56:	4c1e      	ldr	r4, [pc, #120]	; (8011cd0 <scalbn+0xcc>)
 8011c58:	4d1f      	ldr	r5, [pc, #124]	; (8011cd8 <scalbn+0xd4>)
 8011c5a:	0020      	movs	r0, r4
 8011c5c:	0029      	movs	r1, r5
 8011c5e:	4a1c      	ldr	r2, [pc, #112]	; (8011cd0 <scalbn+0xcc>)
 8011c60:	4b1c      	ldr	r3, [pc, #112]	; (8011cd4 <scalbn+0xd0>)
 8011c62:	f7f0 fa8d 	bl	8002180 <__aeabi_dmul>
 8011c66:	e7e9      	b.n	8011c3c <scalbn+0x38>
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	dd05      	ble.n	8011c78 <scalbn+0x74>
 8011c6c:	4c1b      	ldr	r4, [pc, #108]	; (8011cdc <scalbn+0xd8>)
 8011c6e:	051b      	lsls	r3, r3, #20
 8011c70:	4022      	ands	r2, r4
 8011c72:	431a      	orrs	r2, r3
 8011c74:	0011      	movs	r1, r2
 8011c76:	e7e1      	b.n	8011c3c <scalbn+0x38>
 8011c78:	001d      	movs	r5, r3
 8011c7a:	3535      	adds	r5, #53	; 0x35
 8011c7c:	da13      	bge.n	8011ca6 <scalbn+0xa2>
 8011c7e:	4a18      	ldr	r2, [pc, #96]	; (8011ce0 <scalbn+0xdc>)
 8011c80:	0fcb      	lsrs	r3, r1, #31
 8011c82:	4294      	cmp	r4, r2
 8011c84:	dd08      	ble.n	8011c98 <scalbn+0x94>
 8011c86:	4812      	ldr	r0, [pc, #72]	; (8011cd0 <scalbn+0xcc>)
 8011c88:	4912      	ldr	r1, [pc, #72]	; (8011cd4 <scalbn+0xd0>)
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d001      	beq.n	8011c92 <scalbn+0x8e>
 8011c8e:	4810      	ldr	r0, [pc, #64]	; (8011cd0 <scalbn+0xcc>)
 8011c90:	4911      	ldr	r1, [pc, #68]	; (8011cd8 <scalbn+0xd4>)
 8011c92:	4a0f      	ldr	r2, [pc, #60]	; (8011cd0 <scalbn+0xcc>)
 8011c94:	4b0f      	ldr	r3, [pc, #60]	; (8011cd4 <scalbn+0xd0>)
 8011c96:	e7e4      	b.n	8011c62 <scalbn+0x5e>
 8011c98:	4809      	ldr	r0, [pc, #36]	; (8011cc0 <scalbn+0xbc>)
 8011c9a:	490a      	ldr	r1, [pc, #40]	; (8011cc4 <scalbn+0xc0>)
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d0c3      	beq.n	8011c28 <scalbn+0x24>
 8011ca0:	4807      	ldr	r0, [pc, #28]	; (8011cc0 <scalbn+0xbc>)
 8011ca2:	4910      	ldr	r1, [pc, #64]	; (8011ce4 <scalbn+0xe0>)
 8011ca4:	e7c0      	b.n	8011c28 <scalbn+0x24>
 8011ca6:	4c0d      	ldr	r4, [pc, #52]	; (8011cdc <scalbn+0xd8>)
 8011ca8:	3336      	adds	r3, #54	; 0x36
 8011caa:	4022      	ands	r2, r4
 8011cac:	051b      	lsls	r3, r3, #20
 8011cae:	4313      	orrs	r3, r2
 8011cb0:	0019      	movs	r1, r3
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	4b0c      	ldr	r3, [pc, #48]	; (8011ce8 <scalbn+0xe4>)
 8011cb6:	e7d4      	b.n	8011c62 <scalbn+0x5e>
 8011cb8:	43500000 	.word	0x43500000
 8011cbc:	ffff3cb0 	.word	0xffff3cb0
 8011cc0:	c2f8f359 	.word	0xc2f8f359
 8011cc4:	01a56e1f 	.word	0x01a56e1f
 8011cc8:	000007ff 	.word	0x000007ff
 8011ccc:	000007fe 	.word	0x000007fe
 8011cd0:	8800759c 	.word	0x8800759c
 8011cd4:	7e37e43c 	.word	0x7e37e43c
 8011cd8:	fe37e43c 	.word	0xfe37e43c
 8011cdc:	800fffff 	.word	0x800fffff
 8011ce0:	0000c350 	.word	0x0000c350
 8011ce4:	81a56e1f 	.word	0x81a56e1f
 8011ce8:	3c900000 	.word	0x3c900000

08011cec <_init>:
 8011cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cee:	46c0      	nop			; (mov r8, r8)
 8011cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cf2:	bc08      	pop	{r3}
 8011cf4:	469e      	mov	lr, r3
 8011cf6:	4770      	bx	lr

08011cf8 <_fini>:
 8011cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cfa:	46c0      	nop			; (mov r8, r8)
 8011cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cfe:	bc08      	pop	{r3}
 8011d00:	469e      	mov	lr, r3
 8011d02:	4770      	bx	lr
