
Exjobb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc98  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a90  0800dd50  0800dd50  0001dd50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7e0  0800e7e0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e7e0  0800e7e0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e7e0  0800e7e0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7e0  0800e7e0  0001e7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7e4  0800e7e4  0001e7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e7e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200001e0  0800e9c8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0800e9c8  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b02c  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003028  00000000  00000000  0003b234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003f608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197f6  00000000  00000000  00040888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019304  00000000  00000000  0005a07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b6e0  00000000  00000000  00073382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ea62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005df8  00000000  00000000  0010eab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e0 	.word	0x200001e0
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800dd38 	.word	0x0800dd38

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e4 	.word	0x200001e4
 80000fc:	0800dd38 	.word	0x0800dd38

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	1c10      	adds	r0, r2, #0
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	1c19      	adds	r1, r3, #0
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fd03 	bl	8001e40 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fc4d 	bl	8001ce4 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fcf5 	bl	8001e40 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fceb 	bl	8001e40 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fc6f 	bl	8001d5c <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fc65 	bl	8001d5c <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_fadd>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	4646      	mov	r6, r8
 80004a4:	46d6      	mov	lr, sl
 80004a6:	464f      	mov	r7, r9
 80004a8:	024d      	lsls	r5, r1, #9
 80004aa:	0242      	lsls	r2, r0, #9
 80004ac:	b5c0      	push	{r6, r7, lr}
 80004ae:	0a52      	lsrs	r2, r2, #9
 80004b0:	0a6e      	lsrs	r6, r5, #9
 80004b2:	0047      	lsls	r7, r0, #1
 80004b4:	46b0      	mov	r8, r6
 80004b6:	0e3f      	lsrs	r7, r7, #24
 80004b8:	004e      	lsls	r6, r1, #1
 80004ba:	0fc4      	lsrs	r4, r0, #31
 80004bc:	00d0      	lsls	r0, r2, #3
 80004be:	4694      	mov	ip, r2
 80004c0:	003b      	movs	r3, r7
 80004c2:	4682      	mov	sl, r0
 80004c4:	0e36      	lsrs	r6, r6, #24
 80004c6:	0fc9      	lsrs	r1, r1, #31
 80004c8:	09ad      	lsrs	r5, r5, #6
 80004ca:	428c      	cmp	r4, r1
 80004cc:	d06d      	beq.n	80005aa <__aeabi_fadd+0x10a>
 80004ce:	1bb8      	subs	r0, r7, r6
 80004d0:	4681      	mov	r9, r0
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd4d      	ble.n	8000572 <__aeabi_fadd+0xd2>
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x3c>
 80004da:	e088      	b.n	80005ee <__aeabi_fadd+0x14e>
 80004dc:	2fff      	cmp	r7, #255	; 0xff
 80004de:	d05a      	beq.n	8000596 <__aeabi_fadd+0xf6>
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	04db      	lsls	r3, r3, #19
 80004e4:	431d      	orrs	r5, r3
 80004e6:	464b      	mov	r3, r9
 80004e8:	2201      	movs	r2, #1
 80004ea:	2b1b      	cmp	r3, #27
 80004ec:	dc0a      	bgt.n	8000504 <__aeabi_fadd+0x64>
 80004ee:	002b      	movs	r3, r5
 80004f0:	464a      	mov	r2, r9
 80004f2:	4649      	mov	r1, r9
 80004f4:	40d3      	lsrs	r3, r2
 80004f6:	2220      	movs	r2, #32
 80004f8:	1a52      	subs	r2, r2, r1
 80004fa:	4095      	lsls	r5, r2
 80004fc:	002a      	movs	r2, r5
 80004fe:	1e55      	subs	r5, r2, #1
 8000500:	41aa      	sbcs	r2, r5
 8000502:	431a      	orrs	r2, r3
 8000504:	4653      	mov	r3, sl
 8000506:	1a9a      	subs	r2, r3, r2
 8000508:	0153      	lsls	r3, r2, #5
 800050a:	d400      	bmi.n	800050e <__aeabi_fadd+0x6e>
 800050c:	e0b9      	b.n	8000682 <__aeabi_fadd+0x1e2>
 800050e:	0192      	lsls	r2, r2, #6
 8000510:	0996      	lsrs	r6, r2, #6
 8000512:	0030      	movs	r0, r6
 8000514:	f002 fc7c 	bl	8002e10 <__clzsi2>
 8000518:	3805      	subs	r0, #5
 800051a:	4086      	lsls	r6, r0
 800051c:	4287      	cmp	r7, r0
 800051e:	dd00      	ble.n	8000522 <__aeabi_fadd+0x82>
 8000520:	e0d4      	b.n	80006cc <__aeabi_fadd+0x22c>
 8000522:	0033      	movs	r3, r6
 8000524:	1bc7      	subs	r7, r0, r7
 8000526:	2020      	movs	r0, #32
 8000528:	3701      	adds	r7, #1
 800052a:	40fb      	lsrs	r3, r7
 800052c:	1bc7      	subs	r7, r0, r7
 800052e:	40be      	lsls	r6, r7
 8000530:	0032      	movs	r2, r6
 8000532:	1e56      	subs	r6, r2, #1
 8000534:	41b2      	sbcs	r2, r6
 8000536:	2700      	movs	r7, #0
 8000538:	431a      	orrs	r2, r3
 800053a:	0753      	lsls	r3, r2, #29
 800053c:	d004      	beq.n	8000548 <__aeabi_fadd+0xa8>
 800053e:	230f      	movs	r3, #15
 8000540:	4013      	ands	r3, r2
 8000542:	2b04      	cmp	r3, #4
 8000544:	d000      	beq.n	8000548 <__aeabi_fadd+0xa8>
 8000546:	3204      	adds	r2, #4
 8000548:	0153      	lsls	r3, r2, #5
 800054a:	d400      	bmi.n	800054e <__aeabi_fadd+0xae>
 800054c:	e09c      	b.n	8000688 <__aeabi_fadd+0x1e8>
 800054e:	1c7b      	adds	r3, r7, #1
 8000550:	2ffe      	cmp	r7, #254	; 0xfe
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0xb6>
 8000554:	e09a      	b.n	800068c <__aeabi_fadd+0x1ec>
 8000556:	0192      	lsls	r2, r2, #6
 8000558:	0a52      	lsrs	r2, r2, #9
 800055a:	4694      	mov	ip, r2
 800055c:	b2db      	uxtb	r3, r3
 800055e:	05d8      	lsls	r0, r3, #23
 8000560:	4663      	mov	r3, ip
 8000562:	07e4      	lsls	r4, r4, #31
 8000564:	4318      	orrs	r0, r3
 8000566:	4320      	orrs	r0, r4
 8000568:	bce0      	pop	{r5, r6, r7}
 800056a:	46ba      	mov	sl, r7
 800056c:	46b1      	mov	r9, r6
 800056e:	46a8      	mov	r8, r5
 8000570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000572:	2800      	cmp	r0, #0
 8000574:	d049      	beq.n	800060a <__aeabi_fadd+0x16a>
 8000576:	1bf3      	subs	r3, r6, r7
 8000578:	2f00      	cmp	r7, #0
 800057a:	d000      	beq.n	800057e <__aeabi_fadd+0xde>
 800057c:	e0b6      	b.n	80006ec <__aeabi_fadd+0x24c>
 800057e:	4652      	mov	r2, sl
 8000580:	2a00      	cmp	r2, #0
 8000582:	d060      	beq.n	8000646 <__aeabi_fadd+0x1a6>
 8000584:	3b01      	subs	r3, #1
 8000586:	2b00      	cmp	r3, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0xec>
 800058a:	e0fc      	b.n	8000786 <__aeabi_fadd+0x2e6>
 800058c:	2eff      	cmp	r6, #255	; 0xff
 800058e:	d000      	beq.n	8000592 <__aeabi_fadd+0xf2>
 8000590:	e0b4      	b.n	80006fc <__aeabi_fadd+0x25c>
 8000592:	000c      	movs	r4, r1
 8000594:	4642      	mov	r2, r8
 8000596:	2a00      	cmp	r2, #0
 8000598:	d078      	beq.n	800068c <__aeabi_fadd+0x1ec>
 800059a:	2080      	movs	r0, #128	; 0x80
 800059c:	03c0      	lsls	r0, r0, #15
 800059e:	4310      	orrs	r0, r2
 80005a0:	0242      	lsls	r2, r0, #9
 80005a2:	0a53      	lsrs	r3, r2, #9
 80005a4:	469c      	mov	ip, r3
 80005a6:	23ff      	movs	r3, #255	; 0xff
 80005a8:	e7d9      	b.n	800055e <__aeabi_fadd+0xbe>
 80005aa:	1bb9      	subs	r1, r7, r6
 80005ac:	2900      	cmp	r1, #0
 80005ae:	dd71      	ble.n	8000694 <__aeabi_fadd+0x1f4>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d03f      	beq.n	8000634 <__aeabi_fadd+0x194>
 80005b4:	2fff      	cmp	r7, #255	; 0xff
 80005b6:	d0ee      	beq.n	8000596 <__aeabi_fadd+0xf6>
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	04db      	lsls	r3, r3, #19
 80005bc:	431d      	orrs	r5, r3
 80005be:	2201      	movs	r2, #1
 80005c0:	291b      	cmp	r1, #27
 80005c2:	dc07      	bgt.n	80005d4 <__aeabi_fadd+0x134>
 80005c4:	002a      	movs	r2, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	40ca      	lsrs	r2, r1
 80005ca:	1a59      	subs	r1, r3, r1
 80005cc:	408d      	lsls	r5, r1
 80005ce:	1e6b      	subs	r3, r5, #1
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	4452      	add	r2, sl
 80005d6:	0153      	lsls	r3, r2, #5
 80005d8:	d553      	bpl.n	8000682 <__aeabi_fadd+0x1e2>
 80005da:	3701      	adds	r7, #1
 80005dc:	2fff      	cmp	r7, #255	; 0xff
 80005de:	d055      	beq.n	800068c <__aeabi_fadd+0x1ec>
 80005e0:	2301      	movs	r3, #1
 80005e2:	497b      	ldr	r1, [pc, #492]	; (80007d0 <__aeabi_fadd+0x330>)
 80005e4:	4013      	ands	r3, r2
 80005e6:	0852      	lsrs	r2, r2, #1
 80005e8:	400a      	ands	r2, r1
 80005ea:	431a      	orrs	r2, r3
 80005ec:	e7a5      	b.n	800053a <__aeabi_fadd+0x9a>
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d02c      	beq.n	800064c <__aeabi_fadd+0x1ac>
 80005f2:	2301      	movs	r3, #1
 80005f4:	425b      	negs	r3, r3
 80005f6:	469c      	mov	ip, r3
 80005f8:	44e1      	add	r9, ip
 80005fa:	464b      	mov	r3, r9
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0x162>
 8000600:	e0ad      	b.n	800075e <__aeabi_fadd+0x2be>
 8000602:	2fff      	cmp	r7, #255	; 0xff
 8000604:	d000      	beq.n	8000608 <__aeabi_fadd+0x168>
 8000606:	e76e      	b.n	80004e6 <__aeabi_fadd+0x46>
 8000608:	e7c5      	b.n	8000596 <__aeabi_fadd+0xf6>
 800060a:	20fe      	movs	r0, #254	; 0xfe
 800060c:	1c7e      	adds	r6, r7, #1
 800060e:	4230      	tst	r0, r6
 8000610:	d160      	bne.n	80006d4 <__aeabi_fadd+0x234>
 8000612:	2f00      	cmp	r7, #0
 8000614:	d000      	beq.n	8000618 <__aeabi_fadd+0x178>
 8000616:	e093      	b.n	8000740 <__aeabi_fadd+0x2a0>
 8000618:	4652      	mov	r2, sl
 800061a:	2a00      	cmp	r2, #0
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x180>
 800061e:	e0b6      	b.n	800078e <__aeabi_fadd+0x2ee>
 8000620:	2d00      	cmp	r5, #0
 8000622:	d09c      	beq.n	800055e <__aeabi_fadd+0xbe>
 8000624:	1b52      	subs	r2, r2, r5
 8000626:	0150      	lsls	r0, r2, #5
 8000628:	d400      	bmi.n	800062c <__aeabi_fadd+0x18c>
 800062a:	e0c3      	b.n	80007b4 <__aeabi_fadd+0x314>
 800062c:	4653      	mov	r3, sl
 800062e:	000c      	movs	r4, r1
 8000630:	1aea      	subs	r2, r5, r3
 8000632:	e782      	b.n	800053a <__aeabi_fadd+0x9a>
 8000634:	2d00      	cmp	r5, #0
 8000636:	d009      	beq.n	800064c <__aeabi_fadd+0x1ac>
 8000638:	3901      	subs	r1, #1
 800063a:	2900      	cmp	r1, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_fadd+0x1a0>
 800063e:	e08b      	b.n	8000758 <__aeabi_fadd+0x2b8>
 8000640:	2fff      	cmp	r7, #255	; 0xff
 8000642:	d1bc      	bne.n	80005be <__aeabi_fadd+0x11e>
 8000644:	e7a7      	b.n	8000596 <__aeabi_fadd+0xf6>
 8000646:	000c      	movs	r4, r1
 8000648:	4642      	mov	r2, r8
 800064a:	0037      	movs	r7, r6
 800064c:	2fff      	cmp	r7, #255	; 0xff
 800064e:	d0a2      	beq.n	8000596 <__aeabi_fadd+0xf6>
 8000650:	0252      	lsls	r2, r2, #9
 8000652:	0a53      	lsrs	r3, r2, #9
 8000654:	469c      	mov	ip, r3
 8000656:	b2fb      	uxtb	r3, r7
 8000658:	e781      	b.n	800055e <__aeabi_fadd+0xbe>
 800065a:	21fe      	movs	r1, #254	; 0xfe
 800065c:	3701      	adds	r7, #1
 800065e:	4239      	tst	r1, r7
 8000660:	d165      	bne.n	800072e <__aeabi_fadd+0x28e>
 8000662:	2b00      	cmp	r3, #0
 8000664:	d17e      	bne.n	8000764 <__aeabi_fadd+0x2c4>
 8000666:	2800      	cmp	r0, #0
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x1cc>
 800066a:	e0aa      	b.n	80007c2 <__aeabi_fadd+0x322>
 800066c:	2d00      	cmp	r5, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0x1d2>
 8000670:	e775      	b.n	800055e <__aeabi_fadd+0xbe>
 8000672:	002a      	movs	r2, r5
 8000674:	4452      	add	r2, sl
 8000676:	2700      	movs	r7, #0
 8000678:	0153      	lsls	r3, r2, #5
 800067a:	d502      	bpl.n	8000682 <__aeabi_fadd+0x1e2>
 800067c:	4b55      	ldr	r3, [pc, #340]	; (80007d4 <__aeabi_fadd+0x334>)
 800067e:	3701      	adds	r7, #1
 8000680:	401a      	ands	r2, r3
 8000682:	0753      	lsls	r3, r2, #29
 8000684:	d000      	beq.n	8000688 <__aeabi_fadd+0x1e8>
 8000686:	e75a      	b.n	800053e <__aeabi_fadd+0x9e>
 8000688:	08d2      	lsrs	r2, r2, #3
 800068a:	e7df      	b.n	800064c <__aeabi_fadd+0x1ac>
 800068c:	2200      	movs	r2, #0
 800068e:	23ff      	movs	r3, #255	; 0xff
 8000690:	4694      	mov	ip, r2
 8000692:	e764      	b.n	800055e <__aeabi_fadd+0xbe>
 8000694:	2900      	cmp	r1, #0
 8000696:	d0e0      	beq.n	800065a <__aeabi_fadd+0x1ba>
 8000698:	1bf3      	subs	r3, r6, r7
 800069a:	2f00      	cmp	r7, #0
 800069c:	d03e      	beq.n	800071c <__aeabi_fadd+0x27c>
 800069e:	2eff      	cmp	r6, #255	; 0xff
 80006a0:	d100      	bne.n	80006a4 <__aeabi_fadd+0x204>
 80006a2:	e777      	b.n	8000594 <__aeabi_fadd+0xf4>
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	0001      	movs	r1, r0
 80006a8:	04d2      	lsls	r2, r2, #19
 80006aa:	4311      	orrs	r1, r2
 80006ac:	468a      	mov	sl, r1
 80006ae:	2201      	movs	r2, #1
 80006b0:	2b1b      	cmp	r3, #27
 80006b2:	dc08      	bgt.n	80006c6 <__aeabi_fadd+0x226>
 80006b4:	4652      	mov	r2, sl
 80006b6:	2120      	movs	r1, #32
 80006b8:	4650      	mov	r0, sl
 80006ba:	40da      	lsrs	r2, r3
 80006bc:	1acb      	subs	r3, r1, r3
 80006be:	4098      	lsls	r0, r3
 80006c0:	1e43      	subs	r3, r0, #1
 80006c2:	4198      	sbcs	r0, r3
 80006c4:	4302      	orrs	r2, r0
 80006c6:	0037      	movs	r7, r6
 80006c8:	1952      	adds	r2, r2, r5
 80006ca:	e784      	b.n	80005d6 <__aeabi_fadd+0x136>
 80006cc:	4a41      	ldr	r2, [pc, #260]	; (80007d4 <__aeabi_fadd+0x334>)
 80006ce:	1a3f      	subs	r7, r7, r0
 80006d0:	4032      	ands	r2, r6
 80006d2:	e732      	b.n	800053a <__aeabi_fadd+0x9a>
 80006d4:	4653      	mov	r3, sl
 80006d6:	1b5e      	subs	r6, r3, r5
 80006d8:	0173      	lsls	r3, r6, #5
 80006da:	d42d      	bmi.n	8000738 <__aeabi_fadd+0x298>
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d000      	beq.n	80006e2 <__aeabi_fadd+0x242>
 80006e0:	e717      	b.n	8000512 <__aeabi_fadd+0x72>
 80006e2:	2200      	movs	r2, #0
 80006e4:	2400      	movs	r4, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	4694      	mov	ip, r2
 80006ea:	e738      	b.n	800055e <__aeabi_fadd+0xbe>
 80006ec:	2eff      	cmp	r6, #255	; 0xff
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fadd+0x252>
 80006f0:	e74f      	b.n	8000592 <__aeabi_fadd+0xf2>
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	4650      	mov	r0, sl
 80006f6:	04d2      	lsls	r2, r2, #19
 80006f8:	4310      	orrs	r0, r2
 80006fa:	4682      	mov	sl, r0
 80006fc:	2201      	movs	r2, #1
 80006fe:	2b1b      	cmp	r3, #27
 8000700:	dc08      	bgt.n	8000714 <__aeabi_fadd+0x274>
 8000702:	4652      	mov	r2, sl
 8000704:	2420      	movs	r4, #32
 8000706:	4650      	mov	r0, sl
 8000708:	40da      	lsrs	r2, r3
 800070a:	1ae3      	subs	r3, r4, r3
 800070c:	4098      	lsls	r0, r3
 800070e:	1e43      	subs	r3, r0, #1
 8000710:	4198      	sbcs	r0, r3
 8000712:	4302      	orrs	r2, r0
 8000714:	000c      	movs	r4, r1
 8000716:	0037      	movs	r7, r6
 8000718:	1aaa      	subs	r2, r5, r2
 800071a:	e6f5      	b.n	8000508 <__aeabi_fadd+0x68>
 800071c:	2800      	cmp	r0, #0
 800071e:	d093      	beq.n	8000648 <__aeabi_fadd+0x1a8>
 8000720:	3b01      	subs	r3, #1
 8000722:	2b00      	cmp	r3, #0
 8000724:	d04f      	beq.n	80007c6 <__aeabi_fadd+0x326>
 8000726:	2eff      	cmp	r6, #255	; 0xff
 8000728:	d1c1      	bne.n	80006ae <__aeabi_fadd+0x20e>
 800072a:	4642      	mov	r2, r8
 800072c:	e733      	b.n	8000596 <__aeabi_fadd+0xf6>
 800072e:	2fff      	cmp	r7, #255	; 0xff
 8000730:	d0ac      	beq.n	800068c <__aeabi_fadd+0x1ec>
 8000732:	4455      	add	r5, sl
 8000734:	086a      	lsrs	r2, r5, #1
 8000736:	e7a4      	b.n	8000682 <__aeabi_fadd+0x1e2>
 8000738:	4653      	mov	r3, sl
 800073a:	000c      	movs	r4, r1
 800073c:	1aee      	subs	r6, r5, r3
 800073e:	e6e8      	b.n	8000512 <__aeabi_fadd+0x72>
 8000740:	4653      	mov	r3, sl
 8000742:	2b00      	cmp	r3, #0
 8000744:	d128      	bne.n	8000798 <__aeabi_fadd+0x2f8>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d000      	beq.n	800074c <__aeabi_fadd+0x2ac>
 800074a:	e722      	b.n	8000592 <__aeabi_fadd+0xf2>
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	03db      	lsls	r3, r3, #15
 8000750:	469c      	mov	ip, r3
 8000752:	2400      	movs	r4, #0
 8000754:	23ff      	movs	r3, #255	; 0xff
 8000756:	e702      	b.n	800055e <__aeabi_fadd+0xbe>
 8000758:	002a      	movs	r2, r5
 800075a:	4452      	add	r2, sl
 800075c:	e73b      	b.n	80005d6 <__aeabi_fadd+0x136>
 800075e:	4653      	mov	r3, sl
 8000760:	1b5a      	subs	r2, r3, r5
 8000762:	e6d1      	b.n	8000508 <__aeabi_fadd+0x68>
 8000764:	2800      	cmp	r0, #0
 8000766:	d100      	bne.n	800076a <__aeabi_fadd+0x2ca>
 8000768:	e714      	b.n	8000594 <__aeabi_fadd+0xf4>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x2d0>
 800076e:	e712      	b.n	8000596 <__aeabi_fadd+0xf6>
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	03db      	lsls	r3, r3, #15
 8000774:	421a      	tst	r2, r3
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x2da>
 8000778:	e70d      	b.n	8000596 <__aeabi_fadd+0xf6>
 800077a:	4641      	mov	r1, r8
 800077c:	4219      	tst	r1, r3
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0x2e2>
 8000780:	e709      	b.n	8000596 <__aeabi_fadd+0xf6>
 8000782:	4642      	mov	r2, r8
 8000784:	e707      	b.n	8000596 <__aeabi_fadd+0xf6>
 8000786:	000c      	movs	r4, r1
 8000788:	0037      	movs	r7, r6
 800078a:	1aaa      	subs	r2, r5, r2
 800078c:	e6bc      	b.n	8000508 <__aeabi_fadd+0x68>
 800078e:	2d00      	cmp	r5, #0
 8000790:	d013      	beq.n	80007ba <__aeabi_fadd+0x31a>
 8000792:	000c      	movs	r4, r1
 8000794:	46c4      	mov	ip, r8
 8000796:	e6e2      	b.n	800055e <__aeabi_fadd+0xbe>
 8000798:	2d00      	cmp	r5, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2fe>
 800079c:	e6fb      	b.n	8000596 <__aeabi_fadd+0xf6>
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	03db      	lsls	r3, r3, #15
 80007a2:	421a      	tst	r2, r3
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x308>
 80007a6:	e6f6      	b.n	8000596 <__aeabi_fadd+0xf6>
 80007a8:	4640      	mov	r0, r8
 80007aa:	4218      	tst	r0, r3
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x310>
 80007ae:	e6f2      	b.n	8000596 <__aeabi_fadd+0xf6>
 80007b0:	000c      	movs	r4, r1
 80007b2:	e6ef      	b.n	8000594 <__aeabi_fadd+0xf4>
 80007b4:	2a00      	cmp	r2, #0
 80007b6:	d000      	beq.n	80007ba <__aeabi_fadd+0x31a>
 80007b8:	e763      	b.n	8000682 <__aeabi_fadd+0x1e2>
 80007ba:	2200      	movs	r2, #0
 80007bc:	2400      	movs	r4, #0
 80007be:	4694      	mov	ip, r2
 80007c0:	e6cd      	b.n	800055e <__aeabi_fadd+0xbe>
 80007c2:	46c4      	mov	ip, r8
 80007c4:	e6cb      	b.n	800055e <__aeabi_fadd+0xbe>
 80007c6:	002a      	movs	r2, r5
 80007c8:	0037      	movs	r7, r6
 80007ca:	4452      	add	r2, sl
 80007cc:	e703      	b.n	80005d6 <__aeabi_fadd+0x136>
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	7dffffff 	.word	0x7dffffff
 80007d4:	fbffffff 	.word	0xfbffffff

080007d8 <__aeabi_fdiv>:
 80007d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007da:	464f      	mov	r7, r9
 80007dc:	4646      	mov	r6, r8
 80007de:	46d6      	mov	lr, sl
 80007e0:	0245      	lsls	r5, r0, #9
 80007e2:	b5c0      	push	{r6, r7, lr}
 80007e4:	0047      	lsls	r7, r0, #1
 80007e6:	1c0c      	adds	r4, r1, #0
 80007e8:	0a6d      	lsrs	r5, r5, #9
 80007ea:	0e3f      	lsrs	r7, r7, #24
 80007ec:	0fc6      	lsrs	r6, r0, #31
 80007ee:	2f00      	cmp	r7, #0
 80007f0:	d066      	beq.n	80008c0 <__aeabi_fdiv+0xe8>
 80007f2:	2fff      	cmp	r7, #255	; 0xff
 80007f4:	d06c      	beq.n	80008d0 <__aeabi_fdiv+0xf8>
 80007f6:	2300      	movs	r3, #0
 80007f8:	00ea      	lsls	r2, r5, #3
 80007fa:	2580      	movs	r5, #128	; 0x80
 80007fc:	4699      	mov	r9, r3
 80007fe:	469a      	mov	sl, r3
 8000800:	04ed      	lsls	r5, r5, #19
 8000802:	4315      	orrs	r5, r2
 8000804:	3f7f      	subs	r7, #127	; 0x7f
 8000806:	0260      	lsls	r0, r4, #9
 8000808:	0061      	lsls	r1, r4, #1
 800080a:	0a43      	lsrs	r3, r0, #9
 800080c:	4698      	mov	r8, r3
 800080e:	0e09      	lsrs	r1, r1, #24
 8000810:	0fe4      	lsrs	r4, r4, #31
 8000812:	2900      	cmp	r1, #0
 8000814:	d048      	beq.n	80008a8 <__aeabi_fdiv+0xd0>
 8000816:	29ff      	cmp	r1, #255	; 0xff
 8000818:	d010      	beq.n	800083c <__aeabi_fdiv+0x64>
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	00d8      	lsls	r0, r3, #3
 800081e:	04d2      	lsls	r2, r2, #19
 8000820:	4302      	orrs	r2, r0
 8000822:	4690      	mov	r8, r2
 8000824:	2000      	movs	r0, #0
 8000826:	397f      	subs	r1, #127	; 0x7f
 8000828:	464a      	mov	r2, r9
 800082a:	0033      	movs	r3, r6
 800082c:	1a7f      	subs	r7, r7, r1
 800082e:	4302      	orrs	r2, r0
 8000830:	496c      	ldr	r1, [pc, #432]	; (80009e4 <__aeabi_fdiv+0x20c>)
 8000832:	0092      	lsls	r2, r2, #2
 8000834:	588a      	ldr	r2, [r1, r2]
 8000836:	4063      	eors	r3, r4
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4697      	mov	pc, r2
 800083c:	2b00      	cmp	r3, #0
 800083e:	d16d      	bne.n	800091c <__aeabi_fdiv+0x144>
 8000840:	2002      	movs	r0, #2
 8000842:	3fff      	subs	r7, #255	; 0xff
 8000844:	e033      	b.n	80008ae <__aeabi_fdiv+0xd6>
 8000846:	2300      	movs	r3, #0
 8000848:	4698      	mov	r8, r3
 800084a:	0026      	movs	r6, r4
 800084c:	4645      	mov	r5, r8
 800084e:	4682      	mov	sl, r0
 8000850:	4653      	mov	r3, sl
 8000852:	2b02      	cmp	r3, #2
 8000854:	d100      	bne.n	8000858 <__aeabi_fdiv+0x80>
 8000856:	e07f      	b.n	8000958 <__aeabi_fdiv+0x180>
 8000858:	2b03      	cmp	r3, #3
 800085a:	d100      	bne.n	800085e <__aeabi_fdiv+0x86>
 800085c:	e094      	b.n	8000988 <__aeabi_fdiv+0x1b0>
 800085e:	2b01      	cmp	r3, #1
 8000860:	d017      	beq.n	8000892 <__aeabi_fdiv+0xba>
 8000862:	0038      	movs	r0, r7
 8000864:	307f      	adds	r0, #127	; 0x7f
 8000866:	2800      	cmp	r0, #0
 8000868:	dd5f      	ble.n	800092a <__aeabi_fdiv+0x152>
 800086a:	076b      	lsls	r3, r5, #29
 800086c:	d004      	beq.n	8000878 <__aeabi_fdiv+0xa0>
 800086e:	230f      	movs	r3, #15
 8000870:	402b      	ands	r3, r5
 8000872:	2b04      	cmp	r3, #4
 8000874:	d000      	beq.n	8000878 <__aeabi_fdiv+0xa0>
 8000876:	3504      	adds	r5, #4
 8000878:	012b      	lsls	r3, r5, #4
 800087a:	d503      	bpl.n	8000884 <__aeabi_fdiv+0xac>
 800087c:	0038      	movs	r0, r7
 800087e:	4b5a      	ldr	r3, [pc, #360]	; (80009e8 <__aeabi_fdiv+0x210>)
 8000880:	3080      	adds	r0, #128	; 0x80
 8000882:	401d      	ands	r5, r3
 8000884:	28fe      	cmp	r0, #254	; 0xfe
 8000886:	dc67      	bgt.n	8000958 <__aeabi_fdiv+0x180>
 8000888:	01ad      	lsls	r5, r5, #6
 800088a:	0a6d      	lsrs	r5, r5, #9
 800088c:	b2c0      	uxtb	r0, r0
 800088e:	e002      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000890:	001e      	movs	r6, r3
 8000892:	2000      	movs	r0, #0
 8000894:	2500      	movs	r5, #0
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4328      	orrs	r0, r5
 800089a:	07f6      	lsls	r6, r6, #31
 800089c:	4330      	orrs	r0, r6
 800089e:	bce0      	pop	{r5, r6, r7}
 80008a0:	46ba      	mov	sl, r7
 80008a2:	46b1      	mov	r9, r6
 80008a4:	46a8      	mov	r8, r5
 80008a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d12b      	bne.n	8000904 <__aeabi_fdiv+0x12c>
 80008ac:	2001      	movs	r0, #1
 80008ae:	464a      	mov	r2, r9
 80008b0:	0033      	movs	r3, r6
 80008b2:	494e      	ldr	r1, [pc, #312]	; (80009ec <__aeabi_fdiv+0x214>)
 80008b4:	4302      	orrs	r2, r0
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	588a      	ldr	r2, [r1, r2]
 80008ba:	4063      	eors	r3, r4
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4697      	mov	pc, r2
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d113      	bne.n	80008ec <__aeabi_fdiv+0x114>
 80008c4:	2304      	movs	r3, #4
 80008c6:	4699      	mov	r9, r3
 80008c8:	3b03      	subs	r3, #3
 80008ca:	2700      	movs	r7, #0
 80008cc:	469a      	mov	sl, r3
 80008ce:	e79a      	b.n	8000806 <__aeabi_fdiv+0x2e>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d105      	bne.n	80008e0 <__aeabi_fdiv+0x108>
 80008d4:	2308      	movs	r3, #8
 80008d6:	4699      	mov	r9, r3
 80008d8:	3b06      	subs	r3, #6
 80008da:	27ff      	movs	r7, #255	; 0xff
 80008dc:	469a      	mov	sl, r3
 80008de:	e792      	b.n	8000806 <__aeabi_fdiv+0x2e>
 80008e0:	230c      	movs	r3, #12
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b09      	subs	r3, #9
 80008e6:	27ff      	movs	r7, #255	; 0xff
 80008e8:	469a      	mov	sl, r3
 80008ea:	e78c      	b.n	8000806 <__aeabi_fdiv+0x2e>
 80008ec:	0028      	movs	r0, r5
 80008ee:	f002 fa8f 	bl	8002e10 <__clzsi2>
 80008f2:	2776      	movs	r7, #118	; 0x76
 80008f4:	1f43      	subs	r3, r0, #5
 80008f6:	409d      	lsls	r5, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	427f      	negs	r7, r7
 80008fc:	4699      	mov	r9, r3
 80008fe:	469a      	mov	sl, r3
 8000900:	1a3f      	subs	r7, r7, r0
 8000902:	e780      	b.n	8000806 <__aeabi_fdiv+0x2e>
 8000904:	0018      	movs	r0, r3
 8000906:	f002 fa83 	bl	8002e10 <__clzsi2>
 800090a:	4642      	mov	r2, r8
 800090c:	1f43      	subs	r3, r0, #5
 800090e:	2176      	movs	r1, #118	; 0x76
 8000910:	409a      	lsls	r2, r3
 8000912:	4249      	negs	r1, r1
 8000914:	1a09      	subs	r1, r1, r0
 8000916:	4690      	mov	r8, r2
 8000918:	2000      	movs	r0, #0
 800091a:	e785      	b.n	8000828 <__aeabi_fdiv+0x50>
 800091c:	21ff      	movs	r1, #255	; 0xff
 800091e:	2003      	movs	r0, #3
 8000920:	e782      	b.n	8000828 <__aeabi_fdiv+0x50>
 8000922:	001e      	movs	r6, r3
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2500      	movs	r5, #0
 8000928:	e7b5      	b.n	8000896 <__aeabi_fdiv+0xbe>
 800092a:	2301      	movs	r3, #1
 800092c:	1a1b      	subs	r3, r3, r0
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dcaf      	bgt.n	8000892 <__aeabi_fdiv+0xba>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	0029      	movs	r1, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40d9      	lsrs	r1, r3
 800093a:	1e6a      	subs	r2, r5, #1
 800093c:	4195      	sbcs	r5, r2
 800093e:	430d      	orrs	r5, r1
 8000940:	076b      	lsls	r3, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x176>
 8000944:	230f      	movs	r3, #15
 8000946:	402b      	ands	r3, r5
 8000948:	2b04      	cmp	r3, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x176>
 800094c:	3504      	adds	r5, #4
 800094e:	016b      	lsls	r3, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x204>
 8000952:	2001      	movs	r0, #1
 8000954:	2500      	movs	r5, #0
 8000956:	e79e      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2500      	movs	r5, #0
 800095c:	e79b      	b.n	8000896 <__aeabi_fdiv+0xbe>
 800095e:	2580      	movs	r5, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03ed      	lsls	r5, r5, #15
 8000966:	e796      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2080      	movs	r0, #128	; 0x80
 800096e:	03c0      	lsls	r0, r0, #15
 8000970:	4205      	tst	r5, r0
 8000972:	d009      	beq.n	8000988 <__aeabi_fdiv+0x1b0>
 8000974:	4643      	mov	r3, r8
 8000976:	4203      	tst	r3, r0
 8000978:	d106      	bne.n	8000988 <__aeabi_fdiv+0x1b0>
 800097a:	4645      	mov	r5, r8
 800097c:	4305      	orrs	r5, r0
 800097e:	026d      	lsls	r5, r5, #9
 8000980:	0026      	movs	r6, r4
 8000982:	20ff      	movs	r0, #255	; 0xff
 8000984:	0a6d      	lsrs	r5, r5, #9
 8000986:	e786      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000988:	2080      	movs	r0, #128	; 0x80
 800098a:	03c0      	lsls	r0, r0, #15
 800098c:	4305      	orrs	r5, r0
 800098e:	026d      	lsls	r5, r5, #9
 8000990:	20ff      	movs	r0, #255	; 0xff
 8000992:	0a6d      	lsrs	r5, r5, #9
 8000994:	e77f      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000996:	4641      	mov	r1, r8
 8000998:	016a      	lsls	r2, r5, #5
 800099a:	0148      	lsls	r0, r1, #5
 800099c:	4282      	cmp	r2, r0
 800099e:	d219      	bcs.n	80009d4 <__aeabi_fdiv+0x1fc>
 80009a0:	211b      	movs	r1, #27
 80009a2:	2500      	movs	r5, #0
 80009a4:	3f01      	subs	r7, #1
 80009a6:	2601      	movs	r6, #1
 80009a8:	0014      	movs	r4, r2
 80009aa:	006d      	lsls	r5, r5, #1
 80009ac:	0052      	lsls	r2, r2, #1
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	db01      	blt.n	80009b6 <__aeabi_fdiv+0x1de>
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d801      	bhi.n	80009ba <__aeabi_fdiv+0x1e2>
 80009b6:	1a12      	subs	r2, r2, r0
 80009b8:	4335      	orrs	r5, r6
 80009ba:	3901      	subs	r1, #1
 80009bc:	2900      	cmp	r1, #0
 80009be:	d1f3      	bne.n	80009a8 <__aeabi_fdiv+0x1d0>
 80009c0:	1e50      	subs	r0, r2, #1
 80009c2:	4182      	sbcs	r2, r0
 80009c4:	0038      	movs	r0, r7
 80009c6:	307f      	adds	r0, #127	; 0x7f
 80009c8:	001e      	movs	r6, r3
 80009ca:	4315      	orrs	r5, r2
 80009cc:	2800      	cmp	r0, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x1fa>
 80009d0:	e74b      	b.n	800086a <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x152>
 80009d4:	211a      	movs	r1, #26
 80009d6:	2501      	movs	r5, #1
 80009d8:	1a12      	subs	r2, r2, r0
 80009da:	e7e4      	b.n	80009a6 <__aeabi_fdiv+0x1ce>
 80009dc:	01ad      	lsls	r5, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a6d      	lsrs	r5, r5, #9
 80009e2:	e758      	b.n	8000896 <__aeabi_fdiv+0xbe>
 80009e4:	0800dfdc 	.word	0x0800dfdc
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800e01c 	.word	0x0800e01c

080009f0 <__aeabi_fmul>:
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f2:	4657      	mov	r7, sl
 80009f4:	464e      	mov	r6, r9
 80009f6:	4645      	mov	r5, r8
 80009f8:	46de      	mov	lr, fp
 80009fa:	0244      	lsls	r4, r0, #9
 80009fc:	b5e0      	push	{r5, r6, r7, lr}
 80009fe:	0045      	lsls	r5, r0, #1
 8000a00:	1c0f      	adds	r7, r1, #0
 8000a02:	0a64      	lsrs	r4, r4, #9
 8000a04:	0e2d      	lsrs	r5, r5, #24
 8000a06:	0fc6      	lsrs	r6, r0, #31
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	d047      	beq.n	8000a9c <__aeabi_fmul+0xac>
 8000a0c:	2dff      	cmp	r5, #255	; 0xff
 8000a0e:	d04d      	beq.n	8000aac <__aeabi_fmul+0xbc>
 8000a10:	2300      	movs	r3, #0
 8000a12:	2080      	movs	r0, #128	; 0x80
 8000a14:	469a      	mov	sl, r3
 8000a16:	469b      	mov	fp, r3
 8000a18:	00e4      	lsls	r4, r4, #3
 8000a1a:	04c0      	lsls	r0, r0, #19
 8000a1c:	4304      	orrs	r4, r0
 8000a1e:	3d7f      	subs	r5, #127	; 0x7f
 8000a20:	0278      	lsls	r0, r7, #9
 8000a22:	0a43      	lsrs	r3, r0, #9
 8000a24:	4699      	mov	r9, r3
 8000a26:	007a      	lsls	r2, r7, #1
 8000a28:	0ffb      	lsrs	r3, r7, #31
 8000a2a:	4698      	mov	r8, r3
 8000a2c:	0e12      	lsrs	r2, r2, #24
 8000a2e:	464b      	mov	r3, r9
 8000a30:	d044      	beq.n	8000abc <__aeabi_fmul+0xcc>
 8000a32:	2aff      	cmp	r2, #255	; 0xff
 8000a34:	d011      	beq.n	8000a5a <__aeabi_fmul+0x6a>
 8000a36:	00d8      	lsls	r0, r3, #3
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	04db      	lsls	r3, r3, #19
 8000a3c:	4303      	orrs	r3, r0
 8000a3e:	4699      	mov	r9, r3
 8000a40:	2000      	movs	r0, #0
 8000a42:	3a7f      	subs	r2, #127	; 0x7f
 8000a44:	18ad      	adds	r5, r5, r2
 8000a46:	4647      	mov	r7, r8
 8000a48:	4653      	mov	r3, sl
 8000a4a:	4077      	eors	r7, r6
 8000a4c:	1c69      	adds	r1, r5, #1
 8000a4e:	2b0f      	cmp	r3, #15
 8000a50:	d83f      	bhi.n	8000ad2 <__aeabi_fmul+0xe2>
 8000a52:	4a72      	ldr	r2, [pc, #456]	; (8000c1c <__aeabi_fmul+0x22c>)
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	58d3      	ldr	r3, [r2, r3]
 8000a58:	469f      	mov	pc, r3
 8000a5a:	35ff      	adds	r5, #255	; 0xff
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fmul+0x72>
 8000a60:	e079      	b.n	8000b56 <__aeabi_fmul+0x166>
 8000a62:	4652      	mov	r2, sl
 8000a64:	2302      	movs	r3, #2
 8000a66:	431a      	orrs	r2, r3
 8000a68:	4692      	mov	sl, r2
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	e7eb      	b.n	8000a46 <__aeabi_fmul+0x56>
 8000a6e:	4647      	mov	r7, r8
 8000a70:	464c      	mov	r4, r9
 8000a72:	4683      	mov	fp, r0
 8000a74:	465b      	mov	r3, fp
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d028      	beq.n	8000acc <__aeabi_fmul+0xdc>
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fmul+0x90>
 8000a7e:	e0c6      	b.n	8000c0e <__aeabi_fmul+0x21e>
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d14f      	bne.n	8000b24 <__aeabi_fmul+0x134>
 8000a84:	2000      	movs	r0, #0
 8000a86:	2400      	movs	r4, #0
 8000a88:	05c0      	lsls	r0, r0, #23
 8000a8a:	07ff      	lsls	r7, r7, #31
 8000a8c:	4320      	orrs	r0, r4
 8000a8e:	4338      	orrs	r0, r7
 8000a90:	bcf0      	pop	{r4, r5, r6, r7}
 8000a92:	46bb      	mov	fp, r7
 8000a94:	46b2      	mov	sl, r6
 8000a96:	46a9      	mov	r9, r5
 8000a98:	46a0      	mov	r8, r4
 8000a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a9c:	2c00      	cmp	r4, #0
 8000a9e:	d171      	bne.n	8000b84 <__aeabi_fmul+0x194>
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	469a      	mov	sl, r3
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	2500      	movs	r5, #0
 8000aa8:	469b      	mov	fp, r3
 8000aaa:	e7b9      	b.n	8000a20 <__aeabi_fmul+0x30>
 8000aac:	2c00      	cmp	r4, #0
 8000aae:	d163      	bne.n	8000b78 <__aeabi_fmul+0x188>
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	469a      	mov	sl, r3
 8000ab4:	3b06      	subs	r3, #6
 8000ab6:	25ff      	movs	r5, #255	; 0xff
 8000ab8:	469b      	mov	fp, r3
 8000aba:	e7b1      	b.n	8000a20 <__aeabi_fmul+0x30>
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d150      	bne.n	8000b62 <__aeabi_fmul+0x172>
 8000ac0:	4652      	mov	r2, sl
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	4692      	mov	sl, r2
 8000ac8:	2001      	movs	r0, #1
 8000aca:	e7bc      	b.n	8000a46 <__aeabi_fmul+0x56>
 8000acc:	20ff      	movs	r0, #255	; 0xff
 8000ace:	2400      	movs	r4, #0
 8000ad0:	e7da      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000ad2:	4648      	mov	r0, r9
 8000ad4:	0c26      	lsrs	r6, r4, #16
 8000ad6:	0424      	lsls	r4, r4, #16
 8000ad8:	0c22      	lsrs	r2, r4, #16
 8000ada:	0404      	lsls	r4, r0, #16
 8000adc:	0c24      	lsrs	r4, r4, #16
 8000ade:	464b      	mov	r3, r9
 8000ae0:	0020      	movs	r0, r4
 8000ae2:	0c1b      	lsrs	r3, r3, #16
 8000ae4:	4350      	muls	r0, r2
 8000ae6:	4374      	muls	r4, r6
 8000ae8:	435a      	muls	r2, r3
 8000aea:	435e      	muls	r6, r3
 8000aec:	1912      	adds	r2, r2, r4
 8000aee:	0c03      	lsrs	r3, r0, #16
 8000af0:	189b      	adds	r3, r3, r2
 8000af2:	429c      	cmp	r4, r3
 8000af4:	d903      	bls.n	8000afe <__aeabi_fmul+0x10e>
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	0252      	lsls	r2, r2, #9
 8000afa:	4694      	mov	ip, r2
 8000afc:	4466      	add	r6, ip
 8000afe:	0400      	lsls	r0, r0, #16
 8000b00:	041a      	lsls	r2, r3, #16
 8000b02:	0c00      	lsrs	r0, r0, #16
 8000b04:	1812      	adds	r2, r2, r0
 8000b06:	0194      	lsls	r4, r2, #6
 8000b08:	1e60      	subs	r0, r4, #1
 8000b0a:	4184      	sbcs	r4, r0
 8000b0c:	0c1b      	lsrs	r3, r3, #16
 8000b0e:	0e92      	lsrs	r2, r2, #26
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	4314      	orrs	r4, r2
 8000b14:	019b      	lsls	r3, r3, #6
 8000b16:	431c      	orrs	r4, r3
 8000b18:	011b      	lsls	r3, r3, #4
 8000b1a:	d572      	bpl.n	8000c02 <__aeabi_fmul+0x212>
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	0863      	lsrs	r3, r4, #1
 8000b20:	4004      	ands	r4, r0
 8000b22:	431c      	orrs	r4, r3
 8000b24:	0008      	movs	r0, r1
 8000b26:	307f      	adds	r0, #127	; 0x7f
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	dd3c      	ble.n	8000ba6 <__aeabi_fmul+0x1b6>
 8000b2c:	0763      	lsls	r3, r4, #29
 8000b2e:	d004      	beq.n	8000b3a <__aeabi_fmul+0x14a>
 8000b30:	230f      	movs	r3, #15
 8000b32:	4023      	ands	r3, r4
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d000      	beq.n	8000b3a <__aeabi_fmul+0x14a>
 8000b38:	3404      	adds	r4, #4
 8000b3a:	0123      	lsls	r3, r4, #4
 8000b3c:	d503      	bpl.n	8000b46 <__aeabi_fmul+0x156>
 8000b3e:	3180      	adds	r1, #128	; 0x80
 8000b40:	0008      	movs	r0, r1
 8000b42:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <__aeabi_fmul+0x230>)
 8000b44:	401c      	ands	r4, r3
 8000b46:	28fe      	cmp	r0, #254	; 0xfe
 8000b48:	dcc0      	bgt.n	8000acc <__aeabi_fmul+0xdc>
 8000b4a:	01a4      	lsls	r4, r4, #6
 8000b4c:	0a64      	lsrs	r4, r4, #9
 8000b4e:	b2c0      	uxtb	r0, r0
 8000b50:	e79a      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000b52:	0037      	movs	r7, r6
 8000b54:	e78e      	b.n	8000a74 <__aeabi_fmul+0x84>
 8000b56:	4652      	mov	r2, sl
 8000b58:	2303      	movs	r3, #3
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	4692      	mov	sl, r2
 8000b5e:	2003      	movs	r0, #3
 8000b60:	e771      	b.n	8000a46 <__aeabi_fmul+0x56>
 8000b62:	4648      	mov	r0, r9
 8000b64:	f002 f954 	bl	8002e10 <__clzsi2>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1f43      	subs	r3, r0, #5
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	1a2d      	subs	r5, r5, r0
 8000b70:	4691      	mov	r9, r2
 8000b72:	2000      	movs	r0, #0
 8000b74:	3d76      	subs	r5, #118	; 0x76
 8000b76:	e766      	b.n	8000a46 <__aeabi_fmul+0x56>
 8000b78:	230c      	movs	r3, #12
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	3b09      	subs	r3, #9
 8000b7e:	25ff      	movs	r5, #255	; 0xff
 8000b80:	469b      	mov	fp, r3
 8000b82:	e74d      	b.n	8000a20 <__aeabi_fmul+0x30>
 8000b84:	0020      	movs	r0, r4
 8000b86:	f002 f943 	bl	8002e10 <__clzsi2>
 8000b8a:	2576      	movs	r5, #118	; 0x76
 8000b8c:	1f43      	subs	r3, r0, #5
 8000b8e:	409c      	lsls	r4, r3
 8000b90:	2300      	movs	r3, #0
 8000b92:	426d      	negs	r5, r5
 8000b94:	469a      	mov	sl, r3
 8000b96:	469b      	mov	fp, r3
 8000b98:	1a2d      	subs	r5, r5, r0
 8000b9a:	e741      	b.n	8000a20 <__aeabi_fmul+0x30>
 8000b9c:	2480      	movs	r4, #128	; 0x80
 8000b9e:	2700      	movs	r7, #0
 8000ba0:	20ff      	movs	r0, #255	; 0xff
 8000ba2:	03e4      	lsls	r4, r4, #15
 8000ba4:	e770      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	1a1b      	subs	r3, r3, r0
 8000baa:	2b1b      	cmp	r3, #27
 8000bac:	dd00      	ble.n	8000bb0 <__aeabi_fmul+0x1c0>
 8000bae:	e769      	b.n	8000a84 <__aeabi_fmul+0x94>
 8000bb0:	319e      	adds	r1, #158	; 0x9e
 8000bb2:	0020      	movs	r0, r4
 8000bb4:	408c      	lsls	r4, r1
 8000bb6:	40d8      	lsrs	r0, r3
 8000bb8:	1e63      	subs	r3, r4, #1
 8000bba:	419c      	sbcs	r4, r3
 8000bbc:	4304      	orrs	r4, r0
 8000bbe:	0763      	lsls	r3, r4, #29
 8000bc0:	d004      	beq.n	8000bcc <__aeabi_fmul+0x1dc>
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	4023      	ands	r3, r4
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_fmul+0x1dc>
 8000bca:	3404      	adds	r4, #4
 8000bcc:	0163      	lsls	r3, r4, #5
 8000bce:	d51a      	bpl.n	8000c06 <__aeabi_fmul+0x216>
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	2400      	movs	r4, #0
 8000bd4:	e758      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000bd6:	2080      	movs	r0, #128	; 0x80
 8000bd8:	03c0      	lsls	r0, r0, #15
 8000bda:	4204      	tst	r4, r0
 8000bdc:	d009      	beq.n	8000bf2 <__aeabi_fmul+0x202>
 8000bde:	464b      	mov	r3, r9
 8000be0:	4203      	tst	r3, r0
 8000be2:	d106      	bne.n	8000bf2 <__aeabi_fmul+0x202>
 8000be4:	464c      	mov	r4, r9
 8000be6:	4304      	orrs	r4, r0
 8000be8:	0264      	lsls	r4, r4, #9
 8000bea:	4647      	mov	r7, r8
 8000bec:	20ff      	movs	r0, #255	; 0xff
 8000bee:	0a64      	lsrs	r4, r4, #9
 8000bf0:	e74a      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000bf2:	2080      	movs	r0, #128	; 0x80
 8000bf4:	03c0      	lsls	r0, r0, #15
 8000bf6:	4304      	orrs	r4, r0
 8000bf8:	0264      	lsls	r4, r4, #9
 8000bfa:	0037      	movs	r7, r6
 8000bfc:	20ff      	movs	r0, #255	; 0xff
 8000bfe:	0a64      	lsrs	r4, r4, #9
 8000c00:	e742      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000c02:	0029      	movs	r1, r5
 8000c04:	e78e      	b.n	8000b24 <__aeabi_fmul+0x134>
 8000c06:	01a4      	lsls	r4, r4, #6
 8000c08:	2000      	movs	r0, #0
 8000c0a:	0a64      	lsrs	r4, r4, #9
 8000c0c:	e73c      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000c0e:	2080      	movs	r0, #128	; 0x80
 8000c10:	03c0      	lsls	r0, r0, #15
 8000c12:	4304      	orrs	r4, r0
 8000c14:	0264      	lsls	r4, r4, #9
 8000c16:	20ff      	movs	r0, #255	; 0xff
 8000c18:	0a64      	lsrs	r4, r4, #9
 8000c1a:	e735      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000c1c:	0800e05c 	.word	0x0800e05c
 8000c20:	f7ffffff 	.word	0xf7ffffff

08000c24 <__aeabi_fsub>:
 8000c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c26:	4646      	mov	r6, r8
 8000c28:	46d6      	mov	lr, sl
 8000c2a:	464f      	mov	r7, r9
 8000c2c:	0243      	lsls	r3, r0, #9
 8000c2e:	0a5b      	lsrs	r3, r3, #9
 8000c30:	00da      	lsls	r2, r3, #3
 8000c32:	4694      	mov	ip, r2
 8000c34:	024a      	lsls	r2, r1, #9
 8000c36:	b5c0      	push	{r6, r7, lr}
 8000c38:	0044      	lsls	r4, r0, #1
 8000c3a:	0a56      	lsrs	r6, r2, #9
 8000c3c:	1c05      	adds	r5, r0, #0
 8000c3e:	46b0      	mov	r8, r6
 8000c40:	0e24      	lsrs	r4, r4, #24
 8000c42:	004e      	lsls	r6, r1, #1
 8000c44:	0992      	lsrs	r2, r2, #6
 8000c46:	001f      	movs	r7, r3
 8000c48:	0020      	movs	r0, r4
 8000c4a:	4692      	mov	sl, r2
 8000c4c:	0fed      	lsrs	r5, r5, #31
 8000c4e:	0e36      	lsrs	r6, r6, #24
 8000c50:	0fc9      	lsrs	r1, r1, #31
 8000c52:	2eff      	cmp	r6, #255	; 0xff
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fsub+0x34>
 8000c56:	e07f      	b.n	8000d58 <__aeabi_fsub+0x134>
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4051      	eors	r1, r2
 8000c5c:	428d      	cmp	r5, r1
 8000c5e:	d051      	beq.n	8000d04 <__aeabi_fsub+0xe0>
 8000c60:	1ba2      	subs	r2, r4, r6
 8000c62:	4691      	mov	r9, r2
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_fsub+0x46>
 8000c68:	e07e      	b.n	8000d68 <__aeabi_fsub+0x144>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fsub+0x4c>
 8000c6e:	e099      	b.n	8000da4 <__aeabi_fsub+0x180>
 8000c70:	2cff      	cmp	r4, #255	; 0xff
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fsub+0x52>
 8000c74:	e08c      	b.n	8000d90 <__aeabi_fsub+0x16c>
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	4652      	mov	r2, sl
 8000c7a:	04db      	lsls	r3, r3, #19
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	4692      	mov	sl, r2
 8000c80:	464a      	mov	r2, r9
 8000c82:	2301      	movs	r3, #1
 8000c84:	2a1b      	cmp	r2, #27
 8000c86:	dc08      	bgt.n	8000c9a <__aeabi_fsub+0x76>
 8000c88:	4653      	mov	r3, sl
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	40d3      	lsrs	r3, r2
 8000c8e:	1a89      	subs	r1, r1, r2
 8000c90:	4652      	mov	r2, sl
 8000c92:	408a      	lsls	r2, r1
 8000c94:	1e51      	subs	r1, r2, #1
 8000c96:	418a      	sbcs	r2, r1
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	4662      	mov	r2, ip
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	015a      	lsls	r2, r3, #5
 8000ca0:	d400      	bmi.n	8000ca4 <__aeabi_fsub+0x80>
 8000ca2:	e0f3      	b.n	8000e8c <__aeabi_fsub+0x268>
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	099e      	lsrs	r6, r3, #6
 8000ca8:	0030      	movs	r0, r6
 8000caa:	f002 f8b1 	bl	8002e10 <__clzsi2>
 8000cae:	3805      	subs	r0, #5
 8000cb0:	4086      	lsls	r6, r0
 8000cb2:	4284      	cmp	r4, r0
 8000cb4:	dd00      	ble.n	8000cb8 <__aeabi_fsub+0x94>
 8000cb6:	e0f7      	b.n	8000ea8 <__aeabi_fsub+0x284>
 8000cb8:	0032      	movs	r2, r6
 8000cba:	1b04      	subs	r4, r0, r4
 8000cbc:	2020      	movs	r0, #32
 8000cbe:	3401      	adds	r4, #1
 8000cc0:	40e2      	lsrs	r2, r4
 8000cc2:	1b04      	subs	r4, r0, r4
 8000cc4:	40a6      	lsls	r6, r4
 8000cc6:	0033      	movs	r3, r6
 8000cc8:	1e5e      	subs	r6, r3, #1
 8000cca:	41b3      	sbcs	r3, r6
 8000ccc:	2400      	movs	r4, #0
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	075a      	lsls	r2, r3, #29
 8000cd2:	d004      	beq.n	8000cde <__aeabi_fsub+0xba>
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	2a04      	cmp	r2, #4
 8000cda:	d000      	beq.n	8000cde <__aeabi_fsub+0xba>
 8000cdc:	3304      	adds	r3, #4
 8000cde:	015a      	lsls	r2, r3, #5
 8000ce0:	d400      	bmi.n	8000ce4 <__aeabi_fsub+0xc0>
 8000ce2:	e0d6      	b.n	8000e92 <__aeabi_fsub+0x26e>
 8000ce4:	1c62      	adds	r2, r4, #1
 8000ce6:	2cfe      	cmp	r4, #254	; 0xfe
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0xc8>
 8000cea:	e0da      	b.n	8000ea2 <__aeabi_fsub+0x27e>
 8000cec:	019b      	lsls	r3, r3, #6
 8000cee:	0a5f      	lsrs	r7, r3, #9
 8000cf0:	b2d0      	uxtb	r0, r2
 8000cf2:	05c0      	lsls	r0, r0, #23
 8000cf4:	4338      	orrs	r0, r7
 8000cf6:	07ed      	lsls	r5, r5, #31
 8000cf8:	4328      	orrs	r0, r5
 8000cfa:	bce0      	pop	{r5, r6, r7}
 8000cfc:	46ba      	mov	sl, r7
 8000cfe:	46b1      	mov	r9, r6
 8000d00:	46a8      	mov	r8, r5
 8000d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d04:	1ba2      	subs	r2, r4, r6
 8000d06:	4691      	mov	r9, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	dd63      	ble.n	8000dd4 <__aeabi_fsub+0x1b0>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_fsub+0xee>
 8000d10:	e099      	b.n	8000e46 <__aeabi_fsub+0x222>
 8000d12:	2cff      	cmp	r4, #255	; 0xff
 8000d14:	d03c      	beq.n	8000d90 <__aeabi_fsub+0x16c>
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	4652      	mov	r2, sl
 8000d1a:	04db      	lsls	r3, r3, #19
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	4692      	mov	sl, r2
 8000d20:	464a      	mov	r2, r9
 8000d22:	2301      	movs	r3, #1
 8000d24:	2a1b      	cmp	r2, #27
 8000d26:	dc08      	bgt.n	8000d3a <__aeabi_fsub+0x116>
 8000d28:	4653      	mov	r3, sl
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	40d3      	lsrs	r3, r2
 8000d2e:	1a89      	subs	r1, r1, r2
 8000d30:	4652      	mov	r2, sl
 8000d32:	408a      	lsls	r2, r1
 8000d34:	1e51      	subs	r1, r2, #1
 8000d36:	418a      	sbcs	r2, r1
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	015a      	lsls	r2, r3, #5
 8000d3e:	d400      	bmi.n	8000d42 <__aeabi_fsub+0x11e>
 8000d40:	e0a4      	b.n	8000e8c <__aeabi_fsub+0x268>
 8000d42:	3401      	adds	r4, #1
 8000d44:	2cff      	cmp	r4, #255	; 0xff
 8000d46:	d100      	bne.n	8000d4a <__aeabi_fsub+0x126>
 8000d48:	e0ab      	b.n	8000ea2 <__aeabi_fsub+0x27e>
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4997      	ldr	r1, [pc, #604]	; (8000fac <__aeabi_fsub+0x388>)
 8000d4e:	401a      	ands	r2, r3
 8000d50:	085b      	lsrs	r3, r3, #1
 8000d52:	400b      	ands	r3, r1
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e7bb      	b.n	8000cd0 <__aeabi_fsub+0xac>
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	d032      	beq.n	8000dc2 <__aeabi_fsub+0x19e>
 8000d5c:	428d      	cmp	r5, r1
 8000d5e:	d035      	beq.n	8000dcc <__aeabi_fsub+0x1a8>
 8000d60:	22ff      	movs	r2, #255	; 0xff
 8000d62:	4252      	negs	r2, r2
 8000d64:	4691      	mov	r9, r2
 8000d66:	44a1      	add	r9, r4
 8000d68:	464a      	mov	r2, r9
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d051      	beq.n	8000e12 <__aeabi_fsub+0x1ee>
 8000d6e:	1b30      	subs	r0, r6, r4
 8000d70:	2c00      	cmp	r4, #0
 8000d72:	d000      	beq.n	8000d76 <__aeabi_fsub+0x152>
 8000d74:	e09c      	b.n	8000eb0 <__aeabi_fsub+0x28c>
 8000d76:	4663      	mov	r3, ip
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_fsub+0x15a>
 8000d7c:	e0df      	b.n	8000f3e <__aeabi_fsub+0x31a>
 8000d7e:	3801      	subs	r0, #1
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d100      	bne.n	8000d86 <__aeabi_fsub+0x162>
 8000d84:	e0f7      	b.n	8000f76 <__aeabi_fsub+0x352>
 8000d86:	2eff      	cmp	r6, #255	; 0xff
 8000d88:	d000      	beq.n	8000d8c <__aeabi_fsub+0x168>
 8000d8a:	e099      	b.n	8000ec0 <__aeabi_fsub+0x29c>
 8000d8c:	000d      	movs	r5, r1
 8000d8e:	4643      	mov	r3, r8
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x172>
 8000d94:	e085      	b.n	8000ea2 <__aeabi_fsub+0x27e>
 8000d96:	2780      	movs	r7, #128	; 0x80
 8000d98:	03ff      	lsls	r7, r7, #15
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	027f      	lsls	r7, r7, #9
 8000d9e:	20ff      	movs	r0, #255	; 0xff
 8000da0:	0a7f      	lsrs	r7, r7, #9
 8000da2:	e7a6      	b.n	8000cf2 <__aeabi_fsub+0xce>
 8000da4:	4652      	mov	r2, sl
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d074      	beq.n	8000e94 <__aeabi_fsub+0x270>
 8000daa:	2201      	movs	r2, #1
 8000dac:	4252      	negs	r2, r2
 8000dae:	4690      	mov	r8, r2
 8000db0:	44c1      	add	r9, r8
 8000db2:	464a      	mov	r2, r9
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	d100      	bne.n	8000dba <__aeabi_fsub+0x196>
 8000db8:	e0c8      	b.n	8000f4c <__aeabi_fsub+0x328>
 8000dba:	2cff      	cmp	r4, #255	; 0xff
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_fsub+0x19c>
 8000dbe:	e75f      	b.n	8000c80 <__aeabi_fsub+0x5c>
 8000dc0:	e7e6      	b.n	8000d90 <__aeabi_fsub+0x16c>
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4051      	eors	r1, r2
 8000dc6:	42a9      	cmp	r1, r5
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_fsub+0x1a8>
 8000dca:	e749      	b.n	8000c60 <__aeabi_fsub+0x3c>
 8000dcc:	22ff      	movs	r2, #255	; 0xff
 8000dce:	4252      	negs	r2, r2
 8000dd0:	4691      	mov	r9, r2
 8000dd2:	44a1      	add	r9, r4
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d043      	beq.n	8000e62 <__aeabi_fsub+0x23e>
 8000dda:	1b31      	subs	r1, r6, r4
 8000ddc:	2c00      	cmp	r4, #0
 8000dde:	d100      	bne.n	8000de2 <__aeabi_fsub+0x1be>
 8000de0:	e08c      	b.n	8000efc <__aeabi_fsub+0x2d8>
 8000de2:	2eff      	cmp	r6, #255	; 0xff
 8000de4:	d100      	bne.n	8000de8 <__aeabi_fsub+0x1c4>
 8000de6:	e092      	b.n	8000f0e <__aeabi_fsub+0x2ea>
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	4662      	mov	r2, ip
 8000dec:	04db      	lsls	r3, r3, #19
 8000dee:	431a      	orrs	r2, r3
 8000df0:	4694      	mov	ip, r2
 8000df2:	2301      	movs	r3, #1
 8000df4:	291b      	cmp	r1, #27
 8000df6:	dc09      	bgt.n	8000e0c <__aeabi_fsub+0x1e8>
 8000df8:	2020      	movs	r0, #32
 8000dfa:	4663      	mov	r3, ip
 8000dfc:	4662      	mov	r2, ip
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	1a41      	subs	r1, r0, r1
 8000e02:	408a      	lsls	r2, r1
 8000e04:	0011      	movs	r1, r2
 8000e06:	1e48      	subs	r0, r1, #1
 8000e08:	4181      	sbcs	r1, r0
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	0034      	movs	r4, r6
 8000e0e:	4453      	add	r3, sl
 8000e10:	e794      	b.n	8000d3c <__aeabi_fsub+0x118>
 8000e12:	22fe      	movs	r2, #254	; 0xfe
 8000e14:	1c66      	adds	r6, r4, #1
 8000e16:	4232      	tst	r2, r6
 8000e18:	d164      	bne.n	8000ee4 <__aeabi_fsub+0x2c0>
 8000e1a:	2c00      	cmp	r4, #0
 8000e1c:	d000      	beq.n	8000e20 <__aeabi_fsub+0x1fc>
 8000e1e:	e082      	b.n	8000f26 <__aeabi_fsub+0x302>
 8000e20:	4663      	mov	r3, ip
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_fsub+0x204>
 8000e26:	e0ab      	b.n	8000f80 <__aeabi_fsub+0x35c>
 8000e28:	4653      	mov	r3, sl
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_fsub+0x20c>
 8000e2e:	e760      	b.n	8000cf2 <__aeabi_fsub+0xce>
 8000e30:	4663      	mov	r3, ip
 8000e32:	4652      	mov	r2, sl
 8000e34:	1a9b      	subs	r3, r3, r2
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	d400      	bmi.n	8000e3c <__aeabi_fsub+0x218>
 8000e3a:	e0aa      	b.n	8000f92 <__aeabi_fsub+0x36e>
 8000e3c:	4663      	mov	r3, ip
 8000e3e:	4652      	mov	r2, sl
 8000e40:	000d      	movs	r5, r1
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	e744      	b.n	8000cd0 <__aeabi_fsub+0xac>
 8000e46:	4652      	mov	r2, sl
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d023      	beq.n	8000e94 <__aeabi_fsub+0x270>
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4252      	negs	r2, r2
 8000e50:	4690      	mov	r8, r2
 8000e52:	44c1      	add	r9, r8
 8000e54:	464a      	mov	r2, r9
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d075      	beq.n	8000f46 <__aeabi_fsub+0x322>
 8000e5a:	2cff      	cmp	r4, #255	; 0xff
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fsub+0x23c>
 8000e5e:	e75f      	b.n	8000d20 <__aeabi_fsub+0xfc>
 8000e60:	e796      	b.n	8000d90 <__aeabi_fsub+0x16c>
 8000e62:	26fe      	movs	r6, #254	; 0xfe
 8000e64:	3401      	adds	r4, #1
 8000e66:	4226      	tst	r6, r4
 8000e68:	d153      	bne.n	8000f12 <__aeabi_fsub+0x2ee>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d172      	bne.n	8000f54 <__aeabi_fsub+0x330>
 8000e6e:	4663      	mov	r3, ip
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x252>
 8000e74:	e093      	b.n	8000f9e <__aeabi_fsub+0x37a>
 8000e76:	4653      	mov	r3, sl
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_fsub+0x25a>
 8000e7c:	e739      	b.n	8000cf2 <__aeabi_fsub+0xce>
 8000e7e:	4463      	add	r3, ip
 8000e80:	2400      	movs	r4, #0
 8000e82:	015a      	lsls	r2, r3, #5
 8000e84:	d502      	bpl.n	8000e8c <__aeabi_fsub+0x268>
 8000e86:	4a4a      	ldr	r2, [pc, #296]	; (8000fb0 <__aeabi_fsub+0x38c>)
 8000e88:	3401      	adds	r4, #1
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	075a      	lsls	r2, r3, #29
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fsub+0x26e>
 8000e90:	e720      	b.n	8000cd4 <__aeabi_fsub+0xb0>
 8000e92:	08db      	lsrs	r3, r3, #3
 8000e94:	2cff      	cmp	r4, #255	; 0xff
 8000e96:	d100      	bne.n	8000e9a <__aeabi_fsub+0x276>
 8000e98:	e77a      	b.n	8000d90 <__aeabi_fsub+0x16c>
 8000e9a:	025b      	lsls	r3, r3, #9
 8000e9c:	0a5f      	lsrs	r7, r3, #9
 8000e9e:	b2e0      	uxtb	r0, r4
 8000ea0:	e727      	b.n	8000cf2 <__aeabi_fsub+0xce>
 8000ea2:	20ff      	movs	r0, #255	; 0xff
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e724      	b.n	8000cf2 <__aeabi_fsub+0xce>
 8000ea8:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <__aeabi_fsub+0x38c>)
 8000eaa:	1a24      	subs	r4, r4, r0
 8000eac:	4033      	ands	r3, r6
 8000eae:	e70f      	b.n	8000cd0 <__aeabi_fsub+0xac>
 8000eb0:	2eff      	cmp	r6, #255	; 0xff
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_fsub+0x292>
 8000eb4:	e76a      	b.n	8000d8c <__aeabi_fsub+0x168>
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	4662      	mov	r2, ip
 8000eba:	04db      	lsls	r3, r3, #19
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	4694      	mov	ip, r2
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	281b      	cmp	r0, #27
 8000ec4:	dc09      	bgt.n	8000eda <__aeabi_fsub+0x2b6>
 8000ec6:	2420      	movs	r4, #32
 8000ec8:	4663      	mov	r3, ip
 8000eca:	4662      	mov	r2, ip
 8000ecc:	40c3      	lsrs	r3, r0
 8000ece:	1a20      	subs	r0, r4, r0
 8000ed0:	4082      	lsls	r2, r0
 8000ed2:	0010      	movs	r0, r2
 8000ed4:	1e44      	subs	r4, r0, #1
 8000ed6:	41a0      	sbcs	r0, r4
 8000ed8:	4303      	orrs	r3, r0
 8000eda:	4652      	mov	r2, sl
 8000edc:	000d      	movs	r5, r1
 8000ede:	0034      	movs	r4, r6
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	e6dc      	b.n	8000c9e <__aeabi_fsub+0x7a>
 8000ee4:	4663      	mov	r3, ip
 8000ee6:	4652      	mov	r2, sl
 8000ee8:	1a9e      	subs	r6, r3, r2
 8000eea:	0173      	lsls	r3, r6, #5
 8000eec:	d417      	bmi.n	8000f1e <__aeabi_fsub+0x2fa>
 8000eee:	2e00      	cmp	r6, #0
 8000ef0:	d000      	beq.n	8000ef4 <__aeabi_fsub+0x2d0>
 8000ef2:	e6d9      	b.n	8000ca8 <__aeabi_fsub+0x84>
 8000ef4:	2500      	movs	r5, #0
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	2700      	movs	r7, #0
 8000efa:	e6fa      	b.n	8000cf2 <__aeabi_fsub+0xce>
 8000efc:	4663      	mov	r3, ip
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d044      	beq.n	8000f8c <__aeabi_fsub+0x368>
 8000f02:	3901      	subs	r1, #1
 8000f04:	2900      	cmp	r1, #0
 8000f06:	d04c      	beq.n	8000fa2 <__aeabi_fsub+0x37e>
 8000f08:	2eff      	cmp	r6, #255	; 0xff
 8000f0a:	d000      	beq.n	8000f0e <__aeabi_fsub+0x2ea>
 8000f0c:	e771      	b.n	8000df2 <__aeabi_fsub+0x1ce>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	e73e      	b.n	8000d90 <__aeabi_fsub+0x16c>
 8000f12:	2cff      	cmp	r4, #255	; 0xff
 8000f14:	d0c5      	beq.n	8000ea2 <__aeabi_fsub+0x27e>
 8000f16:	4652      	mov	r2, sl
 8000f18:	4462      	add	r2, ip
 8000f1a:	0853      	lsrs	r3, r2, #1
 8000f1c:	e7b6      	b.n	8000e8c <__aeabi_fsub+0x268>
 8000f1e:	4663      	mov	r3, ip
 8000f20:	000d      	movs	r5, r1
 8000f22:	1ad6      	subs	r6, r2, r3
 8000f24:	e6c0      	b.n	8000ca8 <__aeabi_fsub+0x84>
 8000f26:	4662      	mov	r2, ip
 8000f28:	2a00      	cmp	r2, #0
 8000f2a:	d116      	bne.n	8000f5a <__aeabi_fsub+0x336>
 8000f2c:	4653      	mov	r3, sl
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d000      	beq.n	8000f34 <__aeabi_fsub+0x310>
 8000f32:	e72b      	b.n	8000d8c <__aeabi_fsub+0x168>
 8000f34:	2780      	movs	r7, #128	; 0x80
 8000f36:	2500      	movs	r5, #0
 8000f38:	20ff      	movs	r0, #255	; 0xff
 8000f3a:	03ff      	lsls	r7, r7, #15
 8000f3c:	e6d9      	b.n	8000cf2 <__aeabi_fsub+0xce>
 8000f3e:	000d      	movs	r5, r1
 8000f40:	4643      	mov	r3, r8
 8000f42:	0034      	movs	r4, r6
 8000f44:	e7a6      	b.n	8000e94 <__aeabi_fsub+0x270>
 8000f46:	4653      	mov	r3, sl
 8000f48:	4463      	add	r3, ip
 8000f4a:	e6f7      	b.n	8000d3c <__aeabi_fsub+0x118>
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	4652      	mov	r2, sl
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	e6a4      	b.n	8000c9e <__aeabi_fsub+0x7a>
 8000f54:	4662      	mov	r2, ip
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	d0d9      	beq.n	8000f0e <__aeabi_fsub+0x2ea>
 8000f5a:	4652      	mov	r2, sl
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_fsub+0x33e>
 8000f60:	e716      	b.n	8000d90 <__aeabi_fsub+0x16c>
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	03d2      	lsls	r2, r2, #15
 8000f66:	4213      	tst	r3, r2
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x348>
 8000f6a:	e711      	b.n	8000d90 <__aeabi_fsub+0x16c>
 8000f6c:	4640      	mov	r0, r8
 8000f6e:	4210      	tst	r0, r2
 8000f70:	d000      	beq.n	8000f74 <__aeabi_fsub+0x350>
 8000f72:	e70d      	b.n	8000d90 <__aeabi_fsub+0x16c>
 8000f74:	e70a      	b.n	8000d8c <__aeabi_fsub+0x168>
 8000f76:	4652      	mov	r2, sl
 8000f78:	000d      	movs	r5, r1
 8000f7a:	0034      	movs	r4, r6
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	e68e      	b.n	8000c9e <__aeabi_fsub+0x7a>
 8000f80:	4653      	mov	r3, sl
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d008      	beq.n	8000f98 <__aeabi_fsub+0x374>
 8000f86:	000d      	movs	r5, r1
 8000f88:	4647      	mov	r7, r8
 8000f8a:	e6b2      	b.n	8000cf2 <__aeabi_fsub+0xce>
 8000f8c:	4643      	mov	r3, r8
 8000f8e:	0034      	movs	r4, r6
 8000f90:	e780      	b.n	8000e94 <__aeabi_fsub+0x270>
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d000      	beq.n	8000f98 <__aeabi_fsub+0x374>
 8000f96:	e779      	b.n	8000e8c <__aeabi_fsub+0x268>
 8000f98:	2500      	movs	r5, #0
 8000f9a:	2700      	movs	r7, #0
 8000f9c:	e6a9      	b.n	8000cf2 <__aeabi_fsub+0xce>
 8000f9e:	4647      	mov	r7, r8
 8000fa0:	e6a7      	b.n	8000cf2 <__aeabi_fsub+0xce>
 8000fa2:	4653      	mov	r3, sl
 8000fa4:	0034      	movs	r4, r6
 8000fa6:	4463      	add	r3, ip
 8000fa8:	e6c8      	b.n	8000d3c <__aeabi_fsub+0x118>
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	7dffffff 	.word	0x7dffffff
 8000fb0:	fbffffff 	.word	0xfbffffff

08000fb4 <__aeabi_i2f>:
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	d013      	beq.n	8000fe2 <__aeabi_i2f+0x2e>
 8000fba:	17c3      	asrs	r3, r0, #31
 8000fbc:	18c5      	adds	r5, r0, r3
 8000fbe:	405d      	eors	r5, r3
 8000fc0:	0fc4      	lsrs	r4, r0, #31
 8000fc2:	0028      	movs	r0, r5
 8000fc4:	f001 ff24 	bl	8002e10 <__clzsi2>
 8000fc8:	239e      	movs	r3, #158	; 0x9e
 8000fca:	0001      	movs	r1, r0
 8000fcc:	1a1b      	subs	r3, r3, r0
 8000fce:	2b96      	cmp	r3, #150	; 0x96
 8000fd0:	dc0f      	bgt.n	8000ff2 <__aeabi_i2f+0x3e>
 8000fd2:	2808      	cmp	r0, #8
 8000fd4:	dd01      	ble.n	8000fda <__aeabi_i2f+0x26>
 8000fd6:	3908      	subs	r1, #8
 8000fd8:	408d      	lsls	r5, r1
 8000fda:	026d      	lsls	r5, r5, #9
 8000fdc:	0a6d      	lsrs	r5, r5, #9
 8000fde:	b2d8      	uxtb	r0, r3
 8000fe0:	e002      	b.n	8000fe8 <__aeabi_i2f+0x34>
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	2500      	movs	r5, #0
 8000fe8:	05c0      	lsls	r0, r0, #23
 8000fea:	4328      	orrs	r0, r5
 8000fec:	07e4      	lsls	r4, r4, #31
 8000fee:	4320      	orrs	r0, r4
 8000ff0:	bd70      	pop	{r4, r5, r6, pc}
 8000ff2:	2b99      	cmp	r3, #153	; 0x99
 8000ff4:	dd0b      	ble.n	800100e <__aeabi_i2f+0x5a>
 8000ff6:	2205      	movs	r2, #5
 8000ff8:	002e      	movs	r6, r5
 8000ffa:	1a12      	subs	r2, r2, r0
 8000ffc:	40d6      	lsrs	r6, r2
 8000ffe:	0002      	movs	r2, r0
 8001000:	321b      	adds	r2, #27
 8001002:	4095      	lsls	r5, r2
 8001004:	0028      	movs	r0, r5
 8001006:	1e45      	subs	r5, r0, #1
 8001008:	41a8      	sbcs	r0, r5
 800100a:	0035      	movs	r5, r6
 800100c:	4305      	orrs	r5, r0
 800100e:	2905      	cmp	r1, #5
 8001010:	dd01      	ble.n	8001016 <__aeabi_i2f+0x62>
 8001012:	1f4a      	subs	r2, r1, #5
 8001014:	4095      	lsls	r5, r2
 8001016:	002a      	movs	r2, r5
 8001018:	4e08      	ldr	r6, [pc, #32]	; (800103c <__aeabi_i2f+0x88>)
 800101a:	4032      	ands	r2, r6
 800101c:	0768      	lsls	r0, r5, #29
 800101e:	d009      	beq.n	8001034 <__aeabi_i2f+0x80>
 8001020:	200f      	movs	r0, #15
 8001022:	4028      	ands	r0, r5
 8001024:	2804      	cmp	r0, #4
 8001026:	d005      	beq.n	8001034 <__aeabi_i2f+0x80>
 8001028:	3204      	adds	r2, #4
 800102a:	0150      	lsls	r0, r2, #5
 800102c:	d502      	bpl.n	8001034 <__aeabi_i2f+0x80>
 800102e:	239f      	movs	r3, #159	; 0x9f
 8001030:	4032      	ands	r2, r6
 8001032:	1a5b      	subs	r3, r3, r1
 8001034:	0192      	lsls	r2, r2, #6
 8001036:	0a55      	lsrs	r5, r2, #9
 8001038:	b2d8      	uxtb	r0, r3
 800103a:	e7d5      	b.n	8000fe8 <__aeabi_i2f+0x34>
 800103c:	fbffffff 	.word	0xfbffffff

08001040 <__aeabi_dadd>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	46d6      	mov	lr, sl
 8001046:	4646      	mov	r6, r8
 8001048:	000d      	movs	r5, r1
 800104a:	0001      	movs	r1, r0
 800104c:	0018      	movs	r0, r3
 800104e:	b5c0      	push	{r6, r7, lr}
 8001050:	0017      	movs	r7, r2
 8001052:	032b      	lsls	r3, r5, #12
 8001054:	0a5a      	lsrs	r2, r3, #9
 8001056:	0f4b      	lsrs	r3, r1, #29
 8001058:	4313      	orrs	r3, r2
 800105a:	00ca      	lsls	r2, r1, #3
 800105c:	4691      	mov	r9, r2
 800105e:	0302      	lsls	r2, r0, #12
 8001060:	006e      	lsls	r6, r5, #1
 8001062:	0041      	lsls	r1, r0, #1
 8001064:	0a52      	lsrs	r2, r2, #9
 8001066:	0fec      	lsrs	r4, r5, #31
 8001068:	0f7d      	lsrs	r5, r7, #29
 800106a:	4315      	orrs	r5, r2
 800106c:	0d76      	lsrs	r6, r6, #21
 800106e:	0d49      	lsrs	r1, r1, #21
 8001070:	0fc0      	lsrs	r0, r0, #31
 8001072:	4682      	mov	sl, r0
 8001074:	46ac      	mov	ip, r5
 8001076:	00ff      	lsls	r7, r7, #3
 8001078:	1a72      	subs	r2, r6, r1
 800107a:	4284      	cmp	r4, r0
 800107c:	d100      	bne.n	8001080 <__aeabi_dadd+0x40>
 800107e:	e098      	b.n	80011b2 <__aeabi_dadd+0x172>
 8001080:	2a00      	cmp	r2, #0
 8001082:	dc00      	bgt.n	8001086 <__aeabi_dadd+0x46>
 8001084:	e081      	b.n	800118a <__aeabi_dadd+0x14a>
 8001086:	2900      	cmp	r1, #0
 8001088:	d100      	bne.n	800108c <__aeabi_dadd+0x4c>
 800108a:	e0b6      	b.n	80011fa <__aeabi_dadd+0x1ba>
 800108c:	49c9      	ldr	r1, [pc, #804]	; (80013b4 <__aeabi_dadd+0x374>)
 800108e:	428e      	cmp	r6, r1
 8001090:	d100      	bne.n	8001094 <__aeabi_dadd+0x54>
 8001092:	e172      	b.n	800137a <__aeabi_dadd+0x33a>
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	0028      	movs	r0, r5
 8001098:	0409      	lsls	r1, r1, #16
 800109a:	4308      	orrs	r0, r1
 800109c:	4684      	mov	ip, r0
 800109e:	2a38      	cmp	r2, #56	; 0x38
 80010a0:	dd00      	ble.n	80010a4 <__aeabi_dadd+0x64>
 80010a2:	e15e      	b.n	8001362 <__aeabi_dadd+0x322>
 80010a4:	2a1f      	cmp	r2, #31
 80010a6:	dd00      	ble.n	80010aa <__aeabi_dadd+0x6a>
 80010a8:	e1ee      	b.n	8001488 <__aeabi_dadd+0x448>
 80010aa:	2020      	movs	r0, #32
 80010ac:	0039      	movs	r1, r7
 80010ae:	4665      	mov	r5, ip
 80010b0:	1a80      	subs	r0, r0, r2
 80010b2:	4087      	lsls	r7, r0
 80010b4:	40d1      	lsrs	r1, r2
 80010b6:	4085      	lsls	r5, r0
 80010b8:	430d      	orrs	r5, r1
 80010ba:	0039      	movs	r1, r7
 80010bc:	1e4f      	subs	r7, r1, #1
 80010be:	41b9      	sbcs	r1, r7
 80010c0:	4667      	mov	r7, ip
 80010c2:	40d7      	lsrs	r7, r2
 80010c4:	4329      	orrs	r1, r5
 80010c6:	1bdb      	subs	r3, r3, r7
 80010c8:	464a      	mov	r2, r9
 80010ca:	1a55      	subs	r5, r2, r1
 80010cc:	45a9      	cmp	r9, r5
 80010ce:	4189      	sbcs	r1, r1
 80010d0:	4249      	negs	r1, r1
 80010d2:	1a5b      	subs	r3, r3, r1
 80010d4:	4698      	mov	r8, r3
 80010d6:	4643      	mov	r3, r8
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	d400      	bmi.n	80010de <__aeabi_dadd+0x9e>
 80010dc:	e0cc      	b.n	8001278 <__aeabi_dadd+0x238>
 80010de:	4643      	mov	r3, r8
 80010e0:	025b      	lsls	r3, r3, #9
 80010e2:	0a5b      	lsrs	r3, r3, #9
 80010e4:	4698      	mov	r8, r3
 80010e6:	4643      	mov	r3, r8
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_dadd+0xae>
 80010ec:	e12c      	b.n	8001348 <__aeabi_dadd+0x308>
 80010ee:	4640      	mov	r0, r8
 80010f0:	f001 fe8e 	bl	8002e10 <__clzsi2>
 80010f4:	0001      	movs	r1, r0
 80010f6:	3908      	subs	r1, #8
 80010f8:	2220      	movs	r2, #32
 80010fa:	0028      	movs	r0, r5
 80010fc:	4643      	mov	r3, r8
 80010fe:	1a52      	subs	r2, r2, r1
 8001100:	408b      	lsls	r3, r1
 8001102:	40d0      	lsrs	r0, r2
 8001104:	408d      	lsls	r5, r1
 8001106:	4303      	orrs	r3, r0
 8001108:	428e      	cmp	r6, r1
 800110a:	dd00      	ble.n	800110e <__aeabi_dadd+0xce>
 800110c:	e117      	b.n	800133e <__aeabi_dadd+0x2fe>
 800110e:	1b8e      	subs	r6, r1, r6
 8001110:	1c72      	adds	r2, r6, #1
 8001112:	2a1f      	cmp	r2, #31
 8001114:	dd00      	ble.n	8001118 <__aeabi_dadd+0xd8>
 8001116:	e1a7      	b.n	8001468 <__aeabi_dadd+0x428>
 8001118:	2120      	movs	r1, #32
 800111a:	0018      	movs	r0, r3
 800111c:	002e      	movs	r6, r5
 800111e:	1a89      	subs	r1, r1, r2
 8001120:	408d      	lsls	r5, r1
 8001122:	4088      	lsls	r0, r1
 8001124:	40d6      	lsrs	r6, r2
 8001126:	40d3      	lsrs	r3, r2
 8001128:	1e69      	subs	r1, r5, #1
 800112a:	418d      	sbcs	r5, r1
 800112c:	4330      	orrs	r0, r6
 800112e:	4698      	mov	r8, r3
 8001130:	2600      	movs	r6, #0
 8001132:	4305      	orrs	r5, r0
 8001134:	076b      	lsls	r3, r5, #29
 8001136:	d009      	beq.n	800114c <__aeabi_dadd+0x10c>
 8001138:	230f      	movs	r3, #15
 800113a:	402b      	ands	r3, r5
 800113c:	2b04      	cmp	r3, #4
 800113e:	d005      	beq.n	800114c <__aeabi_dadd+0x10c>
 8001140:	1d2b      	adds	r3, r5, #4
 8001142:	42ab      	cmp	r3, r5
 8001144:	41ad      	sbcs	r5, r5
 8001146:	426d      	negs	r5, r5
 8001148:	44a8      	add	r8, r5
 800114a:	001d      	movs	r5, r3
 800114c:	4643      	mov	r3, r8
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	d400      	bmi.n	8001154 <__aeabi_dadd+0x114>
 8001152:	e094      	b.n	800127e <__aeabi_dadd+0x23e>
 8001154:	4b97      	ldr	r3, [pc, #604]	; (80013b4 <__aeabi_dadd+0x374>)
 8001156:	1c72      	adds	r2, r6, #1
 8001158:	429a      	cmp	r2, r3
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x11e>
 800115c:	e09d      	b.n	800129a <__aeabi_dadd+0x25a>
 800115e:	4641      	mov	r1, r8
 8001160:	4b95      	ldr	r3, [pc, #596]	; (80013b8 <__aeabi_dadd+0x378>)
 8001162:	08ed      	lsrs	r5, r5, #3
 8001164:	4019      	ands	r1, r3
 8001166:	000b      	movs	r3, r1
 8001168:	0552      	lsls	r2, r2, #21
 800116a:	0749      	lsls	r1, r1, #29
 800116c:	025b      	lsls	r3, r3, #9
 800116e:	4329      	orrs	r1, r5
 8001170:	0b1b      	lsrs	r3, r3, #12
 8001172:	0d52      	lsrs	r2, r2, #21
 8001174:	0512      	lsls	r2, r2, #20
 8001176:	4313      	orrs	r3, r2
 8001178:	07e4      	lsls	r4, r4, #31
 800117a:	4323      	orrs	r3, r4
 800117c:	0008      	movs	r0, r1
 800117e:	0019      	movs	r1, r3
 8001180:	bce0      	pop	{r5, r6, r7}
 8001182:	46ba      	mov	sl, r7
 8001184:	46b1      	mov	r9, r6
 8001186:	46a8      	mov	r8, r5
 8001188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118a:	2a00      	cmp	r2, #0
 800118c:	d043      	beq.n	8001216 <__aeabi_dadd+0x1d6>
 800118e:	1b8a      	subs	r2, r1, r6
 8001190:	2e00      	cmp	r6, #0
 8001192:	d000      	beq.n	8001196 <__aeabi_dadd+0x156>
 8001194:	e12a      	b.n	80013ec <__aeabi_dadd+0x3ac>
 8001196:	464c      	mov	r4, r9
 8001198:	431c      	orrs	r4, r3
 800119a:	d100      	bne.n	800119e <__aeabi_dadd+0x15e>
 800119c:	e1d1      	b.n	8001542 <__aeabi_dadd+0x502>
 800119e:	1e54      	subs	r4, r2, #1
 80011a0:	2a01      	cmp	r2, #1
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dadd+0x166>
 80011a4:	e21f      	b.n	80015e6 <__aeabi_dadd+0x5a6>
 80011a6:	4d83      	ldr	r5, [pc, #524]	; (80013b4 <__aeabi_dadd+0x374>)
 80011a8:	42aa      	cmp	r2, r5
 80011aa:	d100      	bne.n	80011ae <__aeabi_dadd+0x16e>
 80011ac:	e272      	b.n	8001694 <__aeabi_dadd+0x654>
 80011ae:	0022      	movs	r2, r4
 80011b0:	e123      	b.n	80013fa <__aeabi_dadd+0x3ba>
 80011b2:	2a00      	cmp	r2, #0
 80011b4:	dc00      	bgt.n	80011b8 <__aeabi_dadd+0x178>
 80011b6:	e098      	b.n	80012ea <__aeabi_dadd+0x2aa>
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d042      	beq.n	8001242 <__aeabi_dadd+0x202>
 80011bc:	497d      	ldr	r1, [pc, #500]	; (80013b4 <__aeabi_dadd+0x374>)
 80011be:	428e      	cmp	r6, r1
 80011c0:	d100      	bne.n	80011c4 <__aeabi_dadd+0x184>
 80011c2:	e0da      	b.n	800137a <__aeabi_dadd+0x33a>
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	0028      	movs	r0, r5
 80011c8:	0409      	lsls	r1, r1, #16
 80011ca:	4308      	orrs	r0, r1
 80011cc:	4684      	mov	ip, r0
 80011ce:	2a38      	cmp	r2, #56	; 0x38
 80011d0:	dd00      	ble.n	80011d4 <__aeabi_dadd+0x194>
 80011d2:	e129      	b.n	8001428 <__aeabi_dadd+0x3e8>
 80011d4:	2a1f      	cmp	r2, #31
 80011d6:	dc00      	bgt.n	80011da <__aeabi_dadd+0x19a>
 80011d8:	e187      	b.n	80014ea <__aeabi_dadd+0x4aa>
 80011da:	0011      	movs	r1, r2
 80011dc:	4665      	mov	r5, ip
 80011de:	3920      	subs	r1, #32
 80011e0:	40cd      	lsrs	r5, r1
 80011e2:	2a20      	cmp	r2, #32
 80011e4:	d004      	beq.n	80011f0 <__aeabi_dadd+0x1b0>
 80011e6:	2040      	movs	r0, #64	; 0x40
 80011e8:	4661      	mov	r1, ip
 80011ea:	1a82      	subs	r2, r0, r2
 80011ec:	4091      	lsls	r1, r2
 80011ee:	430f      	orrs	r7, r1
 80011f0:	0039      	movs	r1, r7
 80011f2:	1e4f      	subs	r7, r1, #1
 80011f4:	41b9      	sbcs	r1, r7
 80011f6:	430d      	orrs	r5, r1
 80011f8:	e11b      	b.n	8001432 <__aeabi_dadd+0x3f2>
 80011fa:	0029      	movs	r1, r5
 80011fc:	4339      	orrs	r1, r7
 80011fe:	d100      	bne.n	8001202 <__aeabi_dadd+0x1c2>
 8001200:	e0b5      	b.n	800136e <__aeabi_dadd+0x32e>
 8001202:	1e51      	subs	r1, r2, #1
 8001204:	2a01      	cmp	r2, #1
 8001206:	d100      	bne.n	800120a <__aeabi_dadd+0x1ca>
 8001208:	e1ab      	b.n	8001562 <__aeabi_dadd+0x522>
 800120a:	486a      	ldr	r0, [pc, #424]	; (80013b4 <__aeabi_dadd+0x374>)
 800120c:	4282      	cmp	r2, r0
 800120e:	d100      	bne.n	8001212 <__aeabi_dadd+0x1d2>
 8001210:	e1b2      	b.n	8001578 <__aeabi_dadd+0x538>
 8001212:	000a      	movs	r2, r1
 8001214:	e743      	b.n	800109e <__aeabi_dadd+0x5e>
 8001216:	4969      	ldr	r1, [pc, #420]	; (80013bc <__aeabi_dadd+0x37c>)
 8001218:	1c75      	adds	r5, r6, #1
 800121a:	420d      	tst	r5, r1
 800121c:	d000      	beq.n	8001220 <__aeabi_dadd+0x1e0>
 800121e:	e0cf      	b.n	80013c0 <__aeabi_dadd+0x380>
 8001220:	2e00      	cmp	r6, #0
 8001222:	d000      	beq.n	8001226 <__aeabi_dadd+0x1e6>
 8001224:	e193      	b.n	800154e <__aeabi_dadd+0x50e>
 8001226:	4649      	mov	r1, r9
 8001228:	4319      	orrs	r1, r3
 800122a:	d100      	bne.n	800122e <__aeabi_dadd+0x1ee>
 800122c:	e1d1      	b.n	80015d2 <__aeabi_dadd+0x592>
 800122e:	4661      	mov	r1, ip
 8001230:	4339      	orrs	r1, r7
 8001232:	d000      	beq.n	8001236 <__aeabi_dadd+0x1f6>
 8001234:	e1e3      	b.n	80015fe <__aeabi_dadd+0x5be>
 8001236:	4649      	mov	r1, r9
 8001238:	0758      	lsls	r0, r3, #29
 800123a:	08c9      	lsrs	r1, r1, #3
 800123c:	4301      	orrs	r1, r0
 800123e:	08db      	lsrs	r3, r3, #3
 8001240:	e026      	b.n	8001290 <__aeabi_dadd+0x250>
 8001242:	0029      	movs	r1, r5
 8001244:	4339      	orrs	r1, r7
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x20a>
 8001248:	e091      	b.n	800136e <__aeabi_dadd+0x32e>
 800124a:	1e51      	subs	r1, r2, #1
 800124c:	2a01      	cmp	r2, #1
 800124e:	d005      	beq.n	800125c <__aeabi_dadd+0x21c>
 8001250:	4858      	ldr	r0, [pc, #352]	; (80013b4 <__aeabi_dadd+0x374>)
 8001252:	4282      	cmp	r2, r0
 8001254:	d100      	bne.n	8001258 <__aeabi_dadd+0x218>
 8001256:	e18f      	b.n	8001578 <__aeabi_dadd+0x538>
 8001258:	000a      	movs	r2, r1
 800125a:	e7b8      	b.n	80011ce <__aeabi_dadd+0x18e>
 800125c:	003d      	movs	r5, r7
 800125e:	444d      	add	r5, r9
 8001260:	454d      	cmp	r5, r9
 8001262:	4189      	sbcs	r1, r1
 8001264:	4463      	add	r3, ip
 8001266:	4698      	mov	r8, r3
 8001268:	4249      	negs	r1, r1
 800126a:	4488      	add	r8, r1
 800126c:	4643      	mov	r3, r8
 800126e:	2602      	movs	r6, #2
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	d500      	bpl.n	8001276 <__aeabi_dadd+0x236>
 8001274:	e0eb      	b.n	800144e <__aeabi_dadd+0x40e>
 8001276:	3e01      	subs	r6, #1
 8001278:	076b      	lsls	r3, r5, #29
 800127a:	d000      	beq.n	800127e <__aeabi_dadd+0x23e>
 800127c:	e75c      	b.n	8001138 <__aeabi_dadd+0xf8>
 800127e:	4643      	mov	r3, r8
 8001280:	08e9      	lsrs	r1, r5, #3
 8001282:	075a      	lsls	r2, r3, #29
 8001284:	4311      	orrs	r1, r2
 8001286:	0032      	movs	r2, r6
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	484a      	ldr	r0, [pc, #296]	; (80013b4 <__aeabi_dadd+0x374>)
 800128c:	4282      	cmp	r2, r0
 800128e:	d021      	beq.n	80012d4 <__aeabi_dadd+0x294>
 8001290:	031b      	lsls	r3, r3, #12
 8001292:	0552      	lsls	r2, r2, #21
 8001294:	0b1b      	lsrs	r3, r3, #12
 8001296:	0d52      	lsrs	r2, r2, #21
 8001298:	e76c      	b.n	8001174 <__aeabi_dadd+0x134>
 800129a:	2300      	movs	r3, #0
 800129c:	2100      	movs	r1, #0
 800129e:	e769      	b.n	8001174 <__aeabi_dadd+0x134>
 80012a0:	002a      	movs	r2, r5
 80012a2:	433a      	orrs	r2, r7
 80012a4:	d069      	beq.n	800137a <__aeabi_dadd+0x33a>
 80012a6:	464a      	mov	r2, r9
 80012a8:	0758      	lsls	r0, r3, #29
 80012aa:	08d1      	lsrs	r1, r2, #3
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	031b      	lsls	r3, r3, #12
 80012b2:	4308      	orrs	r0, r1
 80012b4:	421a      	tst	r2, r3
 80012b6:	d007      	beq.n	80012c8 <__aeabi_dadd+0x288>
 80012b8:	0029      	movs	r1, r5
 80012ba:	08ed      	lsrs	r5, r5, #3
 80012bc:	421d      	tst	r5, r3
 80012be:	d103      	bne.n	80012c8 <__aeabi_dadd+0x288>
 80012c0:	002a      	movs	r2, r5
 80012c2:	08ff      	lsrs	r7, r7, #3
 80012c4:	0748      	lsls	r0, r1, #29
 80012c6:	4338      	orrs	r0, r7
 80012c8:	0f43      	lsrs	r3, r0, #29
 80012ca:	00c1      	lsls	r1, r0, #3
 80012cc:	075b      	lsls	r3, r3, #29
 80012ce:	08c9      	lsrs	r1, r1, #3
 80012d0:	4319      	orrs	r1, r3
 80012d2:	0013      	movs	r3, r2
 80012d4:	000a      	movs	r2, r1
 80012d6:	431a      	orrs	r2, r3
 80012d8:	d100      	bne.n	80012dc <__aeabi_dadd+0x29c>
 80012da:	e213      	b.n	8001704 <__aeabi_dadd+0x6c4>
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	0312      	lsls	r2, r2, #12
 80012e0:	4313      	orrs	r3, r2
 80012e2:	031b      	lsls	r3, r3, #12
 80012e4:	4a33      	ldr	r2, [pc, #204]	; (80013b4 <__aeabi_dadd+0x374>)
 80012e6:	0b1b      	lsrs	r3, r3, #12
 80012e8:	e744      	b.n	8001174 <__aeabi_dadd+0x134>
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	d04b      	beq.n	8001386 <__aeabi_dadd+0x346>
 80012ee:	1b8a      	subs	r2, r1, r6
 80012f0:	2e00      	cmp	r6, #0
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x2b6>
 80012f4:	e0e7      	b.n	80014c6 <__aeabi_dadd+0x486>
 80012f6:	482f      	ldr	r0, [pc, #188]	; (80013b4 <__aeabi_dadd+0x374>)
 80012f8:	4281      	cmp	r1, r0
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0x2be>
 80012fc:	e195      	b.n	800162a <__aeabi_dadd+0x5ea>
 80012fe:	2080      	movs	r0, #128	; 0x80
 8001300:	0400      	lsls	r0, r0, #16
 8001302:	4303      	orrs	r3, r0
 8001304:	2a38      	cmp	r2, #56	; 0x38
 8001306:	dd00      	ble.n	800130a <__aeabi_dadd+0x2ca>
 8001308:	e143      	b.n	8001592 <__aeabi_dadd+0x552>
 800130a:	2a1f      	cmp	r2, #31
 800130c:	dd00      	ble.n	8001310 <__aeabi_dadd+0x2d0>
 800130e:	e1db      	b.n	80016c8 <__aeabi_dadd+0x688>
 8001310:	2020      	movs	r0, #32
 8001312:	001d      	movs	r5, r3
 8001314:	464e      	mov	r6, r9
 8001316:	1a80      	subs	r0, r0, r2
 8001318:	4085      	lsls	r5, r0
 800131a:	40d6      	lsrs	r6, r2
 800131c:	4335      	orrs	r5, r6
 800131e:	464e      	mov	r6, r9
 8001320:	4086      	lsls	r6, r0
 8001322:	0030      	movs	r0, r6
 8001324:	40d3      	lsrs	r3, r2
 8001326:	1e46      	subs	r6, r0, #1
 8001328:	41b0      	sbcs	r0, r6
 800132a:	449c      	add	ip, r3
 800132c:	4305      	orrs	r5, r0
 800132e:	19ed      	adds	r5, r5, r7
 8001330:	42bd      	cmp	r5, r7
 8001332:	419b      	sbcs	r3, r3
 8001334:	425b      	negs	r3, r3
 8001336:	4463      	add	r3, ip
 8001338:	4698      	mov	r8, r3
 800133a:	000e      	movs	r6, r1
 800133c:	e07f      	b.n	800143e <__aeabi_dadd+0x3fe>
 800133e:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <__aeabi_dadd+0x378>)
 8001340:	1a76      	subs	r6, r6, r1
 8001342:	4013      	ands	r3, r2
 8001344:	4698      	mov	r8, r3
 8001346:	e6f5      	b.n	8001134 <__aeabi_dadd+0xf4>
 8001348:	0028      	movs	r0, r5
 800134a:	f001 fd61 	bl	8002e10 <__clzsi2>
 800134e:	0001      	movs	r1, r0
 8001350:	3118      	adds	r1, #24
 8001352:	291f      	cmp	r1, #31
 8001354:	dc00      	bgt.n	8001358 <__aeabi_dadd+0x318>
 8001356:	e6cf      	b.n	80010f8 <__aeabi_dadd+0xb8>
 8001358:	002b      	movs	r3, r5
 800135a:	3808      	subs	r0, #8
 800135c:	4083      	lsls	r3, r0
 800135e:	2500      	movs	r5, #0
 8001360:	e6d2      	b.n	8001108 <__aeabi_dadd+0xc8>
 8001362:	4662      	mov	r2, ip
 8001364:	433a      	orrs	r2, r7
 8001366:	0011      	movs	r1, r2
 8001368:	1e4f      	subs	r7, r1, #1
 800136a:	41b9      	sbcs	r1, r7
 800136c:	e6ac      	b.n	80010c8 <__aeabi_dadd+0x88>
 800136e:	4649      	mov	r1, r9
 8001370:	0758      	lsls	r0, r3, #29
 8001372:	08c9      	lsrs	r1, r1, #3
 8001374:	4301      	orrs	r1, r0
 8001376:	08db      	lsrs	r3, r3, #3
 8001378:	e787      	b.n	800128a <__aeabi_dadd+0x24a>
 800137a:	4649      	mov	r1, r9
 800137c:	075a      	lsls	r2, r3, #29
 800137e:	08c9      	lsrs	r1, r1, #3
 8001380:	4311      	orrs	r1, r2
 8001382:	08db      	lsrs	r3, r3, #3
 8001384:	e7a6      	b.n	80012d4 <__aeabi_dadd+0x294>
 8001386:	490d      	ldr	r1, [pc, #52]	; (80013bc <__aeabi_dadd+0x37c>)
 8001388:	1c70      	adds	r0, r6, #1
 800138a:	4208      	tst	r0, r1
 800138c:	d000      	beq.n	8001390 <__aeabi_dadd+0x350>
 800138e:	e0bb      	b.n	8001508 <__aeabi_dadd+0x4c8>
 8001390:	2e00      	cmp	r6, #0
 8001392:	d000      	beq.n	8001396 <__aeabi_dadd+0x356>
 8001394:	e114      	b.n	80015c0 <__aeabi_dadd+0x580>
 8001396:	4649      	mov	r1, r9
 8001398:	4319      	orrs	r1, r3
 800139a:	d100      	bne.n	800139e <__aeabi_dadd+0x35e>
 800139c:	e175      	b.n	800168a <__aeabi_dadd+0x64a>
 800139e:	0029      	movs	r1, r5
 80013a0:	4339      	orrs	r1, r7
 80013a2:	d000      	beq.n	80013a6 <__aeabi_dadd+0x366>
 80013a4:	e17e      	b.n	80016a4 <__aeabi_dadd+0x664>
 80013a6:	4649      	mov	r1, r9
 80013a8:	0758      	lsls	r0, r3, #29
 80013aa:	08c9      	lsrs	r1, r1, #3
 80013ac:	4301      	orrs	r1, r0
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	e76e      	b.n	8001290 <__aeabi_dadd+0x250>
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	000007ff 	.word	0x000007ff
 80013b8:	ff7fffff 	.word	0xff7fffff
 80013bc:	000007fe 	.word	0x000007fe
 80013c0:	4649      	mov	r1, r9
 80013c2:	1bcd      	subs	r5, r1, r7
 80013c4:	4661      	mov	r1, ip
 80013c6:	1a58      	subs	r0, r3, r1
 80013c8:	45a9      	cmp	r9, r5
 80013ca:	4189      	sbcs	r1, r1
 80013cc:	4249      	negs	r1, r1
 80013ce:	4688      	mov	r8, r1
 80013d0:	0001      	movs	r1, r0
 80013d2:	4640      	mov	r0, r8
 80013d4:	1a09      	subs	r1, r1, r0
 80013d6:	4688      	mov	r8, r1
 80013d8:	0209      	lsls	r1, r1, #8
 80013da:	d500      	bpl.n	80013de <__aeabi_dadd+0x39e>
 80013dc:	e0a6      	b.n	800152c <__aeabi_dadd+0x4ec>
 80013de:	4641      	mov	r1, r8
 80013e0:	4329      	orrs	r1, r5
 80013e2:	d000      	beq.n	80013e6 <__aeabi_dadd+0x3a6>
 80013e4:	e67f      	b.n	80010e6 <__aeabi_dadd+0xa6>
 80013e6:	2300      	movs	r3, #0
 80013e8:	2400      	movs	r4, #0
 80013ea:	e751      	b.n	8001290 <__aeabi_dadd+0x250>
 80013ec:	4cc7      	ldr	r4, [pc, #796]	; (800170c <__aeabi_dadd+0x6cc>)
 80013ee:	42a1      	cmp	r1, r4
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dadd+0x3b4>
 80013f2:	e0c7      	b.n	8001584 <__aeabi_dadd+0x544>
 80013f4:	2480      	movs	r4, #128	; 0x80
 80013f6:	0424      	lsls	r4, r4, #16
 80013f8:	4323      	orrs	r3, r4
 80013fa:	2a38      	cmp	r2, #56	; 0x38
 80013fc:	dc54      	bgt.n	80014a8 <__aeabi_dadd+0x468>
 80013fe:	2a1f      	cmp	r2, #31
 8001400:	dd00      	ble.n	8001404 <__aeabi_dadd+0x3c4>
 8001402:	e0cc      	b.n	800159e <__aeabi_dadd+0x55e>
 8001404:	2420      	movs	r4, #32
 8001406:	4648      	mov	r0, r9
 8001408:	1aa4      	subs	r4, r4, r2
 800140a:	001d      	movs	r5, r3
 800140c:	464e      	mov	r6, r9
 800140e:	40a0      	lsls	r0, r4
 8001410:	40d6      	lsrs	r6, r2
 8001412:	40a5      	lsls	r5, r4
 8001414:	0004      	movs	r4, r0
 8001416:	40d3      	lsrs	r3, r2
 8001418:	4662      	mov	r2, ip
 800141a:	4335      	orrs	r5, r6
 800141c:	1e66      	subs	r6, r4, #1
 800141e:	41b4      	sbcs	r4, r6
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	469c      	mov	ip, r3
 8001424:	4325      	orrs	r5, r4
 8001426:	e044      	b.n	80014b2 <__aeabi_dadd+0x472>
 8001428:	4662      	mov	r2, ip
 800142a:	433a      	orrs	r2, r7
 800142c:	0015      	movs	r5, r2
 800142e:	1e6f      	subs	r7, r5, #1
 8001430:	41bd      	sbcs	r5, r7
 8001432:	444d      	add	r5, r9
 8001434:	454d      	cmp	r5, r9
 8001436:	4189      	sbcs	r1, r1
 8001438:	4249      	negs	r1, r1
 800143a:	4688      	mov	r8, r1
 800143c:	4498      	add	r8, r3
 800143e:	4643      	mov	r3, r8
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	d400      	bmi.n	8001446 <__aeabi_dadd+0x406>
 8001444:	e718      	b.n	8001278 <__aeabi_dadd+0x238>
 8001446:	4bb1      	ldr	r3, [pc, #708]	; (800170c <__aeabi_dadd+0x6cc>)
 8001448:	3601      	adds	r6, #1
 800144a:	429e      	cmp	r6, r3
 800144c:	d049      	beq.n	80014e2 <__aeabi_dadd+0x4a2>
 800144e:	4642      	mov	r2, r8
 8001450:	4baf      	ldr	r3, [pc, #700]	; (8001710 <__aeabi_dadd+0x6d0>)
 8001452:	2101      	movs	r1, #1
 8001454:	401a      	ands	r2, r3
 8001456:	0013      	movs	r3, r2
 8001458:	086a      	lsrs	r2, r5, #1
 800145a:	400d      	ands	r5, r1
 800145c:	4315      	orrs	r5, r2
 800145e:	07d9      	lsls	r1, r3, #31
 8001460:	085b      	lsrs	r3, r3, #1
 8001462:	4698      	mov	r8, r3
 8001464:	430d      	orrs	r5, r1
 8001466:	e665      	b.n	8001134 <__aeabi_dadd+0xf4>
 8001468:	0018      	movs	r0, r3
 800146a:	3e1f      	subs	r6, #31
 800146c:	40f0      	lsrs	r0, r6
 800146e:	2a20      	cmp	r2, #32
 8001470:	d003      	beq.n	800147a <__aeabi_dadd+0x43a>
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	1a8a      	subs	r2, r1, r2
 8001476:	4093      	lsls	r3, r2
 8001478:	431d      	orrs	r5, r3
 800147a:	1e69      	subs	r1, r5, #1
 800147c:	418d      	sbcs	r5, r1
 800147e:	2300      	movs	r3, #0
 8001480:	2600      	movs	r6, #0
 8001482:	4698      	mov	r8, r3
 8001484:	4305      	orrs	r5, r0
 8001486:	e6f7      	b.n	8001278 <__aeabi_dadd+0x238>
 8001488:	0011      	movs	r1, r2
 800148a:	4665      	mov	r5, ip
 800148c:	3920      	subs	r1, #32
 800148e:	40cd      	lsrs	r5, r1
 8001490:	2a20      	cmp	r2, #32
 8001492:	d004      	beq.n	800149e <__aeabi_dadd+0x45e>
 8001494:	2040      	movs	r0, #64	; 0x40
 8001496:	4661      	mov	r1, ip
 8001498:	1a82      	subs	r2, r0, r2
 800149a:	4091      	lsls	r1, r2
 800149c:	430f      	orrs	r7, r1
 800149e:	0039      	movs	r1, r7
 80014a0:	1e4f      	subs	r7, r1, #1
 80014a2:	41b9      	sbcs	r1, r7
 80014a4:	4329      	orrs	r1, r5
 80014a6:	e60f      	b.n	80010c8 <__aeabi_dadd+0x88>
 80014a8:	464a      	mov	r2, r9
 80014aa:	4313      	orrs	r3, r2
 80014ac:	001d      	movs	r5, r3
 80014ae:	1e6b      	subs	r3, r5, #1
 80014b0:	419d      	sbcs	r5, r3
 80014b2:	1b7d      	subs	r5, r7, r5
 80014b4:	42af      	cmp	r7, r5
 80014b6:	419b      	sbcs	r3, r3
 80014b8:	4662      	mov	r2, ip
 80014ba:	425b      	negs	r3, r3
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	4698      	mov	r8, r3
 80014c0:	4654      	mov	r4, sl
 80014c2:	000e      	movs	r6, r1
 80014c4:	e607      	b.n	80010d6 <__aeabi_dadd+0x96>
 80014c6:	4648      	mov	r0, r9
 80014c8:	4318      	orrs	r0, r3
 80014ca:	d100      	bne.n	80014ce <__aeabi_dadd+0x48e>
 80014cc:	e0b3      	b.n	8001636 <__aeabi_dadd+0x5f6>
 80014ce:	1e50      	subs	r0, r2, #1
 80014d0:	2a01      	cmp	r2, #1
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x496>
 80014d4:	e10d      	b.n	80016f2 <__aeabi_dadd+0x6b2>
 80014d6:	4d8d      	ldr	r5, [pc, #564]	; (800170c <__aeabi_dadd+0x6cc>)
 80014d8:	42aa      	cmp	r2, r5
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x49e>
 80014dc:	e0a5      	b.n	800162a <__aeabi_dadd+0x5ea>
 80014de:	0002      	movs	r2, r0
 80014e0:	e710      	b.n	8001304 <__aeabi_dadd+0x2c4>
 80014e2:	0032      	movs	r2, r6
 80014e4:	2300      	movs	r3, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	e644      	b.n	8001174 <__aeabi_dadd+0x134>
 80014ea:	2120      	movs	r1, #32
 80014ec:	0038      	movs	r0, r7
 80014ee:	1a89      	subs	r1, r1, r2
 80014f0:	4665      	mov	r5, ip
 80014f2:	408f      	lsls	r7, r1
 80014f4:	408d      	lsls	r5, r1
 80014f6:	40d0      	lsrs	r0, r2
 80014f8:	1e79      	subs	r1, r7, #1
 80014fa:	418f      	sbcs	r7, r1
 80014fc:	4305      	orrs	r5, r0
 80014fe:	433d      	orrs	r5, r7
 8001500:	4667      	mov	r7, ip
 8001502:	40d7      	lsrs	r7, r2
 8001504:	19db      	adds	r3, r3, r7
 8001506:	e794      	b.n	8001432 <__aeabi_dadd+0x3f2>
 8001508:	4a80      	ldr	r2, [pc, #512]	; (800170c <__aeabi_dadd+0x6cc>)
 800150a:	4290      	cmp	r0, r2
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x4d0>
 800150e:	e0ec      	b.n	80016ea <__aeabi_dadd+0x6aa>
 8001510:	0039      	movs	r1, r7
 8001512:	4449      	add	r1, r9
 8001514:	4549      	cmp	r1, r9
 8001516:	4192      	sbcs	r2, r2
 8001518:	4463      	add	r3, ip
 800151a:	4252      	negs	r2, r2
 800151c:	189b      	adds	r3, r3, r2
 800151e:	07dd      	lsls	r5, r3, #31
 8001520:	0849      	lsrs	r1, r1, #1
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	4698      	mov	r8, r3
 8001526:	0006      	movs	r6, r0
 8001528:	430d      	orrs	r5, r1
 800152a:	e6a5      	b.n	8001278 <__aeabi_dadd+0x238>
 800152c:	464a      	mov	r2, r9
 800152e:	1abd      	subs	r5, r7, r2
 8001530:	42af      	cmp	r7, r5
 8001532:	4189      	sbcs	r1, r1
 8001534:	4662      	mov	r2, ip
 8001536:	4249      	negs	r1, r1
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	1a5b      	subs	r3, r3, r1
 800153c:	4698      	mov	r8, r3
 800153e:	4654      	mov	r4, sl
 8001540:	e5d1      	b.n	80010e6 <__aeabi_dadd+0xa6>
 8001542:	076c      	lsls	r4, r5, #29
 8001544:	08f9      	lsrs	r1, r7, #3
 8001546:	4321      	orrs	r1, r4
 8001548:	08eb      	lsrs	r3, r5, #3
 800154a:	0004      	movs	r4, r0
 800154c:	e69d      	b.n	800128a <__aeabi_dadd+0x24a>
 800154e:	464a      	mov	r2, r9
 8001550:	431a      	orrs	r2, r3
 8001552:	d175      	bne.n	8001640 <__aeabi_dadd+0x600>
 8001554:	4661      	mov	r1, ip
 8001556:	4339      	orrs	r1, r7
 8001558:	d114      	bne.n	8001584 <__aeabi_dadd+0x544>
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	2400      	movs	r4, #0
 800155e:	031b      	lsls	r3, r3, #12
 8001560:	e6bc      	b.n	80012dc <__aeabi_dadd+0x29c>
 8001562:	464a      	mov	r2, r9
 8001564:	1bd5      	subs	r5, r2, r7
 8001566:	45a9      	cmp	r9, r5
 8001568:	4189      	sbcs	r1, r1
 800156a:	4662      	mov	r2, ip
 800156c:	4249      	negs	r1, r1
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	1a5b      	subs	r3, r3, r1
 8001572:	4698      	mov	r8, r3
 8001574:	2601      	movs	r6, #1
 8001576:	e5ae      	b.n	80010d6 <__aeabi_dadd+0x96>
 8001578:	464a      	mov	r2, r9
 800157a:	08d1      	lsrs	r1, r2, #3
 800157c:	075a      	lsls	r2, r3, #29
 800157e:	4311      	orrs	r1, r2
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	e6a7      	b.n	80012d4 <__aeabi_dadd+0x294>
 8001584:	4663      	mov	r3, ip
 8001586:	08f9      	lsrs	r1, r7, #3
 8001588:	075a      	lsls	r2, r3, #29
 800158a:	4654      	mov	r4, sl
 800158c:	4311      	orrs	r1, r2
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	e6a0      	b.n	80012d4 <__aeabi_dadd+0x294>
 8001592:	464a      	mov	r2, r9
 8001594:	4313      	orrs	r3, r2
 8001596:	001d      	movs	r5, r3
 8001598:	1e6b      	subs	r3, r5, #1
 800159a:	419d      	sbcs	r5, r3
 800159c:	e6c7      	b.n	800132e <__aeabi_dadd+0x2ee>
 800159e:	0014      	movs	r4, r2
 80015a0:	001e      	movs	r6, r3
 80015a2:	3c20      	subs	r4, #32
 80015a4:	40e6      	lsrs	r6, r4
 80015a6:	2a20      	cmp	r2, #32
 80015a8:	d005      	beq.n	80015b6 <__aeabi_dadd+0x576>
 80015aa:	2440      	movs	r4, #64	; 0x40
 80015ac:	1aa2      	subs	r2, r4, r2
 80015ae:	4093      	lsls	r3, r2
 80015b0:	464a      	mov	r2, r9
 80015b2:	431a      	orrs	r2, r3
 80015b4:	4691      	mov	r9, r2
 80015b6:	464d      	mov	r5, r9
 80015b8:	1e6b      	subs	r3, r5, #1
 80015ba:	419d      	sbcs	r5, r3
 80015bc:	4335      	orrs	r5, r6
 80015be:	e778      	b.n	80014b2 <__aeabi_dadd+0x472>
 80015c0:	464a      	mov	r2, r9
 80015c2:	431a      	orrs	r2, r3
 80015c4:	d000      	beq.n	80015c8 <__aeabi_dadd+0x588>
 80015c6:	e66b      	b.n	80012a0 <__aeabi_dadd+0x260>
 80015c8:	076b      	lsls	r3, r5, #29
 80015ca:	08f9      	lsrs	r1, r7, #3
 80015cc:	4319      	orrs	r1, r3
 80015ce:	08eb      	lsrs	r3, r5, #3
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x294>
 80015d2:	4661      	mov	r1, ip
 80015d4:	4339      	orrs	r1, r7
 80015d6:	d054      	beq.n	8001682 <__aeabi_dadd+0x642>
 80015d8:	4663      	mov	r3, ip
 80015da:	08f9      	lsrs	r1, r7, #3
 80015dc:	075c      	lsls	r4, r3, #29
 80015de:	4321      	orrs	r1, r4
 80015e0:	08db      	lsrs	r3, r3, #3
 80015e2:	0004      	movs	r4, r0
 80015e4:	e654      	b.n	8001290 <__aeabi_dadd+0x250>
 80015e6:	464a      	mov	r2, r9
 80015e8:	1abd      	subs	r5, r7, r2
 80015ea:	42af      	cmp	r7, r5
 80015ec:	4189      	sbcs	r1, r1
 80015ee:	4662      	mov	r2, ip
 80015f0:	4249      	negs	r1, r1
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	1a5b      	subs	r3, r3, r1
 80015f6:	4698      	mov	r8, r3
 80015f8:	0004      	movs	r4, r0
 80015fa:	2601      	movs	r6, #1
 80015fc:	e56b      	b.n	80010d6 <__aeabi_dadd+0x96>
 80015fe:	464a      	mov	r2, r9
 8001600:	1bd5      	subs	r5, r2, r7
 8001602:	45a9      	cmp	r9, r5
 8001604:	4189      	sbcs	r1, r1
 8001606:	4662      	mov	r2, ip
 8001608:	4249      	negs	r1, r1
 800160a:	1a9a      	subs	r2, r3, r2
 800160c:	1a52      	subs	r2, r2, r1
 800160e:	4690      	mov	r8, r2
 8001610:	0212      	lsls	r2, r2, #8
 8001612:	d532      	bpl.n	800167a <__aeabi_dadd+0x63a>
 8001614:	464a      	mov	r2, r9
 8001616:	1abd      	subs	r5, r7, r2
 8001618:	42af      	cmp	r7, r5
 800161a:	4189      	sbcs	r1, r1
 800161c:	4662      	mov	r2, ip
 800161e:	4249      	negs	r1, r1
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	1a5b      	subs	r3, r3, r1
 8001624:	4698      	mov	r8, r3
 8001626:	0004      	movs	r4, r0
 8001628:	e584      	b.n	8001134 <__aeabi_dadd+0xf4>
 800162a:	4663      	mov	r3, ip
 800162c:	08f9      	lsrs	r1, r7, #3
 800162e:	075a      	lsls	r2, r3, #29
 8001630:	4311      	orrs	r1, r2
 8001632:	08db      	lsrs	r3, r3, #3
 8001634:	e64e      	b.n	80012d4 <__aeabi_dadd+0x294>
 8001636:	08f9      	lsrs	r1, r7, #3
 8001638:	0768      	lsls	r0, r5, #29
 800163a:	4301      	orrs	r1, r0
 800163c:	08eb      	lsrs	r3, r5, #3
 800163e:	e624      	b.n	800128a <__aeabi_dadd+0x24a>
 8001640:	4662      	mov	r2, ip
 8001642:	433a      	orrs	r2, r7
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x608>
 8001646:	e698      	b.n	800137a <__aeabi_dadd+0x33a>
 8001648:	464a      	mov	r2, r9
 800164a:	08d1      	lsrs	r1, r2, #3
 800164c:	075a      	lsls	r2, r3, #29
 800164e:	4311      	orrs	r1, r2
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	031b      	lsls	r3, r3, #12
 8001656:	421a      	tst	r2, r3
 8001658:	d008      	beq.n	800166c <__aeabi_dadd+0x62c>
 800165a:	4660      	mov	r0, ip
 800165c:	08c5      	lsrs	r5, r0, #3
 800165e:	421d      	tst	r5, r3
 8001660:	d104      	bne.n	800166c <__aeabi_dadd+0x62c>
 8001662:	4654      	mov	r4, sl
 8001664:	002a      	movs	r2, r5
 8001666:	08f9      	lsrs	r1, r7, #3
 8001668:	0743      	lsls	r3, r0, #29
 800166a:	4319      	orrs	r1, r3
 800166c:	0f4b      	lsrs	r3, r1, #29
 800166e:	00c9      	lsls	r1, r1, #3
 8001670:	075b      	lsls	r3, r3, #29
 8001672:	08c9      	lsrs	r1, r1, #3
 8001674:	4319      	orrs	r1, r3
 8001676:	0013      	movs	r3, r2
 8001678:	e62c      	b.n	80012d4 <__aeabi_dadd+0x294>
 800167a:	4641      	mov	r1, r8
 800167c:	4329      	orrs	r1, r5
 800167e:	d000      	beq.n	8001682 <__aeabi_dadd+0x642>
 8001680:	e5fa      	b.n	8001278 <__aeabi_dadd+0x238>
 8001682:	2300      	movs	r3, #0
 8001684:	000a      	movs	r2, r1
 8001686:	2400      	movs	r4, #0
 8001688:	e602      	b.n	8001290 <__aeabi_dadd+0x250>
 800168a:	076b      	lsls	r3, r5, #29
 800168c:	08f9      	lsrs	r1, r7, #3
 800168e:	4319      	orrs	r1, r3
 8001690:	08eb      	lsrs	r3, r5, #3
 8001692:	e5fd      	b.n	8001290 <__aeabi_dadd+0x250>
 8001694:	4663      	mov	r3, ip
 8001696:	08f9      	lsrs	r1, r7, #3
 8001698:	075b      	lsls	r3, r3, #29
 800169a:	4319      	orrs	r1, r3
 800169c:	4663      	mov	r3, ip
 800169e:	0004      	movs	r4, r0
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	e617      	b.n	80012d4 <__aeabi_dadd+0x294>
 80016a4:	003d      	movs	r5, r7
 80016a6:	444d      	add	r5, r9
 80016a8:	4463      	add	r3, ip
 80016aa:	454d      	cmp	r5, r9
 80016ac:	4189      	sbcs	r1, r1
 80016ae:	4698      	mov	r8, r3
 80016b0:	4249      	negs	r1, r1
 80016b2:	4488      	add	r8, r1
 80016b4:	4643      	mov	r3, r8
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	d400      	bmi.n	80016bc <__aeabi_dadd+0x67c>
 80016ba:	e5dd      	b.n	8001278 <__aeabi_dadd+0x238>
 80016bc:	4642      	mov	r2, r8
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <__aeabi_dadd+0x6d0>)
 80016c0:	2601      	movs	r6, #1
 80016c2:	401a      	ands	r2, r3
 80016c4:	4690      	mov	r8, r2
 80016c6:	e5d7      	b.n	8001278 <__aeabi_dadd+0x238>
 80016c8:	0010      	movs	r0, r2
 80016ca:	001e      	movs	r6, r3
 80016cc:	3820      	subs	r0, #32
 80016ce:	40c6      	lsrs	r6, r0
 80016d0:	2a20      	cmp	r2, #32
 80016d2:	d005      	beq.n	80016e0 <__aeabi_dadd+0x6a0>
 80016d4:	2040      	movs	r0, #64	; 0x40
 80016d6:	1a82      	subs	r2, r0, r2
 80016d8:	4093      	lsls	r3, r2
 80016da:	464a      	mov	r2, r9
 80016dc:	431a      	orrs	r2, r3
 80016de:	4691      	mov	r9, r2
 80016e0:	464d      	mov	r5, r9
 80016e2:	1e6b      	subs	r3, r5, #1
 80016e4:	419d      	sbcs	r5, r3
 80016e6:	4335      	orrs	r5, r6
 80016e8:	e621      	b.n	800132e <__aeabi_dadd+0x2ee>
 80016ea:	0002      	movs	r2, r0
 80016ec:	2300      	movs	r3, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	e540      	b.n	8001174 <__aeabi_dadd+0x134>
 80016f2:	464a      	mov	r2, r9
 80016f4:	19d5      	adds	r5, r2, r7
 80016f6:	42bd      	cmp	r5, r7
 80016f8:	4189      	sbcs	r1, r1
 80016fa:	4463      	add	r3, ip
 80016fc:	4698      	mov	r8, r3
 80016fe:	4249      	negs	r1, r1
 8001700:	4488      	add	r8, r1
 8001702:	e5b3      	b.n	800126c <__aeabi_dadd+0x22c>
 8001704:	2100      	movs	r1, #0
 8001706:	4a01      	ldr	r2, [pc, #4]	; (800170c <__aeabi_dadd+0x6cc>)
 8001708:	000b      	movs	r3, r1
 800170a:	e533      	b.n	8001174 <__aeabi_dadd+0x134>
 800170c:	000007ff 	.word	0x000007ff
 8001710:	ff7fffff 	.word	0xff7fffff

08001714 <__aeabi_ddiv>:
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	4657      	mov	r7, sl
 8001718:	464e      	mov	r6, r9
 800171a:	4645      	mov	r5, r8
 800171c:	46de      	mov	lr, fp
 800171e:	b5e0      	push	{r5, r6, r7, lr}
 8001720:	4681      	mov	r9, r0
 8001722:	0005      	movs	r5, r0
 8001724:	030c      	lsls	r4, r1, #12
 8001726:	0048      	lsls	r0, r1, #1
 8001728:	4692      	mov	sl, r2
 800172a:	001f      	movs	r7, r3
 800172c:	b085      	sub	sp, #20
 800172e:	0b24      	lsrs	r4, r4, #12
 8001730:	0d40      	lsrs	r0, r0, #21
 8001732:	0fce      	lsrs	r6, r1, #31
 8001734:	2800      	cmp	r0, #0
 8001736:	d059      	beq.n	80017ec <__aeabi_ddiv+0xd8>
 8001738:	4b87      	ldr	r3, [pc, #540]	; (8001958 <__aeabi_ddiv+0x244>)
 800173a:	4298      	cmp	r0, r3
 800173c:	d100      	bne.n	8001740 <__aeabi_ddiv+0x2c>
 800173e:	e098      	b.n	8001872 <__aeabi_ddiv+0x15e>
 8001740:	0f6b      	lsrs	r3, r5, #29
 8001742:	00e4      	lsls	r4, r4, #3
 8001744:	431c      	orrs	r4, r3
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	4323      	orrs	r3, r4
 800174c:	4698      	mov	r8, r3
 800174e:	4b83      	ldr	r3, [pc, #524]	; (800195c <__aeabi_ddiv+0x248>)
 8001750:	00ed      	lsls	r5, r5, #3
 8001752:	469b      	mov	fp, r3
 8001754:	2300      	movs	r3, #0
 8001756:	4699      	mov	r9, r3
 8001758:	4483      	add	fp, r0
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	033c      	lsls	r4, r7, #12
 800175e:	007b      	lsls	r3, r7, #1
 8001760:	4650      	mov	r0, sl
 8001762:	0b24      	lsrs	r4, r4, #12
 8001764:	0d5b      	lsrs	r3, r3, #21
 8001766:	0fff      	lsrs	r7, r7, #31
 8001768:	2b00      	cmp	r3, #0
 800176a:	d067      	beq.n	800183c <__aeabi_ddiv+0x128>
 800176c:	4a7a      	ldr	r2, [pc, #488]	; (8001958 <__aeabi_ddiv+0x244>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d018      	beq.n	80017a4 <__aeabi_ddiv+0x90>
 8001772:	497a      	ldr	r1, [pc, #488]	; (800195c <__aeabi_ddiv+0x248>)
 8001774:	0f42      	lsrs	r2, r0, #29
 8001776:	468c      	mov	ip, r1
 8001778:	00e4      	lsls	r4, r4, #3
 800177a:	4659      	mov	r1, fp
 800177c:	4314      	orrs	r4, r2
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	4463      	add	r3, ip
 8001782:	0412      	lsls	r2, r2, #16
 8001784:	1acb      	subs	r3, r1, r3
 8001786:	4314      	orrs	r4, r2
 8001788:	469b      	mov	fp, r3
 800178a:	00c2      	lsls	r2, r0, #3
 800178c:	2000      	movs	r0, #0
 800178e:	0033      	movs	r3, r6
 8001790:	407b      	eors	r3, r7
 8001792:	469a      	mov	sl, r3
 8001794:	464b      	mov	r3, r9
 8001796:	2b0f      	cmp	r3, #15
 8001798:	d900      	bls.n	800179c <__aeabi_ddiv+0x88>
 800179a:	e0ef      	b.n	800197c <__aeabi_ddiv+0x268>
 800179c:	4970      	ldr	r1, [pc, #448]	; (8001960 <__aeabi_ddiv+0x24c>)
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	58cb      	ldr	r3, [r1, r3]
 80017a2:	469f      	mov	pc, r3
 80017a4:	4b6f      	ldr	r3, [pc, #444]	; (8001964 <__aeabi_ddiv+0x250>)
 80017a6:	4652      	mov	r2, sl
 80017a8:	469c      	mov	ip, r3
 80017aa:	4322      	orrs	r2, r4
 80017ac:	44e3      	add	fp, ip
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d000      	beq.n	80017b4 <__aeabi_ddiv+0xa0>
 80017b2:	e095      	b.n	80018e0 <__aeabi_ddiv+0x1cc>
 80017b4:	4649      	mov	r1, r9
 80017b6:	2302      	movs	r3, #2
 80017b8:	4319      	orrs	r1, r3
 80017ba:	4689      	mov	r9, r1
 80017bc:	2400      	movs	r4, #0
 80017be:	2002      	movs	r0, #2
 80017c0:	e7e5      	b.n	800178e <__aeabi_ddiv+0x7a>
 80017c2:	2300      	movs	r3, #0
 80017c4:	2400      	movs	r4, #0
 80017c6:	2500      	movs	r5, #0
 80017c8:	4652      	mov	r2, sl
 80017ca:	051b      	lsls	r3, r3, #20
 80017cc:	4323      	orrs	r3, r4
 80017ce:	07d2      	lsls	r2, r2, #31
 80017d0:	4313      	orrs	r3, r2
 80017d2:	0028      	movs	r0, r5
 80017d4:	0019      	movs	r1, r3
 80017d6:	b005      	add	sp, #20
 80017d8:	bcf0      	pop	{r4, r5, r6, r7}
 80017da:	46bb      	mov	fp, r7
 80017dc:	46b2      	mov	sl, r6
 80017de:	46a9      	mov	r9, r5
 80017e0:	46a0      	mov	r8, r4
 80017e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e4:	2400      	movs	r4, #0
 80017e6:	2500      	movs	r5, #0
 80017e8:	4b5b      	ldr	r3, [pc, #364]	; (8001958 <__aeabi_ddiv+0x244>)
 80017ea:	e7ed      	b.n	80017c8 <__aeabi_ddiv+0xb4>
 80017ec:	464b      	mov	r3, r9
 80017ee:	4323      	orrs	r3, r4
 80017f0:	4698      	mov	r8, r3
 80017f2:	d100      	bne.n	80017f6 <__aeabi_ddiv+0xe2>
 80017f4:	e089      	b.n	800190a <__aeabi_ddiv+0x1f6>
 80017f6:	2c00      	cmp	r4, #0
 80017f8:	d100      	bne.n	80017fc <__aeabi_ddiv+0xe8>
 80017fa:	e1e0      	b.n	8001bbe <__aeabi_ddiv+0x4aa>
 80017fc:	0020      	movs	r0, r4
 80017fe:	f001 fb07 	bl	8002e10 <__clzsi2>
 8001802:	0001      	movs	r1, r0
 8001804:	0002      	movs	r2, r0
 8001806:	390b      	subs	r1, #11
 8001808:	231d      	movs	r3, #29
 800180a:	1a5b      	subs	r3, r3, r1
 800180c:	4649      	mov	r1, r9
 800180e:	0010      	movs	r0, r2
 8001810:	40d9      	lsrs	r1, r3
 8001812:	3808      	subs	r0, #8
 8001814:	4084      	lsls	r4, r0
 8001816:	000b      	movs	r3, r1
 8001818:	464d      	mov	r5, r9
 800181a:	4323      	orrs	r3, r4
 800181c:	4698      	mov	r8, r3
 800181e:	4085      	lsls	r5, r0
 8001820:	4851      	ldr	r0, [pc, #324]	; (8001968 <__aeabi_ddiv+0x254>)
 8001822:	033c      	lsls	r4, r7, #12
 8001824:	1a83      	subs	r3, r0, r2
 8001826:	469b      	mov	fp, r3
 8001828:	2300      	movs	r3, #0
 800182a:	4699      	mov	r9, r3
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	007b      	lsls	r3, r7, #1
 8001830:	4650      	mov	r0, sl
 8001832:	0b24      	lsrs	r4, r4, #12
 8001834:	0d5b      	lsrs	r3, r3, #21
 8001836:	0fff      	lsrs	r7, r7, #31
 8001838:	2b00      	cmp	r3, #0
 800183a:	d197      	bne.n	800176c <__aeabi_ddiv+0x58>
 800183c:	4652      	mov	r2, sl
 800183e:	4322      	orrs	r2, r4
 8001840:	d055      	beq.n	80018ee <__aeabi_ddiv+0x1da>
 8001842:	2c00      	cmp	r4, #0
 8001844:	d100      	bne.n	8001848 <__aeabi_ddiv+0x134>
 8001846:	e1ca      	b.n	8001bde <__aeabi_ddiv+0x4ca>
 8001848:	0020      	movs	r0, r4
 800184a:	f001 fae1 	bl	8002e10 <__clzsi2>
 800184e:	0002      	movs	r2, r0
 8001850:	3a0b      	subs	r2, #11
 8001852:	231d      	movs	r3, #29
 8001854:	0001      	movs	r1, r0
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	4652      	mov	r2, sl
 800185a:	3908      	subs	r1, #8
 800185c:	40da      	lsrs	r2, r3
 800185e:	408c      	lsls	r4, r1
 8001860:	4314      	orrs	r4, r2
 8001862:	4652      	mov	r2, sl
 8001864:	408a      	lsls	r2, r1
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <__aeabi_ddiv+0x258>)
 8001868:	4458      	add	r0, fp
 800186a:	469b      	mov	fp, r3
 800186c:	4483      	add	fp, r0
 800186e:	2000      	movs	r0, #0
 8001870:	e78d      	b.n	800178e <__aeabi_ddiv+0x7a>
 8001872:	464b      	mov	r3, r9
 8001874:	4323      	orrs	r3, r4
 8001876:	4698      	mov	r8, r3
 8001878:	d140      	bne.n	80018fc <__aeabi_ddiv+0x1e8>
 800187a:	2308      	movs	r3, #8
 800187c:	4699      	mov	r9, r3
 800187e:	3b06      	subs	r3, #6
 8001880:	2500      	movs	r5, #0
 8001882:	4683      	mov	fp, r0
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	e769      	b.n	800175c <__aeabi_ddiv+0x48>
 8001888:	46b2      	mov	sl, r6
 800188a:	9b00      	ldr	r3, [sp, #0]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d0a9      	beq.n	80017e4 <__aeabi_ddiv+0xd0>
 8001890:	2b03      	cmp	r3, #3
 8001892:	d100      	bne.n	8001896 <__aeabi_ddiv+0x182>
 8001894:	e211      	b.n	8001cba <__aeabi_ddiv+0x5a6>
 8001896:	2b01      	cmp	r3, #1
 8001898:	d093      	beq.n	80017c2 <__aeabi_ddiv+0xae>
 800189a:	4a35      	ldr	r2, [pc, #212]	; (8001970 <__aeabi_ddiv+0x25c>)
 800189c:	445a      	add	r2, fp
 800189e:	2a00      	cmp	r2, #0
 80018a0:	dc00      	bgt.n	80018a4 <__aeabi_ddiv+0x190>
 80018a2:	e13c      	b.n	8001b1e <__aeabi_ddiv+0x40a>
 80018a4:	076b      	lsls	r3, r5, #29
 80018a6:	d000      	beq.n	80018aa <__aeabi_ddiv+0x196>
 80018a8:	e1a7      	b.n	8001bfa <__aeabi_ddiv+0x4e6>
 80018aa:	08ed      	lsrs	r5, r5, #3
 80018ac:	4643      	mov	r3, r8
 80018ae:	01db      	lsls	r3, r3, #7
 80018b0:	d506      	bpl.n	80018c0 <__aeabi_ddiv+0x1ac>
 80018b2:	4642      	mov	r2, r8
 80018b4:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <__aeabi_ddiv+0x260>)
 80018b6:	401a      	ands	r2, r3
 80018b8:	4690      	mov	r8, r2
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	00d2      	lsls	r2, r2, #3
 80018be:	445a      	add	r2, fp
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <__aeabi_ddiv+0x264>)
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dc8e      	bgt.n	80017e4 <__aeabi_ddiv+0xd0>
 80018c6:	4643      	mov	r3, r8
 80018c8:	0552      	lsls	r2, r2, #21
 80018ca:	0758      	lsls	r0, r3, #29
 80018cc:	025c      	lsls	r4, r3, #9
 80018ce:	4305      	orrs	r5, r0
 80018d0:	0b24      	lsrs	r4, r4, #12
 80018d2:	0d53      	lsrs	r3, r2, #21
 80018d4:	e778      	b.n	80017c8 <__aeabi_ddiv+0xb4>
 80018d6:	46ba      	mov	sl, r7
 80018d8:	46a0      	mov	r8, r4
 80018da:	0015      	movs	r5, r2
 80018dc:	9000      	str	r0, [sp, #0]
 80018de:	e7d4      	b.n	800188a <__aeabi_ddiv+0x176>
 80018e0:	464a      	mov	r2, r9
 80018e2:	2303      	movs	r3, #3
 80018e4:	431a      	orrs	r2, r3
 80018e6:	4691      	mov	r9, r2
 80018e8:	2003      	movs	r0, #3
 80018ea:	4652      	mov	r2, sl
 80018ec:	e74f      	b.n	800178e <__aeabi_ddiv+0x7a>
 80018ee:	4649      	mov	r1, r9
 80018f0:	2301      	movs	r3, #1
 80018f2:	4319      	orrs	r1, r3
 80018f4:	4689      	mov	r9, r1
 80018f6:	2400      	movs	r4, #0
 80018f8:	2001      	movs	r0, #1
 80018fa:	e748      	b.n	800178e <__aeabi_ddiv+0x7a>
 80018fc:	230c      	movs	r3, #12
 80018fe:	4699      	mov	r9, r3
 8001900:	3b09      	subs	r3, #9
 8001902:	46a0      	mov	r8, r4
 8001904:	4683      	mov	fp, r0
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	e728      	b.n	800175c <__aeabi_ddiv+0x48>
 800190a:	2304      	movs	r3, #4
 800190c:	4699      	mov	r9, r3
 800190e:	2300      	movs	r3, #0
 8001910:	469b      	mov	fp, r3
 8001912:	3301      	adds	r3, #1
 8001914:	2500      	movs	r5, #0
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	e720      	b.n	800175c <__aeabi_ddiv+0x48>
 800191a:	2300      	movs	r3, #0
 800191c:	2480      	movs	r4, #128	; 0x80
 800191e:	469a      	mov	sl, r3
 8001920:	2500      	movs	r5, #0
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <__aeabi_ddiv+0x244>)
 8001924:	0324      	lsls	r4, r4, #12
 8001926:	e74f      	b.n	80017c8 <__aeabi_ddiv+0xb4>
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	4641      	mov	r1, r8
 800192c:	031b      	lsls	r3, r3, #12
 800192e:	4219      	tst	r1, r3
 8001930:	d008      	beq.n	8001944 <__aeabi_ddiv+0x230>
 8001932:	421c      	tst	r4, r3
 8001934:	d106      	bne.n	8001944 <__aeabi_ddiv+0x230>
 8001936:	431c      	orrs	r4, r3
 8001938:	0324      	lsls	r4, r4, #12
 800193a:	46ba      	mov	sl, r7
 800193c:	0015      	movs	r5, r2
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <__aeabi_ddiv+0x244>)
 8001940:	0b24      	lsrs	r4, r4, #12
 8001942:	e741      	b.n	80017c8 <__aeabi_ddiv+0xb4>
 8001944:	2480      	movs	r4, #128	; 0x80
 8001946:	4643      	mov	r3, r8
 8001948:	0324      	lsls	r4, r4, #12
 800194a:	431c      	orrs	r4, r3
 800194c:	0324      	lsls	r4, r4, #12
 800194e:	46b2      	mov	sl, r6
 8001950:	4b01      	ldr	r3, [pc, #4]	; (8001958 <__aeabi_ddiv+0x244>)
 8001952:	0b24      	lsrs	r4, r4, #12
 8001954:	e738      	b.n	80017c8 <__aeabi_ddiv+0xb4>
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	000007ff 	.word	0x000007ff
 800195c:	fffffc01 	.word	0xfffffc01
 8001960:	0800e09c 	.word	0x0800e09c
 8001964:	fffff801 	.word	0xfffff801
 8001968:	fffffc0d 	.word	0xfffffc0d
 800196c:	000003f3 	.word	0x000003f3
 8001970:	000003ff 	.word	0x000003ff
 8001974:	feffffff 	.word	0xfeffffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	4544      	cmp	r4, r8
 800197e:	d200      	bcs.n	8001982 <__aeabi_ddiv+0x26e>
 8001980:	e116      	b.n	8001bb0 <__aeabi_ddiv+0x49c>
 8001982:	d100      	bne.n	8001986 <__aeabi_ddiv+0x272>
 8001984:	e111      	b.n	8001baa <__aeabi_ddiv+0x496>
 8001986:	2301      	movs	r3, #1
 8001988:	425b      	negs	r3, r3
 800198a:	469c      	mov	ip, r3
 800198c:	002e      	movs	r6, r5
 800198e:	4640      	mov	r0, r8
 8001990:	2500      	movs	r5, #0
 8001992:	44e3      	add	fp, ip
 8001994:	0223      	lsls	r3, r4, #8
 8001996:	0e14      	lsrs	r4, r2, #24
 8001998:	431c      	orrs	r4, r3
 800199a:	0c1b      	lsrs	r3, r3, #16
 800199c:	4699      	mov	r9, r3
 800199e:	0423      	lsls	r3, r4, #16
 80019a0:	0c1f      	lsrs	r7, r3, #16
 80019a2:	0212      	lsls	r2, r2, #8
 80019a4:	4649      	mov	r1, r9
 80019a6:	9200      	str	r2, [sp, #0]
 80019a8:	9701      	str	r7, [sp, #4]
 80019aa:	f7fe fc4b 	bl	8000244 <__aeabi_uidivmod>
 80019ae:	0002      	movs	r2, r0
 80019b0:	437a      	muls	r2, r7
 80019b2:	040b      	lsls	r3, r1, #16
 80019b4:	0c31      	lsrs	r1, r6, #16
 80019b6:	4680      	mov	r8, r0
 80019b8:	4319      	orrs	r1, r3
 80019ba:	428a      	cmp	r2, r1
 80019bc:	d90b      	bls.n	80019d6 <__aeabi_ddiv+0x2c2>
 80019be:	2301      	movs	r3, #1
 80019c0:	425b      	negs	r3, r3
 80019c2:	469c      	mov	ip, r3
 80019c4:	1909      	adds	r1, r1, r4
 80019c6:	44e0      	add	r8, ip
 80019c8:	428c      	cmp	r4, r1
 80019ca:	d804      	bhi.n	80019d6 <__aeabi_ddiv+0x2c2>
 80019cc:	428a      	cmp	r2, r1
 80019ce:	d902      	bls.n	80019d6 <__aeabi_ddiv+0x2c2>
 80019d0:	1e83      	subs	r3, r0, #2
 80019d2:	4698      	mov	r8, r3
 80019d4:	1909      	adds	r1, r1, r4
 80019d6:	1a88      	subs	r0, r1, r2
 80019d8:	4649      	mov	r1, r9
 80019da:	f7fe fc33 	bl	8000244 <__aeabi_uidivmod>
 80019de:	0409      	lsls	r1, r1, #16
 80019e0:	468c      	mov	ip, r1
 80019e2:	0431      	lsls	r1, r6, #16
 80019e4:	4666      	mov	r6, ip
 80019e6:	9a01      	ldr	r2, [sp, #4]
 80019e8:	0c09      	lsrs	r1, r1, #16
 80019ea:	4342      	muls	r2, r0
 80019ec:	0003      	movs	r3, r0
 80019ee:	4331      	orrs	r1, r6
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d904      	bls.n	80019fe <__aeabi_ddiv+0x2ea>
 80019f4:	1909      	adds	r1, r1, r4
 80019f6:	3b01      	subs	r3, #1
 80019f8:	428c      	cmp	r4, r1
 80019fa:	d800      	bhi.n	80019fe <__aeabi_ddiv+0x2ea>
 80019fc:	e111      	b.n	8001c22 <__aeabi_ddiv+0x50e>
 80019fe:	1a89      	subs	r1, r1, r2
 8001a00:	4642      	mov	r2, r8
 8001a02:	9e00      	ldr	r6, [sp, #0]
 8001a04:	0412      	lsls	r2, r2, #16
 8001a06:	431a      	orrs	r2, r3
 8001a08:	0c33      	lsrs	r3, r6, #16
 8001a0a:	001f      	movs	r7, r3
 8001a0c:	0c10      	lsrs	r0, r2, #16
 8001a0e:	4690      	mov	r8, r2
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	0413      	lsls	r3, r2, #16
 8001a14:	0432      	lsls	r2, r6, #16
 8001a16:	0c16      	lsrs	r6, r2, #16
 8001a18:	0032      	movs	r2, r6
 8001a1a:	0c1b      	lsrs	r3, r3, #16
 8001a1c:	435a      	muls	r2, r3
 8001a1e:	9603      	str	r6, [sp, #12]
 8001a20:	437b      	muls	r3, r7
 8001a22:	4346      	muls	r6, r0
 8001a24:	4378      	muls	r0, r7
 8001a26:	0c17      	lsrs	r7, r2, #16
 8001a28:	46bc      	mov	ip, r7
 8001a2a:	199b      	adds	r3, r3, r6
 8001a2c:	4463      	add	r3, ip
 8001a2e:	429e      	cmp	r6, r3
 8001a30:	d903      	bls.n	8001a3a <__aeabi_ddiv+0x326>
 8001a32:	2680      	movs	r6, #128	; 0x80
 8001a34:	0276      	lsls	r6, r6, #9
 8001a36:	46b4      	mov	ip, r6
 8001a38:	4460      	add	r0, ip
 8001a3a:	0c1e      	lsrs	r6, r3, #16
 8001a3c:	1830      	adds	r0, r6, r0
 8001a3e:	0416      	lsls	r6, r2, #16
 8001a40:	041b      	lsls	r3, r3, #16
 8001a42:	0c36      	lsrs	r6, r6, #16
 8001a44:	199e      	adds	r6, r3, r6
 8001a46:	4281      	cmp	r1, r0
 8001a48:	d200      	bcs.n	8001a4c <__aeabi_ddiv+0x338>
 8001a4a:	e09c      	b.n	8001b86 <__aeabi_ddiv+0x472>
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_ddiv+0x33c>
 8001a4e:	e097      	b.n	8001b80 <__aeabi_ddiv+0x46c>
 8001a50:	1bae      	subs	r6, r5, r6
 8001a52:	1a09      	subs	r1, r1, r0
 8001a54:	42b5      	cmp	r5, r6
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4240      	negs	r0, r0
 8001a5a:	1a08      	subs	r0, r1, r0
 8001a5c:	4284      	cmp	r4, r0
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_ddiv+0x34e>
 8001a60:	e111      	b.n	8001c86 <__aeabi_ddiv+0x572>
 8001a62:	4649      	mov	r1, r9
 8001a64:	f7fe fbee 	bl	8000244 <__aeabi_uidivmod>
 8001a68:	9a01      	ldr	r2, [sp, #4]
 8001a6a:	040b      	lsls	r3, r1, #16
 8001a6c:	4342      	muls	r2, r0
 8001a6e:	0c31      	lsrs	r1, r6, #16
 8001a70:	0005      	movs	r5, r0
 8001a72:	4319      	orrs	r1, r3
 8001a74:	428a      	cmp	r2, r1
 8001a76:	d907      	bls.n	8001a88 <__aeabi_ddiv+0x374>
 8001a78:	1909      	adds	r1, r1, r4
 8001a7a:	3d01      	subs	r5, #1
 8001a7c:	428c      	cmp	r4, r1
 8001a7e:	d803      	bhi.n	8001a88 <__aeabi_ddiv+0x374>
 8001a80:	428a      	cmp	r2, r1
 8001a82:	d901      	bls.n	8001a88 <__aeabi_ddiv+0x374>
 8001a84:	1e85      	subs	r5, r0, #2
 8001a86:	1909      	adds	r1, r1, r4
 8001a88:	1a88      	subs	r0, r1, r2
 8001a8a:	4649      	mov	r1, r9
 8001a8c:	f7fe fbda 	bl	8000244 <__aeabi_uidivmod>
 8001a90:	0409      	lsls	r1, r1, #16
 8001a92:	468c      	mov	ip, r1
 8001a94:	0431      	lsls	r1, r6, #16
 8001a96:	4666      	mov	r6, ip
 8001a98:	9a01      	ldr	r2, [sp, #4]
 8001a9a:	0c09      	lsrs	r1, r1, #16
 8001a9c:	4342      	muls	r2, r0
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	4331      	orrs	r1, r6
 8001aa2:	428a      	cmp	r2, r1
 8001aa4:	d907      	bls.n	8001ab6 <__aeabi_ddiv+0x3a2>
 8001aa6:	1909      	adds	r1, r1, r4
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	428c      	cmp	r4, r1
 8001aac:	d803      	bhi.n	8001ab6 <__aeabi_ddiv+0x3a2>
 8001aae:	428a      	cmp	r2, r1
 8001ab0:	d901      	bls.n	8001ab6 <__aeabi_ddiv+0x3a2>
 8001ab2:	1e83      	subs	r3, r0, #2
 8001ab4:	1909      	adds	r1, r1, r4
 8001ab6:	9e03      	ldr	r6, [sp, #12]
 8001ab8:	1a89      	subs	r1, r1, r2
 8001aba:	0032      	movs	r2, r6
 8001abc:	042d      	lsls	r5, r5, #16
 8001abe:	431d      	orrs	r5, r3
 8001ac0:	9f02      	ldr	r7, [sp, #8]
 8001ac2:	042b      	lsls	r3, r5, #16
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	435a      	muls	r2, r3
 8001ac8:	437b      	muls	r3, r7
 8001aca:	469c      	mov	ip, r3
 8001acc:	0c28      	lsrs	r0, r5, #16
 8001ace:	4346      	muls	r6, r0
 8001ad0:	0c13      	lsrs	r3, r2, #16
 8001ad2:	44b4      	add	ip, r6
 8001ad4:	4463      	add	r3, ip
 8001ad6:	4378      	muls	r0, r7
 8001ad8:	429e      	cmp	r6, r3
 8001ada:	d903      	bls.n	8001ae4 <__aeabi_ddiv+0x3d0>
 8001adc:	2680      	movs	r6, #128	; 0x80
 8001ade:	0276      	lsls	r6, r6, #9
 8001ae0:	46b4      	mov	ip, r6
 8001ae2:	4460      	add	r0, ip
 8001ae4:	0c1e      	lsrs	r6, r3, #16
 8001ae6:	0412      	lsls	r2, r2, #16
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	0c12      	lsrs	r2, r2, #16
 8001aec:	1830      	adds	r0, r6, r0
 8001aee:	189b      	adds	r3, r3, r2
 8001af0:	4281      	cmp	r1, r0
 8001af2:	d306      	bcc.n	8001b02 <__aeabi_ddiv+0x3ee>
 8001af4:	d002      	beq.n	8001afc <__aeabi_ddiv+0x3e8>
 8001af6:	2301      	movs	r3, #1
 8001af8:	431d      	orrs	r5, r3
 8001afa:	e6ce      	b.n	800189a <__aeabi_ddiv+0x186>
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d100      	bne.n	8001b02 <__aeabi_ddiv+0x3ee>
 8001b00:	e6cb      	b.n	800189a <__aeabi_ddiv+0x186>
 8001b02:	1861      	adds	r1, r4, r1
 8001b04:	1e6e      	subs	r6, r5, #1
 8001b06:	42a1      	cmp	r1, r4
 8001b08:	d200      	bcs.n	8001b0c <__aeabi_ddiv+0x3f8>
 8001b0a:	e0a4      	b.n	8001c56 <__aeabi_ddiv+0x542>
 8001b0c:	4281      	cmp	r1, r0
 8001b0e:	d200      	bcs.n	8001b12 <__aeabi_ddiv+0x3fe>
 8001b10:	e0c9      	b.n	8001ca6 <__aeabi_ddiv+0x592>
 8001b12:	d100      	bne.n	8001b16 <__aeabi_ddiv+0x402>
 8001b14:	e0d9      	b.n	8001cca <__aeabi_ddiv+0x5b6>
 8001b16:	0035      	movs	r5, r6
 8001b18:	e7ed      	b.n	8001af6 <__aeabi_ddiv+0x3e2>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	426d      	negs	r5, r5
 8001b1e:	2101      	movs	r1, #1
 8001b20:	1a89      	subs	r1, r1, r2
 8001b22:	2938      	cmp	r1, #56	; 0x38
 8001b24:	dd00      	ble.n	8001b28 <__aeabi_ddiv+0x414>
 8001b26:	e64c      	b.n	80017c2 <__aeabi_ddiv+0xae>
 8001b28:	291f      	cmp	r1, #31
 8001b2a:	dc00      	bgt.n	8001b2e <__aeabi_ddiv+0x41a>
 8001b2c:	e07f      	b.n	8001c2e <__aeabi_ddiv+0x51a>
 8001b2e:	231f      	movs	r3, #31
 8001b30:	425b      	negs	r3, r3
 8001b32:	1a9a      	subs	r2, r3, r2
 8001b34:	4643      	mov	r3, r8
 8001b36:	40d3      	lsrs	r3, r2
 8001b38:	2920      	cmp	r1, #32
 8001b3a:	d004      	beq.n	8001b46 <__aeabi_ddiv+0x432>
 8001b3c:	4644      	mov	r4, r8
 8001b3e:	4a65      	ldr	r2, [pc, #404]	; (8001cd4 <__aeabi_ddiv+0x5c0>)
 8001b40:	445a      	add	r2, fp
 8001b42:	4094      	lsls	r4, r2
 8001b44:	4325      	orrs	r5, r4
 8001b46:	1e6a      	subs	r2, r5, #1
 8001b48:	4195      	sbcs	r5, r2
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	432b      	orrs	r3, r5
 8001b4e:	0015      	movs	r5, r2
 8001b50:	2400      	movs	r4, #0
 8001b52:	401d      	ands	r5, r3
 8001b54:	421a      	tst	r2, r3
 8001b56:	d100      	bne.n	8001b5a <__aeabi_ddiv+0x446>
 8001b58:	e0a1      	b.n	8001c9e <__aeabi_ddiv+0x58a>
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	2400      	movs	r4, #0
 8001b5e:	401a      	ands	r2, r3
 8001b60:	2a04      	cmp	r2, #4
 8001b62:	d100      	bne.n	8001b66 <__aeabi_ddiv+0x452>
 8001b64:	e098      	b.n	8001c98 <__aeabi_ddiv+0x584>
 8001b66:	1d1a      	adds	r2, r3, #4
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	419b      	sbcs	r3, r3
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	18e4      	adds	r4, r4, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	0222      	lsls	r2, r4, #8
 8001b74:	d400      	bmi.n	8001b78 <__aeabi_ddiv+0x464>
 8001b76:	e08f      	b.n	8001c98 <__aeabi_ddiv+0x584>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	2400      	movs	r4, #0
 8001b7c:	2500      	movs	r5, #0
 8001b7e:	e623      	b.n	80017c8 <__aeabi_ddiv+0xb4>
 8001b80:	42b5      	cmp	r5, r6
 8001b82:	d300      	bcc.n	8001b86 <__aeabi_ddiv+0x472>
 8001b84:	e764      	b.n	8001a50 <__aeabi_ddiv+0x33c>
 8001b86:	4643      	mov	r3, r8
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	9b00      	ldr	r3, [sp, #0]
 8001b8c:	469c      	mov	ip, r3
 8001b8e:	4465      	add	r5, ip
 8001b90:	001f      	movs	r7, r3
 8001b92:	429d      	cmp	r5, r3
 8001b94:	419b      	sbcs	r3, r3
 8001b96:	425b      	negs	r3, r3
 8001b98:	191b      	adds	r3, r3, r4
 8001b9a:	18c9      	adds	r1, r1, r3
 8001b9c:	428c      	cmp	r4, r1
 8001b9e:	d23a      	bcs.n	8001c16 <__aeabi_ddiv+0x502>
 8001ba0:	4288      	cmp	r0, r1
 8001ba2:	d863      	bhi.n	8001c6c <__aeabi_ddiv+0x558>
 8001ba4:	d060      	beq.n	8001c68 <__aeabi_ddiv+0x554>
 8001ba6:	4690      	mov	r8, r2
 8001ba8:	e752      	b.n	8001a50 <__aeabi_ddiv+0x33c>
 8001baa:	42aa      	cmp	r2, r5
 8001bac:	d900      	bls.n	8001bb0 <__aeabi_ddiv+0x49c>
 8001bae:	e6ea      	b.n	8001986 <__aeabi_ddiv+0x272>
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	07de      	lsls	r6, r3, #31
 8001bb4:	0858      	lsrs	r0, r3, #1
 8001bb6:	086b      	lsrs	r3, r5, #1
 8001bb8:	431e      	orrs	r6, r3
 8001bba:	07ed      	lsls	r5, r5, #31
 8001bbc:	e6ea      	b.n	8001994 <__aeabi_ddiv+0x280>
 8001bbe:	4648      	mov	r0, r9
 8001bc0:	f001 f926 	bl	8002e10 <__clzsi2>
 8001bc4:	0001      	movs	r1, r0
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	3115      	adds	r1, #21
 8001bca:	3220      	adds	r2, #32
 8001bcc:	291c      	cmp	r1, #28
 8001bce:	dc00      	bgt.n	8001bd2 <__aeabi_ddiv+0x4be>
 8001bd0:	e61a      	b.n	8001808 <__aeabi_ddiv+0xf4>
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	3808      	subs	r0, #8
 8001bd6:	4083      	lsls	r3, r0
 8001bd8:	2500      	movs	r5, #0
 8001bda:	4698      	mov	r8, r3
 8001bdc:	e620      	b.n	8001820 <__aeabi_ddiv+0x10c>
 8001bde:	f001 f917 	bl	8002e10 <__clzsi2>
 8001be2:	0003      	movs	r3, r0
 8001be4:	001a      	movs	r2, r3
 8001be6:	3215      	adds	r2, #21
 8001be8:	3020      	adds	r0, #32
 8001bea:	2a1c      	cmp	r2, #28
 8001bec:	dc00      	bgt.n	8001bf0 <__aeabi_ddiv+0x4dc>
 8001bee:	e630      	b.n	8001852 <__aeabi_ddiv+0x13e>
 8001bf0:	4654      	mov	r4, sl
 8001bf2:	3b08      	subs	r3, #8
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	409c      	lsls	r4, r3
 8001bf8:	e635      	b.n	8001866 <__aeabi_ddiv+0x152>
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	402b      	ands	r3, r5
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d100      	bne.n	8001c04 <__aeabi_ddiv+0x4f0>
 8001c02:	e652      	b.n	80018aa <__aeabi_ddiv+0x196>
 8001c04:	2305      	movs	r3, #5
 8001c06:	425b      	negs	r3, r3
 8001c08:	42ab      	cmp	r3, r5
 8001c0a:	419b      	sbcs	r3, r3
 8001c0c:	3504      	adds	r5, #4
 8001c0e:	425b      	negs	r3, r3
 8001c10:	08ed      	lsrs	r5, r5, #3
 8001c12:	4498      	add	r8, r3
 8001c14:	e64a      	b.n	80018ac <__aeabi_ddiv+0x198>
 8001c16:	428c      	cmp	r4, r1
 8001c18:	d1c5      	bne.n	8001ba6 <__aeabi_ddiv+0x492>
 8001c1a:	42af      	cmp	r7, r5
 8001c1c:	d9c0      	bls.n	8001ba0 <__aeabi_ddiv+0x48c>
 8001c1e:	4690      	mov	r8, r2
 8001c20:	e716      	b.n	8001a50 <__aeabi_ddiv+0x33c>
 8001c22:	428a      	cmp	r2, r1
 8001c24:	d800      	bhi.n	8001c28 <__aeabi_ddiv+0x514>
 8001c26:	e6ea      	b.n	80019fe <__aeabi_ddiv+0x2ea>
 8001c28:	1e83      	subs	r3, r0, #2
 8001c2a:	1909      	adds	r1, r1, r4
 8001c2c:	e6e7      	b.n	80019fe <__aeabi_ddiv+0x2ea>
 8001c2e:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <__aeabi_ddiv+0x5c4>)
 8001c30:	0028      	movs	r0, r5
 8001c32:	445a      	add	r2, fp
 8001c34:	4643      	mov	r3, r8
 8001c36:	4095      	lsls	r5, r2
 8001c38:	4093      	lsls	r3, r2
 8001c3a:	40c8      	lsrs	r0, r1
 8001c3c:	1e6a      	subs	r2, r5, #1
 8001c3e:	4195      	sbcs	r5, r2
 8001c40:	4644      	mov	r4, r8
 8001c42:	4303      	orrs	r3, r0
 8001c44:	432b      	orrs	r3, r5
 8001c46:	40cc      	lsrs	r4, r1
 8001c48:	075a      	lsls	r2, r3, #29
 8001c4a:	d092      	beq.n	8001b72 <__aeabi_ddiv+0x45e>
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	401a      	ands	r2, r3
 8001c50:	2a04      	cmp	r2, #4
 8001c52:	d188      	bne.n	8001b66 <__aeabi_ddiv+0x452>
 8001c54:	e78d      	b.n	8001b72 <__aeabi_ddiv+0x45e>
 8001c56:	0035      	movs	r5, r6
 8001c58:	4281      	cmp	r1, r0
 8001c5a:	d000      	beq.n	8001c5e <__aeabi_ddiv+0x54a>
 8001c5c:	e74b      	b.n	8001af6 <__aeabi_ddiv+0x3e2>
 8001c5e:	9a00      	ldr	r2, [sp, #0]
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d000      	beq.n	8001c66 <__aeabi_ddiv+0x552>
 8001c64:	e747      	b.n	8001af6 <__aeabi_ddiv+0x3e2>
 8001c66:	e618      	b.n	800189a <__aeabi_ddiv+0x186>
 8001c68:	42ae      	cmp	r6, r5
 8001c6a:	d99c      	bls.n	8001ba6 <__aeabi_ddiv+0x492>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	425b      	negs	r3, r3
 8001c70:	469c      	mov	ip, r3
 8001c72:	9b00      	ldr	r3, [sp, #0]
 8001c74:	44e0      	add	r8, ip
 8001c76:	469c      	mov	ip, r3
 8001c78:	4465      	add	r5, ip
 8001c7a:	429d      	cmp	r5, r3
 8001c7c:	419b      	sbcs	r3, r3
 8001c7e:	425b      	negs	r3, r3
 8001c80:	191b      	adds	r3, r3, r4
 8001c82:	18c9      	adds	r1, r1, r3
 8001c84:	e6e4      	b.n	8001a50 <__aeabi_ddiv+0x33c>
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <__aeabi_ddiv+0x5c8>)
 8001c88:	445a      	add	r2, fp
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	dc00      	bgt.n	8001c90 <__aeabi_ddiv+0x57c>
 8001c8e:	e744      	b.n	8001b1a <__aeabi_ddiv+0x406>
 8001c90:	2301      	movs	r3, #1
 8001c92:	2500      	movs	r5, #0
 8001c94:	4498      	add	r8, r3
 8001c96:	e609      	b.n	80018ac <__aeabi_ddiv+0x198>
 8001c98:	0765      	lsls	r5, r4, #29
 8001c9a:	0264      	lsls	r4, r4, #9
 8001c9c:	0b24      	lsrs	r4, r4, #12
 8001c9e:	08db      	lsrs	r3, r3, #3
 8001ca0:	431d      	orrs	r5, r3
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e590      	b.n	80017c8 <__aeabi_ddiv+0xb4>
 8001ca6:	9e00      	ldr	r6, [sp, #0]
 8001ca8:	3d02      	subs	r5, #2
 8001caa:	0072      	lsls	r2, r6, #1
 8001cac:	42b2      	cmp	r2, r6
 8001cae:	41bf      	sbcs	r7, r7
 8001cb0:	427f      	negs	r7, r7
 8001cb2:	193c      	adds	r4, r7, r4
 8001cb4:	1909      	adds	r1, r1, r4
 8001cb6:	9200      	str	r2, [sp, #0]
 8001cb8:	e7ce      	b.n	8001c58 <__aeabi_ddiv+0x544>
 8001cba:	2480      	movs	r4, #128	; 0x80
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	0324      	lsls	r4, r4, #12
 8001cc0:	431c      	orrs	r4, r3
 8001cc2:	0324      	lsls	r4, r4, #12
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <__aeabi_ddiv+0x5cc>)
 8001cc6:	0b24      	lsrs	r4, r4, #12
 8001cc8:	e57e      	b.n	80017c8 <__aeabi_ddiv+0xb4>
 8001cca:	9a00      	ldr	r2, [sp, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d3ea      	bcc.n	8001ca6 <__aeabi_ddiv+0x592>
 8001cd0:	0035      	movs	r5, r6
 8001cd2:	e7c4      	b.n	8001c5e <__aeabi_ddiv+0x54a>
 8001cd4:	0000043e 	.word	0x0000043e
 8001cd8:	0000041e 	.word	0x0000041e
 8001cdc:	000003ff 	.word	0x000003ff
 8001ce0:	000007ff 	.word	0x000007ff

08001ce4 <__eqdf2>:
 8001ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce6:	464f      	mov	r7, r9
 8001ce8:	4646      	mov	r6, r8
 8001cea:	46d6      	mov	lr, sl
 8001cec:	4694      	mov	ip, r2
 8001cee:	4691      	mov	r9, r2
 8001cf0:	031a      	lsls	r2, r3, #12
 8001cf2:	0b12      	lsrs	r2, r2, #12
 8001cf4:	4d18      	ldr	r5, [pc, #96]	; (8001d58 <__eqdf2+0x74>)
 8001cf6:	b5c0      	push	{r6, r7, lr}
 8001cf8:	004c      	lsls	r4, r1, #1
 8001cfa:	030f      	lsls	r7, r1, #12
 8001cfc:	4692      	mov	sl, r2
 8001cfe:	005a      	lsls	r2, r3, #1
 8001d00:	0006      	movs	r6, r0
 8001d02:	4680      	mov	r8, r0
 8001d04:	0b3f      	lsrs	r7, r7, #12
 8001d06:	2001      	movs	r0, #1
 8001d08:	0d64      	lsrs	r4, r4, #21
 8001d0a:	0fc9      	lsrs	r1, r1, #31
 8001d0c:	0d52      	lsrs	r2, r2, #21
 8001d0e:	0fdb      	lsrs	r3, r3, #31
 8001d10:	42ac      	cmp	r4, r5
 8001d12:	d00a      	beq.n	8001d2a <__eqdf2+0x46>
 8001d14:	42aa      	cmp	r2, r5
 8001d16:	d003      	beq.n	8001d20 <__eqdf2+0x3c>
 8001d18:	4294      	cmp	r4, r2
 8001d1a:	d101      	bne.n	8001d20 <__eqdf2+0x3c>
 8001d1c:	4557      	cmp	r7, sl
 8001d1e:	d00d      	beq.n	8001d3c <__eqdf2+0x58>
 8001d20:	bce0      	pop	{r5, r6, r7}
 8001d22:	46ba      	mov	sl, r7
 8001d24:	46b1      	mov	r9, r6
 8001d26:	46a8      	mov	r8, r5
 8001d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2a:	003d      	movs	r5, r7
 8001d2c:	4335      	orrs	r5, r6
 8001d2e:	d1f7      	bne.n	8001d20 <__eqdf2+0x3c>
 8001d30:	42a2      	cmp	r2, r4
 8001d32:	d1f5      	bne.n	8001d20 <__eqdf2+0x3c>
 8001d34:	4652      	mov	r2, sl
 8001d36:	4665      	mov	r5, ip
 8001d38:	432a      	orrs	r2, r5
 8001d3a:	d1f1      	bne.n	8001d20 <__eqdf2+0x3c>
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	45c8      	cmp	r8, r9
 8001d40:	d1ee      	bne.n	8001d20 <__eqdf2+0x3c>
 8001d42:	4299      	cmp	r1, r3
 8001d44:	d006      	beq.n	8001d54 <__eqdf2+0x70>
 8001d46:	2c00      	cmp	r4, #0
 8001d48:	d1ea      	bne.n	8001d20 <__eqdf2+0x3c>
 8001d4a:	433e      	orrs	r6, r7
 8001d4c:	0030      	movs	r0, r6
 8001d4e:	1e46      	subs	r6, r0, #1
 8001d50:	41b0      	sbcs	r0, r6
 8001d52:	e7e5      	b.n	8001d20 <__eqdf2+0x3c>
 8001d54:	2000      	movs	r0, #0
 8001d56:	e7e3      	b.n	8001d20 <__eqdf2+0x3c>
 8001d58:	000007ff 	.word	0x000007ff

08001d5c <__gedf2>:
 8001d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5e:	464e      	mov	r6, r9
 8001d60:	4645      	mov	r5, r8
 8001d62:	4657      	mov	r7, sl
 8001d64:	46de      	mov	lr, fp
 8001d66:	0004      	movs	r4, r0
 8001d68:	0018      	movs	r0, r3
 8001d6a:	b5e0      	push	{r5, r6, r7, lr}
 8001d6c:	0016      	movs	r6, r2
 8001d6e:	031b      	lsls	r3, r3, #12
 8001d70:	0b1b      	lsrs	r3, r3, #12
 8001d72:	4d32      	ldr	r5, [pc, #200]	; (8001e3c <__gedf2+0xe0>)
 8001d74:	030f      	lsls	r7, r1, #12
 8001d76:	004a      	lsls	r2, r1, #1
 8001d78:	4699      	mov	r9, r3
 8001d7a:	0043      	lsls	r3, r0, #1
 8001d7c:	46a4      	mov	ip, r4
 8001d7e:	46b0      	mov	r8, r6
 8001d80:	0b3f      	lsrs	r7, r7, #12
 8001d82:	0d52      	lsrs	r2, r2, #21
 8001d84:	0fc9      	lsrs	r1, r1, #31
 8001d86:	0d5b      	lsrs	r3, r3, #21
 8001d88:	0fc0      	lsrs	r0, r0, #31
 8001d8a:	42aa      	cmp	r2, r5
 8001d8c:	d029      	beq.n	8001de2 <__gedf2+0x86>
 8001d8e:	42ab      	cmp	r3, r5
 8001d90:	d018      	beq.n	8001dc4 <__gedf2+0x68>
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	d12a      	bne.n	8001dec <__gedf2+0x90>
 8001d96:	433c      	orrs	r4, r7
 8001d98:	46a3      	mov	fp, r4
 8001d9a:	4265      	negs	r5, r4
 8001d9c:	4165      	adcs	r5, r4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <__gedf2+0x4c>
 8001da2:	464c      	mov	r4, r9
 8001da4:	4326      	orrs	r6, r4
 8001da6:	d027      	beq.n	8001df8 <__gedf2+0x9c>
 8001da8:	2d00      	cmp	r5, #0
 8001daa:	d115      	bne.n	8001dd8 <__gedf2+0x7c>
 8001dac:	4281      	cmp	r1, r0
 8001dae:	d028      	beq.n	8001e02 <__gedf2+0xa6>
 8001db0:	2002      	movs	r0, #2
 8001db2:	3901      	subs	r1, #1
 8001db4:	4008      	ands	r0, r1
 8001db6:	3801      	subs	r0, #1
 8001db8:	bcf0      	pop	{r4, r5, r6, r7}
 8001dba:	46bb      	mov	fp, r7
 8001dbc:	46b2      	mov	sl, r6
 8001dbe:	46a9      	mov	r9, r5
 8001dc0:	46a0      	mov	r8, r4
 8001dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc4:	464d      	mov	r5, r9
 8001dc6:	432e      	orrs	r6, r5
 8001dc8:	d12f      	bne.n	8001e2a <__gedf2+0xce>
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d1ee      	bne.n	8001dac <__gedf2+0x50>
 8001dce:	433c      	orrs	r4, r7
 8001dd0:	4265      	negs	r5, r4
 8001dd2:	4165      	adcs	r5, r4
 8001dd4:	2d00      	cmp	r5, #0
 8001dd6:	d0e9      	beq.n	8001dac <__gedf2+0x50>
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	d1ed      	bne.n	8001db8 <__gedf2+0x5c>
 8001ddc:	2001      	movs	r0, #1
 8001dde:	4240      	negs	r0, r0
 8001de0:	e7ea      	b.n	8001db8 <__gedf2+0x5c>
 8001de2:	003d      	movs	r5, r7
 8001de4:	4325      	orrs	r5, r4
 8001de6:	d120      	bne.n	8001e2a <__gedf2+0xce>
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d0eb      	beq.n	8001dc4 <__gedf2+0x68>
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1dd      	bne.n	8001dac <__gedf2+0x50>
 8001df0:	464c      	mov	r4, r9
 8001df2:	4326      	orrs	r6, r4
 8001df4:	d1da      	bne.n	8001dac <__gedf2+0x50>
 8001df6:	e7db      	b.n	8001db0 <__gedf2+0x54>
 8001df8:	465b      	mov	r3, fp
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0db      	beq.n	8001db8 <__gedf2+0x5c>
 8001e00:	e7d6      	b.n	8001db0 <__gedf2+0x54>
 8001e02:	429a      	cmp	r2, r3
 8001e04:	dc0a      	bgt.n	8001e1c <__gedf2+0xc0>
 8001e06:	dbe7      	blt.n	8001dd8 <__gedf2+0x7c>
 8001e08:	454f      	cmp	r7, r9
 8001e0a:	d8d1      	bhi.n	8001db0 <__gedf2+0x54>
 8001e0c:	d010      	beq.n	8001e30 <__gedf2+0xd4>
 8001e0e:	2000      	movs	r0, #0
 8001e10:	454f      	cmp	r7, r9
 8001e12:	d2d1      	bcs.n	8001db8 <__gedf2+0x5c>
 8001e14:	2900      	cmp	r1, #0
 8001e16:	d0e1      	beq.n	8001ddc <__gedf2+0x80>
 8001e18:	0008      	movs	r0, r1
 8001e1a:	e7cd      	b.n	8001db8 <__gedf2+0x5c>
 8001e1c:	4243      	negs	r3, r0
 8001e1e:	4158      	adcs	r0, r3
 8001e20:	2302      	movs	r3, #2
 8001e22:	4240      	negs	r0, r0
 8001e24:	4018      	ands	r0, r3
 8001e26:	3801      	subs	r0, #1
 8001e28:	e7c6      	b.n	8001db8 <__gedf2+0x5c>
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	4240      	negs	r0, r0
 8001e2e:	e7c3      	b.n	8001db8 <__gedf2+0x5c>
 8001e30:	45c4      	cmp	ip, r8
 8001e32:	d8bd      	bhi.n	8001db0 <__gedf2+0x54>
 8001e34:	2000      	movs	r0, #0
 8001e36:	45c4      	cmp	ip, r8
 8001e38:	d2be      	bcs.n	8001db8 <__gedf2+0x5c>
 8001e3a:	e7eb      	b.n	8001e14 <__gedf2+0xb8>
 8001e3c:	000007ff 	.word	0x000007ff

08001e40 <__ledf2>:
 8001e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e42:	464e      	mov	r6, r9
 8001e44:	4645      	mov	r5, r8
 8001e46:	4657      	mov	r7, sl
 8001e48:	46de      	mov	lr, fp
 8001e4a:	0004      	movs	r4, r0
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	b5e0      	push	{r5, r6, r7, lr}
 8001e50:	0016      	movs	r6, r2
 8001e52:	031b      	lsls	r3, r3, #12
 8001e54:	0b1b      	lsrs	r3, r3, #12
 8001e56:	4d31      	ldr	r5, [pc, #196]	; (8001f1c <__ledf2+0xdc>)
 8001e58:	030f      	lsls	r7, r1, #12
 8001e5a:	004a      	lsls	r2, r1, #1
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	0043      	lsls	r3, r0, #1
 8001e60:	46a4      	mov	ip, r4
 8001e62:	46b0      	mov	r8, r6
 8001e64:	0b3f      	lsrs	r7, r7, #12
 8001e66:	0d52      	lsrs	r2, r2, #21
 8001e68:	0fc9      	lsrs	r1, r1, #31
 8001e6a:	0d5b      	lsrs	r3, r3, #21
 8001e6c:	0fc0      	lsrs	r0, r0, #31
 8001e6e:	42aa      	cmp	r2, r5
 8001e70:	d011      	beq.n	8001e96 <__ledf2+0x56>
 8001e72:	42ab      	cmp	r3, r5
 8001e74:	d014      	beq.n	8001ea0 <__ledf2+0x60>
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	d12f      	bne.n	8001eda <__ledf2+0x9a>
 8001e7a:	433c      	orrs	r4, r7
 8001e7c:	46a3      	mov	fp, r4
 8001e7e:	4265      	negs	r5, r4
 8001e80:	4165      	adcs	r5, r4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d114      	bne.n	8001eb0 <__ledf2+0x70>
 8001e86:	464c      	mov	r4, r9
 8001e88:	4326      	orrs	r6, r4
 8001e8a:	d111      	bne.n	8001eb0 <__ledf2+0x70>
 8001e8c:	465b      	mov	r3, fp
 8001e8e:	2000      	movs	r0, #0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d017      	beq.n	8001ec4 <__ledf2+0x84>
 8001e94:	e010      	b.n	8001eb8 <__ledf2+0x78>
 8001e96:	003d      	movs	r5, r7
 8001e98:	4325      	orrs	r5, r4
 8001e9a:	d112      	bne.n	8001ec2 <__ledf2+0x82>
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d11c      	bne.n	8001eda <__ledf2+0x9a>
 8001ea0:	464d      	mov	r5, r9
 8001ea2:	432e      	orrs	r6, r5
 8001ea4:	d10d      	bne.n	8001ec2 <__ledf2+0x82>
 8001ea6:	2a00      	cmp	r2, #0
 8001ea8:	d104      	bne.n	8001eb4 <__ledf2+0x74>
 8001eaa:	433c      	orrs	r4, r7
 8001eac:	4265      	negs	r5, r4
 8001eae:	4165      	adcs	r5, r4
 8001eb0:	2d00      	cmp	r5, #0
 8001eb2:	d10d      	bne.n	8001ed0 <__ledf2+0x90>
 8001eb4:	4281      	cmp	r1, r0
 8001eb6:	d016      	beq.n	8001ee6 <__ledf2+0xa6>
 8001eb8:	2002      	movs	r0, #2
 8001eba:	3901      	subs	r1, #1
 8001ebc:	4008      	ands	r0, r1
 8001ebe:	3801      	subs	r0, #1
 8001ec0:	e000      	b.n	8001ec4 <__ledf2+0x84>
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ec6:	46bb      	mov	fp, r7
 8001ec8:	46b2      	mov	sl, r6
 8001eca:	46a9      	mov	r9, r5
 8001ecc:	46a0      	mov	r8, r4
 8001ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	d1f7      	bne.n	8001ec4 <__ledf2+0x84>
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	4240      	negs	r0, r0
 8001ed8:	e7f4      	b.n	8001ec4 <__ledf2+0x84>
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ea      	bne.n	8001eb4 <__ledf2+0x74>
 8001ede:	464c      	mov	r4, r9
 8001ee0:	4326      	orrs	r6, r4
 8001ee2:	d1e7      	bne.n	8001eb4 <__ledf2+0x74>
 8001ee4:	e7e8      	b.n	8001eb8 <__ledf2+0x78>
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	dd06      	ble.n	8001ef8 <__ledf2+0xb8>
 8001eea:	4243      	negs	r3, r0
 8001eec:	4158      	adcs	r0, r3
 8001eee:	2302      	movs	r3, #2
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	4018      	ands	r0, r3
 8001ef4:	3801      	subs	r0, #1
 8001ef6:	e7e5      	b.n	8001ec4 <__ledf2+0x84>
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dbe9      	blt.n	8001ed0 <__ledf2+0x90>
 8001efc:	454f      	cmp	r7, r9
 8001efe:	d8db      	bhi.n	8001eb8 <__ledf2+0x78>
 8001f00:	d006      	beq.n	8001f10 <__ledf2+0xd0>
 8001f02:	2000      	movs	r0, #0
 8001f04:	454f      	cmp	r7, r9
 8001f06:	d2dd      	bcs.n	8001ec4 <__ledf2+0x84>
 8001f08:	2900      	cmp	r1, #0
 8001f0a:	d0e3      	beq.n	8001ed4 <__ledf2+0x94>
 8001f0c:	0008      	movs	r0, r1
 8001f0e:	e7d9      	b.n	8001ec4 <__ledf2+0x84>
 8001f10:	45c4      	cmp	ip, r8
 8001f12:	d8d1      	bhi.n	8001eb8 <__ledf2+0x78>
 8001f14:	2000      	movs	r0, #0
 8001f16:	45c4      	cmp	ip, r8
 8001f18:	d2d4      	bcs.n	8001ec4 <__ledf2+0x84>
 8001f1a:	e7f5      	b.n	8001f08 <__ledf2+0xc8>
 8001f1c:	000007ff 	.word	0x000007ff

08001f20 <__aeabi_dmul>:
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	4657      	mov	r7, sl
 8001f24:	464e      	mov	r6, r9
 8001f26:	4645      	mov	r5, r8
 8001f28:	46de      	mov	lr, fp
 8001f2a:	b5e0      	push	{r5, r6, r7, lr}
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	030c      	lsls	r4, r1, #12
 8001f30:	004b      	lsls	r3, r1, #1
 8001f32:	0006      	movs	r6, r0
 8001f34:	4692      	mov	sl, r2
 8001f36:	b087      	sub	sp, #28
 8001f38:	0b24      	lsrs	r4, r4, #12
 8001f3a:	0d5b      	lsrs	r3, r3, #21
 8001f3c:	0fcf      	lsrs	r7, r1, #31
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d06c      	beq.n	800201c <__aeabi_dmul+0xfc>
 8001f42:	4add      	ldr	r2, [pc, #884]	; (80022b8 <__aeabi_dmul+0x398>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x2a>
 8001f48:	e086      	b.n	8002058 <__aeabi_dmul+0x138>
 8001f4a:	0f42      	lsrs	r2, r0, #29
 8001f4c:	00e4      	lsls	r4, r4, #3
 8001f4e:	4314      	orrs	r4, r2
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	0412      	lsls	r2, r2, #16
 8001f54:	4314      	orrs	r4, r2
 8001f56:	4ad9      	ldr	r2, [pc, #868]	; (80022bc <__aeabi_dmul+0x39c>)
 8001f58:	00c5      	lsls	r5, r0, #3
 8001f5a:	4694      	mov	ip, r2
 8001f5c:	4463      	add	r3, ip
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2300      	movs	r3, #0
 8001f62:	4699      	mov	r9, r3
 8001f64:	469b      	mov	fp, r3
 8001f66:	4643      	mov	r3, r8
 8001f68:	4642      	mov	r2, r8
 8001f6a:	031e      	lsls	r6, r3, #12
 8001f6c:	0fd2      	lsrs	r2, r2, #31
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4650      	mov	r0, sl
 8001f72:	4690      	mov	r8, r2
 8001f74:	0b36      	lsrs	r6, r6, #12
 8001f76:	0d5b      	lsrs	r3, r3, #21
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dmul+0x5c>
 8001f7a:	e078      	b.n	800206e <__aeabi_dmul+0x14e>
 8001f7c:	4ace      	ldr	r2, [pc, #824]	; (80022b8 <__aeabi_dmul+0x398>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01d      	beq.n	8001fbe <__aeabi_dmul+0x9e>
 8001f82:	49ce      	ldr	r1, [pc, #824]	; (80022bc <__aeabi_dmul+0x39c>)
 8001f84:	0f42      	lsrs	r2, r0, #29
 8001f86:	468c      	mov	ip, r1
 8001f88:	9900      	ldr	r1, [sp, #0]
 8001f8a:	4463      	add	r3, ip
 8001f8c:	00f6      	lsls	r6, r6, #3
 8001f8e:	468c      	mov	ip, r1
 8001f90:	4316      	orrs	r6, r2
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	449c      	add	ip, r3
 8001f96:	0412      	lsls	r2, r2, #16
 8001f98:	4663      	mov	r3, ip
 8001f9a:	4316      	orrs	r6, r2
 8001f9c:	00c2      	lsls	r2, r0, #3
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	9900      	ldr	r1, [sp, #0]
 8001fa4:	4643      	mov	r3, r8
 8001fa6:	3101      	adds	r1, #1
 8001fa8:	468c      	mov	ip, r1
 8001faa:	4649      	mov	r1, r9
 8001fac:	407b      	eors	r3, r7
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	290f      	cmp	r1, #15
 8001fb2:	d900      	bls.n	8001fb6 <__aeabi_dmul+0x96>
 8001fb4:	e07e      	b.n	80020b4 <__aeabi_dmul+0x194>
 8001fb6:	4bc2      	ldr	r3, [pc, #776]	; (80022c0 <__aeabi_dmul+0x3a0>)
 8001fb8:	0089      	lsls	r1, r1, #2
 8001fba:	5859      	ldr	r1, [r3, r1]
 8001fbc:	468f      	mov	pc, r1
 8001fbe:	4652      	mov	r2, sl
 8001fc0:	9b00      	ldr	r3, [sp, #0]
 8001fc2:	4332      	orrs	r2, r6
 8001fc4:	d000      	beq.n	8001fc8 <__aeabi_dmul+0xa8>
 8001fc6:	e156      	b.n	8002276 <__aeabi_dmul+0x356>
 8001fc8:	49bb      	ldr	r1, [pc, #748]	; (80022b8 <__aeabi_dmul+0x398>)
 8001fca:	2600      	movs	r6, #0
 8001fcc:	468c      	mov	ip, r1
 8001fce:	4463      	add	r3, ip
 8001fd0:	4649      	mov	r1, r9
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	4319      	orrs	r1, r3
 8001fd8:	4689      	mov	r9, r1
 8001fda:	2002      	movs	r0, #2
 8001fdc:	e7e1      	b.n	8001fa2 <__aeabi_dmul+0x82>
 8001fde:	4643      	mov	r3, r8
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	0034      	movs	r4, r6
 8001fe4:	0015      	movs	r5, r2
 8001fe6:	4683      	mov	fp, r0
 8001fe8:	465b      	mov	r3, fp
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d05e      	beq.n	80020ac <__aeabi_dmul+0x18c>
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dmul+0xd4>
 8001ff2:	e1f3      	b.n	80023dc <__aeabi_dmul+0x4bc>
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d000      	beq.n	8001ffa <__aeabi_dmul+0xda>
 8001ff8:	e118      	b.n	800222c <__aeabi_dmul+0x30c>
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2500      	movs	r5, #0
 8002000:	9b01      	ldr	r3, [sp, #4]
 8002002:	0512      	lsls	r2, r2, #20
 8002004:	4322      	orrs	r2, r4
 8002006:	07db      	lsls	r3, r3, #31
 8002008:	431a      	orrs	r2, r3
 800200a:	0028      	movs	r0, r5
 800200c:	0011      	movs	r1, r2
 800200e:	b007      	add	sp, #28
 8002010:	bcf0      	pop	{r4, r5, r6, r7}
 8002012:	46bb      	mov	fp, r7
 8002014:	46b2      	mov	sl, r6
 8002016:	46a9      	mov	r9, r5
 8002018:	46a0      	mov	r8, r4
 800201a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800201c:	0025      	movs	r5, r4
 800201e:	4305      	orrs	r5, r0
 8002020:	d100      	bne.n	8002024 <__aeabi_dmul+0x104>
 8002022:	e141      	b.n	80022a8 <__aeabi_dmul+0x388>
 8002024:	2c00      	cmp	r4, #0
 8002026:	d100      	bne.n	800202a <__aeabi_dmul+0x10a>
 8002028:	e1ad      	b.n	8002386 <__aeabi_dmul+0x466>
 800202a:	0020      	movs	r0, r4
 800202c:	f000 fef0 	bl	8002e10 <__clzsi2>
 8002030:	0001      	movs	r1, r0
 8002032:	0002      	movs	r2, r0
 8002034:	390b      	subs	r1, #11
 8002036:	231d      	movs	r3, #29
 8002038:	0010      	movs	r0, r2
 800203a:	1a5b      	subs	r3, r3, r1
 800203c:	0031      	movs	r1, r6
 800203e:	0035      	movs	r5, r6
 8002040:	3808      	subs	r0, #8
 8002042:	4084      	lsls	r4, r0
 8002044:	40d9      	lsrs	r1, r3
 8002046:	4085      	lsls	r5, r0
 8002048:	430c      	orrs	r4, r1
 800204a:	489e      	ldr	r0, [pc, #632]	; (80022c4 <__aeabi_dmul+0x3a4>)
 800204c:	1a83      	subs	r3, r0, r2
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2300      	movs	r3, #0
 8002052:	4699      	mov	r9, r3
 8002054:	469b      	mov	fp, r3
 8002056:	e786      	b.n	8001f66 <__aeabi_dmul+0x46>
 8002058:	0005      	movs	r5, r0
 800205a:	4325      	orrs	r5, r4
 800205c:	d000      	beq.n	8002060 <__aeabi_dmul+0x140>
 800205e:	e11c      	b.n	800229a <__aeabi_dmul+0x37a>
 8002060:	2208      	movs	r2, #8
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2302      	movs	r3, #2
 8002066:	2400      	movs	r4, #0
 8002068:	4691      	mov	r9, r2
 800206a:	469b      	mov	fp, r3
 800206c:	e77b      	b.n	8001f66 <__aeabi_dmul+0x46>
 800206e:	4652      	mov	r2, sl
 8002070:	4332      	orrs	r2, r6
 8002072:	d100      	bne.n	8002076 <__aeabi_dmul+0x156>
 8002074:	e10a      	b.n	800228c <__aeabi_dmul+0x36c>
 8002076:	2e00      	cmp	r6, #0
 8002078:	d100      	bne.n	800207c <__aeabi_dmul+0x15c>
 800207a:	e176      	b.n	800236a <__aeabi_dmul+0x44a>
 800207c:	0030      	movs	r0, r6
 800207e:	f000 fec7 	bl	8002e10 <__clzsi2>
 8002082:	0002      	movs	r2, r0
 8002084:	3a0b      	subs	r2, #11
 8002086:	231d      	movs	r3, #29
 8002088:	0001      	movs	r1, r0
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	4652      	mov	r2, sl
 800208e:	3908      	subs	r1, #8
 8002090:	40da      	lsrs	r2, r3
 8002092:	408e      	lsls	r6, r1
 8002094:	4316      	orrs	r6, r2
 8002096:	4652      	mov	r2, sl
 8002098:	408a      	lsls	r2, r1
 800209a:	9b00      	ldr	r3, [sp, #0]
 800209c:	4989      	ldr	r1, [pc, #548]	; (80022c4 <__aeabi_dmul+0x3a4>)
 800209e:	1a18      	subs	r0, r3, r0
 80020a0:	0003      	movs	r3, r0
 80020a2:	468c      	mov	ip, r1
 80020a4:	4463      	add	r3, ip
 80020a6:	2000      	movs	r0, #0
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	e77a      	b.n	8001fa2 <__aeabi_dmul+0x82>
 80020ac:	2400      	movs	r4, #0
 80020ae:	2500      	movs	r5, #0
 80020b0:	4a81      	ldr	r2, [pc, #516]	; (80022b8 <__aeabi_dmul+0x398>)
 80020b2:	e7a5      	b.n	8002000 <__aeabi_dmul+0xe0>
 80020b4:	0c2f      	lsrs	r7, r5, #16
 80020b6:	042d      	lsls	r5, r5, #16
 80020b8:	0c2d      	lsrs	r5, r5, #16
 80020ba:	002b      	movs	r3, r5
 80020bc:	0c11      	lsrs	r1, r2, #16
 80020be:	0412      	lsls	r2, r2, #16
 80020c0:	0c12      	lsrs	r2, r2, #16
 80020c2:	4353      	muls	r3, r2
 80020c4:	4698      	mov	r8, r3
 80020c6:	0013      	movs	r3, r2
 80020c8:	0028      	movs	r0, r5
 80020ca:	437b      	muls	r3, r7
 80020cc:	4699      	mov	r9, r3
 80020ce:	4348      	muls	r0, r1
 80020d0:	4448      	add	r0, r9
 80020d2:	4683      	mov	fp, r0
 80020d4:	4640      	mov	r0, r8
 80020d6:	000b      	movs	r3, r1
 80020d8:	0c00      	lsrs	r0, r0, #16
 80020da:	4682      	mov	sl, r0
 80020dc:	4658      	mov	r0, fp
 80020de:	437b      	muls	r3, r7
 80020e0:	4450      	add	r0, sl
 80020e2:	9302      	str	r3, [sp, #8]
 80020e4:	4581      	cmp	r9, r0
 80020e6:	d906      	bls.n	80020f6 <__aeabi_dmul+0x1d6>
 80020e8:	469a      	mov	sl, r3
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	025b      	lsls	r3, r3, #9
 80020ee:	4699      	mov	r9, r3
 80020f0:	44ca      	add	sl, r9
 80020f2:	4653      	mov	r3, sl
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	0c03      	lsrs	r3, r0, #16
 80020f8:	469b      	mov	fp, r3
 80020fa:	4643      	mov	r3, r8
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	0400      	lsls	r0, r0, #16
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	4698      	mov	r8, r3
 8002104:	0003      	movs	r3, r0
 8002106:	4443      	add	r3, r8
 8002108:	9304      	str	r3, [sp, #16]
 800210a:	0c33      	lsrs	r3, r6, #16
 800210c:	4699      	mov	r9, r3
 800210e:	002b      	movs	r3, r5
 8002110:	0436      	lsls	r6, r6, #16
 8002112:	0c36      	lsrs	r6, r6, #16
 8002114:	4373      	muls	r3, r6
 8002116:	4698      	mov	r8, r3
 8002118:	0033      	movs	r3, r6
 800211a:	437b      	muls	r3, r7
 800211c:	469a      	mov	sl, r3
 800211e:	464b      	mov	r3, r9
 8002120:	435d      	muls	r5, r3
 8002122:	435f      	muls	r7, r3
 8002124:	4643      	mov	r3, r8
 8002126:	4455      	add	r5, sl
 8002128:	0c18      	lsrs	r0, r3, #16
 800212a:	1940      	adds	r0, r0, r5
 800212c:	4582      	cmp	sl, r0
 800212e:	d903      	bls.n	8002138 <__aeabi_dmul+0x218>
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	025b      	lsls	r3, r3, #9
 8002134:	469a      	mov	sl, r3
 8002136:	4457      	add	r7, sl
 8002138:	0c05      	lsrs	r5, r0, #16
 800213a:	19eb      	adds	r3, r5, r7
 800213c:	9305      	str	r3, [sp, #20]
 800213e:	4643      	mov	r3, r8
 8002140:	041d      	lsls	r5, r3, #16
 8002142:	0c2d      	lsrs	r5, r5, #16
 8002144:	0400      	lsls	r0, r0, #16
 8002146:	1940      	adds	r0, r0, r5
 8002148:	0c25      	lsrs	r5, r4, #16
 800214a:	0424      	lsls	r4, r4, #16
 800214c:	0c24      	lsrs	r4, r4, #16
 800214e:	0027      	movs	r7, r4
 8002150:	4357      	muls	r7, r2
 8002152:	436a      	muls	r2, r5
 8002154:	4690      	mov	r8, r2
 8002156:	002a      	movs	r2, r5
 8002158:	0c3b      	lsrs	r3, r7, #16
 800215a:	469a      	mov	sl, r3
 800215c:	434a      	muls	r2, r1
 800215e:	4361      	muls	r1, r4
 8002160:	4441      	add	r1, r8
 8002162:	4451      	add	r1, sl
 8002164:	4483      	add	fp, r0
 8002166:	4588      	cmp	r8, r1
 8002168:	d903      	bls.n	8002172 <__aeabi_dmul+0x252>
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	4698      	mov	r8, r3
 8002170:	4442      	add	r2, r8
 8002172:	043f      	lsls	r7, r7, #16
 8002174:	0c0b      	lsrs	r3, r1, #16
 8002176:	0c3f      	lsrs	r7, r7, #16
 8002178:	0409      	lsls	r1, r1, #16
 800217a:	19c9      	adds	r1, r1, r7
 800217c:	0027      	movs	r7, r4
 800217e:	4698      	mov	r8, r3
 8002180:	464b      	mov	r3, r9
 8002182:	4377      	muls	r7, r6
 8002184:	435c      	muls	r4, r3
 8002186:	436e      	muls	r6, r5
 8002188:	435d      	muls	r5, r3
 800218a:	0c3b      	lsrs	r3, r7, #16
 800218c:	4699      	mov	r9, r3
 800218e:	19a4      	adds	r4, r4, r6
 8002190:	444c      	add	r4, r9
 8002192:	4442      	add	r2, r8
 8002194:	9503      	str	r5, [sp, #12]
 8002196:	42a6      	cmp	r6, r4
 8002198:	d904      	bls.n	80021a4 <__aeabi_dmul+0x284>
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	025b      	lsls	r3, r3, #9
 800219e:	4698      	mov	r8, r3
 80021a0:	4445      	add	r5, r8
 80021a2:	9503      	str	r5, [sp, #12]
 80021a4:	9b02      	ldr	r3, [sp, #8]
 80021a6:	043f      	lsls	r7, r7, #16
 80021a8:	445b      	add	r3, fp
 80021aa:	001e      	movs	r6, r3
 80021ac:	4283      	cmp	r3, r0
 80021ae:	4180      	sbcs	r0, r0
 80021b0:	0423      	lsls	r3, r4, #16
 80021b2:	4698      	mov	r8, r3
 80021b4:	9b05      	ldr	r3, [sp, #20]
 80021b6:	0c3f      	lsrs	r7, r7, #16
 80021b8:	4447      	add	r7, r8
 80021ba:	4698      	mov	r8, r3
 80021bc:	1876      	adds	r6, r6, r1
 80021be:	428e      	cmp	r6, r1
 80021c0:	4189      	sbcs	r1, r1
 80021c2:	4447      	add	r7, r8
 80021c4:	4240      	negs	r0, r0
 80021c6:	183d      	adds	r5, r7, r0
 80021c8:	46a8      	mov	r8, r5
 80021ca:	4693      	mov	fp, r2
 80021cc:	4249      	negs	r1, r1
 80021ce:	468a      	mov	sl, r1
 80021d0:	44c3      	add	fp, r8
 80021d2:	429f      	cmp	r7, r3
 80021d4:	41bf      	sbcs	r7, r7
 80021d6:	4580      	cmp	r8, r0
 80021d8:	4180      	sbcs	r0, r0
 80021da:	9b03      	ldr	r3, [sp, #12]
 80021dc:	44da      	add	sl, fp
 80021de:	4698      	mov	r8, r3
 80021e0:	4653      	mov	r3, sl
 80021e2:	4240      	negs	r0, r0
 80021e4:	427f      	negs	r7, r7
 80021e6:	4307      	orrs	r7, r0
 80021e8:	0c24      	lsrs	r4, r4, #16
 80021ea:	4593      	cmp	fp, r2
 80021ec:	4192      	sbcs	r2, r2
 80021ee:	458a      	cmp	sl, r1
 80021f0:	4189      	sbcs	r1, r1
 80021f2:	193f      	adds	r7, r7, r4
 80021f4:	0ddc      	lsrs	r4, r3, #23
 80021f6:	9b04      	ldr	r3, [sp, #16]
 80021f8:	0275      	lsls	r5, r6, #9
 80021fa:	431d      	orrs	r5, r3
 80021fc:	1e68      	subs	r0, r5, #1
 80021fe:	4185      	sbcs	r5, r0
 8002200:	4653      	mov	r3, sl
 8002202:	4252      	negs	r2, r2
 8002204:	4249      	negs	r1, r1
 8002206:	430a      	orrs	r2, r1
 8002208:	18bf      	adds	r7, r7, r2
 800220a:	4447      	add	r7, r8
 800220c:	0df6      	lsrs	r6, r6, #23
 800220e:	027f      	lsls	r7, r7, #9
 8002210:	4335      	orrs	r5, r6
 8002212:	025a      	lsls	r2, r3, #9
 8002214:	433c      	orrs	r4, r7
 8002216:	4315      	orrs	r5, r2
 8002218:	01fb      	lsls	r3, r7, #7
 800221a:	d400      	bmi.n	800221e <__aeabi_dmul+0x2fe>
 800221c:	e0c1      	b.n	80023a2 <__aeabi_dmul+0x482>
 800221e:	2101      	movs	r1, #1
 8002220:	086a      	lsrs	r2, r5, #1
 8002222:	400d      	ands	r5, r1
 8002224:	4315      	orrs	r5, r2
 8002226:	07e2      	lsls	r2, r4, #31
 8002228:	4315      	orrs	r5, r2
 800222a:	0864      	lsrs	r4, r4, #1
 800222c:	4926      	ldr	r1, [pc, #152]	; (80022c8 <__aeabi_dmul+0x3a8>)
 800222e:	4461      	add	r1, ip
 8002230:	2900      	cmp	r1, #0
 8002232:	dd56      	ble.n	80022e2 <__aeabi_dmul+0x3c2>
 8002234:	076b      	lsls	r3, r5, #29
 8002236:	d009      	beq.n	800224c <__aeabi_dmul+0x32c>
 8002238:	220f      	movs	r2, #15
 800223a:	402a      	ands	r2, r5
 800223c:	2a04      	cmp	r2, #4
 800223e:	d005      	beq.n	800224c <__aeabi_dmul+0x32c>
 8002240:	1d2a      	adds	r2, r5, #4
 8002242:	42aa      	cmp	r2, r5
 8002244:	41ad      	sbcs	r5, r5
 8002246:	426d      	negs	r5, r5
 8002248:	1964      	adds	r4, r4, r5
 800224a:	0015      	movs	r5, r2
 800224c:	01e3      	lsls	r3, r4, #7
 800224e:	d504      	bpl.n	800225a <__aeabi_dmul+0x33a>
 8002250:	2180      	movs	r1, #128	; 0x80
 8002252:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <__aeabi_dmul+0x3ac>)
 8002254:	00c9      	lsls	r1, r1, #3
 8002256:	4014      	ands	r4, r2
 8002258:	4461      	add	r1, ip
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <__aeabi_dmul+0x3b0>)
 800225c:	4291      	cmp	r1, r2
 800225e:	dd00      	ble.n	8002262 <__aeabi_dmul+0x342>
 8002260:	e724      	b.n	80020ac <__aeabi_dmul+0x18c>
 8002262:	0762      	lsls	r2, r4, #29
 8002264:	08ed      	lsrs	r5, r5, #3
 8002266:	0264      	lsls	r4, r4, #9
 8002268:	0549      	lsls	r1, r1, #21
 800226a:	4315      	orrs	r5, r2
 800226c:	0b24      	lsrs	r4, r4, #12
 800226e:	0d4a      	lsrs	r2, r1, #21
 8002270:	e6c6      	b.n	8002000 <__aeabi_dmul+0xe0>
 8002272:	9701      	str	r7, [sp, #4]
 8002274:	e6b8      	b.n	8001fe8 <__aeabi_dmul+0xc8>
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <__aeabi_dmul+0x398>)
 8002278:	2003      	movs	r0, #3
 800227a:	4694      	mov	ip, r2
 800227c:	4463      	add	r3, ip
 800227e:	464a      	mov	r2, r9
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2303      	movs	r3, #3
 8002284:	431a      	orrs	r2, r3
 8002286:	4691      	mov	r9, r2
 8002288:	4652      	mov	r2, sl
 800228a:	e68a      	b.n	8001fa2 <__aeabi_dmul+0x82>
 800228c:	4649      	mov	r1, r9
 800228e:	2301      	movs	r3, #1
 8002290:	4319      	orrs	r1, r3
 8002292:	4689      	mov	r9, r1
 8002294:	2600      	movs	r6, #0
 8002296:	2001      	movs	r0, #1
 8002298:	e683      	b.n	8001fa2 <__aeabi_dmul+0x82>
 800229a:	220c      	movs	r2, #12
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2303      	movs	r3, #3
 80022a0:	0005      	movs	r5, r0
 80022a2:	4691      	mov	r9, r2
 80022a4:	469b      	mov	fp, r3
 80022a6:	e65e      	b.n	8001f66 <__aeabi_dmul+0x46>
 80022a8:	2304      	movs	r3, #4
 80022aa:	4699      	mov	r9, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	2400      	movs	r4, #0
 80022b4:	469b      	mov	fp, r3
 80022b6:	e656      	b.n	8001f66 <__aeabi_dmul+0x46>
 80022b8:	000007ff 	.word	0x000007ff
 80022bc:	fffffc01 	.word	0xfffffc01
 80022c0:	0800e0dc 	.word	0x0800e0dc
 80022c4:	fffffc0d 	.word	0xfffffc0d
 80022c8:	000003ff 	.word	0x000003ff
 80022cc:	feffffff 	.word	0xfeffffff
 80022d0:	000007fe 	.word	0x000007fe
 80022d4:	2300      	movs	r3, #0
 80022d6:	2480      	movs	r4, #128	; 0x80
 80022d8:	2500      	movs	r5, #0
 80022da:	4a44      	ldr	r2, [pc, #272]	; (80023ec <__aeabi_dmul+0x4cc>)
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	0324      	lsls	r4, r4, #12
 80022e0:	e68e      	b.n	8002000 <__aeabi_dmul+0xe0>
 80022e2:	2001      	movs	r0, #1
 80022e4:	1a40      	subs	r0, r0, r1
 80022e6:	2838      	cmp	r0, #56	; 0x38
 80022e8:	dd00      	ble.n	80022ec <__aeabi_dmul+0x3cc>
 80022ea:	e686      	b.n	8001ffa <__aeabi_dmul+0xda>
 80022ec:	281f      	cmp	r0, #31
 80022ee:	dd5b      	ble.n	80023a8 <__aeabi_dmul+0x488>
 80022f0:	221f      	movs	r2, #31
 80022f2:	0023      	movs	r3, r4
 80022f4:	4252      	negs	r2, r2
 80022f6:	1a51      	subs	r1, r2, r1
 80022f8:	40cb      	lsrs	r3, r1
 80022fa:	0019      	movs	r1, r3
 80022fc:	2820      	cmp	r0, #32
 80022fe:	d003      	beq.n	8002308 <__aeabi_dmul+0x3e8>
 8002300:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <__aeabi_dmul+0x4d0>)
 8002302:	4462      	add	r2, ip
 8002304:	4094      	lsls	r4, r2
 8002306:	4325      	orrs	r5, r4
 8002308:	1e6a      	subs	r2, r5, #1
 800230a:	4195      	sbcs	r5, r2
 800230c:	002a      	movs	r2, r5
 800230e:	430a      	orrs	r2, r1
 8002310:	2107      	movs	r1, #7
 8002312:	000d      	movs	r5, r1
 8002314:	2400      	movs	r4, #0
 8002316:	4015      	ands	r5, r2
 8002318:	4211      	tst	r1, r2
 800231a:	d05b      	beq.n	80023d4 <__aeabi_dmul+0x4b4>
 800231c:	210f      	movs	r1, #15
 800231e:	2400      	movs	r4, #0
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d053      	beq.n	80023ce <__aeabi_dmul+0x4ae>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	18a4      	adds	r4, r4, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0223      	lsls	r3, r4, #8
 8002334:	d54b      	bpl.n	80023ce <__aeabi_dmul+0x4ae>
 8002336:	2201      	movs	r2, #1
 8002338:	2400      	movs	r4, #0
 800233a:	2500      	movs	r5, #0
 800233c:	e660      	b.n	8002000 <__aeabi_dmul+0xe0>
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	031b      	lsls	r3, r3, #12
 8002342:	421c      	tst	r4, r3
 8002344:	d009      	beq.n	800235a <__aeabi_dmul+0x43a>
 8002346:	421e      	tst	r6, r3
 8002348:	d107      	bne.n	800235a <__aeabi_dmul+0x43a>
 800234a:	4333      	orrs	r3, r6
 800234c:	031c      	lsls	r4, r3, #12
 800234e:	4643      	mov	r3, r8
 8002350:	0015      	movs	r5, r2
 8002352:	0b24      	lsrs	r4, r4, #12
 8002354:	4a25      	ldr	r2, [pc, #148]	; (80023ec <__aeabi_dmul+0x4cc>)
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	e652      	b.n	8002000 <__aeabi_dmul+0xe0>
 800235a:	2280      	movs	r2, #128	; 0x80
 800235c:	0312      	lsls	r2, r2, #12
 800235e:	4314      	orrs	r4, r2
 8002360:	0324      	lsls	r4, r4, #12
 8002362:	4a22      	ldr	r2, [pc, #136]	; (80023ec <__aeabi_dmul+0x4cc>)
 8002364:	0b24      	lsrs	r4, r4, #12
 8002366:	9701      	str	r7, [sp, #4]
 8002368:	e64a      	b.n	8002000 <__aeabi_dmul+0xe0>
 800236a:	f000 fd51 	bl	8002e10 <__clzsi2>
 800236e:	0003      	movs	r3, r0
 8002370:	001a      	movs	r2, r3
 8002372:	3215      	adds	r2, #21
 8002374:	3020      	adds	r0, #32
 8002376:	2a1c      	cmp	r2, #28
 8002378:	dc00      	bgt.n	800237c <__aeabi_dmul+0x45c>
 800237a:	e684      	b.n	8002086 <__aeabi_dmul+0x166>
 800237c:	4656      	mov	r6, sl
 800237e:	3b08      	subs	r3, #8
 8002380:	2200      	movs	r2, #0
 8002382:	409e      	lsls	r6, r3
 8002384:	e689      	b.n	800209a <__aeabi_dmul+0x17a>
 8002386:	f000 fd43 	bl	8002e10 <__clzsi2>
 800238a:	0001      	movs	r1, r0
 800238c:	0002      	movs	r2, r0
 800238e:	3115      	adds	r1, #21
 8002390:	3220      	adds	r2, #32
 8002392:	291c      	cmp	r1, #28
 8002394:	dc00      	bgt.n	8002398 <__aeabi_dmul+0x478>
 8002396:	e64e      	b.n	8002036 <__aeabi_dmul+0x116>
 8002398:	0034      	movs	r4, r6
 800239a:	3808      	subs	r0, #8
 800239c:	2500      	movs	r5, #0
 800239e:	4084      	lsls	r4, r0
 80023a0:	e653      	b.n	800204a <__aeabi_dmul+0x12a>
 80023a2:	9b00      	ldr	r3, [sp, #0]
 80023a4:	469c      	mov	ip, r3
 80023a6:	e741      	b.n	800222c <__aeabi_dmul+0x30c>
 80023a8:	4912      	ldr	r1, [pc, #72]	; (80023f4 <__aeabi_dmul+0x4d4>)
 80023aa:	0022      	movs	r2, r4
 80023ac:	4461      	add	r1, ip
 80023ae:	002e      	movs	r6, r5
 80023b0:	408d      	lsls	r5, r1
 80023b2:	408a      	lsls	r2, r1
 80023b4:	40c6      	lsrs	r6, r0
 80023b6:	1e69      	subs	r1, r5, #1
 80023b8:	418d      	sbcs	r5, r1
 80023ba:	4332      	orrs	r2, r6
 80023bc:	432a      	orrs	r2, r5
 80023be:	40c4      	lsrs	r4, r0
 80023c0:	0753      	lsls	r3, r2, #29
 80023c2:	d0b6      	beq.n	8002332 <__aeabi_dmul+0x412>
 80023c4:	210f      	movs	r1, #15
 80023c6:	4011      	ands	r1, r2
 80023c8:	2904      	cmp	r1, #4
 80023ca:	d1ac      	bne.n	8002326 <__aeabi_dmul+0x406>
 80023cc:	e7b1      	b.n	8002332 <__aeabi_dmul+0x412>
 80023ce:	0765      	lsls	r5, r4, #29
 80023d0:	0264      	lsls	r4, r4, #9
 80023d2:	0b24      	lsrs	r4, r4, #12
 80023d4:	08d2      	lsrs	r2, r2, #3
 80023d6:	4315      	orrs	r5, r2
 80023d8:	2200      	movs	r2, #0
 80023da:	e611      	b.n	8002000 <__aeabi_dmul+0xe0>
 80023dc:	2280      	movs	r2, #128	; 0x80
 80023de:	0312      	lsls	r2, r2, #12
 80023e0:	4314      	orrs	r4, r2
 80023e2:	0324      	lsls	r4, r4, #12
 80023e4:	4a01      	ldr	r2, [pc, #4]	; (80023ec <__aeabi_dmul+0x4cc>)
 80023e6:	0b24      	lsrs	r4, r4, #12
 80023e8:	e60a      	b.n	8002000 <__aeabi_dmul+0xe0>
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	000007ff 	.word	0x000007ff
 80023f0:	0000043e 	.word	0x0000043e
 80023f4:	0000041e 	.word	0x0000041e

080023f8 <__aeabi_dsub>:
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fa:	4657      	mov	r7, sl
 80023fc:	464e      	mov	r6, r9
 80023fe:	4645      	mov	r5, r8
 8002400:	46de      	mov	lr, fp
 8002402:	0004      	movs	r4, r0
 8002404:	b5e0      	push	{r5, r6, r7, lr}
 8002406:	001f      	movs	r7, r3
 8002408:	0010      	movs	r0, r2
 800240a:	030b      	lsls	r3, r1, #12
 800240c:	0f62      	lsrs	r2, r4, #29
 800240e:	004e      	lsls	r6, r1, #1
 8002410:	0fcd      	lsrs	r5, r1, #31
 8002412:	0a5b      	lsrs	r3, r3, #9
 8002414:	0339      	lsls	r1, r7, #12
 8002416:	4313      	orrs	r3, r2
 8002418:	0a49      	lsrs	r1, r1, #9
 800241a:	00e2      	lsls	r2, r4, #3
 800241c:	0f44      	lsrs	r4, r0, #29
 800241e:	4321      	orrs	r1, r4
 8002420:	4cc2      	ldr	r4, [pc, #776]	; (800272c <__aeabi_dsub+0x334>)
 8002422:	4691      	mov	r9, r2
 8002424:	4692      	mov	sl, r2
 8002426:	00c0      	lsls	r0, r0, #3
 8002428:	007a      	lsls	r2, r7, #1
 800242a:	4680      	mov	r8, r0
 800242c:	0d76      	lsrs	r6, r6, #21
 800242e:	0d52      	lsrs	r2, r2, #21
 8002430:	0fff      	lsrs	r7, r7, #31
 8002432:	42a2      	cmp	r2, r4
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x40>
 8002436:	e0b4      	b.n	80025a2 <__aeabi_dsub+0x1aa>
 8002438:	2401      	movs	r4, #1
 800243a:	4067      	eors	r7, r4
 800243c:	46bb      	mov	fp, r7
 800243e:	42bd      	cmp	r5, r7
 8002440:	d100      	bne.n	8002444 <__aeabi_dsub+0x4c>
 8002442:	e088      	b.n	8002556 <__aeabi_dsub+0x15e>
 8002444:	1ab4      	subs	r4, r6, r2
 8002446:	46a4      	mov	ip, r4
 8002448:	2c00      	cmp	r4, #0
 800244a:	dc00      	bgt.n	800244e <__aeabi_dsub+0x56>
 800244c:	e0b2      	b.n	80025b4 <__aeabi_dsub+0x1bc>
 800244e:	2a00      	cmp	r2, #0
 8002450:	d100      	bne.n	8002454 <__aeabi_dsub+0x5c>
 8002452:	e0c5      	b.n	80025e0 <__aeabi_dsub+0x1e8>
 8002454:	4ab5      	ldr	r2, [pc, #724]	; (800272c <__aeabi_dsub+0x334>)
 8002456:	4296      	cmp	r6, r2
 8002458:	d100      	bne.n	800245c <__aeabi_dsub+0x64>
 800245a:	e28b      	b.n	8002974 <__aeabi_dsub+0x57c>
 800245c:	2280      	movs	r2, #128	; 0x80
 800245e:	0412      	lsls	r2, r2, #16
 8002460:	4311      	orrs	r1, r2
 8002462:	4662      	mov	r2, ip
 8002464:	2a38      	cmp	r2, #56	; 0x38
 8002466:	dd00      	ble.n	800246a <__aeabi_dsub+0x72>
 8002468:	e1a1      	b.n	80027ae <__aeabi_dsub+0x3b6>
 800246a:	2a1f      	cmp	r2, #31
 800246c:	dd00      	ble.n	8002470 <__aeabi_dsub+0x78>
 800246e:	e216      	b.n	800289e <__aeabi_dsub+0x4a6>
 8002470:	2720      	movs	r7, #32
 8002472:	000c      	movs	r4, r1
 8002474:	1abf      	subs	r7, r7, r2
 8002476:	40bc      	lsls	r4, r7
 8002478:	0002      	movs	r2, r0
 800247a:	46a0      	mov	r8, r4
 800247c:	4664      	mov	r4, ip
 800247e:	40b8      	lsls	r0, r7
 8002480:	40e2      	lsrs	r2, r4
 8002482:	4644      	mov	r4, r8
 8002484:	4314      	orrs	r4, r2
 8002486:	0002      	movs	r2, r0
 8002488:	1e50      	subs	r0, r2, #1
 800248a:	4182      	sbcs	r2, r0
 800248c:	4660      	mov	r0, ip
 800248e:	40c1      	lsrs	r1, r0
 8002490:	4322      	orrs	r2, r4
 8002492:	1a5b      	subs	r3, r3, r1
 8002494:	4649      	mov	r1, r9
 8002496:	1a8c      	subs	r4, r1, r2
 8002498:	45a1      	cmp	r9, r4
 800249a:	4192      	sbcs	r2, r2
 800249c:	4252      	negs	r2, r2
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	4698      	mov	r8, r3
 80024a2:	4643      	mov	r3, r8
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0xb2>
 80024a8:	e117      	b.n	80026da <__aeabi_dsub+0x2e2>
 80024aa:	4643      	mov	r3, r8
 80024ac:	025b      	lsls	r3, r3, #9
 80024ae:	0a5b      	lsrs	r3, r3, #9
 80024b0:	4698      	mov	r8, r3
 80024b2:	4643      	mov	r3, r8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0xc2>
 80024b8:	e16c      	b.n	8002794 <__aeabi_dsub+0x39c>
 80024ba:	4640      	mov	r0, r8
 80024bc:	f000 fca8 	bl	8002e10 <__clzsi2>
 80024c0:	0002      	movs	r2, r0
 80024c2:	3a08      	subs	r2, #8
 80024c4:	2120      	movs	r1, #32
 80024c6:	0020      	movs	r0, r4
 80024c8:	4643      	mov	r3, r8
 80024ca:	1a89      	subs	r1, r1, r2
 80024cc:	4093      	lsls	r3, r2
 80024ce:	40c8      	lsrs	r0, r1
 80024d0:	4094      	lsls	r4, r2
 80024d2:	4303      	orrs	r3, r0
 80024d4:	4296      	cmp	r6, r2
 80024d6:	dd00      	ble.n	80024da <__aeabi_dsub+0xe2>
 80024d8:	e157      	b.n	800278a <__aeabi_dsub+0x392>
 80024da:	1b96      	subs	r6, r2, r6
 80024dc:	1c71      	adds	r1, r6, #1
 80024de:	291f      	cmp	r1, #31
 80024e0:	dd00      	ble.n	80024e4 <__aeabi_dsub+0xec>
 80024e2:	e1cb      	b.n	800287c <__aeabi_dsub+0x484>
 80024e4:	2220      	movs	r2, #32
 80024e6:	0018      	movs	r0, r3
 80024e8:	0026      	movs	r6, r4
 80024ea:	1a52      	subs	r2, r2, r1
 80024ec:	4094      	lsls	r4, r2
 80024ee:	4090      	lsls	r0, r2
 80024f0:	40ce      	lsrs	r6, r1
 80024f2:	40cb      	lsrs	r3, r1
 80024f4:	1e62      	subs	r2, r4, #1
 80024f6:	4194      	sbcs	r4, r2
 80024f8:	4330      	orrs	r0, r6
 80024fa:	4698      	mov	r8, r3
 80024fc:	2600      	movs	r6, #0
 80024fe:	4304      	orrs	r4, r0
 8002500:	0763      	lsls	r3, r4, #29
 8002502:	d009      	beq.n	8002518 <__aeabi_dsub+0x120>
 8002504:	230f      	movs	r3, #15
 8002506:	4023      	ands	r3, r4
 8002508:	2b04      	cmp	r3, #4
 800250a:	d005      	beq.n	8002518 <__aeabi_dsub+0x120>
 800250c:	1d23      	adds	r3, r4, #4
 800250e:	42a3      	cmp	r3, r4
 8002510:	41a4      	sbcs	r4, r4
 8002512:	4264      	negs	r4, r4
 8002514:	44a0      	add	r8, r4
 8002516:	001c      	movs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	d400      	bmi.n	8002520 <__aeabi_dsub+0x128>
 800251e:	e0df      	b.n	80026e0 <__aeabi_dsub+0x2e8>
 8002520:	4b82      	ldr	r3, [pc, #520]	; (800272c <__aeabi_dsub+0x334>)
 8002522:	3601      	adds	r6, #1
 8002524:	429e      	cmp	r6, r3
 8002526:	d100      	bne.n	800252a <__aeabi_dsub+0x132>
 8002528:	e0fb      	b.n	8002722 <__aeabi_dsub+0x32a>
 800252a:	4642      	mov	r2, r8
 800252c:	4b80      	ldr	r3, [pc, #512]	; (8002730 <__aeabi_dsub+0x338>)
 800252e:	08e4      	lsrs	r4, r4, #3
 8002530:	401a      	ands	r2, r3
 8002532:	0013      	movs	r3, r2
 8002534:	0571      	lsls	r1, r6, #21
 8002536:	0752      	lsls	r2, r2, #29
 8002538:	025b      	lsls	r3, r3, #9
 800253a:	4322      	orrs	r2, r4
 800253c:	0b1b      	lsrs	r3, r3, #12
 800253e:	0d49      	lsrs	r1, r1, #21
 8002540:	0509      	lsls	r1, r1, #20
 8002542:	07ed      	lsls	r5, r5, #31
 8002544:	4319      	orrs	r1, r3
 8002546:	4329      	orrs	r1, r5
 8002548:	0010      	movs	r0, r2
 800254a:	bcf0      	pop	{r4, r5, r6, r7}
 800254c:	46bb      	mov	fp, r7
 800254e:	46b2      	mov	sl, r6
 8002550:	46a9      	mov	r9, r5
 8002552:	46a0      	mov	r8, r4
 8002554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002556:	1ab4      	subs	r4, r6, r2
 8002558:	46a4      	mov	ip, r4
 800255a:	2c00      	cmp	r4, #0
 800255c:	dd58      	ble.n	8002610 <__aeabi_dsub+0x218>
 800255e:	2a00      	cmp	r2, #0
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x16c>
 8002562:	e09e      	b.n	80026a2 <__aeabi_dsub+0x2aa>
 8002564:	4a71      	ldr	r2, [pc, #452]	; (800272c <__aeabi_dsub+0x334>)
 8002566:	4296      	cmp	r6, r2
 8002568:	d100      	bne.n	800256c <__aeabi_dsub+0x174>
 800256a:	e13b      	b.n	80027e4 <__aeabi_dsub+0x3ec>
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	0412      	lsls	r2, r2, #16
 8002570:	4311      	orrs	r1, r2
 8002572:	4662      	mov	r2, ip
 8002574:	2a38      	cmp	r2, #56	; 0x38
 8002576:	dd00      	ble.n	800257a <__aeabi_dsub+0x182>
 8002578:	e0c1      	b.n	80026fe <__aeabi_dsub+0x306>
 800257a:	2a1f      	cmp	r2, #31
 800257c:	dc00      	bgt.n	8002580 <__aeabi_dsub+0x188>
 800257e:	e1bb      	b.n	80028f8 <__aeabi_dsub+0x500>
 8002580:	000c      	movs	r4, r1
 8002582:	3a20      	subs	r2, #32
 8002584:	40d4      	lsrs	r4, r2
 8002586:	0022      	movs	r2, r4
 8002588:	4664      	mov	r4, ip
 800258a:	2c20      	cmp	r4, #32
 800258c:	d004      	beq.n	8002598 <__aeabi_dsub+0x1a0>
 800258e:	2740      	movs	r7, #64	; 0x40
 8002590:	1b3f      	subs	r7, r7, r4
 8002592:	40b9      	lsls	r1, r7
 8002594:	4308      	orrs	r0, r1
 8002596:	4680      	mov	r8, r0
 8002598:	4644      	mov	r4, r8
 800259a:	1e61      	subs	r1, r4, #1
 800259c:	418c      	sbcs	r4, r1
 800259e:	4314      	orrs	r4, r2
 80025a0:	e0b1      	b.n	8002706 <__aeabi_dsub+0x30e>
 80025a2:	000c      	movs	r4, r1
 80025a4:	4304      	orrs	r4, r0
 80025a6:	d02a      	beq.n	80025fe <__aeabi_dsub+0x206>
 80025a8:	46bb      	mov	fp, r7
 80025aa:	42bd      	cmp	r5, r7
 80025ac:	d02d      	beq.n	800260a <__aeabi_dsub+0x212>
 80025ae:	4c61      	ldr	r4, [pc, #388]	; (8002734 <__aeabi_dsub+0x33c>)
 80025b0:	46a4      	mov	ip, r4
 80025b2:	44b4      	add	ip, r6
 80025b4:	4664      	mov	r4, ip
 80025b6:	2c00      	cmp	r4, #0
 80025b8:	d05c      	beq.n	8002674 <__aeabi_dsub+0x27c>
 80025ba:	1b94      	subs	r4, r2, r6
 80025bc:	46a4      	mov	ip, r4
 80025be:	2e00      	cmp	r6, #0
 80025c0:	d000      	beq.n	80025c4 <__aeabi_dsub+0x1cc>
 80025c2:	e115      	b.n	80027f0 <__aeabi_dsub+0x3f8>
 80025c4:	464d      	mov	r5, r9
 80025c6:	431d      	orrs	r5, r3
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x1d4>
 80025ca:	e1c3      	b.n	8002954 <__aeabi_dsub+0x55c>
 80025cc:	1e65      	subs	r5, r4, #1
 80025ce:	2c01      	cmp	r4, #1
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x1dc>
 80025d2:	e20c      	b.n	80029ee <__aeabi_dsub+0x5f6>
 80025d4:	4e55      	ldr	r6, [pc, #340]	; (800272c <__aeabi_dsub+0x334>)
 80025d6:	42b4      	cmp	r4, r6
 80025d8:	d100      	bne.n	80025dc <__aeabi_dsub+0x1e4>
 80025da:	e1f8      	b.n	80029ce <__aeabi_dsub+0x5d6>
 80025dc:	46ac      	mov	ip, r5
 80025de:	e10e      	b.n	80027fe <__aeabi_dsub+0x406>
 80025e0:	000a      	movs	r2, r1
 80025e2:	4302      	orrs	r2, r0
 80025e4:	d100      	bne.n	80025e8 <__aeabi_dsub+0x1f0>
 80025e6:	e136      	b.n	8002856 <__aeabi_dsub+0x45e>
 80025e8:	0022      	movs	r2, r4
 80025ea:	3a01      	subs	r2, #1
 80025ec:	2c01      	cmp	r4, #1
 80025ee:	d100      	bne.n	80025f2 <__aeabi_dsub+0x1fa>
 80025f0:	e1c6      	b.n	8002980 <__aeabi_dsub+0x588>
 80025f2:	4c4e      	ldr	r4, [pc, #312]	; (800272c <__aeabi_dsub+0x334>)
 80025f4:	45a4      	cmp	ip, r4
 80025f6:	d100      	bne.n	80025fa <__aeabi_dsub+0x202>
 80025f8:	e0f4      	b.n	80027e4 <__aeabi_dsub+0x3ec>
 80025fa:	4694      	mov	ip, r2
 80025fc:	e731      	b.n	8002462 <__aeabi_dsub+0x6a>
 80025fe:	2401      	movs	r4, #1
 8002600:	4067      	eors	r7, r4
 8002602:	46bb      	mov	fp, r7
 8002604:	42bd      	cmp	r5, r7
 8002606:	d000      	beq.n	800260a <__aeabi_dsub+0x212>
 8002608:	e71c      	b.n	8002444 <__aeabi_dsub+0x4c>
 800260a:	4c4a      	ldr	r4, [pc, #296]	; (8002734 <__aeabi_dsub+0x33c>)
 800260c:	46a4      	mov	ip, r4
 800260e:	44b4      	add	ip, r6
 8002610:	4664      	mov	r4, ip
 8002612:	2c00      	cmp	r4, #0
 8002614:	d100      	bne.n	8002618 <__aeabi_dsub+0x220>
 8002616:	e0cf      	b.n	80027b8 <__aeabi_dsub+0x3c0>
 8002618:	1b94      	subs	r4, r2, r6
 800261a:	46a4      	mov	ip, r4
 800261c:	2e00      	cmp	r6, #0
 800261e:	d100      	bne.n	8002622 <__aeabi_dsub+0x22a>
 8002620:	e15c      	b.n	80028dc <__aeabi_dsub+0x4e4>
 8002622:	4e42      	ldr	r6, [pc, #264]	; (800272c <__aeabi_dsub+0x334>)
 8002624:	42b2      	cmp	r2, r6
 8002626:	d100      	bne.n	800262a <__aeabi_dsub+0x232>
 8002628:	e1ec      	b.n	8002a04 <__aeabi_dsub+0x60c>
 800262a:	2680      	movs	r6, #128	; 0x80
 800262c:	0436      	lsls	r6, r6, #16
 800262e:	4333      	orrs	r3, r6
 8002630:	4664      	mov	r4, ip
 8002632:	2c38      	cmp	r4, #56	; 0x38
 8002634:	dd00      	ble.n	8002638 <__aeabi_dsub+0x240>
 8002636:	e1b3      	b.n	80029a0 <__aeabi_dsub+0x5a8>
 8002638:	2c1f      	cmp	r4, #31
 800263a:	dd00      	ble.n	800263e <__aeabi_dsub+0x246>
 800263c:	e238      	b.n	8002ab0 <__aeabi_dsub+0x6b8>
 800263e:	2620      	movs	r6, #32
 8002640:	1b36      	subs	r6, r6, r4
 8002642:	001c      	movs	r4, r3
 8002644:	40b4      	lsls	r4, r6
 8002646:	464f      	mov	r7, r9
 8002648:	46a0      	mov	r8, r4
 800264a:	4664      	mov	r4, ip
 800264c:	40e7      	lsrs	r7, r4
 800264e:	4644      	mov	r4, r8
 8002650:	433c      	orrs	r4, r7
 8002652:	464f      	mov	r7, r9
 8002654:	40b7      	lsls	r7, r6
 8002656:	003e      	movs	r6, r7
 8002658:	1e77      	subs	r7, r6, #1
 800265a:	41be      	sbcs	r6, r7
 800265c:	4334      	orrs	r4, r6
 800265e:	4666      	mov	r6, ip
 8002660:	40f3      	lsrs	r3, r6
 8002662:	18c9      	adds	r1, r1, r3
 8002664:	1824      	adds	r4, r4, r0
 8002666:	4284      	cmp	r4, r0
 8002668:	419b      	sbcs	r3, r3
 800266a:	425b      	negs	r3, r3
 800266c:	4698      	mov	r8, r3
 800266e:	0016      	movs	r6, r2
 8002670:	4488      	add	r8, r1
 8002672:	e04e      	b.n	8002712 <__aeabi_dsub+0x31a>
 8002674:	4a30      	ldr	r2, [pc, #192]	; (8002738 <__aeabi_dsub+0x340>)
 8002676:	1c74      	adds	r4, r6, #1
 8002678:	4214      	tst	r4, r2
 800267a:	d000      	beq.n	800267e <__aeabi_dsub+0x286>
 800267c:	e0d6      	b.n	800282c <__aeabi_dsub+0x434>
 800267e:	464a      	mov	r2, r9
 8002680:	431a      	orrs	r2, r3
 8002682:	2e00      	cmp	r6, #0
 8002684:	d000      	beq.n	8002688 <__aeabi_dsub+0x290>
 8002686:	e15b      	b.n	8002940 <__aeabi_dsub+0x548>
 8002688:	2a00      	cmp	r2, #0
 800268a:	d100      	bne.n	800268e <__aeabi_dsub+0x296>
 800268c:	e1a5      	b.n	80029da <__aeabi_dsub+0x5e2>
 800268e:	000a      	movs	r2, r1
 8002690:	4302      	orrs	r2, r0
 8002692:	d000      	beq.n	8002696 <__aeabi_dsub+0x29e>
 8002694:	e1bb      	b.n	8002a0e <__aeabi_dsub+0x616>
 8002696:	464a      	mov	r2, r9
 8002698:	0759      	lsls	r1, r3, #29
 800269a:	08d2      	lsrs	r2, r2, #3
 800269c:	430a      	orrs	r2, r1
 800269e:	08db      	lsrs	r3, r3, #3
 80026a0:	e027      	b.n	80026f2 <__aeabi_dsub+0x2fa>
 80026a2:	000a      	movs	r2, r1
 80026a4:	4302      	orrs	r2, r0
 80026a6:	d100      	bne.n	80026aa <__aeabi_dsub+0x2b2>
 80026a8:	e174      	b.n	8002994 <__aeabi_dsub+0x59c>
 80026aa:	0022      	movs	r2, r4
 80026ac:	3a01      	subs	r2, #1
 80026ae:	2c01      	cmp	r4, #1
 80026b0:	d005      	beq.n	80026be <__aeabi_dsub+0x2c6>
 80026b2:	4c1e      	ldr	r4, [pc, #120]	; (800272c <__aeabi_dsub+0x334>)
 80026b4:	45a4      	cmp	ip, r4
 80026b6:	d100      	bne.n	80026ba <__aeabi_dsub+0x2c2>
 80026b8:	e094      	b.n	80027e4 <__aeabi_dsub+0x3ec>
 80026ba:	4694      	mov	ip, r2
 80026bc:	e759      	b.n	8002572 <__aeabi_dsub+0x17a>
 80026be:	4448      	add	r0, r9
 80026c0:	4548      	cmp	r0, r9
 80026c2:	4192      	sbcs	r2, r2
 80026c4:	185b      	adds	r3, r3, r1
 80026c6:	4698      	mov	r8, r3
 80026c8:	0004      	movs	r4, r0
 80026ca:	4252      	negs	r2, r2
 80026cc:	4490      	add	r8, r2
 80026ce:	4643      	mov	r3, r8
 80026d0:	2602      	movs	r6, #2
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	d500      	bpl.n	80026d8 <__aeabi_dsub+0x2e0>
 80026d6:	e0c4      	b.n	8002862 <__aeabi_dsub+0x46a>
 80026d8:	3e01      	subs	r6, #1
 80026da:	0763      	lsls	r3, r4, #29
 80026dc:	d000      	beq.n	80026e0 <__aeabi_dsub+0x2e8>
 80026de:	e711      	b.n	8002504 <__aeabi_dsub+0x10c>
 80026e0:	4643      	mov	r3, r8
 80026e2:	46b4      	mov	ip, r6
 80026e4:	0759      	lsls	r1, r3, #29
 80026e6:	08e2      	lsrs	r2, r4, #3
 80026e8:	430a      	orrs	r2, r1
 80026ea:	08db      	lsrs	r3, r3, #3
 80026ec:	490f      	ldr	r1, [pc, #60]	; (800272c <__aeabi_dsub+0x334>)
 80026ee:	458c      	cmp	ip, r1
 80026f0:	d040      	beq.n	8002774 <__aeabi_dsub+0x37c>
 80026f2:	4661      	mov	r1, ip
 80026f4:	031b      	lsls	r3, r3, #12
 80026f6:	0549      	lsls	r1, r1, #21
 80026f8:	0b1b      	lsrs	r3, r3, #12
 80026fa:	0d49      	lsrs	r1, r1, #21
 80026fc:	e720      	b.n	8002540 <__aeabi_dsub+0x148>
 80026fe:	4301      	orrs	r1, r0
 8002700:	000c      	movs	r4, r1
 8002702:	1e61      	subs	r1, r4, #1
 8002704:	418c      	sbcs	r4, r1
 8002706:	444c      	add	r4, r9
 8002708:	454c      	cmp	r4, r9
 800270a:	4192      	sbcs	r2, r2
 800270c:	4252      	negs	r2, r2
 800270e:	4690      	mov	r8, r2
 8002710:	4498      	add	r8, r3
 8002712:	4643      	mov	r3, r8
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	d5e0      	bpl.n	80026da <__aeabi_dsub+0x2e2>
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <__aeabi_dsub+0x334>)
 800271a:	3601      	adds	r6, #1
 800271c:	429e      	cmp	r6, r3
 800271e:	d000      	beq.n	8002722 <__aeabi_dsub+0x32a>
 8002720:	e09f      	b.n	8002862 <__aeabi_dsub+0x46a>
 8002722:	0031      	movs	r1, r6
 8002724:	2300      	movs	r3, #0
 8002726:	2200      	movs	r2, #0
 8002728:	e70a      	b.n	8002540 <__aeabi_dsub+0x148>
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	000007ff 	.word	0x000007ff
 8002730:	ff7fffff 	.word	0xff7fffff
 8002734:	fffff801 	.word	0xfffff801
 8002738:	000007fe 	.word	0x000007fe
 800273c:	2a00      	cmp	r2, #0
 800273e:	d100      	bne.n	8002742 <__aeabi_dsub+0x34a>
 8002740:	e160      	b.n	8002a04 <__aeabi_dsub+0x60c>
 8002742:	000a      	movs	r2, r1
 8002744:	4302      	orrs	r2, r0
 8002746:	d04d      	beq.n	80027e4 <__aeabi_dsub+0x3ec>
 8002748:	464a      	mov	r2, r9
 800274a:	075c      	lsls	r4, r3, #29
 800274c:	08d2      	lsrs	r2, r2, #3
 800274e:	4322      	orrs	r2, r4
 8002750:	2480      	movs	r4, #128	; 0x80
 8002752:	08db      	lsrs	r3, r3, #3
 8002754:	0324      	lsls	r4, r4, #12
 8002756:	4223      	tst	r3, r4
 8002758:	d007      	beq.n	800276a <__aeabi_dsub+0x372>
 800275a:	08ce      	lsrs	r6, r1, #3
 800275c:	4226      	tst	r6, r4
 800275e:	d104      	bne.n	800276a <__aeabi_dsub+0x372>
 8002760:	465d      	mov	r5, fp
 8002762:	0033      	movs	r3, r6
 8002764:	08c2      	lsrs	r2, r0, #3
 8002766:	0749      	lsls	r1, r1, #29
 8002768:	430a      	orrs	r2, r1
 800276a:	0f51      	lsrs	r1, r2, #29
 800276c:	00d2      	lsls	r2, r2, #3
 800276e:	08d2      	lsrs	r2, r2, #3
 8002770:	0749      	lsls	r1, r1, #29
 8002772:	430a      	orrs	r2, r1
 8002774:	0011      	movs	r1, r2
 8002776:	4319      	orrs	r1, r3
 8002778:	d100      	bne.n	800277c <__aeabi_dsub+0x384>
 800277a:	e1c8      	b.n	8002b0e <__aeabi_dsub+0x716>
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0309      	lsls	r1, r1, #12
 8002780:	430b      	orrs	r3, r1
 8002782:	031b      	lsls	r3, r3, #12
 8002784:	49d5      	ldr	r1, [pc, #852]	; (8002adc <__aeabi_dsub+0x6e4>)
 8002786:	0b1b      	lsrs	r3, r3, #12
 8002788:	e6da      	b.n	8002540 <__aeabi_dsub+0x148>
 800278a:	49d5      	ldr	r1, [pc, #852]	; (8002ae0 <__aeabi_dsub+0x6e8>)
 800278c:	1ab6      	subs	r6, r6, r2
 800278e:	400b      	ands	r3, r1
 8002790:	4698      	mov	r8, r3
 8002792:	e6b5      	b.n	8002500 <__aeabi_dsub+0x108>
 8002794:	0020      	movs	r0, r4
 8002796:	f000 fb3b 	bl	8002e10 <__clzsi2>
 800279a:	0002      	movs	r2, r0
 800279c:	3218      	adds	r2, #24
 800279e:	2a1f      	cmp	r2, #31
 80027a0:	dc00      	bgt.n	80027a4 <__aeabi_dsub+0x3ac>
 80027a2:	e68f      	b.n	80024c4 <__aeabi_dsub+0xcc>
 80027a4:	0023      	movs	r3, r4
 80027a6:	3808      	subs	r0, #8
 80027a8:	4083      	lsls	r3, r0
 80027aa:	2400      	movs	r4, #0
 80027ac:	e692      	b.n	80024d4 <__aeabi_dsub+0xdc>
 80027ae:	4308      	orrs	r0, r1
 80027b0:	0002      	movs	r2, r0
 80027b2:	1e50      	subs	r0, r2, #1
 80027b4:	4182      	sbcs	r2, r0
 80027b6:	e66d      	b.n	8002494 <__aeabi_dsub+0x9c>
 80027b8:	4cca      	ldr	r4, [pc, #808]	; (8002ae4 <__aeabi_dsub+0x6ec>)
 80027ba:	1c72      	adds	r2, r6, #1
 80027bc:	4222      	tst	r2, r4
 80027be:	d000      	beq.n	80027c2 <__aeabi_dsub+0x3ca>
 80027c0:	e0ad      	b.n	800291e <__aeabi_dsub+0x526>
 80027c2:	464a      	mov	r2, r9
 80027c4:	431a      	orrs	r2, r3
 80027c6:	2e00      	cmp	r6, #0
 80027c8:	d1b8      	bne.n	800273c <__aeabi_dsub+0x344>
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x3d8>
 80027ce:	e158      	b.n	8002a82 <__aeabi_dsub+0x68a>
 80027d0:	000a      	movs	r2, r1
 80027d2:	4302      	orrs	r2, r0
 80027d4:	d000      	beq.n	80027d8 <__aeabi_dsub+0x3e0>
 80027d6:	e159      	b.n	8002a8c <__aeabi_dsub+0x694>
 80027d8:	464a      	mov	r2, r9
 80027da:	0759      	lsls	r1, r3, #29
 80027dc:	08d2      	lsrs	r2, r2, #3
 80027de:	430a      	orrs	r2, r1
 80027e0:	08db      	lsrs	r3, r3, #3
 80027e2:	e786      	b.n	80026f2 <__aeabi_dsub+0x2fa>
 80027e4:	464a      	mov	r2, r9
 80027e6:	0759      	lsls	r1, r3, #29
 80027e8:	08d2      	lsrs	r2, r2, #3
 80027ea:	430a      	orrs	r2, r1
 80027ec:	08db      	lsrs	r3, r3, #3
 80027ee:	e7c1      	b.n	8002774 <__aeabi_dsub+0x37c>
 80027f0:	4dba      	ldr	r5, [pc, #744]	; (8002adc <__aeabi_dsub+0x6e4>)
 80027f2:	42aa      	cmp	r2, r5
 80027f4:	d100      	bne.n	80027f8 <__aeabi_dsub+0x400>
 80027f6:	e11e      	b.n	8002a36 <__aeabi_dsub+0x63e>
 80027f8:	2580      	movs	r5, #128	; 0x80
 80027fa:	042d      	lsls	r5, r5, #16
 80027fc:	432b      	orrs	r3, r5
 80027fe:	4664      	mov	r4, ip
 8002800:	2c38      	cmp	r4, #56	; 0x38
 8002802:	dc5d      	bgt.n	80028c0 <__aeabi_dsub+0x4c8>
 8002804:	2c1f      	cmp	r4, #31
 8002806:	dd00      	ble.n	800280a <__aeabi_dsub+0x412>
 8002808:	e0d0      	b.n	80029ac <__aeabi_dsub+0x5b4>
 800280a:	2520      	movs	r5, #32
 800280c:	4667      	mov	r7, ip
 800280e:	1b2d      	subs	r5, r5, r4
 8002810:	464e      	mov	r6, r9
 8002812:	001c      	movs	r4, r3
 8002814:	40fe      	lsrs	r6, r7
 8002816:	40ac      	lsls	r4, r5
 8002818:	4334      	orrs	r4, r6
 800281a:	464e      	mov	r6, r9
 800281c:	40ae      	lsls	r6, r5
 800281e:	0035      	movs	r5, r6
 8002820:	40fb      	lsrs	r3, r7
 8002822:	1e6e      	subs	r6, r5, #1
 8002824:	41b5      	sbcs	r5, r6
 8002826:	1ac9      	subs	r1, r1, r3
 8002828:	432c      	orrs	r4, r5
 800282a:	e04e      	b.n	80028ca <__aeabi_dsub+0x4d2>
 800282c:	464a      	mov	r2, r9
 800282e:	1a14      	subs	r4, r2, r0
 8002830:	45a1      	cmp	r9, r4
 8002832:	4192      	sbcs	r2, r2
 8002834:	4252      	negs	r2, r2
 8002836:	4690      	mov	r8, r2
 8002838:	1a5f      	subs	r7, r3, r1
 800283a:	003a      	movs	r2, r7
 800283c:	4647      	mov	r7, r8
 800283e:	1bd2      	subs	r2, r2, r7
 8002840:	4690      	mov	r8, r2
 8002842:	0212      	lsls	r2, r2, #8
 8002844:	d500      	bpl.n	8002848 <__aeabi_dsub+0x450>
 8002846:	e08b      	b.n	8002960 <__aeabi_dsub+0x568>
 8002848:	4642      	mov	r2, r8
 800284a:	4322      	orrs	r2, r4
 800284c:	d000      	beq.n	8002850 <__aeabi_dsub+0x458>
 800284e:	e630      	b.n	80024b2 <__aeabi_dsub+0xba>
 8002850:	2300      	movs	r3, #0
 8002852:	2500      	movs	r5, #0
 8002854:	e74d      	b.n	80026f2 <__aeabi_dsub+0x2fa>
 8002856:	464a      	mov	r2, r9
 8002858:	0759      	lsls	r1, r3, #29
 800285a:	08d2      	lsrs	r2, r2, #3
 800285c:	430a      	orrs	r2, r1
 800285e:	08db      	lsrs	r3, r3, #3
 8002860:	e744      	b.n	80026ec <__aeabi_dsub+0x2f4>
 8002862:	4642      	mov	r2, r8
 8002864:	4b9e      	ldr	r3, [pc, #632]	; (8002ae0 <__aeabi_dsub+0x6e8>)
 8002866:	0861      	lsrs	r1, r4, #1
 8002868:	401a      	ands	r2, r3
 800286a:	0013      	movs	r3, r2
 800286c:	2201      	movs	r2, #1
 800286e:	4014      	ands	r4, r2
 8002870:	430c      	orrs	r4, r1
 8002872:	07da      	lsls	r2, r3, #31
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	4698      	mov	r8, r3
 8002878:	4314      	orrs	r4, r2
 800287a:	e641      	b.n	8002500 <__aeabi_dsub+0x108>
 800287c:	001a      	movs	r2, r3
 800287e:	3e1f      	subs	r6, #31
 8002880:	40f2      	lsrs	r2, r6
 8002882:	0016      	movs	r6, r2
 8002884:	2920      	cmp	r1, #32
 8002886:	d003      	beq.n	8002890 <__aeabi_dsub+0x498>
 8002888:	2240      	movs	r2, #64	; 0x40
 800288a:	1a51      	subs	r1, r2, r1
 800288c:	408b      	lsls	r3, r1
 800288e:	431c      	orrs	r4, r3
 8002890:	1e62      	subs	r2, r4, #1
 8002892:	4194      	sbcs	r4, r2
 8002894:	2300      	movs	r3, #0
 8002896:	4334      	orrs	r4, r6
 8002898:	4698      	mov	r8, r3
 800289a:	2600      	movs	r6, #0
 800289c:	e71d      	b.n	80026da <__aeabi_dsub+0x2e2>
 800289e:	000c      	movs	r4, r1
 80028a0:	3a20      	subs	r2, #32
 80028a2:	40d4      	lsrs	r4, r2
 80028a4:	0022      	movs	r2, r4
 80028a6:	4664      	mov	r4, ip
 80028a8:	2c20      	cmp	r4, #32
 80028aa:	d004      	beq.n	80028b6 <__aeabi_dsub+0x4be>
 80028ac:	2740      	movs	r7, #64	; 0x40
 80028ae:	1b3f      	subs	r7, r7, r4
 80028b0:	40b9      	lsls	r1, r7
 80028b2:	4308      	orrs	r0, r1
 80028b4:	4680      	mov	r8, r0
 80028b6:	4644      	mov	r4, r8
 80028b8:	1e61      	subs	r1, r4, #1
 80028ba:	418c      	sbcs	r4, r1
 80028bc:	4322      	orrs	r2, r4
 80028be:	e5e9      	b.n	8002494 <__aeabi_dsub+0x9c>
 80028c0:	464c      	mov	r4, r9
 80028c2:	4323      	orrs	r3, r4
 80028c4:	001c      	movs	r4, r3
 80028c6:	1e63      	subs	r3, r4, #1
 80028c8:	419c      	sbcs	r4, r3
 80028ca:	1b04      	subs	r4, r0, r4
 80028cc:	42a0      	cmp	r0, r4
 80028ce:	419b      	sbcs	r3, r3
 80028d0:	425b      	negs	r3, r3
 80028d2:	1acb      	subs	r3, r1, r3
 80028d4:	4698      	mov	r8, r3
 80028d6:	465d      	mov	r5, fp
 80028d8:	0016      	movs	r6, r2
 80028da:	e5e2      	b.n	80024a2 <__aeabi_dsub+0xaa>
 80028dc:	464e      	mov	r6, r9
 80028de:	431e      	orrs	r6, r3
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x4ec>
 80028e2:	e0ae      	b.n	8002a42 <__aeabi_dsub+0x64a>
 80028e4:	1e66      	subs	r6, r4, #1
 80028e6:	2c01      	cmp	r4, #1
 80028e8:	d100      	bne.n	80028ec <__aeabi_dsub+0x4f4>
 80028ea:	e0fd      	b.n	8002ae8 <__aeabi_dsub+0x6f0>
 80028ec:	4f7b      	ldr	r7, [pc, #492]	; (8002adc <__aeabi_dsub+0x6e4>)
 80028ee:	42bc      	cmp	r4, r7
 80028f0:	d100      	bne.n	80028f4 <__aeabi_dsub+0x4fc>
 80028f2:	e107      	b.n	8002b04 <__aeabi_dsub+0x70c>
 80028f4:	46b4      	mov	ip, r6
 80028f6:	e69b      	b.n	8002630 <__aeabi_dsub+0x238>
 80028f8:	4664      	mov	r4, ip
 80028fa:	2220      	movs	r2, #32
 80028fc:	1b12      	subs	r2, r2, r4
 80028fe:	000c      	movs	r4, r1
 8002900:	4094      	lsls	r4, r2
 8002902:	0007      	movs	r7, r0
 8002904:	4090      	lsls	r0, r2
 8002906:	46a0      	mov	r8, r4
 8002908:	4664      	mov	r4, ip
 800290a:	1e42      	subs	r2, r0, #1
 800290c:	4190      	sbcs	r0, r2
 800290e:	4662      	mov	r2, ip
 8002910:	40e7      	lsrs	r7, r4
 8002912:	4644      	mov	r4, r8
 8002914:	40d1      	lsrs	r1, r2
 8002916:	433c      	orrs	r4, r7
 8002918:	4304      	orrs	r4, r0
 800291a:	185b      	adds	r3, r3, r1
 800291c:	e6f3      	b.n	8002706 <__aeabi_dsub+0x30e>
 800291e:	4c6f      	ldr	r4, [pc, #444]	; (8002adc <__aeabi_dsub+0x6e4>)
 8002920:	42a2      	cmp	r2, r4
 8002922:	d100      	bne.n	8002926 <__aeabi_dsub+0x52e>
 8002924:	e0d5      	b.n	8002ad2 <__aeabi_dsub+0x6da>
 8002926:	4448      	add	r0, r9
 8002928:	185b      	adds	r3, r3, r1
 800292a:	4548      	cmp	r0, r9
 800292c:	4189      	sbcs	r1, r1
 800292e:	4249      	negs	r1, r1
 8002930:	185b      	adds	r3, r3, r1
 8002932:	07dc      	lsls	r4, r3, #31
 8002934:	0840      	lsrs	r0, r0, #1
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	4698      	mov	r8, r3
 800293a:	0016      	movs	r6, r2
 800293c:	4304      	orrs	r4, r0
 800293e:	e6cc      	b.n	80026da <__aeabi_dsub+0x2e2>
 8002940:	2a00      	cmp	r2, #0
 8002942:	d000      	beq.n	8002946 <__aeabi_dsub+0x54e>
 8002944:	e082      	b.n	8002a4c <__aeabi_dsub+0x654>
 8002946:	000a      	movs	r2, r1
 8002948:	4302      	orrs	r2, r0
 800294a:	d140      	bne.n	80029ce <__aeabi_dsub+0x5d6>
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	2500      	movs	r5, #0
 8002950:	031b      	lsls	r3, r3, #12
 8002952:	e713      	b.n	800277c <__aeabi_dsub+0x384>
 8002954:	074b      	lsls	r3, r1, #29
 8002956:	08c2      	lsrs	r2, r0, #3
 8002958:	431a      	orrs	r2, r3
 800295a:	465d      	mov	r5, fp
 800295c:	08cb      	lsrs	r3, r1, #3
 800295e:	e6c5      	b.n	80026ec <__aeabi_dsub+0x2f4>
 8002960:	464a      	mov	r2, r9
 8002962:	1a84      	subs	r4, r0, r2
 8002964:	42a0      	cmp	r0, r4
 8002966:	4192      	sbcs	r2, r2
 8002968:	1acb      	subs	r3, r1, r3
 800296a:	4252      	negs	r2, r2
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	4698      	mov	r8, r3
 8002970:	465d      	mov	r5, fp
 8002972:	e59e      	b.n	80024b2 <__aeabi_dsub+0xba>
 8002974:	464a      	mov	r2, r9
 8002976:	0759      	lsls	r1, r3, #29
 8002978:	08d2      	lsrs	r2, r2, #3
 800297a:	430a      	orrs	r2, r1
 800297c:	08db      	lsrs	r3, r3, #3
 800297e:	e6f9      	b.n	8002774 <__aeabi_dsub+0x37c>
 8002980:	464a      	mov	r2, r9
 8002982:	1a14      	subs	r4, r2, r0
 8002984:	45a1      	cmp	r9, r4
 8002986:	4192      	sbcs	r2, r2
 8002988:	1a5b      	subs	r3, r3, r1
 800298a:	4252      	negs	r2, r2
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	4698      	mov	r8, r3
 8002990:	2601      	movs	r6, #1
 8002992:	e586      	b.n	80024a2 <__aeabi_dsub+0xaa>
 8002994:	464a      	mov	r2, r9
 8002996:	0759      	lsls	r1, r3, #29
 8002998:	08d2      	lsrs	r2, r2, #3
 800299a:	430a      	orrs	r2, r1
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	e6a5      	b.n	80026ec <__aeabi_dsub+0x2f4>
 80029a0:	464c      	mov	r4, r9
 80029a2:	4323      	orrs	r3, r4
 80029a4:	001c      	movs	r4, r3
 80029a6:	1e63      	subs	r3, r4, #1
 80029a8:	419c      	sbcs	r4, r3
 80029aa:	e65b      	b.n	8002664 <__aeabi_dsub+0x26c>
 80029ac:	4665      	mov	r5, ip
 80029ae:	001e      	movs	r6, r3
 80029b0:	3d20      	subs	r5, #32
 80029b2:	40ee      	lsrs	r6, r5
 80029b4:	2c20      	cmp	r4, #32
 80029b6:	d005      	beq.n	80029c4 <__aeabi_dsub+0x5cc>
 80029b8:	2540      	movs	r5, #64	; 0x40
 80029ba:	1b2d      	subs	r5, r5, r4
 80029bc:	40ab      	lsls	r3, r5
 80029be:	464c      	mov	r4, r9
 80029c0:	431c      	orrs	r4, r3
 80029c2:	46a2      	mov	sl, r4
 80029c4:	4654      	mov	r4, sl
 80029c6:	1e63      	subs	r3, r4, #1
 80029c8:	419c      	sbcs	r4, r3
 80029ca:	4334      	orrs	r4, r6
 80029cc:	e77d      	b.n	80028ca <__aeabi_dsub+0x4d2>
 80029ce:	074b      	lsls	r3, r1, #29
 80029d0:	08c2      	lsrs	r2, r0, #3
 80029d2:	431a      	orrs	r2, r3
 80029d4:	465d      	mov	r5, fp
 80029d6:	08cb      	lsrs	r3, r1, #3
 80029d8:	e6cc      	b.n	8002774 <__aeabi_dsub+0x37c>
 80029da:	000a      	movs	r2, r1
 80029dc:	4302      	orrs	r2, r0
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x5ea>
 80029e0:	e736      	b.n	8002850 <__aeabi_dsub+0x458>
 80029e2:	074b      	lsls	r3, r1, #29
 80029e4:	08c2      	lsrs	r2, r0, #3
 80029e6:	431a      	orrs	r2, r3
 80029e8:	465d      	mov	r5, fp
 80029ea:	08cb      	lsrs	r3, r1, #3
 80029ec:	e681      	b.n	80026f2 <__aeabi_dsub+0x2fa>
 80029ee:	464a      	mov	r2, r9
 80029f0:	1a84      	subs	r4, r0, r2
 80029f2:	42a0      	cmp	r0, r4
 80029f4:	4192      	sbcs	r2, r2
 80029f6:	1acb      	subs	r3, r1, r3
 80029f8:	4252      	negs	r2, r2
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	4698      	mov	r8, r3
 80029fe:	465d      	mov	r5, fp
 8002a00:	2601      	movs	r6, #1
 8002a02:	e54e      	b.n	80024a2 <__aeabi_dsub+0xaa>
 8002a04:	074b      	lsls	r3, r1, #29
 8002a06:	08c2      	lsrs	r2, r0, #3
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	08cb      	lsrs	r3, r1, #3
 8002a0c:	e6b2      	b.n	8002774 <__aeabi_dsub+0x37c>
 8002a0e:	464a      	mov	r2, r9
 8002a10:	1a14      	subs	r4, r2, r0
 8002a12:	45a1      	cmp	r9, r4
 8002a14:	4192      	sbcs	r2, r2
 8002a16:	1a5f      	subs	r7, r3, r1
 8002a18:	4252      	negs	r2, r2
 8002a1a:	1aba      	subs	r2, r7, r2
 8002a1c:	4690      	mov	r8, r2
 8002a1e:	0212      	lsls	r2, r2, #8
 8002a20:	d56b      	bpl.n	8002afa <__aeabi_dsub+0x702>
 8002a22:	464a      	mov	r2, r9
 8002a24:	1a84      	subs	r4, r0, r2
 8002a26:	42a0      	cmp	r0, r4
 8002a28:	4192      	sbcs	r2, r2
 8002a2a:	1acb      	subs	r3, r1, r3
 8002a2c:	4252      	negs	r2, r2
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	4698      	mov	r8, r3
 8002a32:	465d      	mov	r5, fp
 8002a34:	e564      	b.n	8002500 <__aeabi_dsub+0x108>
 8002a36:	074b      	lsls	r3, r1, #29
 8002a38:	08c2      	lsrs	r2, r0, #3
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	465d      	mov	r5, fp
 8002a3e:	08cb      	lsrs	r3, r1, #3
 8002a40:	e698      	b.n	8002774 <__aeabi_dsub+0x37c>
 8002a42:	074b      	lsls	r3, r1, #29
 8002a44:	08c2      	lsrs	r2, r0, #3
 8002a46:	431a      	orrs	r2, r3
 8002a48:	08cb      	lsrs	r3, r1, #3
 8002a4a:	e64f      	b.n	80026ec <__aeabi_dsub+0x2f4>
 8002a4c:	000a      	movs	r2, r1
 8002a4e:	4302      	orrs	r2, r0
 8002a50:	d090      	beq.n	8002974 <__aeabi_dsub+0x57c>
 8002a52:	464a      	mov	r2, r9
 8002a54:	075c      	lsls	r4, r3, #29
 8002a56:	08d2      	lsrs	r2, r2, #3
 8002a58:	4314      	orrs	r4, r2
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	08db      	lsrs	r3, r3, #3
 8002a5e:	0312      	lsls	r2, r2, #12
 8002a60:	4213      	tst	r3, r2
 8002a62:	d008      	beq.n	8002a76 <__aeabi_dsub+0x67e>
 8002a64:	08ce      	lsrs	r6, r1, #3
 8002a66:	4216      	tst	r6, r2
 8002a68:	d105      	bne.n	8002a76 <__aeabi_dsub+0x67e>
 8002a6a:	08c0      	lsrs	r0, r0, #3
 8002a6c:	0749      	lsls	r1, r1, #29
 8002a6e:	4308      	orrs	r0, r1
 8002a70:	0004      	movs	r4, r0
 8002a72:	465d      	mov	r5, fp
 8002a74:	0033      	movs	r3, r6
 8002a76:	0f61      	lsrs	r1, r4, #29
 8002a78:	00e2      	lsls	r2, r4, #3
 8002a7a:	0749      	lsls	r1, r1, #29
 8002a7c:	08d2      	lsrs	r2, r2, #3
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	e678      	b.n	8002774 <__aeabi_dsub+0x37c>
 8002a82:	074b      	lsls	r3, r1, #29
 8002a84:	08c2      	lsrs	r2, r0, #3
 8002a86:	431a      	orrs	r2, r3
 8002a88:	08cb      	lsrs	r3, r1, #3
 8002a8a:	e632      	b.n	80026f2 <__aeabi_dsub+0x2fa>
 8002a8c:	4448      	add	r0, r9
 8002a8e:	185b      	adds	r3, r3, r1
 8002a90:	4548      	cmp	r0, r9
 8002a92:	4192      	sbcs	r2, r2
 8002a94:	4698      	mov	r8, r3
 8002a96:	4252      	negs	r2, r2
 8002a98:	4490      	add	r8, r2
 8002a9a:	4643      	mov	r3, r8
 8002a9c:	0004      	movs	r4, r0
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	d400      	bmi.n	8002aa4 <__aeabi_dsub+0x6ac>
 8002aa2:	e61a      	b.n	80026da <__aeabi_dsub+0x2e2>
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <__aeabi_dsub+0x6e8>)
 8002aa8:	2601      	movs	r6, #1
 8002aaa:	401a      	ands	r2, r3
 8002aac:	4690      	mov	r8, r2
 8002aae:	e614      	b.n	80026da <__aeabi_dsub+0x2e2>
 8002ab0:	4666      	mov	r6, ip
 8002ab2:	001f      	movs	r7, r3
 8002ab4:	3e20      	subs	r6, #32
 8002ab6:	40f7      	lsrs	r7, r6
 8002ab8:	2c20      	cmp	r4, #32
 8002aba:	d005      	beq.n	8002ac8 <__aeabi_dsub+0x6d0>
 8002abc:	2640      	movs	r6, #64	; 0x40
 8002abe:	1b36      	subs	r6, r6, r4
 8002ac0:	40b3      	lsls	r3, r6
 8002ac2:	464c      	mov	r4, r9
 8002ac4:	431c      	orrs	r4, r3
 8002ac6:	46a2      	mov	sl, r4
 8002ac8:	4654      	mov	r4, sl
 8002aca:	1e63      	subs	r3, r4, #1
 8002acc:	419c      	sbcs	r4, r3
 8002ace:	433c      	orrs	r4, r7
 8002ad0:	e5c8      	b.n	8002664 <__aeabi_dsub+0x26c>
 8002ad2:	0011      	movs	r1, r2
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	e532      	b.n	8002540 <__aeabi_dsub+0x148>
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	000007ff 	.word	0x000007ff
 8002ae0:	ff7fffff 	.word	0xff7fffff
 8002ae4:	000007fe 	.word	0x000007fe
 8002ae8:	464a      	mov	r2, r9
 8002aea:	1814      	adds	r4, r2, r0
 8002aec:	4284      	cmp	r4, r0
 8002aee:	4192      	sbcs	r2, r2
 8002af0:	185b      	adds	r3, r3, r1
 8002af2:	4698      	mov	r8, r3
 8002af4:	4252      	negs	r2, r2
 8002af6:	4490      	add	r8, r2
 8002af8:	e5e9      	b.n	80026ce <__aeabi_dsub+0x2d6>
 8002afa:	4642      	mov	r2, r8
 8002afc:	4322      	orrs	r2, r4
 8002afe:	d100      	bne.n	8002b02 <__aeabi_dsub+0x70a>
 8002b00:	e6a6      	b.n	8002850 <__aeabi_dsub+0x458>
 8002b02:	e5ea      	b.n	80026da <__aeabi_dsub+0x2e2>
 8002b04:	074b      	lsls	r3, r1, #29
 8002b06:	08c2      	lsrs	r2, r0, #3
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	08cb      	lsrs	r3, r1, #3
 8002b0c:	e632      	b.n	8002774 <__aeabi_dsub+0x37c>
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4901      	ldr	r1, [pc, #4]	; (8002b18 <__aeabi_dsub+0x720>)
 8002b12:	0013      	movs	r3, r2
 8002b14:	e514      	b.n	8002540 <__aeabi_dsub+0x148>
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	000007ff 	.word	0x000007ff

08002b1c <__aeabi_dcmpun>:
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	0005      	movs	r5, r0
 8002b20:	480c      	ldr	r0, [pc, #48]	; (8002b54 <__aeabi_dcmpun+0x38>)
 8002b22:	030c      	lsls	r4, r1, #12
 8002b24:	0016      	movs	r6, r2
 8002b26:	0049      	lsls	r1, r1, #1
 8002b28:	031a      	lsls	r2, r3, #12
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	0b24      	lsrs	r4, r4, #12
 8002b2e:	0d49      	lsrs	r1, r1, #21
 8002b30:	0b12      	lsrs	r2, r2, #12
 8002b32:	0d5b      	lsrs	r3, r3, #21
 8002b34:	4281      	cmp	r1, r0
 8002b36:	d008      	beq.n	8002b4a <__aeabi_dcmpun+0x2e>
 8002b38:	4906      	ldr	r1, [pc, #24]	; (8002b54 <__aeabi_dcmpun+0x38>)
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	428b      	cmp	r3, r1
 8002b3e:	d103      	bne.n	8002b48 <__aeabi_dcmpun+0x2c>
 8002b40:	4332      	orrs	r2, r6
 8002b42:	0010      	movs	r0, r2
 8002b44:	1e42      	subs	r2, r0, #1
 8002b46:	4190      	sbcs	r0, r2
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	432c      	orrs	r4, r5
 8002b4e:	d1fb      	bne.n	8002b48 <__aeabi_dcmpun+0x2c>
 8002b50:	e7f2      	b.n	8002b38 <__aeabi_dcmpun+0x1c>
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	000007ff 	.word	0x000007ff

08002b58 <__aeabi_d2iz>:
 8002b58:	000a      	movs	r2, r1
 8002b5a:	b530      	push	{r4, r5, lr}
 8002b5c:	4c13      	ldr	r4, [pc, #76]	; (8002bac <__aeabi_d2iz+0x54>)
 8002b5e:	0053      	lsls	r3, r2, #1
 8002b60:	0309      	lsls	r1, r1, #12
 8002b62:	0005      	movs	r5, r0
 8002b64:	0b09      	lsrs	r1, r1, #12
 8002b66:	2000      	movs	r0, #0
 8002b68:	0d5b      	lsrs	r3, r3, #21
 8002b6a:	0fd2      	lsrs	r2, r2, #31
 8002b6c:	42a3      	cmp	r3, r4
 8002b6e:	dd04      	ble.n	8002b7a <__aeabi_d2iz+0x22>
 8002b70:	480f      	ldr	r0, [pc, #60]	; (8002bb0 <__aeabi_d2iz+0x58>)
 8002b72:	4283      	cmp	r3, r0
 8002b74:	dd02      	ble.n	8002b7c <__aeabi_d2iz+0x24>
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <__aeabi_d2iz+0x5c>)
 8002b78:	18d0      	adds	r0, r2, r3
 8002b7a:	bd30      	pop	{r4, r5, pc}
 8002b7c:	2080      	movs	r0, #128	; 0x80
 8002b7e:	0340      	lsls	r0, r0, #13
 8002b80:	4301      	orrs	r1, r0
 8002b82:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <__aeabi_d2iz+0x60>)
 8002b84:	1ac0      	subs	r0, r0, r3
 8002b86:	281f      	cmp	r0, #31
 8002b88:	dd08      	ble.n	8002b9c <__aeabi_d2iz+0x44>
 8002b8a:	480c      	ldr	r0, [pc, #48]	; (8002bbc <__aeabi_d2iz+0x64>)
 8002b8c:	1ac3      	subs	r3, r0, r3
 8002b8e:	40d9      	lsrs	r1, r3
 8002b90:	000b      	movs	r3, r1
 8002b92:	4258      	negs	r0, r3
 8002b94:	2a00      	cmp	r2, #0
 8002b96:	d1f0      	bne.n	8002b7a <__aeabi_d2iz+0x22>
 8002b98:	0018      	movs	r0, r3
 8002b9a:	e7ee      	b.n	8002b7a <__aeabi_d2iz+0x22>
 8002b9c:	4c08      	ldr	r4, [pc, #32]	; (8002bc0 <__aeabi_d2iz+0x68>)
 8002b9e:	40c5      	lsrs	r5, r0
 8002ba0:	46a4      	mov	ip, r4
 8002ba2:	4463      	add	r3, ip
 8002ba4:	4099      	lsls	r1, r3
 8002ba6:	000b      	movs	r3, r1
 8002ba8:	432b      	orrs	r3, r5
 8002baa:	e7f2      	b.n	8002b92 <__aeabi_d2iz+0x3a>
 8002bac:	000003fe 	.word	0x000003fe
 8002bb0:	0000041d 	.word	0x0000041d
 8002bb4:	7fffffff 	.word	0x7fffffff
 8002bb8:	00000433 	.word	0x00000433
 8002bbc:	00000413 	.word	0x00000413
 8002bc0:	fffffbed 	.word	0xfffffbed

08002bc4 <__aeabi_i2d>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d016      	beq.n	8002bf8 <__aeabi_i2d+0x34>
 8002bca:	17c3      	asrs	r3, r0, #31
 8002bcc:	18c5      	adds	r5, r0, r3
 8002bce:	405d      	eors	r5, r3
 8002bd0:	0fc4      	lsrs	r4, r0, #31
 8002bd2:	0028      	movs	r0, r5
 8002bd4:	f000 f91c 	bl	8002e10 <__clzsi2>
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <__aeabi_i2d+0x5c>)
 8002bda:	1a12      	subs	r2, r2, r0
 8002bdc:	280a      	cmp	r0, #10
 8002bde:	dc16      	bgt.n	8002c0e <__aeabi_i2d+0x4a>
 8002be0:	0003      	movs	r3, r0
 8002be2:	002e      	movs	r6, r5
 8002be4:	3315      	adds	r3, #21
 8002be6:	409e      	lsls	r6, r3
 8002be8:	230b      	movs	r3, #11
 8002bea:	1a18      	subs	r0, r3, r0
 8002bec:	40c5      	lsrs	r5, r0
 8002bee:	0553      	lsls	r3, r2, #21
 8002bf0:	032d      	lsls	r5, r5, #12
 8002bf2:	0b2d      	lsrs	r5, r5, #12
 8002bf4:	0d5b      	lsrs	r3, r3, #21
 8002bf6:	e003      	b.n	8002c00 <__aeabi_i2d+0x3c>
 8002bf8:	2400      	movs	r4, #0
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2500      	movs	r5, #0
 8002bfe:	2600      	movs	r6, #0
 8002c00:	051b      	lsls	r3, r3, #20
 8002c02:	432b      	orrs	r3, r5
 8002c04:	07e4      	lsls	r4, r4, #31
 8002c06:	4323      	orrs	r3, r4
 8002c08:	0030      	movs	r0, r6
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
 8002c0e:	380b      	subs	r0, #11
 8002c10:	4085      	lsls	r5, r0
 8002c12:	0553      	lsls	r3, r2, #21
 8002c14:	032d      	lsls	r5, r5, #12
 8002c16:	2600      	movs	r6, #0
 8002c18:	0b2d      	lsrs	r5, r5, #12
 8002c1a:	0d5b      	lsrs	r3, r3, #21
 8002c1c:	e7f0      	b.n	8002c00 <__aeabi_i2d+0x3c>
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	0000041e 	.word	0x0000041e

08002c24 <__aeabi_ui2d>:
 8002c24:	b510      	push	{r4, lr}
 8002c26:	1e04      	subs	r4, r0, #0
 8002c28:	d010      	beq.n	8002c4c <__aeabi_ui2d+0x28>
 8002c2a:	f000 f8f1 	bl	8002e10 <__clzsi2>
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <__aeabi_ui2d+0x48>)
 8002c30:	1a1b      	subs	r3, r3, r0
 8002c32:	280a      	cmp	r0, #10
 8002c34:	dc11      	bgt.n	8002c5a <__aeabi_ui2d+0x36>
 8002c36:	220b      	movs	r2, #11
 8002c38:	0021      	movs	r1, r4
 8002c3a:	1a12      	subs	r2, r2, r0
 8002c3c:	40d1      	lsrs	r1, r2
 8002c3e:	3015      	adds	r0, #21
 8002c40:	030a      	lsls	r2, r1, #12
 8002c42:	055b      	lsls	r3, r3, #21
 8002c44:	4084      	lsls	r4, r0
 8002c46:	0b12      	lsrs	r2, r2, #12
 8002c48:	0d5b      	lsrs	r3, r3, #21
 8002c4a:	e001      	b.n	8002c50 <__aeabi_ui2d+0x2c>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2200      	movs	r2, #0
 8002c50:	051b      	lsls	r3, r3, #20
 8002c52:	4313      	orrs	r3, r2
 8002c54:	0020      	movs	r0, r4
 8002c56:	0019      	movs	r1, r3
 8002c58:	bd10      	pop	{r4, pc}
 8002c5a:	0022      	movs	r2, r4
 8002c5c:	380b      	subs	r0, #11
 8002c5e:	4082      	lsls	r2, r0
 8002c60:	055b      	lsls	r3, r3, #21
 8002c62:	0312      	lsls	r2, r2, #12
 8002c64:	2400      	movs	r4, #0
 8002c66:	0b12      	lsrs	r2, r2, #12
 8002c68:	0d5b      	lsrs	r3, r3, #21
 8002c6a:	e7f1      	b.n	8002c50 <__aeabi_ui2d+0x2c>
 8002c6c:	0000041e 	.word	0x0000041e

08002c70 <__aeabi_f2d>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	0043      	lsls	r3, r0, #1
 8002c74:	0246      	lsls	r6, r0, #9
 8002c76:	0fc4      	lsrs	r4, r0, #31
 8002c78:	20fe      	movs	r0, #254	; 0xfe
 8002c7a:	0e1b      	lsrs	r3, r3, #24
 8002c7c:	1c59      	adds	r1, r3, #1
 8002c7e:	0a75      	lsrs	r5, r6, #9
 8002c80:	4208      	tst	r0, r1
 8002c82:	d00c      	beq.n	8002c9e <__aeabi_f2d+0x2e>
 8002c84:	22e0      	movs	r2, #224	; 0xe0
 8002c86:	0092      	lsls	r2, r2, #2
 8002c88:	4694      	mov	ip, r2
 8002c8a:	076d      	lsls	r5, r5, #29
 8002c8c:	0b36      	lsrs	r6, r6, #12
 8002c8e:	4463      	add	r3, ip
 8002c90:	051b      	lsls	r3, r3, #20
 8002c92:	4333      	orrs	r3, r6
 8002c94:	07e4      	lsls	r4, r4, #31
 8002c96:	4323      	orrs	r3, r4
 8002c98:	0028      	movs	r0, r5
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d114      	bne.n	8002ccc <__aeabi_f2d+0x5c>
 8002ca2:	2d00      	cmp	r5, #0
 8002ca4:	d01b      	beq.n	8002cde <__aeabi_f2d+0x6e>
 8002ca6:	0028      	movs	r0, r5
 8002ca8:	f000 f8b2 	bl	8002e10 <__clzsi2>
 8002cac:	280a      	cmp	r0, #10
 8002cae:	dc1c      	bgt.n	8002cea <__aeabi_f2d+0x7a>
 8002cb0:	230b      	movs	r3, #11
 8002cb2:	002a      	movs	r2, r5
 8002cb4:	1a1b      	subs	r3, r3, r0
 8002cb6:	40da      	lsrs	r2, r3
 8002cb8:	0003      	movs	r3, r0
 8002cba:	3315      	adds	r3, #21
 8002cbc:	409d      	lsls	r5, r3
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <__aeabi_f2d+0x88>)
 8002cc0:	0312      	lsls	r2, r2, #12
 8002cc2:	1a1b      	subs	r3, r3, r0
 8002cc4:	055b      	lsls	r3, r3, #21
 8002cc6:	0b16      	lsrs	r6, r2, #12
 8002cc8:	0d5b      	lsrs	r3, r3, #21
 8002cca:	e7e1      	b.n	8002c90 <__aeabi_f2d+0x20>
 8002ccc:	2d00      	cmp	r5, #0
 8002cce:	d009      	beq.n	8002ce4 <__aeabi_f2d+0x74>
 8002cd0:	0b32      	lsrs	r2, r6, #12
 8002cd2:	2680      	movs	r6, #128	; 0x80
 8002cd4:	0336      	lsls	r6, r6, #12
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <__aeabi_f2d+0x8c>)
 8002cd8:	076d      	lsls	r5, r5, #29
 8002cda:	4316      	orrs	r6, r2
 8002cdc:	e7d8      	b.n	8002c90 <__aeabi_f2d+0x20>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2600      	movs	r6, #0
 8002ce2:	e7d5      	b.n	8002c90 <__aeabi_f2d+0x20>
 8002ce4:	2600      	movs	r6, #0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <__aeabi_f2d+0x8c>)
 8002ce8:	e7d2      	b.n	8002c90 <__aeabi_f2d+0x20>
 8002cea:	0003      	movs	r3, r0
 8002cec:	002a      	movs	r2, r5
 8002cee:	3b0b      	subs	r3, #11
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	2500      	movs	r5, #0
 8002cf4:	e7e3      	b.n	8002cbe <__aeabi_f2d+0x4e>
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	00000389 	.word	0x00000389
 8002cfc:	000007ff 	.word	0x000007ff

08002d00 <__aeabi_d2f>:
 8002d00:	0002      	movs	r2, r0
 8002d02:	004b      	lsls	r3, r1, #1
 8002d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d06:	0308      	lsls	r0, r1, #12
 8002d08:	0d5b      	lsrs	r3, r3, #21
 8002d0a:	4e3d      	ldr	r6, [pc, #244]	; (8002e00 <__aeabi_d2f+0x100>)
 8002d0c:	0fcc      	lsrs	r4, r1, #31
 8002d0e:	0a40      	lsrs	r0, r0, #9
 8002d10:	0f51      	lsrs	r1, r2, #29
 8002d12:	1c5f      	adds	r7, r3, #1
 8002d14:	4308      	orrs	r0, r1
 8002d16:	00d5      	lsls	r5, r2, #3
 8002d18:	4237      	tst	r7, r6
 8002d1a:	d00a      	beq.n	8002d32 <__aeabi_d2f+0x32>
 8002d1c:	4939      	ldr	r1, [pc, #228]	; (8002e04 <__aeabi_d2f+0x104>)
 8002d1e:	185e      	adds	r6, r3, r1
 8002d20:	2efe      	cmp	r6, #254	; 0xfe
 8002d22:	dd16      	ble.n	8002d52 <__aeabi_d2f+0x52>
 8002d24:	23ff      	movs	r3, #255	; 0xff
 8002d26:	2100      	movs	r1, #0
 8002d28:	05db      	lsls	r3, r3, #23
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	07e0      	lsls	r0, r4, #31
 8002d2e:	4318      	orrs	r0, r3
 8002d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <__aeabi_d2f+0x44>
 8002d36:	4328      	orrs	r0, r5
 8002d38:	d027      	beq.n	8002d8a <__aeabi_d2f+0x8a>
 8002d3a:	2105      	movs	r1, #5
 8002d3c:	0189      	lsls	r1, r1, #6
 8002d3e:	0a49      	lsrs	r1, r1, #9
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e7f1      	b.n	8002d28 <__aeabi_d2f+0x28>
 8002d44:	4305      	orrs	r5, r0
 8002d46:	d0ed      	beq.n	8002d24 <__aeabi_d2f+0x24>
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	03c9      	lsls	r1, r1, #15
 8002d4c:	23ff      	movs	r3, #255	; 0xff
 8002d4e:	4301      	orrs	r1, r0
 8002d50:	e7ea      	b.n	8002d28 <__aeabi_d2f+0x28>
 8002d52:	2e00      	cmp	r6, #0
 8002d54:	dd1c      	ble.n	8002d90 <__aeabi_d2f+0x90>
 8002d56:	0192      	lsls	r2, r2, #6
 8002d58:	0011      	movs	r1, r2
 8002d5a:	1e4a      	subs	r2, r1, #1
 8002d5c:	4191      	sbcs	r1, r2
 8002d5e:	00c0      	lsls	r0, r0, #3
 8002d60:	0f6d      	lsrs	r5, r5, #29
 8002d62:	4301      	orrs	r1, r0
 8002d64:	4329      	orrs	r1, r5
 8002d66:	074b      	lsls	r3, r1, #29
 8002d68:	d048      	beq.n	8002dfc <__aeabi_d2f+0xfc>
 8002d6a:	230f      	movs	r3, #15
 8002d6c:	400b      	ands	r3, r1
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d000      	beq.n	8002d74 <__aeabi_d2f+0x74>
 8002d72:	3104      	adds	r1, #4
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	04db      	lsls	r3, r3, #19
 8002d78:	400b      	ands	r3, r1
 8002d7a:	d03f      	beq.n	8002dfc <__aeabi_d2f+0xfc>
 8002d7c:	1c72      	adds	r2, r6, #1
 8002d7e:	2efe      	cmp	r6, #254	; 0xfe
 8002d80:	d0d0      	beq.n	8002d24 <__aeabi_d2f+0x24>
 8002d82:	0189      	lsls	r1, r1, #6
 8002d84:	0a49      	lsrs	r1, r1, #9
 8002d86:	b2d3      	uxtb	r3, r2
 8002d88:	e7ce      	b.n	8002d28 <__aeabi_d2f+0x28>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	e7cb      	b.n	8002d28 <__aeabi_d2f+0x28>
 8002d90:	0032      	movs	r2, r6
 8002d92:	3217      	adds	r2, #23
 8002d94:	db22      	blt.n	8002ddc <__aeabi_d2f+0xdc>
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	221e      	movs	r2, #30
 8002d9a:	0409      	lsls	r1, r1, #16
 8002d9c:	4308      	orrs	r0, r1
 8002d9e:	1b92      	subs	r2, r2, r6
 8002da0:	2a1f      	cmp	r2, #31
 8002da2:	dd1d      	ble.n	8002de0 <__aeabi_d2f+0xe0>
 8002da4:	2102      	movs	r1, #2
 8002da6:	4249      	negs	r1, r1
 8002da8:	1b8e      	subs	r6, r1, r6
 8002daa:	0001      	movs	r1, r0
 8002dac:	40f1      	lsrs	r1, r6
 8002dae:	000e      	movs	r6, r1
 8002db0:	2a20      	cmp	r2, #32
 8002db2:	d004      	beq.n	8002dbe <__aeabi_d2f+0xbe>
 8002db4:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <__aeabi_d2f+0x108>)
 8002db6:	4694      	mov	ip, r2
 8002db8:	4463      	add	r3, ip
 8002dba:	4098      	lsls	r0, r3
 8002dbc:	4305      	orrs	r5, r0
 8002dbe:	0029      	movs	r1, r5
 8002dc0:	1e4d      	subs	r5, r1, #1
 8002dc2:	41a9      	sbcs	r1, r5
 8002dc4:	4331      	orrs	r1, r6
 8002dc6:	2600      	movs	r6, #0
 8002dc8:	074b      	lsls	r3, r1, #29
 8002dca:	d1ce      	bne.n	8002d6a <__aeabi_d2f+0x6a>
 8002dcc:	2080      	movs	r0, #128	; 0x80
 8002dce:	000b      	movs	r3, r1
 8002dd0:	04c0      	lsls	r0, r0, #19
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4003      	ands	r3, r0
 8002dd6:	4201      	tst	r1, r0
 8002dd8:	d1d3      	bne.n	8002d82 <__aeabi_d2f+0x82>
 8002dda:	e7af      	b.n	8002d3c <__aeabi_d2f+0x3c>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e7ac      	b.n	8002d3a <__aeabi_d2f+0x3a>
 8002de0:	490a      	ldr	r1, [pc, #40]	; (8002e0c <__aeabi_d2f+0x10c>)
 8002de2:	468c      	mov	ip, r1
 8002de4:	0029      	movs	r1, r5
 8002de6:	4463      	add	r3, ip
 8002de8:	40d1      	lsrs	r1, r2
 8002dea:	409d      	lsls	r5, r3
 8002dec:	000a      	movs	r2, r1
 8002dee:	0029      	movs	r1, r5
 8002df0:	4098      	lsls	r0, r3
 8002df2:	1e4d      	subs	r5, r1, #1
 8002df4:	41a9      	sbcs	r1, r5
 8002df6:	4301      	orrs	r1, r0
 8002df8:	4311      	orrs	r1, r2
 8002dfa:	e7e4      	b.n	8002dc6 <__aeabi_d2f+0xc6>
 8002dfc:	0033      	movs	r3, r6
 8002dfe:	e79d      	b.n	8002d3c <__aeabi_d2f+0x3c>
 8002e00:	000007fe 	.word	0x000007fe
 8002e04:	fffffc80 	.word	0xfffffc80
 8002e08:	fffffca2 	.word	0xfffffca2
 8002e0c:	fffffc82 	.word	0xfffffc82

08002e10 <__clzsi2>:
 8002e10:	211c      	movs	r1, #28
 8002e12:	2301      	movs	r3, #1
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	4298      	cmp	r0, r3
 8002e18:	d301      	bcc.n	8002e1e <__clzsi2+0xe>
 8002e1a:	0c00      	lsrs	r0, r0, #16
 8002e1c:	3910      	subs	r1, #16
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	4298      	cmp	r0, r3
 8002e22:	d301      	bcc.n	8002e28 <__clzsi2+0x18>
 8002e24:	0a00      	lsrs	r0, r0, #8
 8002e26:	3908      	subs	r1, #8
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	4298      	cmp	r0, r3
 8002e2c:	d301      	bcc.n	8002e32 <__clzsi2+0x22>
 8002e2e:	0900      	lsrs	r0, r0, #4
 8002e30:	3904      	subs	r1, #4
 8002e32:	a202      	add	r2, pc, #8	; (adr r2, 8002e3c <__clzsi2+0x2c>)
 8002e34:	5c10      	ldrb	r0, [r2, r0]
 8002e36:	1840      	adds	r0, r0, r1
 8002e38:	4770      	bx	lr
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	02020304 	.word	0x02020304
 8002e40:	01010101 	.word	0x01010101
	...

08002e4c <ICM_CS_Low>:
	dst <<= 8; \
	dst |= (src_low); \
} while (0);

void ICM_CS_Low(uint8_t index)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	0002      	movs	r2, r0
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	701a      	strb	r2, [r3, #0]
	if (index == 0)
 8002e58:	1dfb      	adds	r3, r7, #7
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d107      	bne.n	8002e70 <ICM_CS_Low+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	480a      	ldr	r0, [pc, #40]	; (8002e90 <ICM_CS_Low+0x44>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	0019      	movs	r1, r3
 8002e6a:	f003 f85d 	bl	8005f28 <HAL_GPIO_WritePin>

	else if (index == 1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	}
}
 8002e6e:	e00a      	b.n	8002e86 <ICM_CS_Low+0x3a>
	else if (index == 1)
 8002e70:	1dfb      	adds	r3, r7, #7
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d106      	bne.n	8002e86 <ICM_CS_Low+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4804      	ldr	r0, [pc, #16]	; (8002e90 <ICM_CS_Low+0x44>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	0019      	movs	r1, r3
 8002e82:	f003 f851 	bl	8005f28 <HAL_GPIO_WritePin>
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	50000800 	.word	0x50000800

08002e94 <ICM_CS_High>:

void ICM_CS_High(uint8_t index)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	1dfb      	adds	r3, r7, #7
 8002e9e:	701a      	strb	r2, [r3, #0]
	if (index == 0)
 8002ea0:	1dfb      	adds	r3, r7, #7
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <ICM_CS_High+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	480a      	ldr	r0, [pc, #40]	; (8002ed8 <ICM_CS_High+0x44>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	f003 f839 	bl	8005f28 <HAL_GPIO_WritePin>

	else if (index == 1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	}
}
 8002eb6:	e00a      	b.n	8002ece <ICM_CS_High+0x3a>
	else if (index == 1)
 8002eb8:	1dfb      	adds	r3, r7, #7
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d106      	bne.n	8002ece <ICM_CS_High+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4804      	ldr	r0, [pc, #16]	; (8002ed8 <ICM_CS_High+0x44>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	0019      	movs	r1, r3
 8002eca:	f003 f82d 	bl	8005f28 <HAL_GPIO_WritePin>
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b002      	add	sp, #8
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	50000800 	.word	0x50000800

08002edc <ICM_ReadBytes>:

void ICM_ReadBytes(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t *pData, uint16_t Size, uint8_t index) // ***
{
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	0008      	movs	r0, r1
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	0019      	movs	r1, r3
 8002eea:	240b      	movs	r4, #11
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	1c02      	adds	r2, r0, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	2508      	movs	r5, #8
 8002ef4:	197b      	adds	r3, r7, r5
 8002ef6:	1c0a      	adds	r2, r1, #0
 8002ef8:	801a      	strh	r2, [r3, #0]
	reg = reg | READ_FLAG;
 8002efa:	193b      	adds	r3, r7, r4
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	4252      	negs	r2, r2
 8002f02:	4313      	orrs	r3, r2
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	193b      	adds	r3, r7, r4
 8002f08:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 8002f0a:	2620      	movs	r6, #32
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	18fa      	adds	r2, r7, r3
 8002f10:	1993      	adds	r3, r2, r6
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7ff ff99 	bl	8002e4c <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	425b      	negs	r3, r3
 8002f1e:	1939      	adds	r1, r7, r4
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f004 f988 	bl	8007238 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, pData, Size,HAL_MAX_DELAY);
 8002f28:	2301      	movs	r3, #1
 8002f2a:	425c      	negs	r4, r3
 8002f2c:	197b      	adds	r3, r7, r5
 8002f2e:	881a      	ldrh	r2, [r3, #0]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	0023      	movs	r3, r4
 8002f36:	f004 fad7 	bl	80074e8 <HAL_SPI_Receive>
	ICM_CS_High(index);
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	199b      	adds	r3, r3, r6
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7ff ffa6 	bl	8002e94 <ICM_CS_High>
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b005      	add	sp, #20
 8002f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f50 <ICM_ReadOneByte>:
	ICM_CS_High(index);

}

void ICM_ReadOneByte(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t* pData, uint8_t index) // ***
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	0008      	movs	r0, r1
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	240b      	movs	r4, #11
 8002f60:	193b      	adds	r3, r7, r4
 8002f62:	1c02      	adds	r2, r0, #0
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	200a      	movs	r0, #10
 8002f68:	183b      	adds	r3, r7, r0
 8002f6a:	1c0a      	adds	r2, r1, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
	reg = reg | READ_FLAG;
 8002f6e:	193b      	adds	r3, r7, r4
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2280      	movs	r2, #128	; 0x80
 8002f74:	4252      	negs	r2, r2
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	193b      	adds	r3, r7, r4
 8002f7c:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 8002f7e:	183b      	adds	r3, r7, r0
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff ff62 	bl	8002e4c <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 8002f88:	2301      	movs	r3, #1
 8002f8a:	425b      	negs	r3, r3
 8002f8c:	1939      	adds	r1, r7, r4
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f004 f951 	bl	8007238 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f004 fdc2 	bl	8007b24 <HAL_SPI_GetState>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d1f8      	bne.n	8002f98 <ICM_ReadOneByte+0x48>
		;
	HAL_SPI_Receive(hspi, pData, 1,HAL_MAX_DELAY);
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	425b      	negs	r3, r3
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f004 fa9a 	bl	80074e8 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f004 fdb3 	bl	8007b24 <HAL_SPI_GetState>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d1f8      	bne.n	8002fb6 <ICM_ReadOneByte+0x66>
		;
	ICM_CS_High(index);
 8002fc4:	230a      	movs	r3, #10
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7ff ff62 	bl	8002e94 <ICM_CS_High>
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b005      	add	sp, #20
 8002fd6:	bd90      	pop	{r4, r7, pc}

08002fd8 <ICM_WriteOneByte>:

void ICM_WriteOneByte(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t Data, uint8_t index) // ***
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	000c      	movs	r4, r1
 8002fe2:	0010      	movs	r0, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	1cfb      	adds	r3, r7, #3
 8002fe8:	1c22      	adds	r2, r4, #0
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	1cbb      	adds	r3, r7, #2
 8002fee:	1c02      	adds	r2, r0, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	1c7b      	adds	r3, r7, #1
 8002ff4:	1c0a      	adds	r2, r1, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
	reg = reg & WRITE_FLAG;
 8002ff8:	1cfb      	adds	r3, r7, #3
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	227f      	movs	r2, #127	; 0x7f
 8002ffe:	4013      	ands	r3, r2
 8003000:	b2da      	uxtb	r2, r3
 8003002:	1cfb      	adds	r3, r7, #3
 8003004:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 8003006:	1c7b      	adds	r3, r7, #1
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	0018      	movs	r0, r3
 800300c:	f7ff ff1e 	bl	8002e4c <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 8003010:	2301      	movs	r3, #1
 8003012:	425b      	negs	r3, r3
 8003014:	1cf9      	adds	r1, r7, #3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f004 f90d 	bl	8007238 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &Data, 1,HAL_MAX_DELAY);
 800301e:	2301      	movs	r3, #1
 8003020:	425b      	negs	r3, r3
 8003022:	1cb9      	adds	r1, r7, #2
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f004 f906 	bl	8007238 <HAL_SPI_Transmit>
	ICM_CS_High(index);
 800302c:	1c7b      	adds	r3, r7, #1
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	0018      	movs	r0, r3
 8003032:	f7ff ff2f 	bl	8002e94 <ICM_CS_High>
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b003      	add	sp, #12
 800303c:	bd90      	pop	{r4, r7, pc}

0800303e <ICM_SelectBank>:

void ICM_SelectBank(SPI_HandleTypeDef* hspi,uint8_t reg, uint8_t index){
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	0008      	movs	r0, r1
 8003048:	0011      	movs	r1, r2
 800304a:	1cfb      	adds	r3, r7, #3
 800304c:	1c02      	adds	r2, r0, #0
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	1cbb      	adds	r3, r7, #2
 8003052:	1c0a      	adds	r2, r1, #0
 8003054:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,USER_BANK_SEL,reg, index);
 8003056:	1cbb      	adds	r3, r7, #2
 8003058:	7819      	ldrb	r1, [r3, #0]
 800305a:	1cfb      	adds	r3, r7, #3
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	000b      	movs	r3, r1
 8003062:	217f      	movs	r1, #127	; 0x7f
 8003064:	f7ff ffb8 	bl	8002fd8 <ICM_WriteOneByte>
}
 8003068:	46c0      	nop			; (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b002      	add	sp, #8
 800306e:	bd80      	pop	{r7, pc}

08003070 <ICM_Initialize>:

/*Initializing the ICM20602*/
void ICM_Initialize(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t index)
{
 8003070:	b5b0      	push	{r4, r5, r7, lr}
 8003072:	b0a0      	sub	sp, #128	; 0x80
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	1dfb      	adds	r3, r7, #7
 800307c:	701a      	strb	r2, [r3, #0]

	uint8_t temp;

	ICM_SelectBank(hspi,USER_BANK_0, index);
 800307e:	1dfb      	adds	r3, r7, #7
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2100      	movs	r1, #0
 8003086:	0018      	movs	r0, r3
 8003088:	f7ff ffd9 	bl	800303e <ICM_SelectBank>
	temp = PWR_MGT_RESET;
 800308c:	207f      	movs	r0, #127	; 0x7f
 800308e:	183b      	adds	r3, r7, r0
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,REG_PWR_MGMT_1,temp, index);
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	7819      	ldrb	r1, [r3, #0]
 8003098:	183b      	adds	r3, r7, r0
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	000b      	movs	r3, r1
 80030a0:	2106      	movs	r1, #6
 80030a2:	f7ff ff99 	bl	8002fd8 <ICM_WriteOneByte>
	HAL_Delay(20);
 80030a6:	2014      	movs	r0, #20
 80030a8:	f002 fcec 	bl	8005a84 <HAL_Delay>

	char uart_buffer[100];
	sprintf((char*) uart_buffer, "SLAVE %i: Initializing IMU \r\n", index);
 80030ac:	1dfb      	adds	r3, r7, #7
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	499f      	ldr	r1, [pc, #636]	; (8003330 <ICM_Initialize+0x2c0>)
 80030b2:	2414      	movs	r4, #20
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	0018      	movs	r0, r3
 80030b8:	f006 fa64 	bl	8009584 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 80030bc:	193b      	adds	r3, r7, r4
 80030be:	0018      	movs	r0, r3
 80030c0:	f7fd f81e 	bl	8000100 <strlen>
 80030c4:	0003      	movs	r3, r0
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	23fa      	movs	r3, #250	; 0xfa
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	1939      	adds	r1, r7, r4
 80030ce:	68b8      	ldr	r0, [r7, #8]
 80030d0:	f005 f87a 	bl	80081c8 <HAL_UART_Transmit>
	HAL_Delay(100);
 80030d4:	2064      	movs	r0, #100	; 0x64
 80030d6:	f002 fcd5 	bl	8005a84 <HAL_Delay>

	/* Who am i test
	 WhoAmI is in register bank 0* */
	ICM_SelectBank(hspi,USER_BANK_0, index);
 80030da:	1dfb      	adds	r3, r7, #7
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2100      	movs	r1, #0
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7ff ffab 	bl	800303e <ICM_SelectBank>
	if (ICM_WHOAMI(hspi, index))
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	0011      	movs	r1, r2
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 fe11 	bl	8003d18 <ICM_WHOAMI>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d013      	beq.n	8003122 <ICM_Initialize+0xb2>
	{
		sprintf((char*) uart_buffer, "SLAVE %i: WHO AM I Success \r\n", index);
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	781a      	ldrb	r2, [r3, #0]
 80030fe:	498d      	ldr	r1, [pc, #564]	; (8003334 <ICM_Initialize+0x2c4>)
 8003100:	193b      	adds	r3, r7, r4
 8003102:	0018      	movs	r0, r3
 8003104:	f006 fa3e 	bl	8009584 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003108:	193b      	adds	r3, r7, r4
 800310a:	0018      	movs	r0, r3
 800310c:	f7fc fff8 	bl	8000100 <strlen>
 8003110:	0003      	movs	r3, r0
 8003112:	b29a      	uxth	r2, r3
 8003114:	23fa      	movs	r3, #250	; 0xfa
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	1939      	adds	r1, r7, r4
 800311a:	68b8      	ldr	r0, [r7, #8]
 800311c:	f005 f854 	bl	80081c8 <HAL_UART_Transmit>
 8003120:	e013      	b.n	800314a <ICM_Initialize+0xda>
	} else {
		sprintf((char*) uart_buffer, "SLAVE %i: WHO AM I Failed \r\n", index);
 8003122:	1dfb      	adds	r3, r7, #7
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	4984      	ldr	r1, [pc, #528]	; (8003338 <ICM_Initialize+0x2c8>)
 8003128:	2414      	movs	r4, #20
 800312a:	193b      	adds	r3, r7, r4
 800312c:	0018      	movs	r0, r3
 800312e:	f006 fa29 	bl	8009584 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003132:	193b      	adds	r3, r7, r4
 8003134:	0018      	movs	r0, r3
 8003136:	f7fc ffe3 	bl	8000100 <strlen>
 800313a:	0003      	movs	r3, r0
 800313c:	b29a      	uxth	r2, r3
 800313e:	23fa      	movs	r3, #250	; 0xfa
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	1939      	adds	r1, r7, r4
 8003144:	68b8      	ldr	r0, [r7, #8]
 8003146:	f005 f83f 	bl	80081c8 <HAL_UART_Transmit>
	}

	HAL_Delay(50);
 800314a:	2032      	movs	r0, #50	; 0x32
 800314c:	f002 fc9a 	bl	8005a84 <HAL_Delay>

	uint8_t pwr_config = PWR_MGMT_1_CONFIG;
 8003150:	247e      	movs	r4, #126	; 0x7e
 8003152:	193b      	adds	r3, r7, r4
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
	uint8_t pwr_config2 = PWR_MGMT_2_CONFIG;
 8003158:	257d      	movs	r5, #125	; 0x7d
 800315a:	197b      	adds	r3, r7, r5
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]

	ICM_WriteOneByte(hspi, REG_PWR_MGMT_1, pwr_config, index);
 8003160:	1dfb      	adds	r3, r7, #7
 8003162:	7819      	ldrb	r1, [r3, #0]
 8003164:	193b      	adds	r3, r7, r4
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	000b      	movs	r3, r1
 800316c:	2106      	movs	r1, #6
 800316e:	f7ff ff33 	bl	8002fd8 <ICM_WriteOneByte>
	HAL_Delay(20);
 8003172:	2014      	movs	r0, #20
 8003174:	f002 fc86 	bl	8005a84 <HAL_Delay>
	ICM_WriteOneByte(hspi,REG_PWR_MGMT_2,pwr_config2, index);
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	7819      	ldrb	r1, [r3, #0]
 800317c:	197b      	adds	r3, r7, r5
 800317e:	781a      	ldrb	r2, [r3, #0]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	000b      	movs	r3, r1
 8003184:	2107      	movs	r1, #7
 8003186:	f7ff ff27 	bl	8002fd8 <ICM_WriteOneByte>


	/*Turn Acceleration and Gyro OFF*/
	HAL_Delay(20);
 800318a:	2014      	movs	r0, #20
 800318c:	f002 fc7a 	bl	8005a84 <HAL_Delay>
	pwr_config = ACC_GYRO_OFF;
 8003190:	193b      	adds	r3, r7, r4
 8003192:	223f      	movs	r2, #63	; 0x3f
 8003194:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_PWR_MGMT_2, pwr_config, index);
 8003196:	1dfb      	adds	r3, r7, #7
 8003198:	7819      	ldrb	r1, [r3, #0]
 800319a:	193b      	adds	r3, r7, r4
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	000b      	movs	r3, r1
 80031a2:	2107      	movs	r1, #7
 80031a4:	f7ff ff18 	bl	8002fd8 <ICM_WriteOneByte>

	/* Disable Fifo and I2C slave*/
	temp = 0b00010000;
 80031a8:	247f      	movs	r4, #127	; 0x7f
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	2210      	movs	r2, #16
 80031ae:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_USER_CTRL, temp, index);
 80031b0:	1dfb      	adds	r3, r7, #7
 80031b2:	7819      	ldrb	r1, [r3, #0]
 80031b4:	193b      	adds	r3, r7, r4
 80031b6:	781a      	ldrb	r2, [r3, #0]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	000b      	movs	r3, r1
 80031bc:	2103      	movs	r1, #3
 80031be:	f7ff ff0b 	bl	8002fd8 <ICM_WriteOneByte>


	/* Configure Gyro */
	ICM_SelectBank(hspi, USER_BANK_2, index);
 80031c2:	1dfb      	adds	r3, r7, #7
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2120      	movs	r1, #32
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7ff ff37 	bl	800303e <ICM_SelectBank>
	temp = 0;
 80031d0:	0020      	movs	r0, r4
 80031d2:	183b      	adds	r3, r7, r0
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_2, temp, index);
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	7819      	ldrb	r1, [r3, #0]
 80031dc:	183b      	adds	r3, r7, r0
 80031de:	781a      	ldrb	r2, [r3, #0]
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	000b      	movs	r3, r1
 80031e4:	2102      	movs	r1, #2
 80031e6:	f7ff fef7 	bl	8002fd8 <ICM_WriteOneByte>

	uint16_t dps = GYRO_DPS;
 80031ea:	247a      	movs	r4, #122	; 0x7a
 80031ec:	193b      	adds	r3, r7, r4
 80031ee:	22fa      	movs	r2, #250	; 0xfa
 80031f0:	0092      	lsls	r2, r2, #2
 80031f2:	801a      	strh	r2, [r3, #0]
	if (ICM_GyroConfig(hspi, dps, index))
 80031f4:	1dfb      	adds	r3, r7, #7
 80031f6:	781a      	ldrb	r2, [r3, #0]
 80031f8:	193b      	adds	r3, r7, r4
 80031fa:	8819      	ldrh	r1, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 f8a4 	bl	800334c <ICM_GyroConfig>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d015      	beq.n	8003234 <ICM_Initialize+0x1c4>
	{
		sprintf((char*) uart_buffer, "SLAVE %i: Gyro Configuration success DPS: %d \r\n", index, dps);
 8003208:	1dfb      	adds	r3, r7, #7
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	193b      	adds	r3, r7, r4
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	494a      	ldr	r1, [pc, #296]	; (800333c <ICM_Initialize+0x2cc>)
 8003212:	2414      	movs	r4, #20
 8003214:	1938      	adds	r0, r7, r4
 8003216:	f006 f9b5 	bl	8009584 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 800321a:	193b      	adds	r3, r7, r4
 800321c:	0018      	movs	r0, r3
 800321e:	f7fc ff6f 	bl	8000100 <strlen>
 8003222:	0003      	movs	r3, r0
 8003224:	b29a      	uxth	r2, r3
 8003226:	23fa      	movs	r3, #250	; 0xfa
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	1939      	adds	r1, r7, r4
 800322c:	68b8      	ldr	r0, [r7, #8]
 800322e:	f004 ffcb 	bl	80081c8 <HAL_UART_Transmit>
 8003232:	e013      	b.n	800325c <ICM_Initialize+0x1ec>

	} else {
		sprintf((char*) uart_buffer, "SLAVE %i: Gyro Configuration failed \r\n", index);
 8003234:	1dfb      	adds	r3, r7, #7
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	4941      	ldr	r1, [pc, #260]	; (8003340 <ICM_Initialize+0x2d0>)
 800323a:	2414      	movs	r4, #20
 800323c:	193b      	adds	r3, r7, r4
 800323e:	0018      	movs	r0, r3
 8003240:	f006 f9a0 	bl	8009584 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003244:	193b      	adds	r3, r7, r4
 8003246:	0018      	movs	r0, r3
 8003248:	f7fc ff5a 	bl	8000100 <strlen>
 800324c:	0003      	movs	r3, r0
 800324e:	b29a      	uxth	r2, r3
 8003250:	23fa      	movs	r3, #250	; 0xfa
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	1939      	adds	r1, r7, r4
 8003256:	68b8      	ldr	r0, [r7, #8]
 8003258:	f004 ffb6 	bl	80081c8 <HAL_UART_Transmit>

	}

	temp = 0;
 800325c:	207f      	movs	r0, #127	; 0x7f
 800325e:	183b      	adds	r3, r7, r0
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG_2,temp, index);
 8003264:	1dfb      	adds	r3, r7, #7
 8003266:	7819      	ldrb	r1, [r3, #0]
 8003268:	183b      	adds	r3, r7, r0
 800326a:	781a      	ldrb	r2, [r3, #0]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	000b      	movs	r3, r1
 8003270:	2115      	movs	r1, #21
 8003272:	f7ff feb1 	bl	8002fd8 <ICM_WriteOneByte>
	/*Turn Acceleartion and Gyro ON*/
	HAL_Delay(20);
 8003276:	2014      	movs	r0, #20
 8003278:	f002 fc04 	bl	8005a84 <HAL_Delay>
	pwr_config = ACC_GYRO_ON;
 800327c:	247e      	movs	r4, #126	; 0x7e
 800327e:	193b      	adds	r3, r7, r4
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
	ICM_SelectBank(hspi,USER_BANK_0, index);
 8003284:	1dfb      	adds	r3, r7, #7
 8003286:	781a      	ldrb	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2100      	movs	r1, #0
 800328c:	0018      	movs	r0, r3
 800328e:	f7ff fed6 	bl	800303e <ICM_SelectBank>
	HAL_Delay(20);
 8003292:	2014      	movs	r0, #20
 8003294:	f002 fbf6 	bl	8005a84 <HAL_Delay>
	ICM_WriteOneByte(hspi, REG_PWR_MGMT_2, pwr_config, index);
 8003298:	1dfb      	adds	r3, r7, #7
 800329a:	7819      	ldrb	r1, [r3, #0]
 800329c:	193b      	adds	r3, r7, r4
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	000b      	movs	r3, r1
 80032a4:	2107      	movs	r1, #7
 80032a6:	f7ff fe97 	bl	8002fd8 <ICM_WriteOneByte>
	HAL_Delay(20);
 80032aa:	2014      	movs	r0, #20
 80032ac:	f002 fbea 	bl	8005a84 <HAL_Delay>
	/* Configure Accelerometer */
	uint8_t acc_scale = ACCEL_SCALE_SELECT;
 80032b0:	2479      	movs	r4, #121	; 0x79
 80032b2:	193b      	adds	r3, r7, r4
 80032b4:	2208      	movs	r2, #8
 80032b6:	701a      	strb	r2, [r3, #0]

	if(ICM_AccConfig(hspi,acc_scale, index)){
 80032b8:	1dfb      	adds	r3, r7, #7
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	193b      	adds	r3, r7, r4
 80032be:	7819      	ldrb	r1, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 fc70 	bl	8003ba8 <ICM_AccConfig>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d015      	beq.n	80032f8 <ICM_Initialize+0x288>
		sprintf((char*) uart_buffer,"SLAVE %i: Accelerometer Configuration success SELECT +-G: %d \r\n",index, acc_scale);
 80032cc:	1dfb      	adds	r3, r7, #7
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	193b      	adds	r3, r7, r4
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	491b      	ldr	r1, [pc, #108]	; (8003344 <ICM_Initialize+0x2d4>)
 80032d6:	2414      	movs	r4, #20
 80032d8:	1938      	adds	r0, r7, r4
 80032da:	f006 f953 	bl	8009584 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 80032de:	193b      	adds	r3, r7, r4
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7fc ff0d 	bl	8000100 <strlen>
 80032e6:	0003      	movs	r3, r0
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	23fa      	movs	r3, #250	; 0xfa
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	1939      	adds	r1, r7, r4
 80032f0:	68b8      	ldr	r0, [r7, #8]
 80032f2:	f004 ff69 	bl	80081c8 <HAL_UART_Transmit>
 80032f6:	e013      	b.n	8003320 <ICM_Initialize+0x2b0>
	}else{
		sprintf((char*) uart_buffer, "SLAVE %i: Accelerometer Configuration failed \r\n", index);
 80032f8:	1dfb      	adds	r3, r7, #7
 80032fa:	781a      	ldrb	r2, [r3, #0]
 80032fc:	4912      	ldr	r1, [pc, #72]	; (8003348 <ICM_Initialize+0x2d8>)
 80032fe:	2414      	movs	r4, #20
 8003300:	193b      	adds	r3, r7, r4
 8003302:	0018      	movs	r0, r3
 8003304:	f006 f93e 	bl	8009584 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003308:	193b      	adds	r3, r7, r4
 800330a:	0018      	movs	r0, r3
 800330c:	f7fc fef8 	bl	8000100 <strlen>
 8003310:	0003      	movs	r3, r0
 8003312:	b29a      	uxth	r2, r3
 8003314:	23fa      	movs	r3, #250	; 0xfa
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	1939      	adds	r1, r7, r4
 800331a:	68b8      	ldr	r0, [r7, #8]
 800331c:	f004 ff54 	bl	80081c8 <HAL_UART_Transmit>
	}


	HAL_Delay(20);
 8003320:	2014      	movs	r0, #20
 8003322:	f002 fbaf 	bl	8005a84 <HAL_Delay>

	/*Configure*/


}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b020      	add	sp, #128	; 0x80
 800332c:	bdb0      	pop	{r4, r5, r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	0800dd50 	.word	0x0800dd50
 8003334:	0800dd70 	.word	0x0800dd70
 8003338:	0800dd90 	.word	0x0800dd90
 800333c:	0800ddb0 	.word	0x0800ddb0
 8003340:	0800dde0 	.word	0x0800dde0
 8003344:	0800de08 	.word	0x0800de08
 8003348:	0800de48 	.word	0x0800de48

0800334c <ICM_GyroConfig>:


/*Configuring Gyro DPS settings in Gyro Config Register */
uint8_t ICM_GyroConfig(SPI_HandleTypeDef *hspi, uint16_t dps, uint8_t index)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	0008      	movs	r0, r1
 8003356:	0011      	movs	r1, r2
 8003358:	1cbb      	adds	r3, r7, #2
 800335a:	1c02      	adds	r2, r0, #0
 800335c:	801a      	strh	r2, [r3, #0]
 800335e:	1c7b      	adds	r3, r7, #1
 8003360:	1c0a      	adds	r2, r1, #0
 8003362:	701a      	strb	r2, [r3, #0]
	uint8_t config_byte;
	switch(dps)
 8003364:	1cbb      	adds	r3, r7, #2
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	22fa      	movs	r2, #250	; 0xfa
 800336a:	00d2      	lsls	r2, r2, #3
 800336c:	4293      	cmp	r3, r2
 800336e:	d045      	beq.n	80033fc <ICM_GyroConfig+0xb0>
 8003370:	22fa      	movs	r2, #250	; 0xfa
 8003372:	00d2      	lsls	r2, r2, #3
 8003374:	4293      	cmp	r3, r2
 8003376:	dc52      	bgt.n	800341e <ICM_GyroConfig+0xd2>
 8003378:	22fa      	movs	r2, #250	; 0xfa
 800337a:	0092      	lsls	r2, r2, #2
 800337c:	4293      	cmp	r3, r2
 800337e:	d02c      	beq.n	80033da <ICM_GyroConfig+0x8e>
 8003380:	22fa      	movs	r2, #250	; 0xfa
 8003382:	0092      	lsls	r2, r2, #2
 8003384:	4293      	cmp	r3, r2
 8003386:	dc4a      	bgt.n	800341e <ICM_GyroConfig+0xd2>
 8003388:	2bfa      	cmp	r3, #250	; 0xfa
 800338a:	d004      	beq.n	8003396 <ICM_GyroConfig+0x4a>
 800338c:	22fa      	movs	r2, #250	; 0xfa
 800338e:	0052      	lsls	r2, r2, #1
 8003390:	4293      	cmp	r3, r2
 8003392:	d011      	beq.n	80033b8 <ICM_GyroConfig+0x6c>
 8003394:	e043      	b.n	800341e <ICM_GyroConfig+0xd2>
	{
		case 250:
			config_byte = GYRO_250_DPS | GYRO_FILTER;
 8003396:	200f      	movs	r0, #15
 8003398:	183b      	adds	r3, r7, r0
 800339a:	2229      	movs	r2, #41	; 0x29
 800339c:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_250DPS;
 800339e:	4b35      	ldr	r3, [pc, #212]	; (8003474 <ICM_GyroConfig+0x128>)
 80033a0:	4a35      	ldr	r2, [pc, #212]	; (8003478 <ICM_GyroConfig+0x12c>)
 80033a2:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 80033a4:	1c7b      	adds	r3, r7, #1
 80033a6:	7819      	ldrb	r1, [r3, #0]
 80033a8:	183b      	adds	r3, r7, r0
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	000b      	movs	r3, r1
 80033b0:	2101      	movs	r1, #1
 80033b2:	f7ff fe11 	bl	8002fd8 <ICM_WriteOneByte>
			break;
 80033b6:	e040      	b.n	800343a <ICM_GyroConfig+0xee>
		case 500:
			config_byte = GYRO_500_DPS | GYRO_FILTER;
 80033b8:	200f      	movs	r0, #15
 80033ba:	183b      	adds	r3, r7, r0
 80033bc:	222b      	movs	r2, #43	; 0x2b
 80033be:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_500DPS;
 80033c0:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <ICM_GyroConfig+0x128>)
 80033c2:	4a2e      	ldr	r2, [pc, #184]	; (800347c <ICM_GyroConfig+0x130>)
 80033c4:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 80033c6:	1c7b      	adds	r3, r7, #1
 80033c8:	7819      	ldrb	r1, [r3, #0]
 80033ca:	183b      	adds	r3, r7, r0
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	000b      	movs	r3, r1
 80033d2:	2101      	movs	r1, #1
 80033d4:	f7ff fe00 	bl	8002fd8 <ICM_WriteOneByte>
			break;
 80033d8:	e02f      	b.n	800343a <ICM_GyroConfig+0xee>
		case 1000:
			config_byte = GYRO_1000_DPS | GYRO_FILTER;
 80033da:	200f      	movs	r0, #15
 80033dc:	183b      	adds	r3, r7, r0
 80033de:	222d      	movs	r2, #45	; 0x2d
 80033e0:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_1000DPS;
 80033e2:	4b24      	ldr	r3, [pc, #144]	; (8003474 <ICM_GyroConfig+0x128>)
 80033e4:	4a26      	ldr	r2, [pc, #152]	; (8003480 <ICM_GyroConfig+0x134>)
 80033e6:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1,(uint8_t)config_byte, index);
 80033e8:	1c7b      	adds	r3, r7, #1
 80033ea:	7819      	ldrb	r1, [r3, #0]
 80033ec:	183b      	adds	r3, r7, r0
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	000b      	movs	r3, r1
 80033f4:	2101      	movs	r1, #1
 80033f6:	f7ff fdef 	bl	8002fd8 <ICM_WriteOneByte>
			break;
 80033fa:	e01e      	b.n	800343a <ICM_GyroConfig+0xee>
		case 2000:
			config_byte = GYRO_2000_DPS | GYRO_FILTER;
 80033fc:	200f      	movs	r0, #15
 80033fe:	183b      	adds	r3, r7, r0
 8003400:	222f      	movs	r2, #47	; 0x2f
 8003402:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_2000DPS;
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <ICM_GyroConfig+0x128>)
 8003406:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <ICM_GyroConfig+0x138>)
 8003408:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 800340a:	1c7b      	adds	r3, r7, #1
 800340c:	7819      	ldrb	r1, [r3, #0]
 800340e:	183b      	adds	r3, r7, r0
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	000b      	movs	r3, r1
 8003416:	2101      	movs	r1, #1
 8003418:	f7ff fdde 	bl	8002fd8 <ICM_WriteOneByte>
			break;
 800341c:	e00d      	b.n	800343a <ICM_GyroConfig+0xee>
		default:
			config_byte = GYRO_1000_DPS | GYRO_FILTER;
 800341e:	200f      	movs	r0, #15
 8003420:	183b      	adds	r3, r7, r0
 8003422:	222d      	movs	r2, #45	; 0x2d
 8003424:	701a      	strb	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 8003426:	1c7b      	adds	r3, r7, #1
 8003428:	7819      	ldrb	r1, [r3, #0]
 800342a:	183b      	adds	r3, r7, r0
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	000b      	movs	r3, r1
 8003432:	2101      	movs	r1, #1
 8003434:	f7ff fdd0 	bl	8002fd8 <ICM_WriteOneByte>
			break;
 8003438:	46c0      	nop			; (mov r8, r8)
	}

	HAL_Delay(10);
 800343a:	200a      	movs	r0, #10
 800343c:	f002 fb22 	bl	8005a84 <HAL_Delay>

	uint8_t test = 0;
 8003440:	210e      	movs	r1, #14
 8003442:	187b      	adds	r3, r7, r1
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]

	ICM_ReadOneByte(hspi, REG_GYRO_CONFIG_1, &test, index);
 8003448:	1c7b      	adds	r3, r7, #1
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	000c      	movs	r4, r1
 800344e:	187a      	adds	r2, r7, r1
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	2101      	movs	r1, #1
 8003454:	f7ff fd7c 	bl	8002f50 <ICM_ReadOneByte>

	if (test != config_byte)
 8003458:	193b      	adds	r3, r7, r4
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	220f      	movs	r2, #15
 800345e:	18ba      	adds	r2, r7, r2
 8003460:	7812      	ldrb	r2, [r2, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d001      	beq.n	800346a <ICM_GyroConfig+0x11e>
	{

		return 0;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <ICM_GyroConfig+0x120>
	}
	return 1;
 800346a:	2301      	movs	r3, #1
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	b005      	add	sp, #20
 8003472:	bd90      	pop	{r4, r7, pc}
 8003474:	2000039c 	.word	0x2000039c
 8003478:	43030000 	.word	0x43030000
 800347c:	42830000 	.word	0x42830000
 8003480:	42033333 	.word	0x42033333
 8003484:	41833333 	.word	0x41833333

08003488 <ICM_GyroCalibration>:


void ICM_GyroCalibration(SPI_HandleTypeDef *hspi,UART_HandleTypeDef* huart, float *gyro_bias, uint8_t index)
{
 8003488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348a:	46c6      	mov	lr, r8
 800348c:	b500      	push	{lr}
 800348e:	b0ca      	sub	sp, #296	; 0x128
 8003490:	af06      	add	r7, sp, #24
 8003492:	61f8      	str	r0, [r7, #28]
 8003494:	61b9      	str	r1, [r7, #24]
 8003496:	617a      	str	r2, [r7, #20]
 8003498:	001a      	movs	r2, r3
 800349a:	240b      	movs	r4, #11
 800349c:	2308      	movs	r3, #8
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	191b      	adds	r3, r3, r4
 80034a2:	701a      	strb	r2, [r3, #0]
	char uart_buffer[200];
	float gyro_data[3] = {0,0,0};
 80034a4:	2128      	movs	r1, #40	; 0x28
 80034a6:	2008      	movs	r0, #8
 80034a8:	2308      	movs	r3, #8
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	181b      	adds	r3, r3, r0
 80034ae:	185b      	adds	r3, r3, r1
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	2308      	movs	r3, #8
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	181b      	adds	r3, r3, r0
 80034ba:	185b      	adds	r3, r3, r1
 80034bc:	2200      	movs	r2, #0
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	2308      	movs	r3, #8
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	181b      	adds	r3, r3, r0
 80034c6:	185b      	adds	r3, r3, r1
 80034c8:	2200      	movs	r2, #0
 80034ca:	609a      	str	r2, [r3, #8]
	float zero_bias[3] = {0,0,0};
 80034cc:	211c      	movs	r1, #28
 80034ce:	2308      	movs	r3, #8
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	181b      	adds	r3, r3, r0
 80034d4:	185b      	adds	r3, r3, r1
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	2308      	movs	r3, #8
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	181b      	adds	r3, r3, r0
 80034e0:	185b      	adds	r3, r3, r1
 80034e2:	2200      	movs	r2, #0
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	2308      	movs	r3, #8
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	181b      	adds	r3, r3, r0
 80034ec:	185b      	adds	r3, r3, r1
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
	float gyro_accumulated[3] = {0,0,0};
 80034f2:	2110      	movs	r1, #16
 80034f4:	2308      	movs	r3, #8
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	181b      	adds	r3, r3, r0
 80034fa:	185b      	adds	r3, r3, r1
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	2308      	movs	r3, #8
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	181b      	adds	r3, r3, r0
 8003506:	185b      	adds	r3, r3, r1
 8003508:	2200      	movs	r2, #0
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	2308      	movs	r3, #8
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	181b      	adds	r3, r3, r0
 8003512:	185b      	adds	r3, r3, r1
 8003514:	2200      	movs	r2, #0
 8003516:	609a      	str	r2, [r3, #8]

	ICM_SelectBank(hspi,USER_BANK_0, index);
 8003518:	2308      	movs	r3, #8
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	191b      	adds	r3, r3, r4
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2100      	movs	r1, #0
 8003524:	0018      	movs	r0, r3
 8003526:	f7ff fd8a 	bl	800303e <ICM_SelectBank>
	HAL_Delay(10);
 800352a:	200a      	movs	r0, #10
 800352c:	f002 faaa 	bl	8005a84 <HAL_Delay>

	for (int16_t i = 0; i < GYRO_CALIBRATION_SAMPLES; i++)
 8003530:	23fe      	movs	r3, #254	; 0xfe
 8003532:	2208      	movs	r2, #8
 8003534:	4694      	mov	ip, r2
 8003536:	2208      	movs	r2, #8
 8003538:	4690      	mov	r8, r2
 800353a:	44b8      	add	r8, r7
 800353c:	44c4      	add	ip, r8
 800353e:	4463      	add	r3, ip
 8003540:	2200      	movs	r2, #0
 8003542:	801a      	strh	r2, [r3, #0]
 8003544:	e069      	b.n	800361a <ICM_GyroCalibration+0x192>
	{
		ICM_ReadGyroData(hspi, gyro_data, zero_bias, index);
 8003546:	230b      	movs	r3, #11
 8003548:	2208      	movs	r2, #8
 800354a:	4694      	mov	ip, r2
 800354c:	44bc      	add	ip, r7
 800354e:	4463      	add	r3, ip
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	221c      	movs	r2, #28
 8003554:	2108      	movs	r1, #8
 8003556:	468c      	mov	ip, r1
 8003558:	2108      	movs	r1, #8
 800355a:	4688      	mov	r8, r1
 800355c:	44b8      	add	r8, r7
 800355e:	44c4      	add	ip, r8
 8003560:	4462      	add	r2, ip
 8003562:	2528      	movs	r5, #40	; 0x28
 8003564:	2608      	movs	r6, #8
 8003566:	2108      	movs	r1, #8
 8003568:	1879      	adds	r1, r7, r1
 800356a:	1989      	adds	r1, r1, r6
 800356c:	1949      	adds	r1, r1, r5
 800356e:	69f8      	ldr	r0, [r7, #28]
 8003570:	f000 f9bc 	bl	80038ec <ICM_ReadGyroData>
		gyro_accumulated[0] += gyro_data[0];
 8003574:	2410      	movs	r4, #16
 8003576:	2308      	movs	r3, #8
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	199b      	adds	r3, r3, r6
 800357c:	191b      	adds	r3, r3, r4
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	2308      	movs	r3, #8
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	199b      	adds	r3, r3, r6
 8003586:	195b      	adds	r3, r3, r5
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c19      	adds	r1, r3, #0
 800358c:	1c10      	adds	r0, r2, #0
 800358e:	f7fc ff87 	bl	80004a0 <__aeabi_fadd>
 8003592:	1c03      	adds	r3, r0, #0
 8003594:	1c1a      	adds	r2, r3, #0
 8003596:	2308      	movs	r3, #8
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	199b      	adds	r3, r3, r6
 800359c:	191b      	adds	r3, r3, r4
 800359e:	601a      	str	r2, [r3, #0]
		gyro_accumulated[1] += gyro_data[1];
 80035a0:	2308      	movs	r3, #8
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	199b      	adds	r3, r3, r6
 80035a6:	191b      	adds	r3, r3, r4
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	2308      	movs	r3, #8
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	199b      	adds	r3, r3, r6
 80035b0:	195b      	adds	r3, r3, r5
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	1c19      	adds	r1, r3, #0
 80035b6:	1c10      	adds	r0, r2, #0
 80035b8:	f7fc ff72 	bl	80004a0 <__aeabi_fadd>
 80035bc:	1c03      	adds	r3, r0, #0
 80035be:	1c1a      	adds	r2, r3, #0
 80035c0:	2308      	movs	r3, #8
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	199b      	adds	r3, r3, r6
 80035c6:	191b      	adds	r3, r3, r4
 80035c8:	605a      	str	r2, [r3, #4]
		gyro_accumulated[2] += gyro_data[2];
 80035ca:	2308      	movs	r3, #8
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	199b      	adds	r3, r3, r6
 80035d0:	191b      	adds	r3, r3, r4
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	2308      	movs	r3, #8
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	199b      	adds	r3, r3, r6
 80035da:	195b      	adds	r3, r3, r5
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	1c19      	adds	r1, r3, #0
 80035e0:	1c10      	adds	r0, r2, #0
 80035e2:	f7fc ff5d 	bl	80004a0 <__aeabi_fadd>
 80035e6:	1c03      	adds	r3, r0, #0
 80035e8:	1c1a      	adds	r2, r3, #0
 80035ea:	2308      	movs	r3, #8
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	199b      	adds	r3, r3, r6
 80035f0:	191b      	adds	r3, r3, r4
 80035f2:	609a      	str	r2, [r3, #8]
		HAL_Delay(20);
 80035f4:	2014      	movs	r0, #20
 80035f6:	f002 fa45 	bl	8005a84 <HAL_Delay>
	for (int16_t i = 0; i < GYRO_CALIBRATION_SAMPLES; i++)
 80035fa:	21fe      	movs	r1, #254	; 0xfe
 80035fc:	0030      	movs	r0, r6
 80035fe:	2308      	movs	r3, #8
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	199b      	adds	r3, r3, r6
 8003604:	185b      	adds	r3, r3, r1
 8003606:	2200      	movs	r2, #0
 8003608:	5e9b      	ldrsh	r3, [r3, r2]
 800360a:	b29b      	uxth	r3, r3
 800360c:	3301      	adds	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	2308      	movs	r3, #8
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	181b      	adds	r3, r3, r0
 8003616:	185b      	adds	r3, r3, r1
 8003618:	801a      	strh	r2, [r3, #0]
 800361a:	23fe      	movs	r3, #254	; 0xfe
 800361c:	2208      	movs	r2, #8
 800361e:	4694      	mov	ip, r2
 8003620:	2208      	movs	r2, #8
 8003622:	4690      	mov	r8, r2
 8003624:	44b8      	add	r8, r7
 8003626:	44c4      	add	ip, r8
 8003628:	4463      	add	r3, ip
 800362a:	2200      	movs	r2, #0
 800362c:	5e9a      	ldrsh	r2, [r3, r2]
 800362e:	23fa      	movs	r3, #250	; 0xfa
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	429a      	cmp	r2, r3
 8003634:	db87      	blt.n	8003546 <ICM_GyroCalibration+0xbe>
	}

	gyro_bias[0] =  -1*gyro_accumulated[0] / GYRO_CALIBRATION_SAMPLES;
 8003636:	2510      	movs	r5, #16
 8003638:	2608      	movs	r6, #8
 800363a:	2308      	movs	r3, #8
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	199b      	adds	r3, r3, r6
 8003640:	195b      	adds	r3, r3, r5
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	0612      	lsls	r2, r2, #24
 8003648:	4053      	eors	r3, r2
 800364a:	493b      	ldr	r1, [pc, #236]	; (8003738 <ICM_GyroCalibration+0x2b0>)
 800364c:	1c18      	adds	r0, r3, #0
 800364e:	f7fd f8c3 	bl	80007d8 <__aeabi_fdiv>
 8003652:	1c03      	adds	r3, r0, #0
 8003654:	1c1a      	adds	r2, r3, #0
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	601a      	str	r2, [r3, #0]
	gyro_bias[1] =  -1*gyro_accumulated[1] / GYRO_CALIBRATION_SAMPLES;
 800365a:	2308      	movs	r3, #8
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	199b      	adds	r3, r3, r6
 8003660:	195b      	adds	r3, r3, r5
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	0612      	lsls	r2, r2, #24
 8003668:	405a      	eors	r2, r3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	1d1c      	adds	r4, r3, #4
 800366e:	4932      	ldr	r1, [pc, #200]	; (8003738 <ICM_GyroCalibration+0x2b0>)
 8003670:	1c10      	adds	r0, r2, #0
 8003672:	f7fd f8b1 	bl	80007d8 <__aeabi_fdiv>
 8003676:	1c03      	adds	r3, r0, #0
 8003678:	6023      	str	r3, [r4, #0]
	gyro_bias[2] =  -1*gyro_accumulated[2] / GYRO_CALIBRATION_SAMPLES;
 800367a:	2308      	movs	r3, #8
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	199b      	adds	r3, r3, r6
 8003680:	195b      	adds	r3, r3, r5
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2280      	movs	r2, #128	; 0x80
 8003686:	0612      	lsls	r2, r2, #24
 8003688:	405a      	eors	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	3308      	adds	r3, #8
 800368e:	001c      	movs	r4, r3
 8003690:	4929      	ldr	r1, [pc, #164]	; (8003738 <ICM_GyroCalibration+0x2b0>)
 8003692:	1c10      	adds	r0, r2, #0
 8003694:	f7fd f8a0 	bl	80007d8 <__aeabi_fdiv>
 8003698:	1c03      	adds	r3, r0, #0
 800369a:	6023      	str	r3, [r4, #0]

	sprintf(uart_buffer,
 800369c:	230b      	movs	r3, #11
 800369e:	2208      	movs	r2, #8
 80036a0:	4694      	mov	ip, r2
 80036a2:	44bc      	add	ip, r7
 80036a4:	4463      	add	r3, ip
 80036a6:	781e      	ldrb	r6, [r3, #0]
					"SLAVE %i: Calibrating Gyroscope:"
					"Gyro x-offset: %.5f | Gyro y-offset: %.5f | Gyro z-offset: %.5f"
					"\r\n",
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 80036ac:	1c18      	adds	r0, r3, #0
 80036ae:	f7ff fadf 	bl	8002c70 <__aeabi_f2d>
 80036b2:	0004      	movs	r4, r0
 80036b4:	000d      	movs	r5, r1
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	3304      	adds	r3, #4
 80036ba:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 80036bc:	1c18      	adds	r0, r3, #0
 80036be:	f7ff fad7 	bl	8002c70 <__aeabi_f2d>
 80036c2:	60b8      	str	r0, [r7, #8]
 80036c4:	60f9      	str	r1, [r7, #12]
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3308      	adds	r3, #8
 80036ca:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 80036cc:	1c18      	adds	r0, r3, #0
 80036ce:	f7ff facf 	bl	8002c70 <__aeabi_f2d>
 80036d2:	6038      	str	r0, [r7, #0]
 80036d4:	6079      	str	r1, [r7, #4]
 80036d6:	4919      	ldr	r1, [pc, #100]	; (800373c <ICM_GyroCalibration+0x2b4>)
 80036d8:	2034      	movs	r0, #52	; 0x34
 80036da:	2308      	movs	r3, #8
 80036dc:	469c      	mov	ip, r3
 80036de:	2308      	movs	r3, #8
 80036e0:	4698      	mov	r8, r3
 80036e2:	44b8      	add	r8, r7
 80036e4:	44c4      	add	ip, r8
 80036e6:	4460      	add	r0, ip
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	9204      	str	r2, [sp, #16]
 80036ee:	9305      	str	r3, [sp, #20]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	9202      	str	r2, [sp, #8]
 80036f6:	9303      	str	r3, [sp, #12]
 80036f8:	9400      	str	r4, [sp, #0]
 80036fa:	9501      	str	r5, [sp, #4]
 80036fc:	0032      	movs	r2, r6
 80036fe:	f005 ff41 	bl	8009584 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*) uart_buffer ,strlen(uart_buffer),1000);
 8003702:	2434      	movs	r4, #52	; 0x34
 8003704:	2608      	movs	r6, #8
 8003706:	2308      	movs	r3, #8
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	199b      	adds	r3, r3, r6
 800370c:	191b      	adds	r3, r3, r4
 800370e:	0018      	movs	r0, r3
 8003710:	f7fc fcf6 	bl	8000100 <strlen>
 8003714:	0003      	movs	r3, r0
 8003716:	b29a      	uxth	r2, r3
 8003718:	23fa      	movs	r3, #250	; 0xfa
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	2108      	movs	r1, #8
 800371e:	1879      	adds	r1, r7, r1
 8003720:	1989      	adds	r1, r1, r6
 8003722:	1909      	adds	r1, r1, r4
 8003724:	69b8      	ldr	r0, [r7, #24]
 8003726:	f004 fd4f 	bl	80081c8 <HAL_UART_Transmit>
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b044      	add	sp, #272	; 0x110
 8003730:	bc80      	pop	{r7}
 8003732:	46b8      	mov	r8, r7
 8003734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	43fa0000 	.word	0x43fa0000
 800373c:	0800de78 	.word	0x0800de78

08003740 <ICM_AccCalibration>:
					acc_bias[0], acc_bias[1], acc_bias[2]);
	HAL_UART_Transmit(huart, (uint8_t*)uart_buffer ,strlen(uart_buffer),1000);
}
**/

void ICM_AccCalibration(SPI_HandleTypeDef *hspi, UART_HandleTypeDef* huart, float *acc_bias, uint8_t index){
 8003740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003742:	b0c7      	sub	sp, #284	; 0x11c
 8003744:	af04      	add	r7, sp, #16
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	001a      	movs	r2, r3
 800374e:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <ICM_AccCalibration+0x1a0>)
 8003750:	2184      	movs	r1, #132	; 0x84
 8003752:	0049      	lsls	r1, r1, #1
 8003754:	468c      	mov	ip, r1
 8003756:	44bc      	add	ip, r7
 8003758:	4463      	add	r3, ip
 800375a:	701a      	strb	r2, [r3, #0]

	char uart_buffer[200];
	float acc_data[3] = {0,0,0};
 800375c:	2128      	movs	r1, #40	; 0x28
 800375e:	187b      	adds	r3, r7, r1
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	187b      	adds	r3, r7, r1
 8003766:	2200      	movs	r2, #0
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	187b      	adds	r3, r7, r1
 800376c:	2200      	movs	r2, #0
 800376e:	609a      	str	r2, [r3, #8]
	float acc_angle[2] = {0,0};
 8003770:	2120      	movs	r1, #32
 8003772:	187b      	adds	r3, r7, r1
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	187b      	adds	r3, r7, r1
 800377a:	2200      	movs	r2, #0
 800377c:	605a      	str	r2, [r3, #4]
	struct euler_angles temp = {0,0,0};
 800377e:	2114      	movs	r1, #20
 8003780:	187b      	adds	r3, r7, r1
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	187b      	adds	r3, r7, r1
 8003788:	2200      	movs	r2, #0
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	187b      	adds	r3, r7, r1
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]

	ICM_SelectBank(hspi,USER_BANK_0, index);
 8003792:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <ICM_AccCalibration+0x1a0>)
 8003794:	2284      	movs	r2, #132	; 0x84
 8003796:	0052      	lsls	r2, r2, #1
 8003798:	4694      	mov	ip, r2
 800379a:	44bc      	add	ip, r7
 800379c:	4463      	add	r3, ip
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2100      	movs	r1, #0
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7ff fc4a 	bl	800303e <ICM_SelectBank>
	for (int16_t i = 0; i < 500; i++)
 80037aa:	1dfb      	adds	r3, r7, #7
 80037ac:	33ff      	adds	r3, #255	; 0xff
 80037ae:	2200      	movs	r2, #0
 80037b0:	801a      	strh	r2, [r3, #0]
 80037b2:	e039      	b.n	8003828 <ICM_AccCalibration+0xe8>
	{
		ICM_ReadAccData(hspi, acc_data, index);
 80037b4:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <ICM_AccCalibration+0x1a0>)
 80037b6:	2284      	movs	r2, #132	; 0x84
 80037b8:	0052      	lsls	r2, r2, #1
 80037ba:	4694      	mov	ip, r2
 80037bc:	44bc      	add	ip, r7
 80037be:	4463      	add	r3, ip
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	2428      	movs	r4, #40	; 0x28
 80037c4:	1939      	adds	r1, r7, r4
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f000 f94d 	bl	8003a68 <ICM_ReadAccData>
		CalcAccLinearToEuler(acc_data, &temp);
 80037ce:	2514      	movs	r5, #20
 80037d0:	197a      	adds	r2, r7, r5
 80037d2:	193b      	adds	r3, r7, r4
 80037d4:	0011      	movs	r1, r2
 80037d6:	0018      	movs	r0, r3
 80037d8:	f000 fabc 	bl	8003d54 <CalcAccLinearToEuler>
		acc_angle[0] += temp.roll;
 80037dc:	2420      	movs	r4, #32
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	197b      	adds	r3, r7, r5
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	1c19      	adds	r1, r3, #0
 80037e8:	1c10      	adds	r0, r2, #0
 80037ea:	f7fc fe59 	bl	80004a0 <__aeabi_fadd>
 80037ee:	1c03      	adds	r3, r0, #0
 80037f0:	1c1a      	adds	r2, r3, #0
 80037f2:	193b      	adds	r3, r7, r4
 80037f4:	601a      	str	r2, [r3, #0]
		acc_angle[1] += temp.pitch;
 80037f6:	193b      	adds	r3, r7, r4
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	197b      	adds	r3, r7, r5
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	1c19      	adds	r1, r3, #0
 8003800:	1c10      	adds	r0, r2, #0
 8003802:	f7fc fe4d 	bl	80004a0 <__aeabi_fadd>
 8003806:	1c03      	adds	r3, r0, #0
 8003808:	1c1a      	adds	r2, r3, #0
 800380a:	193b      	adds	r3, r7, r4
 800380c:	605a      	str	r2, [r3, #4]
		HAL_Delay(10);
 800380e:	200a      	movs	r0, #10
 8003810:	f002 f938 	bl	8005a84 <HAL_Delay>
	for (int16_t i = 0; i < 500; i++)
 8003814:	1dfb      	adds	r3, r7, #7
 8003816:	33ff      	adds	r3, #255	; 0xff
 8003818:	2200      	movs	r2, #0
 800381a:	5e9b      	ldrsh	r3, [r3, r2]
 800381c:	b29b      	uxth	r3, r3
 800381e:	3301      	adds	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	1dfb      	adds	r3, r7, #7
 8003824:	33ff      	adds	r3, #255	; 0xff
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	1dfb      	adds	r3, r7, #7
 800382a:	33ff      	adds	r3, #255	; 0xff
 800382c:	2200      	movs	r2, #0
 800382e:	5e9a      	ldrsh	r2, [r3, r2]
 8003830:	23fa      	movs	r3, #250	; 0xfa
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	429a      	cmp	r2, r3
 8003836:	dbbd      	blt.n	80037b4 <ICM_AccCalibration+0x74>
	}

	float temp1 =  (acc_angle[0] / 500.0);
 8003838:	2420      	movs	r4, #32
 800383a:	193b      	adds	r3, r7, r4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4929      	ldr	r1, [pc, #164]	; (80038e4 <ICM_AccCalibration+0x1a4>)
 8003840:	1c18      	adds	r0, r3, #0
 8003842:	f7fc ffc9 	bl	80007d8 <__aeabi_fdiv>
 8003846:	1c03      	adds	r3, r0, #0
 8003848:	1c7a      	adds	r2, r7, #1
 800384a:	32ff      	adds	r2, #255	; 0xff
 800384c:	6013      	str	r3, [r2, #0]
	float temp2 =  -(acc_angle[1] / 500.0);
 800384e:	193b      	adds	r3, r7, r4
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4924      	ldr	r1, [pc, #144]	; (80038e4 <ICM_AccCalibration+0x1a4>)
 8003854:	1c18      	adds	r0, r3, #0
 8003856:	f7fc ffbf 	bl	80007d8 <__aeabi_fdiv>
 800385a:	1c03      	adds	r3, r0, #0
 800385c:	1c1a      	adds	r2, r3, #0
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	061b      	lsls	r3, r3, #24
 8003862:	4053      	eors	r3, r2
 8003864:	21fc      	movs	r1, #252	; 0xfc
 8003866:	187a      	adds	r2, r7, r1
 8003868:	6013      	str	r3, [r2, #0]

	acc_bias[0] = temp1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	1c7a      	adds	r2, r7, #1
 800386e:	32ff      	adds	r2, #255	; 0xff
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	601a      	str	r2, [r3, #0]
	acc_bias[1] = temp2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	187a      	adds	r2, r7, r1
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	601a      	str	r2, [r3, #0]

	sprintf(uart_buffer,
 800387e:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <ICM_AccCalibration+0x1a0>)
 8003880:	2284      	movs	r2, #132	; 0x84
 8003882:	0052      	lsls	r2, r2, #1
 8003884:	4694      	mov	ip, r2
 8003886:	44bc      	add	ip, r7
 8003888:	4463      	add	r3, ip
 800388a:	781e      	ldrb	r6, [r3, #0]
 800388c:	1c7b      	adds	r3, r7, #1
 800388e:	33ff      	adds	r3, #255	; 0xff
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	f7ff f9ed 	bl	8002c70 <__aeabi_f2d>
 8003896:	0004      	movs	r4, r0
 8003898:	000d      	movs	r5, r1
 800389a:	21fc      	movs	r1, #252	; 0xfc
 800389c:	187b      	adds	r3, r7, r1
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	f7ff f9e6 	bl	8002c70 <__aeabi_f2d>
 80038a4:	0002      	movs	r2, r0
 80038a6:	000b      	movs	r3, r1
 80038a8:	490f      	ldr	r1, [pc, #60]	; (80038e8 <ICM_AccCalibration+0x1a8>)
 80038aa:	2034      	movs	r0, #52	; 0x34
 80038ac:	1838      	adds	r0, r7, r0
 80038ae:	9202      	str	r2, [sp, #8]
 80038b0:	9303      	str	r3, [sp, #12]
 80038b2:	9400      	str	r4, [sp, #0]
 80038b4:	9501      	str	r5, [sp, #4]
 80038b6:	0032      	movs	r2, r6
 80038b8:	f005 fe64 	bl	8009584 <siprintf>
		  "SLAVE %i: Accelerometer Calibration Succes: "
		  "Pitch: %.3f, Roll: %.3f \r\n",
		  index, temp1, temp2);
	HAL_UART_Transmit(huart,(uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80038bc:	2434      	movs	r4, #52	; 0x34
 80038be:	193b      	adds	r3, r7, r4
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7fc fc1d 	bl	8000100 <strlen>
 80038c6:	0003      	movs	r3, r0
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	23fa      	movs	r3, #250	; 0xfa
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	1939      	adds	r1, r7, r4
 80038d0:	68b8      	ldr	r0, [r7, #8]
 80038d2:	f004 fc79 	bl	80081c8 <HAL_UART_Transmit>
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b043      	add	sp, #268	; 0x10c
 80038dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	fffffefb 	.word	0xfffffefb
 80038e4:	43fa0000 	.word	0x43fa0000
 80038e8:	0800dedc 	.word	0x0800dedc

080038ec <ICM_ReadGyroData>:


void ICM_ReadGyroData(SPI_HandleTypeDef *hspi, float* gyro_data, float *gyro_bias, uint8_t index)
{
 80038ec:	b5b0      	push	{r4, r5, r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	001a      	movs	r2, r3
 80038fa:	1cfb      	adds	r3, r7, #3
 80038fc:	701a      	strb	r2, [r3, #0]
	uint8_t gyro_raw[6] = {0,0,0,0,0,0};
 80038fe:	2018      	movs	r0, #24
 8003900:	183b      	adds	r3, r7, r0
 8003902:	4a57      	ldr	r2, [pc, #348]	; (8003a60 <ICM_ReadGyroData+0x174>)
 8003904:	6811      	ldr	r1, [r2, #0]
 8003906:	6019      	str	r1, [r3, #0]
 8003908:	8892      	ldrh	r2, [r2, #4]
 800390a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_int[3] = {0,0,0};
 800390c:	2410      	movs	r4, #16
 800390e:	193b      	adds	r3, r7, r4
 8003910:	2200      	movs	r2, #0
 8003912:	801a      	strh	r2, [r3, #0]
 8003914:	193b      	adds	r3, r7, r4
 8003916:	2200      	movs	r2, #0
 8003918:	805a      	strh	r2, [r3, #2]
 800391a:	193b      	adds	r3, r7, r4
 800391c:	2200      	movs	r2, #0
 800391e:	809a      	strh	r2, [r3, #4]

	ICM_ReadBytes(hspi, REG_GYRO_XOUT_H, gyro_raw, 6, index);
 8003920:	0005      	movs	r5, r0
 8003922:	183a      	adds	r2, r7, r0
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	1cfb      	adds	r3, r7, #3
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2306      	movs	r3, #6
 800392e:	2133      	movs	r1, #51	; 0x33
 8003930:	f7ff fad4 	bl	8002edc <ICM_ReadBytes>
	UINT8_TO_INT16(gyro_int[0], gyro_raw[0], gyro_raw[1]);
 8003934:	0028      	movs	r0, r5
 8003936:	183b      	adds	r3, r7, r0
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b21a      	sxth	r2, r3
 800393c:	0021      	movs	r1, r4
 800393e:	187b      	adds	r3, r7, r1
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	187b      	adds	r3, r7, r1
 8003944:	2200      	movs	r2, #0
 8003946:	5e9b      	ldrsh	r3, [r3, r2]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	b21a      	sxth	r2, r3
 800394c:	187b      	adds	r3, r7, r1
 800394e:	801a      	strh	r2, [r3, #0]
 8003950:	187b      	adds	r3, r7, r1
 8003952:	2200      	movs	r2, #0
 8003954:	5e9a      	ldrsh	r2, [r3, r2]
 8003956:	183b      	adds	r3, r7, r0
 8003958:	785b      	ldrb	r3, [r3, #1]
 800395a:	b21b      	sxth	r3, r3
 800395c:	4313      	orrs	r3, r2
 800395e:	b21a      	sxth	r2, r3
 8003960:	187b      	adds	r3, r7, r1
 8003962:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro_int[1], gyro_raw[2], gyro_raw[3]);
 8003964:	183b      	adds	r3, r7, r0
 8003966:	789b      	ldrb	r3, [r3, #2]
 8003968:	b21a      	sxth	r2, r3
 800396a:	187b      	adds	r3, r7, r1
 800396c:	805a      	strh	r2, [r3, #2]
 800396e:	187b      	adds	r3, r7, r1
 8003970:	2202      	movs	r2, #2
 8003972:	5e9b      	ldrsh	r3, [r3, r2]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	b21a      	sxth	r2, r3
 8003978:	187b      	adds	r3, r7, r1
 800397a:	805a      	strh	r2, [r3, #2]
 800397c:	187b      	adds	r3, r7, r1
 800397e:	2202      	movs	r2, #2
 8003980:	5e9a      	ldrsh	r2, [r3, r2]
 8003982:	183b      	adds	r3, r7, r0
 8003984:	78db      	ldrb	r3, [r3, #3]
 8003986:	b21b      	sxth	r3, r3
 8003988:	4313      	orrs	r3, r2
 800398a:	b21a      	sxth	r2, r3
 800398c:	187b      	adds	r3, r7, r1
 800398e:	805a      	strh	r2, [r3, #2]
	UINT8_TO_INT16(gyro_int[2], gyro_raw[4], gyro_raw[5]);
 8003990:	183b      	adds	r3, r7, r0
 8003992:	791b      	ldrb	r3, [r3, #4]
 8003994:	b21a      	sxth	r2, r3
 8003996:	187b      	adds	r3, r7, r1
 8003998:	809a      	strh	r2, [r3, #4]
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2204      	movs	r2, #4
 800399e:	5e9b      	ldrsh	r3, [r3, r2]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	b21a      	sxth	r2, r3
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	809a      	strh	r2, [r3, #4]
 80039a8:	000d      	movs	r5, r1
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	2204      	movs	r2, #4
 80039ae:	5e9a      	ldrsh	r2, [r3, r2]
 80039b0:	183b      	adds	r3, r7, r0
 80039b2:	795b      	ldrb	r3, [r3, #5]
 80039b4:	b21b      	sxth	r3, r3
 80039b6:	4313      	orrs	r3, r2
 80039b8:	b21a      	sxth	r2, r3
 80039ba:	197b      	adds	r3, r7, r5
 80039bc:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (((float) gyro_int[0]  / g_gyro_scale_factor) + gyro_bias[0]);
 80039be:	197b      	adds	r3, r7, r5
 80039c0:	2200      	movs	r2, #0
 80039c2:	5e9b      	ldrsh	r3, [r3, r2]
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7fd faf5 	bl	8000fb4 <__aeabi_i2f>
 80039ca:	1c02      	adds	r2, r0, #0
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <ICM_ReadGyroData+0x178>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	1c19      	adds	r1, r3, #0
 80039d2:	1c10      	adds	r0, r2, #0
 80039d4:	f7fc ff00 	bl	80007d8 <__aeabi_fdiv>
 80039d8:	1c03      	adds	r3, r0, #0
 80039da:	1c1a      	adds	r2, r3, #0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	1c19      	adds	r1, r3, #0
 80039e2:	1c10      	adds	r0, r2, #0
 80039e4:	f7fc fd5c 	bl	80004a0 <__aeabi_fadd>
 80039e8:	1c03      	adds	r3, r0, #0
 80039ea:	1c1a      	adds	r2, r3, #0
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	601a      	str	r2, [r3, #0]
	gyro_data[1] = (((float) gyro_int[1]  / g_gyro_scale_factor) + gyro_bias[1]);
 80039f0:	197b      	adds	r3, r7, r5
 80039f2:	2202      	movs	r2, #2
 80039f4:	5e9b      	ldrsh	r3, [r3, r2]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7fd fadc 	bl	8000fb4 <__aeabi_i2f>
 80039fc:	1c02      	adds	r2, r0, #0
 80039fe:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <ICM_ReadGyroData+0x178>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	1c19      	adds	r1, r3, #0
 8003a04:	1c10      	adds	r0, r2, #0
 8003a06:	f7fc fee7 	bl	80007d8 <__aeabi_fdiv>
 8003a0a:	1c03      	adds	r3, r0, #0
 8003a0c:	1c18      	adds	r0, r3, #0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	1d1c      	adds	r4, r3, #4
 8003a18:	1c11      	adds	r1, r2, #0
 8003a1a:	f7fc fd41 	bl	80004a0 <__aeabi_fadd>
 8003a1e:	1c03      	adds	r3, r0, #0
 8003a20:	6023      	str	r3, [r4, #0]
	gyro_data[2] = (((float) gyro_int[2]  / g_gyro_scale_factor) + gyro_bias[2]);
 8003a22:	197b      	adds	r3, r7, r5
 8003a24:	2204      	movs	r2, #4
 8003a26:	5e9b      	ldrsh	r3, [r3, r2]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7fd fac3 	bl	8000fb4 <__aeabi_i2f>
 8003a2e:	1c02      	adds	r2, r0, #0
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <ICM_ReadGyroData+0x178>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	1c19      	adds	r1, r3, #0
 8003a36:	1c10      	adds	r0, r2, #0
 8003a38:	f7fc fece 	bl	80007d8 <__aeabi_fdiv>
 8003a3c:	1c03      	adds	r3, r0, #0
 8003a3e:	1c18      	adds	r0, r3, #0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3308      	adds	r3, #8
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3308      	adds	r3, #8
 8003a4a:	001c      	movs	r4, r3
 8003a4c:	1c11      	adds	r1, r2, #0
 8003a4e:	f7fc fd27 	bl	80004a0 <__aeabi_fadd>
 8003a52:	1c03      	adds	r3, r0, #0
 8003a54:	6023      	str	r3, [r4, #0]
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b008      	add	sp, #32
 8003a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	0800df24 	.word	0x0800df24
 8003a64:	2000039c 	.word	0x2000039c

08003a68 <ICM_ReadAccData>:


void ICM_ReadAccData(SPI_HandleTypeDef *hspi, float* accel_data, uint8_t index){
 8003a68:	b5b0      	push	{r4, r5, r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	1dfb      	adds	r3, r7, #7
 8003a74:	701a      	strb	r2, [r3, #0]

	uint8_t acc_data[6] = {0,0,0,0,0,0};
 8003a76:	2018      	movs	r0, #24
 8003a78:	183b      	adds	r3, r7, r0
 8003a7a:	4a49      	ldr	r2, [pc, #292]	; (8003ba0 <ICM_ReadAccData+0x138>)
 8003a7c:	6811      	ldr	r1, [r2, #0]
 8003a7e:	6019      	str	r1, [r3, #0]
 8003a80:	8892      	ldrh	r2, [r2, #4]
 8003a82:	809a      	strh	r2, [r3, #4]
	int16_t acc_int[3] = {0,0,0};
 8003a84:	2410      	movs	r4, #16
 8003a86:	193b      	adds	r3, r7, r4
 8003a88:	2200      	movs	r2, #0
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	193b      	adds	r3, r7, r4
 8003a8e:	2200      	movs	r2, #0
 8003a90:	805a      	strh	r2, [r3, #2]
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	2200      	movs	r2, #0
 8003a96:	809a      	strh	r2, [r3, #4]
	ICM_ReadBytes(hspi, REG_ACCEL_XOUT_H, acc_data, 6, index);
 8003a98:	0005      	movs	r5, r0
 8003a9a:	183a      	adds	r2, r7, r0
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	1dfb      	adds	r3, r7, #7
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	2306      	movs	r3, #6
 8003aa6:	212d      	movs	r1, #45	; 0x2d
 8003aa8:	f7ff fa18 	bl	8002edc <ICM_ReadBytes>

	UINT8_TO_INT16(acc_int[0],acc_data[0], acc_data[1]);
 8003aac:	0028      	movs	r0, r5
 8003aae:	183b      	adds	r3, r7, r0
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b21a      	sxth	r2, r3
 8003ab4:	0021      	movs	r1, r4
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	801a      	strh	r2, [r3, #0]
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	2200      	movs	r2, #0
 8003abe:	5e9b      	ldrsh	r3, [r3, r2]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	b21a      	sxth	r2, r3
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	801a      	strh	r2, [r3, #0]
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	2200      	movs	r2, #0
 8003acc:	5e9a      	ldrsh	r2, [r3, r2]
 8003ace:	183b      	adds	r3, r7, r0
 8003ad0:	785b      	ldrb	r3, [r3, #1]
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	b21a      	sxth	r2, r3
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(acc_int[1],acc_data[2], acc_data[3]);
 8003adc:	183b      	adds	r3, r7, r0
 8003ade:	789b      	ldrb	r3, [r3, #2]
 8003ae0:	b21a      	sxth	r2, r3
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	805a      	strh	r2, [r3, #2]
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2202      	movs	r2, #2
 8003aea:	5e9b      	ldrsh	r3, [r3, r2]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	b21a      	sxth	r2, r3
 8003af0:	187b      	adds	r3, r7, r1
 8003af2:	805a      	strh	r2, [r3, #2]
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	2202      	movs	r2, #2
 8003af8:	5e9a      	ldrsh	r2, [r3, r2]
 8003afa:	183b      	adds	r3, r7, r0
 8003afc:	78db      	ldrb	r3, [r3, #3]
 8003afe:	b21b      	sxth	r3, r3
 8003b00:	4313      	orrs	r3, r2
 8003b02:	b21a      	sxth	r2, r3
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	805a      	strh	r2, [r3, #2]
	UINT8_TO_INT16(acc_int[2],acc_data[4], acc_data[5]);
 8003b08:	183b      	adds	r3, r7, r0
 8003b0a:	791b      	ldrb	r3, [r3, #4]
 8003b0c:	b21a      	sxth	r2, r3
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	809a      	strh	r2, [r3, #4]
 8003b12:	187b      	adds	r3, r7, r1
 8003b14:	2204      	movs	r2, #4
 8003b16:	5e9b      	ldrsh	r3, [r3, r2]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	b21a      	sxth	r2, r3
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	809a      	strh	r2, [r3, #4]
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	2204      	movs	r2, #4
 8003b24:	5e9a      	ldrsh	r2, [r3, r2]
 8003b26:	183b      	adds	r3, r7, r0
 8003b28:	795b      	ldrb	r3, [r3, #5]
 8003b2a:	b21b      	sxth	r3, r3
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	b21a      	sxth	r2, r3
 8003b30:	000d      	movs	r5, r1
 8003b32:	197b      	adds	r3, r7, r5
 8003b34:	809a      	strh	r2, [r3, #4]

	accel_data[0] = (float)acc_int[0] / acc_scale_factor;
 8003b36:	197b      	adds	r3, r7, r5
 8003b38:	2200      	movs	r2, #0
 8003b3a:	5e9b      	ldrsh	r3, [r3, r2]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7fd fa39 	bl	8000fb4 <__aeabi_i2f>
 8003b42:	1c02      	adds	r2, r0, #0
 8003b44:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <ICM_ReadAccData+0x13c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	1c19      	adds	r1, r3, #0
 8003b4a:	1c10      	adds	r0, r2, #0
 8003b4c:	f7fc fe44 	bl	80007d8 <__aeabi_fdiv>
 8003b50:	1c03      	adds	r3, r0, #0
 8003b52:	1c1a      	adds	r2, r3, #0
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	601a      	str	r2, [r3, #0]
	accel_data[1] = (float)acc_int[1] / acc_scale_factor;
 8003b58:	197b      	adds	r3, r7, r5
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	5e9b      	ldrsh	r3, [r3, r2]
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f7fd fa28 	bl	8000fb4 <__aeabi_i2f>
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <ICM_ReadAccData+0x13c>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1d1c      	adds	r4, r3, #4
 8003b6c:	1c11      	adds	r1, r2, #0
 8003b6e:	f7fc fe33 	bl	80007d8 <__aeabi_fdiv>
 8003b72:	1c03      	adds	r3, r0, #0
 8003b74:	6023      	str	r3, [r4, #0]
	accel_data[2] = (float)acc_int[2] / acc_scale_factor;
 8003b76:	197b      	adds	r3, r7, r5
 8003b78:	2204      	movs	r2, #4
 8003b7a:	5e9b      	ldrsh	r3, [r3, r2]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7fd fa19 	bl	8000fb4 <__aeabi_i2f>
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <ICM_ReadAccData+0x13c>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	3308      	adds	r3, #8
 8003b8a:	001c      	movs	r4, r3
 8003b8c:	1c11      	adds	r1, r2, #0
 8003b8e:	f7fc fe23 	bl	80007d8 <__aeabi_fdiv>
 8003b92:	1c03      	adds	r3, r0, #0
 8003b94:	6023      	str	r3, [r4, #0]
}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b008      	add	sp, #32
 8003b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	0800df24 	.word	0x0800df24
 8003ba4:	20000334 	.word	0x20000334

08003ba8 <ICM_AccConfig>:

/*configure accelerometer sensitivity and scaler**/
uint8_t ICM_AccConfig(SPI_HandleTypeDef *hspi, uint8_t sensitivity, uint8_t index){
 8003ba8:	b5b0      	push	{r4, r5, r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	0008      	movs	r0, r1
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	1cfb      	adds	r3, r7, #3
 8003bb6:	1c02      	adds	r2, r0, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	1cbb      	adds	r3, r7, #2
 8003bbc:	1c0a      	adds	r2, r1, #0
 8003bbe:	701a      	strb	r2, [r3, #0]

	ICM_SelectBank(hspi,USER_BANK_2, index);
 8003bc0:	1cbb      	adds	r3, r7, #2
 8003bc2:	781a      	ldrb	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7ff fa38 	bl	800303e <ICM_SelectBank>
	uint8_t config_byte_acc;
	uint8_t config2 = 0;
 8003bce:	200e      	movs	r0, #14
 8003bd0:	183b      	adds	r3, r7, r0
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_ACCEL_CONFIG_2, (uint8_t)config2, index);
 8003bd6:	1cbb      	adds	r3, r7, #2
 8003bd8:	7819      	ldrb	r1, [r3, #0]
 8003bda:	183b      	adds	r3, r7, r0
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	000b      	movs	r3, r1
 8003be2:	2115      	movs	r1, #21
 8003be4:	f7ff f9f8 	bl	8002fd8 <ICM_WriteOneByte>

	switch(sensitivity){
 8003be8:	1cfb      	adds	r3, r7, #3
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d03e      	beq.n	8003c6e <ICM_AccConfig+0xc6>
 8003bf0:	dc4f      	bgt.n	8003c92 <ICM_AccConfig+0xea>
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d029      	beq.n	8003c4a <ICM_AccConfig+0xa2>
 8003bf6:	dc4c      	bgt.n	8003c92 <ICM_AccConfig+0xea>
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d002      	beq.n	8003c02 <ICM_AccConfig+0x5a>
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d012      	beq.n	8003c26 <ICM_AccConfig+0x7e>
 8003c00:	e047      	b.n	8003c92 <ICM_AccConfig+0xea>
	case 2:
		config_byte_acc = ACCEL_CONFIG_2G | ACC_FILTER;
 8003c02:	200f      	movs	r0, #15
 8003c04:	183b      	adds	r3, r7, r0
 8003c06:	2231      	movs	r2, #49	; 0x31
 8003c08:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_2G;
 8003c0a:	4b42      	ldr	r3, [pc, #264]	; (8003d14 <ICM_AccConfig+0x16c>)
 8003c0c:	228d      	movs	r2, #141	; 0x8d
 8003c0e:	05d2      	lsls	r2, r2, #23
 8003c10:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003c12:	1cbb      	adds	r3, r7, #2
 8003c14:	7819      	ldrb	r1, [r3, #0]
 8003c16:	183b      	adds	r3, r7, r0
 8003c18:	781a      	ldrb	r2, [r3, #0]
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	000b      	movs	r3, r1
 8003c1e:	2114      	movs	r1, #20
 8003c20:	f7ff f9da 	bl	8002fd8 <ICM_WriteOneByte>
	break;
 8003c24:	e046      	b.n	8003cb4 <ICM_AccConfig+0x10c>
	case 4:
		config_byte_acc = ACCEL_CONFIG_4G | ACC_FILTER;
 8003c26:	200f      	movs	r0, #15
 8003c28:	183b      	adds	r3, r7, r0
 8003c2a:	2233      	movs	r2, #51	; 0x33
 8003c2c:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_4G;
 8003c2e:	4b39      	ldr	r3, [pc, #228]	; (8003d14 <ICM_AccConfig+0x16c>)
 8003c30:	228c      	movs	r2, #140	; 0x8c
 8003c32:	05d2      	lsls	r2, r2, #23
 8003c34:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003c36:	1cbb      	adds	r3, r7, #2
 8003c38:	7819      	ldrb	r1, [r3, #0]
 8003c3a:	183b      	adds	r3, r7, r0
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	000b      	movs	r3, r1
 8003c42:	2114      	movs	r1, #20
 8003c44:	f7ff f9c8 	bl	8002fd8 <ICM_WriteOneByte>
	break;
 8003c48:	e034      	b.n	8003cb4 <ICM_AccConfig+0x10c>
	case 8:
		config_byte_acc = ACCEL_CONFIG_8G | ACC_FILTER;
 8003c4a:	200f      	movs	r0, #15
 8003c4c:	183b      	adds	r3, r7, r0
 8003c4e:	2235      	movs	r2, #53	; 0x35
 8003c50:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_8G;
 8003c52:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <ICM_AccConfig+0x16c>)
 8003c54:	228b      	movs	r2, #139	; 0x8b
 8003c56:	05d2      	lsls	r2, r2, #23
 8003c58:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003c5a:	1cbb      	adds	r3, r7, #2
 8003c5c:	7819      	ldrb	r1, [r3, #0]
 8003c5e:	183b      	adds	r3, r7, r0
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	000b      	movs	r3, r1
 8003c66:	2114      	movs	r1, #20
 8003c68:	f7ff f9b6 	bl	8002fd8 <ICM_WriteOneByte>
	break;
 8003c6c:	e022      	b.n	8003cb4 <ICM_AccConfig+0x10c>
	case 16:
		config_byte_acc = ACCEL_CONFIG_16G | ACC_FILTER;
 8003c6e:	200f      	movs	r0, #15
 8003c70:	183b      	adds	r3, r7, r0
 8003c72:	2237      	movs	r2, #55	; 0x37
 8003c74:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_16G;
 8003c76:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <ICM_AccConfig+0x16c>)
 8003c78:	228a      	movs	r2, #138	; 0x8a
 8003c7a:	05d2      	lsls	r2, r2, #23
 8003c7c:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003c7e:	1cbb      	adds	r3, r7, #2
 8003c80:	7819      	ldrb	r1, [r3, #0]
 8003c82:	183b      	adds	r3, r7, r0
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	000b      	movs	r3, r1
 8003c8a:	2114      	movs	r1, #20
 8003c8c:	f7ff f9a4 	bl	8002fd8 <ICM_WriteOneByte>
	break;
 8003c90:	e010      	b.n	8003cb4 <ICM_AccConfig+0x10c>
	default:
		config_byte_acc = ACCEL_CONFIG_2G | ACC_FILTER;
 8003c92:	200f      	movs	r0, #15
 8003c94:	183b      	adds	r3, r7, r0
 8003c96:	2231      	movs	r2, #49	; 0x31
 8003c98:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_2G;
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <ICM_AccConfig+0x16c>)
 8003c9c:	228d      	movs	r2, #141	; 0x8d
 8003c9e:	05d2      	lsls	r2, r2, #23
 8003ca0:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003ca2:	1cbb      	adds	r3, r7, #2
 8003ca4:	7819      	ldrb	r1, [r3, #0]
 8003ca6:	183b      	adds	r3, r7, r0
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	000b      	movs	r3, r1
 8003cae:	2114      	movs	r1, #20
 8003cb0:	f7ff f992 	bl	8002fd8 <ICM_WriteOneByte>
	}

	HAL_Delay(20);
 8003cb4:	2014      	movs	r0, #20
 8003cb6:	f001 fee5 	bl	8005a84 <HAL_Delay>

	uint8_t test1 = 0;
 8003cba:	210d      	movs	r1, #13
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
	uint8_t test2 = 0;
 8003cc2:	250c      	movs	r5, #12
 8003cc4:	197b      	adds	r3, r7, r5
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]

	ICM_ReadOneByte(hspi, REG_ACCEL_CONFIG, &test1, index);
 8003cca:	1cbb      	adds	r3, r7, #2
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	000c      	movs	r4, r1
 8003cd0:	187a      	adds	r2, r7, r1
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	2114      	movs	r1, #20
 8003cd6:	f7ff f93b 	bl	8002f50 <ICM_ReadOneByte>
	ICM_ReadOneByte(hspi, REG_ACCEL_CONFIG_2, &test2, index);
 8003cda:	1cbb      	adds	r3, r7, #2
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	197a      	adds	r2, r7, r5
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	2115      	movs	r1, #21
 8003ce4:	f7ff f934 	bl	8002f50 <ICM_ReadOneByte>

	if((test1 != config_byte_acc) || (test2 != config2)){
 8003ce8:	193b      	adds	r3, r7, r4
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	220f      	movs	r2, #15
 8003cee:	18ba      	adds	r2, r7, r2
 8003cf0:	7812      	ldrb	r2, [r2, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d106      	bne.n	8003d04 <ICM_AccConfig+0x15c>
 8003cf6:	197b      	adds	r3, r7, r5
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	220e      	movs	r2, #14
 8003cfc:	18ba      	adds	r2, r7, r2
 8003cfe:	7812      	ldrb	r2, [r2, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <ICM_AccConfig+0x160>
		return 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <ICM_AccConfig+0x162>
	}else{
		return 1;
 8003d08:	2301      	movs	r3, #1
	}

}
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b004      	add	sp, #16
 8003d10:	bdb0      	pop	{r4, r5, r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	20000334 	.word	0x20000334

08003d18 <ICM_WHOAMI>:

uint8_t ICM_WHOAMI(SPI_HandleTypeDef *hspi, uint8_t index) {
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	000a      	movs	r2, r1
 8003d22:	1cfb      	adds	r3, r7, #3
 8003d24:	701a      	strb	r2, [r3, #0]
	uint8_t test = 0x00;
 8003d26:	210f      	movs	r1, #15
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
	ICM_ReadOneByte(hspi, REG_WHO_AM_I , &test, index);
 8003d2e:	1cfb      	adds	r3, r7, #3
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	000c      	movs	r4, r1
 8003d34:	187a      	adds	r2, r7, r1
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	2100      	movs	r1, #0
 8003d3a:	f7ff f909 	bl	8002f50 <ICM_ReadOneByte>
	if (test != REG_WHO_AM_I_CONST)
 8003d3e:	193b      	adds	r3, r7, r4
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2bea      	cmp	r3, #234	; 0xea
 8003d44:	d001      	beq.n	8003d4a <ICM_WHOAMI+0x32>
	{
		return 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <ICM_WHOAMI+0x34>
	} else {
		return 1;
 8003d4a:	2301      	movs	r3, #1
	}
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b005      	add	sp, #20
 8003d52:	bd90      	pop	{r4, r7, pc}

08003d54 <CalcAccLinearToEuler>:
	eu_gyro_est->pitch += gyro_data[1]*SAMPLE_TIME_ICM/1000.0*RAD_2_DEG;
	eu_gyro_est->roll += gyro_data[0]*SAMPLE_TIME_ICM/1000.0*RAD_2_DEG;
}

void CalcAccLinearToEuler(float* accel_data, struct euler_angles* eu_acc_est)
{
 8003d54:	b5b0      	push	{r4, r5, r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
	float pitch = atan(accel_data[0]/accel_data[2])* RAD_2_DEG;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3308      	adds	r3, #8
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	1c19      	adds	r1, r3, #0
 8003d6a:	1c10      	adds	r0, r2, #0
 8003d6c:	f7fc fd34 	bl	80007d8 <__aeabi_fdiv>
 8003d70:	1c03      	adds	r3, r0, #0
 8003d72:	1c18      	adds	r0, r3, #0
 8003d74:	f7fe ff7c 	bl	8002c70 <__aeabi_f2d>
 8003d78:	0002      	movs	r2, r0
 8003d7a:	000b      	movs	r3, r1
 8003d7c:	0010      	movs	r0, r2
 8003d7e:	0019      	movs	r1, r3
 8003d80:	f007 fed2 	bl	800bb28 <atan>
 8003d84:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <CalcAccLinearToEuler+0xe4>)
 8003d86:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <CalcAccLinearToEuler+0xe8>)
 8003d88:	f7fe f8ca 	bl	8001f20 <__aeabi_dmul>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	000b      	movs	r3, r1
 8003d90:	0010      	movs	r0, r2
 8003d92:	0019      	movs	r1, r3
 8003d94:	f7fe ffb4 	bl	8002d00 <__aeabi_d2f>
 8003d98:	1c03      	adds	r3, r0, #0
 8003d9a:	617b      	str	r3, [r7, #20]
	float roll = atan(accel_data[1]/sqrt(pow(accel_data[0],2) + pow(accel_data[2],2))) * RAD_2_DEG;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	1c18      	adds	r0, r3, #0
 8003da4:	f7fe ff64 	bl	8002c70 <__aeabi_f2d>
 8003da8:	0004      	movs	r4, r0
 8003daa:	000d      	movs	r5, r1
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1c18      	adds	r0, r3, #0
 8003db2:	f7fe ff5d 	bl	8002c70 <__aeabi_f2d>
 8003db6:	2200      	movs	r2, #0
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	05db      	lsls	r3, r3, #23
 8003dbc:	f008 f8c0 	bl	800bf40 <pow>
 8003dc0:	6038      	str	r0, [r7, #0]
 8003dc2:	6079      	str	r1, [r7, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	1c18      	adds	r0, r3, #0
 8003dcc:	f7fe ff50 	bl	8002c70 <__aeabi_f2d>
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	05db      	lsls	r3, r3, #23
 8003dd6:	f008 f8b3 	bl	800bf40 <pow>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	000b      	movs	r3, r1
 8003dde:	6838      	ldr	r0, [r7, #0]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	f7fd f92d 	bl	8001040 <__aeabi_dadd>
 8003de6:	0002      	movs	r2, r0
 8003de8:	000b      	movs	r3, r1
 8003dea:	0010      	movs	r0, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	f008 f95f 	bl	800c0b0 <sqrt>
 8003df2:	0002      	movs	r2, r0
 8003df4:	000b      	movs	r3, r1
 8003df6:	0020      	movs	r0, r4
 8003df8:	0029      	movs	r1, r5
 8003dfa:	f7fd fc8b 	bl	8001714 <__aeabi_ddiv>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	000b      	movs	r3, r1
 8003e02:	0010      	movs	r0, r2
 8003e04:	0019      	movs	r1, r3
 8003e06:	f007 fe8f 	bl	800bb28 <atan>
 8003e0a:	4a0b      	ldr	r2, [pc, #44]	; (8003e38 <CalcAccLinearToEuler+0xe4>)
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <CalcAccLinearToEuler+0xe8>)
 8003e0e:	f7fe f887 	bl	8001f20 <__aeabi_dmul>
 8003e12:	0002      	movs	r2, r0
 8003e14:	000b      	movs	r3, r1
 8003e16:	0010      	movs	r0, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	f7fe ff71 	bl	8002d00 <__aeabi_d2f>
 8003e1e:	1c03      	adds	r3, r0, #0
 8003e20:	613b      	str	r3, [r7, #16]

	eu_acc_est->roll = roll;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	601a      	str	r2, [r3, #0]
	eu_acc_est->pitch = pitch;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	605a      	str	r2, [r3, #4]
}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b006      	add	sp, #24
 8003e34:	bdb0      	pop	{r4, r5, r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	1a63c1f8 	.word	0x1a63c1f8
 8003e3c:	404ca5dc 	.word	0x404ca5dc

08003e40 <GyroLowPassFilter>:
	q->q3 = q2;
	q->q4 = q3;
}

void GyroLowPassFilter(float *gyro_data, float* prev_filt, float* filt, float a)
{
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
	// Calculating new high-pass filtered data
	filt[0] = prev_filt[0] + a*(gyro_data[0] - prev_filt[0]);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	681c      	ldr	r4, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	1c19      	adds	r1, r3, #0
 8003e5c:	1c10      	adds	r0, r2, #0
 8003e5e:	f7fc fee1 	bl	8000c24 <__aeabi_fsub>
 8003e62:	1c03      	adds	r3, r0, #0
 8003e64:	6839      	ldr	r1, [r7, #0]
 8003e66:	1c18      	adds	r0, r3, #0
 8003e68:	f7fc fdc2 	bl	80009f0 <__aeabi_fmul>
 8003e6c:	1c03      	adds	r3, r0, #0
 8003e6e:	1c19      	adds	r1, r3, #0
 8003e70:	1c20      	adds	r0, r4, #0
 8003e72:	f7fc fb15 	bl	80004a0 <__aeabi_fadd>
 8003e76:	1c03      	adds	r3, r0, #0
 8003e78:	1c1a      	adds	r2, r3, #0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	601a      	str	r2, [r3, #0]
	filt[1] = prev_filt[1] + a*(gyro_data[1] - prev_filt[1]);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3304      	adds	r3, #4
 8003e82:	681d      	ldr	r5, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3304      	adds	r3, #4
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	1c19      	adds	r1, r3, #0
 8003e92:	1c10      	adds	r0, r2, #0
 8003e94:	f7fc fec6 	bl	8000c24 <__aeabi_fsub>
 8003e98:	1c03      	adds	r3, r0, #0
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	1c18      	adds	r0, r3, #0
 8003e9e:	f7fc fda7 	bl	80009f0 <__aeabi_fmul>
 8003ea2:	1c03      	adds	r3, r0, #0
 8003ea4:	1c1a      	adds	r2, r3, #0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	1d1c      	adds	r4, r3, #4
 8003eaa:	1c11      	adds	r1, r2, #0
 8003eac:	1c28      	adds	r0, r5, #0
 8003eae:	f7fc faf7 	bl	80004a0 <__aeabi_fadd>
 8003eb2:	1c03      	adds	r3, r0, #0
 8003eb4:	6023      	str	r3, [r4, #0]
	filt[2] = prev_filt[2] + a*(gyro_data[2] - prev_filt[2]);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	681d      	ldr	r5, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	1c19      	adds	r1, r3, #0
 8003eca:	1c10      	adds	r0, r2, #0
 8003ecc:	f7fc feaa 	bl	8000c24 <__aeabi_fsub>
 8003ed0:	1c03      	adds	r3, r0, #0
 8003ed2:	6839      	ldr	r1, [r7, #0]
 8003ed4:	1c18      	adds	r0, r3, #0
 8003ed6:	f7fc fd8b 	bl	80009f0 <__aeabi_fmul>
 8003eda:	1c03      	adds	r3, r0, #0
 8003edc:	1c1a      	adds	r2, r3, #0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	001c      	movs	r4, r3
 8003ee4:	1c11      	adds	r1, r2, #0
 8003ee6:	1c28      	adds	r0, r5, #0
 8003ee8:	f7fc fada 	bl	80004a0 <__aeabi_fadd>
 8003eec:	1c03      	adds	r3, r0, #0
 8003eee:	6023      	str	r3, [r4, #0]

	prev_filt[0] = filt[0];
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	601a      	str	r2, [r3, #0]
	prev_filt[1] = filt[1];
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	3304      	adds	r3, #4
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6852      	ldr	r2, [r2, #4]
 8003f00:	601a      	str	r2, [r3, #0]
	prev_filt[2] = filt[2];
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3308      	adds	r3, #8
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6892      	ldr	r2, [r2, #8]
 8003f0a:	601a      	str	r2, [r3, #0]
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b004      	add	sp, #16
 8003f12:	bdb0      	pop	{r4, r5, r7, pc}

08003f14 <CalculateRotationMatrix>:
	quad->q3 /= length;
	quad->q4 /= length;

}

void CalculateRotationMatrix(float* acc_bias, struct matrix *RotationMatrix){
 8003f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f16:	b0a7      	sub	sp, #156	; 0x9c
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
	struct matrix Roll;
	struct matrix Pitch;
	struct matrix Yaw;
	struct matrix YawTimesPitch;

	Roll.a11 = 1.0;
 8003f1e:	2474      	movs	r4, #116	; 0x74
 8003f20:	193b      	adds	r3, r7, r4
 8003f22:	22fe      	movs	r2, #254	; 0xfe
 8003f24:	0592      	lsls	r2, r2, #22
 8003f26:	601a      	str	r2, [r3, #0]
	Roll.a12 = 0.0;
 8003f28:	193b      	adds	r3, r7, r4
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	605a      	str	r2, [r3, #4]
	Roll.a13 = 0.0;
 8003f2e:	193b      	adds	r3, r7, r4
 8003f30:	2200      	movs	r2, #0
 8003f32:	609a      	str	r2, [r3, #8]
	Roll.a21 = 0.0;
 8003f34:	193b      	adds	r3, r7, r4
 8003f36:	2200      	movs	r2, #0
 8003f38:	60da      	str	r2, [r3, #12]
	Roll.a22= cos(acc_bias[0]*DEG_2_RAD);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	1c18      	adds	r0, r3, #0
 8003f40:	f7fe fe96 	bl	8002c70 <__aeabi_f2d>
 8003f44:	4afd      	ldr	r2, [pc, #1012]	; (800433c <CalculateRotationMatrix+0x428>)
 8003f46:	4bfe      	ldr	r3, [pc, #1016]	; (8004340 <CalculateRotationMatrix+0x42c>)
 8003f48:	f7fd ffea 	bl	8001f20 <__aeabi_dmul>
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	000b      	movs	r3, r1
 8003f50:	0010      	movs	r0, r2
 8003f52:	0019      	movs	r1, r3
 8003f54:	f007 ff68 	bl	800be28 <cos>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	000b      	movs	r3, r1
 8003f5c:	0010      	movs	r0, r2
 8003f5e:	0019      	movs	r1, r3
 8003f60:	f7fe fece 	bl	8002d00 <__aeabi_d2f>
 8003f64:	1c02      	adds	r2, r0, #0
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	611a      	str	r2, [r3, #16]
	Roll.a23 = -sin(acc_bias[0]*DEG_2_RAD);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	1c18      	adds	r0, r3, #0
 8003f70:	f7fe fe7e 	bl	8002c70 <__aeabi_f2d>
 8003f74:	4af1      	ldr	r2, [pc, #964]	; (800433c <CalculateRotationMatrix+0x428>)
 8003f76:	4bf2      	ldr	r3, [pc, #968]	; (8004340 <CalculateRotationMatrix+0x42c>)
 8003f78:	f7fd ffd2 	bl	8001f20 <__aeabi_dmul>
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	000b      	movs	r3, r1
 8003f80:	0010      	movs	r0, r2
 8003f82:	0019      	movs	r1, r3
 8003f84:	f007 ff96 	bl	800beb4 <sin>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	000b      	movs	r3, r1
 8003f8c:	0010      	movs	r0, r2
 8003f8e:	0019      	movs	r1, r3
 8003f90:	f7fe feb6 	bl	8002d00 <__aeabi_d2f>
 8003f94:	1c02      	adds	r2, r0, #0
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	061b      	lsls	r3, r3, #24
 8003f9a:	405a      	eors	r2, r3
 8003f9c:	0025      	movs	r5, r4
 8003f9e:	197b      	adds	r3, r7, r5
 8003fa0:	615a      	str	r2, [r3, #20]
	Roll.a31 = 0.0;
 8003fa2:	197b      	adds	r3, r7, r5
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
	Roll.a32 = sin(acc_bias[0]*DEG_2_RAD);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	1c18      	adds	r0, r3, #0
 8003fae:	f7fe fe5f 	bl	8002c70 <__aeabi_f2d>
 8003fb2:	4ae2      	ldr	r2, [pc, #904]	; (800433c <CalculateRotationMatrix+0x428>)
 8003fb4:	4be2      	ldr	r3, [pc, #904]	; (8004340 <CalculateRotationMatrix+0x42c>)
 8003fb6:	f7fd ffb3 	bl	8001f20 <__aeabi_dmul>
 8003fba:	0002      	movs	r2, r0
 8003fbc:	000b      	movs	r3, r1
 8003fbe:	0010      	movs	r0, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	f007 ff77 	bl	800beb4 <sin>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	000b      	movs	r3, r1
 8003fca:	0010      	movs	r0, r2
 8003fcc:	0019      	movs	r1, r3
 8003fce:	f7fe fe97 	bl	8002d00 <__aeabi_d2f>
 8003fd2:	1c02      	adds	r2, r0, #0
 8003fd4:	197b      	adds	r3, r7, r5
 8003fd6:	61da      	str	r2, [r3, #28]
	Roll.a33 = cos(acc_bias[0]*DEG_2_RAD);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	1c18      	adds	r0, r3, #0
 8003fde:	f7fe fe47 	bl	8002c70 <__aeabi_f2d>
 8003fe2:	4ad6      	ldr	r2, [pc, #856]	; (800433c <CalculateRotationMatrix+0x428>)
 8003fe4:	4bd6      	ldr	r3, [pc, #856]	; (8004340 <CalculateRotationMatrix+0x42c>)
 8003fe6:	f7fd ff9b 	bl	8001f20 <__aeabi_dmul>
 8003fea:	0002      	movs	r2, r0
 8003fec:	000b      	movs	r3, r1
 8003fee:	0010      	movs	r0, r2
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	f007 ff19 	bl	800be28 <cos>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	000b      	movs	r3, r1
 8003ffa:	0010      	movs	r0, r2
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	f7fe fe7f 	bl	8002d00 <__aeabi_d2f>
 8004002:	1c02      	adds	r2, r0, #0
 8004004:	197b      	adds	r3, r7, r5
 8004006:	621a      	str	r2, [r3, #32]

	Pitch.a11 = cos(acc_bias[1]*DEG_2_RAD);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	1c18      	adds	r0, r3, #0
 8004010:	f7fe fe2e 	bl	8002c70 <__aeabi_f2d>
 8004014:	4ac9      	ldr	r2, [pc, #804]	; (800433c <CalculateRotationMatrix+0x428>)
 8004016:	4bca      	ldr	r3, [pc, #808]	; (8004340 <CalculateRotationMatrix+0x42c>)
 8004018:	f7fd ff82 	bl	8001f20 <__aeabi_dmul>
 800401c:	0002      	movs	r2, r0
 800401e:	000b      	movs	r3, r1
 8004020:	0010      	movs	r0, r2
 8004022:	0019      	movs	r1, r3
 8004024:	f007 ff00 	bl	800be28 <cos>
 8004028:	0002      	movs	r2, r0
 800402a:	000b      	movs	r3, r1
 800402c:	0010      	movs	r0, r2
 800402e:	0019      	movs	r1, r3
 8004030:	f7fe fe66 	bl	8002d00 <__aeabi_d2f>
 8004034:	1c02      	adds	r2, r0, #0
 8004036:	2450      	movs	r4, #80	; 0x50
 8004038:	193b      	adds	r3, r7, r4
 800403a:	601a      	str	r2, [r3, #0]
	Pitch.a12 = 0.0;
 800403c:	193b      	adds	r3, r7, r4
 800403e:	2200      	movs	r2, #0
 8004040:	605a      	str	r2, [r3, #4]
	Pitch.a13 = sin(acc_bias[1]*DEG_2_RAD);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3304      	adds	r3, #4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	1c18      	adds	r0, r3, #0
 800404a:	f7fe fe11 	bl	8002c70 <__aeabi_f2d>
 800404e:	4abb      	ldr	r2, [pc, #748]	; (800433c <CalculateRotationMatrix+0x428>)
 8004050:	4bbb      	ldr	r3, [pc, #748]	; (8004340 <CalculateRotationMatrix+0x42c>)
 8004052:	f7fd ff65 	bl	8001f20 <__aeabi_dmul>
 8004056:	0002      	movs	r2, r0
 8004058:	000b      	movs	r3, r1
 800405a:	0010      	movs	r0, r2
 800405c:	0019      	movs	r1, r3
 800405e:	f007 ff29 	bl	800beb4 <sin>
 8004062:	0002      	movs	r2, r0
 8004064:	000b      	movs	r3, r1
 8004066:	0010      	movs	r0, r2
 8004068:	0019      	movs	r1, r3
 800406a:	f7fe fe49 	bl	8002d00 <__aeabi_d2f>
 800406e:	1c02      	adds	r2, r0, #0
 8004070:	193b      	adds	r3, r7, r4
 8004072:	609a      	str	r2, [r3, #8]
	Pitch.a21 = 0.0;
 8004074:	193b      	adds	r3, r7, r4
 8004076:	2200      	movs	r2, #0
 8004078:	60da      	str	r2, [r3, #12]
	Pitch.a22 = 1.0;
 800407a:	193b      	adds	r3, r7, r4
 800407c:	22fe      	movs	r2, #254	; 0xfe
 800407e:	0592      	lsls	r2, r2, #22
 8004080:	611a      	str	r2, [r3, #16]
	Pitch.a23 = 0.0;
 8004082:	193b      	adds	r3, r7, r4
 8004084:	2200      	movs	r2, #0
 8004086:	615a      	str	r2, [r3, #20]
	Pitch.a31 = -sin(acc_bias[1]*DEG_2_RAD);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	1c18      	adds	r0, r3, #0
 8004090:	f7fe fdee 	bl	8002c70 <__aeabi_f2d>
 8004094:	4aa9      	ldr	r2, [pc, #676]	; (800433c <CalculateRotationMatrix+0x428>)
 8004096:	4baa      	ldr	r3, [pc, #680]	; (8004340 <CalculateRotationMatrix+0x42c>)
 8004098:	f7fd ff42 	bl	8001f20 <__aeabi_dmul>
 800409c:	0002      	movs	r2, r0
 800409e:	000b      	movs	r3, r1
 80040a0:	0010      	movs	r0, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	f007 ff06 	bl	800beb4 <sin>
 80040a8:	0002      	movs	r2, r0
 80040aa:	000b      	movs	r3, r1
 80040ac:	0010      	movs	r0, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	f7fe fe26 	bl	8002d00 <__aeabi_d2f>
 80040b4:	1c02      	adds	r2, r0, #0
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	405a      	eors	r2, r3
 80040bc:	193b      	adds	r3, r7, r4
 80040be:	619a      	str	r2, [r3, #24]
	Pitch.a32 = 0.0;
 80040c0:	193b      	adds	r3, r7, r4
 80040c2:	2200      	movs	r2, #0
 80040c4:	61da      	str	r2, [r3, #28]
	Pitch.a33 = cos(acc_bias[1]*DEG_2_RAD);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3304      	adds	r3, #4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	1c18      	adds	r0, r3, #0
 80040ce:	f7fe fdcf 	bl	8002c70 <__aeabi_f2d>
 80040d2:	4a9a      	ldr	r2, [pc, #616]	; (800433c <CalculateRotationMatrix+0x428>)
 80040d4:	4b9a      	ldr	r3, [pc, #616]	; (8004340 <CalculateRotationMatrix+0x42c>)
 80040d6:	f7fd ff23 	bl	8001f20 <__aeabi_dmul>
 80040da:	0002      	movs	r2, r0
 80040dc:	000b      	movs	r3, r1
 80040de:	0010      	movs	r0, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	f007 fea1 	bl	800be28 <cos>
 80040e6:	0002      	movs	r2, r0
 80040e8:	000b      	movs	r3, r1
 80040ea:	0010      	movs	r0, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	f7fe fe07 	bl	8002d00 <__aeabi_d2f>
 80040f2:	1c02      	adds	r2, r0, #0
 80040f4:	0021      	movs	r1, r4
 80040f6:	193b      	adds	r3, r7, r4
 80040f8:	621a      	str	r2, [r3, #32]

	Yaw.a11 = 1.0;
 80040fa:	202c      	movs	r0, #44	; 0x2c
 80040fc:	183b      	adds	r3, r7, r0
 80040fe:	22fe      	movs	r2, #254	; 0xfe
 8004100:	0592      	lsls	r2, r2, #22
 8004102:	601a      	str	r2, [r3, #0]
	Yaw.a12 = 0.0;
 8004104:	183b      	adds	r3, r7, r0
 8004106:	2200      	movs	r2, #0
 8004108:	605a      	str	r2, [r3, #4]
	Yaw.a13 = 0.0;
 800410a:	183b      	adds	r3, r7, r0
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
	Yaw.a21 = 0.0;
 8004110:	183b      	adds	r3, r7, r0
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
	Yaw.a22 = 1.0;
 8004116:	183b      	adds	r3, r7, r0
 8004118:	22fe      	movs	r2, #254	; 0xfe
 800411a:	0592      	lsls	r2, r2, #22
 800411c:	611a      	str	r2, [r3, #16]
	Yaw.a23 = 0.0;
 800411e:	183b      	adds	r3, r7, r0
 8004120:	2200      	movs	r2, #0
 8004122:	615a      	str	r2, [r3, #20]
	Yaw.a31 = 0.0;
 8004124:	183b      	adds	r3, r7, r0
 8004126:	2200      	movs	r2, #0
 8004128:	619a      	str	r2, [r3, #24]
	Yaw.a32 = 0.0;
 800412a:	183b      	adds	r3, r7, r0
 800412c:	2200      	movs	r2, #0
 800412e:	61da      	str	r2, [r3, #28]
	Yaw.a33 = 1.0;
 8004130:	183b      	adds	r3, r7, r0
 8004132:	22fe      	movs	r2, #254	; 0xfe
 8004134:	0592      	lsls	r2, r2, #22
 8004136:	621a      	str	r2, [r3, #32]

	YawTimesPitch.a11 = Yaw.a11*Pitch.a11 + Yaw.a12*Pitch.a21 + Yaw.a13*Pitch.a31;
 8004138:	183b      	adds	r3, r7, r0
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	000e      	movs	r6, r1
 800413e:	19bb      	adds	r3, r7, r6
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	1c19      	adds	r1, r3, #0
 8004144:	1c10      	adds	r0, r2, #0
 8004146:	f7fc fc53 	bl	80009f0 <__aeabi_fmul>
 800414a:	1c03      	adds	r3, r0, #0
 800414c:	1c1c      	adds	r4, r3, #0
 800414e:	202c      	movs	r0, #44	; 0x2c
 8004150:	183b      	adds	r3, r7, r0
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	19bb      	adds	r3, r7, r6
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	1c19      	adds	r1, r3, #0
 800415a:	1c10      	adds	r0, r2, #0
 800415c:	f7fc fc48 	bl	80009f0 <__aeabi_fmul>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	1c19      	adds	r1, r3, #0
 8004164:	1c20      	adds	r0, r4, #0
 8004166:	f7fc f99b 	bl	80004a0 <__aeabi_fadd>
 800416a:	1c03      	adds	r3, r0, #0
 800416c:	1c1c      	adds	r4, r3, #0
 800416e:	202c      	movs	r0, #44	; 0x2c
 8004170:	183b      	adds	r3, r7, r0
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	19bb      	adds	r3, r7, r6
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	1c19      	adds	r1, r3, #0
 800417a:	1c10      	adds	r0, r2, #0
 800417c:	f7fc fc38 	bl	80009f0 <__aeabi_fmul>
 8004180:	1c03      	adds	r3, r0, #0
 8004182:	1c19      	adds	r1, r3, #0
 8004184:	1c20      	adds	r0, r4, #0
 8004186:	f7fc f98b 	bl	80004a0 <__aeabi_fadd>
 800418a:	1c03      	adds	r3, r0, #0
 800418c:	1c1a      	adds	r2, r3, #0
 800418e:	2308      	movs	r3, #8
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	601a      	str	r2, [r3, #0]
	YawTimesPitch.a12 = Yaw.a11*Pitch.a12 + Yaw.a12*Pitch.a22 + Yaw.a13*Pitch.a32;
 8004194:	202c      	movs	r0, #44	; 0x2c
 8004196:	183b      	adds	r3, r7, r0
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	19bb      	adds	r3, r7, r6
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	1c19      	adds	r1, r3, #0
 80041a0:	1c10      	adds	r0, r2, #0
 80041a2:	f7fc fc25 	bl	80009f0 <__aeabi_fmul>
 80041a6:	1c03      	adds	r3, r0, #0
 80041a8:	1c1c      	adds	r4, r3, #0
 80041aa:	202c      	movs	r0, #44	; 0x2c
 80041ac:	183b      	adds	r3, r7, r0
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	19bb      	adds	r3, r7, r6
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	1c19      	adds	r1, r3, #0
 80041b6:	1c10      	adds	r0, r2, #0
 80041b8:	f7fc fc1a 	bl	80009f0 <__aeabi_fmul>
 80041bc:	1c03      	adds	r3, r0, #0
 80041be:	1c19      	adds	r1, r3, #0
 80041c0:	1c20      	adds	r0, r4, #0
 80041c2:	f7fc f96d 	bl	80004a0 <__aeabi_fadd>
 80041c6:	1c03      	adds	r3, r0, #0
 80041c8:	1c1c      	adds	r4, r3, #0
 80041ca:	202c      	movs	r0, #44	; 0x2c
 80041cc:	183b      	adds	r3, r7, r0
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	19bb      	adds	r3, r7, r6
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	1c19      	adds	r1, r3, #0
 80041d6:	1c10      	adds	r0, r2, #0
 80041d8:	f7fc fc0a 	bl	80009f0 <__aeabi_fmul>
 80041dc:	1c03      	adds	r3, r0, #0
 80041de:	1c19      	adds	r1, r3, #0
 80041e0:	1c20      	adds	r0, r4, #0
 80041e2:	f7fc f95d 	bl	80004a0 <__aeabi_fadd>
 80041e6:	1c03      	adds	r3, r0, #0
 80041e8:	1c1a      	adds	r2, r3, #0
 80041ea:	2308      	movs	r3, #8
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	605a      	str	r2, [r3, #4]
	YawTimesPitch.a13 = Yaw.a11*Pitch.a13 + Yaw.a12*Pitch.a23 + Yaw.a13*Pitch.a33;
 80041f0:	202c      	movs	r0, #44	; 0x2c
 80041f2:	183b      	adds	r3, r7, r0
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	19bb      	adds	r3, r7, r6
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	1c19      	adds	r1, r3, #0
 80041fc:	1c10      	adds	r0, r2, #0
 80041fe:	f7fc fbf7 	bl	80009f0 <__aeabi_fmul>
 8004202:	1c03      	adds	r3, r0, #0
 8004204:	1c1c      	adds	r4, r3, #0
 8004206:	202c      	movs	r0, #44	; 0x2c
 8004208:	183b      	adds	r3, r7, r0
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	19bb      	adds	r3, r7, r6
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	1c19      	adds	r1, r3, #0
 8004212:	1c10      	adds	r0, r2, #0
 8004214:	f7fc fbec 	bl	80009f0 <__aeabi_fmul>
 8004218:	1c03      	adds	r3, r0, #0
 800421a:	1c19      	adds	r1, r3, #0
 800421c:	1c20      	adds	r0, r4, #0
 800421e:	f7fc f93f 	bl	80004a0 <__aeabi_fadd>
 8004222:	1c03      	adds	r3, r0, #0
 8004224:	1c1c      	adds	r4, r3, #0
 8004226:	202c      	movs	r0, #44	; 0x2c
 8004228:	183b      	adds	r3, r7, r0
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	19bb      	adds	r3, r7, r6
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	1c19      	adds	r1, r3, #0
 8004232:	1c10      	adds	r0, r2, #0
 8004234:	f7fc fbdc 	bl	80009f0 <__aeabi_fmul>
 8004238:	1c03      	adds	r3, r0, #0
 800423a:	1c19      	adds	r1, r3, #0
 800423c:	1c20      	adds	r0, r4, #0
 800423e:	f7fc f92f 	bl	80004a0 <__aeabi_fadd>
 8004242:	1c03      	adds	r3, r0, #0
 8004244:	1c1a      	adds	r2, r3, #0
 8004246:	2308      	movs	r3, #8
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	609a      	str	r2, [r3, #8]
	YawTimesPitch.a21 = Yaw.a21*Pitch.a11 + Yaw.a22*Pitch.a21 + Yaw.a23*Pitch.a31;
 800424c:	202c      	movs	r0, #44	; 0x2c
 800424e:	183b      	adds	r3, r7, r0
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	19bb      	adds	r3, r7, r6
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1c19      	adds	r1, r3, #0
 8004258:	1c10      	adds	r0, r2, #0
 800425a:	f7fc fbc9 	bl	80009f0 <__aeabi_fmul>
 800425e:	1c03      	adds	r3, r0, #0
 8004260:	1c1c      	adds	r4, r3, #0
 8004262:	202c      	movs	r0, #44	; 0x2c
 8004264:	183b      	adds	r3, r7, r0
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	19bb      	adds	r3, r7, r6
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	1c19      	adds	r1, r3, #0
 800426e:	1c10      	adds	r0, r2, #0
 8004270:	f7fc fbbe 	bl	80009f0 <__aeabi_fmul>
 8004274:	1c03      	adds	r3, r0, #0
 8004276:	1c19      	adds	r1, r3, #0
 8004278:	1c20      	adds	r0, r4, #0
 800427a:	f7fc f911 	bl	80004a0 <__aeabi_fadd>
 800427e:	1c03      	adds	r3, r0, #0
 8004280:	1c1c      	adds	r4, r3, #0
 8004282:	202c      	movs	r0, #44	; 0x2c
 8004284:	183b      	adds	r3, r7, r0
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	19bb      	adds	r3, r7, r6
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	1c19      	adds	r1, r3, #0
 800428e:	1c10      	adds	r0, r2, #0
 8004290:	f7fc fbae 	bl	80009f0 <__aeabi_fmul>
 8004294:	1c03      	adds	r3, r0, #0
 8004296:	1c19      	adds	r1, r3, #0
 8004298:	1c20      	adds	r0, r4, #0
 800429a:	f7fc f901 	bl	80004a0 <__aeabi_fadd>
 800429e:	1c03      	adds	r3, r0, #0
 80042a0:	1c1a      	adds	r2, r3, #0
 80042a2:	2308      	movs	r3, #8
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	60da      	str	r2, [r3, #12]
	YawTimesPitch.a22 = Yaw.a21*Pitch.a12 + Yaw.a22*Pitch.a22 + Yaw.a23*Pitch.a32;
 80042a8:	202c      	movs	r0, #44	; 0x2c
 80042aa:	183b      	adds	r3, r7, r0
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	19bb      	adds	r3, r7, r6
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	1c19      	adds	r1, r3, #0
 80042b4:	1c10      	adds	r0, r2, #0
 80042b6:	f7fc fb9b 	bl	80009f0 <__aeabi_fmul>
 80042ba:	1c03      	adds	r3, r0, #0
 80042bc:	1c1c      	adds	r4, r3, #0
 80042be:	202c      	movs	r0, #44	; 0x2c
 80042c0:	183b      	adds	r3, r7, r0
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	19bb      	adds	r3, r7, r6
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	1c19      	adds	r1, r3, #0
 80042ca:	1c10      	adds	r0, r2, #0
 80042cc:	f7fc fb90 	bl	80009f0 <__aeabi_fmul>
 80042d0:	1c03      	adds	r3, r0, #0
 80042d2:	1c19      	adds	r1, r3, #0
 80042d4:	1c20      	adds	r0, r4, #0
 80042d6:	f7fc f8e3 	bl	80004a0 <__aeabi_fadd>
 80042da:	1c03      	adds	r3, r0, #0
 80042dc:	1c1c      	adds	r4, r3, #0
 80042de:	202c      	movs	r0, #44	; 0x2c
 80042e0:	183b      	adds	r3, r7, r0
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	19bb      	adds	r3, r7, r6
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	1c19      	adds	r1, r3, #0
 80042ea:	1c10      	adds	r0, r2, #0
 80042ec:	f7fc fb80 	bl	80009f0 <__aeabi_fmul>
 80042f0:	1c03      	adds	r3, r0, #0
 80042f2:	1c19      	adds	r1, r3, #0
 80042f4:	1c20      	adds	r0, r4, #0
 80042f6:	f7fc f8d3 	bl	80004a0 <__aeabi_fadd>
 80042fa:	1c03      	adds	r3, r0, #0
 80042fc:	1c1a      	adds	r2, r3, #0
 80042fe:	2308      	movs	r3, #8
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	611a      	str	r2, [r3, #16]
	YawTimesPitch.a23 = Yaw.a21*Pitch.a13 + Yaw.a22*Pitch.a23 + Yaw.a23*Pitch.a33;
 8004304:	202c      	movs	r0, #44	; 0x2c
 8004306:	183b      	adds	r3, r7, r0
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	19bb      	adds	r3, r7, r6
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	1c19      	adds	r1, r3, #0
 8004310:	1c10      	adds	r0, r2, #0
 8004312:	f7fc fb6d 	bl	80009f0 <__aeabi_fmul>
 8004316:	1c03      	adds	r3, r0, #0
 8004318:	1c1c      	adds	r4, r3, #0
 800431a:	202c      	movs	r0, #44	; 0x2c
 800431c:	183b      	adds	r3, r7, r0
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	19bb      	adds	r3, r7, r6
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	1c19      	adds	r1, r3, #0
 8004326:	1c10      	adds	r0, r2, #0
 8004328:	f7fc fb62 	bl	80009f0 <__aeabi_fmul>
 800432c:	1c03      	adds	r3, r0, #0
 800432e:	1c19      	adds	r1, r3, #0
 8004330:	1c20      	adds	r0, r4, #0
 8004332:	f7fc f8b5 	bl	80004a0 <__aeabi_fadd>
 8004336:	1c03      	adds	r3, r0, #0
 8004338:	1c1c      	adds	r4, r3, #0
 800433a:	e003      	b.n	8004344 <CalculateRotationMatrix+0x430>
 800433c:	a2529d39 	.word	0xa2529d39
 8004340:	3f91df46 	.word	0x3f91df46
 8004344:	202c      	movs	r0, #44	; 0x2c
 8004346:	183b      	adds	r3, r7, r0
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	19bb      	adds	r3, r7, r6
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	1c19      	adds	r1, r3, #0
 8004350:	1c10      	adds	r0, r2, #0
 8004352:	f7fc fb4d 	bl	80009f0 <__aeabi_fmul>
 8004356:	1c03      	adds	r3, r0, #0
 8004358:	1c19      	adds	r1, r3, #0
 800435a:	1c20      	adds	r0, r4, #0
 800435c:	f7fc f8a0 	bl	80004a0 <__aeabi_fadd>
 8004360:	1c03      	adds	r3, r0, #0
 8004362:	1c1a      	adds	r2, r3, #0
 8004364:	2308      	movs	r3, #8
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	615a      	str	r2, [r3, #20]
	YawTimesPitch.a31 = Yaw.a31*Pitch.a11 + Yaw.a32*Pitch.a21 + Yaw.a33*Pitch.a31;
 800436a:	202c      	movs	r0, #44	; 0x2c
 800436c:	183b      	adds	r3, r7, r0
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	19bb      	adds	r3, r7, r6
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	1c19      	adds	r1, r3, #0
 8004376:	1c10      	adds	r0, r2, #0
 8004378:	f7fc fb3a 	bl	80009f0 <__aeabi_fmul>
 800437c:	1c03      	adds	r3, r0, #0
 800437e:	1c1c      	adds	r4, r3, #0
 8004380:	202c      	movs	r0, #44	; 0x2c
 8004382:	183b      	adds	r3, r7, r0
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	19bb      	adds	r3, r7, r6
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	1c19      	adds	r1, r3, #0
 800438c:	1c10      	adds	r0, r2, #0
 800438e:	f7fc fb2f 	bl	80009f0 <__aeabi_fmul>
 8004392:	1c03      	adds	r3, r0, #0
 8004394:	1c19      	adds	r1, r3, #0
 8004396:	1c20      	adds	r0, r4, #0
 8004398:	f7fc f882 	bl	80004a0 <__aeabi_fadd>
 800439c:	1c03      	adds	r3, r0, #0
 800439e:	1c1c      	adds	r4, r3, #0
 80043a0:	202c      	movs	r0, #44	; 0x2c
 80043a2:	183b      	adds	r3, r7, r0
 80043a4:	6a1a      	ldr	r2, [r3, #32]
 80043a6:	19bb      	adds	r3, r7, r6
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	1c19      	adds	r1, r3, #0
 80043ac:	1c10      	adds	r0, r2, #0
 80043ae:	f7fc fb1f 	bl	80009f0 <__aeabi_fmul>
 80043b2:	1c03      	adds	r3, r0, #0
 80043b4:	1c19      	adds	r1, r3, #0
 80043b6:	1c20      	adds	r0, r4, #0
 80043b8:	f7fc f872 	bl	80004a0 <__aeabi_fadd>
 80043bc:	1c03      	adds	r3, r0, #0
 80043be:	1c1a      	adds	r2, r3, #0
 80043c0:	2308      	movs	r3, #8
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	619a      	str	r2, [r3, #24]
	YawTimesPitch.a32 = Yaw.a31*Pitch.a12 + Yaw.a32*Pitch.a22 + Yaw.a33*Pitch.a32;
 80043c6:	202c      	movs	r0, #44	; 0x2c
 80043c8:	183b      	adds	r3, r7, r0
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	19bb      	adds	r3, r7, r6
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	1c19      	adds	r1, r3, #0
 80043d2:	1c10      	adds	r0, r2, #0
 80043d4:	f7fc fb0c 	bl	80009f0 <__aeabi_fmul>
 80043d8:	1c03      	adds	r3, r0, #0
 80043da:	1c1c      	adds	r4, r3, #0
 80043dc:	202c      	movs	r0, #44	; 0x2c
 80043de:	183b      	adds	r3, r7, r0
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	19bb      	adds	r3, r7, r6
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	1c19      	adds	r1, r3, #0
 80043e8:	1c10      	adds	r0, r2, #0
 80043ea:	f7fc fb01 	bl	80009f0 <__aeabi_fmul>
 80043ee:	1c03      	adds	r3, r0, #0
 80043f0:	1c19      	adds	r1, r3, #0
 80043f2:	1c20      	adds	r0, r4, #0
 80043f4:	f7fc f854 	bl	80004a0 <__aeabi_fadd>
 80043f8:	1c03      	adds	r3, r0, #0
 80043fa:	1c1c      	adds	r4, r3, #0
 80043fc:	202c      	movs	r0, #44	; 0x2c
 80043fe:	183b      	adds	r3, r7, r0
 8004400:	6a1a      	ldr	r2, [r3, #32]
 8004402:	19bb      	adds	r3, r7, r6
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	1c19      	adds	r1, r3, #0
 8004408:	1c10      	adds	r0, r2, #0
 800440a:	f7fc faf1 	bl	80009f0 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	1c19      	adds	r1, r3, #0
 8004412:	1c20      	adds	r0, r4, #0
 8004414:	f7fc f844 	bl	80004a0 <__aeabi_fadd>
 8004418:	1c03      	adds	r3, r0, #0
 800441a:	1c1a      	adds	r2, r3, #0
 800441c:	2308      	movs	r3, #8
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	61da      	str	r2, [r3, #28]
	YawTimesPitch.a33 = Yaw.a31*Pitch.a13 + Yaw.a32*Pitch.a23 + Yaw.a33*Pitch.a33;
 8004422:	202c      	movs	r0, #44	; 0x2c
 8004424:	183b      	adds	r3, r7, r0
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	19bb      	adds	r3, r7, r6
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	1c19      	adds	r1, r3, #0
 800442e:	1c10      	adds	r0, r2, #0
 8004430:	f7fc fade 	bl	80009f0 <__aeabi_fmul>
 8004434:	1c03      	adds	r3, r0, #0
 8004436:	1c1c      	adds	r4, r3, #0
 8004438:	202c      	movs	r0, #44	; 0x2c
 800443a:	183b      	adds	r3, r7, r0
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	19bb      	adds	r3, r7, r6
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	1c19      	adds	r1, r3, #0
 8004444:	1c10      	adds	r0, r2, #0
 8004446:	f7fc fad3 	bl	80009f0 <__aeabi_fmul>
 800444a:	1c03      	adds	r3, r0, #0
 800444c:	1c19      	adds	r1, r3, #0
 800444e:	1c20      	adds	r0, r4, #0
 8004450:	f7fc f826 	bl	80004a0 <__aeabi_fadd>
 8004454:	1c03      	adds	r3, r0, #0
 8004456:	1c1c      	adds	r4, r3, #0
 8004458:	202c      	movs	r0, #44	; 0x2c
 800445a:	183b      	adds	r3, r7, r0
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	19bb      	adds	r3, r7, r6
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	1c19      	adds	r1, r3, #0
 8004464:	1c10      	adds	r0, r2, #0
 8004466:	f7fc fac3 	bl	80009f0 <__aeabi_fmul>
 800446a:	1c03      	adds	r3, r0, #0
 800446c:	1c19      	adds	r1, r3, #0
 800446e:	1c20      	adds	r0, r4, #0
 8004470:	f7fc f816 	bl	80004a0 <__aeabi_fadd>
 8004474:	1c03      	adds	r3, r0, #0
 8004476:	1c1a      	adds	r2, r3, #0
 8004478:	2608      	movs	r6, #8
 800447a:	19bb      	adds	r3, r7, r6
 800447c:	621a      	str	r2, [r3, #32]

	RotationMatrix->a11 = YawTimesPitch.a11*Roll.a11 + YawTimesPitch.a12*Roll.a21 + YawTimesPitch.a13*Roll.a31;
 800447e:	19bb      	adds	r3, r7, r6
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	197b      	adds	r3, r7, r5
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	1c19      	adds	r1, r3, #0
 8004488:	1c10      	adds	r0, r2, #0
 800448a:	f7fc fab1 	bl	80009f0 <__aeabi_fmul>
 800448e:	1c03      	adds	r3, r0, #0
 8004490:	1c1c      	adds	r4, r3, #0
 8004492:	19bb      	adds	r3, r7, r6
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	197b      	adds	r3, r7, r5
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	1c19      	adds	r1, r3, #0
 800449c:	1c10      	adds	r0, r2, #0
 800449e:	f7fc faa7 	bl	80009f0 <__aeabi_fmul>
 80044a2:	1c03      	adds	r3, r0, #0
 80044a4:	1c19      	adds	r1, r3, #0
 80044a6:	1c20      	adds	r0, r4, #0
 80044a8:	f7fb fffa 	bl	80004a0 <__aeabi_fadd>
 80044ac:	1c03      	adds	r3, r0, #0
 80044ae:	1c1c      	adds	r4, r3, #0
 80044b0:	19bb      	adds	r3, r7, r6
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	197b      	adds	r3, r7, r5
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	1c19      	adds	r1, r3, #0
 80044ba:	1c10      	adds	r0, r2, #0
 80044bc:	f7fc fa98 	bl	80009f0 <__aeabi_fmul>
 80044c0:	1c03      	adds	r3, r0, #0
 80044c2:	1c19      	adds	r1, r3, #0
 80044c4:	1c20      	adds	r0, r4, #0
 80044c6:	f7fb ffeb 	bl	80004a0 <__aeabi_fadd>
 80044ca:	1c03      	adds	r3, r0, #0
 80044cc:	1c1a      	adds	r2, r3, #0
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	601a      	str	r2, [r3, #0]
	RotationMatrix->a12 = YawTimesPitch.a11*Roll.a12 + YawTimesPitch.a12*Roll.a22 + YawTimesPitch.a13*Roll.a32;
 80044d2:	19bb      	adds	r3, r7, r6
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	197b      	adds	r3, r7, r5
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	1c19      	adds	r1, r3, #0
 80044dc:	1c10      	adds	r0, r2, #0
 80044de:	f7fc fa87 	bl	80009f0 <__aeabi_fmul>
 80044e2:	1c03      	adds	r3, r0, #0
 80044e4:	1c1c      	adds	r4, r3, #0
 80044e6:	19bb      	adds	r3, r7, r6
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	197b      	adds	r3, r7, r5
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	1c19      	adds	r1, r3, #0
 80044f0:	1c10      	adds	r0, r2, #0
 80044f2:	f7fc fa7d 	bl	80009f0 <__aeabi_fmul>
 80044f6:	1c03      	adds	r3, r0, #0
 80044f8:	1c19      	adds	r1, r3, #0
 80044fa:	1c20      	adds	r0, r4, #0
 80044fc:	f7fb ffd0 	bl	80004a0 <__aeabi_fadd>
 8004500:	1c03      	adds	r3, r0, #0
 8004502:	1c1c      	adds	r4, r3, #0
 8004504:	19bb      	adds	r3, r7, r6
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	197b      	adds	r3, r7, r5
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	1c19      	adds	r1, r3, #0
 800450e:	1c10      	adds	r0, r2, #0
 8004510:	f7fc fa6e 	bl	80009f0 <__aeabi_fmul>
 8004514:	1c03      	adds	r3, r0, #0
 8004516:	1c19      	adds	r1, r3, #0
 8004518:	1c20      	adds	r0, r4, #0
 800451a:	f7fb ffc1 	bl	80004a0 <__aeabi_fadd>
 800451e:	1c03      	adds	r3, r0, #0
 8004520:	1c1a      	adds	r2, r3, #0
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	605a      	str	r2, [r3, #4]
	RotationMatrix->a13 = YawTimesPitch.a11*Roll.a13 + YawTimesPitch.a12*Roll.a23 + YawTimesPitch.a13*Roll.a33;
 8004526:	19bb      	adds	r3, r7, r6
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	197b      	adds	r3, r7, r5
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	1c19      	adds	r1, r3, #0
 8004530:	1c10      	adds	r0, r2, #0
 8004532:	f7fc fa5d 	bl	80009f0 <__aeabi_fmul>
 8004536:	1c03      	adds	r3, r0, #0
 8004538:	1c1c      	adds	r4, r3, #0
 800453a:	19bb      	adds	r3, r7, r6
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	197b      	adds	r3, r7, r5
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	1c19      	adds	r1, r3, #0
 8004544:	1c10      	adds	r0, r2, #0
 8004546:	f7fc fa53 	bl	80009f0 <__aeabi_fmul>
 800454a:	1c03      	adds	r3, r0, #0
 800454c:	1c19      	adds	r1, r3, #0
 800454e:	1c20      	adds	r0, r4, #0
 8004550:	f7fb ffa6 	bl	80004a0 <__aeabi_fadd>
 8004554:	1c03      	adds	r3, r0, #0
 8004556:	1c1c      	adds	r4, r3, #0
 8004558:	19bb      	adds	r3, r7, r6
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	197b      	adds	r3, r7, r5
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	1c19      	adds	r1, r3, #0
 8004562:	1c10      	adds	r0, r2, #0
 8004564:	f7fc fa44 	bl	80009f0 <__aeabi_fmul>
 8004568:	1c03      	adds	r3, r0, #0
 800456a:	1c19      	adds	r1, r3, #0
 800456c:	1c20      	adds	r0, r4, #0
 800456e:	f7fb ff97 	bl	80004a0 <__aeabi_fadd>
 8004572:	1c03      	adds	r3, r0, #0
 8004574:	1c1a      	adds	r2, r3, #0
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	609a      	str	r2, [r3, #8]
	RotationMatrix->a21 = YawTimesPitch.a21*Roll.a11 + YawTimesPitch.a22*Roll.a21 + YawTimesPitch.a23*Roll.a31;
 800457a:	19bb      	adds	r3, r7, r6
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	197b      	adds	r3, r7, r5
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	1c19      	adds	r1, r3, #0
 8004584:	1c10      	adds	r0, r2, #0
 8004586:	f7fc fa33 	bl	80009f0 <__aeabi_fmul>
 800458a:	1c03      	adds	r3, r0, #0
 800458c:	1c1c      	adds	r4, r3, #0
 800458e:	19bb      	adds	r3, r7, r6
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	197b      	adds	r3, r7, r5
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	1c19      	adds	r1, r3, #0
 8004598:	1c10      	adds	r0, r2, #0
 800459a:	f7fc fa29 	bl	80009f0 <__aeabi_fmul>
 800459e:	1c03      	adds	r3, r0, #0
 80045a0:	1c19      	adds	r1, r3, #0
 80045a2:	1c20      	adds	r0, r4, #0
 80045a4:	f7fb ff7c 	bl	80004a0 <__aeabi_fadd>
 80045a8:	1c03      	adds	r3, r0, #0
 80045aa:	1c1c      	adds	r4, r3, #0
 80045ac:	19bb      	adds	r3, r7, r6
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	197b      	adds	r3, r7, r5
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	1c19      	adds	r1, r3, #0
 80045b6:	1c10      	adds	r0, r2, #0
 80045b8:	f7fc fa1a 	bl	80009f0 <__aeabi_fmul>
 80045bc:	1c03      	adds	r3, r0, #0
 80045be:	1c19      	adds	r1, r3, #0
 80045c0:	1c20      	adds	r0, r4, #0
 80045c2:	f7fb ff6d 	bl	80004a0 <__aeabi_fadd>
 80045c6:	1c03      	adds	r3, r0, #0
 80045c8:	1c1a      	adds	r2, r3, #0
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	60da      	str	r2, [r3, #12]
	RotationMatrix->a22 = YawTimesPitch.a21*Roll.a12 + YawTimesPitch.a22*Roll.a22 + YawTimesPitch.a23*Roll.a32;
 80045ce:	19bb      	adds	r3, r7, r6
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	197b      	adds	r3, r7, r5
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	1c19      	adds	r1, r3, #0
 80045d8:	1c10      	adds	r0, r2, #0
 80045da:	f7fc fa09 	bl	80009f0 <__aeabi_fmul>
 80045de:	1c03      	adds	r3, r0, #0
 80045e0:	1c1c      	adds	r4, r3, #0
 80045e2:	19bb      	adds	r3, r7, r6
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	197b      	adds	r3, r7, r5
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	1c19      	adds	r1, r3, #0
 80045ec:	1c10      	adds	r0, r2, #0
 80045ee:	f7fc f9ff 	bl	80009f0 <__aeabi_fmul>
 80045f2:	1c03      	adds	r3, r0, #0
 80045f4:	1c19      	adds	r1, r3, #0
 80045f6:	1c20      	adds	r0, r4, #0
 80045f8:	f7fb ff52 	bl	80004a0 <__aeabi_fadd>
 80045fc:	1c03      	adds	r3, r0, #0
 80045fe:	1c1c      	adds	r4, r3, #0
 8004600:	19bb      	adds	r3, r7, r6
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	197b      	adds	r3, r7, r5
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	1c19      	adds	r1, r3, #0
 800460a:	1c10      	adds	r0, r2, #0
 800460c:	f7fc f9f0 	bl	80009f0 <__aeabi_fmul>
 8004610:	1c03      	adds	r3, r0, #0
 8004612:	1c19      	adds	r1, r3, #0
 8004614:	1c20      	adds	r0, r4, #0
 8004616:	f7fb ff43 	bl	80004a0 <__aeabi_fadd>
 800461a:	1c03      	adds	r3, r0, #0
 800461c:	1c1a      	adds	r2, r3, #0
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	611a      	str	r2, [r3, #16]
	RotationMatrix->a23 = YawTimesPitch.a21*Roll.a13 + YawTimesPitch.a22*Roll.a23 + YawTimesPitch.a23*Roll.a33;
 8004622:	19bb      	adds	r3, r7, r6
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	197b      	adds	r3, r7, r5
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	1c19      	adds	r1, r3, #0
 800462c:	1c10      	adds	r0, r2, #0
 800462e:	f7fc f9df 	bl	80009f0 <__aeabi_fmul>
 8004632:	1c03      	adds	r3, r0, #0
 8004634:	1c1c      	adds	r4, r3, #0
 8004636:	19bb      	adds	r3, r7, r6
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	197b      	adds	r3, r7, r5
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	1c19      	adds	r1, r3, #0
 8004640:	1c10      	adds	r0, r2, #0
 8004642:	f7fc f9d5 	bl	80009f0 <__aeabi_fmul>
 8004646:	1c03      	adds	r3, r0, #0
 8004648:	1c19      	adds	r1, r3, #0
 800464a:	1c20      	adds	r0, r4, #0
 800464c:	f7fb ff28 	bl	80004a0 <__aeabi_fadd>
 8004650:	1c03      	adds	r3, r0, #0
 8004652:	1c1c      	adds	r4, r3, #0
 8004654:	19bb      	adds	r3, r7, r6
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	197b      	adds	r3, r7, r5
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	1c19      	adds	r1, r3, #0
 800465e:	1c10      	adds	r0, r2, #0
 8004660:	f7fc f9c6 	bl	80009f0 <__aeabi_fmul>
 8004664:	1c03      	adds	r3, r0, #0
 8004666:	1c19      	adds	r1, r3, #0
 8004668:	1c20      	adds	r0, r4, #0
 800466a:	f7fb ff19 	bl	80004a0 <__aeabi_fadd>
 800466e:	1c03      	adds	r3, r0, #0
 8004670:	1c1a      	adds	r2, r3, #0
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	615a      	str	r2, [r3, #20]
	RotationMatrix->a31 = YawTimesPitch.a31*Roll.a11 + YawTimesPitch.a32*Roll.a21 + YawTimesPitch.a33*Roll.a31;
 8004676:	19bb      	adds	r3, r7, r6
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	197b      	adds	r3, r7, r5
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	1c19      	adds	r1, r3, #0
 8004680:	1c10      	adds	r0, r2, #0
 8004682:	f7fc f9b5 	bl	80009f0 <__aeabi_fmul>
 8004686:	1c03      	adds	r3, r0, #0
 8004688:	1c1c      	adds	r4, r3, #0
 800468a:	19bb      	adds	r3, r7, r6
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	197b      	adds	r3, r7, r5
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	1c19      	adds	r1, r3, #0
 8004694:	1c10      	adds	r0, r2, #0
 8004696:	f7fc f9ab 	bl	80009f0 <__aeabi_fmul>
 800469a:	1c03      	adds	r3, r0, #0
 800469c:	1c19      	adds	r1, r3, #0
 800469e:	1c20      	adds	r0, r4, #0
 80046a0:	f7fb fefe 	bl	80004a0 <__aeabi_fadd>
 80046a4:	1c03      	adds	r3, r0, #0
 80046a6:	1c1c      	adds	r4, r3, #0
 80046a8:	19bb      	adds	r3, r7, r6
 80046aa:	6a1a      	ldr	r2, [r3, #32]
 80046ac:	197b      	adds	r3, r7, r5
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	1c19      	adds	r1, r3, #0
 80046b2:	1c10      	adds	r0, r2, #0
 80046b4:	f7fc f99c 	bl	80009f0 <__aeabi_fmul>
 80046b8:	1c03      	adds	r3, r0, #0
 80046ba:	1c19      	adds	r1, r3, #0
 80046bc:	1c20      	adds	r0, r4, #0
 80046be:	f7fb feef 	bl	80004a0 <__aeabi_fadd>
 80046c2:	1c03      	adds	r3, r0, #0
 80046c4:	1c1a      	adds	r2, r3, #0
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	619a      	str	r2, [r3, #24]
	RotationMatrix->a32 = YawTimesPitch.a31*Roll.a12 + YawTimesPitch.a32*Roll.a22 + YawTimesPitch.a33*Roll.a32;
 80046ca:	19bb      	adds	r3, r7, r6
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	197b      	adds	r3, r7, r5
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	1c19      	adds	r1, r3, #0
 80046d4:	1c10      	adds	r0, r2, #0
 80046d6:	f7fc f98b 	bl	80009f0 <__aeabi_fmul>
 80046da:	1c03      	adds	r3, r0, #0
 80046dc:	1c1c      	adds	r4, r3, #0
 80046de:	19bb      	adds	r3, r7, r6
 80046e0:	69da      	ldr	r2, [r3, #28]
 80046e2:	197b      	adds	r3, r7, r5
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	1c19      	adds	r1, r3, #0
 80046e8:	1c10      	adds	r0, r2, #0
 80046ea:	f7fc f981 	bl	80009f0 <__aeabi_fmul>
 80046ee:	1c03      	adds	r3, r0, #0
 80046f0:	1c19      	adds	r1, r3, #0
 80046f2:	1c20      	adds	r0, r4, #0
 80046f4:	f7fb fed4 	bl	80004a0 <__aeabi_fadd>
 80046f8:	1c03      	adds	r3, r0, #0
 80046fa:	1c1c      	adds	r4, r3, #0
 80046fc:	19bb      	adds	r3, r7, r6
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	197b      	adds	r3, r7, r5
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	1c19      	adds	r1, r3, #0
 8004706:	1c10      	adds	r0, r2, #0
 8004708:	f7fc f972 	bl	80009f0 <__aeabi_fmul>
 800470c:	1c03      	adds	r3, r0, #0
 800470e:	1c19      	adds	r1, r3, #0
 8004710:	1c20      	adds	r0, r4, #0
 8004712:	f7fb fec5 	bl	80004a0 <__aeabi_fadd>
 8004716:	1c03      	adds	r3, r0, #0
 8004718:	1c1a      	adds	r2, r3, #0
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	61da      	str	r2, [r3, #28]
	RotationMatrix->a33 = YawTimesPitch.a31*Roll.a13 + YawTimesPitch.a32*Roll.a23 + YawTimesPitch.a33*Roll.a33;
 800471e:	19bb      	adds	r3, r7, r6
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	197b      	adds	r3, r7, r5
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	1c19      	adds	r1, r3, #0
 8004728:	1c10      	adds	r0, r2, #0
 800472a:	f7fc f961 	bl	80009f0 <__aeabi_fmul>
 800472e:	1c03      	adds	r3, r0, #0
 8004730:	1c1c      	adds	r4, r3, #0
 8004732:	19bb      	adds	r3, r7, r6
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	197b      	adds	r3, r7, r5
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	1c19      	adds	r1, r3, #0
 800473c:	1c10      	adds	r0, r2, #0
 800473e:	f7fc f957 	bl	80009f0 <__aeabi_fmul>
 8004742:	1c03      	adds	r3, r0, #0
 8004744:	1c19      	adds	r1, r3, #0
 8004746:	1c20      	adds	r0, r4, #0
 8004748:	f7fb feaa 	bl	80004a0 <__aeabi_fadd>
 800474c:	1c03      	adds	r3, r0, #0
 800474e:	1c1c      	adds	r4, r3, #0
 8004750:	19bb      	adds	r3, r7, r6
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	197b      	adds	r3, r7, r5
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	1c19      	adds	r1, r3, #0
 800475a:	1c10      	adds	r0, r2, #0
 800475c:	f7fc f948 	bl	80009f0 <__aeabi_fmul>
 8004760:	1c03      	adds	r3, r0, #0
 8004762:	1c19      	adds	r1, r3, #0
 8004764:	1c20      	adds	r0, r4, #0
 8004766:	f7fb fe9b 	bl	80004a0 <__aeabi_fadd>
 800476a:	1c03      	adds	r3, r0, #0
 800476c:	1c1a      	adds	r2, r3, #0
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	46bd      	mov	sp, r7
 8004776:	b027      	add	sp, #156	; 0x9c
 8004778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800477a:	46c0      	nop			; (mov r8, r8)

0800477c <CalculateAccelerometerInEarthFrame>:

void CalculateAccelerometerInEarthFrame(struct matrix *RotationMatrix, float* accel_data, float* new_data){
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
	new_data[0] = accel_data[0]*RotationMatrix->a11 + accel_data[1]*RotationMatrix->a12 + accel_data[2]*RotationMatrix->a13;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	1c19      	adds	r1, r3, #0
 8004792:	1c10      	adds	r0, r2, #0
 8004794:	f7fc f92c 	bl	80009f0 <__aeabi_fmul>
 8004798:	1c03      	adds	r3, r0, #0
 800479a:	1c1c      	adds	r4, r3, #0
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	3304      	adds	r3, #4
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	1c19      	adds	r1, r3, #0
 80047a8:	1c10      	adds	r0, r2, #0
 80047aa:	f7fc f921 	bl	80009f0 <__aeabi_fmul>
 80047ae:	1c03      	adds	r3, r0, #0
 80047b0:	1c19      	adds	r1, r3, #0
 80047b2:	1c20      	adds	r0, r4, #0
 80047b4:	f7fb fe74 	bl	80004a0 <__aeabi_fadd>
 80047b8:	1c03      	adds	r3, r0, #0
 80047ba:	1c1c      	adds	r4, r3, #0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	3308      	adds	r3, #8
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	1c19      	adds	r1, r3, #0
 80047c8:	1c10      	adds	r0, r2, #0
 80047ca:	f7fc f911 	bl	80009f0 <__aeabi_fmul>
 80047ce:	1c03      	adds	r3, r0, #0
 80047d0:	1c19      	adds	r1, r3, #0
 80047d2:	1c20      	adds	r0, r4, #0
 80047d4:	f7fb fe64 	bl	80004a0 <__aeabi_fadd>
 80047d8:	1c03      	adds	r3, r0, #0
 80047da:	1c1a      	adds	r2, r3, #0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	601a      	str	r2, [r3, #0]
	new_data[1] = accel_data[0]*RotationMatrix->a21 + accel_data[1]*RotationMatrix->a22 + accel_data[2]*RotationMatrix->a23;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	1c19      	adds	r1, r3, #0
 80047ea:	1c10      	adds	r0, r2, #0
 80047ec:	f7fc f900 	bl	80009f0 <__aeabi_fmul>
 80047f0:	1c03      	adds	r3, r0, #0
 80047f2:	1c1c      	adds	r4, r3, #0
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	3304      	adds	r3, #4
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	1c19      	adds	r1, r3, #0
 8004800:	1c10      	adds	r0, r2, #0
 8004802:	f7fc f8f5 	bl	80009f0 <__aeabi_fmul>
 8004806:	1c03      	adds	r3, r0, #0
 8004808:	1c19      	adds	r1, r3, #0
 800480a:	1c20      	adds	r0, r4, #0
 800480c:	f7fb fe48 	bl	80004a0 <__aeabi_fadd>
 8004810:	1c03      	adds	r3, r0, #0
 8004812:	1c1d      	adds	r5, r3, #0
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	3308      	adds	r3, #8
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	1c19      	adds	r1, r3, #0
 8004820:	1c10      	adds	r0, r2, #0
 8004822:	f7fc f8e5 	bl	80009f0 <__aeabi_fmul>
 8004826:	1c03      	adds	r3, r0, #0
 8004828:	1c1a      	adds	r2, r3, #0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	1d1c      	adds	r4, r3, #4
 800482e:	1c11      	adds	r1, r2, #0
 8004830:	1c28      	adds	r0, r5, #0
 8004832:	f7fb fe35 	bl	80004a0 <__aeabi_fadd>
 8004836:	1c03      	adds	r3, r0, #0
 8004838:	6023      	str	r3, [r4, #0]
	new_data[2] = accel_data[0]*RotationMatrix->a31 + accel_data[1]*RotationMatrix->a32 + accel_data[2]*RotationMatrix->a33;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	1c19      	adds	r1, r3, #0
 8004844:	1c10      	adds	r0, r2, #0
 8004846:	f7fc f8d3 	bl	80009f0 <__aeabi_fmul>
 800484a:	1c03      	adds	r3, r0, #0
 800484c:	1c1c      	adds	r4, r3, #0
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	3304      	adds	r3, #4
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	1c19      	adds	r1, r3, #0
 800485a:	1c10      	adds	r0, r2, #0
 800485c:	f7fc f8c8 	bl	80009f0 <__aeabi_fmul>
 8004860:	1c03      	adds	r3, r0, #0
 8004862:	1c19      	adds	r1, r3, #0
 8004864:	1c20      	adds	r0, r4, #0
 8004866:	f7fb fe1b 	bl	80004a0 <__aeabi_fadd>
 800486a:	1c03      	adds	r3, r0, #0
 800486c:	1c1d      	adds	r5, r3, #0
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	3308      	adds	r3, #8
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	1c19      	adds	r1, r3, #0
 800487a:	1c10      	adds	r0, r2, #0
 800487c:	f7fc f8b8 	bl	80009f0 <__aeabi_fmul>
 8004880:	1c03      	adds	r3, r0, #0
 8004882:	1c1a      	adds	r2, r3, #0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3308      	adds	r3, #8
 8004888:	001c      	movs	r4, r3
 800488a:	1c11      	adds	r1, r2, #0
 800488c:	1c28      	adds	r0, r5, #0
 800488e:	f7fb fe07 	bl	80004a0 <__aeabi_fadd>
 8004892:	1c03      	adds	r3, r0, #0
 8004894:	6023      	str	r3, [r4, #0]

	float norm = 1.0 / sqrt(new_data[0]*new_data[0] + new_data[1]*new_data[1] + new_data[2]*new_data[2]);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	1c19      	adds	r1, r3, #0
 80048a0:	1c10      	adds	r0, r2, #0
 80048a2:	f7fc f8a5 	bl	80009f0 <__aeabi_fmul>
 80048a6:	1c03      	adds	r3, r0, #0
 80048a8:	1c1c      	adds	r4, r3, #0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	1c19      	adds	r1, r3, #0
 80048b8:	1c10      	adds	r0, r2, #0
 80048ba:	f7fc f899 	bl	80009f0 <__aeabi_fmul>
 80048be:	1c03      	adds	r3, r0, #0
 80048c0:	1c19      	adds	r1, r3, #0
 80048c2:	1c20      	adds	r0, r4, #0
 80048c4:	f7fb fdec 	bl	80004a0 <__aeabi_fadd>
 80048c8:	1c03      	adds	r3, r0, #0
 80048ca:	1c1c      	adds	r4, r3, #0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3308      	adds	r3, #8
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3308      	adds	r3, #8
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	1c19      	adds	r1, r3, #0
 80048da:	1c10      	adds	r0, r2, #0
 80048dc:	f7fc f888 	bl	80009f0 <__aeabi_fmul>
 80048e0:	1c03      	adds	r3, r0, #0
 80048e2:	1c19      	adds	r1, r3, #0
 80048e4:	1c20      	adds	r0, r4, #0
 80048e6:	f7fb fddb 	bl	80004a0 <__aeabi_fadd>
 80048ea:	1c03      	adds	r3, r0, #0
 80048ec:	1c18      	adds	r0, r3, #0
 80048ee:	f7fe f9bf 	bl	8002c70 <__aeabi_f2d>
 80048f2:	0002      	movs	r2, r0
 80048f4:	000b      	movs	r3, r1
 80048f6:	0010      	movs	r0, r2
 80048f8:	0019      	movs	r1, r3
 80048fa:	f007 fbd9 	bl	800c0b0 <sqrt>
 80048fe:	0002      	movs	r2, r0
 8004900:	000b      	movs	r3, r1
 8004902:	2000      	movs	r0, #0
 8004904:	4917      	ldr	r1, [pc, #92]	; (8004964 <CalculateAccelerometerInEarthFrame+0x1e8>)
 8004906:	f7fc ff05 	bl	8001714 <__aeabi_ddiv>
 800490a:	0002      	movs	r2, r0
 800490c:	000b      	movs	r3, r1
 800490e:	0010      	movs	r0, r2
 8004910:	0019      	movs	r1, r3
 8004912:	f7fe f9f5 	bl	8002d00 <__aeabi_d2f>
 8004916:	1c03      	adds	r3, r0, #0
 8004918:	617b      	str	r3, [r7, #20]
	new_data[0] *= norm;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6979      	ldr	r1, [r7, #20]
 8004920:	1c18      	adds	r0, r3, #0
 8004922:	f7fc f865 	bl	80009f0 <__aeabi_fmul>
 8004926:	1c03      	adds	r3, r0, #0
 8004928:	1c1a      	adds	r2, r3, #0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]
	new_data[1] *= norm;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3304      	adds	r3, #4
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	1d1c      	adds	r4, r3, #4
 8004938:	6979      	ldr	r1, [r7, #20]
 800493a:	1c10      	adds	r0, r2, #0
 800493c:	f7fc f858 	bl	80009f0 <__aeabi_fmul>
 8004940:	1c03      	adds	r3, r0, #0
 8004942:	6023      	str	r3, [r4, #0]
	new_data[2] *= norm;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3308      	adds	r3, #8
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3308      	adds	r3, #8
 800494e:	001c      	movs	r4, r3
 8004950:	6979      	ldr	r1, [r7, #20]
 8004952:	1c10      	adds	r0, r2, #0
 8004954:	f7fc f84c 	bl	80009f0 <__aeabi_fmul>
 8004958:	1c03      	adds	r3, r0, #0
 800495a:	6023      	str	r3, [r4, #0]
}
 800495c:	46c0      	nop			; (mov r8, r8)
 800495e:	46bd      	mov	sp, r7
 8004960:	b006      	add	sp, #24
 8004962:	bdb0      	pop	{r4, r5, r7, pc}
 8004964:	3ff00000 	.word	0x3ff00000

08004968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496a:	46c6      	mov	lr, r8
 800496c:	b500      	push	{lr}
 800496e:	4cfe      	ldr	r4, [pc, #1016]	; (8004d68 <main+0x400>)
 8004970:	44a5      	add	sp, r4
 8004972:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004974:	f001 f800 	bl	8005978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004978:	f000 fb9e 	bl	80050b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800497c:	f000 fd0a 	bl	8005394 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004980:	f000 fc54 	bl	800522c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8004984:	f000 fcb8 	bl	80052f8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8004988:	f000 fc22 	bl	80051d0 <MX_RTC_Init>
  MX_TIM16_Init();
 800498c:	f000 fc8c 	bl	80052a8 <MX_TIM16_Init>
  MX_I2C1_Init();
 8004990:	f000 fbde 	bl	8005150 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	ICM_Initialize(&hspi1, &huart2, IMU_MOVABLE);
 8004994:	49f5      	ldr	r1, [pc, #980]	; (8004d6c <main+0x404>)
 8004996:	4bf6      	ldr	r3, [pc, #984]	; (8004d70 <main+0x408>)
 8004998:	2200      	movs	r2, #0
 800499a:	0018      	movs	r0, r3
 800499c:	f7fe fb68 	bl	8003070 <ICM_Initialize>

	char uart_buffer[200];

	float accel_data[3] = {0,0,0};
 80049a0:	21b1      	movs	r1, #177	; 0xb1
 80049a2:	00c9      	lsls	r1, r1, #3
 80049a4:	2520      	movs	r5, #32
 80049a6:	197b      	adds	r3, r7, r5
 80049a8:	185b      	adds	r3, r3, r1
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	197b      	adds	r3, r7, r5
 80049b0:	185b      	adds	r3, r3, r1
 80049b2:	2200      	movs	r2, #0
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	197b      	adds	r3, r7, r5
 80049b8:	185b      	adds	r3, r3, r1
 80049ba:	2200      	movs	r2, #0
 80049bc:	609a      	str	r2, [r3, #8]
	float gyro_data[3] = {0,0,0};
 80049be:	49ed      	ldr	r1, [pc, #948]	; (8004d74 <main+0x40c>)
 80049c0:	197b      	adds	r3, r7, r5
 80049c2:	185b      	adds	r3, r3, r1
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	197b      	adds	r3, r7, r5
 80049ca:	185b      	adds	r3, r3, r1
 80049cc:	2200      	movs	r2, #0
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	197b      	adds	r3, r7, r5
 80049d2:	185b      	adds	r3, r3, r1
 80049d4:	2200      	movs	r2, #0
 80049d6:	609a      	str	r2, [r3, #8]
	float accel_data_earthframe[3] = {0,0,0};
 80049d8:	4be7      	ldr	r3, [pc, #924]	; (8004d78 <main+0x410>)
 80049da:	22cf      	movs	r2, #207	; 0xcf
 80049dc:	00d2      	lsls	r2, r2, #3
 80049de:	4694      	mov	ip, r2
 80049e0:	2220      	movs	r2, #32
 80049e2:	4690      	mov	r8, r2
 80049e4:	44b8      	add	r8, r7
 80049e6:	44c4      	add	ip, r8
 80049e8:	4463      	add	r3, ip
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	4be2      	ldr	r3, [pc, #904]	; (8004d78 <main+0x410>)
 80049f0:	22cf      	movs	r2, #207	; 0xcf
 80049f2:	00d2      	lsls	r2, r2, #3
 80049f4:	4694      	mov	ip, r2
 80049f6:	2220      	movs	r2, #32
 80049f8:	4690      	mov	r8, r2
 80049fa:	44b8      	add	r8, r7
 80049fc:	44c4      	add	ip, r8
 80049fe:	4463      	add	r3, ip
 8004a00:	2200      	movs	r2, #0
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	4bdc      	ldr	r3, [pc, #880]	; (8004d78 <main+0x410>)
 8004a06:	22cf      	movs	r2, #207	; 0xcf
 8004a08:	00d2      	lsls	r2, r2, #3
 8004a0a:	4694      	mov	ip, r2
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	4690      	mov	r8, r2
 8004a10:	44b8      	add	r8, r7
 8004a12:	44c4      	add	ip, r8
 8004a14:	4463      	add	r3, ip
 8004a16:	2200      	movs	r2, #0
 8004a18:	609a      	str	r2, [r3, #8]
	float gyro_bias[3] = {0,0,0};
 8004a1a:	4bd8      	ldr	r3, [pc, #864]	; (8004d7c <main+0x414>)
 8004a1c:	22cf      	movs	r2, #207	; 0xcf
 8004a1e:	00d2      	lsls	r2, r2, #3
 8004a20:	4694      	mov	ip, r2
 8004a22:	2220      	movs	r2, #32
 8004a24:	4690      	mov	r8, r2
 8004a26:	44b8      	add	r8, r7
 8004a28:	44c4      	add	ip, r8
 8004a2a:	4463      	add	r3, ip
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	4bd2      	ldr	r3, [pc, #840]	; (8004d7c <main+0x414>)
 8004a32:	22cf      	movs	r2, #207	; 0xcf
 8004a34:	00d2      	lsls	r2, r2, #3
 8004a36:	4694      	mov	ip, r2
 8004a38:	2220      	movs	r2, #32
 8004a3a:	4690      	mov	r8, r2
 8004a3c:	44b8      	add	r8, r7
 8004a3e:	44c4      	add	ip, r8
 8004a40:	4463      	add	r3, ip
 8004a42:	2200      	movs	r2, #0
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	4bcd      	ldr	r3, [pc, #820]	; (8004d7c <main+0x414>)
 8004a48:	22cf      	movs	r2, #207	; 0xcf
 8004a4a:	00d2      	lsls	r2, r2, #3
 8004a4c:	4694      	mov	ip, r2
 8004a4e:	2220      	movs	r2, #32
 8004a50:	4690      	mov	r8, r2
 8004a52:	44b8      	add	r8, r7
 8004a54:	44c4      	add	ip, r8
 8004a56:	4463      	add	r3, ip
 8004a58:	2200      	movs	r2, #0
 8004a5a:	609a      	str	r2, [r3, #8]
	float accel_bias[2] = {0,0};
 8004a5c:	4bc8      	ldr	r3, [pc, #800]	; (8004d80 <main+0x418>)
 8004a5e:	22cf      	movs	r2, #207	; 0xcf
 8004a60:	00d2      	lsls	r2, r2, #3
 8004a62:	4694      	mov	ip, r2
 8004a64:	2220      	movs	r2, #32
 8004a66:	4690      	mov	r8, r2
 8004a68:	44b8      	add	r8, r7
 8004a6a:	44c4      	add	ip, r8
 8004a6c:	4463      	add	r3, ip
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	4bc3      	ldr	r3, [pc, #780]	; (8004d80 <main+0x418>)
 8004a74:	22cf      	movs	r2, #207	; 0xcf
 8004a76:	00d2      	lsls	r2, r2, #3
 8004a78:	4694      	mov	ip, r2
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	4690      	mov	r8, r2
 8004a7e:	44b8      	add	r8, r7
 8004a80:	44c4      	add	ip, r8
 8004a82:	4463      	add	r3, ip
 8004a84:	2200      	movs	r2, #0
 8004a86:	605a      	str	r2, [r3, #4]

	float tampering_buffer[6][TAMPERING_BUFFER_SIZE];

	// High pass Filter Variables
	float low_pass_gyro[3] = {0,0,0};
 8004a88:	4bbe      	ldr	r3, [pc, #760]	; (8004d84 <main+0x41c>)
 8004a8a:	22cf      	movs	r2, #207	; 0xcf
 8004a8c:	00d2      	lsls	r2, r2, #3
 8004a8e:	4694      	mov	ip, r2
 8004a90:	2220      	movs	r2, #32
 8004a92:	4690      	mov	r8, r2
 8004a94:	44b8      	add	r8, r7
 8004a96:	44c4      	add	ip, r8
 8004a98:	4463      	add	r3, ip
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	4bb9      	ldr	r3, [pc, #740]	; (8004d84 <main+0x41c>)
 8004aa0:	22cf      	movs	r2, #207	; 0xcf
 8004aa2:	00d2      	lsls	r2, r2, #3
 8004aa4:	4694      	mov	ip, r2
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	4690      	mov	r8, r2
 8004aaa:	44b8      	add	r8, r7
 8004aac:	44c4      	add	ip, r8
 8004aae:	4463      	add	r3, ip
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	605a      	str	r2, [r3, #4]
 8004ab4:	4bb3      	ldr	r3, [pc, #716]	; (8004d84 <main+0x41c>)
 8004ab6:	22cf      	movs	r2, #207	; 0xcf
 8004ab8:	00d2      	lsls	r2, r2, #3
 8004aba:	4694      	mov	ip, r2
 8004abc:	2220      	movs	r2, #32
 8004abe:	4690      	mov	r8, r2
 8004ac0:	44b8      	add	r8, r7
 8004ac2:	44c4      	add	ip, r8
 8004ac4:	4463      	add	r3, ip
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	609a      	str	r2, [r3, #8]
	float prev_low_pass_gyro[3] = {0,0,0};
 8004aca:	4baf      	ldr	r3, [pc, #700]	; (8004d88 <main+0x420>)
 8004acc:	22cf      	movs	r2, #207	; 0xcf
 8004ace:	00d2      	lsls	r2, r2, #3
 8004ad0:	4694      	mov	ip, r2
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	4690      	mov	r8, r2
 8004ad6:	44b8      	add	r8, r7
 8004ad8:	44c4      	add	ip, r8
 8004ada:	4463      	add	r3, ip
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	4ba9      	ldr	r3, [pc, #676]	; (8004d88 <main+0x420>)
 8004ae2:	22cf      	movs	r2, #207	; 0xcf
 8004ae4:	00d2      	lsls	r2, r2, #3
 8004ae6:	4694      	mov	ip, r2
 8004ae8:	2220      	movs	r2, #32
 8004aea:	4690      	mov	r8, r2
 8004aec:	44b8      	add	r8, r7
 8004aee:	44c4      	add	ip, r8
 8004af0:	4463      	add	r3, ip
 8004af2:	2200      	movs	r2, #0
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	4ba4      	ldr	r3, [pc, #656]	; (8004d88 <main+0x420>)
 8004af8:	22cf      	movs	r2, #207	; 0xcf
 8004afa:	00d2      	lsls	r2, r2, #3
 8004afc:	4694      	mov	ip, r2
 8004afe:	2220      	movs	r2, #32
 8004b00:	4690      	mov	r8, r2
 8004b02:	44b8      	add	r8, r7
 8004b04:	44c4      	add	ip, r8
 8004b06:	4463      	add	r3, ip
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
	float low_alpha = 0.2;
 8004b0c:	4b9f      	ldr	r3, [pc, #636]	; (8004d8c <main+0x424>)
 8004b0e:	22ce      	movs	r2, #206	; 0xce
 8004b10:	00d2      	lsls	r2, r2, #3
 8004b12:	2120      	movs	r1, #32
 8004b14:	468c      	mov	ip, r1
 8004b16:	44bc      	add	ip, r7
 8004b18:	4462      	add	r2, ip
 8004b1a:	6013      	str	r3, [r2, #0]

	float low_pass_accel[3] = {0,0,0};
 8004b1c:	4b9c      	ldr	r3, [pc, #624]	; (8004d90 <main+0x428>)
 8004b1e:	22cf      	movs	r2, #207	; 0xcf
 8004b20:	00d2      	lsls	r2, r2, #3
 8004b22:	4694      	mov	ip, r2
 8004b24:	2220      	movs	r2, #32
 8004b26:	4690      	mov	r8, r2
 8004b28:	44b8      	add	r8, r7
 8004b2a:	44c4      	add	ip, r8
 8004b2c:	4463      	add	r3, ip
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	4b97      	ldr	r3, [pc, #604]	; (8004d90 <main+0x428>)
 8004b34:	22cf      	movs	r2, #207	; 0xcf
 8004b36:	00d2      	lsls	r2, r2, #3
 8004b38:	4694      	mov	ip, r2
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	4690      	mov	r8, r2
 8004b3e:	44b8      	add	r8, r7
 8004b40:	44c4      	add	ip, r8
 8004b42:	4463      	add	r3, ip
 8004b44:	2200      	movs	r2, #0
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	4b91      	ldr	r3, [pc, #580]	; (8004d90 <main+0x428>)
 8004b4a:	22cf      	movs	r2, #207	; 0xcf
 8004b4c:	00d2      	lsls	r2, r2, #3
 8004b4e:	4694      	mov	ip, r2
 8004b50:	2220      	movs	r2, #32
 8004b52:	4690      	mov	r8, r2
 8004b54:	44b8      	add	r8, r7
 8004b56:	44c4      	add	ip, r8
 8004b58:	4463      	add	r3, ip
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]
	float prev_low_pass_accel[3] = {0,0,0};
 8004b5e:	4b8d      	ldr	r3, [pc, #564]	; (8004d94 <main+0x42c>)
 8004b60:	22cf      	movs	r2, #207	; 0xcf
 8004b62:	00d2      	lsls	r2, r2, #3
 8004b64:	4694      	mov	ip, r2
 8004b66:	2220      	movs	r2, #32
 8004b68:	4690      	mov	r8, r2
 8004b6a:	44b8      	add	r8, r7
 8004b6c:	44c4      	add	ip, r8
 8004b6e:	4463      	add	r3, ip
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	4b87      	ldr	r3, [pc, #540]	; (8004d94 <main+0x42c>)
 8004b76:	22cf      	movs	r2, #207	; 0xcf
 8004b78:	00d2      	lsls	r2, r2, #3
 8004b7a:	4694      	mov	ip, r2
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	4690      	mov	r8, r2
 8004b80:	44b8      	add	r8, r7
 8004b82:	44c4      	add	ip, r8
 8004b84:	4463      	add	r3, ip
 8004b86:	2200      	movs	r2, #0
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	4b82      	ldr	r3, [pc, #520]	; (8004d94 <main+0x42c>)
 8004b8c:	22cf      	movs	r2, #207	; 0xcf
 8004b8e:	00d2      	lsls	r2, r2, #3
 8004b90:	4694      	mov	ip, r2
 8004b92:	2220      	movs	r2, #32
 8004b94:	4690      	mov	r8, r2
 8004b96:	44b8      	add	r8, r7
 8004b98:	44c4      	add	ip, r8
 8004b9a:	4463      	add	r3, ip
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	609a      	str	r2, [r3, #8]
	float low_alpha_acc = 0.2;
 8004ba0:	4b7a      	ldr	r3, [pc, #488]	; (8004d8c <main+0x424>)
 8004ba2:	4a7d      	ldr	r2, [pc, #500]	; (8004d98 <main+0x430>)
 8004ba4:	2120      	movs	r1, #32
 8004ba6:	468c      	mov	ip, r1
 8004ba8:	44bc      	add	ip, r7
 8004baa:	4462      	add	r2, ip
 8004bac:	6013      	str	r3, [r2, #0]

	struct quaternion quat = {1,0,0,0};
 8004bae:	4b7b      	ldr	r3, [pc, #492]	; (8004d9c <main+0x434>)
 8004bb0:	22cf      	movs	r2, #207	; 0xcf
 8004bb2:	00d2      	lsls	r2, r2, #3
 8004bb4:	4694      	mov	ip, r2
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	4690      	mov	r8, r2
 8004bba:	44b8      	add	r8, r7
 8004bbc:	44c4      	add	ip, r8
 8004bbe:	4463      	add	r3, ip
 8004bc0:	22fe      	movs	r2, #254	; 0xfe
 8004bc2:	0592      	lsls	r2, r2, #22
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	4b75      	ldr	r3, [pc, #468]	; (8004d9c <main+0x434>)
 8004bc8:	22cf      	movs	r2, #207	; 0xcf
 8004bca:	00d2      	lsls	r2, r2, #3
 8004bcc:	4694      	mov	ip, r2
 8004bce:	2220      	movs	r2, #32
 8004bd0:	4690      	mov	r8, r2
 8004bd2:	44b8      	add	r8, r7
 8004bd4:	44c4      	add	ip, r8
 8004bd6:	4463      	add	r3, ip
 8004bd8:	2200      	movs	r2, #0
 8004bda:	605a      	str	r2, [r3, #4]
 8004bdc:	4b6f      	ldr	r3, [pc, #444]	; (8004d9c <main+0x434>)
 8004bde:	22cf      	movs	r2, #207	; 0xcf
 8004be0:	00d2      	lsls	r2, r2, #3
 8004be2:	4694      	mov	ip, r2
 8004be4:	2220      	movs	r2, #32
 8004be6:	4690      	mov	r8, r2
 8004be8:	44b8      	add	r8, r7
 8004bea:	44c4      	add	ip, r8
 8004bec:	4463      	add	r3, ip
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
 8004bf2:	4b6a      	ldr	r3, [pc, #424]	; (8004d9c <main+0x434>)
 8004bf4:	22cf      	movs	r2, #207	; 0xcf
 8004bf6:	00d2      	lsls	r2, r2, #3
 8004bf8:	4694      	mov	ip, r2
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	4690      	mov	r8, r2
 8004bfe:	44b8      	add	r8, r7
 8004c00:	44c4      	add	ip, r8
 8004c02:	4463      	add	r3, ip
 8004c04:	2200      	movs	r2, #0
 8004c06:	60da      	str	r2, [r3, #12]
	struct quaternion quat_buffer = {1,0,0,0};
 8004c08:	4b65      	ldr	r3, [pc, #404]	; (8004da0 <main+0x438>)
 8004c0a:	22cf      	movs	r2, #207	; 0xcf
 8004c0c:	00d2      	lsls	r2, r2, #3
 8004c0e:	4694      	mov	ip, r2
 8004c10:	2220      	movs	r2, #32
 8004c12:	4690      	mov	r8, r2
 8004c14:	44b8      	add	r8, r7
 8004c16:	44c4      	add	ip, r8
 8004c18:	4463      	add	r3, ip
 8004c1a:	22fe      	movs	r2, #254	; 0xfe
 8004c1c:	0592      	lsls	r2, r2, #22
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	4b5f      	ldr	r3, [pc, #380]	; (8004da0 <main+0x438>)
 8004c22:	22cf      	movs	r2, #207	; 0xcf
 8004c24:	00d2      	lsls	r2, r2, #3
 8004c26:	4694      	mov	ip, r2
 8004c28:	2220      	movs	r2, #32
 8004c2a:	4690      	mov	r8, r2
 8004c2c:	44b8      	add	r8, r7
 8004c2e:	44c4      	add	ip, r8
 8004c30:	4463      	add	r3, ip
 8004c32:	2200      	movs	r2, #0
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	4b5a      	ldr	r3, [pc, #360]	; (8004da0 <main+0x438>)
 8004c38:	22cf      	movs	r2, #207	; 0xcf
 8004c3a:	00d2      	lsls	r2, r2, #3
 8004c3c:	4694      	mov	ip, r2
 8004c3e:	2220      	movs	r2, #32
 8004c40:	4690      	mov	r8, r2
 8004c42:	44b8      	add	r8, r7
 8004c44:	44c4      	add	ip, r8
 8004c46:	4463      	add	r3, ip
 8004c48:	2200      	movs	r2, #0
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	4b54      	ldr	r3, [pc, #336]	; (8004da0 <main+0x438>)
 8004c4e:	22cf      	movs	r2, #207	; 0xcf
 8004c50:	00d2      	lsls	r2, r2, #3
 8004c52:	4694      	mov	ip, r2
 8004c54:	2220      	movs	r2, #32
 8004c56:	4690      	mov	r8, r2
 8004c58:	44b8      	add	r8, r7
 8004c5a:	44c4      	add	ip, r8
 8004c5c:	4463      	add	r3, ip
 8004c5e:	2200      	movs	r2, #0
 8004c60:	60da      	str	r2, [r3, #12]
	struct euler_angles angles = {0,0,0};
 8004c62:	4b50      	ldr	r3, [pc, #320]	; (8004da4 <main+0x43c>)
 8004c64:	22cf      	movs	r2, #207	; 0xcf
 8004c66:	00d2      	lsls	r2, r2, #3
 8004c68:	4694      	mov	ip, r2
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	4690      	mov	r8, r2
 8004c6e:	44b8      	add	r8, r7
 8004c70:	44c4      	add	ip, r8
 8004c72:	4463      	add	r3, ip
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	4b4a      	ldr	r3, [pc, #296]	; (8004da4 <main+0x43c>)
 8004c7a:	22cf      	movs	r2, #207	; 0xcf
 8004c7c:	00d2      	lsls	r2, r2, #3
 8004c7e:	4694      	mov	ip, r2
 8004c80:	2220      	movs	r2, #32
 8004c82:	4690      	mov	r8, r2
 8004c84:	44b8      	add	r8, r7
 8004c86:	44c4      	add	ip, r8
 8004c88:	4463      	add	r3, ip
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	4b45      	ldr	r3, [pc, #276]	; (8004da4 <main+0x43c>)
 8004c90:	22cf      	movs	r2, #207	; 0xcf
 8004c92:	00d2      	lsls	r2, r2, #3
 8004c94:	4694      	mov	ip, r2
 8004c96:	2220      	movs	r2, #32
 8004c98:	4690      	mov	r8, r2
 8004c9a:	44b8      	add	r8, r7
 8004c9c:	44c4      	add	ip, r8
 8004c9e:	4463      	add	r3, ip
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	609a      	str	r2, [r3, #8]
	struct euler_angles angles_buffer = {0,0,0};
 8004ca4:	4b40      	ldr	r3, [pc, #256]	; (8004da8 <main+0x440>)
 8004ca6:	22cf      	movs	r2, #207	; 0xcf
 8004ca8:	00d2      	lsls	r2, r2, #3
 8004caa:	4694      	mov	ip, r2
 8004cac:	2220      	movs	r2, #32
 8004cae:	4690      	mov	r8, r2
 8004cb0:	44b8      	add	r8, r7
 8004cb2:	44c4      	add	ip, r8
 8004cb4:	4463      	add	r3, ip
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	4b3b      	ldr	r3, [pc, #236]	; (8004da8 <main+0x440>)
 8004cbc:	22cf      	movs	r2, #207	; 0xcf
 8004cbe:	00d2      	lsls	r2, r2, #3
 8004cc0:	4694      	mov	ip, r2
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	4690      	mov	r8, r2
 8004cc6:	44b8      	add	r8, r7
 8004cc8:	44c4      	add	ip, r8
 8004cca:	4463      	add	r3, ip
 8004ccc:	2200      	movs	r2, #0
 8004cce:	605a      	str	r2, [r3, #4]
 8004cd0:	4b35      	ldr	r3, [pc, #212]	; (8004da8 <main+0x440>)
 8004cd2:	22cf      	movs	r2, #207	; 0xcf
 8004cd4:	00d2      	lsls	r2, r2, #3
 8004cd6:	4694      	mov	ip, r2
 8004cd8:	2220      	movs	r2, #32
 8004cda:	4690      	mov	r8, r2
 8004cdc:	44b8      	add	r8, r7
 8004cde:	44c4      	add	ip, r8
 8004ce0:	4463      	add	r3, ip
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	609a      	str	r2, [r3, #8]
	struct euler_angles diff = {0,0,0};
 8004ce6:	4b31      	ldr	r3, [pc, #196]	; (8004dac <main+0x444>)
 8004ce8:	22cf      	movs	r2, #207	; 0xcf
 8004cea:	00d2      	lsls	r2, r2, #3
 8004cec:	4694      	mov	ip, r2
 8004cee:	2220      	movs	r2, #32
 8004cf0:	4690      	mov	r8, r2
 8004cf2:	44b8      	add	r8, r7
 8004cf4:	44c4      	add	ip, r8
 8004cf6:	4463      	add	r3, ip
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <main+0x444>)
 8004cfe:	22cf      	movs	r2, #207	; 0xcf
 8004d00:	00d2      	lsls	r2, r2, #3
 8004d02:	4694      	mov	ip, r2
 8004d04:	2220      	movs	r2, #32
 8004d06:	4690      	mov	r8, r2
 8004d08:	44b8      	add	r8, r7
 8004d0a:	44c4      	add	ip, r8
 8004d0c:	4463      	add	r3, ip
 8004d0e:	2200      	movs	r2, #0
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	4b26      	ldr	r3, [pc, #152]	; (8004dac <main+0x444>)
 8004d14:	22cf      	movs	r2, #207	; 0xcf
 8004d16:	00d2      	lsls	r2, r2, #3
 8004d18:	4694      	mov	ip, r2
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	4690      	mov	r8, r2
 8004d1e:	44b8      	add	r8, r7
 8004d20:	44c4      	add	ip, r8
 8004d22:	4463      	add	r3, ip
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
	struct euler_angles prev = {0,0,0};
 8004d28:	4b21      	ldr	r3, [pc, #132]	; (8004db0 <main+0x448>)
 8004d2a:	22cf      	movs	r2, #207	; 0xcf
 8004d2c:	00d2      	lsls	r2, r2, #3
 8004d2e:	4694      	mov	ip, r2
 8004d30:	2220      	movs	r2, #32
 8004d32:	4690      	mov	r8, r2
 8004d34:	44b8      	add	r8, r7
 8004d36:	44c4      	add	ip, r8
 8004d38:	4463      	add	r3, ip
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <main+0x448>)
 8004d40:	22cf      	movs	r2, #207	; 0xcf
 8004d42:	00d2      	lsls	r2, r2, #3
 8004d44:	4694      	mov	ip, r2
 8004d46:	2220      	movs	r2, #32
 8004d48:	4690      	mov	r8, r2
 8004d4a:	44b8      	add	r8, r7
 8004d4c:	44c4      	add	ip, r8
 8004d4e:	4463      	add	r3, ip
 8004d50:	2200      	movs	r2, #0
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <main+0x448>)
 8004d56:	22cf      	movs	r2, #207	; 0xcf
 8004d58:	00d2      	lsls	r2, r2, #3
 8004d5a:	4694      	mov	ip, r2
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	4690      	mov	r8, r2
 8004d60:	44b8      	add	r8, r7
 8004d62:	44c4      	add	ip, r8
 8004d64:	4463      	add	r3, ip
 8004d66:	e025      	b.n	8004db4 <main+0x44c>
 8004d68:	fffff940 	.word	0xfffff940
 8004d6c:	20000498 	.word	0x20000498
 8004d70:	20000434 	.word	0x20000434
 8004d74:	0000057c 	.word	0x0000057c
 8004d78:	fffffef8 	.word	0xfffffef8
 8004d7c:	fffffeec 	.word	0xfffffeec
 8004d80:	fffffee4 	.word	0xfffffee4
 8004d84:	fffffa28 	.word	0xfffffa28
 8004d88:	fffffa1c 	.word	0xfffffa1c
 8004d8c:	3e4ccccd 	.word	0x3e4ccccd
 8004d90:	fffffa10 	.word	0xfffffa10
 8004d94:	fffffa04 	.word	0xfffffa04
 8004d98:	0000066c 	.word	0x0000066c
 8004d9c:	fffff9f4 	.word	0xfffff9f4
 8004da0:	fffff9e4 	.word	0xfffff9e4
 8004da4:	fffff9d8 	.word	0xfffff9d8
 8004da8:	fffff9cc 	.word	0xfffff9cc
 8004dac:	fffff9c0 	.word	0xfffff9c0
 8004db0:	fffff9b4 	.word	0xfffff9b4
 8004db4:	2200      	movs	r2, #0
 8004db6:	609a      	str	r2, [r3, #8]
	struct matrix rotation_matrix_earth = {0,0,0,0,0,0,0,0,0};
 8004db8:	4bab      	ldr	r3, [pc, #684]	; (8005068 <main+0x700>)
 8004dba:	22cf      	movs	r2, #207	; 0xcf
 8004dbc:	00d2      	lsls	r2, r2, #3
 8004dbe:	4694      	mov	ip, r2
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	4690      	mov	r8, r2
 8004dc4:	44b8      	add	r8, r7
 8004dc6:	44c4      	add	ip, r8
 8004dc8:	4463      	add	r3, ip
 8004dca:	0018      	movs	r0, r3
 8004dcc:	2324      	movs	r3, #36	; 0x24
 8004dce:	001a      	movs	r2, r3
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	f003 ff55 	bl	8008c80 <memset>

	float duration_diff = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	22cd      	movs	r2, #205	; 0xcd
 8004dda:	00d2      	lsls	r2, r2, #3
 8004ddc:	2120      	movs	r1, #32
 8004dde:	468c      	mov	ip, r1
 8004de0:	44bc      	add	ip, r7
 8004de2:	4462      	add	r2, ip
 8004de4:	6013      	str	r3, [r2, #0]
	float duration = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	4aa0      	ldr	r2, [pc, #640]	; (800506c <main+0x704>)
 8004dea:	2120      	movs	r1, #32
 8004dec:	468c      	mov	ip, r1
 8004dee:	44bc      	add	ip, r7
 8004df0:	4462      	add	r2, ip
 8004df2:	6013      	str	r3, [r2, #0]
	float clock = 16000000/16.0;
 8004df4:	4b9e      	ldr	r3, [pc, #632]	; (8005070 <main+0x708>)
 8004df6:	22cc      	movs	r2, #204	; 0xcc
 8004df8:	00d2      	lsls	r2, r2, #3
 8004dfa:	2120      	movs	r1, #32
 8004dfc:	468c      	mov	ip, r1
 8004dfe:	44bc      	add	ip, r7
 8004e00:	4462      	add	r2, ip
 8004e02:	6013      	str	r3, [r2, #0]

	int8_t is_moving[3] = {0,0,0};
 8004e04:	4b9b      	ldr	r3, [pc, #620]	; (8005074 <main+0x70c>)
 8004e06:	22cf      	movs	r2, #207	; 0xcf
 8004e08:	00d2      	lsls	r2, r2, #3
 8004e0a:	4694      	mov	ip, r2
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	4690      	mov	r8, r2
 8004e10:	44b8      	add	r8, r7
 8004e12:	44c4      	add	ip, r8
 8004e14:	4463      	add	r3, ip
 8004e16:	4a98      	ldr	r2, [pc, #608]	; (8005078 <main+0x710>)
 8004e18:	8811      	ldrh	r1, [r2, #0]
 8004e1a:	8019      	strh	r1, [r3, #0]
 8004e1c:	7892      	ldrb	r2, [r2, #2]
 8004e1e:	709a      	strb	r2, [r3, #2]
	int8_t was_moving = 0;
 8004e20:	4b96      	ldr	r3, [pc, #600]	; (800507c <main+0x714>)
 8004e22:	2220      	movs	r2, #32
 8004e24:	4694      	mov	ip, r2
 8004e26:	44bc      	add	ip, r7
 8004e28:	4463      	add	r3, ip
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
	int8_t moving_expected = 0;
 8004e2e:	4b94      	ldr	r3, [pc, #592]	; (8005080 <main+0x718>)
 8004e30:	2220      	movs	r2, #32
 8004e32:	4694      	mov	ip, r2
 8004e34:	44bc      	add	ip, r7
 8004e36:	4463      	add	r3, ip
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
	uint8_t uart_prescaler = 0;
 8004e3c:	4b91      	ldr	r3, [pc, #580]	; (8005084 <main+0x71c>)
 8004e3e:	2220      	movs	r2, #32
 8004e40:	4694      	mov	ip, r2
 8004e42:	44bc      	add	ip, r7
 8004e44:	4463      	add	r3, ip
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);
 8004e4a:	4b8f      	ldr	r3, [pc, #572]	; (8005088 <main+0x720>)
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f003 f8a1 	bl	8007f94 <HAL_TIM_Base_Start>
	ICM_AccCalibration(&hspi1,&huart2,accel_bias, IMU_MOVABLE);
 8004e52:	4c8e      	ldr	r4, [pc, #568]	; (800508c <main+0x724>)
 8004e54:	197b      	adds	r3, r7, r5
 8004e56:	191a      	adds	r2, r3, r4
 8004e58:	498d      	ldr	r1, [pc, #564]	; (8005090 <main+0x728>)
 8004e5a:	488e      	ldr	r0, [pc, #568]	; (8005094 <main+0x72c>)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f7fe fc6f 	bl	8003740 <ICM_AccCalibration>
	CalculateRotationMatrix(accel_bias, &rotation_matrix_earth);
 8004e62:	2308      	movs	r3, #8
 8004e64:	197a      	adds	r2, r7, r5
 8004e66:	18d2      	adds	r2, r2, r3
 8004e68:	197b      	adds	r3, r7, r5
 8004e6a:	191b      	adds	r3, r3, r4
 8004e6c:	0011      	movs	r1, r2
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f7ff f850 	bl	8003f14 <CalculateRotationMatrix>
	ICM_GyroCalibration(&hspi1,&huart2, gyro_bias, IMU_MOVABLE);
 8004e74:	4b88      	ldr	r3, [pc, #544]	; (8005098 <main+0x730>)
 8004e76:	197a      	adds	r2, r7, r5
 8004e78:	18d2      	adds	r2, r2, r3
 8004e7a:	4985      	ldr	r1, [pc, #532]	; (8005090 <main+0x728>)
 8004e7c:	4885      	ldr	r0, [pc, #532]	; (8005094 <main+0x72c>)
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f7fe fb02 	bl	8003488 <ICM_GyroCalibration>

	sprintf(uart_buffer, "UART_PREAMBLE\r\n");
 8004e84:	4a85      	ldr	r2, [pc, #532]	; (800509c <main+0x734>)
 8004e86:	4c86      	ldr	r4, [pc, #536]	; (80050a0 <main+0x738>)
 8004e88:	197b      	adds	r3, r7, r5
 8004e8a:	191b      	adds	r3, r3, r4
 8004e8c:	0011      	movs	r1, r2
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f004 fb78 	bl	8009584 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8004e94:	197b      	adds	r3, r7, r5
 8004e96:	191b      	adds	r3, r3, r4
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f7fb f931 	bl	8000100 <strlen>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	23fa      	movs	r3, #250	; 0xfa
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	1979      	adds	r1, r7, r5
 8004ea8:	1909      	adds	r1, r1, r4
 8004eaa:	4879      	ldr	r0, [pc, #484]	; (8005090 <main+0x728>)
 8004eac:	f003 f98c 	bl	80081c8 <HAL_UART_Transmit>
			moving_expected = 1;
		}
	}
	*/

	uart_prescaler = (uart_prescaler + 1) % 50;
 8004eb0:	4c74      	ldr	r4, [pc, #464]	; (8005084 <main+0x71c>)
 8004eb2:	2520      	movs	r5, #32
 8004eb4:	197b      	adds	r3, r7, r5
 8004eb6:	191b      	adds	r3, r3, r4
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	2132      	movs	r1, #50	; 0x32
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7fb faaa 	bl	8000418 <__aeabi_idivmod>
 8004ec4:	000b      	movs	r3, r1
 8004ec6:	001a      	movs	r2, r3
 8004ec8:	197b      	adds	r3, r7, r5
 8004eca:	191b      	adds	r3, r3, r4
 8004ecc:	701a      	strb	r2, [r3, #0]

	ICM_ReadGyroData(&hspi1, gyro_data, gyro_bias, IMU_MOVABLE);
 8004ece:	4b72      	ldr	r3, [pc, #456]	; (8005098 <main+0x730>)
 8004ed0:	197a      	adds	r2, r7, r5
 8004ed2:	18d2      	adds	r2, r2, r3
 8004ed4:	4c73      	ldr	r4, [pc, #460]	; (80050a4 <main+0x73c>)
 8004ed6:	002e      	movs	r6, r5
 8004ed8:	197b      	adds	r3, r7, r5
 8004eda:	1919      	adds	r1, r3, r4
 8004edc:	486d      	ldr	r0, [pc, #436]	; (8005094 <main+0x72c>)
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f7fe fd04 	bl	80038ec <ICM_ReadGyroData>
	ICM_ReadAccData(&hspi1, accel_data, IMU_MOVABLE);
 8004ee4:	25b1      	movs	r5, #177	; 0xb1
 8004ee6:	00ed      	lsls	r5, r5, #3
 8004ee8:	19bb      	adds	r3, r7, r6
 8004eea:	1959      	adds	r1, r3, r5
 8004eec:	4b69      	ldr	r3, [pc, #420]	; (8005094 <main+0x72c>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f7fe fdb9 	bl	8003a68 <ICM_ReadAccData>

	// Low-pass Filter Gyroscope & Acceleration
	GyroLowPassFilter(gyro_data, prev_low_pass_gyro, low_pass_gyro, low_alpha);
 8004ef6:	23ce      	movs	r3, #206	; 0xce
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	2220      	movs	r2, #32
 8004efc:	4694      	mov	ip, r2
 8004efe:	44bc      	add	ip, r7
 8004f00:	4463      	add	r3, ip
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	22a0      	movs	r2, #160	; 0xa0
 8004f06:	2120      	movs	r1, #32
 8004f08:	468c      	mov	ip, r1
 8004f0a:	44bc      	add	ip, r7
 8004f0c:	4462      	add	r2, ip
 8004f0e:	2194      	movs	r1, #148	; 0x94
 8004f10:	2020      	movs	r0, #32
 8004f12:	4684      	mov	ip, r0
 8004f14:	44bc      	add	ip, r7
 8004f16:	4461      	add	r1, ip
 8004f18:	19b8      	adds	r0, r7, r6
 8004f1a:	1900      	adds	r0, r0, r4
 8004f1c:	f7fe ff90 	bl	8003e40 <GyroLowPassFilter>
	GyroLowPassFilter(accel_data, prev_low_pass_accel, low_pass_accel, low_alpha_acc);
 8004f20:	4b61      	ldr	r3, [pc, #388]	; (80050a8 <main+0x740>)
 8004f22:	2220      	movs	r2, #32
 8004f24:	4694      	mov	ip, r2
 8004f26:	44bc      	add	ip, r7
 8004f28:	4463      	add	r3, ip
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2488      	movs	r4, #136	; 0x88
 8004f2e:	19ba      	adds	r2, r7, r6
 8004f30:	1912      	adds	r2, r2, r4
 8004f32:	217c      	movs	r1, #124	; 0x7c
 8004f34:	2020      	movs	r0, #32
 8004f36:	4684      	mov	ip, r0
 8004f38:	44bc      	add	ip, r7
 8004f3a:	4461      	add	r1, ip
 8004f3c:	19b8      	adds	r0, r7, r6
 8004f3e:	1940      	adds	r0, r0, r5
 8004f40:	f7fe ff7e 	bl	8003e40 <GyroLowPassFilter>

	CalculateAccelerometerInEarthFrame(&rotation_matrix_earth, low_pass_accel, accel_data_earthframe);
 8004f44:	23ae      	movs	r3, #174	; 0xae
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	19ba      	adds	r2, r7, r6
 8004f4a:	18d2      	adds	r2, r2, r3
 8004f4c:	19bb      	adds	r3, r7, r6
 8004f4e:	1919      	adds	r1, r3, r4
 8004f50:	2308      	movs	r3, #8
 8004f52:	2420      	movs	r4, #32
 8004f54:	46a4      	mov	ip, r4
 8004f56:	44bc      	add	ip, r7
 8004f58:	4463      	add	r3, ip
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f7ff fc0e 	bl	800477c <CalculateAccelerometerInEarthFrame>
	sprintf(uart_buffer, "{'ax':%.3f, 'ay':%.3f, 'az':%.3f, "
			"'gx':%.3f, 'gy':%.3f, 'gz':%.3f}\r\n",
			accel_data_earthframe[0], accel_data_earthframe[1], accel_data_earthframe[2],
 8004f60:	4b52      	ldr	r3, [pc, #328]	; (80050ac <main+0x744>)
 8004f62:	22cf      	movs	r2, #207	; 0xcf
 8004f64:	00d2      	lsls	r2, r2, #3
 8004f66:	4694      	mov	ip, r2
 8004f68:	2220      	movs	r2, #32
 8004f6a:	4690      	mov	r8, r2
 8004f6c:	44b8      	add	r8, r7
 8004f6e:	44c4      	add	ip, r8
 8004f70:	4463      	add	r3, ip
 8004f72:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer, "{'ax':%.3f, 'ay':%.3f, 'az':%.3f, "
 8004f74:	1c18      	adds	r0, r3, #0
 8004f76:	f7fd fe7b 	bl	8002c70 <__aeabi_f2d>
 8004f7a:	61b8      	str	r0, [r7, #24]
 8004f7c:	61f9      	str	r1, [r7, #28]
			accel_data_earthframe[0], accel_data_earthframe[1], accel_data_earthframe[2],
 8004f7e:	4b4b      	ldr	r3, [pc, #300]	; (80050ac <main+0x744>)
 8004f80:	21cf      	movs	r1, #207	; 0xcf
 8004f82:	00c9      	lsls	r1, r1, #3
 8004f84:	468c      	mov	ip, r1
 8004f86:	2220      	movs	r2, #32
 8004f88:	4690      	mov	r8, r2
 8004f8a:	44b8      	add	r8, r7
 8004f8c:	44c4      	add	ip, r8
 8004f8e:	4463      	add	r3, ip
 8004f90:	685b      	ldr	r3, [r3, #4]
	sprintf(uart_buffer, "{'ax':%.3f, 'ay':%.3f, 'az':%.3f, "
 8004f92:	1c18      	adds	r0, r3, #0
 8004f94:	f7fd fe6c 	bl	8002c70 <__aeabi_f2d>
 8004f98:	0004      	movs	r4, r0
 8004f9a:	000d      	movs	r5, r1
			accel_data_earthframe[0], accel_data_earthframe[1], accel_data_earthframe[2],
 8004f9c:	4b43      	ldr	r3, [pc, #268]	; (80050ac <main+0x744>)
 8004f9e:	21cf      	movs	r1, #207	; 0xcf
 8004fa0:	00c9      	lsls	r1, r1, #3
 8004fa2:	468c      	mov	ip, r1
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	4690      	mov	r8, r2
 8004fa8:	44b8      	add	r8, r7
 8004faa:	44c4      	add	ip, r8
 8004fac:	4463      	add	r3, ip
 8004fae:	689b      	ldr	r3, [r3, #8]
	sprintf(uart_buffer, "{'ax':%.3f, 'ay':%.3f, 'az':%.3f, "
 8004fb0:	1c18      	adds	r0, r3, #0
 8004fb2:	f7fd fe5d 	bl	8002c70 <__aeabi_f2d>
 8004fb6:	6138      	str	r0, [r7, #16]
 8004fb8:	6179      	str	r1, [r7, #20]
			low_pass_gyro[0], low_pass_gyro[1], low_pass_gyro[2]);
 8004fba:	4b3d      	ldr	r3, [pc, #244]	; (80050b0 <main+0x748>)
 8004fbc:	21cf      	movs	r1, #207	; 0xcf
 8004fbe:	00c9      	lsls	r1, r1, #3
 8004fc0:	468c      	mov	ip, r1
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	4690      	mov	r8, r2
 8004fc6:	44b8      	add	r8, r7
 8004fc8:	44c4      	add	ip, r8
 8004fca:	4463      	add	r3, ip
 8004fcc:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer, "{'ax':%.3f, 'ay':%.3f, 'az':%.3f, "
 8004fce:	1c18      	adds	r0, r3, #0
 8004fd0:	f7fd fe4e 	bl	8002c70 <__aeabi_f2d>
 8004fd4:	60b8      	str	r0, [r7, #8]
 8004fd6:	60f9      	str	r1, [r7, #12]
			low_pass_gyro[0], low_pass_gyro[1], low_pass_gyro[2]);
 8004fd8:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <main+0x748>)
 8004fda:	21cf      	movs	r1, #207	; 0xcf
 8004fdc:	00c9      	lsls	r1, r1, #3
 8004fde:	468c      	mov	ip, r1
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	4690      	mov	r8, r2
 8004fe4:	44b8      	add	r8, r7
 8004fe6:	44c4      	add	ip, r8
 8004fe8:	4463      	add	r3, ip
 8004fea:	685b      	ldr	r3, [r3, #4]
	sprintf(uart_buffer, "{'ax':%.3f, 'ay':%.3f, 'az':%.3f, "
 8004fec:	1c18      	adds	r0, r3, #0
 8004fee:	f7fd fe3f 	bl	8002c70 <__aeabi_f2d>
 8004ff2:	6038      	str	r0, [r7, #0]
 8004ff4:	6079      	str	r1, [r7, #4]
			low_pass_gyro[0], low_pass_gyro[1], low_pass_gyro[2]);
 8004ff6:	4b2e      	ldr	r3, [pc, #184]	; (80050b0 <main+0x748>)
 8004ff8:	21cf      	movs	r1, #207	; 0xcf
 8004ffa:	00c9      	lsls	r1, r1, #3
 8004ffc:	468c      	mov	ip, r1
 8004ffe:	2220      	movs	r2, #32
 8005000:	4690      	mov	r8, r2
 8005002:	44b8      	add	r8, r7
 8005004:	44c4      	add	ip, r8
 8005006:	4463      	add	r3, ip
 8005008:	689b      	ldr	r3, [r3, #8]
	sprintf(uart_buffer, "{'ax':%.3f, 'ay':%.3f, 'az':%.3f, "
 800500a:	1c18      	adds	r0, r3, #0
 800500c:	f7fd fe30 	bl	8002c70 <__aeabi_f2d>
 8005010:	0002      	movs	r2, r0
 8005012:	000b      	movs	r3, r1
 8005014:	4927      	ldr	r1, [pc, #156]	; (80050b4 <main+0x74c>)
 8005016:	4e22      	ldr	r6, [pc, #136]	; (80050a0 <main+0x738>)
 8005018:	2020      	movs	r0, #32
 800501a:	1838      	adds	r0, r7, r0
 800501c:	1980      	adds	r0, r0, r6
 800501e:	9208      	str	r2, [sp, #32]
 8005020:	9309      	str	r3, [sp, #36]	; 0x24
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	9206      	str	r2, [sp, #24]
 8005028:	9307      	str	r3, [sp, #28]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	9204      	str	r2, [sp, #16]
 8005030:	9305      	str	r3, [sp, #20]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	9202      	str	r2, [sp, #8]
 8005038:	9303      	str	r3, [sp, #12]
 800503a:	9400      	str	r4, [sp, #0]
 800503c:	9501      	str	r5, [sp, #4]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f004 fa9f 	bl	8009584 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8005046:	0034      	movs	r4, r6
 8005048:	2520      	movs	r5, #32
 800504a:	197b      	adds	r3, r7, r5
 800504c:	191b      	adds	r3, r3, r4
 800504e:	0018      	movs	r0, r3
 8005050:	f7fb f856 	bl	8000100 <strlen>
 8005054:	0003      	movs	r3, r0
 8005056:	b29a      	uxth	r2, r3
 8005058:	23fa      	movs	r3, #250	; 0xfa
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	1979      	adds	r1, r7, r5
 800505e:	1909      	adds	r1, r1, r4
 8005060:	480b      	ldr	r0, [pc, #44]	; (8005090 <main+0x728>)
 8005062:	f003 f8b1 	bl	80081c8 <HAL_UART_Transmit>
	uart_prescaler = (uart_prescaler + 1) % 50;
 8005066:	e723      	b.n	8004eb0 <main+0x548>
 8005068:	fffff990 	.word	0xfffff990
 800506c:	00000664 	.word	0x00000664
 8005070:	49742400 	.word	0x49742400
 8005074:	fffff98c 	.word	0xfffff98c
 8005078:	0800dfd8 	.word	0x0800dfd8
 800507c:	0000065f 	.word	0x0000065f
 8005080:	0000065e 	.word	0x0000065e
 8005084:	00000677 	.word	0x00000677
 8005088:	20000528 	.word	0x20000528
 800508c:	0000055c 	.word	0x0000055c
 8005090:	20000498 	.word	0x20000498
 8005094:	20000434 	.word	0x20000434
 8005098:	00000564 	.word	0x00000564
 800509c:	0800df80 	.word	0x0800df80
 80050a0:	00000594 	.word	0x00000594
 80050a4:	0000057c 	.word	0x0000057c
 80050a8:	0000066c 	.word	0x0000066c
 80050ac:	fffffef8 	.word	0xfffffef8
 80050b0:	fffffa28 	.word	0xfffffa28
 80050b4:	0800df90 	.word	0x0800df90

080050b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b093      	sub	sp, #76	; 0x4c
 80050bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050be:	2414      	movs	r4, #20
 80050c0:	193b      	adds	r3, r7, r4
 80050c2:	0018      	movs	r0, r3
 80050c4:	2334      	movs	r3, #52	; 0x34
 80050c6:	001a      	movs	r2, r3
 80050c8:	2100      	movs	r1, #0
 80050ca:	f003 fdd9 	bl	8008c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050ce:	1d3b      	adds	r3, r7, #4
 80050d0:	0018      	movs	r0, r3
 80050d2:	2310      	movs	r3, #16
 80050d4:	001a      	movs	r2, r3
 80050d6:	2100      	movs	r1, #0
 80050d8:	f003 fdd2 	bl	8008c80 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	0018      	movs	r0, r3
 80050e2:	f001 f86d 	bl	80061c0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80050e6:	193b      	adds	r3, r7, r4
 80050e8:	220a      	movs	r2, #10
 80050ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80050ec:	193b      	adds	r3, r7, r4
 80050ee:	2280      	movs	r2, #128	; 0x80
 80050f0:	0052      	lsls	r2, r2, #1
 80050f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80050f4:	0021      	movs	r1, r4
 80050f6:	187b      	adds	r3, r7, r1
 80050f8:	2200      	movs	r2, #0
 80050fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80050fc:	187b      	adds	r3, r7, r1
 80050fe:	2240      	movs	r2, #64	; 0x40
 8005100:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005102:	187b      	adds	r3, r7, r1
 8005104:	2201      	movs	r2, #1
 8005106:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005108:	187b      	adds	r3, r7, r1
 800510a:	2200      	movs	r2, #0
 800510c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800510e:	187b      	adds	r3, r7, r1
 8005110:	0018      	movs	r0, r3
 8005112:	f001 f8a1 	bl	8006258 <HAL_RCC_OscConfig>
 8005116:	1e03      	subs	r3, r0, #0
 8005118:	d001      	beq.n	800511e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800511a:	f000 f991 	bl	8005440 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	2207      	movs	r2, #7
 8005122:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005124:	1d3b      	adds	r3, r7, #4
 8005126:	2200      	movs	r2, #0
 8005128:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800512a:	1d3b      	adds	r3, r7, #4
 800512c:	2200      	movs	r2, #0
 800512e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005130:	1d3b      	adds	r3, r7, #4
 8005132:	2200      	movs	r2, #0
 8005134:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005136:	1d3b      	adds	r3, r7, #4
 8005138:	2100      	movs	r1, #0
 800513a:	0018      	movs	r0, r3
 800513c:	f001 fba2 	bl	8006884 <HAL_RCC_ClockConfig>
 8005140:	1e03      	subs	r3, r0, #0
 8005142:	d001      	beq.n	8005148 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8005144:	f000 f97c 	bl	8005440 <Error_Handler>
  }
}
 8005148:	46c0      	nop			; (mov r8, r8)
 800514a:	46bd      	mov	sp, r7
 800514c:	b013      	add	sp, #76	; 0x4c
 800514e:	bd90      	pop	{r4, r7, pc}

08005150 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005154:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <MX_I2C1_Init+0x74>)
 8005156:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <MX_I2C1_Init+0x78>)
 8005158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800515a:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <MX_I2C1_Init+0x74>)
 800515c:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <MX_I2C1_Init+0x7c>)
 800515e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005160:	4b18      	ldr	r3, [pc, #96]	; (80051c4 <MX_I2C1_Init+0x74>)
 8005162:	2200      	movs	r2, #0
 8005164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005166:	4b17      	ldr	r3, [pc, #92]	; (80051c4 <MX_I2C1_Init+0x74>)
 8005168:	2201      	movs	r2, #1
 800516a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800516c:	4b15      	ldr	r3, [pc, #84]	; (80051c4 <MX_I2C1_Init+0x74>)
 800516e:	2200      	movs	r2, #0
 8005170:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005172:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <MX_I2C1_Init+0x74>)
 8005174:	2200      	movs	r2, #0
 8005176:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005178:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <MX_I2C1_Init+0x74>)
 800517a:	2200      	movs	r2, #0
 800517c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <MX_I2C1_Init+0x74>)
 8005180:	2200      	movs	r2, #0
 8005182:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005184:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <MX_I2C1_Init+0x74>)
 8005186:	2200      	movs	r2, #0
 8005188:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800518a:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <MX_I2C1_Init+0x74>)
 800518c:	0018      	movs	r0, r3
 800518e:	f000 fee9 	bl	8005f64 <HAL_I2C_Init>
 8005192:	1e03      	subs	r3, r0, #0
 8005194:	d001      	beq.n	800519a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005196:	f000 f953 	bl	8005440 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <MX_I2C1_Init+0x74>)
 800519c:	2100      	movs	r1, #0
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 ff76 	bl	8006090 <HAL_I2CEx_ConfigAnalogFilter>
 80051a4:	1e03      	subs	r3, r0, #0
 80051a6:	d001      	beq.n	80051ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80051a8:	f000 f94a 	bl	8005440 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80051ac:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <MX_I2C1_Init+0x74>)
 80051ae:	2100      	movs	r1, #0
 80051b0:	0018      	movs	r0, r3
 80051b2:	f000 ffb9 	bl	8006128 <HAL_I2CEx_ConfigDigitalFilter>
 80051b6:	1e03      	subs	r3, r0, #0
 80051b8:	d001      	beq.n	80051be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80051ba:	f000 f941 	bl	8005440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	200003bc 	.word	0x200003bc
 80051c8:	40005400 	.word	0x40005400
 80051cc:	00303d5b 	.word	0x00303d5b

080051d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80051d4:	4b13      	ldr	r3, [pc, #76]	; (8005224 <MX_RTC_Init+0x54>)
 80051d6:	4a14      	ldr	r2, [pc, #80]	; (8005228 <MX_RTC_Init+0x58>)
 80051d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <MX_RTC_Init+0x54>)
 80051dc:	2200      	movs	r2, #0
 80051de:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80051e0:	4b10      	ldr	r3, [pc, #64]	; (8005224 <MX_RTC_Init+0x54>)
 80051e2:	227f      	movs	r2, #127	; 0x7f
 80051e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80051e6:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <MX_RTC_Init+0x54>)
 80051e8:	22ff      	movs	r2, #255	; 0xff
 80051ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <MX_RTC_Init+0x54>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80051f2:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <MX_RTC_Init+0x54>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <MX_RTC_Init+0x54>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80051fe:	4b09      	ldr	r3, [pc, #36]	; (8005224 <MX_RTC_Init+0x54>)
 8005200:	2280      	movs	r2, #128	; 0x80
 8005202:	05d2      	lsls	r2, r2, #23
 8005204:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8005206:	4b07      	ldr	r3, [pc, #28]	; (8005224 <MX_RTC_Init+0x54>)
 8005208:	2200      	movs	r2, #0
 800520a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <MX_RTC_Init+0x54>)
 800520e:	0018      	movs	r0, r3
 8005210:	f001 fe16 	bl	8006e40 <HAL_RTC_Init>
 8005214:	1e03      	subs	r3, r0, #0
 8005216:	d001      	beq.n	800521c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8005218:	f000 f912 	bl	8005440 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	20000408 	.word	0x20000408
 8005228:	40002800 	.word	0x40002800

0800522c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <MX_SPI1_Init+0x74>)
 8005232:	4a1c      	ldr	r2, [pc, #112]	; (80052a4 <MX_SPI1_Init+0x78>)
 8005234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <MX_SPI1_Init+0x74>)
 8005238:	2282      	movs	r2, #130	; 0x82
 800523a:	0052      	lsls	r2, r2, #1
 800523c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800523e:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <MX_SPI1_Init+0x74>)
 8005240:	2200      	movs	r2, #0
 8005242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005244:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <MX_SPI1_Init+0x74>)
 8005246:	22e0      	movs	r2, #224	; 0xe0
 8005248:	00d2      	lsls	r2, r2, #3
 800524a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800524c:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <MX_SPI1_Init+0x74>)
 800524e:	2200      	movs	r2, #0
 8005250:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <MX_SPI1_Init+0x74>)
 8005254:	2200      	movs	r2, #0
 8005256:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <MX_SPI1_Init+0x74>)
 800525a:	2280      	movs	r2, #128	; 0x80
 800525c:	0092      	lsls	r2, r2, #2
 800525e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005260:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <MX_SPI1_Init+0x74>)
 8005262:	2200      	movs	r2, #0
 8005264:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005266:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <MX_SPI1_Init+0x74>)
 8005268:	2200      	movs	r2, #0
 800526a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <MX_SPI1_Init+0x74>)
 800526e:	2200      	movs	r2, #0
 8005270:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005272:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <MX_SPI1_Init+0x74>)
 8005274:	2200      	movs	r2, #0
 8005276:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <MX_SPI1_Init+0x74>)
 800527a:	2207      	movs	r2, #7
 800527c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <MX_SPI1_Init+0x74>)
 8005280:	2200      	movs	r2, #0
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <MX_SPI1_Init+0x74>)
 8005286:	2208      	movs	r2, #8
 8005288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <MX_SPI1_Init+0x74>)
 800528c:	0018      	movs	r0, r3
 800528e:	f001 ff1b 	bl	80070c8 <HAL_SPI_Init>
 8005292:	1e03      	subs	r3, r0, #0
 8005294:	d001      	beq.n	800529a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005296:	f000 f8d3 	bl	8005440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000434 	.word	0x20000434
 80052a4:	40013000 	.word	0x40013000

080052a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80052ac:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <MX_TIM16_Init+0x44>)
 80052ae:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <MX_TIM16_Init+0x48>)
 80052b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16;
 80052b2:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <MX_TIM16_Init+0x44>)
 80052b4:	2210      	movs	r2, #16
 80052b6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <MX_TIM16_Init+0x44>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <MX_TIM16_Init+0x44>)
 80052c0:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <MX_TIM16_Init+0x4c>)
 80052c2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052c4:	4b09      	ldr	r3, [pc, #36]	; (80052ec <MX_TIM16_Init+0x44>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80052ca:	4b08      	ldr	r3, [pc, #32]	; (80052ec <MX_TIM16_Init+0x44>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <MX_TIM16_Init+0x44>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <MX_TIM16_Init+0x44>)
 80052d8:	0018      	movs	r0, r3
 80052da:	f002 fe03 	bl	8007ee4 <HAL_TIM_Base_Init>
 80052de:	1e03      	subs	r3, r0, #0
 80052e0:	d001      	beq.n	80052e6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80052e2:	f000 f8ad 	bl	8005440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20000528 	.word	0x20000528
 80052f0:	40014400 	.word	0x40014400
 80052f4:	0000ffff 	.word	0x0000ffff

080052f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <MX_USART2_UART_Init+0x94>)
 80052fe:	4a24      	ldr	r2, [pc, #144]	; (8005390 <MX_USART2_UART_Init+0x98>)
 8005300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005302:	4b22      	ldr	r3, [pc, #136]	; (800538c <MX_USART2_UART_Init+0x94>)
 8005304:	22e1      	movs	r2, #225	; 0xe1
 8005306:	0252      	lsls	r2, r2, #9
 8005308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800530a:	4b20      	ldr	r3, [pc, #128]	; (800538c <MX_USART2_UART_Init+0x94>)
 800530c:	2200      	movs	r2, #0
 800530e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005310:	4b1e      	ldr	r3, [pc, #120]	; (800538c <MX_USART2_UART_Init+0x94>)
 8005312:	2200      	movs	r2, #0
 8005314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005316:	4b1d      	ldr	r3, [pc, #116]	; (800538c <MX_USART2_UART_Init+0x94>)
 8005318:	2200      	movs	r2, #0
 800531a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800531c:	4b1b      	ldr	r3, [pc, #108]	; (800538c <MX_USART2_UART_Init+0x94>)
 800531e:	220c      	movs	r2, #12
 8005320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005322:	4b1a      	ldr	r3, [pc, #104]	; (800538c <MX_USART2_UART_Init+0x94>)
 8005324:	2200      	movs	r2, #0
 8005326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005328:	4b18      	ldr	r3, [pc, #96]	; (800538c <MX_USART2_UART_Init+0x94>)
 800532a:	2200      	movs	r2, #0
 800532c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800532e:	4b17      	ldr	r3, [pc, #92]	; (800538c <MX_USART2_UART_Init+0x94>)
 8005330:	2200      	movs	r2, #0
 8005332:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005334:	4b15      	ldr	r3, [pc, #84]	; (800538c <MX_USART2_UART_Init+0x94>)
 8005336:	2200      	movs	r2, #0
 8005338:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800533a:	4b14      	ldr	r3, [pc, #80]	; (800538c <MX_USART2_UART_Init+0x94>)
 800533c:	2200      	movs	r2, #0
 800533e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005340:	4b12      	ldr	r3, [pc, #72]	; (800538c <MX_USART2_UART_Init+0x94>)
 8005342:	0018      	movs	r0, r3
 8005344:	f002 feea 	bl	800811c <HAL_UART_Init>
 8005348:	1e03      	subs	r3, r0, #0
 800534a:	d001      	beq.n	8005350 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800534c:	f000 f878 	bl	8005440 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005350:	4b0e      	ldr	r3, [pc, #56]	; (800538c <MX_USART2_UART_Init+0x94>)
 8005352:	2100      	movs	r1, #0
 8005354:	0018      	movs	r0, r3
 8005356:	f003 fb89 	bl	8008a6c <HAL_UARTEx_SetTxFifoThreshold>
 800535a:	1e03      	subs	r3, r0, #0
 800535c:	d001      	beq.n	8005362 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800535e:	f000 f86f 	bl	8005440 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <MX_USART2_UART_Init+0x94>)
 8005364:	2100      	movs	r1, #0
 8005366:	0018      	movs	r0, r3
 8005368:	f003 fbc0 	bl	8008aec <HAL_UARTEx_SetRxFifoThreshold>
 800536c:	1e03      	subs	r3, r0, #0
 800536e:	d001      	beq.n	8005374 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005370:	f000 f866 	bl	8005440 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <MX_USART2_UART_Init+0x94>)
 8005376:	0018      	movs	r0, r3
 8005378:	f003 fb3e 	bl	80089f8 <HAL_UARTEx_DisableFifoMode>
 800537c:	1e03      	subs	r3, r0, #0
 800537e:	d001      	beq.n	8005384 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005380:	f000 f85e 	bl	8005440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005384:	46c0      	nop			; (mov r8, r8)
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	20000498 	.word	0x20000498
 8005390:	40004400 	.word	0x40004400

08005394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b089      	sub	sp, #36	; 0x24
 8005398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800539a:	240c      	movs	r4, #12
 800539c:	193b      	adds	r3, r7, r4
 800539e:	0018      	movs	r0, r3
 80053a0:	2314      	movs	r3, #20
 80053a2:	001a      	movs	r2, r3
 80053a4:	2100      	movs	r1, #0
 80053a6:	f003 fc6b 	bl	8008c80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053aa:	4b23      	ldr	r3, [pc, #140]	; (8005438 <MX_GPIO_Init+0xa4>)
 80053ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ae:	4b22      	ldr	r3, [pc, #136]	; (8005438 <MX_GPIO_Init+0xa4>)
 80053b0:	2104      	movs	r1, #4
 80053b2:	430a      	orrs	r2, r1
 80053b4:	635a      	str	r2, [r3, #52]	; 0x34
 80053b6:	4b20      	ldr	r3, [pc, #128]	; (8005438 <MX_GPIO_Init+0xa4>)
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ba:	2204      	movs	r2, #4
 80053bc:	4013      	ands	r3, r2
 80053be:	60bb      	str	r3, [r7, #8]
 80053c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <MX_GPIO_Init+0xa4>)
 80053c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c6:	4b1c      	ldr	r3, [pc, #112]	; (8005438 <MX_GPIO_Init+0xa4>)
 80053c8:	2101      	movs	r1, #1
 80053ca:	430a      	orrs	r2, r1
 80053cc:	635a      	str	r2, [r3, #52]	; 0x34
 80053ce:	4b1a      	ldr	r3, [pc, #104]	; (8005438 <MX_GPIO_Init+0xa4>)
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	2201      	movs	r2, #1
 80053d4:	4013      	ands	r3, r2
 80053d6:	607b      	str	r3, [r7, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80053da:	23c0      	movs	r3, #192	; 0xc0
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4817      	ldr	r0, [pc, #92]	; (800543c <MX_GPIO_Init+0xa8>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	0019      	movs	r1, r3
 80053e4:	f000 fda0 	bl	8005f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80053e8:	193b      	adds	r3, r7, r4
 80053ea:	2280      	movs	r2, #128	; 0x80
 80053ec:	0192      	lsls	r2, r2, #6
 80053ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053f0:	193b      	adds	r3, r7, r4
 80053f2:	2200      	movs	r2, #0
 80053f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f6:	193b      	adds	r3, r7, r4
 80053f8:	2200      	movs	r2, #0
 80053fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053fc:	193b      	adds	r3, r7, r4
 80053fe:	4a0f      	ldr	r2, [pc, #60]	; (800543c <MX_GPIO_Init+0xa8>)
 8005400:	0019      	movs	r1, r3
 8005402:	0010      	movs	r0, r2
 8005404:	f000 fc2c 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005408:	0021      	movs	r1, r4
 800540a:	187b      	adds	r3, r7, r1
 800540c:	22c0      	movs	r2, #192	; 0xc0
 800540e:	0092      	lsls	r2, r2, #2
 8005410:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005412:	187b      	adds	r3, r7, r1
 8005414:	2201      	movs	r2, #1
 8005416:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005418:	187b      	adds	r3, r7, r1
 800541a:	2200      	movs	r2, #0
 800541c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800541e:	187b      	adds	r3, r7, r1
 8005420:	2200      	movs	r2, #0
 8005422:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005424:	187b      	adds	r3, r7, r1
 8005426:	4a05      	ldr	r2, [pc, #20]	; (800543c <MX_GPIO_Init+0xa8>)
 8005428:	0019      	movs	r1, r3
 800542a:	0010      	movs	r0, r2
 800542c:	f000 fc18 	bl	8005c60 <HAL_GPIO_Init>

}
 8005430:	46c0      	nop			; (mov r8, r8)
 8005432:	46bd      	mov	sp, r7
 8005434:	b009      	add	sp, #36	; 0x24
 8005436:	bd90      	pop	{r4, r7, pc}
 8005438:	40021000 	.word	0x40021000
 800543c:	50000800 	.word	0x50000800

08005440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005444:	b672      	cpsid	i
}
 8005446:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8005448:	e7fe      	b.n	8005448 <Error_Handler+0x8>
	...

0800544c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005452:	4b11      	ldr	r3, [pc, #68]	; (8005498 <HAL_MspInit+0x4c>)
 8005454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005456:	4b10      	ldr	r3, [pc, #64]	; (8005498 <HAL_MspInit+0x4c>)
 8005458:	2101      	movs	r1, #1
 800545a:	430a      	orrs	r2, r1
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
 800545e:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <HAL_MspInit+0x4c>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	2201      	movs	r2, #1
 8005464:	4013      	ands	r3, r2
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800546a:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_MspInit+0x4c>)
 800546c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <HAL_MspInit+0x4c>)
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	0549      	lsls	r1, r1, #21
 8005474:	430a      	orrs	r2, r1
 8005476:	63da      	str	r2, [r3, #60]	; 0x3c
 8005478:	4b07      	ldr	r3, [pc, #28]	; (8005498 <HAL_MspInit+0x4c>)
 800547a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800547c:	2380      	movs	r3, #128	; 0x80
 800547e:	055b      	lsls	r3, r3, #21
 8005480:	4013      	ands	r3, r2
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8005486:	23c0      	movs	r3, #192	; 0xc0
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	0018      	movs	r0, r3
 800548c:	f000 fb1e 	bl	8005acc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005490:	46c0      	nop			; (mov r8, r8)
 8005492:	46bd      	mov	sp, r7
 8005494:	b002      	add	sp, #8
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40021000 	.word	0x40021000

0800549c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800549c:	b590      	push	{r4, r7, lr}
 800549e:	b091      	sub	sp, #68	; 0x44
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a4:	232c      	movs	r3, #44	; 0x2c
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	0018      	movs	r0, r3
 80054aa:	2314      	movs	r3, #20
 80054ac:	001a      	movs	r2, r3
 80054ae:	2100      	movs	r1, #0
 80054b0:	f003 fbe6 	bl	8008c80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054b4:	2410      	movs	r4, #16
 80054b6:	193b      	adds	r3, r7, r4
 80054b8:	0018      	movs	r0, r3
 80054ba:	231c      	movs	r3, #28
 80054bc:	001a      	movs	r2, r3
 80054be:	2100      	movs	r1, #0
 80054c0:	f003 fbde 	bl	8008c80 <memset>
  if(hi2c->Instance==I2C1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a23      	ldr	r2, [pc, #140]	; (8005558 <HAL_I2C_MspInit+0xbc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d13f      	bne.n	800554e <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80054ce:	193b      	adds	r3, r7, r4
 80054d0:	2220      	movs	r2, #32
 80054d2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80054d4:	193b      	adds	r3, r7, r4
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054da:	193b      	adds	r3, r7, r4
 80054dc:	0018      	movs	r0, r3
 80054de:	f001 fb7b 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 80054e2:	1e03      	subs	r3, r0, #0
 80054e4:	d001      	beq.n	80054ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80054e6:	f7ff ffab 	bl	8005440 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ea:	4b1c      	ldr	r3, [pc, #112]	; (800555c <HAL_I2C_MspInit+0xc0>)
 80054ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ee:	4b1b      	ldr	r3, [pc, #108]	; (800555c <HAL_I2C_MspInit+0xc0>)
 80054f0:	2101      	movs	r1, #1
 80054f2:	430a      	orrs	r2, r1
 80054f4:	635a      	str	r2, [r3, #52]	; 0x34
 80054f6:	4b19      	ldr	r3, [pc, #100]	; (800555c <HAL_I2C_MspInit+0xc0>)
 80054f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fa:	2201      	movs	r2, #1
 80054fc:	4013      	ands	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005502:	212c      	movs	r1, #44	; 0x2c
 8005504:	187b      	adds	r3, r7, r1
 8005506:	22c0      	movs	r2, #192	; 0xc0
 8005508:	00d2      	lsls	r2, r2, #3
 800550a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800550c:	187b      	adds	r3, r7, r1
 800550e:	2212      	movs	r2, #18
 8005510:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005512:	187b      	adds	r3, r7, r1
 8005514:	2200      	movs	r2, #0
 8005516:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005518:	187b      	adds	r3, r7, r1
 800551a:	2200      	movs	r2, #0
 800551c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800551e:	187b      	adds	r3, r7, r1
 8005520:	2206      	movs	r2, #6
 8005522:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005524:	187a      	adds	r2, r7, r1
 8005526:	23a0      	movs	r3, #160	; 0xa0
 8005528:	05db      	lsls	r3, r3, #23
 800552a:	0011      	movs	r1, r2
 800552c:	0018      	movs	r0, r3
 800552e:	f000 fb97 	bl	8005c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <HAL_I2C_MspInit+0xc0>)
 8005534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <HAL_I2C_MspInit+0xc0>)
 8005538:	2180      	movs	r1, #128	; 0x80
 800553a:	0389      	lsls	r1, r1, #14
 800553c:	430a      	orrs	r2, r1
 800553e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005540:	4b06      	ldr	r3, [pc, #24]	; (800555c <HAL_I2C_MspInit+0xc0>)
 8005542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	039b      	lsls	r3, r3, #14
 8005548:	4013      	ands	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	46bd      	mov	sp, r7
 8005552:	b011      	add	sp, #68	; 0x44
 8005554:	bd90      	pop	{r4, r7, pc}
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	40005400 	.word	0x40005400
 800555c:	40021000 	.word	0x40021000

08005560 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b08b      	sub	sp, #44	; 0x2c
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005568:	240c      	movs	r4, #12
 800556a:	193b      	adds	r3, r7, r4
 800556c:	0018      	movs	r0, r3
 800556e:	231c      	movs	r3, #28
 8005570:	001a      	movs	r2, r3
 8005572:	2100      	movs	r1, #0
 8005574:	f003 fb84 	bl	8008c80 <memset>
  if(hrtc->Instance==RTC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <HAL_RTC_MspInit+0x74>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d124      	bne.n	80055cc <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005582:	193b      	adds	r3, r7, r4
 8005584:	2280      	movs	r2, #128	; 0x80
 8005586:	0292      	lsls	r2, r2, #10
 8005588:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800558a:	193b      	adds	r3, r7, r4
 800558c:	2280      	movs	r2, #128	; 0x80
 800558e:	0092      	lsls	r2, r2, #2
 8005590:	619a      	str	r2, [r3, #24]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005592:	193b      	adds	r3, r7, r4
 8005594:	0018      	movs	r0, r3
 8005596:	f001 fb1f 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 800559a:	1e03      	subs	r3, r0, #0
 800559c:	d001      	beq.n	80055a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800559e:	f7ff ff4f 	bl	8005440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <HAL_RTC_MspInit+0x78>)
 80055a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055a6:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <HAL_RTC_MspInit+0x78>)
 80055a8:	2180      	movs	r1, #128	; 0x80
 80055aa:	0209      	lsls	r1, r1, #8
 80055ac:	430a      	orrs	r2, r1
 80055ae:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80055b0:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_RTC_MspInit+0x78>)
 80055b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <HAL_RTC_MspInit+0x78>)
 80055b6:	2180      	movs	r1, #128	; 0x80
 80055b8:	00c9      	lsls	r1, r1, #3
 80055ba:	430a      	orrs	r2, r1
 80055bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80055be:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <HAL_RTC_MspInit+0x78>)
 80055c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4013      	ands	r3, r2
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80055cc:	46c0      	nop			; (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b00b      	add	sp, #44	; 0x2c
 80055d2:	bd90      	pop	{r4, r7, pc}
 80055d4:	40002800 	.word	0x40002800
 80055d8:	40021000 	.word	0x40021000

080055dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b08b      	sub	sp, #44	; 0x2c
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e4:	2414      	movs	r4, #20
 80055e6:	193b      	adds	r3, r7, r4
 80055e8:	0018      	movs	r0, r3
 80055ea:	2314      	movs	r3, #20
 80055ec:	001a      	movs	r2, r3
 80055ee:	2100      	movs	r1, #0
 80055f0:	f003 fb46 	bl	8008c80 <memset>
  if(hspi->Instance==SPI1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <HAL_SPI_MspInit+0x8c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d130      	bne.n	8005660 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80055fe:	4b1b      	ldr	r3, [pc, #108]	; (800566c <HAL_SPI_MspInit+0x90>)
 8005600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005602:	4b1a      	ldr	r3, [pc, #104]	; (800566c <HAL_SPI_MspInit+0x90>)
 8005604:	2180      	movs	r1, #128	; 0x80
 8005606:	0149      	lsls	r1, r1, #5
 8005608:	430a      	orrs	r2, r1
 800560a:	641a      	str	r2, [r3, #64]	; 0x40
 800560c:	4b17      	ldr	r3, [pc, #92]	; (800566c <HAL_SPI_MspInit+0x90>)
 800560e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	015b      	lsls	r3, r3, #5
 8005614:	4013      	ands	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
 8005618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800561a:	4b14      	ldr	r3, [pc, #80]	; (800566c <HAL_SPI_MspInit+0x90>)
 800561c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561e:	4b13      	ldr	r3, [pc, #76]	; (800566c <HAL_SPI_MspInit+0x90>)
 8005620:	2101      	movs	r1, #1
 8005622:	430a      	orrs	r2, r1
 8005624:	635a      	str	r2, [r3, #52]	; 0x34
 8005626:	4b11      	ldr	r3, [pc, #68]	; (800566c <HAL_SPI_MspInit+0x90>)
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	2201      	movs	r2, #1
 800562c:	4013      	ands	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005632:	0021      	movs	r1, r4
 8005634:	187b      	adds	r3, r7, r1
 8005636:	22e0      	movs	r2, #224	; 0xe0
 8005638:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800563a:	187b      	adds	r3, r7, r1
 800563c:	2202      	movs	r2, #2
 800563e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005640:	187b      	adds	r3, r7, r1
 8005642:	2200      	movs	r2, #0
 8005644:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005646:	187b      	adds	r3, r7, r1
 8005648:	2200      	movs	r2, #0
 800564a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800564c:	187b      	adds	r3, r7, r1
 800564e:	2200      	movs	r2, #0
 8005650:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005652:	187a      	adds	r2, r7, r1
 8005654:	23a0      	movs	r3, #160	; 0xa0
 8005656:	05db      	lsls	r3, r3, #23
 8005658:	0011      	movs	r1, r2
 800565a:	0018      	movs	r0, r3
 800565c:	f000 fb00 	bl	8005c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005660:	46c0      	nop			; (mov r8, r8)
 8005662:	46bd      	mov	sp, r7
 8005664:	b00b      	add	sp, #44	; 0x2c
 8005666:	bd90      	pop	{r4, r7, pc}
 8005668:	40013000 	.word	0x40013000
 800566c:	40021000 	.word	0x40021000

08005670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a0a      	ldr	r2, [pc, #40]	; (80056a8 <HAL_TIM_Base_MspInit+0x38>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d10d      	bne.n	800569e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <HAL_TIM_Base_MspInit+0x3c>)
 8005684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005686:	4b09      	ldr	r3, [pc, #36]	; (80056ac <HAL_TIM_Base_MspInit+0x3c>)
 8005688:	2180      	movs	r1, #128	; 0x80
 800568a:	0289      	lsls	r1, r1, #10
 800568c:	430a      	orrs	r2, r1
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <HAL_TIM_Base_MspInit+0x3c>)
 8005692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	029b      	lsls	r3, r3, #10
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b004      	add	sp, #16
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40021000 	.word	0x40021000

080056b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b091      	sub	sp, #68	; 0x44
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056b8:	232c      	movs	r3, #44	; 0x2c
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	0018      	movs	r0, r3
 80056be:	2314      	movs	r3, #20
 80056c0:	001a      	movs	r2, r3
 80056c2:	2100      	movs	r1, #0
 80056c4:	f003 fadc 	bl	8008c80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056c8:	2410      	movs	r4, #16
 80056ca:	193b      	adds	r3, r7, r4
 80056cc:	0018      	movs	r0, r3
 80056ce:	231c      	movs	r3, #28
 80056d0:	001a      	movs	r2, r3
 80056d2:	2100      	movs	r1, #0
 80056d4:	f003 fad4 	bl	8008c80 <memset>
  if(huart->Instance==USART2)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a22      	ldr	r2, [pc, #136]	; (8005768 <HAL_UART_MspInit+0xb8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d13e      	bne.n	8005760 <HAL_UART_MspInit+0xb0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80056e2:	193b      	adds	r3, r7, r4
 80056e4:	2202      	movs	r2, #2
 80056e6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80056e8:	193b      	adds	r3, r7, r4
 80056ea:	2200      	movs	r2, #0
 80056ec:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056ee:	193b      	adds	r3, r7, r4
 80056f0:	0018      	movs	r0, r3
 80056f2:	f001 fa71 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 80056f6:	1e03      	subs	r3, r0, #0
 80056f8:	d001      	beq.n	80056fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80056fa:	f7ff fea1 	bl	8005440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056fe:	4b1b      	ldr	r3, [pc, #108]	; (800576c <HAL_UART_MspInit+0xbc>)
 8005700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005702:	4b1a      	ldr	r3, [pc, #104]	; (800576c <HAL_UART_MspInit+0xbc>)
 8005704:	2180      	movs	r1, #128	; 0x80
 8005706:	0289      	lsls	r1, r1, #10
 8005708:	430a      	orrs	r2, r1
 800570a:	63da      	str	r2, [r3, #60]	; 0x3c
 800570c:	4b17      	ldr	r3, [pc, #92]	; (800576c <HAL_UART_MspInit+0xbc>)
 800570e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	029b      	lsls	r3, r3, #10
 8005714:	4013      	ands	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800571a:	4b14      	ldr	r3, [pc, #80]	; (800576c <HAL_UART_MspInit+0xbc>)
 800571c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <HAL_UART_MspInit+0xbc>)
 8005720:	2101      	movs	r1, #1
 8005722:	430a      	orrs	r2, r1
 8005724:	635a      	str	r2, [r3, #52]	; 0x34
 8005726:	4b11      	ldr	r3, [pc, #68]	; (800576c <HAL_UART_MspInit+0xbc>)
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572a:	2201      	movs	r2, #1
 800572c:	4013      	ands	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005732:	212c      	movs	r1, #44	; 0x2c
 8005734:	187b      	adds	r3, r7, r1
 8005736:	220c      	movs	r2, #12
 8005738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800573a:	187b      	adds	r3, r7, r1
 800573c:	2202      	movs	r2, #2
 800573e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005740:	187b      	adds	r3, r7, r1
 8005742:	2200      	movs	r2, #0
 8005744:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005746:	187b      	adds	r3, r7, r1
 8005748:	2200      	movs	r2, #0
 800574a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800574c:	187b      	adds	r3, r7, r1
 800574e:	2201      	movs	r2, #1
 8005750:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005752:	187a      	adds	r2, r7, r1
 8005754:	23a0      	movs	r3, #160	; 0xa0
 8005756:	05db      	lsls	r3, r3, #23
 8005758:	0011      	movs	r1, r2
 800575a:	0018      	movs	r0, r3
 800575c:	f000 fa80 	bl	8005c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005760:	46c0      	nop			; (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	b011      	add	sp, #68	; 0x44
 8005766:	bd90      	pop	{r4, r7, pc}
 8005768:	40004400 	.word	0x40004400
 800576c:	40021000 	.word	0x40021000

08005770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005774:	e7fe      	b.n	8005774 <NMI_Handler+0x4>

08005776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800577a:	e7fe      	b.n	800577a <HardFault_Handler+0x4>

0800577c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005794:	f000 f95a 	bl	8005a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	af00      	add	r7, sp, #0
	return 1;
 80057a2:	2301      	movs	r3, #1
}
 80057a4:	0018      	movs	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <_kill>:

int _kill(int pid, int sig)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80057b4:	f003 fa3a 	bl	8008c2c <__errno>
 80057b8:	0003      	movs	r3, r0
 80057ba:	2216      	movs	r2, #22
 80057bc:	601a      	str	r2, [r3, #0]
	return -1;
 80057be:	2301      	movs	r3, #1
 80057c0:	425b      	negs	r3, r3
}
 80057c2:	0018      	movs	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	b002      	add	sp, #8
 80057c8:	bd80      	pop	{r7, pc}

080057ca <_exit>:

void _exit (int status)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80057d2:	2301      	movs	r3, #1
 80057d4:	425a      	negs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	0011      	movs	r1, r2
 80057da:	0018      	movs	r0, r3
 80057dc:	f7ff ffe5 	bl	80057aa <_kill>
	while (1) {}		/* Make sure we hang here */
 80057e0:	e7fe      	b.n	80057e0 <_exit+0x16>

080057e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b086      	sub	sp, #24
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	e00a      	b.n	800580a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80057f4:	e000      	b.n	80057f8 <_read+0x16>
 80057f6:	bf00      	nop
 80057f8:	0001      	movs	r1, r0
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	60ba      	str	r2, [r7, #8]
 8005800:	b2ca      	uxtb	r2, r1
 8005802:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	3301      	adds	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	429a      	cmp	r2, r3
 8005810:	dbf0      	blt.n	80057f4 <_read+0x12>
	}

return len;
 8005812:	687b      	ldr	r3, [r7, #4]
}
 8005814:	0018      	movs	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	b006      	add	sp, #24
 800581a:	bd80      	pop	{r7, pc}

0800581c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	e009      	b.n	8005842 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	60ba      	str	r2, [r7, #8]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	0018      	movs	r0, r3
 8005838:	e000      	b.n	800583c <_write+0x20>
 800583a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	3301      	adds	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	dbf1      	blt.n	800582e <_write+0x12>
	}
	return len;
 800584a:	687b      	ldr	r3, [r7, #4]
}
 800584c:	0018      	movs	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	b006      	add	sp, #24
 8005852:	bd80      	pop	{r7, pc}

08005854 <_close>:

int _close(int file)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	return -1;
 800585c:	2301      	movs	r3, #1
 800585e:	425b      	negs	r3, r3
}
 8005860:	0018      	movs	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	b002      	add	sp, #8
 8005866:	bd80      	pop	{r7, pc}

08005868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2280      	movs	r2, #128	; 0x80
 8005876:	0192      	lsls	r2, r2, #6
 8005878:	605a      	str	r2, [r3, #4]
	return 0;
 800587a:	2300      	movs	r3, #0
}
 800587c:	0018      	movs	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	b002      	add	sp, #8
 8005882:	bd80      	pop	{r7, pc}

08005884 <_isatty>:

int _isatty(int file)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	return 1;
 800588c:	2301      	movs	r3, #1
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b002      	add	sp, #8
 8005894:	bd80      	pop	{r7, pc}

08005896 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
	return 0;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b004      	add	sp, #16
 80058aa:	bd80      	pop	{r7, pc}

080058ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058b4:	4a14      	ldr	r2, [pc, #80]	; (8005908 <_sbrk+0x5c>)
 80058b6:	4b15      	ldr	r3, [pc, #84]	; (800590c <_sbrk+0x60>)
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058c0:	4b13      	ldr	r3, [pc, #76]	; (8005910 <_sbrk+0x64>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058c8:	4b11      	ldr	r3, [pc, #68]	; (8005910 <_sbrk+0x64>)
 80058ca:	4a12      	ldr	r2, [pc, #72]	; (8005914 <_sbrk+0x68>)
 80058cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058ce:	4b10      	ldr	r3, [pc, #64]	; (8005910 <_sbrk+0x64>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	18d3      	adds	r3, r2, r3
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d207      	bcs.n	80058ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058dc:	f003 f9a6 	bl	8008c2c <__errno>
 80058e0:	0003      	movs	r3, r0
 80058e2:	220c      	movs	r2, #12
 80058e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058e6:	2301      	movs	r3, #1
 80058e8:	425b      	negs	r3, r3
 80058ea:	e009      	b.n	8005900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058ec:	4b08      	ldr	r3, [pc, #32]	; (8005910 <_sbrk+0x64>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058f2:	4b07      	ldr	r3, [pc, #28]	; (8005910 <_sbrk+0x64>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	18d2      	adds	r2, r2, r3
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <_sbrk+0x64>)
 80058fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80058fe:	68fb      	ldr	r3, [r7, #12]
}
 8005900:	0018      	movs	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	b006      	add	sp, #24
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20009000 	.word	0x20009000
 800590c:	00000400 	.word	0x00000400
 8005910:	200001fc 	.word	0x200001fc
 8005914:	20000588 	.word	0x20000588

08005918 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800591c:	46c0      	nop			; (mov r8, r8)
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005924:	480d      	ldr	r0, [pc, #52]	; (800595c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005926:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005928:	f7ff fff6 	bl	8005918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800592c:	480c      	ldr	r0, [pc, #48]	; (8005960 <LoopForever+0x6>)
  ldr r1, =_edata
 800592e:	490d      	ldr	r1, [pc, #52]	; (8005964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005930:	4a0d      	ldr	r2, [pc, #52]	; (8005968 <LoopForever+0xe>)
  movs r3, #0
 8005932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005934:	e002      	b.n	800593c <LoopCopyDataInit>

08005936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800593a:	3304      	adds	r3, #4

0800593c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800593c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800593e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005940:	d3f9      	bcc.n	8005936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005942:	4a0a      	ldr	r2, [pc, #40]	; (800596c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005944:	4c0a      	ldr	r4, [pc, #40]	; (8005970 <LoopForever+0x16>)
  movs r3, #0
 8005946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005948:	e001      	b.n	800594e <LoopFillZerobss>

0800594a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800594a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800594c:	3204      	adds	r2, #4

0800594e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800594e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005950:	d3fb      	bcc.n	800594a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005952:	f003 f971 	bl	8008c38 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005956:	f7ff f807 	bl	8004968 <main>

0800595a <LoopForever>:

LoopForever:
  b LoopForever
 800595a:	e7fe      	b.n	800595a <LoopForever>
  ldr   r0, =_estack
 800595c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005964:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8005968:	0800e7e8 	.word	0x0800e7e8
  ldr r2, =_sbss
 800596c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8005970:	20000588 	.word	0x20000588

08005974 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005974:	e7fe      	b.n	8005974 <ADC1_IRQHandler>
	...

08005978 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800597e:	1dfb      	adds	r3, r7, #7
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <HAL_Init+0x3c>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <HAL_Init+0x3c>)
 800598a:	2180      	movs	r1, #128	; 0x80
 800598c:	0049      	lsls	r1, r1, #1
 800598e:	430a      	orrs	r2, r1
 8005990:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005992:	2003      	movs	r0, #3
 8005994:	f000 f810 	bl	80059b8 <HAL_InitTick>
 8005998:	1e03      	subs	r3, r0, #0
 800599a:	d003      	beq.n	80059a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800599c:	1dfb      	adds	r3, r7, #7
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	e001      	b.n	80059a8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80059a4:	f7ff fd52 	bl	800544c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80059a8:	1dfb      	adds	r3, r7, #7
 80059aa:	781b      	ldrb	r3, [r3, #0]
}
 80059ac:	0018      	movs	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b002      	add	sp, #8
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40022000 	.word	0x40022000

080059b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059b8:	b590      	push	{r4, r7, lr}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80059c0:	230f      	movs	r3, #15
 80059c2:	18fb      	adds	r3, r7, r3
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <HAL_InitTick+0x88>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d02b      	beq.n	8005a28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80059d0:	4b1c      	ldr	r3, [pc, #112]	; (8005a44 <HAL_InitTick+0x8c>)
 80059d2:	681c      	ldr	r4, [r3, #0]
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <HAL_InitTick+0x88>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	0019      	movs	r1, r3
 80059da:	23fa      	movs	r3, #250	; 0xfa
 80059dc:	0098      	lsls	r0, r3, #2
 80059de:	f7fa fbab 	bl	8000138 <__udivsi3>
 80059e2:	0003      	movs	r3, r0
 80059e4:	0019      	movs	r1, r3
 80059e6:	0020      	movs	r0, r4
 80059e8:	f7fa fba6 	bl	8000138 <__udivsi3>
 80059ec:	0003      	movs	r3, r0
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 f929 	bl	8005c46 <HAL_SYSTICK_Config>
 80059f4:	1e03      	subs	r3, r0, #0
 80059f6:	d112      	bne.n	8005a1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d80a      	bhi.n	8005a14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	2301      	movs	r3, #1
 8005a02:	425b      	negs	r3, r3
 8005a04:	2200      	movs	r2, #0
 8005a06:	0018      	movs	r0, r3
 8005a08:	f000 f908 	bl	8005c1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a0c:	4b0e      	ldr	r3, [pc, #56]	; (8005a48 <HAL_InitTick+0x90>)
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e00d      	b.n	8005a30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005a14:	230f      	movs	r3, #15
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	2201      	movs	r2, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	e008      	b.n	8005a30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a1e:	230f      	movs	r3, #15
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	2201      	movs	r2, #1
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	e003      	b.n	8005a30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a28:	230f      	movs	r3, #15
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005a30:	230f      	movs	r3, #15
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	781b      	ldrb	r3, [r3, #0]
}
 8005a36:	0018      	movs	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b005      	add	sp, #20
 8005a3c:	bd90      	pop	{r4, r7, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	20000008 	.word	0x20000008
 8005a44:	20000000 	.word	0x20000000
 8005a48:	20000004 	.word	0x20000004

08005a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a50:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <HAL_IncTick+0x1c>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	001a      	movs	r2, r3
 8005a56:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <HAL_IncTick+0x20>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	18d2      	adds	r2, r2, r3
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_IncTick+0x20>)
 8005a5e:	601a      	str	r2, [r3, #0]
}
 8005a60:	46c0      	nop			; (mov r8, r8)
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	20000008 	.word	0x20000008
 8005a6c:	20000574 	.word	0x20000574

08005a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  return uwTick;
 8005a74:	4b02      	ldr	r3, [pc, #8]	; (8005a80 <HAL_GetTick+0x10>)
 8005a76:	681b      	ldr	r3, [r3, #0]
}
 8005a78:	0018      	movs	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	20000574 	.word	0x20000574

08005a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a8c:	f7ff fff0 	bl	8005a70 <HAL_GetTick>
 8005a90:	0003      	movs	r3, r0
 8005a92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	d005      	beq.n	8005aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <HAL_Delay+0x44>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	001a      	movs	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	189b      	adds	r3, r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	f7ff ffe0 	bl	8005a70 <HAL_GetTick>
 8005ab0:	0002      	movs	r2, r0
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d8f7      	bhi.n	8005aac <HAL_Delay+0x28>
  {
  }
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b004      	add	sp, #16
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	20000008 	.word	0x20000008

08005acc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005ad4:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a06      	ldr	r2, [pc, #24]	; (8005af4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	0019      	movs	r1, r3
 8005ade:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	601a      	str	r2, [r3, #0]
}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	b002      	add	sp, #8
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	40010000 	.word	0x40010000
 8005af4:	fffff9ff 	.word	0xfffff9ff

08005af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005af8:	b590      	push	{r4, r7, lr}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	0002      	movs	r2, r0
 8005b00:	6039      	str	r1, [r7, #0]
 8005b02:	1dfb      	adds	r3, r7, #7
 8005b04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005b06:	1dfb      	adds	r3, r7, #7
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0c:	d828      	bhi.n	8005b60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b0e:	4a2f      	ldr	r2, [pc, #188]	; (8005bcc <__NVIC_SetPriority+0xd4>)
 8005b10:	1dfb      	adds	r3, r7, #7
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	b25b      	sxtb	r3, r3
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	33c0      	adds	r3, #192	; 0xc0
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	589b      	ldr	r3, [r3, r2]
 8005b1e:	1dfa      	adds	r2, r7, #7
 8005b20:	7812      	ldrb	r2, [r2, #0]
 8005b22:	0011      	movs	r1, r2
 8005b24:	2203      	movs	r2, #3
 8005b26:	400a      	ands	r2, r1
 8005b28:	00d2      	lsls	r2, r2, #3
 8005b2a:	21ff      	movs	r1, #255	; 0xff
 8005b2c:	4091      	lsls	r1, r2
 8005b2e:	000a      	movs	r2, r1
 8005b30:	43d2      	mvns	r2, r2
 8005b32:	401a      	ands	r2, r3
 8005b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	019b      	lsls	r3, r3, #6
 8005b3a:	22ff      	movs	r2, #255	; 0xff
 8005b3c:	401a      	ands	r2, r3
 8005b3e:	1dfb      	adds	r3, r7, #7
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	0018      	movs	r0, r3
 8005b44:	2303      	movs	r3, #3
 8005b46:	4003      	ands	r3, r0
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b4c:	481f      	ldr	r0, [pc, #124]	; (8005bcc <__NVIC_SetPriority+0xd4>)
 8005b4e:	1dfb      	adds	r3, r7, #7
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	b25b      	sxtb	r3, r3
 8005b54:	089b      	lsrs	r3, r3, #2
 8005b56:	430a      	orrs	r2, r1
 8005b58:	33c0      	adds	r3, #192	; 0xc0
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005b5e:	e031      	b.n	8005bc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b60:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <__NVIC_SetPriority+0xd8>)
 8005b62:	1dfb      	adds	r3, r7, #7
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	0019      	movs	r1, r3
 8005b68:	230f      	movs	r3, #15
 8005b6a:	400b      	ands	r3, r1
 8005b6c:	3b08      	subs	r3, #8
 8005b6e:	089b      	lsrs	r3, r3, #2
 8005b70:	3306      	adds	r3, #6
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	18d3      	adds	r3, r2, r3
 8005b76:	3304      	adds	r3, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	1dfa      	adds	r2, r7, #7
 8005b7c:	7812      	ldrb	r2, [r2, #0]
 8005b7e:	0011      	movs	r1, r2
 8005b80:	2203      	movs	r2, #3
 8005b82:	400a      	ands	r2, r1
 8005b84:	00d2      	lsls	r2, r2, #3
 8005b86:	21ff      	movs	r1, #255	; 0xff
 8005b88:	4091      	lsls	r1, r2
 8005b8a:	000a      	movs	r2, r1
 8005b8c:	43d2      	mvns	r2, r2
 8005b8e:	401a      	ands	r2, r3
 8005b90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	019b      	lsls	r3, r3, #6
 8005b96:	22ff      	movs	r2, #255	; 0xff
 8005b98:	401a      	ands	r2, r3
 8005b9a:	1dfb      	adds	r3, r7, #7
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	4003      	ands	r3, r0
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ba8:	4809      	ldr	r0, [pc, #36]	; (8005bd0 <__NVIC_SetPriority+0xd8>)
 8005baa:	1dfb      	adds	r3, r7, #7
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	001c      	movs	r4, r3
 8005bb0:	230f      	movs	r3, #15
 8005bb2:	4023      	ands	r3, r4
 8005bb4:	3b08      	subs	r3, #8
 8005bb6:	089b      	lsrs	r3, r3, #2
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	3306      	adds	r3, #6
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	18c3      	adds	r3, r0, r3
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	601a      	str	r2, [r3, #0]
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b003      	add	sp, #12
 8005bca:	bd90      	pop	{r4, r7, pc}
 8005bcc:	e000e100 	.word	0xe000e100
 8005bd0:	e000ed00 	.word	0xe000ed00

08005bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	1e5a      	subs	r2, r3, #1
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	045b      	lsls	r3, r3, #17
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d301      	bcc.n	8005bec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005be8:	2301      	movs	r3, #1
 8005bea:	e010      	b.n	8005c0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bec:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <SysTick_Config+0x44>)
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	3a01      	subs	r2, #1
 8005bf2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	425b      	negs	r3, r3
 8005bf8:	2103      	movs	r1, #3
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f7ff ff7c 	bl	8005af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <SysTick_Config+0x44>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c06:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <SysTick_Config+0x44>)
 8005c08:	2207      	movs	r2, #7
 8005c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	0018      	movs	r0, r3
 8005c10:	46bd      	mov	sp, r7
 8005c12:	b002      	add	sp, #8
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	e000e010 	.word	0xe000e010

08005c1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
 8005c26:	210f      	movs	r1, #15
 8005c28:	187b      	adds	r3, r7, r1
 8005c2a:	1c02      	adds	r2, r0, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	187b      	adds	r3, r7, r1
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	b25b      	sxtb	r3, r3
 8005c36:	0011      	movs	r1, r2
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f7ff ff5d 	bl	8005af8 <__NVIC_SetPriority>
}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b004      	add	sp, #16
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b082      	sub	sp, #8
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f7ff ffbf 	bl	8005bd4 <SysTick_Config>
 8005c56:	0003      	movs	r3, r0
}
 8005c58:	0018      	movs	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b002      	add	sp, #8
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c6e:	e147      	b.n	8005f00 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2101      	movs	r1, #1
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4091      	lsls	r1, r2
 8005c7a:	000a      	movs	r2, r1
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d100      	bne.n	8005c88 <HAL_GPIO_Init+0x28>
 8005c86:	e138      	b.n	8005efa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d005      	beq.n	8005ca0 <HAL_GPIO_Init+0x40>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2203      	movs	r2, #3
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d130      	bne.n	8005d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	2203      	movs	r2, #3
 8005cac:	409a      	lsls	r2, r3
 8005cae:	0013      	movs	r3, r2
 8005cb0:	43da      	mvns	r2, r3
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	0013      	movs	r3, r2
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	0013      	movs	r3, r2
 8005cde:	43da      	mvns	r2, r3
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	091b      	lsrs	r3, r3, #4
 8005cec:	2201      	movs	r2, #1
 8005cee:	401a      	ands	r2, r3
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	409a      	lsls	r2, r3
 8005cf4:	0013      	movs	r3, r2
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2203      	movs	r2, #3
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d017      	beq.n	8005d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	2203      	movs	r2, #3
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	0013      	movs	r3, r2
 8005d1e:	43da      	mvns	r2, r3
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4013      	ands	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	409a      	lsls	r2, r3
 8005d30:	0013      	movs	r3, r2
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2203      	movs	r2, #3
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d123      	bne.n	8005d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	08da      	lsrs	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3208      	adds	r2, #8
 8005d52:	0092      	lsls	r2, r2, #2
 8005d54:	58d3      	ldr	r3, [r2, r3]
 8005d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2207      	movs	r2, #7
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	220f      	movs	r2, #15
 8005d62:	409a      	lsls	r2, r3
 8005d64:	0013      	movs	r3, r2
 8005d66:	43da      	mvns	r2, r3
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2107      	movs	r1, #7
 8005d76:	400b      	ands	r3, r1
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	409a      	lsls	r2, r3
 8005d7c:	0013      	movs	r3, r2
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	08da      	lsrs	r2, r3, #3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3208      	adds	r2, #8
 8005d8c:	0092      	lsls	r2, r2, #2
 8005d8e:	6939      	ldr	r1, [r7, #16]
 8005d90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	0013      	movs	r3, r2
 8005da2:	43da      	mvns	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	4013      	ands	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2203      	movs	r2, #3
 8005db0:	401a      	ands	r2, r3
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	409a      	lsls	r2, r3
 8005db8:	0013      	movs	r3, r2
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	23c0      	movs	r3, #192	; 0xc0
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d100      	bne.n	8005dd4 <HAL_GPIO_Init+0x174>
 8005dd2:	e092      	b.n	8005efa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005dd4:	4a50      	ldr	r2, [pc, #320]	; (8005f18 <HAL_GPIO_Init+0x2b8>)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	3318      	adds	r3, #24
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	589b      	ldr	r3, [r3, r2]
 8005de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2203      	movs	r2, #3
 8005de6:	4013      	ands	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	220f      	movs	r2, #15
 8005dec:	409a      	lsls	r2, r3
 8005dee:	0013      	movs	r3, r2
 8005df0:	43da      	mvns	r2, r3
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	4013      	ands	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	23a0      	movs	r3, #160	; 0xa0
 8005dfc:	05db      	lsls	r3, r3, #23
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d013      	beq.n	8005e2a <HAL_GPIO_Init+0x1ca>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a45      	ldr	r2, [pc, #276]	; (8005f1c <HAL_GPIO_Init+0x2bc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00d      	beq.n	8005e26 <HAL_GPIO_Init+0x1c6>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a44      	ldr	r2, [pc, #272]	; (8005f20 <HAL_GPIO_Init+0x2c0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d007      	beq.n	8005e22 <HAL_GPIO_Init+0x1c2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a43      	ldr	r2, [pc, #268]	; (8005f24 <HAL_GPIO_Init+0x2c4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d101      	bne.n	8005e1e <HAL_GPIO_Init+0x1be>
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e006      	b.n	8005e2c <HAL_GPIO_Init+0x1cc>
 8005e1e:	2305      	movs	r3, #5
 8005e20:	e004      	b.n	8005e2c <HAL_GPIO_Init+0x1cc>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e002      	b.n	8005e2c <HAL_GPIO_Init+0x1cc>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <HAL_GPIO_Init+0x1cc>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	2103      	movs	r1, #3
 8005e30:	400a      	ands	r2, r1
 8005e32:	00d2      	lsls	r2, r2, #3
 8005e34:	4093      	lsls	r3, r2
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005e3c:	4936      	ldr	r1, [pc, #216]	; (8005f18 <HAL_GPIO_Init+0x2b8>)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	089b      	lsrs	r3, r3, #2
 8005e42:	3318      	adds	r3, #24
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e4a:	4a33      	ldr	r2, [pc, #204]	; (8005f18 <HAL_GPIO_Init+0x2b8>)
 8005e4c:	2380      	movs	r3, #128	; 0x80
 8005e4e:	58d3      	ldr	r3, [r2, r3]
 8005e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	43da      	mvns	r2, r3
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	025b      	lsls	r3, r3, #9
 8005e64:	4013      	ands	r3, r2
 8005e66:	d003      	beq.n	8005e70 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e70:	4929      	ldr	r1, [pc, #164]	; (8005f18 <HAL_GPIO_Init+0x2b8>)
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8005e78:	4a27      	ldr	r2, [pc, #156]	; (8005f18 <HAL_GPIO_Init+0x2b8>)
 8005e7a:	2384      	movs	r3, #132	; 0x84
 8005e7c:	58d3      	ldr	r3, [r2, r3]
 8005e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	43da      	mvns	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	2380      	movs	r3, #128	; 0x80
 8005e90:	029b      	lsls	r3, r3, #10
 8005e92:	4013      	ands	r3, r2
 8005e94:	d003      	beq.n	8005e9e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e9e:	491e      	ldr	r1, [pc, #120]	; (8005f18 <HAL_GPIO_Init+0x2b8>)
 8005ea0:	2284      	movs	r2, #132	; 0x84
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ea6:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <HAL_GPIO_Init+0x2b8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	43da      	mvns	r2, r3
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	2380      	movs	r3, #128	; 0x80
 8005ebc:	035b      	lsls	r3, r3, #13
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d003      	beq.n	8005eca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005eca:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <HAL_GPIO_Init+0x2b8>)
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005ed0:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <HAL_GPIO_Init+0x2b8>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	43da      	mvns	r2, r3
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4013      	ands	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	039b      	lsls	r3, r3, #14
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ef4:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <HAL_GPIO_Init+0x2b8>)
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	3301      	adds	r3, #1
 8005efe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	40da      	lsrs	r2, r3
 8005f08:	1e13      	subs	r3, r2, #0
 8005f0a:	d000      	beq.n	8005f0e <HAL_GPIO_Init+0x2ae>
 8005f0c:	e6b0      	b.n	8005c70 <HAL_GPIO_Init+0x10>
  }
}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	46c0      	nop			; (mov r8, r8)
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b006      	add	sp, #24
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021800 	.word	0x40021800
 8005f1c:	50000400 	.word	0x50000400
 8005f20:	50000800 	.word	0x50000800
 8005f24:	50000c00 	.word	0x50000c00

08005f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	0008      	movs	r0, r1
 8005f32:	0011      	movs	r1, r2
 8005f34:	1cbb      	adds	r3, r7, #2
 8005f36:	1c02      	adds	r2, r0, #0
 8005f38:	801a      	strh	r2, [r3, #0]
 8005f3a:	1c7b      	adds	r3, r7, #1
 8005f3c:	1c0a      	adds	r2, r1, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f40:	1c7b      	adds	r3, r7, #1
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d004      	beq.n	8005f52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f48:	1cbb      	adds	r3, r7, #2
 8005f4a:	881a      	ldrh	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f50:	e003      	b.n	8005f5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f52:	1cbb      	adds	r3, r7, #2
 8005f54:	881a      	ldrh	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b002      	add	sp, #8
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e082      	b.n	800607c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2241      	movs	r2, #65	; 0x41
 8005f7a:	5c9b      	ldrb	r3, [r3, r2]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d107      	bne.n	8005f92 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2240      	movs	r2, #64	; 0x40
 8005f86:	2100      	movs	r1, #0
 8005f88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f7ff fa85 	bl	800549c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2241      	movs	r2, #65	; 0x41
 8005f96:	2124      	movs	r1, #36	; 0x24
 8005f98:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	438a      	bics	r2, r1
 8005fa8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4934      	ldr	r1, [pc, #208]	; (8006084 <HAL_I2C_Init+0x120>)
 8005fb4:	400a      	ands	r2, r1
 8005fb6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4931      	ldr	r1, [pc, #196]	; (8006088 <HAL_I2C_Init+0x124>)
 8005fc4:	400a      	ands	r2, r1
 8005fc6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d108      	bne.n	8005fe2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	0209      	lsls	r1, r1, #8
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]
 8005fe0:	e007      	b.n	8005ff2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2184      	movs	r1, #132	; 0x84
 8005fec:	0209      	lsls	r1, r1, #8
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d104      	bne.n	8006004 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2280      	movs	r2, #128	; 0x80
 8006000:	0112      	lsls	r2, r2, #4
 8006002:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	491f      	ldr	r1, [pc, #124]	; (800608c <HAL_I2C_Init+0x128>)
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	491a      	ldr	r1, [pc, #104]	; (8006088 <HAL_I2C_Init+0x124>)
 8006020:	400a      	ands	r2, r1
 8006022:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	431a      	orrs	r2, r3
 800602e:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69d9      	ldr	r1, [r3, #28]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1a      	ldr	r2, [r3, #32]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2101      	movs	r1, #1
 800605a:	430a      	orrs	r2, r1
 800605c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2241      	movs	r2, #65	; 0x41
 8006068:	2120      	movs	r1, #32
 800606a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2242      	movs	r2, #66	; 0x42
 8006076:	2100      	movs	r1, #0
 8006078:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b002      	add	sp, #8
 8006082:	bd80      	pop	{r7, pc}
 8006084:	f0ffffff 	.word	0xf0ffffff
 8006088:	ffff7fff 	.word	0xffff7fff
 800608c:	02008000 	.word	0x02008000

08006090 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2241      	movs	r2, #65	; 0x41
 800609e:	5c9b      	ldrb	r3, [r3, r2]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	d138      	bne.n	8006118 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2240      	movs	r2, #64	; 0x40
 80060aa:	5c9b      	ldrb	r3, [r3, r2]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e032      	b.n	800611a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2240      	movs	r2, #64	; 0x40
 80060b8:	2101      	movs	r1, #1
 80060ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2241      	movs	r2, #65	; 0x41
 80060c0:	2124      	movs	r1, #36	; 0x24
 80060c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2101      	movs	r1, #1
 80060d0:	438a      	bics	r2, r1
 80060d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4911      	ldr	r1, [pc, #68]	; (8006124 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80060e0:	400a      	ands	r2, r1
 80060e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6819      	ldr	r1, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2101      	movs	r1, #1
 8006100:	430a      	orrs	r2, r1
 8006102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2241      	movs	r2, #65	; 0x41
 8006108:	2120      	movs	r1, #32
 800610a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2240      	movs	r2, #64	; 0x40
 8006110:	2100      	movs	r1, #0
 8006112:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	e000      	b.n	800611a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006118:	2302      	movs	r3, #2
  }
}
 800611a:	0018      	movs	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	b002      	add	sp, #8
 8006120:	bd80      	pop	{r7, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	ffffefff 	.word	0xffffefff

08006128 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2241      	movs	r2, #65	; 0x41
 8006136:	5c9b      	ldrb	r3, [r3, r2]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b20      	cmp	r3, #32
 800613c:	d139      	bne.n	80061b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2240      	movs	r2, #64	; 0x40
 8006142:	5c9b      	ldrb	r3, [r3, r2]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006148:	2302      	movs	r3, #2
 800614a:	e033      	b.n	80061b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2240      	movs	r2, #64	; 0x40
 8006150:	2101      	movs	r1, #1
 8006152:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2241      	movs	r2, #65	; 0x41
 8006158:	2124      	movs	r1, #36	; 0x24
 800615a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2101      	movs	r1, #1
 8006168:	438a      	bics	r2, r1
 800616a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a11      	ldr	r2, [pc, #68]	; (80061bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006178:	4013      	ands	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2101      	movs	r1, #1
 800619a:	430a      	orrs	r2, r1
 800619c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2241      	movs	r2, #65	; 0x41
 80061a2:	2120      	movs	r1, #32
 80061a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2240      	movs	r2, #64	; 0x40
 80061aa:	2100      	movs	r1, #0
 80061ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e000      	b.n	80061b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
  }
}
 80061b4:	0018      	movs	r0, r3
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b004      	add	sp, #16
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	fffff0ff 	.word	0xfffff0ff

080061c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80061c8:	4b19      	ldr	r3, [pc, #100]	; (8006230 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a19      	ldr	r2, [pc, #100]	; (8006234 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	0019      	movs	r1, r3
 80061d2:	4b17      	ldr	r3, [pc, #92]	; (8006230 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d11f      	bne.n	8006224 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80061e4:	4b14      	ldr	r3, [pc, #80]	; (8006238 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	0013      	movs	r3, r2
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	189b      	adds	r3, r3, r2
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	4912      	ldr	r1, [pc, #72]	; (800623c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80061f2:	0018      	movs	r0, r3
 80061f4:	f7f9 ffa0 	bl	8000138 <__udivsi3>
 80061f8:	0003      	movs	r3, r0
 80061fa:	3301      	adds	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061fe:	e008      	b.n	8006212 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3b01      	subs	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	e001      	b.n	8006212 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e009      	b.n	8006226 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006214:	695a      	ldr	r2, [r3, #20]
 8006216:	2380      	movs	r3, #128	; 0x80
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	401a      	ands	r2, r3
 800621c:	2380      	movs	r3, #128	; 0x80
 800621e:	00db      	lsls	r3, r3, #3
 8006220:	429a      	cmp	r2, r3
 8006222:	d0ed      	beq.n	8006200 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	0018      	movs	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	b004      	add	sp, #16
 800622c:	bd80      	pop	{r7, pc}
 800622e:	46c0      	nop			; (mov r8, r8)
 8006230:	40007000 	.word	0x40007000
 8006234:	fffff9ff 	.word	0xfffff9ff
 8006238:	20000000 	.word	0x20000000
 800623c:	000f4240 	.word	0x000f4240

08006240 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006244:	4b03      	ldr	r3, [pc, #12]	; (8006254 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	23e0      	movs	r3, #224	; 0xe0
 800624a:	01db      	lsls	r3, r3, #7
 800624c:	4013      	ands	r3, r2
}
 800624e:	0018      	movs	r0, r3
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40021000 	.word	0x40021000

08006258 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e2f9      	b.n	800685e <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2201      	movs	r2, #1
 8006270:	4013      	ands	r3, r2
 8006272:	d100      	bne.n	8006276 <HAL_RCC_OscConfig+0x1e>
 8006274:	e07c      	b.n	8006370 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006276:	4bc3      	ldr	r3, [pc, #780]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2238      	movs	r2, #56	; 0x38
 800627c:	4013      	ands	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006280:	4bc0      	ldr	r3, [pc, #768]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2203      	movs	r2, #3
 8006286:	4013      	ands	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b10      	cmp	r3, #16
 800628e:	d102      	bne.n	8006296 <HAL_RCC_OscConfig+0x3e>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2b03      	cmp	r3, #3
 8006294:	d002      	beq.n	800629c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b08      	cmp	r3, #8
 800629a:	d10b      	bne.n	80062b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800629c:	4bb9      	ldr	r3, [pc, #740]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	029b      	lsls	r3, r3, #10
 80062a4:	4013      	ands	r3, r2
 80062a6:	d062      	beq.n	800636e <HAL_RCC_OscConfig+0x116>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d15e      	bne.n	800636e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e2d4      	b.n	800685e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	2380      	movs	r3, #128	; 0x80
 80062ba:	025b      	lsls	r3, r3, #9
 80062bc:	429a      	cmp	r2, r3
 80062be:	d107      	bne.n	80062d0 <HAL_RCC_OscConfig+0x78>
 80062c0:	4bb0      	ldr	r3, [pc, #704]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	4baf      	ldr	r3, [pc, #700]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80062c6:	2180      	movs	r1, #128	; 0x80
 80062c8:	0249      	lsls	r1, r1, #9
 80062ca:	430a      	orrs	r2, r1
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e020      	b.n	8006312 <HAL_RCC_OscConfig+0xba>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	23a0      	movs	r3, #160	; 0xa0
 80062d6:	02db      	lsls	r3, r3, #11
 80062d8:	429a      	cmp	r2, r3
 80062da:	d10e      	bne.n	80062fa <HAL_RCC_OscConfig+0xa2>
 80062dc:	4ba9      	ldr	r3, [pc, #676]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4ba8      	ldr	r3, [pc, #672]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80062e2:	2180      	movs	r1, #128	; 0x80
 80062e4:	02c9      	lsls	r1, r1, #11
 80062e6:	430a      	orrs	r2, r1
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	4ba6      	ldr	r3, [pc, #664]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4ba5      	ldr	r3, [pc, #660]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80062f0:	2180      	movs	r1, #128	; 0x80
 80062f2:	0249      	lsls	r1, r1, #9
 80062f4:	430a      	orrs	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e00b      	b.n	8006312 <HAL_RCC_OscConfig+0xba>
 80062fa:	4ba2      	ldr	r3, [pc, #648]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4ba1      	ldr	r3, [pc, #644]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006300:	49a1      	ldr	r1, [pc, #644]	; (8006588 <HAL_RCC_OscConfig+0x330>)
 8006302:	400a      	ands	r2, r1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	4b9f      	ldr	r3, [pc, #636]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	4b9e      	ldr	r3, [pc, #632]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 800630c:	499f      	ldr	r1, [pc, #636]	; (800658c <HAL_RCC_OscConfig+0x334>)
 800630e:	400a      	ands	r2, r1
 8006310:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d014      	beq.n	8006344 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631a:	f7ff fba9 	bl	8005a70 <HAL_GetTick>
 800631e:	0003      	movs	r3, r0
 8006320:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006324:	f7ff fba4 	bl	8005a70 <HAL_GetTick>
 8006328:	0002      	movs	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b64      	cmp	r3, #100	; 0x64
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e293      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006336:	4b93      	ldr	r3, [pc, #588]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	2380      	movs	r3, #128	; 0x80
 800633c:	029b      	lsls	r3, r3, #10
 800633e:	4013      	ands	r3, r2
 8006340:	d0f0      	beq.n	8006324 <HAL_RCC_OscConfig+0xcc>
 8006342:	e015      	b.n	8006370 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006344:	f7ff fb94 	bl	8005a70 <HAL_GetTick>
 8006348:	0003      	movs	r3, r0
 800634a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800634e:	f7ff fb8f 	bl	8005a70 <HAL_GetTick>
 8006352:	0002      	movs	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b64      	cmp	r3, #100	; 0x64
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e27e      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006360:	4b88      	ldr	r3, [pc, #544]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	2380      	movs	r3, #128	; 0x80
 8006366:	029b      	lsls	r3, r3, #10
 8006368:	4013      	ands	r3, r2
 800636a:	d1f0      	bne.n	800634e <HAL_RCC_OscConfig+0xf6>
 800636c:	e000      	b.n	8006370 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800636e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2202      	movs	r2, #2
 8006376:	4013      	ands	r3, r2
 8006378:	d100      	bne.n	800637c <HAL_RCC_OscConfig+0x124>
 800637a:	e099      	b.n	80064b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800637c:	4b81      	ldr	r3, [pc, #516]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2238      	movs	r2, #56	; 0x38
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006386:	4b7f      	ldr	r3, [pc, #508]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	2203      	movs	r2, #3
 800638c:	4013      	ands	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2b10      	cmp	r3, #16
 8006394:	d102      	bne.n	800639c <HAL_RCC_OscConfig+0x144>
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d002      	beq.n	80063a2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d135      	bne.n	800640e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063a2:	4b78      	ldr	r3, [pc, #480]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	2380      	movs	r3, #128	; 0x80
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4013      	ands	r3, r2
 80063ac:	d005      	beq.n	80063ba <HAL_RCC_OscConfig+0x162>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e251      	b.n	800685e <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ba:	4b72      	ldr	r3, [pc, #456]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	4a74      	ldr	r2, [pc, #464]	; (8006590 <HAL_RCC_OscConfig+0x338>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	0019      	movs	r1, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	021a      	lsls	r2, r3, #8
 80063ca:	4b6e      	ldr	r3, [pc, #440]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80063cc:	430a      	orrs	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d112      	bne.n	80063fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80063d6:	4b6b      	ldr	r3, [pc, #428]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6e      	ldr	r2, [pc, #440]	; (8006594 <HAL_RCC_OscConfig+0x33c>)
 80063dc:	4013      	ands	r3, r2
 80063de:	0019      	movs	r1, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	4b67      	ldr	r3, [pc, #412]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80063e6:	430a      	orrs	r2, r1
 80063e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80063ea:	4b66      	ldr	r3, [pc, #408]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	0adb      	lsrs	r3, r3, #11
 80063f0:	2207      	movs	r2, #7
 80063f2:	4013      	ands	r3, r2
 80063f4:	4a68      	ldr	r2, [pc, #416]	; (8006598 <HAL_RCC_OscConfig+0x340>)
 80063f6:	40da      	lsrs	r2, r3
 80063f8:	4b68      	ldr	r3, [pc, #416]	; (800659c <HAL_RCC_OscConfig+0x344>)
 80063fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80063fc:	4b68      	ldr	r3, [pc, #416]	; (80065a0 <HAL_RCC_OscConfig+0x348>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	0018      	movs	r0, r3
 8006402:	f7ff fad9 	bl	80059b8 <HAL_InitTick>
 8006406:	1e03      	subs	r3, r0, #0
 8006408:	d051      	beq.n	80064ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e227      	b.n	800685e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d030      	beq.n	8006478 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006416:	4b5b      	ldr	r3, [pc, #364]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a5e      	ldr	r2, [pc, #376]	; (8006594 <HAL_RCC_OscConfig+0x33c>)
 800641c:	4013      	ands	r3, r2
 800641e:	0019      	movs	r1, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	4b57      	ldr	r3, [pc, #348]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006426:	430a      	orrs	r2, r1
 8006428:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800642a:	4b56      	ldr	r3, [pc, #344]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	4b55      	ldr	r3, [pc, #340]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006430:	2180      	movs	r1, #128	; 0x80
 8006432:	0049      	lsls	r1, r1, #1
 8006434:	430a      	orrs	r2, r1
 8006436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7ff fb1a 	bl	8005a70 <HAL_GetTick>
 800643c:	0003      	movs	r3, r0
 800643e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006440:	e008      	b.n	8006454 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006442:	f7ff fb15 	bl	8005a70 <HAL_GetTick>
 8006446:	0002      	movs	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e204      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006454:	4b4b      	ldr	r3, [pc, #300]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	4013      	ands	r3, r2
 800645e:	d0f0      	beq.n	8006442 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006460:	4b48      	ldr	r3, [pc, #288]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4a4a      	ldr	r2, [pc, #296]	; (8006590 <HAL_RCC_OscConfig+0x338>)
 8006466:	4013      	ands	r3, r2
 8006468:	0019      	movs	r1, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	021a      	lsls	r2, r3, #8
 8006470:	4b44      	ldr	r3, [pc, #272]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
 8006476:	e01b      	b.n	80064b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006478:	4b42      	ldr	r3, [pc, #264]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b41      	ldr	r3, [pc, #260]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 800647e:	4949      	ldr	r1, [pc, #292]	; (80065a4 <HAL_RCC_OscConfig+0x34c>)
 8006480:	400a      	ands	r2, r1
 8006482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006484:	f7ff faf4 	bl	8005a70 <HAL_GetTick>
 8006488:	0003      	movs	r3, r0
 800648a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800648c:	e008      	b.n	80064a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800648e:	f7ff faef 	bl	8005a70 <HAL_GetTick>
 8006492:	0002      	movs	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e1de      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064a0:	4b38      	ldr	r3, [pc, #224]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	2380      	movs	r3, #128	; 0x80
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4013      	ands	r3, r2
 80064aa:	d1f0      	bne.n	800648e <HAL_RCC_OscConfig+0x236>
 80064ac:	e000      	b.n	80064b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2208      	movs	r2, #8
 80064b6:	4013      	ands	r3, r2
 80064b8:	d047      	beq.n	800654a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80064ba:	4b32      	ldr	r3, [pc, #200]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2238      	movs	r2, #56	; 0x38
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b18      	cmp	r3, #24
 80064c4:	d10a      	bne.n	80064dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80064c6:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80064c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ca:	2202      	movs	r2, #2
 80064cc:	4013      	ands	r3, r2
 80064ce:	d03c      	beq.n	800654a <HAL_RCC_OscConfig+0x2f2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d138      	bne.n	800654a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e1c0      	b.n	800685e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d019      	beq.n	8006518 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80064e4:	4b27      	ldr	r3, [pc, #156]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80064e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064e8:	4b26      	ldr	r3, [pc, #152]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 80064ea:	2101      	movs	r1, #1
 80064ec:	430a      	orrs	r2, r1
 80064ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f0:	f7ff fabe 	bl	8005a70 <HAL_GetTick>
 80064f4:	0003      	movs	r3, r0
 80064f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064fa:	f7ff fab9 	bl	8005a70 <HAL_GetTick>
 80064fe:	0002      	movs	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e1a8      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800650c:	4b1d      	ldr	r3, [pc, #116]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 800650e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006510:	2202      	movs	r2, #2
 8006512:	4013      	ands	r3, r2
 8006514:	d0f1      	beq.n	80064fa <HAL_RCC_OscConfig+0x2a2>
 8006516:	e018      	b.n	800654a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006518:	4b1a      	ldr	r3, [pc, #104]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 800651a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800651c:	4b19      	ldr	r3, [pc, #100]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 800651e:	2101      	movs	r1, #1
 8006520:	438a      	bics	r2, r1
 8006522:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006524:	f7ff faa4 	bl	8005a70 <HAL_GetTick>
 8006528:	0003      	movs	r3, r0
 800652a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800652c:	e008      	b.n	8006540 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800652e:	f7ff fa9f 	bl	8005a70 <HAL_GetTick>
 8006532:	0002      	movs	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e18e      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006540:	4b10      	ldr	r3, [pc, #64]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006544:	2202      	movs	r2, #2
 8006546:	4013      	ands	r3, r2
 8006548:	d1f1      	bne.n	800652e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2204      	movs	r2, #4
 8006550:	4013      	ands	r3, r2
 8006552:	d100      	bne.n	8006556 <HAL_RCC_OscConfig+0x2fe>
 8006554:	e0c6      	b.n	80066e4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006556:	231f      	movs	r3, #31
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	2238      	movs	r2, #56	; 0x38
 8006564:	4013      	ands	r3, r2
 8006566:	2b20      	cmp	r3, #32
 8006568:	d11e      	bne.n	80065a8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_RCC_OscConfig+0x32c>)
 800656c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656e:	2202      	movs	r2, #2
 8006570:	4013      	ands	r3, r2
 8006572:	d100      	bne.n	8006576 <HAL_RCC_OscConfig+0x31e>
 8006574:	e0b6      	b.n	80066e4 <HAL_RCC_OscConfig+0x48c>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d000      	beq.n	8006580 <HAL_RCC_OscConfig+0x328>
 800657e:	e0b1      	b.n	80066e4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e16c      	b.n	800685e <HAL_RCC_OscConfig+0x606>
 8006584:	40021000 	.word	0x40021000
 8006588:	fffeffff 	.word	0xfffeffff
 800658c:	fffbffff 	.word	0xfffbffff
 8006590:	ffff80ff 	.word	0xffff80ff
 8006594:	ffffc7ff 	.word	0xffffc7ff
 8006598:	00f42400 	.word	0x00f42400
 800659c:	20000000 	.word	0x20000000
 80065a0:	20000004 	.word	0x20000004
 80065a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065a8:	4baf      	ldr	r3, [pc, #700]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80065aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	055b      	lsls	r3, r3, #21
 80065b0:	4013      	ands	r3, r2
 80065b2:	d101      	bne.n	80065b8 <HAL_RCC_OscConfig+0x360>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <HAL_RCC_OscConfig+0x362>
 80065b8:	2300      	movs	r3, #0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d011      	beq.n	80065e2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80065be:	4baa      	ldr	r3, [pc, #680]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80065c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065c2:	4ba9      	ldr	r3, [pc, #676]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80065c4:	2180      	movs	r1, #128	; 0x80
 80065c6:	0549      	lsls	r1, r1, #21
 80065c8:	430a      	orrs	r2, r1
 80065ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80065cc:	4ba6      	ldr	r3, [pc, #664]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80065ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065d0:	2380      	movs	r3, #128	; 0x80
 80065d2:	055b      	lsls	r3, r3, #21
 80065d4:	4013      	ands	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80065da:	231f      	movs	r3, #31
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	2201      	movs	r2, #1
 80065e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065e2:	4ba2      	ldr	r3, [pc, #648]	; (800686c <HAL_RCC_OscConfig+0x614>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	2380      	movs	r3, #128	; 0x80
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	4013      	ands	r3, r2
 80065ec:	d11a      	bne.n	8006624 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065ee:	4b9f      	ldr	r3, [pc, #636]	; (800686c <HAL_RCC_OscConfig+0x614>)
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b9e      	ldr	r3, [pc, #632]	; (800686c <HAL_RCC_OscConfig+0x614>)
 80065f4:	2180      	movs	r1, #128	; 0x80
 80065f6:	0049      	lsls	r1, r1, #1
 80065f8:	430a      	orrs	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80065fc:	f7ff fa38 	bl	8005a70 <HAL_GetTick>
 8006600:	0003      	movs	r3, r0
 8006602:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006606:	f7ff fa33 	bl	8005a70 <HAL_GetTick>
 800660a:	0002      	movs	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e122      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006618:	4b94      	ldr	r3, [pc, #592]	; (800686c <HAL_RCC_OscConfig+0x614>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	2380      	movs	r3, #128	; 0x80
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	4013      	ands	r3, r2
 8006622:	d0f0      	beq.n	8006606 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d106      	bne.n	800663a <HAL_RCC_OscConfig+0x3e2>
 800662c:	4b8e      	ldr	r3, [pc, #568]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 800662e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006630:	4b8d      	ldr	r3, [pc, #564]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 8006632:	2101      	movs	r1, #1
 8006634:	430a      	orrs	r2, r1
 8006636:	65da      	str	r2, [r3, #92]	; 0x5c
 8006638:	e01c      	b.n	8006674 <HAL_RCC_OscConfig+0x41c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b05      	cmp	r3, #5
 8006640:	d10c      	bne.n	800665c <HAL_RCC_OscConfig+0x404>
 8006642:	4b89      	ldr	r3, [pc, #548]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 8006644:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006646:	4b88      	ldr	r3, [pc, #544]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 8006648:	2104      	movs	r1, #4
 800664a:	430a      	orrs	r2, r1
 800664c:	65da      	str	r2, [r3, #92]	; 0x5c
 800664e:	4b86      	ldr	r3, [pc, #536]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 8006650:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006652:	4b85      	ldr	r3, [pc, #532]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 8006654:	2101      	movs	r1, #1
 8006656:	430a      	orrs	r2, r1
 8006658:	65da      	str	r2, [r3, #92]	; 0x5c
 800665a:	e00b      	b.n	8006674 <HAL_RCC_OscConfig+0x41c>
 800665c:	4b82      	ldr	r3, [pc, #520]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 800665e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006660:	4b81      	ldr	r3, [pc, #516]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 8006662:	2101      	movs	r1, #1
 8006664:	438a      	bics	r2, r1
 8006666:	65da      	str	r2, [r3, #92]	; 0x5c
 8006668:	4b7f      	ldr	r3, [pc, #508]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 800666a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800666c:	4b7e      	ldr	r3, [pc, #504]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 800666e:	2104      	movs	r1, #4
 8006670:	438a      	bics	r2, r1
 8006672:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d014      	beq.n	80066a6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667c:	f7ff f9f8 	bl	8005a70 <HAL_GetTick>
 8006680:	0003      	movs	r3, r0
 8006682:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006684:	e009      	b.n	800669a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006686:	f7ff f9f3 	bl	8005a70 <HAL_GetTick>
 800668a:	0002      	movs	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	4a77      	ldr	r2, [pc, #476]	; (8006870 <HAL_RCC_OscConfig+0x618>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e0e1      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800669a:	4b73      	ldr	r3, [pc, #460]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 800669c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800669e:	2202      	movs	r2, #2
 80066a0:	4013      	ands	r3, r2
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x42e>
 80066a4:	e013      	b.n	80066ce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a6:	f7ff f9e3 	bl	8005a70 <HAL_GetTick>
 80066aa:	0003      	movs	r3, r0
 80066ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066ae:	e009      	b.n	80066c4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b0:	f7ff f9de 	bl	8005a70 <HAL_GetTick>
 80066b4:	0002      	movs	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	4a6d      	ldr	r2, [pc, #436]	; (8006870 <HAL_RCC_OscConfig+0x618>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e0cc      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066c4:	4b68      	ldr	r3, [pc, #416]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80066c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c8:	2202      	movs	r2, #2
 80066ca:	4013      	ands	r3, r2
 80066cc:	d1f0      	bne.n	80066b0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80066ce:	231f      	movs	r3, #31
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d105      	bne.n	80066e4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80066d8:	4b63      	ldr	r3, [pc, #396]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80066da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066dc:	4b62      	ldr	r3, [pc, #392]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80066de:	4965      	ldr	r1, [pc, #404]	; (8006874 <HAL_RCC_OscConfig+0x61c>)
 80066e0:	400a      	ands	r2, r1
 80066e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d100      	bne.n	80066ee <HAL_RCC_OscConfig+0x496>
 80066ec:	e0b6      	b.n	800685c <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066ee:	4b5e      	ldr	r3, [pc, #376]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	2238      	movs	r2, #56	; 0x38
 80066f4:	4013      	ands	r3, r2
 80066f6:	2b10      	cmp	r3, #16
 80066f8:	d100      	bne.n	80066fc <HAL_RCC_OscConfig+0x4a4>
 80066fa:	e07e      	b.n	80067fa <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	2b02      	cmp	r3, #2
 8006702:	d153      	bne.n	80067ac <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006704:	4b58      	ldr	r3, [pc, #352]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4b57      	ldr	r3, [pc, #348]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 800670a:	495b      	ldr	r1, [pc, #364]	; (8006878 <HAL_RCC_OscConfig+0x620>)
 800670c:	400a      	ands	r2, r1
 800670e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006710:	f7ff f9ae 	bl	8005a70 <HAL_GetTick>
 8006714:	0003      	movs	r3, r0
 8006716:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006718:	e008      	b.n	800672c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800671a:	f7ff f9a9 	bl	8005a70 <HAL_GetTick>
 800671e:	0002      	movs	r2, r0
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e098      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800672c:	4b4e      	ldr	r3, [pc, #312]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	2380      	movs	r3, #128	; 0x80
 8006732:	049b      	lsls	r3, r3, #18
 8006734:	4013      	ands	r3, r2
 8006736:	d1f0      	bne.n	800671a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006738:	4b4b      	ldr	r3, [pc, #300]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	4a4f      	ldr	r2, [pc, #316]	; (800687c <HAL_RCC_OscConfig+0x624>)
 800673e:	4013      	ands	r3, r2
 8006740:	0019      	movs	r1, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1a      	ldr	r2, [r3, #32]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	431a      	orrs	r2, r3
 8006760:	4b41      	ldr	r3, [pc, #260]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 8006762:	430a      	orrs	r2, r1
 8006764:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006766:	4b40      	ldr	r3, [pc, #256]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4b3f      	ldr	r3, [pc, #252]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 800676c:	2180      	movs	r1, #128	; 0x80
 800676e:	0449      	lsls	r1, r1, #17
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006774:	4b3c      	ldr	r3, [pc, #240]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	4b3b      	ldr	r3, [pc, #236]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 800677a:	2180      	movs	r1, #128	; 0x80
 800677c:	0549      	lsls	r1, r1, #21
 800677e:	430a      	orrs	r2, r1
 8006780:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006782:	f7ff f975 	bl	8005a70 <HAL_GetTick>
 8006786:	0003      	movs	r3, r0
 8006788:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800678c:	f7ff f970 	bl	8005a70 <HAL_GetTick>
 8006790:	0002      	movs	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e05f      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800679e:	4b32      	ldr	r3, [pc, #200]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	2380      	movs	r3, #128	; 0x80
 80067a4:	049b      	lsls	r3, r3, #18
 80067a6:	4013      	ands	r3, r2
 80067a8:	d0f0      	beq.n	800678c <HAL_RCC_OscConfig+0x534>
 80067aa:	e057      	b.n	800685c <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ac:	4b2e      	ldr	r3, [pc, #184]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	4b2d      	ldr	r3, [pc, #180]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80067b2:	4931      	ldr	r1, [pc, #196]	; (8006878 <HAL_RCC_OscConfig+0x620>)
 80067b4:	400a      	ands	r2, r1
 80067b6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80067b8:	4b2b      	ldr	r3, [pc, #172]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	4b2a      	ldr	r3, [pc, #168]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80067be:	2103      	movs	r1, #3
 80067c0:	438a      	bics	r2, r1
 80067c2:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80067c4:	4b28      	ldr	r3, [pc, #160]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	4b27      	ldr	r3, [pc, #156]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80067ca:	492d      	ldr	r1, [pc, #180]	; (8006880 <HAL_RCC_OscConfig+0x628>)
 80067cc:	400a      	ands	r2, r1
 80067ce:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d0:	f7ff f94e 	bl	8005a70 <HAL_GetTick>
 80067d4:	0003      	movs	r3, r0
 80067d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067d8:	e008      	b.n	80067ec <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067da:	f7ff f949 	bl	8005a70 <HAL_GetTick>
 80067de:	0002      	movs	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e038      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067ec:	4b1e      	ldr	r3, [pc, #120]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	2380      	movs	r3, #128	; 0x80
 80067f2:	049b      	lsls	r3, r3, #18
 80067f4:	4013      	ands	r3, r2
 80067f6:	d1f0      	bne.n	80067da <HAL_RCC_OscConfig+0x582>
 80067f8:	e030      	b.n	800685c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e02b      	b.n	800685e <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006806:	4b18      	ldr	r3, [pc, #96]	; (8006868 <HAL_RCC_OscConfig+0x610>)
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2203      	movs	r2, #3
 8006810:	401a      	ands	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	429a      	cmp	r2, r3
 8006818:	d11e      	bne.n	8006858 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2270      	movs	r2, #112	; 0x70
 800681e:	401a      	ands	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d117      	bne.n	8006858 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	23fe      	movs	r3, #254	; 0xfe
 800682c:	01db      	lsls	r3, r3, #7
 800682e:	401a      	ands	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006836:	429a      	cmp	r2, r3
 8006838:	d10e      	bne.n	8006858 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	23f8      	movs	r3, #248	; 0xf8
 800683e:	039b      	lsls	r3, r3, #14
 8006840:	401a      	ands	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006846:	429a      	cmp	r2, r3
 8006848:	d106      	bne.n	8006858 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	0f5b      	lsrs	r3, r3, #29
 800684e:	075a      	lsls	r2, r3, #29
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006854:	429a      	cmp	r2, r3
 8006856:	d001      	beq.n	800685c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	0018      	movs	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	b008      	add	sp, #32
 8006864:	bd80      	pop	{r7, pc}
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	40021000 	.word	0x40021000
 800686c:	40007000 	.word	0x40007000
 8006870:	00001388 	.word	0x00001388
 8006874:	efffffff 	.word	0xefffffff
 8006878:	feffffff 	.word	0xfeffffff
 800687c:	1fc1808c 	.word	0x1fc1808c
 8006880:	effeffff 	.word	0xeffeffff

08006884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e0e9      	b.n	8006a6c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006898:	4b76      	ldr	r3, [pc, #472]	; (8006a74 <HAL_RCC_ClockConfig+0x1f0>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2207      	movs	r2, #7
 800689e:	4013      	ands	r3, r2
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d91e      	bls.n	80068e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a6:	4b73      	ldr	r3, [pc, #460]	; (8006a74 <HAL_RCC_ClockConfig+0x1f0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2207      	movs	r2, #7
 80068ac:	4393      	bics	r3, r2
 80068ae:	0019      	movs	r1, r3
 80068b0:	4b70      	ldr	r3, [pc, #448]	; (8006a74 <HAL_RCC_ClockConfig+0x1f0>)
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068b8:	f7ff f8da 	bl	8005a70 <HAL_GetTick>
 80068bc:	0003      	movs	r3, r0
 80068be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068c0:	e009      	b.n	80068d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068c2:	f7ff f8d5 	bl	8005a70 <HAL_GetTick>
 80068c6:	0002      	movs	r2, r0
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	4a6a      	ldr	r2, [pc, #424]	; (8006a78 <HAL_RCC_ClockConfig+0x1f4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e0ca      	b.n	8006a6c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068d6:	4b67      	ldr	r3, [pc, #412]	; (8006a74 <HAL_RCC_ClockConfig+0x1f0>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2207      	movs	r2, #7
 80068dc:	4013      	ands	r3, r2
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d1ee      	bne.n	80068c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2202      	movs	r2, #2
 80068ea:	4013      	ands	r3, r2
 80068ec:	d015      	beq.n	800691a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2204      	movs	r2, #4
 80068f4:	4013      	ands	r3, r2
 80068f6:	d006      	beq.n	8006906 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80068f8:	4b60      	ldr	r3, [pc, #384]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	4b5f      	ldr	r3, [pc, #380]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 80068fe:	21e0      	movs	r1, #224	; 0xe0
 8006900:	01c9      	lsls	r1, r1, #7
 8006902:	430a      	orrs	r2, r1
 8006904:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006906:	4b5d      	ldr	r3, [pc, #372]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	4a5d      	ldr	r2, [pc, #372]	; (8006a80 <HAL_RCC_ClockConfig+0x1fc>)
 800690c:	4013      	ands	r3, r2
 800690e:	0019      	movs	r1, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	4b59      	ldr	r3, [pc, #356]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 8006916:	430a      	orrs	r2, r1
 8006918:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2201      	movs	r2, #1
 8006920:	4013      	ands	r3, r2
 8006922:	d057      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d107      	bne.n	800693c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800692c:	4b53      	ldr	r3, [pc, #332]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	2380      	movs	r3, #128	; 0x80
 8006932:	029b      	lsls	r3, r3, #10
 8006934:	4013      	ands	r3, r2
 8006936:	d12b      	bne.n	8006990 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e097      	b.n	8006a6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b02      	cmp	r3, #2
 8006942:	d107      	bne.n	8006954 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006944:	4b4d      	ldr	r3, [pc, #308]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	2380      	movs	r3, #128	; 0x80
 800694a:	049b      	lsls	r3, r3, #18
 800694c:	4013      	ands	r3, r2
 800694e:	d11f      	bne.n	8006990 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e08b      	b.n	8006a6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d107      	bne.n	800696c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800695c:	4b47      	ldr	r3, [pc, #284]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	2380      	movs	r3, #128	; 0x80
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	4013      	ands	r3, r2
 8006966:	d113      	bne.n	8006990 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e07f      	b.n	8006a6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b03      	cmp	r3, #3
 8006972:	d106      	bne.n	8006982 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006974:	4b41      	ldr	r3, [pc, #260]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 8006976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006978:	2202      	movs	r2, #2
 800697a:	4013      	ands	r3, r2
 800697c:	d108      	bne.n	8006990 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e074      	b.n	8006a6c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006982:	4b3e      	ldr	r3, [pc, #248]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 8006984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006986:	2202      	movs	r2, #2
 8006988:	4013      	ands	r3, r2
 800698a:	d101      	bne.n	8006990 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e06d      	b.n	8006a6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006990:	4b3a      	ldr	r3, [pc, #232]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2207      	movs	r2, #7
 8006996:	4393      	bics	r3, r2
 8006998:	0019      	movs	r1, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	4b37      	ldr	r3, [pc, #220]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 80069a0:	430a      	orrs	r2, r1
 80069a2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a4:	f7ff f864 	bl	8005a70 <HAL_GetTick>
 80069a8:	0003      	movs	r3, r0
 80069aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ac:	e009      	b.n	80069c2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069ae:	f7ff f85f 	bl	8005a70 <HAL_GetTick>
 80069b2:	0002      	movs	r2, r0
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	4a2f      	ldr	r2, [pc, #188]	; (8006a78 <HAL_RCC_ClockConfig+0x1f4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e054      	b.n	8006a6c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c2:	4b2e      	ldr	r3, [pc, #184]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2238      	movs	r2, #56	; 0x38
 80069c8:	401a      	ands	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d1ec      	bne.n	80069ae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069d4:	4b27      	ldr	r3, [pc, #156]	; (8006a74 <HAL_RCC_ClockConfig+0x1f0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2207      	movs	r2, #7
 80069da:	4013      	ands	r3, r2
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d21e      	bcs.n	8006a20 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e2:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <HAL_RCC_ClockConfig+0x1f0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2207      	movs	r2, #7
 80069e8:	4393      	bics	r3, r2
 80069ea:	0019      	movs	r1, r3
 80069ec:	4b21      	ldr	r3, [pc, #132]	; (8006a74 <HAL_RCC_ClockConfig+0x1f0>)
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069f4:	f7ff f83c 	bl	8005a70 <HAL_GetTick>
 80069f8:	0003      	movs	r3, r0
 80069fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80069fc:	e009      	b.n	8006a12 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069fe:	f7ff f837 	bl	8005a70 <HAL_GetTick>
 8006a02:	0002      	movs	r2, r0
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	4a1b      	ldr	r2, [pc, #108]	; (8006a78 <HAL_RCC_ClockConfig+0x1f4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e02c      	b.n	8006a6c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a12:	4b18      	ldr	r3, [pc, #96]	; (8006a74 <HAL_RCC_ClockConfig+0x1f0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2207      	movs	r2, #7
 8006a18:	4013      	ands	r3, r2
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d1ee      	bne.n	80069fe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2204      	movs	r2, #4
 8006a26:	4013      	ands	r3, r2
 8006a28:	d009      	beq.n	8006a3e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006a2a:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <HAL_RCC_ClockConfig+0x200>)
 8006a30:	4013      	ands	r3, r2
 8006a32:	0019      	movs	r1, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006a3e:	f000 f829 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8006a42:	0001      	movs	r1, r0
 8006a44:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <HAL_RCC_ClockConfig+0x1f8>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	220f      	movs	r2, #15
 8006a4c:	401a      	ands	r2, r3
 8006a4e:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <HAL_RCC_ClockConfig+0x204>)
 8006a50:	0092      	lsls	r2, r2, #2
 8006a52:	58d3      	ldr	r3, [r2, r3]
 8006a54:	221f      	movs	r2, #31
 8006a56:	4013      	ands	r3, r2
 8006a58:	000a      	movs	r2, r1
 8006a5a:	40da      	lsrs	r2, r3
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <HAL_RCC_ClockConfig+0x208>)
 8006a5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <HAL_RCC_ClockConfig+0x20c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	0018      	movs	r0, r3
 8006a66:	f7fe ffa7 	bl	80059b8 <HAL_InitTick>
 8006a6a:	0003      	movs	r3, r0
}
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b004      	add	sp, #16
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40022000 	.word	0x40022000
 8006a78:	00001388 	.word	0x00001388
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	fffff0ff 	.word	0xfffff0ff
 8006a84:	ffff8fff 	.word	0xffff8fff
 8006a88:	0800e11c 	.word	0x0800e11c
 8006a8c:	20000000 	.word	0x20000000
 8006a90:	20000004 	.word	0x20000004

08006a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a9a:	4b3c      	ldr	r3, [pc, #240]	; (8006b8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	2238      	movs	r2, #56	; 0x38
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	d10f      	bne.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006aa4:	4b39      	ldr	r3, [pc, #228]	; (8006b8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	0adb      	lsrs	r3, r3, #11
 8006aaa:	2207      	movs	r2, #7
 8006aac:	4013      	ands	r3, r2
 8006aae:	2201      	movs	r2, #1
 8006ab0:	409a      	lsls	r2, r3
 8006ab2:	0013      	movs	r3, r2
 8006ab4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	4835      	ldr	r0, [pc, #212]	; (8006b90 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006aba:	f7f9 fb3d 	bl	8000138 <__udivsi3>
 8006abe:	0003      	movs	r3, r0
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	e05d      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ac4:	4b31      	ldr	r3, [pc, #196]	; (8006b8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2238      	movs	r2, #56	; 0x38
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d102      	bne.n	8006ad6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ad0:	4b30      	ldr	r3, [pc, #192]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x100>)
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	e054      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ad6:	4b2d      	ldr	r3, [pc, #180]	; (8006b8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2238      	movs	r2, #56	; 0x38
 8006adc:	4013      	ands	r3, r2
 8006ade:	2b10      	cmp	r3, #16
 8006ae0:	d138      	bne.n	8006b54 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006ae2:	4b2a      	ldr	r3, [pc, #168]	; (8006b8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006aec:	4b27      	ldr	r3, [pc, #156]	; (8006b8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	091b      	lsrs	r3, r3, #4
 8006af2:	2207      	movs	r2, #7
 8006af4:	4013      	ands	r3, r2
 8006af6:	3301      	adds	r3, #1
 8006af8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d10d      	bne.n	8006b1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	4824      	ldr	r0, [pc, #144]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x100>)
 8006b04:	f7f9 fb18 	bl	8000138 <__udivsi3>
 8006b08:	0003      	movs	r3, r0
 8006b0a:	0019      	movs	r1, r3
 8006b0c:	4b1f      	ldr	r3, [pc, #124]	; (8006b8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	227f      	movs	r2, #127	; 0x7f
 8006b14:	4013      	ands	r3, r2
 8006b16:	434b      	muls	r3, r1
 8006b18:	617b      	str	r3, [r7, #20]
        break;
 8006b1a:	e00d      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	481c      	ldr	r0, [pc, #112]	; (8006b90 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006b20:	f7f9 fb0a 	bl	8000138 <__udivsi3>
 8006b24:	0003      	movs	r3, r0
 8006b26:	0019      	movs	r1, r3
 8006b28:	4b18      	ldr	r3, [pc, #96]	; (8006b8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	0a1b      	lsrs	r3, r3, #8
 8006b2e:	227f      	movs	r2, #127	; 0x7f
 8006b30:	4013      	ands	r3, r2
 8006b32:	434b      	muls	r3, r1
 8006b34:	617b      	str	r3, [r7, #20]
        break;
 8006b36:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006b38:	4b14      	ldr	r3, [pc, #80]	; (8006b8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	0f5b      	lsrs	r3, r3, #29
 8006b3e:	2207      	movs	r2, #7
 8006b40:	4013      	ands	r3, r2
 8006b42:	3301      	adds	r3, #1
 8006b44:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	6978      	ldr	r0, [r7, #20]
 8006b4a:	f7f9 faf5 	bl	8000138 <__udivsi3>
 8006b4e:	0003      	movs	r3, r0
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	e015      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006b54:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	2238      	movs	r2, #56	; 0x38
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d103      	bne.n	8006b68 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006b60:	2380      	movs	r3, #128	; 0x80
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	e00b      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006b68:	4b08      	ldr	r3, [pc, #32]	; (8006b8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2238      	movs	r2, #56	; 0x38
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b18      	cmp	r3, #24
 8006b72:	d103      	bne.n	8006b7c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006b74:	23fa      	movs	r3, #250	; 0xfa
 8006b76:	01db      	lsls	r3, r3, #7
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	e001      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b80:	693b      	ldr	r3, [r7, #16]
}
 8006b82:	0018      	movs	r0, r3
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b006      	add	sp, #24
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	00f42400 	.word	0x00f42400
 8006b94:	007a1200 	.word	0x007a1200

08006b98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b9c:	4b02      	ldr	r3, [pc, #8]	; (8006ba8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
}
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	20000000 	.word	0x20000000

08006bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bac:	b5b0      	push	{r4, r5, r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006bb0:	f7ff fff2 	bl	8006b98 <HAL_RCC_GetHCLKFreq>
 8006bb4:	0004      	movs	r4, r0
 8006bb6:	f7ff fb43 	bl	8006240 <LL_RCC_GetAPB1Prescaler>
 8006bba:	0003      	movs	r3, r0
 8006bbc:	0b1a      	lsrs	r2, r3, #12
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bc0:	0092      	lsls	r2, r2, #2
 8006bc2:	58d3      	ldr	r3, [r2, r3]
 8006bc4:	221f      	movs	r2, #31
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	40dc      	lsrs	r4, r3
 8006bca:	0023      	movs	r3, r4
}
 8006bcc:	0018      	movs	r0, r3
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	0800e15c 	.word	0x0800e15c

08006bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006be0:	2313      	movs	r3, #19
 8006be2:	18fb      	adds	r3, r7, r3
 8006be4:	2200      	movs	r2, #0
 8006be6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006be8:	2312      	movs	r3, #18
 8006bea:	18fb      	adds	r3, r7, r3
 8006bec:	2200      	movs	r2, #0
 8006bee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	029b      	lsls	r3, r3, #10
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d100      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006bfc:	e0a3      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bfe:	2011      	movs	r0, #17
 8006c00:	183b      	adds	r3, r7, r0
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c06:	4b86      	ldr	r3, [pc, #536]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c0a:	2380      	movs	r3, #128	; 0x80
 8006c0c:	055b      	lsls	r3, r3, #21
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d110      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c12:	4b83      	ldr	r3, [pc, #524]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c16:	4b82      	ldr	r3, [pc, #520]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c18:	2180      	movs	r1, #128	; 0x80
 8006c1a:	0549      	lsls	r1, r1, #21
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006c20:	4b7f      	ldr	r3, [pc, #508]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	055b      	lsls	r3, r3, #21
 8006c28:	4013      	ands	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c2e:	183b      	adds	r3, r7, r0
 8006c30:	2201      	movs	r2, #1
 8006c32:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c34:	4b7b      	ldr	r3, [pc, #492]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	4b7a      	ldr	r3, [pc, #488]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006c3a:	2180      	movs	r1, #128	; 0x80
 8006c3c:	0049      	lsls	r1, r1, #1
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c42:	f7fe ff15 	bl	8005a70 <HAL_GetTick>
 8006c46:	0003      	movs	r3, r0
 8006c48:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c4a:	e00b      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c4c:	f7fe ff10 	bl	8005a70 <HAL_GetTick>
 8006c50:	0002      	movs	r2, r0
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d904      	bls.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006c5a:	2313      	movs	r3, #19
 8006c5c:	18fb      	adds	r3, r7, r3
 8006c5e:	2203      	movs	r2, #3
 8006c60:	701a      	strb	r2, [r3, #0]
        break;
 8006c62:	e005      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c64:	4b6f      	ldr	r3, [pc, #444]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	2380      	movs	r3, #128	; 0x80
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	d0ed      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006c70:	2313      	movs	r3, #19
 8006c72:	18fb      	adds	r3, r7, r3
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d154      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c7a:	4b69      	ldr	r3, [pc, #420]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c7e:	23c0      	movs	r3, #192	; 0xc0
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4013      	ands	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d019      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d014      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c96:	4b62      	ldr	r3, [pc, #392]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9a:	4a63      	ldr	r2, [pc, #396]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ca0:	4b5f      	ldr	r3, [pc, #380]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ca4:	4b5e      	ldr	r3, [pc, #376]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ca6:	2180      	movs	r1, #128	; 0x80
 8006ca8:	0249      	lsls	r1, r1, #9
 8006caa:	430a      	orrs	r2, r1
 8006cac:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cae:	4b5c      	ldr	r3, [pc, #368]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006cb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cb2:	4b5b      	ldr	r3, [pc, #364]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006cb4:	495d      	ldr	r1, [pc, #372]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006cb6:	400a      	ands	r2, r1
 8006cb8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cba:	4b59      	ldr	r3, [pc, #356]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	d016      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc8:	f7fe fed2 	bl	8005a70 <HAL_GetTick>
 8006ccc:	0003      	movs	r3, r0
 8006cce:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cd0:	e00c      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd2:	f7fe fecd 	bl	8005a70 <HAL_GetTick>
 8006cd6:	0002      	movs	r2, r0
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	4a54      	ldr	r2, [pc, #336]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d904      	bls.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006ce2:	2313      	movs	r3, #19
 8006ce4:	18fb      	adds	r3, r7, r3
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	701a      	strb	r2, [r3, #0]
            break;
 8006cea:	e004      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cec:	4b4c      	ldr	r3, [pc, #304]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d0ed      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006cf6:	2313      	movs	r3, #19
 8006cf8:	18fb      	adds	r3, r7, r3
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10a      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d00:	4b47      	ldr	r3, [pc, #284]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d04:	4a48      	ldr	r2, [pc, #288]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006d06:	4013      	ands	r3, r2
 8006d08:	0019      	movs	r1, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	4b44      	ldr	r3, [pc, #272]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d10:	430a      	orrs	r2, r1
 8006d12:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d14:	e00c      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d16:	2312      	movs	r3, #18
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	2213      	movs	r2, #19
 8006d1c:	18ba      	adds	r2, r7, r2
 8006d1e:	7812      	ldrb	r2, [r2, #0]
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	e005      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d24:	2312      	movs	r3, #18
 8006d26:	18fb      	adds	r3, r7, r3
 8006d28:	2213      	movs	r2, #19
 8006d2a:	18ba      	adds	r2, r7, r2
 8006d2c:	7812      	ldrb	r2, [r2, #0]
 8006d2e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d30:	2311      	movs	r3, #17
 8006d32:	18fb      	adds	r3, r7, r3
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d105      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d3a:	4b39      	ldr	r3, [pc, #228]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d3e:	4b38      	ldr	r3, [pc, #224]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d40:	493c      	ldr	r1, [pc, #240]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006d42:	400a      	ands	r2, r1
 8006d44:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	d009      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d50:	4b33      	ldr	r3, [pc, #204]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d54:	2203      	movs	r2, #3
 8006d56:	4393      	bics	r3, r2
 8006d58:	0019      	movs	r1, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	4b30      	ldr	r3, [pc, #192]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d60:	430a      	orrs	r2, r1
 8006d62:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2202      	movs	r2, #2
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	d009      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d6e:	4b2c      	ldr	r3, [pc, #176]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d72:	220c      	movs	r2, #12
 8006d74:	4393      	bics	r3, r2
 8006d76:	0019      	movs	r1, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	4b28      	ldr	r3, [pc, #160]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2220      	movs	r2, #32
 8006d88:	4013      	ands	r3, r2
 8006d8a:	d009      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d8c:	4b24      	ldr	r3, [pc, #144]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d90:	4a29      	ldr	r2, [pc, #164]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	0019      	movs	r1, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	4b21      	ldr	r3, [pc, #132]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	2380      	movs	r3, #128	; 0x80
 8006da6:	01db      	lsls	r3, r3, #7
 8006da8:	4013      	ands	r3, r2
 8006daa:	d015      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dac:	4b1c      	ldr	r3, [pc, #112]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	0899      	lsrs	r1, r3, #2
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	695a      	ldr	r2, [r3, #20]
 8006db8:	4b19      	ldr	r3, [pc, #100]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	2380      	movs	r3, #128	; 0x80
 8006dc4:	05db      	lsls	r3, r3, #23
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d106      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006dca:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006dd0:	2180      	movs	r1, #128	; 0x80
 8006dd2:	0249      	lsls	r1, r1, #9
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	2380      	movs	r3, #128	; 0x80
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	4013      	ands	r3, r2
 8006de2:	d016      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de8:	4a14      	ldr	r2, [pc, #80]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	0019      	movs	r1, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006df4:	430a      	orrs	r2, r1
 8006df6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	2380      	movs	r3, #128	; 0x80
 8006dfe:	01db      	lsls	r3, r3, #7
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d106      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006e04:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e0a:	2180      	movs	r1, #128	; 0x80
 8006e0c:	0249      	lsls	r1, r1, #9
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006e12:	2312      	movs	r3, #18
 8006e14:	18fb      	adds	r3, r7, r3
 8006e16:	781b      	ldrb	r3, [r3, #0]
}
 8006e18:	0018      	movs	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b006      	add	sp, #24
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40021000 	.word	0x40021000
 8006e24:	40007000 	.word	0x40007000
 8006e28:	fffffcff 	.word	0xfffffcff
 8006e2c:	fffeffff 	.word	0xfffeffff
 8006e30:	00001388 	.word	0x00001388
 8006e34:	efffffff 	.word	0xefffffff
 8006e38:	ffffcfff 	.word	0xffffcfff
 8006e3c:	ffff3fff 	.word	0xffff3fff

08006e40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e40:	b5b0      	push	{r4, r5, r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e48:	230f      	movs	r3, #15
 8006e4a:	18fb      	adds	r3, r7, r3
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d100      	bne.n	8006e58 <HAL_RTC_Init+0x18>
 8006e56:	e080      	b.n	8006f5a <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2229      	movs	r2, #41	; 0x29
 8006e5c:	5c9b      	ldrb	r3, [r3, r2]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10b      	bne.n	8006e7c <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2228      	movs	r2, #40	; 0x28
 8006e68:	2100      	movs	r1, #0
 8006e6a:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2288      	movs	r2, #136	; 0x88
 8006e70:	0212      	lsls	r2, r2, #8
 8006e72:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	0018      	movs	r0, r3
 8006e78:	f7fe fb72 	bl	8005560 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2229      	movs	r2, #41	; 0x29
 8006e80:	2102      	movs	r1, #2
 8006e82:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	22ca      	movs	r2, #202	; 0xca
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2253      	movs	r2, #83	; 0x53
 8006e92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006e94:	250f      	movs	r5, #15
 8006e96:	197c      	adds	r4, r7, r5
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	f000 f88d 	bl	8006fba <RTC_EnterInitMode>
 8006ea0:	0003      	movs	r3, r0
 8006ea2:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8006ea4:	0028      	movs	r0, r5
 8006ea6:	183b      	adds	r3, r7, r0
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d148      	bne.n	8006f40 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	492b      	ldr	r1, [pc, #172]	; (8006f68 <HAL_RTC_Init+0x128>)
 8006eba:	400a      	ands	r2, r1
 8006ebc:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6999      	ldr	r1, [r3, #24]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6912      	ldr	r2, [r2, #16]
 8006ee4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6919      	ldr	r1, [r3, #16]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	041a      	lsls	r2, r3, #16
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006efa:	0005      	movs	r5, r0
 8006efc:	183c      	adds	r4, r7, r0
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	0018      	movs	r0, r3
 8006f02:	f000 f89d 	bl	8007040 <RTC_ExitInitMode>
 8006f06:	0003      	movs	r3, r0
 8006f08:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8006f0a:	197b      	adds	r3, r7, r5
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d116      	bne.n	8006f40 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699a      	ldr	r2, [r3, #24]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	00d2      	lsls	r2, r2, #3
 8006f1e:	08d2      	lsrs	r2, r2, #3
 8006f20:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6999      	ldr	r1, [r3, #24]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	431a      	orrs	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	431a      	orrs	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	22ff      	movs	r2, #255	; 0xff
 8006f46:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006f48:	230f      	movs	r3, #15
 8006f4a:	18fb      	adds	r3, r7, r3
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d103      	bne.n	8006f5a <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2229      	movs	r2, #41	; 0x29
 8006f56:	2101      	movs	r1, #1
 8006f58:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8006f5a:	230f      	movs	r3, #15
 8006f5c:	18fb      	adds	r3, r7, r3
 8006f5e:	781b      	ldrb	r3, [r3, #0]
}
 8006f60:	0018      	movs	r0, r3
 8006f62:	46bd      	mov	sp, r7
 8006f64:	b004      	add	sp, #16
 8006f66:	bdb0      	pop	{r4, r5, r7, pc}
 8006f68:	fb8fffbf 	.word	0xfb8fffbf

08006f6c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	21a0      	movs	r1, #160	; 0xa0
 8006f80:	438a      	bics	r2, r1
 8006f82:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006f84:	f7fe fd74 	bl	8005a70 <HAL_GetTick>
 8006f88:	0003      	movs	r3, r0
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006f8c:	e00a      	b.n	8006fa4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f8e:	f7fe fd6f 	bl	8005a70 <HAL_GetTick>
 8006f92:	0002      	movs	r2, r0
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	1ad2      	subs	r2, r2, r3
 8006f98:	23fa      	movs	r3, #250	; 0xfa
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e006      	b.n	8006fb2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	4013      	ands	r3, r2
 8006fae:	d0ee      	beq.n	8006f8e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	b004      	add	sp, #16
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006fc2:	230f      	movs	r3, #15
 8006fc4:	18fb      	adds	r3, r7, r3
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2240      	movs	r2, #64	; 0x40
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d12c      	bne.n	8007030 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2180      	movs	r1, #128	; 0x80
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006fe6:	f7fe fd43 	bl	8005a70 <HAL_GetTick>
 8006fea:	0003      	movs	r3, r0
 8006fec:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006fee:	e014      	b.n	800701a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ff0:	f7fe fd3e 	bl	8005a70 <HAL_GetTick>
 8006ff4:	0002      	movs	r2, r0
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	1ad2      	subs	r2, r2, r3
 8006ffa:	200f      	movs	r0, #15
 8006ffc:	183b      	adds	r3, r7, r0
 8006ffe:	1839      	adds	r1, r7, r0
 8007000:	7809      	ldrb	r1, [r1, #0]
 8007002:	7019      	strb	r1, [r3, #0]
 8007004:	23fa      	movs	r3, #250	; 0xfa
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	429a      	cmp	r2, r3
 800700a:	d906      	bls.n	800701a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800700c:	183b      	adds	r3, r7, r0
 800700e:	2203      	movs	r2, #3
 8007010:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2229      	movs	r2, #41	; 0x29
 8007016:	2103      	movs	r1, #3
 8007018:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	2240      	movs	r2, #64	; 0x40
 8007022:	4013      	ands	r3, r2
 8007024:	d104      	bne.n	8007030 <RTC_EnterInitMode+0x76>
 8007026:	230f      	movs	r3, #15
 8007028:	18fb      	adds	r3, r7, r3
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b03      	cmp	r3, #3
 800702e:	d1df      	bne.n	8006ff0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007030:	230f      	movs	r3, #15
 8007032:	18fb      	adds	r3, r7, r3
 8007034:	781b      	ldrb	r3, [r3, #0]
}
 8007036:	0018      	movs	r0, r3
 8007038:	46bd      	mov	sp, r7
 800703a:	b004      	add	sp, #16
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007040:	b590      	push	{r4, r7, lr}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007048:	240f      	movs	r4, #15
 800704a:	193b      	adds	r3, r7, r4
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007050:	4b1c      	ldr	r3, [pc, #112]	; (80070c4 <RTC_ExitInitMode+0x84>)
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	4b1b      	ldr	r3, [pc, #108]	; (80070c4 <RTC_ExitInitMode+0x84>)
 8007056:	2180      	movs	r1, #128	; 0x80
 8007058:	438a      	bics	r2, r1
 800705a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800705c:	4b19      	ldr	r3, [pc, #100]	; (80070c4 <RTC_ExitInitMode+0x84>)
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	2220      	movs	r2, #32
 8007062:	4013      	ands	r3, r2
 8007064:	d10d      	bne.n	8007082 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	0018      	movs	r0, r3
 800706a:	f7ff ff7f 	bl	8006f6c <HAL_RTC_WaitForSynchro>
 800706e:	1e03      	subs	r3, r0, #0
 8007070:	d021      	beq.n	80070b6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2229      	movs	r2, #41	; 0x29
 8007076:	2103      	movs	r1, #3
 8007078:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800707a:	193b      	adds	r3, r7, r4
 800707c:	2203      	movs	r2, #3
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	e019      	b.n	80070b6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007082:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <RTC_ExitInitMode+0x84>)
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <RTC_ExitInitMode+0x84>)
 8007088:	2120      	movs	r1, #32
 800708a:	438a      	bics	r2, r1
 800708c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	0018      	movs	r0, r3
 8007092:	f7ff ff6b 	bl	8006f6c <HAL_RTC_WaitForSynchro>
 8007096:	1e03      	subs	r3, r0, #0
 8007098:	d007      	beq.n	80070aa <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2229      	movs	r2, #41	; 0x29
 800709e:	2103      	movs	r1, #3
 80070a0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80070a2:	230f      	movs	r3, #15
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	2203      	movs	r2, #3
 80070a8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80070aa:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <RTC_ExitInitMode+0x84>)
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <RTC_ExitInitMode+0x84>)
 80070b0:	2120      	movs	r1, #32
 80070b2:	430a      	orrs	r2, r1
 80070b4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80070b6:	230f      	movs	r3, #15
 80070b8:	18fb      	adds	r3, r7, r3
 80070ba:	781b      	ldrb	r3, [r3, #0]
}
 80070bc:	0018      	movs	r0, r3
 80070be:	46bd      	mov	sp, r7
 80070c0:	b005      	add	sp, #20
 80070c2:	bd90      	pop	{r4, r7, pc}
 80070c4:	40002800 	.word	0x40002800

080070c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e0a8      	b.n	800722c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	2382      	movs	r3, #130	; 0x82
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d009      	beq.n	8007102 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	61da      	str	r2, [r3, #28]
 80070f4:	e005      	b.n	8007102 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	225d      	movs	r2, #93	; 0x5d
 800710c:	5c9b      	ldrb	r3, [r3, r2]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d107      	bne.n	8007124 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	225c      	movs	r2, #92	; 0x5c
 8007118:	2100      	movs	r1, #0
 800711a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	0018      	movs	r0, r3
 8007120:	f7fe fa5c 	bl	80055dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	225d      	movs	r2, #93	; 0x5d
 8007128:	2102      	movs	r1, #2
 800712a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2140      	movs	r1, #64	; 0x40
 8007138:	438a      	bics	r2, r1
 800713a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	23e0      	movs	r3, #224	; 0xe0
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	429a      	cmp	r2, r3
 8007146:	d902      	bls.n	800714e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	e002      	b.n	8007154 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800714e:	2380      	movs	r3, #128	; 0x80
 8007150:	015b      	lsls	r3, r3, #5
 8007152:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	23f0      	movs	r3, #240	; 0xf0
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	429a      	cmp	r2, r3
 800715e:	d008      	beq.n	8007172 <HAL_SPI_Init+0xaa>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68da      	ldr	r2, [r3, #12]
 8007164:	23e0      	movs	r3, #224	; 0xe0
 8007166:	00db      	lsls	r3, r3, #3
 8007168:	429a      	cmp	r2, r3
 800716a:	d002      	beq.n	8007172 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	2382      	movs	r3, #130	; 0x82
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	401a      	ands	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6899      	ldr	r1, [r3, #8]
 8007180:	2384      	movs	r3, #132	; 0x84
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	400b      	ands	r3, r1
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2102      	movs	r1, #2
 800718e:	400b      	ands	r3, r1
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	2101      	movs	r1, #1
 8007198:	400b      	ands	r3, r1
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6999      	ldr	r1, [r3, #24]
 80071a0:	2380      	movs	r3, #128	; 0x80
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	400b      	ands	r3, r1
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	2138      	movs	r1, #56	; 0x38
 80071ae:	400b      	ands	r3, r1
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	2180      	movs	r1, #128	; 0x80
 80071b8:	400b      	ands	r3, r1
 80071ba:	431a      	orrs	r2, r3
 80071bc:	0011      	movs	r1, r2
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071c2:	2380      	movs	r3, #128	; 0x80
 80071c4:	019b      	lsls	r3, r3, #6
 80071c6:	401a      	ands	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	0c1b      	lsrs	r3, r3, #16
 80071d6:	2204      	movs	r2, #4
 80071d8:	401a      	ands	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2110      	movs	r1, #16
 80071e0:	400b      	ands	r3, r1
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e8:	2108      	movs	r1, #8
 80071ea:	400b      	ands	r3, r1
 80071ec:	431a      	orrs	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68d9      	ldr	r1, [r3, #12]
 80071f2:	23f0      	movs	r3, #240	; 0xf0
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	400b      	ands	r3, r1
 80071f8:	431a      	orrs	r2, r3
 80071fa:	0011      	movs	r1, r2
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	2380      	movs	r3, #128	; 0x80
 8007200:	015b      	lsls	r3, r3, #5
 8007202:	401a      	ands	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69da      	ldr	r2, [r3, #28]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4907      	ldr	r1, [pc, #28]	; (8007234 <HAL_SPI_Init+0x16c>)
 8007218:	400a      	ands	r2, r1
 800721a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	225d      	movs	r2, #93	; 0x5d
 8007226:	2101      	movs	r1, #1
 8007228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	0018      	movs	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	b004      	add	sp, #16
 8007232:	bd80      	pop	{r7, pc}
 8007234:	fffff7ff 	.word	0xfffff7ff

08007238 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	1dbb      	adds	r3, r7, #6
 8007246:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007248:	231f      	movs	r3, #31
 800724a:	18fb      	adds	r3, r7, r3
 800724c:	2200      	movs	r2, #0
 800724e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	225c      	movs	r2, #92	; 0x5c
 8007254:	5c9b      	ldrb	r3, [r3, r2]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <HAL_SPI_Transmit+0x26>
 800725a:	2302      	movs	r3, #2
 800725c:	e140      	b.n	80074e0 <HAL_SPI_Transmit+0x2a8>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	225c      	movs	r2, #92	; 0x5c
 8007262:	2101      	movs	r1, #1
 8007264:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007266:	f7fe fc03 	bl	8005a70 <HAL_GetTick>
 800726a:	0003      	movs	r3, r0
 800726c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800726e:	2316      	movs	r3, #22
 8007270:	18fb      	adds	r3, r7, r3
 8007272:	1dba      	adds	r2, r7, #6
 8007274:	8812      	ldrh	r2, [r2, #0]
 8007276:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	225d      	movs	r2, #93	; 0x5d
 800727c:	5c9b      	ldrb	r3, [r3, r2]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	d004      	beq.n	800728e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007284:	231f      	movs	r3, #31
 8007286:	18fb      	adds	r3, r7, r3
 8007288:	2202      	movs	r2, #2
 800728a:	701a      	strb	r2, [r3, #0]
    goto error;
 800728c:	e11d      	b.n	80074ca <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_SPI_Transmit+0x64>
 8007294:	1dbb      	adds	r3, r7, #6
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800729c:	231f      	movs	r3, #31
 800729e:	18fb      	adds	r3, r7, r3
 80072a0:	2201      	movs	r2, #1
 80072a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80072a4:	e111      	b.n	80074ca <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	225d      	movs	r2, #93	; 0x5d
 80072aa:	2103      	movs	r1, #3
 80072ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1dba      	adds	r2, r7, #6
 80072be:	8812      	ldrh	r2, [r2, #0]
 80072c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	1dba      	adds	r2, r7, #6
 80072c6:	8812      	ldrh	r2, [r2, #0]
 80072c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2244      	movs	r2, #68	; 0x44
 80072d4:	2100      	movs	r1, #0
 80072d6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2246      	movs	r2, #70	; 0x46
 80072dc:	2100      	movs	r1, #0
 80072de:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	2380      	movs	r3, #128	; 0x80
 80072f2:	021b      	lsls	r3, r3, #8
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d110      	bne.n	800731a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2140      	movs	r1, #64	; 0x40
 8007304:	438a      	bics	r2, r1
 8007306:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2180      	movs	r1, #128	; 0x80
 8007314:	01c9      	lsls	r1, r1, #7
 8007316:	430a      	orrs	r2, r1
 8007318:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2240      	movs	r2, #64	; 0x40
 8007322:	4013      	ands	r3, r2
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	d007      	beq.n	8007338 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2140      	movs	r1, #64	; 0x40
 8007334:	430a      	orrs	r2, r1
 8007336:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	23e0      	movs	r3, #224	; 0xe0
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	429a      	cmp	r2, r3
 8007342:	d94e      	bls.n	80073e2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d004      	beq.n	8007356 <HAL_SPI_Transmit+0x11e>
 800734c:	2316      	movs	r3, #22
 800734e:	18fb      	adds	r3, r7, r3
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d13f      	bne.n	80073d6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	881a      	ldrh	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	1c9a      	adds	r2, r3, #2
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800737a:	e02c      	b.n	80073d6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2202      	movs	r2, #2
 8007384:	4013      	ands	r3, r2
 8007386:	2b02      	cmp	r3, #2
 8007388:	d112      	bne.n	80073b0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	881a      	ldrh	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	1c9a      	adds	r2, r3, #2
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073ae:	e012      	b.n	80073d6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073b0:	f7fe fb5e 	bl	8005a70 <HAL_GetTick>
 80073b4:	0002      	movs	r2, r0
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d802      	bhi.n	80073c6 <HAL_SPI_Transmit+0x18e>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	3301      	adds	r3, #1
 80073c4:	d102      	bne.n	80073cc <HAL_SPI_Transmit+0x194>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80073cc:	231f      	movs	r3, #31
 80073ce:	18fb      	adds	r3, r7, r3
 80073d0:	2203      	movs	r2, #3
 80073d2:	701a      	strb	r2, [r3, #0]
          goto error;
 80073d4:	e079      	b.n	80074ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1cd      	bne.n	800737c <HAL_SPI_Transmit+0x144>
 80073e0:	e04f      	b.n	8007482 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d004      	beq.n	80073f4 <HAL_SPI_Transmit+0x1bc>
 80073ea:	2316      	movs	r3, #22
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d141      	bne.n	8007478 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	330c      	adds	r3, #12
 80073fe:	7812      	ldrb	r2, [r2, #0]
 8007400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007410:	b29b      	uxth	r3, r3
 8007412:	3b01      	subs	r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800741a:	e02d      	b.n	8007478 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2202      	movs	r2, #2
 8007424:	4013      	ands	r3, r2
 8007426:	2b02      	cmp	r3, #2
 8007428:	d113      	bne.n	8007452 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	330c      	adds	r3, #12
 8007434:	7812      	ldrb	r2, [r2, #0]
 8007436:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	1c5a      	adds	r2, r3, #1
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007450:	e012      	b.n	8007478 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007452:	f7fe fb0d 	bl	8005a70 <HAL_GetTick>
 8007456:	0002      	movs	r2, r0
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d802      	bhi.n	8007468 <HAL_SPI_Transmit+0x230>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	3301      	adds	r3, #1
 8007466:	d102      	bne.n	800746e <HAL_SPI_Transmit+0x236>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d104      	bne.n	8007478 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800746e:	231f      	movs	r3, #31
 8007470:	18fb      	adds	r3, r7, r3
 8007472:	2203      	movs	r2, #3
 8007474:	701a      	strb	r2, [r3, #0]
          goto error;
 8007476:	e028      	b.n	80074ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1cc      	bne.n	800741c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	0018      	movs	r0, r3
 800748a:	f000 fce5 	bl	8007e58 <SPI_EndRxTxTransaction>
 800748e:	1e03      	subs	r3, r0, #0
 8007490:	d002      	beq.n	8007498 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074a0:	2300      	movs	r3, #0
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	613b      	str	r3, [r7, #16]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d004      	beq.n	80074c8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80074be:	231f      	movs	r3, #31
 80074c0:	18fb      	adds	r3, r7, r3
 80074c2:	2201      	movs	r2, #1
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	e000      	b.n	80074ca <HAL_SPI_Transmit+0x292>
  }

error:
 80074c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	225d      	movs	r2, #93	; 0x5d
 80074ce:	2101      	movs	r1, #1
 80074d0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	225c      	movs	r2, #92	; 0x5c
 80074d6:	2100      	movs	r1, #0
 80074d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80074da:	231f      	movs	r3, #31
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	781b      	ldrb	r3, [r3, #0]
}
 80074e0:	0018      	movs	r0, r3
 80074e2:	46bd      	mov	sp, r7
 80074e4:	b008      	add	sp, #32
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e8:	b590      	push	{r4, r7, lr}
 80074ea:	b089      	sub	sp, #36	; 0x24
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	1dbb      	adds	r3, r7, #6
 80074f6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074f8:	2317      	movs	r3, #23
 80074fa:	18fb      	adds	r3, r7, r3
 80074fc:	2200      	movs	r2, #0
 80074fe:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	2382      	movs	r3, #130	; 0x82
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	429a      	cmp	r2, r3
 800750a:	d113      	bne.n	8007534 <HAL_SPI_Receive+0x4c>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10f      	bne.n	8007534 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	225d      	movs	r2, #93	; 0x5d
 8007518:	2104      	movs	r1, #4
 800751a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800751c:	1dbb      	adds	r3, r7, #6
 800751e:	881c      	ldrh	r4, [r3, #0]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	0023      	movs	r3, r4
 800752c:	f000 f928 	bl	8007780 <HAL_SPI_TransmitReceive>
 8007530:	0003      	movs	r3, r0
 8007532:	e11c      	b.n	800776e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	225c      	movs	r2, #92	; 0x5c
 8007538:	5c9b      	ldrb	r3, [r3, r2]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d101      	bne.n	8007542 <HAL_SPI_Receive+0x5a>
 800753e:	2302      	movs	r3, #2
 8007540:	e115      	b.n	800776e <HAL_SPI_Receive+0x286>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	225c      	movs	r2, #92	; 0x5c
 8007546:	2101      	movs	r1, #1
 8007548:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800754a:	f7fe fa91 	bl	8005a70 <HAL_GetTick>
 800754e:	0003      	movs	r3, r0
 8007550:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	225d      	movs	r2, #93	; 0x5d
 8007556:	5c9b      	ldrb	r3, [r3, r2]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	d004      	beq.n	8007568 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800755e:	2317      	movs	r3, #23
 8007560:	18fb      	adds	r3, r7, r3
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
    goto error;
 8007566:	e0f7      	b.n	8007758 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_SPI_Receive+0x8e>
 800756e:	1dbb      	adds	r3, r7, #6
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d104      	bne.n	8007580 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8007576:	2317      	movs	r3, #23
 8007578:	18fb      	adds	r3, r7, r3
 800757a:	2201      	movs	r2, #1
 800757c:	701a      	strb	r2, [r3, #0]
    goto error;
 800757e:	e0eb      	b.n	8007758 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	225d      	movs	r2, #93	; 0x5d
 8007584:	2104      	movs	r1, #4
 8007586:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	1dba      	adds	r2, r7, #6
 8007598:	2144      	movs	r1, #68	; 0x44
 800759a:	8812      	ldrh	r2, [r2, #0]
 800759c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1dba      	adds	r2, r7, #6
 80075a2:	2146      	movs	r1, #70	; 0x46
 80075a4:	8812      	ldrh	r2, [r2, #0]
 80075a6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	23e0      	movs	r3, #224	; 0xe0
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d908      	bls.n	80075e4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4966      	ldr	r1, [pc, #408]	; (8007778 <HAL_SPI_Receive+0x290>)
 80075de:	400a      	ands	r2, r1
 80075e0:	605a      	str	r2, [r3, #4]
 80075e2:	e008      	b.n	80075f6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2180      	movs	r1, #128	; 0x80
 80075f0:	0149      	lsls	r1, r1, #5
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	2380      	movs	r3, #128	; 0x80
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	429a      	cmp	r2, r3
 8007600:	d10f      	bne.n	8007622 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2140      	movs	r1, #64	; 0x40
 800760e:	438a      	bics	r2, r1
 8007610:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4957      	ldr	r1, [pc, #348]	; (800777c <HAL_SPI_Receive+0x294>)
 800761e:	400a      	ands	r2, r1
 8007620:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2240      	movs	r2, #64	; 0x40
 800762a:	4013      	ands	r3, r2
 800762c:	2b40      	cmp	r3, #64	; 0x40
 800762e:	d007      	beq.n	8007640 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2140      	movs	r1, #64	; 0x40
 800763c:	430a      	orrs	r2, r1
 800763e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	23e0      	movs	r3, #224	; 0xe0
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	429a      	cmp	r2, r3
 800764a:	d900      	bls.n	800764e <HAL_SPI_Receive+0x166>
 800764c:	e069      	b.n	8007722 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800764e:	e031      	b.n	80076b4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	2201      	movs	r2, #1
 8007658:	4013      	ands	r3, r2
 800765a:	2b01      	cmp	r3, #1
 800765c:	d117      	bne.n	800768e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	001a      	movs	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	7812      	ldrb	r2, [r2, #0]
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2246      	movs	r2, #70	; 0x46
 800767e:	5a9b      	ldrh	r3, [r3, r2]
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b299      	uxth	r1, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2246      	movs	r2, #70	; 0x46
 800768a:	5299      	strh	r1, [r3, r2]
 800768c:	e012      	b.n	80076b4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800768e:	f7fe f9ef 	bl	8005a70 <HAL_GetTick>
 8007692:	0002      	movs	r2, r0
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d802      	bhi.n	80076a4 <HAL_SPI_Receive+0x1bc>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	3301      	adds	r3, #1
 80076a2:	d102      	bne.n	80076aa <HAL_SPI_Receive+0x1c2>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d104      	bne.n	80076b4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80076aa:	2317      	movs	r3, #23
 80076ac:	18fb      	adds	r3, r7, r3
 80076ae:	2203      	movs	r2, #3
 80076b0:	701a      	strb	r2, [r3, #0]
          goto error;
 80076b2:	e051      	b.n	8007758 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2246      	movs	r2, #70	; 0x46
 80076b8:	5a9b      	ldrh	r3, [r3, r2]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1c7      	bne.n	8007650 <HAL_SPI_Receive+0x168>
 80076c0:	e035      	b.n	800772e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	2201      	movs	r2, #1
 80076ca:	4013      	ands	r3, r2
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d115      	bne.n	80076fc <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	b292      	uxth	r2, r2
 80076dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	1c9a      	adds	r2, r3, #2
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2246      	movs	r2, #70	; 0x46
 80076ec:	5a9b      	ldrh	r3, [r3, r2]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b299      	uxth	r1, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2246      	movs	r2, #70	; 0x46
 80076f8:	5299      	strh	r1, [r3, r2]
 80076fa:	e012      	b.n	8007722 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076fc:	f7fe f9b8 	bl	8005a70 <HAL_GetTick>
 8007700:	0002      	movs	r2, r0
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d802      	bhi.n	8007712 <HAL_SPI_Receive+0x22a>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	3301      	adds	r3, #1
 8007710:	d102      	bne.n	8007718 <HAL_SPI_Receive+0x230>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d104      	bne.n	8007722 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8007718:	2317      	movs	r3, #23
 800771a:	18fb      	adds	r3, r7, r3
 800771c:	2203      	movs	r2, #3
 800771e:	701a      	strb	r2, [r3, #0]
          goto error;
 8007720:	e01a      	b.n	8007758 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2246      	movs	r2, #70	; 0x46
 8007726:	5a9b      	ldrh	r3, [r3, r2]
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1c9      	bne.n	80076c2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	0018      	movs	r0, r3
 8007736:	f000 fb31 	bl	8007d9c <SPI_EndRxTransaction>
 800773a:	1e03      	subs	r3, r0, #0
 800773c:	d002      	beq.n	8007744 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2220      	movs	r2, #32
 8007742:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800774c:	2317      	movs	r3, #23
 800774e:	18fb      	adds	r3, r7, r3
 8007750:	2201      	movs	r2, #1
 8007752:	701a      	strb	r2, [r3, #0]
 8007754:	e000      	b.n	8007758 <HAL_SPI_Receive+0x270>
  }

error :
 8007756:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	225d      	movs	r2, #93	; 0x5d
 800775c:	2101      	movs	r1, #1
 800775e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	225c      	movs	r2, #92	; 0x5c
 8007764:	2100      	movs	r1, #0
 8007766:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007768:	2317      	movs	r3, #23
 800776a:	18fb      	adds	r3, r7, r3
 800776c:	781b      	ldrb	r3, [r3, #0]
}
 800776e:	0018      	movs	r0, r3
 8007770:	46bd      	mov	sp, r7
 8007772:	b007      	add	sp, #28
 8007774:	bd90      	pop	{r4, r7, pc}
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	ffffefff 	.word	0xffffefff
 800777c:	ffffbfff 	.word	0xffffbfff

08007780 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08a      	sub	sp, #40	; 0x28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	001a      	movs	r2, r3
 800778e:	1cbb      	adds	r3, r7, #2
 8007790:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007792:	2301      	movs	r3, #1
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007796:	2323      	movs	r3, #35	; 0x23
 8007798:	18fb      	adds	r3, r7, r3
 800779a:	2200      	movs	r2, #0
 800779c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	225c      	movs	r2, #92	; 0x5c
 80077a2:	5c9b      	ldrb	r3, [r3, r2]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_SPI_TransmitReceive+0x2c>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e1b5      	b.n	8007b18 <HAL_SPI_TransmitReceive+0x398>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	225c      	movs	r2, #92	; 0x5c
 80077b0:	2101      	movs	r1, #1
 80077b2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077b4:	f7fe f95c 	bl	8005a70 <HAL_GetTick>
 80077b8:	0003      	movs	r3, r0
 80077ba:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077bc:	201b      	movs	r0, #27
 80077be:	183b      	adds	r3, r7, r0
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	215d      	movs	r1, #93	; 0x5d
 80077c4:	5c52      	ldrb	r2, [r2, r1]
 80077c6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80077ce:	2312      	movs	r3, #18
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	1cba      	adds	r2, r7, #2
 80077d4:	8812      	ldrh	r2, [r2, #0]
 80077d6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077d8:	183b      	adds	r3, r7, r0
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d011      	beq.n	8007804 <HAL_SPI_TransmitReceive+0x84>
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	2382      	movs	r3, #130	; 0x82
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d107      	bne.n	80077fa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d103      	bne.n	80077fa <HAL_SPI_TransmitReceive+0x7a>
 80077f2:	183b      	adds	r3, r7, r0
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d004      	beq.n	8007804 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80077fa:	2323      	movs	r3, #35	; 0x23
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	2202      	movs	r2, #2
 8007800:	701a      	strb	r2, [r3, #0]
    goto error;
 8007802:	e17e      	b.n	8007b02 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d006      	beq.n	8007818 <HAL_SPI_TransmitReceive+0x98>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_SPI_TransmitReceive+0x98>
 8007810:	1cbb      	adds	r3, r7, #2
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d104      	bne.n	8007822 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007818:	2323      	movs	r3, #35	; 0x23
 800781a:	18fb      	adds	r3, r7, r3
 800781c:	2201      	movs	r2, #1
 800781e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007820:	e16f      	b.n	8007b02 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	225d      	movs	r2, #93	; 0x5d
 8007826:	5c9b      	ldrb	r3, [r3, r2]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b04      	cmp	r3, #4
 800782c:	d003      	beq.n	8007836 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	225d      	movs	r2, #93	; 0x5d
 8007832:	2105      	movs	r1, #5
 8007834:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	1cba      	adds	r2, r7, #2
 8007846:	2146      	movs	r1, #70	; 0x46
 8007848:	8812      	ldrh	r2, [r2, #0]
 800784a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	1cba      	adds	r2, r7, #2
 8007850:	2144      	movs	r1, #68	; 0x44
 8007852:	8812      	ldrh	r2, [r2, #0]
 8007854:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	1cba      	adds	r2, r7, #2
 8007860:	8812      	ldrh	r2, [r2, #0]
 8007862:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	1cba      	adds	r2, r7, #2
 8007868:	8812      	ldrh	r2, [r2, #0]
 800786a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	23e0      	movs	r3, #224	; 0xe0
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	429a      	cmp	r2, r3
 8007882:	d908      	bls.n	8007896 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	49a4      	ldr	r1, [pc, #656]	; (8007b20 <HAL_SPI_TransmitReceive+0x3a0>)
 8007890:	400a      	ands	r2, r1
 8007892:	605a      	str	r2, [r3, #4]
 8007894:	e008      	b.n	80078a8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2180      	movs	r1, #128	; 0x80
 80078a2:	0149      	lsls	r1, r1, #5
 80078a4:	430a      	orrs	r2, r1
 80078a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2240      	movs	r2, #64	; 0x40
 80078b0:	4013      	ands	r3, r2
 80078b2:	2b40      	cmp	r3, #64	; 0x40
 80078b4:	d007      	beq.n	80078c6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2140      	movs	r1, #64	; 0x40
 80078c2:	430a      	orrs	r2, r1
 80078c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	23e0      	movs	r3, #224	; 0xe0
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d800      	bhi.n	80078d4 <HAL_SPI_TransmitReceive+0x154>
 80078d2:	e07f      	b.n	80079d4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <HAL_SPI_TransmitReceive+0x168>
 80078dc:	2312      	movs	r3, #18
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d000      	beq.n	80078e8 <HAL_SPI_TransmitReceive+0x168>
 80078e6:	e069      	b.n	80079bc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	881a      	ldrh	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800790c:	e056      	b.n	80079bc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2202      	movs	r2, #2
 8007916:	4013      	ands	r3, r2
 8007918:	2b02      	cmp	r3, #2
 800791a:	d11b      	bne.n	8007954 <HAL_SPI_TransmitReceive+0x1d4>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d016      	beq.n	8007954 <HAL_SPI_TransmitReceive+0x1d4>
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	2b01      	cmp	r3, #1
 800792a:	d113      	bne.n	8007954 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	881a      	ldrh	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	1c9a      	adds	r2, r3, #2
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007946:	b29b      	uxth	r3, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2201      	movs	r2, #1
 800795c:	4013      	ands	r3, r2
 800795e:	2b01      	cmp	r3, #1
 8007960:	d11c      	bne.n	800799c <HAL_SPI_TransmitReceive+0x21c>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2246      	movs	r2, #70	; 0x46
 8007966:	5a9b      	ldrh	r3, [r3, r2]
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d016      	beq.n	800799c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	b292      	uxth	r2, r2
 800797a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	1c9a      	adds	r2, r3, #2
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2246      	movs	r2, #70	; 0x46
 800798a:	5a9b      	ldrh	r3, [r3, r2]
 800798c:	b29b      	uxth	r3, r3
 800798e:	3b01      	subs	r3, #1
 8007990:	b299      	uxth	r1, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2246      	movs	r2, #70	; 0x46
 8007996:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007998:	2301      	movs	r3, #1
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800799c:	f7fe f868 	bl	8005a70 <HAL_GetTick>
 80079a0:	0002      	movs	r2, r0
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d807      	bhi.n	80079bc <HAL_SPI_TransmitReceive+0x23c>
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	3301      	adds	r3, #1
 80079b0:	d004      	beq.n	80079bc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80079b2:	2323      	movs	r3, #35	; 0x23
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	2203      	movs	r2, #3
 80079b8:	701a      	strb	r2, [r3, #0]
        goto error;
 80079ba:	e0a2      	b.n	8007b02 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1a3      	bne.n	800790e <HAL_SPI_TransmitReceive+0x18e>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2246      	movs	r2, #70	; 0x46
 80079ca:	5a9b      	ldrh	r3, [r3, r2]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d19d      	bne.n	800790e <HAL_SPI_TransmitReceive+0x18e>
 80079d2:	e085      	b.n	8007ae0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <HAL_SPI_TransmitReceive+0x268>
 80079dc:	2312      	movs	r3, #18
 80079de:	18fb      	adds	r3, r7, r3
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d000      	beq.n	80079e8 <HAL_SPI_TransmitReceive+0x268>
 80079e6:	e070      	b.n	8007aca <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	330c      	adds	r3, #12
 80079f2:	7812      	ldrb	r2, [r2, #0]
 80079f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a0e:	e05c      	b.n	8007aca <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2202      	movs	r2, #2
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d11c      	bne.n	8007a58 <HAL_SPI_TransmitReceive+0x2d8>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d017      	beq.n	8007a58 <HAL_SPI_TransmitReceive+0x2d8>
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d114      	bne.n	8007a58 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	330c      	adds	r3, #12
 8007a38:	7812      	ldrb	r2, [r2, #0]
 8007a3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	4013      	ands	r3, r2
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d11e      	bne.n	8007aa4 <HAL_SPI_TransmitReceive+0x324>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2246      	movs	r2, #70	; 0x46
 8007a6a:	5a9b      	ldrh	r3, [r3, r2]
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d018      	beq.n	8007aa4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	330c      	adds	r3, #12
 8007a78:	001a      	movs	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	7812      	ldrb	r2, [r2, #0]
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2246      	movs	r2, #70	; 0x46
 8007a92:	5a9b      	ldrh	r3, [r3, r2]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b299      	uxth	r1, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2246      	movs	r2, #70	; 0x46
 8007a9e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007aa4:	f7fd ffe4 	bl	8005a70 <HAL_GetTick>
 8007aa8:	0002      	movs	r2, r0
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d802      	bhi.n	8007aba <HAL_SPI_TransmitReceive+0x33a>
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	d102      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x340>
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8007ac0:	2323      	movs	r3, #35	; 0x23
 8007ac2:	18fb      	adds	r3, r7, r3
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	701a      	strb	r2, [r3, #0]
        goto error;
 8007ac8:	e01b      	b.n	8007b02 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d19d      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x290>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2246      	movs	r2, #70	; 0x46
 8007ad8:	5a9b      	ldrh	r3, [r3, r2]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d197      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ae0:	69fa      	ldr	r2, [r7, #28]
 8007ae2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f000 f9b6 	bl	8007e58 <SPI_EndRxTxTransaction>
 8007aec:	1e03      	subs	r3, r0, #0
 8007aee:	d007      	beq.n	8007b00 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007af0:	2323      	movs	r3, #35	; 0x23
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	2201      	movs	r2, #1
 8007af6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2220      	movs	r2, #32
 8007afc:	661a      	str	r2, [r3, #96]	; 0x60
 8007afe:	e000      	b.n	8007b02 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007b00:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	225d      	movs	r2, #93	; 0x5d
 8007b06:	2101      	movs	r1, #1
 8007b08:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	225c      	movs	r2, #92	; 0x5c
 8007b0e:	2100      	movs	r1, #0
 8007b10:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007b12:	2323      	movs	r3, #35	; 0x23
 8007b14:	18fb      	adds	r3, r7, r3
 8007b16:	781b      	ldrb	r3, [r3, #0]
}
 8007b18:	0018      	movs	r0, r3
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	b00a      	add	sp, #40	; 0x28
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	ffffefff 	.word	0xffffefff

08007b24 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	225d      	movs	r2, #93	; 0x5d
 8007b30:	5c9b      	ldrb	r3, [r3, r2]
 8007b32:	b2db      	uxtb	r3, r3
}
 8007b34:	0018      	movs	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b002      	add	sp, #8
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	1dfb      	adds	r3, r7, #7
 8007b4a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b4c:	f7fd ff90 	bl	8005a70 <HAL_GetTick>
 8007b50:	0002      	movs	r2, r0
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b54:	1a9b      	subs	r3, r3, r2
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	18d3      	adds	r3, r2, r3
 8007b5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b5c:	f7fd ff88 	bl	8005a70 <HAL_GetTick>
 8007b60:	0003      	movs	r3, r0
 8007b62:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b64:	4b3a      	ldr	r3, [pc, #232]	; (8007c50 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	015b      	lsls	r3, r3, #5
 8007b6a:	0d1b      	lsrs	r3, r3, #20
 8007b6c:	69fa      	ldr	r2, [r7, #28]
 8007b6e:	4353      	muls	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b72:	e058      	b.n	8007c26 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	3301      	adds	r3, #1
 8007b78:	d055      	beq.n	8007c26 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b7a:	f7fd ff79 	bl	8005a70 <HAL_GetTick>
 8007b7e:	0002      	movs	r2, r0
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d902      	bls.n	8007b90 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d142      	bne.n	8007c16 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	21e0      	movs	r1, #224	; 0xe0
 8007b9c:	438a      	bics	r2, r1
 8007b9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	2382      	movs	r3, #130	; 0x82
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d113      	bne.n	8007bd4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	2380      	movs	r3, #128	; 0x80
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d005      	beq.n	8007bc4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	2380      	movs	r3, #128	; 0x80
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d107      	bne.n	8007bd4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2140      	movs	r1, #64	; 0x40
 8007bd0:	438a      	bics	r2, r1
 8007bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bd8:	2380      	movs	r3, #128	; 0x80
 8007bda:	019b      	lsls	r3, r3, #6
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d110      	bne.n	8007c02 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	491a      	ldr	r1, [pc, #104]	; (8007c54 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007bec:	400a      	ands	r2, r1
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2180      	movs	r1, #128	; 0x80
 8007bfc:	0189      	lsls	r1, r1, #6
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	225d      	movs	r2, #93	; 0x5d
 8007c06:	2101      	movs	r1, #1
 8007c08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	225c      	movs	r2, #92	; 0x5c
 8007c0e:	2100      	movs	r1, #0
 8007c10:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e017      	b.n	8007c46 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	3b01      	subs	r3, #1
 8007c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	425a      	negs	r2, r3
 8007c36:	4153      	adcs	r3, r2
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	001a      	movs	r2, r3
 8007c3c:	1dfb      	adds	r3, r7, #7
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d197      	bne.n	8007b74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	0018      	movs	r0, r3
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	b008      	add	sp, #32
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	20000000 	.word	0x20000000
 8007c54:	ffffdfff 	.word	0xffffdfff

08007c58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007c66:	2317      	movs	r3, #23
 8007c68:	18fb      	adds	r3, r7, r3
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c6e:	f7fd feff 	bl	8005a70 <HAL_GetTick>
 8007c72:	0002      	movs	r2, r0
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	18d3      	adds	r3, r2, r3
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007c7e:	f7fd fef7 	bl	8005a70 <HAL_GetTick>
 8007c82:	0003      	movs	r3, r0
 8007c84:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	330c      	adds	r3, #12
 8007c8c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c8e:	4b41      	ldr	r3, [pc, #260]	; (8007d94 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	0013      	movs	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	189b      	adds	r3, r3, r2
 8007c98:	00da      	lsls	r2, r3, #3
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	0d1b      	lsrs	r3, r3, #20
 8007c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca0:	4353      	muls	r3, r2
 8007ca2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ca4:	e068      	b.n	8007d78 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	23c0      	movs	r3, #192	; 0xc0
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d10a      	bne.n	8007cc6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d107      	bne.n	8007cc6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	2117      	movs	r1, #23
 8007cbe:	187b      	adds	r3, r7, r1
 8007cc0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007cc2:	187b      	adds	r3, r7, r1
 8007cc4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	d055      	beq.n	8007d78 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ccc:	f7fd fed0 	bl	8005a70 <HAL_GetTick>
 8007cd0:	0002      	movs	r2, r0
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d902      	bls.n	8007ce2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d142      	bne.n	8007d68 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	21e0      	movs	r1, #224	; 0xe0
 8007cee:	438a      	bics	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	2382      	movs	r3, #130	; 0x82
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d113      	bne.n	8007d26 <SPI_WaitFifoStateUntilTimeout+0xce>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	2380      	movs	r3, #128	; 0x80
 8007d04:	021b      	lsls	r3, r3, #8
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d005      	beq.n	8007d16 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	2380      	movs	r3, #128	; 0x80
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d107      	bne.n	8007d26 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2140      	movs	r1, #64	; 0x40
 8007d22:	438a      	bics	r2, r1
 8007d24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d2a:	2380      	movs	r3, #128	; 0x80
 8007d2c:	019b      	lsls	r3, r3, #6
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d110      	bne.n	8007d54 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4916      	ldr	r1, [pc, #88]	; (8007d98 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007d3e:	400a      	ands	r2, r1
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2180      	movs	r1, #128	; 0x80
 8007d4e:	0189      	lsls	r1, r1, #6
 8007d50:	430a      	orrs	r2, r1
 8007d52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	225d      	movs	r2, #93	; 0x5d
 8007d58:	2101      	movs	r1, #1
 8007d5a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	225c      	movs	r2, #92	; 0x5c
 8007d60:	2100      	movs	r1, #0
 8007d62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e010      	b.n	8007d8a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4013      	ands	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d18e      	bne.n	8007ca6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	b00a      	add	sp, #40	; 0x28
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	46c0      	nop			; (mov r8, r8)
 8007d94:	20000000 	.word	0x20000000
 8007d98:	ffffdfff 	.word	0xffffdfff

08007d9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af02      	add	r7, sp, #8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	2382      	movs	r3, #130	; 0x82
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d113      	bne.n	8007ddc <SPI_EndRxTransaction+0x40>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	2380      	movs	r3, #128	; 0x80
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d005      	beq.n	8007dcc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	2380      	movs	r3, #128	; 0x80
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d107      	bne.n	8007ddc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2140      	movs	r1, #64	; 0x40
 8007dd8:	438a      	bics	r2, r1
 8007dda:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	0013      	movs	r3, r2
 8007de6:	2200      	movs	r2, #0
 8007de8:	2180      	movs	r1, #128	; 0x80
 8007dea:	f7ff fea7 	bl	8007b3c <SPI_WaitFlagStateUntilTimeout>
 8007dee:	1e03      	subs	r3, r0, #0
 8007df0:	d007      	beq.n	8007e02 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df6:	2220      	movs	r2, #32
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e026      	b.n	8007e50 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	2382      	movs	r3, #130	; 0x82
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d11f      	bne.n	8007e4e <SPI_EndRxTransaction+0xb2>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	2380      	movs	r3, #128	; 0x80
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d005      	beq.n	8007e26 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	2380      	movs	r3, #128	; 0x80
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d113      	bne.n	8007e4e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	23c0      	movs	r3, #192	; 0xc0
 8007e2a:	00d9      	lsls	r1, r3, #3
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	0013      	movs	r3, r2
 8007e34:	2200      	movs	r2, #0
 8007e36:	f7ff ff0f 	bl	8007c58 <SPI_WaitFifoStateUntilTimeout>
 8007e3a:	1e03      	subs	r3, r0, #0
 8007e3c:	d007      	beq.n	8007e4e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e42:	2220      	movs	r2, #32
 8007e44:	431a      	orrs	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e000      	b.n	8007e50 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	0018      	movs	r0, r3
 8007e52:	46bd      	mov	sp, r7
 8007e54:	b004      	add	sp, #16
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	23c0      	movs	r3, #192	; 0xc0
 8007e68:	0159      	lsls	r1, r3, #5
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	0013      	movs	r3, r2
 8007e72:	2200      	movs	r2, #0
 8007e74:	f7ff fef0 	bl	8007c58 <SPI_WaitFifoStateUntilTimeout>
 8007e78:	1e03      	subs	r3, r0, #0
 8007e7a:	d007      	beq.n	8007e8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e80:	2220      	movs	r2, #32
 8007e82:	431a      	orrs	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e027      	b.n	8007edc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	0013      	movs	r3, r2
 8007e96:	2200      	movs	r2, #0
 8007e98:	2180      	movs	r1, #128	; 0x80
 8007e9a:	f7ff fe4f 	bl	8007b3c <SPI_WaitFlagStateUntilTimeout>
 8007e9e:	1e03      	subs	r3, r0, #0
 8007ea0:	d007      	beq.n	8007eb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e014      	b.n	8007edc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	23c0      	movs	r3, #192	; 0xc0
 8007eb6:	00d9      	lsls	r1, r3, #3
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	0013      	movs	r3, r2
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f7ff fec9 	bl	8007c58 <SPI_WaitFifoStateUntilTimeout>
 8007ec6:	1e03      	subs	r3, r0, #0
 8007ec8:	d007      	beq.n	8007eda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ece:	2220      	movs	r2, #32
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e000      	b.n	8007edc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	0018      	movs	r0, r3
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	b004      	add	sp, #16
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e04a      	b.n	8007f8c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	223d      	movs	r2, #61	; 0x3d
 8007efa:	5c9b      	ldrb	r3, [r3, r2]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d107      	bne.n	8007f12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	223c      	movs	r2, #60	; 0x3c
 8007f06:	2100      	movs	r1, #0
 8007f08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f7fd fbaf 	bl	8005670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	223d      	movs	r2, #61	; 0x3d
 8007f16:	2102      	movs	r1, #2
 8007f18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3304      	adds	r3, #4
 8007f22:	0019      	movs	r1, r3
 8007f24:	0010      	movs	r0, r2
 8007f26:	f000 f883 	bl	8008030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2248      	movs	r2, #72	; 0x48
 8007f2e:	2101      	movs	r1, #1
 8007f30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	223e      	movs	r2, #62	; 0x3e
 8007f36:	2101      	movs	r1, #1
 8007f38:	5499      	strb	r1, [r3, r2]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	223f      	movs	r2, #63	; 0x3f
 8007f3e:	2101      	movs	r1, #1
 8007f40:	5499      	strb	r1, [r3, r2]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2240      	movs	r2, #64	; 0x40
 8007f46:	2101      	movs	r1, #1
 8007f48:	5499      	strb	r1, [r3, r2]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2241      	movs	r2, #65	; 0x41
 8007f4e:	2101      	movs	r1, #1
 8007f50:	5499      	strb	r1, [r3, r2]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2242      	movs	r2, #66	; 0x42
 8007f56:	2101      	movs	r1, #1
 8007f58:	5499      	strb	r1, [r3, r2]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2243      	movs	r2, #67	; 0x43
 8007f5e:	2101      	movs	r1, #1
 8007f60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2244      	movs	r2, #68	; 0x44
 8007f66:	2101      	movs	r1, #1
 8007f68:	5499      	strb	r1, [r3, r2]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2245      	movs	r2, #69	; 0x45
 8007f6e:	2101      	movs	r1, #1
 8007f70:	5499      	strb	r1, [r3, r2]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2246      	movs	r2, #70	; 0x46
 8007f76:	2101      	movs	r1, #1
 8007f78:	5499      	strb	r1, [r3, r2]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2247      	movs	r2, #71	; 0x47
 8007f7e:	2101      	movs	r1, #1
 8007f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	223d      	movs	r2, #61	; 0x3d
 8007f86:	2101      	movs	r1, #1
 8007f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	b002      	add	sp, #8
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	223d      	movs	r2, #61	; 0x3d
 8007fa0:	5c9b      	ldrb	r3, [r3, r2]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d001      	beq.n	8007fac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e034      	b.n	8008016 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	223d      	movs	r2, #61	; 0x3d
 8007fb0:	2102      	movs	r1, #2
 8007fb2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a19      	ldr	r2, [pc, #100]	; (8008020 <HAL_TIM_Base_Start+0x8c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d009      	beq.n	8007fd2 <HAL_TIM_Base_Start+0x3e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a18      	ldr	r2, [pc, #96]	; (8008024 <HAL_TIM_Base_Start+0x90>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d004      	beq.n	8007fd2 <HAL_TIM_Base_Start+0x3e>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a16      	ldr	r2, [pc, #88]	; (8008028 <HAL_TIM_Base_Start+0x94>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d116      	bne.n	8008000 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	4a14      	ldr	r2, [pc, #80]	; (800802c <HAL_TIM_Base_Start+0x98>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b06      	cmp	r3, #6
 8007fe2:	d016      	beq.n	8008012 <HAL_TIM_Base_Start+0x7e>
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	2380      	movs	r3, #128	; 0x80
 8007fe8:	025b      	lsls	r3, r3, #9
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d011      	beq.n	8008012 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ffe:	e008      	b.n	8008012 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2101      	movs	r1, #1
 800800c:	430a      	orrs	r2, r1
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	e000      	b.n	8008014 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008012:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	0018      	movs	r0, r3
 8008018:	46bd      	mov	sp, r7
 800801a:	b004      	add	sp, #16
 800801c:	bd80      	pop	{r7, pc}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	40012c00 	.word	0x40012c00
 8008024:	40000400 	.word	0x40000400
 8008028:	40014000 	.word	0x40014000
 800802c:	00010007 	.word	0x00010007

08008030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a2f      	ldr	r2, [pc, #188]	; (8008100 <TIM_Base_SetConfig+0xd0>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_Base_SetConfig+0x20>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a2e      	ldr	r2, [pc, #184]	; (8008104 <TIM_Base_SetConfig+0xd4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d108      	bne.n	8008062 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2270      	movs	r2, #112	; 0x70
 8008054:	4393      	bics	r3, r2
 8008056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a26      	ldr	r2, [pc, #152]	; (8008100 <TIM_Base_SetConfig+0xd0>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d013      	beq.n	8008092 <TIM_Base_SetConfig+0x62>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a25      	ldr	r2, [pc, #148]	; (8008104 <TIM_Base_SetConfig+0xd4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00f      	beq.n	8008092 <TIM_Base_SetConfig+0x62>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a24      	ldr	r2, [pc, #144]	; (8008108 <TIM_Base_SetConfig+0xd8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d00b      	beq.n	8008092 <TIM_Base_SetConfig+0x62>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a23      	ldr	r2, [pc, #140]	; (800810c <TIM_Base_SetConfig+0xdc>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d007      	beq.n	8008092 <TIM_Base_SetConfig+0x62>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a22      	ldr	r2, [pc, #136]	; (8008110 <TIM_Base_SetConfig+0xe0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d003      	beq.n	8008092 <TIM_Base_SetConfig+0x62>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a21      	ldr	r2, [pc, #132]	; (8008114 <TIM_Base_SetConfig+0xe4>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d108      	bne.n	80080a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4a20      	ldr	r2, [pc, #128]	; (8008118 <TIM_Base_SetConfig+0xe8>)
 8008096:	4013      	ands	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2280      	movs	r2, #128	; 0x80
 80080a8:	4393      	bics	r3, r2
 80080aa:	001a      	movs	r2, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a0c      	ldr	r2, [pc, #48]	; (8008100 <TIM_Base_SetConfig+0xd0>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00b      	beq.n	80080ea <TIM_Base_SetConfig+0xba>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a0d      	ldr	r2, [pc, #52]	; (800810c <TIM_Base_SetConfig+0xdc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d007      	beq.n	80080ea <TIM_Base_SetConfig+0xba>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a0c      	ldr	r2, [pc, #48]	; (8008110 <TIM_Base_SetConfig+0xe0>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d003      	beq.n	80080ea <TIM_Base_SetConfig+0xba>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a0b      	ldr	r2, [pc, #44]	; (8008114 <TIM_Base_SetConfig+0xe4>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d103      	bne.n	80080f2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	691a      	ldr	r2, [r3, #16]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	615a      	str	r2, [r3, #20]
}
 80080f8:	46c0      	nop			; (mov r8, r8)
 80080fa:	46bd      	mov	sp, r7
 80080fc:	b004      	add	sp, #16
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	40012c00 	.word	0x40012c00
 8008104:	40000400 	.word	0x40000400
 8008108:	40002000 	.word	0x40002000
 800810c:	40014000 	.word	0x40014000
 8008110:	40014400 	.word	0x40014400
 8008114:	40014800 	.word	0x40014800
 8008118:	fffffcff 	.word	0xfffffcff

0800811c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e046      	b.n	80081bc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2284      	movs	r2, #132	; 0x84
 8008132:	589b      	ldr	r3, [r3, r2]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d107      	bne.n	8008148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2280      	movs	r2, #128	; 0x80
 800813c:	2100      	movs	r1, #0
 800813e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	0018      	movs	r0, r3
 8008144:	f7fd fab4 	bl	80056b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2284      	movs	r2, #132	; 0x84
 800814c:	2124      	movs	r1, #36	; 0x24
 800814e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2101      	movs	r1, #1
 800815c:	438a      	bics	r2, r1
 800815e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	0018      	movs	r0, r3
 8008164:	f000 f8dc 	bl	8008320 <UART_SetConfig>
 8008168:	0003      	movs	r3, r0
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e024      	b.n	80081bc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	0018      	movs	r0, r3
 800817e:	f000 fa75 	bl	800866c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	490d      	ldr	r1, [pc, #52]	; (80081c4 <HAL_UART_Init+0xa8>)
 800818e:	400a      	ands	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	212a      	movs	r1, #42	; 0x2a
 800819e:	438a      	bics	r2, r1
 80081a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2101      	movs	r1, #1
 80081ae:	430a      	orrs	r2, r1
 80081b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	0018      	movs	r0, r3
 80081b6:	f000 fb0d 	bl	80087d4 <UART_CheckIdleState>
 80081ba:	0003      	movs	r3, r0
}
 80081bc:	0018      	movs	r0, r3
 80081be:	46bd      	mov	sp, r7
 80081c0:	b002      	add	sp, #8
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	ffffb7ff 	.word	0xffffb7ff

080081c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	; 0x28
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	1dbb      	adds	r3, r7, #6
 80081d6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2284      	movs	r2, #132	; 0x84
 80081dc:	589b      	ldr	r3, [r3, r2]
 80081de:	2b20      	cmp	r3, #32
 80081e0:	d000      	beq.n	80081e4 <HAL_UART_Transmit+0x1c>
 80081e2:	e097      	b.n	8008314 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_UART_Transmit+0x2a>
 80081ea:	1dbb      	adds	r3, r7, #6
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e08f      	b.n	8008316 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	2380      	movs	r3, #128	; 0x80
 80081fc:	015b      	lsls	r3, r3, #5
 80081fe:	429a      	cmp	r2, r3
 8008200:	d109      	bne.n	8008216 <HAL_UART_Transmit+0x4e>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2201      	movs	r2, #1
 800820e:	4013      	ands	r3, r2
 8008210:	d001      	beq.n	8008216 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e07f      	b.n	8008316 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2280      	movs	r2, #128	; 0x80
 800821a:	5c9b      	ldrb	r3, [r3, r2]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d101      	bne.n	8008224 <HAL_UART_Transmit+0x5c>
 8008220:	2302      	movs	r3, #2
 8008222:	e078      	b.n	8008316 <HAL_UART_Transmit+0x14e>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2280      	movs	r2, #128	; 0x80
 8008228:	2101      	movs	r1, #1
 800822a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	228c      	movs	r2, #140	; 0x8c
 8008230:	2100      	movs	r1, #0
 8008232:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2284      	movs	r2, #132	; 0x84
 8008238:	2121      	movs	r1, #33	; 0x21
 800823a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800823c:	f7fd fc18 	bl	8005a70 <HAL_GetTick>
 8008240:	0003      	movs	r3, r0
 8008242:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	1dba      	adds	r2, r7, #6
 8008248:	2154      	movs	r1, #84	; 0x54
 800824a:	8812      	ldrh	r2, [r2, #0]
 800824c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	1dba      	adds	r2, r7, #6
 8008252:	2156      	movs	r1, #86	; 0x56
 8008254:	8812      	ldrh	r2, [r2, #0]
 8008256:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	689a      	ldr	r2, [r3, #8]
 800825c:	2380      	movs	r3, #128	; 0x80
 800825e:	015b      	lsls	r3, r3, #5
 8008260:	429a      	cmp	r2, r3
 8008262:	d108      	bne.n	8008276 <HAL_UART_Transmit+0xae>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d104      	bne.n	8008276 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800826c:	2300      	movs	r3, #0
 800826e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	61bb      	str	r3, [r7, #24]
 8008274:	e003      	b.n	800827e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2280      	movs	r2, #128	; 0x80
 8008282:	2100      	movs	r1, #0
 8008284:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8008286:	e02c      	b.n	80082e2 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	0013      	movs	r3, r2
 8008292:	2200      	movs	r2, #0
 8008294:	2180      	movs	r1, #128	; 0x80
 8008296:	f000 fae7 	bl	8008868 <UART_WaitOnFlagUntilTimeout>
 800829a:	1e03      	subs	r3, r0, #0
 800829c:	d001      	beq.n	80082a2 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e039      	b.n	8008316 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10b      	bne.n	80082c0 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	001a      	movs	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	05d2      	lsls	r2, r2, #23
 80082b4:	0dd2      	lsrs	r2, r2, #23
 80082b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	3302      	adds	r3, #2
 80082bc:	61bb      	str	r3, [r7, #24]
 80082be:	e007      	b.n	80082d0 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	781a      	ldrb	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	3301      	adds	r3, #1
 80082ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2256      	movs	r2, #86	; 0x56
 80082d4:	5a9b      	ldrh	r3, [r3, r2]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	b299      	uxth	r1, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2256      	movs	r2, #86	; 0x56
 80082e0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2256      	movs	r2, #86	; 0x56
 80082e6:	5a9b      	ldrh	r3, [r3, r2]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1cc      	bne.n	8008288 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	0013      	movs	r3, r2
 80082f8:	2200      	movs	r2, #0
 80082fa:	2140      	movs	r1, #64	; 0x40
 80082fc:	f000 fab4 	bl	8008868 <UART_WaitOnFlagUntilTimeout>
 8008300:	1e03      	subs	r3, r0, #0
 8008302:	d001      	beq.n	8008308 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e006      	b.n	8008316 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2284      	movs	r2, #132	; 0x84
 800830c:	2120      	movs	r1, #32
 800830e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	e000      	b.n	8008316 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008314:	2302      	movs	r3, #2
  }
}
 8008316:	0018      	movs	r0, r3
 8008318:	46bd      	mov	sp, r7
 800831a:	b008      	add	sp, #32
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008328:	231a      	movs	r3, #26
 800832a:	18fb      	adds	r3, r7, r3
 800832c:	2200      	movs	r2, #0
 800832e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	431a      	orrs	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	4313      	orrs	r3, r2
 8008346:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4abd      	ldr	r2, [pc, #756]	; (8008644 <UART_SetConfig+0x324>)
 8008350:	4013      	ands	r3, r2
 8008352:	0019      	movs	r1, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	430a      	orrs	r2, r1
 800835c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	4ab8      	ldr	r2, [pc, #736]	; (8008648 <UART_SetConfig+0x328>)
 8008366:	4013      	ands	r3, r2
 8008368:	0019      	movs	r1, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	69fa      	ldr	r2, [r7, #28]
 8008382:	4313      	orrs	r3, r2
 8008384:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	4aaf      	ldr	r2, [pc, #700]	; (800864c <UART_SetConfig+0x32c>)
 800838e:	4013      	ands	r3, r2
 8008390:	0019      	movs	r1, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69fa      	ldr	r2, [r7, #28]
 8008398:	430a      	orrs	r2, r1
 800839a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a2:	220f      	movs	r2, #15
 80083a4:	4393      	bics	r3, r2
 80083a6:	0019      	movs	r1, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4aa5      	ldr	r2, [pc, #660]	; (8008650 <UART_SetConfig+0x330>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d127      	bne.n	800840e <UART_SetConfig+0xee>
 80083be:	4ba5      	ldr	r3, [pc, #660]	; (8008654 <UART_SetConfig+0x334>)
 80083c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c2:	2203      	movs	r2, #3
 80083c4:	4013      	ands	r3, r2
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d017      	beq.n	80083fa <UART_SetConfig+0xda>
 80083ca:	d81b      	bhi.n	8008404 <UART_SetConfig+0xe4>
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d00a      	beq.n	80083e6 <UART_SetConfig+0xc6>
 80083d0:	d818      	bhi.n	8008404 <UART_SetConfig+0xe4>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <UART_SetConfig+0xbc>
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d00a      	beq.n	80083f0 <UART_SetConfig+0xd0>
 80083da:	e013      	b.n	8008404 <UART_SetConfig+0xe4>
 80083dc:	231b      	movs	r3, #27
 80083de:	18fb      	adds	r3, r7, r3
 80083e0:	2200      	movs	r2, #0
 80083e2:	701a      	strb	r2, [r3, #0]
 80083e4:	e058      	b.n	8008498 <UART_SetConfig+0x178>
 80083e6:	231b      	movs	r3, #27
 80083e8:	18fb      	adds	r3, r7, r3
 80083ea:	2202      	movs	r2, #2
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	e053      	b.n	8008498 <UART_SetConfig+0x178>
 80083f0:	231b      	movs	r3, #27
 80083f2:	18fb      	adds	r3, r7, r3
 80083f4:	2204      	movs	r2, #4
 80083f6:	701a      	strb	r2, [r3, #0]
 80083f8:	e04e      	b.n	8008498 <UART_SetConfig+0x178>
 80083fa:	231b      	movs	r3, #27
 80083fc:	18fb      	adds	r3, r7, r3
 80083fe:	2208      	movs	r2, #8
 8008400:	701a      	strb	r2, [r3, #0]
 8008402:	e049      	b.n	8008498 <UART_SetConfig+0x178>
 8008404:	231b      	movs	r3, #27
 8008406:	18fb      	adds	r3, r7, r3
 8008408:	2210      	movs	r2, #16
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	e044      	b.n	8008498 <UART_SetConfig+0x178>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a91      	ldr	r2, [pc, #580]	; (8008658 <UART_SetConfig+0x338>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d127      	bne.n	8008468 <UART_SetConfig+0x148>
 8008418:	4b8e      	ldr	r3, [pc, #568]	; (8008654 <UART_SetConfig+0x334>)
 800841a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841c:	220c      	movs	r2, #12
 800841e:	4013      	ands	r3, r2
 8008420:	2b0c      	cmp	r3, #12
 8008422:	d017      	beq.n	8008454 <UART_SetConfig+0x134>
 8008424:	d81b      	bhi.n	800845e <UART_SetConfig+0x13e>
 8008426:	2b08      	cmp	r3, #8
 8008428:	d00a      	beq.n	8008440 <UART_SetConfig+0x120>
 800842a:	d818      	bhi.n	800845e <UART_SetConfig+0x13e>
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <UART_SetConfig+0x116>
 8008430:	2b04      	cmp	r3, #4
 8008432:	d00a      	beq.n	800844a <UART_SetConfig+0x12a>
 8008434:	e013      	b.n	800845e <UART_SetConfig+0x13e>
 8008436:	231b      	movs	r3, #27
 8008438:	18fb      	adds	r3, r7, r3
 800843a:	2200      	movs	r2, #0
 800843c:	701a      	strb	r2, [r3, #0]
 800843e:	e02b      	b.n	8008498 <UART_SetConfig+0x178>
 8008440:	231b      	movs	r3, #27
 8008442:	18fb      	adds	r3, r7, r3
 8008444:	2202      	movs	r2, #2
 8008446:	701a      	strb	r2, [r3, #0]
 8008448:	e026      	b.n	8008498 <UART_SetConfig+0x178>
 800844a:	231b      	movs	r3, #27
 800844c:	18fb      	adds	r3, r7, r3
 800844e:	2204      	movs	r2, #4
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	e021      	b.n	8008498 <UART_SetConfig+0x178>
 8008454:	231b      	movs	r3, #27
 8008456:	18fb      	adds	r3, r7, r3
 8008458:	2208      	movs	r2, #8
 800845a:	701a      	strb	r2, [r3, #0]
 800845c:	e01c      	b.n	8008498 <UART_SetConfig+0x178>
 800845e:	231b      	movs	r3, #27
 8008460:	18fb      	adds	r3, r7, r3
 8008462:	2210      	movs	r2, #16
 8008464:	701a      	strb	r2, [r3, #0]
 8008466:	e017      	b.n	8008498 <UART_SetConfig+0x178>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a7b      	ldr	r2, [pc, #492]	; (800865c <UART_SetConfig+0x33c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d104      	bne.n	800847c <UART_SetConfig+0x15c>
 8008472:	231b      	movs	r3, #27
 8008474:	18fb      	adds	r3, r7, r3
 8008476:	2200      	movs	r2, #0
 8008478:	701a      	strb	r2, [r3, #0]
 800847a:	e00d      	b.n	8008498 <UART_SetConfig+0x178>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a77      	ldr	r2, [pc, #476]	; (8008660 <UART_SetConfig+0x340>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d104      	bne.n	8008490 <UART_SetConfig+0x170>
 8008486:	231b      	movs	r3, #27
 8008488:	18fb      	adds	r3, r7, r3
 800848a:	2200      	movs	r2, #0
 800848c:	701a      	strb	r2, [r3, #0]
 800848e:	e003      	b.n	8008498 <UART_SetConfig+0x178>
 8008490:	231b      	movs	r3, #27
 8008492:	18fb      	adds	r3, r7, r3
 8008494:	2210      	movs	r2, #16
 8008496:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	69da      	ldr	r2, [r3, #28]
 800849c:	2380      	movs	r3, #128	; 0x80
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d000      	beq.n	80084a6 <UART_SetConfig+0x186>
 80084a4:	e066      	b.n	8008574 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 80084a6:	231b      	movs	r3, #27
 80084a8:	18fb      	adds	r3, r7, r3
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d015      	beq.n	80084dc <UART_SetConfig+0x1bc>
 80084b0:	dc18      	bgt.n	80084e4 <UART_SetConfig+0x1c4>
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d00d      	beq.n	80084d2 <UART_SetConfig+0x1b2>
 80084b6:	dc15      	bgt.n	80084e4 <UART_SetConfig+0x1c4>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <UART_SetConfig+0x1a2>
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d005      	beq.n	80084cc <UART_SetConfig+0x1ac>
 80084c0:	e010      	b.n	80084e4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084c2:	f7fe fb73 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 80084c6:	0003      	movs	r3, r0
 80084c8:	617b      	str	r3, [r7, #20]
        break;
 80084ca:	e012      	b.n	80084f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084cc:	4b65      	ldr	r3, [pc, #404]	; (8008664 <UART_SetConfig+0x344>)
 80084ce:	617b      	str	r3, [r7, #20]
        break;
 80084d0:	e00f      	b.n	80084f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084d2:	f7fe fadf 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 80084d6:	0003      	movs	r3, r0
 80084d8:	617b      	str	r3, [r7, #20]
        break;
 80084da:	e00a      	b.n	80084f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084dc:	2380      	movs	r3, #128	; 0x80
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	617b      	str	r3, [r7, #20]
        break;
 80084e2:	e006      	b.n	80084f2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80084e8:	231a      	movs	r3, #26
 80084ea:	18fb      	adds	r3, r7, r3
 80084ec:	2201      	movs	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
        break;
 80084f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d100      	bne.n	80084fa <UART_SetConfig+0x1da>
 80084f8:	e08e      	b.n	8008618 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084fe:	4b5a      	ldr	r3, [pc, #360]	; (8008668 <UART_SetConfig+0x348>)
 8008500:	0052      	lsls	r2, r2, #1
 8008502:	5ad3      	ldrh	r3, [r2, r3]
 8008504:	0019      	movs	r1, r3
 8008506:	6978      	ldr	r0, [r7, #20]
 8008508:	f7f7 fe16 	bl	8000138 <__udivsi3>
 800850c:	0003      	movs	r3, r0
 800850e:	005a      	lsls	r2, r3, #1
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	085b      	lsrs	r3, r3, #1
 8008516:	18d2      	adds	r2, r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	0019      	movs	r1, r3
 800851e:	0010      	movs	r0, r2
 8008520:	f7f7 fe0a 	bl	8000138 <__udivsi3>
 8008524:	0003      	movs	r3, r0
 8008526:	b29b      	uxth	r3, r3
 8008528:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	2b0f      	cmp	r3, #15
 800852e:	d91c      	bls.n	800856a <UART_SetConfig+0x24a>
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	2380      	movs	r3, #128	; 0x80
 8008534:	025b      	lsls	r3, r3, #9
 8008536:	429a      	cmp	r2, r3
 8008538:	d217      	bcs.n	800856a <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	b29a      	uxth	r2, r3
 800853e:	200e      	movs	r0, #14
 8008540:	183b      	adds	r3, r7, r0
 8008542:	210f      	movs	r1, #15
 8008544:	438a      	bics	r2, r1
 8008546:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	085b      	lsrs	r3, r3, #1
 800854c:	b29b      	uxth	r3, r3
 800854e:	2207      	movs	r2, #7
 8008550:	4013      	ands	r3, r2
 8008552:	b299      	uxth	r1, r3
 8008554:	183b      	adds	r3, r7, r0
 8008556:	183a      	adds	r2, r7, r0
 8008558:	8812      	ldrh	r2, [r2, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	183a      	adds	r2, r7, r0
 8008564:	8812      	ldrh	r2, [r2, #0]
 8008566:	60da      	str	r2, [r3, #12]
 8008568:	e056      	b.n	8008618 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 800856a:	231a      	movs	r3, #26
 800856c:	18fb      	adds	r3, r7, r3
 800856e:	2201      	movs	r2, #1
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e051      	b.n	8008618 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008574:	231b      	movs	r3, #27
 8008576:	18fb      	adds	r3, r7, r3
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b08      	cmp	r3, #8
 800857c:	d015      	beq.n	80085aa <UART_SetConfig+0x28a>
 800857e:	dc18      	bgt.n	80085b2 <UART_SetConfig+0x292>
 8008580:	2b04      	cmp	r3, #4
 8008582:	d00d      	beq.n	80085a0 <UART_SetConfig+0x280>
 8008584:	dc15      	bgt.n	80085b2 <UART_SetConfig+0x292>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <UART_SetConfig+0x270>
 800858a:	2b02      	cmp	r3, #2
 800858c:	d005      	beq.n	800859a <UART_SetConfig+0x27a>
 800858e:	e010      	b.n	80085b2 <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008590:	f7fe fb0c 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 8008594:	0003      	movs	r3, r0
 8008596:	617b      	str	r3, [r7, #20]
        break;
 8008598:	e012      	b.n	80085c0 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800859a:	4b32      	ldr	r3, [pc, #200]	; (8008664 <UART_SetConfig+0x344>)
 800859c:	617b      	str	r3, [r7, #20]
        break;
 800859e:	e00f      	b.n	80085c0 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085a0:	f7fe fa78 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 80085a4:	0003      	movs	r3, r0
 80085a6:	617b      	str	r3, [r7, #20]
        break;
 80085a8:	e00a      	b.n	80085c0 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085aa:	2380      	movs	r3, #128	; 0x80
 80085ac:	021b      	lsls	r3, r3, #8
 80085ae:	617b      	str	r3, [r7, #20]
        break;
 80085b0:	e006      	b.n	80085c0 <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80085b6:	231a      	movs	r3, #26
 80085b8:	18fb      	adds	r3, r7, r3
 80085ba:	2201      	movs	r2, #1
 80085bc:	701a      	strb	r2, [r3, #0]
        break;
 80085be:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d028      	beq.n	8008618 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ca:	4b27      	ldr	r3, [pc, #156]	; (8008668 <UART_SetConfig+0x348>)
 80085cc:	0052      	lsls	r2, r2, #1
 80085ce:	5ad3      	ldrh	r3, [r2, r3]
 80085d0:	0019      	movs	r1, r3
 80085d2:	6978      	ldr	r0, [r7, #20]
 80085d4:	f7f7 fdb0 	bl	8000138 <__udivsi3>
 80085d8:	0003      	movs	r3, r0
 80085da:	001a      	movs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	085b      	lsrs	r3, r3, #1
 80085e2:	18d2      	adds	r2, r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	0019      	movs	r1, r3
 80085ea:	0010      	movs	r0, r2
 80085ec:	f7f7 fda4 	bl	8000138 <__udivsi3>
 80085f0:	0003      	movs	r3, r0
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	2b0f      	cmp	r3, #15
 80085fa:	d909      	bls.n	8008610 <UART_SetConfig+0x2f0>
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	2380      	movs	r3, #128	; 0x80
 8008600:	025b      	lsls	r3, r3, #9
 8008602:	429a      	cmp	r2, r3
 8008604:	d204      	bcs.n	8008610 <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	60da      	str	r2, [r3, #12]
 800860e:	e003      	b.n	8008618 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008610:	231a      	movs	r3, #26
 8008612:	18fb      	adds	r3, r7, r3
 8008614:	2201      	movs	r2, #1
 8008616:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	226a      	movs	r2, #106	; 0x6a
 800861c:	2101      	movs	r1, #1
 800861e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2268      	movs	r2, #104	; 0x68
 8008624:	2101      	movs	r1, #1
 8008626:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008634:	231a      	movs	r3, #26
 8008636:	18fb      	adds	r3, r7, r3
 8008638:	781b      	ldrb	r3, [r3, #0]
}
 800863a:	0018      	movs	r0, r3
 800863c:	46bd      	mov	sp, r7
 800863e:	b008      	add	sp, #32
 8008640:	bd80      	pop	{r7, pc}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	cfff69f3 	.word	0xcfff69f3
 8008648:	ffffcfff 	.word	0xffffcfff
 800864c:	11fff4ff 	.word	0x11fff4ff
 8008650:	40013800 	.word	0x40013800
 8008654:	40021000 	.word	0x40021000
 8008658:	40004400 	.word	0x40004400
 800865c:	40004800 	.word	0x40004800
 8008660:	40004c00 	.word	0x40004c00
 8008664:	00f42400 	.word	0x00f42400
 8008668:	0800e17c 	.word	0x0800e17c

0800866c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008678:	2201      	movs	r2, #1
 800867a:	4013      	ands	r3, r2
 800867c:	d00b      	beq.n	8008696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	4a4a      	ldr	r2, [pc, #296]	; (80087b0 <UART_AdvFeatureConfig+0x144>)
 8008686:	4013      	ands	r3, r2
 8008688:	0019      	movs	r1, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869a:	2202      	movs	r2, #2
 800869c:	4013      	ands	r3, r2
 800869e:	d00b      	beq.n	80086b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	4a43      	ldr	r2, [pc, #268]	; (80087b4 <UART_AdvFeatureConfig+0x148>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	0019      	movs	r1, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	430a      	orrs	r2, r1
 80086b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	2204      	movs	r2, #4
 80086be:	4013      	ands	r3, r2
 80086c0:	d00b      	beq.n	80086da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	4a3b      	ldr	r2, [pc, #236]	; (80087b8 <UART_AdvFeatureConfig+0x14c>)
 80086ca:	4013      	ands	r3, r2
 80086cc:	0019      	movs	r1, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086de:	2208      	movs	r2, #8
 80086e0:	4013      	ands	r3, r2
 80086e2:	d00b      	beq.n	80086fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	4a34      	ldr	r2, [pc, #208]	; (80087bc <UART_AdvFeatureConfig+0x150>)
 80086ec:	4013      	ands	r3, r2
 80086ee:	0019      	movs	r1, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008700:	2210      	movs	r2, #16
 8008702:	4013      	ands	r3, r2
 8008704:	d00b      	beq.n	800871e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	4a2c      	ldr	r2, [pc, #176]	; (80087c0 <UART_AdvFeatureConfig+0x154>)
 800870e:	4013      	ands	r3, r2
 8008710:	0019      	movs	r1, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008722:	2220      	movs	r2, #32
 8008724:	4013      	ands	r3, r2
 8008726:	d00b      	beq.n	8008740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	4a25      	ldr	r2, [pc, #148]	; (80087c4 <UART_AdvFeatureConfig+0x158>)
 8008730:	4013      	ands	r3, r2
 8008732:	0019      	movs	r1, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008744:	2240      	movs	r2, #64	; 0x40
 8008746:	4013      	ands	r3, r2
 8008748:	d01d      	beq.n	8008786 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4a1d      	ldr	r2, [pc, #116]	; (80087c8 <UART_AdvFeatureConfig+0x15c>)
 8008752:	4013      	ands	r3, r2
 8008754:	0019      	movs	r1, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008766:	2380      	movs	r3, #128	; 0x80
 8008768:	035b      	lsls	r3, r3, #13
 800876a:	429a      	cmp	r2, r3
 800876c:	d10b      	bne.n	8008786 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	4a15      	ldr	r2, [pc, #84]	; (80087cc <UART_AdvFeatureConfig+0x160>)
 8008776:	4013      	ands	r3, r2
 8008778:	0019      	movs	r1, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878a:	2280      	movs	r2, #128	; 0x80
 800878c:	4013      	ands	r3, r2
 800878e:	d00b      	beq.n	80087a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	4a0e      	ldr	r2, [pc, #56]	; (80087d0 <UART_AdvFeatureConfig+0x164>)
 8008798:	4013      	ands	r3, r2
 800879a:	0019      	movs	r1, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	605a      	str	r2, [r3, #4]
  }
}
 80087a8:	46c0      	nop			; (mov r8, r8)
 80087aa:	46bd      	mov	sp, r7
 80087ac:	b002      	add	sp, #8
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	fffdffff 	.word	0xfffdffff
 80087b4:	fffeffff 	.word	0xfffeffff
 80087b8:	fffbffff 	.word	0xfffbffff
 80087bc:	ffff7fff 	.word	0xffff7fff
 80087c0:	ffffefff 	.word	0xffffefff
 80087c4:	ffffdfff 	.word	0xffffdfff
 80087c8:	ffefffff 	.word	0xffefffff
 80087cc:	ff9fffff 	.word	0xff9fffff
 80087d0:	fff7ffff 	.word	0xfff7ffff

080087d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af02      	add	r7, sp, #8
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	228c      	movs	r2, #140	; 0x8c
 80087e0:	2100      	movs	r1, #0
 80087e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087e4:	f7fd f944 	bl	8005a70 <HAL_GetTick>
 80087e8:	0003      	movs	r3, r0
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2208      	movs	r2, #8
 80087f4:	4013      	ands	r3, r2
 80087f6:	2b08      	cmp	r3, #8
 80087f8:	d10c      	bne.n	8008814 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2280      	movs	r2, #128	; 0x80
 80087fe:	0391      	lsls	r1, r2, #14
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	4a18      	ldr	r2, [pc, #96]	; (8008864 <UART_CheckIdleState+0x90>)
 8008804:	9200      	str	r2, [sp, #0]
 8008806:	2200      	movs	r2, #0
 8008808:	f000 f82e 	bl	8008868 <UART_WaitOnFlagUntilTimeout>
 800880c:	1e03      	subs	r3, r0, #0
 800880e:	d001      	beq.n	8008814 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e023      	b.n	800885c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2204      	movs	r2, #4
 800881c:	4013      	ands	r3, r2
 800881e:	2b04      	cmp	r3, #4
 8008820:	d10c      	bne.n	800883c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2280      	movs	r2, #128	; 0x80
 8008826:	03d1      	lsls	r1, r2, #15
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	4a0e      	ldr	r2, [pc, #56]	; (8008864 <UART_CheckIdleState+0x90>)
 800882c:	9200      	str	r2, [sp, #0]
 800882e:	2200      	movs	r2, #0
 8008830:	f000 f81a 	bl	8008868 <UART_WaitOnFlagUntilTimeout>
 8008834:	1e03      	subs	r3, r0, #0
 8008836:	d001      	beq.n	800883c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e00f      	b.n	800885c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2284      	movs	r2, #132	; 0x84
 8008840:	2120      	movs	r1, #32
 8008842:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2288      	movs	r2, #136	; 0x88
 8008848:	2120      	movs	r1, #32
 800884a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2280      	movs	r2, #128	; 0x80
 8008856:	2100      	movs	r1, #0
 8008858:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	0018      	movs	r0, r3
 800885e:	46bd      	mov	sp, r7
 8008860:	b004      	add	sp, #16
 8008862:	bd80      	pop	{r7, pc}
 8008864:	01ffffff 	.word	0x01ffffff

08008868 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b094      	sub	sp, #80	; 0x50
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	1dfb      	adds	r3, r7, #7
 8008876:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008878:	e0a7      	b.n	80089ca <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800887a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800887c:	3301      	adds	r3, #1
 800887e:	d100      	bne.n	8008882 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008880:	e0a3      	b.n	80089ca <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008882:	f7fd f8f5 	bl	8005a70 <HAL_GetTick>
 8008886:	0002      	movs	r2, r0
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800888e:	429a      	cmp	r2, r3
 8008890:	d302      	bcc.n	8008898 <UART_WaitOnFlagUntilTimeout+0x30>
 8008892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008894:	2b00      	cmp	r3, #0
 8008896:	d13f      	bne.n	8008918 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008898:	f3ef 8310 	mrs	r3, PRIMASK
 800889c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80088a0:	647b      	str	r3, [r7, #68]	; 0x44
 80088a2:	2301      	movs	r3, #1
 80088a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	f383 8810 	msr	PRIMASK, r3
}
 80088ac:	46c0      	nop			; (mov r8, r8)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	494e      	ldr	r1, [pc, #312]	; (80089f4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80088ba:	400a      	ands	r2, r1
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	f383 8810 	msr	PRIMASK, r3
}
 80088c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ca:	f3ef 8310 	mrs	r3, PRIMASK
 80088ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80088d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d2:	643b      	str	r3, [r7, #64]	; 0x40
 80088d4:	2301      	movs	r3, #1
 80088d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	f383 8810 	msr	PRIMASK, r3
}
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689a      	ldr	r2, [r3, #8]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2101      	movs	r1, #1
 80088ec:	438a      	bics	r2, r1
 80088ee:	609a      	str	r2, [r3, #8]
 80088f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f6:	f383 8810 	msr	PRIMASK, r3
}
 80088fa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2284      	movs	r2, #132	; 0x84
 8008900:	2120      	movs	r1, #32
 8008902:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2288      	movs	r2, #136	; 0x88
 8008908:	2120      	movs	r1, #32
 800890a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2280      	movs	r2, #128	; 0x80
 8008910:	2100      	movs	r1, #0
 8008912:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e069      	b.n	80089ec <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2204      	movs	r2, #4
 8008920:	4013      	ands	r3, r2
 8008922:	d052      	beq.n	80089ca <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	69da      	ldr	r2, [r3, #28]
 800892a:	2380      	movs	r3, #128	; 0x80
 800892c:	011b      	lsls	r3, r3, #4
 800892e:	401a      	ands	r2, r3
 8008930:	2380      	movs	r3, #128	; 0x80
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	429a      	cmp	r2, r3
 8008936:	d148      	bne.n	80089ca <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2280      	movs	r2, #128	; 0x80
 800893e:	0112      	lsls	r2, r2, #4
 8008940:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008942:	f3ef 8310 	mrs	r3, PRIMASK
 8008946:	613b      	str	r3, [r7, #16]
  return(result);
 8008948:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800894a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800894c:	2301      	movs	r3, #1
 800894e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f383 8810 	msr	PRIMASK, r3
}
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4924      	ldr	r1, [pc, #144]	; (80089f4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008964:	400a      	ands	r2, r1
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800896a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	f383 8810 	msr	PRIMASK, r3
}
 8008972:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008974:	f3ef 8310 	mrs	r3, PRIMASK
 8008978:	61fb      	str	r3, [r7, #28]
  return(result);
 800897a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800897c:	64bb      	str	r3, [r7, #72]	; 0x48
 800897e:	2301      	movs	r3, #1
 8008980:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	f383 8810 	msr	PRIMASK, r3
}
 8008988:	46c0      	nop			; (mov r8, r8)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2101      	movs	r1, #1
 8008996:	438a      	bics	r2, r1
 8008998:	609a      	str	r2, [r3, #8]
 800899a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	f383 8810 	msr	PRIMASK, r3
}
 80089a4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2284      	movs	r2, #132	; 0x84
 80089aa:	2120      	movs	r1, #32
 80089ac:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2288      	movs	r2, #136	; 0x88
 80089b2:	2120      	movs	r1, #32
 80089b4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	228c      	movs	r2, #140	; 0x8c
 80089ba:	2120      	movs	r1, #32
 80089bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2280      	movs	r2, #128	; 0x80
 80089c2:	2100      	movs	r1, #0
 80089c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e010      	b.n	80089ec <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	4013      	ands	r3, r2
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	425a      	negs	r2, r3
 80089da:	4153      	adcs	r3, r2
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	001a      	movs	r2, r3
 80089e0:	1dfb      	adds	r3, r7, #7
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d100      	bne.n	80089ea <UART_WaitOnFlagUntilTimeout+0x182>
 80089e8:	e747      	b.n	800887a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	0018      	movs	r0, r3
 80089ee:	46bd      	mov	sp, r7
 80089f0:	b014      	add	sp, #80	; 0x50
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	fffffe5f 	.word	0xfffffe5f

080089f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2280      	movs	r2, #128	; 0x80
 8008a04:	5c9b      	ldrb	r3, [r3, r2]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <HAL_UARTEx_DisableFifoMode+0x16>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	e027      	b.n	8008a5e <HAL_UARTEx_DisableFifoMode+0x66>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2280      	movs	r2, #128	; 0x80
 8008a12:	2101      	movs	r1, #1
 8008a14:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2284      	movs	r2, #132	; 0x84
 8008a1a:	2124      	movs	r1, #36	; 0x24
 8008a1c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2101      	movs	r1, #1
 8008a32:	438a      	bics	r2, r1
 8008a34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	4a0b      	ldr	r2, [pc, #44]	; (8008a68 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2284      	movs	r2, #132	; 0x84
 8008a50:	2120      	movs	r1, #32
 8008a52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2280      	movs	r2, #128	; 0x80
 8008a58:	2100      	movs	r1, #0
 8008a5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	0018      	movs	r0, r3
 8008a60:	46bd      	mov	sp, r7
 8008a62:	b004      	add	sp, #16
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	46c0      	nop			; (mov r8, r8)
 8008a68:	dfffffff 	.word	0xdfffffff

08008a6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2280      	movs	r2, #128	; 0x80
 8008a7a:	5c9b      	ldrb	r3, [r3, r2]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e02e      	b.n	8008ae2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2280      	movs	r2, #128	; 0x80
 8008a88:	2101      	movs	r1, #1
 8008a8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2284      	movs	r2, #132	; 0x84
 8008a90:	2124      	movs	r1, #36	; 0x24
 8008a92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	438a      	bics	r2, r1
 8008aaa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	00db      	lsls	r3, r3, #3
 8008ab4:	08d9      	lsrs	r1, r3, #3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f000 f854 	bl	8008b70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2284      	movs	r2, #132	; 0x84
 8008ad4:	2120      	movs	r1, #32
 8008ad6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2280      	movs	r2, #128	; 0x80
 8008adc:	2100      	movs	r1, #0
 8008ade:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	b004      	add	sp, #16
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2280      	movs	r2, #128	; 0x80
 8008afa:	5c9b      	ldrb	r3, [r3, r2]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e02f      	b.n	8008b64 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2280      	movs	r2, #128	; 0x80
 8008b08:	2101      	movs	r1, #1
 8008b0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2284      	movs	r2, #132	; 0x84
 8008b10:	2124      	movs	r1, #36	; 0x24
 8008b12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2101      	movs	r1, #1
 8008b28:	438a      	bics	r2, r1
 8008b2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	4a0e      	ldr	r2, [pc, #56]	; (8008b6c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008b34:	4013      	ands	r3, r2
 8008b36:	0019      	movs	r1, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	0018      	movs	r0, r3
 8008b46:	f000 f813 	bl	8008b70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2284      	movs	r2, #132	; 0x84
 8008b56:	2120      	movs	r1, #32
 8008b58:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2280      	movs	r2, #128	; 0x80
 8008b5e:	2100      	movs	r1, #0
 8008b60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	0018      	movs	r0, r3
 8008b66:	46bd      	mov	sp, r7
 8008b68:	b004      	add	sp, #16
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	f1ffffff 	.word	0xf1ffffff

08008b70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d108      	bne.n	8008b92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	226a      	movs	r2, #106	; 0x6a
 8008b84:	2101      	movs	r1, #1
 8008b86:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2268      	movs	r2, #104	; 0x68
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b90:	e043      	b.n	8008c1a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b92:	260f      	movs	r6, #15
 8008b94:	19bb      	adds	r3, r7, r6
 8008b96:	2208      	movs	r2, #8
 8008b98:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b9a:	200e      	movs	r0, #14
 8008b9c:	183b      	adds	r3, r7, r0
 8008b9e:	2208      	movs	r2, #8
 8008ba0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	0e5b      	lsrs	r3, r3, #25
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	240d      	movs	r4, #13
 8008bae:	193b      	adds	r3, r7, r4
 8008bb0:	2107      	movs	r1, #7
 8008bb2:	400a      	ands	r2, r1
 8008bb4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	0f5b      	lsrs	r3, r3, #29
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	250c      	movs	r5, #12
 8008bc2:	197b      	adds	r3, r7, r5
 8008bc4:	2107      	movs	r1, #7
 8008bc6:	400a      	ands	r2, r1
 8008bc8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bca:	183b      	adds	r3, r7, r0
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	197a      	adds	r2, r7, r5
 8008bd0:	7812      	ldrb	r2, [r2, #0]
 8008bd2:	4914      	ldr	r1, [pc, #80]	; (8008c24 <UARTEx_SetNbDataToProcess+0xb4>)
 8008bd4:	5c8a      	ldrb	r2, [r1, r2]
 8008bd6:	435a      	muls	r2, r3
 8008bd8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bda:	197b      	adds	r3, r7, r5
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	4a12      	ldr	r2, [pc, #72]	; (8008c28 <UARTEx_SetNbDataToProcess+0xb8>)
 8008be0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008be2:	0019      	movs	r1, r3
 8008be4:	f7f7 fb32 	bl	800024c <__divsi3>
 8008be8:	0003      	movs	r3, r0
 8008bea:	b299      	uxth	r1, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	226a      	movs	r2, #106	; 0x6a
 8008bf0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bf2:	19bb      	adds	r3, r7, r6
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	193a      	adds	r2, r7, r4
 8008bf8:	7812      	ldrb	r2, [r2, #0]
 8008bfa:	490a      	ldr	r1, [pc, #40]	; (8008c24 <UARTEx_SetNbDataToProcess+0xb4>)
 8008bfc:	5c8a      	ldrb	r2, [r1, r2]
 8008bfe:	435a      	muls	r2, r3
 8008c00:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c02:	193b      	adds	r3, r7, r4
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	4a08      	ldr	r2, [pc, #32]	; (8008c28 <UARTEx_SetNbDataToProcess+0xb8>)
 8008c08:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c0a:	0019      	movs	r1, r3
 8008c0c:	f7f7 fb1e 	bl	800024c <__divsi3>
 8008c10:	0003      	movs	r3, r0
 8008c12:	b299      	uxth	r1, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2268      	movs	r2, #104	; 0x68
 8008c18:	5299      	strh	r1, [r3, r2]
}
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	b005      	add	sp, #20
 8008c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c22:	46c0      	nop			; (mov r8, r8)
 8008c24:	0800e194 	.word	0x0800e194
 8008c28:	0800e19c 	.word	0x0800e19c

08008c2c <__errno>:
 8008c2c:	4b01      	ldr	r3, [pc, #4]	; (8008c34 <__errno+0x8>)
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	4770      	bx	lr
 8008c32:	46c0      	nop			; (mov r8, r8)
 8008c34:	2000000c 	.word	0x2000000c

08008c38 <__libc_init_array>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	2600      	movs	r6, #0
 8008c3c:	4d0c      	ldr	r5, [pc, #48]	; (8008c70 <__libc_init_array+0x38>)
 8008c3e:	4c0d      	ldr	r4, [pc, #52]	; (8008c74 <__libc_init_array+0x3c>)
 8008c40:	1b64      	subs	r4, r4, r5
 8008c42:	10a4      	asrs	r4, r4, #2
 8008c44:	42a6      	cmp	r6, r4
 8008c46:	d109      	bne.n	8008c5c <__libc_init_array+0x24>
 8008c48:	2600      	movs	r6, #0
 8008c4a:	f005 f875 	bl	800dd38 <_init>
 8008c4e:	4d0a      	ldr	r5, [pc, #40]	; (8008c78 <__libc_init_array+0x40>)
 8008c50:	4c0a      	ldr	r4, [pc, #40]	; (8008c7c <__libc_init_array+0x44>)
 8008c52:	1b64      	subs	r4, r4, r5
 8008c54:	10a4      	asrs	r4, r4, #2
 8008c56:	42a6      	cmp	r6, r4
 8008c58:	d105      	bne.n	8008c66 <__libc_init_array+0x2e>
 8008c5a:	bd70      	pop	{r4, r5, r6, pc}
 8008c5c:	00b3      	lsls	r3, r6, #2
 8008c5e:	58eb      	ldr	r3, [r5, r3]
 8008c60:	4798      	blx	r3
 8008c62:	3601      	adds	r6, #1
 8008c64:	e7ee      	b.n	8008c44 <__libc_init_array+0xc>
 8008c66:	00b3      	lsls	r3, r6, #2
 8008c68:	58eb      	ldr	r3, [r5, r3]
 8008c6a:	4798      	blx	r3
 8008c6c:	3601      	adds	r6, #1
 8008c6e:	e7f2      	b.n	8008c56 <__libc_init_array+0x1e>
 8008c70:	0800e7e0 	.word	0x0800e7e0
 8008c74:	0800e7e0 	.word	0x0800e7e0
 8008c78:	0800e7e0 	.word	0x0800e7e0
 8008c7c:	0800e7e4 	.word	0x0800e7e4

08008c80 <memset>:
 8008c80:	0003      	movs	r3, r0
 8008c82:	1882      	adds	r2, r0, r2
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d100      	bne.n	8008c8a <memset+0xa>
 8008c88:	4770      	bx	lr
 8008c8a:	7019      	strb	r1, [r3, #0]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	e7f9      	b.n	8008c84 <memset+0x4>

08008c90 <__cvt>:
 8008c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c92:	001e      	movs	r6, r3
 8008c94:	2300      	movs	r3, #0
 8008c96:	0014      	movs	r4, r2
 8008c98:	b08b      	sub	sp, #44	; 0x2c
 8008c9a:	429e      	cmp	r6, r3
 8008c9c:	da04      	bge.n	8008ca8 <__cvt+0x18>
 8008c9e:	2180      	movs	r1, #128	; 0x80
 8008ca0:	0609      	lsls	r1, r1, #24
 8008ca2:	1873      	adds	r3, r6, r1
 8008ca4:	001e      	movs	r6, r3
 8008ca6:	232d      	movs	r3, #45	; 0x2d
 8008ca8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008caa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008cac:	7013      	strb	r3, [r2, #0]
 8008cae:	2320      	movs	r3, #32
 8008cb0:	2203      	movs	r2, #3
 8008cb2:	439f      	bics	r7, r3
 8008cb4:	2f46      	cmp	r7, #70	; 0x46
 8008cb6:	d007      	beq.n	8008cc8 <__cvt+0x38>
 8008cb8:	003b      	movs	r3, r7
 8008cba:	3b45      	subs	r3, #69	; 0x45
 8008cbc:	4259      	negs	r1, r3
 8008cbe:	414b      	adcs	r3, r1
 8008cc0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008cc2:	3a01      	subs	r2, #1
 8008cc4:	18cb      	adds	r3, r1, r3
 8008cc6:	9310      	str	r3, [sp, #64]	; 0x40
 8008cc8:	ab09      	add	r3, sp, #36	; 0x24
 8008cca:	9304      	str	r3, [sp, #16]
 8008ccc:	ab08      	add	r3, sp, #32
 8008cce:	9303      	str	r3, [sp, #12]
 8008cd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cd2:	9200      	str	r2, [sp, #0]
 8008cd4:	9302      	str	r3, [sp, #8]
 8008cd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cd8:	0022      	movs	r2, r4
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	0033      	movs	r3, r6
 8008cde:	f000 fcfd 	bl	80096dc <_dtoa_r>
 8008ce2:	0005      	movs	r5, r0
 8008ce4:	2f47      	cmp	r7, #71	; 0x47
 8008ce6:	d102      	bne.n	8008cee <__cvt+0x5e>
 8008ce8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cea:	07db      	lsls	r3, r3, #31
 8008cec:	d528      	bpl.n	8008d40 <__cvt+0xb0>
 8008cee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cf0:	18eb      	adds	r3, r5, r3
 8008cf2:	9307      	str	r3, [sp, #28]
 8008cf4:	2f46      	cmp	r7, #70	; 0x46
 8008cf6:	d114      	bne.n	8008d22 <__cvt+0x92>
 8008cf8:	782b      	ldrb	r3, [r5, #0]
 8008cfa:	2b30      	cmp	r3, #48	; 0x30
 8008cfc:	d10c      	bne.n	8008d18 <__cvt+0x88>
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2300      	movs	r3, #0
 8008d02:	0020      	movs	r0, r4
 8008d04:	0031      	movs	r1, r6
 8008d06:	f7f7 fb9d 	bl	8000444 <__aeabi_dcmpeq>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d104      	bne.n	8008d18 <__cvt+0x88>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d12:	1a9b      	subs	r3, r3, r2
 8008d14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d1a:	9a07      	ldr	r2, [sp, #28]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	18d3      	adds	r3, r2, r3
 8008d20:	9307      	str	r3, [sp, #28]
 8008d22:	2200      	movs	r2, #0
 8008d24:	2300      	movs	r3, #0
 8008d26:	0020      	movs	r0, r4
 8008d28:	0031      	movs	r1, r6
 8008d2a:	f7f7 fb8b 	bl	8000444 <__aeabi_dcmpeq>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d001      	beq.n	8008d36 <__cvt+0xa6>
 8008d32:	9b07      	ldr	r3, [sp, #28]
 8008d34:	9309      	str	r3, [sp, #36]	; 0x24
 8008d36:	2230      	movs	r2, #48	; 0x30
 8008d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3a:	9907      	ldr	r1, [sp, #28]
 8008d3c:	428b      	cmp	r3, r1
 8008d3e:	d306      	bcc.n	8008d4e <__cvt+0xbe>
 8008d40:	0028      	movs	r0, r5
 8008d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d44:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d46:	1b5b      	subs	r3, r3, r5
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	b00b      	add	sp, #44	; 0x2c
 8008d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d4e:	1c59      	adds	r1, r3, #1
 8008d50:	9109      	str	r1, [sp, #36]	; 0x24
 8008d52:	701a      	strb	r2, [r3, #0]
 8008d54:	e7f0      	b.n	8008d38 <__cvt+0xa8>

08008d56 <__exponent>:
 8008d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d58:	1c83      	adds	r3, r0, #2
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	9303      	str	r3, [sp, #12]
 8008d5e:	0005      	movs	r5, r0
 8008d60:	000c      	movs	r4, r1
 8008d62:	232b      	movs	r3, #43	; 0x2b
 8008d64:	7002      	strb	r2, [r0, #0]
 8008d66:	2900      	cmp	r1, #0
 8008d68:	da01      	bge.n	8008d6e <__exponent+0x18>
 8008d6a:	424c      	negs	r4, r1
 8008d6c:	3302      	adds	r3, #2
 8008d6e:	706b      	strb	r3, [r5, #1]
 8008d70:	2c09      	cmp	r4, #9
 8008d72:	dd31      	ble.n	8008dd8 <__exponent+0x82>
 8008d74:	270a      	movs	r7, #10
 8008d76:	ab04      	add	r3, sp, #16
 8008d78:	1dde      	adds	r6, r3, #7
 8008d7a:	0020      	movs	r0, r4
 8008d7c:	0039      	movs	r1, r7
 8008d7e:	9601      	str	r6, [sp, #4]
 8008d80:	f7f7 fb4a 	bl	8000418 <__aeabi_idivmod>
 8008d84:	3e01      	subs	r6, #1
 8008d86:	3130      	adds	r1, #48	; 0x30
 8008d88:	0020      	movs	r0, r4
 8008d8a:	7031      	strb	r1, [r6, #0]
 8008d8c:	0039      	movs	r1, r7
 8008d8e:	9402      	str	r4, [sp, #8]
 8008d90:	f7f7 fa5c 	bl	800024c <__divsi3>
 8008d94:	9b02      	ldr	r3, [sp, #8]
 8008d96:	0004      	movs	r4, r0
 8008d98:	2b63      	cmp	r3, #99	; 0x63
 8008d9a:	dcee      	bgt.n	8008d7a <__exponent+0x24>
 8008d9c:	9b01      	ldr	r3, [sp, #4]
 8008d9e:	3430      	adds	r4, #48	; 0x30
 8008da0:	1e9a      	subs	r2, r3, #2
 8008da2:	0013      	movs	r3, r2
 8008da4:	9903      	ldr	r1, [sp, #12]
 8008da6:	7014      	strb	r4, [r2, #0]
 8008da8:	a804      	add	r0, sp, #16
 8008daa:	3007      	adds	r0, #7
 8008dac:	4298      	cmp	r0, r3
 8008dae:	d80e      	bhi.n	8008dce <__exponent+0x78>
 8008db0:	ab04      	add	r3, sp, #16
 8008db2:	3307      	adds	r3, #7
 8008db4:	2000      	movs	r0, #0
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d804      	bhi.n	8008dc4 <__exponent+0x6e>
 8008dba:	ab04      	add	r3, sp, #16
 8008dbc:	3009      	adds	r0, #9
 8008dbe:	18c0      	adds	r0, r0, r3
 8008dc0:	9b01      	ldr	r3, [sp, #4]
 8008dc2:	1ac0      	subs	r0, r0, r3
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	1818      	adds	r0, r3, r0
 8008dc8:	1b40      	subs	r0, r0, r5
 8008dca:	b007      	add	sp, #28
 8008dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dce:	7818      	ldrb	r0, [r3, #0]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	7008      	strb	r0, [r1, #0]
 8008dd4:	3101      	adds	r1, #1
 8008dd6:	e7e7      	b.n	8008da8 <__exponent+0x52>
 8008dd8:	2330      	movs	r3, #48	; 0x30
 8008dda:	18e4      	adds	r4, r4, r3
 8008ddc:	70ab      	strb	r3, [r5, #2]
 8008dde:	1d28      	adds	r0, r5, #4
 8008de0:	70ec      	strb	r4, [r5, #3]
 8008de2:	e7f1      	b.n	8008dc8 <__exponent+0x72>

08008de4 <_printf_float>:
 8008de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008de6:	b095      	sub	sp, #84	; 0x54
 8008de8:	000c      	movs	r4, r1
 8008dea:	9208      	str	r2, [sp, #32]
 8008dec:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008dee:	9309      	str	r3, [sp, #36]	; 0x24
 8008df0:	0007      	movs	r7, r0
 8008df2:	f001 fa91 	bl	800a318 <_localeconv_r>
 8008df6:	6803      	ldr	r3, [r0, #0]
 8008df8:	0018      	movs	r0, r3
 8008dfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dfc:	f7f7 f980 	bl	8000100 <strlen>
 8008e00:	2300      	movs	r3, #0
 8008e02:	9312      	str	r3, [sp, #72]	; 0x48
 8008e04:	7e23      	ldrb	r3, [r4, #24]
 8008e06:	2207      	movs	r2, #7
 8008e08:	001e      	movs	r6, r3
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	900d      	str	r0, [sp, #52]	; 0x34
 8008e0e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	05c9      	lsls	r1, r1, #23
 8008e16:	d547      	bpl.n	8008ea8 <_printf_float+0xc4>
 8008e18:	189b      	adds	r3, r3, r2
 8008e1a:	4393      	bics	r3, r2
 8008e1c:	001a      	movs	r2, r3
 8008e1e:	3208      	adds	r2, #8
 8008e20:	602a      	str	r2, [r5, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	64a2      	str	r2, [r4, #72]	; 0x48
 8008e28:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008e2e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008e30:	930a      	str	r3, [sp, #40]	; 0x28
 8008e32:	006b      	lsls	r3, r5, #1
 8008e34:	085b      	lsrs	r3, r3, #1
 8008e36:	930e      	str	r3, [sp, #56]	; 0x38
 8008e38:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e3a:	4ba8      	ldr	r3, [pc, #672]	; (80090dc <_printf_float+0x2f8>)
 8008e3c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008e3e:	4252      	negs	r2, r2
 8008e40:	f7f9 fe6c 	bl	8002b1c <__aeabi_dcmpun>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d131      	bne.n	8008eac <_printf_float+0xc8>
 8008e48:	2201      	movs	r2, #1
 8008e4a:	4ba4      	ldr	r3, [pc, #656]	; (80090dc <_printf_float+0x2f8>)
 8008e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008e50:	4252      	negs	r2, r2
 8008e52:	f7f7 fb07 	bl	8000464 <__aeabi_dcmple>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d128      	bne.n	8008eac <_printf_float+0xc8>
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	0029      	movs	r1, r5
 8008e60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e62:	f7f7 faf5 	bl	8000450 <__aeabi_dcmplt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d003      	beq.n	8008e72 <_printf_float+0x8e>
 8008e6a:	0023      	movs	r3, r4
 8008e6c:	222d      	movs	r2, #45	; 0x2d
 8008e6e:	3343      	adds	r3, #67	; 0x43
 8008e70:	701a      	strb	r2, [r3, #0]
 8008e72:	4d9b      	ldr	r5, [pc, #620]	; (80090e0 <_printf_float+0x2fc>)
 8008e74:	2e47      	cmp	r6, #71	; 0x47
 8008e76:	d900      	bls.n	8008e7a <_printf_float+0x96>
 8008e78:	4d9a      	ldr	r5, [pc, #616]	; (80090e4 <_printf_float+0x300>)
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e7e:	6123      	str	r3, [r4, #16]
 8008e80:	3301      	adds	r3, #1
 8008e82:	439a      	bics	r2, r3
 8008e84:	2300      	movs	r3, #0
 8008e86:	6022      	str	r2, [r4, #0]
 8008e88:	930a      	str	r3, [sp, #40]	; 0x28
 8008e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8c:	0021      	movs	r1, r4
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	0038      	movs	r0, r7
 8008e92:	9b08      	ldr	r3, [sp, #32]
 8008e94:	aa13      	add	r2, sp, #76	; 0x4c
 8008e96:	f000 f9f3 	bl	8009280 <_printf_common>
 8008e9a:	1c43      	adds	r3, r0, #1
 8008e9c:	d000      	beq.n	8008ea0 <_printf_float+0xbc>
 8008e9e:	e09e      	b.n	8008fde <_printf_float+0x1fa>
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	4240      	negs	r0, r0
 8008ea4:	b015      	add	sp, #84	; 0x54
 8008ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea8:	3307      	adds	r3, #7
 8008eaa:	e7b6      	b.n	8008e1a <_printf_float+0x36>
 8008eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eae:	002b      	movs	r3, r5
 8008eb0:	0010      	movs	r0, r2
 8008eb2:	0029      	movs	r1, r5
 8008eb4:	f7f9 fe32 	bl	8002b1c <__aeabi_dcmpun>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d00a      	beq.n	8008ed2 <_printf_float+0xee>
 8008ebc:	2d00      	cmp	r5, #0
 8008ebe:	da03      	bge.n	8008ec8 <_printf_float+0xe4>
 8008ec0:	0023      	movs	r3, r4
 8008ec2:	222d      	movs	r2, #45	; 0x2d
 8008ec4:	3343      	adds	r3, #67	; 0x43
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	4d87      	ldr	r5, [pc, #540]	; (80090e8 <_printf_float+0x304>)
 8008eca:	2e47      	cmp	r6, #71	; 0x47
 8008ecc:	d9d5      	bls.n	8008e7a <_printf_float+0x96>
 8008ece:	4d87      	ldr	r5, [pc, #540]	; (80090ec <_printf_float+0x308>)
 8008ed0:	e7d3      	b.n	8008e7a <_printf_float+0x96>
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	0031      	movs	r1, r6
 8008ed6:	6863      	ldr	r3, [r4, #4]
 8008ed8:	4391      	bics	r1, r2
 8008eda:	910e      	str	r1, [sp, #56]	; 0x38
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	d147      	bne.n	8008f70 <_printf_float+0x18c>
 8008ee0:	3307      	adds	r3, #7
 8008ee2:	6063      	str	r3, [r4, #4]
 8008ee4:	2380      	movs	r3, #128	; 0x80
 8008ee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	4313      	orrs	r3, r2
 8008eec:	2200      	movs	r2, #0
 8008eee:	9206      	str	r2, [sp, #24]
 8008ef0:	aa12      	add	r2, sp, #72	; 0x48
 8008ef2:	9205      	str	r2, [sp, #20]
 8008ef4:	aa11      	add	r2, sp, #68	; 0x44
 8008ef6:	9203      	str	r2, [sp, #12]
 8008ef8:	2223      	movs	r2, #35	; 0x23
 8008efa:	a908      	add	r1, sp, #32
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	6863      	ldr	r3, [r4, #4]
 8008f02:	1852      	adds	r2, r2, r1
 8008f04:	9202      	str	r2, [sp, #8]
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	0038      	movs	r0, r7
 8008f0a:	002b      	movs	r3, r5
 8008f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f0e:	9604      	str	r6, [sp, #16]
 8008f10:	f7ff febe 	bl	8008c90 <__cvt>
 8008f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f16:	0005      	movs	r5, r0
 8008f18:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f1a:	2b47      	cmp	r3, #71	; 0x47
 8008f1c:	d108      	bne.n	8008f30 <_printf_float+0x14c>
 8008f1e:	1ccb      	adds	r3, r1, #3
 8008f20:	db02      	blt.n	8008f28 <_printf_float+0x144>
 8008f22:	6863      	ldr	r3, [r4, #4]
 8008f24:	4299      	cmp	r1, r3
 8008f26:	dd46      	ble.n	8008fb6 <_printf_float+0x1d2>
 8008f28:	0033      	movs	r3, r6
 8008f2a:	3b02      	subs	r3, #2
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	001e      	movs	r6, r3
 8008f30:	2e65      	cmp	r6, #101	; 0x65
 8008f32:	d824      	bhi.n	8008f7e <_printf_float+0x19a>
 8008f34:	0020      	movs	r0, r4
 8008f36:	0032      	movs	r2, r6
 8008f38:	3901      	subs	r1, #1
 8008f3a:	3050      	adds	r0, #80	; 0x50
 8008f3c:	9111      	str	r1, [sp, #68]	; 0x44
 8008f3e:	f7ff ff0a 	bl	8008d56 <__exponent>
 8008f42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f44:	900a      	str	r0, [sp, #40]	; 0x28
 8008f46:	1813      	adds	r3, r2, r0
 8008f48:	6123      	str	r3, [r4, #16]
 8008f4a:	2a01      	cmp	r2, #1
 8008f4c:	dc02      	bgt.n	8008f54 <_printf_float+0x170>
 8008f4e:	6822      	ldr	r2, [r4, #0]
 8008f50:	07d2      	lsls	r2, r2, #31
 8008f52:	d501      	bpl.n	8008f58 <_printf_float+0x174>
 8008f54:	3301      	adds	r3, #1
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	2323      	movs	r3, #35	; 0x23
 8008f5a:	aa08      	add	r2, sp, #32
 8008f5c:	189b      	adds	r3, r3, r2
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d100      	bne.n	8008f66 <_printf_float+0x182>
 8008f64:	e791      	b.n	8008e8a <_printf_float+0xa6>
 8008f66:	0023      	movs	r3, r4
 8008f68:	222d      	movs	r2, #45	; 0x2d
 8008f6a:	3343      	adds	r3, #67	; 0x43
 8008f6c:	701a      	strb	r2, [r3, #0]
 8008f6e:	e78c      	b.n	8008e8a <_printf_float+0xa6>
 8008f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f72:	2a47      	cmp	r2, #71	; 0x47
 8008f74:	d1b6      	bne.n	8008ee4 <_printf_float+0x100>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1b4      	bne.n	8008ee4 <_printf_float+0x100>
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	e7b1      	b.n	8008ee2 <_printf_float+0xfe>
 8008f7e:	2e66      	cmp	r6, #102	; 0x66
 8008f80:	d11b      	bne.n	8008fba <_printf_float+0x1d6>
 8008f82:	6863      	ldr	r3, [r4, #4]
 8008f84:	2900      	cmp	r1, #0
 8008f86:	dd0d      	ble.n	8008fa4 <_printf_float+0x1c0>
 8008f88:	6121      	str	r1, [r4, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d102      	bne.n	8008f94 <_printf_float+0x1b0>
 8008f8e:	6822      	ldr	r2, [r4, #0]
 8008f90:	07d2      	lsls	r2, r2, #31
 8008f92:	d502      	bpl.n	8008f9a <_printf_float+0x1b6>
 8008f94:	3301      	adds	r3, #1
 8008f96:	1859      	adds	r1, r3, r1
 8008f98:	6121      	str	r1, [r4, #16]
 8008f9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8008fa2:	e7d9      	b.n	8008f58 <_printf_float+0x174>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d103      	bne.n	8008fb0 <_printf_float+0x1cc>
 8008fa8:	2201      	movs	r2, #1
 8008faa:	6821      	ldr	r1, [r4, #0]
 8008fac:	4211      	tst	r1, r2
 8008fae:	d000      	beq.n	8008fb2 <_printf_float+0x1ce>
 8008fb0:	1c9a      	adds	r2, r3, #2
 8008fb2:	6122      	str	r2, [r4, #16]
 8008fb4:	e7f1      	b.n	8008f9a <_printf_float+0x1b6>
 8008fb6:	2367      	movs	r3, #103	; 0x67
 8008fb8:	001e      	movs	r6, r3
 8008fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	db06      	blt.n	8008fd0 <_printf_float+0x1ec>
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	6123      	str	r3, [r4, #16]
 8008fc6:	07d2      	lsls	r2, r2, #31
 8008fc8:	d5e7      	bpl.n	8008f9a <_printf_float+0x1b6>
 8008fca:	3301      	adds	r3, #1
 8008fcc:	6123      	str	r3, [r4, #16]
 8008fce:	e7e4      	b.n	8008f9a <_printf_float+0x1b6>
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dc01      	bgt.n	8008fda <_printf_float+0x1f6>
 8008fd6:	1849      	adds	r1, r1, r1
 8008fd8:	1ac9      	subs	r1, r1, r3
 8008fda:	1852      	adds	r2, r2, r1
 8008fdc:	e7e9      	b.n	8008fb2 <_printf_float+0x1ce>
 8008fde:	6822      	ldr	r2, [r4, #0]
 8008fe0:	0553      	lsls	r3, r2, #21
 8008fe2:	d408      	bmi.n	8008ff6 <_printf_float+0x212>
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	002a      	movs	r2, r5
 8008fe8:	0038      	movs	r0, r7
 8008fea:	9908      	ldr	r1, [sp, #32]
 8008fec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fee:	47a8      	blx	r5
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d129      	bne.n	8009048 <_printf_float+0x264>
 8008ff4:	e754      	b.n	8008ea0 <_printf_float+0xbc>
 8008ff6:	2e65      	cmp	r6, #101	; 0x65
 8008ff8:	d800      	bhi.n	8008ffc <_printf_float+0x218>
 8008ffa:	e0ec      	b.n	80091d6 <_printf_float+0x3f2>
 8008ffc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008ffe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009000:	2200      	movs	r2, #0
 8009002:	2300      	movs	r3, #0
 8009004:	f7f7 fa1e 	bl	8000444 <__aeabi_dcmpeq>
 8009008:	2800      	cmp	r0, #0
 800900a:	d034      	beq.n	8009076 <_printf_float+0x292>
 800900c:	2301      	movs	r3, #1
 800900e:	0038      	movs	r0, r7
 8009010:	4a37      	ldr	r2, [pc, #220]	; (80090f0 <_printf_float+0x30c>)
 8009012:	9908      	ldr	r1, [sp, #32]
 8009014:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009016:	47a8      	blx	r5
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d100      	bne.n	800901e <_printf_float+0x23a>
 800901c:	e740      	b.n	8008ea0 <_printf_float+0xbc>
 800901e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009020:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009022:	4293      	cmp	r3, r2
 8009024:	db02      	blt.n	800902c <_printf_float+0x248>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	07db      	lsls	r3, r3, #31
 800902a:	d50d      	bpl.n	8009048 <_printf_float+0x264>
 800902c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800902e:	0038      	movs	r0, r7
 8009030:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009034:	9908      	ldr	r1, [sp, #32]
 8009036:	47a8      	blx	r5
 8009038:	2500      	movs	r5, #0
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	d100      	bne.n	8009040 <_printf_float+0x25c>
 800903e:	e72f      	b.n	8008ea0 <_printf_float+0xbc>
 8009040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009042:	3b01      	subs	r3, #1
 8009044:	42ab      	cmp	r3, r5
 8009046:	dc0a      	bgt.n	800905e <_printf_float+0x27a>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	079b      	lsls	r3, r3, #30
 800904c:	d500      	bpl.n	8009050 <_printf_float+0x26c>
 800904e:	e114      	b.n	800927a <_printf_float+0x496>
 8009050:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009052:	68e0      	ldr	r0, [r4, #12]
 8009054:	4298      	cmp	r0, r3
 8009056:	db00      	blt.n	800905a <_printf_float+0x276>
 8009058:	e724      	b.n	8008ea4 <_printf_float+0xc0>
 800905a:	0018      	movs	r0, r3
 800905c:	e722      	b.n	8008ea4 <_printf_float+0xc0>
 800905e:	0022      	movs	r2, r4
 8009060:	2301      	movs	r3, #1
 8009062:	0038      	movs	r0, r7
 8009064:	9908      	ldr	r1, [sp, #32]
 8009066:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009068:	321a      	adds	r2, #26
 800906a:	47b0      	blx	r6
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d100      	bne.n	8009072 <_printf_float+0x28e>
 8009070:	e716      	b.n	8008ea0 <_printf_float+0xbc>
 8009072:	3501      	adds	r5, #1
 8009074:	e7e4      	b.n	8009040 <_printf_float+0x25c>
 8009076:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009078:	2b00      	cmp	r3, #0
 800907a:	dc3b      	bgt.n	80090f4 <_printf_float+0x310>
 800907c:	2301      	movs	r3, #1
 800907e:	0038      	movs	r0, r7
 8009080:	4a1b      	ldr	r2, [pc, #108]	; (80090f0 <_printf_float+0x30c>)
 8009082:	9908      	ldr	r1, [sp, #32]
 8009084:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009086:	47b0      	blx	r6
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d100      	bne.n	800908e <_printf_float+0x2aa>
 800908c:	e708      	b.n	8008ea0 <_printf_float+0xbc>
 800908e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009090:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009092:	4313      	orrs	r3, r2
 8009094:	d102      	bne.n	800909c <_printf_float+0x2b8>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	07db      	lsls	r3, r3, #31
 800909a:	d5d5      	bpl.n	8009048 <_printf_float+0x264>
 800909c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800909e:	0038      	movs	r0, r7
 80090a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090a2:	9908      	ldr	r1, [sp, #32]
 80090a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80090a6:	47b0      	blx	r6
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d100      	bne.n	80090ae <_printf_float+0x2ca>
 80090ac:	e6f8      	b.n	8008ea0 <_printf_float+0xbc>
 80090ae:	2300      	movs	r3, #0
 80090b0:	930a      	str	r3, [sp, #40]	; 0x28
 80090b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090b6:	425b      	negs	r3, r3
 80090b8:	4293      	cmp	r3, r2
 80090ba:	dc01      	bgt.n	80090c0 <_printf_float+0x2dc>
 80090bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090be:	e792      	b.n	8008fe6 <_printf_float+0x202>
 80090c0:	0022      	movs	r2, r4
 80090c2:	2301      	movs	r3, #1
 80090c4:	0038      	movs	r0, r7
 80090c6:	9908      	ldr	r1, [sp, #32]
 80090c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80090ca:	321a      	adds	r2, #26
 80090cc:	47b0      	blx	r6
 80090ce:	1c43      	adds	r3, r0, #1
 80090d0:	d100      	bne.n	80090d4 <_printf_float+0x2f0>
 80090d2:	e6e5      	b.n	8008ea0 <_printf_float+0xbc>
 80090d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d6:	3301      	adds	r3, #1
 80090d8:	e7ea      	b.n	80090b0 <_printf_float+0x2cc>
 80090da:	46c0      	nop			; (mov r8, r8)
 80090dc:	7fefffff 	.word	0x7fefffff
 80090e0:	0800e1a8 	.word	0x0800e1a8
 80090e4:	0800e1ac 	.word	0x0800e1ac
 80090e8:	0800e1b0 	.word	0x0800e1b0
 80090ec:	0800e1b4 	.word	0x0800e1b4
 80090f0:	0800e1b8 	.word	0x0800e1b8
 80090f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090f8:	920a      	str	r2, [sp, #40]	; 0x28
 80090fa:	429a      	cmp	r2, r3
 80090fc:	dd00      	ble.n	8009100 <_printf_float+0x31c>
 80090fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009102:	2b00      	cmp	r3, #0
 8009104:	dc3d      	bgt.n	8009182 <_printf_float+0x39e>
 8009106:	2300      	movs	r3, #0
 8009108:	930e      	str	r3, [sp, #56]	; 0x38
 800910a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910c:	43db      	mvns	r3, r3
 800910e:	17db      	asrs	r3, r3, #31
 8009110:	930f      	str	r3, [sp, #60]	; 0x3c
 8009112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009114:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009116:	930c      	str	r3, [sp, #48]	; 0x30
 8009118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800911a:	4013      	ands	r3, r2
 800911c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009122:	4293      	cmp	r3, r2
 8009124:	dc36      	bgt.n	8009194 <_printf_float+0x3b0>
 8009126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009128:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800912a:	4293      	cmp	r3, r2
 800912c:	db40      	blt.n	80091b0 <_printf_float+0x3cc>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	07db      	lsls	r3, r3, #31
 8009132:	d43d      	bmi.n	80091b0 <_printf_float+0x3cc>
 8009134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009138:	9911      	ldr	r1, [sp, #68]	; 0x44
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	1a52      	subs	r2, r2, r1
 800913e:	920a      	str	r2, [sp, #40]	; 0x28
 8009140:	429a      	cmp	r2, r3
 8009142:	dd00      	ble.n	8009146 <_printf_float+0x362>
 8009144:	930a      	str	r3, [sp, #40]	; 0x28
 8009146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009148:	2b00      	cmp	r3, #0
 800914a:	dc3a      	bgt.n	80091c2 <_printf_float+0x3de>
 800914c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800914e:	2500      	movs	r5, #0
 8009150:	43db      	mvns	r3, r3
 8009152:	17db      	asrs	r3, r3, #31
 8009154:	930b      	str	r3, [sp, #44]	; 0x2c
 8009156:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009158:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800915a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800915c:	1a9b      	subs	r3, r3, r2
 800915e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009160:	400a      	ands	r2, r1
 8009162:	1a9b      	subs	r3, r3, r2
 8009164:	42ab      	cmp	r3, r5
 8009166:	dc00      	bgt.n	800916a <_printf_float+0x386>
 8009168:	e76e      	b.n	8009048 <_printf_float+0x264>
 800916a:	0022      	movs	r2, r4
 800916c:	2301      	movs	r3, #1
 800916e:	0038      	movs	r0, r7
 8009170:	9908      	ldr	r1, [sp, #32]
 8009172:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009174:	321a      	adds	r2, #26
 8009176:	47b0      	blx	r6
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d100      	bne.n	800917e <_printf_float+0x39a>
 800917c:	e690      	b.n	8008ea0 <_printf_float+0xbc>
 800917e:	3501      	adds	r5, #1
 8009180:	e7e9      	b.n	8009156 <_printf_float+0x372>
 8009182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009184:	002a      	movs	r2, r5
 8009186:	0038      	movs	r0, r7
 8009188:	9908      	ldr	r1, [sp, #32]
 800918a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800918c:	47b0      	blx	r6
 800918e:	1c43      	adds	r3, r0, #1
 8009190:	d1b9      	bne.n	8009106 <_printf_float+0x322>
 8009192:	e685      	b.n	8008ea0 <_printf_float+0xbc>
 8009194:	0022      	movs	r2, r4
 8009196:	2301      	movs	r3, #1
 8009198:	0038      	movs	r0, r7
 800919a:	9908      	ldr	r1, [sp, #32]
 800919c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800919e:	321a      	adds	r2, #26
 80091a0:	47b0      	blx	r6
 80091a2:	1c43      	adds	r3, r0, #1
 80091a4:	d100      	bne.n	80091a8 <_printf_float+0x3c4>
 80091a6:	e67b      	b.n	8008ea0 <_printf_float+0xbc>
 80091a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091aa:	3301      	adds	r3, #1
 80091ac:	930e      	str	r3, [sp, #56]	; 0x38
 80091ae:	e7b0      	b.n	8009112 <_printf_float+0x32e>
 80091b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091b2:	0038      	movs	r0, r7
 80091b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091b6:	9908      	ldr	r1, [sp, #32]
 80091b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091ba:	47b0      	blx	r6
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d1b9      	bne.n	8009134 <_printf_float+0x350>
 80091c0:	e66e      	b.n	8008ea0 <_printf_float+0xbc>
 80091c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091c4:	0038      	movs	r0, r7
 80091c6:	18ea      	adds	r2, r5, r3
 80091c8:	9908      	ldr	r1, [sp, #32]
 80091ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80091ce:	47a8      	blx	r5
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d1bb      	bne.n	800914c <_printf_float+0x368>
 80091d4:	e664      	b.n	8008ea0 <_printf_float+0xbc>
 80091d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091d8:	2b01      	cmp	r3, #1
 80091da:	dc02      	bgt.n	80091e2 <_printf_float+0x3fe>
 80091dc:	2301      	movs	r3, #1
 80091de:	421a      	tst	r2, r3
 80091e0:	d038      	beq.n	8009254 <_printf_float+0x470>
 80091e2:	2301      	movs	r3, #1
 80091e4:	002a      	movs	r2, r5
 80091e6:	0038      	movs	r0, r7
 80091e8:	9908      	ldr	r1, [sp, #32]
 80091ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091ec:	47b0      	blx	r6
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	d100      	bne.n	80091f4 <_printf_float+0x410>
 80091f2:	e655      	b.n	8008ea0 <_printf_float+0xbc>
 80091f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091f6:	0038      	movs	r0, r7
 80091f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091fa:	9908      	ldr	r1, [sp, #32]
 80091fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091fe:	47b0      	blx	r6
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d100      	bne.n	8009206 <_printf_float+0x422>
 8009204:	e64c      	b.n	8008ea0 <_printf_float+0xbc>
 8009206:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009208:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800920a:	2200      	movs	r2, #0
 800920c:	2300      	movs	r3, #0
 800920e:	f7f7 f919 	bl	8000444 <__aeabi_dcmpeq>
 8009212:	2800      	cmp	r0, #0
 8009214:	d11c      	bne.n	8009250 <_printf_float+0x46c>
 8009216:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009218:	1c6a      	adds	r2, r5, #1
 800921a:	3b01      	subs	r3, #1
 800921c:	0038      	movs	r0, r7
 800921e:	9908      	ldr	r1, [sp, #32]
 8009220:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009222:	47a8      	blx	r5
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d10f      	bne.n	8009248 <_printf_float+0x464>
 8009228:	e63a      	b.n	8008ea0 <_printf_float+0xbc>
 800922a:	0022      	movs	r2, r4
 800922c:	2301      	movs	r3, #1
 800922e:	0038      	movs	r0, r7
 8009230:	9908      	ldr	r1, [sp, #32]
 8009232:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009234:	321a      	adds	r2, #26
 8009236:	47b0      	blx	r6
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d100      	bne.n	800923e <_printf_float+0x45a>
 800923c:	e630      	b.n	8008ea0 <_printf_float+0xbc>
 800923e:	3501      	adds	r5, #1
 8009240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009242:	3b01      	subs	r3, #1
 8009244:	42ab      	cmp	r3, r5
 8009246:	dcf0      	bgt.n	800922a <_printf_float+0x446>
 8009248:	0022      	movs	r2, r4
 800924a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924c:	3250      	adds	r2, #80	; 0x50
 800924e:	e6cb      	b.n	8008fe8 <_printf_float+0x204>
 8009250:	2500      	movs	r5, #0
 8009252:	e7f5      	b.n	8009240 <_printf_float+0x45c>
 8009254:	002a      	movs	r2, r5
 8009256:	e7e1      	b.n	800921c <_printf_float+0x438>
 8009258:	0022      	movs	r2, r4
 800925a:	2301      	movs	r3, #1
 800925c:	0038      	movs	r0, r7
 800925e:	9908      	ldr	r1, [sp, #32]
 8009260:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009262:	3219      	adds	r2, #25
 8009264:	47b0      	blx	r6
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	d100      	bne.n	800926c <_printf_float+0x488>
 800926a:	e619      	b.n	8008ea0 <_printf_float+0xbc>
 800926c:	3501      	adds	r5, #1
 800926e:	68e3      	ldr	r3, [r4, #12]
 8009270:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009272:	1a9b      	subs	r3, r3, r2
 8009274:	42ab      	cmp	r3, r5
 8009276:	dcef      	bgt.n	8009258 <_printf_float+0x474>
 8009278:	e6ea      	b.n	8009050 <_printf_float+0x26c>
 800927a:	2500      	movs	r5, #0
 800927c:	e7f7      	b.n	800926e <_printf_float+0x48a>
 800927e:	46c0      	nop			; (mov r8, r8)

08009280 <_printf_common>:
 8009280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009282:	0015      	movs	r5, r2
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	688a      	ldr	r2, [r1, #8]
 8009288:	690b      	ldr	r3, [r1, #16]
 800928a:	000c      	movs	r4, r1
 800928c:	9000      	str	r0, [sp, #0]
 800928e:	4293      	cmp	r3, r2
 8009290:	da00      	bge.n	8009294 <_printf_common+0x14>
 8009292:	0013      	movs	r3, r2
 8009294:	0022      	movs	r2, r4
 8009296:	602b      	str	r3, [r5, #0]
 8009298:	3243      	adds	r2, #67	; 0x43
 800929a:	7812      	ldrb	r2, [r2, #0]
 800929c:	2a00      	cmp	r2, #0
 800929e:	d001      	beq.n	80092a4 <_printf_common+0x24>
 80092a0:	3301      	adds	r3, #1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	069b      	lsls	r3, r3, #26
 80092a8:	d502      	bpl.n	80092b0 <_printf_common+0x30>
 80092aa:	682b      	ldr	r3, [r5, #0]
 80092ac:	3302      	adds	r3, #2
 80092ae:	602b      	str	r3, [r5, #0]
 80092b0:	6822      	ldr	r2, [r4, #0]
 80092b2:	2306      	movs	r3, #6
 80092b4:	0017      	movs	r7, r2
 80092b6:	401f      	ands	r7, r3
 80092b8:	421a      	tst	r2, r3
 80092ba:	d027      	beq.n	800930c <_printf_common+0x8c>
 80092bc:	0023      	movs	r3, r4
 80092be:	3343      	adds	r3, #67	; 0x43
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	1e5a      	subs	r2, r3, #1
 80092c4:	4193      	sbcs	r3, r2
 80092c6:	6822      	ldr	r2, [r4, #0]
 80092c8:	0692      	lsls	r2, r2, #26
 80092ca:	d430      	bmi.n	800932e <_printf_common+0xae>
 80092cc:	0022      	movs	r2, r4
 80092ce:	9901      	ldr	r1, [sp, #4]
 80092d0:	9800      	ldr	r0, [sp, #0]
 80092d2:	9e08      	ldr	r6, [sp, #32]
 80092d4:	3243      	adds	r2, #67	; 0x43
 80092d6:	47b0      	blx	r6
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d025      	beq.n	8009328 <_printf_common+0xa8>
 80092dc:	2306      	movs	r3, #6
 80092de:	6820      	ldr	r0, [r4, #0]
 80092e0:	682a      	ldr	r2, [r5, #0]
 80092e2:	68e1      	ldr	r1, [r4, #12]
 80092e4:	2500      	movs	r5, #0
 80092e6:	4003      	ands	r3, r0
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d103      	bne.n	80092f4 <_printf_common+0x74>
 80092ec:	1a8d      	subs	r5, r1, r2
 80092ee:	43eb      	mvns	r3, r5
 80092f0:	17db      	asrs	r3, r3, #31
 80092f2:	401d      	ands	r5, r3
 80092f4:	68a3      	ldr	r3, [r4, #8]
 80092f6:	6922      	ldr	r2, [r4, #16]
 80092f8:	4293      	cmp	r3, r2
 80092fa:	dd01      	ble.n	8009300 <_printf_common+0x80>
 80092fc:	1a9b      	subs	r3, r3, r2
 80092fe:	18ed      	adds	r5, r5, r3
 8009300:	2700      	movs	r7, #0
 8009302:	42bd      	cmp	r5, r7
 8009304:	d120      	bne.n	8009348 <_printf_common+0xc8>
 8009306:	2000      	movs	r0, #0
 8009308:	e010      	b.n	800932c <_printf_common+0xac>
 800930a:	3701      	adds	r7, #1
 800930c:	68e3      	ldr	r3, [r4, #12]
 800930e:	682a      	ldr	r2, [r5, #0]
 8009310:	1a9b      	subs	r3, r3, r2
 8009312:	42bb      	cmp	r3, r7
 8009314:	ddd2      	ble.n	80092bc <_printf_common+0x3c>
 8009316:	0022      	movs	r2, r4
 8009318:	2301      	movs	r3, #1
 800931a:	9901      	ldr	r1, [sp, #4]
 800931c:	9800      	ldr	r0, [sp, #0]
 800931e:	9e08      	ldr	r6, [sp, #32]
 8009320:	3219      	adds	r2, #25
 8009322:	47b0      	blx	r6
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d1f0      	bne.n	800930a <_printf_common+0x8a>
 8009328:	2001      	movs	r0, #1
 800932a:	4240      	negs	r0, r0
 800932c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800932e:	2030      	movs	r0, #48	; 0x30
 8009330:	18e1      	adds	r1, r4, r3
 8009332:	3143      	adds	r1, #67	; 0x43
 8009334:	7008      	strb	r0, [r1, #0]
 8009336:	0021      	movs	r1, r4
 8009338:	1c5a      	adds	r2, r3, #1
 800933a:	3145      	adds	r1, #69	; 0x45
 800933c:	7809      	ldrb	r1, [r1, #0]
 800933e:	18a2      	adds	r2, r4, r2
 8009340:	3243      	adds	r2, #67	; 0x43
 8009342:	3302      	adds	r3, #2
 8009344:	7011      	strb	r1, [r2, #0]
 8009346:	e7c1      	b.n	80092cc <_printf_common+0x4c>
 8009348:	0022      	movs	r2, r4
 800934a:	2301      	movs	r3, #1
 800934c:	9901      	ldr	r1, [sp, #4]
 800934e:	9800      	ldr	r0, [sp, #0]
 8009350:	9e08      	ldr	r6, [sp, #32]
 8009352:	321a      	adds	r2, #26
 8009354:	47b0      	blx	r6
 8009356:	1c43      	adds	r3, r0, #1
 8009358:	d0e6      	beq.n	8009328 <_printf_common+0xa8>
 800935a:	3701      	adds	r7, #1
 800935c:	e7d1      	b.n	8009302 <_printf_common+0x82>
	...

08009360 <_printf_i>:
 8009360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009362:	b08b      	sub	sp, #44	; 0x2c
 8009364:	9206      	str	r2, [sp, #24]
 8009366:	000a      	movs	r2, r1
 8009368:	3243      	adds	r2, #67	; 0x43
 800936a:	9307      	str	r3, [sp, #28]
 800936c:	9005      	str	r0, [sp, #20]
 800936e:	9204      	str	r2, [sp, #16]
 8009370:	7e0a      	ldrb	r2, [r1, #24]
 8009372:	000c      	movs	r4, r1
 8009374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009376:	2a78      	cmp	r2, #120	; 0x78
 8009378:	d806      	bhi.n	8009388 <_printf_i+0x28>
 800937a:	2a62      	cmp	r2, #98	; 0x62
 800937c:	d808      	bhi.n	8009390 <_printf_i+0x30>
 800937e:	2a00      	cmp	r2, #0
 8009380:	d100      	bne.n	8009384 <_printf_i+0x24>
 8009382:	e0c0      	b.n	8009506 <_printf_i+0x1a6>
 8009384:	2a58      	cmp	r2, #88	; 0x58
 8009386:	d052      	beq.n	800942e <_printf_i+0xce>
 8009388:	0026      	movs	r6, r4
 800938a:	3642      	adds	r6, #66	; 0x42
 800938c:	7032      	strb	r2, [r6, #0]
 800938e:	e022      	b.n	80093d6 <_printf_i+0x76>
 8009390:	0010      	movs	r0, r2
 8009392:	3863      	subs	r0, #99	; 0x63
 8009394:	2815      	cmp	r0, #21
 8009396:	d8f7      	bhi.n	8009388 <_printf_i+0x28>
 8009398:	f7f6 fec4 	bl	8000124 <__gnu_thumb1_case_shi>
 800939c:	001f0016 	.word	0x001f0016
 80093a0:	fff6fff6 	.word	0xfff6fff6
 80093a4:	fff6fff6 	.word	0xfff6fff6
 80093a8:	fff6001f 	.word	0xfff6001f
 80093ac:	fff6fff6 	.word	0xfff6fff6
 80093b0:	00a8fff6 	.word	0x00a8fff6
 80093b4:	009a0036 	.word	0x009a0036
 80093b8:	fff6fff6 	.word	0xfff6fff6
 80093bc:	fff600b9 	.word	0xfff600b9
 80093c0:	fff60036 	.word	0xfff60036
 80093c4:	009efff6 	.word	0x009efff6
 80093c8:	0026      	movs	r6, r4
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	3642      	adds	r6, #66	; 0x42
 80093ce:	1d11      	adds	r1, r2, #4
 80093d0:	6019      	str	r1, [r3, #0]
 80093d2:	6813      	ldr	r3, [r2, #0]
 80093d4:	7033      	strb	r3, [r6, #0]
 80093d6:	2301      	movs	r3, #1
 80093d8:	e0a7      	b.n	800952a <_printf_i+0x1ca>
 80093da:	6808      	ldr	r0, [r1, #0]
 80093dc:	6819      	ldr	r1, [r3, #0]
 80093de:	1d0a      	adds	r2, r1, #4
 80093e0:	0605      	lsls	r5, r0, #24
 80093e2:	d50b      	bpl.n	80093fc <_printf_i+0x9c>
 80093e4:	680d      	ldr	r5, [r1, #0]
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	2d00      	cmp	r5, #0
 80093ea:	da03      	bge.n	80093f4 <_printf_i+0x94>
 80093ec:	232d      	movs	r3, #45	; 0x2d
 80093ee:	9a04      	ldr	r2, [sp, #16]
 80093f0:	426d      	negs	r5, r5
 80093f2:	7013      	strb	r3, [r2, #0]
 80093f4:	4b61      	ldr	r3, [pc, #388]	; (800957c <_printf_i+0x21c>)
 80093f6:	270a      	movs	r7, #10
 80093f8:	9303      	str	r3, [sp, #12]
 80093fa:	e032      	b.n	8009462 <_printf_i+0x102>
 80093fc:	680d      	ldr	r5, [r1, #0]
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	0641      	lsls	r1, r0, #25
 8009402:	d5f1      	bpl.n	80093e8 <_printf_i+0x88>
 8009404:	b22d      	sxth	r5, r5
 8009406:	e7ef      	b.n	80093e8 <_printf_i+0x88>
 8009408:	680d      	ldr	r5, [r1, #0]
 800940a:	6819      	ldr	r1, [r3, #0]
 800940c:	1d08      	adds	r0, r1, #4
 800940e:	6018      	str	r0, [r3, #0]
 8009410:	062e      	lsls	r6, r5, #24
 8009412:	d501      	bpl.n	8009418 <_printf_i+0xb8>
 8009414:	680d      	ldr	r5, [r1, #0]
 8009416:	e003      	b.n	8009420 <_printf_i+0xc0>
 8009418:	066d      	lsls	r5, r5, #25
 800941a:	d5fb      	bpl.n	8009414 <_printf_i+0xb4>
 800941c:	680d      	ldr	r5, [r1, #0]
 800941e:	b2ad      	uxth	r5, r5
 8009420:	4b56      	ldr	r3, [pc, #344]	; (800957c <_printf_i+0x21c>)
 8009422:	270a      	movs	r7, #10
 8009424:	9303      	str	r3, [sp, #12]
 8009426:	2a6f      	cmp	r2, #111	; 0x6f
 8009428:	d117      	bne.n	800945a <_printf_i+0xfa>
 800942a:	2708      	movs	r7, #8
 800942c:	e015      	b.n	800945a <_printf_i+0xfa>
 800942e:	3145      	adds	r1, #69	; 0x45
 8009430:	700a      	strb	r2, [r1, #0]
 8009432:	4a52      	ldr	r2, [pc, #328]	; (800957c <_printf_i+0x21c>)
 8009434:	9203      	str	r2, [sp, #12]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	6821      	ldr	r1, [r4, #0]
 800943a:	ca20      	ldmia	r2!, {r5}
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	0608      	lsls	r0, r1, #24
 8009440:	d550      	bpl.n	80094e4 <_printf_i+0x184>
 8009442:	07cb      	lsls	r3, r1, #31
 8009444:	d502      	bpl.n	800944c <_printf_i+0xec>
 8009446:	2320      	movs	r3, #32
 8009448:	4319      	orrs	r1, r3
 800944a:	6021      	str	r1, [r4, #0]
 800944c:	2710      	movs	r7, #16
 800944e:	2d00      	cmp	r5, #0
 8009450:	d103      	bne.n	800945a <_printf_i+0xfa>
 8009452:	2320      	movs	r3, #32
 8009454:	6822      	ldr	r2, [r4, #0]
 8009456:	439a      	bics	r2, r3
 8009458:	6022      	str	r2, [r4, #0]
 800945a:	0023      	movs	r3, r4
 800945c:	2200      	movs	r2, #0
 800945e:	3343      	adds	r3, #67	; 0x43
 8009460:	701a      	strb	r2, [r3, #0]
 8009462:	6863      	ldr	r3, [r4, #4]
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	db03      	blt.n	8009472 <_printf_i+0x112>
 800946a:	2204      	movs	r2, #4
 800946c:	6821      	ldr	r1, [r4, #0]
 800946e:	4391      	bics	r1, r2
 8009470:	6021      	str	r1, [r4, #0]
 8009472:	2d00      	cmp	r5, #0
 8009474:	d102      	bne.n	800947c <_printf_i+0x11c>
 8009476:	9e04      	ldr	r6, [sp, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00c      	beq.n	8009496 <_printf_i+0x136>
 800947c:	9e04      	ldr	r6, [sp, #16]
 800947e:	0028      	movs	r0, r5
 8009480:	0039      	movs	r1, r7
 8009482:	f7f6 fedf 	bl	8000244 <__aeabi_uidivmod>
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	3e01      	subs	r6, #1
 800948a:	5c5b      	ldrb	r3, [r3, r1]
 800948c:	7033      	strb	r3, [r6, #0]
 800948e:	002b      	movs	r3, r5
 8009490:	0005      	movs	r5, r0
 8009492:	429f      	cmp	r7, r3
 8009494:	d9f3      	bls.n	800947e <_printf_i+0x11e>
 8009496:	2f08      	cmp	r7, #8
 8009498:	d109      	bne.n	80094ae <_printf_i+0x14e>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	07db      	lsls	r3, r3, #31
 800949e:	d506      	bpl.n	80094ae <_printf_i+0x14e>
 80094a0:	6863      	ldr	r3, [r4, #4]
 80094a2:	6922      	ldr	r2, [r4, #16]
 80094a4:	4293      	cmp	r3, r2
 80094a6:	dc02      	bgt.n	80094ae <_printf_i+0x14e>
 80094a8:	2330      	movs	r3, #48	; 0x30
 80094aa:	3e01      	subs	r6, #1
 80094ac:	7033      	strb	r3, [r6, #0]
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	1b9b      	subs	r3, r3, r6
 80094b2:	6123      	str	r3, [r4, #16]
 80094b4:	9b07      	ldr	r3, [sp, #28]
 80094b6:	0021      	movs	r1, r4
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	9805      	ldr	r0, [sp, #20]
 80094bc:	9b06      	ldr	r3, [sp, #24]
 80094be:	aa09      	add	r2, sp, #36	; 0x24
 80094c0:	f7ff fede 	bl	8009280 <_printf_common>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d135      	bne.n	8009534 <_printf_i+0x1d4>
 80094c8:	2001      	movs	r0, #1
 80094ca:	4240      	negs	r0, r0
 80094cc:	b00b      	add	sp, #44	; 0x2c
 80094ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d0:	2220      	movs	r2, #32
 80094d2:	6809      	ldr	r1, [r1, #0]
 80094d4:	430a      	orrs	r2, r1
 80094d6:	6022      	str	r2, [r4, #0]
 80094d8:	0022      	movs	r2, r4
 80094da:	2178      	movs	r1, #120	; 0x78
 80094dc:	3245      	adds	r2, #69	; 0x45
 80094de:	7011      	strb	r1, [r2, #0]
 80094e0:	4a27      	ldr	r2, [pc, #156]	; (8009580 <_printf_i+0x220>)
 80094e2:	e7a7      	b.n	8009434 <_printf_i+0xd4>
 80094e4:	0648      	lsls	r0, r1, #25
 80094e6:	d5ac      	bpl.n	8009442 <_printf_i+0xe2>
 80094e8:	b2ad      	uxth	r5, r5
 80094ea:	e7aa      	b.n	8009442 <_printf_i+0xe2>
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	680d      	ldr	r5, [r1, #0]
 80094f0:	1d10      	adds	r0, r2, #4
 80094f2:	6949      	ldr	r1, [r1, #20]
 80094f4:	6018      	str	r0, [r3, #0]
 80094f6:	6813      	ldr	r3, [r2, #0]
 80094f8:	062e      	lsls	r6, r5, #24
 80094fa:	d501      	bpl.n	8009500 <_printf_i+0x1a0>
 80094fc:	6019      	str	r1, [r3, #0]
 80094fe:	e002      	b.n	8009506 <_printf_i+0x1a6>
 8009500:	066d      	lsls	r5, r5, #25
 8009502:	d5fb      	bpl.n	80094fc <_printf_i+0x19c>
 8009504:	8019      	strh	r1, [r3, #0]
 8009506:	2300      	movs	r3, #0
 8009508:	9e04      	ldr	r6, [sp, #16]
 800950a:	6123      	str	r3, [r4, #16]
 800950c:	e7d2      	b.n	80094b4 <_printf_i+0x154>
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	1d11      	adds	r1, r2, #4
 8009512:	6019      	str	r1, [r3, #0]
 8009514:	6816      	ldr	r6, [r2, #0]
 8009516:	2100      	movs	r1, #0
 8009518:	0030      	movs	r0, r6
 800951a:	6862      	ldr	r2, [r4, #4]
 800951c:	f000 ff0a 	bl	800a334 <memchr>
 8009520:	2800      	cmp	r0, #0
 8009522:	d001      	beq.n	8009528 <_printf_i+0x1c8>
 8009524:	1b80      	subs	r0, r0, r6
 8009526:	6060      	str	r0, [r4, #4]
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	6123      	str	r3, [r4, #16]
 800952c:	2300      	movs	r3, #0
 800952e:	9a04      	ldr	r2, [sp, #16]
 8009530:	7013      	strb	r3, [r2, #0]
 8009532:	e7bf      	b.n	80094b4 <_printf_i+0x154>
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	0032      	movs	r2, r6
 8009538:	9906      	ldr	r1, [sp, #24]
 800953a:	9805      	ldr	r0, [sp, #20]
 800953c:	9d07      	ldr	r5, [sp, #28]
 800953e:	47a8      	blx	r5
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d0c1      	beq.n	80094c8 <_printf_i+0x168>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	079b      	lsls	r3, r3, #30
 8009548:	d415      	bmi.n	8009576 <_printf_i+0x216>
 800954a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954c:	68e0      	ldr	r0, [r4, #12]
 800954e:	4298      	cmp	r0, r3
 8009550:	dabc      	bge.n	80094cc <_printf_i+0x16c>
 8009552:	0018      	movs	r0, r3
 8009554:	e7ba      	b.n	80094cc <_printf_i+0x16c>
 8009556:	0022      	movs	r2, r4
 8009558:	2301      	movs	r3, #1
 800955a:	9906      	ldr	r1, [sp, #24]
 800955c:	9805      	ldr	r0, [sp, #20]
 800955e:	9e07      	ldr	r6, [sp, #28]
 8009560:	3219      	adds	r2, #25
 8009562:	47b0      	blx	r6
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d0af      	beq.n	80094c8 <_printf_i+0x168>
 8009568:	3501      	adds	r5, #1
 800956a:	68e3      	ldr	r3, [r4, #12]
 800956c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800956e:	1a9b      	subs	r3, r3, r2
 8009570:	42ab      	cmp	r3, r5
 8009572:	dcf0      	bgt.n	8009556 <_printf_i+0x1f6>
 8009574:	e7e9      	b.n	800954a <_printf_i+0x1ea>
 8009576:	2500      	movs	r5, #0
 8009578:	e7f7      	b.n	800956a <_printf_i+0x20a>
 800957a:	46c0      	nop			; (mov r8, r8)
 800957c:	0800e1ba 	.word	0x0800e1ba
 8009580:	0800e1cb 	.word	0x0800e1cb

08009584 <siprintf>:
 8009584:	b40e      	push	{r1, r2, r3}
 8009586:	b500      	push	{lr}
 8009588:	490b      	ldr	r1, [pc, #44]	; (80095b8 <siprintf+0x34>)
 800958a:	b09c      	sub	sp, #112	; 0x70
 800958c:	ab1d      	add	r3, sp, #116	; 0x74
 800958e:	9002      	str	r0, [sp, #8]
 8009590:	9006      	str	r0, [sp, #24]
 8009592:	9107      	str	r1, [sp, #28]
 8009594:	9104      	str	r1, [sp, #16]
 8009596:	4809      	ldr	r0, [pc, #36]	; (80095bc <siprintf+0x38>)
 8009598:	4909      	ldr	r1, [pc, #36]	; (80095c0 <siprintf+0x3c>)
 800959a:	cb04      	ldmia	r3!, {r2}
 800959c:	9105      	str	r1, [sp, #20]
 800959e:	6800      	ldr	r0, [r0, #0]
 80095a0:	a902      	add	r1, sp, #8
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	f001 fb90 	bl	800acc8 <_svfiprintf_r>
 80095a8:	2300      	movs	r3, #0
 80095aa:	9a02      	ldr	r2, [sp, #8]
 80095ac:	7013      	strb	r3, [r2, #0]
 80095ae:	b01c      	add	sp, #112	; 0x70
 80095b0:	bc08      	pop	{r3}
 80095b2:	b003      	add	sp, #12
 80095b4:	4718      	bx	r3
 80095b6:	46c0      	nop			; (mov r8, r8)
 80095b8:	7fffffff 	.word	0x7fffffff
 80095bc:	2000000c 	.word	0x2000000c
 80095c0:	ffff0208 	.word	0xffff0208

080095c4 <quorem>:
 80095c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c6:	0006      	movs	r6, r0
 80095c8:	690d      	ldr	r5, [r1, #16]
 80095ca:	6933      	ldr	r3, [r6, #16]
 80095cc:	b087      	sub	sp, #28
 80095ce:	2000      	movs	r0, #0
 80095d0:	9102      	str	r1, [sp, #8]
 80095d2:	42ab      	cmp	r3, r5
 80095d4:	db6b      	blt.n	80096ae <quorem+0xea>
 80095d6:	000b      	movs	r3, r1
 80095d8:	3d01      	subs	r5, #1
 80095da:	00ac      	lsls	r4, r5, #2
 80095dc:	3314      	adds	r3, #20
 80095de:	9305      	str	r3, [sp, #20]
 80095e0:	191b      	adds	r3, r3, r4
 80095e2:	9303      	str	r3, [sp, #12]
 80095e4:	0033      	movs	r3, r6
 80095e6:	3314      	adds	r3, #20
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	191c      	adds	r4, r3, r4
 80095ec:	9b03      	ldr	r3, [sp, #12]
 80095ee:	6827      	ldr	r7, [r4, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	0038      	movs	r0, r7
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	3301      	adds	r3, #1
 80095f8:	0019      	movs	r1, r3
 80095fa:	9304      	str	r3, [sp, #16]
 80095fc:	f7f6 fd9c 	bl	8000138 <__udivsi3>
 8009600:	9b04      	ldr	r3, [sp, #16]
 8009602:	9000      	str	r0, [sp, #0]
 8009604:	429f      	cmp	r7, r3
 8009606:	d329      	bcc.n	800965c <quorem+0x98>
 8009608:	2300      	movs	r3, #0
 800960a:	469c      	mov	ip, r3
 800960c:	9801      	ldr	r0, [sp, #4]
 800960e:	9f05      	ldr	r7, [sp, #20]
 8009610:	9304      	str	r3, [sp, #16]
 8009612:	cf08      	ldmia	r7!, {r3}
 8009614:	9a00      	ldr	r2, [sp, #0]
 8009616:	b299      	uxth	r1, r3
 8009618:	4351      	muls	r1, r2
 800961a:	0c1b      	lsrs	r3, r3, #16
 800961c:	4353      	muls	r3, r2
 800961e:	4461      	add	r1, ip
 8009620:	0c0a      	lsrs	r2, r1, #16
 8009622:	189b      	adds	r3, r3, r2
 8009624:	0c1a      	lsrs	r2, r3, #16
 8009626:	9305      	str	r3, [sp, #20]
 8009628:	6803      	ldr	r3, [r0, #0]
 800962a:	4694      	mov	ip, r2
 800962c:	b29a      	uxth	r2, r3
 800962e:	9b04      	ldr	r3, [sp, #16]
 8009630:	b289      	uxth	r1, r1
 8009632:	18d2      	adds	r2, r2, r3
 8009634:	6803      	ldr	r3, [r0, #0]
 8009636:	1a52      	subs	r2, r2, r1
 8009638:	0c19      	lsrs	r1, r3, #16
 800963a:	466b      	mov	r3, sp
 800963c:	8a9b      	ldrh	r3, [r3, #20]
 800963e:	1acb      	subs	r3, r1, r3
 8009640:	1411      	asrs	r1, r2, #16
 8009642:	185b      	adds	r3, r3, r1
 8009644:	1419      	asrs	r1, r3, #16
 8009646:	b292      	uxth	r2, r2
 8009648:	041b      	lsls	r3, r3, #16
 800964a:	431a      	orrs	r2, r3
 800964c:	9b03      	ldr	r3, [sp, #12]
 800964e:	9104      	str	r1, [sp, #16]
 8009650:	c004      	stmia	r0!, {r2}
 8009652:	42bb      	cmp	r3, r7
 8009654:	d2dd      	bcs.n	8009612 <quorem+0x4e>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d02e      	beq.n	80096ba <quorem+0xf6>
 800965c:	0030      	movs	r0, r6
 800965e:	9902      	ldr	r1, [sp, #8]
 8009660:	f001 f902 	bl	800a868 <__mcmp>
 8009664:	2800      	cmp	r0, #0
 8009666:	db21      	blt.n	80096ac <quorem+0xe8>
 8009668:	0030      	movs	r0, r6
 800966a:	2400      	movs	r4, #0
 800966c:	9b00      	ldr	r3, [sp, #0]
 800966e:	9902      	ldr	r1, [sp, #8]
 8009670:	3301      	adds	r3, #1
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	3014      	adds	r0, #20
 8009676:	3114      	adds	r1, #20
 8009678:	6802      	ldr	r2, [r0, #0]
 800967a:	c908      	ldmia	r1!, {r3}
 800967c:	b292      	uxth	r2, r2
 800967e:	1914      	adds	r4, r2, r4
 8009680:	b29a      	uxth	r2, r3
 8009682:	1aa2      	subs	r2, r4, r2
 8009684:	6804      	ldr	r4, [r0, #0]
 8009686:	0c1b      	lsrs	r3, r3, #16
 8009688:	0c24      	lsrs	r4, r4, #16
 800968a:	1ae3      	subs	r3, r4, r3
 800968c:	1414      	asrs	r4, r2, #16
 800968e:	191b      	adds	r3, r3, r4
 8009690:	141c      	asrs	r4, r3, #16
 8009692:	b292      	uxth	r2, r2
 8009694:	041b      	lsls	r3, r3, #16
 8009696:	4313      	orrs	r3, r2
 8009698:	c008      	stmia	r0!, {r3}
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	428b      	cmp	r3, r1
 800969e:	d2eb      	bcs.n	8009678 <quorem+0xb4>
 80096a0:	9a01      	ldr	r2, [sp, #4]
 80096a2:	00ab      	lsls	r3, r5, #2
 80096a4:	18d3      	adds	r3, r2, r3
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	2a00      	cmp	r2, #0
 80096aa:	d010      	beq.n	80096ce <quorem+0x10a>
 80096ac:	9800      	ldr	r0, [sp, #0]
 80096ae:	b007      	add	sp, #28
 80096b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d104      	bne.n	80096c2 <quorem+0xfe>
 80096b8:	3d01      	subs	r5, #1
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	3c04      	subs	r4, #4
 80096be:	42a3      	cmp	r3, r4
 80096c0:	d3f7      	bcc.n	80096b2 <quorem+0xee>
 80096c2:	6135      	str	r5, [r6, #16]
 80096c4:	e7ca      	b.n	800965c <quorem+0x98>
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	2a00      	cmp	r2, #0
 80096ca:	d104      	bne.n	80096d6 <quorem+0x112>
 80096cc:	3d01      	subs	r5, #1
 80096ce:	9a01      	ldr	r2, [sp, #4]
 80096d0:	3b04      	subs	r3, #4
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d3f7      	bcc.n	80096c6 <quorem+0x102>
 80096d6:	6135      	str	r5, [r6, #16]
 80096d8:	e7e8      	b.n	80096ac <quorem+0xe8>
	...

080096dc <_dtoa_r>:
 80096dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096de:	b09d      	sub	sp, #116	; 0x74
 80096e0:	9202      	str	r2, [sp, #8]
 80096e2:	9303      	str	r3, [sp, #12]
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	9c03      	ldr	r4, [sp, #12]
 80096e8:	930a      	str	r3, [sp, #40]	; 0x28
 80096ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80096ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80096ee:	0007      	movs	r7, r0
 80096f0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80096f2:	2c00      	cmp	r4, #0
 80096f4:	d10e      	bne.n	8009714 <_dtoa_r+0x38>
 80096f6:	2010      	movs	r0, #16
 80096f8:	f000 fe12 	bl	800a320 <malloc>
 80096fc:	1e02      	subs	r2, r0, #0
 80096fe:	6278      	str	r0, [r7, #36]	; 0x24
 8009700:	d104      	bne.n	800970c <_dtoa_r+0x30>
 8009702:	21ea      	movs	r1, #234	; 0xea
 8009704:	4bc0      	ldr	r3, [pc, #768]	; (8009a08 <_dtoa_r+0x32c>)
 8009706:	48c1      	ldr	r0, [pc, #772]	; (8009a0c <_dtoa_r+0x330>)
 8009708:	f001 fbf0 	bl	800aeec <__assert_func>
 800970c:	6044      	str	r4, [r0, #4]
 800970e:	6084      	str	r4, [r0, #8]
 8009710:	6004      	str	r4, [r0, #0]
 8009712:	60c4      	str	r4, [r0, #12]
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	6819      	ldr	r1, [r3, #0]
 8009718:	2900      	cmp	r1, #0
 800971a:	d00a      	beq.n	8009732 <_dtoa_r+0x56>
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	2301      	movs	r3, #1
 8009720:	4093      	lsls	r3, r2
 8009722:	604a      	str	r2, [r1, #4]
 8009724:	608b      	str	r3, [r1, #8]
 8009726:	0038      	movs	r0, r7
 8009728:	f000 fe5c 	bl	800a3e4 <_Bfree>
 800972c:	2200      	movs	r2, #0
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	9b03      	ldr	r3, [sp, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	da21      	bge.n	800977c <_dtoa_r+0xa0>
 8009738:	2301      	movs	r3, #1
 800973a:	602b      	str	r3, [r5, #0]
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	085b      	lsrs	r3, r3, #1
 8009742:	930b      	str	r3, [sp, #44]	; 0x2c
 8009744:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009746:	4bb2      	ldr	r3, [pc, #712]	; (8009a10 <_dtoa_r+0x334>)
 8009748:	002a      	movs	r2, r5
 800974a:	9318      	str	r3, [sp, #96]	; 0x60
 800974c:	401a      	ands	r2, r3
 800974e:	429a      	cmp	r2, r3
 8009750:	d117      	bne.n	8009782 <_dtoa_r+0xa6>
 8009752:	4bb0      	ldr	r3, [pc, #704]	; (8009a14 <_dtoa_r+0x338>)
 8009754:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009756:	0328      	lsls	r0, r5, #12
 8009758:	6013      	str	r3, [r2, #0]
 800975a:	9b02      	ldr	r3, [sp, #8]
 800975c:	0b00      	lsrs	r0, r0, #12
 800975e:	4318      	orrs	r0, r3
 8009760:	d101      	bne.n	8009766 <_dtoa_r+0x8a>
 8009762:	f000 fdc3 	bl	800a2ec <_dtoa_r+0xc10>
 8009766:	48ac      	ldr	r0, [pc, #688]	; (8009a18 <_dtoa_r+0x33c>)
 8009768:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800976a:	9005      	str	r0, [sp, #20]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <_dtoa_r+0x9a>
 8009770:	4baa      	ldr	r3, [pc, #680]	; (8009a1c <_dtoa_r+0x340>)
 8009772:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009774:	6013      	str	r3, [r2, #0]
 8009776:	9805      	ldr	r0, [sp, #20]
 8009778:	b01d      	add	sp, #116	; 0x74
 800977a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977c:	2300      	movs	r3, #0
 800977e:	602b      	str	r3, [r5, #0]
 8009780:	e7e0      	b.n	8009744 <_dtoa_r+0x68>
 8009782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009784:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009786:	9312      	str	r3, [sp, #72]	; 0x48
 8009788:	9413      	str	r4, [sp, #76]	; 0x4c
 800978a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800978c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800978e:	2200      	movs	r2, #0
 8009790:	2300      	movs	r3, #0
 8009792:	f7f6 fe57 	bl	8000444 <__aeabi_dcmpeq>
 8009796:	1e04      	subs	r4, r0, #0
 8009798:	d00b      	beq.n	80097b2 <_dtoa_r+0xd6>
 800979a:	2301      	movs	r3, #1
 800979c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	4b9f      	ldr	r3, [pc, #636]	; (8009a20 <_dtoa_r+0x344>)
 80097a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80097a4:	9305      	str	r3, [sp, #20]
 80097a6:	2a00      	cmp	r2, #0
 80097a8:	d0e5      	beq.n	8009776 <_dtoa_r+0x9a>
 80097aa:	4a9e      	ldr	r2, [pc, #632]	; (8009a24 <_dtoa_r+0x348>)
 80097ac:	9926      	ldr	r1, [sp, #152]	; 0x98
 80097ae:	600a      	str	r2, [r1, #0]
 80097b0:	e7e1      	b.n	8009776 <_dtoa_r+0x9a>
 80097b2:	ab1a      	add	r3, sp, #104	; 0x68
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	ab1b      	add	r3, sp, #108	; 0x6c
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	0038      	movs	r0, r7
 80097bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097c0:	f001 f906 	bl	800a9d0 <__d2b>
 80097c4:	006e      	lsls	r6, r5, #1
 80097c6:	9004      	str	r0, [sp, #16]
 80097c8:	0d76      	lsrs	r6, r6, #21
 80097ca:	d100      	bne.n	80097ce <_dtoa_r+0xf2>
 80097cc:	e07c      	b.n	80098c8 <_dtoa_r+0x1ec>
 80097ce:	9812      	ldr	r0, [sp, #72]	; 0x48
 80097d0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80097d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097d4:	4a94      	ldr	r2, [pc, #592]	; (8009a28 <_dtoa_r+0x34c>)
 80097d6:	031b      	lsls	r3, r3, #12
 80097d8:	0b1b      	lsrs	r3, r3, #12
 80097da:	431a      	orrs	r2, r3
 80097dc:	0011      	movs	r1, r2
 80097de:	4b93      	ldr	r3, [pc, #588]	; (8009a2c <_dtoa_r+0x350>)
 80097e0:	9416      	str	r4, [sp, #88]	; 0x58
 80097e2:	18f6      	adds	r6, r6, r3
 80097e4:	2200      	movs	r2, #0
 80097e6:	4b92      	ldr	r3, [pc, #584]	; (8009a30 <_dtoa_r+0x354>)
 80097e8:	f7f8 fe06 	bl	80023f8 <__aeabi_dsub>
 80097ec:	4a91      	ldr	r2, [pc, #580]	; (8009a34 <_dtoa_r+0x358>)
 80097ee:	4b92      	ldr	r3, [pc, #584]	; (8009a38 <_dtoa_r+0x35c>)
 80097f0:	f7f8 fb96 	bl	8001f20 <__aeabi_dmul>
 80097f4:	4a91      	ldr	r2, [pc, #580]	; (8009a3c <_dtoa_r+0x360>)
 80097f6:	4b92      	ldr	r3, [pc, #584]	; (8009a40 <_dtoa_r+0x364>)
 80097f8:	f7f7 fc22 	bl	8001040 <__aeabi_dadd>
 80097fc:	0004      	movs	r4, r0
 80097fe:	0030      	movs	r0, r6
 8009800:	000d      	movs	r5, r1
 8009802:	f7f9 f9df 	bl	8002bc4 <__aeabi_i2d>
 8009806:	4a8f      	ldr	r2, [pc, #572]	; (8009a44 <_dtoa_r+0x368>)
 8009808:	4b8f      	ldr	r3, [pc, #572]	; (8009a48 <_dtoa_r+0x36c>)
 800980a:	f7f8 fb89 	bl	8001f20 <__aeabi_dmul>
 800980e:	0002      	movs	r2, r0
 8009810:	000b      	movs	r3, r1
 8009812:	0020      	movs	r0, r4
 8009814:	0029      	movs	r1, r5
 8009816:	f7f7 fc13 	bl	8001040 <__aeabi_dadd>
 800981a:	0004      	movs	r4, r0
 800981c:	000d      	movs	r5, r1
 800981e:	f7f9 f99b 	bl	8002b58 <__aeabi_d2iz>
 8009822:	2200      	movs	r2, #0
 8009824:	9002      	str	r0, [sp, #8]
 8009826:	2300      	movs	r3, #0
 8009828:	0020      	movs	r0, r4
 800982a:	0029      	movs	r1, r5
 800982c:	f7f6 fe10 	bl	8000450 <__aeabi_dcmplt>
 8009830:	2800      	cmp	r0, #0
 8009832:	d00b      	beq.n	800984c <_dtoa_r+0x170>
 8009834:	9802      	ldr	r0, [sp, #8]
 8009836:	f7f9 f9c5 	bl	8002bc4 <__aeabi_i2d>
 800983a:	002b      	movs	r3, r5
 800983c:	0022      	movs	r2, r4
 800983e:	f7f6 fe01 	bl	8000444 <__aeabi_dcmpeq>
 8009842:	4243      	negs	r3, r0
 8009844:	4158      	adcs	r0, r3
 8009846:	9b02      	ldr	r3, [sp, #8]
 8009848:	1a1b      	subs	r3, r3, r0
 800984a:	9302      	str	r3, [sp, #8]
 800984c:	2301      	movs	r3, #1
 800984e:	9315      	str	r3, [sp, #84]	; 0x54
 8009850:	9b02      	ldr	r3, [sp, #8]
 8009852:	2b16      	cmp	r3, #22
 8009854:	d80f      	bhi.n	8009876 <_dtoa_r+0x19a>
 8009856:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009858:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800985a:	00da      	lsls	r2, r3, #3
 800985c:	4b7b      	ldr	r3, [pc, #492]	; (8009a4c <_dtoa_r+0x370>)
 800985e:	189b      	adds	r3, r3, r2
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	f7f6 fdf4 	bl	8000450 <__aeabi_dcmplt>
 8009868:	2800      	cmp	r0, #0
 800986a:	d049      	beq.n	8009900 <_dtoa_r+0x224>
 800986c:	9b02      	ldr	r3, [sp, #8]
 800986e:	3b01      	subs	r3, #1
 8009870:	9302      	str	r3, [sp, #8]
 8009872:	2300      	movs	r3, #0
 8009874:	9315      	str	r3, [sp, #84]	; 0x54
 8009876:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009878:	1b9e      	subs	r6, r3, r6
 800987a:	2300      	movs	r3, #0
 800987c:	9308      	str	r3, [sp, #32]
 800987e:	0033      	movs	r3, r6
 8009880:	3b01      	subs	r3, #1
 8009882:	930d      	str	r3, [sp, #52]	; 0x34
 8009884:	d504      	bpl.n	8009890 <_dtoa_r+0x1b4>
 8009886:	2301      	movs	r3, #1
 8009888:	1b9b      	subs	r3, r3, r6
 800988a:	9308      	str	r3, [sp, #32]
 800988c:	2300      	movs	r3, #0
 800988e:	930d      	str	r3, [sp, #52]	; 0x34
 8009890:	9b02      	ldr	r3, [sp, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	db36      	blt.n	8009904 <_dtoa_r+0x228>
 8009896:	9a02      	ldr	r2, [sp, #8]
 8009898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800989a:	4694      	mov	ip, r2
 800989c:	4463      	add	r3, ip
 800989e:	930d      	str	r3, [sp, #52]	; 0x34
 80098a0:	2300      	movs	r3, #0
 80098a2:	9214      	str	r2, [sp, #80]	; 0x50
 80098a4:	930e      	str	r3, [sp, #56]	; 0x38
 80098a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098a8:	2401      	movs	r4, #1
 80098aa:	2b09      	cmp	r3, #9
 80098ac:	d862      	bhi.n	8009974 <_dtoa_r+0x298>
 80098ae:	2b05      	cmp	r3, #5
 80098b0:	dd02      	ble.n	80098b8 <_dtoa_r+0x1dc>
 80098b2:	2400      	movs	r4, #0
 80098b4:	3b04      	subs	r3, #4
 80098b6:	9322      	str	r3, [sp, #136]	; 0x88
 80098b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098ba:	1e98      	subs	r0, r3, #2
 80098bc:	2803      	cmp	r0, #3
 80098be:	d862      	bhi.n	8009986 <_dtoa_r+0x2aa>
 80098c0:	f7f6 fc26 	bl	8000110 <__gnu_thumb1_case_uqi>
 80098c4:	56343629 	.word	0x56343629
 80098c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80098ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80098cc:	189e      	adds	r6, r3, r2
 80098ce:	4b60      	ldr	r3, [pc, #384]	; (8009a50 <_dtoa_r+0x374>)
 80098d0:	18f2      	adds	r2, r6, r3
 80098d2:	2a20      	cmp	r2, #32
 80098d4:	dd0f      	ble.n	80098f6 <_dtoa_r+0x21a>
 80098d6:	2340      	movs	r3, #64	; 0x40
 80098d8:	1a9b      	subs	r3, r3, r2
 80098da:	409d      	lsls	r5, r3
 80098dc:	4b5d      	ldr	r3, [pc, #372]	; (8009a54 <_dtoa_r+0x378>)
 80098de:	9802      	ldr	r0, [sp, #8]
 80098e0:	18f3      	adds	r3, r6, r3
 80098e2:	40d8      	lsrs	r0, r3
 80098e4:	4328      	orrs	r0, r5
 80098e6:	f7f9 f99d 	bl	8002c24 <__aeabi_ui2d>
 80098ea:	2301      	movs	r3, #1
 80098ec:	4c5a      	ldr	r4, [pc, #360]	; (8009a58 <_dtoa_r+0x37c>)
 80098ee:	3e01      	subs	r6, #1
 80098f0:	1909      	adds	r1, r1, r4
 80098f2:	9316      	str	r3, [sp, #88]	; 0x58
 80098f4:	e776      	b.n	80097e4 <_dtoa_r+0x108>
 80098f6:	2320      	movs	r3, #32
 80098f8:	9802      	ldr	r0, [sp, #8]
 80098fa:	1a9b      	subs	r3, r3, r2
 80098fc:	4098      	lsls	r0, r3
 80098fe:	e7f2      	b.n	80098e6 <_dtoa_r+0x20a>
 8009900:	9015      	str	r0, [sp, #84]	; 0x54
 8009902:	e7b8      	b.n	8009876 <_dtoa_r+0x19a>
 8009904:	9b08      	ldr	r3, [sp, #32]
 8009906:	9a02      	ldr	r2, [sp, #8]
 8009908:	1a9b      	subs	r3, r3, r2
 800990a:	9308      	str	r3, [sp, #32]
 800990c:	4253      	negs	r3, r2
 800990e:	930e      	str	r3, [sp, #56]	; 0x38
 8009910:	2300      	movs	r3, #0
 8009912:	9314      	str	r3, [sp, #80]	; 0x50
 8009914:	e7c7      	b.n	80098a6 <_dtoa_r+0x1ca>
 8009916:	2300      	movs	r3, #0
 8009918:	930f      	str	r3, [sp, #60]	; 0x3c
 800991a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800991c:	2b00      	cmp	r3, #0
 800991e:	dc36      	bgt.n	800998e <_dtoa_r+0x2b2>
 8009920:	2301      	movs	r3, #1
 8009922:	001a      	movs	r2, r3
 8009924:	930c      	str	r3, [sp, #48]	; 0x30
 8009926:	9306      	str	r3, [sp, #24]
 8009928:	9223      	str	r2, [sp, #140]	; 0x8c
 800992a:	e00d      	b.n	8009948 <_dtoa_r+0x26c>
 800992c:	2301      	movs	r3, #1
 800992e:	e7f3      	b.n	8009918 <_dtoa_r+0x23c>
 8009930:	2300      	movs	r3, #0
 8009932:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009934:	930f      	str	r3, [sp, #60]	; 0x3c
 8009936:	4694      	mov	ip, r2
 8009938:	9b02      	ldr	r3, [sp, #8]
 800993a:	4463      	add	r3, ip
 800993c:	930c      	str	r3, [sp, #48]	; 0x30
 800993e:	3301      	adds	r3, #1
 8009940:	9306      	str	r3, [sp, #24]
 8009942:	2b00      	cmp	r3, #0
 8009944:	dc00      	bgt.n	8009948 <_dtoa_r+0x26c>
 8009946:	2301      	movs	r3, #1
 8009948:	2200      	movs	r2, #0
 800994a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800994c:	6042      	str	r2, [r0, #4]
 800994e:	3204      	adds	r2, #4
 8009950:	0015      	movs	r5, r2
 8009952:	3514      	adds	r5, #20
 8009954:	6841      	ldr	r1, [r0, #4]
 8009956:	429d      	cmp	r5, r3
 8009958:	d91d      	bls.n	8009996 <_dtoa_r+0x2ba>
 800995a:	0038      	movs	r0, r7
 800995c:	f000 fcfe 	bl	800a35c <_Balloc>
 8009960:	9005      	str	r0, [sp, #20]
 8009962:	2800      	cmp	r0, #0
 8009964:	d11b      	bne.n	800999e <_dtoa_r+0x2c2>
 8009966:	21d5      	movs	r1, #213	; 0xd5
 8009968:	0002      	movs	r2, r0
 800996a:	4b3c      	ldr	r3, [pc, #240]	; (8009a5c <_dtoa_r+0x380>)
 800996c:	0049      	lsls	r1, r1, #1
 800996e:	e6ca      	b.n	8009706 <_dtoa_r+0x2a>
 8009970:	2301      	movs	r3, #1
 8009972:	e7de      	b.n	8009932 <_dtoa_r+0x256>
 8009974:	2300      	movs	r3, #0
 8009976:	940f      	str	r4, [sp, #60]	; 0x3c
 8009978:	9322      	str	r3, [sp, #136]	; 0x88
 800997a:	3b01      	subs	r3, #1
 800997c:	930c      	str	r3, [sp, #48]	; 0x30
 800997e:	9306      	str	r3, [sp, #24]
 8009980:	2200      	movs	r2, #0
 8009982:	3313      	adds	r3, #19
 8009984:	e7d0      	b.n	8009928 <_dtoa_r+0x24c>
 8009986:	2301      	movs	r3, #1
 8009988:	930f      	str	r3, [sp, #60]	; 0x3c
 800998a:	3b02      	subs	r3, #2
 800998c:	e7f6      	b.n	800997c <_dtoa_r+0x2a0>
 800998e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009990:	930c      	str	r3, [sp, #48]	; 0x30
 8009992:	9306      	str	r3, [sp, #24]
 8009994:	e7d8      	b.n	8009948 <_dtoa_r+0x26c>
 8009996:	3101      	adds	r1, #1
 8009998:	6041      	str	r1, [r0, #4]
 800999a:	0052      	lsls	r2, r2, #1
 800999c:	e7d8      	b.n	8009950 <_dtoa_r+0x274>
 800999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a0:	9a05      	ldr	r2, [sp, #20]
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	9b06      	ldr	r3, [sp, #24]
 80099a6:	2b0e      	cmp	r3, #14
 80099a8:	d900      	bls.n	80099ac <_dtoa_r+0x2d0>
 80099aa:	e0eb      	b.n	8009b84 <_dtoa_r+0x4a8>
 80099ac:	2c00      	cmp	r4, #0
 80099ae:	d100      	bne.n	80099b2 <_dtoa_r+0x2d6>
 80099b0:	e0e8      	b.n	8009b84 <_dtoa_r+0x4a8>
 80099b2:	9b02      	ldr	r3, [sp, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	dd68      	ble.n	8009a8a <_dtoa_r+0x3ae>
 80099b8:	001a      	movs	r2, r3
 80099ba:	210f      	movs	r1, #15
 80099bc:	4b23      	ldr	r3, [pc, #140]	; (8009a4c <_dtoa_r+0x370>)
 80099be:	400a      	ands	r2, r1
 80099c0:	00d2      	lsls	r2, r2, #3
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	681d      	ldr	r5, [r3, #0]
 80099c6:	685e      	ldr	r6, [r3, #4]
 80099c8:	9b02      	ldr	r3, [sp, #8]
 80099ca:	111c      	asrs	r4, r3, #4
 80099cc:	2302      	movs	r3, #2
 80099ce:	9310      	str	r3, [sp, #64]	; 0x40
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	05db      	lsls	r3, r3, #23
 80099d4:	d50b      	bpl.n	80099ee <_dtoa_r+0x312>
 80099d6:	4b22      	ldr	r3, [pc, #136]	; (8009a60 <_dtoa_r+0x384>)
 80099d8:	400c      	ands	r4, r1
 80099da:	6a1a      	ldr	r2, [r3, #32]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80099e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80099e2:	f7f7 fe97 	bl	8001714 <__aeabi_ddiv>
 80099e6:	2303      	movs	r3, #3
 80099e8:	900a      	str	r0, [sp, #40]	; 0x28
 80099ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80099ec:	9310      	str	r3, [sp, #64]	; 0x40
 80099ee:	4b1c      	ldr	r3, [pc, #112]	; (8009a60 <_dtoa_r+0x384>)
 80099f0:	9307      	str	r3, [sp, #28]
 80099f2:	2c00      	cmp	r4, #0
 80099f4:	d136      	bne.n	8009a64 <_dtoa_r+0x388>
 80099f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80099f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099fa:	002a      	movs	r2, r5
 80099fc:	0033      	movs	r3, r6
 80099fe:	f7f7 fe89 	bl	8001714 <__aeabi_ddiv>
 8009a02:	900a      	str	r0, [sp, #40]	; 0x28
 8009a04:	910b      	str	r1, [sp, #44]	; 0x2c
 8009a06:	e05c      	b.n	8009ac2 <_dtoa_r+0x3e6>
 8009a08:	0800e1e9 	.word	0x0800e1e9
 8009a0c:	0800e200 	.word	0x0800e200
 8009a10:	7ff00000 	.word	0x7ff00000
 8009a14:	0000270f 	.word	0x0000270f
 8009a18:	0800e1e5 	.word	0x0800e1e5
 8009a1c:	0800e1e8 	.word	0x0800e1e8
 8009a20:	0800e1b8 	.word	0x0800e1b8
 8009a24:	0800e1b9 	.word	0x0800e1b9
 8009a28:	3ff00000 	.word	0x3ff00000
 8009a2c:	fffffc01 	.word	0xfffffc01
 8009a30:	3ff80000 	.word	0x3ff80000
 8009a34:	636f4361 	.word	0x636f4361
 8009a38:	3fd287a7 	.word	0x3fd287a7
 8009a3c:	8b60c8b3 	.word	0x8b60c8b3
 8009a40:	3fc68a28 	.word	0x3fc68a28
 8009a44:	509f79fb 	.word	0x509f79fb
 8009a48:	3fd34413 	.word	0x3fd34413
 8009a4c:	0800e2f8 	.word	0x0800e2f8
 8009a50:	00000432 	.word	0x00000432
 8009a54:	00000412 	.word	0x00000412
 8009a58:	fe100000 	.word	0xfe100000
 8009a5c:	0800e25f 	.word	0x0800e25f
 8009a60:	0800e2d0 	.word	0x0800e2d0
 8009a64:	2301      	movs	r3, #1
 8009a66:	421c      	tst	r4, r3
 8009a68:	d00b      	beq.n	8009a82 <_dtoa_r+0x3a6>
 8009a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a6c:	0028      	movs	r0, r5
 8009a6e:	3301      	adds	r3, #1
 8009a70:	9310      	str	r3, [sp, #64]	; 0x40
 8009a72:	9b07      	ldr	r3, [sp, #28]
 8009a74:	0031      	movs	r1, r6
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f7f8 fa51 	bl	8001f20 <__aeabi_dmul>
 8009a7e:	0005      	movs	r5, r0
 8009a80:	000e      	movs	r6, r1
 8009a82:	9b07      	ldr	r3, [sp, #28]
 8009a84:	1064      	asrs	r4, r4, #1
 8009a86:	3308      	adds	r3, #8
 8009a88:	e7b2      	b.n	80099f0 <_dtoa_r+0x314>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	9310      	str	r3, [sp, #64]	; 0x40
 8009a8e:	9b02      	ldr	r3, [sp, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d016      	beq.n	8009ac2 <_dtoa_r+0x3e6>
 8009a94:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009a96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009a98:	425c      	negs	r4, r3
 8009a9a:	230f      	movs	r3, #15
 8009a9c:	4ab5      	ldr	r2, [pc, #724]	; (8009d74 <_dtoa_r+0x698>)
 8009a9e:	4023      	ands	r3, r4
 8009aa0:	00db      	lsls	r3, r3, #3
 8009aa2:	18d3      	adds	r3, r2, r3
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	f7f8 fa3a 	bl	8001f20 <__aeabi_dmul>
 8009aac:	2601      	movs	r6, #1
 8009aae:	2300      	movs	r3, #0
 8009ab0:	900a      	str	r0, [sp, #40]	; 0x28
 8009ab2:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ab4:	4db0      	ldr	r5, [pc, #704]	; (8009d78 <_dtoa_r+0x69c>)
 8009ab6:	1124      	asrs	r4, r4, #4
 8009ab8:	2c00      	cmp	r4, #0
 8009aba:	d000      	beq.n	8009abe <_dtoa_r+0x3e2>
 8009abc:	e094      	b.n	8009be8 <_dtoa_r+0x50c>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d19f      	bne.n	8009a02 <_dtoa_r+0x326>
 8009ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d100      	bne.n	8009aca <_dtoa_r+0x3ee>
 8009ac8:	e09b      	b.n	8009c02 <_dtoa_r+0x526>
 8009aca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009acc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009ace:	2200      	movs	r2, #0
 8009ad0:	0020      	movs	r0, r4
 8009ad2:	0029      	movs	r1, r5
 8009ad4:	4ba9      	ldr	r3, [pc, #676]	; (8009d7c <_dtoa_r+0x6a0>)
 8009ad6:	f7f6 fcbb 	bl	8000450 <__aeabi_dcmplt>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d100      	bne.n	8009ae0 <_dtoa_r+0x404>
 8009ade:	e090      	b.n	8009c02 <_dtoa_r+0x526>
 8009ae0:	9b06      	ldr	r3, [sp, #24]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d100      	bne.n	8009ae8 <_dtoa_r+0x40c>
 8009ae6:	e08c      	b.n	8009c02 <_dtoa_r+0x526>
 8009ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	dd46      	ble.n	8009b7c <_dtoa_r+0x4a0>
 8009aee:	9b02      	ldr	r3, [sp, #8]
 8009af0:	2200      	movs	r2, #0
 8009af2:	0020      	movs	r0, r4
 8009af4:	0029      	movs	r1, r5
 8009af6:	1e5e      	subs	r6, r3, #1
 8009af8:	4ba1      	ldr	r3, [pc, #644]	; (8009d80 <_dtoa_r+0x6a4>)
 8009afa:	f7f8 fa11 	bl	8001f20 <__aeabi_dmul>
 8009afe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b00:	900a      	str	r0, [sp, #40]	; 0x28
 8009b02:	910b      	str	r1, [sp, #44]	; 0x2c
 8009b04:	3301      	adds	r3, #1
 8009b06:	9310      	str	r3, [sp, #64]	; 0x40
 8009b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009b0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009b10:	9307      	str	r3, [sp, #28]
 8009b12:	f7f9 f857 	bl	8002bc4 <__aeabi_i2d>
 8009b16:	0022      	movs	r2, r4
 8009b18:	002b      	movs	r3, r5
 8009b1a:	f7f8 fa01 	bl	8001f20 <__aeabi_dmul>
 8009b1e:	2200      	movs	r2, #0
 8009b20:	4b98      	ldr	r3, [pc, #608]	; (8009d84 <_dtoa_r+0x6a8>)
 8009b22:	f7f7 fa8d 	bl	8001040 <__aeabi_dadd>
 8009b26:	9010      	str	r0, [sp, #64]	; 0x40
 8009b28:	9111      	str	r1, [sp, #68]	; 0x44
 8009b2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b2e:	920a      	str	r2, [sp, #40]	; 0x28
 8009b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b32:	4a95      	ldr	r2, [pc, #596]	; (8009d88 <_dtoa_r+0x6ac>)
 8009b34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b36:	4694      	mov	ip, r2
 8009b38:	4463      	add	r3, ip
 8009b3a:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b3e:	9b07      	ldr	r3, [sp, #28]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d161      	bne.n	8009c08 <_dtoa_r+0x52c>
 8009b44:	2200      	movs	r2, #0
 8009b46:	0020      	movs	r0, r4
 8009b48:	0029      	movs	r1, r5
 8009b4a:	4b90      	ldr	r3, [pc, #576]	; (8009d8c <_dtoa_r+0x6b0>)
 8009b4c:	f7f8 fc54 	bl	80023f8 <__aeabi_dsub>
 8009b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b54:	0004      	movs	r4, r0
 8009b56:	000d      	movs	r5, r1
 8009b58:	f7f6 fc8e 	bl	8000478 <__aeabi_dcmpgt>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d000      	beq.n	8009b62 <_dtoa_r+0x486>
 8009b60:	e2b5      	b.n	800a0ce <_dtoa_r+0x9f2>
 8009b62:	488b      	ldr	r0, [pc, #556]	; (8009d90 <_dtoa_r+0x6b4>)
 8009b64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b66:	4684      	mov	ip, r0
 8009b68:	4461      	add	r1, ip
 8009b6a:	000b      	movs	r3, r1
 8009b6c:	0020      	movs	r0, r4
 8009b6e:	0029      	movs	r1, r5
 8009b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b72:	f7f6 fc6d 	bl	8000450 <__aeabi_dcmplt>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d000      	beq.n	8009b7c <_dtoa_r+0x4a0>
 8009b7a:	e2a5      	b.n	800a0c8 <_dtoa_r+0x9ec>
 8009b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b7e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009b80:	930a      	str	r3, [sp, #40]	; 0x28
 8009b82:	940b      	str	r4, [sp, #44]	; 0x2c
 8009b84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	da00      	bge.n	8009b8c <_dtoa_r+0x4b0>
 8009b8a:	e171      	b.n	8009e70 <_dtoa_r+0x794>
 8009b8c:	9a02      	ldr	r2, [sp, #8]
 8009b8e:	2a0e      	cmp	r2, #14
 8009b90:	dd00      	ble.n	8009b94 <_dtoa_r+0x4b8>
 8009b92:	e16d      	b.n	8009e70 <_dtoa_r+0x794>
 8009b94:	4b77      	ldr	r3, [pc, #476]	; (8009d74 <_dtoa_r+0x698>)
 8009b96:	00d2      	lsls	r2, r2, #3
 8009b98:	189b      	adds	r3, r3, r2
 8009b9a:	685c      	ldr	r4, [r3, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	9308      	str	r3, [sp, #32]
 8009ba0:	9409      	str	r4, [sp, #36]	; 0x24
 8009ba2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	db00      	blt.n	8009baa <_dtoa_r+0x4ce>
 8009ba8:	e0f6      	b.n	8009d98 <_dtoa_r+0x6bc>
 8009baa:	9b06      	ldr	r3, [sp, #24]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dd00      	ble.n	8009bb2 <_dtoa_r+0x4d6>
 8009bb0:	e0f2      	b.n	8009d98 <_dtoa_r+0x6bc>
 8009bb2:	d000      	beq.n	8009bb6 <_dtoa_r+0x4da>
 8009bb4:	e288      	b.n	800a0c8 <_dtoa_r+0x9ec>
 8009bb6:	9808      	ldr	r0, [sp, #32]
 8009bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bba:	2200      	movs	r2, #0
 8009bbc:	4b73      	ldr	r3, [pc, #460]	; (8009d8c <_dtoa_r+0x6b0>)
 8009bbe:	f7f8 f9af 	bl	8001f20 <__aeabi_dmul>
 8009bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc6:	f7f6 fc61 	bl	800048c <__aeabi_dcmpge>
 8009bca:	9e06      	ldr	r6, [sp, #24]
 8009bcc:	0035      	movs	r5, r6
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d000      	beq.n	8009bd4 <_dtoa_r+0x4f8>
 8009bd2:	e25f      	b.n	800a094 <_dtoa_r+0x9b8>
 8009bd4:	9b05      	ldr	r3, [sp, #20]
 8009bd6:	9a05      	ldr	r2, [sp, #20]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	9307      	str	r3, [sp, #28]
 8009bdc:	2331      	movs	r3, #49	; 0x31
 8009bde:	7013      	strb	r3, [r2, #0]
 8009be0:	9b02      	ldr	r3, [sp, #8]
 8009be2:	3301      	adds	r3, #1
 8009be4:	9302      	str	r3, [sp, #8]
 8009be6:	e25a      	b.n	800a09e <_dtoa_r+0x9c2>
 8009be8:	4234      	tst	r4, r6
 8009bea:	d007      	beq.n	8009bfc <_dtoa_r+0x520>
 8009bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bee:	3301      	adds	r3, #1
 8009bf0:	9310      	str	r3, [sp, #64]	; 0x40
 8009bf2:	682a      	ldr	r2, [r5, #0]
 8009bf4:	686b      	ldr	r3, [r5, #4]
 8009bf6:	f7f8 f993 	bl	8001f20 <__aeabi_dmul>
 8009bfa:	0033      	movs	r3, r6
 8009bfc:	1064      	asrs	r4, r4, #1
 8009bfe:	3508      	adds	r5, #8
 8009c00:	e75a      	b.n	8009ab8 <_dtoa_r+0x3dc>
 8009c02:	9e02      	ldr	r6, [sp, #8]
 8009c04:	9b06      	ldr	r3, [sp, #24]
 8009c06:	e780      	b.n	8009b0a <_dtoa_r+0x42e>
 8009c08:	9b07      	ldr	r3, [sp, #28]
 8009c0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c0c:	1e5a      	subs	r2, r3, #1
 8009c0e:	4b59      	ldr	r3, [pc, #356]	; (8009d74 <_dtoa_r+0x698>)
 8009c10:	00d2      	lsls	r2, r2, #3
 8009c12:	189b      	adds	r3, r3, r2
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	2900      	cmp	r1, #0
 8009c1a:	d051      	beq.n	8009cc0 <_dtoa_r+0x5e4>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	495d      	ldr	r1, [pc, #372]	; (8009d94 <_dtoa_r+0x6b8>)
 8009c20:	f7f7 fd78 	bl	8001714 <__aeabi_ddiv>
 8009c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c28:	f7f8 fbe6 	bl	80023f8 <__aeabi_dsub>
 8009c2c:	9a05      	ldr	r2, [sp, #20]
 8009c2e:	9b05      	ldr	r3, [sp, #20]
 8009c30:	4694      	mov	ip, r2
 8009c32:	9310      	str	r3, [sp, #64]	; 0x40
 8009c34:	9b07      	ldr	r3, [sp, #28]
 8009c36:	900a      	str	r0, [sp, #40]	; 0x28
 8009c38:	910b      	str	r1, [sp, #44]	; 0x2c
 8009c3a:	4463      	add	r3, ip
 8009c3c:	9319      	str	r3, [sp, #100]	; 0x64
 8009c3e:	0029      	movs	r1, r5
 8009c40:	0020      	movs	r0, r4
 8009c42:	f7f8 ff89 	bl	8002b58 <__aeabi_d2iz>
 8009c46:	9017      	str	r0, [sp, #92]	; 0x5c
 8009c48:	f7f8 ffbc 	bl	8002bc4 <__aeabi_i2d>
 8009c4c:	0002      	movs	r2, r0
 8009c4e:	000b      	movs	r3, r1
 8009c50:	0020      	movs	r0, r4
 8009c52:	0029      	movs	r1, r5
 8009c54:	f7f8 fbd0 	bl	80023f8 <__aeabi_dsub>
 8009c58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	9307      	str	r3, [sp, #28]
 8009c60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c62:	0004      	movs	r4, r0
 8009c64:	3330      	adds	r3, #48	; 0x30
 8009c66:	7013      	strb	r3, [r2, #0]
 8009c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c6c:	000d      	movs	r5, r1
 8009c6e:	f7f6 fbef 	bl	8000450 <__aeabi_dcmplt>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d175      	bne.n	8009d62 <_dtoa_r+0x686>
 8009c76:	0022      	movs	r2, r4
 8009c78:	002b      	movs	r3, r5
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	493f      	ldr	r1, [pc, #252]	; (8009d7c <_dtoa_r+0x6a0>)
 8009c7e:	f7f8 fbbb 	bl	80023f8 <__aeabi_dsub>
 8009c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c86:	f7f6 fbe3 	bl	8000450 <__aeabi_dcmplt>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d000      	beq.n	8009c90 <_dtoa_r+0x5b4>
 8009c8e:	e0d1      	b.n	8009e34 <_dtoa_r+0x758>
 8009c90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c92:	9a07      	ldr	r2, [sp, #28]
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d100      	bne.n	8009c9a <_dtoa_r+0x5be>
 8009c98:	e770      	b.n	8009b7c <_dtoa_r+0x4a0>
 8009c9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	4b37      	ldr	r3, [pc, #220]	; (8009d80 <_dtoa_r+0x6a4>)
 8009ca2:	f7f8 f93d 	bl	8001f20 <__aeabi_dmul>
 8009ca6:	4b36      	ldr	r3, [pc, #216]	; (8009d80 <_dtoa_r+0x6a4>)
 8009ca8:	900a      	str	r0, [sp, #40]	; 0x28
 8009caa:	910b      	str	r1, [sp, #44]	; 0x2c
 8009cac:	2200      	movs	r2, #0
 8009cae:	0020      	movs	r0, r4
 8009cb0:	0029      	movs	r1, r5
 8009cb2:	f7f8 f935 	bl	8001f20 <__aeabi_dmul>
 8009cb6:	9b07      	ldr	r3, [sp, #28]
 8009cb8:	0004      	movs	r4, r0
 8009cba:	000d      	movs	r5, r1
 8009cbc:	9310      	str	r3, [sp, #64]	; 0x40
 8009cbe:	e7be      	b.n	8009c3e <_dtoa_r+0x562>
 8009cc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009cc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cc4:	f7f8 f92c 	bl	8001f20 <__aeabi_dmul>
 8009cc8:	9a05      	ldr	r2, [sp, #20]
 8009cca:	9b05      	ldr	r3, [sp, #20]
 8009ccc:	4694      	mov	ip, r2
 8009cce:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd0:	9b07      	ldr	r3, [sp, #28]
 8009cd2:	9010      	str	r0, [sp, #64]	; 0x40
 8009cd4:	9111      	str	r1, [sp, #68]	; 0x44
 8009cd6:	4463      	add	r3, ip
 8009cd8:	9319      	str	r3, [sp, #100]	; 0x64
 8009cda:	0029      	movs	r1, r5
 8009cdc:	0020      	movs	r0, r4
 8009cde:	f7f8 ff3b 	bl	8002b58 <__aeabi_d2iz>
 8009ce2:	9017      	str	r0, [sp, #92]	; 0x5c
 8009ce4:	f7f8 ff6e 	bl	8002bc4 <__aeabi_i2d>
 8009ce8:	0002      	movs	r2, r0
 8009cea:	000b      	movs	r3, r1
 8009cec:	0020      	movs	r0, r4
 8009cee:	0029      	movs	r1, r5
 8009cf0:	f7f8 fb82 	bl	80023f8 <__aeabi_dsub>
 8009cf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cf8:	3330      	adds	r3, #48	; 0x30
 8009cfa:	7013      	strb	r3, [r2, #0]
 8009cfc:	0013      	movs	r3, r2
 8009cfe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d00:	3301      	adds	r3, #1
 8009d02:	0004      	movs	r4, r0
 8009d04:	000d      	movs	r5, r1
 8009d06:	930a      	str	r3, [sp, #40]	; 0x28
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d12c      	bne.n	8009d66 <_dtoa_r+0x68a>
 8009d0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d10:	9a05      	ldr	r2, [sp, #20]
 8009d12:	9b07      	ldr	r3, [sp, #28]
 8009d14:	4694      	mov	ip, r2
 8009d16:	4463      	add	r3, ip
 8009d18:	2200      	movs	r2, #0
 8009d1a:	9307      	str	r3, [sp, #28]
 8009d1c:	4b1d      	ldr	r3, [pc, #116]	; (8009d94 <_dtoa_r+0x6b8>)
 8009d1e:	f7f7 f98f 	bl	8001040 <__aeabi_dadd>
 8009d22:	0002      	movs	r2, r0
 8009d24:	000b      	movs	r3, r1
 8009d26:	0020      	movs	r0, r4
 8009d28:	0029      	movs	r1, r5
 8009d2a:	f7f6 fba5 	bl	8000478 <__aeabi_dcmpgt>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d000      	beq.n	8009d34 <_dtoa_r+0x658>
 8009d32:	e07f      	b.n	8009e34 <_dtoa_r+0x758>
 8009d34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d38:	2000      	movs	r0, #0
 8009d3a:	4916      	ldr	r1, [pc, #88]	; (8009d94 <_dtoa_r+0x6b8>)
 8009d3c:	f7f8 fb5c 	bl	80023f8 <__aeabi_dsub>
 8009d40:	0002      	movs	r2, r0
 8009d42:	000b      	movs	r3, r1
 8009d44:	0020      	movs	r0, r4
 8009d46:	0029      	movs	r1, r5
 8009d48:	f7f6 fb82 	bl	8000450 <__aeabi_dcmplt>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d100      	bne.n	8009d52 <_dtoa_r+0x676>
 8009d50:	e714      	b.n	8009b7c <_dtoa_r+0x4a0>
 8009d52:	9b07      	ldr	r3, [sp, #28]
 8009d54:	001a      	movs	r2, r3
 8009d56:	3a01      	subs	r2, #1
 8009d58:	9207      	str	r2, [sp, #28]
 8009d5a:	7812      	ldrb	r2, [r2, #0]
 8009d5c:	2a30      	cmp	r2, #48	; 0x30
 8009d5e:	d0f8      	beq.n	8009d52 <_dtoa_r+0x676>
 8009d60:	9307      	str	r3, [sp, #28]
 8009d62:	9602      	str	r6, [sp, #8]
 8009d64:	e054      	b.n	8009e10 <_dtoa_r+0x734>
 8009d66:	2200      	movs	r2, #0
 8009d68:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <_dtoa_r+0x6a4>)
 8009d6a:	f7f8 f8d9 	bl	8001f20 <__aeabi_dmul>
 8009d6e:	0004      	movs	r4, r0
 8009d70:	000d      	movs	r5, r1
 8009d72:	e7b2      	b.n	8009cda <_dtoa_r+0x5fe>
 8009d74:	0800e2f8 	.word	0x0800e2f8
 8009d78:	0800e2d0 	.word	0x0800e2d0
 8009d7c:	3ff00000 	.word	0x3ff00000
 8009d80:	40240000 	.word	0x40240000
 8009d84:	401c0000 	.word	0x401c0000
 8009d88:	fcc00000 	.word	0xfcc00000
 8009d8c:	40140000 	.word	0x40140000
 8009d90:	7cc00000 	.word	0x7cc00000
 8009d94:	3fe00000 	.word	0x3fe00000
 8009d98:	9b06      	ldr	r3, [sp, #24]
 8009d9a:	9e05      	ldr	r6, [sp, #20]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	199b      	adds	r3, r3, r6
 8009da0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009da2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009da4:	930a      	str	r3, [sp, #40]	; 0x28
 8009da6:	9a08      	ldr	r2, [sp, #32]
 8009da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009daa:	0020      	movs	r0, r4
 8009dac:	0029      	movs	r1, r5
 8009dae:	f7f7 fcb1 	bl	8001714 <__aeabi_ddiv>
 8009db2:	f7f8 fed1 	bl	8002b58 <__aeabi_d2iz>
 8009db6:	9006      	str	r0, [sp, #24]
 8009db8:	f7f8 ff04 	bl	8002bc4 <__aeabi_i2d>
 8009dbc:	9a08      	ldr	r2, [sp, #32]
 8009dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc0:	f7f8 f8ae 	bl	8001f20 <__aeabi_dmul>
 8009dc4:	0002      	movs	r2, r0
 8009dc6:	000b      	movs	r3, r1
 8009dc8:	0020      	movs	r0, r4
 8009dca:	0029      	movs	r1, r5
 8009dcc:	f7f8 fb14 	bl	80023f8 <__aeabi_dsub>
 8009dd0:	0033      	movs	r3, r6
 8009dd2:	9a06      	ldr	r2, [sp, #24]
 8009dd4:	3601      	adds	r6, #1
 8009dd6:	3230      	adds	r2, #48	; 0x30
 8009dd8:	701a      	strb	r2, [r3, #0]
 8009dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ddc:	9607      	str	r6, [sp, #28]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d139      	bne.n	8009e56 <_dtoa_r+0x77a>
 8009de2:	0002      	movs	r2, r0
 8009de4:	000b      	movs	r3, r1
 8009de6:	f7f7 f92b 	bl	8001040 <__aeabi_dadd>
 8009dea:	9a08      	ldr	r2, [sp, #32]
 8009dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dee:	0004      	movs	r4, r0
 8009df0:	000d      	movs	r5, r1
 8009df2:	f7f6 fb41 	bl	8000478 <__aeabi_dcmpgt>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d11b      	bne.n	8009e32 <_dtoa_r+0x756>
 8009dfa:	9a08      	ldr	r2, [sp, #32]
 8009dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfe:	0020      	movs	r0, r4
 8009e00:	0029      	movs	r1, r5
 8009e02:	f7f6 fb1f 	bl	8000444 <__aeabi_dcmpeq>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d002      	beq.n	8009e10 <_dtoa_r+0x734>
 8009e0a:	9b06      	ldr	r3, [sp, #24]
 8009e0c:	07db      	lsls	r3, r3, #31
 8009e0e:	d410      	bmi.n	8009e32 <_dtoa_r+0x756>
 8009e10:	0038      	movs	r0, r7
 8009e12:	9904      	ldr	r1, [sp, #16]
 8009e14:	f000 fae6 	bl	800a3e4 <_Bfree>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9a07      	ldr	r2, [sp, #28]
 8009e1c:	9802      	ldr	r0, [sp, #8]
 8009e1e:	7013      	strb	r3, [r2, #0]
 8009e20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e22:	3001      	adds	r0, #1
 8009e24:	6018      	str	r0, [r3, #0]
 8009e26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d100      	bne.n	8009e2e <_dtoa_r+0x752>
 8009e2c:	e4a3      	b.n	8009776 <_dtoa_r+0x9a>
 8009e2e:	601a      	str	r2, [r3, #0]
 8009e30:	e4a1      	b.n	8009776 <_dtoa_r+0x9a>
 8009e32:	9e02      	ldr	r6, [sp, #8]
 8009e34:	9b07      	ldr	r3, [sp, #28]
 8009e36:	9307      	str	r3, [sp, #28]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	781a      	ldrb	r2, [r3, #0]
 8009e3c:	2a39      	cmp	r2, #57	; 0x39
 8009e3e:	d106      	bne.n	8009e4e <_dtoa_r+0x772>
 8009e40:	9a05      	ldr	r2, [sp, #20]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d1f7      	bne.n	8009e36 <_dtoa_r+0x75a>
 8009e46:	2230      	movs	r2, #48	; 0x30
 8009e48:	9905      	ldr	r1, [sp, #20]
 8009e4a:	3601      	adds	r6, #1
 8009e4c:	700a      	strb	r2, [r1, #0]
 8009e4e:	781a      	ldrb	r2, [r3, #0]
 8009e50:	3201      	adds	r2, #1
 8009e52:	701a      	strb	r2, [r3, #0]
 8009e54:	e785      	b.n	8009d62 <_dtoa_r+0x686>
 8009e56:	2200      	movs	r2, #0
 8009e58:	4bad      	ldr	r3, [pc, #692]	; (800a110 <_dtoa_r+0xa34>)
 8009e5a:	f7f8 f861 	bl	8001f20 <__aeabi_dmul>
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2300      	movs	r3, #0
 8009e62:	0004      	movs	r4, r0
 8009e64:	000d      	movs	r5, r1
 8009e66:	f7f6 faed 	bl	8000444 <__aeabi_dcmpeq>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d09b      	beq.n	8009da6 <_dtoa_r+0x6ca>
 8009e6e:	e7cf      	b.n	8009e10 <_dtoa_r+0x734>
 8009e70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e72:	2a00      	cmp	r2, #0
 8009e74:	d100      	bne.n	8009e78 <_dtoa_r+0x79c>
 8009e76:	e082      	b.n	8009f7e <_dtoa_r+0x8a2>
 8009e78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e7a:	2a01      	cmp	r2, #1
 8009e7c:	dc66      	bgt.n	8009f4c <_dtoa_r+0x870>
 8009e7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e80:	2a00      	cmp	r2, #0
 8009e82:	d05f      	beq.n	8009f44 <_dtoa_r+0x868>
 8009e84:	4aa3      	ldr	r2, [pc, #652]	; (800a114 <_dtoa_r+0xa38>)
 8009e86:	189b      	adds	r3, r3, r2
 8009e88:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009e8a:	9c08      	ldr	r4, [sp, #32]
 8009e8c:	9a08      	ldr	r2, [sp, #32]
 8009e8e:	2101      	movs	r1, #1
 8009e90:	18d2      	adds	r2, r2, r3
 8009e92:	9208      	str	r2, [sp, #32]
 8009e94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e96:	0038      	movs	r0, r7
 8009e98:	18d3      	adds	r3, r2, r3
 8009e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009e9c:	f000 fb52 	bl	800a544 <__i2b>
 8009ea0:	0005      	movs	r5, r0
 8009ea2:	2c00      	cmp	r4, #0
 8009ea4:	dd0e      	ble.n	8009ec4 <_dtoa_r+0x7e8>
 8009ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dd0b      	ble.n	8009ec4 <_dtoa_r+0x7e8>
 8009eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eae:	0023      	movs	r3, r4
 8009eb0:	4294      	cmp	r4, r2
 8009eb2:	dd00      	ble.n	8009eb6 <_dtoa_r+0x7da>
 8009eb4:	0013      	movs	r3, r2
 8009eb6:	9a08      	ldr	r2, [sp, #32]
 8009eb8:	1ae4      	subs	r4, r4, r3
 8009eba:	1ad2      	subs	r2, r2, r3
 8009ebc:	9208      	str	r2, [sp, #32]
 8009ebe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d01f      	beq.n	8009f0a <_dtoa_r+0x82e>
 8009eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d05a      	beq.n	8009f86 <_dtoa_r+0x8aa>
 8009ed0:	2e00      	cmp	r6, #0
 8009ed2:	dd11      	ble.n	8009ef8 <_dtoa_r+0x81c>
 8009ed4:	0029      	movs	r1, r5
 8009ed6:	0032      	movs	r2, r6
 8009ed8:	0038      	movs	r0, r7
 8009eda:	f000 fbf9 	bl	800a6d0 <__pow5mult>
 8009ede:	9a04      	ldr	r2, [sp, #16]
 8009ee0:	0001      	movs	r1, r0
 8009ee2:	0005      	movs	r5, r0
 8009ee4:	0038      	movs	r0, r7
 8009ee6:	f000 fb43 	bl	800a570 <__multiply>
 8009eea:	9904      	ldr	r1, [sp, #16]
 8009eec:	9007      	str	r0, [sp, #28]
 8009eee:	0038      	movs	r0, r7
 8009ef0:	f000 fa78 	bl	800a3e4 <_Bfree>
 8009ef4:	9b07      	ldr	r3, [sp, #28]
 8009ef6:	9304      	str	r3, [sp, #16]
 8009ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009efa:	1b9a      	subs	r2, r3, r6
 8009efc:	42b3      	cmp	r3, r6
 8009efe:	d004      	beq.n	8009f0a <_dtoa_r+0x82e>
 8009f00:	0038      	movs	r0, r7
 8009f02:	9904      	ldr	r1, [sp, #16]
 8009f04:	f000 fbe4 	bl	800a6d0 <__pow5mult>
 8009f08:	9004      	str	r0, [sp, #16]
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	0038      	movs	r0, r7
 8009f0e:	f000 fb19 	bl	800a544 <__i2b>
 8009f12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f14:	0006      	movs	r6, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	dd37      	ble.n	8009f8a <_dtoa_r+0x8ae>
 8009f1a:	001a      	movs	r2, r3
 8009f1c:	0001      	movs	r1, r0
 8009f1e:	0038      	movs	r0, r7
 8009f20:	f000 fbd6 	bl	800a6d0 <__pow5mult>
 8009f24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f26:	0006      	movs	r6, r0
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	dd33      	ble.n	8009f94 <_dtoa_r+0x8b8>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9307      	str	r3, [sp, #28]
 8009f30:	6933      	ldr	r3, [r6, #16]
 8009f32:	3303      	adds	r3, #3
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	18f3      	adds	r3, r6, r3
 8009f38:	6858      	ldr	r0, [r3, #4]
 8009f3a:	f000 fabb 	bl	800a4b4 <__hi0bits>
 8009f3e:	2320      	movs	r3, #32
 8009f40:	1a18      	subs	r0, r3, r0
 8009f42:	e03f      	b.n	8009fc4 <_dtoa_r+0x8e8>
 8009f44:	2336      	movs	r3, #54	; 0x36
 8009f46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009f48:	1a9b      	subs	r3, r3, r2
 8009f4a:	e79d      	b.n	8009e88 <_dtoa_r+0x7ac>
 8009f4c:	9b06      	ldr	r3, [sp, #24]
 8009f4e:	1e5e      	subs	r6, r3, #1
 8009f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f52:	42b3      	cmp	r3, r6
 8009f54:	db08      	blt.n	8009f68 <_dtoa_r+0x88c>
 8009f56:	1b9e      	subs	r6, r3, r6
 8009f58:	9b06      	ldr	r3, [sp, #24]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	da0c      	bge.n	8009f78 <_dtoa_r+0x89c>
 8009f5e:	9b08      	ldr	r3, [sp, #32]
 8009f60:	9a06      	ldr	r2, [sp, #24]
 8009f62:	1a9c      	subs	r4, r3, r2
 8009f64:	2300      	movs	r3, #0
 8009f66:	e791      	b.n	8009e8c <_dtoa_r+0x7b0>
 8009f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f6c:	1af3      	subs	r3, r6, r3
 8009f6e:	18d3      	adds	r3, r2, r3
 8009f70:	960e      	str	r6, [sp, #56]	; 0x38
 8009f72:	9314      	str	r3, [sp, #80]	; 0x50
 8009f74:	2600      	movs	r6, #0
 8009f76:	e7ef      	b.n	8009f58 <_dtoa_r+0x87c>
 8009f78:	9c08      	ldr	r4, [sp, #32]
 8009f7a:	9b06      	ldr	r3, [sp, #24]
 8009f7c:	e786      	b.n	8009e8c <_dtoa_r+0x7b0>
 8009f7e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009f80:	9c08      	ldr	r4, [sp, #32]
 8009f82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f84:	e78d      	b.n	8009ea2 <_dtoa_r+0x7c6>
 8009f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f88:	e7ba      	b.n	8009f00 <_dtoa_r+0x824>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	9307      	str	r3, [sp, #28]
 8009f8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	dc13      	bgt.n	8009fbc <_dtoa_r+0x8e0>
 8009f94:	2300      	movs	r3, #0
 8009f96:	9307      	str	r3, [sp, #28]
 8009f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10e      	bne.n	8009fbc <_dtoa_r+0x8e0>
 8009f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa0:	031b      	lsls	r3, r3, #12
 8009fa2:	d10b      	bne.n	8009fbc <_dtoa_r+0x8e0>
 8009fa4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009fa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fa8:	4213      	tst	r3, r2
 8009faa:	d007      	beq.n	8009fbc <_dtoa_r+0x8e0>
 8009fac:	9b08      	ldr	r3, [sp, #32]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	9308      	str	r3, [sp, #32]
 8009fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	930d      	str	r3, [sp, #52]	; 0x34
 8009fb8:	2301      	movs	r3, #1
 8009fba:	9307      	str	r3, [sp, #28]
 8009fbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fbe:	2001      	movs	r0, #1
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1b5      	bne.n	8009f30 <_dtoa_r+0x854>
 8009fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fc6:	221f      	movs	r2, #31
 8009fc8:	1818      	adds	r0, r3, r0
 8009fca:	0003      	movs	r3, r0
 8009fcc:	4013      	ands	r3, r2
 8009fce:	4210      	tst	r0, r2
 8009fd0:	d046      	beq.n	800a060 <_dtoa_r+0x984>
 8009fd2:	3201      	adds	r2, #1
 8009fd4:	1ad2      	subs	r2, r2, r3
 8009fd6:	2a04      	cmp	r2, #4
 8009fd8:	dd3f      	ble.n	800a05a <_dtoa_r+0x97e>
 8009fda:	221c      	movs	r2, #28
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	9a08      	ldr	r2, [sp, #32]
 8009fe0:	18e4      	adds	r4, r4, r3
 8009fe2:	18d2      	adds	r2, r2, r3
 8009fe4:	9208      	str	r2, [sp, #32]
 8009fe6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fe8:	18d3      	adds	r3, r2, r3
 8009fea:	930d      	str	r3, [sp, #52]	; 0x34
 8009fec:	9b08      	ldr	r3, [sp, #32]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	dd05      	ble.n	8009ffe <_dtoa_r+0x922>
 8009ff2:	001a      	movs	r2, r3
 8009ff4:	0038      	movs	r0, r7
 8009ff6:	9904      	ldr	r1, [sp, #16]
 8009ff8:	f000 fbc6 	bl	800a788 <__lshift>
 8009ffc:	9004      	str	r0, [sp, #16]
 8009ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a000:	2b00      	cmp	r3, #0
 800a002:	dd05      	ble.n	800a010 <_dtoa_r+0x934>
 800a004:	0031      	movs	r1, r6
 800a006:	001a      	movs	r2, r3
 800a008:	0038      	movs	r0, r7
 800a00a:	f000 fbbd 	bl	800a788 <__lshift>
 800a00e:	0006      	movs	r6, r0
 800a010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a012:	2b00      	cmp	r3, #0
 800a014:	d026      	beq.n	800a064 <_dtoa_r+0x988>
 800a016:	0031      	movs	r1, r6
 800a018:	9804      	ldr	r0, [sp, #16]
 800a01a:	f000 fc25 	bl	800a868 <__mcmp>
 800a01e:	2800      	cmp	r0, #0
 800a020:	da20      	bge.n	800a064 <_dtoa_r+0x988>
 800a022:	9b02      	ldr	r3, [sp, #8]
 800a024:	220a      	movs	r2, #10
 800a026:	3b01      	subs	r3, #1
 800a028:	9302      	str	r3, [sp, #8]
 800a02a:	0038      	movs	r0, r7
 800a02c:	2300      	movs	r3, #0
 800a02e:	9904      	ldr	r1, [sp, #16]
 800a030:	f000 f9fc 	bl	800a42c <__multadd>
 800a034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a036:	9004      	str	r0, [sp, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d100      	bne.n	800a03e <_dtoa_r+0x962>
 800a03c:	e160      	b.n	800a300 <_dtoa_r+0xc24>
 800a03e:	2300      	movs	r3, #0
 800a040:	0029      	movs	r1, r5
 800a042:	220a      	movs	r2, #10
 800a044:	0038      	movs	r0, r7
 800a046:	f000 f9f1 	bl	800a42c <__multadd>
 800a04a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a04c:	0005      	movs	r5, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	dc47      	bgt.n	800a0e2 <_dtoa_r+0xa06>
 800a052:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a054:	2b02      	cmp	r3, #2
 800a056:	dc0d      	bgt.n	800a074 <_dtoa_r+0x998>
 800a058:	e043      	b.n	800a0e2 <_dtoa_r+0xa06>
 800a05a:	2a04      	cmp	r2, #4
 800a05c:	d0c6      	beq.n	8009fec <_dtoa_r+0x910>
 800a05e:	0013      	movs	r3, r2
 800a060:	331c      	adds	r3, #28
 800a062:	e7bc      	b.n	8009fde <_dtoa_r+0x902>
 800a064:	9b06      	ldr	r3, [sp, #24]
 800a066:	2b00      	cmp	r3, #0
 800a068:	dc35      	bgt.n	800a0d6 <_dtoa_r+0x9fa>
 800a06a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	dd32      	ble.n	800a0d6 <_dtoa_r+0x9fa>
 800a070:	9b06      	ldr	r3, [sp, #24]
 800a072:	930c      	str	r3, [sp, #48]	; 0x30
 800a074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10c      	bne.n	800a094 <_dtoa_r+0x9b8>
 800a07a:	0031      	movs	r1, r6
 800a07c:	2205      	movs	r2, #5
 800a07e:	0038      	movs	r0, r7
 800a080:	f000 f9d4 	bl	800a42c <__multadd>
 800a084:	0006      	movs	r6, r0
 800a086:	0001      	movs	r1, r0
 800a088:	9804      	ldr	r0, [sp, #16]
 800a08a:	f000 fbed 	bl	800a868 <__mcmp>
 800a08e:	2800      	cmp	r0, #0
 800a090:	dd00      	ble.n	800a094 <_dtoa_r+0x9b8>
 800a092:	e59f      	b.n	8009bd4 <_dtoa_r+0x4f8>
 800a094:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a096:	43db      	mvns	r3, r3
 800a098:	9302      	str	r3, [sp, #8]
 800a09a:	9b05      	ldr	r3, [sp, #20]
 800a09c:	9307      	str	r3, [sp, #28]
 800a09e:	2400      	movs	r4, #0
 800a0a0:	0031      	movs	r1, r6
 800a0a2:	0038      	movs	r0, r7
 800a0a4:	f000 f99e 	bl	800a3e4 <_Bfree>
 800a0a8:	2d00      	cmp	r5, #0
 800a0aa:	d100      	bne.n	800a0ae <_dtoa_r+0x9d2>
 800a0ac:	e6b0      	b.n	8009e10 <_dtoa_r+0x734>
 800a0ae:	2c00      	cmp	r4, #0
 800a0b0:	d005      	beq.n	800a0be <_dtoa_r+0x9e2>
 800a0b2:	42ac      	cmp	r4, r5
 800a0b4:	d003      	beq.n	800a0be <_dtoa_r+0x9e2>
 800a0b6:	0021      	movs	r1, r4
 800a0b8:	0038      	movs	r0, r7
 800a0ba:	f000 f993 	bl	800a3e4 <_Bfree>
 800a0be:	0029      	movs	r1, r5
 800a0c0:	0038      	movs	r0, r7
 800a0c2:	f000 f98f 	bl	800a3e4 <_Bfree>
 800a0c6:	e6a3      	b.n	8009e10 <_dtoa_r+0x734>
 800a0c8:	2600      	movs	r6, #0
 800a0ca:	0035      	movs	r5, r6
 800a0cc:	e7e2      	b.n	800a094 <_dtoa_r+0x9b8>
 800a0ce:	9602      	str	r6, [sp, #8]
 800a0d0:	9e07      	ldr	r6, [sp, #28]
 800a0d2:	0035      	movs	r5, r6
 800a0d4:	e57e      	b.n	8009bd4 <_dtoa_r+0x4f8>
 800a0d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d100      	bne.n	800a0de <_dtoa_r+0xa02>
 800a0dc:	e0c8      	b.n	800a270 <_dtoa_r+0xb94>
 800a0de:	9b06      	ldr	r3, [sp, #24]
 800a0e0:	930c      	str	r3, [sp, #48]	; 0x30
 800a0e2:	2c00      	cmp	r4, #0
 800a0e4:	dd05      	ble.n	800a0f2 <_dtoa_r+0xa16>
 800a0e6:	0029      	movs	r1, r5
 800a0e8:	0022      	movs	r2, r4
 800a0ea:	0038      	movs	r0, r7
 800a0ec:	f000 fb4c 	bl	800a788 <__lshift>
 800a0f0:	0005      	movs	r5, r0
 800a0f2:	9b07      	ldr	r3, [sp, #28]
 800a0f4:	0028      	movs	r0, r5
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d01f      	beq.n	800a13a <_dtoa_r+0xa5e>
 800a0fa:	0038      	movs	r0, r7
 800a0fc:	6869      	ldr	r1, [r5, #4]
 800a0fe:	f000 f92d 	bl	800a35c <_Balloc>
 800a102:	1e04      	subs	r4, r0, #0
 800a104:	d10c      	bne.n	800a120 <_dtoa_r+0xa44>
 800a106:	0002      	movs	r2, r0
 800a108:	4b03      	ldr	r3, [pc, #12]	; (800a118 <_dtoa_r+0xa3c>)
 800a10a:	4904      	ldr	r1, [pc, #16]	; (800a11c <_dtoa_r+0xa40>)
 800a10c:	f7ff fafb 	bl	8009706 <_dtoa_r+0x2a>
 800a110:	40240000 	.word	0x40240000
 800a114:	00000433 	.word	0x00000433
 800a118:	0800e25f 	.word	0x0800e25f
 800a11c:	000002ea 	.word	0x000002ea
 800a120:	0029      	movs	r1, r5
 800a122:	692b      	ldr	r3, [r5, #16]
 800a124:	310c      	adds	r1, #12
 800a126:	1c9a      	adds	r2, r3, #2
 800a128:	0092      	lsls	r2, r2, #2
 800a12a:	300c      	adds	r0, #12
 800a12c:	f000 f90d 	bl	800a34a <memcpy>
 800a130:	2201      	movs	r2, #1
 800a132:	0021      	movs	r1, r4
 800a134:	0038      	movs	r0, r7
 800a136:	f000 fb27 	bl	800a788 <__lshift>
 800a13a:	002c      	movs	r4, r5
 800a13c:	0005      	movs	r5, r0
 800a13e:	9b05      	ldr	r3, [sp, #20]
 800a140:	9308      	str	r3, [sp, #32]
 800a142:	0031      	movs	r1, r6
 800a144:	9804      	ldr	r0, [sp, #16]
 800a146:	f7ff fa3d 	bl	80095c4 <quorem>
 800a14a:	0003      	movs	r3, r0
 800a14c:	0021      	movs	r1, r4
 800a14e:	3330      	adds	r3, #48	; 0x30
 800a150:	900e      	str	r0, [sp, #56]	; 0x38
 800a152:	9804      	ldr	r0, [sp, #16]
 800a154:	9306      	str	r3, [sp, #24]
 800a156:	f000 fb87 	bl	800a868 <__mcmp>
 800a15a:	002a      	movs	r2, r5
 800a15c:	900f      	str	r0, [sp, #60]	; 0x3c
 800a15e:	0031      	movs	r1, r6
 800a160:	0038      	movs	r0, r7
 800a162:	f000 fb9d 	bl	800a8a0 <__mdiff>
 800a166:	68c3      	ldr	r3, [r0, #12]
 800a168:	9007      	str	r0, [sp, #28]
 800a16a:	9310      	str	r3, [sp, #64]	; 0x40
 800a16c:	2301      	movs	r3, #1
 800a16e:	930d      	str	r3, [sp, #52]	; 0x34
 800a170:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a172:	2b00      	cmp	r3, #0
 800a174:	d104      	bne.n	800a180 <_dtoa_r+0xaa4>
 800a176:	0001      	movs	r1, r0
 800a178:	9804      	ldr	r0, [sp, #16]
 800a17a:	f000 fb75 	bl	800a868 <__mcmp>
 800a17e:	900d      	str	r0, [sp, #52]	; 0x34
 800a180:	0038      	movs	r0, r7
 800a182:	9907      	ldr	r1, [sp, #28]
 800a184:	f000 f92e 	bl	800a3e4 <_Bfree>
 800a188:	2301      	movs	r3, #1
 800a18a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a18c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a18e:	4018      	ands	r0, r3
 800a190:	9b08      	ldr	r3, [sp, #32]
 800a192:	3301      	adds	r3, #1
 800a194:	9307      	str	r3, [sp, #28]
 800a196:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a198:	4313      	orrs	r3, r2
 800a19a:	4303      	orrs	r3, r0
 800a19c:	d10c      	bne.n	800a1b8 <_dtoa_r+0xadc>
 800a19e:	9b06      	ldr	r3, [sp, #24]
 800a1a0:	2b39      	cmp	r3, #57	; 0x39
 800a1a2:	d025      	beq.n	800a1f0 <_dtoa_r+0xb14>
 800a1a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	dd02      	ble.n	800a1b0 <_dtoa_r+0xad4>
 800a1aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1ac:	3331      	adds	r3, #49	; 0x31
 800a1ae:	9306      	str	r3, [sp, #24]
 800a1b0:	9b08      	ldr	r3, [sp, #32]
 800a1b2:	9a06      	ldr	r2, [sp, #24]
 800a1b4:	701a      	strb	r2, [r3, #0]
 800a1b6:	e773      	b.n	800a0a0 <_dtoa_r+0x9c4>
 800a1b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	db03      	blt.n	800a1c6 <_dtoa_r+0xaea>
 800a1be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	4303      	orrs	r3, r0
 800a1c4:	d11f      	bne.n	800a206 <_dtoa_r+0xb2a>
 800a1c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	ddf1      	ble.n	800a1b0 <_dtoa_r+0xad4>
 800a1cc:	9904      	ldr	r1, [sp, #16]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	0038      	movs	r0, r7
 800a1d2:	f000 fad9 	bl	800a788 <__lshift>
 800a1d6:	0031      	movs	r1, r6
 800a1d8:	9004      	str	r0, [sp, #16]
 800a1da:	f000 fb45 	bl	800a868 <__mcmp>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	dc03      	bgt.n	800a1ea <_dtoa_r+0xb0e>
 800a1e2:	d1e5      	bne.n	800a1b0 <_dtoa_r+0xad4>
 800a1e4:	9b06      	ldr	r3, [sp, #24]
 800a1e6:	07db      	lsls	r3, r3, #31
 800a1e8:	d5e2      	bpl.n	800a1b0 <_dtoa_r+0xad4>
 800a1ea:	9b06      	ldr	r3, [sp, #24]
 800a1ec:	2b39      	cmp	r3, #57	; 0x39
 800a1ee:	d1dc      	bne.n	800a1aa <_dtoa_r+0xace>
 800a1f0:	2339      	movs	r3, #57	; 0x39
 800a1f2:	9a08      	ldr	r2, [sp, #32]
 800a1f4:	7013      	strb	r3, [r2, #0]
 800a1f6:	9b07      	ldr	r3, [sp, #28]
 800a1f8:	9307      	str	r3, [sp, #28]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	781a      	ldrb	r2, [r3, #0]
 800a1fe:	2a39      	cmp	r2, #57	; 0x39
 800a200:	d06c      	beq.n	800a2dc <_dtoa_r+0xc00>
 800a202:	3201      	adds	r2, #1
 800a204:	e7d6      	b.n	800a1b4 <_dtoa_r+0xad8>
 800a206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a208:	2b00      	cmp	r3, #0
 800a20a:	dd07      	ble.n	800a21c <_dtoa_r+0xb40>
 800a20c:	9b06      	ldr	r3, [sp, #24]
 800a20e:	2b39      	cmp	r3, #57	; 0x39
 800a210:	d0ee      	beq.n	800a1f0 <_dtoa_r+0xb14>
 800a212:	9b06      	ldr	r3, [sp, #24]
 800a214:	9a08      	ldr	r2, [sp, #32]
 800a216:	3301      	adds	r3, #1
 800a218:	7013      	strb	r3, [r2, #0]
 800a21a:	e741      	b.n	800a0a0 <_dtoa_r+0x9c4>
 800a21c:	9b08      	ldr	r3, [sp, #32]
 800a21e:	9a06      	ldr	r2, [sp, #24]
 800a220:	701a      	strb	r2, [r3, #0]
 800a222:	2301      	movs	r3, #1
 800a224:	9a05      	ldr	r2, [sp, #20]
 800a226:	1a9b      	subs	r3, r3, r2
 800a228:	9a08      	ldr	r2, [sp, #32]
 800a22a:	189b      	adds	r3, r3, r2
 800a22c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a22e:	429a      	cmp	r2, r3
 800a230:	d03e      	beq.n	800a2b0 <_dtoa_r+0xbd4>
 800a232:	2300      	movs	r3, #0
 800a234:	220a      	movs	r2, #10
 800a236:	9904      	ldr	r1, [sp, #16]
 800a238:	0038      	movs	r0, r7
 800a23a:	f000 f8f7 	bl	800a42c <__multadd>
 800a23e:	2300      	movs	r3, #0
 800a240:	9004      	str	r0, [sp, #16]
 800a242:	220a      	movs	r2, #10
 800a244:	0021      	movs	r1, r4
 800a246:	0038      	movs	r0, r7
 800a248:	42ac      	cmp	r4, r5
 800a24a:	d106      	bne.n	800a25a <_dtoa_r+0xb7e>
 800a24c:	f000 f8ee 	bl	800a42c <__multadd>
 800a250:	0004      	movs	r4, r0
 800a252:	0005      	movs	r5, r0
 800a254:	9b07      	ldr	r3, [sp, #28]
 800a256:	9308      	str	r3, [sp, #32]
 800a258:	e773      	b.n	800a142 <_dtoa_r+0xa66>
 800a25a:	f000 f8e7 	bl	800a42c <__multadd>
 800a25e:	0029      	movs	r1, r5
 800a260:	0004      	movs	r4, r0
 800a262:	2300      	movs	r3, #0
 800a264:	220a      	movs	r2, #10
 800a266:	0038      	movs	r0, r7
 800a268:	f000 f8e0 	bl	800a42c <__multadd>
 800a26c:	0005      	movs	r5, r0
 800a26e:	e7f1      	b.n	800a254 <_dtoa_r+0xb78>
 800a270:	9b06      	ldr	r3, [sp, #24]
 800a272:	930c      	str	r3, [sp, #48]	; 0x30
 800a274:	2400      	movs	r4, #0
 800a276:	0031      	movs	r1, r6
 800a278:	9804      	ldr	r0, [sp, #16]
 800a27a:	f7ff f9a3 	bl	80095c4 <quorem>
 800a27e:	9b05      	ldr	r3, [sp, #20]
 800a280:	3030      	adds	r0, #48	; 0x30
 800a282:	5518      	strb	r0, [r3, r4]
 800a284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a286:	3401      	adds	r4, #1
 800a288:	9006      	str	r0, [sp, #24]
 800a28a:	42a3      	cmp	r3, r4
 800a28c:	dd07      	ble.n	800a29e <_dtoa_r+0xbc2>
 800a28e:	2300      	movs	r3, #0
 800a290:	220a      	movs	r2, #10
 800a292:	0038      	movs	r0, r7
 800a294:	9904      	ldr	r1, [sp, #16]
 800a296:	f000 f8c9 	bl	800a42c <__multadd>
 800a29a:	9004      	str	r0, [sp, #16]
 800a29c:	e7eb      	b.n	800a276 <_dtoa_r+0xb9a>
 800a29e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	dd00      	ble.n	800a2a8 <_dtoa_r+0xbcc>
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	2400      	movs	r4, #0
 800a2aa:	9b05      	ldr	r3, [sp, #20]
 800a2ac:	181b      	adds	r3, r3, r0
 800a2ae:	9307      	str	r3, [sp, #28]
 800a2b0:	9904      	ldr	r1, [sp, #16]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	0038      	movs	r0, r7
 800a2b6:	f000 fa67 	bl	800a788 <__lshift>
 800a2ba:	0031      	movs	r1, r6
 800a2bc:	9004      	str	r0, [sp, #16]
 800a2be:	f000 fad3 	bl	800a868 <__mcmp>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	dc97      	bgt.n	800a1f6 <_dtoa_r+0xb1a>
 800a2c6:	d102      	bne.n	800a2ce <_dtoa_r+0xbf2>
 800a2c8:	9b06      	ldr	r3, [sp, #24]
 800a2ca:	07db      	lsls	r3, r3, #31
 800a2cc:	d493      	bmi.n	800a1f6 <_dtoa_r+0xb1a>
 800a2ce:	9b07      	ldr	r3, [sp, #28]
 800a2d0:	9307      	str	r3, [sp, #28]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	781a      	ldrb	r2, [r3, #0]
 800a2d6:	2a30      	cmp	r2, #48	; 0x30
 800a2d8:	d0fa      	beq.n	800a2d0 <_dtoa_r+0xbf4>
 800a2da:	e6e1      	b.n	800a0a0 <_dtoa_r+0x9c4>
 800a2dc:	9a05      	ldr	r2, [sp, #20]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d18a      	bne.n	800a1f8 <_dtoa_r+0xb1c>
 800a2e2:	9b02      	ldr	r3, [sp, #8]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	2331      	movs	r3, #49	; 0x31
 800a2ea:	e795      	b.n	800a218 <_dtoa_r+0xb3c>
 800a2ec:	4b08      	ldr	r3, [pc, #32]	; (800a310 <_dtoa_r+0xc34>)
 800a2ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a2f0:	9305      	str	r3, [sp, #20]
 800a2f2:	4b08      	ldr	r3, [pc, #32]	; (800a314 <_dtoa_r+0xc38>)
 800a2f4:	2a00      	cmp	r2, #0
 800a2f6:	d001      	beq.n	800a2fc <_dtoa_r+0xc20>
 800a2f8:	f7ff fa3b 	bl	8009772 <_dtoa_r+0x96>
 800a2fc:	f7ff fa3b 	bl	8009776 <_dtoa_r+0x9a>
 800a300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a302:	2b00      	cmp	r3, #0
 800a304:	dcb6      	bgt.n	800a274 <_dtoa_r+0xb98>
 800a306:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a308:	2b02      	cmp	r3, #2
 800a30a:	dd00      	ble.n	800a30e <_dtoa_r+0xc32>
 800a30c:	e6b2      	b.n	800a074 <_dtoa_r+0x998>
 800a30e:	e7b1      	b.n	800a274 <_dtoa_r+0xb98>
 800a310:	0800e1dc 	.word	0x0800e1dc
 800a314:	0800e1e4 	.word	0x0800e1e4

0800a318 <_localeconv_r>:
 800a318:	4800      	ldr	r0, [pc, #0]	; (800a31c <_localeconv_r+0x4>)
 800a31a:	4770      	bx	lr
 800a31c:	20000160 	.word	0x20000160

0800a320 <malloc>:
 800a320:	b510      	push	{r4, lr}
 800a322:	4b03      	ldr	r3, [pc, #12]	; (800a330 <malloc+0x10>)
 800a324:	0001      	movs	r1, r0
 800a326:	6818      	ldr	r0, [r3, #0]
 800a328:	f000 fc0e 	bl	800ab48 <_malloc_r>
 800a32c:	bd10      	pop	{r4, pc}
 800a32e:	46c0      	nop			; (mov r8, r8)
 800a330:	2000000c 	.word	0x2000000c

0800a334 <memchr>:
 800a334:	b2c9      	uxtb	r1, r1
 800a336:	1882      	adds	r2, r0, r2
 800a338:	4290      	cmp	r0, r2
 800a33a:	d101      	bne.n	800a340 <memchr+0xc>
 800a33c:	2000      	movs	r0, #0
 800a33e:	4770      	bx	lr
 800a340:	7803      	ldrb	r3, [r0, #0]
 800a342:	428b      	cmp	r3, r1
 800a344:	d0fb      	beq.n	800a33e <memchr+0xa>
 800a346:	3001      	adds	r0, #1
 800a348:	e7f6      	b.n	800a338 <memchr+0x4>

0800a34a <memcpy>:
 800a34a:	2300      	movs	r3, #0
 800a34c:	b510      	push	{r4, lr}
 800a34e:	429a      	cmp	r2, r3
 800a350:	d100      	bne.n	800a354 <memcpy+0xa>
 800a352:	bd10      	pop	{r4, pc}
 800a354:	5ccc      	ldrb	r4, [r1, r3]
 800a356:	54c4      	strb	r4, [r0, r3]
 800a358:	3301      	adds	r3, #1
 800a35a:	e7f8      	b.n	800a34e <memcpy+0x4>

0800a35c <_Balloc>:
 800a35c:	b570      	push	{r4, r5, r6, lr}
 800a35e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a360:	0006      	movs	r6, r0
 800a362:	000c      	movs	r4, r1
 800a364:	2d00      	cmp	r5, #0
 800a366:	d10e      	bne.n	800a386 <_Balloc+0x2a>
 800a368:	2010      	movs	r0, #16
 800a36a:	f7ff ffd9 	bl	800a320 <malloc>
 800a36e:	1e02      	subs	r2, r0, #0
 800a370:	6270      	str	r0, [r6, #36]	; 0x24
 800a372:	d104      	bne.n	800a37e <_Balloc+0x22>
 800a374:	2166      	movs	r1, #102	; 0x66
 800a376:	4b19      	ldr	r3, [pc, #100]	; (800a3dc <_Balloc+0x80>)
 800a378:	4819      	ldr	r0, [pc, #100]	; (800a3e0 <_Balloc+0x84>)
 800a37a:	f000 fdb7 	bl	800aeec <__assert_func>
 800a37e:	6045      	str	r5, [r0, #4]
 800a380:	6085      	str	r5, [r0, #8]
 800a382:	6005      	str	r5, [r0, #0]
 800a384:	60c5      	str	r5, [r0, #12]
 800a386:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a388:	68eb      	ldr	r3, [r5, #12]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d013      	beq.n	800a3b6 <_Balloc+0x5a>
 800a38e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a390:	00a2      	lsls	r2, r4, #2
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	189b      	adds	r3, r3, r2
 800a396:	6818      	ldr	r0, [r3, #0]
 800a398:	2800      	cmp	r0, #0
 800a39a:	d118      	bne.n	800a3ce <_Balloc+0x72>
 800a39c:	2101      	movs	r1, #1
 800a39e:	000d      	movs	r5, r1
 800a3a0:	40a5      	lsls	r5, r4
 800a3a2:	1d6a      	adds	r2, r5, #5
 800a3a4:	0030      	movs	r0, r6
 800a3a6:	0092      	lsls	r2, r2, #2
 800a3a8:	f000 fb76 	bl	800aa98 <_calloc_r>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d00c      	beq.n	800a3ca <_Balloc+0x6e>
 800a3b0:	6044      	str	r4, [r0, #4]
 800a3b2:	6085      	str	r5, [r0, #8]
 800a3b4:	e00d      	b.n	800a3d2 <_Balloc+0x76>
 800a3b6:	2221      	movs	r2, #33	; 0x21
 800a3b8:	2104      	movs	r1, #4
 800a3ba:	0030      	movs	r0, r6
 800a3bc:	f000 fb6c 	bl	800aa98 <_calloc_r>
 800a3c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a3c2:	60e8      	str	r0, [r5, #12]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1e1      	bne.n	800a38e <_Balloc+0x32>
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	bd70      	pop	{r4, r5, r6, pc}
 800a3ce:	6802      	ldr	r2, [r0, #0]
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	6103      	str	r3, [r0, #16]
 800a3d6:	60c3      	str	r3, [r0, #12]
 800a3d8:	e7f8      	b.n	800a3cc <_Balloc+0x70>
 800a3da:	46c0      	nop			; (mov r8, r8)
 800a3dc:	0800e1e9 	.word	0x0800e1e9
 800a3e0:	0800e270 	.word	0x0800e270

0800a3e4 <_Bfree>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3e8:	0005      	movs	r5, r0
 800a3ea:	000c      	movs	r4, r1
 800a3ec:	2e00      	cmp	r6, #0
 800a3ee:	d10e      	bne.n	800a40e <_Bfree+0x2a>
 800a3f0:	2010      	movs	r0, #16
 800a3f2:	f7ff ff95 	bl	800a320 <malloc>
 800a3f6:	1e02      	subs	r2, r0, #0
 800a3f8:	6268      	str	r0, [r5, #36]	; 0x24
 800a3fa:	d104      	bne.n	800a406 <_Bfree+0x22>
 800a3fc:	218a      	movs	r1, #138	; 0x8a
 800a3fe:	4b09      	ldr	r3, [pc, #36]	; (800a424 <_Bfree+0x40>)
 800a400:	4809      	ldr	r0, [pc, #36]	; (800a428 <_Bfree+0x44>)
 800a402:	f000 fd73 	bl	800aeec <__assert_func>
 800a406:	6046      	str	r6, [r0, #4]
 800a408:	6086      	str	r6, [r0, #8]
 800a40a:	6006      	str	r6, [r0, #0]
 800a40c:	60c6      	str	r6, [r0, #12]
 800a40e:	2c00      	cmp	r4, #0
 800a410:	d007      	beq.n	800a422 <_Bfree+0x3e>
 800a412:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a414:	6862      	ldr	r2, [r4, #4]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	0092      	lsls	r2, r2, #2
 800a41a:	189b      	adds	r3, r3, r2
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	6022      	str	r2, [r4, #0]
 800a420:	601c      	str	r4, [r3, #0]
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	0800e1e9 	.word	0x0800e1e9
 800a428:	0800e270 	.word	0x0800e270

0800a42c <__multadd>:
 800a42c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a42e:	000e      	movs	r6, r1
 800a430:	9001      	str	r0, [sp, #4]
 800a432:	000c      	movs	r4, r1
 800a434:	001d      	movs	r5, r3
 800a436:	2000      	movs	r0, #0
 800a438:	690f      	ldr	r7, [r1, #16]
 800a43a:	3614      	adds	r6, #20
 800a43c:	6833      	ldr	r3, [r6, #0]
 800a43e:	3001      	adds	r0, #1
 800a440:	b299      	uxth	r1, r3
 800a442:	4351      	muls	r1, r2
 800a444:	0c1b      	lsrs	r3, r3, #16
 800a446:	4353      	muls	r3, r2
 800a448:	1949      	adds	r1, r1, r5
 800a44a:	0c0d      	lsrs	r5, r1, #16
 800a44c:	195b      	adds	r3, r3, r5
 800a44e:	0c1d      	lsrs	r5, r3, #16
 800a450:	b289      	uxth	r1, r1
 800a452:	041b      	lsls	r3, r3, #16
 800a454:	185b      	adds	r3, r3, r1
 800a456:	c608      	stmia	r6!, {r3}
 800a458:	4287      	cmp	r7, r0
 800a45a:	dcef      	bgt.n	800a43c <__multadd+0x10>
 800a45c:	2d00      	cmp	r5, #0
 800a45e:	d022      	beq.n	800a4a6 <__multadd+0x7a>
 800a460:	68a3      	ldr	r3, [r4, #8]
 800a462:	42bb      	cmp	r3, r7
 800a464:	dc19      	bgt.n	800a49a <__multadd+0x6e>
 800a466:	6863      	ldr	r3, [r4, #4]
 800a468:	9801      	ldr	r0, [sp, #4]
 800a46a:	1c59      	adds	r1, r3, #1
 800a46c:	f7ff ff76 	bl	800a35c <_Balloc>
 800a470:	1e06      	subs	r6, r0, #0
 800a472:	d105      	bne.n	800a480 <__multadd+0x54>
 800a474:	0002      	movs	r2, r0
 800a476:	21b5      	movs	r1, #181	; 0xb5
 800a478:	4b0c      	ldr	r3, [pc, #48]	; (800a4ac <__multadd+0x80>)
 800a47a:	480d      	ldr	r0, [pc, #52]	; (800a4b0 <__multadd+0x84>)
 800a47c:	f000 fd36 	bl	800aeec <__assert_func>
 800a480:	0021      	movs	r1, r4
 800a482:	6923      	ldr	r3, [r4, #16]
 800a484:	310c      	adds	r1, #12
 800a486:	1c9a      	adds	r2, r3, #2
 800a488:	0092      	lsls	r2, r2, #2
 800a48a:	300c      	adds	r0, #12
 800a48c:	f7ff ff5d 	bl	800a34a <memcpy>
 800a490:	0021      	movs	r1, r4
 800a492:	9801      	ldr	r0, [sp, #4]
 800a494:	f7ff ffa6 	bl	800a3e4 <_Bfree>
 800a498:	0034      	movs	r4, r6
 800a49a:	1d3b      	adds	r3, r7, #4
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	18e3      	adds	r3, r4, r3
 800a4a0:	605d      	str	r5, [r3, #4]
 800a4a2:	1c7b      	adds	r3, r7, #1
 800a4a4:	6123      	str	r3, [r4, #16]
 800a4a6:	0020      	movs	r0, r4
 800a4a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4aa:	46c0      	nop			; (mov r8, r8)
 800a4ac:	0800e25f 	.word	0x0800e25f
 800a4b0:	0800e270 	.word	0x0800e270

0800a4b4 <__hi0bits>:
 800a4b4:	0003      	movs	r3, r0
 800a4b6:	0c02      	lsrs	r2, r0, #16
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	4282      	cmp	r2, r0
 800a4bc:	d101      	bne.n	800a4c2 <__hi0bits+0xe>
 800a4be:	041b      	lsls	r3, r3, #16
 800a4c0:	3010      	adds	r0, #16
 800a4c2:	0e1a      	lsrs	r2, r3, #24
 800a4c4:	d101      	bne.n	800a4ca <__hi0bits+0x16>
 800a4c6:	3008      	adds	r0, #8
 800a4c8:	021b      	lsls	r3, r3, #8
 800a4ca:	0f1a      	lsrs	r2, r3, #28
 800a4cc:	d101      	bne.n	800a4d2 <__hi0bits+0x1e>
 800a4ce:	3004      	adds	r0, #4
 800a4d0:	011b      	lsls	r3, r3, #4
 800a4d2:	0f9a      	lsrs	r2, r3, #30
 800a4d4:	d101      	bne.n	800a4da <__hi0bits+0x26>
 800a4d6:	3002      	adds	r0, #2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	db03      	blt.n	800a4e6 <__hi0bits+0x32>
 800a4de:	3001      	adds	r0, #1
 800a4e0:	005b      	lsls	r3, r3, #1
 800a4e2:	d400      	bmi.n	800a4e6 <__hi0bits+0x32>
 800a4e4:	2020      	movs	r0, #32
 800a4e6:	4770      	bx	lr

0800a4e8 <__lo0bits>:
 800a4e8:	6803      	ldr	r3, [r0, #0]
 800a4ea:	0002      	movs	r2, r0
 800a4ec:	2107      	movs	r1, #7
 800a4ee:	0018      	movs	r0, r3
 800a4f0:	4008      	ands	r0, r1
 800a4f2:	420b      	tst	r3, r1
 800a4f4:	d00d      	beq.n	800a512 <__lo0bits+0x2a>
 800a4f6:	3906      	subs	r1, #6
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	420b      	tst	r3, r1
 800a4fc:	d105      	bne.n	800a50a <__lo0bits+0x22>
 800a4fe:	3002      	adds	r0, #2
 800a500:	4203      	tst	r3, r0
 800a502:	d003      	beq.n	800a50c <__lo0bits+0x24>
 800a504:	40cb      	lsrs	r3, r1
 800a506:	0008      	movs	r0, r1
 800a508:	6013      	str	r3, [r2, #0]
 800a50a:	4770      	bx	lr
 800a50c:	089b      	lsrs	r3, r3, #2
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	e7fb      	b.n	800a50a <__lo0bits+0x22>
 800a512:	b299      	uxth	r1, r3
 800a514:	2900      	cmp	r1, #0
 800a516:	d101      	bne.n	800a51c <__lo0bits+0x34>
 800a518:	2010      	movs	r0, #16
 800a51a:	0c1b      	lsrs	r3, r3, #16
 800a51c:	b2d9      	uxtb	r1, r3
 800a51e:	2900      	cmp	r1, #0
 800a520:	d101      	bne.n	800a526 <__lo0bits+0x3e>
 800a522:	3008      	adds	r0, #8
 800a524:	0a1b      	lsrs	r3, r3, #8
 800a526:	0719      	lsls	r1, r3, #28
 800a528:	d101      	bne.n	800a52e <__lo0bits+0x46>
 800a52a:	3004      	adds	r0, #4
 800a52c:	091b      	lsrs	r3, r3, #4
 800a52e:	0799      	lsls	r1, r3, #30
 800a530:	d101      	bne.n	800a536 <__lo0bits+0x4e>
 800a532:	3002      	adds	r0, #2
 800a534:	089b      	lsrs	r3, r3, #2
 800a536:	07d9      	lsls	r1, r3, #31
 800a538:	d4e9      	bmi.n	800a50e <__lo0bits+0x26>
 800a53a:	3001      	adds	r0, #1
 800a53c:	085b      	lsrs	r3, r3, #1
 800a53e:	d1e6      	bne.n	800a50e <__lo0bits+0x26>
 800a540:	2020      	movs	r0, #32
 800a542:	e7e2      	b.n	800a50a <__lo0bits+0x22>

0800a544 <__i2b>:
 800a544:	b510      	push	{r4, lr}
 800a546:	000c      	movs	r4, r1
 800a548:	2101      	movs	r1, #1
 800a54a:	f7ff ff07 	bl	800a35c <_Balloc>
 800a54e:	2800      	cmp	r0, #0
 800a550:	d106      	bne.n	800a560 <__i2b+0x1c>
 800a552:	21a0      	movs	r1, #160	; 0xa0
 800a554:	0002      	movs	r2, r0
 800a556:	4b04      	ldr	r3, [pc, #16]	; (800a568 <__i2b+0x24>)
 800a558:	4804      	ldr	r0, [pc, #16]	; (800a56c <__i2b+0x28>)
 800a55a:	0049      	lsls	r1, r1, #1
 800a55c:	f000 fcc6 	bl	800aeec <__assert_func>
 800a560:	2301      	movs	r3, #1
 800a562:	6144      	str	r4, [r0, #20]
 800a564:	6103      	str	r3, [r0, #16]
 800a566:	bd10      	pop	{r4, pc}
 800a568:	0800e25f 	.word	0x0800e25f
 800a56c:	0800e270 	.word	0x0800e270

0800a570 <__multiply>:
 800a570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a572:	690b      	ldr	r3, [r1, #16]
 800a574:	0014      	movs	r4, r2
 800a576:	6912      	ldr	r2, [r2, #16]
 800a578:	000d      	movs	r5, r1
 800a57a:	b089      	sub	sp, #36	; 0x24
 800a57c:	4293      	cmp	r3, r2
 800a57e:	da01      	bge.n	800a584 <__multiply+0x14>
 800a580:	0025      	movs	r5, r4
 800a582:	000c      	movs	r4, r1
 800a584:	692f      	ldr	r7, [r5, #16]
 800a586:	6926      	ldr	r6, [r4, #16]
 800a588:	6869      	ldr	r1, [r5, #4]
 800a58a:	19bb      	adds	r3, r7, r6
 800a58c:	9302      	str	r3, [sp, #8]
 800a58e:	68ab      	ldr	r3, [r5, #8]
 800a590:	19ba      	adds	r2, r7, r6
 800a592:	4293      	cmp	r3, r2
 800a594:	da00      	bge.n	800a598 <__multiply+0x28>
 800a596:	3101      	adds	r1, #1
 800a598:	f7ff fee0 	bl	800a35c <_Balloc>
 800a59c:	9001      	str	r0, [sp, #4]
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d106      	bne.n	800a5b0 <__multiply+0x40>
 800a5a2:	215e      	movs	r1, #94	; 0x5e
 800a5a4:	0002      	movs	r2, r0
 800a5a6:	4b48      	ldr	r3, [pc, #288]	; (800a6c8 <__multiply+0x158>)
 800a5a8:	4848      	ldr	r0, [pc, #288]	; (800a6cc <__multiply+0x15c>)
 800a5aa:	31ff      	adds	r1, #255	; 0xff
 800a5ac:	f000 fc9e 	bl	800aeec <__assert_func>
 800a5b0:	9b01      	ldr	r3, [sp, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	3314      	adds	r3, #20
 800a5b6:	469c      	mov	ip, r3
 800a5b8:	19bb      	adds	r3, r7, r6
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	4463      	add	r3, ip
 800a5be:	9303      	str	r3, [sp, #12]
 800a5c0:	4663      	mov	r3, ip
 800a5c2:	9903      	ldr	r1, [sp, #12]
 800a5c4:	428b      	cmp	r3, r1
 800a5c6:	d32c      	bcc.n	800a622 <__multiply+0xb2>
 800a5c8:	002b      	movs	r3, r5
 800a5ca:	0022      	movs	r2, r4
 800a5cc:	3314      	adds	r3, #20
 800a5ce:	00bf      	lsls	r7, r7, #2
 800a5d0:	3214      	adds	r2, #20
 800a5d2:	9306      	str	r3, [sp, #24]
 800a5d4:	00b6      	lsls	r6, r6, #2
 800a5d6:	19db      	adds	r3, r3, r7
 800a5d8:	9304      	str	r3, [sp, #16]
 800a5da:	1993      	adds	r3, r2, r6
 800a5dc:	9307      	str	r3, [sp, #28]
 800a5de:	2304      	movs	r3, #4
 800a5e0:	9305      	str	r3, [sp, #20]
 800a5e2:	002b      	movs	r3, r5
 800a5e4:	9904      	ldr	r1, [sp, #16]
 800a5e6:	3315      	adds	r3, #21
 800a5e8:	9200      	str	r2, [sp, #0]
 800a5ea:	4299      	cmp	r1, r3
 800a5ec:	d305      	bcc.n	800a5fa <__multiply+0x8a>
 800a5ee:	1b4b      	subs	r3, r1, r5
 800a5f0:	3b15      	subs	r3, #21
 800a5f2:	089b      	lsrs	r3, r3, #2
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	9305      	str	r3, [sp, #20]
 800a5fa:	9b07      	ldr	r3, [sp, #28]
 800a5fc:	9a00      	ldr	r2, [sp, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d311      	bcc.n	800a626 <__multiply+0xb6>
 800a602:	9b02      	ldr	r3, [sp, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	dd06      	ble.n	800a616 <__multiply+0xa6>
 800a608:	9b03      	ldr	r3, [sp, #12]
 800a60a:	3b04      	subs	r3, #4
 800a60c:	9303      	str	r3, [sp, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d054      	beq.n	800a6c0 <__multiply+0x150>
 800a616:	9b01      	ldr	r3, [sp, #4]
 800a618:	9a02      	ldr	r2, [sp, #8]
 800a61a:	0018      	movs	r0, r3
 800a61c:	611a      	str	r2, [r3, #16]
 800a61e:	b009      	add	sp, #36	; 0x24
 800a620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a622:	c304      	stmia	r3!, {r2}
 800a624:	e7cd      	b.n	800a5c2 <__multiply+0x52>
 800a626:	9b00      	ldr	r3, [sp, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	b298      	uxth	r0, r3
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d01c      	beq.n	800a66a <__multiply+0xfa>
 800a630:	4667      	mov	r7, ip
 800a632:	2400      	movs	r4, #0
 800a634:	9e06      	ldr	r6, [sp, #24]
 800a636:	ce02      	ldmia	r6!, {r1}
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	b28b      	uxth	r3, r1
 800a63c:	4343      	muls	r3, r0
 800a63e:	0c09      	lsrs	r1, r1, #16
 800a640:	4341      	muls	r1, r0
 800a642:	b292      	uxth	r2, r2
 800a644:	189b      	adds	r3, r3, r2
 800a646:	191b      	adds	r3, r3, r4
 800a648:	000c      	movs	r4, r1
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	0c11      	lsrs	r1, r2, #16
 800a64e:	1861      	adds	r1, r4, r1
 800a650:	0c1c      	lsrs	r4, r3, #16
 800a652:	1909      	adds	r1, r1, r4
 800a654:	0c0c      	lsrs	r4, r1, #16
 800a656:	b29b      	uxth	r3, r3
 800a658:	0409      	lsls	r1, r1, #16
 800a65a:	430b      	orrs	r3, r1
 800a65c:	c708      	stmia	r7!, {r3}
 800a65e:	9b04      	ldr	r3, [sp, #16]
 800a660:	42b3      	cmp	r3, r6
 800a662:	d8e8      	bhi.n	800a636 <__multiply+0xc6>
 800a664:	4663      	mov	r3, ip
 800a666:	9a05      	ldr	r2, [sp, #20]
 800a668:	509c      	str	r4, [r3, r2]
 800a66a:	9b00      	ldr	r3, [sp, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	0c1e      	lsrs	r6, r3, #16
 800a670:	d020      	beq.n	800a6b4 <__multiply+0x144>
 800a672:	4663      	mov	r3, ip
 800a674:	002c      	movs	r4, r5
 800a676:	4660      	mov	r0, ip
 800a678:	2700      	movs	r7, #0
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3414      	adds	r4, #20
 800a67e:	6822      	ldr	r2, [r4, #0]
 800a680:	b29b      	uxth	r3, r3
 800a682:	b291      	uxth	r1, r2
 800a684:	4371      	muls	r1, r6
 800a686:	6802      	ldr	r2, [r0, #0]
 800a688:	0c12      	lsrs	r2, r2, #16
 800a68a:	1889      	adds	r1, r1, r2
 800a68c:	19cf      	adds	r7, r1, r7
 800a68e:	0439      	lsls	r1, r7, #16
 800a690:	430b      	orrs	r3, r1
 800a692:	6003      	str	r3, [r0, #0]
 800a694:	cc02      	ldmia	r4!, {r1}
 800a696:	6843      	ldr	r3, [r0, #4]
 800a698:	0c09      	lsrs	r1, r1, #16
 800a69a:	4371      	muls	r1, r6
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	0c3f      	lsrs	r7, r7, #16
 800a6a0:	18cb      	adds	r3, r1, r3
 800a6a2:	9a04      	ldr	r2, [sp, #16]
 800a6a4:	19db      	adds	r3, r3, r7
 800a6a6:	0c1f      	lsrs	r7, r3, #16
 800a6a8:	3004      	adds	r0, #4
 800a6aa:	42a2      	cmp	r2, r4
 800a6ac:	d8e7      	bhi.n	800a67e <__multiply+0x10e>
 800a6ae:	4662      	mov	r2, ip
 800a6b0:	9905      	ldr	r1, [sp, #20]
 800a6b2:	5053      	str	r3, [r2, r1]
 800a6b4:	9b00      	ldr	r3, [sp, #0]
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	2304      	movs	r3, #4
 800a6bc:	449c      	add	ip, r3
 800a6be:	e79c      	b.n	800a5fa <__multiply+0x8a>
 800a6c0:	9b02      	ldr	r3, [sp, #8]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	9302      	str	r3, [sp, #8]
 800a6c6:	e79c      	b.n	800a602 <__multiply+0x92>
 800a6c8:	0800e25f 	.word	0x0800e25f
 800a6cc:	0800e270 	.word	0x0800e270

0800a6d0 <__pow5mult>:
 800a6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	0015      	movs	r5, r2
 800a6d6:	0007      	movs	r7, r0
 800a6d8:	000e      	movs	r6, r1
 800a6da:	401a      	ands	r2, r3
 800a6dc:	421d      	tst	r5, r3
 800a6de:	d008      	beq.n	800a6f2 <__pow5mult+0x22>
 800a6e0:	4925      	ldr	r1, [pc, #148]	; (800a778 <__pow5mult+0xa8>)
 800a6e2:	3a01      	subs	r2, #1
 800a6e4:	0092      	lsls	r2, r2, #2
 800a6e6:	5852      	ldr	r2, [r2, r1]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	0031      	movs	r1, r6
 800a6ec:	f7ff fe9e 	bl	800a42c <__multadd>
 800a6f0:	0006      	movs	r6, r0
 800a6f2:	10ad      	asrs	r5, r5, #2
 800a6f4:	d03d      	beq.n	800a772 <__pow5mult+0xa2>
 800a6f6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a6f8:	2c00      	cmp	r4, #0
 800a6fa:	d10f      	bne.n	800a71c <__pow5mult+0x4c>
 800a6fc:	2010      	movs	r0, #16
 800a6fe:	f7ff fe0f 	bl	800a320 <malloc>
 800a702:	1e02      	subs	r2, r0, #0
 800a704:	6278      	str	r0, [r7, #36]	; 0x24
 800a706:	d105      	bne.n	800a714 <__pow5mult+0x44>
 800a708:	21d7      	movs	r1, #215	; 0xd7
 800a70a:	4b1c      	ldr	r3, [pc, #112]	; (800a77c <__pow5mult+0xac>)
 800a70c:	481c      	ldr	r0, [pc, #112]	; (800a780 <__pow5mult+0xb0>)
 800a70e:	0049      	lsls	r1, r1, #1
 800a710:	f000 fbec 	bl	800aeec <__assert_func>
 800a714:	6044      	str	r4, [r0, #4]
 800a716:	6084      	str	r4, [r0, #8]
 800a718:	6004      	str	r4, [r0, #0]
 800a71a:	60c4      	str	r4, [r0, #12]
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	689c      	ldr	r4, [r3, #8]
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	2c00      	cmp	r4, #0
 800a724:	d108      	bne.n	800a738 <__pow5mult+0x68>
 800a726:	0038      	movs	r0, r7
 800a728:	4916      	ldr	r1, [pc, #88]	; (800a784 <__pow5mult+0xb4>)
 800a72a:	f7ff ff0b 	bl	800a544 <__i2b>
 800a72e:	9b01      	ldr	r3, [sp, #4]
 800a730:	0004      	movs	r4, r0
 800a732:	6098      	str	r0, [r3, #8]
 800a734:	2300      	movs	r3, #0
 800a736:	6003      	str	r3, [r0, #0]
 800a738:	2301      	movs	r3, #1
 800a73a:	421d      	tst	r5, r3
 800a73c:	d00a      	beq.n	800a754 <__pow5mult+0x84>
 800a73e:	0031      	movs	r1, r6
 800a740:	0022      	movs	r2, r4
 800a742:	0038      	movs	r0, r7
 800a744:	f7ff ff14 	bl	800a570 <__multiply>
 800a748:	0031      	movs	r1, r6
 800a74a:	9001      	str	r0, [sp, #4]
 800a74c:	0038      	movs	r0, r7
 800a74e:	f7ff fe49 	bl	800a3e4 <_Bfree>
 800a752:	9e01      	ldr	r6, [sp, #4]
 800a754:	106d      	asrs	r5, r5, #1
 800a756:	d00c      	beq.n	800a772 <__pow5mult+0xa2>
 800a758:	6820      	ldr	r0, [r4, #0]
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d107      	bne.n	800a76e <__pow5mult+0x9e>
 800a75e:	0022      	movs	r2, r4
 800a760:	0021      	movs	r1, r4
 800a762:	0038      	movs	r0, r7
 800a764:	f7ff ff04 	bl	800a570 <__multiply>
 800a768:	2300      	movs	r3, #0
 800a76a:	6020      	str	r0, [r4, #0]
 800a76c:	6003      	str	r3, [r0, #0]
 800a76e:	0004      	movs	r4, r0
 800a770:	e7e2      	b.n	800a738 <__pow5mult+0x68>
 800a772:	0030      	movs	r0, r6
 800a774:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a776:	46c0      	nop			; (mov r8, r8)
 800a778:	0800e3c0 	.word	0x0800e3c0
 800a77c:	0800e1e9 	.word	0x0800e1e9
 800a780:	0800e270 	.word	0x0800e270
 800a784:	00000271 	.word	0x00000271

0800a788 <__lshift>:
 800a788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a78a:	000c      	movs	r4, r1
 800a78c:	0017      	movs	r7, r2
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	1155      	asrs	r5, r2, #5
 800a792:	b087      	sub	sp, #28
 800a794:	18eb      	adds	r3, r5, r3
 800a796:	9302      	str	r3, [sp, #8]
 800a798:	3301      	adds	r3, #1
 800a79a:	9301      	str	r3, [sp, #4]
 800a79c:	6849      	ldr	r1, [r1, #4]
 800a79e:	68a3      	ldr	r3, [r4, #8]
 800a7a0:	9004      	str	r0, [sp, #16]
 800a7a2:	9a01      	ldr	r2, [sp, #4]
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	db11      	blt.n	800a7cc <__lshift+0x44>
 800a7a8:	9804      	ldr	r0, [sp, #16]
 800a7aa:	f7ff fdd7 	bl	800a35c <_Balloc>
 800a7ae:	0002      	movs	r2, r0
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	3214      	adds	r2, #20
 800a7b4:	0006      	movs	r6, r0
 800a7b6:	0011      	movs	r1, r2
 800a7b8:	9203      	str	r2, [sp, #12]
 800a7ba:	4298      	cmp	r0, r3
 800a7bc:	d10d      	bne.n	800a7da <__lshift+0x52>
 800a7be:	21da      	movs	r1, #218	; 0xda
 800a7c0:	0002      	movs	r2, r0
 800a7c2:	4b27      	ldr	r3, [pc, #156]	; (800a860 <__lshift+0xd8>)
 800a7c4:	4827      	ldr	r0, [pc, #156]	; (800a864 <__lshift+0xdc>)
 800a7c6:	31ff      	adds	r1, #255	; 0xff
 800a7c8:	f000 fb90 	bl	800aeec <__assert_func>
 800a7cc:	3101      	adds	r1, #1
 800a7ce:	005b      	lsls	r3, r3, #1
 800a7d0:	e7e7      	b.n	800a7a2 <__lshift+0x1a>
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	0098      	lsls	r0, r3, #2
 800a7d6:	500a      	str	r2, [r1, r0]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	42ab      	cmp	r3, r5
 800a7dc:	dbf9      	blt.n	800a7d2 <__lshift+0x4a>
 800a7de:	43eb      	mvns	r3, r5
 800a7e0:	17db      	asrs	r3, r3, #31
 800a7e2:	401d      	ands	r5, r3
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	00ad      	lsls	r5, r5, #2
 800a7e8:	211f      	movs	r1, #31
 800a7ea:	0038      	movs	r0, r7
 800a7ec:	195d      	adds	r5, r3, r5
 800a7ee:	0023      	movs	r3, r4
 800a7f0:	6922      	ldr	r2, [r4, #16]
 800a7f2:	3314      	adds	r3, #20
 800a7f4:	0092      	lsls	r2, r2, #2
 800a7f6:	4008      	ands	r0, r1
 800a7f8:	4684      	mov	ip, r0
 800a7fa:	189a      	adds	r2, r3, r2
 800a7fc:	420f      	tst	r7, r1
 800a7fe:	d02a      	beq.n	800a856 <__lshift+0xce>
 800a800:	3101      	adds	r1, #1
 800a802:	1a09      	subs	r1, r1, r0
 800a804:	9105      	str	r1, [sp, #20]
 800a806:	2100      	movs	r1, #0
 800a808:	9503      	str	r5, [sp, #12]
 800a80a:	4667      	mov	r7, ip
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	40b8      	lsls	r0, r7
 800a810:	4301      	orrs	r1, r0
 800a812:	9803      	ldr	r0, [sp, #12]
 800a814:	c002      	stmia	r0!, {r1}
 800a816:	cb02      	ldmia	r3!, {r1}
 800a818:	9003      	str	r0, [sp, #12]
 800a81a:	9805      	ldr	r0, [sp, #20]
 800a81c:	40c1      	lsrs	r1, r0
 800a81e:	429a      	cmp	r2, r3
 800a820:	d8f3      	bhi.n	800a80a <__lshift+0x82>
 800a822:	0020      	movs	r0, r4
 800a824:	3015      	adds	r0, #21
 800a826:	2304      	movs	r3, #4
 800a828:	4282      	cmp	r2, r0
 800a82a:	d304      	bcc.n	800a836 <__lshift+0xae>
 800a82c:	1b13      	subs	r3, r2, r4
 800a82e:	3b15      	subs	r3, #21
 800a830:	089b      	lsrs	r3, r3, #2
 800a832:	3301      	adds	r3, #1
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	50e9      	str	r1, [r5, r3]
 800a838:	2900      	cmp	r1, #0
 800a83a:	d002      	beq.n	800a842 <__lshift+0xba>
 800a83c:	9b02      	ldr	r3, [sp, #8]
 800a83e:	3302      	adds	r3, #2
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	9b01      	ldr	r3, [sp, #4]
 800a844:	9804      	ldr	r0, [sp, #16]
 800a846:	3b01      	subs	r3, #1
 800a848:	0021      	movs	r1, r4
 800a84a:	6133      	str	r3, [r6, #16]
 800a84c:	f7ff fdca 	bl	800a3e4 <_Bfree>
 800a850:	0030      	movs	r0, r6
 800a852:	b007      	add	sp, #28
 800a854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a856:	cb02      	ldmia	r3!, {r1}
 800a858:	c502      	stmia	r5!, {r1}
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d8fb      	bhi.n	800a856 <__lshift+0xce>
 800a85e:	e7f0      	b.n	800a842 <__lshift+0xba>
 800a860:	0800e25f 	.word	0x0800e25f
 800a864:	0800e270 	.word	0x0800e270

0800a868 <__mcmp>:
 800a868:	6902      	ldr	r2, [r0, #16]
 800a86a:	690b      	ldr	r3, [r1, #16]
 800a86c:	b530      	push	{r4, r5, lr}
 800a86e:	0004      	movs	r4, r0
 800a870:	1ad0      	subs	r0, r2, r3
 800a872:	429a      	cmp	r2, r3
 800a874:	d10d      	bne.n	800a892 <__mcmp+0x2a>
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	3414      	adds	r4, #20
 800a87a:	3114      	adds	r1, #20
 800a87c:	18e2      	adds	r2, r4, r3
 800a87e:	18c9      	adds	r1, r1, r3
 800a880:	3a04      	subs	r2, #4
 800a882:	3904      	subs	r1, #4
 800a884:	6815      	ldr	r5, [r2, #0]
 800a886:	680b      	ldr	r3, [r1, #0]
 800a888:	429d      	cmp	r5, r3
 800a88a:	d003      	beq.n	800a894 <__mcmp+0x2c>
 800a88c:	2001      	movs	r0, #1
 800a88e:	429d      	cmp	r5, r3
 800a890:	d303      	bcc.n	800a89a <__mcmp+0x32>
 800a892:	bd30      	pop	{r4, r5, pc}
 800a894:	4294      	cmp	r4, r2
 800a896:	d3f3      	bcc.n	800a880 <__mcmp+0x18>
 800a898:	e7fb      	b.n	800a892 <__mcmp+0x2a>
 800a89a:	4240      	negs	r0, r0
 800a89c:	e7f9      	b.n	800a892 <__mcmp+0x2a>
	...

0800a8a0 <__mdiff>:
 800a8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8a2:	000e      	movs	r6, r1
 800a8a4:	0007      	movs	r7, r0
 800a8a6:	0011      	movs	r1, r2
 800a8a8:	0030      	movs	r0, r6
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	0014      	movs	r4, r2
 800a8ae:	f7ff ffdb 	bl	800a868 <__mcmp>
 800a8b2:	1e05      	subs	r5, r0, #0
 800a8b4:	d110      	bne.n	800a8d8 <__mdiff+0x38>
 800a8b6:	0001      	movs	r1, r0
 800a8b8:	0038      	movs	r0, r7
 800a8ba:	f7ff fd4f 	bl	800a35c <_Balloc>
 800a8be:	1e02      	subs	r2, r0, #0
 800a8c0:	d104      	bne.n	800a8cc <__mdiff+0x2c>
 800a8c2:	4b40      	ldr	r3, [pc, #256]	; (800a9c4 <__mdiff+0x124>)
 800a8c4:	4940      	ldr	r1, [pc, #256]	; (800a9c8 <__mdiff+0x128>)
 800a8c6:	4841      	ldr	r0, [pc, #260]	; (800a9cc <__mdiff+0x12c>)
 800a8c8:	f000 fb10 	bl	800aeec <__assert_func>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	6145      	str	r5, [r0, #20]
 800a8d0:	6103      	str	r3, [r0, #16]
 800a8d2:	0010      	movs	r0, r2
 800a8d4:	b007      	add	sp, #28
 800a8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d8:	2301      	movs	r3, #1
 800a8da:	9301      	str	r3, [sp, #4]
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	db04      	blt.n	800a8ea <__mdiff+0x4a>
 800a8e0:	0023      	movs	r3, r4
 800a8e2:	0034      	movs	r4, r6
 800a8e4:	001e      	movs	r6, r3
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	9301      	str	r3, [sp, #4]
 800a8ea:	0038      	movs	r0, r7
 800a8ec:	6861      	ldr	r1, [r4, #4]
 800a8ee:	f7ff fd35 	bl	800a35c <_Balloc>
 800a8f2:	1e02      	subs	r2, r0, #0
 800a8f4:	d103      	bne.n	800a8fe <__mdiff+0x5e>
 800a8f6:	2190      	movs	r1, #144	; 0x90
 800a8f8:	4b32      	ldr	r3, [pc, #200]	; (800a9c4 <__mdiff+0x124>)
 800a8fa:	0089      	lsls	r1, r1, #2
 800a8fc:	e7e3      	b.n	800a8c6 <__mdiff+0x26>
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	2700      	movs	r7, #0
 800a902:	60c3      	str	r3, [r0, #12]
 800a904:	6920      	ldr	r0, [r4, #16]
 800a906:	3414      	adds	r4, #20
 800a908:	9401      	str	r4, [sp, #4]
 800a90a:	9b01      	ldr	r3, [sp, #4]
 800a90c:	0084      	lsls	r4, r0, #2
 800a90e:	191b      	adds	r3, r3, r4
 800a910:	0034      	movs	r4, r6
 800a912:	9302      	str	r3, [sp, #8]
 800a914:	6933      	ldr	r3, [r6, #16]
 800a916:	3414      	adds	r4, #20
 800a918:	0099      	lsls	r1, r3, #2
 800a91a:	1863      	adds	r3, r4, r1
 800a91c:	9303      	str	r3, [sp, #12]
 800a91e:	0013      	movs	r3, r2
 800a920:	3314      	adds	r3, #20
 800a922:	469c      	mov	ip, r3
 800a924:	9305      	str	r3, [sp, #20]
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	9304      	str	r3, [sp, #16]
 800a92a:	9b04      	ldr	r3, [sp, #16]
 800a92c:	cc02      	ldmia	r4!, {r1}
 800a92e:	cb20      	ldmia	r3!, {r5}
 800a930:	9304      	str	r3, [sp, #16]
 800a932:	b2ab      	uxth	r3, r5
 800a934:	19df      	adds	r7, r3, r7
 800a936:	b28b      	uxth	r3, r1
 800a938:	1afb      	subs	r3, r7, r3
 800a93a:	0c2d      	lsrs	r5, r5, #16
 800a93c:	0c09      	lsrs	r1, r1, #16
 800a93e:	1a69      	subs	r1, r5, r1
 800a940:	141d      	asrs	r5, r3, #16
 800a942:	1949      	adds	r1, r1, r5
 800a944:	140f      	asrs	r7, r1, #16
 800a946:	b29b      	uxth	r3, r3
 800a948:	0409      	lsls	r1, r1, #16
 800a94a:	430b      	orrs	r3, r1
 800a94c:	4661      	mov	r1, ip
 800a94e:	c108      	stmia	r1!, {r3}
 800a950:	9b03      	ldr	r3, [sp, #12]
 800a952:	468c      	mov	ip, r1
 800a954:	42a3      	cmp	r3, r4
 800a956:	d8e8      	bhi.n	800a92a <__mdiff+0x8a>
 800a958:	0031      	movs	r1, r6
 800a95a:	9c03      	ldr	r4, [sp, #12]
 800a95c:	3115      	adds	r1, #21
 800a95e:	2304      	movs	r3, #4
 800a960:	428c      	cmp	r4, r1
 800a962:	d304      	bcc.n	800a96e <__mdiff+0xce>
 800a964:	1ba3      	subs	r3, r4, r6
 800a966:	3b15      	subs	r3, #21
 800a968:	089b      	lsrs	r3, r3, #2
 800a96a:	3301      	adds	r3, #1
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	9901      	ldr	r1, [sp, #4]
 800a970:	18cc      	adds	r4, r1, r3
 800a972:	9905      	ldr	r1, [sp, #20]
 800a974:	0026      	movs	r6, r4
 800a976:	18cb      	adds	r3, r1, r3
 800a978:	469c      	mov	ip, r3
 800a97a:	9902      	ldr	r1, [sp, #8]
 800a97c:	428e      	cmp	r6, r1
 800a97e:	d310      	bcc.n	800a9a2 <__mdiff+0x102>
 800a980:	9e02      	ldr	r6, [sp, #8]
 800a982:	1ee5      	subs	r5, r4, #3
 800a984:	2100      	movs	r1, #0
 800a986:	42ae      	cmp	r6, r5
 800a988:	d304      	bcc.n	800a994 <__mdiff+0xf4>
 800a98a:	0031      	movs	r1, r6
 800a98c:	3103      	adds	r1, #3
 800a98e:	1b09      	subs	r1, r1, r4
 800a990:	0889      	lsrs	r1, r1, #2
 800a992:	0089      	lsls	r1, r1, #2
 800a994:	185b      	adds	r3, r3, r1
 800a996:	3b04      	subs	r3, #4
 800a998:	6819      	ldr	r1, [r3, #0]
 800a99a:	2900      	cmp	r1, #0
 800a99c:	d00f      	beq.n	800a9be <__mdiff+0x11e>
 800a99e:	6110      	str	r0, [r2, #16]
 800a9a0:	e797      	b.n	800a8d2 <__mdiff+0x32>
 800a9a2:	ce02      	ldmia	r6!, {r1}
 800a9a4:	b28d      	uxth	r5, r1
 800a9a6:	19ed      	adds	r5, r5, r7
 800a9a8:	0c0f      	lsrs	r7, r1, #16
 800a9aa:	1429      	asrs	r1, r5, #16
 800a9ac:	1879      	adds	r1, r7, r1
 800a9ae:	140f      	asrs	r7, r1, #16
 800a9b0:	b2ad      	uxth	r5, r5
 800a9b2:	0409      	lsls	r1, r1, #16
 800a9b4:	430d      	orrs	r5, r1
 800a9b6:	4661      	mov	r1, ip
 800a9b8:	c120      	stmia	r1!, {r5}
 800a9ba:	468c      	mov	ip, r1
 800a9bc:	e7dd      	b.n	800a97a <__mdiff+0xda>
 800a9be:	3801      	subs	r0, #1
 800a9c0:	e7e9      	b.n	800a996 <__mdiff+0xf6>
 800a9c2:	46c0      	nop			; (mov r8, r8)
 800a9c4:	0800e25f 	.word	0x0800e25f
 800a9c8:	00000232 	.word	0x00000232
 800a9cc:	0800e270 	.word	0x0800e270

0800a9d0 <__d2b>:
 800a9d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9d2:	2101      	movs	r1, #1
 800a9d4:	0014      	movs	r4, r2
 800a9d6:	001e      	movs	r6, r3
 800a9d8:	9f08      	ldr	r7, [sp, #32]
 800a9da:	f7ff fcbf 	bl	800a35c <_Balloc>
 800a9de:	1e05      	subs	r5, r0, #0
 800a9e0:	d105      	bne.n	800a9ee <__d2b+0x1e>
 800a9e2:	0002      	movs	r2, r0
 800a9e4:	4b26      	ldr	r3, [pc, #152]	; (800aa80 <__d2b+0xb0>)
 800a9e6:	4927      	ldr	r1, [pc, #156]	; (800aa84 <__d2b+0xb4>)
 800a9e8:	4827      	ldr	r0, [pc, #156]	; (800aa88 <__d2b+0xb8>)
 800a9ea:	f000 fa7f 	bl	800aeec <__assert_func>
 800a9ee:	0333      	lsls	r3, r6, #12
 800a9f0:	0076      	lsls	r6, r6, #1
 800a9f2:	0b1b      	lsrs	r3, r3, #12
 800a9f4:	0d76      	lsrs	r6, r6, #21
 800a9f6:	d124      	bne.n	800aa42 <__d2b+0x72>
 800a9f8:	9301      	str	r3, [sp, #4]
 800a9fa:	2c00      	cmp	r4, #0
 800a9fc:	d027      	beq.n	800aa4e <__d2b+0x7e>
 800a9fe:	4668      	mov	r0, sp
 800aa00:	9400      	str	r4, [sp, #0]
 800aa02:	f7ff fd71 	bl	800a4e8 <__lo0bits>
 800aa06:	9c00      	ldr	r4, [sp, #0]
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d01e      	beq.n	800aa4a <__d2b+0x7a>
 800aa0c:	9b01      	ldr	r3, [sp, #4]
 800aa0e:	2120      	movs	r1, #32
 800aa10:	001a      	movs	r2, r3
 800aa12:	1a09      	subs	r1, r1, r0
 800aa14:	408a      	lsls	r2, r1
 800aa16:	40c3      	lsrs	r3, r0
 800aa18:	4322      	orrs	r2, r4
 800aa1a:	616a      	str	r2, [r5, #20]
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	9c01      	ldr	r4, [sp, #4]
 800aa20:	61ac      	str	r4, [r5, #24]
 800aa22:	1e63      	subs	r3, r4, #1
 800aa24:	419c      	sbcs	r4, r3
 800aa26:	3401      	adds	r4, #1
 800aa28:	612c      	str	r4, [r5, #16]
 800aa2a:	2e00      	cmp	r6, #0
 800aa2c:	d018      	beq.n	800aa60 <__d2b+0x90>
 800aa2e:	4b17      	ldr	r3, [pc, #92]	; (800aa8c <__d2b+0xbc>)
 800aa30:	18f6      	adds	r6, r6, r3
 800aa32:	2335      	movs	r3, #53	; 0x35
 800aa34:	1836      	adds	r6, r6, r0
 800aa36:	1a18      	subs	r0, r3, r0
 800aa38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa3a:	603e      	str	r6, [r7, #0]
 800aa3c:	6018      	str	r0, [r3, #0]
 800aa3e:	0028      	movs	r0, r5
 800aa40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa42:	2280      	movs	r2, #128	; 0x80
 800aa44:	0352      	lsls	r2, r2, #13
 800aa46:	4313      	orrs	r3, r2
 800aa48:	e7d6      	b.n	800a9f8 <__d2b+0x28>
 800aa4a:	616c      	str	r4, [r5, #20]
 800aa4c:	e7e7      	b.n	800aa1e <__d2b+0x4e>
 800aa4e:	a801      	add	r0, sp, #4
 800aa50:	f7ff fd4a 	bl	800a4e8 <__lo0bits>
 800aa54:	2401      	movs	r4, #1
 800aa56:	9b01      	ldr	r3, [sp, #4]
 800aa58:	612c      	str	r4, [r5, #16]
 800aa5a:	616b      	str	r3, [r5, #20]
 800aa5c:	3020      	adds	r0, #32
 800aa5e:	e7e4      	b.n	800aa2a <__d2b+0x5a>
 800aa60:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <__d2b+0xc0>)
 800aa62:	18c0      	adds	r0, r0, r3
 800aa64:	4b0b      	ldr	r3, [pc, #44]	; (800aa94 <__d2b+0xc4>)
 800aa66:	6038      	str	r0, [r7, #0]
 800aa68:	18e3      	adds	r3, r4, r3
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	18eb      	adds	r3, r5, r3
 800aa6e:	6958      	ldr	r0, [r3, #20]
 800aa70:	f7ff fd20 	bl	800a4b4 <__hi0bits>
 800aa74:	0164      	lsls	r4, r4, #5
 800aa76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa78:	1a24      	subs	r4, r4, r0
 800aa7a:	601c      	str	r4, [r3, #0]
 800aa7c:	e7df      	b.n	800aa3e <__d2b+0x6e>
 800aa7e:	46c0      	nop			; (mov r8, r8)
 800aa80:	0800e25f 	.word	0x0800e25f
 800aa84:	0000030a 	.word	0x0000030a
 800aa88:	0800e270 	.word	0x0800e270
 800aa8c:	fffffbcd 	.word	0xfffffbcd
 800aa90:	fffffbce 	.word	0xfffffbce
 800aa94:	3fffffff 	.word	0x3fffffff

0800aa98 <_calloc_r>:
 800aa98:	434a      	muls	r2, r1
 800aa9a:	b570      	push	{r4, r5, r6, lr}
 800aa9c:	0011      	movs	r1, r2
 800aa9e:	0015      	movs	r5, r2
 800aaa0:	f000 f852 	bl	800ab48 <_malloc_r>
 800aaa4:	1e04      	subs	r4, r0, #0
 800aaa6:	d003      	beq.n	800aab0 <_calloc_r+0x18>
 800aaa8:	002a      	movs	r2, r5
 800aaaa:	2100      	movs	r1, #0
 800aaac:	f7fe f8e8 	bl	8008c80 <memset>
 800aab0:	0020      	movs	r0, r4
 800aab2:	bd70      	pop	{r4, r5, r6, pc}

0800aab4 <_free_r>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	0005      	movs	r5, r0
 800aab8:	2900      	cmp	r1, #0
 800aaba:	d010      	beq.n	800aade <_free_r+0x2a>
 800aabc:	1f0c      	subs	r4, r1, #4
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	da00      	bge.n	800aac6 <_free_r+0x12>
 800aac4:	18e4      	adds	r4, r4, r3
 800aac6:	0028      	movs	r0, r5
 800aac8:	f000 fa64 	bl	800af94 <__malloc_lock>
 800aacc:	4a1d      	ldr	r2, [pc, #116]	; (800ab44 <_free_r+0x90>)
 800aace:	6813      	ldr	r3, [r2, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d105      	bne.n	800aae0 <_free_r+0x2c>
 800aad4:	6063      	str	r3, [r4, #4]
 800aad6:	6014      	str	r4, [r2, #0]
 800aad8:	0028      	movs	r0, r5
 800aada:	f000 fa63 	bl	800afa4 <__malloc_unlock>
 800aade:	bd70      	pop	{r4, r5, r6, pc}
 800aae0:	42a3      	cmp	r3, r4
 800aae2:	d908      	bls.n	800aaf6 <_free_r+0x42>
 800aae4:	6821      	ldr	r1, [r4, #0]
 800aae6:	1860      	adds	r0, r4, r1
 800aae8:	4283      	cmp	r3, r0
 800aaea:	d1f3      	bne.n	800aad4 <_free_r+0x20>
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	1841      	adds	r1, r0, r1
 800aaf2:	6021      	str	r1, [r4, #0]
 800aaf4:	e7ee      	b.n	800aad4 <_free_r+0x20>
 800aaf6:	001a      	movs	r2, r3
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <_free_r+0x4e>
 800aafe:	42a3      	cmp	r3, r4
 800ab00:	d9f9      	bls.n	800aaf6 <_free_r+0x42>
 800ab02:	6811      	ldr	r1, [r2, #0]
 800ab04:	1850      	adds	r0, r2, r1
 800ab06:	42a0      	cmp	r0, r4
 800ab08:	d10b      	bne.n	800ab22 <_free_r+0x6e>
 800ab0a:	6820      	ldr	r0, [r4, #0]
 800ab0c:	1809      	adds	r1, r1, r0
 800ab0e:	1850      	adds	r0, r2, r1
 800ab10:	6011      	str	r1, [r2, #0]
 800ab12:	4283      	cmp	r3, r0
 800ab14:	d1e0      	bne.n	800aad8 <_free_r+0x24>
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	1841      	adds	r1, r0, r1
 800ab1c:	6011      	str	r1, [r2, #0]
 800ab1e:	6053      	str	r3, [r2, #4]
 800ab20:	e7da      	b.n	800aad8 <_free_r+0x24>
 800ab22:	42a0      	cmp	r0, r4
 800ab24:	d902      	bls.n	800ab2c <_free_r+0x78>
 800ab26:	230c      	movs	r3, #12
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	e7d5      	b.n	800aad8 <_free_r+0x24>
 800ab2c:	6821      	ldr	r1, [r4, #0]
 800ab2e:	1860      	adds	r0, r4, r1
 800ab30:	4283      	cmp	r3, r0
 800ab32:	d103      	bne.n	800ab3c <_free_r+0x88>
 800ab34:	6818      	ldr	r0, [r3, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	1841      	adds	r1, r0, r1
 800ab3a:	6021      	str	r1, [r4, #0]
 800ab3c:	6063      	str	r3, [r4, #4]
 800ab3e:	6054      	str	r4, [r2, #4]
 800ab40:	e7ca      	b.n	800aad8 <_free_r+0x24>
 800ab42:	46c0      	nop			; (mov r8, r8)
 800ab44:	20000200 	.word	0x20000200

0800ab48 <_malloc_r>:
 800ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	1ccd      	adds	r5, r1, #3
 800ab4e:	439d      	bics	r5, r3
 800ab50:	3508      	adds	r5, #8
 800ab52:	0006      	movs	r6, r0
 800ab54:	2d0c      	cmp	r5, #12
 800ab56:	d21f      	bcs.n	800ab98 <_malloc_r+0x50>
 800ab58:	250c      	movs	r5, #12
 800ab5a:	42a9      	cmp	r1, r5
 800ab5c:	d81e      	bhi.n	800ab9c <_malloc_r+0x54>
 800ab5e:	0030      	movs	r0, r6
 800ab60:	f000 fa18 	bl	800af94 <__malloc_lock>
 800ab64:	4925      	ldr	r1, [pc, #148]	; (800abfc <_malloc_r+0xb4>)
 800ab66:	680a      	ldr	r2, [r1, #0]
 800ab68:	0014      	movs	r4, r2
 800ab6a:	2c00      	cmp	r4, #0
 800ab6c:	d11a      	bne.n	800aba4 <_malloc_r+0x5c>
 800ab6e:	4f24      	ldr	r7, [pc, #144]	; (800ac00 <_malloc_r+0xb8>)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d104      	bne.n	800ab80 <_malloc_r+0x38>
 800ab76:	0021      	movs	r1, r4
 800ab78:	0030      	movs	r0, r6
 800ab7a:	f000 f9a5 	bl	800aec8 <_sbrk_r>
 800ab7e:	6038      	str	r0, [r7, #0]
 800ab80:	0029      	movs	r1, r5
 800ab82:	0030      	movs	r0, r6
 800ab84:	f000 f9a0 	bl	800aec8 <_sbrk_r>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	d12b      	bne.n	800abe4 <_malloc_r+0x9c>
 800ab8c:	230c      	movs	r3, #12
 800ab8e:	0030      	movs	r0, r6
 800ab90:	6033      	str	r3, [r6, #0]
 800ab92:	f000 fa07 	bl	800afa4 <__malloc_unlock>
 800ab96:	e003      	b.n	800aba0 <_malloc_r+0x58>
 800ab98:	2d00      	cmp	r5, #0
 800ab9a:	dade      	bge.n	800ab5a <_malloc_r+0x12>
 800ab9c:	230c      	movs	r3, #12
 800ab9e:	6033      	str	r3, [r6, #0]
 800aba0:	2000      	movs	r0, #0
 800aba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	1b5b      	subs	r3, r3, r5
 800aba8:	d419      	bmi.n	800abde <_malloc_r+0x96>
 800abaa:	2b0b      	cmp	r3, #11
 800abac:	d903      	bls.n	800abb6 <_malloc_r+0x6e>
 800abae:	6023      	str	r3, [r4, #0]
 800abb0:	18e4      	adds	r4, r4, r3
 800abb2:	6025      	str	r5, [r4, #0]
 800abb4:	e003      	b.n	800abbe <_malloc_r+0x76>
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	42a2      	cmp	r2, r4
 800abba:	d10e      	bne.n	800abda <_malloc_r+0x92>
 800abbc:	600b      	str	r3, [r1, #0]
 800abbe:	0030      	movs	r0, r6
 800abc0:	f000 f9f0 	bl	800afa4 <__malloc_unlock>
 800abc4:	0020      	movs	r0, r4
 800abc6:	2207      	movs	r2, #7
 800abc8:	300b      	adds	r0, #11
 800abca:	1d23      	adds	r3, r4, #4
 800abcc:	4390      	bics	r0, r2
 800abce:	1ac2      	subs	r2, r0, r3
 800abd0:	4298      	cmp	r0, r3
 800abd2:	d0e6      	beq.n	800aba2 <_malloc_r+0x5a>
 800abd4:	1a1b      	subs	r3, r3, r0
 800abd6:	50a3      	str	r3, [r4, r2]
 800abd8:	e7e3      	b.n	800aba2 <_malloc_r+0x5a>
 800abda:	6053      	str	r3, [r2, #4]
 800abdc:	e7ef      	b.n	800abbe <_malloc_r+0x76>
 800abde:	0022      	movs	r2, r4
 800abe0:	6864      	ldr	r4, [r4, #4]
 800abe2:	e7c2      	b.n	800ab6a <_malloc_r+0x22>
 800abe4:	2303      	movs	r3, #3
 800abe6:	1cc4      	adds	r4, r0, #3
 800abe8:	439c      	bics	r4, r3
 800abea:	42a0      	cmp	r0, r4
 800abec:	d0e1      	beq.n	800abb2 <_malloc_r+0x6a>
 800abee:	1a21      	subs	r1, r4, r0
 800abf0:	0030      	movs	r0, r6
 800abf2:	f000 f969 	bl	800aec8 <_sbrk_r>
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	d1db      	bne.n	800abb2 <_malloc_r+0x6a>
 800abfa:	e7c7      	b.n	800ab8c <_malloc_r+0x44>
 800abfc:	20000200 	.word	0x20000200
 800ac00:	20000204 	.word	0x20000204

0800ac04 <__ssputs_r>:
 800ac04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac06:	688e      	ldr	r6, [r1, #8]
 800ac08:	b085      	sub	sp, #20
 800ac0a:	0007      	movs	r7, r0
 800ac0c:	000c      	movs	r4, r1
 800ac0e:	9203      	str	r2, [sp, #12]
 800ac10:	9301      	str	r3, [sp, #4]
 800ac12:	429e      	cmp	r6, r3
 800ac14:	d83c      	bhi.n	800ac90 <__ssputs_r+0x8c>
 800ac16:	2390      	movs	r3, #144	; 0x90
 800ac18:	898a      	ldrh	r2, [r1, #12]
 800ac1a:	00db      	lsls	r3, r3, #3
 800ac1c:	421a      	tst	r2, r3
 800ac1e:	d034      	beq.n	800ac8a <__ssputs_r+0x86>
 800ac20:	2503      	movs	r5, #3
 800ac22:	6909      	ldr	r1, [r1, #16]
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	1a5b      	subs	r3, r3, r1
 800ac28:	9302      	str	r3, [sp, #8]
 800ac2a:	6963      	ldr	r3, [r4, #20]
 800ac2c:	9802      	ldr	r0, [sp, #8]
 800ac2e:	435d      	muls	r5, r3
 800ac30:	0feb      	lsrs	r3, r5, #31
 800ac32:	195d      	adds	r5, r3, r5
 800ac34:	9b01      	ldr	r3, [sp, #4]
 800ac36:	106d      	asrs	r5, r5, #1
 800ac38:	3301      	adds	r3, #1
 800ac3a:	181b      	adds	r3, r3, r0
 800ac3c:	42ab      	cmp	r3, r5
 800ac3e:	d900      	bls.n	800ac42 <__ssputs_r+0x3e>
 800ac40:	001d      	movs	r5, r3
 800ac42:	0553      	lsls	r3, r2, #21
 800ac44:	d532      	bpl.n	800acac <__ssputs_r+0xa8>
 800ac46:	0029      	movs	r1, r5
 800ac48:	0038      	movs	r0, r7
 800ac4a:	f7ff ff7d 	bl	800ab48 <_malloc_r>
 800ac4e:	1e06      	subs	r6, r0, #0
 800ac50:	d109      	bne.n	800ac66 <__ssputs_r+0x62>
 800ac52:	230c      	movs	r3, #12
 800ac54:	603b      	str	r3, [r7, #0]
 800ac56:	2340      	movs	r3, #64	; 0x40
 800ac58:	2001      	movs	r0, #1
 800ac5a:	89a2      	ldrh	r2, [r4, #12]
 800ac5c:	4240      	negs	r0, r0
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	81a3      	strh	r3, [r4, #12]
 800ac62:	b005      	add	sp, #20
 800ac64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac66:	9a02      	ldr	r2, [sp, #8]
 800ac68:	6921      	ldr	r1, [r4, #16]
 800ac6a:	f7ff fb6e 	bl	800a34a <memcpy>
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	4a14      	ldr	r2, [pc, #80]	; (800acc4 <__ssputs_r+0xc0>)
 800ac72:	401a      	ands	r2, r3
 800ac74:	2380      	movs	r3, #128	; 0x80
 800ac76:	4313      	orrs	r3, r2
 800ac78:	81a3      	strh	r3, [r4, #12]
 800ac7a:	9b02      	ldr	r3, [sp, #8]
 800ac7c:	6126      	str	r6, [r4, #16]
 800ac7e:	18f6      	adds	r6, r6, r3
 800ac80:	6026      	str	r6, [r4, #0]
 800ac82:	6165      	str	r5, [r4, #20]
 800ac84:	9e01      	ldr	r6, [sp, #4]
 800ac86:	1aed      	subs	r5, r5, r3
 800ac88:	60a5      	str	r5, [r4, #8]
 800ac8a:	9b01      	ldr	r3, [sp, #4]
 800ac8c:	429e      	cmp	r6, r3
 800ac8e:	d900      	bls.n	800ac92 <__ssputs_r+0x8e>
 800ac90:	9e01      	ldr	r6, [sp, #4]
 800ac92:	0032      	movs	r2, r6
 800ac94:	9903      	ldr	r1, [sp, #12]
 800ac96:	6820      	ldr	r0, [r4, #0]
 800ac98:	f000 f968 	bl	800af6c <memmove>
 800ac9c:	68a3      	ldr	r3, [r4, #8]
 800ac9e:	2000      	movs	r0, #0
 800aca0:	1b9b      	subs	r3, r3, r6
 800aca2:	60a3      	str	r3, [r4, #8]
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	199e      	adds	r6, r3, r6
 800aca8:	6026      	str	r6, [r4, #0]
 800acaa:	e7da      	b.n	800ac62 <__ssputs_r+0x5e>
 800acac:	002a      	movs	r2, r5
 800acae:	0038      	movs	r0, r7
 800acb0:	f000 f980 	bl	800afb4 <_realloc_r>
 800acb4:	1e06      	subs	r6, r0, #0
 800acb6:	d1e0      	bne.n	800ac7a <__ssputs_r+0x76>
 800acb8:	0038      	movs	r0, r7
 800acba:	6921      	ldr	r1, [r4, #16]
 800acbc:	f7ff fefa 	bl	800aab4 <_free_r>
 800acc0:	e7c7      	b.n	800ac52 <__ssputs_r+0x4e>
 800acc2:	46c0      	nop			; (mov r8, r8)
 800acc4:	fffffb7f 	.word	0xfffffb7f

0800acc8 <_svfiprintf_r>:
 800acc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acca:	b0a1      	sub	sp, #132	; 0x84
 800accc:	9003      	str	r0, [sp, #12]
 800acce:	001d      	movs	r5, r3
 800acd0:	898b      	ldrh	r3, [r1, #12]
 800acd2:	000f      	movs	r7, r1
 800acd4:	0016      	movs	r6, r2
 800acd6:	061b      	lsls	r3, r3, #24
 800acd8:	d511      	bpl.n	800acfe <_svfiprintf_r+0x36>
 800acda:	690b      	ldr	r3, [r1, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10e      	bne.n	800acfe <_svfiprintf_r+0x36>
 800ace0:	2140      	movs	r1, #64	; 0x40
 800ace2:	f7ff ff31 	bl	800ab48 <_malloc_r>
 800ace6:	6038      	str	r0, [r7, #0]
 800ace8:	6138      	str	r0, [r7, #16]
 800acea:	2800      	cmp	r0, #0
 800acec:	d105      	bne.n	800acfa <_svfiprintf_r+0x32>
 800acee:	230c      	movs	r3, #12
 800acf0:	9a03      	ldr	r2, [sp, #12]
 800acf2:	3801      	subs	r0, #1
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	b021      	add	sp, #132	; 0x84
 800acf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acfa:	2340      	movs	r3, #64	; 0x40
 800acfc:	617b      	str	r3, [r7, #20]
 800acfe:	2300      	movs	r3, #0
 800ad00:	ac08      	add	r4, sp, #32
 800ad02:	6163      	str	r3, [r4, #20]
 800ad04:	3320      	adds	r3, #32
 800ad06:	7663      	strb	r3, [r4, #25]
 800ad08:	3310      	adds	r3, #16
 800ad0a:	76a3      	strb	r3, [r4, #26]
 800ad0c:	9507      	str	r5, [sp, #28]
 800ad0e:	0035      	movs	r5, r6
 800ad10:	782b      	ldrb	r3, [r5, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <_svfiprintf_r+0x52>
 800ad16:	2b25      	cmp	r3, #37	; 0x25
 800ad18:	d147      	bne.n	800adaa <_svfiprintf_r+0xe2>
 800ad1a:	1bab      	subs	r3, r5, r6
 800ad1c:	9305      	str	r3, [sp, #20]
 800ad1e:	42b5      	cmp	r5, r6
 800ad20:	d00c      	beq.n	800ad3c <_svfiprintf_r+0x74>
 800ad22:	0032      	movs	r2, r6
 800ad24:	0039      	movs	r1, r7
 800ad26:	9803      	ldr	r0, [sp, #12]
 800ad28:	f7ff ff6c 	bl	800ac04 <__ssputs_r>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d100      	bne.n	800ad32 <_svfiprintf_r+0x6a>
 800ad30:	e0ae      	b.n	800ae90 <_svfiprintf_r+0x1c8>
 800ad32:	6962      	ldr	r2, [r4, #20]
 800ad34:	9b05      	ldr	r3, [sp, #20]
 800ad36:	4694      	mov	ip, r2
 800ad38:	4463      	add	r3, ip
 800ad3a:	6163      	str	r3, [r4, #20]
 800ad3c:	782b      	ldrb	r3, [r5, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d100      	bne.n	800ad44 <_svfiprintf_r+0x7c>
 800ad42:	e0a5      	b.n	800ae90 <_svfiprintf_r+0x1c8>
 800ad44:	2201      	movs	r2, #1
 800ad46:	2300      	movs	r3, #0
 800ad48:	4252      	negs	r2, r2
 800ad4a:	6062      	str	r2, [r4, #4]
 800ad4c:	a904      	add	r1, sp, #16
 800ad4e:	3254      	adds	r2, #84	; 0x54
 800ad50:	1852      	adds	r2, r2, r1
 800ad52:	1c6e      	adds	r6, r5, #1
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	60e3      	str	r3, [r4, #12]
 800ad58:	60a3      	str	r3, [r4, #8]
 800ad5a:	7013      	strb	r3, [r2, #0]
 800ad5c:	65a3      	str	r3, [r4, #88]	; 0x58
 800ad5e:	2205      	movs	r2, #5
 800ad60:	7831      	ldrb	r1, [r6, #0]
 800ad62:	4854      	ldr	r0, [pc, #336]	; (800aeb4 <_svfiprintf_r+0x1ec>)
 800ad64:	f7ff fae6 	bl	800a334 <memchr>
 800ad68:	1c75      	adds	r5, r6, #1
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d11f      	bne.n	800adae <_svfiprintf_r+0xe6>
 800ad6e:	6822      	ldr	r2, [r4, #0]
 800ad70:	06d3      	lsls	r3, r2, #27
 800ad72:	d504      	bpl.n	800ad7e <_svfiprintf_r+0xb6>
 800ad74:	2353      	movs	r3, #83	; 0x53
 800ad76:	a904      	add	r1, sp, #16
 800ad78:	185b      	adds	r3, r3, r1
 800ad7a:	2120      	movs	r1, #32
 800ad7c:	7019      	strb	r1, [r3, #0]
 800ad7e:	0713      	lsls	r3, r2, #28
 800ad80:	d504      	bpl.n	800ad8c <_svfiprintf_r+0xc4>
 800ad82:	2353      	movs	r3, #83	; 0x53
 800ad84:	a904      	add	r1, sp, #16
 800ad86:	185b      	adds	r3, r3, r1
 800ad88:	212b      	movs	r1, #43	; 0x2b
 800ad8a:	7019      	strb	r1, [r3, #0]
 800ad8c:	7833      	ldrb	r3, [r6, #0]
 800ad8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad90:	d016      	beq.n	800adc0 <_svfiprintf_r+0xf8>
 800ad92:	0035      	movs	r5, r6
 800ad94:	2100      	movs	r1, #0
 800ad96:	200a      	movs	r0, #10
 800ad98:	68e3      	ldr	r3, [r4, #12]
 800ad9a:	782a      	ldrb	r2, [r5, #0]
 800ad9c:	1c6e      	adds	r6, r5, #1
 800ad9e:	3a30      	subs	r2, #48	; 0x30
 800ada0:	2a09      	cmp	r2, #9
 800ada2:	d94e      	bls.n	800ae42 <_svfiprintf_r+0x17a>
 800ada4:	2900      	cmp	r1, #0
 800ada6:	d111      	bne.n	800adcc <_svfiprintf_r+0x104>
 800ada8:	e017      	b.n	800adda <_svfiprintf_r+0x112>
 800adaa:	3501      	adds	r5, #1
 800adac:	e7b0      	b.n	800ad10 <_svfiprintf_r+0x48>
 800adae:	4b41      	ldr	r3, [pc, #260]	; (800aeb4 <_svfiprintf_r+0x1ec>)
 800adb0:	6822      	ldr	r2, [r4, #0]
 800adb2:	1ac0      	subs	r0, r0, r3
 800adb4:	2301      	movs	r3, #1
 800adb6:	4083      	lsls	r3, r0
 800adb8:	4313      	orrs	r3, r2
 800adba:	002e      	movs	r6, r5
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	e7ce      	b.n	800ad5e <_svfiprintf_r+0x96>
 800adc0:	9b07      	ldr	r3, [sp, #28]
 800adc2:	1d19      	adds	r1, r3, #4
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	9107      	str	r1, [sp, #28]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	db01      	blt.n	800add0 <_svfiprintf_r+0x108>
 800adcc:	930b      	str	r3, [sp, #44]	; 0x2c
 800adce:	e004      	b.n	800adda <_svfiprintf_r+0x112>
 800add0:	425b      	negs	r3, r3
 800add2:	60e3      	str	r3, [r4, #12]
 800add4:	2302      	movs	r3, #2
 800add6:	4313      	orrs	r3, r2
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	782b      	ldrb	r3, [r5, #0]
 800addc:	2b2e      	cmp	r3, #46	; 0x2e
 800adde:	d10a      	bne.n	800adf6 <_svfiprintf_r+0x12e>
 800ade0:	786b      	ldrb	r3, [r5, #1]
 800ade2:	2b2a      	cmp	r3, #42	; 0x2a
 800ade4:	d135      	bne.n	800ae52 <_svfiprintf_r+0x18a>
 800ade6:	9b07      	ldr	r3, [sp, #28]
 800ade8:	3502      	adds	r5, #2
 800adea:	1d1a      	adds	r2, r3, #4
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	9207      	str	r2, [sp, #28]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	db2b      	blt.n	800ae4c <_svfiprintf_r+0x184>
 800adf4:	9309      	str	r3, [sp, #36]	; 0x24
 800adf6:	4e30      	ldr	r6, [pc, #192]	; (800aeb8 <_svfiprintf_r+0x1f0>)
 800adf8:	2203      	movs	r2, #3
 800adfa:	0030      	movs	r0, r6
 800adfc:	7829      	ldrb	r1, [r5, #0]
 800adfe:	f7ff fa99 	bl	800a334 <memchr>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d006      	beq.n	800ae14 <_svfiprintf_r+0x14c>
 800ae06:	2340      	movs	r3, #64	; 0x40
 800ae08:	1b80      	subs	r0, r0, r6
 800ae0a:	4083      	lsls	r3, r0
 800ae0c:	6822      	ldr	r2, [r4, #0]
 800ae0e:	3501      	adds	r5, #1
 800ae10:	4313      	orrs	r3, r2
 800ae12:	6023      	str	r3, [r4, #0]
 800ae14:	7829      	ldrb	r1, [r5, #0]
 800ae16:	2206      	movs	r2, #6
 800ae18:	4828      	ldr	r0, [pc, #160]	; (800aebc <_svfiprintf_r+0x1f4>)
 800ae1a:	1c6e      	adds	r6, r5, #1
 800ae1c:	7621      	strb	r1, [r4, #24]
 800ae1e:	f7ff fa89 	bl	800a334 <memchr>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d03c      	beq.n	800aea0 <_svfiprintf_r+0x1d8>
 800ae26:	4b26      	ldr	r3, [pc, #152]	; (800aec0 <_svfiprintf_r+0x1f8>)
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d125      	bne.n	800ae78 <_svfiprintf_r+0x1b0>
 800ae2c:	2207      	movs	r2, #7
 800ae2e:	9b07      	ldr	r3, [sp, #28]
 800ae30:	3307      	adds	r3, #7
 800ae32:	4393      	bics	r3, r2
 800ae34:	3308      	adds	r3, #8
 800ae36:	9307      	str	r3, [sp, #28]
 800ae38:	6963      	ldr	r3, [r4, #20]
 800ae3a:	9a04      	ldr	r2, [sp, #16]
 800ae3c:	189b      	adds	r3, r3, r2
 800ae3e:	6163      	str	r3, [r4, #20]
 800ae40:	e765      	b.n	800ad0e <_svfiprintf_r+0x46>
 800ae42:	4343      	muls	r3, r0
 800ae44:	0035      	movs	r5, r6
 800ae46:	2101      	movs	r1, #1
 800ae48:	189b      	adds	r3, r3, r2
 800ae4a:	e7a6      	b.n	800ad9a <_svfiprintf_r+0xd2>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	425b      	negs	r3, r3
 800ae50:	e7d0      	b.n	800adf4 <_svfiprintf_r+0x12c>
 800ae52:	2300      	movs	r3, #0
 800ae54:	200a      	movs	r0, #10
 800ae56:	001a      	movs	r2, r3
 800ae58:	3501      	adds	r5, #1
 800ae5a:	6063      	str	r3, [r4, #4]
 800ae5c:	7829      	ldrb	r1, [r5, #0]
 800ae5e:	1c6e      	adds	r6, r5, #1
 800ae60:	3930      	subs	r1, #48	; 0x30
 800ae62:	2909      	cmp	r1, #9
 800ae64:	d903      	bls.n	800ae6e <_svfiprintf_r+0x1a6>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d0c5      	beq.n	800adf6 <_svfiprintf_r+0x12e>
 800ae6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae6c:	e7c3      	b.n	800adf6 <_svfiprintf_r+0x12e>
 800ae6e:	4342      	muls	r2, r0
 800ae70:	0035      	movs	r5, r6
 800ae72:	2301      	movs	r3, #1
 800ae74:	1852      	adds	r2, r2, r1
 800ae76:	e7f1      	b.n	800ae5c <_svfiprintf_r+0x194>
 800ae78:	ab07      	add	r3, sp, #28
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	003a      	movs	r2, r7
 800ae7e:	0021      	movs	r1, r4
 800ae80:	4b10      	ldr	r3, [pc, #64]	; (800aec4 <_svfiprintf_r+0x1fc>)
 800ae82:	9803      	ldr	r0, [sp, #12]
 800ae84:	f7fd ffae 	bl	8008de4 <_printf_float>
 800ae88:	9004      	str	r0, [sp, #16]
 800ae8a:	9b04      	ldr	r3, [sp, #16]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	d1d3      	bne.n	800ae38 <_svfiprintf_r+0x170>
 800ae90:	89bb      	ldrh	r3, [r7, #12]
 800ae92:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ae94:	065b      	lsls	r3, r3, #25
 800ae96:	d400      	bmi.n	800ae9a <_svfiprintf_r+0x1d2>
 800ae98:	e72d      	b.n	800acf6 <_svfiprintf_r+0x2e>
 800ae9a:	2001      	movs	r0, #1
 800ae9c:	4240      	negs	r0, r0
 800ae9e:	e72a      	b.n	800acf6 <_svfiprintf_r+0x2e>
 800aea0:	ab07      	add	r3, sp, #28
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	003a      	movs	r2, r7
 800aea6:	0021      	movs	r1, r4
 800aea8:	4b06      	ldr	r3, [pc, #24]	; (800aec4 <_svfiprintf_r+0x1fc>)
 800aeaa:	9803      	ldr	r0, [sp, #12]
 800aeac:	f7fe fa58 	bl	8009360 <_printf_i>
 800aeb0:	e7ea      	b.n	800ae88 <_svfiprintf_r+0x1c0>
 800aeb2:	46c0      	nop			; (mov r8, r8)
 800aeb4:	0800e3cc 	.word	0x0800e3cc
 800aeb8:	0800e3d2 	.word	0x0800e3d2
 800aebc:	0800e3d6 	.word	0x0800e3d6
 800aec0:	08008de5 	.word	0x08008de5
 800aec4:	0800ac05 	.word	0x0800ac05

0800aec8 <_sbrk_r>:
 800aec8:	2300      	movs	r3, #0
 800aeca:	b570      	push	{r4, r5, r6, lr}
 800aecc:	4d06      	ldr	r5, [pc, #24]	; (800aee8 <_sbrk_r+0x20>)
 800aece:	0004      	movs	r4, r0
 800aed0:	0008      	movs	r0, r1
 800aed2:	602b      	str	r3, [r5, #0]
 800aed4:	f7fa fcea 	bl	80058ac <_sbrk>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d103      	bne.n	800aee4 <_sbrk_r+0x1c>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d000      	beq.n	800aee4 <_sbrk_r+0x1c>
 800aee2:	6023      	str	r3, [r4, #0]
 800aee4:	bd70      	pop	{r4, r5, r6, pc}
 800aee6:	46c0      	nop			; (mov r8, r8)
 800aee8:	20000578 	.word	0x20000578

0800aeec <__assert_func>:
 800aeec:	b530      	push	{r4, r5, lr}
 800aeee:	0014      	movs	r4, r2
 800aef0:	001a      	movs	r2, r3
 800aef2:	4b09      	ldr	r3, [pc, #36]	; (800af18 <__assert_func+0x2c>)
 800aef4:	0005      	movs	r5, r0
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	b085      	sub	sp, #20
 800aefa:	68d8      	ldr	r0, [r3, #12]
 800aefc:	4b07      	ldr	r3, [pc, #28]	; (800af1c <__assert_func+0x30>)
 800aefe:	2c00      	cmp	r4, #0
 800af00:	d101      	bne.n	800af06 <__assert_func+0x1a>
 800af02:	4b07      	ldr	r3, [pc, #28]	; (800af20 <__assert_func+0x34>)
 800af04:	001c      	movs	r4, r3
 800af06:	9301      	str	r3, [sp, #4]
 800af08:	9100      	str	r1, [sp, #0]
 800af0a:	002b      	movs	r3, r5
 800af0c:	4905      	ldr	r1, [pc, #20]	; (800af24 <__assert_func+0x38>)
 800af0e:	9402      	str	r4, [sp, #8]
 800af10:	f000 f80a 	bl	800af28 <fiprintf>
 800af14:	f000 fab2 	bl	800b47c <abort>
 800af18:	2000000c 	.word	0x2000000c
 800af1c:	0800e3dd 	.word	0x0800e3dd
 800af20:	0800e418 	.word	0x0800e418
 800af24:	0800e3ea 	.word	0x0800e3ea

0800af28 <fiprintf>:
 800af28:	b40e      	push	{r1, r2, r3}
 800af2a:	b503      	push	{r0, r1, lr}
 800af2c:	0001      	movs	r1, r0
 800af2e:	ab03      	add	r3, sp, #12
 800af30:	4804      	ldr	r0, [pc, #16]	; (800af44 <fiprintf+0x1c>)
 800af32:	cb04      	ldmia	r3!, {r2}
 800af34:	6800      	ldr	r0, [r0, #0]
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	f000 f88a 	bl	800b050 <_vfiprintf_r>
 800af3c:	b002      	add	sp, #8
 800af3e:	bc08      	pop	{r3}
 800af40:	b003      	add	sp, #12
 800af42:	4718      	bx	r3
 800af44:	2000000c 	.word	0x2000000c

0800af48 <__ascii_mbtowc>:
 800af48:	b082      	sub	sp, #8
 800af4a:	2900      	cmp	r1, #0
 800af4c:	d100      	bne.n	800af50 <__ascii_mbtowc+0x8>
 800af4e:	a901      	add	r1, sp, #4
 800af50:	1e10      	subs	r0, r2, #0
 800af52:	d006      	beq.n	800af62 <__ascii_mbtowc+0x1a>
 800af54:	2b00      	cmp	r3, #0
 800af56:	d006      	beq.n	800af66 <__ascii_mbtowc+0x1e>
 800af58:	7813      	ldrb	r3, [r2, #0]
 800af5a:	600b      	str	r3, [r1, #0]
 800af5c:	7810      	ldrb	r0, [r2, #0]
 800af5e:	1e43      	subs	r3, r0, #1
 800af60:	4198      	sbcs	r0, r3
 800af62:	b002      	add	sp, #8
 800af64:	4770      	bx	lr
 800af66:	2002      	movs	r0, #2
 800af68:	4240      	negs	r0, r0
 800af6a:	e7fa      	b.n	800af62 <__ascii_mbtowc+0x1a>

0800af6c <memmove>:
 800af6c:	b510      	push	{r4, lr}
 800af6e:	4288      	cmp	r0, r1
 800af70:	d902      	bls.n	800af78 <memmove+0xc>
 800af72:	188b      	adds	r3, r1, r2
 800af74:	4298      	cmp	r0, r3
 800af76:	d303      	bcc.n	800af80 <memmove+0x14>
 800af78:	2300      	movs	r3, #0
 800af7a:	e007      	b.n	800af8c <memmove+0x20>
 800af7c:	5c8b      	ldrb	r3, [r1, r2]
 800af7e:	5483      	strb	r3, [r0, r2]
 800af80:	3a01      	subs	r2, #1
 800af82:	d2fb      	bcs.n	800af7c <memmove+0x10>
 800af84:	bd10      	pop	{r4, pc}
 800af86:	5ccc      	ldrb	r4, [r1, r3]
 800af88:	54c4      	strb	r4, [r0, r3]
 800af8a:	3301      	adds	r3, #1
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d1fa      	bne.n	800af86 <memmove+0x1a>
 800af90:	e7f8      	b.n	800af84 <memmove+0x18>
	...

0800af94 <__malloc_lock>:
 800af94:	b510      	push	{r4, lr}
 800af96:	4802      	ldr	r0, [pc, #8]	; (800afa0 <__malloc_lock+0xc>)
 800af98:	f000 fc47 	bl	800b82a <__retarget_lock_acquire_recursive>
 800af9c:	bd10      	pop	{r4, pc}
 800af9e:	46c0      	nop			; (mov r8, r8)
 800afa0:	20000580 	.word	0x20000580

0800afa4 <__malloc_unlock>:
 800afa4:	b510      	push	{r4, lr}
 800afa6:	4802      	ldr	r0, [pc, #8]	; (800afb0 <__malloc_unlock+0xc>)
 800afa8:	f000 fc40 	bl	800b82c <__retarget_lock_release_recursive>
 800afac:	bd10      	pop	{r4, pc}
 800afae:	46c0      	nop			; (mov r8, r8)
 800afb0:	20000580 	.word	0x20000580

0800afb4 <_realloc_r>:
 800afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb6:	0007      	movs	r7, r0
 800afb8:	000d      	movs	r5, r1
 800afba:	0016      	movs	r6, r2
 800afbc:	2900      	cmp	r1, #0
 800afbe:	d105      	bne.n	800afcc <_realloc_r+0x18>
 800afc0:	0011      	movs	r1, r2
 800afc2:	f7ff fdc1 	bl	800ab48 <_malloc_r>
 800afc6:	0004      	movs	r4, r0
 800afc8:	0020      	movs	r0, r4
 800afca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afcc:	2a00      	cmp	r2, #0
 800afce:	d103      	bne.n	800afd8 <_realloc_r+0x24>
 800afd0:	f7ff fd70 	bl	800aab4 <_free_r>
 800afd4:	0034      	movs	r4, r6
 800afd6:	e7f7      	b.n	800afc8 <_realloc_r+0x14>
 800afd8:	f000 fc96 	bl	800b908 <_malloc_usable_size_r>
 800afdc:	002c      	movs	r4, r5
 800afde:	42b0      	cmp	r0, r6
 800afe0:	d2f2      	bcs.n	800afc8 <_realloc_r+0x14>
 800afe2:	0031      	movs	r1, r6
 800afe4:	0038      	movs	r0, r7
 800afe6:	f7ff fdaf 	bl	800ab48 <_malloc_r>
 800afea:	1e04      	subs	r4, r0, #0
 800afec:	d0ec      	beq.n	800afc8 <_realloc_r+0x14>
 800afee:	0029      	movs	r1, r5
 800aff0:	0032      	movs	r2, r6
 800aff2:	f7ff f9aa 	bl	800a34a <memcpy>
 800aff6:	0029      	movs	r1, r5
 800aff8:	0038      	movs	r0, r7
 800affa:	f7ff fd5b 	bl	800aab4 <_free_r>
 800affe:	e7e3      	b.n	800afc8 <_realloc_r+0x14>

0800b000 <__sfputc_r>:
 800b000:	6893      	ldr	r3, [r2, #8]
 800b002:	b510      	push	{r4, lr}
 800b004:	3b01      	subs	r3, #1
 800b006:	6093      	str	r3, [r2, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	da04      	bge.n	800b016 <__sfputc_r+0x16>
 800b00c:	6994      	ldr	r4, [r2, #24]
 800b00e:	42a3      	cmp	r3, r4
 800b010:	db07      	blt.n	800b022 <__sfputc_r+0x22>
 800b012:	290a      	cmp	r1, #10
 800b014:	d005      	beq.n	800b022 <__sfputc_r+0x22>
 800b016:	6813      	ldr	r3, [r2, #0]
 800b018:	1c58      	adds	r0, r3, #1
 800b01a:	6010      	str	r0, [r2, #0]
 800b01c:	7019      	strb	r1, [r3, #0]
 800b01e:	0008      	movs	r0, r1
 800b020:	bd10      	pop	{r4, pc}
 800b022:	f000 f94f 	bl	800b2c4 <__swbuf_r>
 800b026:	0001      	movs	r1, r0
 800b028:	e7f9      	b.n	800b01e <__sfputc_r+0x1e>

0800b02a <__sfputs_r>:
 800b02a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02c:	0006      	movs	r6, r0
 800b02e:	000f      	movs	r7, r1
 800b030:	0014      	movs	r4, r2
 800b032:	18d5      	adds	r5, r2, r3
 800b034:	42ac      	cmp	r4, r5
 800b036:	d101      	bne.n	800b03c <__sfputs_r+0x12>
 800b038:	2000      	movs	r0, #0
 800b03a:	e007      	b.n	800b04c <__sfputs_r+0x22>
 800b03c:	7821      	ldrb	r1, [r4, #0]
 800b03e:	003a      	movs	r2, r7
 800b040:	0030      	movs	r0, r6
 800b042:	f7ff ffdd 	bl	800b000 <__sfputc_r>
 800b046:	3401      	adds	r4, #1
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d1f3      	bne.n	800b034 <__sfputs_r+0xa>
 800b04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b050 <_vfiprintf_r>:
 800b050:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b052:	b0a1      	sub	sp, #132	; 0x84
 800b054:	0006      	movs	r6, r0
 800b056:	000c      	movs	r4, r1
 800b058:	001f      	movs	r7, r3
 800b05a:	9203      	str	r2, [sp, #12]
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d004      	beq.n	800b06a <_vfiprintf_r+0x1a>
 800b060:	6983      	ldr	r3, [r0, #24]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <_vfiprintf_r+0x1a>
 800b066:	f000 fb3f 	bl	800b6e8 <__sinit>
 800b06a:	4b8e      	ldr	r3, [pc, #568]	; (800b2a4 <_vfiprintf_r+0x254>)
 800b06c:	429c      	cmp	r4, r3
 800b06e:	d11c      	bne.n	800b0aa <_vfiprintf_r+0x5a>
 800b070:	6874      	ldr	r4, [r6, #4]
 800b072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b074:	07db      	lsls	r3, r3, #31
 800b076:	d405      	bmi.n	800b084 <_vfiprintf_r+0x34>
 800b078:	89a3      	ldrh	r3, [r4, #12]
 800b07a:	059b      	lsls	r3, r3, #22
 800b07c:	d402      	bmi.n	800b084 <_vfiprintf_r+0x34>
 800b07e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b080:	f000 fbd3 	bl	800b82a <__retarget_lock_acquire_recursive>
 800b084:	89a3      	ldrh	r3, [r4, #12]
 800b086:	071b      	lsls	r3, r3, #28
 800b088:	d502      	bpl.n	800b090 <_vfiprintf_r+0x40>
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d11d      	bne.n	800b0cc <_vfiprintf_r+0x7c>
 800b090:	0021      	movs	r1, r4
 800b092:	0030      	movs	r0, r6
 800b094:	f000 f97a 	bl	800b38c <__swsetup_r>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d017      	beq.n	800b0cc <_vfiprintf_r+0x7c>
 800b09c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b09e:	07db      	lsls	r3, r3, #31
 800b0a0:	d50d      	bpl.n	800b0be <_vfiprintf_r+0x6e>
 800b0a2:	2001      	movs	r0, #1
 800b0a4:	4240      	negs	r0, r0
 800b0a6:	b021      	add	sp, #132	; 0x84
 800b0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0aa:	4b7f      	ldr	r3, [pc, #508]	; (800b2a8 <_vfiprintf_r+0x258>)
 800b0ac:	429c      	cmp	r4, r3
 800b0ae:	d101      	bne.n	800b0b4 <_vfiprintf_r+0x64>
 800b0b0:	68b4      	ldr	r4, [r6, #8]
 800b0b2:	e7de      	b.n	800b072 <_vfiprintf_r+0x22>
 800b0b4:	4b7d      	ldr	r3, [pc, #500]	; (800b2ac <_vfiprintf_r+0x25c>)
 800b0b6:	429c      	cmp	r4, r3
 800b0b8:	d1db      	bne.n	800b072 <_vfiprintf_r+0x22>
 800b0ba:	68f4      	ldr	r4, [r6, #12]
 800b0bc:	e7d9      	b.n	800b072 <_vfiprintf_r+0x22>
 800b0be:	89a3      	ldrh	r3, [r4, #12]
 800b0c0:	059b      	lsls	r3, r3, #22
 800b0c2:	d4ee      	bmi.n	800b0a2 <_vfiprintf_r+0x52>
 800b0c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0c6:	f000 fbb1 	bl	800b82c <__retarget_lock_release_recursive>
 800b0ca:	e7ea      	b.n	800b0a2 <_vfiprintf_r+0x52>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	ad08      	add	r5, sp, #32
 800b0d0:	616b      	str	r3, [r5, #20]
 800b0d2:	3320      	adds	r3, #32
 800b0d4:	766b      	strb	r3, [r5, #25]
 800b0d6:	3310      	adds	r3, #16
 800b0d8:	76ab      	strb	r3, [r5, #26]
 800b0da:	9707      	str	r7, [sp, #28]
 800b0dc:	9f03      	ldr	r7, [sp, #12]
 800b0de:	783b      	ldrb	r3, [r7, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <_vfiprintf_r+0x98>
 800b0e4:	2b25      	cmp	r3, #37	; 0x25
 800b0e6:	d14e      	bne.n	800b186 <_vfiprintf_r+0x136>
 800b0e8:	9b03      	ldr	r3, [sp, #12]
 800b0ea:	1afb      	subs	r3, r7, r3
 800b0ec:	9305      	str	r3, [sp, #20]
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	429f      	cmp	r7, r3
 800b0f2:	d00d      	beq.n	800b110 <_vfiprintf_r+0xc0>
 800b0f4:	9b05      	ldr	r3, [sp, #20]
 800b0f6:	0021      	movs	r1, r4
 800b0f8:	0030      	movs	r0, r6
 800b0fa:	9a03      	ldr	r2, [sp, #12]
 800b0fc:	f7ff ff95 	bl	800b02a <__sfputs_r>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d100      	bne.n	800b106 <_vfiprintf_r+0xb6>
 800b104:	e0b5      	b.n	800b272 <_vfiprintf_r+0x222>
 800b106:	696a      	ldr	r2, [r5, #20]
 800b108:	9b05      	ldr	r3, [sp, #20]
 800b10a:	4694      	mov	ip, r2
 800b10c:	4463      	add	r3, ip
 800b10e:	616b      	str	r3, [r5, #20]
 800b110:	783b      	ldrb	r3, [r7, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d100      	bne.n	800b118 <_vfiprintf_r+0xc8>
 800b116:	e0ac      	b.n	800b272 <_vfiprintf_r+0x222>
 800b118:	2201      	movs	r2, #1
 800b11a:	1c7b      	adds	r3, r7, #1
 800b11c:	9303      	str	r3, [sp, #12]
 800b11e:	2300      	movs	r3, #0
 800b120:	4252      	negs	r2, r2
 800b122:	606a      	str	r2, [r5, #4]
 800b124:	a904      	add	r1, sp, #16
 800b126:	3254      	adds	r2, #84	; 0x54
 800b128:	1852      	adds	r2, r2, r1
 800b12a:	602b      	str	r3, [r5, #0]
 800b12c:	60eb      	str	r3, [r5, #12]
 800b12e:	60ab      	str	r3, [r5, #8]
 800b130:	7013      	strb	r3, [r2, #0]
 800b132:	65ab      	str	r3, [r5, #88]	; 0x58
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	2205      	movs	r2, #5
 800b138:	7819      	ldrb	r1, [r3, #0]
 800b13a:	485d      	ldr	r0, [pc, #372]	; (800b2b0 <_vfiprintf_r+0x260>)
 800b13c:	f7ff f8fa 	bl	800a334 <memchr>
 800b140:	9b03      	ldr	r3, [sp, #12]
 800b142:	1c5f      	adds	r7, r3, #1
 800b144:	2800      	cmp	r0, #0
 800b146:	d120      	bne.n	800b18a <_vfiprintf_r+0x13a>
 800b148:	682a      	ldr	r2, [r5, #0]
 800b14a:	06d3      	lsls	r3, r2, #27
 800b14c:	d504      	bpl.n	800b158 <_vfiprintf_r+0x108>
 800b14e:	2353      	movs	r3, #83	; 0x53
 800b150:	a904      	add	r1, sp, #16
 800b152:	185b      	adds	r3, r3, r1
 800b154:	2120      	movs	r1, #32
 800b156:	7019      	strb	r1, [r3, #0]
 800b158:	0713      	lsls	r3, r2, #28
 800b15a:	d504      	bpl.n	800b166 <_vfiprintf_r+0x116>
 800b15c:	2353      	movs	r3, #83	; 0x53
 800b15e:	a904      	add	r1, sp, #16
 800b160:	185b      	adds	r3, r3, r1
 800b162:	212b      	movs	r1, #43	; 0x2b
 800b164:	7019      	strb	r1, [r3, #0]
 800b166:	9b03      	ldr	r3, [sp, #12]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	2b2a      	cmp	r3, #42	; 0x2a
 800b16c:	d016      	beq.n	800b19c <_vfiprintf_r+0x14c>
 800b16e:	2100      	movs	r1, #0
 800b170:	68eb      	ldr	r3, [r5, #12]
 800b172:	9f03      	ldr	r7, [sp, #12]
 800b174:	783a      	ldrb	r2, [r7, #0]
 800b176:	1c78      	adds	r0, r7, #1
 800b178:	3a30      	subs	r2, #48	; 0x30
 800b17a:	4684      	mov	ip, r0
 800b17c:	2a09      	cmp	r2, #9
 800b17e:	d94f      	bls.n	800b220 <_vfiprintf_r+0x1d0>
 800b180:	2900      	cmp	r1, #0
 800b182:	d111      	bne.n	800b1a8 <_vfiprintf_r+0x158>
 800b184:	e017      	b.n	800b1b6 <_vfiprintf_r+0x166>
 800b186:	3701      	adds	r7, #1
 800b188:	e7a9      	b.n	800b0de <_vfiprintf_r+0x8e>
 800b18a:	4b49      	ldr	r3, [pc, #292]	; (800b2b0 <_vfiprintf_r+0x260>)
 800b18c:	682a      	ldr	r2, [r5, #0]
 800b18e:	1ac0      	subs	r0, r0, r3
 800b190:	2301      	movs	r3, #1
 800b192:	4083      	lsls	r3, r0
 800b194:	4313      	orrs	r3, r2
 800b196:	602b      	str	r3, [r5, #0]
 800b198:	9703      	str	r7, [sp, #12]
 800b19a:	e7cb      	b.n	800b134 <_vfiprintf_r+0xe4>
 800b19c:	9b07      	ldr	r3, [sp, #28]
 800b19e:	1d19      	adds	r1, r3, #4
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	9107      	str	r1, [sp, #28]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	db01      	blt.n	800b1ac <_vfiprintf_r+0x15c>
 800b1a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1aa:	e004      	b.n	800b1b6 <_vfiprintf_r+0x166>
 800b1ac:	425b      	negs	r3, r3
 800b1ae:	60eb      	str	r3, [r5, #12]
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	602b      	str	r3, [r5, #0]
 800b1b6:	783b      	ldrb	r3, [r7, #0]
 800b1b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ba:	d10a      	bne.n	800b1d2 <_vfiprintf_r+0x182>
 800b1bc:	787b      	ldrb	r3, [r7, #1]
 800b1be:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c0:	d137      	bne.n	800b232 <_vfiprintf_r+0x1e2>
 800b1c2:	9b07      	ldr	r3, [sp, #28]
 800b1c4:	3702      	adds	r7, #2
 800b1c6:	1d1a      	adds	r2, r3, #4
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	9207      	str	r2, [sp, #28]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	db2d      	blt.n	800b22c <_vfiprintf_r+0x1dc>
 800b1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d2:	2203      	movs	r2, #3
 800b1d4:	7839      	ldrb	r1, [r7, #0]
 800b1d6:	4837      	ldr	r0, [pc, #220]	; (800b2b4 <_vfiprintf_r+0x264>)
 800b1d8:	f7ff f8ac 	bl	800a334 <memchr>
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d007      	beq.n	800b1f0 <_vfiprintf_r+0x1a0>
 800b1e0:	4b34      	ldr	r3, [pc, #208]	; (800b2b4 <_vfiprintf_r+0x264>)
 800b1e2:	682a      	ldr	r2, [r5, #0]
 800b1e4:	1ac0      	subs	r0, r0, r3
 800b1e6:	2340      	movs	r3, #64	; 0x40
 800b1e8:	4083      	lsls	r3, r0
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	3701      	adds	r7, #1
 800b1ee:	602b      	str	r3, [r5, #0]
 800b1f0:	7839      	ldrb	r1, [r7, #0]
 800b1f2:	1c7b      	adds	r3, r7, #1
 800b1f4:	2206      	movs	r2, #6
 800b1f6:	4830      	ldr	r0, [pc, #192]	; (800b2b8 <_vfiprintf_r+0x268>)
 800b1f8:	9303      	str	r3, [sp, #12]
 800b1fa:	7629      	strb	r1, [r5, #24]
 800b1fc:	f7ff f89a 	bl	800a334 <memchr>
 800b200:	2800      	cmp	r0, #0
 800b202:	d045      	beq.n	800b290 <_vfiprintf_r+0x240>
 800b204:	4b2d      	ldr	r3, [pc, #180]	; (800b2bc <_vfiprintf_r+0x26c>)
 800b206:	2b00      	cmp	r3, #0
 800b208:	d127      	bne.n	800b25a <_vfiprintf_r+0x20a>
 800b20a:	2207      	movs	r2, #7
 800b20c:	9b07      	ldr	r3, [sp, #28]
 800b20e:	3307      	adds	r3, #7
 800b210:	4393      	bics	r3, r2
 800b212:	3308      	adds	r3, #8
 800b214:	9307      	str	r3, [sp, #28]
 800b216:	696b      	ldr	r3, [r5, #20]
 800b218:	9a04      	ldr	r2, [sp, #16]
 800b21a:	189b      	adds	r3, r3, r2
 800b21c:	616b      	str	r3, [r5, #20]
 800b21e:	e75d      	b.n	800b0dc <_vfiprintf_r+0x8c>
 800b220:	210a      	movs	r1, #10
 800b222:	434b      	muls	r3, r1
 800b224:	4667      	mov	r7, ip
 800b226:	189b      	adds	r3, r3, r2
 800b228:	3909      	subs	r1, #9
 800b22a:	e7a3      	b.n	800b174 <_vfiprintf_r+0x124>
 800b22c:	2301      	movs	r3, #1
 800b22e:	425b      	negs	r3, r3
 800b230:	e7ce      	b.n	800b1d0 <_vfiprintf_r+0x180>
 800b232:	2300      	movs	r3, #0
 800b234:	001a      	movs	r2, r3
 800b236:	3701      	adds	r7, #1
 800b238:	606b      	str	r3, [r5, #4]
 800b23a:	7839      	ldrb	r1, [r7, #0]
 800b23c:	1c78      	adds	r0, r7, #1
 800b23e:	3930      	subs	r1, #48	; 0x30
 800b240:	4684      	mov	ip, r0
 800b242:	2909      	cmp	r1, #9
 800b244:	d903      	bls.n	800b24e <_vfiprintf_r+0x1fe>
 800b246:	2b00      	cmp	r3, #0
 800b248:	d0c3      	beq.n	800b1d2 <_vfiprintf_r+0x182>
 800b24a:	9209      	str	r2, [sp, #36]	; 0x24
 800b24c:	e7c1      	b.n	800b1d2 <_vfiprintf_r+0x182>
 800b24e:	230a      	movs	r3, #10
 800b250:	435a      	muls	r2, r3
 800b252:	4667      	mov	r7, ip
 800b254:	1852      	adds	r2, r2, r1
 800b256:	3b09      	subs	r3, #9
 800b258:	e7ef      	b.n	800b23a <_vfiprintf_r+0x1ea>
 800b25a:	ab07      	add	r3, sp, #28
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	0022      	movs	r2, r4
 800b260:	0029      	movs	r1, r5
 800b262:	0030      	movs	r0, r6
 800b264:	4b16      	ldr	r3, [pc, #88]	; (800b2c0 <_vfiprintf_r+0x270>)
 800b266:	f7fd fdbd 	bl	8008de4 <_printf_float>
 800b26a:	9004      	str	r0, [sp, #16]
 800b26c:	9b04      	ldr	r3, [sp, #16]
 800b26e:	3301      	adds	r3, #1
 800b270:	d1d1      	bne.n	800b216 <_vfiprintf_r+0x1c6>
 800b272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b274:	07db      	lsls	r3, r3, #31
 800b276:	d405      	bmi.n	800b284 <_vfiprintf_r+0x234>
 800b278:	89a3      	ldrh	r3, [r4, #12]
 800b27a:	059b      	lsls	r3, r3, #22
 800b27c:	d402      	bmi.n	800b284 <_vfiprintf_r+0x234>
 800b27e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b280:	f000 fad4 	bl	800b82c <__retarget_lock_release_recursive>
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	065b      	lsls	r3, r3, #25
 800b288:	d500      	bpl.n	800b28c <_vfiprintf_r+0x23c>
 800b28a:	e70a      	b.n	800b0a2 <_vfiprintf_r+0x52>
 800b28c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b28e:	e70a      	b.n	800b0a6 <_vfiprintf_r+0x56>
 800b290:	ab07      	add	r3, sp, #28
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	0022      	movs	r2, r4
 800b296:	0029      	movs	r1, r5
 800b298:	0030      	movs	r0, r6
 800b29a:	4b09      	ldr	r3, [pc, #36]	; (800b2c0 <_vfiprintf_r+0x270>)
 800b29c:	f7fe f860 	bl	8009360 <_printf_i>
 800b2a0:	e7e3      	b.n	800b26a <_vfiprintf_r+0x21a>
 800b2a2:	46c0      	nop			; (mov r8, r8)
 800b2a4:	0800e544 	.word	0x0800e544
 800b2a8:	0800e564 	.word	0x0800e564
 800b2ac:	0800e524 	.word	0x0800e524
 800b2b0:	0800e3cc 	.word	0x0800e3cc
 800b2b4:	0800e3d2 	.word	0x0800e3d2
 800b2b8:	0800e3d6 	.word	0x0800e3d6
 800b2bc:	08008de5 	.word	0x08008de5
 800b2c0:	0800b02b 	.word	0x0800b02b

0800b2c4 <__swbuf_r>:
 800b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c6:	0005      	movs	r5, r0
 800b2c8:	000e      	movs	r6, r1
 800b2ca:	0014      	movs	r4, r2
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d004      	beq.n	800b2da <__swbuf_r+0x16>
 800b2d0:	6983      	ldr	r3, [r0, #24]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <__swbuf_r+0x16>
 800b2d6:	f000 fa07 	bl	800b6e8 <__sinit>
 800b2da:	4b22      	ldr	r3, [pc, #136]	; (800b364 <__swbuf_r+0xa0>)
 800b2dc:	429c      	cmp	r4, r3
 800b2de:	d12e      	bne.n	800b33e <__swbuf_r+0x7a>
 800b2e0:	686c      	ldr	r4, [r5, #4]
 800b2e2:	69a3      	ldr	r3, [r4, #24]
 800b2e4:	60a3      	str	r3, [r4, #8]
 800b2e6:	89a3      	ldrh	r3, [r4, #12]
 800b2e8:	071b      	lsls	r3, r3, #28
 800b2ea:	d532      	bpl.n	800b352 <__swbuf_r+0x8e>
 800b2ec:	6923      	ldr	r3, [r4, #16]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d02f      	beq.n	800b352 <__swbuf_r+0x8e>
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	6922      	ldr	r2, [r4, #16]
 800b2f6:	b2f7      	uxtb	r7, r6
 800b2f8:	1a98      	subs	r0, r3, r2
 800b2fa:	6963      	ldr	r3, [r4, #20]
 800b2fc:	b2f6      	uxtb	r6, r6
 800b2fe:	4283      	cmp	r3, r0
 800b300:	dc05      	bgt.n	800b30e <__swbuf_r+0x4a>
 800b302:	0021      	movs	r1, r4
 800b304:	0028      	movs	r0, r5
 800b306:	f000 f94d 	bl	800b5a4 <_fflush_r>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d127      	bne.n	800b35e <__swbuf_r+0x9a>
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	3001      	adds	r0, #1
 800b312:	3b01      	subs	r3, #1
 800b314:	60a3      	str	r3, [r4, #8]
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	1c5a      	adds	r2, r3, #1
 800b31a:	6022      	str	r2, [r4, #0]
 800b31c:	701f      	strb	r7, [r3, #0]
 800b31e:	6963      	ldr	r3, [r4, #20]
 800b320:	4283      	cmp	r3, r0
 800b322:	d004      	beq.n	800b32e <__swbuf_r+0x6a>
 800b324:	89a3      	ldrh	r3, [r4, #12]
 800b326:	07db      	lsls	r3, r3, #31
 800b328:	d507      	bpl.n	800b33a <__swbuf_r+0x76>
 800b32a:	2e0a      	cmp	r6, #10
 800b32c:	d105      	bne.n	800b33a <__swbuf_r+0x76>
 800b32e:	0021      	movs	r1, r4
 800b330:	0028      	movs	r0, r5
 800b332:	f000 f937 	bl	800b5a4 <_fflush_r>
 800b336:	2800      	cmp	r0, #0
 800b338:	d111      	bne.n	800b35e <__swbuf_r+0x9a>
 800b33a:	0030      	movs	r0, r6
 800b33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b33e:	4b0a      	ldr	r3, [pc, #40]	; (800b368 <__swbuf_r+0xa4>)
 800b340:	429c      	cmp	r4, r3
 800b342:	d101      	bne.n	800b348 <__swbuf_r+0x84>
 800b344:	68ac      	ldr	r4, [r5, #8]
 800b346:	e7cc      	b.n	800b2e2 <__swbuf_r+0x1e>
 800b348:	4b08      	ldr	r3, [pc, #32]	; (800b36c <__swbuf_r+0xa8>)
 800b34a:	429c      	cmp	r4, r3
 800b34c:	d1c9      	bne.n	800b2e2 <__swbuf_r+0x1e>
 800b34e:	68ec      	ldr	r4, [r5, #12]
 800b350:	e7c7      	b.n	800b2e2 <__swbuf_r+0x1e>
 800b352:	0021      	movs	r1, r4
 800b354:	0028      	movs	r0, r5
 800b356:	f000 f819 	bl	800b38c <__swsetup_r>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d0c9      	beq.n	800b2f2 <__swbuf_r+0x2e>
 800b35e:	2601      	movs	r6, #1
 800b360:	4276      	negs	r6, r6
 800b362:	e7ea      	b.n	800b33a <__swbuf_r+0x76>
 800b364:	0800e544 	.word	0x0800e544
 800b368:	0800e564 	.word	0x0800e564
 800b36c:	0800e524 	.word	0x0800e524

0800b370 <__ascii_wctomb>:
 800b370:	0003      	movs	r3, r0
 800b372:	1e08      	subs	r0, r1, #0
 800b374:	d005      	beq.n	800b382 <__ascii_wctomb+0x12>
 800b376:	2aff      	cmp	r2, #255	; 0xff
 800b378:	d904      	bls.n	800b384 <__ascii_wctomb+0x14>
 800b37a:	228a      	movs	r2, #138	; 0x8a
 800b37c:	2001      	movs	r0, #1
 800b37e:	601a      	str	r2, [r3, #0]
 800b380:	4240      	negs	r0, r0
 800b382:	4770      	bx	lr
 800b384:	2001      	movs	r0, #1
 800b386:	700a      	strb	r2, [r1, #0]
 800b388:	e7fb      	b.n	800b382 <__ascii_wctomb+0x12>
	...

0800b38c <__swsetup_r>:
 800b38c:	4b37      	ldr	r3, [pc, #220]	; (800b46c <__swsetup_r+0xe0>)
 800b38e:	b570      	push	{r4, r5, r6, lr}
 800b390:	681d      	ldr	r5, [r3, #0]
 800b392:	0006      	movs	r6, r0
 800b394:	000c      	movs	r4, r1
 800b396:	2d00      	cmp	r5, #0
 800b398:	d005      	beq.n	800b3a6 <__swsetup_r+0x1a>
 800b39a:	69ab      	ldr	r3, [r5, #24]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <__swsetup_r+0x1a>
 800b3a0:	0028      	movs	r0, r5
 800b3a2:	f000 f9a1 	bl	800b6e8 <__sinit>
 800b3a6:	4b32      	ldr	r3, [pc, #200]	; (800b470 <__swsetup_r+0xe4>)
 800b3a8:	429c      	cmp	r4, r3
 800b3aa:	d10f      	bne.n	800b3cc <__swsetup_r+0x40>
 800b3ac:	686c      	ldr	r4, [r5, #4]
 800b3ae:	230c      	movs	r3, #12
 800b3b0:	5ee2      	ldrsh	r2, [r4, r3]
 800b3b2:	b293      	uxth	r3, r2
 800b3b4:	0711      	lsls	r1, r2, #28
 800b3b6:	d42d      	bmi.n	800b414 <__swsetup_r+0x88>
 800b3b8:	06d9      	lsls	r1, r3, #27
 800b3ba:	d411      	bmi.n	800b3e0 <__swsetup_r+0x54>
 800b3bc:	2309      	movs	r3, #9
 800b3be:	2001      	movs	r0, #1
 800b3c0:	6033      	str	r3, [r6, #0]
 800b3c2:	3337      	adds	r3, #55	; 0x37
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	4240      	negs	r0, r0
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}
 800b3cc:	4b29      	ldr	r3, [pc, #164]	; (800b474 <__swsetup_r+0xe8>)
 800b3ce:	429c      	cmp	r4, r3
 800b3d0:	d101      	bne.n	800b3d6 <__swsetup_r+0x4a>
 800b3d2:	68ac      	ldr	r4, [r5, #8]
 800b3d4:	e7eb      	b.n	800b3ae <__swsetup_r+0x22>
 800b3d6:	4b28      	ldr	r3, [pc, #160]	; (800b478 <__swsetup_r+0xec>)
 800b3d8:	429c      	cmp	r4, r3
 800b3da:	d1e8      	bne.n	800b3ae <__swsetup_r+0x22>
 800b3dc:	68ec      	ldr	r4, [r5, #12]
 800b3de:	e7e6      	b.n	800b3ae <__swsetup_r+0x22>
 800b3e0:	075b      	lsls	r3, r3, #29
 800b3e2:	d513      	bpl.n	800b40c <__swsetup_r+0x80>
 800b3e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3e6:	2900      	cmp	r1, #0
 800b3e8:	d008      	beq.n	800b3fc <__swsetup_r+0x70>
 800b3ea:	0023      	movs	r3, r4
 800b3ec:	3344      	adds	r3, #68	; 0x44
 800b3ee:	4299      	cmp	r1, r3
 800b3f0:	d002      	beq.n	800b3f8 <__swsetup_r+0x6c>
 800b3f2:	0030      	movs	r0, r6
 800b3f4:	f7ff fb5e 	bl	800aab4 <_free_r>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	6363      	str	r3, [r4, #52]	; 0x34
 800b3fc:	2224      	movs	r2, #36	; 0x24
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	4393      	bics	r3, r2
 800b402:	81a3      	strh	r3, [r4, #12]
 800b404:	2300      	movs	r3, #0
 800b406:	6063      	str	r3, [r4, #4]
 800b408:	6923      	ldr	r3, [r4, #16]
 800b40a:	6023      	str	r3, [r4, #0]
 800b40c:	2308      	movs	r3, #8
 800b40e:	89a2      	ldrh	r2, [r4, #12]
 800b410:	4313      	orrs	r3, r2
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10b      	bne.n	800b432 <__swsetup_r+0xa6>
 800b41a:	21a0      	movs	r1, #160	; 0xa0
 800b41c:	2280      	movs	r2, #128	; 0x80
 800b41e:	89a3      	ldrh	r3, [r4, #12]
 800b420:	0089      	lsls	r1, r1, #2
 800b422:	0092      	lsls	r2, r2, #2
 800b424:	400b      	ands	r3, r1
 800b426:	4293      	cmp	r3, r2
 800b428:	d003      	beq.n	800b432 <__swsetup_r+0xa6>
 800b42a:	0021      	movs	r1, r4
 800b42c:	0030      	movs	r0, r6
 800b42e:	f000 fa27 	bl	800b880 <__smakebuf_r>
 800b432:	220c      	movs	r2, #12
 800b434:	5ea3      	ldrsh	r3, [r4, r2]
 800b436:	2001      	movs	r0, #1
 800b438:	001a      	movs	r2, r3
 800b43a:	b299      	uxth	r1, r3
 800b43c:	4002      	ands	r2, r0
 800b43e:	4203      	tst	r3, r0
 800b440:	d00f      	beq.n	800b462 <__swsetup_r+0xd6>
 800b442:	2200      	movs	r2, #0
 800b444:	60a2      	str	r2, [r4, #8]
 800b446:	6962      	ldr	r2, [r4, #20]
 800b448:	4252      	negs	r2, r2
 800b44a:	61a2      	str	r2, [r4, #24]
 800b44c:	2000      	movs	r0, #0
 800b44e:	6922      	ldr	r2, [r4, #16]
 800b450:	4282      	cmp	r2, r0
 800b452:	d1ba      	bne.n	800b3ca <__swsetup_r+0x3e>
 800b454:	060a      	lsls	r2, r1, #24
 800b456:	d5b8      	bpl.n	800b3ca <__swsetup_r+0x3e>
 800b458:	2240      	movs	r2, #64	; 0x40
 800b45a:	4313      	orrs	r3, r2
 800b45c:	81a3      	strh	r3, [r4, #12]
 800b45e:	3801      	subs	r0, #1
 800b460:	e7b3      	b.n	800b3ca <__swsetup_r+0x3e>
 800b462:	0788      	lsls	r0, r1, #30
 800b464:	d400      	bmi.n	800b468 <__swsetup_r+0xdc>
 800b466:	6962      	ldr	r2, [r4, #20]
 800b468:	60a2      	str	r2, [r4, #8]
 800b46a:	e7ef      	b.n	800b44c <__swsetup_r+0xc0>
 800b46c:	2000000c 	.word	0x2000000c
 800b470:	0800e544 	.word	0x0800e544
 800b474:	0800e564 	.word	0x0800e564
 800b478:	0800e524 	.word	0x0800e524

0800b47c <abort>:
 800b47c:	2006      	movs	r0, #6
 800b47e:	b510      	push	{r4, lr}
 800b480:	f000 fa74 	bl	800b96c <raise>
 800b484:	2001      	movs	r0, #1
 800b486:	f7fa f9a0 	bl	80057ca <_exit>
	...

0800b48c <__sflush_r>:
 800b48c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b48e:	898b      	ldrh	r3, [r1, #12]
 800b490:	0005      	movs	r5, r0
 800b492:	000c      	movs	r4, r1
 800b494:	071a      	lsls	r2, r3, #28
 800b496:	d45f      	bmi.n	800b558 <__sflush_r+0xcc>
 800b498:	684a      	ldr	r2, [r1, #4]
 800b49a:	2a00      	cmp	r2, #0
 800b49c:	dc04      	bgt.n	800b4a8 <__sflush_r+0x1c>
 800b49e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b4a0:	2a00      	cmp	r2, #0
 800b4a2:	dc01      	bgt.n	800b4a8 <__sflush_r+0x1c>
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b4a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b4aa:	2f00      	cmp	r7, #0
 800b4ac:	d0fa      	beq.n	800b4a4 <__sflush_r+0x18>
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	2180      	movs	r1, #128	; 0x80
 800b4b2:	682e      	ldr	r6, [r5, #0]
 800b4b4:	602a      	str	r2, [r5, #0]
 800b4b6:	001a      	movs	r2, r3
 800b4b8:	0149      	lsls	r1, r1, #5
 800b4ba:	400a      	ands	r2, r1
 800b4bc:	420b      	tst	r3, r1
 800b4be:	d034      	beq.n	800b52a <__sflush_r+0x9e>
 800b4c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	075b      	lsls	r3, r3, #29
 800b4c6:	d506      	bpl.n	800b4d6 <__sflush_r+0x4a>
 800b4c8:	6863      	ldr	r3, [r4, #4]
 800b4ca:	1ac0      	subs	r0, r0, r3
 800b4cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <__sflush_r+0x4a>
 800b4d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4d4:	1ac0      	subs	r0, r0, r3
 800b4d6:	0002      	movs	r2, r0
 800b4d8:	6a21      	ldr	r1, [r4, #32]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	0028      	movs	r0, r5
 800b4de:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b4e0:	47b8      	blx	r7
 800b4e2:	89a1      	ldrh	r1, [r4, #12]
 800b4e4:	1c43      	adds	r3, r0, #1
 800b4e6:	d106      	bne.n	800b4f6 <__sflush_r+0x6a>
 800b4e8:	682b      	ldr	r3, [r5, #0]
 800b4ea:	2b1d      	cmp	r3, #29
 800b4ec:	d831      	bhi.n	800b552 <__sflush_r+0xc6>
 800b4ee:	4a2c      	ldr	r2, [pc, #176]	; (800b5a0 <__sflush_r+0x114>)
 800b4f0:	40da      	lsrs	r2, r3
 800b4f2:	07d3      	lsls	r3, r2, #31
 800b4f4:	d52d      	bpl.n	800b552 <__sflush_r+0xc6>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6063      	str	r3, [r4, #4]
 800b4fa:	6923      	ldr	r3, [r4, #16]
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	04cb      	lsls	r3, r1, #19
 800b500:	d505      	bpl.n	800b50e <__sflush_r+0x82>
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	d102      	bne.n	800b50c <__sflush_r+0x80>
 800b506:	682b      	ldr	r3, [r5, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d100      	bne.n	800b50e <__sflush_r+0x82>
 800b50c:	6560      	str	r0, [r4, #84]	; 0x54
 800b50e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b510:	602e      	str	r6, [r5, #0]
 800b512:	2900      	cmp	r1, #0
 800b514:	d0c6      	beq.n	800b4a4 <__sflush_r+0x18>
 800b516:	0023      	movs	r3, r4
 800b518:	3344      	adds	r3, #68	; 0x44
 800b51a:	4299      	cmp	r1, r3
 800b51c:	d002      	beq.n	800b524 <__sflush_r+0x98>
 800b51e:	0028      	movs	r0, r5
 800b520:	f7ff fac8 	bl	800aab4 <_free_r>
 800b524:	2000      	movs	r0, #0
 800b526:	6360      	str	r0, [r4, #52]	; 0x34
 800b528:	e7bd      	b.n	800b4a6 <__sflush_r+0x1a>
 800b52a:	2301      	movs	r3, #1
 800b52c:	0028      	movs	r0, r5
 800b52e:	6a21      	ldr	r1, [r4, #32]
 800b530:	47b8      	blx	r7
 800b532:	1c43      	adds	r3, r0, #1
 800b534:	d1c5      	bne.n	800b4c2 <__sflush_r+0x36>
 800b536:	682b      	ldr	r3, [r5, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d0c2      	beq.n	800b4c2 <__sflush_r+0x36>
 800b53c:	2b1d      	cmp	r3, #29
 800b53e:	d001      	beq.n	800b544 <__sflush_r+0xb8>
 800b540:	2b16      	cmp	r3, #22
 800b542:	d101      	bne.n	800b548 <__sflush_r+0xbc>
 800b544:	602e      	str	r6, [r5, #0]
 800b546:	e7ad      	b.n	800b4a4 <__sflush_r+0x18>
 800b548:	2340      	movs	r3, #64	; 0x40
 800b54a:	89a2      	ldrh	r2, [r4, #12]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	81a3      	strh	r3, [r4, #12]
 800b550:	e7a9      	b.n	800b4a6 <__sflush_r+0x1a>
 800b552:	2340      	movs	r3, #64	; 0x40
 800b554:	430b      	orrs	r3, r1
 800b556:	e7fa      	b.n	800b54e <__sflush_r+0xc2>
 800b558:	690f      	ldr	r7, [r1, #16]
 800b55a:	2f00      	cmp	r7, #0
 800b55c:	d0a2      	beq.n	800b4a4 <__sflush_r+0x18>
 800b55e:	680a      	ldr	r2, [r1, #0]
 800b560:	600f      	str	r7, [r1, #0]
 800b562:	1bd2      	subs	r2, r2, r7
 800b564:	9201      	str	r2, [sp, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	079b      	lsls	r3, r3, #30
 800b56a:	d100      	bne.n	800b56e <__sflush_r+0xe2>
 800b56c:	694a      	ldr	r2, [r1, #20]
 800b56e:	60a2      	str	r2, [r4, #8]
 800b570:	9b01      	ldr	r3, [sp, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	dc00      	bgt.n	800b578 <__sflush_r+0xec>
 800b576:	e795      	b.n	800b4a4 <__sflush_r+0x18>
 800b578:	003a      	movs	r2, r7
 800b57a:	0028      	movs	r0, r5
 800b57c:	9b01      	ldr	r3, [sp, #4]
 800b57e:	6a21      	ldr	r1, [r4, #32]
 800b580:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b582:	47b0      	blx	r6
 800b584:	2800      	cmp	r0, #0
 800b586:	dc06      	bgt.n	800b596 <__sflush_r+0x10a>
 800b588:	2340      	movs	r3, #64	; 0x40
 800b58a:	2001      	movs	r0, #1
 800b58c:	89a2      	ldrh	r2, [r4, #12]
 800b58e:	4240      	negs	r0, r0
 800b590:	4313      	orrs	r3, r2
 800b592:	81a3      	strh	r3, [r4, #12]
 800b594:	e787      	b.n	800b4a6 <__sflush_r+0x1a>
 800b596:	9b01      	ldr	r3, [sp, #4]
 800b598:	183f      	adds	r7, r7, r0
 800b59a:	1a1b      	subs	r3, r3, r0
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	e7e7      	b.n	800b570 <__sflush_r+0xe4>
 800b5a0:	20400001 	.word	0x20400001

0800b5a4 <_fflush_r>:
 800b5a4:	690b      	ldr	r3, [r1, #16]
 800b5a6:	b570      	push	{r4, r5, r6, lr}
 800b5a8:	0005      	movs	r5, r0
 800b5aa:	000c      	movs	r4, r1
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d102      	bne.n	800b5b6 <_fflush_r+0x12>
 800b5b0:	2500      	movs	r5, #0
 800b5b2:	0028      	movs	r0, r5
 800b5b4:	bd70      	pop	{r4, r5, r6, pc}
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d004      	beq.n	800b5c4 <_fflush_r+0x20>
 800b5ba:	6983      	ldr	r3, [r0, #24]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <_fflush_r+0x20>
 800b5c0:	f000 f892 	bl	800b6e8 <__sinit>
 800b5c4:	4b14      	ldr	r3, [pc, #80]	; (800b618 <_fflush_r+0x74>)
 800b5c6:	429c      	cmp	r4, r3
 800b5c8:	d11b      	bne.n	800b602 <_fflush_r+0x5e>
 800b5ca:	686c      	ldr	r4, [r5, #4]
 800b5cc:	220c      	movs	r2, #12
 800b5ce:	5ea3      	ldrsh	r3, [r4, r2]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d0ed      	beq.n	800b5b0 <_fflush_r+0xc>
 800b5d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5d6:	07d2      	lsls	r2, r2, #31
 800b5d8:	d404      	bmi.n	800b5e4 <_fflush_r+0x40>
 800b5da:	059b      	lsls	r3, r3, #22
 800b5dc:	d402      	bmi.n	800b5e4 <_fflush_r+0x40>
 800b5de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5e0:	f000 f923 	bl	800b82a <__retarget_lock_acquire_recursive>
 800b5e4:	0028      	movs	r0, r5
 800b5e6:	0021      	movs	r1, r4
 800b5e8:	f7ff ff50 	bl	800b48c <__sflush_r>
 800b5ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5ee:	0005      	movs	r5, r0
 800b5f0:	07db      	lsls	r3, r3, #31
 800b5f2:	d4de      	bmi.n	800b5b2 <_fflush_r+0xe>
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	059b      	lsls	r3, r3, #22
 800b5f8:	d4db      	bmi.n	800b5b2 <_fflush_r+0xe>
 800b5fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5fc:	f000 f916 	bl	800b82c <__retarget_lock_release_recursive>
 800b600:	e7d7      	b.n	800b5b2 <_fflush_r+0xe>
 800b602:	4b06      	ldr	r3, [pc, #24]	; (800b61c <_fflush_r+0x78>)
 800b604:	429c      	cmp	r4, r3
 800b606:	d101      	bne.n	800b60c <_fflush_r+0x68>
 800b608:	68ac      	ldr	r4, [r5, #8]
 800b60a:	e7df      	b.n	800b5cc <_fflush_r+0x28>
 800b60c:	4b04      	ldr	r3, [pc, #16]	; (800b620 <_fflush_r+0x7c>)
 800b60e:	429c      	cmp	r4, r3
 800b610:	d1dc      	bne.n	800b5cc <_fflush_r+0x28>
 800b612:	68ec      	ldr	r4, [r5, #12]
 800b614:	e7da      	b.n	800b5cc <_fflush_r+0x28>
 800b616:	46c0      	nop			; (mov r8, r8)
 800b618:	0800e544 	.word	0x0800e544
 800b61c:	0800e564 	.word	0x0800e564
 800b620:	0800e524 	.word	0x0800e524

0800b624 <std>:
 800b624:	2300      	movs	r3, #0
 800b626:	b510      	push	{r4, lr}
 800b628:	0004      	movs	r4, r0
 800b62a:	6003      	str	r3, [r0, #0]
 800b62c:	6043      	str	r3, [r0, #4]
 800b62e:	6083      	str	r3, [r0, #8]
 800b630:	8181      	strh	r1, [r0, #12]
 800b632:	6643      	str	r3, [r0, #100]	; 0x64
 800b634:	0019      	movs	r1, r3
 800b636:	81c2      	strh	r2, [r0, #14]
 800b638:	6103      	str	r3, [r0, #16]
 800b63a:	6143      	str	r3, [r0, #20]
 800b63c:	6183      	str	r3, [r0, #24]
 800b63e:	2208      	movs	r2, #8
 800b640:	305c      	adds	r0, #92	; 0x5c
 800b642:	f7fd fb1d 	bl	8008c80 <memset>
 800b646:	4b05      	ldr	r3, [pc, #20]	; (800b65c <std+0x38>)
 800b648:	6263      	str	r3, [r4, #36]	; 0x24
 800b64a:	4b05      	ldr	r3, [pc, #20]	; (800b660 <std+0x3c>)
 800b64c:	6224      	str	r4, [r4, #32]
 800b64e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <std+0x40>)
 800b652:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b654:	4b04      	ldr	r3, [pc, #16]	; (800b668 <std+0x44>)
 800b656:	6323      	str	r3, [r4, #48]	; 0x30
 800b658:	bd10      	pop	{r4, pc}
 800b65a:	46c0      	nop			; (mov r8, r8)
 800b65c:	0800b9ad 	.word	0x0800b9ad
 800b660:	0800b9d5 	.word	0x0800b9d5
 800b664:	0800ba0d 	.word	0x0800ba0d
 800b668:	0800ba39 	.word	0x0800ba39

0800b66c <_cleanup_r>:
 800b66c:	b510      	push	{r4, lr}
 800b66e:	4902      	ldr	r1, [pc, #8]	; (800b678 <_cleanup_r+0xc>)
 800b670:	f000 f8ba 	bl	800b7e8 <_fwalk_reent>
 800b674:	bd10      	pop	{r4, pc}
 800b676:	46c0      	nop			; (mov r8, r8)
 800b678:	0800b5a5 	.word	0x0800b5a5

0800b67c <__sfmoreglue>:
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	2568      	movs	r5, #104	; 0x68
 800b680:	1e4a      	subs	r2, r1, #1
 800b682:	4355      	muls	r5, r2
 800b684:	000e      	movs	r6, r1
 800b686:	0029      	movs	r1, r5
 800b688:	3174      	adds	r1, #116	; 0x74
 800b68a:	f7ff fa5d 	bl	800ab48 <_malloc_r>
 800b68e:	1e04      	subs	r4, r0, #0
 800b690:	d008      	beq.n	800b6a4 <__sfmoreglue+0x28>
 800b692:	2100      	movs	r1, #0
 800b694:	002a      	movs	r2, r5
 800b696:	6001      	str	r1, [r0, #0]
 800b698:	6046      	str	r6, [r0, #4]
 800b69a:	300c      	adds	r0, #12
 800b69c:	60a0      	str	r0, [r4, #8]
 800b69e:	3268      	adds	r2, #104	; 0x68
 800b6a0:	f7fd faee 	bl	8008c80 <memset>
 800b6a4:	0020      	movs	r0, r4
 800b6a6:	bd70      	pop	{r4, r5, r6, pc}

0800b6a8 <__sfp_lock_acquire>:
 800b6a8:	b510      	push	{r4, lr}
 800b6aa:	4802      	ldr	r0, [pc, #8]	; (800b6b4 <__sfp_lock_acquire+0xc>)
 800b6ac:	f000 f8bd 	bl	800b82a <__retarget_lock_acquire_recursive>
 800b6b0:	bd10      	pop	{r4, pc}
 800b6b2:	46c0      	nop			; (mov r8, r8)
 800b6b4:	20000584 	.word	0x20000584

0800b6b8 <__sfp_lock_release>:
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	4802      	ldr	r0, [pc, #8]	; (800b6c4 <__sfp_lock_release+0xc>)
 800b6bc:	f000 f8b6 	bl	800b82c <__retarget_lock_release_recursive>
 800b6c0:	bd10      	pop	{r4, pc}
 800b6c2:	46c0      	nop			; (mov r8, r8)
 800b6c4:	20000584 	.word	0x20000584

0800b6c8 <__sinit_lock_acquire>:
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	4802      	ldr	r0, [pc, #8]	; (800b6d4 <__sinit_lock_acquire+0xc>)
 800b6cc:	f000 f8ad 	bl	800b82a <__retarget_lock_acquire_recursive>
 800b6d0:	bd10      	pop	{r4, pc}
 800b6d2:	46c0      	nop			; (mov r8, r8)
 800b6d4:	2000057f 	.word	0x2000057f

0800b6d8 <__sinit_lock_release>:
 800b6d8:	b510      	push	{r4, lr}
 800b6da:	4802      	ldr	r0, [pc, #8]	; (800b6e4 <__sinit_lock_release+0xc>)
 800b6dc:	f000 f8a6 	bl	800b82c <__retarget_lock_release_recursive>
 800b6e0:	bd10      	pop	{r4, pc}
 800b6e2:	46c0      	nop			; (mov r8, r8)
 800b6e4:	2000057f 	.word	0x2000057f

0800b6e8 <__sinit>:
 800b6e8:	b513      	push	{r0, r1, r4, lr}
 800b6ea:	0004      	movs	r4, r0
 800b6ec:	f7ff ffec 	bl	800b6c8 <__sinit_lock_acquire>
 800b6f0:	69a3      	ldr	r3, [r4, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d002      	beq.n	800b6fc <__sinit+0x14>
 800b6f6:	f7ff ffef 	bl	800b6d8 <__sinit_lock_release>
 800b6fa:	bd13      	pop	{r0, r1, r4, pc}
 800b6fc:	64a3      	str	r3, [r4, #72]	; 0x48
 800b6fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b700:	6523      	str	r3, [r4, #80]	; 0x50
 800b702:	4b13      	ldr	r3, [pc, #76]	; (800b750 <__sinit+0x68>)
 800b704:	4a13      	ldr	r2, [pc, #76]	; (800b754 <__sinit+0x6c>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	62a2      	str	r2, [r4, #40]	; 0x28
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	42a3      	cmp	r3, r4
 800b70e:	d101      	bne.n	800b714 <__sinit+0x2c>
 800b710:	2301      	movs	r3, #1
 800b712:	61a3      	str	r3, [r4, #24]
 800b714:	0020      	movs	r0, r4
 800b716:	f000 f81f 	bl	800b758 <__sfp>
 800b71a:	6060      	str	r0, [r4, #4]
 800b71c:	0020      	movs	r0, r4
 800b71e:	f000 f81b 	bl	800b758 <__sfp>
 800b722:	60a0      	str	r0, [r4, #8]
 800b724:	0020      	movs	r0, r4
 800b726:	f000 f817 	bl	800b758 <__sfp>
 800b72a:	2200      	movs	r2, #0
 800b72c:	2104      	movs	r1, #4
 800b72e:	60e0      	str	r0, [r4, #12]
 800b730:	6860      	ldr	r0, [r4, #4]
 800b732:	f7ff ff77 	bl	800b624 <std>
 800b736:	2201      	movs	r2, #1
 800b738:	2109      	movs	r1, #9
 800b73a:	68a0      	ldr	r0, [r4, #8]
 800b73c:	f7ff ff72 	bl	800b624 <std>
 800b740:	2202      	movs	r2, #2
 800b742:	2112      	movs	r1, #18
 800b744:	68e0      	ldr	r0, [r4, #12]
 800b746:	f7ff ff6d 	bl	800b624 <std>
 800b74a:	2301      	movs	r3, #1
 800b74c:	61a3      	str	r3, [r4, #24]
 800b74e:	e7d2      	b.n	800b6f6 <__sinit+0xe>
 800b750:	0800e1a4 	.word	0x0800e1a4
 800b754:	0800b66d 	.word	0x0800b66d

0800b758 <__sfp>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	0007      	movs	r7, r0
 800b75c:	f7ff ffa4 	bl	800b6a8 <__sfp_lock_acquire>
 800b760:	4b1f      	ldr	r3, [pc, #124]	; (800b7e0 <__sfp+0x88>)
 800b762:	681e      	ldr	r6, [r3, #0]
 800b764:	69b3      	ldr	r3, [r6, #24]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d102      	bne.n	800b770 <__sfp+0x18>
 800b76a:	0030      	movs	r0, r6
 800b76c:	f7ff ffbc 	bl	800b6e8 <__sinit>
 800b770:	3648      	adds	r6, #72	; 0x48
 800b772:	68b4      	ldr	r4, [r6, #8]
 800b774:	6873      	ldr	r3, [r6, #4]
 800b776:	3b01      	subs	r3, #1
 800b778:	d504      	bpl.n	800b784 <__sfp+0x2c>
 800b77a:	6833      	ldr	r3, [r6, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d022      	beq.n	800b7c6 <__sfp+0x6e>
 800b780:	6836      	ldr	r6, [r6, #0]
 800b782:	e7f6      	b.n	800b772 <__sfp+0x1a>
 800b784:	220c      	movs	r2, #12
 800b786:	5ea5      	ldrsh	r5, [r4, r2]
 800b788:	2d00      	cmp	r5, #0
 800b78a:	d11a      	bne.n	800b7c2 <__sfp+0x6a>
 800b78c:	0020      	movs	r0, r4
 800b78e:	4b15      	ldr	r3, [pc, #84]	; (800b7e4 <__sfp+0x8c>)
 800b790:	3058      	adds	r0, #88	; 0x58
 800b792:	60e3      	str	r3, [r4, #12]
 800b794:	6665      	str	r5, [r4, #100]	; 0x64
 800b796:	f000 f847 	bl	800b828 <__retarget_lock_init_recursive>
 800b79a:	f7ff ff8d 	bl	800b6b8 <__sfp_lock_release>
 800b79e:	0020      	movs	r0, r4
 800b7a0:	2208      	movs	r2, #8
 800b7a2:	0029      	movs	r1, r5
 800b7a4:	6025      	str	r5, [r4, #0]
 800b7a6:	60a5      	str	r5, [r4, #8]
 800b7a8:	6065      	str	r5, [r4, #4]
 800b7aa:	6125      	str	r5, [r4, #16]
 800b7ac:	6165      	str	r5, [r4, #20]
 800b7ae:	61a5      	str	r5, [r4, #24]
 800b7b0:	305c      	adds	r0, #92	; 0x5c
 800b7b2:	f7fd fa65 	bl	8008c80 <memset>
 800b7b6:	6365      	str	r5, [r4, #52]	; 0x34
 800b7b8:	63a5      	str	r5, [r4, #56]	; 0x38
 800b7ba:	64a5      	str	r5, [r4, #72]	; 0x48
 800b7bc:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b7be:	0020      	movs	r0, r4
 800b7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c2:	3468      	adds	r4, #104	; 0x68
 800b7c4:	e7d7      	b.n	800b776 <__sfp+0x1e>
 800b7c6:	2104      	movs	r1, #4
 800b7c8:	0038      	movs	r0, r7
 800b7ca:	f7ff ff57 	bl	800b67c <__sfmoreglue>
 800b7ce:	1e04      	subs	r4, r0, #0
 800b7d0:	6030      	str	r0, [r6, #0]
 800b7d2:	d1d5      	bne.n	800b780 <__sfp+0x28>
 800b7d4:	f7ff ff70 	bl	800b6b8 <__sfp_lock_release>
 800b7d8:	230c      	movs	r3, #12
 800b7da:	603b      	str	r3, [r7, #0]
 800b7dc:	e7ef      	b.n	800b7be <__sfp+0x66>
 800b7de:	46c0      	nop			; (mov r8, r8)
 800b7e0:	0800e1a4 	.word	0x0800e1a4
 800b7e4:	ffff0001 	.word	0xffff0001

0800b7e8 <_fwalk_reent>:
 800b7e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ea:	0004      	movs	r4, r0
 800b7ec:	0006      	movs	r6, r0
 800b7ee:	2700      	movs	r7, #0
 800b7f0:	9101      	str	r1, [sp, #4]
 800b7f2:	3448      	adds	r4, #72	; 0x48
 800b7f4:	6863      	ldr	r3, [r4, #4]
 800b7f6:	68a5      	ldr	r5, [r4, #8]
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	9b00      	ldr	r3, [sp, #0]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	d504      	bpl.n	800b80c <_fwalk_reent+0x24>
 800b802:	6824      	ldr	r4, [r4, #0]
 800b804:	2c00      	cmp	r4, #0
 800b806:	d1f5      	bne.n	800b7f4 <_fwalk_reent+0xc>
 800b808:	0038      	movs	r0, r7
 800b80a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b80c:	89ab      	ldrh	r3, [r5, #12]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d908      	bls.n	800b824 <_fwalk_reent+0x3c>
 800b812:	220e      	movs	r2, #14
 800b814:	5eab      	ldrsh	r3, [r5, r2]
 800b816:	3301      	adds	r3, #1
 800b818:	d004      	beq.n	800b824 <_fwalk_reent+0x3c>
 800b81a:	0029      	movs	r1, r5
 800b81c:	0030      	movs	r0, r6
 800b81e:	9b01      	ldr	r3, [sp, #4]
 800b820:	4798      	blx	r3
 800b822:	4307      	orrs	r7, r0
 800b824:	3568      	adds	r5, #104	; 0x68
 800b826:	e7e8      	b.n	800b7fa <_fwalk_reent+0x12>

0800b828 <__retarget_lock_init_recursive>:
 800b828:	4770      	bx	lr

0800b82a <__retarget_lock_acquire_recursive>:
 800b82a:	4770      	bx	lr

0800b82c <__retarget_lock_release_recursive>:
 800b82c:	4770      	bx	lr
	...

0800b830 <__swhatbuf_r>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	000e      	movs	r6, r1
 800b834:	001d      	movs	r5, r3
 800b836:	230e      	movs	r3, #14
 800b838:	5ec9      	ldrsh	r1, [r1, r3]
 800b83a:	0014      	movs	r4, r2
 800b83c:	b096      	sub	sp, #88	; 0x58
 800b83e:	2900      	cmp	r1, #0
 800b840:	da07      	bge.n	800b852 <__swhatbuf_r+0x22>
 800b842:	2300      	movs	r3, #0
 800b844:	602b      	str	r3, [r5, #0]
 800b846:	89b3      	ldrh	r3, [r6, #12]
 800b848:	061b      	lsls	r3, r3, #24
 800b84a:	d411      	bmi.n	800b870 <__swhatbuf_r+0x40>
 800b84c:	2380      	movs	r3, #128	; 0x80
 800b84e:	00db      	lsls	r3, r3, #3
 800b850:	e00f      	b.n	800b872 <__swhatbuf_r+0x42>
 800b852:	466a      	mov	r2, sp
 800b854:	f000 f91c 	bl	800ba90 <_fstat_r>
 800b858:	2800      	cmp	r0, #0
 800b85a:	dbf2      	blt.n	800b842 <__swhatbuf_r+0x12>
 800b85c:	23f0      	movs	r3, #240	; 0xf0
 800b85e:	9901      	ldr	r1, [sp, #4]
 800b860:	021b      	lsls	r3, r3, #8
 800b862:	4019      	ands	r1, r3
 800b864:	4b05      	ldr	r3, [pc, #20]	; (800b87c <__swhatbuf_r+0x4c>)
 800b866:	18c9      	adds	r1, r1, r3
 800b868:	424b      	negs	r3, r1
 800b86a:	4159      	adcs	r1, r3
 800b86c:	6029      	str	r1, [r5, #0]
 800b86e:	e7ed      	b.n	800b84c <__swhatbuf_r+0x1c>
 800b870:	2340      	movs	r3, #64	; 0x40
 800b872:	2000      	movs	r0, #0
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	b016      	add	sp, #88	; 0x58
 800b878:	bd70      	pop	{r4, r5, r6, pc}
 800b87a:	46c0      	nop			; (mov r8, r8)
 800b87c:	ffffe000 	.word	0xffffe000

0800b880 <__smakebuf_r>:
 800b880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b882:	2602      	movs	r6, #2
 800b884:	898b      	ldrh	r3, [r1, #12]
 800b886:	0005      	movs	r5, r0
 800b888:	000c      	movs	r4, r1
 800b88a:	4233      	tst	r3, r6
 800b88c:	d006      	beq.n	800b89c <__smakebuf_r+0x1c>
 800b88e:	0023      	movs	r3, r4
 800b890:	3347      	adds	r3, #71	; 0x47
 800b892:	6023      	str	r3, [r4, #0]
 800b894:	6123      	str	r3, [r4, #16]
 800b896:	2301      	movs	r3, #1
 800b898:	6163      	str	r3, [r4, #20]
 800b89a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b89c:	466a      	mov	r2, sp
 800b89e:	ab01      	add	r3, sp, #4
 800b8a0:	f7ff ffc6 	bl	800b830 <__swhatbuf_r>
 800b8a4:	9900      	ldr	r1, [sp, #0]
 800b8a6:	0007      	movs	r7, r0
 800b8a8:	0028      	movs	r0, r5
 800b8aa:	f7ff f94d 	bl	800ab48 <_malloc_r>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d108      	bne.n	800b8c4 <__smakebuf_r+0x44>
 800b8b2:	220c      	movs	r2, #12
 800b8b4:	5ea3      	ldrsh	r3, [r4, r2]
 800b8b6:	059a      	lsls	r2, r3, #22
 800b8b8:	d4ef      	bmi.n	800b89a <__smakebuf_r+0x1a>
 800b8ba:	2203      	movs	r2, #3
 800b8bc:	4393      	bics	r3, r2
 800b8be:	431e      	orrs	r6, r3
 800b8c0:	81a6      	strh	r6, [r4, #12]
 800b8c2:	e7e4      	b.n	800b88e <__smakebuf_r+0xe>
 800b8c4:	4b0f      	ldr	r3, [pc, #60]	; (800b904 <__smakebuf_r+0x84>)
 800b8c6:	62ab      	str	r3, [r5, #40]	; 0x28
 800b8c8:	2380      	movs	r3, #128	; 0x80
 800b8ca:	89a2      	ldrh	r2, [r4, #12]
 800b8cc:	6020      	str	r0, [r4, #0]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	81a3      	strh	r3, [r4, #12]
 800b8d2:	9b00      	ldr	r3, [sp, #0]
 800b8d4:	6120      	str	r0, [r4, #16]
 800b8d6:	6163      	str	r3, [r4, #20]
 800b8d8:	9b01      	ldr	r3, [sp, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00d      	beq.n	800b8fa <__smakebuf_r+0x7a>
 800b8de:	0028      	movs	r0, r5
 800b8e0:	230e      	movs	r3, #14
 800b8e2:	5ee1      	ldrsh	r1, [r4, r3]
 800b8e4:	f000 f8e6 	bl	800bab4 <_isatty_r>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d006      	beq.n	800b8fa <__smakebuf_r+0x7a>
 800b8ec:	2203      	movs	r2, #3
 800b8ee:	89a3      	ldrh	r3, [r4, #12]
 800b8f0:	4393      	bics	r3, r2
 800b8f2:	001a      	movs	r2, r3
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	81a3      	strh	r3, [r4, #12]
 800b8fa:	89a0      	ldrh	r0, [r4, #12]
 800b8fc:	4307      	orrs	r7, r0
 800b8fe:	81a7      	strh	r7, [r4, #12]
 800b900:	e7cb      	b.n	800b89a <__smakebuf_r+0x1a>
 800b902:	46c0      	nop			; (mov r8, r8)
 800b904:	0800b66d 	.word	0x0800b66d

0800b908 <_malloc_usable_size_r>:
 800b908:	1f0b      	subs	r3, r1, #4
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	1f18      	subs	r0, r3, #4
 800b90e:	2b00      	cmp	r3, #0
 800b910:	da01      	bge.n	800b916 <_malloc_usable_size_r+0xe>
 800b912:	580b      	ldr	r3, [r1, r0]
 800b914:	18c0      	adds	r0, r0, r3
 800b916:	4770      	bx	lr

0800b918 <_raise_r>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	0004      	movs	r4, r0
 800b91c:	000d      	movs	r5, r1
 800b91e:	291f      	cmp	r1, #31
 800b920:	d904      	bls.n	800b92c <_raise_r+0x14>
 800b922:	2316      	movs	r3, #22
 800b924:	6003      	str	r3, [r0, #0]
 800b926:	2001      	movs	r0, #1
 800b928:	4240      	negs	r0, r0
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d004      	beq.n	800b93c <_raise_r+0x24>
 800b932:	008a      	lsls	r2, r1, #2
 800b934:	189b      	adds	r3, r3, r2
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	2a00      	cmp	r2, #0
 800b93a:	d108      	bne.n	800b94e <_raise_r+0x36>
 800b93c:	0020      	movs	r0, r4
 800b93e:	f000 f831 	bl	800b9a4 <_getpid_r>
 800b942:	002a      	movs	r2, r5
 800b944:	0001      	movs	r1, r0
 800b946:	0020      	movs	r0, r4
 800b948:	f000 f81a 	bl	800b980 <_kill_r>
 800b94c:	e7ed      	b.n	800b92a <_raise_r+0x12>
 800b94e:	2000      	movs	r0, #0
 800b950:	2a01      	cmp	r2, #1
 800b952:	d0ea      	beq.n	800b92a <_raise_r+0x12>
 800b954:	1c51      	adds	r1, r2, #1
 800b956:	d103      	bne.n	800b960 <_raise_r+0x48>
 800b958:	2316      	movs	r3, #22
 800b95a:	3001      	adds	r0, #1
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	e7e4      	b.n	800b92a <_raise_r+0x12>
 800b960:	2400      	movs	r4, #0
 800b962:	0028      	movs	r0, r5
 800b964:	601c      	str	r4, [r3, #0]
 800b966:	4790      	blx	r2
 800b968:	0020      	movs	r0, r4
 800b96a:	e7de      	b.n	800b92a <_raise_r+0x12>

0800b96c <raise>:
 800b96c:	b510      	push	{r4, lr}
 800b96e:	4b03      	ldr	r3, [pc, #12]	; (800b97c <raise+0x10>)
 800b970:	0001      	movs	r1, r0
 800b972:	6818      	ldr	r0, [r3, #0]
 800b974:	f7ff ffd0 	bl	800b918 <_raise_r>
 800b978:	bd10      	pop	{r4, pc}
 800b97a:	46c0      	nop			; (mov r8, r8)
 800b97c:	2000000c 	.word	0x2000000c

0800b980 <_kill_r>:
 800b980:	2300      	movs	r3, #0
 800b982:	b570      	push	{r4, r5, r6, lr}
 800b984:	4d06      	ldr	r5, [pc, #24]	; (800b9a0 <_kill_r+0x20>)
 800b986:	0004      	movs	r4, r0
 800b988:	0008      	movs	r0, r1
 800b98a:	0011      	movs	r1, r2
 800b98c:	602b      	str	r3, [r5, #0]
 800b98e:	f7f9 ff0c 	bl	80057aa <_kill>
 800b992:	1c43      	adds	r3, r0, #1
 800b994:	d103      	bne.n	800b99e <_kill_r+0x1e>
 800b996:	682b      	ldr	r3, [r5, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d000      	beq.n	800b99e <_kill_r+0x1e>
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	bd70      	pop	{r4, r5, r6, pc}
 800b9a0:	20000578 	.word	0x20000578

0800b9a4 <_getpid_r>:
 800b9a4:	b510      	push	{r4, lr}
 800b9a6:	f7f9 fefa 	bl	800579e <_getpid>
 800b9aa:	bd10      	pop	{r4, pc}

0800b9ac <__sread>:
 800b9ac:	b570      	push	{r4, r5, r6, lr}
 800b9ae:	000c      	movs	r4, r1
 800b9b0:	250e      	movs	r5, #14
 800b9b2:	5f49      	ldrsh	r1, [r1, r5]
 800b9b4:	f000 f8a4 	bl	800bb00 <_read_r>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	db03      	blt.n	800b9c4 <__sread+0x18>
 800b9bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b9be:	181b      	adds	r3, r3, r0
 800b9c0:	6563      	str	r3, [r4, #84]	; 0x54
 800b9c2:	bd70      	pop	{r4, r5, r6, pc}
 800b9c4:	89a3      	ldrh	r3, [r4, #12]
 800b9c6:	4a02      	ldr	r2, [pc, #8]	; (800b9d0 <__sread+0x24>)
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	81a3      	strh	r3, [r4, #12]
 800b9cc:	e7f9      	b.n	800b9c2 <__sread+0x16>
 800b9ce:	46c0      	nop			; (mov r8, r8)
 800b9d0:	ffffefff 	.word	0xffffefff

0800b9d4 <__swrite>:
 800b9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d6:	001f      	movs	r7, r3
 800b9d8:	898b      	ldrh	r3, [r1, #12]
 800b9da:	0005      	movs	r5, r0
 800b9dc:	000c      	movs	r4, r1
 800b9de:	0016      	movs	r6, r2
 800b9e0:	05db      	lsls	r3, r3, #23
 800b9e2:	d505      	bpl.n	800b9f0 <__swrite+0x1c>
 800b9e4:	230e      	movs	r3, #14
 800b9e6:	5ec9      	ldrsh	r1, [r1, r3]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	f000 f874 	bl	800bad8 <_lseek_r>
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	4a05      	ldr	r2, [pc, #20]	; (800ba08 <__swrite+0x34>)
 800b9f4:	0028      	movs	r0, r5
 800b9f6:	4013      	ands	r3, r2
 800b9f8:	81a3      	strh	r3, [r4, #12]
 800b9fa:	0032      	movs	r2, r6
 800b9fc:	230e      	movs	r3, #14
 800b9fe:	5ee1      	ldrsh	r1, [r4, r3]
 800ba00:	003b      	movs	r3, r7
 800ba02:	f000 f81f 	bl	800ba44 <_write_r>
 800ba06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba08:	ffffefff 	.word	0xffffefff

0800ba0c <__sseek>:
 800ba0c:	b570      	push	{r4, r5, r6, lr}
 800ba0e:	000c      	movs	r4, r1
 800ba10:	250e      	movs	r5, #14
 800ba12:	5f49      	ldrsh	r1, [r1, r5]
 800ba14:	f000 f860 	bl	800bad8 <_lseek_r>
 800ba18:	89a3      	ldrh	r3, [r4, #12]
 800ba1a:	1c42      	adds	r2, r0, #1
 800ba1c:	d103      	bne.n	800ba26 <__sseek+0x1a>
 800ba1e:	4a05      	ldr	r2, [pc, #20]	; (800ba34 <__sseek+0x28>)
 800ba20:	4013      	ands	r3, r2
 800ba22:	81a3      	strh	r3, [r4, #12]
 800ba24:	bd70      	pop	{r4, r5, r6, pc}
 800ba26:	2280      	movs	r2, #128	; 0x80
 800ba28:	0152      	lsls	r2, r2, #5
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	81a3      	strh	r3, [r4, #12]
 800ba2e:	6560      	str	r0, [r4, #84]	; 0x54
 800ba30:	e7f8      	b.n	800ba24 <__sseek+0x18>
 800ba32:	46c0      	nop			; (mov r8, r8)
 800ba34:	ffffefff 	.word	0xffffefff

0800ba38 <__sclose>:
 800ba38:	b510      	push	{r4, lr}
 800ba3a:	230e      	movs	r3, #14
 800ba3c:	5ec9      	ldrsh	r1, [r1, r3]
 800ba3e:	f000 f815 	bl	800ba6c <_close_r>
 800ba42:	bd10      	pop	{r4, pc}

0800ba44 <_write_r>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	0004      	movs	r4, r0
 800ba48:	0008      	movs	r0, r1
 800ba4a:	0011      	movs	r1, r2
 800ba4c:	001a      	movs	r2, r3
 800ba4e:	2300      	movs	r3, #0
 800ba50:	4d05      	ldr	r5, [pc, #20]	; (800ba68 <_write_r+0x24>)
 800ba52:	602b      	str	r3, [r5, #0]
 800ba54:	f7f9 fee2 	bl	800581c <_write>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d103      	bne.n	800ba64 <_write_r+0x20>
 800ba5c:	682b      	ldr	r3, [r5, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d000      	beq.n	800ba64 <_write_r+0x20>
 800ba62:	6023      	str	r3, [r4, #0]
 800ba64:	bd70      	pop	{r4, r5, r6, pc}
 800ba66:	46c0      	nop			; (mov r8, r8)
 800ba68:	20000578 	.word	0x20000578

0800ba6c <_close_r>:
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	b570      	push	{r4, r5, r6, lr}
 800ba70:	4d06      	ldr	r5, [pc, #24]	; (800ba8c <_close_r+0x20>)
 800ba72:	0004      	movs	r4, r0
 800ba74:	0008      	movs	r0, r1
 800ba76:	602b      	str	r3, [r5, #0]
 800ba78:	f7f9 feec 	bl	8005854 <_close>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d103      	bne.n	800ba88 <_close_r+0x1c>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d000      	beq.n	800ba88 <_close_r+0x1c>
 800ba86:	6023      	str	r3, [r4, #0]
 800ba88:	bd70      	pop	{r4, r5, r6, pc}
 800ba8a:	46c0      	nop			; (mov r8, r8)
 800ba8c:	20000578 	.word	0x20000578

0800ba90 <_fstat_r>:
 800ba90:	2300      	movs	r3, #0
 800ba92:	b570      	push	{r4, r5, r6, lr}
 800ba94:	4d06      	ldr	r5, [pc, #24]	; (800bab0 <_fstat_r+0x20>)
 800ba96:	0004      	movs	r4, r0
 800ba98:	0008      	movs	r0, r1
 800ba9a:	0011      	movs	r1, r2
 800ba9c:	602b      	str	r3, [r5, #0]
 800ba9e:	f7f9 fee3 	bl	8005868 <_fstat>
 800baa2:	1c43      	adds	r3, r0, #1
 800baa4:	d103      	bne.n	800baae <_fstat_r+0x1e>
 800baa6:	682b      	ldr	r3, [r5, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d000      	beq.n	800baae <_fstat_r+0x1e>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	20000578 	.word	0x20000578

0800bab4 <_isatty_r>:
 800bab4:	2300      	movs	r3, #0
 800bab6:	b570      	push	{r4, r5, r6, lr}
 800bab8:	4d06      	ldr	r5, [pc, #24]	; (800bad4 <_isatty_r+0x20>)
 800baba:	0004      	movs	r4, r0
 800babc:	0008      	movs	r0, r1
 800babe:	602b      	str	r3, [r5, #0]
 800bac0:	f7f9 fee0 	bl	8005884 <_isatty>
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	d103      	bne.n	800bad0 <_isatty_r+0x1c>
 800bac8:	682b      	ldr	r3, [r5, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d000      	beq.n	800bad0 <_isatty_r+0x1c>
 800bace:	6023      	str	r3, [r4, #0]
 800bad0:	bd70      	pop	{r4, r5, r6, pc}
 800bad2:	46c0      	nop			; (mov r8, r8)
 800bad4:	20000578 	.word	0x20000578

0800bad8 <_lseek_r>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	0004      	movs	r4, r0
 800badc:	0008      	movs	r0, r1
 800bade:	0011      	movs	r1, r2
 800bae0:	001a      	movs	r2, r3
 800bae2:	2300      	movs	r3, #0
 800bae4:	4d05      	ldr	r5, [pc, #20]	; (800bafc <_lseek_r+0x24>)
 800bae6:	602b      	str	r3, [r5, #0]
 800bae8:	f7f9 fed5 	bl	8005896 <_lseek>
 800baec:	1c43      	adds	r3, r0, #1
 800baee:	d103      	bne.n	800baf8 <_lseek_r+0x20>
 800baf0:	682b      	ldr	r3, [r5, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d000      	beq.n	800baf8 <_lseek_r+0x20>
 800baf6:	6023      	str	r3, [r4, #0]
 800baf8:	bd70      	pop	{r4, r5, r6, pc}
 800bafa:	46c0      	nop			; (mov r8, r8)
 800bafc:	20000578 	.word	0x20000578

0800bb00 <_read_r>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	0004      	movs	r4, r0
 800bb04:	0008      	movs	r0, r1
 800bb06:	0011      	movs	r1, r2
 800bb08:	001a      	movs	r2, r3
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	4d05      	ldr	r5, [pc, #20]	; (800bb24 <_read_r+0x24>)
 800bb0e:	602b      	str	r3, [r5, #0]
 800bb10:	f7f9 fe67 	bl	80057e2 <_read>
 800bb14:	1c43      	adds	r3, r0, #1
 800bb16:	d103      	bne.n	800bb20 <_read_r+0x20>
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d000      	beq.n	800bb20 <_read_r+0x20>
 800bb1e:	6023      	str	r3, [r4, #0]
 800bb20:	bd70      	pop	{r4, r5, r6, pc}
 800bb22:	46c0      	nop			; (mov r8, r8)
 800bb24:	20000578 	.word	0x20000578

0800bb28 <atan>:
 800bb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb2a:	4b98      	ldr	r3, [pc, #608]	; (800bd8c <atan+0x264>)
 800bb2c:	b085      	sub	sp, #20
 800bb2e:	004e      	lsls	r6, r1, #1
 800bb30:	0004      	movs	r4, r0
 800bb32:	000d      	movs	r5, r1
 800bb34:	9103      	str	r1, [sp, #12]
 800bb36:	0876      	lsrs	r6, r6, #1
 800bb38:	429e      	cmp	r6, r3
 800bb3a:	dd18      	ble.n	800bb6e <atan+0x46>
 800bb3c:	4b94      	ldr	r3, [pc, #592]	; (800bd90 <atan+0x268>)
 800bb3e:	429e      	cmp	r6, r3
 800bb40:	dc02      	bgt.n	800bb48 <atan+0x20>
 800bb42:	d10a      	bne.n	800bb5a <atan+0x32>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d008      	beq.n	800bb5a <atan+0x32>
 800bb48:	0022      	movs	r2, r4
 800bb4a:	002b      	movs	r3, r5
 800bb4c:	0020      	movs	r0, r4
 800bb4e:	0029      	movs	r1, r5
 800bb50:	f7f5 fa76 	bl	8001040 <__aeabi_dadd>
 800bb54:	0004      	movs	r4, r0
 800bb56:	000d      	movs	r5, r1
 800bb58:	e005      	b.n	800bb66 <atan+0x3e>
 800bb5a:	9b03      	ldr	r3, [sp, #12]
 800bb5c:	4c8d      	ldr	r4, [pc, #564]	; (800bd94 <atan+0x26c>)
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	dd00      	ble.n	800bb64 <atan+0x3c>
 800bb62:	e110      	b.n	800bd86 <atan+0x25e>
 800bb64:	4d8c      	ldr	r5, [pc, #560]	; (800bd98 <atan+0x270>)
 800bb66:	0020      	movs	r0, r4
 800bb68:	0029      	movs	r1, r5
 800bb6a:	b005      	add	sp, #20
 800bb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb6e:	4b8b      	ldr	r3, [pc, #556]	; (800bd9c <atan+0x274>)
 800bb70:	429e      	cmp	r6, r3
 800bb72:	dc0f      	bgt.n	800bb94 <atan+0x6c>
 800bb74:	4b8a      	ldr	r3, [pc, #552]	; (800bda0 <atan+0x278>)
 800bb76:	429e      	cmp	r6, r3
 800bb78:	dc09      	bgt.n	800bb8e <atan+0x66>
 800bb7a:	4a8a      	ldr	r2, [pc, #552]	; (800bda4 <atan+0x27c>)
 800bb7c:	4b8a      	ldr	r3, [pc, #552]	; (800bda8 <atan+0x280>)
 800bb7e:	f7f5 fa5f 	bl	8001040 <__aeabi_dadd>
 800bb82:	2200      	movs	r2, #0
 800bb84:	4b89      	ldr	r3, [pc, #548]	; (800bdac <atan+0x284>)
 800bb86:	f7f4 fc77 	bl	8000478 <__aeabi_dcmpgt>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d1eb      	bne.n	800bb66 <atan+0x3e>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	425b      	negs	r3, r3
 800bb92:	e025      	b.n	800bbe0 <atan+0xb8>
 800bb94:	f000 f98a 	bl	800beac <fabs>
 800bb98:	4b85      	ldr	r3, [pc, #532]	; (800bdb0 <atan+0x288>)
 800bb9a:	0004      	movs	r4, r0
 800bb9c:	000d      	movs	r5, r1
 800bb9e:	429e      	cmp	r6, r3
 800bba0:	dd00      	ble.n	800bba4 <atan+0x7c>
 800bba2:	e0aa      	b.n	800bcfa <atan+0x1d2>
 800bba4:	4b83      	ldr	r3, [pc, #524]	; (800bdb4 <atan+0x28c>)
 800bba6:	429e      	cmp	r6, r3
 800bba8:	dd00      	ble.n	800bbac <atan+0x84>
 800bbaa:	e090      	b.n	800bcce <atan+0x1a6>
 800bbac:	0002      	movs	r2, r0
 800bbae:	000b      	movs	r3, r1
 800bbb0:	f7f5 fa46 	bl	8001040 <__aeabi_dadd>
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4b7d      	ldr	r3, [pc, #500]	; (800bdac <atan+0x284>)
 800bbb8:	f7f6 fc1e 	bl	80023f8 <__aeabi_dsub>
 800bbbc:	2380      	movs	r3, #128	; 0x80
 800bbbe:	0006      	movs	r6, r0
 800bbc0:	000f      	movs	r7, r1
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	0020      	movs	r0, r4
 800bbc6:	0029      	movs	r1, r5
 800bbc8:	05db      	lsls	r3, r3, #23
 800bbca:	f7f5 fa39 	bl	8001040 <__aeabi_dadd>
 800bbce:	000b      	movs	r3, r1
 800bbd0:	0002      	movs	r2, r0
 800bbd2:	0039      	movs	r1, r7
 800bbd4:	0030      	movs	r0, r6
 800bbd6:	f7f5 fd9d 	bl	8001714 <__aeabi_ddiv>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	0004      	movs	r4, r0
 800bbde:	000d      	movs	r5, r1
 800bbe0:	0022      	movs	r2, r4
 800bbe2:	9302      	str	r3, [sp, #8]
 800bbe4:	0020      	movs	r0, r4
 800bbe6:	002b      	movs	r3, r5
 800bbe8:	0029      	movs	r1, r5
 800bbea:	f7f6 f999 	bl	8001f20 <__aeabi_dmul>
 800bbee:	0002      	movs	r2, r0
 800bbf0:	000b      	movs	r3, r1
 800bbf2:	9000      	str	r0, [sp, #0]
 800bbf4:	9101      	str	r1, [sp, #4]
 800bbf6:	f7f6 f993 	bl	8001f20 <__aeabi_dmul>
 800bbfa:	0006      	movs	r6, r0
 800bbfc:	000f      	movs	r7, r1
 800bbfe:	4a6e      	ldr	r2, [pc, #440]	; (800bdb8 <atan+0x290>)
 800bc00:	4b6e      	ldr	r3, [pc, #440]	; (800bdbc <atan+0x294>)
 800bc02:	f7f6 f98d 	bl	8001f20 <__aeabi_dmul>
 800bc06:	4a6e      	ldr	r2, [pc, #440]	; (800bdc0 <atan+0x298>)
 800bc08:	4b6e      	ldr	r3, [pc, #440]	; (800bdc4 <atan+0x29c>)
 800bc0a:	f7f5 fa19 	bl	8001040 <__aeabi_dadd>
 800bc0e:	0032      	movs	r2, r6
 800bc10:	003b      	movs	r3, r7
 800bc12:	f7f6 f985 	bl	8001f20 <__aeabi_dmul>
 800bc16:	4a6c      	ldr	r2, [pc, #432]	; (800bdc8 <atan+0x2a0>)
 800bc18:	4b6c      	ldr	r3, [pc, #432]	; (800bdcc <atan+0x2a4>)
 800bc1a:	f7f5 fa11 	bl	8001040 <__aeabi_dadd>
 800bc1e:	0032      	movs	r2, r6
 800bc20:	003b      	movs	r3, r7
 800bc22:	f7f6 f97d 	bl	8001f20 <__aeabi_dmul>
 800bc26:	4a6a      	ldr	r2, [pc, #424]	; (800bdd0 <atan+0x2a8>)
 800bc28:	4b6a      	ldr	r3, [pc, #424]	; (800bdd4 <atan+0x2ac>)
 800bc2a:	f7f5 fa09 	bl	8001040 <__aeabi_dadd>
 800bc2e:	0032      	movs	r2, r6
 800bc30:	003b      	movs	r3, r7
 800bc32:	f7f6 f975 	bl	8001f20 <__aeabi_dmul>
 800bc36:	4a68      	ldr	r2, [pc, #416]	; (800bdd8 <atan+0x2b0>)
 800bc38:	4b68      	ldr	r3, [pc, #416]	; (800bddc <atan+0x2b4>)
 800bc3a:	f7f5 fa01 	bl	8001040 <__aeabi_dadd>
 800bc3e:	0032      	movs	r2, r6
 800bc40:	003b      	movs	r3, r7
 800bc42:	f7f6 f96d 	bl	8001f20 <__aeabi_dmul>
 800bc46:	4a66      	ldr	r2, [pc, #408]	; (800bde0 <atan+0x2b8>)
 800bc48:	4b66      	ldr	r3, [pc, #408]	; (800bde4 <atan+0x2bc>)
 800bc4a:	f7f5 f9f9 	bl	8001040 <__aeabi_dadd>
 800bc4e:	9a00      	ldr	r2, [sp, #0]
 800bc50:	9b01      	ldr	r3, [sp, #4]
 800bc52:	f7f6 f965 	bl	8001f20 <__aeabi_dmul>
 800bc56:	4a64      	ldr	r2, [pc, #400]	; (800bde8 <atan+0x2c0>)
 800bc58:	9000      	str	r0, [sp, #0]
 800bc5a:	9101      	str	r1, [sp, #4]
 800bc5c:	4b63      	ldr	r3, [pc, #396]	; (800bdec <atan+0x2c4>)
 800bc5e:	0030      	movs	r0, r6
 800bc60:	0039      	movs	r1, r7
 800bc62:	f7f6 f95d 	bl	8001f20 <__aeabi_dmul>
 800bc66:	4a62      	ldr	r2, [pc, #392]	; (800bdf0 <atan+0x2c8>)
 800bc68:	4b62      	ldr	r3, [pc, #392]	; (800bdf4 <atan+0x2cc>)
 800bc6a:	f7f6 fbc5 	bl	80023f8 <__aeabi_dsub>
 800bc6e:	0032      	movs	r2, r6
 800bc70:	003b      	movs	r3, r7
 800bc72:	f7f6 f955 	bl	8001f20 <__aeabi_dmul>
 800bc76:	4a60      	ldr	r2, [pc, #384]	; (800bdf8 <atan+0x2d0>)
 800bc78:	4b60      	ldr	r3, [pc, #384]	; (800bdfc <atan+0x2d4>)
 800bc7a:	f7f6 fbbd 	bl	80023f8 <__aeabi_dsub>
 800bc7e:	0032      	movs	r2, r6
 800bc80:	003b      	movs	r3, r7
 800bc82:	f7f6 f94d 	bl	8001f20 <__aeabi_dmul>
 800bc86:	4a5e      	ldr	r2, [pc, #376]	; (800be00 <atan+0x2d8>)
 800bc88:	4b5e      	ldr	r3, [pc, #376]	; (800be04 <atan+0x2dc>)
 800bc8a:	f7f6 fbb5 	bl	80023f8 <__aeabi_dsub>
 800bc8e:	0032      	movs	r2, r6
 800bc90:	003b      	movs	r3, r7
 800bc92:	f7f6 f945 	bl	8001f20 <__aeabi_dmul>
 800bc96:	4a5c      	ldr	r2, [pc, #368]	; (800be08 <atan+0x2e0>)
 800bc98:	4b5c      	ldr	r3, [pc, #368]	; (800be0c <atan+0x2e4>)
 800bc9a:	f7f6 fbad 	bl	80023f8 <__aeabi_dsub>
 800bc9e:	0032      	movs	r2, r6
 800bca0:	003b      	movs	r3, r7
 800bca2:	f7f6 f93d 	bl	8001f20 <__aeabi_dmul>
 800bca6:	0002      	movs	r2, r0
 800bca8:	000b      	movs	r3, r1
 800bcaa:	9800      	ldr	r0, [sp, #0]
 800bcac:	9901      	ldr	r1, [sp, #4]
 800bcae:	f7f5 f9c7 	bl	8001040 <__aeabi_dadd>
 800bcb2:	002b      	movs	r3, r5
 800bcb4:	0022      	movs	r2, r4
 800bcb6:	f7f6 f933 	bl	8001f20 <__aeabi_dmul>
 800bcba:	9b02      	ldr	r3, [sp, #8]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	d143      	bne.n	800bd48 <atan+0x220>
 800bcc0:	0002      	movs	r2, r0
 800bcc2:	000b      	movs	r3, r1
 800bcc4:	0020      	movs	r0, r4
 800bcc6:	0029      	movs	r1, r5
 800bcc8:	f7f6 fb96 	bl	80023f8 <__aeabi_dsub>
 800bccc:	e742      	b.n	800bb54 <atan+0x2c>
 800bcce:	2200      	movs	r2, #0
 800bcd0:	4b36      	ldr	r3, [pc, #216]	; (800bdac <atan+0x284>)
 800bcd2:	f7f6 fb91 	bl	80023f8 <__aeabi_dsub>
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	0006      	movs	r6, r0
 800bcda:	000f      	movs	r7, r1
 800bcdc:	0020      	movs	r0, r4
 800bcde:	0029      	movs	r1, r5
 800bce0:	4b32      	ldr	r3, [pc, #200]	; (800bdac <atan+0x284>)
 800bce2:	f7f5 f9ad 	bl	8001040 <__aeabi_dadd>
 800bce6:	000b      	movs	r3, r1
 800bce8:	0002      	movs	r2, r0
 800bcea:	0039      	movs	r1, r7
 800bcec:	0030      	movs	r0, r6
 800bcee:	f7f5 fd11 	bl	8001714 <__aeabi_ddiv>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	0004      	movs	r4, r0
 800bcf6:	000d      	movs	r5, r1
 800bcf8:	e772      	b.n	800bbe0 <atan+0xb8>
 800bcfa:	4b45      	ldr	r3, [pc, #276]	; (800be10 <atan+0x2e8>)
 800bcfc:	429e      	cmp	r6, r3
 800bcfe:	dc19      	bgt.n	800bd34 <atan+0x20c>
 800bd00:	2200      	movs	r2, #0
 800bd02:	4b44      	ldr	r3, [pc, #272]	; (800be14 <atan+0x2ec>)
 800bd04:	f7f6 fb78 	bl	80023f8 <__aeabi_dsub>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	0006      	movs	r6, r0
 800bd0c:	000f      	movs	r7, r1
 800bd0e:	0020      	movs	r0, r4
 800bd10:	0029      	movs	r1, r5
 800bd12:	4b40      	ldr	r3, [pc, #256]	; (800be14 <atan+0x2ec>)
 800bd14:	f7f6 f904 	bl	8001f20 <__aeabi_dmul>
 800bd18:	2200      	movs	r2, #0
 800bd1a:	4b24      	ldr	r3, [pc, #144]	; (800bdac <atan+0x284>)
 800bd1c:	f7f5 f990 	bl	8001040 <__aeabi_dadd>
 800bd20:	000b      	movs	r3, r1
 800bd22:	0002      	movs	r2, r0
 800bd24:	0039      	movs	r1, r7
 800bd26:	0030      	movs	r0, r6
 800bd28:	f7f5 fcf4 	bl	8001714 <__aeabi_ddiv>
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	0004      	movs	r4, r0
 800bd30:	000d      	movs	r5, r1
 800bd32:	e755      	b.n	800bbe0 <atan+0xb8>
 800bd34:	000b      	movs	r3, r1
 800bd36:	0002      	movs	r2, r0
 800bd38:	4937      	ldr	r1, [pc, #220]	; (800be18 <atan+0x2f0>)
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	f7f5 fcea 	bl	8001714 <__aeabi_ddiv>
 800bd40:	2303      	movs	r3, #3
 800bd42:	0004      	movs	r4, r0
 800bd44:	000d      	movs	r5, r1
 800bd46:	e74b      	b.n	800bbe0 <atan+0xb8>
 800bd48:	9b02      	ldr	r3, [sp, #8]
 800bd4a:	4f34      	ldr	r7, [pc, #208]	; (800be1c <atan+0x2f4>)
 800bd4c:	00de      	lsls	r6, r3, #3
 800bd4e:	4b34      	ldr	r3, [pc, #208]	; (800be20 <atan+0x2f8>)
 800bd50:	19bf      	adds	r7, r7, r6
 800bd52:	199e      	adds	r6, r3, r6
 800bd54:	6832      	ldr	r2, [r6, #0]
 800bd56:	6873      	ldr	r3, [r6, #4]
 800bd58:	f7f6 fb4e 	bl	80023f8 <__aeabi_dsub>
 800bd5c:	0022      	movs	r2, r4
 800bd5e:	002b      	movs	r3, r5
 800bd60:	f7f6 fb4a 	bl	80023f8 <__aeabi_dsub>
 800bd64:	000b      	movs	r3, r1
 800bd66:	0002      	movs	r2, r0
 800bd68:	6838      	ldr	r0, [r7, #0]
 800bd6a:	6879      	ldr	r1, [r7, #4]
 800bd6c:	f7f6 fb44 	bl	80023f8 <__aeabi_dsub>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	0004      	movs	r4, r0
 800bd74:	000d      	movs	r5, r1
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	db00      	blt.n	800bd7c <atan+0x254>
 800bd7a:	e6f4      	b.n	800bb66 <atan+0x3e>
 800bd7c:	2180      	movs	r1, #128	; 0x80
 800bd7e:	0609      	lsls	r1, r1, #24
 800bd80:	186b      	adds	r3, r5, r1
 800bd82:	001d      	movs	r5, r3
 800bd84:	e6ef      	b.n	800bb66 <atan+0x3e>
 800bd86:	4d27      	ldr	r5, [pc, #156]	; (800be24 <atan+0x2fc>)
 800bd88:	e6ed      	b.n	800bb66 <atan+0x3e>
 800bd8a:	46c0      	nop			; (mov r8, r8)
 800bd8c:	440fffff 	.word	0x440fffff
 800bd90:	7ff00000 	.word	0x7ff00000
 800bd94:	54442d18 	.word	0x54442d18
 800bd98:	bff921fb 	.word	0xbff921fb
 800bd9c:	3fdbffff 	.word	0x3fdbffff
 800bda0:	3e1fffff 	.word	0x3e1fffff
 800bda4:	8800759c 	.word	0x8800759c
 800bda8:	7e37e43c 	.word	0x7e37e43c
 800bdac:	3ff00000 	.word	0x3ff00000
 800bdb0:	3ff2ffff 	.word	0x3ff2ffff
 800bdb4:	3fe5ffff 	.word	0x3fe5ffff
 800bdb8:	e322da11 	.word	0xe322da11
 800bdbc:	3f90ad3a 	.word	0x3f90ad3a
 800bdc0:	24760deb 	.word	0x24760deb
 800bdc4:	3fa97b4b 	.word	0x3fa97b4b
 800bdc8:	a0d03d51 	.word	0xa0d03d51
 800bdcc:	3fb10d66 	.word	0x3fb10d66
 800bdd0:	c54c206e 	.word	0xc54c206e
 800bdd4:	3fb745cd 	.word	0x3fb745cd
 800bdd8:	920083ff 	.word	0x920083ff
 800bddc:	3fc24924 	.word	0x3fc24924
 800bde0:	5555550d 	.word	0x5555550d
 800bde4:	3fd55555 	.word	0x3fd55555
 800bde8:	2c6a6c2f 	.word	0x2c6a6c2f
 800bdec:	bfa2b444 	.word	0xbfa2b444
 800bdf0:	52defd9a 	.word	0x52defd9a
 800bdf4:	3fadde2d 	.word	0x3fadde2d
 800bdf8:	af749a6d 	.word	0xaf749a6d
 800bdfc:	3fb3b0f2 	.word	0x3fb3b0f2
 800be00:	fe231671 	.word	0xfe231671
 800be04:	3fbc71c6 	.word	0x3fbc71c6
 800be08:	9998ebc4 	.word	0x9998ebc4
 800be0c:	3fc99999 	.word	0x3fc99999
 800be10:	40037fff 	.word	0x40037fff
 800be14:	3ff80000 	.word	0x3ff80000
 800be18:	bff00000 	.word	0xbff00000
 800be1c:	0800e588 	.word	0x0800e588
 800be20:	0800e5a8 	.word	0x0800e5a8
 800be24:	3ff921fb 	.word	0x3ff921fb

0800be28 <cos>:
 800be28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be2a:	4a1e      	ldr	r2, [pc, #120]	; (800bea4 <cos+0x7c>)
 800be2c:	004b      	lsls	r3, r1, #1
 800be2e:	b087      	sub	sp, #28
 800be30:	085b      	lsrs	r3, r3, #1
 800be32:	4293      	cmp	r3, r2
 800be34:	dc04      	bgt.n	800be40 <cos+0x18>
 800be36:	2200      	movs	r2, #0
 800be38:	2300      	movs	r3, #0
 800be3a:	f001 f907 	bl	800d04c <__kernel_cos>
 800be3e:	e006      	b.n	800be4e <cos+0x26>
 800be40:	4a19      	ldr	r2, [pc, #100]	; (800bea8 <cos+0x80>)
 800be42:	4293      	cmp	r3, r2
 800be44:	dd05      	ble.n	800be52 <cos+0x2a>
 800be46:	0002      	movs	r2, r0
 800be48:	000b      	movs	r3, r1
 800be4a:	f7f6 fad5 	bl	80023f8 <__aeabi_dsub>
 800be4e:	b007      	add	sp, #28
 800be50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be52:	aa02      	add	r2, sp, #8
 800be54:	f000 fe5a 	bl	800cb0c <__ieee754_rem_pio2>
 800be58:	9c04      	ldr	r4, [sp, #16]
 800be5a:	9d05      	ldr	r5, [sp, #20]
 800be5c:	2303      	movs	r3, #3
 800be5e:	4003      	ands	r3, r0
 800be60:	2b01      	cmp	r3, #1
 800be62:	d008      	beq.n	800be76 <cos+0x4e>
 800be64:	9802      	ldr	r0, [sp, #8]
 800be66:	9903      	ldr	r1, [sp, #12]
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d00f      	beq.n	800be8c <cos+0x64>
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d112      	bne.n	800be96 <cos+0x6e>
 800be70:	0022      	movs	r2, r4
 800be72:	002b      	movs	r3, r5
 800be74:	e7e1      	b.n	800be3a <cos+0x12>
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	0022      	movs	r2, r4
 800be7a:	9802      	ldr	r0, [sp, #8]
 800be7c:	9903      	ldr	r1, [sp, #12]
 800be7e:	002b      	movs	r3, r5
 800be80:	f001 fd1a 	bl	800d8b8 <__kernel_sin>
 800be84:	2380      	movs	r3, #128	; 0x80
 800be86:	061b      	lsls	r3, r3, #24
 800be88:	18c9      	adds	r1, r1, r3
 800be8a:	e7e0      	b.n	800be4e <cos+0x26>
 800be8c:	0022      	movs	r2, r4
 800be8e:	002b      	movs	r3, r5
 800be90:	f001 f8dc 	bl	800d04c <__kernel_cos>
 800be94:	e7f6      	b.n	800be84 <cos+0x5c>
 800be96:	2301      	movs	r3, #1
 800be98:	0022      	movs	r2, r4
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	002b      	movs	r3, r5
 800be9e:	f001 fd0b 	bl	800d8b8 <__kernel_sin>
 800bea2:	e7d4      	b.n	800be4e <cos+0x26>
 800bea4:	3fe921fb 	.word	0x3fe921fb
 800bea8:	7fefffff 	.word	0x7fefffff

0800beac <fabs>:
 800beac:	004b      	lsls	r3, r1, #1
 800beae:	0859      	lsrs	r1, r3, #1
 800beb0:	4770      	bx	lr
	...

0800beb4 <sin>:
 800beb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb6:	4a20      	ldr	r2, [pc, #128]	; (800bf38 <sin+0x84>)
 800beb8:	004b      	lsls	r3, r1, #1
 800beba:	b087      	sub	sp, #28
 800bebc:	085b      	lsrs	r3, r3, #1
 800bebe:	4293      	cmp	r3, r2
 800bec0:	dc06      	bgt.n	800bed0 <sin+0x1c>
 800bec2:	2300      	movs	r3, #0
 800bec4:	2200      	movs	r2, #0
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	2300      	movs	r3, #0
 800beca:	f001 fcf5 	bl	800d8b8 <__kernel_sin>
 800bece:	e006      	b.n	800bede <sin+0x2a>
 800bed0:	4a1a      	ldr	r2, [pc, #104]	; (800bf3c <sin+0x88>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	dd05      	ble.n	800bee2 <sin+0x2e>
 800bed6:	0002      	movs	r2, r0
 800bed8:	000b      	movs	r3, r1
 800beda:	f7f6 fa8d 	bl	80023f8 <__aeabi_dsub>
 800bede:	b007      	add	sp, #28
 800bee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bee2:	aa02      	add	r2, sp, #8
 800bee4:	f000 fe12 	bl	800cb0c <__ieee754_rem_pio2>
 800bee8:	9c04      	ldr	r4, [sp, #16]
 800beea:	9d05      	ldr	r5, [sp, #20]
 800beec:	2303      	movs	r3, #3
 800beee:	4003      	ands	r3, r0
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d00a      	beq.n	800bf0a <sin+0x56>
 800bef4:	9802      	ldr	r0, [sp, #8]
 800bef6:	9903      	ldr	r1, [sp, #12]
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d00d      	beq.n	800bf18 <sin+0x64>
 800befc:	2b00      	cmp	r3, #0
 800befe:	d115      	bne.n	800bf2c <sin+0x78>
 800bf00:	3301      	adds	r3, #1
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	0022      	movs	r2, r4
 800bf06:	002b      	movs	r3, r5
 800bf08:	e7df      	b.n	800beca <sin+0x16>
 800bf0a:	0022      	movs	r2, r4
 800bf0c:	9802      	ldr	r0, [sp, #8]
 800bf0e:	9903      	ldr	r1, [sp, #12]
 800bf10:	002b      	movs	r3, r5
 800bf12:	f001 f89b 	bl	800d04c <__kernel_cos>
 800bf16:	e7e2      	b.n	800bede <sin+0x2a>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	0022      	movs	r2, r4
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	002b      	movs	r3, r5
 800bf20:	f001 fcca 	bl	800d8b8 <__kernel_sin>
 800bf24:	2380      	movs	r3, #128	; 0x80
 800bf26:	061b      	lsls	r3, r3, #24
 800bf28:	18c9      	adds	r1, r1, r3
 800bf2a:	e7d8      	b.n	800bede <sin+0x2a>
 800bf2c:	0022      	movs	r2, r4
 800bf2e:	002b      	movs	r3, r5
 800bf30:	f001 f88c 	bl	800d04c <__kernel_cos>
 800bf34:	e7f6      	b.n	800bf24 <sin+0x70>
 800bf36:	46c0      	nop			; (mov r8, r8)
 800bf38:	3fe921fb 	.word	0x3fe921fb
 800bf3c:	7fefffff 	.word	0x7fefffff

0800bf40 <pow>:
 800bf40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf42:	001d      	movs	r5, r3
 800bf44:	0014      	movs	r4, r2
 800bf46:	9000      	str	r0, [sp, #0]
 800bf48:	9101      	str	r1, [sp, #4]
 800bf4a:	f000 f8df 	bl	800c10c <__ieee754_pow>
 800bf4e:	4b54      	ldr	r3, [pc, #336]	; (800c0a0 <pow+0x160>)
 800bf50:	0006      	movs	r6, r0
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	000f      	movs	r7, r1
 800bf56:	b25b      	sxtb	r3, r3
 800bf58:	3301      	adds	r3, #1
 800bf5a:	d018      	beq.n	800bf8e <pow+0x4e>
 800bf5c:	0022      	movs	r2, r4
 800bf5e:	002b      	movs	r3, r5
 800bf60:	0020      	movs	r0, r4
 800bf62:	0029      	movs	r1, r5
 800bf64:	f7f6 fdda 	bl	8002b1c <__aeabi_dcmpun>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d110      	bne.n	800bf8e <pow+0x4e>
 800bf6c:	9a00      	ldr	r2, [sp, #0]
 800bf6e:	9b01      	ldr	r3, [sp, #4]
 800bf70:	0010      	movs	r0, r2
 800bf72:	0019      	movs	r1, r3
 800bf74:	f7f6 fdd2 	bl	8002b1c <__aeabi_dcmpun>
 800bf78:	2200      	movs	r2, #0
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d00a      	beq.n	800bf96 <pow+0x56>
 800bf80:	0020      	movs	r0, r4
 800bf82:	0029      	movs	r1, r5
 800bf84:	f7f4 fa5e 	bl	8000444 <__aeabi_dcmpeq>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d000      	beq.n	800bf8e <pow+0x4e>
 800bf8c:	e084      	b.n	800c098 <pow+0x158>
 800bf8e:	0030      	movs	r0, r6
 800bf90:	0039      	movs	r1, r7
 800bf92:	b003      	add	sp, #12
 800bf94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf96:	9800      	ldr	r0, [sp, #0]
 800bf98:	9901      	ldr	r1, [sp, #4]
 800bf9a:	f7f4 fa53 	bl	8000444 <__aeabi_dcmpeq>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d01c      	beq.n	800bfdc <pow+0x9c>
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	0020      	movs	r0, r4
 800bfa8:	0029      	movs	r1, r5
 800bfaa:	f7f4 fa4b 	bl	8000444 <__aeabi_dcmpeq>
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	d172      	bne.n	800c098 <pow+0x158>
 800bfb2:	0020      	movs	r0, r4
 800bfb4:	0029      	movs	r1, r5
 800bfb6:	f001 fd2b 	bl	800da10 <finite>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d0e7      	beq.n	800bf8e <pow+0x4e>
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	0020      	movs	r0, r4
 800bfc4:	0029      	movs	r1, r5
 800bfc6:	f7f4 fa43 	bl	8000450 <__aeabi_dcmplt>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d0df      	beq.n	800bf8e <pow+0x4e>
 800bfce:	f7fc fe2d 	bl	8008c2c <__errno>
 800bfd2:	2321      	movs	r3, #33	; 0x21
 800bfd4:	2600      	movs	r6, #0
 800bfd6:	6003      	str	r3, [r0, #0]
 800bfd8:	4f32      	ldr	r7, [pc, #200]	; (800c0a4 <pow+0x164>)
 800bfda:	e7d8      	b.n	800bf8e <pow+0x4e>
 800bfdc:	0030      	movs	r0, r6
 800bfde:	0039      	movs	r1, r7
 800bfe0:	f001 fd16 	bl	800da10 <finite>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d139      	bne.n	800c05c <pow+0x11c>
 800bfe8:	9800      	ldr	r0, [sp, #0]
 800bfea:	9901      	ldr	r1, [sp, #4]
 800bfec:	f001 fd10 	bl	800da10 <finite>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d033      	beq.n	800c05c <pow+0x11c>
 800bff4:	0020      	movs	r0, r4
 800bff6:	0029      	movs	r1, r5
 800bff8:	f001 fd0a 	bl	800da10 <finite>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d02d      	beq.n	800c05c <pow+0x11c>
 800c000:	0032      	movs	r2, r6
 800c002:	003b      	movs	r3, r7
 800c004:	0030      	movs	r0, r6
 800c006:	0039      	movs	r1, r7
 800c008:	f7f6 fd88 	bl	8002b1c <__aeabi_dcmpun>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d00c      	beq.n	800c02a <pow+0xea>
 800c010:	f7fc fe0c 	bl	8008c2c <__errno>
 800c014:	2321      	movs	r3, #33	; 0x21
 800c016:	2200      	movs	r2, #0
 800c018:	6003      	str	r3, [r0, #0]
 800c01a:	2300      	movs	r3, #0
 800c01c:	0010      	movs	r0, r2
 800c01e:	0019      	movs	r1, r3
 800c020:	f7f5 fb78 	bl	8001714 <__aeabi_ddiv>
 800c024:	0006      	movs	r6, r0
 800c026:	000f      	movs	r7, r1
 800c028:	e7b1      	b.n	800bf8e <pow+0x4e>
 800c02a:	f7fc fdff 	bl	8008c2c <__errno>
 800c02e:	2322      	movs	r3, #34	; 0x22
 800c030:	2200      	movs	r2, #0
 800c032:	6003      	str	r3, [r0, #0]
 800c034:	2300      	movs	r3, #0
 800c036:	9800      	ldr	r0, [sp, #0]
 800c038:	9901      	ldr	r1, [sp, #4]
 800c03a:	f7f4 fa09 	bl	8000450 <__aeabi_dcmplt>
 800c03e:	2600      	movs	r6, #0
 800c040:	2800      	cmp	r0, #0
 800c042:	d009      	beq.n	800c058 <pow+0x118>
 800c044:	0020      	movs	r0, r4
 800c046:	0029      	movs	r1, r5
 800c048:	f001 fd7a 	bl	800db40 <rint>
 800c04c:	0022      	movs	r2, r4
 800c04e:	002b      	movs	r3, r5
 800c050:	f7f4 f9f8 	bl	8000444 <__aeabi_dcmpeq>
 800c054:	2800      	cmp	r0, #0
 800c056:	d0bf      	beq.n	800bfd8 <pow+0x98>
 800c058:	4f13      	ldr	r7, [pc, #76]	; (800c0a8 <pow+0x168>)
 800c05a:	e798      	b.n	800bf8e <pow+0x4e>
 800c05c:	2200      	movs	r2, #0
 800c05e:	2300      	movs	r3, #0
 800c060:	0030      	movs	r0, r6
 800c062:	0039      	movs	r1, r7
 800c064:	f7f4 f9ee 	bl	8000444 <__aeabi_dcmpeq>
 800c068:	2800      	cmp	r0, #0
 800c06a:	d100      	bne.n	800c06e <pow+0x12e>
 800c06c:	e78f      	b.n	800bf8e <pow+0x4e>
 800c06e:	9800      	ldr	r0, [sp, #0]
 800c070:	9901      	ldr	r1, [sp, #4]
 800c072:	f001 fccd 	bl	800da10 <finite>
 800c076:	2800      	cmp	r0, #0
 800c078:	d100      	bne.n	800c07c <pow+0x13c>
 800c07a:	e788      	b.n	800bf8e <pow+0x4e>
 800c07c:	0020      	movs	r0, r4
 800c07e:	0029      	movs	r1, r5
 800c080:	f001 fcc6 	bl	800da10 <finite>
 800c084:	2800      	cmp	r0, #0
 800c086:	d100      	bne.n	800c08a <pow+0x14a>
 800c088:	e781      	b.n	800bf8e <pow+0x4e>
 800c08a:	f7fc fdcf 	bl	8008c2c <__errno>
 800c08e:	2322      	movs	r3, #34	; 0x22
 800c090:	2600      	movs	r6, #0
 800c092:	2700      	movs	r7, #0
 800c094:	6003      	str	r3, [r0, #0]
 800c096:	e77a      	b.n	800bf8e <pow+0x4e>
 800c098:	2600      	movs	r6, #0
 800c09a:	4f04      	ldr	r7, [pc, #16]	; (800c0ac <pow+0x16c>)
 800c09c:	e777      	b.n	800bf8e <pow+0x4e>
 800c09e:	46c0      	nop			; (mov r8, r8)
 800c0a0:	200001dc 	.word	0x200001dc
 800c0a4:	fff00000 	.word	0xfff00000
 800c0a8:	7ff00000 	.word	0x7ff00000
 800c0ac:	3ff00000 	.word	0x3ff00000

0800c0b0 <sqrt>:
 800c0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b2:	0004      	movs	r4, r0
 800c0b4:	000d      	movs	r5, r1
 800c0b6:	f000 ff15 	bl	800cee4 <__ieee754_sqrt>
 800c0ba:	4b13      	ldr	r3, [pc, #76]	; (800c108 <sqrt+0x58>)
 800c0bc:	0006      	movs	r6, r0
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	000f      	movs	r7, r1
 800c0c2:	b25b      	sxtb	r3, r3
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	d01b      	beq.n	800c100 <sqrt+0x50>
 800c0c8:	0022      	movs	r2, r4
 800c0ca:	002b      	movs	r3, r5
 800c0cc:	0020      	movs	r0, r4
 800c0ce:	0029      	movs	r1, r5
 800c0d0:	f7f6 fd24 	bl	8002b1c <__aeabi_dcmpun>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d113      	bne.n	800c100 <sqrt+0x50>
 800c0d8:	2200      	movs	r2, #0
 800c0da:	2300      	movs	r3, #0
 800c0dc:	0020      	movs	r0, r4
 800c0de:	0029      	movs	r1, r5
 800c0e0:	f7f4 f9b6 	bl	8000450 <__aeabi_dcmplt>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d00b      	beq.n	800c100 <sqrt+0x50>
 800c0e8:	f7fc fda0 	bl	8008c2c <__errno>
 800c0ec:	2321      	movs	r3, #33	; 0x21
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	6003      	str	r3, [r0, #0]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	0010      	movs	r0, r2
 800c0f6:	0019      	movs	r1, r3
 800c0f8:	f7f5 fb0c 	bl	8001714 <__aeabi_ddiv>
 800c0fc:	0006      	movs	r6, r0
 800c0fe:	000f      	movs	r7, r1
 800c100:	0030      	movs	r0, r6
 800c102:	0039      	movs	r1, r7
 800c104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c106:	46c0      	nop			; (mov r8, r8)
 800c108:	200001dc 	.word	0x200001dc

0800c10c <__ieee754_pow>:
 800c10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c10e:	b095      	sub	sp, #84	; 0x54
 800c110:	9202      	str	r2, [sp, #8]
 800c112:	9303      	str	r3, [sp, #12]
 800c114:	9b03      	ldr	r3, [sp, #12]
 800c116:	9a03      	ldr	r2, [sp, #12]
 800c118:	9304      	str	r3, [sp, #16]
 800c11a:	9b02      	ldr	r3, [sp, #8]
 800c11c:	0055      	lsls	r5, r2, #1
 800c11e:	001a      	movs	r2, r3
 800c120:	086d      	lsrs	r5, r5, #1
 800c122:	0007      	movs	r7, r0
 800c124:	000e      	movs	r6, r1
 800c126:	432a      	orrs	r2, r5
 800c128:	d101      	bne.n	800c12e <__ieee754_pow+0x22>
 800c12a:	f000 fcb6 	bl	800ca9a <__ieee754_pow+0x98e>
 800c12e:	4a82      	ldr	r2, [pc, #520]	; (800c338 <__ieee754_pow+0x22c>)
 800c130:	004c      	lsls	r4, r1, #1
 800c132:	9108      	str	r1, [sp, #32]
 800c134:	9000      	str	r0, [sp, #0]
 800c136:	0864      	lsrs	r4, r4, #1
 800c138:	4294      	cmp	r4, r2
 800c13a:	dc0d      	bgt.n	800c158 <__ieee754_pow+0x4c>
 800c13c:	d104      	bne.n	800c148 <__ieee754_pow+0x3c>
 800c13e:	2800      	cmp	r0, #0
 800c140:	d110      	bne.n	800c164 <__ieee754_pow+0x58>
 800c142:	42a5      	cmp	r5, r4
 800c144:	dd03      	ble.n	800c14e <__ieee754_pow+0x42>
 800c146:	e00d      	b.n	800c164 <__ieee754_pow+0x58>
 800c148:	4a7b      	ldr	r2, [pc, #492]	; (800c338 <__ieee754_pow+0x22c>)
 800c14a:	4295      	cmp	r5, r2
 800c14c:	dc04      	bgt.n	800c158 <__ieee754_pow+0x4c>
 800c14e:	4a7a      	ldr	r2, [pc, #488]	; (800c338 <__ieee754_pow+0x22c>)
 800c150:	4295      	cmp	r5, r2
 800c152:	d10d      	bne.n	800c170 <__ieee754_pow+0x64>
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00b      	beq.n	800c170 <__ieee754_pow+0x64>
 800c158:	4b78      	ldr	r3, [pc, #480]	; (800c33c <__ieee754_pow+0x230>)
 800c15a:	18e4      	adds	r4, r4, r3
 800c15c:	4327      	orrs	r7, r4
 800c15e:	d101      	bne.n	800c164 <__ieee754_pow+0x58>
 800c160:	f000 fc9b 	bl	800ca9a <__ieee754_pow+0x98e>
 800c164:	4876      	ldr	r0, [pc, #472]	; (800c340 <__ieee754_pow+0x234>)
 800c166:	f001 fce5 	bl	800db34 <nan>
 800c16a:	9000      	str	r0, [sp, #0]
 800c16c:	9101      	str	r1, [sp, #4]
 800c16e:	e092      	b.n	800c296 <__ieee754_pow+0x18a>
 800c170:	2200      	movs	r2, #0
 800c172:	9206      	str	r2, [sp, #24]
 800c174:	2e00      	cmp	r6, #0
 800c176:	da69      	bge.n	800c24c <__ieee754_pow+0x140>
 800c178:	4a72      	ldr	r2, [pc, #456]	; (800c344 <__ieee754_pow+0x238>)
 800c17a:	4295      	cmp	r5, r2
 800c17c:	dc64      	bgt.n	800c248 <__ieee754_pow+0x13c>
 800c17e:	4a72      	ldr	r2, [pc, #456]	; (800c348 <__ieee754_pow+0x23c>)
 800c180:	4295      	cmp	r5, r2
 800c182:	dd11      	ble.n	800c1a8 <__ieee754_pow+0x9c>
 800c184:	4971      	ldr	r1, [pc, #452]	; (800c34c <__ieee754_pow+0x240>)
 800c186:	152a      	asrs	r2, r5, #20
 800c188:	1852      	adds	r2, r2, r1
 800c18a:	2a14      	cmp	r2, #20
 800c18c:	dd3c      	ble.n	800c208 <__ieee754_pow+0xfc>
 800c18e:	2134      	movs	r1, #52	; 0x34
 800c190:	1a8a      	subs	r2, r1, r2
 800c192:	9902      	ldr	r1, [sp, #8]
 800c194:	40d1      	lsrs	r1, r2
 800c196:	0008      	movs	r0, r1
 800c198:	4090      	lsls	r0, r2
 800c19a:	4298      	cmp	r0, r3
 800c19c:	d104      	bne.n	800c1a8 <__ieee754_pow+0x9c>
 800c19e:	2201      	movs	r2, #1
 800c1a0:	4011      	ands	r1, r2
 800c1a2:	1892      	adds	r2, r2, r2
 800c1a4:	1a52      	subs	r2, r2, r1
 800c1a6:	9206      	str	r2, [sp, #24]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d03c      	beq.n	800c226 <__ieee754_pow+0x11a>
 800c1ac:	0038      	movs	r0, r7
 800c1ae:	0031      	movs	r1, r6
 800c1b0:	f7ff fe7c 	bl	800beac <fabs>
 800c1b4:	9000      	str	r0, [sp, #0]
 800c1b6:	9101      	str	r1, [sp, #4]
 800c1b8:	2f00      	cmp	r7, #0
 800c1ba:	d000      	beq.n	800c1be <__ieee754_pow+0xb2>
 800c1bc:	e094      	b.n	800c2e8 <__ieee754_pow+0x1dc>
 800c1be:	2c00      	cmp	r4, #0
 800c1c0:	d005      	beq.n	800c1ce <__ieee754_pow+0xc2>
 800c1c2:	4a63      	ldr	r2, [pc, #396]	; (800c350 <__ieee754_pow+0x244>)
 800c1c4:	00b3      	lsls	r3, r6, #2
 800c1c6:	089b      	lsrs	r3, r3, #2
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d000      	beq.n	800c1ce <__ieee754_pow+0xc2>
 800c1cc:	e08c      	b.n	800c2e8 <__ieee754_pow+0x1dc>
 800c1ce:	9b04      	ldr	r3, [sp, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	da07      	bge.n	800c1e4 <__ieee754_pow+0xd8>
 800c1d4:	9a00      	ldr	r2, [sp, #0]
 800c1d6:	9b01      	ldr	r3, [sp, #4]
 800c1d8:	2000      	movs	r0, #0
 800c1da:	495d      	ldr	r1, [pc, #372]	; (800c350 <__ieee754_pow+0x244>)
 800c1dc:	f7f5 fa9a 	bl	8001714 <__aeabi_ddiv>
 800c1e0:	9000      	str	r0, [sp, #0]
 800c1e2:	9101      	str	r1, [sp, #4]
 800c1e4:	9b08      	ldr	r3, [sp, #32]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	da55      	bge.n	800c296 <__ieee754_pow+0x18a>
 800c1ea:	4b54      	ldr	r3, [pc, #336]	; (800c33c <__ieee754_pow+0x230>)
 800c1ec:	18e4      	adds	r4, r4, r3
 800c1ee:	9b06      	ldr	r3, [sp, #24]
 800c1f0:	431c      	orrs	r4, r3
 800c1f2:	d000      	beq.n	800c1f6 <__ieee754_pow+0xea>
 800c1f4:	e06c      	b.n	800c2d0 <__ieee754_pow+0x1c4>
 800c1f6:	9a00      	ldr	r2, [sp, #0]
 800c1f8:	9b01      	ldr	r3, [sp, #4]
 800c1fa:	0010      	movs	r0, r2
 800c1fc:	0019      	movs	r1, r3
 800c1fe:	f7f6 f8fb 	bl	80023f8 <__aeabi_dsub>
 800c202:	0002      	movs	r2, r0
 800c204:	000b      	movs	r3, r1
 800c206:	e01c      	b.n	800c242 <__ieee754_pow+0x136>
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1cf      	bne.n	800c1ac <__ieee754_pow+0xa0>
 800c20c:	3314      	adds	r3, #20
 800c20e:	1a9a      	subs	r2, r3, r2
 800c210:	002b      	movs	r3, r5
 800c212:	4113      	asrs	r3, r2
 800c214:	0019      	movs	r1, r3
 800c216:	4091      	lsls	r1, r2
 800c218:	42a9      	cmp	r1, r5
 800c21a:	d104      	bne.n	800c226 <__ieee754_pow+0x11a>
 800c21c:	2201      	movs	r2, #1
 800c21e:	4013      	ands	r3, r2
 800c220:	1892      	adds	r2, r2, r2
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	9306      	str	r3, [sp, #24]
 800c226:	4b4a      	ldr	r3, [pc, #296]	; (800c350 <__ieee754_pow+0x244>)
 800c228:	429d      	cmp	r5, r3
 800c22a:	d138      	bne.n	800c29e <__ieee754_pow+0x192>
 800c22c:	0038      	movs	r0, r7
 800c22e:	0031      	movs	r1, r6
 800c230:	9b04      	ldr	r3, [sp, #16]
 800c232:	9000      	str	r0, [sp, #0]
 800c234:	9101      	str	r1, [sp, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	da2d      	bge.n	800c296 <__ieee754_pow+0x18a>
 800c23a:	003a      	movs	r2, r7
 800c23c:	0033      	movs	r3, r6
 800c23e:	2000      	movs	r0, #0
 800c240:	4943      	ldr	r1, [pc, #268]	; (800c350 <__ieee754_pow+0x244>)
 800c242:	f7f5 fa67 	bl	8001714 <__aeabi_ddiv>
 800c246:	e790      	b.n	800c16a <__ieee754_pow+0x5e>
 800c248:	2202      	movs	r2, #2
 800c24a:	9206      	str	r2, [sp, #24]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1ad      	bne.n	800c1ac <__ieee754_pow+0xa0>
 800c250:	4b39      	ldr	r3, [pc, #228]	; (800c338 <__ieee754_pow+0x22c>)
 800c252:	429d      	cmp	r5, r3
 800c254:	d1e7      	bne.n	800c226 <__ieee754_pow+0x11a>
 800c256:	4b39      	ldr	r3, [pc, #228]	; (800c33c <__ieee754_pow+0x230>)
 800c258:	18e3      	adds	r3, r4, r3
 800c25a:	431f      	orrs	r7, r3
 800c25c:	d101      	bne.n	800c262 <__ieee754_pow+0x156>
 800c25e:	f000 fc1c 	bl	800ca9a <__ieee754_pow+0x98e>
 800c262:	4b39      	ldr	r3, [pc, #228]	; (800c348 <__ieee754_pow+0x23c>)
 800c264:	429c      	cmp	r4, r3
 800c266:	dd0b      	ble.n	800c280 <__ieee754_pow+0x174>
 800c268:	9b02      	ldr	r3, [sp, #8]
 800c26a:	9c03      	ldr	r4, [sp, #12]
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	9401      	str	r4, [sp, #4]
 800c270:	9b04      	ldr	r3, [sp, #16]
 800c272:	2b00      	cmp	r3, #0
 800c274:	da0f      	bge.n	800c296 <__ieee754_pow+0x18a>
 800c276:	2300      	movs	r3, #0
 800c278:	2400      	movs	r4, #0
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	9401      	str	r4, [sp, #4]
 800c27e:	e00a      	b.n	800c296 <__ieee754_pow+0x18a>
 800c280:	9b04      	ldr	r3, [sp, #16]
 800c282:	2b00      	cmp	r3, #0
 800c284:	daf7      	bge.n	800c276 <__ieee754_pow+0x16a>
 800c286:	2280      	movs	r2, #128	; 0x80
 800c288:	0612      	lsls	r2, r2, #24
 800c28a:	4694      	mov	ip, r2
 800c28c:	9b02      	ldr	r3, [sp, #8]
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	9b03      	ldr	r3, [sp, #12]
 800c292:	4463      	add	r3, ip
 800c294:	9301      	str	r3, [sp, #4]
 800c296:	9800      	ldr	r0, [sp, #0]
 800c298:	9901      	ldr	r1, [sp, #4]
 800c29a:	b015      	add	sp, #84	; 0x54
 800c29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c29e:	2380      	movs	r3, #128	; 0x80
 800c2a0:	9a04      	ldr	r2, [sp, #16]
 800c2a2:	05db      	lsls	r3, r3, #23
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d106      	bne.n	800c2b6 <__ieee754_pow+0x1aa>
 800c2a8:	003a      	movs	r2, r7
 800c2aa:	0033      	movs	r3, r6
 800c2ac:	0038      	movs	r0, r7
 800c2ae:	0031      	movs	r1, r6
 800c2b0:	f7f5 fe36 	bl	8001f20 <__aeabi_dmul>
 800c2b4:	e759      	b.n	800c16a <__ieee754_pow+0x5e>
 800c2b6:	4b27      	ldr	r3, [pc, #156]	; (800c354 <__ieee754_pow+0x248>)
 800c2b8:	9a04      	ldr	r2, [sp, #16]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d000      	beq.n	800c2c0 <__ieee754_pow+0x1b4>
 800c2be:	e775      	b.n	800c1ac <__ieee754_pow+0xa0>
 800c2c0:	2e00      	cmp	r6, #0
 800c2c2:	da00      	bge.n	800c2c6 <__ieee754_pow+0x1ba>
 800c2c4:	e772      	b.n	800c1ac <__ieee754_pow+0xa0>
 800c2c6:	0038      	movs	r0, r7
 800c2c8:	0031      	movs	r1, r6
 800c2ca:	f000 fe0b 	bl	800cee4 <__ieee754_sqrt>
 800c2ce:	e74c      	b.n	800c16a <__ieee754_pow+0x5e>
 800c2d0:	9b06      	ldr	r3, [sp, #24]
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d1df      	bne.n	800c296 <__ieee754_pow+0x18a>
 800c2d6:	9800      	ldr	r0, [sp, #0]
 800c2d8:	2180      	movs	r1, #128	; 0x80
 800c2da:	0002      	movs	r2, r0
 800c2dc:	9801      	ldr	r0, [sp, #4]
 800c2de:	0609      	lsls	r1, r1, #24
 800c2e0:	1843      	adds	r3, r0, r1
 800c2e2:	9200      	str	r2, [sp, #0]
 800c2e4:	9301      	str	r3, [sp, #4]
 800c2e6:	e7d6      	b.n	800c296 <__ieee754_pow+0x18a>
 800c2e8:	0ff3      	lsrs	r3, r6, #31
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	9310      	str	r3, [sp, #64]	; 0x40
 800c2ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2f0:	9b06      	ldr	r3, [sp, #24]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	d104      	bne.n	800c300 <__ieee754_pow+0x1f4>
 800c2f6:	003a      	movs	r2, r7
 800c2f8:	0033      	movs	r3, r6
 800c2fa:	0038      	movs	r0, r7
 800c2fc:	0031      	movs	r1, r6
 800c2fe:	e77e      	b.n	800c1fe <__ieee754_pow+0xf2>
 800c300:	4b15      	ldr	r3, [pc, #84]	; (800c358 <__ieee754_pow+0x24c>)
 800c302:	429d      	cmp	r5, r3
 800c304:	dc00      	bgt.n	800c308 <__ieee754_pow+0x1fc>
 800c306:	e0f5      	b.n	800c4f4 <__ieee754_pow+0x3e8>
 800c308:	4b14      	ldr	r3, [pc, #80]	; (800c35c <__ieee754_pow+0x250>)
 800c30a:	429d      	cmp	r5, r3
 800c30c:	dd0a      	ble.n	800c324 <__ieee754_pow+0x218>
 800c30e:	4b0e      	ldr	r3, [pc, #56]	; (800c348 <__ieee754_pow+0x23c>)
 800c310:	429c      	cmp	r4, r3
 800c312:	dc0d      	bgt.n	800c330 <__ieee754_pow+0x224>
 800c314:	9b04      	ldr	r3, [sp, #16]
 800c316:	2b00      	cmp	r3, #0
 800c318:	daad      	bge.n	800c276 <__ieee754_pow+0x16a>
 800c31a:	4a11      	ldr	r2, [pc, #68]	; (800c360 <__ieee754_pow+0x254>)
 800c31c:	4b11      	ldr	r3, [pc, #68]	; (800c364 <__ieee754_pow+0x258>)
 800c31e:	0010      	movs	r0, r2
 800c320:	0019      	movs	r1, r3
 800c322:	e7c5      	b.n	800c2b0 <__ieee754_pow+0x1a4>
 800c324:	4b10      	ldr	r3, [pc, #64]	; (800c368 <__ieee754_pow+0x25c>)
 800c326:	429c      	cmp	r4, r3
 800c328:	ddf4      	ble.n	800c314 <__ieee754_pow+0x208>
 800c32a:	4b09      	ldr	r3, [pc, #36]	; (800c350 <__ieee754_pow+0x244>)
 800c32c:	429c      	cmp	r4, r3
 800c32e:	dd1d      	ble.n	800c36c <__ieee754_pow+0x260>
 800c330:	9b04      	ldr	r3, [sp, #16]
 800c332:	2b00      	cmp	r3, #0
 800c334:	dcf1      	bgt.n	800c31a <__ieee754_pow+0x20e>
 800c336:	e79e      	b.n	800c276 <__ieee754_pow+0x16a>
 800c338:	7ff00000 	.word	0x7ff00000
 800c33c:	c0100000 	.word	0xc0100000
 800c340:	0800e418 	.word	0x0800e418
 800c344:	433fffff 	.word	0x433fffff
 800c348:	3fefffff 	.word	0x3fefffff
 800c34c:	fffffc01 	.word	0xfffffc01
 800c350:	3ff00000 	.word	0x3ff00000
 800c354:	3fe00000 	.word	0x3fe00000
 800c358:	41e00000 	.word	0x41e00000
 800c35c:	43f00000 	.word	0x43f00000
 800c360:	8800759c 	.word	0x8800759c
 800c364:	7e37e43c 	.word	0x7e37e43c
 800c368:	3feffffe 	.word	0x3feffffe
 800c36c:	2200      	movs	r2, #0
 800c36e:	9800      	ldr	r0, [sp, #0]
 800c370:	9901      	ldr	r1, [sp, #4]
 800c372:	4b52      	ldr	r3, [pc, #328]	; (800c4bc <__ieee754_pow+0x3b0>)
 800c374:	f7f6 f840 	bl	80023f8 <__aeabi_dsub>
 800c378:	22c0      	movs	r2, #192	; 0xc0
 800c37a:	4b51      	ldr	r3, [pc, #324]	; (800c4c0 <__ieee754_pow+0x3b4>)
 800c37c:	05d2      	lsls	r2, r2, #23
 800c37e:	0004      	movs	r4, r0
 800c380:	000d      	movs	r5, r1
 800c382:	f7f5 fdcd 	bl	8001f20 <__aeabi_dmul>
 800c386:	4a4f      	ldr	r2, [pc, #316]	; (800c4c4 <__ieee754_pow+0x3b8>)
 800c388:	9000      	str	r0, [sp, #0]
 800c38a:	9101      	str	r1, [sp, #4]
 800c38c:	4b4e      	ldr	r3, [pc, #312]	; (800c4c8 <__ieee754_pow+0x3bc>)
 800c38e:	0020      	movs	r0, r4
 800c390:	0029      	movs	r1, r5
 800c392:	f7f5 fdc5 	bl	8001f20 <__aeabi_dmul>
 800c396:	2200      	movs	r2, #0
 800c398:	9004      	str	r0, [sp, #16]
 800c39a:	9105      	str	r1, [sp, #20]
 800c39c:	4b4b      	ldr	r3, [pc, #300]	; (800c4cc <__ieee754_pow+0x3c0>)
 800c39e:	0020      	movs	r0, r4
 800c3a0:	0029      	movs	r1, r5
 800c3a2:	f7f5 fdbd 	bl	8001f20 <__aeabi_dmul>
 800c3a6:	0002      	movs	r2, r0
 800c3a8:	000b      	movs	r3, r1
 800c3aa:	4849      	ldr	r0, [pc, #292]	; (800c4d0 <__ieee754_pow+0x3c4>)
 800c3ac:	4949      	ldr	r1, [pc, #292]	; (800c4d4 <__ieee754_pow+0x3c8>)
 800c3ae:	f7f6 f823 	bl	80023f8 <__aeabi_dsub>
 800c3b2:	0022      	movs	r2, r4
 800c3b4:	002b      	movs	r3, r5
 800c3b6:	f7f5 fdb3 	bl	8001f20 <__aeabi_dmul>
 800c3ba:	0002      	movs	r2, r0
 800c3bc:	000b      	movs	r3, r1
 800c3be:	2000      	movs	r0, #0
 800c3c0:	4945      	ldr	r1, [pc, #276]	; (800c4d8 <__ieee754_pow+0x3cc>)
 800c3c2:	f7f6 f819 	bl	80023f8 <__aeabi_dsub>
 800c3c6:	0022      	movs	r2, r4
 800c3c8:	0006      	movs	r6, r0
 800c3ca:	000f      	movs	r7, r1
 800c3cc:	002b      	movs	r3, r5
 800c3ce:	0020      	movs	r0, r4
 800c3d0:	0029      	movs	r1, r5
 800c3d2:	f7f5 fda5 	bl	8001f20 <__aeabi_dmul>
 800c3d6:	0002      	movs	r2, r0
 800c3d8:	000b      	movs	r3, r1
 800c3da:	0030      	movs	r0, r6
 800c3dc:	0039      	movs	r1, r7
 800c3de:	f7f5 fd9f 	bl	8001f20 <__aeabi_dmul>
 800c3e2:	4a3e      	ldr	r2, [pc, #248]	; (800c4dc <__ieee754_pow+0x3d0>)
 800c3e4:	4b36      	ldr	r3, [pc, #216]	; (800c4c0 <__ieee754_pow+0x3b4>)
 800c3e6:	f7f5 fd9b 	bl	8001f20 <__aeabi_dmul>
 800c3ea:	0002      	movs	r2, r0
 800c3ec:	000b      	movs	r3, r1
 800c3ee:	9804      	ldr	r0, [sp, #16]
 800c3f0:	9905      	ldr	r1, [sp, #20]
 800c3f2:	f7f6 f801 	bl	80023f8 <__aeabi_dsub>
 800c3f6:	0002      	movs	r2, r0
 800c3f8:	000b      	movs	r3, r1
 800c3fa:	0004      	movs	r4, r0
 800c3fc:	000d      	movs	r5, r1
 800c3fe:	9800      	ldr	r0, [sp, #0]
 800c400:	9901      	ldr	r1, [sp, #4]
 800c402:	f7f4 fe1d 	bl	8001040 <__aeabi_dadd>
 800c406:	9a00      	ldr	r2, [sp, #0]
 800c408:	9b01      	ldr	r3, [sp, #4]
 800c40a:	2000      	movs	r0, #0
 800c40c:	000f      	movs	r7, r1
 800c40e:	0006      	movs	r6, r0
 800c410:	f7f5 fff2 	bl	80023f8 <__aeabi_dsub>
 800c414:	0002      	movs	r2, r0
 800c416:	000b      	movs	r3, r1
 800c418:	0020      	movs	r0, r4
 800c41a:	0029      	movs	r1, r5
 800c41c:	f7f5 ffec 	bl	80023f8 <__aeabi_dsub>
 800c420:	9b06      	ldr	r3, [sp, #24]
 800c422:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c424:	3b01      	subs	r3, #1
 800c426:	9004      	str	r0, [sp, #16]
 800c428:	9105      	str	r1, [sp, #20]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	d000      	beq.n	800c430 <__ieee754_pow+0x324>
 800c42e:	e1e0      	b.n	800c7f2 <__ieee754_pow+0x6e6>
 800c430:	2300      	movs	r3, #0
 800c432:	4c2b      	ldr	r4, [pc, #172]	; (800c4e0 <__ieee754_pow+0x3d4>)
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	9401      	str	r4, [sp, #4]
 800c438:	9c02      	ldr	r4, [sp, #8]
 800c43a:	9d03      	ldr	r5, [sp, #12]
 800c43c:	9802      	ldr	r0, [sp, #8]
 800c43e:	9903      	ldr	r1, [sp, #12]
 800c440:	2400      	movs	r4, #0
 800c442:	002b      	movs	r3, r5
 800c444:	0022      	movs	r2, r4
 800c446:	f7f5 ffd7 	bl	80023f8 <__aeabi_dsub>
 800c44a:	0032      	movs	r2, r6
 800c44c:	003b      	movs	r3, r7
 800c44e:	f7f5 fd67 	bl	8001f20 <__aeabi_dmul>
 800c452:	9a02      	ldr	r2, [sp, #8]
 800c454:	9b03      	ldr	r3, [sp, #12]
 800c456:	9006      	str	r0, [sp, #24]
 800c458:	9107      	str	r1, [sp, #28]
 800c45a:	9804      	ldr	r0, [sp, #16]
 800c45c:	9905      	ldr	r1, [sp, #20]
 800c45e:	f7f5 fd5f 	bl	8001f20 <__aeabi_dmul>
 800c462:	0002      	movs	r2, r0
 800c464:	000b      	movs	r3, r1
 800c466:	9806      	ldr	r0, [sp, #24]
 800c468:	9907      	ldr	r1, [sp, #28]
 800c46a:	f7f4 fde9 	bl	8001040 <__aeabi_dadd>
 800c46e:	0022      	movs	r2, r4
 800c470:	002b      	movs	r3, r5
 800c472:	9004      	str	r0, [sp, #16]
 800c474:	9105      	str	r1, [sp, #20]
 800c476:	0030      	movs	r0, r6
 800c478:	0039      	movs	r1, r7
 800c47a:	f7f5 fd51 	bl	8001f20 <__aeabi_dmul>
 800c47e:	0006      	movs	r6, r0
 800c480:	000f      	movs	r7, r1
 800c482:	000b      	movs	r3, r1
 800c484:	0002      	movs	r2, r0
 800c486:	9804      	ldr	r0, [sp, #16]
 800c488:	9905      	ldr	r1, [sp, #20]
 800c48a:	9606      	str	r6, [sp, #24]
 800c48c:	9707      	str	r7, [sp, #28]
 800c48e:	f7f4 fdd7 	bl	8001040 <__aeabi_dadd>
 800c492:	4b14      	ldr	r3, [pc, #80]	; (800c4e4 <__ieee754_pow+0x3d8>)
 800c494:	0005      	movs	r5, r0
 800c496:	000c      	movs	r4, r1
 800c498:	9108      	str	r1, [sp, #32]
 800c49a:	4299      	cmp	r1, r3
 800c49c:	dc00      	bgt.n	800c4a0 <__ieee754_pow+0x394>
 800c49e:	e2da      	b.n	800ca56 <__ieee754_pow+0x94a>
 800c4a0:	4b11      	ldr	r3, [pc, #68]	; (800c4e8 <__ieee754_pow+0x3dc>)
 800c4a2:	18cb      	adds	r3, r1, r3
 800c4a4:	4303      	orrs	r3, r0
 800c4a6:	d100      	bne.n	800c4aa <__ieee754_pow+0x39e>
 800c4a8:	e1dc      	b.n	800c864 <__ieee754_pow+0x758>
 800c4aa:	9800      	ldr	r0, [sp, #0]
 800c4ac:	9901      	ldr	r1, [sp, #4]
 800c4ae:	4a0f      	ldr	r2, [pc, #60]	; (800c4ec <__ieee754_pow+0x3e0>)
 800c4b0:	4b0f      	ldr	r3, [pc, #60]	; (800c4f0 <__ieee754_pow+0x3e4>)
 800c4b2:	f7f5 fd35 	bl	8001f20 <__aeabi_dmul>
 800c4b6:	4a0d      	ldr	r2, [pc, #52]	; (800c4ec <__ieee754_pow+0x3e0>)
 800c4b8:	4b0d      	ldr	r3, [pc, #52]	; (800c4f0 <__ieee754_pow+0x3e4>)
 800c4ba:	e6f9      	b.n	800c2b0 <__ieee754_pow+0x1a4>
 800c4bc:	3ff00000 	.word	0x3ff00000
 800c4c0:	3ff71547 	.word	0x3ff71547
 800c4c4:	f85ddf44 	.word	0xf85ddf44
 800c4c8:	3e54ae0b 	.word	0x3e54ae0b
 800c4cc:	3fd00000 	.word	0x3fd00000
 800c4d0:	55555555 	.word	0x55555555
 800c4d4:	3fd55555 	.word	0x3fd55555
 800c4d8:	3fe00000 	.word	0x3fe00000
 800c4dc:	652b82fe 	.word	0x652b82fe
 800c4e0:	bff00000 	.word	0xbff00000
 800c4e4:	408fffff 	.word	0x408fffff
 800c4e8:	bf700000 	.word	0xbf700000
 800c4ec:	8800759c 	.word	0x8800759c
 800c4f0:	7e37e43c 	.word	0x7e37e43c
 800c4f4:	4bc0      	ldr	r3, [pc, #768]	; (800c7f8 <__ieee754_pow+0x6ec>)
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	4233      	tst	r3, r6
 800c4fa:	d10a      	bne.n	800c512 <__ieee754_pow+0x406>
 800c4fc:	9800      	ldr	r0, [sp, #0]
 800c4fe:	9901      	ldr	r1, [sp, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	4bbe      	ldr	r3, [pc, #760]	; (800c7fc <__ieee754_pow+0x6f0>)
 800c504:	f7f5 fd0c 	bl	8001f20 <__aeabi_dmul>
 800c508:	2235      	movs	r2, #53	; 0x35
 800c50a:	9000      	str	r0, [sp, #0]
 800c50c:	9101      	str	r1, [sp, #4]
 800c50e:	9c01      	ldr	r4, [sp, #4]
 800c510:	4252      	negs	r2, r2
 800c512:	49bb      	ldr	r1, [pc, #748]	; (800c800 <__ieee754_pow+0x6f4>)
 800c514:	1523      	asrs	r3, r4, #20
 800c516:	185b      	adds	r3, r3, r1
 800c518:	189b      	adds	r3, r3, r2
 800c51a:	0324      	lsls	r4, r4, #12
 800c51c:	4db9      	ldr	r5, [pc, #740]	; (800c804 <__ieee754_pow+0x6f8>)
 800c51e:	930d      	str	r3, [sp, #52]	; 0x34
 800c520:	4bb9      	ldr	r3, [pc, #740]	; (800c808 <__ieee754_pow+0x6fc>)
 800c522:	0b22      	lsrs	r2, r4, #12
 800c524:	4315      	orrs	r5, r2
 800c526:	2400      	movs	r4, #0
 800c528:	429a      	cmp	r2, r3
 800c52a:	dd09      	ble.n	800c540 <__ieee754_pow+0x434>
 800c52c:	4bb7      	ldr	r3, [pc, #732]	; (800c80c <__ieee754_pow+0x700>)
 800c52e:	3401      	adds	r4, #1
 800c530:	429a      	cmp	r2, r3
 800c532:	dd05      	ble.n	800c540 <__ieee754_pow+0x434>
 800c534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c536:	191b      	adds	r3, r3, r4
 800c538:	2400      	movs	r4, #0
 800c53a:	930d      	str	r3, [sp, #52]	; 0x34
 800c53c:	4bb4      	ldr	r3, [pc, #720]	; (800c810 <__ieee754_pow+0x704>)
 800c53e:	18ed      	adds	r5, r5, r3
 800c540:	9800      	ldr	r0, [sp, #0]
 800c542:	9901      	ldr	r1, [sp, #4]
 800c544:	0029      	movs	r1, r5
 800c546:	00e3      	lsls	r3, r4, #3
 800c548:	9311      	str	r3, [sp, #68]	; 0x44
 800c54a:	4bb2      	ldr	r3, [pc, #712]	; (800c814 <__ieee754_pow+0x708>)
 800c54c:	00e2      	lsls	r2, r4, #3
 800c54e:	189b      	adds	r3, r3, r2
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	900e      	str	r0, [sp, #56]	; 0x38
 800c556:	910f      	str	r1, [sp, #60]	; 0x3c
 800c558:	920a      	str	r2, [sp, #40]	; 0x28
 800c55a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c55c:	f7f5 ff4c 	bl	80023f8 <__aeabi_dsub>
 800c560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c564:	0006      	movs	r6, r0
 800c566:	000f      	movs	r7, r1
 800c568:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c56a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c56c:	f7f4 fd68 	bl	8001040 <__aeabi_dadd>
 800c570:	0002      	movs	r2, r0
 800c572:	000b      	movs	r3, r1
 800c574:	2000      	movs	r0, #0
 800c576:	49a3      	ldr	r1, [pc, #652]	; (800c804 <__ieee754_pow+0x6f8>)
 800c578:	f7f5 f8cc 	bl	8001714 <__aeabi_ddiv>
 800c57c:	0002      	movs	r2, r0
 800c57e:	000b      	movs	r3, r1
 800c580:	9012      	str	r0, [sp, #72]	; 0x48
 800c582:	9113      	str	r1, [sp, #76]	; 0x4c
 800c584:	0030      	movs	r0, r6
 800c586:	0039      	movs	r1, r7
 800c588:	f7f5 fcca 	bl	8001f20 <__aeabi_dmul>
 800c58c:	9008      	str	r0, [sp, #32]
 800c58e:	9109      	str	r1, [sp, #36]	; 0x24
 800c590:	9a08      	ldr	r2, [sp, #32]
 800c592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c594:	2180      	movs	r1, #128	; 0x80
 800c596:	9204      	str	r2, [sp, #16]
 800c598:	9305      	str	r3, [sp, #20]
 800c59a:	2300      	movs	r3, #0
 800c59c:	0589      	lsls	r1, r1, #22
 800c59e:	106d      	asrs	r5, r5, #1
 800c5a0:	430d      	orrs	r5, r1
 800c5a2:	2180      	movs	r1, #128	; 0x80
 800c5a4:	9304      	str	r3, [sp, #16]
 800c5a6:	9a04      	ldr	r2, [sp, #16]
 800c5a8:	9b05      	ldr	r3, [sp, #20]
 800c5aa:	9200      	str	r2, [sp, #0]
 800c5ac:	9301      	str	r3, [sp, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	0309      	lsls	r1, r1, #12
 800c5b2:	186d      	adds	r5, r5, r1
 800c5b4:	04a1      	lsls	r1, r4, #18
 800c5b6:	186b      	adds	r3, r5, r1
 800c5b8:	9800      	ldr	r0, [sp, #0]
 800c5ba:	9901      	ldr	r1, [sp, #4]
 800c5bc:	0014      	movs	r4, r2
 800c5be:	001d      	movs	r5, r3
 800c5c0:	f7f5 fcae 	bl	8001f20 <__aeabi_dmul>
 800c5c4:	0002      	movs	r2, r0
 800c5c6:	000b      	movs	r3, r1
 800c5c8:	0030      	movs	r0, r6
 800c5ca:	0039      	movs	r1, r7
 800c5cc:	f7f5 ff14 	bl	80023f8 <__aeabi_dsub>
 800c5d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5d4:	0006      	movs	r6, r0
 800c5d6:	000f      	movs	r7, r1
 800c5d8:	0020      	movs	r0, r4
 800c5da:	0029      	movs	r1, r5
 800c5dc:	f7f5 ff0c 	bl	80023f8 <__aeabi_dsub>
 800c5e0:	0002      	movs	r2, r0
 800c5e2:	000b      	movs	r3, r1
 800c5e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c5e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c5e8:	f7f5 ff06 	bl	80023f8 <__aeabi_dsub>
 800c5ec:	9a00      	ldr	r2, [sp, #0]
 800c5ee:	9b01      	ldr	r3, [sp, #4]
 800c5f0:	f7f5 fc96 	bl	8001f20 <__aeabi_dmul>
 800c5f4:	0002      	movs	r2, r0
 800c5f6:	000b      	movs	r3, r1
 800c5f8:	0030      	movs	r0, r6
 800c5fa:	0039      	movs	r1, r7
 800c5fc:	f7f5 fefc 	bl	80023f8 <__aeabi_dsub>
 800c600:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c602:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c604:	f7f5 fc8c 	bl	8001f20 <__aeabi_dmul>
 800c608:	9a08      	ldr	r2, [sp, #32]
 800c60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c60c:	900a      	str	r0, [sp, #40]	; 0x28
 800c60e:	910b      	str	r1, [sp, #44]	; 0x2c
 800c610:	0010      	movs	r0, r2
 800c612:	0019      	movs	r1, r3
 800c614:	f7f5 fc84 	bl	8001f20 <__aeabi_dmul>
 800c618:	0006      	movs	r6, r0
 800c61a:	000f      	movs	r7, r1
 800c61c:	4a7e      	ldr	r2, [pc, #504]	; (800c818 <__ieee754_pow+0x70c>)
 800c61e:	4b7f      	ldr	r3, [pc, #508]	; (800c81c <__ieee754_pow+0x710>)
 800c620:	f7f5 fc7e 	bl	8001f20 <__aeabi_dmul>
 800c624:	4a7e      	ldr	r2, [pc, #504]	; (800c820 <__ieee754_pow+0x714>)
 800c626:	4b7f      	ldr	r3, [pc, #508]	; (800c824 <__ieee754_pow+0x718>)
 800c628:	f7f4 fd0a 	bl	8001040 <__aeabi_dadd>
 800c62c:	0032      	movs	r2, r6
 800c62e:	003b      	movs	r3, r7
 800c630:	f7f5 fc76 	bl	8001f20 <__aeabi_dmul>
 800c634:	4a7c      	ldr	r2, [pc, #496]	; (800c828 <__ieee754_pow+0x71c>)
 800c636:	4b7d      	ldr	r3, [pc, #500]	; (800c82c <__ieee754_pow+0x720>)
 800c638:	f7f4 fd02 	bl	8001040 <__aeabi_dadd>
 800c63c:	0032      	movs	r2, r6
 800c63e:	003b      	movs	r3, r7
 800c640:	f7f5 fc6e 	bl	8001f20 <__aeabi_dmul>
 800c644:	4a7a      	ldr	r2, [pc, #488]	; (800c830 <__ieee754_pow+0x724>)
 800c646:	4b7b      	ldr	r3, [pc, #492]	; (800c834 <__ieee754_pow+0x728>)
 800c648:	f7f4 fcfa 	bl	8001040 <__aeabi_dadd>
 800c64c:	0032      	movs	r2, r6
 800c64e:	003b      	movs	r3, r7
 800c650:	f7f5 fc66 	bl	8001f20 <__aeabi_dmul>
 800c654:	4a78      	ldr	r2, [pc, #480]	; (800c838 <__ieee754_pow+0x72c>)
 800c656:	4b79      	ldr	r3, [pc, #484]	; (800c83c <__ieee754_pow+0x730>)
 800c658:	f7f4 fcf2 	bl	8001040 <__aeabi_dadd>
 800c65c:	0032      	movs	r2, r6
 800c65e:	003b      	movs	r3, r7
 800c660:	f7f5 fc5e 	bl	8001f20 <__aeabi_dmul>
 800c664:	4a76      	ldr	r2, [pc, #472]	; (800c840 <__ieee754_pow+0x734>)
 800c666:	4b77      	ldr	r3, [pc, #476]	; (800c844 <__ieee754_pow+0x738>)
 800c668:	f7f4 fcea 	bl	8001040 <__aeabi_dadd>
 800c66c:	0032      	movs	r2, r6
 800c66e:	0004      	movs	r4, r0
 800c670:	000d      	movs	r5, r1
 800c672:	003b      	movs	r3, r7
 800c674:	0030      	movs	r0, r6
 800c676:	0039      	movs	r1, r7
 800c678:	f7f5 fc52 	bl	8001f20 <__aeabi_dmul>
 800c67c:	0002      	movs	r2, r0
 800c67e:	000b      	movs	r3, r1
 800c680:	0020      	movs	r0, r4
 800c682:	0029      	movs	r1, r5
 800c684:	f7f5 fc4c 	bl	8001f20 <__aeabi_dmul>
 800c688:	9a00      	ldr	r2, [sp, #0]
 800c68a:	9b01      	ldr	r3, [sp, #4]
 800c68c:	0004      	movs	r4, r0
 800c68e:	000d      	movs	r5, r1
 800c690:	9808      	ldr	r0, [sp, #32]
 800c692:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c694:	f7f4 fcd4 	bl	8001040 <__aeabi_dadd>
 800c698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c69c:	f7f5 fc40 	bl	8001f20 <__aeabi_dmul>
 800c6a0:	0022      	movs	r2, r4
 800c6a2:	002b      	movs	r3, r5
 800c6a4:	f7f4 fccc 	bl	8001040 <__aeabi_dadd>
 800c6a8:	9a00      	ldr	r2, [sp, #0]
 800c6aa:	9b01      	ldr	r3, [sp, #4]
 800c6ac:	900e      	str	r0, [sp, #56]	; 0x38
 800c6ae:	910f      	str	r1, [sp, #60]	; 0x3c
 800c6b0:	0010      	movs	r0, r2
 800c6b2:	0019      	movs	r1, r3
 800c6b4:	f7f5 fc34 	bl	8001f20 <__aeabi_dmul>
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	4b63      	ldr	r3, [pc, #396]	; (800c848 <__ieee754_pow+0x73c>)
 800c6bc:	0004      	movs	r4, r0
 800c6be:	000d      	movs	r5, r1
 800c6c0:	f7f4 fcbe 	bl	8001040 <__aeabi_dadd>
 800c6c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6c8:	f7f4 fcba 	bl	8001040 <__aeabi_dadd>
 800c6cc:	9e04      	ldr	r6, [sp, #16]
 800c6ce:	000f      	movs	r7, r1
 800c6d0:	0032      	movs	r2, r6
 800c6d2:	000b      	movs	r3, r1
 800c6d4:	9800      	ldr	r0, [sp, #0]
 800c6d6:	9901      	ldr	r1, [sp, #4]
 800c6d8:	f7f5 fc22 	bl	8001f20 <__aeabi_dmul>
 800c6dc:	2200      	movs	r2, #0
 800c6de:	9000      	str	r0, [sp, #0]
 800c6e0:	9101      	str	r1, [sp, #4]
 800c6e2:	4b59      	ldr	r3, [pc, #356]	; (800c848 <__ieee754_pow+0x73c>)
 800c6e4:	0030      	movs	r0, r6
 800c6e6:	0039      	movs	r1, r7
 800c6e8:	f7f5 fe86 	bl	80023f8 <__aeabi_dsub>
 800c6ec:	0022      	movs	r2, r4
 800c6ee:	002b      	movs	r3, r5
 800c6f0:	f7f5 fe82 	bl	80023f8 <__aeabi_dsub>
 800c6f4:	0002      	movs	r2, r0
 800c6f6:	000b      	movs	r3, r1
 800c6f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c6fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c6fc:	f7f5 fe7c 	bl	80023f8 <__aeabi_dsub>
 800c700:	9a08      	ldr	r2, [sp, #32]
 800c702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c704:	f7f5 fc0c 	bl	8001f20 <__aeabi_dmul>
 800c708:	0032      	movs	r2, r6
 800c70a:	0004      	movs	r4, r0
 800c70c:	000d      	movs	r5, r1
 800c70e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c710:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c712:	003b      	movs	r3, r7
 800c714:	f7f5 fc04 	bl	8001f20 <__aeabi_dmul>
 800c718:	0002      	movs	r2, r0
 800c71a:	000b      	movs	r3, r1
 800c71c:	0020      	movs	r0, r4
 800c71e:	0029      	movs	r1, r5
 800c720:	f7f4 fc8e 	bl	8001040 <__aeabi_dadd>
 800c724:	0004      	movs	r4, r0
 800c726:	000d      	movs	r5, r1
 800c728:	0002      	movs	r2, r0
 800c72a:	000b      	movs	r3, r1
 800c72c:	9800      	ldr	r0, [sp, #0]
 800c72e:	9901      	ldr	r1, [sp, #4]
 800c730:	f7f4 fc86 	bl	8001040 <__aeabi_dadd>
 800c734:	22e0      	movs	r2, #224	; 0xe0
 800c736:	9e04      	ldr	r6, [sp, #16]
 800c738:	4b44      	ldr	r3, [pc, #272]	; (800c84c <__ieee754_pow+0x740>)
 800c73a:	0030      	movs	r0, r6
 800c73c:	0612      	lsls	r2, r2, #24
 800c73e:	000f      	movs	r7, r1
 800c740:	f7f5 fbee 	bl	8001f20 <__aeabi_dmul>
 800c744:	9008      	str	r0, [sp, #32]
 800c746:	9109      	str	r1, [sp, #36]	; 0x24
 800c748:	9a00      	ldr	r2, [sp, #0]
 800c74a:	9b01      	ldr	r3, [sp, #4]
 800c74c:	0030      	movs	r0, r6
 800c74e:	0039      	movs	r1, r7
 800c750:	f7f5 fe52 	bl	80023f8 <__aeabi_dsub>
 800c754:	0002      	movs	r2, r0
 800c756:	000b      	movs	r3, r1
 800c758:	0020      	movs	r0, r4
 800c75a:	0029      	movs	r1, r5
 800c75c:	f7f5 fe4c 	bl	80023f8 <__aeabi_dsub>
 800c760:	4a3b      	ldr	r2, [pc, #236]	; (800c850 <__ieee754_pow+0x744>)
 800c762:	4b3a      	ldr	r3, [pc, #232]	; (800c84c <__ieee754_pow+0x740>)
 800c764:	f7f5 fbdc 	bl	8001f20 <__aeabi_dmul>
 800c768:	4a3a      	ldr	r2, [pc, #232]	; (800c854 <__ieee754_pow+0x748>)
 800c76a:	0004      	movs	r4, r0
 800c76c:	000d      	movs	r5, r1
 800c76e:	0030      	movs	r0, r6
 800c770:	0039      	movs	r1, r7
 800c772:	4b39      	ldr	r3, [pc, #228]	; (800c858 <__ieee754_pow+0x74c>)
 800c774:	f7f5 fbd4 	bl	8001f20 <__aeabi_dmul>
 800c778:	0002      	movs	r2, r0
 800c77a:	000b      	movs	r3, r1
 800c77c:	0020      	movs	r0, r4
 800c77e:	0029      	movs	r1, r5
 800c780:	f7f4 fc5e 	bl	8001040 <__aeabi_dadd>
 800c784:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c786:	4b35      	ldr	r3, [pc, #212]	; (800c85c <__ieee754_pow+0x750>)
 800c788:	189b      	adds	r3, r3, r2
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	f7f4 fc57 	bl	8001040 <__aeabi_dadd>
 800c792:	900a      	str	r0, [sp, #40]	; 0x28
 800c794:	910b      	str	r1, [sp, #44]	; 0x2c
 800c796:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c798:	f7f6 fa14 	bl	8002bc4 <__aeabi_i2d>
 800c79c:	0004      	movs	r4, r0
 800c79e:	000d      	movs	r5, r1
 800c7a0:	9808      	ldr	r0, [sp, #32]
 800c7a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c7a6:	4b2e      	ldr	r3, [pc, #184]	; (800c860 <__ieee754_pow+0x754>)
 800c7a8:	189b      	adds	r3, r3, r2
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	9200      	str	r2, [sp, #0]
 800c7b0:	9301      	str	r3, [sp, #4]
 800c7b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7b6:	f7f4 fc43 	bl	8001040 <__aeabi_dadd>
 800c7ba:	9a00      	ldr	r2, [sp, #0]
 800c7bc:	9b01      	ldr	r3, [sp, #4]
 800c7be:	f7f4 fc3f 	bl	8001040 <__aeabi_dadd>
 800c7c2:	0022      	movs	r2, r4
 800c7c4:	002b      	movs	r3, r5
 800c7c6:	f7f4 fc3b 	bl	8001040 <__aeabi_dadd>
 800c7ca:	9804      	ldr	r0, [sp, #16]
 800c7cc:	0022      	movs	r2, r4
 800c7ce:	002b      	movs	r3, r5
 800c7d0:	0006      	movs	r6, r0
 800c7d2:	000f      	movs	r7, r1
 800c7d4:	f7f5 fe10 	bl	80023f8 <__aeabi_dsub>
 800c7d8:	9a00      	ldr	r2, [sp, #0]
 800c7da:	9b01      	ldr	r3, [sp, #4]
 800c7dc:	f7f5 fe0c 	bl	80023f8 <__aeabi_dsub>
 800c7e0:	9a08      	ldr	r2, [sp, #32]
 800c7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e4:	f7f5 fe08 	bl	80023f8 <__aeabi_dsub>
 800c7e8:	0002      	movs	r2, r0
 800c7ea:	000b      	movs	r3, r1
 800c7ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c7ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c7f0:	e614      	b.n	800c41c <__ieee754_pow+0x310>
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	4c03      	ldr	r4, [pc, #12]	; (800c804 <__ieee754_pow+0x6f8>)
 800c7f6:	e61d      	b.n	800c434 <__ieee754_pow+0x328>
 800c7f8:	7ff00000 	.word	0x7ff00000
 800c7fc:	43400000 	.word	0x43400000
 800c800:	fffffc01 	.word	0xfffffc01
 800c804:	3ff00000 	.word	0x3ff00000
 800c808:	0003988e 	.word	0x0003988e
 800c80c:	000bb679 	.word	0x000bb679
 800c810:	fff00000 	.word	0xfff00000
 800c814:	0800e5c8 	.word	0x0800e5c8
 800c818:	4a454eef 	.word	0x4a454eef
 800c81c:	3fca7e28 	.word	0x3fca7e28
 800c820:	93c9db65 	.word	0x93c9db65
 800c824:	3fcd864a 	.word	0x3fcd864a
 800c828:	a91d4101 	.word	0xa91d4101
 800c82c:	3fd17460 	.word	0x3fd17460
 800c830:	518f264d 	.word	0x518f264d
 800c834:	3fd55555 	.word	0x3fd55555
 800c838:	db6fabff 	.word	0xdb6fabff
 800c83c:	3fdb6db6 	.word	0x3fdb6db6
 800c840:	33333303 	.word	0x33333303
 800c844:	3fe33333 	.word	0x3fe33333
 800c848:	40080000 	.word	0x40080000
 800c84c:	3feec709 	.word	0x3feec709
 800c850:	dc3a03fd 	.word	0xdc3a03fd
 800c854:	145b01f5 	.word	0x145b01f5
 800c858:	be3e2fe0 	.word	0xbe3e2fe0
 800c85c:	0800e5e8 	.word	0x0800e5e8
 800c860:	0800e5d8 	.word	0x0800e5d8
 800c864:	4a8f      	ldr	r2, [pc, #572]	; (800caa4 <__ieee754_pow+0x998>)
 800c866:	4b90      	ldr	r3, [pc, #576]	; (800caa8 <__ieee754_pow+0x99c>)
 800c868:	9804      	ldr	r0, [sp, #16]
 800c86a:	9905      	ldr	r1, [sp, #20]
 800c86c:	f7f4 fbe8 	bl	8001040 <__aeabi_dadd>
 800c870:	0032      	movs	r2, r6
 800c872:	9002      	str	r0, [sp, #8]
 800c874:	9103      	str	r1, [sp, #12]
 800c876:	003b      	movs	r3, r7
 800c878:	0028      	movs	r0, r5
 800c87a:	0021      	movs	r1, r4
 800c87c:	f7f5 fdbc 	bl	80023f8 <__aeabi_dsub>
 800c880:	0002      	movs	r2, r0
 800c882:	000b      	movs	r3, r1
 800c884:	9802      	ldr	r0, [sp, #8]
 800c886:	9903      	ldr	r1, [sp, #12]
 800c888:	f7f3 fdf6 	bl	8000478 <__aeabi_dcmpgt>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d000      	beq.n	800c892 <__ieee754_pow+0x786>
 800c890:	e60b      	b.n	800c4aa <__ieee754_pow+0x39e>
 800c892:	2100      	movs	r1, #0
 800c894:	4a85      	ldr	r2, [pc, #532]	; (800caac <__ieee754_pow+0x9a0>)
 800c896:	0063      	lsls	r3, r4, #1
 800c898:	085b      	lsrs	r3, r3, #1
 800c89a:	9102      	str	r1, [sp, #8]
 800c89c:	4293      	cmp	r3, r2
 800c89e:	dd25      	ble.n	800c8ec <__ieee754_pow+0x7e0>
 800c8a0:	4a83      	ldr	r2, [pc, #524]	; (800cab0 <__ieee754_pow+0x9a4>)
 800c8a2:	151b      	asrs	r3, r3, #20
 800c8a4:	189b      	adds	r3, r3, r2
 800c8a6:	2280      	movs	r2, #128	; 0x80
 800c8a8:	0352      	lsls	r2, r2, #13
 800c8aa:	4694      	mov	ip, r2
 800c8ac:	411a      	asrs	r2, r3
 800c8ae:	1914      	adds	r4, r2, r4
 800c8b0:	4b80      	ldr	r3, [pc, #512]	; (800cab4 <__ieee754_pow+0x9a8>)
 800c8b2:	0060      	lsls	r0, r4, #1
 800c8b4:	4d80      	ldr	r5, [pc, #512]	; (800cab8 <__ieee754_pow+0x9ac>)
 800c8b6:	0d40      	lsrs	r0, r0, #21
 800c8b8:	18c0      	adds	r0, r0, r3
 800c8ba:	4105      	asrs	r5, r0
 800c8bc:	0021      	movs	r1, r4
 800c8be:	43a9      	bics	r1, r5
 800c8c0:	000b      	movs	r3, r1
 800c8c2:	4661      	mov	r1, ip
 800c8c4:	0324      	lsls	r4, r4, #12
 800c8c6:	0b24      	lsrs	r4, r4, #12
 800c8c8:	4321      	orrs	r1, r4
 800c8ca:	2414      	movs	r4, #20
 800c8cc:	1a20      	subs	r0, r4, r0
 800c8ce:	4101      	asrs	r1, r0
 800c8d0:	9102      	str	r1, [sp, #8]
 800c8d2:	9908      	ldr	r1, [sp, #32]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2900      	cmp	r1, #0
 800c8d8:	da02      	bge.n	800c8e0 <__ieee754_pow+0x7d4>
 800c8da:	9902      	ldr	r1, [sp, #8]
 800c8dc:	4249      	negs	r1, r1
 800c8de:	9102      	str	r1, [sp, #8]
 800c8e0:	0030      	movs	r0, r6
 800c8e2:	0039      	movs	r1, r7
 800c8e4:	f7f5 fd88 	bl	80023f8 <__aeabi_dsub>
 800c8e8:	9006      	str	r0, [sp, #24]
 800c8ea:	9107      	str	r1, [sp, #28]
 800c8ec:	9a04      	ldr	r2, [sp, #16]
 800c8ee:	9b05      	ldr	r3, [sp, #20]
 800c8f0:	9806      	ldr	r0, [sp, #24]
 800c8f2:	9907      	ldr	r1, [sp, #28]
 800c8f4:	2600      	movs	r6, #0
 800c8f6:	f7f4 fba3 	bl	8001040 <__aeabi_dadd>
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	0030      	movs	r0, r6
 800c8fe:	4b6f      	ldr	r3, [pc, #444]	; (800cabc <__ieee754_pow+0x9b0>)
 800c900:	000f      	movs	r7, r1
 800c902:	f7f5 fb0d 	bl	8001f20 <__aeabi_dmul>
 800c906:	9a06      	ldr	r2, [sp, #24]
 800c908:	9b07      	ldr	r3, [sp, #28]
 800c90a:	9008      	str	r0, [sp, #32]
 800c90c:	9109      	str	r1, [sp, #36]	; 0x24
 800c90e:	0030      	movs	r0, r6
 800c910:	0039      	movs	r1, r7
 800c912:	f7f5 fd71 	bl	80023f8 <__aeabi_dsub>
 800c916:	0002      	movs	r2, r0
 800c918:	000b      	movs	r3, r1
 800c91a:	9804      	ldr	r0, [sp, #16]
 800c91c:	9905      	ldr	r1, [sp, #20]
 800c91e:	f7f5 fd6b 	bl	80023f8 <__aeabi_dsub>
 800c922:	4a67      	ldr	r2, [pc, #412]	; (800cac0 <__ieee754_pow+0x9b4>)
 800c924:	4b67      	ldr	r3, [pc, #412]	; (800cac4 <__ieee754_pow+0x9b8>)
 800c926:	f7f5 fafb 	bl	8001f20 <__aeabi_dmul>
 800c92a:	4a67      	ldr	r2, [pc, #412]	; (800cac8 <__ieee754_pow+0x9bc>)
 800c92c:	0004      	movs	r4, r0
 800c92e:	000d      	movs	r5, r1
 800c930:	0030      	movs	r0, r6
 800c932:	0039      	movs	r1, r7
 800c934:	4b65      	ldr	r3, [pc, #404]	; (800cacc <__ieee754_pow+0x9c0>)
 800c936:	f7f5 faf3 	bl	8001f20 <__aeabi_dmul>
 800c93a:	0002      	movs	r2, r0
 800c93c:	000b      	movs	r3, r1
 800c93e:	0020      	movs	r0, r4
 800c940:	0029      	movs	r1, r5
 800c942:	f7f4 fb7d 	bl	8001040 <__aeabi_dadd>
 800c946:	0004      	movs	r4, r0
 800c948:	000d      	movs	r5, r1
 800c94a:	0002      	movs	r2, r0
 800c94c:	000b      	movs	r3, r1
 800c94e:	9808      	ldr	r0, [sp, #32]
 800c950:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c952:	f7f4 fb75 	bl	8001040 <__aeabi_dadd>
 800c956:	9a08      	ldr	r2, [sp, #32]
 800c958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c95a:	0006      	movs	r6, r0
 800c95c:	000f      	movs	r7, r1
 800c95e:	f7f5 fd4b 	bl	80023f8 <__aeabi_dsub>
 800c962:	0002      	movs	r2, r0
 800c964:	000b      	movs	r3, r1
 800c966:	0020      	movs	r0, r4
 800c968:	0029      	movs	r1, r5
 800c96a:	f7f5 fd45 	bl	80023f8 <__aeabi_dsub>
 800c96e:	0032      	movs	r2, r6
 800c970:	9004      	str	r0, [sp, #16]
 800c972:	9105      	str	r1, [sp, #20]
 800c974:	003b      	movs	r3, r7
 800c976:	0030      	movs	r0, r6
 800c978:	0039      	movs	r1, r7
 800c97a:	f7f5 fad1 	bl	8001f20 <__aeabi_dmul>
 800c97e:	0004      	movs	r4, r0
 800c980:	000d      	movs	r5, r1
 800c982:	4a53      	ldr	r2, [pc, #332]	; (800cad0 <__ieee754_pow+0x9c4>)
 800c984:	4b53      	ldr	r3, [pc, #332]	; (800cad4 <__ieee754_pow+0x9c8>)
 800c986:	f7f5 facb 	bl	8001f20 <__aeabi_dmul>
 800c98a:	4a53      	ldr	r2, [pc, #332]	; (800cad8 <__ieee754_pow+0x9cc>)
 800c98c:	4b53      	ldr	r3, [pc, #332]	; (800cadc <__ieee754_pow+0x9d0>)
 800c98e:	f7f5 fd33 	bl	80023f8 <__aeabi_dsub>
 800c992:	0022      	movs	r2, r4
 800c994:	002b      	movs	r3, r5
 800c996:	f7f5 fac3 	bl	8001f20 <__aeabi_dmul>
 800c99a:	4a51      	ldr	r2, [pc, #324]	; (800cae0 <__ieee754_pow+0x9d4>)
 800c99c:	4b51      	ldr	r3, [pc, #324]	; (800cae4 <__ieee754_pow+0x9d8>)
 800c99e:	f7f4 fb4f 	bl	8001040 <__aeabi_dadd>
 800c9a2:	0022      	movs	r2, r4
 800c9a4:	002b      	movs	r3, r5
 800c9a6:	f7f5 fabb 	bl	8001f20 <__aeabi_dmul>
 800c9aa:	4a4f      	ldr	r2, [pc, #316]	; (800cae8 <__ieee754_pow+0x9dc>)
 800c9ac:	4b4f      	ldr	r3, [pc, #316]	; (800caec <__ieee754_pow+0x9e0>)
 800c9ae:	f7f5 fd23 	bl	80023f8 <__aeabi_dsub>
 800c9b2:	0022      	movs	r2, r4
 800c9b4:	002b      	movs	r3, r5
 800c9b6:	f7f5 fab3 	bl	8001f20 <__aeabi_dmul>
 800c9ba:	4a4d      	ldr	r2, [pc, #308]	; (800caf0 <__ieee754_pow+0x9e4>)
 800c9bc:	4b4d      	ldr	r3, [pc, #308]	; (800caf4 <__ieee754_pow+0x9e8>)
 800c9be:	f7f4 fb3f 	bl	8001040 <__aeabi_dadd>
 800c9c2:	0022      	movs	r2, r4
 800c9c4:	002b      	movs	r3, r5
 800c9c6:	f7f5 faab 	bl	8001f20 <__aeabi_dmul>
 800c9ca:	0002      	movs	r2, r0
 800c9cc:	000b      	movs	r3, r1
 800c9ce:	0030      	movs	r0, r6
 800c9d0:	0039      	movs	r1, r7
 800c9d2:	f7f5 fd11 	bl	80023f8 <__aeabi_dsub>
 800c9d6:	0004      	movs	r4, r0
 800c9d8:	000d      	movs	r5, r1
 800c9da:	0002      	movs	r2, r0
 800c9dc:	000b      	movs	r3, r1
 800c9de:	0030      	movs	r0, r6
 800c9e0:	0039      	movs	r1, r7
 800c9e2:	f7f5 fa9d 	bl	8001f20 <__aeabi_dmul>
 800c9e6:	2380      	movs	r3, #128	; 0x80
 800c9e8:	9006      	str	r0, [sp, #24]
 800c9ea:	9107      	str	r1, [sp, #28]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	0020      	movs	r0, r4
 800c9f0:	0029      	movs	r1, r5
 800c9f2:	05db      	lsls	r3, r3, #23
 800c9f4:	f7f5 fd00 	bl	80023f8 <__aeabi_dsub>
 800c9f8:	0002      	movs	r2, r0
 800c9fa:	000b      	movs	r3, r1
 800c9fc:	9806      	ldr	r0, [sp, #24]
 800c9fe:	9907      	ldr	r1, [sp, #28]
 800ca00:	f7f4 fe88 	bl	8001714 <__aeabi_ddiv>
 800ca04:	9a04      	ldr	r2, [sp, #16]
 800ca06:	9b05      	ldr	r3, [sp, #20]
 800ca08:	0004      	movs	r4, r0
 800ca0a:	000d      	movs	r5, r1
 800ca0c:	0030      	movs	r0, r6
 800ca0e:	0039      	movs	r1, r7
 800ca10:	f7f5 fa86 	bl	8001f20 <__aeabi_dmul>
 800ca14:	9a04      	ldr	r2, [sp, #16]
 800ca16:	9b05      	ldr	r3, [sp, #20]
 800ca18:	f7f4 fb12 	bl	8001040 <__aeabi_dadd>
 800ca1c:	0002      	movs	r2, r0
 800ca1e:	000b      	movs	r3, r1
 800ca20:	0020      	movs	r0, r4
 800ca22:	0029      	movs	r1, r5
 800ca24:	f7f5 fce8 	bl	80023f8 <__aeabi_dsub>
 800ca28:	0032      	movs	r2, r6
 800ca2a:	003b      	movs	r3, r7
 800ca2c:	f7f5 fce4 	bl	80023f8 <__aeabi_dsub>
 800ca30:	0002      	movs	r2, r0
 800ca32:	000b      	movs	r3, r1
 800ca34:	2000      	movs	r0, #0
 800ca36:	4930      	ldr	r1, [pc, #192]	; (800caf8 <__ieee754_pow+0x9ec>)
 800ca38:	f7f5 fcde 	bl	80023f8 <__aeabi_dsub>
 800ca3c:	9b02      	ldr	r3, [sp, #8]
 800ca3e:	051b      	lsls	r3, r3, #20
 800ca40:	185b      	adds	r3, r3, r1
 800ca42:	151a      	asrs	r2, r3, #20
 800ca44:	2a00      	cmp	r2, #0
 800ca46:	dc26      	bgt.n	800ca96 <__ieee754_pow+0x98a>
 800ca48:	9a02      	ldr	r2, [sp, #8]
 800ca4a:	f001 f901 	bl	800dc50 <scalbn>
 800ca4e:	9a00      	ldr	r2, [sp, #0]
 800ca50:	9b01      	ldr	r3, [sp, #4]
 800ca52:	f7ff fc2d 	bl	800c2b0 <__ieee754_pow+0x1a4>
 800ca56:	4a29      	ldr	r2, [pc, #164]	; (800cafc <__ieee754_pow+0x9f0>)
 800ca58:	004b      	lsls	r3, r1, #1
 800ca5a:	085b      	lsrs	r3, r3, #1
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	dc00      	bgt.n	800ca62 <__ieee754_pow+0x956>
 800ca60:	e717      	b.n	800c892 <__ieee754_pow+0x786>
 800ca62:	4b27      	ldr	r3, [pc, #156]	; (800cb00 <__ieee754_pow+0x9f4>)
 800ca64:	18cb      	adds	r3, r1, r3
 800ca66:	4303      	orrs	r3, r0
 800ca68:	d009      	beq.n	800ca7e <__ieee754_pow+0x972>
 800ca6a:	9800      	ldr	r0, [sp, #0]
 800ca6c:	9901      	ldr	r1, [sp, #4]
 800ca6e:	4a25      	ldr	r2, [pc, #148]	; (800cb04 <__ieee754_pow+0x9f8>)
 800ca70:	4b25      	ldr	r3, [pc, #148]	; (800cb08 <__ieee754_pow+0x9fc>)
 800ca72:	f7f5 fa55 	bl	8001f20 <__aeabi_dmul>
 800ca76:	4a23      	ldr	r2, [pc, #140]	; (800cb04 <__ieee754_pow+0x9f8>)
 800ca78:	4b23      	ldr	r3, [pc, #140]	; (800cb08 <__ieee754_pow+0x9fc>)
 800ca7a:	f7ff fc19 	bl	800c2b0 <__ieee754_pow+0x1a4>
 800ca7e:	0032      	movs	r2, r6
 800ca80:	003b      	movs	r3, r7
 800ca82:	f7f5 fcb9 	bl	80023f8 <__aeabi_dsub>
 800ca86:	9a04      	ldr	r2, [sp, #16]
 800ca88:	9b05      	ldr	r3, [sp, #20]
 800ca8a:	f7f3 fcff 	bl	800048c <__aeabi_dcmpge>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	d100      	bne.n	800ca94 <__ieee754_pow+0x988>
 800ca92:	e6fe      	b.n	800c892 <__ieee754_pow+0x786>
 800ca94:	e7e9      	b.n	800ca6a <__ieee754_pow+0x95e>
 800ca96:	0019      	movs	r1, r3
 800ca98:	e7d9      	b.n	800ca4e <__ieee754_pow+0x942>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	4c16      	ldr	r4, [pc, #88]	; (800caf8 <__ieee754_pow+0x9ec>)
 800ca9e:	f7ff fbec 	bl	800c27a <__ieee754_pow+0x16e>
 800caa2:	46c0      	nop			; (mov r8, r8)
 800caa4:	652b82fe 	.word	0x652b82fe
 800caa8:	3c971547 	.word	0x3c971547
 800caac:	3fe00000 	.word	0x3fe00000
 800cab0:	fffffc02 	.word	0xfffffc02
 800cab4:	fffffc01 	.word	0xfffffc01
 800cab8:	000fffff 	.word	0x000fffff
 800cabc:	3fe62e43 	.word	0x3fe62e43
 800cac0:	fefa39ef 	.word	0xfefa39ef
 800cac4:	3fe62e42 	.word	0x3fe62e42
 800cac8:	0ca86c39 	.word	0x0ca86c39
 800cacc:	be205c61 	.word	0xbe205c61
 800cad0:	72bea4d0 	.word	0x72bea4d0
 800cad4:	3e663769 	.word	0x3e663769
 800cad8:	c5d26bf1 	.word	0xc5d26bf1
 800cadc:	3ebbbd41 	.word	0x3ebbbd41
 800cae0:	af25de2c 	.word	0xaf25de2c
 800cae4:	3f11566a 	.word	0x3f11566a
 800cae8:	16bebd93 	.word	0x16bebd93
 800caec:	3f66c16c 	.word	0x3f66c16c
 800caf0:	5555553e 	.word	0x5555553e
 800caf4:	3fc55555 	.word	0x3fc55555
 800caf8:	3ff00000 	.word	0x3ff00000
 800cafc:	4090cbff 	.word	0x4090cbff
 800cb00:	3f6f3400 	.word	0x3f6f3400
 800cb04:	c2f8f359 	.word	0xc2f8f359
 800cb08:	01a56e1f 	.word	0x01a56e1f

0800cb0c <__ieee754_rem_pio2>:
 800cb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0e:	004b      	lsls	r3, r1, #1
 800cb10:	b091      	sub	sp, #68	; 0x44
 800cb12:	085b      	lsrs	r3, r3, #1
 800cb14:	9302      	str	r3, [sp, #8]
 800cb16:	0017      	movs	r7, r2
 800cb18:	4bb6      	ldr	r3, [pc, #728]	; (800cdf4 <__ieee754_rem_pio2+0x2e8>)
 800cb1a:	9a02      	ldr	r2, [sp, #8]
 800cb1c:	0004      	movs	r4, r0
 800cb1e:	000d      	movs	r5, r1
 800cb20:	9109      	str	r1, [sp, #36]	; 0x24
 800cb22:	429a      	cmp	r2, r3
 800cb24:	dc09      	bgt.n	800cb3a <__ieee754_rem_pio2+0x2e>
 800cb26:	0002      	movs	r2, r0
 800cb28:	000b      	movs	r3, r1
 800cb2a:	603a      	str	r2, [r7, #0]
 800cb2c:	607b      	str	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	2300      	movs	r3, #0
 800cb32:	60ba      	str	r2, [r7, #8]
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	2600      	movs	r6, #0
 800cb38:	e025      	b.n	800cb86 <__ieee754_rem_pio2+0x7a>
 800cb3a:	4baf      	ldr	r3, [pc, #700]	; (800cdf8 <__ieee754_rem_pio2+0x2ec>)
 800cb3c:	9a02      	ldr	r2, [sp, #8]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	dd00      	ble.n	800cb44 <__ieee754_rem_pio2+0x38>
 800cb42:	e06e      	b.n	800cc22 <__ieee754_rem_pio2+0x116>
 800cb44:	4ead      	ldr	r6, [pc, #692]	; (800cdfc <__ieee754_rem_pio2+0x2f0>)
 800cb46:	4aae      	ldr	r2, [pc, #696]	; (800ce00 <__ieee754_rem_pio2+0x2f4>)
 800cb48:	2d00      	cmp	r5, #0
 800cb4a:	dd35      	ble.n	800cbb8 <__ieee754_rem_pio2+0xac>
 800cb4c:	0020      	movs	r0, r4
 800cb4e:	0029      	movs	r1, r5
 800cb50:	4baa      	ldr	r3, [pc, #680]	; (800cdfc <__ieee754_rem_pio2+0x2f0>)
 800cb52:	f7f5 fc51 	bl	80023f8 <__aeabi_dsub>
 800cb56:	9b02      	ldr	r3, [sp, #8]
 800cb58:	0004      	movs	r4, r0
 800cb5a:	000d      	movs	r5, r1
 800cb5c:	42b3      	cmp	r3, r6
 800cb5e:	d015      	beq.n	800cb8c <__ieee754_rem_pio2+0x80>
 800cb60:	4aa8      	ldr	r2, [pc, #672]	; (800ce04 <__ieee754_rem_pio2+0x2f8>)
 800cb62:	4ba9      	ldr	r3, [pc, #676]	; (800ce08 <__ieee754_rem_pio2+0x2fc>)
 800cb64:	f7f5 fc48 	bl	80023f8 <__aeabi_dsub>
 800cb68:	0002      	movs	r2, r0
 800cb6a:	000b      	movs	r3, r1
 800cb6c:	0020      	movs	r0, r4
 800cb6e:	603a      	str	r2, [r7, #0]
 800cb70:	607b      	str	r3, [r7, #4]
 800cb72:	0029      	movs	r1, r5
 800cb74:	f7f5 fc40 	bl	80023f8 <__aeabi_dsub>
 800cb78:	4aa2      	ldr	r2, [pc, #648]	; (800ce04 <__ieee754_rem_pio2+0x2f8>)
 800cb7a:	4ba3      	ldr	r3, [pc, #652]	; (800ce08 <__ieee754_rem_pio2+0x2fc>)
 800cb7c:	f7f5 fc3c 	bl	80023f8 <__aeabi_dsub>
 800cb80:	2601      	movs	r6, #1
 800cb82:	60b8      	str	r0, [r7, #8]
 800cb84:	60f9      	str	r1, [r7, #12]
 800cb86:	0030      	movs	r0, r6
 800cb88:	b011      	add	sp, #68	; 0x44
 800cb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb8c:	22d3      	movs	r2, #211	; 0xd3
 800cb8e:	4b9e      	ldr	r3, [pc, #632]	; (800ce08 <__ieee754_rem_pio2+0x2fc>)
 800cb90:	0552      	lsls	r2, r2, #21
 800cb92:	f7f5 fc31 	bl	80023f8 <__aeabi_dsub>
 800cb96:	4a9d      	ldr	r2, [pc, #628]	; (800ce0c <__ieee754_rem_pio2+0x300>)
 800cb98:	4b9d      	ldr	r3, [pc, #628]	; (800ce10 <__ieee754_rem_pio2+0x304>)
 800cb9a:	0004      	movs	r4, r0
 800cb9c:	000d      	movs	r5, r1
 800cb9e:	f7f5 fc2b 	bl	80023f8 <__aeabi_dsub>
 800cba2:	0002      	movs	r2, r0
 800cba4:	000b      	movs	r3, r1
 800cba6:	0020      	movs	r0, r4
 800cba8:	603a      	str	r2, [r7, #0]
 800cbaa:	607b      	str	r3, [r7, #4]
 800cbac:	0029      	movs	r1, r5
 800cbae:	f7f5 fc23 	bl	80023f8 <__aeabi_dsub>
 800cbb2:	4a96      	ldr	r2, [pc, #600]	; (800ce0c <__ieee754_rem_pio2+0x300>)
 800cbb4:	4b96      	ldr	r3, [pc, #600]	; (800ce10 <__ieee754_rem_pio2+0x304>)
 800cbb6:	e7e1      	b.n	800cb7c <__ieee754_rem_pio2+0x70>
 800cbb8:	0020      	movs	r0, r4
 800cbba:	0029      	movs	r1, r5
 800cbbc:	4b8f      	ldr	r3, [pc, #572]	; (800cdfc <__ieee754_rem_pio2+0x2f0>)
 800cbbe:	f7f4 fa3f 	bl	8001040 <__aeabi_dadd>
 800cbc2:	9b02      	ldr	r3, [sp, #8]
 800cbc4:	0004      	movs	r4, r0
 800cbc6:	000d      	movs	r5, r1
 800cbc8:	42b3      	cmp	r3, r6
 800cbca:	d014      	beq.n	800cbf6 <__ieee754_rem_pio2+0xea>
 800cbcc:	4a8d      	ldr	r2, [pc, #564]	; (800ce04 <__ieee754_rem_pio2+0x2f8>)
 800cbce:	4b8e      	ldr	r3, [pc, #568]	; (800ce08 <__ieee754_rem_pio2+0x2fc>)
 800cbd0:	f7f4 fa36 	bl	8001040 <__aeabi_dadd>
 800cbd4:	0002      	movs	r2, r0
 800cbd6:	000b      	movs	r3, r1
 800cbd8:	0020      	movs	r0, r4
 800cbda:	603a      	str	r2, [r7, #0]
 800cbdc:	607b      	str	r3, [r7, #4]
 800cbde:	0029      	movs	r1, r5
 800cbe0:	f7f5 fc0a 	bl	80023f8 <__aeabi_dsub>
 800cbe4:	4a87      	ldr	r2, [pc, #540]	; (800ce04 <__ieee754_rem_pio2+0x2f8>)
 800cbe6:	4b88      	ldr	r3, [pc, #544]	; (800ce08 <__ieee754_rem_pio2+0x2fc>)
 800cbe8:	f7f4 fa2a 	bl	8001040 <__aeabi_dadd>
 800cbec:	2601      	movs	r6, #1
 800cbee:	60b8      	str	r0, [r7, #8]
 800cbf0:	60f9      	str	r1, [r7, #12]
 800cbf2:	4276      	negs	r6, r6
 800cbf4:	e7c7      	b.n	800cb86 <__ieee754_rem_pio2+0x7a>
 800cbf6:	22d3      	movs	r2, #211	; 0xd3
 800cbf8:	4b83      	ldr	r3, [pc, #524]	; (800ce08 <__ieee754_rem_pio2+0x2fc>)
 800cbfa:	0552      	lsls	r2, r2, #21
 800cbfc:	f7f4 fa20 	bl	8001040 <__aeabi_dadd>
 800cc00:	4a82      	ldr	r2, [pc, #520]	; (800ce0c <__ieee754_rem_pio2+0x300>)
 800cc02:	4b83      	ldr	r3, [pc, #524]	; (800ce10 <__ieee754_rem_pio2+0x304>)
 800cc04:	0004      	movs	r4, r0
 800cc06:	000d      	movs	r5, r1
 800cc08:	f7f4 fa1a 	bl	8001040 <__aeabi_dadd>
 800cc0c:	0002      	movs	r2, r0
 800cc0e:	000b      	movs	r3, r1
 800cc10:	0020      	movs	r0, r4
 800cc12:	603a      	str	r2, [r7, #0]
 800cc14:	607b      	str	r3, [r7, #4]
 800cc16:	0029      	movs	r1, r5
 800cc18:	f7f5 fbee 	bl	80023f8 <__aeabi_dsub>
 800cc1c:	4a7b      	ldr	r2, [pc, #492]	; (800ce0c <__ieee754_rem_pio2+0x300>)
 800cc1e:	4b7c      	ldr	r3, [pc, #496]	; (800ce10 <__ieee754_rem_pio2+0x304>)
 800cc20:	e7e2      	b.n	800cbe8 <__ieee754_rem_pio2+0xdc>
 800cc22:	4b7c      	ldr	r3, [pc, #496]	; (800ce14 <__ieee754_rem_pio2+0x308>)
 800cc24:	9a02      	ldr	r2, [sp, #8]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	dd00      	ble.n	800cc2c <__ieee754_rem_pio2+0x120>
 800cc2a:	e0d3      	b.n	800cdd4 <__ieee754_rem_pio2+0x2c8>
 800cc2c:	0020      	movs	r0, r4
 800cc2e:	0029      	movs	r1, r5
 800cc30:	f7ff f93c 	bl	800beac <fabs>
 800cc34:	4a78      	ldr	r2, [pc, #480]	; (800ce18 <__ieee754_rem_pio2+0x30c>)
 800cc36:	4b79      	ldr	r3, [pc, #484]	; (800ce1c <__ieee754_rem_pio2+0x310>)
 800cc38:	0004      	movs	r4, r0
 800cc3a:	000d      	movs	r5, r1
 800cc3c:	f7f5 f970 	bl	8001f20 <__aeabi_dmul>
 800cc40:	2200      	movs	r2, #0
 800cc42:	4b77      	ldr	r3, [pc, #476]	; (800ce20 <__ieee754_rem_pio2+0x314>)
 800cc44:	f7f4 f9fc 	bl	8001040 <__aeabi_dadd>
 800cc48:	f7f5 ff86 	bl	8002b58 <__aeabi_d2iz>
 800cc4c:	0006      	movs	r6, r0
 800cc4e:	f7f5 ffb9 	bl	8002bc4 <__aeabi_i2d>
 800cc52:	4a6b      	ldr	r2, [pc, #428]	; (800ce00 <__ieee754_rem_pio2+0x2f4>)
 800cc54:	4b69      	ldr	r3, [pc, #420]	; (800cdfc <__ieee754_rem_pio2+0x2f0>)
 800cc56:	9006      	str	r0, [sp, #24]
 800cc58:	9107      	str	r1, [sp, #28]
 800cc5a:	f7f5 f961 	bl	8001f20 <__aeabi_dmul>
 800cc5e:	0002      	movs	r2, r0
 800cc60:	000b      	movs	r3, r1
 800cc62:	0020      	movs	r0, r4
 800cc64:	0029      	movs	r1, r5
 800cc66:	f7f5 fbc7 	bl	80023f8 <__aeabi_dsub>
 800cc6a:	4a66      	ldr	r2, [pc, #408]	; (800ce04 <__ieee754_rem_pio2+0x2f8>)
 800cc6c:	9004      	str	r0, [sp, #16]
 800cc6e:	9105      	str	r1, [sp, #20]
 800cc70:	9806      	ldr	r0, [sp, #24]
 800cc72:	9907      	ldr	r1, [sp, #28]
 800cc74:	4b64      	ldr	r3, [pc, #400]	; (800ce08 <__ieee754_rem_pio2+0x2fc>)
 800cc76:	f7f5 f953 	bl	8001f20 <__aeabi_dmul>
 800cc7a:	0004      	movs	r4, r0
 800cc7c:	000d      	movs	r5, r1
 800cc7e:	2e1f      	cmp	r6, #31
 800cc80:	dc0f      	bgt.n	800cca2 <__ieee754_rem_pio2+0x196>
 800cc82:	4a68      	ldr	r2, [pc, #416]	; (800ce24 <__ieee754_rem_pio2+0x318>)
 800cc84:	1e73      	subs	r3, r6, #1
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	589b      	ldr	r3, [r3, r2]
 800cc8a:	9a02      	ldr	r2, [sp, #8]
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d008      	beq.n	800cca2 <__ieee754_rem_pio2+0x196>
 800cc90:	9804      	ldr	r0, [sp, #16]
 800cc92:	9905      	ldr	r1, [sp, #20]
 800cc94:	0022      	movs	r2, r4
 800cc96:	002b      	movs	r3, r5
 800cc98:	f7f5 fbae 	bl	80023f8 <__aeabi_dsub>
 800cc9c:	6038      	str	r0, [r7, #0]
 800cc9e:	6079      	str	r1, [r7, #4]
 800cca0:	e012      	b.n	800ccc8 <__ieee754_rem_pio2+0x1bc>
 800cca2:	0022      	movs	r2, r4
 800cca4:	9804      	ldr	r0, [sp, #16]
 800cca6:	9905      	ldr	r1, [sp, #20]
 800cca8:	002b      	movs	r3, r5
 800ccaa:	f7f5 fba5 	bl	80023f8 <__aeabi_dsub>
 800ccae:	9b02      	ldr	r3, [sp, #8]
 800ccb0:	151b      	asrs	r3, r3, #20
 800ccb2:	9308      	str	r3, [sp, #32]
 800ccb4:	9a08      	ldr	r2, [sp, #32]
 800ccb6:	004b      	lsls	r3, r1, #1
 800ccb8:	0d5b      	lsrs	r3, r3, #21
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	2b10      	cmp	r3, #16
 800ccbe:	dc21      	bgt.n	800cd04 <__ieee754_rem_pio2+0x1f8>
 800ccc0:	0002      	movs	r2, r0
 800ccc2:	000b      	movs	r3, r1
 800ccc4:	603a      	str	r2, [r7, #0]
 800ccc6:	607b      	str	r3, [r7, #4]
 800ccc8:	9804      	ldr	r0, [sp, #16]
 800ccca:	9905      	ldr	r1, [sp, #20]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	9302      	str	r3, [sp, #8]
 800ccd2:	9b02      	ldr	r3, [sp, #8]
 800ccd4:	f7f5 fb90 	bl	80023f8 <__aeabi_dsub>
 800ccd8:	0022      	movs	r2, r4
 800ccda:	002b      	movs	r3, r5
 800ccdc:	f7f5 fb8c 	bl	80023f8 <__aeabi_dsub>
 800cce0:	000b      	movs	r3, r1
 800cce2:	0002      	movs	r2, r0
 800cce4:	60ba      	str	r2, [r7, #8]
 800cce6:	60fb      	str	r3, [r7, #12]
 800cce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	db00      	blt.n	800ccf0 <__ieee754_rem_pio2+0x1e4>
 800ccee:	e74a      	b.n	800cb86 <__ieee754_rem_pio2+0x7a>
 800ccf0:	2280      	movs	r2, #128	; 0x80
 800ccf2:	0612      	lsls	r2, r2, #24
 800ccf4:	4694      	mov	ip, r2
 800ccf6:	9b02      	ldr	r3, [sp, #8]
 800ccf8:	1889      	adds	r1, r1, r2
 800ccfa:	4463      	add	r3, ip
 800ccfc:	607b      	str	r3, [r7, #4]
 800ccfe:	60b8      	str	r0, [r7, #8]
 800cd00:	60f9      	str	r1, [r7, #12]
 800cd02:	e776      	b.n	800cbf2 <__ieee754_rem_pio2+0xe6>
 800cd04:	22d3      	movs	r2, #211	; 0xd3
 800cd06:	9806      	ldr	r0, [sp, #24]
 800cd08:	9907      	ldr	r1, [sp, #28]
 800cd0a:	4b3f      	ldr	r3, [pc, #252]	; (800ce08 <__ieee754_rem_pio2+0x2fc>)
 800cd0c:	0552      	lsls	r2, r2, #21
 800cd0e:	f7f5 f907 	bl	8001f20 <__aeabi_dmul>
 800cd12:	0004      	movs	r4, r0
 800cd14:	000d      	movs	r5, r1
 800cd16:	0002      	movs	r2, r0
 800cd18:	000b      	movs	r3, r1
 800cd1a:	9804      	ldr	r0, [sp, #16]
 800cd1c:	9905      	ldr	r1, [sp, #20]
 800cd1e:	f7f5 fb6b 	bl	80023f8 <__aeabi_dsub>
 800cd22:	0002      	movs	r2, r0
 800cd24:	000b      	movs	r3, r1
 800cd26:	9002      	str	r0, [sp, #8]
 800cd28:	9103      	str	r1, [sp, #12]
 800cd2a:	9804      	ldr	r0, [sp, #16]
 800cd2c:	9905      	ldr	r1, [sp, #20]
 800cd2e:	f7f5 fb63 	bl	80023f8 <__aeabi_dsub>
 800cd32:	0022      	movs	r2, r4
 800cd34:	002b      	movs	r3, r5
 800cd36:	f7f5 fb5f 	bl	80023f8 <__aeabi_dsub>
 800cd3a:	0004      	movs	r4, r0
 800cd3c:	000d      	movs	r5, r1
 800cd3e:	9806      	ldr	r0, [sp, #24]
 800cd40:	9907      	ldr	r1, [sp, #28]
 800cd42:	4a32      	ldr	r2, [pc, #200]	; (800ce0c <__ieee754_rem_pio2+0x300>)
 800cd44:	4b32      	ldr	r3, [pc, #200]	; (800ce10 <__ieee754_rem_pio2+0x304>)
 800cd46:	f7f5 f8eb 	bl	8001f20 <__aeabi_dmul>
 800cd4a:	0022      	movs	r2, r4
 800cd4c:	002b      	movs	r3, r5
 800cd4e:	f7f5 fb53 	bl	80023f8 <__aeabi_dsub>
 800cd52:	0002      	movs	r2, r0
 800cd54:	000b      	movs	r3, r1
 800cd56:	0004      	movs	r4, r0
 800cd58:	000d      	movs	r5, r1
 800cd5a:	9802      	ldr	r0, [sp, #8]
 800cd5c:	9903      	ldr	r1, [sp, #12]
 800cd5e:	f7f5 fb4b 	bl	80023f8 <__aeabi_dsub>
 800cd62:	9a08      	ldr	r2, [sp, #32]
 800cd64:	004b      	lsls	r3, r1, #1
 800cd66:	0d5b      	lsrs	r3, r3, #21
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	2b31      	cmp	r3, #49	; 0x31
 800cd6c:	dc08      	bgt.n	800cd80 <__ieee754_rem_pio2+0x274>
 800cd6e:	0002      	movs	r2, r0
 800cd70:	000b      	movs	r3, r1
 800cd72:	603a      	str	r2, [r7, #0]
 800cd74:	607b      	str	r3, [r7, #4]
 800cd76:	9a02      	ldr	r2, [sp, #8]
 800cd78:	9b03      	ldr	r3, [sp, #12]
 800cd7a:	9204      	str	r2, [sp, #16]
 800cd7c:	9305      	str	r3, [sp, #20]
 800cd7e:	e7a3      	b.n	800ccc8 <__ieee754_rem_pio2+0x1bc>
 800cd80:	22b8      	movs	r2, #184	; 0xb8
 800cd82:	9806      	ldr	r0, [sp, #24]
 800cd84:	9907      	ldr	r1, [sp, #28]
 800cd86:	4b22      	ldr	r3, [pc, #136]	; (800ce10 <__ieee754_rem_pio2+0x304>)
 800cd88:	0592      	lsls	r2, r2, #22
 800cd8a:	f7f5 f8c9 	bl	8001f20 <__aeabi_dmul>
 800cd8e:	0004      	movs	r4, r0
 800cd90:	000d      	movs	r5, r1
 800cd92:	0002      	movs	r2, r0
 800cd94:	000b      	movs	r3, r1
 800cd96:	9802      	ldr	r0, [sp, #8]
 800cd98:	9903      	ldr	r1, [sp, #12]
 800cd9a:	f7f5 fb2d 	bl	80023f8 <__aeabi_dsub>
 800cd9e:	0002      	movs	r2, r0
 800cda0:	000b      	movs	r3, r1
 800cda2:	9004      	str	r0, [sp, #16]
 800cda4:	9105      	str	r1, [sp, #20]
 800cda6:	9802      	ldr	r0, [sp, #8]
 800cda8:	9903      	ldr	r1, [sp, #12]
 800cdaa:	f7f5 fb25 	bl	80023f8 <__aeabi_dsub>
 800cdae:	0022      	movs	r2, r4
 800cdb0:	002b      	movs	r3, r5
 800cdb2:	f7f5 fb21 	bl	80023f8 <__aeabi_dsub>
 800cdb6:	0004      	movs	r4, r0
 800cdb8:	000d      	movs	r5, r1
 800cdba:	9806      	ldr	r0, [sp, #24]
 800cdbc:	9907      	ldr	r1, [sp, #28]
 800cdbe:	4a1a      	ldr	r2, [pc, #104]	; (800ce28 <__ieee754_rem_pio2+0x31c>)
 800cdc0:	4b1a      	ldr	r3, [pc, #104]	; (800ce2c <__ieee754_rem_pio2+0x320>)
 800cdc2:	f7f5 f8ad 	bl	8001f20 <__aeabi_dmul>
 800cdc6:	0022      	movs	r2, r4
 800cdc8:	002b      	movs	r3, r5
 800cdca:	f7f5 fb15 	bl	80023f8 <__aeabi_dsub>
 800cdce:	0004      	movs	r4, r0
 800cdd0:	000d      	movs	r5, r1
 800cdd2:	e75d      	b.n	800cc90 <__ieee754_rem_pio2+0x184>
 800cdd4:	4b16      	ldr	r3, [pc, #88]	; (800ce30 <__ieee754_rem_pio2+0x324>)
 800cdd6:	9a02      	ldr	r2, [sp, #8]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	dd2b      	ble.n	800ce34 <__ieee754_rem_pio2+0x328>
 800cddc:	0022      	movs	r2, r4
 800cdde:	002b      	movs	r3, r5
 800cde0:	0020      	movs	r0, r4
 800cde2:	0029      	movs	r1, r5
 800cde4:	f7f5 fb08 	bl	80023f8 <__aeabi_dsub>
 800cde8:	60b8      	str	r0, [r7, #8]
 800cdea:	60f9      	str	r1, [r7, #12]
 800cdec:	6038      	str	r0, [r7, #0]
 800cdee:	6079      	str	r1, [r7, #4]
 800cdf0:	e6a1      	b.n	800cb36 <__ieee754_rem_pio2+0x2a>
 800cdf2:	46c0      	nop			; (mov r8, r8)
 800cdf4:	3fe921fb 	.word	0x3fe921fb
 800cdf8:	4002d97b 	.word	0x4002d97b
 800cdfc:	3ff921fb 	.word	0x3ff921fb
 800ce00:	54400000 	.word	0x54400000
 800ce04:	1a626331 	.word	0x1a626331
 800ce08:	3dd0b461 	.word	0x3dd0b461
 800ce0c:	2e037073 	.word	0x2e037073
 800ce10:	3ba3198a 	.word	0x3ba3198a
 800ce14:	413921fb 	.word	0x413921fb
 800ce18:	6dc9c883 	.word	0x6dc9c883
 800ce1c:	3fe45f30 	.word	0x3fe45f30
 800ce20:	3fe00000 	.word	0x3fe00000
 800ce24:	0800e5f8 	.word	0x0800e5f8
 800ce28:	252049c1 	.word	0x252049c1
 800ce2c:	397b839a 	.word	0x397b839a
 800ce30:	7fefffff 	.word	0x7fefffff
 800ce34:	9a02      	ldr	r2, [sp, #8]
 800ce36:	0020      	movs	r0, r4
 800ce38:	1516      	asrs	r6, r2, #20
 800ce3a:	4a27      	ldr	r2, [pc, #156]	; (800ced8 <__ieee754_rem_pio2+0x3cc>)
 800ce3c:	18b6      	adds	r6, r6, r2
 800ce3e:	9a02      	ldr	r2, [sp, #8]
 800ce40:	0533      	lsls	r3, r6, #20
 800ce42:	1ad5      	subs	r5, r2, r3
 800ce44:	0029      	movs	r1, r5
 800ce46:	f7f5 fe87 	bl	8002b58 <__aeabi_d2iz>
 800ce4a:	f7f5 febb 	bl	8002bc4 <__aeabi_i2d>
 800ce4e:	0002      	movs	r2, r0
 800ce50:	000b      	movs	r3, r1
 800ce52:	0020      	movs	r0, r4
 800ce54:	0029      	movs	r1, r5
 800ce56:	920a      	str	r2, [sp, #40]	; 0x28
 800ce58:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce5a:	f7f5 facd 	bl	80023f8 <__aeabi_dsub>
 800ce5e:	2200      	movs	r2, #0
 800ce60:	4b1e      	ldr	r3, [pc, #120]	; (800cedc <__ieee754_rem_pio2+0x3d0>)
 800ce62:	f7f5 f85d 	bl	8001f20 <__aeabi_dmul>
 800ce66:	000d      	movs	r5, r1
 800ce68:	0004      	movs	r4, r0
 800ce6a:	f7f5 fe75 	bl	8002b58 <__aeabi_d2iz>
 800ce6e:	f7f5 fea9 	bl	8002bc4 <__aeabi_i2d>
 800ce72:	0002      	movs	r2, r0
 800ce74:	000b      	movs	r3, r1
 800ce76:	0020      	movs	r0, r4
 800ce78:	0029      	movs	r1, r5
 800ce7a:	920c      	str	r2, [sp, #48]	; 0x30
 800ce7c:	930d      	str	r3, [sp, #52]	; 0x34
 800ce7e:	f7f5 fabb 	bl	80023f8 <__aeabi_dsub>
 800ce82:	2200      	movs	r2, #0
 800ce84:	4b15      	ldr	r3, [pc, #84]	; (800cedc <__ieee754_rem_pio2+0x3d0>)
 800ce86:	f7f5 f84b 	bl	8001f20 <__aeabi_dmul>
 800ce8a:	2503      	movs	r5, #3
 800ce8c:	900e      	str	r0, [sp, #56]	; 0x38
 800ce8e:	910f      	str	r1, [sp, #60]	; 0x3c
 800ce90:	ac0a      	add	r4, sp, #40	; 0x28
 800ce92:	2200      	movs	r2, #0
 800ce94:	6920      	ldr	r0, [r4, #16]
 800ce96:	6961      	ldr	r1, [r4, #20]
 800ce98:	2300      	movs	r3, #0
 800ce9a:	9502      	str	r5, [sp, #8]
 800ce9c:	3c08      	subs	r4, #8
 800ce9e:	3d01      	subs	r5, #1
 800cea0:	f7f3 fad0 	bl	8000444 <__aeabi_dcmpeq>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d1f4      	bne.n	800ce92 <__ieee754_rem_pio2+0x386>
 800cea8:	4b0d      	ldr	r3, [pc, #52]	; (800cee0 <__ieee754_rem_pio2+0x3d4>)
 800ceaa:	0032      	movs	r2, r6
 800ceac:	9301      	str	r3, [sp, #4]
 800ceae:	2302      	movs	r3, #2
 800ceb0:	0039      	movs	r1, r7
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	a80a      	add	r0, sp, #40	; 0x28
 800ceb6:	9b02      	ldr	r3, [sp, #8]
 800ceb8:	f000 f988 	bl	800d1cc <__kernel_rem_pio2>
 800cebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cebe:	0006      	movs	r6, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	db00      	blt.n	800cec6 <__ieee754_rem_pio2+0x3ba>
 800cec4:	e65f      	b.n	800cb86 <__ieee754_rem_pio2+0x7a>
 800cec6:	2280      	movs	r2, #128	; 0x80
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	0612      	lsls	r2, r2, #24
 800cecc:	189b      	adds	r3, r3, r2
 800cece:	607b      	str	r3, [r7, #4]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	189b      	adds	r3, r3, r2
 800ced4:	60fb      	str	r3, [r7, #12]
 800ced6:	e68c      	b.n	800cbf2 <__ieee754_rem_pio2+0xe6>
 800ced8:	fffffbea 	.word	0xfffffbea
 800cedc:	41700000 	.word	0x41700000
 800cee0:	0800e678 	.word	0x0800e678

0800cee4 <__ieee754_sqrt>:
 800cee4:	4b56      	ldr	r3, [pc, #344]	; (800d040 <__ieee754_sqrt+0x15c>)
 800cee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cee8:	0002      	movs	r2, r0
 800ceea:	0005      	movs	r5, r0
 800ceec:	0018      	movs	r0, r3
 800ceee:	000c      	movs	r4, r1
 800cef0:	b085      	sub	sp, #20
 800cef2:	4008      	ands	r0, r1
 800cef4:	4298      	cmp	r0, r3
 800cef6:	d10f      	bne.n	800cf18 <__ieee754_sqrt+0x34>
 800cef8:	000b      	movs	r3, r1
 800cefa:	0028      	movs	r0, r5
 800cefc:	f7f5 f810 	bl	8001f20 <__aeabi_dmul>
 800cf00:	0002      	movs	r2, r0
 800cf02:	000b      	movs	r3, r1
 800cf04:	0028      	movs	r0, r5
 800cf06:	0021      	movs	r1, r4
 800cf08:	f7f4 f89a 	bl	8001040 <__aeabi_dadd>
 800cf0c:	0005      	movs	r5, r0
 800cf0e:	000c      	movs	r4, r1
 800cf10:	0028      	movs	r0, r5
 800cf12:	0021      	movs	r1, r4
 800cf14:	b005      	add	sp, #20
 800cf16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf18:	2900      	cmp	r1, #0
 800cf1a:	dc10      	bgt.n	800cf3e <__ieee754_sqrt+0x5a>
 800cf1c:	004b      	lsls	r3, r1, #1
 800cf1e:	085b      	lsrs	r3, r3, #1
 800cf20:	432b      	orrs	r3, r5
 800cf22:	d0f5      	beq.n	800cf10 <__ieee754_sqrt+0x2c>
 800cf24:	2000      	movs	r0, #0
 800cf26:	4281      	cmp	r1, r0
 800cf28:	d100      	bne.n	800cf2c <__ieee754_sqrt+0x48>
 800cf2a:	e080      	b.n	800d02e <__ieee754_sqrt+0x14a>
 800cf2c:	000b      	movs	r3, r1
 800cf2e:	0028      	movs	r0, r5
 800cf30:	f7f5 fa62 	bl	80023f8 <__aeabi_dsub>
 800cf34:	0002      	movs	r2, r0
 800cf36:	000b      	movs	r3, r1
 800cf38:	f7f4 fbec 	bl	8001714 <__aeabi_ddiv>
 800cf3c:	e7e6      	b.n	800cf0c <__ieee754_sqrt+0x28>
 800cf3e:	1508      	asrs	r0, r1, #20
 800cf40:	d075      	beq.n	800d02e <__ieee754_sqrt+0x14a>
 800cf42:	4b40      	ldr	r3, [pc, #256]	; (800d044 <__ieee754_sqrt+0x160>)
 800cf44:	0309      	lsls	r1, r1, #12
 800cf46:	18c4      	adds	r4, r0, r3
 800cf48:	2380      	movs	r3, #128	; 0x80
 800cf4a:	0b09      	lsrs	r1, r1, #12
 800cf4c:	035b      	lsls	r3, r3, #13
 800cf4e:	4319      	orrs	r1, r3
 800cf50:	07c3      	lsls	r3, r0, #31
 800cf52:	d403      	bmi.n	800cf5c <__ieee754_sqrt+0x78>
 800cf54:	0fd3      	lsrs	r3, r2, #31
 800cf56:	0049      	lsls	r1, r1, #1
 800cf58:	18c9      	adds	r1, r1, r3
 800cf5a:	0052      	lsls	r2, r2, #1
 800cf5c:	1063      	asrs	r3, r4, #1
 800cf5e:	2400      	movs	r4, #0
 800cf60:	0049      	lsls	r1, r1, #1
 800cf62:	9303      	str	r3, [sp, #12]
 800cf64:	0fd3      	lsrs	r3, r2, #31
 800cf66:	18cb      	adds	r3, r1, r3
 800cf68:	2180      	movs	r1, #128	; 0x80
 800cf6a:	2516      	movs	r5, #22
 800cf6c:	0020      	movs	r0, r4
 800cf6e:	0052      	lsls	r2, r2, #1
 800cf70:	0389      	lsls	r1, r1, #14
 800cf72:	1846      	adds	r6, r0, r1
 800cf74:	429e      	cmp	r6, r3
 800cf76:	dc02      	bgt.n	800cf7e <__ieee754_sqrt+0x9a>
 800cf78:	1870      	adds	r0, r6, r1
 800cf7a:	1b9b      	subs	r3, r3, r6
 800cf7c:	1864      	adds	r4, r4, r1
 800cf7e:	0fd6      	lsrs	r6, r2, #31
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	3d01      	subs	r5, #1
 800cf84:	18f3      	adds	r3, r6, r3
 800cf86:	0052      	lsls	r2, r2, #1
 800cf88:	0849      	lsrs	r1, r1, #1
 800cf8a:	2d00      	cmp	r5, #0
 800cf8c:	d1f1      	bne.n	800cf72 <__ieee754_sqrt+0x8e>
 800cf8e:	2620      	movs	r6, #32
 800cf90:	2780      	movs	r7, #128	; 0x80
 800cf92:	0029      	movs	r1, r5
 800cf94:	9601      	str	r6, [sp, #4]
 800cf96:	063f      	lsls	r7, r7, #24
 800cf98:	197e      	adds	r6, r7, r5
 800cf9a:	46b4      	mov	ip, r6
 800cf9c:	4283      	cmp	r3, r0
 800cf9e:	dc02      	bgt.n	800cfa6 <__ieee754_sqrt+0xc2>
 800cfa0:	d114      	bne.n	800cfcc <__ieee754_sqrt+0xe8>
 800cfa2:	4296      	cmp	r6, r2
 800cfa4:	d812      	bhi.n	800cfcc <__ieee754_sqrt+0xe8>
 800cfa6:	4665      	mov	r5, ip
 800cfa8:	4666      	mov	r6, ip
 800cfaa:	19ed      	adds	r5, r5, r7
 800cfac:	9002      	str	r0, [sp, #8]
 800cfae:	2e00      	cmp	r6, #0
 800cfb0:	da03      	bge.n	800cfba <__ieee754_sqrt+0xd6>
 800cfb2:	43ee      	mvns	r6, r5
 800cfb4:	0ff6      	lsrs	r6, r6, #31
 800cfb6:	1986      	adds	r6, r0, r6
 800cfb8:	9602      	str	r6, [sp, #8]
 800cfba:	1a1b      	subs	r3, r3, r0
 800cfbc:	4562      	cmp	r2, ip
 800cfbe:	4180      	sbcs	r0, r0
 800cfc0:	4240      	negs	r0, r0
 800cfc2:	1a1b      	subs	r3, r3, r0
 800cfc4:	4660      	mov	r0, ip
 800cfc6:	1a12      	subs	r2, r2, r0
 800cfc8:	9802      	ldr	r0, [sp, #8]
 800cfca:	19c9      	adds	r1, r1, r7
 800cfcc:	0fd6      	lsrs	r6, r2, #31
 800cfce:	005b      	lsls	r3, r3, #1
 800cfd0:	18f3      	adds	r3, r6, r3
 800cfd2:	9e01      	ldr	r6, [sp, #4]
 800cfd4:	0052      	lsls	r2, r2, #1
 800cfd6:	3e01      	subs	r6, #1
 800cfd8:	087f      	lsrs	r7, r7, #1
 800cfda:	9601      	str	r6, [sp, #4]
 800cfdc:	2e00      	cmp	r6, #0
 800cfde:	d1db      	bne.n	800cf98 <__ieee754_sqrt+0xb4>
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	d003      	beq.n	800cfec <__ieee754_sqrt+0x108>
 800cfe4:	1c4b      	adds	r3, r1, #1
 800cfe6:	d127      	bne.n	800d038 <__ieee754_sqrt+0x154>
 800cfe8:	0031      	movs	r1, r6
 800cfea:	3401      	adds	r4, #1
 800cfec:	4b16      	ldr	r3, [pc, #88]	; (800d048 <__ieee754_sqrt+0x164>)
 800cfee:	1060      	asrs	r0, r4, #1
 800cff0:	18c0      	adds	r0, r0, r3
 800cff2:	0849      	lsrs	r1, r1, #1
 800cff4:	07e3      	lsls	r3, r4, #31
 800cff6:	d502      	bpl.n	800cffe <__ieee754_sqrt+0x11a>
 800cff8:	2380      	movs	r3, #128	; 0x80
 800cffa:	061b      	lsls	r3, r3, #24
 800cffc:	4319      	orrs	r1, r3
 800cffe:	9b03      	ldr	r3, [sp, #12]
 800d000:	000d      	movs	r5, r1
 800d002:	051c      	lsls	r4, r3, #20
 800d004:	1823      	adds	r3, r4, r0
 800d006:	001c      	movs	r4, r3
 800d008:	e782      	b.n	800cf10 <__ieee754_sqrt+0x2c>
 800d00a:	0ad1      	lsrs	r1, r2, #11
 800d00c:	3b15      	subs	r3, #21
 800d00e:	0552      	lsls	r2, r2, #21
 800d010:	2900      	cmp	r1, #0
 800d012:	d0fa      	beq.n	800d00a <__ieee754_sqrt+0x126>
 800d014:	2480      	movs	r4, #128	; 0x80
 800d016:	0364      	lsls	r4, r4, #13
 800d018:	4221      	tst	r1, r4
 800d01a:	d00a      	beq.n	800d032 <__ieee754_sqrt+0x14e>
 800d01c:	2420      	movs	r4, #32
 800d01e:	0016      	movs	r6, r2
 800d020:	1a24      	subs	r4, r4, r0
 800d022:	40e6      	lsrs	r6, r4
 800d024:	1e45      	subs	r5, r0, #1
 800d026:	4082      	lsls	r2, r0
 800d028:	4331      	orrs	r1, r6
 800d02a:	1b58      	subs	r0, r3, r5
 800d02c:	e789      	b.n	800cf42 <__ieee754_sqrt+0x5e>
 800d02e:	2300      	movs	r3, #0
 800d030:	e7ee      	b.n	800d010 <__ieee754_sqrt+0x12c>
 800d032:	0049      	lsls	r1, r1, #1
 800d034:	3001      	adds	r0, #1
 800d036:	e7ef      	b.n	800d018 <__ieee754_sqrt+0x134>
 800d038:	2301      	movs	r3, #1
 800d03a:	3101      	adds	r1, #1
 800d03c:	4399      	bics	r1, r3
 800d03e:	e7d5      	b.n	800cfec <__ieee754_sqrt+0x108>
 800d040:	7ff00000 	.word	0x7ff00000
 800d044:	fffffc01 	.word	0xfffffc01
 800d048:	3fe00000 	.word	0x3fe00000

0800d04c <__kernel_cos>:
 800d04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d04e:	b087      	sub	sp, #28
 800d050:	9204      	str	r2, [sp, #16]
 800d052:	9305      	str	r3, [sp, #20]
 800d054:	004b      	lsls	r3, r1, #1
 800d056:	085b      	lsrs	r3, r3, #1
 800d058:	9300      	str	r3, [sp, #0]
 800d05a:	23f9      	movs	r3, #249	; 0xf9
 800d05c:	9a00      	ldr	r2, [sp, #0]
 800d05e:	0007      	movs	r7, r0
 800d060:	000e      	movs	r6, r1
 800d062:	059b      	lsls	r3, r3, #22
 800d064:	429a      	cmp	r2, r3
 800d066:	da04      	bge.n	800d072 <__kernel_cos+0x26>
 800d068:	f7f5 fd76 	bl	8002b58 <__aeabi_d2iz>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d100      	bne.n	800d072 <__kernel_cos+0x26>
 800d070:	e084      	b.n	800d17c <__kernel_cos+0x130>
 800d072:	003a      	movs	r2, r7
 800d074:	0033      	movs	r3, r6
 800d076:	0038      	movs	r0, r7
 800d078:	0031      	movs	r1, r6
 800d07a:	f7f4 ff51 	bl	8001f20 <__aeabi_dmul>
 800d07e:	2200      	movs	r2, #0
 800d080:	4b40      	ldr	r3, [pc, #256]	; (800d184 <__kernel_cos+0x138>)
 800d082:	0004      	movs	r4, r0
 800d084:	000d      	movs	r5, r1
 800d086:	f7f4 ff4b 	bl	8001f20 <__aeabi_dmul>
 800d08a:	4a3f      	ldr	r2, [pc, #252]	; (800d188 <__kernel_cos+0x13c>)
 800d08c:	9002      	str	r0, [sp, #8]
 800d08e:	9103      	str	r1, [sp, #12]
 800d090:	4b3e      	ldr	r3, [pc, #248]	; (800d18c <__kernel_cos+0x140>)
 800d092:	0020      	movs	r0, r4
 800d094:	0029      	movs	r1, r5
 800d096:	f7f4 ff43 	bl	8001f20 <__aeabi_dmul>
 800d09a:	4a3d      	ldr	r2, [pc, #244]	; (800d190 <__kernel_cos+0x144>)
 800d09c:	4b3d      	ldr	r3, [pc, #244]	; (800d194 <__kernel_cos+0x148>)
 800d09e:	f7f3 ffcf 	bl	8001040 <__aeabi_dadd>
 800d0a2:	0022      	movs	r2, r4
 800d0a4:	002b      	movs	r3, r5
 800d0a6:	f7f4 ff3b 	bl	8001f20 <__aeabi_dmul>
 800d0aa:	4a3b      	ldr	r2, [pc, #236]	; (800d198 <__kernel_cos+0x14c>)
 800d0ac:	4b3b      	ldr	r3, [pc, #236]	; (800d19c <__kernel_cos+0x150>)
 800d0ae:	f7f5 f9a3 	bl	80023f8 <__aeabi_dsub>
 800d0b2:	0022      	movs	r2, r4
 800d0b4:	002b      	movs	r3, r5
 800d0b6:	f7f4 ff33 	bl	8001f20 <__aeabi_dmul>
 800d0ba:	4a39      	ldr	r2, [pc, #228]	; (800d1a0 <__kernel_cos+0x154>)
 800d0bc:	4b39      	ldr	r3, [pc, #228]	; (800d1a4 <__kernel_cos+0x158>)
 800d0be:	f7f3 ffbf 	bl	8001040 <__aeabi_dadd>
 800d0c2:	0022      	movs	r2, r4
 800d0c4:	002b      	movs	r3, r5
 800d0c6:	f7f4 ff2b 	bl	8001f20 <__aeabi_dmul>
 800d0ca:	4a37      	ldr	r2, [pc, #220]	; (800d1a8 <__kernel_cos+0x15c>)
 800d0cc:	4b37      	ldr	r3, [pc, #220]	; (800d1ac <__kernel_cos+0x160>)
 800d0ce:	f7f5 f993 	bl	80023f8 <__aeabi_dsub>
 800d0d2:	0022      	movs	r2, r4
 800d0d4:	002b      	movs	r3, r5
 800d0d6:	f7f4 ff23 	bl	8001f20 <__aeabi_dmul>
 800d0da:	4a35      	ldr	r2, [pc, #212]	; (800d1b0 <__kernel_cos+0x164>)
 800d0dc:	4b35      	ldr	r3, [pc, #212]	; (800d1b4 <__kernel_cos+0x168>)
 800d0de:	f7f3 ffaf 	bl	8001040 <__aeabi_dadd>
 800d0e2:	0022      	movs	r2, r4
 800d0e4:	002b      	movs	r3, r5
 800d0e6:	f7f4 ff1b 	bl	8001f20 <__aeabi_dmul>
 800d0ea:	0022      	movs	r2, r4
 800d0ec:	002b      	movs	r3, r5
 800d0ee:	f7f4 ff17 	bl	8001f20 <__aeabi_dmul>
 800d0f2:	9a04      	ldr	r2, [sp, #16]
 800d0f4:	9b05      	ldr	r3, [sp, #20]
 800d0f6:	0004      	movs	r4, r0
 800d0f8:	000d      	movs	r5, r1
 800d0fa:	0038      	movs	r0, r7
 800d0fc:	0031      	movs	r1, r6
 800d0fe:	f7f4 ff0f 	bl	8001f20 <__aeabi_dmul>
 800d102:	0002      	movs	r2, r0
 800d104:	000b      	movs	r3, r1
 800d106:	0020      	movs	r0, r4
 800d108:	0029      	movs	r1, r5
 800d10a:	f7f5 f975 	bl	80023f8 <__aeabi_dsub>
 800d10e:	4b2a      	ldr	r3, [pc, #168]	; (800d1b8 <__kernel_cos+0x16c>)
 800d110:	9a00      	ldr	r2, [sp, #0]
 800d112:	0004      	movs	r4, r0
 800d114:	000d      	movs	r5, r1
 800d116:	429a      	cmp	r2, r3
 800d118:	dc0d      	bgt.n	800d136 <__kernel_cos+0xea>
 800d11a:	0002      	movs	r2, r0
 800d11c:	000b      	movs	r3, r1
 800d11e:	9802      	ldr	r0, [sp, #8]
 800d120:	9903      	ldr	r1, [sp, #12]
 800d122:	f7f5 f969 	bl	80023f8 <__aeabi_dsub>
 800d126:	0002      	movs	r2, r0
 800d128:	2000      	movs	r0, #0
 800d12a:	000b      	movs	r3, r1
 800d12c:	4923      	ldr	r1, [pc, #140]	; (800d1bc <__kernel_cos+0x170>)
 800d12e:	f7f5 f963 	bl	80023f8 <__aeabi_dsub>
 800d132:	b007      	add	sp, #28
 800d134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d136:	4b22      	ldr	r3, [pc, #136]	; (800d1c0 <__kernel_cos+0x174>)
 800d138:	9a00      	ldr	r2, [sp, #0]
 800d13a:	2600      	movs	r6, #0
 800d13c:	429a      	cmp	r2, r3
 800d13e:	dc1b      	bgt.n	800d178 <__kernel_cos+0x12c>
 800d140:	0013      	movs	r3, r2
 800d142:	4a20      	ldr	r2, [pc, #128]	; (800d1c4 <__kernel_cos+0x178>)
 800d144:	4694      	mov	ip, r2
 800d146:	4463      	add	r3, ip
 800d148:	001f      	movs	r7, r3
 800d14a:	0032      	movs	r2, r6
 800d14c:	003b      	movs	r3, r7
 800d14e:	2000      	movs	r0, #0
 800d150:	491a      	ldr	r1, [pc, #104]	; (800d1bc <__kernel_cos+0x170>)
 800d152:	f7f5 f951 	bl	80023f8 <__aeabi_dsub>
 800d156:	0032      	movs	r2, r6
 800d158:	003b      	movs	r3, r7
 800d15a:	9000      	str	r0, [sp, #0]
 800d15c:	9101      	str	r1, [sp, #4]
 800d15e:	9802      	ldr	r0, [sp, #8]
 800d160:	9903      	ldr	r1, [sp, #12]
 800d162:	f7f5 f949 	bl	80023f8 <__aeabi_dsub>
 800d166:	0022      	movs	r2, r4
 800d168:	002b      	movs	r3, r5
 800d16a:	f7f5 f945 	bl	80023f8 <__aeabi_dsub>
 800d16e:	0002      	movs	r2, r0
 800d170:	000b      	movs	r3, r1
 800d172:	9800      	ldr	r0, [sp, #0]
 800d174:	9901      	ldr	r1, [sp, #4]
 800d176:	e7da      	b.n	800d12e <__kernel_cos+0xe2>
 800d178:	4f13      	ldr	r7, [pc, #76]	; (800d1c8 <__kernel_cos+0x17c>)
 800d17a:	e7e6      	b.n	800d14a <__kernel_cos+0xfe>
 800d17c:	2000      	movs	r0, #0
 800d17e:	490f      	ldr	r1, [pc, #60]	; (800d1bc <__kernel_cos+0x170>)
 800d180:	e7d7      	b.n	800d132 <__kernel_cos+0xe6>
 800d182:	46c0      	nop			; (mov r8, r8)
 800d184:	3fe00000 	.word	0x3fe00000
 800d188:	be8838d4 	.word	0xbe8838d4
 800d18c:	bda8fae9 	.word	0xbda8fae9
 800d190:	bdb4b1c4 	.word	0xbdb4b1c4
 800d194:	3e21ee9e 	.word	0x3e21ee9e
 800d198:	809c52ad 	.word	0x809c52ad
 800d19c:	3e927e4f 	.word	0x3e927e4f
 800d1a0:	19cb1590 	.word	0x19cb1590
 800d1a4:	3efa01a0 	.word	0x3efa01a0
 800d1a8:	16c15177 	.word	0x16c15177
 800d1ac:	3f56c16c 	.word	0x3f56c16c
 800d1b0:	5555554c 	.word	0x5555554c
 800d1b4:	3fa55555 	.word	0x3fa55555
 800d1b8:	3fd33332 	.word	0x3fd33332
 800d1bc:	3ff00000 	.word	0x3ff00000
 800d1c0:	3fe90000 	.word	0x3fe90000
 800d1c4:	ffe00000 	.word	0xffe00000
 800d1c8:	3fd20000 	.word	0x3fd20000

0800d1cc <__kernel_rem_pio2>:
 800d1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ce:	4cd0      	ldr	r4, [pc, #832]	; (800d510 <__kernel_rem_pio2+0x344>)
 800d1d0:	44a5      	add	sp, r4
 800d1d2:	930d      	str	r3, [sp, #52]	; 0x34
 800d1d4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d1d6:	0014      	movs	r4, r2
 800d1d8:	009a      	lsls	r2, r3, #2
 800d1da:	4bce      	ldr	r3, [pc, #824]	; (800d514 <__kernel_rem_pio2+0x348>)
 800d1dc:	900e      	str	r0, [sp, #56]	; 0x38
 800d1de:	58d3      	ldr	r3, [r2, r3]
 800d1e0:	9107      	str	r1, [sp, #28]
 800d1e2:	9308      	str	r3, [sp, #32]
 800d1e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	930c      	str	r3, [sp, #48]	; 0x30
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	0023      	movs	r3, r4
 800d1f0:	3314      	adds	r3, #20
 800d1f2:	db04      	blt.n	800d1fe <__kernel_rem_pio2+0x32>
 800d1f4:	2118      	movs	r1, #24
 800d1f6:	1ee0      	subs	r0, r4, #3
 800d1f8:	f7f3 f828 	bl	800024c <__divsi3>
 800d1fc:	9000      	str	r0, [sp, #0]
 800d1fe:	2218      	movs	r2, #24
 800d200:	9b00      	ldr	r3, [sp, #0]
 800d202:	4252      	negs	r2, r2
 800d204:	3301      	adds	r3, #1
 800d206:	435a      	muls	r2, r3
 800d208:	1913      	adds	r3, r2, r4
 800d20a:	9302      	str	r3, [sp, #8]
 800d20c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d20e:	9b00      	ldr	r3, [sp, #0]
 800d210:	ae26      	add	r6, sp, #152	; 0x98
 800d212:	1a9d      	subs	r5, r3, r2
 800d214:	002c      	movs	r4, r5
 800d216:	9b08      	ldr	r3, [sp, #32]
 800d218:	189f      	adds	r7, r3, r2
 800d21a:	1b63      	subs	r3, r4, r5
 800d21c:	429f      	cmp	r7, r3
 800d21e:	da17      	bge.n	800d250 <__kernel_rem_pio2+0x84>
 800d220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d222:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d224:	9304      	str	r3, [sp, #16]
 800d226:	ab76      	add	r3, sp, #472	; 0x1d8
 800d228:	930a      	str	r3, [sp, #40]	; 0x28
 800d22a:	2301      	movs	r3, #1
 800d22c:	1a9b      	subs	r3, r3, r2
 800d22e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d230:	ab28      	add	r3, sp, #160	; 0xa0
 800d232:	930f      	str	r3, [sp, #60]	; 0x3c
 800d234:	9a04      	ldr	r2, [sp, #16]
 800d236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d238:	189b      	adds	r3, r3, r2
 800d23a:	9a08      	ldr	r2, [sp, #32]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	db31      	blt.n	800d2a4 <__kernel_rem_pio2+0xd8>
 800d240:	9b04      	ldr	r3, [sp, #16]
 800d242:	2400      	movs	r4, #0
 800d244:	00de      	lsls	r6, r3, #3
 800d246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d248:	2500      	movs	r5, #0
 800d24a:	2700      	movs	r7, #0
 800d24c:	199e      	adds	r6, r3, r6
 800d24e:	e01e      	b.n	800d28e <__kernel_rem_pio2+0xc2>
 800d250:	2c00      	cmp	r4, #0
 800d252:	db07      	blt.n	800d264 <__kernel_rem_pio2+0x98>
 800d254:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800d256:	00a3      	lsls	r3, r4, #2
 800d258:	58d0      	ldr	r0, [r2, r3]
 800d25a:	f7f5 fcb3 	bl	8002bc4 <__aeabi_i2d>
 800d25e:	c603      	stmia	r6!, {r0, r1}
 800d260:	3401      	adds	r4, #1
 800d262:	e7da      	b.n	800d21a <__kernel_rem_pio2+0x4e>
 800d264:	2000      	movs	r0, #0
 800d266:	2100      	movs	r1, #0
 800d268:	e7f9      	b.n	800d25e <__kernel_rem_pio2+0x92>
 800d26a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d26c:	00f9      	lsls	r1, r7, #3
 800d26e:	1859      	adds	r1, r3, r1
 800d270:	6808      	ldr	r0, [r1, #0]
 800d272:	6849      	ldr	r1, [r1, #4]
 800d274:	6832      	ldr	r2, [r6, #0]
 800d276:	6873      	ldr	r3, [r6, #4]
 800d278:	f7f4 fe52 	bl	8001f20 <__aeabi_dmul>
 800d27c:	0002      	movs	r2, r0
 800d27e:	000b      	movs	r3, r1
 800d280:	0020      	movs	r0, r4
 800d282:	0029      	movs	r1, r5
 800d284:	f7f3 fedc 	bl	8001040 <__aeabi_dadd>
 800d288:	0004      	movs	r4, r0
 800d28a:	000d      	movs	r5, r1
 800d28c:	3701      	adds	r7, #1
 800d28e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d290:	3e08      	subs	r6, #8
 800d292:	429f      	cmp	r7, r3
 800d294:	dde9      	ble.n	800d26a <__kernel_rem_pio2+0x9e>
 800d296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d298:	c330      	stmia	r3!, {r4, r5}
 800d29a:	930a      	str	r3, [sp, #40]	; 0x28
 800d29c:	9b04      	ldr	r3, [sp, #16]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	9304      	str	r3, [sp, #16]
 800d2a2:	e7c7      	b.n	800d234 <__kernel_rem_pio2+0x68>
 800d2a4:	9b08      	ldr	r3, [sp, #32]
 800d2a6:	aa12      	add	r2, sp, #72	; 0x48
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	189b      	adds	r3, r3, r2
 800d2ac:	9310      	str	r3, [sp, #64]	; 0x40
 800d2ae:	9b00      	ldr	r3, [sp, #0]
 800d2b0:	0098      	lsls	r0, r3, #2
 800d2b2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d2b4:	181b      	adds	r3, r3, r0
 800d2b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2b8:	9b08      	ldr	r3, [sp, #32]
 800d2ba:	9304      	str	r3, [sp, #16]
 800d2bc:	9b04      	ldr	r3, [sp, #16]
 800d2be:	aa76      	add	r2, sp, #472	; 0x1d8
 800d2c0:	00db      	lsls	r3, r3, #3
 800d2c2:	18d3      	adds	r3, r2, r3
 800d2c4:	681c      	ldr	r4, [r3, #0]
 800d2c6:	685d      	ldr	r5, [r3, #4]
 800d2c8:	ab12      	add	r3, sp, #72	; 0x48
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2ce:	9b04      	ldr	r3, [sp, #16]
 800d2d0:	9211      	str	r2, [sp, #68]	; 0x44
 800d2d2:	930a      	str	r3, [sp, #40]	; 0x28
 800d2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	dc74      	bgt.n	800d3c4 <__kernel_rem_pio2+0x1f8>
 800d2da:	0020      	movs	r0, r4
 800d2dc:	0029      	movs	r1, r5
 800d2de:	9a02      	ldr	r2, [sp, #8]
 800d2e0:	f000 fcb6 	bl	800dc50 <scalbn>
 800d2e4:	23ff      	movs	r3, #255	; 0xff
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	059b      	lsls	r3, r3, #22
 800d2ea:	0004      	movs	r4, r0
 800d2ec:	000d      	movs	r5, r1
 800d2ee:	f7f4 fe17 	bl	8001f20 <__aeabi_dmul>
 800d2f2:	f000 fb95 	bl	800da20 <floor>
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	4b87      	ldr	r3, [pc, #540]	; (800d518 <__kernel_rem_pio2+0x34c>)
 800d2fa:	f7f4 fe11 	bl	8001f20 <__aeabi_dmul>
 800d2fe:	0002      	movs	r2, r0
 800d300:	000b      	movs	r3, r1
 800d302:	0020      	movs	r0, r4
 800d304:	0029      	movs	r1, r5
 800d306:	f7f5 f877 	bl	80023f8 <__aeabi_dsub>
 800d30a:	000d      	movs	r5, r1
 800d30c:	0004      	movs	r4, r0
 800d30e:	f7f5 fc23 	bl	8002b58 <__aeabi_d2iz>
 800d312:	900b      	str	r0, [sp, #44]	; 0x2c
 800d314:	f7f5 fc56 	bl	8002bc4 <__aeabi_i2d>
 800d318:	000b      	movs	r3, r1
 800d31a:	0002      	movs	r2, r0
 800d31c:	0029      	movs	r1, r5
 800d31e:	0020      	movs	r0, r4
 800d320:	f7f5 f86a 	bl	80023f8 <__aeabi_dsub>
 800d324:	9b02      	ldr	r3, [sp, #8]
 800d326:	0006      	movs	r6, r0
 800d328:	000f      	movs	r7, r1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	dd74      	ble.n	800d418 <__kernel_rem_pio2+0x24c>
 800d32e:	2118      	movs	r1, #24
 800d330:	9b04      	ldr	r3, [sp, #16]
 800d332:	aa12      	add	r2, sp, #72	; 0x48
 800d334:	3b01      	subs	r3, #1
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	589a      	ldr	r2, [r3, r2]
 800d33a:	9802      	ldr	r0, [sp, #8]
 800d33c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d33e:	1a09      	subs	r1, r1, r0
 800d340:	0010      	movs	r0, r2
 800d342:	4108      	asrs	r0, r1
 800d344:	1824      	adds	r4, r4, r0
 800d346:	4088      	lsls	r0, r1
 800d348:	a912      	add	r1, sp, #72	; 0x48
 800d34a:	1a12      	subs	r2, r2, r0
 800d34c:	505a      	str	r2, [r3, r1]
 800d34e:	2317      	movs	r3, #23
 800d350:	9902      	ldr	r1, [sp, #8]
 800d352:	940b      	str	r4, [sp, #44]	; 0x2c
 800d354:	1a5b      	subs	r3, r3, r1
 800d356:	411a      	asrs	r2, r3
 800d358:	920a      	str	r2, [sp, #40]	; 0x28
 800d35a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	dd6d      	ble.n	800d43c <__kernel_rem_pio2+0x270>
 800d360:	2200      	movs	r2, #0
 800d362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d364:	2080      	movs	r0, #128	; 0x80
 800d366:	3301      	adds	r3, #1
 800d368:	930b      	str	r3, [sp, #44]	; 0x2c
 800d36a:	4b6c      	ldr	r3, [pc, #432]	; (800d51c <__kernel_rem_pio2+0x350>)
 800d36c:	0014      	movs	r4, r2
 800d36e:	469c      	mov	ip, r3
 800d370:	2501      	movs	r5, #1
 800d372:	0440      	lsls	r0, r0, #17
 800d374:	9b04      	ldr	r3, [sp, #16]
 800d376:	4293      	cmp	r3, r2
 800d378:	dd00      	ble.n	800d37c <__kernel_rem_pio2+0x1b0>
 800d37a:	e098      	b.n	800d4ae <__kernel_rem_pio2+0x2e2>
 800d37c:	9b02      	ldr	r3, [sp, #8]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	dd05      	ble.n	800d38e <__kernel_rem_pio2+0x1c2>
 800d382:	2b01      	cmp	r3, #1
 800d384:	d100      	bne.n	800d388 <__kernel_rem_pio2+0x1bc>
 800d386:	e0a8      	b.n	800d4da <__kernel_rem_pio2+0x30e>
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d100      	bne.n	800d38e <__kernel_rem_pio2+0x1c2>
 800d38c:	e0b0      	b.n	800d4f0 <__kernel_rem_pio2+0x324>
 800d38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d390:	2b02      	cmp	r3, #2
 800d392:	d153      	bne.n	800d43c <__kernel_rem_pio2+0x270>
 800d394:	0032      	movs	r2, r6
 800d396:	003b      	movs	r3, r7
 800d398:	2000      	movs	r0, #0
 800d39a:	4961      	ldr	r1, [pc, #388]	; (800d520 <__kernel_rem_pio2+0x354>)
 800d39c:	f7f5 f82c 	bl	80023f8 <__aeabi_dsub>
 800d3a0:	0006      	movs	r6, r0
 800d3a2:	000f      	movs	r7, r1
 800d3a4:	2c00      	cmp	r4, #0
 800d3a6:	d049      	beq.n	800d43c <__kernel_rem_pio2+0x270>
 800d3a8:	9a02      	ldr	r2, [sp, #8]
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	495c      	ldr	r1, [pc, #368]	; (800d520 <__kernel_rem_pio2+0x354>)
 800d3ae:	f000 fc4f 	bl	800dc50 <scalbn>
 800d3b2:	0002      	movs	r2, r0
 800d3b4:	000b      	movs	r3, r1
 800d3b6:	0030      	movs	r0, r6
 800d3b8:	0039      	movs	r1, r7
 800d3ba:	f7f5 f81d 	bl	80023f8 <__aeabi_dsub>
 800d3be:	0006      	movs	r6, r0
 800d3c0:	000f      	movs	r7, r1
 800d3c2:	e03b      	b.n	800d43c <__kernel_rem_pio2+0x270>
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	4b57      	ldr	r3, [pc, #348]	; (800d524 <__kernel_rem_pio2+0x358>)
 800d3c8:	0020      	movs	r0, r4
 800d3ca:	0029      	movs	r1, r5
 800d3cc:	f7f4 fda8 	bl	8001f20 <__aeabi_dmul>
 800d3d0:	f7f5 fbc2 	bl	8002b58 <__aeabi_d2iz>
 800d3d4:	f7f5 fbf6 	bl	8002bc4 <__aeabi_i2d>
 800d3d8:	2200      	movs	r2, #0
 800d3da:	4b53      	ldr	r3, [pc, #332]	; (800d528 <__kernel_rem_pio2+0x35c>)
 800d3dc:	0006      	movs	r6, r0
 800d3de:	000f      	movs	r7, r1
 800d3e0:	f7f4 fd9e 	bl	8001f20 <__aeabi_dmul>
 800d3e4:	0002      	movs	r2, r0
 800d3e6:	000b      	movs	r3, r1
 800d3e8:	0020      	movs	r0, r4
 800d3ea:	0029      	movs	r1, r5
 800d3ec:	f7f5 f804 	bl	80023f8 <__aeabi_dsub>
 800d3f0:	f7f5 fbb2 	bl	8002b58 <__aeabi_d2iz>
 800d3f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d3f8:	c301      	stmia	r3!, {r0}
 800d3fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3fe:	0030      	movs	r0, r6
 800d400:	3b01      	subs	r3, #1
 800d402:	930a      	str	r3, [sp, #40]	; 0x28
 800d404:	00db      	lsls	r3, r3, #3
 800d406:	18d3      	adds	r3, r2, r3
 800d408:	0039      	movs	r1, r7
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	f7f3 fe17 	bl	8001040 <__aeabi_dadd>
 800d412:	0004      	movs	r4, r0
 800d414:	000d      	movs	r5, r1
 800d416:	e75d      	b.n	800d2d4 <__kernel_rem_pio2+0x108>
 800d418:	9b02      	ldr	r3, [sp, #8]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d107      	bne.n	800d42e <__kernel_rem_pio2+0x262>
 800d41e:	9b04      	ldr	r3, [sp, #16]
 800d420:	aa12      	add	r2, sp, #72	; 0x48
 800d422:	3b01      	subs	r3, #1
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	5898      	ldr	r0, [r3, r2]
 800d428:	15c3      	asrs	r3, r0, #23
 800d42a:	930a      	str	r3, [sp, #40]	; 0x28
 800d42c:	e795      	b.n	800d35a <__kernel_rem_pio2+0x18e>
 800d42e:	2200      	movs	r2, #0
 800d430:	4b3e      	ldr	r3, [pc, #248]	; (800d52c <__kernel_rem_pio2+0x360>)
 800d432:	f7f3 f82b 	bl	800048c <__aeabi_dcmpge>
 800d436:	2800      	cmp	r0, #0
 800d438:	d136      	bne.n	800d4a8 <__kernel_rem_pio2+0x2dc>
 800d43a:	900a      	str	r0, [sp, #40]	; 0x28
 800d43c:	2200      	movs	r2, #0
 800d43e:	2300      	movs	r3, #0
 800d440:	0030      	movs	r0, r6
 800d442:	0039      	movs	r1, r7
 800d444:	f7f2 fffe 	bl	8000444 <__aeabi_dcmpeq>
 800d448:	2800      	cmp	r0, #0
 800d44a:	d100      	bne.n	800d44e <__kernel_rem_pio2+0x282>
 800d44c:	e0b9      	b.n	800d5c2 <__kernel_rem_pio2+0x3f6>
 800d44e:	2200      	movs	r2, #0
 800d450:	9b04      	ldr	r3, [sp, #16]
 800d452:	3b01      	subs	r3, #1
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	9908      	ldr	r1, [sp, #32]
 800d458:	428b      	cmp	r3, r1
 800d45a:	da52      	bge.n	800d502 <__kernel_rem_pio2+0x336>
 800d45c:	2a00      	cmp	r2, #0
 800d45e:	d100      	bne.n	800d462 <__kernel_rem_pio2+0x296>
 800d460:	e095      	b.n	800d58e <__kernel_rem_pio2+0x3c2>
 800d462:	9b02      	ldr	r3, [sp, #8]
 800d464:	aa12      	add	r2, sp, #72	; 0x48
 800d466:	3b18      	subs	r3, #24
 800d468:	9302      	str	r3, [sp, #8]
 800d46a:	9b00      	ldr	r3, [sp, #0]
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	589b      	ldr	r3, [r3, r2]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d100      	bne.n	800d476 <__kernel_rem_pio2+0x2aa>
 800d474:	e0a1      	b.n	800d5ba <__kernel_rem_pio2+0x3ee>
 800d476:	2000      	movs	r0, #0
 800d478:	9a02      	ldr	r2, [sp, #8]
 800d47a:	4929      	ldr	r1, [pc, #164]	; (800d520 <__kernel_rem_pio2+0x354>)
 800d47c:	f000 fbe8 	bl	800dc50 <scalbn>
 800d480:	0006      	movs	r6, r0
 800d482:	000f      	movs	r7, r1
 800d484:	9c00      	ldr	r4, [sp, #0]
 800d486:	2c00      	cmp	r4, #0
 800d488:	db00      	blt.n	800d48c <__kernel_rem_pio2+0x2c0>
 800d48a:	e0d9      	b.n	800d640 <__kernel_rem_pio2+0x474>
 800d48c:	2600      	movs	r6, #0
 800d48e:	9d00      	ldr	r5, [sp, #0]
 800d490:	2d00      	cmp	r5, #0
 800d492:	da00      	bge.n	800d496 <__kernel_rem_pio2+0x2ca>
 800d494:	e10c      	b.n	800d6b0 <__kernel_rem_pio2+0x4e4>
 800d496:	ab76      	add	r3, sp, #472	; 0x1d8
 800d498:	00ef      	lsls	r7, r5, #3
 800d49a:	2400      	movs	r4, #0
 800d49c:	18ff      	adds	r7, r7, r3
 800d49e:	2300      	movs	r3, #0
 800d4a0:	9302      	str	r3, [sp, #8]
 800d4a2:	9403      	str	r4, [sp, #12]
 800d4a4:	2400      	movs	r4, #0
 800d4a6:	e0f4      	b.n	800d692 <__kernel_rem_pio2+0x4c6>
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	930a      	str	r3, [sp, #40]	; 0x28
 800d4ac:	e758      	b.n	800d360 <__kernel_rem_pio2+0x194>
 800d4ae:	9b00      	ldr	r3, [sp, #0]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2c00      	cmp	r4, #0
 800d4b4:	d10b      	bne.n	800d4ce <__kernel_rem_pio2+0x302>
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <__kernel_rem_pio2+0x2f6>
 800d4ba:	9c00      	ldr	r4, [sp, #0]
 800d4bc:	1ac3      	subs	r3, r0, r3
 800d4be:	6023      	str	r3, [r4, #0]
 800d4c0:	002b      	movs	r3, r5
 800d4c2:	9c00      	ldr	r4, [sp, #0]
 800d4c4:	3201      	adds	r2, #1
 800d4c6:	3404      	adds	r4, #4
 800d4c8:	9400      	str	r4, [sp, #0]
 800d4ca:	001c      	movs	r4, r3
 800d4cc:	e752      	b.n	800d374 <__kernel_rem_pio2+0x1a8>
 800d4ce:	4661      	mov	r1, ip
 800d4d0:	1acb      	subs	r3, r1, r3
 800d4d2:	9900      	ldr	r1, [sp, #0]
 800d4d4:	600b      	str	r3, [r1, #0]
 800d4d6:	0023      	movs	r3, r4
 800d4d8:	e7f3      	b.n	800d4c2 <__kernel_rem_pio2+0x2f6>
 800d4da:	9b04      	ldr	r3, [sp, #16]
 800d4dc:	aa12      	add	r2, sp, #72	; 0x48
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	589a      	ldr	r2, [r3, r2]
 800d4e4:	9200      	str	r2, [sp, #0]
 800d4e6:	0252      	lsls	r2, r2, #9
 800d4e8:	0a52      	lsrs	r2, r2, #9
 800d4ea:	a912      	add	r1, sp, #72	; 0x48
 800d4ec:	505a      	str	r2, [r3, r1]
 800d4ee:	e74e      	b.n	800d38e <__kernel_rem_pio2+0x1c2>
 800d4f0:	9b04      	ldr	r3, [sp, #16]
 800d4f2:	aa12      	add	r2, sp, #72	; 0x48
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	589a      	ldr	r2, [r3, r2]
 800d4fa:	9200      	str	r2, [sp, #0]
 800d4fc:	0292      	lsls	r2, r2, #10
 800d4fe:	0a92      	lsrs	r2, r2, #10
 800d500:	e7f3      	b.n	800d4ea <__kernel_rem_pio2+0x31e>
 800d502:	0099      	lsls	r1, r3, #2
 800d504:	a812      	add	r0, sp, #72	; 0x48
 800d506:	5809      	ldr	r1, [r1, r0]
 800d508:	3b01      	subs	r3, #1
 800d50a:	430a      	orrs	r2, r1
 800d50c:	e7a3      	b.n	800d456 <__kernel_rem_pio2+0x28a>
 800d50e:	46c0      	nop			; (mov r8, r8)
 800d510:	fffffd84 	.word	0xfffffd84
 800d514:	0800e7c0 	.word	0x0800e7c0
 800d518:	40200000 	.word	0x40200000
 800d51c:	00ffffff 	.word	0x00ffffff
 800d520:	3ff00000 	.word	0x3ff00000
 800d524:	3e700000 	.word	0x3e700000
 800d528:	41700000 	.word	0x41700000
 800d52c:	3fe00000 	.word	0x3fe00000
 800d530:	3301      	adds	r3, #1
 800d532:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d534:	009a      	lsls	r2, r3, #2
 800d536:	4252      	negs	r2, r2
 800d538:	588a      	ldr	r2, [r1, r2]
 800d53a:	2a00      	cmp	r2, #0
 800d53c:	d0f8      	beq.n	800d530 <__kernel_rem_pio2+0x364>
 800d53e:	9a04      	ldr	r2, [sp, #16]
 800d540:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d542:	1c57      	adds	r7, r2, #1
 800d544:	1854      	adds	r4, r2, r1
 800d546:	00e4      	lsls	r4, r4, #3
 800d548:	aa26      	add	r2, sp, #152	; 0x98
 800d54a:	1914      	adds	r4, r2, r4
 800d54c:	9a04      	ldr	r2, [sp, #16]
 800d54e:	18d3      	adds	r3, r2, r3
 800d550:	9304      	str	r3, [sp, #16]
 800d552:	9b04      	ldr	r3, [sp, #16]
 800d554:	42bb      	cmp	r3, r7
 800d556:	da00      	bge.n	800d55a <__kernel_rem_pio2+0x38e>
 800d558:	e6b0      	b.n	800d2bc <__kernel_rem_pio2+0xf0>
 800d55a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d55c:	00bb      	lsls	r3, r7, #2
 800d55e:	58d0      	ldr	r0, [r2, r3]
 800d560:	f7f5 fb30 	bl	8002bc4 <__aeabi_i2d>
 800d564:	2200      	movs	r2, #0
 800d566:	2300      	movs	r3, #0
 800d568:	0026      	movs	r6, r4
 800d56a:	2500      	movs	r5, #0
 800d56c:	6020      	str	r0, [r4, #0]
 800d56e:	6061      	str	r1, [r4, #4]
 800d570:	9200      	str	r2, [sp, #0]
 800d572:	9301      	str	r3, [sp, #4]
 800d574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d576:	429d      	cmp	r5, r3
 800d578:	dd0b      	ble.n	800d592 <__kernel_rem_pio2+0x3c6>
 800d57a:	00fb      	lsls	r3, r7, #3
 800d57c:	aa76      	add	r2, sp, #472	; 0x1d8
 800d57e:	18d3      	adds	r3, r2, r3
 800d580:	3701      	adds	r7, #1
 800d582:	9900      	ldr	r1, [sp, #0]
 800d584:	9a01      	ldr	r2, [sp, #4]
 800d586:	3408      	adds	r4, #8
 800d588:	6019      	str	r1, [r3, #0]
 800d58a:	605a      	str	r2, [r3, #4]
 800d58c:	e7e1      	b.n	800d552 <__kernel_rem_pio2+0x386>
 800d58e:	2301      	movs	r3, #1
 800d590:	e7cf      	b.n	800d532 <__kernel_rem_pio2+0x366>
 800d592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d594:	00e9      	lsls	r1, r5, #3
 800d596:	1859      	adds	r1, r3, r1
 800d598:	6808      	ldr	r0, [r1, #0]
 800d59a:	6849      	ldr	r1, [r1, #4]
 800d59c:	6832      	ldr	r2, [r6, #0]
 800d59e:	6873      	ldr	r3, [r6, #4]
 800d5a0:	f7f4 fcbe 	bl	8001f20 <__aeabi_dmul>
 800d5a4:	0002      	movs	r2, r0
 800d5a6:	000b      	movs	r3, r1
 800d5a8:	9800      	ldr	r0, [sp, #0]
 800d5aa:	9901      	ldr	r1, [sp, #4]
 800d5ac:	f7f3 fd48 	bl	8001040 <__aeabi_dadd>
 800d5b0:	3501      	adds	r5, #1
 800d5b2:	9000      	str	r0, [sp, #0]
 800d5b4:	9101      	str	r1, [sp, #4]
 800d5b6:	3e08      	subs	r6, #8
 800d5b8:	e7dc      	b.n	800d574 <__kernel_rem_pio2+0x3a8>
 800d5ba:	9b00      	ldr	r3, [sp, #0]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	e74f      	b.n	800d462 <__kernel_rem_pio2+0x296>
 800d5c2:	9b02      	ldr	r3, [sp, #8]
 800d5c4:	0030      	movs	r0, r6
 800d5c6:	425a      	negs	r2, r3
 800d5c8:	0039      	movs	r1, r7
 800d5ca:	f000 fb41 	bl	800dc50 <scalbn>
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	4bb6      	ldr	r3, [pc, #728]	; (800d8ac <__kernel_rem_pio2+0x6e0>)
 800d5d2:	0004      	movs	r4, r0
 800d5d4:	000d      	movs	r5, r1
 800d5d6:	f7f2 ff59 	bl	800048c <__aeabi_dcmpge>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d025      	beq.n	800d62a <__kernel_rem_pio2+0x45e>
 800d5de:	2200      	movs	r2, #0
 800d5e0:	4bb3      	ldr	r3, [pc, #716]	; (800d8b0 <__kernel_rem_pio2+0x6e4>)
 800d5e2:	0020      	movs	r0, r4
 800d5e4:	0029      	movs	r1, r5
 800d5e6:	f7f4 fc9b 	bl	8001f20 <__aeabi_dmul>
 800d5ea:	f7f5 fab5 	bl	8002b58 <__aeabi_d2iz>
 800d5ee:	9b04      	ldr	r3, [sp, #16]
 800d5f0:	0006      	movs	r6, r0
 800d5f2:	009f      	lsls	r7, r3, #2
 800d5f4:	f7f5 fae6 	bl	8002bc4 <__aeabi_i2d>
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	4bac      	ldr	r3, [pc, #688]	; (800d8ac <__kernel_rem_pio2+0x6e0>)
 800d5fc:	f7f4 fc90 	bl	8001f20 <__aeabi_dmul>
 800d600:	0002      	movs	r2, r0
 800d602:	000b      	movs	r3, r1
 800d604:	0020      	movs	r0, r4
 800d606:	0029      	movs	r1, r5
 800d608:	f7f4 fef6 	bl	80023f8 <__aeabi_dsub>
 800d60c:	f7f5 faa4 	bl	8002b58 <__aeabi_d2iz>
 800d610:	ab12      	add	r3, sp, #72	; 0x48
 800d612:	51d8      	str	r0, [r3, r7]
 800d614:	9b04      	ldr	r3, [sp, #16]
 800d616:	aa12      	add	r2, sp, #72	; 0x48
 800d618:	3301      	adds	r3, #1
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	9b02      	ldr	r3, [sp, #8]
 800d61e:	3318      	adds	r3, #24
 800d620:	9302      	str	r3, [sp, #8]
 800d622:	9b00      	ldr	r3, [sp, #0]
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	509e      	str	r6, [r3, r2]
 800d628:	e725      	b.n	800d476 <__kernel_rem_pio2+0x2aa>
 800d62a:	9b04      	ldr	r3, [sp, #16]
 800d62c:	0020      	movs	r0, r4
 800d62e:	0029      	movs	r1, r5
 800d630:	009e      	lsls	r6, r3, #2
 800d632:	f7f5 fa91 	bl	8002b58 <__aeabi_d2iz>
 800d636:	ab12      	add	r3, sp, #72	; 0x48
 800d638:	5198      	str	r0, [r3, r6]
 800d63a:	9b04      	ldr	r3, [sp, #16]
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	e71a      	b.n	800d476 <__kernel_rem_pio2+0x2aa>
 800d640:	00e5      	lsls	r5, r4, #3
 800d642:	ab76      	add	r3, sp, #472	; 0x1d8
 800d644:	aa12      	add	r2, sp, #72	; 0x48
 800d646:	195d      	adds	r5, r3, r5
 800d648:	00a3      	lsls	r3, r4, #2
 800d64a:	5898      	ldr	r0, [r3, r2]
 800d64c:	f7f5 faba 	bl	8002bc4 <__aeabi_i2d>
 800d650:	0032      	movs	r2, r6
 800d652:	003b      	movs	r3, r7
 800d654:	f7f4 fc64 	bl	8001f20 <__aeabi_dmul>
 800d658:	2200      	movs	r2, #0
 800d65a:	6028      	str	r0, [r5, #0]
 800d65c:	6069      	str	r1, [r5, #4]
 800d65e:	4b94      	ldr	r3, [pc, #592]	; (800d8b0 <__kernel_rem_pio2+0x6e4>)
 800d660:	0030      	movs	r0, r6
 800d662:	0039      	movs	r1, r7
 800d664:	f7f4 fc5c 	bl	8001f20 <__aeabi_dmul>
 800d668:	3c01      	subs	r4, #1
 800d66a:	0006      	movs	r6, r0
 800d66c:	000f      	movs	r7, r1
 800d66e:	e70a      	b.n	800d486 <__kernel_rem_pio2+0x2ba>
 800d670:	4b90      	ldr	r3, [pc, #576]	; (800d8b4 <__kernel_rem_pio2+0x6e8>)
 800d672:	00e1      	lsls	r1, r4, #3
 800d674:	1859      	adds	r1, r3, r1
 800d676:	6808      	ldr	r0, [r1, #0]
 800d678:	6849      	ldr	r1, [r1, #4]
 800d67a:	cf0c      	ldmia	r7!, {r2, r3}
 800d67c:	f7f4 fc50 	bl	8001f20 <__aeabi_dmul>
 800d680:	0002      	movs	r2, r0
 800d682:	000b      	movs	r3, r1
 800d684:	9802      	ldr	r0, [sp, #8]
 800d686:	9903      	ldr	r1, [sp, #12]
 800d688:	f7f3 fcda 	bl	8001040 <__aeabi_dadd>
 800d68c:	9002      	str	r0, [sp, #8]
 800d68e:	9103      	str	r1, [sp, #12]
 800d690:	3401      	adds	r4, #1
 800d692:	9b08      	ldr	r3, [sp, #32]
 800d694:	429c      	cmp	r4, r3
 800d696:	dc01      	bgt.n	800d69c <__kernel_rem_pio2+0x4d0>
 800d698:	42a6      	cmp	r6, r4
 800d69a:	dae9      	bge.n	800d670 <__kernel_rem_pio2+0x4a4>
 800d69c:	00f3      	lsls	r3, r6, #3
 800d69e:	aa4e      	add	r2, sp, #312	; 0x138
 800d6a0:	18d3      	adds	r3, r2, r3
 800d6a2:	3d01      	subs	r5, #1
 800d6a4:	9902      	ldr	r1, [sp, #8]
 800d6a6:	9a03      	ldr	r2, [sp, #12]
 800d6a8:	3601      	adds	r6, #1
 800d6aa:	6019      	str	r1, [r3, #0]
 800d6ac:	605a      	str	r2, [r3, #4]
 800d6ae:	e6ef      	b.n	800d490 <__kernel_rem_pio2+0x2c4>
 800d6b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	dc0b      	bgt.n	800d6ce <__kernel_rem_pio2+0x502>
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	dd00      	ble.n	800d6bc <__kernel_rem_pio2+0x4f0>
 800d6ba:	e08a      	b.n	800d7d2 <__kernel_rem_pio2+0x606>
 800d6bc:	d055      	beq.n	800d76a <__kernel_rem_pio2+0x59e>
 800d6be:	2007      	movs	r0, #7
 800d6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6c2:	4003      	ands	r3, r0
 800d6c4:	0018      	movs	r0, r3
 800d6c6:	239f      	movs	r3, #159	; 0x9f
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	449d      	add	sp, r3
 800d6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d6d0:	2b03      	cmp	r3, #3
 800d6d2:	d1f4      	bne.n	800d6be <__kernel_rem_pio2+0x4f2>
 800d6d4:	9b00      	ldr	r3, [sp, #0]
 800d6d6:	00dc      	lsls	r4, r3, #3
 800d6d8:	ab4e      	add	r3, sp, #312	; 0x138
 800d6da:	191c      	adds	r4, r3, r4
 800d6dc:	0025      	movs	r5, r4
 800d6de:	9b00      	ldr	r3, [sp, #0]
 800d6e0:	9302      	str	r3, [sp, #8]
 800d6e2:	9b02      	ldr	r3, [sp, #8]
 800d6e4:	3d08      	subs	r5, #8
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	dd00      	ble.n	800d6ec <__kernel_rem_pio2+0x520>
 800d6ea:	e083      	b.n	800d7f4 <__kernel_rem_pio2+0x628>
 800d6ec:	9d00      	ldr	r5, [sp, #0]
 800d6ee:	3c08      	subs	r4, #8
 800d6f0:	2d01      	cmp	r5, #1
 800d6f2:	dd00      	ble.n	800d6f6 <__kernel_rem_pio2+0x52a>
 800d6f4:	e0a0      	b.n	800d838 <__kernel_rem_pio2+0x66c>
 800d6f6:	2400      	movs	r4, #0
 800d6f8:	0021      	movs	r1, r4
 800d6fa:	9b00      	ldr	r3, [sp, #0]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	dd00      	ble.n	800d702 <__kernel_rem_pio2+0x536>
 800d700:	e0b8      	b.n	800d874 <__kernel_rem_pio2+0x6a8>
 800d702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d704:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800d706:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 800d708:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800d70a:	9851      	ldr	r0, [sp, #324]	; 0x144
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d000      	beq.n	800d712 <__kernel_rem_pio2+0x546>
 800d710:	e0be      	b.n	800d890 <__kernel_rem_pio2+0x6c4>
 800d712:	0033      	movs	r3, r6
 800d714:	003a      	movs	r2, r7
 800d716:	9e07      	ldr	r6, [sp, #28]
 800d718:	6032      	str	r2, [r6, #0]
 800d71a:	6073      	str	r3, [r6, #4]
 800d71c:	002a      	movs	r2, r5
 800d71e:	0003      	movs	r3, r0
 800d720:	60b2      	str	r2, [r6, #8]
 800d722:	60f3      	str	r3, [r6, #12]
 800d724:	0022      	movs	r2, r4
 800d726:	000b      	movs	r3, r1
 800d728:	6132      	str	r2, [r6, #16]
 800d72a:	6173      	str	r3, [r6, #20]
 800d72c:	e7c7      	b.n	800d6be <__kernel_rem_pio2+0x4f2>
 800d72e:	9b00      	ldr	r3, [sp, #0]
 800d730:	aa4e      	add	r2, sp, #312	; 0x138
 800d732:	00db      	lsls	r3, r3, #3
 800d734:	18d3      	adds	r3, r2, r3
 800d736:	0028      	movs	r0, r5
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	0021      	movs	r1, r4
 800d73e:	f7f3 fc7f 	bl	8001040 <__aeabi_dadd>
 800d742:	0005      	movs	r5, r0
 800d744:	000c      	movs	r4, r1
 800d746:	9b00      	ldr	r3, [sp, #0]
 800d748:	3b01      	subs	r3, #1
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	9b00      	ldr	r3, [sp, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	daed      	bge.n	800d72e <__kernel_rem_pio2+0x562>
 800d752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d754:	2b00      	cmp	r3, #0
 800d756:	d002      	beq.n	800d75e <__kernel_rem_pio2+0x592>
 800d758:	2380      	movs	r3, #128	; 0x80
 800d75a:	061b      	lsls	r3, r3, #24
 800d75c:	18e4      	adds	r4, r4, r3
 800d75e:	002a      	movs	r2, r5
 800d760:	0023      	movs	r3, r4
 800d762:	9907      	ldr	r1, [sp, #28]
 800d764:	600a      	str	r2, [r1, #0]
 800d766:	604b      	str	r3, [r1, #4]
 800d768:	e7a9      	b.n	800d6be <__kernel_rem_pio2+0x4f2>
 800d76a:	9da4      	ldr	r5, [sp, #656]	; 0x290
 800d76c:	002c      	movs	r4, r5
 800d76e:	e7ed      	b.n	800d74c <__kernel_rem_pio2+0x580>
 800d770:	00e3      	lsls	r3, r4, #3
 800d772:	aa4e      	add	r2, sp, #312	; 0x138
 800d774:	18d3      	adds	r3, r2, r3
 800d776:	0030      	movs	r0, r6
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	0029      	movs	r1, r5
 800d77e:	f7f3 fc5f 	bl	8001040 <__aeabi_dadd>
 800d782:	0006      	movs	r6, r0
 800d784:	000d      	movs	r5, r1
 800d786:	3c01      	subs	r4, #1
 800d788:	2c00      	cmp	r4, #0
 800d78a:	daf1      	bge.n	800d770 <__kernel_rem_pio2+0x5a4>
 800d78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d78e:	0029      	movs	r1, r5
 800d790:	2b00      	cmp	r3, #0
 800d792:	d002      	beq.n	800d79a <__kernel_rem_pio2+0x5ce>
 800d794:	2380      	movs	r3, #128	; 0x80
 800d796:	061b      	lsls	r3, r3, #24
 800d798:	18e9      	adds	r1, r5, r3
 800d79a:	0032      	movs	r2, r6
 800d79c:	000b      	movs	r3, r1
 800d79e:	9907      	ldr	r1, [sp, #28]
 800d7a0:	2401      	movs	r4, #1
 800d7a2:	600a      	str	r2, [r1, #0]
 800d7a4:	604b      	str	r3, [r1, #4]
 800d7a6:	984e      	ldr	r0, [sp, #312]	; 0x138
 800d7a8:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800d7aa:	002b      	movs	r3, r5
 800d7ac:	f7f4 fe24 	bl	80023f8 <__aeabi_dsub>
 800d7b0:	0006      	movs	r6, r0
 800d7b2:	000d      	movs	r5, r1
 800d7b4:	9b00      	ldr	r3, [sp, #0]
 800d7b6:	42a3      	cmp	r3, r4
 800d7b8:	da0f      	bge.n	800d7da <__kernel_rem_pio2+0x60e>
 800d7ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <__kernel_rem_pio2+0x5fa>
 800d7c0:	2380      	movs	r3, #128	; 0x80
 800d7c2:	061b      	lsls	r3, r3, #24
 800d7c4:	18ed      	adds	r5, r5, r3
 800d7c6:	0032      	movs	r2, r6
 800d7c8:	002b      	movs	r3, r5
 800d7ca:	9907      	ldr	r1, [sp, #28]
 800d7cc:	608a      	str	r2, [r1, #8]
 800d7ce:	60cb      	str	r3, [r1, #12]
 800d7d0:	e775      	b.n	800d6be <__kernel_rem_pio2+0x4f2>
 800d7d2:	2600      	movs	r6, #0
 800d7d4:	9c00      	ldr	r4, [sp, #0]
 800d7d6:	0035      	movs	r5, r6
 800d7d8:	e7d6      	b.n	800d788 <__kernel_rem_pio2+0x5bc>
 800d7da:	00e3      	lsls	r3, r4, #3
 800d7dc:	aa4e      	add	r2, sp, #312	; 0x138
 800d7de:	18d3      	adds	r3, r2, r3
 800d7e0:	0030      	movs	r0, r6
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	0029      	movs	r1, r5
 800d7e8:	f7f3 fc2a 	bl	8001040 <__aeabi_dadd>
 800d7ec:	3401      	adds	r4, #1
 800d7ee:	0006      	movs	r6, r0
 800d7f0:	000d      	movs	r5, r1
 800d7f2:	e7df      	b.n	800d7b4 <__kernel_rem_pio2+0x5e8>
 800d7f4:	9b02      	ldr	r3, [sp, #8]
 800d7f6:	68ae      	ldr	r6, [r5, #8]
 800d7f8:	68ef      	ldr	r7, [r5, #12]
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	9302      	str	r3, [sp, #8]
 800d7fe:	682a      	ldr	r2, [r5, #0]
 800d800:	686b      	ldr	r3, [r5, #4]
 800d802:	9204      	str	r2, [sp, #16]
 800d804:	9305      	str	r3, [sp, #20]
 800d806:	9804      	ldr	r0, [sp, #16]
 800d808:	9905      	ldr	r1, [sp, #20]
 800d80a:	0032      	movs	r2, r6
 800d80c:	003b      	movs	r3, r7
 800d80e:	f7f3 fc17 	bl	8001040 <__aeabi_dadd>
 800d812:	0002      	movs	r2, r0
 800d814:	000b      	movs	r3, r1
 800d816:	9008      	str	r0, [sp, #32]
 800d818:	9109      	str	r1, [sp, #36]	; 0x24
 800d81a:	9804      	ldr	r0, [sp, #16]
 800d81c:	9905      	ldr	r1, [sp, #20]
 800d81e:	f7f4 fdeb 	bl	80023f8 <__aeabi_dsub>
 800d822:	0032      	movs	r2, r6
 800d824:	003b      	movs	r3, r7
 800d826:	f7f3 fc0b 	bl	8001040 <__aeabi_dadd>
 800d82a:	9a08      	ldr	r2, [sp, #32]
 800d82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d82e:	60a8      	str	r0, [r5, #8]
 800d830:	60e9      	str	r1, [r5, #12]
 800d832:	602a      	str	r2, [r5, #0]
 800d834:	606b      	str	r3, [r5, #4]
 800d836:	e754      	b.n	800d6e2 <__kernel_rem_pio2+0x516>
 800d838:	6826      	ldr	r6, [r4, #0]
 800d83a:	6867      	ldr	r7, [r4, #4]
 800d83c:	68a2      	ldr	r2, [r4, #8]
 800d83e:	68e3      	ldr	r3, [r4, #12]
 800d840:	0030      	movs	r0, r6
 800d842:	0039      	movs	r1, r7
 800d844:	9202      	str	r2, [sp, #8]
 800d846:	9303      	str	r3, [sp, #12]
 800d848:	f7f3 fbfa 	bl	8001040 <__aeabi_dadd>
 800d84c:	0002      	movs	r2, r0
 800d84e:	000b      	movs	r3, r1
 800d850:	9004      	str	r0, [sp, #16]
 800d852:	9105      	str	r1, [sp, #20]
 800d854:	0030      	movs	r0, r6
 800d856:	0039      	movs	r1, r7
 800d858:	f7f4 fdce 	bl	80023f8 <__aeabi_dsub>
 800d85c:	9a02      	ldr	r2, [sp, #8]
 800d85e:	9b03      	ldr	r3, [sp, #12]
 800d860:	f7f3 fbee 	bl	8001040 <__aeabi_dadd>
 800d864:	9a04      	ldr	r2, [sp, #16]
 800d866:	9b05      	ldr	r3, [sp, #20]
 800d868:	60a0      	str	r0, [r4, #8]
 800d86a:	60e1      	str	r1, [r4, #12]
 800d86c:	6022      	str	r2, [r4, #0]
 800d86e:	6063      	str	r3, [r4, #4]
 800d870:	3d01      	subs	r5, #1
 800d872:	e73c      	b.n	800d6ee <__kernel_rem_pio2+0x522>
 800d874:	9b00      	ldr	r3, [sp, #0]
 800d876:	aa4e      	add	r2, sp, #312	; 0x138
 800d878:	00db      	lsls	r3, r3, #3
 800d87a:	18d3      	adds	r3, r2, r3
 800d87c:	0020      	movs	r0, r4
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	f7f3 fbdd 	bl	8001040 <__aeabi_dadd>
 800d886:	9b00      	ldr	r3, [sp, #0]
 800d888:	0004      	movs	r4, r0
 800d88a:	3b01      	subs	r3, #1
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	e734      	b.n	800d6fa <__kernel_rem_pio2+0x52e>
 800d890:	9b07      	ldr	r3, [sp, #28]
 800d892:	9a07      	ldr	r2, [sp, #28]
 800d894:	601f      	str	r7, [r3, #0]
 800d896:	2380      	movs	r3, #128	; 0x80
 800d898:	061b      	lsls	r3, r3, #24
 800d89a:	18f6      	adds	r6, r6, r3
 800d89c:	18c0      	adds	r0, r0, r3
 800d89e:	18c9      	adds	r1, r1, r3
 800d8a0:	6056      	str	r6, [r2, #4]
 800d8a2:	6095      	str	r5, [r2, #8]
 800d8a4:	60d0      	str	r0, [r2, #12]
 800d8a6:	6114      	str	r4, [r2, #16]
 800d8a8:	6151      	str	r1, [r2, #20]
 800d8aa:	e708      	b.n	800d6be <__kernel_rem_pio2+0x4f2>
 800d8ac:	41700000 	.word	0x41700000
 800d8b0:	3e700000 	.word	0x3e700000
 800d8b4:	0800e780 	.word	0x0800e780

0800d8b8 <__kernel_sin>:
 800d8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ba:	b089      	sub	sp, #36	; 0x24
 800d8bc:	9202      	str	r2, [sp, #8]
 800d8be:	9303      	str	r3, [sp, #12]
 800d8c0:	22f9      	movs	r2, #249	; 0xf9
 800d8c2:	004b      	lsls	r3, r1, #1
 800d8c4:	0007      	movs	r7, r0
 800d8c6:	000e      	movs	r6, r1
 800d8c8:	085b      	lsrs	r3, r3, #1
 800d8ca:	0592      	lsls	r2, r2, #22
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	da03      	bge.n	800d8d8 <__kernel_sin+0x20>
 800d8d0:	f7f5 f942 	bl	8002b58 <__aeabi_d2iz>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d04c      	beq.n	800d972 <__kernel_sin+0xba>
 800d8d8:	003a      	movs	r2, r7
 800d8da:	0033      	movs	r3, r6
 800d8dc:	0038      	movs	r0, r7
 800d8de:	0031      	movs	r1, r6
 800d8e0:	f7f4 fb1e 	bl	8001f20 <__aeabi_dmul>
 800d8e4:	0004      	movs	r4, r0
 800d8e6:	000d      	movs	r5, r1
 800d8e8:	0002      	movs	r2, r0
 800d8ea:	000b      	movs	r3, r1
 800d8ec:	0038      	movs	r0, r7
 800d8ee:	0031      	movs	r1, r6
 800d8f0:	f7f4 fb16 	bl	8001f20 <__aeabi_dmul>
 800d8f4:	4a39      	ldr	r2, [pc, #228]	; (800d9dc <__kernel_sin+0x124>)
 800d8f6:	9000      	str	r0, [sp, #0]
 800d8f8:	9101      	str	r1, [sp, #4]
 800d8fa:	4b39      	ldr	r3, [pc, #228]	; (800d9e0 <__kernel_sin+0x128>)
 800d8fc:	0020      	movs	r0, r4
 800d8fe:	0029      	movs	r1, r5
 800d900:	f7f4 fb0e 	bl	8001f20 <__aeabi_dmul>
 800d904:	4a37      	ldr	r2, [pc, #220]	; (800d9e4 <__kernel_sin+0x12c>)
 800d906:	4b38      	ldr	r3, [pc, #224]	; (800d9e8 <__kernel_sin+0x130>)
 800d908:	f7f4 fd76 	bl	80023f8 <__aeabi_dsub>
 800d90c:	0022      	movs	r2, r4
 800d90e:	002b      	movs	r3, r5
 800d910:	f7f4 fb06 	bl	8001f20 <__aeabi_dmul>
 800d914:	4a35      	ldr	r2, [pc, #212]	; (800d9ec <__kernel_sin+0x134>)
 800d916:	4b36      	ldr	r3, [pc, #216]	; (800d9f0 <__kernel_sin+0x138>)
 800d918:	f7f3 fb92 	bl	8001040 <__aeabi_dadd>
 800d91c:	0022      	movs	r2, r4
 800d91e:	002b      	movs	r3, r5
 800d920:	f7f4 fafe 	bl	8001f20 <__aeabi_dmul>
 800d924:	4a33      	ldr	r2, [pc, #204]	; (800d9f4 <__kernel_sin+0x13c>)
 800d926:	4b34      	ldr	r3, [pc, #208]	; (800d9f8 <__kernel_sin+0x140>)
 800d928:	f7f4 fd66 	bl	80023f8 <__aeabi_dsub>
 800d92c:	0022      	movs	r2, r4
 800d92e:	002b      	movs	r3, r5
 800d930:	f7f4 faf6 	bl	8001f20 <__aeabi_dmul>
 800d934:	4b31      	ldr	r3, [pc, #196]	; (800d9fc <__kernel_sin+0x144>)
 800d936:	4a32      	ldr	r2, [pc, #200]	; (800da00 <__kernel_sin+0x148>)
 800d938:	f7f3 fb82 	bl	8001040 <__aeabi_dadd>
 800d93c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d93e:	9004      	str	r0, [sp, #16]
 800d940:	9105      	str	r1, [sp, #20]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d119      	bne.n	800d97a <__kernel_sin+0xc2>
 800d946:	0002      	movs	r2, r0
 800d948:	000b      	movs	r3, r1
 800d94a:	0020      	movs	r0, r4
 800d94c:	0029      	movs	r1, r5
 800d94e:	f7f4 fae7 	bl	8001f20 <__aeabi_dmul>
 800d952:	4a2c      	ldr	r2, [pc, #176]	; (800da04 <__kernel_sin+0x14c>)
 800d954:	4b2c      	ldr	r3, [pc, #176]	; (800da08 <__kernel_sin+0x150>)
 800d956:	f7f4 fd4f 	bl	80023f8 <__aeabi_dsub>
 800d95a:	9a00      	ldr	r2, [sp, #0]
 800d95c:	9b01      	ldr	r3, [sp, #4]
 800d95e:	f7f4 fadf 	bl	8001f20 <__aeabi_dmul>
 800d962:	0002      	movs	r2, r0
 800d964:	000b      	movs	r3, r1
 800d966:	0038      	movs	r0, r7
 800d968:	0031      	movs	r1, r6
 800d96a:	f7f3 fb69 	bl	8001040 <__aeabi_dadd>
 800d96e:	0007      	movs	r7, r0
 800d970:	000e      	movs	r6, r1
 800d972:	0038      	movs	r0, r7
 800d974:	0031      	movs	r1, r6
 800d976:	b009      	add	sp, #36	; 0x24
 800d978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d97a:	2200      	movs	r2, #0
 800d97c:	9802      	ldr	r0, [sp, #8]
 800d97e:	9903      	ldr	r1, [sp, #12]
 800d980:	4b22      	ldr	r3, [pc, #136]	; (800da0c <__kernel_sin+0x154>)
 800d982:	f7f4 facd 	bl	8001f20 <__aeabi_dmul>
 800d986:	9a04      	ldr	r2, [sp, #16]
 800d988:	9b05      	ldr	r3, [sp, #20]
 800d98a:	9006      	str	r0, [sp, #24]
 800d98c:	9107      	str	r1, [sp, #28]
 800d98e:	9800      	ldr	r0, [sp, #0]
 800d990:	9901      	ldr	r1, [sp, #4]
 800d992:	f7f4 fac5 	bl	8001f20 <__aeabi_dmul>
 800d996:	0002      	movs	r2, r0
 800d998:	000b      	movs	r3, r1
 800d99a:	9806      	ldr	r0, [sp, #24]
 800d99c:	9907      	ldr	r1, [sp, #28]
 800d99e:	f7f4 fd2b 	bl	80023f8 <__aeabi_dsub>
 800d9a2:	0022      	movs	r2, r4
 800d9a4:	002b      	movs	r3, r5
 800d9a6:	f7f4 fabb 	bl	8001f20 <__aeabi_dmul>
 800d9aa:	9a02      	ldr	r2, [sp, #8]
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	f7f4 fd23 	bl	80023f8 <__aeabi_dsub>
 800d9b2:	4a14      	ldr	r2, [pc, #80]	; (800da04 <__kernel_sin+0x14c>)
 800d9b4:	0004      	movs	r4, r0
 800d9b6:	000d      	movs	r5, r1
 800d9b8:	9800      	ldr	r0, [sp, #0]
 800d9ba:	9901      	ldr	r1, [sp, #4]
 800d9bc:	4b12      	ldr	r3, [pc, #72]	; (800da08 <__kernel_sin+0x150>)
 800d9be:	f7f4 faaf 	bl	8001f20 <__aeabi_dmul>
 800d9c2:	0002      	movs	r2, r0
 800d9c4:	000b      	movs	r3, r1
 800d9c6:	0020      	movs	r0, r4
 800d9c8:	0029      	movs	r1, r5
 800d9ca:	f7f3 fb39 	bl	8001040 <__aeabi_dadd>
 800d9ce:	0002      	movs	r2, r0
 800d9d0:	000b      	movs	r3, r1
 800d9d2:	0038      	movs	r0, r7
 800d9d4:	0031      	movs	r1, r6
 800d9d6:	f7f4 fd0f 	bl	80023f8 <__aeabi_dsub>
 800d9da:	e7c8      	b.n	800d96e <__kernel_sin+0xb6>
 800d9dc:	5acfd57c 	.word	0x5acfd57c
 800d9e0:	3de5d93a 	.word	0x3de5d93a
 800d9e4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d9e8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d9ec:	57b1fe7d 	.word	0x57b1fe7d
 800d9f0:	3ec71de3 	.word	0x3ec71de3
 800d9f4:	19c161d5 	.word	0x19c161d5
 800d9f8:	3f2a01a0 	.word	0x3f2a01a0
 800d9fc:	3f811111 	.word	0x3f811111
 800da00:	1110f8a6 	.word	0x1110f8a6
 800da04:	55555549 	.word	0x55555549
 800da08:	3fc55555 	.word	0x3fc55555
 800da0c:	3fe00000 	.word	0x3fe00000

0800da10 <finite>:
 800da10:	4b02      	ldr	r3, [pc, #8]	; (800da1c <finite+0xc>)
 800da12:	0048      	lsls	r0, r1, #1
 800da14:	0840      	lsrs	r0, r0, #1
 800da16:	18c0      	adds	r0, r0, r3
 800da18:	0fc0      	lsrs	r0, r0, #31
 800da1a:	4770      	bx	lr
 800da1c:	80100000 	.word	0x80100000

0800da20 <floor>:
 800da20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da22:	004b      	lsls	r3, r1, #1
 800da24:	4a3d      	ldr	r2, [pc, #244]	; (800db1c <floor+0xfc>)
 800da26:	0d5b      	lsrs	r3, r3, #21
 800da28:	189f      	adds	r7, r3, r2
 800da2a:	4684      	mov	ip, r0
 800da2c:	000e      	movs	r6, r1
 800da2e:	000d      	movs	r5, r1
 800da30:	0004      	movs	r4, r0
 800da32:	9001      	str	r0, [sp, #4]
 800da34:	2f13      	cmp	r7, #19
 800da36:	dc34      	bgt.n	800daa2 <floor+0x82>
 800da38:	2f00      	cmp	r7, #0
 800da3a:	da16      	bge.n	800da6a <floor+0x4a>
 800da3c:	4a38      	ldr	r2, [pc, #224]	; (800db20 <floor+0x100>)
 800da3e:	4b39      	ldr	r3, [pc, #228]	; (800db24 <floor+0x104>)
 800da40:	4660      	mov	r0, ip
 800da42:	0031      	movs	r1, r6
 800da44:	f7f3 fafc 	bl	8001040 <__aeabi_dadd>
 800da48:	2200      	movs	r2, #0
 800da4a:	2300      	movs	r3, #0
 800da4c:	f7f2 fd14 	bl	8000478 <__aeabi_dcmpgt>
 800da50:	2800      	cmp	r0, #0
 800da52:	d007      	beq.n	800da64 <floor+0x44>
 800da54:	2e00      	cmp	r6, #0
 800da56:	da5d      	bge.n	800db14 <floor+0xf4>
 800da58:	0073      	lsls	r3, r6, #1
 800da5a:	085b      	lsrs	r3, r3, #1
 800da5c:	431c      	orrs	r4, r3
 800da5e:	d001      	beq.n	800da64 <floor+0x44>
 800da60:	2400      	movs	r4, #0
 800da62:	4d31      	ldr	r5, [pc, #196]	; (800db28 <floor+0x108>)
 800da64:	46a4      	mov	ip, r4
 800da66:	002e      	movs	r6, r5
 800da68:	e029      	b.n	800dabe <floor+0x9e>
 800da6a:	4b30      	ldr	r3, [pc, #192]	; (800db2c <floor+0x10c>)
 800da6c:	413b      	asrs	r3, r7
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	400b      	ands	r3, r1
 800da72:	4303      	orrs	r3, r0
 800da74:	d023      	beq.n	800dabe <floor+0x9e>
 800da76:	4a2a      	ldr	r2, [pc, #168]	; (800db20 <floor+0x100>)
 800da78:	4b2a      	ldr	r3, [pc, #168]	; (800db24 <floor+0x104>)
 800da7a:	4660      	mov	r0, ip
 800da7c:	0031      	movs	r1, r6
 800da7e:	f7f3 fadf 	bl	8001040 <__aeabi_dadd>
 800da82:	2200      	movs	r2, #0
 800da84:	2300      	movs	r3, #0
 800da86:	f7f2 fcf7 	bl	8000478 <__aeabi_dcmpgt>
 800da8a:	2800      	cmp	r0, #0
 800da8c:	d0ea      	beq.n	800da64 <floor+0x44>
 800da8e:	2e00      	cmp	r6, #0
 800da90:	da03      	bge.n	800da9a <floor+0x7a>
 800da92:	2380      	movs	r3, #128	; 0x80
 800da94:	035b      	lsls	r3, r3, #13
 800da96:	413b      	asrs	r3, r7
 800da98:	18f5      	adds	r5, r6, r3
 800da9a:	9b00      	ldr	r3, [sp, #0]
 800da9c:	2400      	movs	r4, #0
 800da9e:	439d      	bics	r5, r3
 800daa0:	e7e0      	b.n	800da64 <floor+0x44>
 800daa2:	2f33      	cmp	r7, #51	; 0x33
 800daa4:	dd0f      	ble.n	800dac6 <floor+0xa6>
 800daa6:	2380      	movs	r3, #128	; 0x80
 800daa8:	00db      	lsls	r3, r3, #3
 800daaa:	429f      	cmp	r7, r3
 800daac:	d107      	bne.n	800dabe <floor+0x9e>
 800daae:	0002      	movs	r2, r0
 800dab0:	000b      	movs	r3, r1
 800dab2:	4660      	mov	r0, ip
 800dab4:	0031      	movs	r1, r6
 800dab6:	f7f3 fac3 	bl	8001040 <__aeabi_dadd>
 800daba:	4684      	mov	ip, r0
 800dabc:	000e      	movs	r6, r1
 800dabe:	4660      	mov	r0, ip
 800dac0:	0031      	movs	r1, r6
 800dac2:	b003      	add	sp, #12
 800dac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dac6:	4a1a      	ldr	r2, [pc, #104]	; (800db30 <floor+0x110>)
 800dac8:	189b      	adds	r3, r3, r2
 800daca:	2201      	movs	r2, #1
 800dacc:	4252      	negs	r2, r2
 800dace:	40da      	lsrs	r2, r3
 800dad0:	9200      	str	r2, [sp, #0]
 800dad2:	4210      	tst	r0, r2
 800dad4:	d0f3      	beq.n	800dabe <floor+0x9e>
 800dad6:	4a12      	ldr	r2, [pc, #72]	; (800db20 <floor+0x100>)
 800dad8:	4b12      	ldr	r3, [pc, #72]	; (800db24 <floor+0x104>)
 800dada:	4660      	mov	r0, ip
 800dadc:	0031      	movs	r1, r6
 800dade:	f7f3 faaf 	bl	8001040 <__aeabi_dadd>
 800dae2:	2200      	movs	r2, #0
 800dae4:	2300      	movs	r3, #0
 800dae6:	f7f2 fcc7 	bl	8000478 <__aeabi_dcmpgt>
 800daea:	2800      	cmp	r0, #0
 800daec:	d0ba      	beq.n	800da64 <floor+0x44>
 800daee:	2e00      	cmp	r6, #0
 800daf0:	da02      	bge.n	800daf8 <floor+0xd8>
 800daf2:	2f14      	cmp	r7, #20
 800daf4:	d103      	bne.n	800dafe <floor+0xde>
 800daf6:	3501      	adds	r5, #1
 800daf8:	9b00      	ldr	r3, [sp, #0]
 800dafa:	439c      	bics	r4, r3
 800dafc:	e7b2      	b.n	800da64 <floor+0x44>
 800dafe:	2334      	movs	r3, #52	; 0x34
 800db00:	1bdf      	subs	r7, r3, r7
 800db02:	3b33      	subs	r3, #51	; 0x33
 800db04:	40bb      	lsls	r3, r7
 800db06:	18e4      	adds	r4, r4, r3
 800db08:	9b01      	ldr	r3, [sp, #4]
 800db0a:	429c      	cmp	r4, r3
 800db0c:	419b      	sbcs	r3, r3
 800db0e:	425b      	negs	r3, r3
 800db10:	18f5      	adds	r5, r6, r3
 800db12:	e7f1      	b.n	800daf8 <floor+0xd8>
 800db14:	2400      	movs	r4, #0
 800db16:	0025      	movs	r5, r4
 800db18:	e7a4      	b.n	800da64 <floor+0x44>
 800db1a:	46c0      	nop			; (mov r8, r8)
 800db1c:	fffffc01 	.word	0xfffffc01
 800db20:	8800759c 	.word	0x8800759c
 800db24:	7e37e43c 	.word	0x7e37e43c
 800db28:	bff00000 	.word	0xbff00000
 800db2c:	000fffff 	.word	0x000fffff
 800db30:	fffffbed 	.word	0xfffffbed

0800db34 <nan>:
 800db34:	2000      	movs	r0, #0
 800db36:	4901      	ldr	r1, [pc, #4]	; (800db3c <nan+0x8>)
 800db38:	4770      	bx	lr
 800db3a:	46c0      	nop			; (mov r8, r8)
 800db3c:	7ff80000 	.word	0x7ff80000

0800db40 <rint>:
 800db40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db42:	004a      	lsls	r2, r1, #1
 800db44:	4e3e      	ldr	r6, [pc, #248]	; (800dc40 <rint+0x100>)
 800db46:	0d52      	lsrs	r2, r2, #21
 800db48:	b085      	sub	sp, #20
 800db4a:	1996      	adds	r6, r2, r6
 800db4c:	000d      	movs	r5, r1
 800db4e:	0003      	movs	r3, r0
 800db50:	9101      	str	r1, [sp, #4]
 800db52:	0fcc      	lsrs	r4, r1, #31
 800db54:	2e13      	cmp	r6, #19
 800db56:	dc57      	bgt.n	800dc08 <rint+0xc8>
 800db58:	2e00      	cmp	r6, #0
 800db5a:	da2a      	bge.n	800dbb2 <rint+0x72>
 800db5c:	004a      	lsls	r2, r1, #1
 800db5e:	0852      	lsrs	r2, r2, #1
 800db60:	4302      	orrs	r2, r0
 800db62:	d024      	beq.n	800dbae <rint+0x6e>
 800db64:	030a      	lsls	r2, r1, #12
 800db66:	0b12      	lsrs	r2, r2, #12
 800db68:	4302      	orrs	r2, r0
 800db6a:	4253      	negs	r3, r2
 800db6c:	4313      	orrs	r3, r2
 800db6e:	2280      	movs	r2, #128	; 0x80
 800db70:	0c4d      	lsrs	r5, r1, #17
 800db72:	0312      	lsls	r2, r2, #12
 800db74:	0b1b      	lsrs	r3, r3, #12
 800db76:	4013      	ands	r3, r2
 800db78:	046d      	lsls	r5, r5, #17
 800db7a:	432b      	orrs	r3, r5
 800db7c:	0019      	movs	r1, r3
 800db7e:	4b31      	ldr	r3, [pc, #196]	; (800dc44 <rint+0x104>)
 800db80:	00e2      	lsls	r2, r4, #3
 800db82:	189b      	adds	r3, r3, r2
 800db84:	681e      	ldr	r6, [r3, #0]
 800db86:	685f      	ldr	r7, [r3, #4]
 800db88:	0002      	movs	r2, r0
 800db8a:	000b      	movs	r3, r1
 800db8c:	0030      	movs	r0, r6
 800db8e:	0039      	movs	r1, r7
 800db90:	f7f3 fa56 	bl	8001040 <__aeabi_dadd>
 800db94:	9002      	str	r0, [sp, #8]
 800db96:	9103      	str	r1, [sp, #12]
 800db98:	9802      	ldr	r0, [sp, #8]
 800db9a:	9903      	ldr	r1, [sp, #12]
 800db9c:	003b      	movs	r3, r7
 800db9e:	0032      	movs	r2, r6
 800dba0:	f7f4 fc2a 	bl	80023f8 <__aeabi_dsub>
 800dba4:	004b      	lsls	r3, r1, #1
 800dba6:	085b      	lsrs	r3, r3, #1
 800dba8:	07e4      	lsls	r4, r4, #31
 800dbaa:	4323      	orrs	r3, r4
 800dbac:	0019      	movs	r1, r3
 800dbae:	b005      	add	sp, #20
 800dbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbb2:	4a25      	ldr	r2, [pc, #148]	; (800dc48 <rint+0x108>)
 800dbb4:	4132      	asrs	r2, r6
 800dbb6:	0017      	movs	r7, r2
 800dbb8:	400f      	ands	r7, r1
 800dbba:	4307      	orrs	r7, r0
 800dbbc:	d0f7      	beq.n	800dbae <rint+0x6e>
 800dbbe:	0852      	lsrs	r2, r2, #1
 800dbc0:	0011      	movs	r1, r2
 800dbc2:	4029      	ands	r1, r5
 800dbc4:	430b      	orrs	r3, r1
 800dbc6:	d00a      	beq.n	800dbde <rint+0x9e>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	2e13      	cmp	r6, #19
 800dbcc:	d101      	bne.n	800dbd2 <rint+0x92>
 800dbce:	2380      	movs	r3, #128	; 0x80
 800dbd0:	061b      	lsls	r3, r3, #24
 800dbd2:	2780      	movs	r7, #128	; 0x80
 800dbd4:	02ff      	lsls	r7, r7, #11
 800dbd6:	4137      	asrs	r7, r6
 800dbd8:	4395      	bics	r5, r2
 800dbda:	432f      	orrs	r7, r5
 800dbdc:	9701      	str	r7, [sp, #4]
 800dbde:	9901      	ldr	r1, [sp, #4]
 800dbe0:	001a      	movs	r2, r3
 800dbe2:	000b      	movs	r3, r1
 800dbe4:	4917      	ldr	r1, [pc, #92]	; (800dc44 <rint+0x104>)
 800dbe6:	00e4      	lsls	r4, r4, #3
 800dbe8:	190c      	adds	r4, r1, r4
 800dbea:	6865      	ldr	r5, [r4, #4]
 800dbec:	6824      	ldr	r4, [r4, #0]
 800dbee:	0020      	movs	r0, r4
 800dbf0:	0029      	movs	r1, r5
 800dbf2:	f7f3 fa25 	bl	8001040 <__aeabi_dadd>
 800dbf6:	9002      	str	r0, [sp, #8]
 800dbf8:	9103      	str	r1, [sp, #12]
 800dbfa:	9802      	ldr	r0, [sp, #8]
 800dbfc:	9903      	ldr	r1, [sp, #12]
 800dbfe:	0022      	movs	r2, r4
 800dc00:	002b      	movs	r3, r5
 800dc02:	f7f4 fbf9 	bl	80023f8 <__aeabi_dsub>
 800dc06:	e7d2      	b.n	800dbae <rint+0x6e>
 800dc08:	2e33      	cmp	r6, #51	; 0x33
 800dc0a:	dd08      	ble.n	800dc1e <rint+0xde>
 800dc0c:	2380      	movs	r3, #128	; 0x80
 800dc0e:	00db      	lsls	r3, r3, #3
 800dc10:	429e      	cmp	r6, r3
 800dc12:	d1cc      	bne.n	800dbae <rint+0x6e>
 800dc14:	0002      	movs	r2, r0
 800dc16:	000b      	movs	r3, r1
 800dc18:	f7f3 fa12 	bl	8001040 <__aeabi_dadd>
 800dc1c:	e7c7      	b.n	800dbae <rint+0x6e>
 800dc1e:	2601      	movs	r6, #1
 800dc20:	4d0a      	ldr	r5, [pc, #40]	; (800dc4c <rint+0x10c>)
 800dc22:	4276      	negs	r6, r6
 800dc24:	1952      	adds	r2, r2, r5
 800dc26:	40d6      	lsrs	r6, r2
 800dc28:	4206      	tst	r6, r0
 800dc2a:	d0c0      	beq.n	800dbae <rint+0x6e>
 800dc2c:	0876      	lsrs	r6, r6, #1
 800dc2e:	4206      	tst	r6, r0
 800dc30:	d0d5      	beq.n	800dbde <rint+0x9e>
 800dc32:	2180      	movs	r1, #128	; 0x80
 800dc34:	05c9      	lsls	r1, r1, #23
 800dc36:	4111      	asrs	r1, r2
 800dc38:	43b3      	bics	r3, r6
 800dc3a:	430b      	orrs	r3, r1
 800dc3c:	e7cf      	b.n	800dbde <rint+0x9e>
 800dc3e:	46c0      	nop			; (mov r8, r8)
 800dc40:	fffffc01 	.word	0xfffffc01
 800dc44:	0800e7d0 	.word	0x0800e7d0
 800dc48:	000fffff 	.word	0x000fffff
 800dc4c:	fffffbed 	.word	0xfffffbed

0800dc50 <scalbn>:
 800dc50:	004b      	lsls	r3, r1, #1
 800dc52:	b570      	push	{r4, r5, r6, lr}
 800dc54:	0d5b      	lsrs	r3, r3, #21
 800dc56:	0014      	movs	r4, r2
 800dc58:	000a      	movs	r2, r1
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10d      	bne.n	800dc7a <scalbn+0x2a>
 800dc5e:	004b      	lsls	r3, r1, #1
 800dc60:	085b      	lsrs	r3, r3, #1
 800dc62:	4303      	orrs	r3, r0
 800dc64:	d010      	beq.n	800dc88 <scalbn+0x38>
 800dc66:	4b27      	ldr	r3, [pc, #156]	; (800dd04 <scalbn+0xb4>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f7f4 f959 	bl	8001f20 <__aeabi_dmul>
 800dc6e:	4b26      	ldr	r3, [pc, #152]	; (800dd08 <scalbn+0xb8>)
 800dc70:	429c      	cmp	r4, r3
 800dc72:	da0a      	bge.n	800dc8a <scalbn+0x3a>
 800dc74:	4a25      	ldr	r2, [pc, #148]	; (800dd0c <scalbn+0xbc>)
 800dc76:	4b26      	ldr	r3, [pc, #152]	; (800dd10 <scalbn+0xc0>)
 800dc78:	e019      	b.n	800dcae <scalbn+0x5e>
 800dc7a:	4d26      	ldr	r5, [pc, #152]	; (800dd14 <scalbn+0xc4>)
 800dc7c:	42ab      	cmp	r3, r5
 800dc7e:	d108      	bne.n	800dc92 <scalbn+0x42>
 800dc80:	0002      	movs	r2, r0
 800dc82:	000b      	movs	r3, r1
 800dc84:	f7f3 f9dc 	bl	8001040 <__aeabi_dadd>
 800dc88:	bd70      	pop	{r4, r5, r6, pc}
 800dc8a:	000a      	movs	r2, r1
 800dc8c:	004b      	lsls	r3, r1, #1
 800dc8e:	0d5b      	lsrs	r3, r3, #21
 800dc90:	3b36      	subs	r3, #54	; 0x36
 800dc92:	4d21      	ldr	r5, [pc, #132]	; (800dd18 <scalbn+0xc8>)
 800dc94:	18e3      	adds	r3, r4, r3
 800dc96:	42ab      	cmp	r3, r5
 800dc98:	dd0c      	ble.n	800dcb4 <scalbn+0x64>
 800dc9a:	4c20      	ldr	r4, [pc, #128]	; (800dd1c <scalbn+0xcc>)
 800dc9c:	4d20      	ldr	r5, [pc, #128]	; (800dd20 <scalbn+0xd0>)
 800dc9e:	2900      	cmp	r1, #0
 800dca0:	da01      	bge.n	800dca6 <scalbn+0x56>
 800dca2:	4c1e      	ldr	r4, [pc, #120]	; (800dd1c <scalbn+0xcc>)
 800dca4:	4d1f      	ldr	r5, [pc, #124]	; (800dd24 <scalbn+0xd4>)
 800dca6:	0020      	movs	r0, r4
 800dca8:	0029      	movs	r1, r5
 800dcaa:	4a1c      	ldr	r2, [pc, #112]	; (800dd1c <scalbn+0xcc>)
 800dcac:	4b1c      	ldr	r3, [pc, #112]	; (800dd20 <scalbn+0xd0>)
 800dcae:	f7f4 f937 	bl	8001f20 <__aeabi_dmul>
 800dcb2:	e7e9      	b.n	800dc88 <scalbn+0x38>
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	dd05      	ble.n	800dcc4 <scalbn+0x74>
 800dcb8:	4c1b      	ldr	r4, [pc, #108]	; (800dd28 <scalbn+0xd8>)
 800dcba:	051b      	lsls	r3, r3, #20
 800dcbc:	4022      	ands	r2, r4
 800dcbe:	431a      	orrs	r2, r3
 800dcc0:	0011      	movs	r1, r2
 800dcc2:	e7e1      	b.n	800dc88 <scalbn+0x38>
 800dcc4:	001d      	movs	r5, r3
 800dcc6:	3535      	adds	r5, #53	; 0x35
 800dcc8:	da13      	bge.n	800dcf2 <scalbn+0xa2>
 800dcca:	4a18      	ldr	r2, [pc, #96]	; (800dd2c <scalbn+0xdc>)
 800dccc:	0fcb      	lsrs	r3, r1, #31
 800dcce:	4294      	cmp	r4, r2
 800dcd0:	dd08      	ble.n	800dce4 <scalbn+0x94>
 800dcd2:	4812      	ldr	r0, [pc, #72]	; (800dd1c <scalbn+0xcc>)
 800dcd4:	4912      	ldr	r1, [pc, #72]	; (800dd20 <scalbn+0xd0>)
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d001      	beq.n	800dcde <scalbn+0x8e>
 800dcda:	4810      	ldr	r0, [pc, #64]	; (800dd1c <scalbn+0xcc>)
 800dcdc:	4911      	ldr	r1, [pc, #68]	; (800dd24 <scalbn+0xd4>)
 800dcde:	4a0f      	ldr	r2, [pc, #60]	; (800dd1c <scalbn+0xcc>)
 800dce0:	4b0f      	ldr	r3, [pc, #60]	; (800dd20 <scalbn+0xd0>)
 800dce2:	e7e4      	b.n	800dcae <scalbn+0x5e>
 800dce4:	4809      	ldr	r0, [pc, #36]	; (800dd0c <scalbn+0xbc>)
 800dce6:	490a      	ldr	r1, [pc, #40]	; (800dd10 <scalbn+0xc0>)
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d0c3      	beq.n	800dc74 <scalbn+0x24>
 800dcec:	4807      	ldr	r0, [pc, #28]	; (800dd0c <scalbn+0xbc>)
 800dcee:	4910      	ldr	r1, [pc, #64]	; (800dd30 <scalbn+0xe0>)
 800dcf0:	e7c0      	b.n	800dc74 <scalbn+0x24>
 800dcf2:	4c0d      	ldr	r4, [pc, #52]	; (800dd28 <scalbn+0xd8>)
 800dcf4:	3336      	adds	r3, #54	; 0x36
 800dcf6:	4022      	ands	r2, r4
 800dcf8:	051b      	lsls	r3, r3, #20
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	0019      	movs	r1, r3
 800dcfe:	2200      	movs	r2, #0
 800dd00:	4b0c      	ldr	r3, [pc, #48]	; (800dd34 <scalbn+0xe4>)
 800dd02:	e7d4      	b.n	800dcae <scalbn+0x5e>
 800dd04:	43500000 	.word	0x43500000
 800dd08:	ffff3cb0 	.word	0xffff3cb0
 800dd0c:	c2f8f359 	.word	0xc2f8f359
 800dd10:	01a56e1f 	.word	0x01a56e1f
 800dd14:	000007ff 	.word	0x000007ff
 800dd18:	000007fe 	.word	0x000007fe
 800dd1c:	8800759c 	.word	0x8800759c
 800dd20:	7e37e43c 	.word	0x7e37e43c
 800dd24:	fe37e43c 	.word	0xfe37e43c
 800dd28:	800fffff 	.word	0x800fffff
 800dd2c:	0000c350 	.word	0x0000c350
 800dd30:	81a56e1f 	.word	0x81a56e1f
 800dd34:	3c900000 	.word	0x3c900000

0800dd38 <_init>:
 800dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3a:	46c0      	nop			; (mov r8, r8)
 800dd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3e:	bc08      	pop	{r3}
 800dd40:	469e      	mov	lr, r3
 800dd42:	4770      	bx	lr

0800dd44 <_fini>:
 800dd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd46:	46c0      	nop			; (mov r8, r8)
 800dd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd4a:	bc08      	pop	{r3}
 800dd4c:	469e      	mov	lr, r3
 800dd4e:	4770      	bx	lr
