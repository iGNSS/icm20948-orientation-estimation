
Exjobb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011aa8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  08011b60  08011b60  00021b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126b8  080126b8  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  080126b8  080126b8  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080126b8  080126b8  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080126b8  080126b8  000226b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080126bc  080126bc  000226bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080126c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200001e4  080128a4  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  080128a4  0003058c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1a4  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000304a  00000000  00000000  0004b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0004e400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0004f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197f6  00000000  00000000  00050a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001964e  00000000  00000000  0006a21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b809  00000000  00000000  0008386c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f075  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f90  00000000  00000000  0011f0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e4 	.word	0x200001e4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08011b48 	.word	0x08011b48

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e8 	.word	0x200001e8
 80000fc:	08011b48 	.word	0x08011b48

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	1c10      	adds	r0, r2, #0
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	1c19      	adds	r1, r3, #0
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fe33 	bl	80020a0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd7d 	bl	8001f44 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fe25 	bl	80020a0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe1b 	bl	80020a0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fd9f 	bl	8001fbc <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd95 	bl	8001fbc <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	1c08      	adds	r0, r1, #0
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fb67 	bl	8000b7c <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 faeb 	bl	8000a94 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb59 	bl	8000b7c <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb4f 	bl	8000b7c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 faf9 	bl	8000ae4 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 faef 	bl	8000ae4 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_f2uiz>:
 8000514:	219e      	movs	r1, #158	; 0x9e
 8000516:	b510      	push	{r4, lr}
 8000518:	05c9      	lsls	r1, r1, #23
 800051a:	1c04      	adds	r4, r0, #0
 800051c:	f7ff fff0 	bl	8000500 <__aeabi_fcmpge>
 8000520:	2800      	cmp	r0, #0
 8000522:	d103      	bne.n	800052c <__aeabi_f2uiz+0x18>
 8000524:	1c20      	adds	r0, r4, #0
 8000526:	f000 fe55 	bl	80011d4 <__aeabi_f2iz>
 800052a:	bd10      	pop	{r4, pc}
 800052c:	219e      	movs	r1, #158	; 0x9e
 800052e:	1c20      	adds	r0, r4, #0
 8000530:	05c9      	lsls	r1, r1, #23
 8000532:	f000 fc87 	bl	8000e44 <__aeabi_fsub>
 8000536:	f000 fe4d 	bl	80011d4 <__aeabi_f2iz>
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	061b      	lsls	r3, r3, #24
 800053e:	469c      	mov	ip, r3
 8000540:	4460      	add	r0, ip
 8000542:	e7f2      	b.n	800052a <__aeabi_f2uiz+0x16>

08000544 <__aeabi_fadd>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4646      	mov	r6, r8
 8000548:	46d6      	mov	lr, sl
 800054a:	464f      	mov	r7, r9
 800054c:	024d      	lsls	r5, r1, #9
 800054e:	0242      	lsls	r2, r0, #9
 8000550:	b5c0      	push	{r6, r7, lr}
 8000552:	0a52      	lsrs	r2, r2, #9
 8000554:	0a6e      	lsrs	r6, r5, #9
 8000556:	0047      	lsls	r7, r0, #1
 8000558:	46b0      	mov	r8, r6
 800055a:	0e3f      	lsrs	r7, r7, #24
 800055c:	004e      	lsls	r6, r1, #1
 800055e:	0fc4      	lsrs	r4, r0, #31
 8000560:	00d0      	lsls	r0, r2, #3
 8000562:	4694      	mov	ip, r2
 8000564:	003b      	movs	r3, r7
 8000566:	4682      	mov	sl, r0
 8000568:	0e36      	lsrs	r6, r6, #24
 800056a:	0fc9      	lsrs	r1, r1, #31
 800056c:	09ad      	lsrs	r5, r5, #6
 800056e:	428c      	cmp	r4, r1
 8000570:	d06d      	beq.n	800064e <__aeabi_fadd+0x10a>
 8000572:	1bb8      	subs	r0, r7, r6
 8000574:	4681      	mov	r9, r0
 8000576:	2800      	cmp	r0, #0
 8000578:	dd4d      	ble.n	8000616 <__aeabi_fadd+0xd2>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x3c>
 800057e:	e088      	b.n	8000692 <__aeabi_fadd+0x14e>
 8000580:	2fff      	cmp	r7, #255	; 0xff
 8000582:	d05a      	beq.n	800063a <__aeabi_fadd+0xf6>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	04db      	lsls	r3, r3, #19
 8000588:	431d      	orrs	r5, r3
 800058a:	464b      	mov	r3, r9
 800058c:	2201      	movs	r2, #1
 800058e:	2b1b      	cmp	r3, #27
 8000590:	dc0a      	bgt.n	80005a8 <__aeabi_fadd+0x64>
 8000592:	002b      	movs	r3, r5
 8000594:	464a      	mov	r2, r9
 8000596:	4649      	mov	r1, r9
 8000598:	40d3      	lsrs	r3, r2
 800059a:	2220      	movs	r2, #32
 800059c:	1a52      	subs	r2, r2, r1
 800059e:	4095      	lsls	r5, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	1e55      	subs	r5, r2, #1
 80005a4:	41aa      	sbcs	r2, r5
 80005a6:	431a      	orrs	r2, r3
 80005a8:	4653      	mov	r3, sl
 80005aa:	1a9a      	subs	r2, r3, r2
 80005ac:	0153      	lsls	r3, r2, #5
 80005ae:	d400      	bmi.n	80005b2 <__aeabi_fadd+0x6e>
 80005b0:	e0b9      	b.n	8000726 <__aeabi_fadd+0x1e2>
 80005b2:	0192      	lsls	r2, r2, #6
 80005b4:	0996      	lsrs	r6, r2, #6
 80005b6:	0030      	movs	r0, r6
 80005b8:	f002 fd5a 	bl	8003070 <__clzsi2>
 80005bc:	3805      	subs	r0, #5
 80005be:	4086      	lsls	r6, r0
 80005c0:	4287      	cmp	r7, r0
 80005c2:	dd00      	ble.n	80005c6 <__aeabi_fadd+0x82>
 80005c4:	e0d4      	b.n	8000770 <__aeabi_fadd+0x22c>
 80005c6:	0033      	movs	r3, r6
 80005c8:	1bc7      	subs	r7, r0, r7
 80005ca:	2020      	movs	r0, #32
 80005cc:	3701      	adds	r7, #1
 80005ce:	40fb      	lsrs	r3, r7
 80005d0:	1bc7      	subs	r7, r0, r7
 80005d2:	40be      	lsls	r6, r7
 80005d4:	0032      	movs	r2, r6
 80005d6:	1e56      	subs	r6, r2, #1
 80005d8:	41b2      	sbcs	r2, r6
 80005da:	2700      	movs	r7, #0
 80005dc:	431a      	orrs	r2, r3
 80005de:	0753      	lsls	r3, r2, #29
 80005e0:	d004      	beq.n	80005ec <__aeabi_fadd+0xa8>
 80005e2:	230f      	movs	r3, #15
 80005e4:	4013      	ands	r3, r2
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d000      	beq.n	80005ec <__aeabi_fadd+0xa8>
 80005ea:	3204      	adds	r2, #4
 80005ec:	0153      	lsls	r3, r2, #5
 80005ee:	d400      	bmi.n	80005f2 <__aeabi_fadd+0xae>
 80005f0:	e09c      	b.n	800072c <__aeabi_fadd+0x1e8>
 80005f2:	1c7b      	adds	r3, r7, #1
 80005f4:	2ffe      	cmp	r7, #254	; 0xfe
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0xb6>
 80005f8:	e09a      	b.n	8000730 <__aeabi_fadd+0x1ec>
 80005fa:	0192      	lsls	r2, r2, #6
 80005fc:	0a52      	lsrs	r2, r2, #9
 80005fe:	4694      	mov	ip, r2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	05d8      	lsls	r0, r3, #23
 8000604:	4663      	mov	r3, ip
 8000606:	07e4      	lsls	r4, r4, #31
 8000608:	4318      	orrs	r0, r3
 800060a:	4320      	orrs	r0, r4
 800060c:	bce0      	pop	{r5, r6, r7}
 800060e:	46ba      	mov	sl, r7
 8000610:	46b1      	mov	r9, r6
 8000612:	46a8      	mov	r8, r5
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	2800      	cmp	r0, #0
 8000618:	d049      	beq.n	80006ae <__aeabi_fadd+0x16a>
 800061a:	1bf3      	subs	r3, r6, r7
 800061c:	2f00      	cmp	r7, #0
 800061e:	d000      	beq.n	8000622 <__aeabi_fadd+0xde>
 8000620:	e0b6      	b.n	8000790 <__aeabi_fadd+0x24c>
 8000622:	4652      	mov	r2, sl
 8000624:	2a00      	cmp	r2, #0
 8000626:	d060      	beq.n	80006ea <__aeabi_fadd+0x1a6>
 8000628:	3b01      	subs	r3, #1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_fadd+0xec>
 800062e:	e0fc      	b.n	800082a <__aeabi_fadd+0x2e6>
 8000630:	2eff      	cmp	r6, #255	; 0xff
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0xf2>
 8000634:	e0b4      	b.n	80007a0 <__aeabi_fadd+0x25c>
 8000636:	000c      	movs	r4, r1
 8000638:	4642      	mov	r2, r8
 800063a:	2a00      	cmp	r2, #0
 800063c:	d078      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4310      	orrs	r0, r2
 8000644:	0242      	lsls	r2, r0, #9
 8000646:	0a53      	lsrs	r3, r2, #9
 8000648:	469c      	mov	ip, r3
 800064a:	23ff      	movs	r3, #255	; 0xff
 800064c:	e7d9      	b.n	8000602 <__aeabi_fadd+0xbe>
 800064e:	1bb9      	subs	r1, r7, r6
 8000650:	2900      	cmp	r1, #0
 8000652:	dd71      	ble.n	8000738 <__aeabi_fadd+0x1f4>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d03f      	beq.n	80006d8 <__aeabi_fadd+0x194>
 8000658:	2fff      	cmp	r7, #255	; 0xff
 800065a:	d0ee      	beq.n	800063a <__aeabi_fadd+0xf6>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	04db      	lsls	r3, r3, #19
 8000660:	431d      	orrs	r5, r3
 8000662:	2201      	movs	r2, #1
 8000664:	291b      	cmp	r1, #27
 8000666:	dc07      	bgt.n	8000678 <__aeabi_fadd+0x134>
 8000668:	002a      	movs	r2, r5
 800066a:	2320      	movs	r3, #32
 800066c:	40ca      	lsrs	r2, r1
 800066e:	1a59      	subs	r1, r3, r1
 8000670:	408d      	lsls	r5, r1
 8000672:	1e6b      	subs	r3, r5, #1
 8000674:	419d      	sbcs	r5, r3
 8000676:	432a      	orrs	r2, r5
 8000678:	4452      	add	r2, sl
 800067a:	0153      	lsls	r3, r2, #5
 800067c:	d553      	bpl.n	8000726 <__aeabi_fadd+0x1e2>
 800067e:	3701      	adds	r7, #1
 8000680:	2fff      	cmp	r7, #255	; 0xff
 8000682:	d055      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 8000684:	2301      	movs	r3, #1
 8000686:	497b      	ldr	r1, [pc, #492]	; (8000874 <__aeabi_fadd+0x330>)
 8000688:	4013      	ands	r3, r2
 800068a:	0852      	lsrs	r2, r2, #1
 800068c:	400a      	ands	r2, r1
 800068e:	431a      	orrs	r2, r3
 8000690:	e7a5      	b.n	80005de <__aeabi_fadd+0x9a>
 8000692:	2d00      	cmp	r5, #0
 8000694:	d02c      	beq.n	80006f0 <__aeabi_fadd+0x1ac>
 8000696:	2301      	movs	r3, #1
 8000698:	425b      	negs	r3, r3
 800069a:	469c      	mov	ip, r3
 800069c:	44e1      	add	r9, ip
 800069e:	464b      	mov	r3, r9
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x162>
 80006a4:	e0ad      	b.n	8000802 <__aeabi_fadd+0x2be>
 80006a6:	2fff      	cmp	r7, #255	; 0xff
 80006a8:	d000      	beq.n	80006ac <__aeabi_fadd+0x168>
 80006aa:	e76e      	b.n	800058a <__aeabi_fadd+0x46>
 80006ac:	e7c5      	b.n	800063a <__aeabi_fadd+0xf6>
 80006ae:	20fe      	movs	r0, #254	; 0xfe
 80006b0:	1c7e      	adds	r6, r7, #1
 80006b2:	4230      	tst	r0, r6
 80006b4:	d160      	bne.n	8000778 <__aeabi_fadd+0x234>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d000      	beq.n	80006bc <__aeabi_fadd+0x178>
 80006ba:	e093      	b.n	80007e4 <__aeabi_fadd+0x2a0>
 80006bc:	4652      	mov	r2, sl
 80006be:	2a00      	cmp	r2, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0x180>
 80006c2:	e0b6      	b.n	8000832 <__aeabi_fadd+0x2ee>
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d09c      	beq.n	8000602 <__aeabi_fadd+0xbe>
 80006c8:	1b52      	subs	r2, r2, r5
 80006ca:	0150      	lsls	r0, r2, #5
 80006cc:	d400      	bmi.n	80006d0 <__aeabi_fadd+0x18c>
 80006ce:	e0c3      	b.n	8000858 <__aeabi_fadd+0x314>
 80006d0:	4653      	mov	r3, sl
 80006d2:	000c      	movs	r4, r1
 80006d4:	1aea      	subs	r2, r5, r3
 80006d6:	e782      	b.n	80005de <__aeabi_fadd+0x9a>
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d009      	beq.n	80006f0 <__aeabi_fadd+0x1ac>
 80006dc:	3901      	subs	r1, #1
 80006de:	2900      	cmp	r1, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0x1a0>
 80006e2:	e08b      	b.n	80007fc <__aeabi_fadd+0x2b8>
 80006e4:	2fff      	cmp	r7, #255	; 0xff
 80006e6:	d1bc      	bne.n	8000662 <__aeabi_fadd+0x11e>
 80006e8:	e7a7      	b.n	800063a <__aeabi_fadd+0xf6>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4642      	mov	r2, r8
 80006ee:	0037      	movs	r7, r6
 80006f0:	2fff      	cmp	r7, #255	; 0xff
 80006f2:	d0a2      	beq.n	800063a <__aeabi_fadd+0xf6>
 80006f4:	0252      	lsls	r2, r2, #9
 80006f6:	0a53      	lsrs	r3, r2, #9
 80006f8:	469c      	mov	ip, r3
 80006fa:	b2fb      	uxtb	r3, r7
 80006fc:	e781      	b.n	8000602 <__aeabi_fadd+0xbe>
 80006fe:	21fe      	movs	r1, #254	; 0xfe
 8000700:	3701      	adds	r7, #1
 8000702:	4239      	tst	r1, r7
 8000704:	d165      	bne.n	80007d2 <__aeabi_fadd+0x28e>
 8000706:	2b00      	cmp	r3, #0
 8000708:	d17e      	bne.n	8000808 <__aeabi_fadd+0x2c4>
 800070a:	2800      	cmp	r0, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x1cc>
 800070e:	e0aa      	b.n	8000866 <__aeabi_fadd+0x322>
 8000710:	2d00      	cmp	r5, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_fadd+0x1d2>
 8000714:	e775      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000716:	002a      	movs	r2, r5
 8000718:	4452      	add	r2, sl
 800071a:	2700      	movs	r7, #0
 800071c:	0153      	lsls	r3, r2, #5
 800071e:	d502      	bpl.n	8000726 <__aeabi_fadd+0x1e2>
 8000720:	4b55      	ldr	r3, [pc, #340]	; (8000878 <__aeabi_fadd+0x334>)
 8000722:	3701      	adds	r7, #1
 8000724:	401a      	ands	r2, r3
 8000726:	0753      	lsls	r3, r2, #29
 8000728:	d000      	beq.n	800072c <__aeabi_fadd+0x1e8>
 800072a:	e75a      	b.n	80005e2 <__aeabi_fadd+0x9e>
 800072c:	08d2      	lsrs	r2, r2, #3
 800072e:	e7df      	b.n	80006f0 <__aeabi_fadd+0x1ac>
 8000730:	2200      	movs	r2, #0
 8000732:	23ff      	movs	r3, #255	; 0xff
 8000734:	4694      	mov	ip, r2
 8000736:	e764      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000738:	2900      	cmp	r1, #0
 800073a:	d0e0      	beq.n	80006fe <__aeabi_fadd+0x1ba>
 800073c:	1bf3      	subs	r3, r6, r7
 800073e:	2f00      	cmp	r7, #0
 8000740:	d03e      	beq.n	80007c0 <__aeabi_fadd+0x27c>
 8000742:	2eff      	cmp	r6, #255	; 0xff
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x204>
 8000746:	e777      	b.n	8000638 <__aeabi_fadd+0xf4>
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0001      	movs	r1, r0
 800074c:	04d2      	lsls	r2, r2, #19
 800074e:	4311      	orrs	r1, r2
 8000750:	468a      	mov	sl, r1
 8000752:	2201      	movs	r2, #1
 8000754:	2b1b      	cmp	r3, #27
 8000756:	dc08      	bgt.n	800076a <__aeabi_fadd+0x226>
 8000758:	4652      	mov	r2, sl
 800075a:	2120      	movs	r1, #32
 800075c:	4650      	mov	r0, sl
 800075e:	40da      	lsrs	r2, r3
 8000760:	1acb      	subs	r3, r1, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	1e43      	subs	r3, r0, #1
 8000766:	4198      	sbcs	r0, r3
 8000768:	4302      	orrs	r2, r0
 800076a:	0037      	movs	r7, r6
 800076c:	1952      	adds	r2, r2, r5
 800076e:	e784      	b.n	800067a <__aeabi_fadd+0x136>
 8000770:	4a41      	ldr	r2, [pc, #260]	; (8000878 <__aeabi_fadd+0x334>)
 8000772:	1a3f      	subs	r7, r7, r0
 8000774:	4032      	ands	r2, r6
 8000776:	e732      	b.n	80005de <__aeabi_fadd+0x9a>
 8000778:	4653      	mov	r3, sl
 800077a:	1b5e      	subs	r6, r3, r5
 800077c:	0173      	lsls	r3, r6, #5
 800077e:	d42d      	bmi.n	80007dc <__aeabi_fadd+0x298>
 8000780:	2e00      	cmp	r6, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0x242>
 8000784:	e717      	b.n	80005b6 <__aeabi_fadd+0x72>
 8000786:	2200      	movs	r2, #0
 8000788:	2400      	movs	r4, #0
 800078a:	2300      	movs	r3, #0
 800078c:	4694      	mov	ip, r2
 800078e:	e738      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000790:	2eff      	cmp	r6, #255	; 0xff
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x252>
 8000794:	e74f      	b.n	8000636 <__aeabi_fadd+0xf2>
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	4650      	mov	r0, sl
 800079a:	04d2      	lsls	r2, r2, #19
 800079c:	4310      	orrs	r0, r2
 800079e:	4682      	mov	sl, r0
 80007a0:	2201      	movs	r2, #1
 80007a2:	2b1b      	cmp	r3, #27
 80007a4:	dc08      	bgt.n	80007b8 <__aeabi_fadd+0x274>
 80007a6:	4652      	mov	r2, sl
 80007a8:	2420      	movs	r4, #32
 80007aa:	4650      	mov	r0, sl
 80007ac:	40da      	lsrs	r2, r3
 80007ae:	1ae3      	subs	r3, r4, r3
 80007b0:	4098      	lsls	r0, r3
 80007b2:	1e43      	subs	r3, r0, #1
 80007b4:	4198      	sbcs	r0, r3
 80007b6:	4302      	orrs	r2, r0
 80007b8:	000c      	movs	r4, r1
 80007ba:	0037      	movs	r7, r6
 80007bc:	1aaa      	subs	r2, r5, r2
 80007be:	e6f5      	b.n	80005ac <__aeabi_fadd+0x68>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d093      	beq.n	80006ec <__aeabi_fadd+0x1a8>
 80007c4:	3b01      	subs	r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d04f      	beq.n	800086a <__aeabi_fadd+0x326>
 80007ca:	2eff      	cmp	r6, #255	; 0xff
 80007cc:	d1c1      	bne.n	8000752 <__aeabi_fadd+0x20e>
 80007ce:	4642      	mov	r2, r8
 80007d0:	e733      	b.n	800063a <__aeabi_fadd+0xf6>
 80007d2:	2fff      	cmp	r7, #255	; 0xff
 80007d4:	d0ac      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 80007d6:	4455      	add	r5, sl
 80007d8:	086a      	lsrs	r2, r5, #1
 80007da:	e7a4      	b.n	8000726 <__aeabi_fadd+0x1e2>
 80007dc:	4653      	mov	r3, sl
 80007de:	000c      	movs	r4, r1
 80007e0:	1aee      	subs	r6, r5, r3
 80007e2:	e6e8      	b.n	80005b6 <__aeabi_fadd+0x72>
 80007e4:	4653      	mov	r3, sl
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d128      	bne.n	800083c <__aeabi_fadd+0x2f8>
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fadd+0x2ac>
 80007ee:	e722      	b.n	8000636 <__aeabi_fadd+0xf2>
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	03db      	lsls	r3, r3, #15
 80007f4:	469c      	mov	ip, r3
 80007f6:	2400      	movs	r4, #0
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	e702      	b.n	8000602 <__aeabi_fadd+0xbe>
 80007fc:	002a      	movs	r2, r5
 80007fe:	4452      	add	r2, sl
 8000800:	e73b      	b.n	800067a <__aeabi_fadd+0x136>
 8000802:	4653      	mov	r3, sl
 8000804:	1b5a      	subs	r2, r3, r5
 8000806:	e6d1      	b.n	80005ac <__aeabi_fadd+0x68>
 8000808:	2800      	cmp	r0, #0
 800080a:	d100      	bne.n	800080e <__aeabi_fadd+0x2ca>
 800080c:	e714      	b.n	8000638 <__aeabi_fadd+0xf4>
 800080e:	2d00      	cmp	r5, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x2d0>
 8000812:	e712      	b.n	800063a <__aeabi_fadd+0xf6>
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	03db      	lsls	r3, r3, #15
 8000818:	421a      	tst	r2, r3
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x2da>
 800081c:	e70d      	b.n	800063a <__aeabi_fadd+0xf6>
 800081e:	4641      	mov	r1, r8
 8000820:	4219      	tst	r1, r3
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x2e2>
 8000824:	e709      	b.n	800063a <__aeabi_fadd+0xf6>
 8000826:	4642      	mov	r2, r8
 8000828:	e707      	b.n	800063a <__aeabi_fadd+0xf6>
 800082a:	000c      	movs	r4, r1
 800082c:	0037      	movs	r7, r6
 800082e:	1aaa      	subs	r2, r5, r2
 8000830:	e6bc      	b.n	80005ac <__aeabi_fadd+0x68>
 8000832:	2d00      	cmp	r5, #0
 8000834:	d013      	beq.n	800085e <__aeabi_fadd+0x31a>
 8000836:	000c      	movs	r4, r1
 8000838:	46c4      	mov	ip, r8
 800083a:	e6e2      	b.n	8000602 <__aeabi_fadd+0xbe>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x2fe>
 8000840:	e6fb      	b.n	800063a <__aeabi_fadd+0xf6>
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	03db      	lsls	r3, r3, #15
 8000846:	421a      	tst	r2, r3
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0x308>
 800084a:	e6f6      	b.n	800063a <__aeabi_fadd+0xf6>
 800084c:	4640      	mov	r0, r8
 800084e:	4218      	tst	r0, r3
 8000850:	d000      	beq.n	8000854 <__aeabi_fadd+0x310>
 8000852:	e6f2      	b.n	800063a <__aeabi_fadd+0xf6>
 8000854:	000c      	movs	r4, r1
 8000856:	e6ef      	b.n	8000638 <__aeabi_fadd+0xf4>
 8000858:	2a00      	cmp	r2, #0
 800085a:	d000      	beq.n	800085e <__aeabi_fadd+0x31a>
 800085c:	e763      	b.n	8000726 <__aeabi_fadd+0x1e2>
 800085e:	2200      	movs	r2, #0
 8000860:	2400      	movs	r4, #0
 8000862:	4694      	mov	ip, r2
 8000864:	e6cd      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000866:	46c4      	mov	ip, r8
 8000868:	e6cb      	b.n	8000602 <__aeabi_fadd+0xbe>
 800086a:	002a      	movs	r2, r5
 800086c:	0037      	movs	r7, r6
 800086e:	4452      	add	r2, sl
 8000870:	e703      	b.n	800067a <__aeabi_fadd+0x136>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	7dffffff 	.word	0x7dffffff
 8000878:	fbffffff 	.word	0xfbffffff

0800087c <__aeabi_fdiv>:
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	464f      	mov	r7, r9
 8000880:	4646      	mov	r6, r8
 8000882:	46d6      	mov	lr, sl
 8000884:	0245      	lsls	r5, r0, #9
 8000886:	b5c0      	push	{r6, r7, lr}
 8000888:	0047      	lsls	r7, r0, #1
 800088a:	1c0c      	adds	r4, r1, #0
 800088c:	0a6d      	lsrs	r5, r5, #9
 800088e:	0e3f      	lsrs	r7, r7, #24
 8000890:	0fc6      	lsrs	r6, r0, #31
 8000892:	2f00      	cmp	r7, #0
 8000894:	d066      	beq.n	8000964 <__aeabi_fdiv+0xe8>
 8000896:	2fff      	cmp	r7, #255	; 0xff
 8000898:	d06c      	beq.n	8000974 <__aeabi_fdiv+0xf8>
 800089a:	2300      	movs	r3, #0
 800089c:	00ea      	lsls	r2, r5, #3
 800089e:	2580      	movs	r5, #128	; 0x80
 80008a0:	4699      	mov	r9, r3
 80008a2:	469a      	mov	sl, r3
 80008a4:	04ed      	lsls	r5, r5, #19
 80008a6:	4315      	orrs	r5, r2
 80008a8:	3f7f      	subs	r7, #127	; 0x7f
 80008aa:	0260      	lsls	r0, r4, #9
 80008ac:	0061      	lsls	r1, r4, #1
 80008ae:	0a43      	lsrs	r3, r0, #9
 80008b0:	4698      	mov	r8, r3
 80008b2:	0e09      	lsrs	r1, r1, #24
 80008b4:	0fe4      	lsrs	r4, r4, #31
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d048      	beq.n	800094c <__aeabi_fdiv+0xd0>
 80008ba:	29ff      	cmp	r1, #255	; 0xff
 80008bc:	d010      	beq.n	80008e0 <__aeabi_fdiv+0x64>
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	00d8      	lsls	r0, r3, #3
 80008c2:	04d2      	lsls	r2, r2, #19
 80008c4:	4302      	orrs	r2, r0
 80008c6:	4690      	mov	r8, r2
 80008c8:	2000      	movs	r0, #0
 80008ca:	397f      	subs	r1, #127	; 0x7f
 80008cc:	464a      	mov	r2, r9
 80008ce:	0033      	movs	r3, r6
 80008d0:	1a7f      	subs	r7, r7, r1
 80008d2:	4302      	orrs	r2, r0
 80008d4:	496c      	ldr	r1, [pc, #432]	; (8000a88 <__aeabi_fdiv+0x20c>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	588a      	ldr	r2, [r1, r2]
 80008da:	4063      	eors	r3, r4
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4697      	mov	pc, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d16d      	bne.n	80009c0 <__aeabi_fdiv+0x144>
 80008e4:	2002      	movs	r0, #2
 80008e6:	3fff      	subs	r7, #255	; 0xff
 80008e8:	e033      	b.n	8000952 <__aeabi_fdiv+0xd6>
 80008ea:	2300      	movs	r3, #0
 80008ec:	4698      	mov	r8, r3
 80008ee:	0026      	movs	r6, r4
 80008f0:	4645      	mov	r5, r8
 80008f2:	4682      	mov	sl, r0
 80008f4:	4653      	mov	r3, sl
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fdiv+0x80>
 80008fa:	e07f      	b.n	80009fc <__aeabi_fdiv+0x180>
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d100      	bne.n	8000902 <__aeabi_fdiv+0x86>
 8000900:	e094      	b.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d017      	beq.n	8000936 <__aeabi_fdiv+0xba>
 8000906:	0038      	movs	r0, r7
 8000908:	307f      	adds	r0, #127	; 0x7f
 800090a:	2800      	cmp	r0, #0
 800090c:	dd5f      	ble.n	80009ce <__aeabi_fdiv+0x152>
 800090e:	076b      	lsls	r3, r5, #29
 8000910:	d004      	beq.n	800091c <__aeabi_fdiv+0xa0>
 8000912:	230f      	movs	r3, #15
 8000914:	402b      	ands	r3, r5
 8000916:	2b04      	cmp	r3, #4
 8000918:	d000      	beq.n	800091c <__aeabi_fdiv+0xa0>
 800091a:	3504      	adds	r5, #4
 800091c:	012b      	lsls	r3, r5, #4
 800091e:	d503      	bpl.n	8000928 <__aeabi_fdiv+0xac>
 8000920:	0038      	movs	r0, r7
 8000922:	4b5a      	ldr	r3, [pc, #360]	; (8000a8c <__aeabi_fdiv+0x210>)
 8000924:	3080      	adds	r0, #128	; 0x80
 8000926:	401d      	ands	r5, r3
 8000928:	28fe      	cmp	r0, #254	; 0xfe
 800092a:	dc67      	bgt.n	80009fc <__aeabi_fdiv+0x180>
 800092c:	01ad      	lsls	r5, r5, #6
 800092e:	0a6d      	lsrs	r5, r5, #9
 8000930:	b2c0      	uxtb	r0, r0
 8000932:	e002      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000934:	001e      	movs	r6, r3
 8000936:	2000      	movs	r0, #0
 8000938:	2500      	movs	r5, #0
 800093a:	05c0      	lsls	r0, r0, #23
 800093c:	4328      	orrs	r0, r5
 800093e:	07f6      	lsls	r6, r6, #31
 8000940:	4330      	orrs	r0, r6
 8000942:	bce0      	pop	{r5, r6, r7}
 8000944:	46ba      	mov	sl, r7
 8000946:	46b1      	mov	r9, r6
 8000948:	46a8      	mov	r8, r5
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	2b00      	cmp	r3, #0
 800094e:	d12b      	bne.n	80009a8 <__aeabi_fdiv+0x12c>
 8000950:	2001      	movs	r0, #1
 8000952:	464a      	mov	r2, r9
 8000954:	0033      	movs	r3, r6
 8000956:	494e      	ldr	r1, [pc, #312]	; (8000a90 <__aeabi_fdiv+0x214>)
 8000958:	4302      	orrs	r2, r0
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	588a      	ldr	r2, [r1, r2]
 800095e:	4063      	eors	r3, r4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4697      	mov	pc, r2
 8000964:	2d00      	cmp	r5, #0
 8000966:	d113      	bne.n	8000990 <__aeabi_fdiv+0x114>
 8000968:	2304      	movs	r3, #4
 800096a:	4699      	mov	r9, r3
 800096c:	3b03      	subs	r3, #3
 800096e:	2700      	movs	r7, #0
 8000970:	469a      	mov	sl, r3
 8000972:	e79a      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000974:	2d00      	cmp	r5, #0
 8000976:	d105      	bne.n	8000984 <__aeabi_fdiv+0x108>
 8000978:	2308      	movs	r3, #8
 800097a:	4699      	mov	r9, r3
 800097c:	3b06      	subs	r3, #6
 800097e:	27ff      	movs	r7, #255	; 0xff
 8000980:	469a      	mov	sl, r3
 8000982:	e792      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000984:	230c      	movs	r3, #12
 8000986:	4699      	mov	r9, r3
 8000988:	3b09      	subs	r3, #9
 800098a:	27ff      	movs	r7, #255	; 0xff
 800098c:	469a      	mov	sl, r3
 800098e:	e78c      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000990:	0028      	movs	r0, r5
 8000992:	f002 fb6d 	bl	8003070 <__clzsi2>
 8000996:	2776      	movs	r7, #118	; 0x76
 8000998:	1f43      	subs	r3, r0, #5
 800099a:	409d      	lsls	r5, r3
 800099c:	2300      	movs	r3, #0
 800099e:	427f      	negs	r7, r7
 80009a0:	4699      	mov	r9, r3
 80009a2:	469a      	mov	sl, r3
 80009a4:	1a3f      	subs	r7, r7, r0
 80009a6:	e780      	b.n	80008aa <__aeabi_fdiv+0x2e>
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 fb61 	bl	8003070 <__clzsi2>
 80009ae:	4642      	mov	r2, r8
 80009b0:	1f43      	subs	r3, r0, #5
 80009b2:	2176      	movs	r1, #118	; 0x76
 80009b4:	409a      	lsls	r2, r3
 80009b6:	4249      	negs	r1, r1
 80009b8:	1a09      	subs	r1, r1, r0
 80009ba:	4690      	mov	r8, r2
 80009bc:	2000      	movs	r0, #0
 80009be:	e785      	b.n	80008cc <__aeabi_fdiv+0x50>
 80009c0:	21ff      	movs	r1, #255	; 0xff
 80009c2:	2003      	movs	r0, #3
 80009c4:	e782      	b.n	80008cc <__aeabi_fdiv+0x50>
 80009c6:	001e      	movs	r6, r3
 80009c8:	20ff      	movs	r0, #255	; 0xff
 80009ca:	2500      	movs	r5, #0
 80009cc:	e7b5      	b.n	800093a <__aeabi_fdiv+0xbe>
 80009ce:	2301      	movs	r3, #1
 80009d0:	1a1b      	subs	r3, r3, r0
 80009d2:	2b1b      	cmp	r3, #27
 80009d4:	dcaf      	bgt.n	8000936 <__aeabi_fdiv+0xba>
 80009d6:	379e      	adds	r7, #158	; 0x9e
 80009d8:	0029      	movs	r1, r5
 80009da:	40bd      	lsls	r5, r7
 80009dc:	40d9      	lsrs	r1, r3
 80009de:	1e6a      	subs	r2, r5, #1
 80009e0:	4195      	sbcs	r5, r2
 80009e2:	430d      	orrs	r5, r1
 80009e4:	076b      	lsls	r3, r5, #29
 80009e6:	d004      	beq.n	80009f2 <__aeabi_fdiv+0x176>
 80009e8:	230f      	movs	r3, #15
 80009ea:	402b      	ands	r3, r5
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	d000      	beq.n	80009f2 <__aeabi_fdiv+0x176>
 80009f0:	3504      	adds	r5, #4
 80009f2:	016b      	lsls	r3, r5, #5
 80009f4:	d544      	bpl.n	8000a80 <__aeabi_fdiv+0x204>
 80009f6:	2001      	movs	r0, #1
 80009f8:	2500      	movs	r5, #0
 80009fa:	e79e      	b.n	800093a <__aeabi_fdiv+0xbe>
 80009fc:	20ff      	movs	r0, #255	; 0xff
 80009fe:	2500      	movs	r5, #0
 8000a00:	e79b      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a02:	2580      	movs	r5, #128	; 0x80
 8000a04:	2600      	movs	r6, #0
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	03ed      	lsls	r5, r5, #15
 8000a0a:	e796      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	4698      	mov	r8, r3
 8000a10:	2080      	movs	r0, #128	; 0x80
 8000a12:	03c0      	lsls	r0, r0, #15
 8000a14:	4205      	tst	r5, r0
 8000a16:	d009      	beq.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	4203      	tst	r3, r0
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	4305      	orrs	r5, r0
 8000a22:	026d      	lsls	r5, r5, #9
 8000a24:	0026      	movs	r6, r4
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	e786      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a2c:	2080      	movs	r0, #128	; 0x80
 8000a2e:	03c0      	lsls	r0, r0, #15
 8000a30:	4305      	orrs	r5, r0
 8000a32:	026d      	lsls	r5, r5, #9
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	0a6d      	lsrs	r5, r5, #9
 8000a38:	e77f      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	016a      	lsls	r2, r5, #5
 8000a3e:	0148      	lsls	r0, r1, #5
 8000a40:	4282      	cmp	r2, r0
 8000a42:	d219      	bcs.n	8000a78 <__aeabi_fdiv+0x1fc>
 8000a44:	211b      	movs	r1, #27
 8000a46:	2500      	movs	r5, #0
 8000a48:	3f01      	subs	r7, #1
 8000a4a:	2601      	movs	r6, #1
 8000a4c:	0014      	movs	r4, r2
 8000a4e:	006d      	lsls	r5, r5, #1
 8000a50:	0052      	lsls	r2, r2, #1
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	db01      	blt.n	8000a5a <__aeabi_fdiv+0x1de>
 8000a56:	4290      	cmp	r0, r2
 8000a58:	d801      	bhi.n	8000a5e <__aeabi_fdiv+0x1e2>
 8000a5a:	1a12      	subs	r2, r2, r0
 8000a5c:	4335      	orrs	r5, r6
 8000a5e:	3901      	subs	r1, #1
 8000a60:	2900      	cmp	r1, #0
 8000a62:	d1f3      	bne.n	8000a4c <__aeabi_fdiv+0x1d0>
 8000a64:	1e50      	subs	r0, r2, #1
 8000a66:	4182      	sbcs	r2, r0
 8000a68:	0038      	movs	r0, r7
 8000a6a:	307f      	adds	r0, #127	; 0x7f
 8000a6c:	001e      	movs	r6, r3
 8000a6e:	4315      	orrs	r5, r2
 8000a70:	2800      	cmp	r0, #0
 8000a72:	dd00      	ble.n	8000a76 <__aeabi_fdiv+0x1fa>
 8000a74:	e74b      	b.n	800090e <__aeabi_fdiv+0x92>
 8000a76:	e7aa      	b.n	80009ce <__aeabi_fdiv+0x152>
 8000a78:	211a      	movs	r1, #26
 8000a7a:	2501      	movs	r5, #1
 8000a7c:	1a12      	subs	r2, r2, r0
 8000a7e:	e7e4      	b.n	8000a4a <__aeabi_fdiv+0x1ce>
 8000a80:	01ad      	lsls	r5, r5, #6
 8000a82:	2000      	movs	r0, #0
 8000a84:	0a6d      	lsrs	r5, r5, #9
 8000a86:	e758      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a88:	08011e84 	.word	0x08011e84
 8000a8c:	f7ffffff 	.word	0xf7ffffff
 8000a90:	08011ec4 	.word	0x08011ec4

08000a94 <__eqsf2>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	0042      	lsls	r2, r0, #1
 8000a98:	024e      	lsls	r6, r1, #9
 8000a9a:	004c      	lsls	r4, r1, #1
 8000a9c:	0245      	lsls	r5, r0, #9
 8000a9e:	0a6d      	lsrs	r5, r5, #9
 8000aa0:	0e12      	lsrs	r2, r2, #24
 8000aa2:	0fc3      	lsrs	r3, r0, #31
 8000aa4:	0a76      	lsrs	r6, r6, #9
 8000aa6:	0e24      	lsrs	r4, r4, #24
 8000aa8:	0fc9      	lsrs	r1, r1, #31
 8000aaa:	2aff      	cmp	r2, #255	; 0xff
 8000aac:	d00f      	beq.n	8000ace <__eqsf2+0x3a>
 8000aae:	2cff      	cmp	r4, #255	; 0xff
 8000ab0:	d011      	beq.n	8000ad6 <__eqsf2+0x42>
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	42a2      	cmp	r2, r4
 8000ab6:	d000      	beq.n	8000aba <__eqsf2+0x26>
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	42b5      	cmp	r5, r6
 8000abc:	d1fc      	bne.n	8000ab8 <__eqsf2+0x24>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d00d      	beq.n	8000ade <__eqsf2+0x4a>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d1f8      	bne.n	8000ab8 <__eqsf2+0x24>
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	1e45      	subs	r5, r0, #1
 8000aca:	41a8      	sbcs	r0, r5
 8000acc:	e7f4      	b.n	8000ab8 <__eqsf2+0x24>
 8000ace:	2001      	movs	r0, #1
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d1f1      	bne.n	8000ab8 <__eqsf2+0x24>
 8000ad4:	e7eb      	b.n	8000aae <__eqsf2+0x1a>
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d1ed      	bne.n	8000ab8 <__eqsf2+0x24>
 8000adc:	e7e9      	b.n	8000ab2 <__eqsf2+0x1e>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	e7ea      	b.n	8000ab8 <__eqsf2+0x24>
 8000ae2:	46c0      	nop			; (mov r8, r8)

08000ae4 <__gesf2>:
 8000ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae6:	0042      	lsls	r2, r0, #1
 8000ae8:	0246      	lsls	r6, r0, #9
 8000aea:	024d      	lsls	r5, r1, #9
 8000aec:	004c      	lsls	r4, r1, #1
 8000aee:	0fc3      	lsrs	r3, r0, #31
 8000af0:	0a76      	lsrs	r6, r6, #9
 8000af2:	0e12      	lsrs	r2, r2, #24
 8000af4:	0a6d      	lsrs	r5, r5, #9
 8000af6:	0e24      	lsrs	r4, r4, #24
 8000af8:	0fc8      	lsrs	r0, r1, #31
 8000afa:	2aff      	cmp	r2, #255	; 0xff
 8000afc:	d01f      	beq.n	8000b3e <__gesf2+0x5a>
 8000afe:	2cff      	cmp	r4, #255	; 0xff
 8000b00:	d010      	beq.n	8000b24 <__gesf2+0x40>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d11f      	bne.n	8000b46 <__gesf2+0x62>
 8000b06:	4271      	negs	r1, r6
 8000b08:	4171      	adcs	r1, r6
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d101      	bne.n	8000b12 <__gesf2+0x2e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d01e      	beq.n	8000b50 <__gesf2+0x6c>
 8000b12:	2900      	cmp	r1, #0
 8000b14:	d10e      	bne.n	8000b34 <__gesf2+0x50>
 8000b16:	4283      	cmp	r3, r0
 8000b18:	d01e      	beq.n	8000b58 <__gesf2+0x74>
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	1e58      	subs	r0, r3, #1
 8000b1e:	4008      	ands	r0, r1
 8000b20:	3801      	subs	r0, #1
 8000b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d126      	bne.n	8000b76 <__gesf2+0x92>
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d1f4      	bne.n	8000b16 <__gesf2+0x32>
 8000b2c:	4271      	negs	r1, r6
 8000b2e:	4171      	adcs	r1, r6
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d0f0      	beq.n	8000b16 <__gesf2+0x32>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d1f4      	bne.n	8000b22 <__gesf2+0x3e>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	e7f1      	b.n	8000b22 <__gesf2+0x3e>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	d119      	bne.n	8000b76 <__gesf2+0x92>
 8000b42:	2cff      	cmp	r4, #255	; 0xff
 8000b44:	d0ee      	beq.n	8000b24 <__gesf2+0x40>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d1e5      	bne.n	8000b16 <__gesf2+0x32>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d1e3      	bne.n	8000b16 <__gesf2+0x32>
 8000b4e:	e7e4      	b.n	8000b1a <__gesf2+0x36>
 8000b50:	2000      	movs	r0, #0
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d0e5      	beq.n	8000b22 <__gesf2+0x3e>
 8000b56:	e7e0      	b.n	8000b1a <__gesf2+0x36>
 8000b58:	42a2      	cmp	r2, r4
 8000b5a:	dc05      	bgt.n	8000b68 <__gesf2+0x84>
 8000b5c:	dbea      	blt.n	8000b34 <__gesf2+0x50>
 8000b5e:	42ae      	cmp	r6, r5
 8000b60:	d802      	bhi.n	8000b68 <__gesf2+0x84>
 8000b62:	d3e7      	bcc.n	8000b34 <__gesf2+0x50>
 8000b64:	2000      	movs	r0, #0
 8000b66:	e7dc      	b.n	8000b22 <__gesf2+0x3e>
 8000b68:	4241      	negs	r1, r0
 8000b6a:	4141      	adcs	r1, r0
 8000b6c:	4248      	negs	r0, r1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4008      	ands	r0, r1
 8000b72:	3801      	subs	r0, #1
 8000b74:	e7d5      	b.n	8000b22 <__gesf2+0x3e>
 8000b76:	2002      	movs	r0, #2
 8000b78:	4240      	negs	r0, r0
 8000b7a:	e7d2      	b.n	8000b22 <__gesf2+0x3e>

08000b7c <__lesf2>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0246      	lsls	r6, r0, #9
 8000b82:	024d      	lsls	r5, r1, #9
 8000b84:	004c      	lsls	r4, r1, #1
 8000b86:	0fc3      	lsrs	r3, r0, #31
 8000b88:	0a76      	lsrs	r6, r6, #9
 8000b8a:	0e12      	lsrs	r2, r2, #24
 8000b8c:	0a6d      	lsrs	r5, r5, #9
 8000b8e:	0e24      	lsrs	r4, r4, #24
 8000b90:	0fc8      	lsrs	r0, r1, #31
 8000b92:	2aff      	cmp	r2, #255	; 0xff
 8000b94:	d00d      	beq.n	8000bb2 <__lesf2+0x36>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <__lesf2+0x3e>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d123      	bne.n	8000be6 <__lesf2+0x6a>
 8000b9e:	4271      	negs	r1, r6
 8000ba0:	4171      	adcs	r1, r6
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d10f      	bne.n	8000bc6 <__lesf2+0x4a>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d10d      	bne.n	8000bc6 <__lesf2+0x4a>
 8000baa:	2000      	movs	r0, #0
 8000bac:	2e00      	cmp	r6, #0
 8000bae:	d014      	beq.n	8000bda <__lesf2+0x5e>
 8000bb0:	e00d      	b.n	8000bce <__lesf2+0x52>
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d110      	bne.n	8000bd8 <__lesf2+0x5c>
 8000bb6:	2cff      	cmp	r4, #255	; 0xff
 8000bb8:	d115      	bne.n	8000be6 <__lesf2+0x6a>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d10c      	bne.n	8000bd8 <__lesf2+0x5c>
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d103      	bne.n	8000bca <__lesf2+0x4e>
 8000bc2:	4271      	negs	r1, r6
 8000bc4:	4171      	adcs	r1, r6
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	d108      	bne.n	8000bdc <__lesf2+0x60>
 8000bca:	4283      	cmp	r3, r0
 8000bcc:	d010      	beq.n	8000bf0 <__lesf2+0x74>
 8000bce:	2102      	movs	r1, #2
 8000bd0:	1e58      	subs	r0, r3, #1
 8000bd2:	4008      	ands	r0, r1
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	e000      	b.n	8000bda <__lesf2+0x5e>
 8000bd8:	2002      	movs	r0, #2
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d1fc      	bne.n	8000bda <__lesf2+0x5e>
 8000be0:	2001      	movs	r0, #1
 8000be2:	4240      	negs	r0, r0
 8000be4:	e7f9      	b.n	8000bda <__lesf2+0x5e>
 8000be6:	2c00      	cmp	r4, #0
 8000be8:	d1ef      	bne.n	8000bca <__lesf2+0x4e>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d1ed      	bne.n	8000bca <__lesf2+0x4e>
 8000bee:	e7ee      	b.n	8000bce <__lesf2+0x52>
 8000bf0:	42a2      	cmp	r2, r4
 8000bf2:	dc05      	bgt.n	8000c00 <__lesf2+0x84>
 8000bf4:	dbf2      	blt.n	8000bdc <__lesf2+0x60>
 8000bf6:	42ae      	cmp	r6, r5
 8000bf8:	d802      	bhi.n	8000c00 <__lesf2+0x84>
 8000bfa:	d3ef      	bcc.n	8000bdc <__lesf2+0x60>
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	e7ec      	b.n	8000bda <__lesf2+0x5e>
 8000c00:	4241      	negs	r1, r0
 8000c02:	4141      	adcs	r1, r0
 8000c04:	4248      	negs	r0, r1
 8000c06:	2102      	movs	r1, #2
 8000c08:	4008      	ands	r0, r1
 8000c0a:	3801      	subs	r0, #1
 8000c0c:	e7e5      	b.n	8000bda <__lesf2+0x5e>
 8000c0e:	46c0      	nop			; (mov r8, r8)

08000c10 <__aeabi_fmul>:
 8000c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c12:	4657      	mov	r7, sl
 8000c14:	464e      	mov	r6, r9
 8000c16:	4645      	mov	r5, r8
 8000c18:	46de      	mov	lr, fp
 8000c1a:	0244      	lsls	r4, r0, #9
 8000c1c:	b5e0      	push	{r5, r6, r7, lr}
 8000c1e:	0045      	lsls	r5, r0, #1
 8000c20:	1c0f      	adds	r7, r1, #0
 8000c22:	0a64      	lsrs	r4, r4, #9
 8000c24:	0e2d      	lsrs	r5, r5, #24
 8000c26:	0fc6      	lsrs	r6, r0, #31
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d047      	beq.n	8000cbc <__aeabi_fmul+0xac>
 8000c2c:	2dff      	cmp	r5, #255	; 0xff
 8000c2e:	d04d      	beq.n	8000ccc <__aeabi_fmul+0xbc>
 8000c30:	2300      	movs	r3, #0
 8000c32:	2080      	movs	r0, #128	; 0x80
 8000c34:	469a      	mov	sl, r3
 8000c36:	469b      	mov	fp, r3
 8000c38:	00e4      	lsls	r4, r4, #3
 8000c3a:	04c0      	lsls	r0, r0, #19
 8000c3c:	4304      	orrs	r4, r0
 8000c3e:	3d7f      	subs	r5, #127	; 0x7f
 8000c40:	0278      	lsls	r0, r7, #9
 8000c42:	0a43      	lsrs	r3, r0, #9
 8000c44:	4699      	mov	r9, r3
 8000c46:	007a      	lsls	r2, r7, #1
 8000c48:	0ffb      	lsrs	r3, r7, #31
 8000c4a:	4698      	mov	r8, r3
 8000c4c:	0e12      	lsrs	r2, r2, #24
 8000c4e:	464b      	mov	r3, r9
 8000c50:	d044      	beq.n	8000cdc <__aeabi_fmul+0xcc>
 8000c52:	2aff      	cmp	r2, #255	; 0xff
 8000c54:	d011      	beq.n	8000c7a <__aeabi_fmul+0x6a>
 8000c56:	00d8      	lsls	r0, r3, #3
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	04db      	lsls	r3, r3, #19
 8000c5c:	4303      	orrs	r3, r0
 8000c5e:	4699      	mov	r9, r3
 8000c60:	2000      	movs	r0, #0
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	18ad      	adds	r5, r5, r2
 8000c66:	4647      	mov	r7, r8
 8000c68:	4653      	mov	r3, sl
 8000c6a:	4077      	eors	r7, r6
 8000c6c:	1c69      	adds	r1, r5, #1
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	d83f      	bhi.n	8000cf2 <__aeabi_fmul+0xe2>
 8000c72:	4a72      	ldr	r2, [pc, #456]	; (8000e3c <__aeabi_fmul+0x22c>)
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	58d3      	ldr	r3, [r2, r3]
 8000c78:	469f      	mov	pc, r3
 8000c7a:	35ff      	adds	r5, #255	; 0xff
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_fmul+0x72>
 8000c80:	e079      	b.n	8000d76 <__aeabi_fmul+0x166>
 8000c82:	4652      	mov	r2, sl
 8000c84:	2302      	movs	r3, #2
 8000c86:	431a      	orrs	r2, r3
 8000c88:	4692      	mov	sl, r2
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	e7eb      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000c8e:	4647      	mov	r7, r8
 8000c90:	464c      	mov	r4, r9
 8000c92:	4683      	mov	fp, r0
 8000c94:	465b      	mov	r3, fp
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d028      	beq.n	8000cec <__aeabi_fmul+0xdc>
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fmul+0x90>
 8000c9e:	e0c6      	b.n	8000e2e <__aeabi_fmul+0x21e>
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d14f      	bne.n	8000d44 <__aeabi_fmul+0x134>
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	05c0      	lsls	r0, r0, #23
 8000caa:	07ff      	lsls	r7, r7, #31
 8000cac:	4320      	orrs	r0, r4
 8000cae:	4338      	orrs	r0, r7
 8000cb0:	bcf0      	pop	{r4, r5, r6, r7}
 8000cb2:	46bb      	mov	fp, r7
 8000cb4:	46b2      	mov	sl, r6
 8000cb6:	46a9      	mov	r9, r5
 8000cb8:	46a0      	mov	r8, r4
 8000cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d171      	bne.n	8000da4 <__aeabi_fmul+0x194>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	469a      	mov	sl, r3
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	2500      	movs	r5, #0
 8000cc8:	469b      	mov	fp, r3
 8000cca:	e7b9      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d163      	bne.n	8000d98 <__aeabi_fmul+0x188>
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	3b06      	subs	r3, #6
 8000cd6:	25ff      	movs	r5, #255	; 0xff
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e7b1      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d150      	bne.n	8000d82 <__aeabi_fmul+0x172>
 8000ce0:	4652      	mov	r2, sl
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	4692      	mov	sl, r2
 8000ce8:	2001      	movs	r0, #1
 8000cea:	e7bc      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000cec:	20ff      	movs	r0, #255	; 0xff
 8000cee:	2400      	movs	r4, #0
 8000cf0:	e7da      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000cf2:	4648      	mov	r0, r9
 8000cf4:	0c26      	lsrs	r6, r4, #16
 8000cf6:	0424      	lsls	r4, r4, #16
 8000cf8:	0c22      	lsrs	r2, r4, #16
 8000cfa:	0404      	lsls	r4, r0, #16
 8000cfc:	0c24      	lsrs	r4, r4, #16
 8000cfe:	464b      	mov	r3, r9
 8000d00:	0020      	movs	r0, r4
 8000d02:	0c1b      	lsrs	r3, r3, #16
 8000d04:	4350      	muls	r0, r2
 8000d06:	4374      	muls	r4, r6
 8000d08:	435a      	muls	r2, r3
 8000d0a:	435e      	muls	r6, r3
 8000d0c:	1912      	adds	r2, r2, r4
 8000d0e:	0c03      	lsrs	r3, r0, #16
 8000d10:	189b      	adds	r3, r3, r2
 8000d12:	429c      	cmp	r4, r3
 8000d14:	d903      	bls.n	8000d1e <__aeabi_fmul+0x10e>
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	0252      	lsls	r2, r2, #9
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	4466      	add	r6, ip
 8000d1e:	0400      	lsls	r0, r0, #16
 8000d20:	041a      	lsls	r2, r3, #16
 8000d22:	0c00      	lsrs	r0, r0, #16
 8000d24:	1812      	adds	r2, r2, r0
 8000d26:	0194      	lsls	r4, r2, #6
 8000d28:	1e60      	subs	r0, r4, #1
 8000d2a:	4184      	sbcs	r4, r0
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	0e92      	lsrs	r2, r2, #26
 8000d30:	199b      	adds	r3, r3, r6
 8000d32:	4314      	orrs	r4, r2
 8000d34:	019b      	lsls	r3, r3, #6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	d572      	bpl.n	8000e22 <__aeabi_fmul+0x212>
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	0863      	lsrs	r3, r4, #1
 8000d40:	4004      	ands	r4, r0
 8000d42:	431c      	orrs	r4, r3
 8000d44:	0008      	movs	r0, r1
 8000d46:	307f      	adds	r0, #127	; 0x7f
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	dd3c      	ble.n	8000dc6 <__aeabi_fmul+0x1b6>
 8000d4c:	0763      	lsls	r3, r4, #29
 8000d4e:	d004      	beq.n	8000d5a <__aeabi_fmul+0x14a>
 8000d50:	230f      	movs	r3, #15
 8000d52:	4023      	ands	r3, r4
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d000      	beq.n	8000d5a <__aeabi_fmul+0x14a>
 8000d58:	3404      	adds	r4, #4
 8000d5a:	0123      	lsls	r3, r4, #4
 8000d5c:	d503      	bpl.n	8000d66 <__aeabi_fmul+0x156>
 8000d5e:	3180      	adds	r1, #128	; 0x80
 8000d60:	0008      	movs	r0, r1
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <__aeabi_fmul+0x230>)
 8000d64:	401c      	ands	r4, r3
 8000d66:	28fe      	cmp	r0, #254	; 0xfe
 8000d68:	dcc0      	bgt.n	8000cec <__aeabi_fmul+0xdc>
 8000d6a:	01a4      	lsls	r4, r4, #6
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	b2c0      	uxtb	r0, r0
 8000d70:	e79a      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000d72:	0037      	movs	r7, r6
 8000d74:	e78e      	b.n	8000c94 <__aeabi_fmul+0x84>
 8000d76:	4652      	mov	r2, sl
 8000d78:	2303      	movs	r3, #3
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	4692      	mov	sl, r2
 8000d7e:	2003      	movs	r0, #3
 8000d80:	e771      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000d82:	4648      	mov	r0, r9
 8000d84:	f002 f974 	bl	8003070 <__clzsi2>
 8000d88:	464a      	mov	r2, r9
 8000d8a:	1f43      	subs	r3, r0, #5
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	1a2d      	subs	r5, r5, r0
 8000d90:	4691      	mov	r9, r2
 8000d92:	2000      	movs	r0, #0
 8000d94:	3d76      	subs	r5, #118	; 0x76
 8000d96:	e766      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000d98:	230c      	movs	r3, #12
 8000d9a:	469a      	mov	sl, r3
 8000d9c:	3b09      	subs	r3, #9
 8000d9e:	25ff      	movs	r5, #255	; 0xff
 8000da0:	469b      	mov	fp, r3
 8000da2:	e74d      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000da4:	0020      	movs	r0, r4
 8000da6:	f002 f963 	bl	8003070 <__clzsi2>
 8000daa:	2576      	movs	r5, #118	; 0x76
 8000dac:	1f43      	subs	r3, r0, #5
 8000dae:	409c      	lsls	r4, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	426d      	negs	r5, r5
 8000db4:	469a      	mov	sl, r3
 8000db6:	469b      	mov	fp, r3
 8000db8:	1a2d      	subs	r5, r5, r0
 8000dba:	e741      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000dbc:	2480      	movs	r4, #128	; 0x80
 8000dbe:	2700      	movs	r7, #0
 8000dc0:	20ff      	movs	r0, #255	; 0xff
 8000dc2:	03e4      	lsls	r4, r4, #15
 8000dc4:	e770      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	1a1b      	subs	r3, r3, r0
 8000dca:	2b1b      	cmp	r3, #27
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_fmul+0x1c0>
 8000dce:	e769      	b.n	8000ca4 <__aeabi_fmul+0x94>
 8000dd0:	319e      	adds	r1, #158	; 0x9e
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	408c      	lsls	r4, r1
 8000dd6:	40d8      	lsrs	r0, r3
 8000dd8:	1e63      	subs	r3, r4, #1
 8000dda:	419c      	sbcs	r4, r3
 8000ddc:	4304      	orrs	r4, r0
 8000dde:	0763      	lsls	r3, r4, #29
 8000de0:	d004      	beq.n	8000dec <__aeabi_fmul+0x1dc>
 8000de2:	230f      	movs	r3, #15
 8000de4:	4023      	ands	r3, r4
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d000      	beq.n	8000dec <__aeabi_fmul+0x1dc>
 8000dea:	3404      	adds	r4, #4
 8000dec:	0163      	lsls	r3, r4, #5
 8000dee:	d51a      	bpl.n	8000e26 <__aeabi_fmul+0x216>
 8000df0:	2001      	movs	r0, #1
 8000df2:	2400      	movs	r4, #0
 8000df4:	e758      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000df6:	2080      	movs	r0, #128	; 0x80
 8000df8:	03c0      	lsls	r0, r0, #15
 8000dfa:	4204      	tst	r4, r0
 8000dfc:	d009      	beq.n	8000e12 <__aeabi_fmul+0x202>
 8000dfe:	464b      	mov	r3, r9
 8000e00:	4203      	tst	r3, r0
 8000e02:	d106      	bne.n	8000e12 <__aeabi_fmul+0x202>
 8000e04:	464c      	mov	r4, r9
 8000e06:	4304      	orrs	r4, r0
 8000e08:	0264      	lsls	r4, r4, #9
 8000e0a:	4647      	mov	r7, r8
 8000e0c:	20ff      	movs	r0, #255	; 0xff
 8000e0e:	0a64      	lsrs	r4, r4, #9
 8000e10:	e74a      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e12:	2080      	movs	r0, #128	; 0x80
 8000e14:	03c0      	lsls	r0, r0, #15
 8000e16:	4304      	orrs	r4, r0
 8000e18:	0264      	lsls	r4, r4, #9
 8000e1a:	0037      	movs	r7, r6
 8000e1c:	20ff      	movs	r0, #255	; 0xff
 8000e1e:	0a64      	lsrs	r4, r4, #9
 8000e20:	e742      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e22:	0029      	movs	r1, r5
 8000e24:	e78e      	b.n	8000d44 <__aeabi_fmul+0x134>
 8000e26:	01a4      	lsls	r4, r4, #6
 8000e28:	2000      	movs	r0, #0
 8000e2a:	0a64      	lsrs	r4, r4, #9
 8000e2c:	e73c      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e2e:	2080      	movs	r0, #128	; 0x80
 8000e30:	03c0      	lsls	r0, r0, #15
 8000e32:	4304      	orrs	r4, r0
 8000e34:	0264      	lsls	r4, r4, #9
 8000e36:	20ff      	movs	r0, #255	; 0xff
 8000e38:	0a64      	lsrs	r4, r4, #9
 8000e3a:	e735      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e3c:	08011f04 	.word	0x08011f04
 8000e40:	f7ffffff 	.word	0xf7ffffff

08000e44 <__aeabi_fsub>:
 8000e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e46:	4646      	mov	r6, r8
 8000e48:	46d6      	mov	lr, sl
 8000e4a:	464f      	mov	r7, r9
 8000e4c:	0243      	lsls	r3, r0, #9
 8000e4e:	0a5b      	lsrs	r3, r3, #9
 8000e50:	00da      	lsls	r2, r3, #3
 8000e52:	4694      	mov	ip, r2
 8000e54:	024a      	lsls	r2, r1, #9
 8000e56:	b5c0      	push	{r6, r7, lr}
 8000e58:	0044      	lsls	r4, r0, #1
 8000e5a:	0a56      	lsrs	r6, r2, #9
 8000e5c:	1c05      	adds	r5, r0, #0
 8000e5e:	46b0      	mov	r8, r6
 8000e60:	0e24      	lsrs	r4, r4, #24
 8000e62:	004e      	lsls	r6, r1, #1
 8000e64:	0992      	lsrs	r2, r2, #6
 8000e66:	001f      	movs	r7, r3
 8000e68:	0020      	movs	r0, r4
 8000e6a:	4692      	mov	sl, r2
 8000e6c:	0fed      	lsrs	r5, r5, #31
 8000e6e:	0e36      	lsrs	r6, r6, #24
 8000e70:	0fc9      	lsrs	r1, r1, #31
 8000e72:	2eff      	cmp	r6, #255	; 0xff
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0x34>
 8000e76:	e07f      	b.n	8000f78 <__aeabi_fsub+0x134>
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4051      	eors	r1, r2
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d051      	beq.n	8000f24 <__aeabi_fsub+0xe0>
 8000e80:	1ba2      	subs	r2, r4, r6
 8000e82:	4691      	mov	r9, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	dc00      	bgt.n	8000e8a <__aeabi_fsub+0x46>
 8000e88:	e07e      	b.n	8000f88 <__aeabi_fsub+0x144>
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x4c>
 8000e8e:	e099      	b.n	8000fc4 <__aeabi_fsub+0x180>
 8000e90:	2cff      	cmp	r4, #255	; 0xff
 8000e92:	d100      	bne.n	8000e96 <__aeabi_fsub+0x52>
 8000e94:	e08c      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	4652      	mov	r2, sl
 8000e9a:	04db      	lsls	r3, r3, #19
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	4692      	mov	sl, r2
 8000ea0:	464a      	mov	r2, r9
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	2a1b      	cmp	r2, #27
 8000ea6:	dc08      	bgt.n	8000eba <__aeabi_fsub+0x76>
 8000ea8:	4653      	mov	r3, sl
 8000eaa:	2120      	movs	r1, #32
 8000eac:	40d3      	lsrs	r3, r2
 8000eae:	1a89      	subs	r1, r1, r2
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	408a      	lsls	r2, r1
 8000eb4:	1e51      	subs	r1, r2, #1
 8000eb6:	418a      	sbcs	r2, r1
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	4662      	mov	r2, ip
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	015a      	lsls	r2, r3, #5
 8000ec0:	d400      	bmi.n	8000ec4 <__aeabi_fsub+0x80>
 8000ec2:	e0f3      	b.n	80010ac <__aeabi_fsub+0x268>
 8000ec4:	019b      	lsls	r3, r3, #6
 8000ec6:	099e      	lsrs	r6, r3, #6
 8000ec8:	0030      	movs	r0, r6
 8000eca:	f002 f8d1 	bl	8003070 <__clzsi2>
 8000ece:	3805      	subs	r0, #5
 8000ed0:	4086      	lsls	r6, r0
 8000ed2:	4284      	cmp	r4, r0
 8000ed4:	dd00      	ble.n	8000ed8 <__aeabi_fsub+0x94>
 8000ed6:	e0f7      	b.n	80010c8 <__aeabi_fsub+0x284>
 8000ed8:	0032      	movs	r2, r6
 8000eda:	1b04      	subs	r4, r0, r4
 8000edc:	2020      	movs	r0, #32
 8000ede:	3401      	adds	r4, #1
 8000ee0:	40e2      	lsrs	r2, r4
 8000ee2:	1b04      	subs	r4, r0, r4
 8000ee4:	40a6      	lsls	r6, r4
 8000ee6:	0033      	movs	r3, r6
 8000ee8:	1e5e      	subs	r6, r3, #1
 8000eea:	41b3      	sbcs	r3, r6
 8000eec:	2400      	movs	r4, #0
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	075a      	lsls	r2, r3, #29
 8000ef2:	d004      	beq.n	8000efe <__aeabi_fsub+0xba>
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	2a04      	cmp	r2, #4
 8000efa:	d000      	beq.n	8000efe <__aeabi_fsub+0xba>
 8000efc:	3304      	adds	r3, #4
 8000efe:	015a      	lsls	r2, r3, #5
 8000f00:	d400      	bmi.n	8000f04 <__aeabi_fsub+0xc0>
 8000f02:	e0d6      	b.n	80010b2 <__aeabi_fsub+0x26e>
 8000f04:	1c62      	adds	r2, r4, #1
 8000f06:	2cfe      	cmp	r4, #254	; 0xfe
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0xc8>
 8000f0a:	e0da      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000f0c:	019b      	lsls	r3, r3, #6
 8000f0e:	0a5f      	lsrs	r7, r3, #9
 8000f10:	b2d0      	uxtb	r0, r2
 8000f12:	05c0      	lsls	r0, r0, #23
 8000f14:	4338      	orrs	r0, r7
 8000f16:	07ed      	lsls	r5, r5, #31
 8000f18:	4328      	orrs	r0, r5
 8000f1a:	bce0      	pop	{r5, r6, r7}
 8000f1c:	46ba      	mov	sl, r7
 8000f1e:	46b1      	mov	r9, r6
 8000f20:	46a8      	mov	r8, r5
 8000f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f24:	1ba2      	subs	r2, r4, r6
 8000f26:	4691      	mov	r9, r2
 8000f28:	2a00      	cmp	r2, #0
 8000f2a:	dd63      	ble.n	8000ff4 <__aeabi_fsub+0x1b0>
 8000f2c:	2e00      	cmp	r6, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0xee>
 8000f30:	e099      	b.n	8001066 <__aeabi_fsub+0x222>
 8000f32:	2cff      	cmp	r4, #255	; 0xff
 8000f34:	d03c      	beq.n	8000fb0 <__aeabi_fsub+0x16c>
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	4652      	mov	r2, sl
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	4692      	mov	sl, r2
 8000f40:	464a      	mov	r2, r9
 8000f42:	2301      	movs	r3, #1
 8000f44:	2a1b      	cmp	r2, #27
 8000f46:	dc08      	bgt.n	8000f5a <__aeabi_fsub+0x116>
 8000f48:	4653      	mov	r3, sl
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	40d3      	lsrs	r3, r2
 8000f4e:	1a89      	subs	r1, r1, r2
 8000f50:	4652      	mov	r2, sl
 8000f52:	408a      	lsls	r2, r1
 8000f54:	1e51      	subs	r1, r2, #1
 8000f56:	418a      	sbcs	r2, r1
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	4463      	add	r3, ip
 8000f5c:	015a      	lsls	r2, r3, #5
 8000f5e:	d400      	bmi.n	8000f62 <__aeabi_fsub+0x11e>
 8000f60:	e0a4      	b.n	80010ac <__aeabi_fsub+0x268>
 8000f62:	3401      	adds	r4, #1
 8000f64:	2cff      	cmp	r4, #255	; 0xff
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fsub+0x126>
 8000f68:	e0ab      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4997      	ldr	r1, [pc, #604]	; (80011cc <__aeabi_fsub+0x388>)
 8000f6e:	401a      	ands	r2, r3
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	400b      	ands	r3, r1
 8000f74:	4313      	orrs	r3, r2
 8000f76:	e7bb      	b.n	8000ef0 <__aeabi_fsub+0xac>
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d032      	beq.n	8000fe2 <__aeabi_fsub+0x19e>
 8000f7c:	428d      	cmp	r5, r1
 8000f7e:	d035      	beq.n	8000fec <__aeabi_fsub+0x1a8>
 8000f80:	22ff      	movs	r2, #255	; 0xff
 8000f82:	4252      	negs	r2, r2
 8000f84:	4691      	mov	r9, r2
 8000f86:	44a1      	add	r9, r4
 8000f88:	464a      	mov	r2, r9
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d051      	beq.n	8001032 <__aeabi_fsub+0x1ee>
 8000f8e:	1b30      	subs	r0, r6, r4
 8000f90:	2c00      	cmp	r4, #0
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fsub+0x152>
 8000f94:	e09c      	b.n	80010d0 <__aeabi_fsub+0x28c>
 8000f96:	4663      	mov	r3, ip
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_fsub+0x15a>
 8000f9c:	e0df      	b.n	800115e <__aeabi_fsub+0x31a>
 8000f9e:	3801      	subs	r0, #1
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_fsub+0x162>
 8000fa4:	e0f7      	b.n	8001196 <__aeabi_fsub+0x352>
 8000fa6:	2eff      	cmp	r6, #255	; 0xff
 8000fa8:	d000      	beq.n	8000fac <__aeabi_fsub+0x168>
 8000faa:	e099      	b.n	80010e0 <__aeabi_fsub+0x29c>
 8000fac:	000d      	movs	r5, r1
 8000fae:	4643      	mov	r3, r8
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0x172>
 8000fb4:	e085      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000fb6:	2780      	movs	r7, #128	; 0x80
 8000fb8:	03ff      	lsls	r7, r7, #15
 8000fba:	431f      	orrs	r7, r3
 8000fbc:	027f      	lsls	r7, r7, #9
 8000fbe:	20ff      	movs	r0, #255	; 0xff
 8000fc0:	0a7f      	lsrs	r7, r7, #9
 8000fc2:	e7a6      	b.n	8000f12 <__aeabi_fsub+0xce>
 8000fc4:	4652      	mov	r2, sl
 8000fc6:	2a00      	cmp	r2, #0
 8000fc8:	d074      	beq.n	80010b4 <__aeabi_fsub+0x270>
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4252      	negs	r2, r2
 8000fce:	4690      	mov	r8, r2
 8000fd0:	44c1      	add	r9, r8
 8000fd2:	464a      	mov	r2, r9
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_fsub+0x196>
 8000fd8:	e0c8      	b.n	800116c <__aeabi_fsub+0x328>
 8000fda:	2cff      	cmp	r4, #255	; 0xff
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_fsub+0x19c>
 8000fde:	e75f      	b.n	8000ea0 <__aeabi_fsub+0x5c>
 8000fe0:	e7e6      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4051      	eors	r1, r2
 8000fe6:	42a9      	cmp	r1, r5
 8000fe8:	d000      	beq.n	8000fec <__aeabi_fsub+0x1a8>
 8000fea:	e749      	b.n	8000e80 <__aeabi_fsub+0x3c>
 8000fec:	22ff      	movs	r2, #255	; 0xff
 8000fee:	4252      	negs	r2, r2
 8000ff0:	4691      	mov	r9, r2
 8000ff2:	44a1      	add	r9, r4
 8000ff4:	464a      	mov	r2, r9
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d043      	beq.n	8001082 <__aeabi_fsub+0x23e>
 8000ffa:	1b31      	subs	r1, r6, r4
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_fsub+0x1be>
 8001000:	e08c      	b.n	800111c <__aeabi_fsub+0x2d8>
 8001002:	2eff      	cmp	r6, #255	; 0xff
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x1c4>
 8001006:	e092      	b.n	800112e <__aeabi_fsub+0x2ea>
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	4662      	mov	r2, ip
 800100c:	04db      	lsls	r3, r3, #19
 800100e:	431a      	orrs	r2, r3
 8001010:	4694      	mov	ip, r2
 8001012:	2301      	movs	r3, #1
 8001014:	291b      	cmp	r1, #27
 8001016:	dc09      	bgt.n	800102c <__aeabi_fsub+0x1e8>
 8001018:	2020      	movs	r0, #32
 800101a:	4663      	mov	r3, ip
 800101c:	4662      	mov	r2, ip
 800101e:	40cb      	lsrs	r3, r1
 8001020:	1a41      	subs	r1, r0, r1
 8001022:	408a      	lsls	r2, r1
 8001024:	0011      	movs	r1, r2
 8001026:	1e48      	subs	r0, r1, #1
 8001028:	4181      	sbcs	r1, r0
 800102a:	430b      	orrs	r3, r1
 800102c:	0034      	movs	r4, r6
 800102e:	4453      	add	r3, sl
 8001030:	e794      	b.n	8000f5c <__aeabi_fsub+0x118>
 8001032:	22fe      	movs	r2, #254	; 0xfe
 8001034:	1c66      	adds	r6, r4, #1
 8001036:	4232      	tst	r2, r6
 8001038:	d164      	bne.n	8001104 <__aeabi_fsub+0x2c0>
 800103a:	2c00      	cmp	r4, #0
 800103c:	d000      	beq.n	8001040 <__aeabi_fsub+0x1fc>
 800103e:	e082      	b.n	8001146 <__aeabi_fsub+0x302>
 8001040:	4663      	mov	r3, ip
 8001042:	2b00      	cmp	r3, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_fsub+0x204>
 8001046:	e0ab      	b.n	80011a0 <__aeabi_fsub+0x35c>
 8001048:	4653      	mov	r3, sl
 800104a:	2b00      	cmp	r3, #0
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0x20c>
 800104e:	e760      	b.n	8000f12 <__aeabi_fsub+0xce>
 8001050:	4663      	mov	r3, ip
 8001052:	4652      	mov	r2, sl
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	015a      	lsls	r2, r3, #5
 8001058:	d400      	bmi.n	800105c <__aeabi_fsub+0x218>
 800105a:	e0aa      	b.n	80011b2 <__aeabi_fsub+0x36e>
 800105c:	4663      	mov	r3, ip
 800105e:	4652      	mov	r2, sl
 8001060:	000d      	movs	r5, r1
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	e744      	b.n	8000ef0 <__aeabi_fsub+0xac>
 8001066:	4652      	mov	r2, sl
 8001068:	2a00      	cmp	r2, #0
 800106a:	d023      	beq.n	80010b4 <__aeabi_fsub+0x270>
 800106c:	2201      	movs	r2, #1
 800106e:	4252      	negs	r2, r2
 8001070:	4690      	mov	r8, r2
 8001072:	44c1      	add	r9, r8
 8001074:	464a      	mov	r2, r9
 8001076:	2a00      	cmp	r2, #0
 8001078:	d075      	beq.n	8001166 <__aeabi_fsub+0x322>
 800107a:	2cff      	cmp	r4, #255	; 0xff
 800107c:	d000      	beq.n	8001080 <__aeabi_fsub+0x23c>
 800107e:	e75f      	b.n	8000f40 <__aeabi_fsub+0xfc>
 8001080:	e796      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001082:	26fe      	movs	r6, #254	; 0xfe
 8001084:	3401      	adds	r4, #1
 8001086:	4226      	tst	r6, r4
 8001088:	d153      	bne.n	8001132 <__aeabi_fsub+0x2ee>
 800108a:	2800      	cmp	r0, #0
 800108c:	d172      	bne.n	8001174 <__aeabi_fsub+0x330>
 800108e:	4663      	mov	r3, ip
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_fsub+0x252>
 8001094:	e093      	b.n	80011be <__aeabi_fsub+0x37a>
 8001096:	4653      	mov	r3, sl
 8001098:	2b00      	cmp	r3, #0
 800109a:	d100      	bne.n	800109e <__aeabi_fsub+0x25a>
 800109c:	e739      	b.n	8000f12 <__aeabi_fsub+0xce>
 800109e:	4463      	add	r3, ip
 80010a0:	2400      	movs	r4, #0
 80010a2:	015a      	lsls	r2, r3, #5
 80010a4:	d502      	bpl.n	80010ac <__aeabi_fsub+0x268>
 80010a6:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <__aeabi_fsub+0x38c>)
 80010a8:	3401      	adds	r4, #1
 80010aa:	4013      	ands	r3, r2
 80010ac:	075a      	lsls	r2, r3, #29
 80010ae:	d000      	beq.n	80010b2 <__aeabi_fsub+0x26e>
 80010b0:	e720      	b.n	8000ef4 <__aeabi_fsub+0xb0>
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	2cff      	cmp	r4, #255	; 0xff
 80010b6:	d100      	bne.n	80010ba <__aeabi_fsub+0x276>
 80010b8:	e77a      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 80010ba:	025b      	lsls	r3, r3, #9
 80010bc:	0a5f      	lsrs	r7, r3, #9
 80010be:	b2e0      	uxtb	r0, r4
 80010c0:	e727      	b.n	8000f12 <__aeabi_fsub+0xce>
 80010c2:	20ff      	movs	r0, #255	; 0xff
 80010c4:	2700      	movs	r7, #0
 80010c6:	e724      	b.n	8000f12 <__aeabi_fsub+0xce>
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <__aeabi_fsub+0x38c>)
 80010ca:	1a24      	subs	r4, r4, r0
 80010cc:	4033      	ands	r3, r6
 80010ce:	e70f      	b.n	8000ef0 <__aeabi_fsub+0xac>
 80010d0:	2eff      	cmp	r6, #255	; 0xff
 80010d2:	d100      	bne.n	80010d6 <__aeabi_fsub+0x292>
 80010d4:	e76a      	b.n	8000fac <__aeabi_fsub+0x168>
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	4662      	mov	r2, ip
 80010da:	04db      	lsls	r3, r3, #19
 80010dc:	431a      	orrs	r2, r3
 80010de:	4694      	mov	ip, r2
 80010e0:	2301      	movs	r3, #1
 80010e2:	281b      	cmp	r0, #27
 80010e4:	dc09      	bgt.n	80010fa <__aeabi_fsub+0x2b6>
 80010e6:	2420      	movs	r4, #32
 80010e8:	4663      	mov	r3, ip
 80010ea:	4662      	mov	r2, ip
 80010ec:	40c3      	lsrs	r3, r0
 80010ee:	1a20      	subs	r0, r4, r0
 80010f0:	4082      	lsls	r2, r0
 80010f2:	0010      	movs	r0, r2
 80010f4:	1e44      	subs	r4, r0, #1
 80010f6:	41a0      	sbcs	r0, r4
 80010f8:	4303      	orrs	r3, r0
 80010fa:	4652      	mov	r2, sl
 80010fc:	000d      	movs	r5, r1
 80010fe:	0034      	movs	r4, r6
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	e6dc      	b.n	8000ebe <__aeabi_fsub+0x7a>
 8001104:	4663      	mov	r3, ip
 8001106:	4652      	mov	r2, sl
 8001108:	1a9e      	subs	r6, r3, r2
 800110a:	0173      	lsls	r3, r6, #5
 800110c:	d417      	bmi.n	800113e <__aeabi_fsub+0x2fa>
 800110e:	2e00      	cmp	r6, #0
 8001110:	d000      	beq.n	8001114 <__aeabi_fsub+0x2d0>
 8001112:	e6d9      	b.n	8000ec8 <__aeabi_fsub+0x84>
 8001114:	2500      	movs	r5, #0
 8001116:	2000      	movs	r0, #0
 8001118:	2700      	movs	r7, #0
 800111a:	e6fa      	b.n	8000f12 <__aeabi_fsub+0xce>
 800111c:	4663      	mov	r3, ip
 800111e:	2b00      	cmp	r3, #0
 8001120:	d044      	beq.n	80011ac <__aeabi_fsub+0x368>
 8001122:	3901      	subs	r1, #1
 8001124:	2900      	cmp	r1, #0
 8001126:	d04c      	beq.n	80011c2 <__aeabi_fsub+0x37e>
 8001128:	2eff      	cmp	r6, #255	; 0xff
 800112a:	d000      	beq.n	800112e <__aeabi_fsub+0x2ea>
 800112c:	e771      	b.n	8001012 <__aeabi_fsub+0x1ce>
 800112e:	4643      	mov	r3, r8
 8001130:	e73e      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001132:	2cff      	cmp	r4, #255	; 0xff
 8001134:	d0c5      	beq.n	80010c2 <__aeabi_fsub+0x27e>
 8001136:	4652      	mov	r2, sl
 8001138:	4462      	add	r2, ip
 800113a:	0853      	lsrs	r3, r2, #1
 800113c:	e7b6      	b.n	80010ac <__aeabi_fsub+0x268>
 800113e:	4663      	mov	r3, ip
 8001140:	000d      	movs	r5, r1
 8001142:	1ad6      	subs	r6, r2, r3
 8001144:	e6c0      	b.n	8000ec8 <__aeabi_fsub+0x84>
 8001146:	4662      	mov	r2, ip
 8001148:	2a00      	cmp	r2, #0
 800114a:	d116      	bne.n	800117a <__aeabi_fsub+0x336>
 800114c:	4653      	mov	r3, sl
 800114e:	2b00      	cmp	r3, #0
 8001150:	d000      	beq.n	8001154 <__aeabi_fsub+0x310>
 8001152:	e72b      	b.n	8000fac <__aeabi_fsub+0x168>
 8001154:	2780      	movs	r7, #128	; 0x80
 8001156:	2500      	movs	r5, #0
 8001158:	20ff      	movs	r0, #255	; 0xff
 800115a:	03ff      	lsls	r7, r7, #15
 800115c:	e6d9      	b.n	8000f12 <__aeabi_fsub+0xce>
 800115e:	000d      	movs	r5, r1
 8001160:	4643      	mov	r3, r8
 8001162:	0034      	movs	r4, r6
 8001164:	e7a6      	b.n	80010b4 <__aeabi_fsub+0x270>
 8001166:	4653      	mov	r3, sl
 8001168:	4463      	add	r3, ip
 800116a:	e6f7      	b.n	8000f5c <__aeabi_fsub+0x118>
 800116c:	4663      	mov	r3, ip
 800116e:	4652      	mov	r2, sl
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	e6a4      	b.n	8000ebe <__aeabi_fsub+0x7a>
 8001174:	4662      	mov	r2, ip
 8001176:	2a00      	cmp	r2, #0
 8001178:	d0d9      	beq.n	800112e <__aeabi_fsub+0x2ea>
 800117a:	4652      	mov	r2, sl
 800117c:	2a00      	cmp	r2, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x33e>
 8001180:	e716      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	03d2      	lsls	r2, r2, #15
 8001186:	4213      	tst	r3, r2
 8001188:	d100      	bne.n	800118c <__aeabi_fsub+0x348>
 800118a:	e711      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 800118c:	4640      	mov	r0, r8
 800118e:	4210      	tst	r0, r2
 8001190:	d000      	beq.n	8001194 <__aeabi_fsub+0x350>
 8001192:	e70d      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001194:	e70a      	b.n	8000fac <__aeabi_fsub+0x168>
 8001196:	4652      	mov	r2, sl
 8001198:	000d      	movs	r5, r1
 800119a:	0034      	movs	r4, r6
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	e68e      	b.n	8000ebe <__aeabi_fsub+0x7a>
 80011a0:	4653      	mov	r3, sl
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <__aeabi_fsub+0x374>
 80011a6:	000d      	movs	r5, r1
 80011a8:	4647      	mov	r7, r8
 80011aa:	e6b2      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011ac:	4643      	mov	r3, r8
 80011ae:	0034      	movs	r4, r6
 80011b0:	e780      	b.n	80010b4 <__aeabi_fsub+0x270>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d000      	beq.n	80011b8 <__aeabi_fsub+0x374>
 80011b6:	e779      	b.n	80010ac <__aeabi_fsub+0x268>
 80011b8:	2500      	movs	r5, #0
 80011ba:	2700      	movs	r7, #0
 80011bc:	e6a9      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011be:	4647      	mov	r7, r8
 80011c0:	e6a7      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011c2:	4653      	mov	r3, sl
 80011c4:	0034      	movs	r4, r6
 80011c6:	4463      	add	r3, ip
 80011c8:	e6c8      	b.n	8000f5c <__aeabi_fsub+0x118>
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	7dffffff 	.word	0x7dffffff
 80011d0:	fbffffff 	.word	0xfbffffff

080011d4 <__aeabi_f2iz>:
 80011d4:	0241      	lsls	r1, r0, #9
 80011d6:	0042      	lsls	r2, r0, #1
 80011d8:	0fc3      	lsrs	r3, r0, #31
 80011da:	0a49      	lsrs	r1, r1, #9
 80011dc:	2000      	movs	r0, #0
 80011de:	0e12      	lsrs	r2, r2, #24
 80011e0:	2a7e      	cmp	r2, #126	; 0x7e
 80011e2:	d903      	bls.n	80011ec <__aeabi_f2iz+0x18>
 80011e4:	2a9d      	cmp	r2, #157	; 0x9d
 80011e6:	d902      	bls.n	80011ee <__aeabi_f2iz+0x1a>
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <__aeabi_f2iz+0x3c>)
 80011ea:	1898      	adds	r0, r3, r2
 80011ec:	4770      	bx	lr
 80011ee:	2080      	movs	r0, #128	; 0x80
 80011f0:	0400      	lsls	r0, r0, #16
 80011f2:	4301      	orrs	r1, r0
 80011f4:	2a95      	cmp	r2, #149	; 0x95
 80011f6:	dc07      	bgt.n	8001208 <__aeabi_f2iz+0x34>
 80011f8:	2096      	movs	r0, #150	; 0x96
 80011fa:	1a82      	subs	r2, r0, r2
 80011fc:	40d1      	lsrs	r1, r2
 80011fe:	4248      	negs	r0, r1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f3      	bne.n	80011ec <__aeabi_f2iz+0x18>
 8001204:	0008      	movs	r0, r1
 8001206:	e7f1      	b.n	80011ec <__aeabi_f2iz+0x18>
 8001208:	3a96      	subs	r2, #150	; 0x96
 800120a:	4091      	lsls	r1, r2
 800120c:	e7f7      	b.n	80011fe <__aeabi_f2iz+0x2a>
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	7fffffff 	.word	0x7fffffff

08001214 <__aeabi_i2f>:
 8001214:	b570      	push	{r4, r5, r6, lr}
 8001216:	2800      	cmp	r0, #0
 8001218:	d013      	beq.n	8001242 <__aeabi_i2f+0x2e>
 800121a:	17c3      	asrs	r3, r0, #31
 800121c:	18c5      	adds	r5, r0, r3
 800121e:	405d      	eors	r5, r3
 8001220:	0fc4      	lsrs	r4, r0, #31
 8001222:	0028      	movs	r0, r5
 8001224:	f001 ff24 	bl	8003070 <__clzsi2>
 8001228:	239e      	movs	r3, #158	; 0x9e
 800122a:	0001      	movs	r1, r0
 800122c:	1a1b      	subs	r3, r3, r0
 800122e:	2b96      	cmp	r3, #150	; 0x96
 8001230:	dc0f      	bgt.n	8001252 <__aeabi_i2f+0x3e>
 8001232:	2808      	cmp	r0, #8
 8001234:	dd01      	ble.n	800123a <__aeabi_i2f+0x26>
 8001236:	3908      	subs	r1, #8
 8001238:	408d      	lsls	r5, r1
 800123a:	026d      	lsls	r5, r5, #9
 800123c:	0a6d      	lsrs	r5, r5, #9
 800123e:	b2d8      	uxtb	r0, r3
 8001240:	e002      	b.n	8001248 <__aeabi_i2f+0x34>
 8001242:	2400      	movs	r4, #0
 8001244:	2000      	movs	r0, #0
 8001246:	2500      	movs	r5, #0
 8001248:	05c0      	lsls	r0, r0, #23
 800124a:	4328      	orrs	r0, r5
 800124c:	07e4      	lsls	r4, r4, #31
 800124e:	4320      	orrs	r0, r4
 8001250:	bd70      	pop	{r4, r5, r6, pc}
 8001252:	2b99      	cmp	r3, #153	; 0x99
 8001254:	dd0b      	ble.n	800126e <__aeabi_i2f+0x5a>
 8001256:	2205      	movs	r2, #5
 8001258:	002e      	movs	r6, r5
 800125a:	1a12      	subs	r2, r2, r0
 800125c:	40d6      	lsrs	r6, r2
 800125e:	0002      	movs	r2, r0
 8001260:	321b      	adds	r2, #27
 8001262:	4095      	lsls	r5, r2
 8001264:	0028      	movs	r0, r5
 8001266:	1e45      	subs	r5, r0, #1
 8001268:	41a8      	sbcs	r0, r5
 800126a:	0035      	movs	r5, r6
 800126c:	4305      	orrs	r5, r0
 800126e:	2905      	cmp	r1, #5
 8001270:	dd01      	ble.n	8001276 <__aeabi_i2f+0x62>
 8001272:	1f4a      	subs	r2, r1, #5
 8001274:	4095      	lsls	r5, r2
 8001276:	002a      	movs	r2, r5
 8001278:	4e08      	ldr	r6, [pc, #32]	; (800129c <__aeabi_i2f+0x88>)
 800127a:	4032      	ands	r2, r6
 800127c:	0768      	lsls	r0, r5, #29
 800127e:	d009      	beq.n	8001294 <__aeabi_i2f+0x80>
 8001280:	200f      	movs	r0, #15
 8001282:	4028      	ands	r0, r5
 8001284:	2804      	cmp	r0, #4
 8001286:	d005      	beq.n	8001294 <__aeabi_i2f+0x80>
 8001288:	3204      	adds	r2, #4
 800128a:	0150      	lsls	r0, r2, #5
 800128c:	d502      	bpl.n	8001294 <__aeabi_i2f+0x80>
 800128e:	239f      	movs	r3, #159	; 0x9f
 8001290:	4032      	ands	r2, r6
 8001292:	1a5b      	subs	r3, r3, r1
 8001294:	0192      	lsls	r2, r2, #6
 8001296:	0a55      	lsrs	r5, r2, #9
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	e7d5      	b.n	8001248 <__aeabi_i2f+0x34>
 800129c:	fbffffff 	.word	0xfbffffff

080012a0 <__aeabi_dadd>:
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	464f      	mov	r7, r9
 80012a4:	46d6      	mov	lr, sl
 80012a6:	4646      	mov	r6, r8
 80012a8:	000d      	movs	r5, r1
 80012aa:	0001      	movs	r1, r0
 80012ac:	0018      	movs	r0, r3
 80012ae:	b5c0      	push	{r6, r7, lr}
 80012b0:	0017      	movs	r7, r2
 80012b2:	032b      	lsls	r3, r5, #12
 80012b4:	0a5a      	lsrs	r2, r3, #9
 80012b6:	0f4b      	lsrs	r3, r1, #29
 80012b8:	4313      	orrs	r3, r2
 80012ba:	00ca      	lsls	r2, r1, #3
 80012bc:	4691      	mov	r9, r2
 80012be:	0302      	lsls	r2, r0, #12
 80012c0:	006e      	lsls	r6, r5, #1
 80012c2:	0041      	lsls	r1, r0, #1
 80012c4:	0a52      	lsrs	r2, r2, #9
 80012c6:	0fec      	lsrs	r4, r5, #31
 80012c8:	0f7d      	lsrs	r5, r7, #29
 80012ca:	4315      	orrs	r5, r2
 80012cc:	0d76      	lsrs	r6, r6, #21
 80012ce:	0d49      	lsrs	r1, r1, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	4682      	mov	sl, r0
 80012d4:	46ac      	mov	ip, r5
 80012d6:	00ff      	lsls	r7, r7, #3
 80012d8:	1a72      	subs	r2, r6, r1
 80012da:	4284      	cmp	r4, r0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dadd+0x40>
 80012de:	e098      	b.n	8001412 <__aeabi_dadd+0x172>
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	dc00      	bgt.n	80012e6 <__aeabi_dadd+0x46>
 80012e4:	e081      	b.n	80013ea <__aeabi_dadd+0x14a>
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d100      	bne.n	80012ec <__aeabi_dadd+0x4c>
 80012ea:	e0b6      	b.n	800145a <__aeabi_dadd+0x1ba>
 80012ec:	49c9      	ldr	r1, [pc, #804]	; (8001614 <__aeabi_dadd+0x374>)
 80012ee:	428e      	cmp	r6, r1
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dadd+0x54>
 80012f2:	e172      	b.n	80015da <__aeabi_dadd+0x33a>
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	0028      	movs	r0, r5
 80012f8:	0409      	lsls	r1, r1, #16
 80012fa:	4308      	orrs	r0, r1
 80012fc:	4684      	mov	ip, r0
 80012fe:	2a38      	cmp	r2, #56	; 0x38
 8001300:	dd00      	ble.n	8001304 <__aeabi_dadd+0x64>
 8001302:	e15e      	b.n	80015c2 <__aeabi_dadd+0x322>
 8001304:	2a1f      	cmp	r2, #31
 8001306:	dd00      	ble.n	800130a <__aeabi_dadd+0x6a>
 8001308:	e1ee      	b.n	80016e8 <__aeabi_dadd+0x448>
 800130a:	2020      	movs	r0, #32
 800130c:	0039      	movs	r1, r7
 800130e:	4665      	mov	r5, ip
 8001310:	1a80      	subs	r0, r0, r2
 8001312:	4087      	lsls	r7, r0
 8001314:	40d1      	lsrs	r1, r2
 8001316:	4085      	lsls	r5, r0
 8001318:	430d      	orrs	r5, r1
 800131a:	0039      	movs	r1, r7
 800131c:	1e4f      	subs	r7, r1, #1
 800131e:	41b9      	sbcs	r1, r7
 8001320:	4667      	mov	r7, ip
 8001322:	40d7      	lsrs	r7, r2
 8001324:	4329      	orrs	r1, r5
 8001326:	1bdb      	subs	r3, r3, r7
 8001328:	464a      	mov	r2, r9
 800132a:	1a55      	subs	r5, r2, r1
 800132c:	45a9      	cmp	r9, r5
 800132e:	4189      	sbcs	r1, r1
 8001330:	4249      	negs	r1, r1
 8001332:	1a5b      	subs	r3, r3, r1
 8001334:	4698      	mov	r8, r3
 8001336:	4643      	mov	r3, r8
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	d400      	bmi.n	800133e <__aeabi_dadd+0x9e>
 800133c:	e0cc      	b.n	80014d8 <__aeabi_dadd+0x238>
 800133e:	4643      	mov	r3, r8
 8001340:	025b      	lsls	r3, r3, #9
 8001342:	0a5b      	lsrs	r3, r3, #9
 8001344:	4698      	mov	r8, r3
 8001346:	4643      	mov	r3, r8
 8001348:	2b00      	cmp	r3, #0
 800134a:	d100      	bne.n	800134e <__aeabi_dadd+0xae>
 800134c:	e12c      	b.n	80015a8 <__aeabi_dadd+0x308>
 800134e:	4640      	mov	r0, r8
 8001350:	f001 fe8e 	bl	8003070 <__clzsi2>
 8001354:	0001      	movs	r1, r0
 8001356:	3908      	subs	r1, #8
 8001358:	2220      	movs	r2, #32
 800135a:	0028      	movs	r0, r5
 800135c:	4643      	mov	r3, r8
 800135e:	1a52      	subs	r2, r2, r1
 8001360:	408b      	lsls	r3, r1
 8001362:	40d0      	lsrs	r0, r2
 8001364:	408d      	lsls	r5, r1
 8001366:	4303      	orrs	r3, r0
 8001368:	428e      	cmp	r6, r1
 800136a:	dd00      	ble.n	800136e <__aeabi_dadd+0xce>
 800136c:	e117      	b.n	800159e <__aeabi_dadd+0x2fe>
 800136e:	1b8e      	subs	r6, r1, r6
 8001370:	1c72      	adds	r2, r6, #1
 8001372:	2a1f      	cmp	r2, #31
 8001374:	dd00      	ble.n	8001378 <__aeabi_dadd+0xd8>
 8001376:	e1a7      	b.n	80016c8 <__aeabi_dadd+0x428>
 8001378:	2120      	movs	r1, #32
 800137a:	0018      	movs	r0, r3
 800137c:	002e      	movs	r6, r5
 800137e:	1a89      	subs	r1, r1, r2
 8001380:	408d      	lsls	r5, r1
 8001382:	4088      	lsls	r0, r1
 8001384:	40d6      	lsrs	r6, r2
 8001386:	40d3      	lsrs	r3, r2
 8001388:	1e69      	subs	r1, r5, #1
 800138a:	418d      	sbcs	r5, r1
 800138c:	4330      	orrs	r0, r6
 800138e:	4698      	mov	r8, r3
 8001390:	2600      	movs	r6, #0
 8001392:	4305      	orrs	r5, r0
 8001394:	076b      	lsls	r3, r5, #29
 8001396:	d009      	beq.n	80013ac <__aeabi_dadd+0x10c>
 8001398:	230f      	movs	r3, #15
 800139a:	402b      	ands	r3, r5
 800139c:	2b04      	cmp	r3, #4
 800139e:	d005      	beq.n	80013ac <__aeabi_dadd+0x10c>
 80013a0:	1d2b      	adds	r3, r5, #4
 80013a2:	42ab      	cmp	r3, r5
 80013a4:	41ad      	sbcs	r5, r5
 80013a6:	426d      	negs	r5, r5
 80013a8:	44a8      	add	r8, r5
 80013aa:	001d      	movs	r5, r3
 80013ac:	4643      	mov	r3, r8
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	d400      	bmi.n	80013b4 <__aeabi_dadd+0x114>
 80013b2:	e094      	b.n	80014de <__aeabi_dadd+0x23e>
 80013b4:	4b97      	ldr	r3, [pc, #604]	; (8001614 <__aeabi_dadd+0x374>)
 80013b6:	1c72      	adds	r2, r6, #1
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x11e>
 80013bc:	e09d      	b.n	80014fa <__aeabi_dadd+0x25a>
 80013be:	4641      	mov	r1, r8
 80013c0:	4b95      	ldr	r3, [pc, #596]	; (8001618 <__aeabi_dadd+0x378>)
 80013c2:	08ed      	lsrs	r5, r5, #3
 80013c4:	4019      	ands	r1, r3
 80013c6:	000b      	movs	r3, r1
 80013c8:	0552      	lsls	r2, r2, #21
 80013ca:	0749      	lsls	r1, r1, #29
 80013cc:	025b      	lsls	r3, r3, #9
 80013ce:	4329      	orrs	r1, r5
 80013d0:	0b1b      	lsrs	r3, r3, #12
 80013d2:	0d52      	lsrs	r2, r2, #21
 80013d4:	0512      	lsls	r2, r2, #20
 80013d6:	4313      	orrs	r3, r2
 80013d8:	07e4      	lsls	r4, r4, #31
 80013da:	4323      	orrs	r3, r4
 80013dc:	0008      	movs	r0, r1
 80013de:	0019      	movs	r1, r3
 80013e0:	bce0      	pop	{r5, r6, r7}
 80013e2:	46ba      	mov	sl, r7
 80013e4:	46b1      	mov	r9, r6
 80013e6:	46a8      	mov	r8, r5
 80013e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d043      	beq.n	8001476 <__aeabi_dadd+0x1d6>
 80013ee:	1b8a      	subs	r2, r1, r6
 80013f0:	2e00      	cmp	r6, #0
 80013f2:	d000      	beq.n	80013f6 <__aeabi_dadd+0x156>
 80013f4:	e12a      	b.n	800164c <__aeabi_dadd+0x3ac>
 80013f6:	464c      	mov	r4, r9
 80013f8:	431c      	orrs	r4, r3
 80013fa:	d100      	bne.n	80013fe <__aeabi_dadd+0x15e>
 80013fc:	e1d1      	b.n	80017a2 <__aeabi_dadd+0x502>
 80013fe:	1e54      	subs	r4, r2, #1
 8001400:	2a01      	cmp	r2, #1
 8001402:	d100      	bne.n	8001406 <__aeabi_dadd+0x166>
 8001404:	e21f      	b.n	8001846 <__aeabi_dadd+0x5a6>
 8001406:	4d83      	ldr	r5, [pc, #524]	; (8001614 <__aeabi_dadd+0x374>)
 8001408:	42aa      	cmp	r2, r5
 800140a:	d100      	bne.n	800140e <__aeabi_dadd+0x16e>
 800140c:	e272      	b.n	80018f4 <__aeabi_dadd+0x654>
 800140e:	0022      	movs	r2, r4
 8001410:	e123      	b.n	800165a <__aeabi_dadd+0x3ba>
 8001412:	2a00      	cmp	r2, #0
 8001414:	dc00      	bgt.n	8001418 <__aeabi_dadd+0x178>
 8001416:	e098      	b.n	800154a <__aeabi_dadd+0x2aa>
 8001418:	2900      	cmp	r1, #0
 800141a:	d042      	beq.n	80014a2 <__aeabi_dadd+0x202>
 800141c:	497d      	ldr	r1, [pc, #500]	; (8001614 <__aeabi_dadd+0x374>)
 800141e:	428e      	cmp	r6, r1
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x184>
 8001422:	e0da      	b.n	80015da <__aeabi_dadd+0x33a>
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	0028      	movs	r0, r5
 8001428:	0409      	lsls	r1, r1, #16
 800142a:	4308      	orrs	r0, r1
 800142c:	4684      	mov	ip, r0
 800142e:	2a38      	cmp	r2, #56	; 0x38
 8001430:	dd00      	ble.n	8001434 <__aeabi_dadd+0x194>
 8001432:	e129      	b.n	8001688 <__aeabi_dadd+0x3e8>
 8001434:	2a1f      	cmp	r2, #31
 8001436:	dc00      	bgt.n	800143a <__aeabi_dadd+0x19a>
 8001438:	e187      	b.n	800174a <__aeabi_dadd+0x4aa>
 800143a:	0011      	movs	r1, r2
 800143c:	4665      	mov	r5, ip
 800143e:	3920      	subs	r1, #32
 8001440:	40cd      	lsrs	r5, r1
 8001442:	2a20      	cmp	r2, #32
 8001444:	d004      	beq.n	8001450 <__aeabi_dadd+0x1b0>
 8001446:	2040      	movs	r0, #64	; 0x40
 8001448:	4661      	mov	r1, ip
 800144a:	1a82      	subs	r2, r0, r2
 800144c:	4091      	lsls	r1, r2
 800144e:	430f      	orrs	r7, r1
 8001450:	0039      	movs	r1, r7
 8001452:	1e4f      	subs	r7, r1, #1
 8001454:	41b9      	sbcs	r1, r7
 8001456:	430d      	orrs	r5, r1
 8001458:	e11b      	b.n	8001692 <__aeabi_dadd+0x3f2>
 800145a:	0029      	movs	r1, r5
 800145c:	4339      	orrs	r1, r7
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x1c2>
 8001460:	e0b5      	b.n	80015ce <__aeabi_dadd+0x32e>
 8001462:	1e51      	subs	r1, r2, #1
 8001464:	2a01      	cmp	r2, #1
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x1ca>
 8001468:	e1ab      	b.n	80017c2 <__aeabi_dadd+0x522>
 800146a:	486a      	ldr	r0, [pc, #424]	; (8001614 <__aeabi_dadd+0x374>)
 800146c:	4282      	cmp	r2, r0
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x1d2>
 8001470:	e1b2      	b.n	80017d8 <__aeabi_dadd+0x538>
 8001472:	000a      	movs	r2, r1
 8001474:	e743      	b.n	80012fe <__aeabi_dadd+0x5e>
 8001476:	4969      	ldr	r1, [pc, #420]	; (800161c <__aeabi_dadd+0x37c>)
 8001478:	1c75      	adds	r5, r6, #1
 800147a:	420d      	tst	r5, r1
 800147c:	d000      	beq.n	8001480 <__aeabi_dadd+0x1e0>
 800147e:	e0cf      	b.n	8001620 <__aeabi_dadd+0x380>
 8001480:	2e00      	cmp	r6, #0
 8001482:	d000      	beq.n	8001486 <__aeabi_dadd+0x1e6>
 8001484:	e193      	b.n	80017ae <__aeabi_dadd+0x50e>
 8001486:	4649      	mov	r1, r9
 8001488:	4319      	orrs	r1, r3
 800148a:	d100      	bne.n	800148e <__aeabi_dadd+0x1ee>
 800148c:	e1d1      	b.n	8001832 <__aeabi_dadd+0x592>
 800148e:	4661      	mov	r1, ip
 8001490:	4339      	orrs	r1, r7
 8001492:	d000      	beq.n	8001496 <__aeabi_dadd+0x1f6>
 8001494:	e1e3      	b.n	800185e <__aeabi_dadd+0x5be>
 8001496:	4649      	mov	r1, r9
 8001498:	0758      	lsls	r0, r3, #29
 800149a:	08c9      	lsrs	r1, r1, #3
 800149c:	4301      	orrs	r1, r0
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	e026      	b.n	80014f0 <__aeabi_dadd+0x250>
 80014a2:	0029      	movs	r1, r5
 80014a4:	4339      	orrs	r1, r7
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x20a>
 80014a8:	e091      	b.n	80015ce <__aeabi_dadd+0x32e>
 80014aa:	1e51      	subs	r1, r2, #1
 80014ac:	2a01      	cmp	r2, #1
 80014ae:	d005      	beq.n	80014bc <__aeabi_dadd+0x21c>
 80014b0:	4858      	ldr	r0, [pc, #352]	; (8001614 <__aeabi_dadd+0x374>)
 80014b2:	4282      	cmp	r2, r0
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dadd+0x218>
 80014b6:	e18f      	b.n	80017d8 <__aeabi_dadd+0x538>
 80014b8:	000a      	movs	r2, r1
 80014ba:	e7b8      	b.n	800142e <__aeabi_dadd+0x18e>
 80014bc:	003d      	movs	r5, r7
 80014be:	444d      	add	r5, r9
 80014c0:	454d      	cmp	r5, r9
 80014c2:	4189      	sbcs	r1, r1
 80014c4:	4463      	add	r3, ip
 80014c6:	4698      	mov	r8, r3
 80014c8:	4249      	negs	r1, r1
 80014ca:	4488      	add	r8, r1
 80014cc:	4643      	mov	r3, r8
 80014ce:	2602      	movs	r6, #2
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	d500      	bpl.n	80014d6 <__aeabi_dadd+0x236>
 80014d4:	e0eb      	b.n	80016ae <__aeabi_dadd+0x40e>
 80014d6:	3e01      	subs	r6, #1
 80014d8:	076b      	lsls	r3, r5, #29
 80014da:	d000      	beq.n	80014de <__aeabi_dadd+0x23e>
 80014dc:	e75c      	b.n	8001398 <__aeabi_dadd+0xf8>
 80014de:	4643      	mov	r3, r8
 80014e0:	08e9      	lsrs	r1, r5, #3
 80014e2:	075a      	lsls	r2, r3, #29
 80014e4:	4311      	orrs	r1, r2
 80014e6:	0032      	movs	r2, r6
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	484a      	ldr	r0, [pc, #296]	; (8001614 <__aeabi_dadd+0x374>)
 80014ec:	4282      	cmp	r2, r0
 80014ee:	d021      	beq.n	8001534 <__aeabi_dadd+0x294>
 80014f0:	031b      	lsls	r3, r3, #12
 80014f2:	0552      	lsls	r2, r2, #21
 80014f4:	0b1b      	lsrs	r3, r3, #12
 80014f6:	0d52      	lsrs	r2, r2, #21
 80014f8:	e76c      	b.n	80013d4 <__aeabi_dadd+0x134>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	e769      	b.n	80013d4 <__aeabi_dadd+0x134>
 8001500:	002a      	movs	r2, r5
 8001502:	433a      	orrs	r2, r7
 8001504:	d069      	beq.n	80015da <__aeabi_dadd+0x33a>
 8001506:	464a      	mov	r2, r9
 8001508:	0758      	lsls	r0, r3, #29
 800150a:	08d1      	lsrs	r1, r2, #3
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	031b      	lsls	r3, r3, #12
 8001512:	4308      	orrs	r0, r1
 8001514:	421a      	tst	r2, r3
 8001516:	d007      	beq.n	8001528 <__aeabi_dadd+0x288>
 8001518:	0029      	movs	r1, r5
 800151a:	08ed      	lsrs	r5, r5, #3
 800151c:	421d      	tst	r5, r3
 800151e:	d103      	bne.n	8001528 <__aeabi_dadd+0x288>
 8001520:	002a      	movs	r2, r5
 8001522:	08ff      	lsrs	r7, r7, #3
 8001524:	0748      	lsls	r0, r1, #29
 8001526:	4338      	orrs	r0, r7
 8001528:	0f43      	lsrs	r3, r0, #29
 800152a:	00c1      	lsls	r1, r0, #3
 800152c:	075b      	lsls	r3, r3, #29
 800152e:	08c9      	lsrs	r1, r1, #3
 8001530:	4319      	orrs	r1, r3
 8001532:	0013      	movs	r3, r2
 8001534:	000a      	movs	r2, r1
 8001536:	431a      	orrs	r2, r3
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x29c>
 800153a:	e213      	b.n	8001964 <__aeabi_dadd+0x6c4>
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	0312      	lsls	r2, r2, #12
 8001540:	4313      	orrs	r3, r2
 8001542:	031b      	lsls	r3, r3, #12
 8001544:	4a33      	ldr	r2, [pc, #204]	; (8001614 <__aeabi_dadd+0x374>)
 8001546:	0b1b      	lsrs	r3, r3, #12
 8001548:	e744      	b.n	80013d4 <__aeabi_dadd+0x134>
 800154a:	2a00      	cmp	r2, #0
 800154c:	d04b      	beq.n	80015e6 <__aeabi_dadd+0x346>
 800154e:	1b8a      	subs	r2, r1, r6
 8001550:	2e00      	cmp	r6, #0
 8001552:	d100      	bne.n	8001556 <__aeabi_dadd+0x2b6>
 8001554:	e0e7      	b.n	8001726 <__aeabi_dadd+0x486>
 8001556:	482f      	ldr	r0, [pc, #188]	; (8001614 <__aeabi_dadd+0x374>)
 8001558:	4281      	cmp	r1, r0
 800155a:	d100      	bne.n	800155e <__aeabi_dadd+0x2be>
 800155c:	e195      	b.n	800188a <__aeabi_dadd+0x5ea>
 800155e:	2080      	movs	r0, #128	; 0x80
 8001560:	0400      	lsls	r0, r0, #16
 8001562:	4303      	orrs	r3, r0
 8001564:	2a38      	cmp	r2, #56	; 0x38
 8001566:	dd00      	ble.n	800156a <__aeabi_dadd+0x2ca>
 8001568:	e143      	b.n	80017f2 <__aeabi_dadd+0x552>
 800156a:	2a1f      	cmp	r2, #31
 800156c:	dd00      	ble.n	8001570 <__aeabi_dadd+0x2d0>
 800156e:	e1db      	b.n	8001928 <__aeabi_dadd+0x688>
 8001570:	2020      	movs	r0, #32
 8001572:	001d      	movs	r5, r3
 8001574:	464e      	mov	r6, r9
 8001576:	1a80      	subs	r0, r0, r2
 8001578:	4085      	lsls	r5, r0
 800157a:	40d6      	lsrs	r6, r2
 800157c:	4335      	orrs	r5, r6
 800157e:	464e      	mov	r6, r9
 8001580:	4086      	lsls	r6, r0
 8001582:	0030      	movs	r0, r6
 8001584:	40d3      	lsrs	r3, r2
 8001586:	1e46      	subs	r6, r0, #1
 8001588:	41b0      	sbcs	r0, r6
 800158a:	449c      	add	ip, r3
 800158c:	4305      	orrs	r5, r0
 800158e:	19ed      	adds	r5, r5, r7
 8001590:	42bd      	cmp	r5, r7
 8001592:	419b      	sbcs	r3, r3
 8001594:	425b      	negs	r3, r3
 8001596:	4463      	add	r3, ip
 8001598:	4698      	mov	r8, r3
 800159a:	000e      	movs	r6, r1
 800159c:	e07f      	b.n	800169e <__aeabi_dadd+0x3fe>
 800159e:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <__aeabi_dadd+0x378>)
 80015a0:	1a76      	subs	r6, r6, r1
 80015a2:	4013      	ands	r3, r2
 80015a4:	4698      	mov	r8, r3
 80015a6:	e6f5      	b.n	8001394 <__aeabi_dadd+0xf4>
 80015a8:	0028      	movs	r0, r5
 80015aa:	f001 fd61 	bl	8003070 <__clzsi2>
 80015ae:	0001      	movs	r1, r0
 80015b0:	3118      	adds	r1, #24
 80015b2:	291f      	cmp	r1, #31
 80015b4:	dc00      	bgt.n	80015b8 <__aeabi_dadd+0x318>
 80015b6:	e6cf      	b.n	8001358 <__aeabi_dadd+0xb8>
 80015b8:	002b      	movs	r3, r5
 80015ba:	3808      	subs	r0, #8
 80015bc:	4083      	lsls	r3, r0
 80015be:	2500      	movs	r5, #0
 80015c0:	e6d2      	b.n	8001368 <__aeabi_dadd+0xc8>
 80015c2:	4662      	mov	r2, ip
 80015c4:	433a      	orrs	r2, r7
 80015c6:	0011      	movs	r1, r2
 80015c8:	1e4f      	subs	r7, r1, #1
 80015ca:	41b9      	sbcs	r1, r7
 80015cc:	e6ac      	b.n	8001328 <__aeabi_dadd+0x88>
 80015ce:	4649      	mov	r1, r9
 80015d0:	0758      	lsls	r0, r3, #29
 80015d2:	08c9      	lsrs	r1, r1, #3
 80015d4:	4301      	orrs	r1, r0
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	e787      	b.n	80014ea <__aeabi_dadd+0x24a>
 80015da:	4649      	mov	r1, r9
 80015dc:	075a      	lsls	r2, r3, #29
 80015de:	08c9      	lsrs	r1, r1, #3
 80015e0:	4311      	orrs	r1, r2
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	e7a6      	b.n	8001534 <__aeabi_dadd+0x294>
 80015e6:	490d      	ldr	r1, [pc, #52]	; (800161c <__aeabi_dadd+0x37c>)
 80015e8:	1c70      	adds	r0, r6, #1
 80015ea:	4208      	tst	r0, r1
 80015ec:	d000      	beq.n	80015f0 <__aeabi_dadd+0x350>
 80015ee:	e0bb      	b.n	8001768 <__aeabi_dadd+0x4c8>
 80015f0:	2e00      	cmp	r6, #0
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x356>
 80015f4:	e114      	b.n	8001820 <__aeabi_dadd+0x580>
 80015f6:	4649      	mov	r1, r9
 80015f8:	4319      	orrs	r1, r3
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0x35e>
 80015fc:	e175      	b.n	80018ea <__aeabi_dadd+0x64a>
 80015fe:	0029      	movs	r1, r5
 8001600:	4339      	orrs	r1, r7
 8001602:	d000      	beq.n	8001606 <__aeabi_dadd+0x366>
 8001604:	e17e      	b.n	8001904 <__aeabi_dadd+0x664>
 8001606:	4649      	mov	r1, r9
 8001608:	0758      	lsls	r0, r3, #29
 800160a:	08c9      	lsrs	r1, r1, #3
 800160c:	4301      	orrs	r1, r0
 800160e:	08db      	lsrs	r3, r3, #3
 8001610:	e76e      	b.n	80014f0 <__aeabi_dadd+0x250>
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	000007ff 	.word	0x000007ff
 8001618:	ff7fffff 	.word	0xff7fffff
 800161c:	000007fe 	.word	0x000007fe
 8001620:	4649      	mov	r1, r9
 8001622:	1bcd      	subs	r5, r1, r7
 8001624:	4661      	mov	r1, ip
 8001626:	1a58      	subs	r0, r3, r1
 8001628:	45a9      	cmp	r9, r5
 800162a:	4189      	sbcs	r1, r1
 800162c:	4249      	negs	r1, r1
 800162e:	4688      	mov	r8, r1
 8001630:	0001      	movs	r1, r0
 8001632:	4640      	mov	r0, r8
 8001634:	1a09      	subs	r1, r1, r0
 8001636:	4688      	mov	r8, r1
 8001638:	0209      	lsls	r1, r1, #8
 800163a:	d500      	bpl.n	800163e <__aeabi_dadd+0x39e>
 800163c:	e0a6      	b.n	800178c <__aeabi_dadd+0x4ec>
 800163e:	4641      	mov	r1, r8
 8001640:	4329      	orrs	r1, r5
 8001642:	d000      	beq.n	8001646 <__aeabi_dadd+0x3a6>
 8001644:	e67f      	b.n	8001346 <__aeabi_dadd+0xa6>
 8001646:	2300      	movs	r3, #0
 8001648:	2400      	movs	r4, #0
 800164a:	e751      	b.n	80014f0 <__aeabi_dadd+0x250>
 800164c:	4cc7      	ldr	r4, [pc, #796]	; (800196c <__aeabi_dadd+0x6cc>)
 800164e:	42a1      	cmp	r1, r4
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x3b4>
 8001652:	e0c7      	b.n	80017e4 <__aeabi_dadd+0x544>
 8001654:	2480      	movs	r4, #128	; 0x80
 8001656:	0424      	lsls	r4, r4, #16
 8001658:	4323      	orrs	r3, r4
 800165a:	2a38      	cmp	r2, #56	; 0x38
 800165c:	dc54      	bgt.n	8001708 <__aeabi_dadd+0x468>
 800165e:	2a1f      	cmp	r2, #31
 8001660:	dd00      	ble.n	8001664 <__aeabi_dadd+0x3c4>
 8001662:	e0cc      	b.n	80017fe <__aeabi_dadd+0x55e>
 8001664:	2420      	movs	r4, #32
 8001666:	4648      	mov	r0, r9
 8001668:	1aa4      	subs	r4, r4, r2
 800166a:	001d      	movs	r5, r3
 800166c:	464e      	mov	r6, r9
 800166e:	40a0      	lsls	r0, r4
 8001670:	40d6      	lsrs	r6, r2
 8001672:	40a5      	lsls	r5, r4
 8001674:	0004      	movs	r4, r0
 8001676:	40d3      	lsrs	r3, r2
 8001678:	4662      	mov	r2, ip
 800167a:	4335      	orrs	r5, r6
 800167c:	1e66      	subs	r6, r4, #1
 800167e:	41b4      	sbcs	r4, r6
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	469c      	mov	ip, r3
 8001684:	4325      	orrs	r5, r4
 8001686:	e044      	b.n	8001712 <__aeabi_dadd+0x472>
 8001688:	4662      	mov	r2, ip
 800168a:	433a      	orrs	r2, r7
 800168c:	0015      	movs	r5, r2
 800168e:	1e6f      	subs	r7, r5, #1
 8001690:	41bd      	sbcs	r5, r7
 8001692:	444d      	add	r5, r9
 8001694:	454d      	cmp	r5, r9
 8001696:	4189      	sbcs	r1, r1
 8001698:	4249      	negs	r1, r1
 800169a:	4688      	mov	r8, r1
 800169c:	4498      	add	r8, r3
 800169e:	4643      	mov	r3, r8
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	d400      	bmi.n	80016a6 <__aeabi_dadd+0x406>
 80016a4:	e718      	b.n	80014d8 <__aeabi_dadd+0x238>
 80016a6:	4bb1      	ldr	r3, [pc, #708]	; (800196c <__aeabi_dadd+0x6cc>)
 80016a8:	3601      	adds	r6, #1
 80016aa:	429e      	cmp	r6, r3
 80016ac:	d049      	beq.n	8001742 <__aeabi_dadd+0x4a2>
 80016ae:	4642      	mov	r2, r8
 80016b0:	4baf      	ldr	r3, [pc, #700]	; (8001970 <__aeabi_dadd+0x6d0>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	401a      	ands	r2, r3
 80016b6:	0013      	movs	r3, r2
 80016b8:	086a      	lsrs	r2, r5, #1
 80016ba:	400d      	ands	r5, r1
 80016bc:	4315      	orrs	r5, r2
 80016be:	07d9      	lsls	r1, r3, #31
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	4698      	mov	r8, r3
 80016c4:	430d      	orrs	r5, r1
 80016c6:	e665      	b.n	8001394 <__aeabi_dadd+0xf4>
 80016c8:	0018      	movs	r0, r3
 80016ca:	3e1f      	subs	r6, #31
 80016cc:	40f0      	lsrs	r0, r6
 80016ce:	2a20      	cmp	r2, #32
 80016d0:	d003      	beq.n	80016da <__aeabi_dadd+0x43a>
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	1a8a      	subs	r2, r1, r2
 80016d6:	4093      	lsls	r3, r2
 80016d8:	431d      	orrs	r5, r3
 80016da:	1e69      	subs	r1, r5, #1
 80016dc:	418d      	sbcs	r5, r1
 80016de:	2300      	movs	r3, #0
 80016e0:	2600      	movs	r6, #0
 80016e2:	4698      	mov	r8, r3
 80016e4:	4305      	orrs	r5, r0
 80016e6:	e6f7      	b.n	80014d8 <__aeabi_dadd+0x238>
 80016e8:	0011      	movs	r1, r2
 80016ea:	4665      	mov	r5, ip
 80016ec:	3920      	subs	r1, #32
 80016ee:	40cd      	lsrs	r5, r1
 80016f0:	2a20      	cmp	r2, #32
 80016f2:	d004      	beq.n	80016fe <__aeabi_dadd+0x45e>
 80016f4:	2040      	movs	r0, #64	; 0x40
 80016f6:	4661      	mov	r1, ip
 80016f8:	1a82      	subs	r2, r0, r2
 80016fa:	4091      	lsls	r1, r2
 80016fc:	430f      	orrs	r7, r1
 80016fe:	0039      	movs	r1, r7
 8001700:	1e4f      	subs	r7, r1, #1
 8001702:	41b9      	sbcs	r1, r7
 8001704:	4329      	orrs	r1, r5
 8001706:	e60f      	b.n	8001328 <__aeabi_dadd+0x88>
 8001708:	464a      	mov	r2, r9
 800170a:	4313      	orrs	r3, r2
 800170c:	001d      	movs	r5, r3
 800170e:	1e6b      	subs	r3, r5, #1
 8001710:	419d      	sbcs	r5, r3
 8001712:	1b7d      	subs	r5, r7, r5
 8001714:	42af      	cmp	r7, r5
 8001716:	419b      	sbcs	r3, r3
 8001718:	4662      	mov	r2, ip
 800171a:	425b      	negs	r3, r3
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	4698      	mov	r8, r3
 8001720:	4654      	mov	r4, sl
 8001722:	000e      	movs	r6, r1
 8001724:	e607      	b.n	8001336 <__aeabi_dadd+0x96>
 8001726:	4648      	mov	r0, r9
 8001728:	4318      	orrs	r0, r3
 800172a:	d100      	bne.n	800172e <__aeabi_dadd+0x48e>
 800172c:	e0b3      	b.n	8001896 <__aeabi_dadd+0x5f6>
 800172e:	1e50      	subs	r0, r2, #1
 8001730:	2a01      	cmp	r2, #1
 8001732:	d100      	bne.n	8001736 <__aeabi_dadd+0x496>
 8001734:	e10d      	b.n	8001952 <__aeabi_dadd+0x6b2>
 8001736:	4d8d      	ldr	r5, [pc, #564]	; (800196c <__aeabi_dadd+0x6cc>)
 8001738:	42aa      	cmp	r2, r5
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x49e>
 800173c:	e0a5      	b.n	800188a <__aeabi_dadd+0x5ea>
 800173e:	0002      	movs	r2, r0
 8001740:	e710      	b.n	8001564 <__aeabi_dadd+0x2c4>
 8001742:	0032      	movs	r2, r6
 8001744:	2300      	movs	r3, #0
 8001746:	2100      	movs	r1, #0
 8001748:	e644      	b.n	80013d4 <__aeabi_dadd+0x134>
 800174a:	2120      	movs	r1, #32
 800174c:	0038      	movs	r0, r7
 800174e:	1a89      	subs	r1, r1, r2
 8001750:	4665      	mov	r5, ip
 8001752:	408f      	lsls	r7, r1
 8001754:	408d      	lsls	r5, r1
 8001756:	40d0      	lsrs	r0, r2
 8001758:	1e79      	subs	r1, r7, #1
 800175a:	418f      	sbcs	r7, r1
 800175c:	4305      	orrs	r5, r0
 800175e:	433d      	orrs	r5, r7
 8001760:	4667      	mov	r7, ip
 8001762:	40d7      	lsrs	r7, r2
 8001764:	19db      	adds	r3, r3, r7
 8001766:	e794      	b.n	8001692 <__aeabi_dadd+0x3f2>
 8001768:	4a80      	ldr	r2, [pc, #512]	; (800196c <__aeabi_dadd+0x6cc>)
 800176a:	4290      	cmp	r0, r2
 800176c:	d100      	bne.n	8001770 <__aeabi_dadd+0x4d0>
 800176e:	e0ec      	b.n	800194a <__aeabi_dadd+0x6aa>
 8001770:	0039      	movs	r1, r7
 8001772:	4449      	add	r1, r9
 8001774:	4549      	cmp	r1, r9
 8001776:	4192      	sbcs	r2, r2
 8001778:	4463      	add	r3, ip
 800177a:	4252      	negs	r2, r2
 800177c:	189b      	adds	r3, r3, r2
 800177e:	07dd      	lsls	r5, r3, #31
 8001780:	0849      	lsrs	r1, r1, #1
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	4698      	mov	r8, r3
 8001786:	0006      	movs	r6, r0
 8001788:	430d      	orrs	r5, r1
 800178a:	e6a5      	b.n	80014d8 <__aeabi_dadd+0x238>
 800178c:	464a      	mov	r2, r9
 800178e:	1abd      	subs	r5, r7, r2
 8001790:	42af      	cmp	r7, r5
 8001792:	4189      	sbcs	r1, r1
 8001794:	4662      	mov	r2, ip
 8001796:	4249      	negs	r1, r1
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	1a5b      	subs	r3, r3, r1
 800179c:	4698      	mov	r8, r3
 800179e:	4654      	mov	r4, sl
 80017a0:	e5d1      	b.n	8001346 <__aeabi_dadd+0xa6>
 80017a2:	076c      	lsls	r4, r5, #29
 80017a4:	08f9      	lsrs	r1, r7, #3
 80017a6:	4321      	orrs	r1, r4
 80017a8:	08eb      	lsrs	r3, r5, #3
 80017aa:	0004      	movs	r4, r0
 80017ac:	e69d      	b.n	80014ea <__aeabi_dadd+0x24a>
 80017ae:	464a      	mov	r2, r9
 80017b0:	431a      	orrs	r2, r3
 80017b2:	d175      	bne.n	80018a0 <__aeabi_dadd+0x600>
 80017b4:	4661      	mov	r1, ip
 80017b6:	4339      	orrs	r1, r7
 80017b8:	d114      	bne.n	80017e4 <__aeabi_dadd+0x544>
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	2400      	movs	r4, #0
 80017be:	031b      	lsls	r3, r3, #12
 80017c0:	e6bc      	b.n	800153c <__aeabi_dadd+0x29c>
 80017c2:	464a      	mov	r2, r9
 80017c4:	1bd5      	subs	r5, r2, r7
 80017c6:	45a9      	cmp	r9, r5
 80017c8:	4189      	sbcs	r1, r1
 80017ca:	4662      	mov	r2, ip
 80017cc:	4249      	negs	r1, r1
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	1a5b      	subs	r3, r3, r1
 80017d2:	4698      	mov	r8, r3
 80017d4:	2601      	movs	r6, #1
 80017d6:	e5ae      	b.n	8001336 <__aeabi_dadd+0x96>
 80017d8:	464a      	mov	r2, r9
 80017da:	08d1      	lsrs	r1, r2, #3
 80017dc:	075a      	lsls	r2, r3, #29
 80017de:	4311      	orrs	r1, r2
 80017e0:	08db      	lsrs	r3, r3, #3
 80017e2:	e6a7      	b.n	8001534 <__aeabi_dadd+0x294>
 80017e4:	4663      	mov	r3, ip
 80017e6:	08f9      	lsrs	r1, r7, #3
 80017e8:	075a      	lsls	r2, r3, #29
 80017ea:	4654      	mov	r4, sl
 80017ec:	4311      	orrs	r1, r2
 80017ee:	08db      	lsrs	r3, r3, #3
 80017f0:	e6a0      	b.n	8001534 <__aeabi_dadd+0x294>
 80017f2:	464a      	mov	r2, r9
 80017f4:	4313      	orrs	r3, r2
 80017f6:	001d      	movs	r5, r3
 80017f8:	1e6b      	subs	r3, r5, #1
 80017fa:	419d      	sbcs	r5, r3
 80017fc:	e6c7      	b.n	800158e <__aeabi_dadd+0x2ee>
 80017fe:	0014      	movs	r4, r2
 8001800:	001e      	movs	r6, r3
 8001802:	3c20      	subs	r4, #32
 8001804:	40e6      	lsrs	r6, r4
 8001806:	2a20      	cmp	r2, #32
 8001808:	d005      	beq.n	8001816 <__aeabi_dadd+0x576>
 800180a:	2440      	movs	r4, #64	; 0x40
 800180c:	1aa2      	subs	r2, r4, r2
 800180e:	4093      	lsls	r3, r2
 8001810:	464a      	mov	r2, r9
 8001812:	431a      	orrs	r2, r3
 8001814:	4691      	mov	r9, r2
 8001816:	464d      	mov	r5, r9
 8001818:	1e6b      	subs	r3, r5, #1
 800181a:	419d      	sbcs	r5, r3
 800181c:	4335      	orrs	r5, r6
 800181e:	e778      	b.n	8001712 <__aeabi_dadd+0x472>
 8001820:	464a      	mov	r2, r9
 8001822:	431a      	orrs	r2, r3
 8001824:	d000      	beq.n	8001828 <__aeabi_dadd+0x588>
 8001826:	e66b      	b.n	8001500 <__aeabi_dadd+0x260>
 8001828:	076b      	lsls	r3, r5, #29
 800182a:	08f9      	lsrs	r1, r7, #3
 800182c:	4319      	orrs	r1, r3
 800182e:	08eb      	lsrs	r3, r5, #3
 8001830:	e680      	b.n	8001534 <__aeabi_dadd+0x294>
 8001832:	4661      	mov	r1, ip
 8001834:	4339      	orrs	r1, r7
 8001836:	d054      	beq.n	80018e2 <__aeabi_dadd+0x642>
 8001838:	4663      	mov	r3, ip
 800183a:	08f9      	lsrs	r1, r7, #3
 800183c:	075c      	lsls	r4, r3, #29
 800183e:	4321      	orrs	r1, r4
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	0004      	movs	r4, r0
 8001844:	e654      	b.n	80014f0 <__aeabi_dadd+0x250>
 8001846:	464a      	mov	r2, r9
 8001848:	1abd      	subs	r5, r7, r2
 800184a:	42af      	cmp	r7, r5
 800184c:	4189      	sbcs	r1, r1
 800184e:	4662      	mov	r2, ip
 8001850:	4249      	negs	r1, r1
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	1a5b      	subs	r3, r3, r1
 8001856:	4698      	mov	r8, r3
 8001858:	0004      	movs	r4, r0
 800185a:	2601      	movs	r6, #1
 800185c:	e56b      	b.n	8001336 <__aeabi_dadd+0x96>
 800185e:	464a      	mov	r2, r9
 8001860:	1bd5      	subs	r5, r2, r7
 8001862:	45a9      	cmp	r9, r5
 8001864:	4189      	sbcs	r1, r1
 8001866:	4662      	mov	r2, ip
 8001868:	4249      	negs	r1, r1
 800186a:	1a9a      	subs	r2, r3, r2
 800186c:	1a52      	subs	r2, r2, r1
 800186e:	4690      	mov	r8, r2
 8001870:	0212      	lsls	r2, r2, #8
 8001872:	d532      	bpl.n	80018da <__aeabi_dadd+0x63a>
 8001874:	464a      	mov	r2, r9
 8001876:	1abd      	subs	r5, r7, r2
 8001878:	42af      	cmp	r7, r5
 800187a:	4189      	sbcs	r1, r1
 800187c:	4662      	mov	r2, ip
 800187e:	4249      	negs	r1, r1
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	1a5b      	subs	r3, r3, r1
 8001884:	4698      	mov	r8, r3
 8001886:	0004      	movs	r4, r0
 8001888:	e584      	b.n	8001394 <__aeabi_dadd+0xf4>
 800188a:	4663      	mov	r3, ip
 800188c:	08f9      	lsrs	r1, r7, #3
 800188e:	075a      	lsls	r2, r3, #29
 8001890:	4311      	orrs	r1, r2
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	e64e      	b.n	8001534 <__aeabi_dadd+0x294>
 8001896:	08f9      	lsrs	r1, r7, #3
 8001898:	0768      	lsls	r0, r5, #29
 800189a:	4301      	orrs	r1, r0
 800189c:	08eb      	lsrs	r3, r5, #3
 800189e:	e624      	b.n	80014ea <__aeabi_dadd+0x24a>
 80018a0:	4662      	mov	r2, ip
 80018a2:	433a      	orrs	r2, r7
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dadd+0x608>
 80018a6:	e698      	b.n	80015da <__aeabi_dadd+0x33a>
 80018a8:	464a      	mov	r2, r9
 80018aa:	08d1      	lsrs	r1, r2, #3
 80018ac:	075a      	lsls	r2, r3, #29
 80018ae:	4311      	orrs	r1, r2
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	031b      	lsls	r3, r3, #12
 80018b6:	421a      	tst	r2, r3
 80018b8:	d008      	beq.n	80018cc <__aeabi_dadd+0x62c>
 80018ba:	4660      	mov	r0, ip
 80018bc:	08c5      	lsrs	r5, r0, #3
 80018be:	421d      	tst	r5, r3
 80018c0:	d104      	bne.n	80018cc <__aeabi_dadd+0x62c>
 80018c2:	4654      	mov	r4, sl
 80018c4:	002a      	movs	r2, r5
 80018c6:	08f9      	lsrs	r1, r7, #3
 80018c8:	0743      	lsls	r3, r0, #29
 80018ca:	4319      	orrs	r1, r3
 80018cc:	0f4b      	lsrs	r3, r1, #29
 80018ce:	00c9      	lsls	r1, r1, #3
 80018d0:	075b      	lsls	r3, r3, #29
 80018d2:	08c9      	lsrs	r1, r1, #3
 80018d4:	4319      	orrs	r1, r3
 80018d6:	0013      	movs	r3, r2
 80018d8:	e62c      	b.n	8001534 <__aeabi_dadd+0x294>
 80018da:	4641      	mov	r1, r8
 80018dc:	4329      	orrs	r1, r5
 80018de:	d000      	beq.n	80018e2 <__aeabi_dadd+0x642>
 80018e0:	e5fa      	b.n	80014d8 <__aeabi_dadd+0x238>
 80018e2:	2300      	movs	r3, #0
 80018e4:	000a      	movs	r2, r1
 80018e6:	2400      	movs	r4, #0
 80018e8:	e602      	b.n	80014f0 <__aeabi_dadd+0x250>
 80018ea:	076b      	lsls	r3, r5, #29
 80018ec:	08f9      	lsrs	r1, r7, #3
 80018ee:	4319      	orrs	r1, r3
 80018f0:	08eb      	lsrs	r3, r5, #3
 80018f2:	e5fd      	b.n	80014f0 <__aeabi_dadd+0x250>
 80018f4:	4663      	mov	r3, ip
 80018f6:	08f9      	lsrs	r1, r7, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4319      	orrs	r1, r3
 80018fc:	4663      	mov	r3, ip
 80018fe:	0004      	movs	r4, r0
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	e617      	b.n	8001534 <__aeabi_dadd+0x294>
 8001904:	003d      	movs	r5, r7
 8001906:	444d      	add	r5, r9
 8001908:	4463      	add	r3, ip
 800190a:	454d      	cmp	r5, r9
 800190c:	4189      	sbcs	r1, r1
 800190e:	4698      	mov	r8, r3
 8001910:	4249      	negs	r1, r1
 8001912:	4488      	add	r8, r1
 8001914:	4643      	mov	r3, r8
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	d400      	bmi.n	800191c <__aeabi_dadd+0x67c>
 800191a:	e5dd      	b.n	80014d8 <__aeabi_dadd+0x238>
 800191c:	4642      	mov	r2, r8
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <__aeabi_dadd+0x6d0>)
 8001920:	2601      	movs	r6, #1
 8001922:	401a      	ands	r2, r3
 8001924:	4690      	mov	r8, r2
 8001926:	e5d7      	b.n	80014d8 <__aeabi_dadd+0x238>
 8001928:	0010      	movs	r0, r2
 800192a:	001e      	movs	r6, r3
 800192c:	3820      	subs	r0, #32
 800192e:	40c6      	lsrs	r6, r0
 8001930:	2a20      	cmp	r2, #32
 8001932:	d005      	beq.n	8001940 <__aeabi_dadd+0x6a0>
 8001934:	2040      	movs	r0, #64	; 0x40
 8001936:	1a82      	subs	r2, r0, r2
 8001938:	4093      	lsls	r3, r2
 800193a:	464a      	mov	r2, r9
 800193c:	431a      	orrs	r2, r3
 800193e:	4691      	mov	r9, r2
 8001940:	464d      	mov	r5, r9
 8001942:	1e6b      	subs	r3, r5, #1
 8001944:	419d      	sbcs	r5, r3
 8001946:	4335      	orrs	r5, r6
 8001948:	e621      	b.n	800158e <__aeabi_dadd+0x2ee>
 800194a:	0002      	movs	r2, r0
 800194c:	2300      	movs	r3, #0
 800194e:	2100      	movs	r1, #0
 8001950:	e540      	b.n	80013d4 <__aeabi_dadd+0x134>
 8001952:	464a      	mov	r2, r9
 8001954:	19d5      	adds	r5, r2, r7
 8001956:	42bd      	cmp	r5, r7
 8001958:	4189      	sbcs	r1, r1
 800195a:	4463      	add	r3, ip
 800195c:	4698      	mov	r8, r3
 800195e:	4249      	negs	r1, r1
 8001960:	4488      	add	r8, r1
 8001962:	e5b3      	b.n	80014cc <__aeabi_dadd+0x22c>
 8001964:	2100      	movs	r1, #0
 8001966:	4a01      	ldr	r2, [pc, #4]	; (800196c <__aeabi_dadd+0x6cc>)
 8001968:	000b      	movs	r3, r1
 800196a:	e533      	b.n	80013d4 <__aeabi_dadd+0x134>
 800196c:	000007ff 	.word	0x000007ff
 8001970:	ff7fffff 	.word	0xff7fffff

08001974 <__aeabi_ddiv>:
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	4657      	mov	r7, sl
 8001978:	464e      	mov	r6, r9
 800197a:	4645      	mov	r5, r8
 800197c:	46de      	mov	lr, fp
 800197e:	b5e0      	push	{r5, r6, r7, lr}
 8001980:	4681      	mov	r9, r0
 8001982:	0005      	movs	r5, r0
 8001984:	030c      	lsls	r4, r1, #12
 8001986:	0048      	lsls	r0, r1, #1
 8001988:	4692      	mov	sl, r2
 800198a:	001f      	movs	r7, r3
 800198c:	b085      	sub	sp, #20
 800198e:	0b24      	lsrs	r4, r4, #12
 8001990:	0d40      	lsrs	r0, r0, #21
 8001992:	0fce      	lsrs	r6, r1, #31
 8001994:	2800      	cmp	r0, #0
 8001996:	d059      	beq.n	8001a4c <__aeabi_ddiv+0xd8>
 8001998:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <__aeabi_ddiv+0x244>)
 800199a:	4298      	cmp	r0, r3
 800199c:	d100      	bne.n	80019a0 <__aeabi_ddiv+0x2c>
 800199e:	e098      	b.n	8001ad2 <__aeabi_ddiv+0x15e>
 80019a0:	0f6b      	lsrs	r3, r5, #29
 80019a2:	00e4      	lsls	r4, r4, #3
 80019a4:	431c      	orrs	r4, r3
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	4323      	orrs	r3, r4
 80019ac:	4698      	mov	r8, r3
 80019ae:	4b83      	ldr	r3, [pc, #524]	; (8001bbc <__aeabi_ddiv+0x248>)
 80019b0:	00ed      	lsls	r5, r5, #3
 80019b2:	469b      	mov	fp, r3
 80019b4:	2300      	movs	r3, #0
 80019b6:	4699      	mov	r9, r3
 80019b8:	4483      	add	fp, r0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	033c      	lsls	r4, r7, #12
 80019be:	007b      	lsls	r3, r7, #1
 80019c0:	4650      	mov	r0, sl
 80019c2:	0b24      	lsrs	r4, r4, #12
 80019c4:	0d5b      	lsrs	r3, r3, #21
 80019c6:	0fff      	lsrs	r7, r7, #31
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d067      	beq.n	8001a9c <__aeabi_ddiv+0x128>
 80019cc:	4a7a      	ldr	r2, [pc, #488]	; (8001bb8 <__aeabi_ddiv+0x244>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d018      	beq.n	8001a04 <__aeabi_ddiv+0x90>
 80019d2:	497a      	ldr	r1, [pc, #488]	; (8001bbc <__aeabi_ddiv+0x248>)
 80019d4:	0f42      	lsrs	r2, r0, #29
 80019d6:	468c      	mov	ip, r1
 80019d8:	00e4      	lsls	r4, r4, #3
 80019da:	4659      	mov	r1, fp
 80019dc:	4314      	orrs	r4, r2
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	4463      	add	r3, ip
 80019e2:	0412      	lsls	r2, r2, #16
 80019e4:	1acb      	subs	r3, r1, r3
 80019e6:	4314      	orrs	r4, r2
 80019e8:	469b      	mov	fp, r3
 80019ea:	00c2      	lsls	r2, r0, #3
 80019ec:	2000      	movs	r0, #0
 80019ee:	0033      	movs	r3, r6
 80019f0:	407b      	eors	r3, r7
 80019f2:	469a      	mov	sl, r3
 80019f4:	464b      	mov	r3, r9
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	d900      	bls.n	80019fc <__aeabi_ddiv+0x88>
 80019fa:	e0ef      	b.n	8001bdc <__aeabi_ddiv+0x268>
 80019fc:	4970      	ldr	r1, [pc, #448]	; (8001bc0 <__aeabi_ddiv+0x24c>)
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	58cb      	ldr	r3, [r1, r3]
 8001a02:	469f      	mov	pc, r3
 8001a04:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <__aeabi_ddiv+0x250>)
 8001a06:	4652      	mov	r2, sl
 8001a08:	469c      	mov	ip, r3
 8001a0a:	4322      	orrs	r2, r4
 8001a0c:	44e3      	add	fp, ip
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d000      	beq.n	8001a14 <__aeabi_ddiv+0xa0>
 8001a12:	e095      	b.n	8001b40 <__aeabi_ddiv+0x1cc>
 8001a14:	4649      	mov	r1, r9
 8001a16:	2302      	movs	r3, #2
 8001a18:	4319      	orrs	r1, r3
 8001a1a:	4689      	mov	r9, r1
 8001a1c:	2400      	movs	r4, #0
 8001a1e:	2002      	movs	r0, #2
 8001a20:	e7e5      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001a22:	2300      	movs	r3, #0
 8001a24:	2400      	movs	r4, #0
 8001a26:	2500      	movs	r5, #0
 8001a28:	4652      	mov	r2, sl
 8001a2a:	051b      	lsls	r3, r3, #20
 8001a2c:	4323      	orrs	r3, r4
 8001a2e:	07d2      	lsls	r2, r2, #31
 8001a30:	4313      	orrs	r3, r2
 8001a32:	0028      	movs	r0, r5
 8001a34:	0019      	movs	r1, r3
 8001a36:	b005      	add	sp, #20
 8001a38:	bcf0      	pop	{r4, r5, r6, r7}
 8001a3a:	46bb      	mov	fp, r7
 8001a3c:	46b2      	mov	sl, r6
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	46a0      	mov	r8, r4
 8001a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a44:	2400      	movs	r4, #0
 8001a46:	2500      	movs	r5, #0
 8001a48:	4b5b      	ldr	r3, [pc, #364]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001a4a:	e7ed      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001a4c:	464b      	mov	r3, r9
 8001a4e:	4323      	orrs	r3, r4
 8001a50:	4698      	mov	r8, r3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_ddiv+0xe2>
 8001a54:	e089      	b.n	8001b6a <__aeabi_ddiv+0x1f6>
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_ddiv+0xe8>
 8001a5a:	e1e0      	b.n	8001e1e <__aeabi_ddiv+0x4aa>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f001 fb07 	bl	8003070 <__clzsi2>
 8001a62:	0001      	movs	r1, r0
 8001a64:	0002      	movs	r2, r0
 8001a66:	390b      	subs	r1, #11
 8001a68:	231d      	movs	r3, #29
 8001a6a:	1a5b      	subs	r3, r3, r1
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	0010      	movs	r0, r2
 8001a70:	40d9      	lsrs	r1, r3
 8001a72:	3808      	subs	r0, #8
 8001a74:	4084      	lsls	r4, r0
 8001a76:	000b      	movs	r3, r1
 8001a78:	464d      	mov	r5, r9
 8001a7a:	4323      	orrs	r3, r4
 8001a7c:	4698      	mov	r8, r3
 8001a7e:	4085      	lsls	r5, r0
 8001a80:	4851      	ldr	r0, [pc, #324]	; (8001bc8 <__aeabi_ddiv+0x254>)
 8001a82:	033c      	lsls	r4, r7, #12
 8001a84:	1a83      	subs	r3, r0, r2
 8001a86:	469b      	mov	fp, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	007b      	lsls	r3, r7, #1
 8001a90:	4650      	mov	r0, sl
 8001a92:	0b24      	lsrs	r4, r4, #12
 8001a94:	0d5b      	lsrs	r3, r3, #21
 8001a96:	0fff      	lsrs	r7, r7, #31
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d197      	bne.n	80019cc <__aeabi_ddiv+0x58>
 8001a9c:	4652      	mov	r2, sl
 8001a9e:	4322      	orrs	r2, r4
 8001aa0:	d055      	beq.n	8001b4e <__aeabi_ddiv+0x1da>
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_ddiv+0x134>
 8001aa6:	e1ca      	b.n	8001e3e <__aeabi_ddiv+0x4ca>
 8001aa8:	0020      	movs	r0, r4
 8001aaa:	f001 fae1 	bl	8003070 <__clzsi2>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	3a0b      	subs	r2, #11
 8001ab2:	231d      	movs	r3, #29
 8001ab4:	0001      	movs	r1, r0
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	4652      	mov	r2, sl
 8001aba:	3908      	subs	r1, #8
 8001abc:	40da      	lsrs	r2, r3
 8001abe:	408c      	lsls	r4, r1
 8001ac0:	4314      	orrs	r4, r2
 8001ac2:	4652      	mov	r2, sl
 8001ac4:	408a      	lsls	r2, r1
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <__aeabi_ddiv+0x258>)
 8001ac8:	4458      	add	r0, fp
 8001aca:	469b      	mov	fp, r3
 8001acc:	4483      	add	fp, r0
 8001ace:	2000      	movs	r0, #0
 8001ad0:	e78d      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	4323      	orrs	r3, r4
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	d140      	bne.n	8001b5c <__aeabi_ddiv+0x1e8>
 8001ada:	2308      	movs	r3, #8
 8001adc:	4699      	mov	r9, r3
 8001ade:	3b06      	subs	r3, #6
 8001ae0:	2500      	movs	r5, #0
 8001ae2:	4683      	mov	fp, r0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	e769      	b.n	80019bc <__aeabi_ddiv+0x48>
 8001ae8:	46b2      	mov	sl, r6
 8001aea:	9b00      	ldr	r3, [sp, #0]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d0a9      	beq.n	8001a44 <__aeabi_ddiv+0xd0>
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d100      	bne.n	8001af6 <__aeabi_ddiv+0x182>
 8001af4:	e211      	b.n	8001f1a <__aeabi_ddiv+0x5a6>
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d093      	beq.n	8001a22 <__aeabi_ddiv+0xae>
 8001afa:	4a35      	ldr	r2, [pc, #212]	; (8001bd0 <__aeabi_ddiv+0x25c>)
 8001afc:	445a      	add	r2, fp
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	dc00      	bgt.n	8001b04 <__aeabi_ddiv+0x190>
 8001b02:	e13c      	b.n	8001d7e <__aeabi_ddiv+0x40a>
 8001b04:	076b      	lsls	r3, r5, #29
 8001b06:	d000      	beq.n	8001b0a <__aeabi_ddiv+0x196>
 8001b08:	e1a7      	b.n	8001e5a <__aeabi_ddiv+0x4e6>
 8001b0a:	08ed      	lsrs	r5, r5, #3
 8001b0c:	4643      	mov	r3, r8
 8001b0e:	01db      	lsls	r3, r3, #7
 8001b10:	d506      	bpl.n	8001b20 <__aeabi_ddiv+0x1ac>
 8001b12:	4642      	mov	r2, r8
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <__aeabi_ddiv+0x260>)
 8001b16:	401a      	ands	r2, r3
 8001b18:	4690      	mov	r8, r2
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	00d2      	lsls	r2, r2, #3
 8001b1e:	445a      	add	r2, fp
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <__aeabi_ddiv+0x264>)
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dc8e      	bgt.n	8001a44 <__aeabi_ddiv+0xd0>
 8001b26:	4643      	mov	r3, r8
 8001b28:	0552      	lsls	r2, r2, #21
 8001b2a:	0758      	lsls	r0, r3, #29
 8001b2c:	025c      	lsls	r4, r3, #9
 8001b2e:	4305      	orrs	r5, r0
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d53      	lsrs	r3, r2, #21
 8001b34:	e778      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001b36:	46ba      	mov	sl, r7
 8001b38:	46a0      	mov	r8, r4
 8001b3a:	0015      	movs	r5, r2
 8001b3c:	9000      	str	r0, [sp, #0]
 8001b3e:	e7d4      	b.n	8001aea <__aeabi_ddiv+0x176>
 8001b40:	464a      	mov	r2, r9
 8001b42:	2303      	movs	r3, #3
 8001b44:	431a      	orrs	r2, r3
 8001b46:	4691      	mov	r9, r2
 8001b48:	2003      	movs	r0, #3
 8001b4a:	4652      	mov	r2, sl
 8001b4c:	e74f      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001b4e:	4649      	mov	r1, r9
 8001b50:	2301      	movs	r3, #1
 8001b52:	4319      	orrs	r1, r3
 8001b54:	4689      	mov	r9, r1
 8001b56:	2400      	movs	r4, #0
 8001b58:	2001      	movs	r0, #1
 8001b5a:	e748      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	4699      	mov	r9, r3
 8001b60:	3b09      	subs	r3, #9
 8001b62:	46a0      	mov	r8, r4
 8001b64:	4683      	mov	fp, r0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	e728      	b.n	80019bc <__aeabi_ddiv+0x48>
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	2300      	movs	r3, #0
 8001b70:	469b      	mov	fp, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	2500      	movs	r5, #0
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	e720      	b.n	80019bc <__aeabi_ddiv+0x48>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	2480      	movs	r4, #128	; 0x80
 8001b7e:	469a      	mov	sl, r3
 8001b80:	2500      	movs	r5, #0
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001b84:	0324      	lsls	r4, r4, #12
 8001b86:	e74f      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	4641      	mov	r1, r8
 8001b8c:	031b      	lsls	r3, r3, #12
 8001b8e:	4219      	tst	r1, r3
 8001b90:	d008      	beq.n	8001ba4 <__aeabi_ddiv+0x230>
 8001b92:	421c      	tst	r4, r3
 8001b94:	d106      	bne.n	8001ba4 <__aeabi_ddiv+0x230>
 8001b96:	431c      	orrs	r4, r3
 8001b98:	0324      	lsls	r4, r4, #12
 8001b9a:	46ba      	mov	sl, r7
 8001b9c:	0015      	movs	r5, r2
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001ba0:	0b24      	lsrs	r4, r4, #12
 8001ba2:	e741      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001ba4:	2480      	movs	r4, #128	; 0x80
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	0324      	lsls	r4, r4, #12
 8001baa:	431c      	orrs	r4, r3
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	46b2      	mov	sl, r6
 8001bb0:	4b01      	ldr	r3, [pc, #4]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e738      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	000007ff 	.word	0x000007ff
 8001bbc:	fffffc01 	.word	0xfffffc01
 8001bc0:	08011f44 	.word	0x08011f44
 8001bc4:	fffff801 	.word	0xfffff801
 8001bc8:	fffffc0d 	.word	0xfffffc0d
 8001bcc:	000003f3 	.word	0x000003f3
 8001bd0:	000003ff 	.word	0x000003ff
 8001bd4:	feffffff 	.word	0xfeffffff
 8001bd8:	000007fe 	.word	0x000007fe
 8001bdc:	4544      	cmp	r4, r8
 8001bde:	d200      	bcs.n	8001be2 <__aeabi_ddiv+0x26e>
 8001be0:	e116      	b.n	8001e10 <__aeabi_ddiv+0x49c>
 8001be2:	d100      	bne.n	8001be6 <__aeabi_ddiv+0x272>
 8001be4:	e111      	b.n	8001e0a <__aeabi_ddiv+0x496>
 8001be6:	2301      	movs	r3, #1
 8001be8:	425b      	negs	r3, r3
 8001bea:	469c      	mov	ip, r3
 8001bec:	002e      	movs	r6, r5
 8001bee:	4640      	mov	r0, r8
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	44e3      	add	fp, ip
 8001bf4:	0223      	lsls	r3, r4, #8
 8001bf6:	0e14      	lsrs	r4, r2, #24
 8001bf8:	431c      	orrs	r4, r3
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	0423      	lsls	r3, r4, #16
 8001c00:	0c1f      	lsrs	r7, r3, #16
 8001c02:	0212      	lsls	r2, r2, #8
 8001c04:	4649      	mov	r1, r9
 8001c06:	9200      	str	r2, [sp, #0]
 8001c08:	9701      	str	r7, [sp, #4]
 8001c0a:	f7fe fb1b 	bl	8000244 <__aeabi_uidivmod>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	437a      	muls	r2, r7
 8001c12:	040b      	lsls	r3, r1, #16
 8001c14:	0c31      	lsrs	r1, r6, #16
 8001c16:	4680      	mov	r8, r0
 8001c18:	4319      	orrs	r1, r3
 8001c1a:	428a      	cmp	r2, r1
 8001c1c:	d90b      	bls.n	8001c36 <__aeabi_ddiv+0x2c2>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	425b      	negs	r3, r3
 8001c22:	469c      	mov	ip, r3
 8001c24:	1909      	adds	r1, r1, r4
 8001c26:	44e0      	add	r8, ip
 8001c28:	428c      	cmp	r4, r1
 8001c2a:	d804      	bhi.n	8001c36 <__aeabi_ddiv+0x2c2>
 8001c2c:	428a      	cmp	r2, r1
 8001c2e:	d902      	bls.n	8001c36 <__aeabi_ddiv+0x2c2>
 8001c30:	1e83      	subs	r3, r0, #2
 8001c32:	4698      	mov	r8, r3
 8001c34:	1909      	adds	r1, r1, r4
 8001c36:	1a88      	subs	r0, r1, r2
 8001c38:	4649      	mov	r1, r9
 8001c3a:	f7fe fb03 	bl	8000244 <__aeabi_uidivmod>
 8001c3e:	0409      	lsls	r1, r1, #16
 8001c40:	468c      	mov	ip, r1
 8001c42:	0431      	lsls	r1, r6, #16
 8001c44:	4666      	mov	r6, ip
 8001c46:	9a01      	ldr	r2, [sp, #4]
 8001c48:	0c09      	lsrs	r1, r1, #16
 8001c4a:	4342      	muls	r2, r0
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	4331      	orrs	r1, r6
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d904      	bls.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001c54:	1909      	adds	r1, r1, r4
 8001c56:	3b01      	subs	r3, #1
 8001c58:	428c      	cmp	r4, r1
 8001c5a:	d800      	bhi.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001c5c:	e111      	b.n	8001e82 <__aeabi_ddiv+0x50e>
 8001c5e:	1a89      	subs	r1, r1, r2
 8001c60:	4642      	mov	r2, r8
 8001c62:	9e00      	ldr	r6, [sp, #0]
 8001c64:	0412      	lsls	r2, r2, #16
 8001c66:	431a      	orrs	r2, r3
 8001c68:	0c33      	lsrs	r3, r6, #16
 8001c6a:	001f      	movs	r7, r3
 8001c6c:	0c10      	lsrs	r0, r2, #16
 8001c6e:	4690      	mov	r8, r2
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	0413      	lsls	r3, r2, #16
 8001c74:	0432      	lsls	r2, r6, #16
 8001c76:	0c16      	lsrs	r6, r2, #16
 8001c78:	0032      	movs	r2, r6
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	435a      	muls	r2, r3
 8001c7e:	9603      	str	r6, [sp, #12]
 8001c80:	437b      	muls	r3, r7
 8001c82:	4346      	muls	r6, r0
 8001c84:	4378      	muls	r0, r7
 8001c86:	0c17      	lsrs	r7, r2, #16
 8001c88:	46bc      	mov	ip, r7
 8001c8a:	199b      	adds	r3, r3, r6
 8001c8c:	4463      	add	r3, ip
 8001c8e:	429e      	cmp	r6, r3
 8001c90:	d903      	bls.n	8001c9a <__aeabi_ddiv+0x326>
 8001c92:	2680      	movs	r6, #128	; 0x80
 8001c94:	0276      	lsls	r6, r6, #9
 8001c96:	46b4      	mov	ip, r6
 8001c98:	4460      	add	r0, ip
 8001c9a:	0c1e      	lsrs	r6, r3, #16
 8001c9c:	1830      	adds	r0, r6, r0
 8001c9e:	0416      	lsls	r6, r2, #16
 8001ca0:	041b      	lsls	r3, r3, #16
 8001ca2:	0c36      	lsrs	r6, r6, #16
 8001ca4:	199e      	adds	r6, r3, r6
 8001ca6:	4281      	cmp	r1, r0
 8001ca8:	d200      	bcs.n	8001cac <__aeabi_ddiv+0x338>
 8001caa:	e09c      	b.n	8001de6 <__aeabi_ddiv+0x472>
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001cae:	e097      	b.n	8001de0 <__aeabi_ddiv+0x46c>
 8001cb0:	1bae      	subs	r6, r5, r6
 8001cb2:	1a09      	subs	r1, r1, r0
 8001cb4:	42b5      	cmp	r5, r6
 8001cb6:	4180      	sbcs	r0, r0
 8001cb8:	4240      	negs	r0, r0
 8001cba:	1a08      	subs	r0, r1, r0
 8001cbc:	4284      	cmp	r4, r0
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_ddiv+0x34e>
 8001cc0:	e111      	b.n	8001ee6 <__aeabi_ddiv+0x572>
 8001cc2:	4649      	mov	r1, r9
 8001cc4:	f7fe fabe 	bl	8000244 <__aeabi_uidivmod>
 8001cc8:	9a01      	ldr	r2, [sp, #4]
 8001cca:	040b      	lsls	r3, r1, #16
 8001ccc:	4342      	muls	r2, r0
 8001cce:	0c31      	lsrs	r1, r6, #16
 8001cd0:	0005      	movs	r5, r0
 8001cd2:	4319      	orrs	r1, r3
 8001cd4:	428a      	cmp	r2, r1
 8001cd6:	d907      	bls.n	8001ce8 <__aeabi_ddiv+0x374>
 8001cd8:	1909      	adds	r1, r1, r4
 8001cda:	3d01      	subs	r5, #1
 8001cdc:	428c      	cmp	r4, r1
 8001cde:	d803      	bhi.n	8001ce8 <__aeabi_ddiv+0x374>
 8001ce0:	428a      	cmp	r2, r1
 8001ce2:	d901      	bls.n	8001ce8 <__aeabi_ddiv+0x374>
 8001ce4:	1e85      	subs	r5, r0, #2
 8001ce6:	1909      	adds	r1, r1, r4
 8001ce8:	1a88      	subs	r0, r1, r2
 8001cea:	4649      	mov	r1, r9
 8001cec:	f7fe faaa 	bl	8000244 <__aeabi_uidivmod>
 8001cf0:	0409      	lsls	r1, r1, #16
 8001cf2:	468c      	mov	ip, r1
 8001cf4:	0431      	lsls	r1, r6, #16
 8001cf6:	4666      	mov	r6, ip
 8001cf8:	9a01      	ldr	r2, [sp, #4]
 8001cfa:	0c09      	lsrs	r1, r1, #16
 8001cfc:	4342      	muls	r2, r0
 8001cfe:	0003      	movs	r3, r0
 8001d00:	4331      	orrs	r1, r6
 8001d02:	428a      	cmp	r2, r1
 8001d04:	d907      	bls.n	8001d16 <__aeabi_ddiv+0x3a2>
 8001d06:	1909      	adds	r1, r1, r4
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	428c      	cmp	r4, r1
 8001d0c:	d803      	bhi.n	8001d16 <__aeabi_ddiv+0x3a2>
 8001d0e:	428a      	cmp	r2, r1
 8001d10:	d901      	bls.n	8001d16 <__aeabi_ddiv+0x3a2>
 8001d12:	1e83      	subs	r3, r0, #2
 8001d14:	1909      	adds	r1, r1, r4
 8001d16:	9e03      	ldr	r6, [sp, #12]
 8001d18:	1a89      	subs	r1, r1, r2
 8001d1a:	0032      	movs	r2, r6
 8001d1c:	042d      	lsls	r5, r5, #16
 8001d1e:	431d      	orrs	r5, r3
 8001d20:	9f02      	ldr	r7, [sp, #8]
 8001d22:	042b      	lsls	r3, r5, #16
 8001d24:	0c1b      	lsrs	r3, r3, #16
 8001d26:	435a      	muls	r2, r3
 8001d28:	437b      	muls	r3, r7
 8001d2a:	469c      	mov	ip, r3
 8001d2c:	0c28      	lsrs	r0, r5, #16
 8001d2e:	4346      	muls	r6, r0
 8001d30:	0c13      	lsrs	r3, r2, #16
 8001d32:	44b4      	add	ip, r6
 8001d34:	4463      	add	r3, ip
 8001d36:	4378      	muls	r0, r7
 8001d38:	429e      	cmp	r6, r3
 8001d3a:	d903      	bls.n	8001d44 <__aeabi_ddiv+0x3d0>
 8001d3c:	2680      	movs	r6, #128	; 0x80
 8001d3e:	0276      	lsls	r6, r6, #9
 8001d40:	46b4      	mov	ip, r6
 8001d42:	4460      	add	r0, ip
 8001d44:	0c1e      	lsrs	r6, r3, #16
 8001d46:	0412      	lsls	r2, r2, #16
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	0c12      	lsrs	r2, r2, #16
 8001d4c:	1830      	adds	r0, r6, r0
 8001d4e:	189b      	adds	r3, r3, r2
 8001d50:	4281      	cmp	r1, r0
 8001d52:	d306      	bcc.n	8001d62 <__aeabi_ddiv+0x3ee>
 8001d54:	d002      	beq.n	8001d5c <__aeabi_ddiv+0x3e8>
 8001d56:	2301      	movs	r3, #1
 8001d58:	431d      	orrs	r5, r3
 8001d5a:	e6ce      	b.n	8001afa <__aeabi_ddiv+0x186>
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0x3ee>
 8001d60:	e6cb      	b.n	8001afa <__aeabi_ddiv+0x186>
 8001d62:	1861      	adds	r1, r4, r1
 8001d64:	1e6e      	subs	r6, r5, #1
 8001d66:	42a1      	cmp	r1, r4
 8001d68:	d200      	bcs.n	8001d6c <__aeabi_ddiv+0x3f8>
 8001d6a:	e0a4      	b.n	8001eb6 <__aeabi_ddiv+0x542>
 8001d6c:	4281      	cmp	r1, r0
 8001d6e:	d200      	bcs.n	8001d72 <__aeabi_ddiv+0x3fe>
 8001d70:	e0c9      	b.n	8001f06 <__aeabi_ddiv+0x592>
 8001d72:	d100      	bne.n	8001d76 <__aeabi_ddiv+0x402>
 8001d74:	e0d9      	b.n	8001f2a <__aeabi_ddiv+0x5b6>
 8001d76:	0035      	movs	r5, r6
 8001d78:	e7ed      	b.n	8001d56 <__aeabi_ddiv+0x3e2>
 8001d7a:	2501      	movs	r5, #1
 8001d7c:	426d      	negs	r5, r5
 8001d7e:	2101      	movs	r1, #1
 8001d80:	1a89      	subs	r1, r1, r2
 8001d82:	2938      	cmp	r1, #56	; 0x38
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_ddiv+0x414>
 8001d86:	e64c      	b.n	8001a22 <__aeabi_ddiv+0xae>
 8001d88:	291f      	cmp	r1, #31
 8001d8a:	dc00      	bgt.n	8001d8e <__aeabi_ddiv+0x41a>
 8001d8c:	e07f      	b.n	8001e8e <__aeabi_ddiv+0x51a>
 8001d8e:	231f      	movs	r3, #31
 8001d90:	425b      	negs	r3, r3
 8001d92:	1a9a      	subs	r2, r3, r2
 8001d94:	4643      	mov	r3, r8
 8001d96:	40d3      	lsrs	r3, r2
 8001d98:	2920      	cmp	r1, #32
 8001d9a:	d004      	beq.n	8001da6 <__aeabi_ddiv+0x432>
 8001d9c:	4644      	mov	r4, r8
 8001d9e:	4a65      	ldr	r2, [pc, #404]	; (8001f34 <__aeabi_ddiv+0x5c0>)
 8001da0:	445a      	add	r2, fp
 8001da2:	4094      	lsls	r4, r2
 8001da4:	4325      	orrs	r5, r4
 8001da6:	1e6a      	subs	r2, r5, #1
 8001da8:	4195      	sbcs	r5, r2
 8001daa:	2207      	movs	r2, #7
 8001dac:	432b      	orrs	r3, r5
 8001dae:	0015      	movs	r5, r2
 8001db0:	2400      	movs	r4, #0
 8001db2:	401d      	ands	r5, r3
 8001db4:	421a      	tst	r2, r3
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x446>
 8001db8:	e0a1      	b.n	8001efe <__aeabi_ddiv+0x58a>
 8001dba:	220f      	movs	r2, #15
 8001dbc:	2400      	movs	r4, #0
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	2a04      	cmp	r2, #4
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_ddiv+0x452>
 8001dc4:	e098      	b.n	8001ef8 <__aeabi_ddiv+0x584>
 8001dc6:	1d1a      	adds	r2, r3, #4
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	419b      	sbcs	r3, r3
 8001dcc:	425b      	negs	r3, r3
 8001dce:	18e4      	adds	r4, r4, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	0222      	lsls	r2, r4, #8
 8001dd4:	d400      	bmi.n	8001dd8 <__aeabi_ddiv+0x464>
 8001dd6:	e08f      	b.n	8001ef8 <__aeabi_ddiv+0x584>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2500      	movs	r5, #0
 8001dde:	e623      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001de0:	42b5      	cmp	r5, r6
 8001de2:	d300      	bcc.n	8001de6 <__aeabi_ddiv+0x472>
 8001de4:	e764      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001de6:	4643      	mov	r3, r8
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	9b00      	ldr	r3, [sp, #0]
 8001dec:	469c      	mov	ip, r3
 8001dee:	4465      	add	r5, ip
 8001df0:	001f      	movs	r7, r3
 8001df2:	429d      	cmp	r5, r3
 8001df4:	419b      	sbcs	r3, r3
 8001df6:	425b      	negs	r3, r3
 8001df8:	191b      	adds	r3, r3, r4
 8001dfa:	18c9      	adds	r1, r1, r3
 8001dfc:	428c      	cmp	r4, r1
 8001dfe:	d23a      	bcs.n	8001e76 <__aeabi_ddiv+0x502>
 8001e00:	4288      	cmp	r0, r1
 8001e02:	d863      	bhi.n	8001ecc <__aeabi_ddiv+0x558>
 8001e04:	d060      	beq.n	8001ec8 <__aeabi_ddiv+0x554>
 8001e06:	4690      	mov	r8, r2
 8001e08:	e752      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001e0a:	42aa      	cmp	r2, r5
 8001e0c:	d900      	bls.n	8001e10 <__aeabi_ddiv+0x49c>
 8001e0e:	e6ea      	b.n	8001be6 <__aeabi_ddiv+0x272>
 8001e10:	4643      	mov	r3, r8
 8001e12:	07de      	lsls	r6, r3, #31
 8001e14:	0858      	lsrs	r0, r3, #1
 8001e16:	086b      	lsrs	r3, r5, #1
 8001e18:	431e      	orrs	r6, r3
 8001e1a:	07ed      	lsls	r5, r5, #31
 8001e1c:	e6ea      	b.n	8001bf4 <__aeabi_ddiv+0x280>
 8001e1e:	4648      	mov	r0, r9
 8001e20:	f001 f926 	bl	8003070 <__clzsi2>
 8001e24:	0001      	movs	r1, r0
 8001e26:	0002      	movs	r2, r0
 8001e28:	3115      	adds	r1, #21
 8001e2a:	3220      	adds	r2, #32
 8001e2c:	291c      	cmp	r1, #28
 8001e2e:	dc00      	bgt.n	8001e32 <__aeabi_ddiv+0x4be>
 8001e30:	e61a      	b.n	8001a68 <__aeabi_ddiv+0xf4>
 8001e32:	464b      	mov	r3, r9
 8001e34:	3808      	subs	r0, #8
 8001e36:	4083      	lsls	r3, r0
 8001e38:	2500      	movs	r5, #0
 8001e3a:	4698      	mov	r8, r3
 8001e3c:	e620      	b.n	8001a80 <__aeabi_ddiv+0x10c>
 8001e3e:	f001 f917 	bl	8003070 <__clzsi2>
 8001e42:	0003      	movs	r3, r0
 8001e44:	001a      	movs	r2, r3
 8001e46:	3215      	adds	r2, #21
 8001e48:	3020      	adds	r0, #32
 8001e4a:	2a1c      	cmp	r2, #28
 8001e4c:	dc00      	bgt.n	8001e50 <__aeabi_ddiv+0x4dc>
 8001e4e:	e630      	b.n	8001ab2 <__aeabi_ddiv+0x13e>
 8001e50:	4654      	mov	r4, sl
 8001e52:	3b08      	subs	r3, #8
 8001e54:	2200      	movs	r2, #0
 8001e56:	409c      	lsls	r4, r3
 8001e58:	e635      	b.n	8001ac6 <__aeabi_ddiv+0x152>
 8001e5a:	230f      	movs	r3, #15
 8001e5c:	402b      	ands	r3, r5
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d100      	bne.n	8001e64 <__aeabi_ddiv+0x4f0>
 8001e62:	e652      	b.n	8001b0a <__aeabi_ddiv+0x196>
 8001e64:	2305      	movs	r3, #5
 8001e66:	425b      	negs	r3, r3
 8001e68:	42ab      	cmp	r3, r5
 8001e6a:	419b      	sbcs	r3, r3
 8001e6c:	3504      	adds	r5, #4
 8001e6e:	425b      	negs	r3, r3
 8001e70:	08ed      	lsrs	r5, r5, #3
 8001e72:	4498      	add	r8, r3
 8001e74:	e64a      	b.n	8001b0c <__aeabi_ddiv+0x198>
 8001e76:	428c      	cmp	r4, r1
 8001e78:	d1c5      	bne.n	8001e06 <__aeabi_ddiv+0x492>
 8001e7a:	42af      	cmp	r7, r5
 8001e7c:	d9c0      	bls.n	8001e00 <__aeabi_ddiv+0x48c>
 8001e7e:	4690      	mov	r8, r2
 8001e80:	e716      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001e82:	428a      	cmp	r2, r1
 8001e84:	d800      	bhi.n	8001e88 <__aeabi_ddiv+0x514>
 8001e86:	e6ea      	b.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001e88:	1e83      	subs	r3, r0, #2
 8001e8a:	1909      	adds	r1, r1, r4
 8001e8c:	e6e7      	b.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001e8e:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <__aeabi_ddiv+0x5c4>)
 8001e90:	0028      	movs	r0, r5
 8001e92:	445a      	add	r2, fp
 8001e94:	4643      	mov	r3, r8
 8001e96:	4095      	lsls	r5, r2
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	40c8      	lsrs	r0, r1
 8001e9c:	1e6a      	subs	r2, r5, #1
 8001e9e:	4195      	sbcs	r5, r2
 8001ea0:	4644      	mov	r4, r8
 8001ea2:	4303      	orrs	r3, r0
 8001ea4:	432b      	orrs	r3, r5
 8001ea6:	40cc      	lsrs	r4, r1
 8001ea8:	075a      	lsls	r2, r3, #29
 8001eaa:	d092      	beq.n	8001dd2 <__aeabi_ddiv+0x45e>
 8001eac:	220f      	movs	r2, #15
 8001eae:	401a      	ands	r2, r3
 8001eb0:	2a04      	cmp	r2, #4
 8001eb2:	d188      	bne.n	8001dc6 <__aeabi_ddiv+0x452>
 8001eb4:	e78d      	b.n	8001dd2 <__aeabi_ddiv+0x45e>
 8001eb6:	0035      	movs	r5, r6
 8001eb8:	4281      	cmp	r1, r0
 8001eba:	d000      	beq.n	8001ebe <__aeabi_ddiv+0x54a>
 8001ebc:	e74b      	b.n	8001d56 <__aeabi_ddiv+0x3e2>
 8001ebe:	9a00      	ldr	r2, [sp, #0]
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d000      	beq.n	8001ec6 <__aeabi_ddiv+0x552>
 8001ec4:	e747      	b.n	8001d56 <__aeabi_ddiv+0x3e2>
 8001ec6:	e618      	b.n	8001afa <__aeabi_ddiv+0x186>
 8001ec8:	42ae      	cmp	r6, r5
 8001eca:	d99c      	bls.n	8001e06 <__aeabi_ddiv+0x492>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	425b      	negs	r3, r3
 8001ed0:	469c      	mov	ip, r3
 8001ed2:	9b00      	ldr	r3, [sp, #0]
 8001ed4:	44e0      	add	r8, ip
 8001ed6:	469c      	mov	ip, r3
 8001ed8:	4465      	add	r5, ip
 8001eda:	429d      	cmp	r5, r3
 8001edc:	419b      	sbcs	r3, r3
 8001ede:	425b      	negs	r3, r3
 8001ee0:	191b      	adds	r3, r3, r4
 8001ee2:	18c9      	adds	r1, r1, r3
 8001ee4:	e6e4      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001ee6:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <__aeabi_ddiv+0x5c8>)
 8001ee8:	445a      	add	r2, fp
 8001eea:	2a00      	cmp	r2, #0
 8001eec:	dc00      	bgt.n	8001ef0 <__aeabi_ddiv+0x57c>
 8001eee:	e744      	b.n	8001d7a <__aeabi_ddiv+0x406>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	4498      	add	r8, r3
 8001ef6:	e609      	b.n	8001b0c <__aeabi_ddiv+0x198>
 8001ef8:	0765      	lsls	r5, r4, #29
 8001efa:	0264      	lsls	r4, r4, #9
 8001efc:	0b24      	lsrs	r4, r4, #12
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	431d      	orrs	r5, r3
 8001f02:	2300      	movs	r3, #0
 8001f04:	e590      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001f06:	9e00      	ldr	r6, [sp, #0]
 8001f08:	3d02      	subs	r5, #2
 8001f0a:	0072      	lsls	r2, r6, #1
 8001f0c:	42b2      	cmp	r2, r6
 8001f0e:	41bf      	sbcs	r7, r7
 8001f10:	427f      	negs	r7, r7
 8001f12:	193c      	adds	r4, r7, r4
 8001f14:	1909      	adds	r1, r1, r4
 8001f16:	9200      	str	r2, [sp, #0]
 8001f18:	e7ce      	b.n	8001eb8 <__aeabi_ddiv+0x544>
 8001f1a:	2480      	movs	r4, #128	; 0x80
 8001f1c:	4643      	mov	r3, r8
 8001f1e:	0324      	lsls	r4, r4, #12
 8001f20:	431c      	orrs	r4, r3
 8001f22:	0324      	lsls	r4, r4, #12
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <__aeabi_ddiv+0x5cc>)
 8001f26:	0b24      	lsrs	r4, r4, #12
 8001f28:	e57e      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001f2a:	9a00      	ldr	r2, [sp, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3ea      	bcc.n	8001f06 <__aeabi_ddiv+0x592>
 8001f30:	0035      	movs	r5, r6
 8001f32:	e7c4      	b.n	8001ebe <__aeabi_ddiv+0x54a>
 8001f34:	0000043e 	.word	0x0000043e
 8001f38:	0000041e 	.word	0x0000041e
 8001f3c:	000003ff 	.word	0x000003ff
 8001f40:	000007ff 	.word	0x000007ff

08001f44 <__eqdf2>:
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	464f      	mov	r7, r9
 8001f48:	4646      	mov	r6, r8
 8001f4a:	46d6      	mov	lr, sl
 8001f4c:	4694      	mov	ip, r2
 8001f4e:	4691      	mov	r9, r2
 8001f50:	031a      	lsls	r2, r3, #12
 8001f52:	0b12      	lsrs	r2, r2, #12
 8001f54:	4d18      	ldr	r5, [pc, #96]	; (8001fb8 <__eqdf2+0x74>)
 8001f56:	b5c0      	push	{r6, r7, lr}
 8001f58:	004c      	lsls	r4, r1, #1
 8001f5a:	030f      	lsls	r7, r1, #12
 8001f5c:	4692      	mov	sl, r2
 8001f5e:	005a      	lsls	r2, r3, #1
 8001f60:	0006      	movs	r6, r0
 8001f62:	4680      	mov	r8, r0
 8001f64:	0b3f      	lsrs	r7, r7, #12
 8001f66:	2001      	movs	r0, #1
 8001f68:	0d64      	lsrs	r4, r4, #21
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	0d52      	lsrs	r2, r2, #21
 8001f6e:	0fdb      	lsrs	r3, r3, #31
 8001f70:	42ac      	cmp	r4, r5
 8001f72:	d00a      	beq.n	8001f8a <__eqdf2+0x46>
 8001f74:	42aa      	cmp	r2, r5
 8001f76:	d003      	beq.n	8001f80 <__eqdf2+0x3c>
 8001f78:	4294      	cmp	r4, r2
 8001f7a:	d101      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f7c:	4557      	cmp	r7, sl
 8001f7e:	d00d      	beq.n	8001f9c <__eqdf2+0x58>
 8001f80:	bce0      	pop	{r5, r6, r7}
 8001f82:	46ba      	mov	sl, r7
 8001f84:	46b1      	mov	r9, r6
 8001f86:	46a8      	mov	r8, r5
 8001f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8a:	003d      	movs	r5, r7
 8001f8c:	4335      	orrs	r5, r6
 8001f8e:	d1f7      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f90:	42a2      	cmp	r2, r4
 8001f92:	d1f5      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f94:	4652      	mov	r2, sl
 8001f96:	4665      	mov	r5, ip
 8001f98:	432a      	orrs	r2, r5
 8001f9a:	d1f1      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	45c8      	cmp	r8, r9
 8001fa0:	d1ee      	bne.n	8001f80 <__eqdf2+0x3c>
 8001fa2:	4299      	cmp	r1, r3
 8001fa4:	d006      	beq.n	8001fb4 <__eqdf2+0x70>
 8001fa6:	2c00      	cmp	r4, #0
 8001fa8:	d1ea      	bne.n	8001f80 <__eqdf2+0x3c>
 8001faa:	433e      	orrs	r6, r7
 8001fac:	0030      	movs	r0, r6
 8001fae:	1e46      	subs	r6, r0, #1
 8001fb0:	41b0      	sbcs	r0, r6
 8001fb2:	e7e5      	b.n	8001f80 <__eqdf2+0x3c>
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	e7e3      	b.n	8001f80 <__eqdf2+0x3c>
 8001fb8:	000007ff 	.word	0x000007ff

08001fbc <__gedf2>:
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	464e      	mov	r6, r9
 8001fc0:	4645      	mov	r5, r8
 8001fc2:	4657      	mov	r7, sl
 8001fc4:	46de      	mov	lr, fp
 8001fc6:	0004      	movs	r4, r0
 8001fc8:	0018      	movs	r0, r3
 8001fca:	b5e0      	push	{r5, r6, r7, lr}
 8001fcc:	0016      	movs	r6, r2
 8001fce:	031b      	lsls	r3, r3, #12
 8001fd0:	0b1b      	lsrs	r3, r3, #12
 8001fd2:	4d32      	ldr	r5, [pc, #200]	; (800209c <__gedf2+0xe0>)
 8001fd4:	030f      	lsls	r7, r1, #12
 8001fd6:	004a      	lsls	r2, r1, #1
 8001fd8:	4699      	mov	r9, r3
 8001fda:	0043      	lsls	r3, r0, #1
 8001fdc:	46a4      	mov	ip, r4
 8001fde:	46b0      	mov	r8, r6
 8001fe0:	0b3f      	lsrs	r7, r7, #12
 8001fe2:	0d52      	lsrs	r2, r2, #21
 8001fe4:	0fc9      	lsrs	r1, r1, #31
 8001fe6:	0d5b      	lsrs	r3, r3, #21
 8001fe8:	0fc0      	lsrs	r0, r0, #31
 8001fea:	42aa      	cmp	r2, r5
 8001fec:	d029      	beq.n	8002042 <__gedf2+0x86>
 8001fee:	42ab      	cmp	r3, r5
 8001ff0:	d018      	beq.n	8002024 <__gedf2+0x68>
 8001ff2:	2a00      	cmp	r2, #0
 8001ff4:	d12a      	bne.n	800204c <__gedf2+0x90>
 8001ff6:	433c      	orrs	r4, r7
 8001ff8:	46a3      	mov	fp, r4
 8001ffa:	4265      	negs	r5, r4
 8001ffc:	4165      	adcs	r5, r4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <__gedf2+0x4c>
 8002002:	464c      	mov	r4, r9
 8002004:	4326      	orrs	r6, r4
 8002006:	d027      	beq.n	8002058 <__gedf2+0x9c>
 8002008:	2d00      	cmp	r5, #0
 800200a:	d115      	bne.n	8002038 <__gedf2+0x7c>
 800200c:	4281      	cmp	r1, r0
 800200e:	d028      	beq.n	8002062 <__gedf2+0xa6>
 8002010:	2002      	movs	r0, #2
 8002012:	3901      	subs	r1, #1
 8002014:	4008      	ands	r0, r1
 8002016:	3801      	subs	r0, #1
 8002018:	bcf0      	pop	{r4, r5, r6, r7}
 800201a:	46bb      	mov	fp, r7
 800201c:	46b2      	mov	sl, r6
 800201e:	46a9      	mov	r9, r5
 8002020:	46a0      	mov	r8, r4
 8002022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002024:	464d      	mov	r5, r9
 8002026:	432e      	orrs	r6, r5
 8002028:	d12f      	bne.n	800208a <__gedf2+0xce>
 800202a:	2a00      	cmp	r2, #0
 800202c:	d1ee      	bne.n	800200c <__gedf2+0x50>
 800202e:	433c      	orrs	r4, r7
 8002030:	4265      	negs	r5, r4
 8002032:	4165      	adcs	r5, r4
 8002034:	2d00      	cmp	r5, #0
 8002036:	d0e9      	beq.n	800200c <__gedf2+0x50>
 8002038:	2800      	cmp	r0, #0
 800203a:	d1ed      	bne.n	8002018 <__gedf2+0x5c>
 800203c:	2001      	movs	r0, #1
 800203e:	4240      	negs	r0, r0
 8002040:	e7ea      	b.n	8002018 <__gedf2+0x5c>
 8002042:	003d      	movs	r5, r7
 8002044:	4325      	orrs	r5, r4
 8002046:	d120      	bne.n	800208a <__gedf2+0xce>
 8002048:	4293      	cmp	r3, r2
 800204a:	d0eb      	beq.n	8002024 <__gedf2+0x68>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1dd      	bne.n	800200c <__gedf2+0x50>
 8002050:	464c      	mov	r4, r9
 8002052:	4326      	orrs	r6, r4
 8002054:	d1da      	bne.n	800200c <__gedf2+0x50>
 8002056:	e7db      	b.n	8002010 <__gedf2+0x54>
 8002058:	465b      	mov	r3, fp
 800205a:	2000      	movs	r0, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0db      	beq.n	8002018 <__gedf2+0x5c>
 8002060:	e7d6      	b.n	8002010 <__gedf2+0x54>
 8002062:	429a      	cmp	r2, r3
 8002064:	dc0a      	bgt.n	800207c <__gedf2+0xc0>
 8002066:	dbe7      	blt.n	8002038 <__gedf2+0x7c>
 8002068:	454f      	cmp	r7, r9
 800206a:	d8d1      	bhi.n	8002010 <__gedf2+0x54>
 800206c:	d010      	beq.n	8002090 <__gedf2+0xd4>
 800206e:	2000      	movs	r0, #0
 8002070:	454f      	cmp	r7, r9
 8002072:	d2d1      	bcs.n	8002018 <__gedf2+0x5c>
 8002074:	2900      	cmp	r1, #0
 8002076:	d0e1      	beq.n	800203c <__gedf2+0x80>
 8002078:	0008      	movs	r0, r1
 800207a:	e7cd      	b.n	8002018 <__gedf2+0x5c>
 800207c:	4243      	negs	r3, r0
 800207e:	4158      	adcs	r0, r3
 8002080:	2302      	movs	r3, #2
 8002082:	4240      	negs	r0, r0
 8002084:	4018      	ands	r0, r3
 8002086:	3801      	subs	r0, #1
 8002088:	e7c6      	b.n	8002018 <__gedf2+0x5c>
 800208a:	2002      	movs	r0, #2
 800208c:	4240      	negs	r0, r0
 800208e:	e7c3      	b.n	8002018 <__gedf2+0x5c>
 8002090:	45c4      	cmp	ip, r8
 8002092:	d8bd      	bhi.n	8002010 <__gedf2+0x54>
 8002094:	2000      	movs	r0, #0
 8002096:	45c4      	cmp	ip, r8
 8002098:	d2be      	bcs.n	8002018 <__gedf2+0x5c>
 800209a:	e7eb      	b.n	8002074 <__gedf2+0xb8>
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__ledf2>:
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	464e      	mov	r6, r9
 80020a4:	4645      	mov	r5, r8
 80020a6:	4657      	mov	r7, sl
 80020a8:	46de      	mov	lr, fp
 80020aa:	0004      	movs	r4, r0
 80020ac:	0018      	movs	r0, r3
 80020ae:	b5e0      	push	{r5, r6, r7, lr}
 80020b0:	0016      	movs	r6, r2
 80020b2:	031b      	lsls	r3, r3, #12
 80020b4:	0b1b      	lsrs	r3, r3, #12
 80020b6:	4d31      	ldr	r5, [pc, #196]	; (800217c <__ledf2+0xdc>)
 80020b8:	030f      	lsls	r7, r1, #12
 80020ba:	004a      	lsls	r2, r1, #1
 80020bc:	4699      	mov	r9, r3
 80020be:	0043      	lsls	r3, r0, #1
 80020c0:	46a4      	mov	ip, r4
 80020c2:	46b0      	mov	r8, r6
 80020c4:	0b3f      	lsrs	r7, r7, #12
 80020c6:	0d52      	lsrs	r2, r2, #21
 80020c8:	0fc9      	lsrs	r1, r1, #31
 80020ca:	0d5b      	lsrs	r3, r3, #21
 80020cc:	0fc0      	lsrs	r0, r0, #31
 80020ce:	42aa      	cmp	r2, r5
 80020d0:	d011      	beq.n	80020f6 <__ledf2+0x56>
 80020d2:	42ab      	cmp	r3, r5
 80020d4:	d014      	beq.n	8002100 <__ledf2+0x60>
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	d12f      	bne.n	800213a <__ledf2+0x9a>
 80020da:	433c      	orrs	r4, r7
 80020dc:	46a3      	mov	fp, r4
 80020de:	4265      	negs	r5, r4
 80020e0:	4165      	adcs	r5, r4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d114      	bne.n	8002110 <__ledf2+0x70>
 80020e6:	464c      	mov	r4, r9
 80020e8:	4326      	orrs	r6, r4
 80020ea:	d111      	bne.n	8002110 <__ledf2+0x70>
 80020ec:	465b      	mov	r3, fp
 80020ee:	2000      	movs	r0, #0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d017      	beq.n	8002124 <__ledf2+0x84>
 80020f4:	e010      	b.n	8002118 <__ledf2+0x78>
 80020f6:	003d      	movs	r5, r7
 80020f8:	4325      	orrs	r5, r4
 80020fa:	d112      	bne.n	8002122 <__ledf2+0x82>
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d11c      	bne.n	800213a <__ledf2+0x9a>
 8002100:	464d      	mov	r5, r9
 8002102:	432e      	orrs	r6, r5
 8002104:	d10d      	bne.n	8002122 <__ledf2+0x82>
 8002106:	2a00      	cmp	r2, #0
 8002108:	d104      	bne.n	8002114 <__ledf2+0x74>
 800210a:	433c      	orrs	r4, r7
 800210c:	4265      	negs	r5, r4
 800210e:	4165      	adcs	r5, r4
 8002110:	2d00      	cmp	r5, #0
 8002112:	d10d      	bne.n	8002130 <__ledf2+0x90>
 8002114:	4281      	cmp	r1, r0
 8002116:	d016      	beq.n	8002146 <__ledf2+0xa6>
 8002118:	2002      	movs	r0, #2
 800211a:	3901      	subs	r1, #1
 800211c:	4008      	ands	r0, r1
 800211e:	3801      	subs	r0, #1
 8002120:	e000      	b.n	8002124 <__ledf2+0x84>
 8002122:	2002      	movs	r0, #2
 8002124:	bcf0      	pop	{r4, r5, r6, r7}
 8002126:	46bb      	mov	fp, r7
 8002128:	46b2      	mov	sl, r6
 800212a:	46a9      	mov	r9, r5
 800212c:	46a0      	mov	r8, r4
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002130:	2800      	cmp	r0, #0
 8002132:	d1f7      	bne.n	8002124 <__ledf2+0x84>
 8002134:	2001      	movs	r0, #1
 8002136:	4240      	negs	r0, r0
 8002138:	e7f4      	b.n	8002124 <__ledf2+0x84>
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ea      	bne.n	8002114 <__ledf2+0x74>
 800213e:	464c      	mov	r4, r9
 8002140:	4326      	orrs	r6, r4
 8002142:	d1e7      	bne.n	8002114 <__ledf2+0x74>
 8002144:	e7e8      	b.n	8002118 <__ledf2+0x78>
 8002146:	429a      	cmp	r2, r3
 8002148:	dd06      	ble.n	8002158 <__ledf2+0xb8>
 800214a:	4243      	negs	r3, r0
 800214c:	4158      	adcs	r0, r3
 800214e:	2302      	movs	r3, #2
 8002150:	4240      	negs	r0, r0
 8002152:	4018      	ands	r0, r3
 8002154:	3801      	subs	r0, #1
 8002156:	e7e5      	b.n	8002124 <__ledf2+0x84>
 8002158:	429a      	cmp	r2, r3
 800215a:	dbe9      	blt.n	8002130 <__ledf2+0x90>
 800215c:	454f      	cmp	r7, r9
 800215e:	d8db      	bhi.n	8002118 <__ledf2+0x78>
 8002160:	d006      	beq.n	8002170 <__ledf2+0xd0>
 8002162:	2000      	movs	r0, #0
 8002164:	454f      	cmp	r7, r9
 8002166:	d2dd      	bcs.n	8002124 <__ledf2+0x84>
 8002168:	2900      	cmp	r1, #0
 800216a:	d0e3      	beq.n	8002134 <__ledf2+0x94>
 800216c:	0008      	movs	r0, r1
 800216e:	e7d9      	b.n	8002124 <__ledf2+0x84>
 8002170:	45c4      	cmp	ip, r8
 8002172:	d8d1      	bhi.n	8002118 <__ledf2+0x78>
 8002174:	2000      	movs	r0, #0
 8002176:	45c4      	cmp	ip, r8
 8002178:	d2d4      	bcs.n	8002124 <__ledf2+0x84>
 800217a:	e7f5      	b.n	8002168 <__ledf2+0xc8>
 800217c:	000007ff 	.word	0x000007ff

08002180 <__aeabi_dmul>:
 8002180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002182:	4657      	mov	r7, sl
 8002184:	464e      	mov	r6, r9
 8002186:	4645      	mov	r5, r8
 8002188:	46de      	mov	lr, fp
 800218a:	b5e0      	push	{r5, r6, r7, lr}
 800218c:	4698      	mov	r8, r3
 800218e:	030c      	lsls	r4, r1, #12
 8002190:	004b      	lsls	r3, r1, #1
 8002192:	0006      	movs	r6, r0
 8002194:	4692      	mov	sl, r2
 8002196:	b087      	sub	sp, #28
 8002198:	0b24      	lsrs	r4, r4, #12
 800219a:	0d5b      	lsrs	r3, r3, #21
 800219c:	0fcf      	lsrs	r7, r1, #31
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d06c      	beq.n	800227c <__aeabi_dmul+0xfc>
 80021a2:	4add      	ldr	r2, [pc, #884]	; (8002518 <__aeabi_dmul+0x398>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d100      	bne.n	80021aa <__aeabi_dmul+0x2a>
 80021a8:	e086      	b.n	80022b8 <__aeabi_dmul+0x138>
 80021aa:	0f42      	lsrs	r2, r0, #29
 80021ac:	00e4      	lsls	r4, r4, #3
 80021ae:	4314      	orrs	r4, r2
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	0412      	lsls	r2, r2, #16
 80021b4:	4314      	orrs	r4, r2
 80021b6:	4ad9      	ldr	r2, [pc, #868]	; (800251c <__aeabi_dmul+0x39c>)
 80021b8:	00c5      	lsls	r5, r0, #3
 80021ba:	4694      	mov	ip, r2
 80021bc:	4463      	add	r3, ip
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2300      	movs	r3, #0
 80021c2:	4699      	mov	r9, r3
 80021c4:	469b      	mov	fp, r3
 80021c6:	4643      	mov	r3, r8
 80021c8:	4642      	mov	r2, r8
 80021ca:	031e      	lsls	r6, r3, #12
 80021cc:	0fd2      	lsrs	r2, r2, #31
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4650      	mov	r0, sl
 80021d2:	4690      	mov	r8, r2
 80021d4:	0b36      	lsrs	r6, r6, #12
 80021d6:	0d5b      	lsrs	r3, r3, #21
 80021d8:	d100      	bne.n	80021dc <__aeabi_dmul+0x5c>
 80021da:	e078      	b.n	80022ce <__aeabi_dmul+0x14e>
 80021dc:	4ace      	ldr	r2, [pc, #824]	; (8002518 <__aeabi_dmul+0x398>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01d      	beq.n	800221e <__aeabi_dmul+0x9e>
 80021e2:	49ce      	ldr	r1, [pc, #824]	; (800251c <__aeabi_dmul+0x39c>)
 80021e4:	0f42      	lsrs	r2, r0, #29
 80021e6:	468c      	mov	ip, r1
 80021e8:	9900      	ldr	r1, [sp, #0]
 80021ea:	4463      	add	r3, ip
 80021ec:	00f6      	lsls	r6, r6, #3
 80021ee:	468c      	mov	ip, r1
 80021f0:	4316      	orrs	r6, r2
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	449c      	add	ip, r3
 80021f6:	0412      	lsls	r2, r2, #16
 80021f8:	4663      	mov	r3, ip
 80021fa:	4316      	orrs	r6, r2
 80021fc:	00c2      	lsls	r2, r0, #3
 80021fe:	2000      	movs	r0, #0
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	9900      	ldr	r1, [sp, #0]
 8002204:	4643      	mov	r3, r8
 8002206:	3101      	adds	r1, #1
 8002208:	468c      	mov	ip, r1
 800220a:	4649      	mov	r1, r9
 800220c:	407b      	eors	r3, r7
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	290f      	cmp	r1, #15
 8002212:	d900      	bls.n	8002216 <__aeabi_dmul+0x96>
 8002214:	e07e      	b.n	8002314 <__aeabi_dmul+0x194>
 8002216:	4bc2      	ldr	r3, [pc, #776]	; (8002520 <__aeabi_dmul+0x3a0>)
 8002218:	0089      	lsls	r1, r1, #2
 800221a:	5859      	ldr	r1, [r3, r1]
 800221c:	468f      	mov	pc, r1
 800221e:	4652      	mov	r2, sl
 8002220:	9b00      	ldr	r3, [sp, #0]
 8002222:	4332      	orrs	r2, r6
 8002224:	d000      	beq.n	8002228 <__aeabi_dmul+0xa8>
 8002226:	e156      	b.n	80024d6 <__aeabi_dmul+0x356>
 8002228:	49bb      	ldr	r1, [pc, #748]	; (8002518 <__aeabi_dmul+0x398>)
 800222a:	2600      	movs	r6, #0
 800222c:	468c      	mov	ip, r1
 800222e:	4463      	add	r3, ip
 8002230:	4649      	mov	r1, r9
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2302      	movs	r3, #2
 8002236:	4319      	orrs	r1, r3
 8002238:	4689      	mov	r9, r1
 800223a:	2002      	movs	r0, #2
 800223c:	e7e1      	b.n	8002202 <__aeabi_dmul+0x82>
 800223e:	4643      	mov	r3, r8
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	0034      	movs	r4, r6
 8002244:	0015      	movs	r5, r2
 8002246:	4683      	mov	fp, r0
 8002248:	465b      	mov	r3, fp
 800224a:	2b02      	cmp	r3, #2
 800224c:	d05e      	beq.n	800230c <__aeabi_dmul+0x18c>
 800224e:	2b03      	cmp	r3, #3
 8002250:	d100      	bne.n	8002254 <__aeabi_dmul+0xd4>
 8002252:	e1f3      	b.n	800263c <__aeabi_dmul+0x4bc>
 8002254:	2b01      	cmp	r3, #1
 8002256:	d000      	beq.n	800225a <__aeabi_dmul+0xda>
 8002258:	e118      	b.n	800248c <__aeabi_dmul+0x30c>
 800225a:	2200      	movs	r2, #0
 800225c:	2400      	movs	r4, #0
 800225e:	2500      	movs	r5, #0
 8002260:	9b01      	ldr	r3, [sp, #4]
 8002262:	0512      	lsls	r2, r2, #20
 8002264:	4322      	orrs	r2, r4
 8002266:	07db      	lsls	r3, r3, #31
 8002268:	431a      	orrs	r2, r3
 800226a:	0028      	movs	r0, r5
 800226c:	0011      	movs	r1, r2
 800226e:	b007      	add	sp, #28
 8002270:	bcf0      	pop	{r4, r5, r6, r7}
 8002272:	46bb      	mov	fp, r7
 8002274:	46b2      	mov	sl, r6
 8002276:	46a9      	mov	r9, r5
 8002278:	46a0      	mov	r8, r4
 800227a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800227c:	0025      	movs	r5, r4
 800227e:	4305      	orrs	r5, r0
 8002280:	d100      	bne.n	8002284 <__aeabi_dmul+0x104>
 8002282:	e141      	b.n	8002508 <__aeabi_dmul+0x388>
 8002284:	2c00      	cmp	r4, #0
 8002286:	d100      	bne.n	800228a <__aeabi_dmul+0x10a>
 8002288:	e1ad      	b.n	80025e6 <__aeabi_dmul+0x466>
 800228a:	0020      	movs	r0, r4
 800228c:	f000 fef0 	bl	8003070 <__clzsi2>
 8002290:	0001      	movs	r1, r0
 8002292:	0002      	movs	r2, r0
 8002294:	390b      	subs	r1, #11
 8002296:	231d      	movs	r3, #29
 8002298:	0010      	movs	r0, r2
 800229a:	1a5b      	subs	r3, r3, r1
 800229c:	0031      	movs	r1, r6
 800229e:	0035      	movs	r5, r6
 80022a0:	3808      	subs	r0, #8
 80022a2:	4084      	lsls	r4, r0
 80022a4:	40d9      	lsrs	r1, r3
 80022a6:	4085      	lsls	r5, r0
 80022a8:	430c      	orrs	r4, r1
 80022aa:	489e      	ldr	r0, [pc, #632]	; (8002524 <__aeabi_dmul+0x3a4>)
 80022ac:	1a83      	subs	r3, r0, r2
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2300      	movs	r3, #0
 80022b2:	4699      	mov	r9, r3
 80022b4:	469b      	mov	fp, r3
 80022b6:	e786      	b.n	80021c6 <__aeabi_dmul+0x46>
 80022b8:	0005      	movs	r5, r0
 80022ba:	4325      	orrs	r5, r4
 80022bc:	d000      	beq.n	80022c0 <__aeabi_dmul+0x140>
 80022be:	e11c      	b.n	80024fa <__aeabi_dmul+0x37a>
 80022c0:	2208      	movs	r2, #8
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2302      	movs	r3, #2
 80022c6:	2400      	movs	r4, #0
 80022c8:	4691      	mov	r9, r2
 80022ca:	469b      	mov	fp, r3
 80022cc:	e77b      	b.n	80021c6 <__aeabi_dmul+0x46>
 80022ce:	4652      	mov	r2, sl
 80022d0:	4332      	orrs	r2, r6
 80022d2:	d100      	bne.n	80022d6 <__aeabi_dmul+0x156>
 80022d4:	e10a      	b.n	80024ec <__aeabi_dmul+0x36c>
 80022d6:	2e00      	cmp	r6, #0
 80022d8:	d100      	bne.n	80022dc <__aeabi_dmul+0x15c>
 80022da:	e176      	b.n	80025ca <__aeabi_dmul+0x44a>
 80022dc:	0030      	movs	r0, r6
 80022de:	f000 fec7 	bl	8003070 <__clzsi2>
 80022e2:	0002      	movs	r2, r0
 80022e4:	3a0b      	subs	r2, #11
 80022e6:	231d      	movs	r3, #29
 80022e8:	0001      	movs	r1, r0
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	4652      	mov	r2, sl
 80022ee:	3908      	subs	r1, #8
 80022f0:	40da      	lsrs	r2, r3
 80022f2:	408e      	lsls	r6, r1
 80022f4:	4316      	orrs	r6, r2
 80022f6:	4652      	mov	r2, sl
 80022f8:	408a      	lsls	r2, r1
 80022fa:	9b00      	ldr	r3, [sp, #0]
 80022fc:	4989      	ldr	r1, [pc, #548]	; (8002524 <__aeabi_dmul+0x3a4>)
 80022fe:	1a18      	subs	r0, r3, r0
 8002300:	0003      	movs	r3, r0
 8002302:	468c      	mov	ip, r1
 8002304:	4463      	add	r3, ip
 8002306:	2000      	movs	r0, #0
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	e77a      	b.n	8002202 <__aeabi_dmul+0x82>
 800230c:	2400      	movs	r4, #0
 800230e:	2500      	movs	r5, #0
 8002310:	4a81      	ldr	r2, [pc, #516]	; (8002518 <__aeabi_dmul+0x398>)
 8002312:	e7a5      	b.n	8002260 <__aeabi_dmul+0xe0>
 8002314:	0c2f      	lsrs	r7, r5, #16
 8002316:	042d      	lsls	r5, r5, #16
 8002318:	0c2d      	lsrs	r5, r5, #16
 800231a:	002b      	movs	r3, r5
 800231c:	0c11      	lsrs	r1, r2, #16
 800231e:	0412      	lsls	r2, r2, #16
 8002320:	0c12      	lsrs	r2, r2, #16
 8002322:	4353      	muls	r3, r2
 8002324:	4698      	mov	r8, r3
 8002326:	0013      	movs	r3, r2
 8002328:	0028      	movs	r0, r5
 800232a:	437b      	muls	r3, r7
 800232c:	4699      	mov	r9, r3
 800232e:	4348      	muls	r0, r1
 8002330:	4448      	add	r0, r9
 8002332:	4683      	mov	fp, r0
 8002334:	4640      	mov	r0, r8
 8002336:	000b      	movs	r3, r1
 8002338:	0c00      	lsrs	r0, r0, #16
 800233a:	4682      	mov	sl, r0
 800233c:	4658      	mov	r0, fp
 800233e:	437b      	muls	r3, r7
 8002340:	4450      	add	r0, sl
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	4581      	cmp	r9, r0
 8002346:	d906      	bls.n	8002356 <__aeabi_dmul+0x1d6>
 8002348:	469a      	mov	sl, r3
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	025b      	lsls	r3, r3, #9
 800234e:	4699      	mov	r9, r3
 8002350:	44ca      	add	sl, r9
 8002352:	4653      	mov	r3, sl
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	0c03      	lsrs	r3, r0, #16
 8002358:	469b      	mov	fp, r3
 800235a:	4643      	mov	r3, r8
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	0400      	lsls	r0, r0, #16
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	4698      	mov	r8, r3
 8002364:	0003      	movs	r3, r0
 8002366:	4443      	add	r3, r8
 8002368:	9304      	str	r3, [sp, #16]
 800236a:	0c33      	lsrs	r3, r6, #16
 800236c:	4699      	mov	r9, r3
 800236e:	002b      	movs	r3, r5
 8002370:	0436      	lsls	r6, r6, #16
 8002372:	0c36      	lsrs	r6, r6, #16
 8002374:	4373      	muls	r3, r6
 8002376:	4698      	mov	r8, r3
 8002378:	0033      	movs	r3, r6
 800237a:	437b      	muls	r3, r7
 800237c:	469a      	mov	sl, r3
 800237e:	464b      	mov	r3, r9
 8002380:	435d      	muls	r5, r3
 8002382:	435f      	muls	r7, r3
 8002384:	4643      	mov	r3, r8
 8002386:	4455      	add	r5, sl
 8002388:	0c18      	lsrs	r0, r3, #16
 800238a:	1940      	adds	r0, r0, r5
 800238c:	4582      	cmp	sl, r0
 800238e:	d903      	bls.n	8002398 <__aeabi_dmul+0x218>
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	469a      	mov	sl, r3
 8002396:	4457      	add	r7, sl
 8002398:	0c05      	lsrs	r5, r0, #16
 800239a:	19eb      	adds	r3, r5, r7
 800239c:	9305      	str	r3, [sp, #20]
 800239e:	4643      	mov	r3, r8
 80023a0:	041d      	lsls	r5, r3, #16
 80023a2:	0c2d      	lsrs	r5, r5, #16
 80023a4:	0400      	lsls	r0, r0, #16
 80023a6:	1940      	adds	r0, r0, r5
 80023a8:	0c25      	lsrs	r5, r4, #16
 80023aa:	0424      	lsls	r4, r4, #16
 80023ac:	0c24      	lsrs	r4, r4, #16
 80023ae:	0027      	movs	r7, r4
 80023b0:	4357      	muls	r7, r2
 80023b2:	436a      	muls	r2, r5
 80023b4:	4690      	mov	r8, r2
 80023b6:	002a      	movs	r2, r5
 80023b8:	0c3b      	lsrs	r3, r7, #16
 80023ba:	469a      	mov	sl, r3
 80023bc:	434a      	muls	r2, r1
 80023be:	4361      	muls	r1, r4
 80023c0:	4441      	add	r1, r8
 80023c2:	4451      	add	r1, sl
 80023c4:	4483      	add	fp, r0
 80023c6:	4588      	cmp	r8, r1
 80023c8:	d903      	bls.n	80023d2 <__aeabi_dmul+0x252>
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	4698      	mov	r8, r3
 80023d0:	4442      	add	r2, r8
 80023d2:	043f      	lsls	r7, r7, #16
 80023d4:	0c0b      	lsrs	r3, r1, #16
 80023d6:	0c3f      	lsrs	r7, r7, #16
 80023d8:	0409      	lsls	r1, r1, #16
 80023da:	19c9      	adds	r1, r1, r7
 80023dc:	0027      	movs	r7, r4
 80023de:	4698      	mov	r8, r3
 80023e0:	464b      	mov	r3, r9
 80023e2:	4377      	muls	r7, r6
 80023e4:	435c      	muls	r4, r3
 80023e6:	436e      	muls	r6, r5
 80023e8:	435d      	muls	r5, r3
 80023ea:	0c3b      	lsrs	r3, r7, #16
 80023ec:	4699      	mov	r9, r3
 80023ee:	19a4      	adds	r4, r4, r6
 80023f0:	444c      	add	r4, r9
 80023f2:	4442      	add	r2, r8
 80023f4:	9503      	str	r5, [sp, #12]
 80023f6:	42a6      	cmp	r6, r4
 80023f8:	d904      	bls.n	8002404 <__aeabi_dmul+0x284>
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	025b      	lsls	r3, r3, #9
 80023fe:	4698      	mov	r8, r3
 8002400:	4445      	add	r5, r8
 8002402:	9503      	str	r5, [sp, #12]
 8002404:	9b02      	ldr	r3, [sp, #8]
 8002406:	043f      	lsls	r7, r7, #16
 8002408:	445b      	add	r3, fp
 800240a:	001e      	movs	r6, r3
 800240c:	4283      	cmp	r3, r0
 800240e:	4180      	sbcs	r0, r0
 8002410:	0423      	lsls	r3, r4, #16
 8002412:	4698      	mov	r8, r3
 8002414:	9b05      	ldr	r3, [sp, #20]
 8002416:	0c3f      	lsrs	r7, r7, #16
 8002418:	4447      	add	r7, r8
 800241a:	4698      	mov	r8, r3
 800241c:	1876      	adds	r6, r6, r1
 800241e:	428e      	cmp	r6, r1
 8002420:	4189      	sbcs	r1, r1
 8002422:	4447      	add	r7, r8
 8002424:	4240      	negs	r0, r0
 8002426:	183d      	adds	r5, r7, r0
 8002428:	46a8      	mov	r8, r5
 800242a:	4693      	mov	fp, r2
 800242c:	4249      	negs	r1, r1
 800242e:	468a      	mov	sl, r1
 8002430:	44c3      	add	fp, r8
 8002432:	429f      	cmp	r7, r3
 8002434:	41bf      	sbcs	r7, r7
 8002436:	4580      	cmp	r8, r0
 8002438:	4180      	sbcs	r0, r0
 800243a:	9b03      	ldr	r3, [sp, #12]
 800243c:	44da      	add	sl, fp
 800243e:	4698      	mov	r8, r3
 8002440:	4653      	mov	r3, sl
 8002442:	4240      	negs	r0, r0
 8002444:	427f      	negs	r7, r7
 8002446:	4307      	orrs	r7, r0
 8002448:	0c24      	lsrs	r4, r4, #16
 800244a:	4593      	cmp	fp, r2
 800244c:	4192      	sbcs	r2, r2
 800244e:	458a      	cmp	sl, r1
 8002450:	4189      	sbcs	r1, r1
 8002452:	193f      	adds	r7, r7, r4
 8002454:	0ddc      	lsrs	r4, r3, #23
 8002456:	9b04      	ldr	r3, [sp, #16]
 8002458:	0275      	lsls	r5, r6, #9
 800245a:	431d      	orrs	r5, r3
 800245c:	1e68      	subs	r0, r5, #1
 800245e:	4185      	sbcs	r5, r0
 8002460:	4653      	mov	r3, sl
 8002462:	4252      	negs	r2, r2
 8002464:	4249      	negs	r1, r1
 8002466:	430a      	orrs	r2, r1
 8002468:	18bf      	adds	r7, r7, r2
 800246a:	4447      	add	r7, r8
 800246c:	0df6      	lsrs	r6, r6, #23
 800246e:	027f      	lsls	r7, r7, #9
 8002470:	4335      	orrs	r5, r6
 8002472:	025a      	lsls	r2, r3, #9
 8002474:	433c      	orrs	r4, r7
 8002476:	4315      	orrs	r5, r2
 8002478:	01fb      	lsls	r3, r7, #7
 800247a:	d400      	bmi.n	800247e <__aeabi_dmul+0x2fe>
 800247c:	e0c1      	b.n	8002602 <__aeabi_dmul+0x482>
 800247e:	2101      	movs	r1, #1
 8002480:	086a      	lsrs	r2, r5, #1
 8002482:	400d      	ands	r5, r1
 8002484:	4315      	orrs	r5, r2
 8002486:	07e2      	lsls	r2, r4, #31
 8002488:	4315      	orrs	r5, r2
 800248a:	0864      	lsrs	r4, r4, #1
 800248c:	4926      	ldr	r1, [pc, #152]	; (8002528 <__aeabi_dmul+0x3a8>)
 800248e:	4461      	add	r1, ip
 8002490:	2900      	cmp	r1, #0
 8002492:	dd56      	ble.n	8002542 <__aeabi_dmul+0x3c2>
 8002494:	076b      	lsls	r3, r5, #29
 8002496:	d009      	beq.n	80024ac <__aeabi_dmul+0x32c>
 8002498:	220f      	movs	r2, #15
 800249a:	402a      	ands	r2, r5
 800249c:	2a04      	cmp	r2, #4
 800249e:	d005      	beq.n	80024ac <__aeabi_dmul+0x32c>
 80024a0:	1d2a      	adds	r2, r5, #4
 80024a2:	42aa      	cmp	r2, r5
 80024a4:	41ad      	sbcs	r5, r5
 80024a6:	426d      	negs	r5, r5
 80024a8:	1964      	adds	r4, r4, r5
 80024aa:	0015      	movs	r5, r2
 80024ac:	01e3      	lsls	r3, r4, #7
 80024ae:	d504      	bpl.n	80024ba <__aeabi_dmul+0x33a>
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	4a1e      	ldr	r2, [pc, #120]	; (800252c <__aeabi_dmul+0x3ac>)
 80024b4:	00c9      	lsls	r1, r1, #3
 80024b6:	4014      	ands	r4, r2
 80024b8:	4461      	add	r1, ip
 80024ba:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <__aeabi_dmul+0x3b0>)
 80024bc:	4291      	cmp	r1, r2
 80024be:	dd00      	ble.n	80024c2 <__aeabi_dmul+0x342>
 80024c0:	e724      	b.n	800230c <__aeabi_dmul+0x18c>
 80024c2:	0762      	lsls	r2, r4, #29
 80024c4:	08ed      	lsrs	r5, r5, #3
 80024c6:	0264      	lsls	r4, r4, #9
 80024c8:	0549      	lsls	r1, r1, #21
 80024ca:	4315      	orrs	r5, r2
 80024cc:	0b24      	lsrs	r4, r4, #12
 80024ce:	0d4a      	lsrs	r2, r1, #21
 80024d0:	e6c6      	b.n	8002260 <__aeabi_dmul+0xe0>
 80024d2:	9701      	str	r7, [sp, #4]
 80024d4:	e6b8      	b.n	8002248 <__aeabi_dmul+0xc8>
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <__aeabi_dmul+0x398>)
 80024d8:	2003      	movs	r0, #3
 80024da:	4694      	mov	ip, r2
 80024dc:	4463      	add	r3, ip
 80024de:	464a      	mov	r2, r9
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2303      	movs	r3, #3
 80024e4:	431a      	orrs	r2, r3
 80024e6:	4691      	mov	r9, r2
 80024e8:	4652      	mov	r2, sl
 80024ea:	e68a      	b.n	8002202 <__aeabi_dmul+0x82>
 80024ec:	4649      	mov	r1, r9
 80024ee:	2301      	movs	r3, #1
 80024f0:	4319      	orrs	r1, r3
 80024f2:	4689      	mov	r9, r1
 80024f4:	2600      	movs	r6, #0
 80024f6:	2001      	movs	r0, #1
 80024f8:	e683      	b.n	8002202 <__aeabi_dmul+0x82>
 80024fa:	220c      	movs	r2, #12
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2303      	movs	r3, #3
 8002500:	0005      	movs	r5, r0
 8002502:	4691      	mov	r9, r2
 8002504:	469b      	mov	fp, r3
 8002506:	e65e      	b.n	80021c6 <__aeabi_dmul+0x46>
 8002508:	2304      	movs	r3, #4
 800250a:	4699      	mov	r9, r3
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	2400      	movs	r4, #0
 8002514:	469b      	mov	fp, r3
 8002516:	e656      	b.n	80021c6 <__aeabi_dmul+0x46>
 8002518:	000007ff 	.word	0x000007ff
 800251c:	fffffc01 	.word	0xfffffc01
 8002520:	08011f84 	.word	0x08011f84
 8002524:	fffffc0d 	.word	0xfffffc0d
 8002528:	000003ff 	.word	0x000003ff
 800252c:	feffffff 	.word	0xfeffffff
 8002530:	000007fe 	.word	0x000007fe
 8002534:	2300      	movs	r3, #0
 8002536:	2480      	movs	r4, #128	; 0x80
 8002538:	2500      	movs	r5, #0
 800253a:	4a44      	ldr	r2, [pc, #272]	; (800264c <__aeabi_dmul+0x4cc>)
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	0324      	lsls	r4, r4, #12
 8002540:	e68e      	b.n	8002260 <__aeabi_dmul+0xe0>
 8002542:	2001      	movs	r0, #1
 8002544:	1a40      	subs	r0, r0, r1
 8002546:	2838      	cmp	r0, #56	; 0x38
 8002548:	dd00      	ble.n	800254c <__aeabi_dmul+0x3cc>
 800254a:	e686      	b.n	800225a <__aeabi_dmul+0xda>
 800254c:	281f      	cmp	r0, #31
 800254e:	dd5b      	ble.n	8002608 <__aeabi_dmul+0x488>
 8002550:	221f      	movs	r2, #31
 8002552:	0023      	movs	r3, r4
 8002554:	4252      	negs	r2, r2
 8002556:	1a51      	subs	r1, r2, r1
 8002558:	40cb      	lsrs	r3, r1
 800255a:	0019      	movs	r1, r3
 800255c:	2820      	cmp	r0, #32
 800255e:	d003      	beq.n	8002568 <__aeabi_dmul+0x3e8>
 8002560:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <__aeabi_dmul+0x4d0>)
 8002562:	4462      	add	r2, ip
 8002564:	4094      	lsls	r4, r2
 8002566:	4325      	orrs	r5, r4
 8002568:	1e6a      	subs	r2, r5, #1
 800256a:	4195      	sbcs	r5, r2
 800256c:	002a      	movs	r2, r5
 800256e:	430a      	orrs	r2, r1
 8002570:	2107      	movs	r1, #7
 8002572:	000d      	movs	r5, r1
 8002574:	2400      	movs	r4, #0
 8002576:	4015      	ands	r5, r2
 8002578:	4211      	tst	r1, r2
 800257a:	d05b      	beq.n	8002634 <__aeabi_dmul+0x4b4>
 800257c:	210f      	movs	r1, #15
 800257e:	2400      	movs	r4, #0
 8002580:	4011      	ands	r1, r2
 8002582:	2904      	cmp	r1, #4
 8002584:	d053      	beq.n	800262e <__aeabi_dmul+0x4ae>
 8002586:	1d11      	adds	r1, r2, #4
 8002588:	4291      	cmp	r1, r2
 800258a:	4192      	sbcs	r2, r2
 800258c:	4252      	negs	r2, r2
 800258e:	18a4      	adds	r4, r4, r2
 8002590:	000a      	movs	r2, r1
 8002592:	0223      	lsls	r3, r4, #8
 8002594:	d54b      	bpl.n	800262e <__aeabi_dmul+0x4ae>
 8002596:	2201      	movs	r2, #1
 8002598:	2400      	movs	r4, #0
 800259a:	2500      	movs	r5, #0
 800259c:	e660      	b.n	8002260 <__aeabi_dmul+0xe0>
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	031b      	lsls	r3, r3, #12
 80025a2:	421c      	tst	r4, r3
 80025a4:	d009      	beq.n	80025ba <__aeabi_dmul+0x43a>
 80025a6:	421e      	tst	r6, r3
 80025a8:	d107      	bne.n	80025ba <__aeabi_dmul+0x43a>
 80025aa:	4333      	orrs	r3, r6
 80025ac:	031c      	lsls	r4, r3, #12
 80025ae:	4643      	mov	r3, r8
 80025b0:	0015      	movs	r5, r2
 80025b2:	0b24      	lsrs	r4, r4, #12
 80025b4:	4a25      	ldr	r2, [pc, #148]	; (800264c <__aeabi_dmul+0x4cc>)
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	e652      	b.n	8002260 <__aeabi_dmul+0xe0>
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	0312      	lsls	r2, r2, #12
 80025be:	4314      	orrs	r4, r2
 80025c0:	0324      	lsls	r4, r4, #12
 80025c2:	4a22      	ldr	r2, [pc, #136]	; (800264c <__aeabi_dmul+0x4cc>)
 80025c4:	0b24      	lsrs	r4, r4, #12
 80025c6:	9701      	str	r7, [sp, #4]
 80025c8:	e64a      	b.n	8002260 <__aeabi_dmul+0xe0>
 80025ca:	f000 fd51 	bl	8003070 <__clzsi2>
 80025ce:	0003      	movs	r3, r0
 80025d0:	001a      	movs	r2, r3
 80025d2:	3215      	adds	r2, #21
 80025d4:	3020      	adds	r0, #32
 80025d6:	2a1c      	cmp	r2, #28
 80025d8:	dc00      	bgt.n	80025dc <__aeabi_dmul+0x45c>
 80025da:	e684      	b.n	80022e6 <__aeabi_dmul+0x166>
 80025dc:	4656      	mov	r6, sl
 80025de:	3b08      	subs	r3, #8
 80025e0:	2200      	movs	r2, #0
 80025e2:	409e      	lsls	r6, r3
 80025e4:	e689      	b.n	80022fa <__aeabi_dmul+0x17a>
 80025e6:	f000 fd43 	bl	8003070 <__clzsi2>
 80025ea:	0001      	movs	r1, r0
 80025ec:	0002      	movs	r2, r0
 80025ee:	3115      	adds	r1, #21
 80025f0:	3220      	adds	r2, #32
 80025f2:	291c      	cmp	r1, #28
 80025f4:	dc00      	bgt.n	80025f8 <__aeabi_dmul+0x478>
 80025f6:	e64e      	b.n	8002296 <__aeabi_dmul+0x116>
 80025f8:	0034      	movs	r4, r6
 80025fa:	3808      	subs	r0, #8
 80025fc:	2500      	movs	r5, #0
 80025fe:	4084      	lsls	r4, r0
 8002600:	e653      	b.n	80022aa <__aeabi_dmul+0x12a>
 8002602:	9b00      	ldr	r3, [sp, #0]
 8002604:	469c      	mov	ip, r3
 8002606:	e741      	b.n	800248c <__aeabi_dmul+0x30c>
 8002608:	4912      	ldr	r1, [pc, #72]	; (8002654 <__aeabi_dmul+0x4d4>)
 800260a:	0022      	movs	r2, r4
 800260c:	4461      	add	r1, ip
 800260e:	002e      	movs	r6, r5
 8002610:	408d      	lsls	r5, r1
 8002612:	408a      	lsls	r2, r1
 8002614:	40c6      	lsrs	r6, r0
 8002616:	1e69      	subs	r1, r5, #1
 8002618:	418d      	sbcs	r5, r1
 800261a:	4332      	orrs	r2, r6
 800261c:	432a      	orrs	r2, r5
 800261e:	40c4      	lsrs	r4, r0
 8002620:	0753      	lsls	r3, r2, #29
 8002622:	d0b6      	beq.n	8002592 <__aeabi_dmul+0x412>
 8002624:	210f      	movs	r1, #15
 8002626:	4011      	ands	r1, r2
 8002628:	2904      	cmp	r1, #4
 800262a:	d1ac      	bne.n	8002586 <__aeabi_dmul+0x406>
 800262c:	e7b1      	b.n	8002592 <__aeabi_dmul+0x412>
 800262e:	0765      	lsls	r5, r4, #29
 8002630:	0264      	lsls	r4, r4, #9
 8002632:	0b24      	lsrs	r4, r4, #12
 8002634:	08d2      	lsrs	r2, r2, #3
 8002636:	4315      	orrs	r5, r2
 8002638:	2200      	movs	r2, #0
 800263a:	e611      	b.n	8002260 <__aeabi_dmul+0xe0>
 800263c:	2280      	movs	r2, #128	; 0x80
 800263e:	0312      	lsls	r2, r2, #12
 8002640:	4314      	orrs	r4, r2
 8002642:	0324      	lsls	r4, r4, #12
 8002644:	4a01      	ldr	r2, [pc, #4]	; (800264c <__aeabi_dmul+0x4cc>)
 8002646:	0b24      	lsrs	r4, r4, #12
 8002648:	e60a      	b.n	8002260 <__aeabi_dmul+0xe0>
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	000007ff 	.word	0x000007ff
 8002650:	0000043e 	.word	0x0000043e
 8002654:	0000041e 	.word	0x0000041e

08002658 <__aeabi_dsub>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	4657      	mov	r7, sl
 800265c:	464e      	mov	r6, r9
 800265e:	4645      	mov	r5, r8
 8002660:	46de      	mov	lr, fp
 8002662:	0004      	movs	r4, r0
 8002664:	b5e0      	push	{r5, r6, r7, lr}
 8002666:	001f      	movs	r7, r3
 8002668:	0010      	movs	r0, r2
 800266a:	030b      	lsls	r3, r1, #12
 800266c:	0f62      	lsrs	r2, r4, #29
 800266e:	004e      	lsls	r6, r1, #1
 8002670:	0fcd      	lsrs	r5, r1, #31
 8002672:	0a5b      	lsrs	r3, r3, #9
 8002674:	0339      	lsls	r1, r7, #12
 8002676:	4313      	orrs	r3, r2
 8002678:	0a49      	lsrs	r1, r1, #9
 800267a:	00e2      	lsls	r2, r4, #3
 800267c:	0f44      	lsrs	r4, r0, #29
 800267e:	4321      	orrs	r1, r4
 8002680:	4cc2      	ldr	r4, [pc, #776]	; (800298c <__aeabi_dsub+0x334>)
 8002682:	4691      	mov	r9, r2
 8002684:	4692      	mov	sl, r2
 8002686:	00c0      	lsls	r0, r0, #3
 8002688:	007a      	lsls	r2, r7, #1
 800268a:	4680      	mov	r8, r0
 800268c:	0d76      	lsrs	r6, r6, #21
 800268e:	0d52      	lsrs	r2, r2, #21
 8002690:	0fff      	lsrs	r7, r7, #31
 8002692:	42a2      	cmp	r2, r4
 8002694:	d100      	bne.n	8002698 <__aeabi_dsub+0x40>
 8002696:	e0b4      	b.n	8002802 <__aeabi_dsub+0x1aa>
 8002698:	2401      	movs	r4, #1
 800269a:	4067      	eors	r7, r4
 800269c:	46bb      	mov	fp, r7
 800269e:	42bd      	cmp	r5, r7
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x4c>
 80026a2:	e088      	b.n	80027b6 <__aeabi_dsub+0x15e>
 80026a4:	1ab4      	subs	r4, r6, r2
 80026a6:	46a4      	mov	ip, r4
 80026a8:	2c00      	cmp	r4, #0
 80026aa:	dc00      	bgt.n	80026ae <__aeabi_dsub+0x56>
 80026ac:	e0b2      	b.n	8002814 <__aeabi_dsub+0x1bc>
 80026ae:	2a00      	cmp	r2, #0
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x5c>
 80026b2:	e0c5      	b.n	8002840 <__aeabi_dsub+0x1e8>
 80026b4:	4ab5      	ldr	r2, [pc, #724]	; (800298c <__aeabi_dsub+0x334>)
 80026b6:	4296      	cmp	r6, r2
 80026b8:	d100      	bne.n	80026bc <__aeabi_dsub+0x64>
 80026ba:	e28b      	b.n	8002bd4 <__aeabi_dsub+0x57c>
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	0412      	lsls	r2, r2, #16
 80026c0:	4311      	orrs	r1, r2
 80026c2:	4662      	mov	r2, ip
 80026c4:	2a38      	cmp	r2, #56	; 0x38
 80026c6:	dd00      	ble.n	80026ca <__aeabi_dsub+0x72>
 80026c8:	e1a1      	b.n	8002a0e <__aeabi_dsub+0x3b6>
 80026ca:	2a1f      	cmp	r2, #31
 80026cc:	dd00      	ble.n	80026d0 <__aeabi_dsub+0x78>
 80026ce:	e216      	b.n	8002afe <__aeabi_dsub+0x4a6>
 80026d0:	2720      	movs	r7, #32
 80026d2:	000c      	movs	r4, r1
 80026d4:	1abf      	subs	r7, r7, r2
 80026d6:	40bc      	lsls	r4, r7
 80026d8:	0002      	movs	r2, r0
 80026da:	46a0      	mov	r8, r4
 80026dc:	4664      	mov	r4, ip
 80026de:	40b8      	lsls	r0, r7
 80026e0:	40e2      	lsrs	r2, r4
 80026e2:	4644      	mov	r4, r8
 80026e4:	4314      	orrs	r4, r2
 80026e6:	0002      	movs	r2, r0
 80026e8:	1e50      	subs	r0, r2, #1
 80026ea:	4182      	sbcs	r2, r0
 80026ec:	4660      	mov	r0, ip
 80026ee:	40c1      	lsrs	r1, r0
 80026f0:	4322      	orrs	r2, r4
 80026f2:	1a5b      	subs	r3, r3, r1
 80026f4:	4649      	mov	r1, r9
 80026f6:	1a8c      	subs	r4, r1, r2
 80026f8:	45a1      	cmp	r9, r4
 80026fa:	4192      	sbcs	r2, r2
 80026fc:	4252      	negs	r2, r2
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	4698      	mov	r8, r3
 8002702:	4643      	mov	r3, r8
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	d400      	bmi.n	800270a <__aeabi_dsub+0xb2>
 8002708:	e117      	b.n	800293a <__aeabi_dsub+0x2e2>
 800270a:	4643      	mov	r3, r8
 800270c:	025b      	lsls	r3, r3, #9
 800270e:	0a5b      	lsrs	r3, r3, #9
 8002710:	4698      	mov	r8, r3
 8002712:	4643      	mov	r3, r8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dsub+0xc2>
 8002718:	e16c      	b.n	80029f4 <__aeabi_dsub+0x39c>
 800271a:	4640      	mov	r0, r8
 800271c:	f000 fca8 	bl	8003070 <__clzsi2>
 8002720:	0002      	movs	r2, r0
 8002722:	3a08      	subs	r2, #8
 8002724:	2120      	movs	r1, #32
 8002726:	0020      	movs	r0, r4
 8002728:	4643      	mov	r3, r8
 800272a:	1a89      	subs	r1, r1, r2
 800272c:	4093      	lsls	r3, r2
 800272e:	40c8      	lsrs	r0, r1
 8002730:	4094      	lsls	r4, r2
 8002732:	4303      	orrs	r3, r0
 8002734:	4296      	cmp	r6, r2
 8002736:	dd00      	ble.n	800273a <__aeabi_dsub+0xe2>
 8002738:	e157      	b.n	80029ea <__aeabi_dsub+0x392>
 800273a:	1b96      	subs	r6, r2, r6
 800273c:	1c71      	adds	r1, r6, #1
 800273e:	291f      	cmp	r1, #31
 8002740:	dd00      	ble.n	8002744 <__aeabi_dsub+0xec>
 8002742:	e1cb      	b.n	8002adc <__aeabi_dsub+0x484>
 8002744:	2220      	movs	r2, #32
 8002746:	0018      	movs	r0, r3
 8002748:	0026      	movs	r6, r4
 800274a:	1a52      	subs	r2, r2, r1
 800274c:	4094      	lsls	r4, r2
 800274e:	4090      	lsls	r0, r2
 8002750:	40ce      	lsrs	r6, r1
 8002752:	40cb      	lsrs	r3, r1
 8002754:	1e62      	subs	r2, r4, #1
 8002756:	4194      	sbcs	r4, r2
 8002758:	4330      	orrs	r0, r6
 800275a:	4698      	mov	r8, r3
 800275c:	2600      	movs	r6, #0
 800275e:	4304      	orrs	r4, r0
 8002760:	0763      	lsls	r3, r4, #29
 8002762:	d009      	beq.n	8002778 <__aeabi_dsub+0x120>
 8002764:	230f      	movs	r3, #15
 8002766:	4023      	ands	r3, r4
 8002768:	2b04      	cmp	r3, #4
 800276a:	d005      	beq.n	8002778 <__aeabi_dsub+0x120>
 800276c:	1d23      	adds	r3, r4, #4
 800276e:	42a3      	cmp	r3, r4
 8002770:	41a4      	sbcs	r4, r4
 8002772:	4264      	negs	r4, r4
 8002774:	44a0      	add	r8, r4
 8002776:	001c      	movs	r4, r3
 8002778:	4643      	mov	r3, r8
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	d400      	bmi.n	8002780 <__aeabi_dsub+0x128>
 800277e:	e0df      	b.n	8002940 <__aeabi_dsub+0x2e8>
 8002780:	4b82      	ldr	r3, [pc, #520]	; (800298c <__aeabi_dsub+0x334>)
 8002782:	3601      	adds	r6, #1
 8002784:	429e      	cmp	r6, r3
 8002786:	d100      	bne.n	800278a <__aeabi_dsub+0x132>
 8002788:	e0fb      	b.n	8002982 <__aeabi_dsub+0x32a>
 800278a:	4642      	mov	r2, r8
 800278c:	4b80      	ldr	r3, [pc, #512]	; (8002990 <__aeabi_dsub+0x338>)
 800278e:	08e4      	lsrs	r4, r4, #3
 8002790:	401a      	ands	r2, r3
 8002792:	0013      	movs	r3, r2
 8002794:	0571      	lsls	r1, r6, #21
 8002796:	0752      	lsls	r2, r2, #29
 8002798:	025b      	lsls	r3, r3, #9
 800279a:	4322      	orrs	r2, r4
 800279c:	0b1b      	lsrs	r3, r3, #12
 800279e:	0d49      	lsrs	r1, r1, #21
 80027a0:	0509      	lsls	r1, r1, #20
 80027a2:	07ed      	lsls	r5, r5, #31
 80027a4:	4319      	orrs	r1, r3
 80027a6:	4329      	orrs	r1, r5
 80027a8:	0010      	movs	r0, r2
 80027aa:	bcf0      	pop	{r4, r5, r6, r7}
 80027ac:	46bb      	mov	fp, r7
 80027ae:	46b2      	mov	sl, r6
 80027b0:	46a9      	mov	r9, r5
 80027b2:	46a0      	mov	r8, r4
 80027b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027b6:	1ab4      	subs	r4, r6, r2
 80027b8:	46a4      	mov	ip, r4
 80027ba:	2c00      	cmp	r4, #0
 80027bc:	dd58      	ble.n	8002870 <__aeabi_dsub+0x218>
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x16c>
 80027c2:	e09e      	b.n	8002902 <__aeabi_dsub+0x2aa>
 80027c4:	4a71      	ldr	r2, [pc, #452]	; (800298c <__aeabi_dsub+0x334>)
 80027c6:	4296      	cmp	r6, r2
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x174>
 80027ca:	e13b      	b.n	8002a44 <__aeabi_dsub+0x3ec>
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	0412      	lsls	r2, r2, #16
 80027d0:	4311      	orrs	r1, r2
 80027d2:	4662      	mov	r2, ip
 80027d4:	2a38      	cmp	r2, #56	; 0x38
 80027d6:	dd00      	ble.n	80027da <__aeabi_dsub+0x182>
 80027d8:	e0c1      	b.n	800295e <__aeabi_dsub+0x306>
 80027da:	2a1f      	cmp	r2, #31
 80027dc:	dc00      	bgt.n	80027e0 <__aeabi_dsub+0x188>
 80027de:	e1bb      	b.n	8002b58 <__aeabi_dsub+0x500>
 80027e0:	000c      	movs	r4, r1
 80027e2:	3a20      	subs	r2, #32
 80027e4:	40d4      	lsrs	r4, r2
 80027e6:	0022      	movs	r2, r4
 80027e8:	4664      	mov	r4, ip
 80027ea:	2c20      	cmp	r4, #32
 80027ec:	d004      	beq.n	80027f8 <__aeabi_dsub+0x1a0>
 80027ee:	2740      	movs	r7, #64	; 0x40
 80027f0:	1b3f      	subs	r7, r7, r4
 80027f2:	40b9      	lsls	r1, r7
 80027f4:	4308      	orrs	r0, r1
 80027f6:	4680      	mov	r8, r0
 80027f8:	4644      	mov	r4, r8
 80027fa:	1e61      	subs	r1, r4, #1
 80027fc:	418c      	sbcs	r4, r1
 80027fe:	4314      	orrs	r4, r2
 8002800:	e0b1      	b.n	8002966 <__aeabi_dsub+0x30e>
 8002802:	000c      	movs	r4, r1
 8002804:	4304      	orrs	r4, r0
 8002806:	d02a      	beq.n	800285e <__aeabi_dsub+0x206>
 8002808:	46bb      	mov	fp, r7
 800280a:	42bd      	cmp	r5, r7
 800280c:	d02d      	beq.n	800286a <__aeabi_dsub+0x212>
 800280e:	4c61      	ldr	r4, [pc, #388]	; (8002994 <__aeabi_dsub+0x33c>)
 8002810:	46a4      	mov	ip, r4
 8002812:	44b4      	add	ip, r6
 8002814:	4664      	mov	r4, ip
 8002816:	2c00      	cmp	r4, #0
 8002818:	d05c      	beq.n	80028d4 <__aeabi_dsub+0x27c>
 800281a:	1b94      	subs	r4, r2, r6
 800281c:	46a4      	mov	ip, r4
 800281e:	2e00      	cmp	r6, #0
 8002820:	d000      	beq.n	8002824 <__aeabi_dsub+0x1cc>
 8002822:	e115      	b.n	8002a50 <__aeabi_dsub+0x3f8>
 8002824:	464d      	mov	r5, r9
 8002826:	431d      	orrs	r5, r3
 8002828:	d100      	bne.n	800282c <__aeabi_dsub+0x1d4>
 800282a:	e1c3      	b.n	8002bb4 <__aeabi_dsub+0x55c>
 800282c:	1e65      	subs	r5, r4, #1
 800282e:	2c01      	cmp	r4, #1
 8002830:	d100      	bne.n	8002834 <__aeabi_dsub+0x1dc>
 8002832:	e20c      	b.n	8002c4e <__aeabi_dsub+0x5f6>
 8002834:	4e55      	ldr	r6, [pc, #340]	; (800298c <__aeabi_dsub+0x334>)
 8002836:	42b4      	cmp	r4, r6
 8002838:	d100      	bne.n	800283c <__aeabi_dsub+0x1e4>
 800283a:	e1f8      	b.n	8002c2e <__aeabi_dsub+0x5d6>
 800283c:	46ac      	mov	ip, r5
 800283e:	e10e      	b.n	8002a5e <__aeabi_dsub+0x406>
 8002840:	000a      	movs	r2, r1
 8002842:	4302      	orrs	r2, r0
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x1f0>
 8002846:	e136      	b.n	8002ab6 <__aeabi_dsub+0x45e>
 8002848:	0022      	movs	r2, r4
 800284a:	3a01      	subs	r2, #1
 800284c:	2c01      	cmp	r4, #1
 800284e:	d100      	bne.n	8002852 <__aeabi_dsub+0x1fa>
 8002850:	e1c6      	b.n	8002be0 <__aeabi_dsub+0x588>
 8002852:	4c4e      	ldr	r4, [pc, #312]	; (800298c <__aeabi_dsub+0x334>)
 8002854:	45a4      	cmp	ip, r4
 8002856:	d100      	bne.n	800285a <__aeabi_dsub+0x202>
 8002858:	e0f4      	b.n	8002a44 <__aeabi_dsub+0x3ec>
 800285a:	4694      	mov	ip, r2
 800285c:	e731      	b.n	80026c2 <__aeabi_dsub+0x6a>
 800285e:	2401      	movs	r4, #1
 8002860:	4067      	eors	r7, r4
 8002862:	46bb      	mov	fp, r7
 8002864:	42bd      	cmp	r5, r7
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x212>
 8002868:	e71c      	b.n	80026a4 <__aeabi_dsub+0x4c>
 800286a:	4c4a      	ldr	r4, [pc, #296]	; (8002994 <__aeabi_dsub+0x33c>)
 800286c:	46a4      	mov	ip, r4
 800286e:	44b4      	add	ip, r6
 8002870:	4664      	mov	r4, ip
 8002872:	2c00      	cmp	r4, #0
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x220>
 8002876:	e0cf      	b.n	8002a18 <__aeabi_dsub+0x3c0>
 8002878:	1b94      	subs	r4, r2, r6
 800287a:	46a4      	mov	ip, r4
 800287c:	2e00      	cmp	r6, #0
 800287e:	d100      	bne.n	8002882 <__aeabi_dsub+0x22a>
 8002880:	e15c      	b.n	8002b3c <__aeabi_dsub+0x4e4>
 8002882:	4e42      	ldr	r6, [pc, #264]	; (800298c <__aeabi_dsub+0x334>)
 8002884:	42b2      	cmp	r2, r6
 8002886:	d100      	bne.n	800288a <__aeabi_dsub+0x232>
 8002888:	e1ec      	b.n	8002c64 <__aeabi_dsub+0x60c>
 800288a:	2680      	movs	r6, #128	; 0x80
 800288c:	0436      	lsls	r6, r6, #16
 800288e:	4333      	orrs	r3, r6
 8002890:	4664      	mov	r4, ip
 8002892:	2c38      	cmp	r4, #56	; 0x38
 8002894:	dd00      	ble.n	8002898 <__aeabi_dsub+0x240>
 8002896:	e1b3      	b.n	8002c00 <__aeabi_dsub+0x5a8>
 8002898:	2c1f      	cmp	r4, #31
 800289a:	dd00      	ble.n	800289e <__aeabi_dsub+0x246>
 800289c:	e238      	b.n	8002d10 <__aeabi_dsub+0x6b8>
 800289e:	2620      	movs	r6, #32
 80028a0:	1b36      	subs	r6, r6, r4
 80028a2:	001c      	movs	r4, r3
 80028a4:	40b4      	lsls	r4, r6
 80028a6:	464f      	mov	r7, r9
 80028a8:	46a0      	mov	r8, r4
 80028aa:	4664      	mov	r4, ip
 80028ac:	40e7      	lsrs	r7, r4
 80028ae:	4644      	mov	r4, r8
 80028b0:	433c      	orrs	r4, r7
 80028b2:	464f      	mov	r7, r9
 80028b4:	40b7      	lsls	r7, r6
 80028b6:	003e      	movs	r6, r7
 80028b8:	1e77      	subs	r7, r6, #1
 80028ba:	41be      	sbcs	r6, r7
 80028bc:	4334      	orrs	r4, r6
 80028be:	4666      	mov	r6, ip
 80028c0:	40f3      	lsrs	r3, r6
 80028c2:	18c9      	adds	r1, r1, r3
 80028c4:	1824      	adds	r4, r4, r0
 80028c6:	4284      	cmp	r4, r0
 80028c8:	419b      	sbcs	r3, r3
 80028ca:	425b      	negs	r3, r3
 80028cc:	4698      	mov	r8, r3
 80028ce:	0016      	movs	r6, r2
 80028d0:	4488      	add	r8, r1
 80028d2:	e04e      	b.n	8002972 <__aeabi_dsub+0x31a>
 80028d4:	4a30      	ldr	r2, [pc, #192]	; (8002998 <__aeabi_dsub+0x340>)
 80028d6:	1c74      	adds	r4, r6, #1
 80028d8:	4214      	tst	r4, r2
 80028da:	d000      	beq.n	80028de <__aeabi_dsub+0x286>
 80028dc:	e0d6      	b.n	8002a8c <__aeabi_dsub+0x434>
 80028de:	464a      	mov	r2, r9
 80028e0:	431a      	orrs	r2, r3
 80028e2:	2e00      	cmp	r6, #0
 80028e4:	d000      	beq.n	80028e8 <__aeabi_dsub+0x290>
 80028e6:	e15b      	b.n	8002ba0 <__aeabi_dsub+0x548>
 80028e8:	2a00      	cmp	r2, #0
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x296>
 80028ec:	e1a5      	b.n	8002c3a <__aeabi_dsub+0x5e2>
 80028ee:	000a      	movs	r2, r1
 80028f0:	4302      	orrs	r2, r0
 80028f2:	d000      	beq.n	80028f6 <__aeabi_dsub+0x29e>
 80028f4:	e1bb      	b.n	8002c6e <__aeabi_dsub+0x616>
 80028f6:	464a      	mov	r2, r9
 80028f8:	0759      	lsls	r1, r3, #29
 80028fa:	08d2      	lsrs	r2, r2, #3
 80028fc:	430a      	orrs	r2, r1
 80028fe:	08db      	lsrs	r3, r3, #3
 8002900:	e027      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002902:	000a      	movs	r2, r1
 8002904:	4302      	orrs	r2, r0
 8002906:	d100      	bne.n	800290a <__aeabi_dsub+0x2b2>
 8002908:	e174      	b.n	8002bf4 <__aeabi_dsub+0x59c>
 800290a:	0022      	movs	r2, r4
 800290c:	3a01      	subs	r2, #1
 800290e:	2c01      	cmp	r4, #1
 8002910:	d005      	beq.n	800291e <__aeabi_dsub+0x2c6>
 8002912:	4c1e      	ldr	r4, [pc, #120]	; (800298c <__aeabi_dsub+0x334>)
 8002914:	45a4      	cmp	ip, r4
 8002916:	d100      	bne.n	800291a <__aeabi_dsub+0x2c2>
 8002918:	e094      	b.n	8002a44 <__aeabi_dsub+0x3ec>
 800291a:	4694      	mov	ip, r2
 800291c:	e759      	b.n	80027d2 <__aeabi_dsub+0x17a>
 800291e:	4448      	add	r0, r9
 8002920:	4548      	cmp	r0, r9
 8002922:	4192      	sbcs	r2, r2
 8002924:	185b      	adds	r3, r3, r1
 8002926:	4698      	mov	r8, r3
 8002928:	0004      	movs	r4, r0
 800292a:	4252      	negs	r2, r2
 800292c:	4490      	add	r8, r2
 800292e:	4643      	mov	r3, r8
 8002930:	2602      	movs	r6, #2
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	d500      	bpl.n	8002938 <__aeabi_dsub+0x2e0>
 8002936:	e0c4      	b.n	8002ac2 <__aeabi_dsub+0x46a>
 8002938:	3e01      	subs	r6, #1
 800293a:	0763      	lsls	r3, r4, #29
 800293c:	d000      	beq.n	8002940 <__aeabi_dsub+0x2e8>
 800293e:	e711      	b.n	8002764 <__aeabi_dsub+0x10c>
 8002940:	4643      	mov	r3, r8
 8002942:	46b4      	mov	ip, r6
 8002944:	0759      	lsls	r1, r3, #29
 8002946:	08e2      	lsrs	r2, r4, #3
 8002948:	430a      	orrs	r2, r1
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	490f      	ldr	r1, [pc, #60]	; (800298c <__aeabi_dsub+0x334>)
 800294e:	458c      	cmp	ip, r1
 8002950:	d040      	beq.n	80029d4 <__aeabi_dsub+0x37c>
 8002952:	4661      	mov	r1, ip
 8002954:	031b      	lsls	r3, r3, #12
 8002956:	0549      	lsls	r1, r1, #21
 8002958:	0b1b      	lsrs	r3, r3, #12
 800295a:	0d49      	lsrs	r1, r1, #21
 800295c:	e720      	b.n	80027a0 <__aeabi_dsub+0x148>
 800295e:	4301      	orrs	r1, r0
 8002960:	000c      	movs	r4, r1
 8002962:	1e61      	subs	r1, r4, #1
 8002964:	418c      	sbcs	r4, r1
 8002966:	444c      	add	r4, r9
 8002968:	454c      	cmp	r4, r9
 800296a:	4192      	sbcs	r2, r2
 800296c:	4252      	negs	r2, r2
 800296e:	4690      	mov	r8, r2
 8002970:	4498      	add	r8, r3
 8002972:	4643      	mov	r3, r8
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	d5e0      	bpl.n	800293a <__aeabi_dsub+0x2e2>
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <__aeabi_dsub+0x334>)
 800297a:	3601      	adds	r6, #1
 800297c:	429e      	cmp	r6, r3
 800297e:	d000      	beq.n	8002982 <__aeabi_dsub+0x32a>
 8002980:	e09f      	b.n	8002ac2 <__aeabi_dsub+0x46a>
 8002982:	0031      	movs	r1, r6
 8002984:	2300      	movs	r3, #0
 8002986:	2200      	movs	r2, #0
 8002988:	e70a      	b.n	80027a0 <__aeabi_dsub+0x148>
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	000007ff 	.word	0x000007ff
 8002990:	ff7fffff 	.word	0xff7fffff
 8002994:	fffff801 	.word	0xfffff801
 8002998:	000007fe 	.word	0x000007fe
 800299c:	2a00      	cmp	r2, #0
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x34a>
 80029a0:	e160      	b.n	8002c64 <__aeabi_dsub+0x60c>
 80029a2:	000a      	movs	r2, r1
 80029a4:	4302      	orrs	r2, r0
 80029a6:	d04d      	beq.n	8002a44 <__aeabi_dsub+0x3ec>
 80029a8:	464a      	mov	r2, r9
 80029aa:	075c      	lsls	r4, r3, #29
 80029ac:	08d2      	lsrs	r2, r2, #3
 80029ae:	4322      	orrs	r2, r4
 80029b0:	2480      	movs	r4, #128	; 0x80
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	0324      	lsls	r4, r4, #12
 80029b6:	4223      	tst	r3, r4
 80029b8:	d007      	beq.n	80029ca <__aeabi_dsub+0x372>
 80029ba:	08ce      	lsrs	r6, r1, #3
 80029bc:	4226      	tst	r6, r4
 80029be:	d104      	bne.n	80029ca <__aeabi_dsub+0x372>
 80029c0:	465d      	mov	r5, fp
 80029c2:	0033      	movs	r3, r6
 80029c4:	08c2      	lsrs	r2, r0, #3
 80029c6:	0749      	lsls	r1, r1, #29
 80029c8:	430a      	orrs	r2, r1
 80029ca:	0f51      	lsrs	r1, r2, #29
 80029cc:	00d2      	lsls	r2, r2, #3
 80029ce:	08d2      	lsrs	r2, r2, #3
 80029d0:	0749      	lsls	r1, r1, #29
 80029d2:	430a      	orrs	r2, r1
 80029d4:	0011      	movs	r1, r2
 80029d6:	4319      	orrs	r1, r3
 80029d8:	d100      	bne.n	80029dc <__aeabi_dsub+0x384>
 80029da:	e1c8      	b.n	8002d6e <__aeabi_dsub+0x716>
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	0309      	lsls	r1, r1, #12
 80029e0:	430b      	orrs	r3, r1
 80029e2:	031b      	lsls	r3, r3, #12
 80029e4:	49d5      	ldr	r1, [pc, #852]	; (8002d3c <__aeabi_dsub+0x6e4>)
 80029e6:	0b1b      	lsrs	r3, r3, #12
 80029e8:	e6da      	b.n	80027a0 <__aeabi_dsub+0x148>
 80029ea:	49d5      	ldr	r1, [pc, #852]	; (8002d40 <__aeabi_dsub+0x6e8>)
 80029ec:	1ab6      	subs	r6, r6, r2
 80029ee:	400b      	ands	r3, r1
 80029f0:	4698      	mov	r8, r3
 80029f2:	e6b5      	b.n	8002760 <__aeabi_dsub+0x108>
 80029f4:	0020      	movs	r0, r4
 80029f6:	f000 fb3b 	bl	8003070 <__clzsi2>
 80029fa:	0002      	movs	r2, r0
 80029fc:	3218      	adds	r2, #24
 80029fe:	2a1f      	cmp	r2, #31
 8002a00:	dc00      	bgt.n	8002a04 <__aeabi_dsub+0x3ac>
 8002a02:	e68f      	b.n	8002724 <__aeabi_dsub+0xcc>
 8002a04:	0023      	movs	r3, r4
 8002a06:	3808      	subs	r0, #8
 8002a08:	4083      	lsls	r3, r0
 8002a0a:	2400      	movs	r4, #0
 8002a0c:	e692      	b.n	8002734 <__aeabi_dsub+0xdc>
 8002a0e:	4308      	orrs	r0, r1
 8002a10:	0002      	movs	r2, r0
 8002a12:	1e50      	subs	r0, r2, #1
 8002a14:	4182      	sbcs	r2, r0
 8002a16:	e66d      	b.n	80026f4 <__aeabi_dsub+0x9c>
 8002a18:	4cca      	ldr	r4, [pc, #808]	; (8002d44 <__aeabi_dsub+0x6ec>)
 8002a1a:	1c72      	adds	r2, r6, #1
 8002a1c:	4222      	tst	r2, r4
 8002a1e:	d000      	beq.n	8002a22 <__aeabi_dsub+0x3ca>
 8002a20:	e0ad      	b.n	8002b7e <__aeabi_dsub+0x526>
 8002a22:	464a      	mov	r2, r9
 8002a24:	431a      	orrs	r2, r3
 8002a26:	2e00      	cmp	r6, #0
 8002a28:	d1b8      	bne.n	800299c <__aeabi_dsub+0x344>
 8002a2a:	2a00      	cmp	r2, #0
 8002a2c:	d100      	bne.n	8002a30 <__aeabi_dsub+0x3d8>
 8002a2e:	e158      	b.n	8002ce2 <__aeabi_dsub+0x68a>
 8002a30:	000a      	movs	r2, r1
 8002a32:	4302      	orrs	r2, r0
 8002a34:	d000      	beq.n	8002a38 <__aeabi_dsub+0x3e0>
 8002a36:	e159      	b.n	8002cec <__aeabi_dsub+0x694>
 8002a38:	464a      	mov	r2, r9
 8002a3a:	0759      	lsls	r1, r3, #29
 8002a3c:	08d2      	lsrs	r2, r2, #3
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	e786      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002a44:	464a      	mov	r2, r9
 8002a46:	0759      	lsls	r1, r3, #29
 8002a48:	08d2      	lsrs	r2, r2, #3
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	08db      	lsrs	r3, r3, #3
 8002a4e:	e7c1      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002a50:	4dba      	ldr	r5, [pc, #744]	; (8002d3c <__aeabi_dsub+0x6e4>)
 8002a52:	42aa      	cmp	r2, r5
 8002a54:	d100      	bne.n	8002a58 <__aeabi_dsub+0x400>
 8002a56:	e11e      	b.n	8002c96 <__aeabi_dsub+0x63e>
 8002a58:	2580      	movs	r5, #128	; 0x80
 8002a5a:	042d      	lsls	r5, r5, #16
 8002a5c:	432b      	orrs	r3, r5
 8002a5e:	4664      	mov	r4, ip
 8002a60:	2c38      	cmp	r4, #56	; 0x38
 8002a62:	dc5d      	bgt.n	8002b20 <__aeabi_dsub+0x4c8>
 8002a64:	2c1f      	cmp	r4, #31
 8002a66:	dd00      	ble.n	8002a6a <__aeabi_dsub+0x412>
 8002a68:	e0d0      	b.n	8002c0c <__aeabi_dsub+0x5b4>
 8002a6a:	2520      	movs	r5, #32
 8002a6c:	4667      	mov	r7, ip
 8002a6e:	1b2d      	subs	r5, r5, r4
 8002a70:	464e      	mov	r6, r9
 8002a72:	001c      	movs	r4, r3
 8002a74:	40fe      	lsrs	r6, r7
 8002a76:	40ac      	lsls	r4, r5
 8002a78:	4334      	orrs	r4, r6
 8002a7a:	464e      	mov	r6, r9
 8002a7c:	40ae      	lsls	r6, r5
 8002a7e:	0035      	movs	r5, r6
 8002a80:	40fb      	lsrs	r3, r7
 8002a82:	1e6e      	subs	r6, r5, #1
 8002a84:	41b5      	sbcs	r5, r6
 8002a86:	1ac9      	subs	r1, r1, r3
 8002a88:	432c      	orrs	r4, r5
 8002a8a:	e04e      	b.n	8002b2a <__aeabi_dsub+0x4d2>
 8002a8c:	464a      	mov	r2, r9
 8002a8e:	1a14      	subs	r4, r2, r0
 8002a90:	45a1      	cmp	r9, r4
 8002a92:	4192      	sbcs	r2, r2
 8002a94:	4252      	negs	r2, r2
 8002a96:	4690      	mov	r8, r2
 8002a98:	1a5f      	subs	r7, r3, r1
 8002a9a:	003a      	movs	r2, r7
 8002a9c:	4647      	mov	r7, r8
 8002a9e:	1bd2      	subs	r2, r2, r7
 8002aa0:	4690      	mov	r8, r2
 8002aa2:	0212      	lsls	r2, r2, #8
 8002aa4:	d500      	bpl.n	8002aa8 <__aeabi_dsub+0x450>
 8002aa6:	e08b      	b.n	8002bc0 <__aeabi_dsub+0x568>
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	4322      	orrs	r2, r4
 8002aac:	d000      	beq.n	8002ab0 <__aeabi_dsub+0x458>
 8002aae:	e630      	b.n	8002712 <__aeabi_dsub+0xba>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	e74d      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002ab6:	464a      	mov	r2, r9
 8002ab8:	0759      	lsls	r1, r3, #29
 8002aba:	08d2      	lsrs	r2, r2, #3
 8002abc:	430a      	orrs	r2, r1
 8002abe:	08db      	lsrs	r3, r3, #3
 8002ac0:	e744      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002ac2:	4642      	mov	r2, r8
 8002ac4:	4b9e      	ldr	r3, [pc, #632]	; (8002d40 <__aeabi_dsub+0x6e8>)
 8002ac6:	0861      	lsrs	r1, r4, #1
 8002ac8:	401a      	ands	r2, r3
 8002aca:	0013      	movs	r3, r2
 8002acc:	2201      	movs	r2, #1
 8002ace:	4014      	ands	r4, r2
 8002ad0:	430c      	orrs	r4, r1
 8002ad2:	07da      	lsls	r2, r3, #31
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	4698      	mov	r8, r3
 8002ad8:	4314      	orrs	r4, r2
 8002ada:	e641      	b.n	8002760 <__aeabi_dsub+0x108>
 8002adc:	001a      	movs	r2, r3
 8002ade:	3e1f      	subs	r6, #31
 8002ae0:	40f2      	lsrs	r2, r6
 8002ae2:	0016      	movs	r6, r2
 8002ae4:	2920      	cmp	r1, #32
 8002ae6:	d003      	beq.n	8002af0 <__aeabi_dsub+0x498>
 8002ae8:	2240      	movs	r2, #64	; 0x40
 8002aea:	1a51      	subs	r1, r2, r1
 8002aec:	408b      	lsls	r3, r1
 8002aee:	431c      	orrs	r4, r3
 8002af0:	1e62      	subs	r2, r4, #1
 8002af2:	4194      	sbcs	r4, r2
 8002af4:	2300      	movs	r3, #0
 8002af6:	4334      	orrs	r4, r6
 8002af8:	4698      	mov	r8, r3
 8002afa:	2600      	movs	r6, #0
 8002afc:	e71d      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002afe:	000c      	movs	r4, r1
 8002b00:	3a20      	subs	r2, #32
 8002b02:	40d4      	lsrs	r4, r2
 8002b04:	0022      	movs	r2, r4
 8002b06:	4664      	mov	r4, ip
 8002b08:	2c20      	cmp	r4, #32
 8002b0a:	d004      	beq.n	8002b16 <__aeabi_dsub+0x4be>
 8002b0c:	2740      	movs	r7, #64	; 0x40
 8002b0e:	1b3f      	subs	r7, r7, r4
 8002b10:	40b9      	lsls	r1, r7
 8002b12:	4308      	orrs	r0, r1
 8002b14:	4680      	mov	r8, r0
 8002b16:	4644      	mov	r4, r8
 8002b18:	1e61      	subs	r1, r4, #1
 8002b1a:	418c      	sbcs	r4, r1
 8002b1c:	4322      	orrs	r2, r4
 8002b1e:	e5e9      	b.n	80026f4 <__aeabi_dsub+0x9c>
 8002b20:	464c      	mov	r4, r9
 8002b22:	4323      	orrs	r3, r4
 8002b24:	001c      	movs	r4, r3
 8002b26:	1e63      	subs	r3, r4, #1
 8002b28:	419c      	sbcs	r4, r3
 8002b2a:	1b04      	subs	r4, r0, r4
 8002b2c:	42a0      	cmp	r0, r4
 8002b2e:	419b      	sbcs	r3, r3
 8002b30:	425b      	negs	r3, r3
 8002b32:	1acb      	subs	r3, r1, r3
 8002b34:	4698      	mov	r8, r3
 8002b36:	465d      	mov	r5, fp
 8002b38:	0016      	movs	r6, r2
 8002b3a:	e5e2      	b.n	8002702 <__aeabi_dsub+0xaa>
 8002b3c:	464e      	mov	r6, r9
 8002b3e:	431e      	orrs	r6, r3
 8002b40:	d100      	bne.n	8002b44 <__aeabi_dsub+0x4ec>
 8002b42:	e0ae      	b.n	8002ca2 <__aeabi_dsub+0x64a>
 8002b44:	1e66      	subs	r6, r4, #1
 8002b46:	2c01      	cmp	r4, #1
 8002b48:	d100      	bne.n	8002b4c <__aeabi_dsub+0x4f4>
 8002b4a:	e0fd      	b.n	8002d48 <__aeabi_dsub+0x6f0>
 8002b4c:	4f7b      	ldr	r7, [pc, #492]	; (8002d3c <__aeabi_dsub+0x6e4>)
 8002b4e:	42bc      	cmp	r4, r7
 8002b50:	d100      	bne.n	8002b54 <__aeabi_dsub+0x4fc>
 8002b52:	e107      	b.n	8002d64 <__aeabi_dsub+0x70c>
 8002b54:	46b4      	mov	ip, r6
 8002b56:	e69b      	b.n	8002890 <__aeabi_dsub+0x238>
 8002b58:	4664      	mov	r4, ip
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	1b12      	subs	r2, r2, r4
 8002b5e:	000c      	movs	r4, r1
 8002b60:	4094      	lsls	r4, r2
 8002b62:	0007      	movs	r7, r0
 8002b64:	4090      	lsls	r0, r2
 8002b66:	46a0      	mov	r8, r4
 8002b68:	4664      	mov	r4, ip
 8002b6a:	1e42      	subs	r2, r0, #1
 8002b6c:	4190      	sbcs	r0, r2
 8002b6e:	4662      	mov	r2, ip
 8002b70:	40e7      	lsrs	r7, r4
 8002b72:	4644      	mov	r4, r8
 8002b74:	40d1      	lsrs	r1, r2
 8002b76:	433c      	orrs	r4, r7
 8002b78:	4304      	orrs	r4, r0
 8002b7a:	185b      	adds	r3, r3, r1
 8002b7c:	e6f3      	b.n	8002966 <__aeabi_dsub+0x30e>
 8002b7e:	4c6f      	ldr	r4, [pc, #444]	; (8002d3c <__aeabi_dsub+0x6e4>)
 8002b80:	42a2      	cmp	r2, r4
 8002b82:	d100      	bne.n	8002b86 <__aeabi_dsub+0x52e>
 8002b84:	e0d5      	b.n	8002d32 <__aeabi_dsub+0x6da>
 8002b86:	4448      	add	r0, r9
 8002b88:	185b      	adds	r3, r3, r1
 8002b8a:	4548      	cmp	r0, r9
 8002b8c:	4189      	sbcs	r1, r1
 8002b8e:	4249      	negs	r1, r1
 8002b90:	185b      	adds	r3, r3, r1
 8002b92:	07dc      	lsls	r4, r3, #31
 8002b94:	0840      	lsrs	r0, r0, #1
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	4698      	mov	r8, r3
 8002b9a:	0016      	movs	r6, r2
 8002b9c:	4304      	orrs	r4, r0
 8002b9e:	e6cc      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002ba0:	2a00      	cmp	r2, #0
 8002ba2:	d000      	beq.n	8002ba6 <__aeabi_dsub+0x54e>
 8002ba4:	e082      	b.n	8002cac <__aeabi_dsub+0x654>
 8002ba6:	000a      	movs	r2, r1
 8002ba8:	4302      	orrs	r2, r0
 8002baa:	d140      	bne.n	8002c2e <__aeabi_dsub+0x5d6>
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	2500      	movs	r5, #0
 8002bb0:	031b      	lsls	r3, r3, #12
 8002bb2:	e713      	b.n	80029dc <__aeabi_dsub+0x384>
 8002bb4:	074b      	lsls	r3, r1, #29
 8002bb6:	08c2      	lsrs	r2, r0, #3
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	465d      	mov	r5, fp
 8002bbc:	08cb      	lsrs	r3, r1, #3
 8002bbe:	e6c5      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002bc0:	464a      	mov	r2, r9
 8002bc2:	1a84      	subs	r4, r0, r2
 8002bc4:	42a0      	cmp	r0, r4
 8002bc6:	4192      	sbcs	r2, r2
 8002bc8:	1acb      	subs	r3, r1, r3
 8002bca:	4252      	negs	r2, r2
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	4698      	mov	r8, r3
 8002bd0:	465d      	mov	r5, fp
 8002bd2:	e59e      	b.n	8002712 <__aeabi_dsub+0xba>
 8002bd4:	464a      	mov	r2, r9
 8002bd6:	0759      	lsls	r1, r3, #29
 8002bd8:	08d2      	lsrs	r2, r2, #3
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	e6f9      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002be0:	464a      	mov	r2, r9
 8002be2:	1a14      	subs	r4, r2, r0
 8002be4:	45a1      	cmp	r9, r4
 8002be6:	4192      	sbcs	r2, r2
 8002be8:	1a5b      	subs	r3, r3, r1
 8002bea:	4252      	negs	r2, r2
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	4698      	mov	r8, r3
 8002bf0:	2601      	movs	r6, #1
 8002bf2:	e586      	b.n	8002702 <__aeabi_dsub+0xaa>
 8002bf4:	464a      	mov	r2, r9
 8002bf6:	0759      	lsls	r1, r3, #29
 8002bf8:	08d2      	lsrs	r2, r2, #3
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	e6a5      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002c00:	464c      	mov	r4, r9
 8002c02:	4323      	orrs	r3, r4
 8002c04:	001c      	movs	r4, r3
 8002c06:	1e63      	subs	r3, r4, #1
 8002c08:	419c      	sbcs	r4, r3
 8002c0a:	e65b      	b.n	80028c4 <__aeabi_dsub+0x26c>
 8002c0c:	4665      	mov	r5, ip
 8002c0e:	001e      	movs	r6, r3
 8002c10:	3d20      	subs	r5, #32
 8002c12:	40ee      	lsrs	r6, r5
 8002c14:	2c20      	cmp	r4, #32
 8002c16:	d005      	beq.n	8002c24 <__aeabi_dsub+0x5cc>
 8002c18:	2540      	movs	r5, #64	; 0x40
 8002c1a:	1b2d      	subs	r5, r5, r4
 8002c1c:	40ab      	lsls	r3, r5
 8002c1e:	464c      	mov	r4, r9
 8002c20:	431c      	orrs	r4, r3
 8002c22:	46a2      	mov	sl, r4
 8002c24:	4654      	mov	r4, sl
 8002c26:	1e63      	subs	r3, r4, #1
 8002c28:	419c      	sbcs	r4, r3
 8002c2a:	4334      	orrs	r4, r6
 8002c2c:	e77d      	b.n	8002b2a <__aeabi_dsub+0x4d2>
 8002c2e:	074b      	lsls	r3, r1, #29
 8002c30:	08c2      	lsrs	r2, r0, #3
 8002c32:	431a      	orrs	r2, r3
 8002c34:	465d      	mov	r5, fp
 8002c36:	08cb      	lsrs	r3, r1, #3
 8002c38:	e6cc      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002c3a:	000a      	movs	r2, r1
 8002c3c:	4302      	orrs	r2, r0
 8002c3e:	d100      	bne.n	8002c42 <__aeabi_dsub+0x5ea>
 8002c40:	e736      	b.n	8002ab0 <__aeabi_dsub+0x458>
 8002c42:	074b      	lsls	r3, r1, #29
 8002c44:	08c2      	lsrs	r2, r0, #3
 8002c46:	431a      	orrs	r2, r3
 8002c48:	465d      	mov	r5, fp
 8002c4a:	08cb      	lsrs	r3, r1, #3
 8002c4c:	e681      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002c4e:	464a      	mov	r2, r9
 8002c50:	1a84      	subs	r4, r0, r2
 8002c52:	42a0      	cmp	r0, r4
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	1acb      	subs	r3, r1, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	465d      	mov	r5, fp
 8002c60:	2601      	movs	r6, #1
 8002c62:	e54e      	b.n	8002702 <__aeabi_dsub+0xaa>
 8002c64:	074b      	lsls	r3, r1, #29
 8002c66:	08c2      	lsrs	r2, r0, #3
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	08cb      	lsrs	r3, r1, #3
 8002c6c:	e6b2      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002c6e:	464a      	mov	r2, r9
 8002c70:	1a14      	subs	r4, r2, r0
 8002c72:	45a1      	cmp	r9, r4
 8002c74:	4192      	sbcs	r2, r2
 8002c76:	1a5f      	subs	r7, r3, r1
 8002c78:	4252      	negs	r2, r2
 8002c7a:	1aba      	subs	r2, r7, r2
 8002c7c:	4690      	mov	r8, r2
 8002c7e:	0212      	lsls	r2, r2, #8
 8002c80:	d56b      	bpl.n	8002d5a <__aeabi_dsub+0x702>
 8002c82:	464a      	mov	r2, r9
 8002c84:	1a84      	subs	r4, r0, r2
 8002c86:	42a0      	cmp	r0, r4
 8002c88:	4192      	sbcs	r2, r2
 8002c8a:	1acb      	subs	r3, r1, r3
 8002c8c:	4252      	negs	r2, r2
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	4698      	mov	r8, r3
 8002c92:	465d      	mov	r5, fp
 8002c94:	e564      	b.n	8002760 <__aeabi_dsub+0x108>
 8002c96:	074b      	lsls	r3, r1, #29
 8002c98:	08c2      	lsrs	r2, r0, #3
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	465d      	mov	r5, fp
 8002c9e:	08cb      	lsrs	r3, r1, #3
 8002ca0:	e698      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002ca2:	074b      	lsls	r3, r1, #29
 8002ca4:	08c2      	lsrs	r2, r0, #3
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	08cb      	lsrs	r3, r1, #3
 8002caa:	e64f      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002cac:	000a      	movs	r2, r1
 8002cae:	4302      	orrs	r2, r0
 8002cb0:	d090      	beq.n	8002bd4 <__aeabi_dsub+0x57c>
 8002cb2:	464a      	mov	r2, r9
 8002cb4:	075c      	lsls	r4, r3, #29
 8002cb6:	08d2      	lsrs	r2, r2, #3
 8002cb8:	4314      	orrs	r4, r2
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	08db      	lsrs	r3, r3, #3
 8002cbe:	0312      	lsls	r2, r2, #12
 8002cc0:	4213      	tst	r3, r2
 8002cc2:	d008      	beq.n	8002cd6 <__aeabi_dsub+0x67e>
 8002cc4:	08ce      	lsrs	r6, r1, #3
 8002cc6:	4216      	tst	r6, r2
 8002cc8:	d105      	bne.n	8002cd6 <__aeabi_dsub+0x67e>
 8002cca:	08c0      	lsrs	r0, r0, #3
 8002ccc:	0749      	lsls	r1, r1, #29
 8002cce:	4308      	orrs	r0, r1
 8002cd0:	0004      	movs	r4, r0
 8002cd2:	465d      	mov	r5, fp
 8002cd4:	0033      	movs	r3, r6
 8002cd6:	0f61      	lsrs	r1, r4, #29
 8002cd8:	00e2      	lsls	r2, r4, #3
 8002cda:	0749      	lsls	r1, r1, #29
 8002cdc:	08d2      	lsrs	r2, r2, #3
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	e678      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002ce2:	074b      	lsls	r3, r1, #29
 8002ce4:	08c2      	lsrs	r2, r0, #3
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	08cb      	lsrs	r3, r1, #3
 8002cea:	e632      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002cec:	4448      	add	r0, r9
 8002cee:	185b      	adds	r3, r3, r1
 8002cf0:	4548      	cmp	r0, r9
 8002cf2:	4192      	sbcs	r2, r2
 8002cf4:	4698      	mov	r8, r3
 8002cf6:	4252      	negs	r2, r2
 8002cf8:	4490      	add	r8, r2
 8002cfa:	4643      	mov	r3, r8
 8002cfc:	0004      	movs	r4, r0
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	d400      	bmi.n	8002d04 <__aeabi_dsub+0x6ac>
 8002d02:	e61a      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002d04:	4642      	mov	r2, r8
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <__aeabi_dsub+0x6e8>)
 8002d08:	2601      	movs	r6, #1
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	4690      	mov	r8, r2
 8002d0e:	e614      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002d10:	4666      	mov	r6, ip
 8002d12:	001f      	movs	r7, r3
 8002d14:	3e20      	subs	r6, #32
 8002d16:	40f7      	lsrs	r7, r6
 8002d18:	2c20      	cmp	r4, #32
 8002d1a:	d005      	beq.n	8002d28 <__aeabi_dsub+0x6d0>
 8002d1c:	2640      	movs	r6, #64	; 0x40
 8002d1e:	1b36      	subs	r6, r6, r4
 8002d20:	40b3      	lsls	r3, r6
 8002d22:	464c      	mov	r4, r9
 8002d24:	431c      	orrs	r4, r3
 8002d26:	46a2      	mov	sl, r4
 8002d28:	4654      	mov	r4, sl
 8002d2a:	1e63      	subs	r3, r4, #1
 8002d2c:	419c      	sbcs	r4, r3
 8002d2e:	433c      	orrs	r4, r7
 8002d30:	e5c8      	b.n	80028c4 <__aeabi_dsub+0x26c>
 8002d32:	0011      	movs	r1, r2
 8002d34:	2300      	movs	r3, #0
 8002d36:	2200      	movs	r2, #0
 8002d38:	e532      	b.n	80027a0 <__aeabi_dsub+0x148>
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	000007ff 	.word	0x000007ff
 8002d40:	ff7fffff 	.word	0xff7fffff
 8002d44:	000007fe 	.word	0x000007fe
 8002d48:	464a      	mov	r2, r9
 8002d4a:	1814      	adds	r4, r2, r0
 8002d4c:	4284      	cmp	r4, r0
 8002d4e:	4192      	sbcs	r2, r2
 8002d50:	185b      	adds	r3, r3, r1
 8002d52:	4698      	mov	r8, r3
 8002d54:	4252      	negs	r2, r2
 8002d56:	4490      	add	r8, r2
 8002d58:	e5e9      	b.n	800292e <__aeabi_dsub+0x2d6>
 8002d5a:	4642      	mov	r2, r8
 8002d5c:	4322      	orrs	r2, r4
 8002d5e:	d100      	bne.n	8002d62 <__aeabi_dsub+0x70a>
 8002d60:	e6a6      	b.n	8002ab0 <__aeabi_dsub+0x458>
 8002d62:	e5ea      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002d64:	074b      	lsls	r3, r1, #29
 8002d66:	08c2      	lsrs	r2, r0, #3
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	08cb      	lsrs	r3, r1, #3
 8002d6c:	e632      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4901      	ldr	r1, [pc, #4]	; (8002d78 <__aeabi_dsub+0x720>)
 8002d72:	0013      	movs	r3, r2
 8002d74:	e514      	b.n	80027a0 <__aeabi_dsub+0x148>
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	000007ff 	.word	0x000007ff

08002d7c <__aeabi_dcmpun>:
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	0005      	movs	r5, r0
 8002d80:	480c      	ldr	r0, [pc, #48]	; (8002db4 <__aeabi_dcmpun+0x38>)
 8002d82:	030c      	lsls	r4, r1, #12
 8002d84:	0016      	movs	r6, r2
 8002d86:	0049      	lsls	r1, r1, #1
 8002d88:	031a      	lsls	r2, r3, #12
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	0d49      	lsrs	r1, r1, #21
 8002d90:	0b12      	lsrs	r2, r2, #12
 8002d92:	0d5b      	lsrs	r3, r3, #21
 8002d94:	4281      	cmp	r1, r0
 8002d96:	d008      	beq.n	8002daa <__aeabi_dcmpun+0x2e>
 8002d98:	4906      	ldr	r1, [pc, #24]	; (8002db4 <__aeabi_dcmpun+0x38>)
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	428b      	cmp	r3, r1
 8002d9e:	d103      	bne.n	8002da8 <__aeabi_dcmpun+0x2c>
 8002da0:	4332      	orrs	r2, r6
 8002da2:	0010      	movs	r0, r2
 8002da4:	1e42      	subs	r2, r0, #1
 8002da6:	4190      	sbcs	r0, r2
 8002da8:	bd70      	pop	{r4, r5, r6, pc}
 8002daa:	2001      	movs	r0, #1
 8002dac:	432c      	orrs	r4, r5
 8002dae:	d1fb      	bne.n	8002da8 <__aeabi_dcmpun+0x2c>
 8002db0:	e7f2      	b.n	8002d98 <__aeabi_dcmpun+0x1c>
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	000007ff 	.word	0x000007ff

08002db8 <__aeabi_d2iz>:
 8002db8:	000a      	movs	r2, r1
 8002dba:	b530      	push	{r4, r5, lr}
 8002dbc:	4c13      	ldr	r4, [pc, #76]	; (8002e0c <__aeabi_d2iz+0x54>)
 8002dbe:	0053      	lsls	r3, r2, #1
 8002dc0:	0309      	lsls	r1, r1, #12
 8002dc2:	0005      	movs	r5, r0
 8002dc4:	0b09      	lsrs	r1, r1, #12
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	0d5b      	lsrs	r3, r3, #21
 8002dca:	0fd2      	lsrs	r2, r2, #31
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	dd04      	ble.n	8002dda <__aeabi_d2iz+0x22>
 8002dd0:	480f      	ldr	r0, [pc, #60]	; (8002e10 <__aeabi_d2iz+0x58>)
 8002dd2:	4283      	cmp	r3, r0
 8002dd4:	dd02      	ble.n	8002ddc <__aeabi_d2iz+0x24>
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <__aeabi_d2iz+0x5c>)
 8002dd8:	18d0      	adds	r0, r2, r3
 8002dda:	bd30      	pop	{r4, r5, pc}
 8002ddc:	2080      	movs	r0, #128	; 0x80
 8002dde:	0340      	lsls	r0, r0, #13
 8002de0:	4301      	orrs	r1, r0
 8002de2:	480d      	ldr	r0, [pc, #52]	; (8002e18 <__aeabi_d2iz+0x60>)
 8002de4:	1ac0      	subs	r0, r0, r3
 8002de6:	281f      	cmp	r0, #31
 8002de8:	dd08      	ble.n	8002dfc <__aeabi_d2iz+0x44>
 8002dea:	480c      	ldr	r0, [pc, #48]	; (8002e1c <__aeabi_d2iz+0x64>)
 8002dec:	1ac3      	subs	r3, r0, r3
 8002dee:	40d9      	lsrs	r1, r3
 8002df0:	000b      	movs	r3, r1
 8002df2:	4258      	negs	r0, r3
 8002df4:	2a00      	cmp	r2, #0
 8002df6:	d1f0      	bne.n	8002dda <__aeabi_d2iz+0x22>
 8002df8:	0018      	movs	r0, r3
 8002dfa:	e7ee      	b.n	8002dda <__aeabi_d2iz+0x22>
 8002dfc:	4c08      	ldr	r4, [pc, #32]	; (8002e20 <__aeabi_d2iz+0x68>)
 8002dfe:	40c5      	lsrs	r5, r0
 8002e00:	46a4      	mov	ip, r4
 8002e02:	4463      	add	r3, ip
 8002e04:	4099      	lsls	r1, r3
 8002e06:	000b      	movs	r3, r1
 8002e08:	432b      	orrs	r3, r5
 8002e0a:	e7f2      	b.n	8002df2 <__aeabi_d2iz+0x3a>
 8002e0c:	000003fe 	.word	0x000003fe
 8002e10:	0000041d 	.word	0x0000041d
 8002e14:	7fffffff 	.word	0x7fffffff
 8002e18:	00000433 	.word	0x00000433
 8002e1c:	00000413 	.word	0x00000413
 8002e20:	fffffbed 	.word	0xfffffbed

08002e24 <__aeabi_i2d>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d016      	beq.n	8002e58 <__aeabi_i2d+0x34>
 8002e2a:	17c3      	asrs	r3, r0, #31
 8002e2c:	18c5      	adds	r5, r0, r3
 8002e2e:	405d      	eors	r5, r3
 8002e30:	0fc4      	lsrs	r4, r0, #31
 8002e32:	0028      	movs	r0, r5
 8002e34:	f000 f91c 	bl	8003070 <__clzsi2>
 8002e38:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <__aeabi_i2d+0x5c>)
 8002e3a:	1a12      	subs	r2, r2, r0
 8002e3c:	280a      	cmp	r0, #10
 8002e3e:	dc16      	bgt.n	8002e6e <__aeabi_i2d+0x4a>
 8002e40:	0003      	movs	r3, r0
 8002e42:	002e      	movs	r6, r5
 8002e44:	3315      	adds	r3, #21
 8002e46:	409e      	lsls	r6, r3
 8002e48:	230b      	movs	r3, #11
 8002e4a:	1a18      	subs	r0, r3, r0
 8002e4c:	40c5      	lsrs	r5, r0
 8002e4e:	0553      	lsls	r3, r2, #21
 8002e50:	032d      	lsls	r5, r5, #12
 8002e52:	0b2d      	lsrs	r5, r5, #12
 8002e54:	0d5b      	lsrs	r3, r3, #21
 8002e56:	e003      	b.n	8002e60 <__aeabi_i2d+0x3c>
 8002e58:	2400      	movs	r4, #0
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2500      	movs	r5, #0
 8002e5e:	2600      	movs	r6, #0
 8002e60:	051b      	lsls	r3, r3, #20
 8002e62:	432b      	orrs	r3, r5
 8002e64:	07e4      	lsls	r4, r4, #31
 8002e66:	4323      	orrs	r3, r4
 8002e68:	0030      	movs	r0, r6
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
 8002e6e:	380b      	subs	r0, #11
 8002e70:	4085      	lsls	r5, r0
 8002e72:	0553      	lsls	r3, r2, #21
 8002e74:	032d      	lsls	r5, r5, #12
 8002e76:	2600      	movs	r6, #0
 8002e78:	0b2d      	lsrs	r5, r5, #12
 8002e7a:	0d5b      	lsrs	r3, r3, #21
 8002e7c:	e7f0      	b.n	8002e60 <__aeabi_i2d+0x3c>
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	0000041e 	.word	0x0000041e

08002e84 <__aeabi_ui2d>:
 8002e84:	b510      	push	{r4, lr}
 8002e86:	1e04      	subs	r4, r0, #0
 8002e88:	d010      	beq.n	8002eac <__aeabi_ui2d+0x28>
 8002e8a:	f000 f8f1 	bl	8003070 <__clzsi2>
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <__aeabi_ui2d+0x48>)
 8002e90:	1a1b      	subs	r3, r3, r0
 8002e92:	280a      	cmp	r0, #10
 8002e94:	dc11      	bgt.n	8002eba <__aeabi_ui2d+0x36>
 8002e96:	220b      	movs	r2, #11
 8002e98:	0021      	movs	r1, r4
 8002e9a:	1a12      	subs	r2, r2, r0
 8002e9c:	40d1      	lsrs	r1, r2
 8002e9e:	3015      	adds	r0, #21
 8002ea0:	030a      	lsls	r2, r1, #12
 8002ea2:	055b      	lsls	r3, r3, #21
 8002ea4:	4084      	lsls	r4, r0
 8002ea6:	0b12      	lsrs	r2, r2, #12
 8002ea8:	0d5b      	lsrs	r3, r3, #21
 8002eaa:	e001      	b.n	8002eb0 <__aeabi_ui2d+0x2c>
 8002eac:	2300      	movs	r3, #0
 8002eae:	2200      	movs	r2, #0
 8002eb0:	051b      	lsls	r3, r3, #20
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	0020      	movs	r0, r4
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	bd10      	pop	{r4, pc}
 8002eba:	0022      	movs	r2, r4
 8002ebc:	380b      	subs	r0, #11
 8002ebe:	4082      	lsls	r2, r0
 8002ec0:	055b      	lsls	r3, r3, #21
 8002ec2:	0312      	lsls	r2, r2, #12
 8002ec4:	2400      	movs	r4, #0
 8002ec6:	0b12      	lsrs	r2, r2, #12
 8002ec8:	0d5b      	lsrs	r3, r3, #21
 8002eca:	e7f1      	b.n	8002eb0 <__aeabi_ui2d+0x2c>
 8002ecc:	0000041e 	.word	0x0000041e

08002ed0 <__aeabi_f2d>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	0043      	lsls	r3, r0, #1
 8002ed4:	0246      	lsls	r6, r0, #9
 8002ed6:	0fc4      	lsrs	r4, r0, #31
 8002ed8:	20fe      	movs	r0, #254	; 0xfe
 8002eda:	0e1b      	lsrs	r3, r3, #24
 8002edc:	1c59      	adds	r1, r3, #1
 8002ede:	0a75      	lsrs	r5, r6, #9
 8002ee0:	4208      	tst	r0, r1
 8002ee2:	d00c      	beq.n	8002efe <__aeabi_f2d+0x2e>
 8002ee4:	22e0      	movs	r2, #224	; 0xe0
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	4694      	mov	ip, r2
 8002eea:	076d      	lsls	r5, r5, #29
 8002eec:	0b36      	lsrs	r6, r6, #12
 8002eee:	4463      	add	r3, ip
 8002ef0:	051b      	lsls	r3, r3, #20
 8002ef2:	4333      	orrs	r3, r6
 8002ef4:	07e4      	lsls	r4, r4, #31
 8002ef6:	4323      	orrs	r3, r4
 8002ef8:	0028      	movs	r0, r5
 8002efa:	0019      	movs	r1, r3
 8002efc:	bd70      	pop	{r4, r5, r6, pc}
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d114      	bne.n	8002f2c <__aeabi_f2d+0x5c>
 8002f02:	2d00      	cmp	r5, #0
 8002f04:	d01b      	beq.n	8002f3e <__aeabi_f2d+0x6e>
 8002f06:	0028      	movs	r0, r5
 8002f08:	f000 f8b2 	bl	8003070 <__clzsi2>
 8002f0c:	280a      	cmp	r0, #10
 8002f0e:	dc1c      	bgt.n	8002f4a <__aeabi_f2d+0x7a>
 8002f10:	230b      	movs	r3, #11
 8002f12:	002a      	movs	r2, r5
 8002f14:	1a1b      	subs	r3, r3, r0
 8002f16:	40da      	lsrs	r2, r3
 8002f18:	0003      	movs	r3, r0
 8002f1a:	3315      	adds	r3, #21
 8002f1c:	409d      	lsls	r5, r3
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <__aeabi_f2d+0x88>)
 8002f20:	0312      	lsls	r2, r2, #12
 8002f22:	1a1b      	subs	r3, r3, r0
 8002f24:	055b      	lsls	r3, r3, #21
 8002f26:	0b16      	lsrs	r6, r2, #12
 8002f28:	0d5b      	lsrs	r3, r3, #21
 8002f2a:	e7e1      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f2c:	2d00      	cmp	r5, #0
 8002f2e:	d009      	beq.n	8002f44 <__aeabi_f2d+0x74>
 8002f30:	0b32      	lsrs	r2, r6, #12
 8002f32:	2680      	movs	r6, #128	; 0x80
 8002f34:	0336      	lsls	r6, r6, #12
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <__aeabi_f2d+0x8c>)
 8002f38:	076d      	lsls	r5, r5, #29
 8002f3a:	4316      	orrs	r6, r2
 8002f3c:	e7d8      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2600      	movs	r6, #0
 8002f42:	e7d5      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f44:	2600      	movs	r6, #0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <__aeabi_f2d+0x8c>)
 8002f48:	e7d2      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	002a      	movs	r2, r5
 8002f4e:	3b0b      	subs	r3, #11
 8002f50:	409a      	lsls	r2, r3
 8002f52:	2500      	movs	r5, #0
 8002f54:	e7e3      	b.n	8002f1e <__aeabi_f2d+0x4e>
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	00000389 	.word	0x00000389
 8002f5c:	000007ff 	.word	0x000007ff

08002f60 <__aeabi_d2f>:
 8002f60:	0002      	movs	r2, r0
 8002f62:	004b      	lsls	r3, r1, #1
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f66:	0308      	lsls	r0, r1, #12
 8002f68:	0d5b      	lsrs	r3, r3, #21
 8002f6a:	4e3d      	ldr	r6, [pc, #244]	; (8003060 <__aeabi_d2f+0x100>)
 8002f6c:	0fcc      	lsrs	r4, r1, #31
 8002f6e:	0a40      	lsrs	r0, r0, #9
 8002f70:	0f51      	lsrs	r1, r2, #29
 8002f72:	1c5f      	adds	r7, r3, #1
 8002f74:	4308      	orrs	r0, r1
 8002f76:	00d5      	lsls	r5, r2, #3
 8002f78:	4237      	tst	r7, r6
 8002f7a:	d00a      	beq.n	8002f92 <__aeabi_d2f+0x32>
 8002f7c:	4939      	ldr	r1, [pc, #228]	; (8003064 <__aeabi_d2f+0x104>)
 8002f7e:	185e      	adds	r6, r3, r1
 8002f80:	2efe      	cmp	r6, #254	; 0xfe
 8002f82:	dd16      	ble.n	8002fb2 <__aeabi_d2f+0x52>
 8002f84:	23ff      	movs	r3, #255	; 0xff
 8002f86:	2100      	movs	r1, #0
 8002f88:	05db      	lsls	r3, r3, #23
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	07e0      	lsls	r0, r4, #31
 8002f8e:	4318      	orrs	r0, r3
 8002f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <__aeabi_d2f+0x44>
 8002f96:	4328      	orrs	r0, r5
 8002f98:	d027      	beq.n	8002fea <__aeabi_d2f+0x8a>
 8002f9a:	2105      	movs	r1, #5
 8002f9c:	0189      	lsls	r1, r1, #6
 8002f9e:	0a49      	lsrs	r1, r1, #9
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e7f1      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002fa4:	4305      	orrs	r5, r0
 8002fa6:	d0ed      	beq.n	8002f84 <__aeabi_d2f+0x24>
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	03c9      	lsls	r1, r1, #15
 8002fac:	23ff      	movs	r3, #255	; 0xff
 8002fae:	4301      	orrs	r1, r0
 8002fb0:	e7ea      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002fb2:	2e00      	cmp	r6, #0
 8002fb4:	dd1c      	ble.n	8002ff0 <__aeabi_d2f+0x90>
 8002fb6:	0192      	lsls	r2, r2, #6
 8002fb8:	0011      	movs	r1, r2
 8002fba:	1e4a      	subs	r2, r1, #1
 8002fbc:	4191      	sbcs	r1, r2
 8002fbe:	00c0      	lsls	r0, r0, #3
 8002fc0:	0f6d      	lsrs	r5, r5, #29
 8002fc2:	4301      	orrs	r1, r0
 8002fc4:	4329      	orrs	r1, r5
 8002fc6:	074b      	lsls	r3, r1, #29
 8002fc8:	d048      	beq.n	800305c <__aeabi_d2f+0xfc>
 8002fca:	230f      	movs	r3, #15
 8002fcc:	400b      	ands	r3, r1
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d000      	beq.n	8002fd4 <__aeabi_d2f+0x74>
 8002fd2:	3104      	adds	r1, #4
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	04db      	lsls	r3, r3, #19
 8002fd8:	400b      	ands	r3, r1
 8002fda:	d03f      	beq.n	800305c <__aeabi_d2f+0xfc>
 8002fdc:	1c72      	adds	r2, r6, #1
 8002fde:	2efe      	cmp	r6, #254	; 0xfe
 8002fe0:	d0d0      	beq.n	8002f84 <__aeabi_d2f+0x24>
 8002fe2:	0189      	lsls	r1, r1, #6
 8002fe4:	0a49      	lsrs	r1, r1, #9
 8002fe6:	b2d3      	uxtb	r3, r2
 8002fe8:	e7ce      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	e7cb      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002ff0:	0032      	movs	r2, r6
 8002ff2:	3217      	adds	r2, #23
 8002ff4:	db22      	blt.n	800303c <__aeabi_d2f+0xdc>
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	221e      	movs	r2, #30
 8002ffa:	0409      	lsls	r1, r1, #16
 8002ffc:	4308      	orrs	r0, r1
 8002ffe:	1b92      	subs	r2, r2, r6
 8003000:	2a1f      	cmp	r2, #31
 8003002:	dd1d      	ble.n	8003040 <__aeabi_d2f+0xe0>
 8003004:	2102      	movs	r1, #2
 8003006:	4249      	negs	r1, r1
 8003008:	1b8e      	subs	r6, r1, r6
 800300a:	0001      	movs	r1, r0
 800300c:	40f1      	lsrs	r1, r6
 800300e:	000e      	movs	r6, r1
 8003010:	2a20      	cmp	r2, #32
 8003012:	d004      	beq.n	800301e <__aeabi_d2f+0xbe>
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <__aeabi_d2f+0x108>)
 8003016:	4694      	mov	ip, r2
 8003018:	4463      	add	r3, ip
 800301a:	4098      	lsls	r0, r3
 800301c:	4305      	orrs	r5, r0
 800301e:	0029      	movs	r1, r5
 8003020:	1e4d      	subs	r5, r1, #1
 8003022:	41a9      	sbcs	r1, r5
 8003024:	4331      	orrs	r1, r6
 8003026:	2600      	movs	r6, #0
 8003028:	074b      	lsls	r3, r1, #29
 800302a:	d1ce      	bne.n	8002fca <__aeabi_d2f+0x6a>
 800302c:	2080      	movs	r0, #128	; 0x80
 800302e:	000b      	movs	r3, r1
 8003030:	04c0      	lsls	r0, r0, #19
 8003032:	2201      	movs	r2, #1
 8003034:	4003      	ands	r3, r0
 8003036:	4201      	tst	r1, r0
 8003038:	d1d3      	bne.n	8002fe2 <__aeabi_d2f+0x82>
 800303a:	e7af      	b.n	8002f9c <__aeabi_d2f+0x3c>
 800303c:	2300      	movs	r3, #0
 800303e:	e7ac      	b.n	8002f9a <__aeabi_d2f+0x3a>
 8003040:	490a      	ldr	r1, [pc, #40]	; (800306c <__aeabi_d2f+0x10c>)
 8003042:	468c      	mov	ip, r1
 8003044:	0029      	movs	r1, r5
 8003046:	4463      	add	r3, ip
 8003048:	40d1      	lsrs	r1, r2
 800304a:	409d      	lsls	r5, r3
 800304c:	000a      	movs	r2, r1
 800304e:	0029      	movs	r1, r5
 8003050:	4098      	lsls	r0, r3
 8003052:	1e4d      	subs	r5, r1, #1
 8003054:	41a9      	sbcs	r1, r5
 8003056:	4301      	orrs	r1, r0
 8003058:	4311      	orrs	r1, r2
 800305a:	e7e4      	b.n	8003026 <__aeabi_d2f+0xc6>
 800305c:	0033      	movs	r3, r6
 800305e:	e79d      	b.n	8002f9c <__aeabi_d2f+0x3c>
 8003060:	000007fe 	.word	0x000007fe
 8003064:	fffffc80 	.word	0xfffffc80
 8003068:	fffffca2 	.word	0xfffffca2
 800306c:	fffffc82 	.word	0xfffffc82

08003070 <__clzsi2>:
 8003070:	211c      	movs	r1, #28
 8003072:	2301      	movs	r3, #1
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	4298      	cmp	r0, r3
 8003078:	d301      	bcc.n	800307e <__clzsi2+0xe>
 800307a:	0c00      	lsrs	r0, r0, #16
 800307c:	3910      	subs	r1, #16
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	4298      	cmp	r0, r3
 8003082:	d301      	bcc.n	8003088 <__clzsi2+0x18>
 8003084:	0a00      	lsrs	r0, r0, #8
 8003086:	3908      	subs	r1, #8
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	4298      	cmp	r0, r3
 800308c:	d301      	bcc.n	8003092 <__clzsi2+0x22>
 800308e:	0900      	lsrs	r0, r0, #4
 8003090:	3904      	subs	r1, #4
 8003092:	a202      	add	r2, pc, #8	; (adr r2, 800309c <__clzsi2+0x2c>)
 8003094:	5c10      	ldrb	r0, [r2, r0]
 8003096:	1840      	adds	r0, r0, r1
 8003098:	4770      	bx	lr
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	02020304 	.word	0x02020304
 80030a0:	01010101 	.word	0x01010101
	...

080030ac <ICM_CS_Low>:
	dst <<= 8; \
	dst |= (src_low); \
} while (0);

void ICM_CS_Low(uint8_t index)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	0002      	movs	r2, r0
 80030b4:	1dfb      	adds	r3, r7, #7
 80030b6:	701a      	strb	r2, [r3, #0]
	if (index == 0)
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <ICM_CS_Low+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	480a      	ldr	r0, [pc, #40]	; (80030f0 <ICM_CS_Low+0x44>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	0019      	movs	r1, r3
 80030ca:	f006 fb7b 	bl	80097c4 <HAL_GPIO_WritePin>

	else if (index == 1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	}
}
 80030ce:	e00a      	b.n	80030e6 <ICM_CS_Low+0x3a>
	else if (index == 1)
 80030d0:	1dfb      	adds	r3, r7, #7
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d106      	bne.n	80030e6 <ICM_CS_Low+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4804      	ldr	r0, [pc, #16]	; (80030f0 <ICM_CS_Low+0x44>)
 80030de:	2200      	movs	r2, #0
 80030e0:	0019      	movs	r1, r3
 80030e2:	f006 fb6f 	bl	80097c4 <HAL_GPIO_WritePin>
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	50000800 	.word	0x50000800

080030f4 <ICM_CS_High>:

void ICM_CS_High(uint8_t index)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	0002      	movs	r2, r0
 80030fc:	1dfb      	adds	r3, r7, #7
 80030fe:	701a      	strb	r2, [r3, #0]
	if (index == 0)
 8003100:	1dfb      	adds	r3, r7, #7
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <ICM_CS_High+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	480a      	ldr	r0, [pc, #40]	; (8003138 <ICM_CS_High+0x44>)
 800310e:	2201      	movs	r2, #1
 8003110:	0019      	movs	r1, r3
 8003112:	f006 fb57 	bl	80097c4 <HAL_GPIO_WritePin>

	else if (index == 1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	}
}
 8003116:	e00a      	b.n	800312e <ICM_CS_High+0x3a>
	else if (index == 1)
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d106      	bne.n	800312e <ICM_CS_High+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4804      	ldr	r0, [pc, #16]	; (8003138 <ICM_CS_High+0x44>)
 8003126:	2201      	movs	r2, #1
 8003128:	0019      	movs	r1, r3
 800312a:	f006 fb4b 	bl	80097c4 <HAL_GPIO_WritePin>
}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b002      	add	sp, #8
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	50000800 	.word	0x50000800

0800313c <ICM_ReadBytes>:

void ICM_ReadBytes(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t *pData, uint16_t Size, uint8_t index) // ***
{
 800313c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	0008      	movs	r0, r1
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	0019      	movs	r1, r3
 800314a:	240b      	movs	r4, #11
 800314c:	193b      	adds	r3, r7, r4
 800314e:	1c02      	adds	r2, r0, #0
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	2508      	movs	r5, #8
 8003154:	197b      	adds	r3, r7, r5
 8003156:	1c0a      	adds	r2, r1, #0
 8003158:	801a      	strh	r2, [r3, #0]
	reg = reg | READ_FLAG;
 800315a:	193b      	adds	r3, r7, r4
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	4252      	negs	r2, r2
 8003162:	4313      	orrs	r3, r2
 8003164:	b2da      	uxtb	r2, r3
 8003166:	193b      	adds	r3, r7, r4
 8003168:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 800316a:	2620      	movs	r6, #32
 800316c:	2308      	movs	r3, #8
 800316e:	18fa      	adds	r2, r7, r3
 8003170:	1993      	adds	r3, r2, r6
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	0018      	movs	r0, r3
 8003176:	f7ff ff99 	bl	80030ac <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 800317a:	2301      	movs	r3, #1
 800317c:	425b      	negs	r3, r3
 800317e:	1939      	adds	r1, r7, r4
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f007 fca6 	bl	800aad4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, pData, Size,HAL_MAX_DELAY);
 8003188:	2301      	movs	r3, #1
 800318a:	425c      	negs	r4, r3
 800318c:	197b      	adds	r3, r7, r5
 800318e:	881a      	ldrh	r2, [r3, #0]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	0023      	movs	r3, r4
 8003196:	f007 fdf5 	bl	800ad84 <HAL_SPI_Receive>
	ICM_CS_High(index);
 800319a:	2308      	movs	r3, #8
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	199b      	adds	r3, r3, r6
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7ff ffa6 	bl	80030f4 <ICM_CS_High>
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b005      	add	sp, #20
 80031ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b0 <ICM_ReadOneByte>:
	ICM_CS_High(index);

}

void ICM_ReadOneByte(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t* pData, uint8_t index) // ***
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	0008      	movs	r0, r1
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	0019      	movs	r1, r3
 80031be:	240b      	movs	r4, #11
 80031c0:	193b      	adds	r3, r7, r4
 80031c2:	1c02      	adds	r2, r0, #0
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	200a      	movs	r0, #10
 80031c8:	183b      	adds	r3, r7, r0
 80031ca:	1c0a      	adds	r2, r1, #0
 80031cc:	701a      	strb	r2, [r3, #0]
	reg = reg | READ_FLAG;
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	4252      	negs	r2, r2
 80031d6:	4313      	orrs	r3, r2
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	193b      	adds	r3, r7, r4
 80031dc:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 80031de:	183b      	adds	r3, r7, r0
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7ff ff62 	bl	80030ac <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 80031e8:	2301      	movs	r3, #1
 80031ea:	425b      	negs	r3, r3
 80031ec:	1939      	adds	r1, r7, r4
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f007 fc6f 	bl	800aad4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f008 f8e0 	bl	800b3c0 <HAL_SPI_GetState>
 8003200:	0003      	movs	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d1f8      	bne.n	80031f8 <ICM_ReadOneByte+0x48>
		;
	HAL_SPI_Receive(hspi, pData, 1,HAL_MAX_DELAY);
 8003206:	2301      	movs	r3, #1
 8003208:	425b      	negs	r3, r3
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	f007 fdb8 	bl	800ad84 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	0018      	movs	r0, r3
 800321a:	f008 f8d1 	bl	800b3c0 <HAL_SPI_GetState>
 800321e:	0003      	movs	r3, r0
 8003220:	2b01      	cmp	r3, #1
 8003222:	d1f8      	bne.n	8003216 <ICM_ReadOneByte+0x66>
		;
	ICM_CS_High(index);
 8003224:	230a      	movs	r3, #10
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	0018      	movs	r0, r3
 800322c:	f7ff ff62 	bl	80030f4 <ICM_CS_High>
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b005      	add	sp, #20
 8003236:	bd90      	pop	{r4, r7, pc}

08003238 <ICM_WriteOneByte>:

void ICM_WriteOneByte(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t Data, uint8_t index) // ***
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	000c      	movs	r4, r1
 8003242:	0010      	movs	r0, r2
 8003244:	0019      	movs	r1, r3
 8003246:	1cfb      	adds	r3, r7, #3
 8003248:	1c22      	adds	r2, r4, #0
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	1cbb      	adds	r3, r7, #2
 800324e:	1c02      	adds	r2, r0, #0
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	1c7b      	adds	r3, r7, #1
 8003254:	1c0a      	adds	r2, r1, #0
 8003256:	701a      	strb	r2, [r3, #0]
	reg = reg & WRITE_FLAG;
 8003258:	1cfb      	adds	r3, r7, #3
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	227f      	movs	r2, #127	; 0x7f
 800325e:	4013      	ands	r3, r2
 8003260:	b2da      	uxtb	r2, r3
 8003262:	1cfb      	adds	r3, r7, #3
 8003264:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 8003266:	1c7b      	adds	r3, r7, #1
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff ff1e 	bl	80030ac <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 8003270:	2301      	movs	r3, #1
 8003272:	425b      	negs	r3, r3
 8003274:	1cf9      	adds	r1, r7, #3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f007 fc2b 	bl	800aad4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &Data, 1,HAL_MAX_DELAY);
 800327e:	2301      	movs	r3, #1
 8003280:	425b      	negs	r3, r3
 8003282:	1cb9      	adds	r1, r7, #2
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f007 fc24 	bl	800aad4 <HAL_SPI_Transmit>
	ICM_CS_High(index);
 800328c:	1c7b      	adds	r3, r7, #1
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	0018      	movs	r0, r3
 8003292:	f7ff ff2f 	bl	80030f4 <ICM_CS_High>
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	b003      	add	sp, #12
 800329c:	bd90      	pop	{r4, r7, pc}

0800329e <ICM_SelectBank>:

void ICM_SelectBank(SPI_HandleTypeDef* hspi,uint8_t reg, uint8_t index){
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	0008      	movs	r0, r1
 80032a8:	0011      	movs	r1, r2
 80032aa:	1cfb      	adds	r3, r7, #3
 80032ac:	1c02      	adds	r2, r0, #0
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	1cbb      	adds	r3, r7, #2
 80032b2:	1c0a      	adds	r2, r1, #0
 80032b4:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,USER_BANK_SEL,reg, index);
 80032b6:	1cbb      	adds	r3, r7, #2
 80032b8:	7819      	ldrb	r1, [r3, #0]
 80032ba:	1cfb      	adds	r3, r7, #3
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	000b      	movs	r3, r1
 80032c2:	217f      	movs	r1, #127	; 0x7f
 80032c4:	f7ff ffb8 	bl	8003238 <ICM_WriteOneByte>
}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <ICM_Initialize>:

/*Initializing the ICM20602*/
void ICM_Initialize(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t index)
{
 80032d0:	b5b0      	push	{r4, r5, r7, lr}
 80032d2:	b0a0      	sub	sp, #128	; 0x80
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	1dfb      	adds	r3, r7, #7
 80032dc:	701a      	strb	r2, [r3, #0]

	uint8_t temp;

	ICM_SelectBank(hspi,USER_BANK_0, index);
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2100      	movs	r1, #0
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7ff ffd9 	bl	800329e <ICM_SelectBank>
	temp = PWR_MGT_RESET;
 80032ec:	207f      	movs	r0, #127	; 0x7f
 80032ee:	183b      	adds	r3, r7, r0
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,REG_PWR_MGMT_1,temp, index);
 80032f4:	1dfb      	adds	r3, r7, #7
 80032f6:	7819      	ldrb	r1, [r3, #0]
 80032f8:	183b      	adds	r3, r7, r0
 80032fa:	781a      	ldrb	r2, [r3, #0]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	000b      	movs	r3, r1
 8003300:	2106      	movs	r1, #6
 8003302:	f7ff ff99 	bl	8003238 <ICM_WriteOneByte>
	HAL_Delay(20);
 8003306:	2014      	movs	r0, #20
 8003308:	f006 f80a 	bl	8009320 <HAL_Delay>

	char uart_buffer[100];
	sprintf((char*) uart_buffer, "SLAVE %i: Initializing IMU \r\n", index);
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	499f      	ldr	r1, [pc, #636]	; (8003590 <ICM_Initialize+0x2c0>)
 8003312:	2414      	movs	r4, #20
 8003314:	193b      	adds	r3, r7, r4
 8003316:	0018      	movs	r0, r3
 8003318:	f009 fd8c 	bl	800ce34 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 800331c:	193b      	adds	r3, r7, r4
 800331e:	0018      	movs	r0, r3
 8003320:	f7fc feee 	bl	8000100 <strlen>
 8003324:	0003      	movs	r3, r0
 8003326:	b29a      	uxth	r2, r3
 8003328:	23fa      	movs	r3, #250	; 0xfa
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	1939      	adds	r1, r7, r4
 800332e:	68b8      	ldr	r0, [r7, #8]
 8003330:	f008 fb98 	bl	800ba64 <HAL_UART_Transmit>
	HAL_Delay(100);
 8003334:	2064      	movs	r0, #100	; 0x64
 8003336:	f005 fff3 	bl	8009320 <HAL_Delay>

	/* Who am i test
	 WhoAmI is in register bank 0* */
	ICM_SelectBank(hspi,USER_BANK_0, index);
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2100      	movs	r1, #0
 8003342:	0018      	movs	r0, r3
 8003344:	f7ff ffab 	bl	800329e <ICM_SelectBank>
	if (ICM_WHOAMI(hspi, index))
 8003348:	1dfb      	adds	r3, r7, #7
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	0011      	movs	r1, r2
 8003350:	0018      	movs	r0, r3
 8003352:	f000 fe11 	bl	8003f78 <ICM_WHOAMI>
 8003356:	1e03      	subs	r3, r0, #0
 8003358:	d013      	beq.n	8003382 <ICM_Initialize+0xb2>
	{
		sprintf((char*) uart_buffer, "SLAVE %i: WHO AM I Success \r\n", index);
 800335a:	1dfb      	adds	r3, r7, #7
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	498d      	ldr	r1, [pc, #564]	; (8003594 <ICM_Initialize+0x2c4>)
 8003360:	193b      	adds	r3, r7, r4
 8003362:	0018      	movs	r0, r3
 8003364:	f009 fd66 	bl	800ce34 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003368:	193b      	adds	r3, r7, r4
 800336a:	0018      	movs	r0, r3
 800336c:	f7fc fec8 	bl	8000100 <strlen>
 8003370:	0003      	movs	r3, r0
 8003372:	b29a      	uxth	r2, r3
 8003374:	23fa      	movs	r3, #250	; 0xfa
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	1939      	adds	r1, r7, r4
 800337a:	68b8      	ldr	r0, [r7, #8]
 800337c:	f008 fb72 	bl	800ba64 <HAL_UART_Transmit>
 8003380:	e013      	b.n	80033aa <ICM_Initialize+0xda>
	} else {
		sprintf((char*) uart_buffer, "SLAVE %i: WHO AM I Failed \r\n", index);
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	4984      	ldr	r1, [pc, #528]	; (8003598 <ICM_Initialize+0x2c8>)
 8003388:	2414      	movs	r4, #20
 800338a:	193b      	adds	r3, r7, r4
 800338c:	0018      	movs	r0, r3
 800338e:	f009 fd51 	bl	800ce34 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003392:	193b      	adds	r3, r7, r4
 8003394:	0018      	movs	r0, r3
 8003396:	f7fc feb3 	bl	8000100 <strlen>
 800339a:	0003      	movs	r3, r0
 800339c:	b29a      	uxth	r2, r3
 800339e:	23fa      	movs	r3, #250	; 0xfa
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	1939      	adds	r1, r7, r4
 80033a4:	68b8      	ldr	r0, [r7, #8]
 80033a6:	f008 fb5d 	bl	800ba64 <HAL_UART_Transmit>
	}

	HAL_Delay(50);
 80033aa:	2032      	movs	r0, #50	; 0x32
 80033ac:	f005 ffb8 	bl	8009320 <HAL_Delay>

	uint8_t pwr_config = PWR_MGMT_1_CONFIG;
 80033b0:	247e      	movs	r4, #126	; 0x7e
 80033b2:	193b      	adds	r3, r7, r4
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
	uint8_t pwr_config2 = PWR_MGMT_2_CONFIG;
 80033b8:	257d      	movs	r5, #125	; 0x7d
 80033ba:	197b      	adds	r3, r7, r5
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]

	ICM_WriteOneByte(hspi, REG_PWR_MGMT_1, pwr_config, index);
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	7819      	ldrb	r1, [r3, #0]
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	000b      	movs	r3, r1
 80033cc:	2106      	movs	r1, #6
 80033ce:	f7ff ff33 	bl	8003238 <ICM_WriteOneByte>
	HAL_Delay(20);
 80033d2:	2014      	movs	r0, #20
 80033d4:	f005 ffa4 	bl	8009320 <HAL_Delay>
	ICM_WriteOneByte(hspi,REG_PWR_MGMT_2,pwr_config2, index);
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	7819      	ldrb	r1, [r3, #0]
 80033dc:	197b      	adds	r3, r7, r5
 80033de:	781a      	ldrb	r2, [r3, #0]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	000b      	movs	r3, r1
 80033e4:	2107      	movs	r1, #7
 80033e6:	f7ff ff27 	bl	8003238 <ICM_WriteOneByte>


	/*Turn Acceleration and Gyro OFF*/
	HAL_Delay(20);
 80033ea:	2014      	movs	r0, #20
 80033ec:	f005 ff98 	bl	8009320 <HAL_Delay>
	pwr_config = ACC_GYRO_OFF;
 80033f0:	193b      	adds	r3, r7, r4
 80033f2:	223f      	movs	r2, #63	; 0x3f
 80033f4:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_PWR_MGMT_2, pwr_config, index);
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	7819      	ldrb	r1, [r3, #0]
 80033fa:	193b      	adds	r3, r7, r4
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	000b      	movs	r3, r1
 8003402:	2107      	movs	r1, #7
 8003404:	f7ff ff18 	bl	8003238 <ICM_WriteOneByte>

	/* Disable Fifo and I2C slave*/
	temp = 0b00010000;
 8003408:	247f      	movs	r4, #127	; 0x7f
 800340a:	193b      	adds	r3, r7, r4
 800340c:	2210      	movs	r2, #16
 800340e:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_USER_CTRL, temp, index);
 8003410:	1dfb      	adds	r3, r7, #7
 8003412:	7819      	ldrb	r1, [r3, #0]
 8003414:	193b      	adds	r3, r7, r4
 8003416:	781a      	ldrb	r2, [r3, #0]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	000b      	movs	r3, r1
 800341c:	2103      	movs	r1, #3
 800341e:	f7ff ff0b 	bl	8003238 <ICM_WriteOneByte>


	/* Configure Gyro */
	ICM_SelectBank(hspi, USER_BANK_2, index);
 8003422:	1dfb      	adds	r3, r7, #7
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2120      	movs	r1, #32
 800342a:	0018      	movs	r0, r3
 800342c:	f7ff ff37 	bl	800329e <ICM_SelectBank>
	temp = 0;
 8003430:	0020      	movs	r0, r4
 8003432:	183b      	adds	r3, r7, r0
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_2, temp, index);
 8003438:	1dfb      	adds	r3, r7, #7
 800343a:	7819      	ldrb	r1, [r3, #0]
 800343c:	183b      	adds	r3, r7, r0
 800343e:	781a      	ldrb	r2, [r3, #0]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	000b      	movs	r3, r1
 8003444:	2102      	movs	r1, #2
 8003446:	f7ff fef7 	bl	8003238 <ICM_WriteOneByte>

	uint16_t dps = GYRO_DPS;
 800344a:	247a      	movs	r4, #122	; 0x7a
 800344c:	193b      	adds	r3, r7, r4
 800344e:	22fa      	movs	r2, #250	; 0xfa
 8003450:	0092      	lsls	r2, r2, #2
 8003452:	801a      	strh	r2, [r3, #0]
	if (ICM_GyroConfig(hspi, dps, index))
 8003454:	1dfb      	adds	r3, r7, #7
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	193b      	adds	r3, r7, r4
 800345a:	8819      	ldrh	r1, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	0018      	movs	r0, r3
 8003460:	f000 f8a4 	bl	80035ac <ICM_GyroConfig>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d015      	beq.n	8003494 <ICM_Initialize+0x1c4>
	{
		sprintf((char*) uart_buffer, "SLAVE %i: Gyro Configuration success DPS: %d \r\n", index, dps);
 8003468:	1dfb      	adds	r3, r7, #7
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	193b      	adds	r3, r7, r4
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	494a      	ldr	r1, [pc, #296]	; (800359c <ICM_Initialize+0x2cc>)
 8003472:	2414      	movs	r4, #20
 8003474:	1938      	adds	r0, r7, r4
 8003476:	f009 fcdd 	bl	800ce34 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 800347a:	193b      	adds	r3, r7, r4
 800347c:	0018      	movs	r0, r3
 800347e:	f7fc fe3f 	bl	8000100 <strlen>
 8003482:	0003      	movs	r3, r0
 8003484:	b29a      	uxth	r2, r3
 8003486:	23fa      	movs	r3, #250	; 0xfa
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	1939      	adds	r1, r7, r4
 800348c:	68b8      	ldr	r0, [r7, #8]
 800348e:	f008 fae9 	bl	800ba64 <HAL_UART_Transmit>
 8003492:	e013      	b.n	80034bc <ICM_Initialize+0x1ec>

	} else {
		sprintf((char*) uart_buffer, "SLAVE %i: Gyro Configuration failed \r\n", index);
 8003494:	1dfb      	adds	r3, r7, #7
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	4941      	ldr	r1, [pc, #260]	; (80035a0 <ICM_Initialize+0x2d0>)
 800349a:	2414      	movs	r4, #20
 800349c:	193b      	adds	r3, r7, r4
 800349e:	0018      	movs	r0, r3
 80034a0:	f009 fcc8 	bl	800ce34 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 80034a4:	193b      	adds	r3, r7, r4
 80034a6:	0018      	movs	r0, r3
 80034a8:	f7fc fe2a 	bl	8000100 <strlen>
 80034ac:	0003      	movs	r3, r0
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	23fa      	movs	r3, #250	; 0xfa
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	1939      	adds	r1, r7, r4
 80034b6:	68b8      	ldr	r0, [r7, #8]
 80034b8:	f008 fad4 	bl	800ba64 <HAL_UART_Transmit>

	}

	temp = 0;
 80034bc:	207f      	movs	r0, #127	; 0x7f
 80034be:	183b      	adds	r3, r7, r0
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG_2,temp, index);
 80034c4:	1dfb      	adds	r3, r7, #7
 80034c6:	7819      	ldrb	r1, [r3, #0]
 80034c8:	183b      	adds	r3, r7, r0
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	000b      	movs	r3, r1
 80034d0:	2115      	movs	r1, #21
 80034d2:	f7ff feb1 	bl	8003238 <ICM_WriteOneByte>
	/*Turn Acceleartion and Gyro ON*/
	HAL_Delay(20);
 80034d6:	2014      	movs	r0, #20
 80034d8:	f005 ff22 	bl	8009320 <HAL_Delay>
	pwr_config = ACC_GYRO_ON;
 80034dc:	247e      	movs	r4, #126	; 0x7e
 80034de:	193b      	adds	r3, r7, r4
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
	ICM_SelectBank(hspi,USER_BANK_0, index);
 80034e4:	1dfb      	adds	r3, r7, #7
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2100      	movs	r1, #0
 80034ec:	0018      	movs	r0, r3
 80034ee:	f7ff fed6 	bl	800329e <ICM_SelectBank>
	HAL_Delay(20);
 80034f2:	2014      	movs	r0, #20
 80034f4:	f005 ff14 	bl	8009320 <HAL_Delay>
	ICM_WriteOneByte(hspi, REG_PWR_MGMT_2, pwr_config, index);
 80034f8:	1dfb      	adds	r3, r7, #7
 80034fa:	7819      	ldrb	r1, [r3, #0]
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	781a      	ldrb	r2, [r3, #0]
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	000b      	movs	r3, r1
 8003504:	2107      	movs	r1, #7
 8003506:	f7ff fe97 	bl	8003238 <ICM_WriteOneByte>
	HAL_Delay(20);
 800350a:	2014      	movs	r0, #20
 800350c:	f005 ff08 	bl	8009320 <HAL_Delay>
	/* Configure Accelerometer */
	uint8_t acc_scale = ACCEL_SCALE_SELECT;
 8003510:	2479      	movs	r4, #121	; 0x79
 8003512:	193b      	adds	r3, r7, r4
 8003514:	2208      	movs	r2, #8
 8003516:	701a      	strb	r2, [r3, #0]

	if(ICM_AccConfig(hspi,acc_scale, index)){
 8003518:	1dfb      	adds	r3, r7, #7
 800351a:	781a      	ldrb	r2, [r3, #0]
 800351c:	193b      	adds	r3, r7, r4
 800351e:	7819      	ldrb	r1, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 fc70 	bl	8003e08 <ICM_AccConfig>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d015      	beq.n	8003558 <ICM_Initialize+0x288>
		sprintf((char*) uart_buffer,"SLAVE %i: Accelerometer Configuration success SELECT +-G: %d \r\n",index, acc_scale);
 800352c:	1dfb      	adds	r3, r7, #7
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	193b      	adds	r3, r7, r4
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	491b      	ldr	r1, [pc, #108]	; (80035a4 <ICM_Initialize+0x2d4>)
 8003536:	2414      	movs	r4, #20
 8003538:	1938      	adds	r0, r7, r4
 800353a:	f009 fc7b 	bl	800ce34 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 800353e:	193b      	adds	r3, r7, r4
 8003540:	0018      	movs	r0, r3
 8003542:	f7fc fddd 	bl	8000100 <strlen>
 8003546:	0003      	movs	r3, r0
 8003548:	b29a      	uxth	r2, r3
 800354a:	23fa      	movs	r3, #250	; 0xfa
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	1939      	adds	r1, r7, r4
 8003550:	68b8      	ldr	r0, [r7, #8]
 8003552:	f008 fa87 	bl	800ba64 <HAL_UART_Transmit>
 8003556:	e013      	b.n	8003580 <ICM_Initialize+0x2b0>
	}else{
		sprintf((char*) uart_buffer, "SLAVE %i: Accelerometer Configuration failed \r\n", index);
 8003558:	1dfb      	adds	r3, r7, #7
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	4912      	ldr	r1, [pc, #72]	; (80035a8 <ICM_Initialize+0x2d8>)
 800355e:	2414      	movs	r4, #20
 8003560:	193b      	adds	r3, r7, r4
 8003562:	0018      	movs	r0, r3
 8003564:	f009 fc66 	bl	800ce34 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003568:	193b      	adds	r3, r7, r4
 800356a:	0018      	movs	r0, r3
 800356c:	f7fc fdc8 	bl	8000100 <strlen>
 8003570:	0003      	movs	r3, r0
 8003572:	b29a      	uxth	r2, r3
 8003574:	23fa      	movs	r3, #250	; 0xfa
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	1939      	adds	r1, r7, r4
 800357a:	68b8      	ldr	r0, [r7, #8]
 800357c:	f008 fa72 	bl	800ba64 <HAL_UART_Transmit>
	}


	HAL_Delay(20);
 8003580:	2014      	movs	r0, #20
 8003582:	f005 fecd 	bl	8009320 <HAL_Delay>

	/*Configure*/


}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b020      	add	sp, #128	; 0x80
 800358c:	bdb0      	pop	{r4, r5, r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	08011b60 	.word	0x08011b60
 8003594:	08011b80 	.word	0x08011b80
 8003598:	08011ba0 	.word	0x08011ba0
 800359c:	08011bc0 	.word	0x08011bc0
 80035a0:	08011bf0 	.word	0x08011bf0
 80035a4:	08011c18 	.word	0x08011c18
 80035a8:	08011c58 	.word	0x08011c58

080035ac <ICM_GyroConfig>:


/*Configuring Gyro DPS settings in Gyro Config Register */
uint8_t ICM_GyroConfig(SPI_HandleTypeDef *hspi, uint16_t dps, uint8_t index)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	0008      	movs	r0, r1
 80035b6:	0011      	movs	r1, r2
 80035b8:	1cbb      	adds	r3, r7, #2
 80035ba:	1c02      	adds	r2, r0, #0
 80035bc:	801a      	strh	r2, [r3, #0]
 80035be:	1c7b      	adds	r3, r7, #1
 80035c0:	1c0a      	adds	r2, r1, #0
 80035c2:	701a      	strb	r2, [r3, #0]
	uint8_t config_byte;
	switch(dps)
 80035c4:	1cbb      	adds	r3, r7, #2
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	22fa      	movs	r2, #250	; 0xfa
 80035ca:	00d2      	lsls	r2, r2, #3
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d045      	beq.n	800365c <ICM_GyroConfig+0xb0>
 80035d0:	22fa      	movs	r2, #250	; 0xfa
 80035d2:	00d2      	lsls	r2, r2, #3
 80035d4:	4293      	cmp	r3, r2
 80035d6:	dc52      	bgt.n	800367e <ICM_GyroConfig+0xd2>
 80035d8:	22fa      	movs	r2, #250	; 0xfa
 80035da:	0092      	lsls	r2, r2, #2
 80035dc:	4293      	cmp	r3, r2
 80035de:	d02c      	beq.n	800363a <ICM_GyroConfig+0x8e>
 80035e0:	22fa      	movs	r2, #250	; 0xfa
 80035e2:	0092      	lsls	r2, r2, #2
 80035e4:	4293      	cmp	r3, r2
 80035e6:	dc4a      	bgt.n	800367e <ICM_GyroConfig+0xd2>
 80035e8:	2bfa      	cmp	r3, #250	; 0xfa
 80035ea:	d004      	beq.n	80035f6 <ICM_GyroConfig+0x4a>
 80035ec:	22fa      	movs	r2, #250	; 0xfa
 80035ee:	0052      	lsls	r2, r2, #1
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d011      	beq.n	8003618 <ICM_GyroConfig+0x6c>
 80035f4:	e043      	b.n	800367e <ICM_GyroConfig+0xd2>
	{
		case 250:
			config_byte = GYRO_250_DPS | GYRO_FILTER;
 80035f6:	200f      	movs	r0, #15
 80035f8:	183b      	adds	r3, r7, r0
 80035fa:	2229      	movs	r2, #41	; 0x29
 80035fc:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_250DPS;
 80035fe:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <ICM_GyroConfig+0x128>)
 8003600:	4a35      	ldr	r2, [pc, #212]	; (80036d8 <ICM_GyroConfig+0x12c>)
 8003602:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 8003604:	1c7b      	adds	r3, r7, #1
 8003606:	7819      	ldrb	r1, [r3, #0]
 8003608:	183b      	adds	r3, r7, r0
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	000b      	movs	r3, r1
 8003610:	2101      	movs	r1, #1
 8003612:	f7ff fe11 	bl	8003238 <ICM_WriteOneByte>
			break;
 8003616:	e040      	b.n	800369a <ICM_GyroConfig+0xee>
		case 500:
			config_byte = GYRO_500_DPS | GYRO_FILTER;
 8003618:	200f      	movs	r0, #15
 800361a:	183b      	adds	r3, r7, r0
 800361c:	222b      	movs	r2, #43	; 0x2b
 800361e:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_500DPS;
 8003620:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <ICM_GyroConfig+0x128>)
 8003622:	4a2e      	ldr	r2, [pc, #184]	; (80036dc <ICM_GyroConfig+0x130>)
 8003624:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 8003626:	1c7b      	adds	r3, r7, #1
 8003628:	7819      	ldrb	r1, [r3, #0]
 800362a:	183b      	adds	r3, r7, r0
 800362c:	781a      	ldrb	r2, [r3, #0]
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	000b      	movs	r3, r1
 8003632:	2101      	movs	r1, #1
 8003634:	f7ff fe00 	bl	8003238 <ICM_WriteOneByte>
			break;
 8003638:	e02f      	b.n	800369a <ICM_GyroConfig+0xee>
		case 1000:
			config_byte = GYRO_1000_DPS | GYRO_FILTER;
 800363a:	200f      	movs	r0, #15
 800363c:	183b      	adds	r3, r7, r0
 800363e:	222d      	movs	r2, #45	; 0x2d
 8003640:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_1000DPS;
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <ICM_GyroConfig+0x128>)
 8003644:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <ICM_GyroConfig+0x134>)
 8003646:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1,(uint8_t)config_byte, index);
 8003648:	1c7b      	adds	r3, r7, #1
 800364a:	7819      	ldrb	r1, [r3, #0]
 800364c:	183b      	adds	r3, r7, r0
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	000b      	movs	r3, r1
 8003654:	2101      	movs	r1, #1
 8003656:	f7ff fdef 	bl	8003238 <ICM_WriteOneByte>
			break;
 800365a:	e01e      	b.n	800369a <ICM_GyroConfig+0xee>
		case 2000:
			config_byte = GYRO_2000_DPS | GYRO_FILTER;
 800365c:	200f      	movs	r0, #15
 800365e:	183b      	adds	r3, r7, r0
 8003660:	222f      	movs	r2, #47	; 0x2f
 8003662:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_2000DPS;
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <ICM_GyroConfig+0x128>)
 8003666:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <ICM_GyroConfig+0x138>)
 8003668:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 800366a:	1c7b      	adds	r3, r7, #1
 800366c:	7819      	ldrb	r1, [r3, #0]
 800366e:	183b      	adds	r3, r7, r0
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	000b      	movs	r3, r1
 8003676:	2101      	movs	r1, #1
 8003678:	f7ff fdde 	bl	8003238 <ICM_WriteOneByte>
			break;
 800367c:	e00d      	b.n	800369a <ICM_GyroConfig+0xee>
		default:
			config_byte = GYRO_1000_DPS | GYRO_FILTER;
 800367e:	200f      	movs	r0, #15
 8003680:	183b      	adds	r3, r7, r0
 8003682:	222d      	movs	r2, #45	; 0x2d
 8003684:	701a      	strb	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 8003686:	1c7b      	adds	r3, r7, #1
 8003688:	7819      	ldrb	r1, [r3, #0]
 800368a:	183b      	adds	r3, r7, r0
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	000b      	movs	r3, r1
 8003692:	2101      	movs	r1, #1
 8003694:	f7ff fdd0 	bl	8003238 <ICM_WriteOneByte>
			break;
 8003698:	46c0      	nop			; (mov r8, r8)
	}

	HAL_Delay(10);
 800369a:	200a      	movs	r0, #10
 800369c:	f005 fe40 	bl	8009320 <HAL_Delay>

	uint8_t test = 0;
 80036a0:	210e      	movs	r1, #14
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]

	ICM_ReadOneByte(hspi, REG_GYRO_CONFIG_1, &test, index);
 80036a8:	1c7b      	adds	r3, r7, #1
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	000c      	movs	r4, r1
 80036ae:	187a      	adds	r2, r7, r1
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	2101      	movs	r1, #1
 80036b4:	f7ff fd7c 	bl	80031b0 <ICM_ReadOneByte>

	if (test != config_byte)
 80036b8:	193b      	adds	r3, r7, r4
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	220f      	movs	r2, #15
 80036be:	18ba      	adds	r2, r7, r2
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d001      	beq.n	80036ca <ICM_GyroConfig+0x11e>
	{

		return 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e000      	b.n	80036cc <ICM_GyroConfig+0x120>
	}
	return 1;
 80036ca:	2301      	movs	r3, #1
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b005      	add	sp, #20
 80036d2:	bd90      	pop	{r4, r7, pc}
 80036d4:	200003a0 	.word	0x200003a0
 80036d8:	43030000 	.word	0x43030000
 80036dc:	42830000 	.word	0x42830000
 80036e0:	42033333 	.word	0x42033333
 80036e4:	41833333 	.word	0x41833333

080036e8 <ICM_GyroCalibration>:


void ICM_GyroCalibration(SPI_HandleTypeDef *hspi,UART_HandleTypeDef* huart, float *gyro_bias, uint8_t index)
{
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ea:	46c6      	mov	lr, r8
 80036ec:	b500      	push	{lr}
 80036ee:	b0ca      	sub	sp, #296	; 0x128
 80036f0:	af06      	add	r7, sp, #24
 80036f2:	61f8      	str	r0, [r7, #28]
 80036f4:	61b9      	str	r1, [r7, #24]
 80036f6:	617a      	str	r2, [r7, #20]
 80036f8:	001a      	movs	r2, r3
 80036fa:	240b      	movs	r4, #11
 80036fc:	2308      	movs	r3, #8
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	191b      	adds	r3, r3, r4
 8003702:	701a      	strb	r2, [r3, #0]
	char uart_buffer[200];
	float gyro_data[3] = {0,0,0};
 8003704:	2128      	movs	r1, #40	; 0x28
 8003706:	2008      	movs	r0, #8
 8003708:	2308      	movs	r3, #8
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	181b      	adds	r3, r3, r0
 800370e:	185b      	adds	r3, r3, r1
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	2308      	movs	r3, #8
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	181b      	adds	r3, r3, r0
 800371a:	185b      	adds	r3, r3, r1
 800371c:	2200      	movs	r2, #0
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	2308      	movs	r3, #8
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	181b      	adds	r3, r3, r0
 8003726:	185b      	adds	r3, r3, r1
 8003728:	2200      	movs	r2, #0
 800372a:	609a      	str	r2, [r3, #8]
	float zero_bias[3] = {0,0,0};
 800372c:	211c      	movs	r1, #28
 800372e:	2308      	movs	r3, #8
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	181b      	adds	r3, r3, r0
 8003734:	185b      	adds	r3, r3, r1
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	2308      	movs	r3, #8
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	181b      	adds	r3, r3, r0
 8003740:	185b      	adds	r3, r3, r1
 8003742:	2200      	movs	r2, #0
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	2308      	movs	r3, #8
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	181b      	adds	r3, r3, r0
 800374c:	185b      	adds	r3, r3, r1
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
	float gyro_accumulated[3] = {0,0,0};
 8003752:	2110      	movs	r1, #16
 8003754:	2308      	movs	r3, #8
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	181b      	adds	r3, r3, r0
 800375a:	185b      	adds	r3, r3, r1
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	2308      	movs	r3, #8
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	181b      	adds	r3, r3, r0
 8003766:	185b      	adds	r3, r3, r1
 8003768:	2200      	movs	r2, #0
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	2308      	movs	r3, #8
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	181b      	adds	r3, r3, r0
 8003772:	185b      	adds	r3, r3, r1
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]

	ICM_SelectBank(hspi,USER_BANK_0, index);
 8003778:	2308      	movs	r3, #8
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	191b      	adds	r3, r3, r4
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2100      	movs	r1, #0
 8003784:	0018      	movs	r0, r3
 8003786:	f7ff fd8a 	bl	800329e <ICM_SelectBank>
	HAL_Delay(10);
 800378a:	200a      	movs	r0, #10
 800378c:	f005 fdc8 	bl	8009320 <HAL_Delay>

	for (int16_t i = 0; i < GYRO_CALIBRATION_SAMPLES; i++)
 8003790:	23fe      	movs	r3, #254	; 0xfe
 8003792:	2208      	movs	r2, #8
 8003794:	4694      	mov	ip, r2
 8003796:	2208      	movs	r2, #8
 8003798:	4690      	mov	r8, r2
 800379a:	44b8      	add	r8, r7
 800379c:	44c4      	add	ip, r8
 800379e:	4463      	add	r3, ip
 80037a0:	2200      	movs	r2, #0
 80037a2:	801a      	strh	r2, [r3, #0]
 80037a4:	e069      	b.n	800387a <ICM_GyroCalibration+0x192>
	{
		ICM_ReadGyroData(hspi, gyro_data, zero_bias, index);
 80037a6:	230b      	movs	r3, #11
 80037a8:	2208      	movs	r2, #8
 80037aa:	4694      	mov	ip, r2
 80037ac:	44bc      	add	ip, r7
 80037ae:	4463      	add	r3, ip
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	221c      	movs	r2, #28
 80037b4:	2108      	movs	r1, #8
 80037b6:	468c      	mov	ip, r1
 80037b8:	2108      	movs	r1, #8
 80037ba:	4688      	mov	r8, r1
 80037bc:	44b8      	add	r8, r7
 80037be:	44c4      	add	ip, r8
 80037c0:	4462      	add	r2, ip
 80037c2:	2528      	movs	r5, #40	; 0x28
 80037c4:	2608      	movs	r6, #8
 80037c6:	2108      	movs	r1, #8
 80037c8:	1879      	adds	r1, r7, r1
 80037ca:	1989      	adds	r1, r1, r6
 80037cc:	1949      	adds	r1, r1, r5
 80037ce:	69f8      	ldr	r0, [r7, #28]
 80037d0:	f000 f9bc 	bl	8003b4c <ICM_ReadGyroData>
		gyro_accumulated[0] += gyro_data[0];
 80037d4:	2410      	movs	r4, #16
 80037d6:	2308      	movs	r3, #8
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	199b      	adds	r3, r3, r6
 80037dc:	191b      	adds	r3, r3, r4
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	2308      	movs	r3, #8
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	199b      	adds	r3, r3, r6
 80037e6:	195b      	adds	r3, r3, r5
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1c19      	adds	r1, r3, #0
 80037ec:	1c10      	adds	r0, r2, #0
 80037ee:	f7fc fea9 	bl	8000544 <__aeabi_fadd>
 80037f2:	1c03      	adds	r3, r0, #0
 80037f4:	1c1a      	adds	r2, r3, #0
 80037f6:	2308      	movs	r3, #8
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	199b      	adds	r3, r3, r6
 80037fc:	191b      	adds	r3, r3, r4
 80037fe:	601a      	str	r2, [r3, #0]
		gyro_accumulated[1] += gyro_data[1];
 8003800:	2308      	movs	r3, #8
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	199b      	adds	r3, r3, r6
 8003806:	191b      	adds	r3, r3, r4
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	2308      	movs	r3, #8
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	199b      	adds	r3, r3, r6
 8003810:	195b      	adds	r3, r3, r5
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	1c19      	adds	r1, r3, #0
 8003816:	1c10      	adds	r0, r2, #0
 8003818:	f7fc fe94 	bl	8000544 <__aeabi_fadd>
 800381c:	1c03      	adds	r3, r0, #0
 800381e:	1c1a      	adds	r2, r3, #0
 8003820:	2308      	movs	r3, #8
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	199b      	adds	r3, r3, r6
 8003826:	191b      	adds	r3, r3, r4
 8003828:	605a      	str	r2, [r3, #4]
		gyro_accumulated[2] += gyro_data[2];
 800382a:	2308      	movs	r3, #8
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	199b      	adds	r3, r3, r6
 8003830:	191b      	adds	r3, r3, r4
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	2308      	movs	r3, #8
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	199b      	adds	r3, r3, r6
 800383a:	195b      	adds	r3, r3, r5
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	1c19      	adds	r1, r3, #0
 8003840:	1c10      	adds	r0, r2, #0
 8003842:	f7fc fe7f 	bl	8000544 <__aeabi_fadd>
 8003846:	1c03      	adds	r3, r0, #0
 8003848:	1c1a      	adds	r2, r3, #0
 800384a:	2308      	movs	r3, #8
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	199b      	adds	r3, r3, r6
 8003850:	191b      	adds	r3, r3, r4
 8003852:	609a      	str	r2, [r3, #8]
		HAL_Delay(20);
 8003854:	2014      	movs	r0, #20
 8003856:	f005 fd63 	bl	8009320 <HAL_Delay>
	for (int16_t i = 0; i < GYRO_CALIBRATION_SAMPLES; i++)
 800385a:	21fe      	movs	r1, #254	; 0xfe
 800385c:	0030      	movs	r0, r6
 800385e:	2308      	movs	r3, #8
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	199b      	adds	r3, r3, r6
 8003864:	185b      	adds	r3, r3, r1
 8003866:	2200      	movs	r2, #0
 8003868:	5e9b      	ldrsh	r3, [r3, r2]
 800386a:	b29b      	uxth	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	2308      	movs	r3, #8
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	181b      	adds	r3, r3, r0
 8003876:	185b      	adds	r3, r3, r1
 8003878:	801a      	strh	r2, [r3, #0]
 800387a:	23fe      	movs	r3, #254	; 0xfe
 800387c:	2208      	movs	r2, #8
 800387e:	4694      	mov	ip, r2
 8003880:	2208      	movs	r2, #8
 8003882:	4690      	mov	r8, r2
 8003884:	44b8      	add	r8, r7
 8003886:	44c4      	add	ip, r8
 8003888:	4463      	add	r3, ip
 800388a:	2200      	movs	r2, #0
 800388c:	5e9a      	ldrsh	r2, [r3, r2]
 800388e:	23fa      	movs	r3, #250	; 0xfa
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	429a      	cmp	r2, r3
 8003894:	db87      	blt.n	80037a6 <ICM_GyroCalibration+0xbe>
	}

	gyro_bias[0] =  -1*gyro_accumulated[0] / GYRO_CALIBRATION_SAMPLES;
 8003896:	2510      	movs	r5, #16
 8003898:	2608      	movs	r6, #8
 800389a:	2308      	movs	r3, #8
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	199b      	adds	r3, r3, r6
 80038a0:	195b      	adds	r3, r3, r5
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2280      	movs	r2, #128	; 0x80
 80038a6:	0612      	lsls	r2, r2, #24
 80038a8:	4053      	eors	r3, r2
 80038aa:	493b      	ldr	r1, [pc, #236]	; (8003998 <ICM_GyroCalibration+0x2b0>)
 80038ac:	1c18      	adds	r0, r3, #0
 80038ae:	f7fc ffe5 	bl	800087c <__aeabi_fdiv>
 80038b2:	1c03      	adds	r3, r0, #0
 80038b4:	1c1a      	adds	r2, r3, #0
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	601a      	str	r2, [r3, #0]
	gyro_bias[1] =  -1*gyro_accumulated[1] / GYRO_CALIBRATION_SAMPLES;
 80038ba:	2308      	movs	r3, #8
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	199b      	adds	r3, r3, r6
 80038c0:	195b      	adds	r3, r3, r5
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2280      	movs	r2, #128	; 0x80
 80038c6:	0612      	lsls	r2, r2, #24
 80038c8:	405a      	eors	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	1d1c      	adds	r4, r3, #4
 80038ce:	4932      	ldr	r1, [pc, #200]	; (8003998 <ICM_GyroCalibration+0x2b0>)
 80038d0:	1c10      	adds	r0, r2, #0
 80038d2:	f7fc ffd3 	bl	800087c <__aeabi_fdiv>
 80038d6:	1c03      	adds	r3, r0, #0
 80038d8:	6023      	str	r3, [r4, #0]
	gyro_bias[2] =  -1*gyro_accumulated[2] / GYRO_CALIBRATION_SAMPLES;
 80038da:	2308      	movs	r3, #8
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	199b      	adds	r3, r3, r6
 80038e0:	195b      	adds	r3, r3, r5
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2280      	movs	r2, #128	; 0x80
 80038e6:	0612      	lsls	r2, r2, #24
 80038e8:	405a      	eors	r2, r3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	3308      	adds	r3, #8
 80038ee:	001c      	movs	r4, r3
 80038f0:	4929      	ldr	r1, [pc, #164]	; (8003998 <ICM_GyroCalibration+0x2b0>)
 80038f2:	1c10      	adds	r0, r2, #0
 80038f4:	f7fc ffc2 	bl	800087c <__aeabi_fdiv>
 80038f8:	1c03      	adds	r3, r0, #0
 80038fa:	6023      	str	r3, [r4, #0]

	sprintf(uart_buffer,
 80038fc:	230b      	movs	r3, #11
 80038fe:	2208      	movs	r2, #8
 8003900:	4694      	mov	ip, r2
 8003902:	44bc      	add	ip, r7
 8003904:	4463      	add	r3, ip
 8003906:	781e      	ldrb	r6, [r3, #0]
					"SLAVE %i: Calibrating Gyroscope:"
					"Gyro x-offset: %.5f | Gyro y-offset: %.5f | Gyro z-offset: %.5f"
					"\r\n",
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 800390c:	1c18      	adds	r0, r3, #0
 800390e:	f7ff fadf 	bl	8002ed0 <__aeabi_f2d>
 8003912:	0004      	movs	r4, r0
 8003914:	000d      	movs	r5, r1
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	3304      	adds	r3, #4
 800391a:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 800391c:	1c18      	adds	r0, r3, #0
 800391e:	f7ff fad7 	bl	8002ed0 <__aeabi_f2d>
 8003922:	60b8      	str	r0, [r7, #8]
 8003924:	60f9      	str	r1, [r7, #12]
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	3308      	adds	r3, #8
 800392a:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 800392c:	1c18      	adds	r0, r3, #0
 800392e:	f7ff facf 	bl	8002ed0 <__aeabi_f2d>
 8003932:	6038      	str	r0, [r7, #0]
 8003934:	6079      	str	r1, [r7, #4]
 8003936:	4919      	ldr	r1, [pc, #100]	; (800399c <ICM_GyroCalibration+0x2b4>)
 8003938:	2034      	movs	r0, #52	; 0x34
 800393a:	2308      	movs	r3, #8
 800393c:	469c      	mov	ip, r3
 800393e:	2308      	movs	r3, #8
 8003940:	4698      	mov	r8, r3
 8003942:	44b8      	add	r8, r7
 8003944:	44c4      	add	ip, r8
 8003946:	4460      	add	r0, ip
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	9204      	str	r2, [sp, #16]
 800394e:	9305      	str	r3, [sp, #20]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	9202      	str	r2, [sp, #8]
 8003956:	9303      	str	r3, [sp, #12]
 8003958:	9400      	str	r4, [sp, #0]
 800395a:	9501      	str	r5, [sp, #4]
 800395c:	0032      	movs	r2, r6
 800395e:	f009 fa69 	bl	800ce34 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*) uart_buffer ,strlen(uart_buffer),1000);
 8003962:	2434      	movs	r4, #52	; 0x34
 8003964:	2608      	movs	r6, #8
 8003966:	2308      	movs	r3, #8
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	199b      	adds	r3, r3, r6
 800396c:	191b      	adds	r3, r3, r4
 800396e:	0018      	movs	r0, r3
 8003970:	f7fc fbc6 	bl	8000100 <strlen>
 8003974:	0003      	movs	r3, r0
 8003976:	b29a      	uxth	r2, r3
 8003978:	23fa      	movs	r3, #250	; 0xfa
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	2108      	movs	r1, #8
 800397e:	1879      	adds	r1, r7, r1
 8003980:	1989      	adds	r1, r1, r6
 8003982:	1909      	adds	r1, r1, r4
 8003984:	69b8      	ldr	r0, [r7, #24]
 8003986:	f008 f86d 	bl	800ba64 <HAL_UART_Transmit>
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b044      	add	sp, #272	; 0x110
 8003990:	bc80      	pop	{r7}
 8003992:	46b8      	mov	r8, r7
 8003994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	43fa0000 	.word	0x43fa0000
 800399c:	08011c88 	.word	0x08011c88

080039a0 <ICM_AccCalibration>:
					acc_bias[0], acc_bias[1], acc_bias[2]);
	HAL_UART_Transmit(huart, (uint8_t*)uart_buffer ,strlen(uart_buffer),1000);
}
**/

void ICM_AccCalibration(SPI_HandleTypeDef *hspi, UART_HandleTypeDef* huart, float *acc_bias, uint8_t index){
 80039a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a2:	b0c7      	sub	sp, #284	; 0x11c
 80039a4:	af04      	add	r7, sp, #16
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	001a      	movs	r2, r3
 80039ae:	4b64      	ldr	r3, [pc, #400]	; (8003b40 <ICM_AccCalibration+0x1a0>)
 80039b0:	2184      	movs	r1, #132	; 0x84
 80039b2:	0049      	lsls	r1, r1, #1
 80039b4:	468c      	mov	ip, r1
 80039b6:	44bc      	add	ip, r7
 80039b8:	4463      	add	r3, ip
 80039ba:	701a      	strb	r2, [r3, #0]

	char uart_buffer[200];
	float acc_data[3] = {0,0,0};
 80039bc:	2128      	movs	r1, #40	; 0x28
 80039be:	187b      	adds	r3, r7, r1
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	187b      	adds	r3, r7, r1
 80039c6:	2200      	movs	r2, #0
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	2200      	movs	r2, #0
 80039ce:	609a      	str	r2, [r3, #8]
	float acc_angle[2] = {0,0};
 80039d0:	2120      	movs	r1, #32
 80039d2:	187b      	adds	r3, r7, r1
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	2200      	movs	r2, #0
 80039dc:	605a      	str	r2, [r3, #4]
	struct euler_angles temp = {0,0,0};
 80039de:	2114      	movs	r1, #20
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	2200      	movs	r2, #0
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]

	ICM_SelectBank(hspi,USER_BANK_0, index);
 80039f2:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <ICM_AccCalibration+0x1a0>)
 80039f4:	2284      	movs	r2, #132	; 0x84
 80039f6:	0052      	lsls	r2, r2, #1
 80039f8:	4694      	mov	ip, r2
 80039fa:	44bc      	add	ip, r7
 80039fc:	4463      	add	r3, ip
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2100      	movs	r1, #0
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff fc4a 	bl	800329e <ICM_SelectBank>
	for (int16_t i = 0; i < 500; i++)
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	33ff      	adds	r3, #255	; 0xff
 8003a0e:	2200      	movs	r2, #0
 8003a10:	801a      	strh	r2, [r3, #0]
 8003a12:	e039      	b.n	8003a88 <ICM_AccCalibration+0xe8>
	{
		ICM_ReadAccData(hspi, acc_data, index);
 8003a14:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <ICM_AccCalibration+0x1a0>)
 8003a16:	2284      	movs	r2, #132	; 0x84
 8003a18:	0052      	lsls	r2, r2, #1
 8003a1a:	4694      	mov	ip, r2
 8003a1c:	44bc      	add	ip, r7
 8003a1e:	4463      	add	r3, ip
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	2428      	movs	r4, #40	; 0x28
 8003a24:	1939      	adds	r1, r7, r4
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f000 f94d 	bl	8003cc8 <ICM_ReadAccData>
		CalcAccLinearToEuler(acc_data, &temp);
 8003a2e:	2514      	movs	r5, #20
 8003a30:	197a      	adds	r2, r7, r5
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	0011      	movs	r1, r2
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 fc5e 	bl	80042f8 <CalcAccLinearToEuler>
		acc_angle[0] += temp.roll;
 8003a3c:	2420      	movs	r4, #32
 8003a3e:	193b      	adds	r3, r7, r4
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	197b      	adds	r3, r7, r5
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	1c19      	adds	r1, r3, #0
 8003a48:	1c10      	adds	r0, r2, #0
 8003a4a:	f7fc fd7b 	bl	8000544 <__aeabi_fadd>
 8003a4e:	1c03      	adds	r3, r0, #0
 8003a50:	1c1a      	adds	r2, r3, #0
 8003a52:	193b      	adds	r3, r7, r4
 8003a54:	601a      	str	r2, [r3, #0]
		acc_angle[1] += temp.pitch;
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	197b      	adds	r3, r7, r5
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	1c19      	adds	r1, r3, #0
 8003a60:	1c10      	adds	r0, r2, #0
 8003a62:	f7fc fd6f 	bl	8000544 <__aeabi_fadd>
 8003a66:	1c03      	adds	r3, r0, #0
 8003a68:	1c1a      	adds	r2, r3, #0
 8003a6a:	193b      	adds	r3, r7, r4
 8003a6c:	605a      	str	r2, [r3, #4]
		HAL_Delay(10);
 8003a6e:	200a      	movs	r0, #10
 8003a70:	f005 fc56 	bl	8009320 <HAL_Delay>
	for (int16_t i = 0; i < 500; i++)
 8003a74:	1dfb      	adds	r3, r7, #7
 8003a76:	33ff      	adds	r3, #255	; 0xff
 8003a78:	2200      	movs	r2, #0
 8003a7a:	5e9b      	ldrsh	r3, [r3, r2]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	33ff      	adds	r3, #255	; 0xff
 8003a86:	801a      	strh	r2, [r3, #0]
 8003a88:	1dfb      	adds	r3, r7, #7
 8003a8a:	33ff      	adds	r3, #255	; 0xff
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	5e9a      	ldrsh	r2, [r3, r2]
 8003a90:	23fa      	movs	r3, #250	; 0xfa
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	429a      	cmp	r2, r3
 8003a96:	dbbd      	blt.n	8003a14 <ICM_AccCalibration+0x74>
	}

	float temp1 =  (acc_angle[0] / 500.0);
 8003a98:	2420      	movs	r4, #32
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4929      	ldr	r1, [pc, #164]	; (8003b44 <ICM_AccCalibration+0x1a4>)
 8003aa0:	1c18      	adds	r0, r3, #0
 8003aa2:	f7fc feeb 	bl	800087c <__aeabi_fdiv>
 8003aa6:	1c03      	adds	r3, r0, #0
 8003aa8:	1c7a      	adds	r2, r7, #1
 8003aaa:	32ff      	adds	r2, #255	; 0xff
 8003aac:	6013      	str	r3, [r2, #0]
	float temp2 =  -(acc_angle[1] / 500.0);
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4924      	ldr	r1, [pc, #144]	; (8003b44 <ICM_AccCalibration+0x1a4>)
 8003ab4:	1c18      	adds	r0, r3, #0
 8003ab6:	f7fc fee1 	bl	800087c <__aeabi_fdiv>
 8003aba:	1c03      	adds	r3, r0, #0
 8003abc:	1c1a      	adds	r2, r3, #0
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	4053      	eors	r3, r2
 8003ac4:	21fc      	movs	r1, #252	; 0xfc
 8003ac6:	187a      	adds	r2, r7, r1
 8003ac8:	6013      	str	r3, [r2, #0]

	acc_bias[0] = temp1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	1c7a      	adds	r2, r7, #1
 8003ace:	32ff      	adds	r2, #255	; 0xff
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	601a      	str	r2, [r3, #0]
	acc_bias[1] = temp2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	187a      	adds	r2, r7, r1
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	601a      	str	r2, [r3, #0]

	sprintf(uart_buffer,
 8003ade:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <ICM_AccCalibration+0x1a0>)
 8003ae0:	2284      	movs	r2, #132	; 0x84
 8003ae2:	0052      	lsls	r2, r2, #1
 8003ae4:	4694      	mov	ip, r2
 8003ae6:	44bc      	add	ip, r7
 8003ae8:	4463      	add	r3, ip
 8003aea:	781e      	ldrb	r6, [r3, #0]
 8003aec:	1c7b      	adds	r3, r7, #1
 8003aee:	33ff      	adds	r3, #255	; 0xff
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	f7ff f9ed 	bl	8002ed0 <__aeabi_f2d>
 8003af6:	0004      	movs	r4, r0
 8003af8:	000d      	movs	r5, r1
 8003afa:	21fc      	movs	r1, #252	; 0xfc
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	f7ff f9e6 	bl	8002ed0 <__aeabi_f2d>
 8003b04:	0002      	movs	r2, r0
 8003b06:	000b      	movs	r3, r1
 8003b08:	490f      	ldr	r1, [pc, #60]	; (8003b48 <ICM_AccCalibration+0x1a8>)
 8003b0a:	2034      	movs	r0, #52	; 0x34
 8003b0c:	1838      	adds	r0, r7, r0
 8003b0e:	9202      	str	r2, [sp, #8]
 8003b10:	9303      	str	r3, [sp, #12]
 8003b12:	9400      	str	r4, [sp, #0]
 8003b14:	9501      	str	r5, [sp, #4]
 8003b16:	0032      	movs	r2, r6
 8003b18:	f009 f98c 	bl	800ce34 <siprintf>
		  "SLAVE %i: Accelerometer Calibration Succes: "
		  "Pitch: %.3f, Roll: %.3f \r\n",
		  index, temp1, temp2);
	HAL_UART_Transmit(huart,(uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8003b1c:	2434      	movs	r4, #52	; 0x34
 8003b1e:	193b      	adds	r3, r7, r4
 8003b20:	0018      	movs	r0, r3
 8003b22:	f7fc faed 	bl	8000100 <strlen>
 8003b26:	0003      	movs	r3, r0
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	23fa      	movs	r3, #250	; 0xfa
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	1939      	adds	r1, r7, r4
 8003b30:	68b8      	ldr	r0, [r7, #8]
 8003b32:	f007 ff97 	bl	800ba64 <HAL_UART_Transmit>
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b043      	add	sp, #268	; 0x10c
 8003b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	fffffefb 	.word	0xfffffefb
 8003b44:	43fa0000 	.word	0x43fa0000
 8003b48:	08011cec 	.word	0x08011cec

08003b4c <ICM_ReadGyroData>:


void ICM_ReadGyroData(SPI_HandleTypeDef *hspi, float* gyro_data, float *gyro_bias, uint8_t index)
{
 8003b4c:	b5b0      	push	{r4, r5, r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	001a      	movs	r2, r3
 8003b5a:	1cfb      	adds	r3, r7, #3
 8003b5c:	701a      	strb	r2, [r3, #0]
	uint8_t gyro_raw[6] = {0,0,0,0,0,0};
 8003b5e:	2018      	movs	r0, #24
 8003b60:	183b      	adds	r3, r7, r0
 8003b62:	4a57      	ldr	r2, [pc, #348]	; (8003cc0 <ICM_ReadGyroData+0x174>)
 8003b64:	6811      	ldr	r1, [r2, #0]
 8003b66:	6019      	str	r1, [r3, #0]
 8003b68:	8892      	ldrh	r2, [r2, #4]
 8003b6a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_int[3] = {0,0,0};
 8003b6c:	2410      	movs	r4, #16
 8003b6e:	193b      	adds	r3, r7, r4
 8003b70:	2200      	movs	r2, #0
 8003b72:	801a      	strh	r2, [r3, #0]
 8003b74:	193b      	adds	r3, r7, r4
 8003b76:	2200      	movs	r2, #0
 8003b78:	805a      	strh	r2, [r3, #2]
 8003b7a:	193b      	adds	r3, r7, r4
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	809a      	strh	r2, [r3, #4]

	ICM_ReadBytes(hspi, REG_GYRO_XOUT_H, gyro_raw, 6, index);
 8003b80:	0005      	movs	r5, r0
 8003b82:	183a      	adds	r2, r7, r0
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	1cfb      	adds	r3, r7, #3
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2306      	movs	r3, #6
 8003b8e:	2133      	movs	r1, #51	; 0x33
 8003b90:	f7ff fad4 	bl	800313c <ICM_ReadBytes>
	UINT8_TO_INT16(gyro_int[0], gyro_raw[0], gyro_raw[1]);
 8003b94:	0028      	movs	r0, r5
 8003b96:	183b      	adds	r3, r7, r0
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	b21a      	sxth	r2, r3
 8003b9c:	0021      	movs	r1, r4
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	801a      	strh	r2, [r3, #0]
 8003ba2:	187b      	adds	r3, r7, r1
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	5e9b      	ldrsh	r3, [r3, r2]
 8003ba8:	021b      	lsls	r3, r3, #8
 8003baa:	b21a      	sxth	r2, r3
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	801a      	strh	r2, [r3, #0]
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	5e9a      	ldrsh	r2, [r3, r2]
 8003bb6:	183b      	adds	r3, r7, r0
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	b21b      	sxth	r3, r3
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	b21a      	sxth	r2, r3
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro_int[1], gyro_raw[2], gyro_raw[3]);
 8003bc4:	183b      	adds	r3, r7, r0
 8003bc6:	789b      	ldrb	r3, [r3, #2]
 8003bc8:	b21a      	sxth	r2, r3
 8003bca:	187b      	adds	r3, r7, r1
 8003bcc:	805a      	strh	r2, [r3, #2]
 8003bce:	187b      	adds	r3, r7, r1
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	5e9b      	ldrsh	r3, [r3, r2]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	b21a      	sxth	r2, r3
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	805a      	strh	r2, [r3, #2]
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	2202      	movs	r2, #2
 8003be0:	5e9a      	ldrsh	r2, [r3, r2]
 8003be2:	183b      	adds	r3, r7, r0
 8003be4:	78db      	ldrb	r3, [r3, #3]
 8003be6:	b21b      	sxth	r3, r3
 8003be8:	4313      	orrs	r3, r2
 8003bea:	b21a      	sxth	r2, r3
 8003bec:	187b      	adds	r3, r7, r1
 8003bee:	805a      	strh	r2, [r3, #2]
	UINT8_TO_INT16(gyro_int[2], gyro_raw[4], gyro_raw[5]);
 8003bf0:	183b      	adds	r3, r7, r0
 8003bf2:	791b      	ldrb	r3, [r3, #4]
 8003bf4:	b21a      	sxth	r2, r3
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	809a      	strh	r2, [r3, #4]
 8003bfa:	187b      	adds	r3, r7, r1
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	5e9b      	ldrsh	r3, [r3, r2]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	b21a      	sxth	r2, r3
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	809a      	strh	r2, [r3, #4]
 8003c08:	000d      	movs	r5, r1
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	5e9a      	ldrsh	r2, [r3, r2]
 8003c10:	183b      	adds	r3, r7, r0
 8003c12:	795b      	ldrb	r3, [r3, #5]
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	197b      	adds	r3, r7, r5
 8003c1c:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (((float) gyro_int[0]  / g_gyro_scale_factor) + gyro_bias[0]);
 8003c1e:	197b      	adds	r3, r7, r5
 8003c20:	2200      	movs	r2, #0
 8003c22:	5e9b      	ldrsh	r3, [r3, r2]
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7fd faf5 	bl	8001214 <__aeabi_i2f>
 8003c2a:	1c02      	adds	r2, r0, #0
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <ICM_ReadGyroData+0x178>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	1c19      	adds	r1, r3, #0
 8003c32:	1c10      	adds	r0, r2, #0
 8003c34:	f7fc fe22 	bl	800087c <__aeabi_fdiv>
 8003c38:	1c03      	adds	r3, r0, #0
 8003c3a:	1c1a      	adds	r2, r3, #0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	1c19      	adds	r1, r3, #0
 8003c42:	1c10      	adds	r0, r2, #0
 8003c44:	f7fc fc7e 	bl	8000544 <__aeabi_fadd>
 8003c48:	1c03      	adds	r3, r0, #0
 8003c4a:	1c1a      	adds	r2, r3, #0
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	601a      	str	r2, [r3, #0]
	gyro_data[1] = (((float) gyro_int[1]  / g_gyro_scale_factor) + gyro_bias[1]);
 8003c50:	197b      	adds	r3, r7, r5
 8003c52:	2202      	movs	r2, #2
 8003c54:	5e9b      	ldrsh	r3, [r3, r2]
 8003c56:	0018      	movs	r0, r3
 8003c58:	f7fd fadc 	bl	8001214 <__aeabi_i2f>
 8003c5c:	1c02      	adds	r2, r0, #0
 8003c5e:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <ICM_ReadGyroData+0x178>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	1c19      	adds	r1, r3, #0
 8003c64:	1c10      	adds	r0, r2, #0
 8003c66:	f7fc fe09 	bl	800087c <__aeabi_fdiv>
 8003c6a:	1c03      	adds	r3, r0, #0
 8003c6c:	1c18      	adds	r0, r3, #0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	1d1c      	adds	r4, r3, #4
 8003c78:	1c11      	adds	r1, r2, #0
 8003c7a:	f7fc fc63 	bl	8000544 <__aeabi_fadd>
 8003c7e:	1c03      	adds	r3, r0, #0
 8003c80:	6023      	str	r3, [r4, #0]
	gyro_data[2] = (((float) gyro_int[2]  / g_gyro_scale_factor) + gyro_bias[2]);
 8003c82:	197b      	adds	r3, r7, r5
 8003c84:	2204      	movs	r2, #4
 8003c86:	5e9b      	ldrsh	r3, [r3, r2]
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7fd fac3 	bl	8001214 <__aeabi_i2f>
 8003c8e:	1c02      	adds	r2, r0, #0
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <ICM_ReadGyroData+0x178>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	1c19      	adds	r1, r3, #0
 8003c96:	1c10      	adds	r0, r2, #0
 8003c98:	f7fc fdf0 	bl	800087c <__aeabi_fdiv>
 8003c9c:	1c03      	adds	r3, r0, #0
 8003c9e:	1c18      	adds	r0, r3, #0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	3308      	adds	r3, #8
 8003caa:	001c      	movs	r4, r3
 8003cac:	1c11      	adds	r1, r2, #0
 8003cae:	f7fc fc49 	bl	8000544 <__aeabi_fadd>
 8003cb2:	1c03      	adds	r3, r0, #0
 8003cb4:	6023      	str	r3, [r4, #0]
}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b008      	add	sp, #32
 8003cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	08011d34 	.word	0x08011d34
 8003cc4:	200003a0 	.word	0x200003a0

08003cc8 <ICM_ReadAccData>:


void ICM_ReadAccData(SPI_HandleTypeDef *hspi, float* accel_data, uint8_t index){
 8003cc8:	b5b0      	push	{r4, r5, r7, lr}
 8003cca:	b08a      	sub	sp, #40	; 0x28
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	1dfb      	adds	r3, r7, #7
 8003cd4:	701a      	strb	r2, [r3, #0]

	uint8_t acc_data[6] = {0,0,0,0,0,0};
 8003cd6:	2018      	movs	r0, #24
 8003cd8:	183b      	adds	r3, r7, r0
 8003cda:	4a49      	ldr	r2, [pc, #292]	; (8003e00 <ICM_ReadAccData+0x138>)
 8003cdc:	6811      	ldr	r1, [r2, #0]
 8003cde:	6019      	str	r1, [r3, #0]
 8003ce0:	8892      	ldrh	r2, [r2, #4]
 8003ce2:	809a      	strh	r2, [r3, #4]
	int16_t acc_int[3] = {0,0,0};
 8003ce4:	2410      	movs	r4, #16
 8003ce6:	193b      	adds	r3, r7, r4
 8003ce8:	2200      	movs	r2, #0
 8003cea:	801a      	strh	r2, [r3, #0]
 8003cec:	193b      	adds	r3, r7, r4
 8003cee:	2200      	movs	r2, #0
 8003cf0:	805a      	strh	r2, [r3, #2]
 8003cf2:	193b      	adds	r3, r7, r4
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	809a      	strh	r2, [r3, #4]
	ICM_ReadBytes(hspi, REG_ACCEL_XOUT_H, acc_data, 6, index);
 8003cf8:	0005      	movs	r5, r0
 8003cfa:	183a      	adds	r2, r7, r0
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	1dfb      	adds	r3, r7, #7
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2306      	movs	r3, #6
 8003d06:	212d      	movs	r1, #45	; 0x2d
 8003d08:	f7ff fa18 	bl	800313c <ICM_ReadBytes>

	UINT8_TO_INT16(acc_int[0],acc_data[0], acc_data[1]);
 8003d0c:	0028      	movs	r0, r5
 8003d0e:	183b      	adds	r3, r7, r0
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	b21a      	sxth	r2, r3
 8003d14:	0021      	movs	r1, r4
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	5e9b      	ldrsh	r3, [r3, r2]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	b21a      	sxth	r2, r3
 8003d24:	187b      	adds	r3, r7, r1
 8003d26:	801a      	strh	r2, [r3, #0]
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	5e9a      	ldrsh	r2, [r3, r2]
 8003d2e:	183b      	adds	r3, r7, r0
 8003d30:	785b      	ldrb	r3, [r3, #1]
 8003d32:	b21b      	sxth	r3, r3
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b21a      	sxth	r2, r3
 8003d38:	187b      	adds	r3, r7, r1
 8003d3a:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(acc_int[1],acc_data[2], acc_data[3]);
 8003d3c:	183b      	adds	r3, r7, r0
 8003d3e:	789b      	ldrb	r3, [r3, #2]
 8003d40:	b21a      	sxth	r2, r3
 8003d42:	187b      	adds	r3, r7, r1
 8003d44:	805a      	strh	r2, [r3, #2]
 8003d46:	187b      	adds	r3, r7, r1
 8003d48:	2202      	movs	r2, #2
 8003d4a:	5e9b      	ldrsh	r3, [r3, r2]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	b21a      	sxth	r2, r3
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	805a      	strh	r2, [r3, #2]
 8003d54:	187b      	adds	r3, r7, r1
 8003d56:	2202      	movs	r2, #2
 8003d58:	5e9a      	ldrsh	r2, [r3, r2]
 8003d5a:	183b      	adds	r3, r7, r0
 8003d5c:	78db      	ldrb	r3, [r3, #3]
 8003d5e:	b21b      	sxth	r3, r3
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b21a      	sxth	r2, r3
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	805a      	strh	r2, [r3, #2]
	UINT8_TO_INT16(acc_int[2],acc_data[4], acc_data[5]);
 8003d68:	183b      	adds	r3, r7, r0
 8003d6a:	791b      	ldrb	r3, [r3, #4]
 8003d6c:	b21a      	sxth	r2, r3
 8003d6e:	187b      	adds	r3, r7, r1
 8003d70:	809a      	strh	r2, [r3, #4]
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	2204      	movs	r2, #4
 8003d76:	5e9b      	ldrsh	r3, [r3, r2]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	b21a      	sxth	r2, r3
 8003d7c:	187b      	adds	r3, r7, r1
 8003d7e:	809a      	strh	r2, [r3, #4]
 8003d80:	187b      	adds	r3, r7, r1
 8003d82:	2204      	movs	r2, #4
 8003d84:	5e9a      	ldrsh	r2, [r3, r2]
 8003d86:	183b      	adds	r3, r7, r0
 8003d88:	795b      	ldrb	r3, [r3, #5]
 8003d8a:	b21b      	sxth	r3, r3
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	b21a      	sxth	r2, r3
 8003d90:	000d      	movs	r5, r1
 8003d92:	197b      	adds	r3, r7, r5
 8003d94:	809a      	strh	r2, [r3, #4]

	accel_data[0] = (float)acc_int[0] / acc_scale_factor;
 8003d96:	197b      	adds	r3, r7, r5
 8003d98:	2200      	movs	r2, #0
 8003d9a:	5e9b      	ldrsh	r3, [r3, r2]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7fd fa39 	bl	8001214 <__aeabi_i2f>
 8003da2:	1c02      	adds	r2, r0, #0
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <ICM_ReadAccData+0x13c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	1c19      	adds	r1, r3, #0
 8003daa:	1c10      	adds	r0, r2, #0
 8003dac:	f7fc fd66 	bl	800087c <__aeabi_fdiv>
 8003db0:	1c03      	adds	r3, r0, #0
 8003db2:	1c1a      	adds	r2, r3, #0
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	601a      	str	r2, [r3, #0]
	accel_data[1] = (float)acc_int[1] / acc_scale_factor;
 8003db8:	197b      	adds	r3, r7, r5
 8003dba:	2202      	movs	r2, #2
 8003dbc:	5e9b      	ldrsh	r3, [r3, r2]
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7fd fa28 	bl	8001214 <__aeabi_i2f>
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <ICM_ReadAccData+0x13c>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	1d1c      	adds	r4, r3, #4
 8003dcc:	1c11      	adds	r1, r2, #0
 8003dce:	f7fc fd55 	bl	800087c <__aeabi_fdiv>
 8003dd2:	1c03      	adds	r3, r0, #0
 8003dd4:	6023      	str	r3, [r4, #0]
	accel_data[2] = (float)acc_int[2] / acc_scale_factor;
 8003dd6:	197b      	adds	r3, r7, r5
 8003dd8:	2204      	movs	r2, #4
 8003dda:	5e9b      	ldrsh	r3, [r3, r2]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7fd fa19 	bl	8001214 <__aeabi_i2f>
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <ICM_ReadAccData+0x13c>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	3308      	adds	r3, #8
 8003dea:	001c      	movs	r4, r3
 8003dec:	1c11      	adds	r1, r2, #0
 8003dee:	f7fc fd45 	bl	800087c <__aeabi_fdiv>
 8003df2:	1c03      	adds	r3, r0, #0
 8003df4:	6023      	str	r3, [r4, #0]
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b008      	add	sp, #32
 8003dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	08011d34 	.word	0x08011d34
 8003e04:	20000338 	.word	0x20000338

08003e08 <ICM_AccConfig>:

/*configure accelerometer sensitivity and scaler**/
uint8_t ICM_AccConfig(SPI_HandleTypeDef *hspi, uint8_t sensitivity, uint8_t index){
 8003e08:	b5b0      	push	{r4, r5, r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	0008      	movs	r0, r1
 8003e12:	0011      	movs	r1, r2
 8003e14:	1cfb      	adds	r3, r7, #3
 8003e16:	1c02      	adds	r2, r0, #0
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	1cbb      	adds	r3, r7, #2
 8003e1c:	1c0a      	adds	r2, r1, #0
 8003e1e:	701a      	strb	r2, [r3, #0]

	ICM_SelectBank(hspi,USER_BANK_2, index);
 8003e20:	1cbb      	adds	r3, r7, #2
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2120      	movs	r1, #32
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f7ff fa38 	bl	800329e <ICM_SelectBank>
	uint8_t config_byte_acc;
	uint8_t config2 = 0;
 8003e2e:	200e      	movs	r0, #14
 8003e30:	183b      	adds	r3, r7, r0
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_ACCEL_CONFIG_2, (uint8_t)config2, index);
 8003e36:	1cbb      	adds	r3, r7, #2
 8003e38:	7819      	ldrb	r1, [r3, #0]
 8003e3a:	183b      	adds	r3, r7, r0
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	000b      	movs	r3, r1
 8003e42:	2115      	movs	r1, #21
 8003e44:	f7ff f9f8 	bl	8003238 <ICM_WriteOneByte>

	switch(sensitivity){
 8003e48:	1cfb      	adds	r3, r7, #3
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d03e      	beq.n	8003ece <ICM_AccConfig+0xc6>
 8003e50:	dc4f      	bgt.n	8003ef2 <ICM_AccConfig+0xea>
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d029      	beq.n	8003eaa <ICM_AccConfig+0xa2>
 8003e56:	dc4c      	bgt.n	8003ef2 <ICM_AccConfig+0xea>
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d002      	beq.n	8003e62 <ICM_AccConfig+0x5a>
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d012      	beq.n	8003e86 <ICM_AccConfig+0x7e>
 8003e60:	e047      	b.n	8003ef2 <ICM_AccConfig+0xea>
	case 2:
		config_byte_acc = ACCEL_CONFIG_2G | ACC_FILTER;
 8003e62:	200f      	movs	r0, #15
 8003e64:	183b      	adds	r3, r7, r0
 8003e66:	2231      	movs	r2, #49	; 0x31
 8003e68:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_2G;
 8003e6a:	4b42      	ldr	r3, [pc, #264]	; (8003f74 <ICM_AccConfig+0x16c>)
 8003e6c:	228d      	movs	r2, #141	; 0x8d
 8003e6e:	05d2      	lsls	r2, r2, #23
 8003e70:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003e72:	1cbb      	adds	r3, r7, #2
 8003e74:	7819      	ldrb	r1, [r3, #0]
 8003e76:	183b      	adds	r3, r7, r0
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	000b      	movs	r3, r1
 8003e7e:	2114      	movs	r1, #20
 8003e80:	f7ff f9da 	bl	8003238 <ICM_WriteOneByte>
	break;
 8003e84:	e046      	b.n	8003f14 <ICM_AccConfig+0x10c>
	case 4:
		config_byte_acc = ACCEL_CONFIG_4G | ACC_FILTER;
 8003e86:	200f      	movs	r0, #15
 8003e88:	183b      	adds	r3, r7, r0
 8003e8a:	2233      	movs	r2, #51	; 0x33
 8003e8c:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_4G;
 8003e8e:	4b39      	ldr	r3, [pc, #228]	; (8003f74 <ICM_AccConfig+0x16c>)
 8003e90:	228c      	movs	r2, #140	; 0x8c
 8003e92:	05d2      	lsls	r2, r2, #23
 8003e94:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003e96:	1cbb      	adds	r3, r7, #2
 8003e98:	7819      	ldrb	r1, [r3, #0]
 8003e9a:	183b      	adds	r3, r7, r0
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	000b      	movs	r3, r1
 8003ea2:	2114      	movs	r1, #20
 8003ea4:	f7ff f9c8 	bl	8003238 <ICM_WriteOneByte>
	break;
 8003ea8:	e034      	b.n	8003f14 <ICM_AccConfig+0x10c>
	case 8:
		config_byte_acc = ACCEL_CONFIG_8G | ACC_FILTER;
 8003eaa:	200f      	movs	r0, #15
 8003eac:	183b      	adds	r3, r7, r0
 8003eae:	2235      	movs	r2, #53	; 0x35
 8003eb0:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_8G;
 8003eb2:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <ICM_AccConfig+0x16c>)
 8003eb4:	228b      	movs	r2, #139	; 0x8b
 8003eb6:	05d2      	lsls	r2, r2, #23
 8003eb8:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003eba:	1cbb      	adds	r3, r7, #2
 8003ebc:	7819      	ldrb	r1, [r3, #0]
 8003ebe:	183b      	adds	r3, r7, r0
 8003ec0:	781a      	ldrb	r2, [r3, #0]
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	000b      	movs	r3, r1
 8003ec6:	2114      	movs	r1, #20
 8003ec8:	f7ff f9b6 	bl	8003238 <ICM_WriteOneByte>
	break;
 8003ecc:	e022      	b.n	8003f14 <ICM_AccConfig+0x10c>
	case 16:
		config_byte_acc = ACCEL_CONFIG_16G | ACC_FILTER;
 8003ece:	200f      	movs	r0, #15
 8003ed0:	183b      	adds	r3, r7, r0
 8003ed2:	2237      	movs	r2, #55	; 0x37
 8003ed4:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_16G;
 8003ed6:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <ICM_AccConfig+0x16c>)
 8003ed8:	228a      	movs	r2, #138	; 0x8a
 8003eda:	05d2      	lsls	r2, r2, #23
 8003edc:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003ede:	1cbb      	adds	r3, r7, #2
 8003ee0:	7819      	ldrb	r1, [r3, #0]
 8003ee2:	183b      	adds	r3, r7, r0
 8003ee4:	781a      	ldrb	r2, [r3, #0]
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	000b      	movs	r3, r1
 8003eea:	2114      	movs	r1, #20
 8003eec:	f7ff f9a4 	bl	8003238 <ICM_WriteOneByte>
	break;
 8003ef0:	e010      	b.n	8003f14 <ICM_AccConfig+0x10c>
	default:
		config_byte_acc = ACCEL_CONFIG_2G | ACC_FILTER;
 8003ef2:	200f      	movs	r0, #15
 8003ef4:	183b      	adds	r3, r7, r0
 8003ef6:	2231      	movs	r2, #49	; 0x31
 8003ef8:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_2G;
 8003efa:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <ICM_AccConfig+0x16c>)
 8003efc:	228d      	movs	r2, #141	; 0x8d
 8003efe:	05d2      	lsls	r2, r2, #23
 8003f00:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003f02:	1cbb      	adds	r3, r7, #2
 8003f04:	7819      	ldrb	r1, [r3, #0]
 8003f06:	183b      	adds	r3, r7, r0
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	000b      	movs	r3, r1
 8003f0e:	2114      	movs	r1, #20
 8003f10:	f7ff f992 	bl	8003238 <ICM_WriteOneByte>
	}

	HAL_Delay(20);
 8003f14:	2014      	movs	r0, #20
 8003f16:	f005 fa03 	bl	8009320 <HAL_Delay>

	uint8_t test1 = 0;
 8003f1a:	210d      	movs	r1, #13
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
	uint8_t test2 = 0;
 8003f22:	250c      	movs	r5, #12
 8003f24:	197b      	adds	r3, r7, r5
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]

	ICM_ReadOneByte(hspi, REG_ACCEL_CONFIG, &test1, index);
 8003f2a:	1cbb      	adds	r3, r7, #2
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	000c      	movs	r4, r1
 8003f30:	187a      	adds	r2, r7, r1
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	2114      	movs	r1, #20
 8003f36:	f7ff f93b 	bl	80031b0 <ICM_ReadOneByte>
	ICM_ReadOneByte(hspi, REG_ACCEL_CONFIG_2, &test2, index);
 8003f3a:	1cbb      	adds	r3, r7, #2
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	197a      	adds	r2, r7, r5
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	2115      	movs	r1, #21
 8003f44:	f7ff f934 	bl	80031b0 <ICM_ReadOneByte>

	if((test1 != config_byte_acc) || (test2 != config2)){
 8003f48:	193b      	adds	r3, r7, r4
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	18ba      	adds	r2, r7, r2
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d106      	bne.n	8003f64 <ICM_AccConfig+0x15c>
 8003f56:	197b      	adds	r3, r7, r5
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	220e      	movs	r2, #14
 8003f5c:	18ba      	adds	r2, r7, r2
 8003f5e:	7812      	ldrb	r2, [r2, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <ICM_AccConfig+0x160>
		return 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <ICM_AccConfig+0x162>
	}else{
		return 1;
 8003f68:	2301      	movs	r3, #1
	}

}
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b004      	add	sp, #16
 8003f70:	bdb0      	pop	{r4, r5, r7, pc}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	20000338 	.word	0x20000338

08003f78 <ICM_WHOAMI>:

uint8_t ICM_WHOAMI(SPI_HandleTypeDef *hspi, uint8_t index) {
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	000a      	movs	r2, r1
 8003f82:	1cfb      	adds	r3, r7, #3
 8003f84:	701a      	strb	r2, [r3, #0]
	uint8_t test = 0x00;
 8003f86:	210f      	movs	r1, #15
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
	ICM_ReadOneByte(hspi, REG_WHO_AM_I , &test, index);
 8003f8e:	1cfb      	adds	r3, r7, #3
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	000c      	movs	r4, r1
 8003f94:	187a      	adds	r2, r7, r1
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f7ff f909 	bl	80031b0 <ICM_ReadOneByte>
	if (test != REG_WHO_AM_I_CONST)
 8003f9e:	193b      	adds	r3, r7, r4
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2bea      	cmp	r3, #234	; 0xea
 8003fa4:	d001      	beq.n	8003faa <ICM_WHOAMI+0x32>
	{
		return 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <ICM_WHOAMI+0x34>
	} else {
		return 1;
 8003faa:	2301      	movs	r3, #1
	}
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b005      	add	sp, #20
 8003fb2:	bd90      	pop	{r4, r7, pc}

08003fb4 <CalcQuaternionToEuler>:

/*Madgwick Filter Parameters */
static float Beta = 0.1;

void CalcQuaternionToEuler(struct quaternion quat, struct euler_angles* eu)
{
 8003fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	2608      	movs	r6, #8
 8003fbc:	19bc      	adds	r4, r7, r6
 8003fbe:	6020      	str	r0, [r4, #0]
 8003fc0:	6061      	str	r1, [r4, #4]
 8003fc2:	60a2      	str	r2, [r4, #8]
 8003fc4:	60e3      	str	r3, [r4, #12]
	eu->roll = atan2((quat.q1*quat.q2 + quat.q3*quat.q4),0.5 - (quat.q2*quat.q2 + quat.q3*quat.q3))*RAD_2_DEG;
 8003fc6:	19bb      	adds	r3, r7, r6
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	19bb      	adds	r3, r7, r6
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	1c19      	adds	r1, r3, #0
 8003fd0:	1c10      	adds	r0, r2, #0
 8003fd2:	f7fc fe1d 	bl	8000c10 <__aeabi_fmul>
 8003fd6:	1c03      	adds	r3, r0, #0
 8003fd8:	1c1c      	adds	r4, r3, #0
 8003fda:	19bb      	adds	r3, r7, r6
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	19bb      	adds	r3, r7, r6
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	1c19      	adds	r1, r3, #0
 8003fe4:	1c10      	adds	r0, r2, #0
 8003fe6:	f7fc fe13 	bl	8000c10 <__aeabi_fmul>
 8003fea:	1c03      	adds	r3, r0, #0
 8003fec:	1c19      	adds	r1, r3, #0
 8003fee:	1c20      	adds	r0, r4, #0
 8003ff0:	f7fc faa8 	bl	8000544 <__aeabi_fadd>
 8003ff4:	1c03      	adds	r3, r0, #0
 8003ff6:	1c18      	adds	r0, r3, #0
 8003ff8:	f7fe ff6a 	bl	8002ed0 <__aeabi_f2d>
 8003ffc:	0004      	movs	r4, r0
 8003ffe:	000d      	movs	r5, r1
 8004000:	19bb      	adds	r3, r7, r6
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	19bb      	adds	r3, r7, r6
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	1c19      	adds	r1, r3, #0
 800400a:	1c10      	adds	r0, r2, #0
 800400c:	f7fc fe00 	bl	8000c10 <__aeabi_fmul>
 8004010:	1c03      	adds	r3, r0, #0
 8004012:	1c1e      	adds	r6, r3, #0
 8004014:	2108      	movs	r1, #8
 8004016:	187b      	adds	r3, r7, r1
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	187b      	adds	r3, r7, r1
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	1c19      	adds	r1, r3, #0
 8004020:	1c10      	adds	r0, r2, #0
 8004022:	f7fc fdf5 	bl	8000c10 <__aeabi_fmul>
 8004026:	1c03      	adds	r3, r0, #0
 8004028:	1c19      	adds	r1, r3, #0
 800402a:	1c30      	adds	r0, r6, #0
 800402c:	f7fc fa8a 	bl	8000544 <__aeabi_fadd>
 8004030:	1c03      	adds	r3, r0, #0
 8004032:	1c18      	adds	r0, r3, #0
 8004034:	f7fe ff4c 	bl	8002ed0 <__aeabi_f2d>
 8004038:	0002      	movs	r2, r0
 800403a:	000b      	movs	r3, r1
 800403c:	2000      	movs	r0, #0
 800403e:	4955      	ldr	r1, [pc, #340]	; (8004194 <CalcQuaternionToEuler+0x1e0>)
 8004040:	f7fe fb0a 	bl	8002658 <__aeabi_dsub>
 8004044:	0002      	movs	r2, r0
 8004046:	000b      	movs	r3, r1
 8004048:	0020      	movs	r0, r4
 800404a:	0029      	movs	r1, r5
 800404c:	f00b fbf8 	bl	800f840 <atan2>
 8004050:	4a51      	ldr	r2, [pc, #324]	; (8004198 <CalcQuaternionToEuler+0x1e4>)
 8004052:	4b52      	ldr	r3, [pc, #328]	; (800419c <CalcQuaternionToEuler+0x1e8>)
 8004054:	f7fe f894 	bl	8002180 <__aeabi_dmul>
 8004058:	0002      	movs	r2, r0
 800405a:	000b      	movs	r3, r1
 800405c:	0010      	movs	r0, r2
 800405e:	0019      	movs	r1, r3
 8004060:	f7fe ff7e 	bl	8002f60 <__aeabi_d2f>
 8004064:	1c02      	adds	r2, r0, #0
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	601a      	str	r2, [r3, #0]
	eu->pitch = asin(2.0*(quat.q1*quat.q3 - quat.q2*quat.q4))*RAD_2_DEG;
 800406a:	2508      	movs	r5, #8
 800406c:	197b      	adds	r3, r7, r5
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	197b      	adds	r3, r7, r5
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	1c19      	adds	r1, r3, #0
 8004076:	1c10      	adds	r0, r2, #0
 8004078:	f7fc fdca 	bl	8000c10 <__aeabi_fmul>
 800407c:	1c03      	adds	r3, r0, #0
 800407e:	1c1c      	adds	r4, r3, #0
 8004080:	197b      	adds	r3, r7, r5
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	197b      	adds	r3, r7, r5
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	1c19      	adds	r1, r3, #0
 800408a:	1c10      	adds	r0, r2, #0
 800408c:	f7fc fdc0 	bl	8000c10 <__aeabi_fmul>
 8004090:	1c03      	adds	r3, r0, #0
 8004092:	1c19      	adds	r1, r3, #0
 8004094:	1c20      	adds	r0, r4, #0
 8004096:	f7fc fed5 	bl	8000e44 <__aeabi_fsub>
 800409a:	1c03      	adds	r3, r0, #0
 800409c:	1c18      	adds	r0, r3, #0
 800409e:	f7fe ff17 	bl	8002ed0 <__aeabi_f2d>
 80040a2:	0002      	movs	r2, r0
 80040a4:	000b      	movs	r3, r1
 80040a6:	f7fd f8fb 	bl	80012a0 <__aeabi_dadd>
 80040aa:	0002      	movs	r2, r0
 80040ac:	000b      	movs	r3, r1
 80040ae:	0010      	movs	r0, r2
 80040b0:	0019      	movs	r1, r3
 80040b2:	f00b fb95 	bl	800f7e0 <asin>
 80040b6:	4a38      	ldr	r2, [pc, #224]	; (8004198 <CalcQuaternionToEuler+0x1e4>)
 80040b8:	4b38      	ldr	r3, [pc, #224]	; (800419c <CalcQuaternionToEuler+0x1e8>)
 80040ba:	f7fe f861 	bl	8002180 <__aeabi_dmul>
 80040be:	0002      	movs	r2, r0
 80040c0:	000b      	movs	r3, r1
 80040c2:	0010      	movs	r0, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	f7fe ff4b 	bl	8002f60 <__aeabi_d2f>
 80040ca:	1c02      	adds	r2, r0, #0
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	605a      	str	r2, [r3, #4]
	eu->yaw = -atan2((quat.q2*quat.q3 + quat.q1*quat.q4), 0.5 - (quat.q3*quat.q3 + quat.q4*quat.q4))*RAD_2_DEG;
 80040d0:	197b      	adds	r3, r7, r5
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	197b      	adds	r3, r7, r5
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	1c19      	adds	r1, r3, #0
 80040da:	1c10      	adds	r0, r2, #0
 80040dc:	f7fc fd98 	bl	8000c10 <__aeabi_fmul>
 80040e0:	1c03      	adds	r3, r0, #0
 80040e2:	1c1c      	adds	r4, r3, #0
 80040e4:	197b      	adds	r3, r7, r5
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	002e      	movs	r6, r5
 80040ea:	197b      	adds	r3, r7, r5
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	1c19      	adds	r1, r3, #0
 80040f0:	1c10      	adds	r0, r2, #0
 80040f2:	f7fc fd8d 	bl	8000c10 <__aeabi_fmul>
 80040f6:	1c03      	adds	r3, r0, #0
 80040f8:	1c19      	adds	r1, r3, #0
 80040fa:	1c20      	adds	r0, r4, #0
 80040fc:	f7fc fa22 	bl	8000544 <__aeabi_fadd>
 8004100:	1c03      	adds	r3, r0, #0
 8004102:	1c18      	adds	r0, r3, #0
 8004104:	f7fe fee4 	bl	8002ed0 <__aeabi_f2d>
 8004108:	0004      	movs	r4, r0
 800410a:	000d      	movs	r5, r1
 800410c:	19bb      	adds	r3, r7, r6
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	19bb      	adds	r3, r7, r6
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	1c19      	adds	r1, r3, #0
 8004116:	1c10      	adds	r0, r2, #0
 8004118:	f7fc fd7a 	bl	8000c10 <__aeabi_fmul>
 800411c:	1c03      	adds	r3, r0, #0
 800411e:	1c1e      	adds	r6, r3, #0
 8004120:	2108      	movs	r1, #8
 8004122:	187b      	adds	r3, r7, r1
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	187b      	adds	r3, r7, r1
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	1c19      	adds	r1, r3, #0
 800412c:	1c10      	adds	r0, r2, #0
 800412e:	f7fc fd6f 	bl	8000c10 <__aeabi_fmul>
 8004132:	1c03      	adds	r3, r0, #0
 8004134:	1c19      	adds	r1, r3, #0
 8004136:	1c30      	adds	r0, r6, #0
 8004138:	f7fc fa04 	bl	8000544 <__aeabi_fadd>
 800413c:	1c03      	adds	r3, r0, #0
 800413e:	1c18      	adds	r0, r3, #0
 8004140:	f7fe fec6 	bl	8002ed0 <__aeabi_f2d>
 8004144:	0002      	movs	r2, r0
 8004146:	000b      	movs	r3, r1
 8004148:	2000      	movs	r0, #0
 800414a:	4912      	ldr	r1, [pc, #72]	; (8004194 <CalcQuaternionToEuler+0x1e0>)
 800414c:	f7fe fa84 	bl	8002658 <__aeabi_dsub>
 8004150:	0002      	movs	r2, r0
 8004152:	000b      	movs	r3, r1
 8004154:	0020      	movs	r0, r4
 8004156:	0029      	movs	r1, r5
 8004158:	f00b fb72 	bl	800f840 <atan2>
 800415c:	0002      	movs	r2, r0
 800415e:	000b      	movs	r3, r1
 8004160:	0011      	movs	r1, r2
 8004162:	6039      	str	r1, [r7, #0]
 8004164:	2180      	movs	r1, #128	; 0x80
 8004166:	0609      	lsls	r1, r1, #24
 8004168:	4059      	eors	r1, r3
 800416a:	6079      	str	r1, [r7, #4]
 800416c:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <CalcQuaternionToEuler+0x1e4>)
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <CalcQuaternionToEuler+0x1e8>)
 8004170:	6838      	ldr	r0, [r7, #0]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	f7fe f804 	bl	8002180 <__aeabi_dmul>
 8004178:	0002      	movs	r2, r0
 800417a:	000b      	movs	r3, r1
 800417c:	0010      	movs	r0, r2
 800417e:	0019      	movs	r1, r3
 8004180:	f7fe feee 	bl	8002f60 <__aeabi_d2f>
 8004184:	1c02      	adds	r2, r0, #0
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	609a      	str	r2, [r3, #8]
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b007      	add	sp, #28
 8004190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	3fe00000 	.word	0x3fe00000
 8004198:	1a63c1f8 	.word	0x1a63c1f8
 800419c:	404ca5dc 	.word	0x404ca5dc

080041a0 <CalcAngleDifference>:
					pow(quat.q1,2) - pow(quat.q2,2) - pow(quat.q3,2) + pow(quat.q4,2))*RAD_2_DEG;
	}
}

void CalcAngleDifference(struct euler_angles *diff, struct euler_angles *a, struct euler_angles *b, struct euler_angles *add_on)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
	diff->yaw = (a->yaw - b->yaw);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	1c19      	adds	r1, r3, #0
 80041b8:	1c10      	adds	r0, r2, #0
 80041ba:	f7fc fe43 	bl	8000e44 <__aeabi_fsub>
 80041be:	1c03      	adds	r3, r0, #0
 80041c0:	1c1a      	adds	r2, r3, #0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	609a      	str	r2, [r3, #8]
	diff->pitch = (a->pitch - b->pitch);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	1c19      	adds	r1, r3, #0
 80041d0:	1c10      	adds	r0, r2, #0
 80041d2:	f7fc fe37 	bl	8000e44 <__aeabi_fsub>
 80041d6:	1c03      	adds	r3, r0, #0
 80041d8:	1c1a      	adds	r2, r3, #0
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	605a      	str	r2, [r3, #4]
	diff->roll = (a->roll - b->roll);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	1c19      	adds	r1, r3, #0
 80041e8:	1c10      	adds	r0, r2, #0
 80041ea:	f7fc fe2b 	bl	8000e44 <__aeabi_fsub>
 80041ee:	1c03      	adds	r3, r0, #0
 80041f0:	1c1a      	adds	r2, r3, #0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	601a      	str	r2, [r3, #0]

	if (diff->yaw > 180.0)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	493c      	ldr	r1, [pc, #240]	; (80042ec <CalcAngleDifference+0x14c>)
 80041fc:	1c18      	adds	r0, r3, #0
 80041fe:	f7fc f975 	bl	80004ec <__aeabi_fcmpgt>
 8004202:	1e03      	subs	r3, r0, #0
 8004204:	d009      	beq.n	800421a <CalcAngleDifference+0x7a>
	{
		diff->yaw = 360.0 - diff->yaw;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	1c19      	adds	r1, r3, #0
 800420c:	4838      	ldr	r0, [pc, #224]	; (80042f0 <CalcAngleDifference+0x150>)
 800420e:	f7fc fe19 	bl	8000e44 <__aeabi_fsub>
 8004212:	1c03      	adds	r3, r0, #0
 8004214:	1c1a      	adds	r2, r3, #0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	609a      	str	r2, [r3, #8]
	}

	if (diff->yaw < -180.0)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	4935      	ldr	r1, [pc, #212]	; (80042f4 <CalcAngleDifference+0x154>)
 8004220:	1c18      	adds	r0, r3, #0
 8004222:	f7fc f94f 	bl	80004c4 <__aeabi_fcmplt>
 8004226:	1e03      	subs	r3, r0, #0
 8004228:	d00c      	beq.n	8004244 <CalcAngleDifference+0xa4>
	{
		diff->yaw = -(diff->yaw + 360.0);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	4930      	ldr	r1, [pc, #192]	; (80042f0 <CalcAngleDifference+0x150>)
 8004230:	1c18      	adds	r0, r3, #0
 8004232:	f7fc f987 	bl	8000544 <__aeabi_fadd>
 8004236:	1c03      	adds	r3, r0, #0
 8004238:	1c1a      	adds	r2, r3, #0
 800423a:	2380      	movs	r3, #128	; 0x80
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	405a      	eors	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	609a      	str	r2, [r3, #8]
	}

	if (diff->pitch > 180.0)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4928      	ldr	r1, [pc, #160]	; (80042ec <CalcAngleDifference+0x14c>)
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc f94e 	bl	80004ec <__aeabi_fcmpgt>
 8004250:	1e03      	subs	r3, r0, #0
 8004252:	d009      	beq.n	8004268 <CalcAngleDifference+0xc8>
	{
		diff->pitch = 360.0 - diff->pitch;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	1c19      	adds	r1, r3, #0
 800425a:	4825      	ldr	r0, [pc, #148]	; (80042f0 <CalcAngleDifference+0x150>)
 800425c:	f7fc fdf2 	bl	8000e44 <__aeabi_fsub>
 8004260:	1c03      	adds	r3, r0, #0
 8004262:	1c1a      	adds	r2, r3, #0
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	605a      	str	r2, [r3, #4]
	}

	if (diff->pitch < -180.0)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4921      	ldr	r1, [pc, #132]	; (80042f4 <CalcAngleDifference+0x154>)
 800426e:	1c18      	adds	r0, r3, #0
 8004270:	f7fc f928 	bl	80004c4 <__aeabi_fcmplt>
 8004274:	1e03      	subs	r3, r0, #0
 8004276:	d00c      	beq.n	8004292 <CalcAngleDifference+0xf2>
	{
		diff->pitch = -(diff->pitch + 360.0);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	491c      	ldr	r1, [pc, #112]	; (80042f0 <CalcAngleDifference+0x150>)
 800427e:	1c18      	adds	r0, r3, #0
 8004280:	f7fc f960 	bl	8000544 <__aeabi_fadd>
 8004284:	1c03      	adds	r3, r0, #0
 8004286:	1c1a      	adds	r2, r3, #0
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	405a      	eors	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	605a      	str	r2, [r3, #4]
	}

	if (diff->roll > 180.0)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4915      	ldr	r1, [pc, #84]	; (80042ec <CalcAngleDifference+0x14c>)
 8004298:	1c18      	adds	r0, r3, #0
 800429a:	f7fc f927 	bl	80004ec <__aeabi_fcmpgt>
 800429e:	1e03      	subs	r3, r0, #0
 80042a0:	d009      	beq.n	80042b6 <CalcAngleDifference+0x116>
	{
		diff->roll = 360.0 - diff->roll;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	1c19      	adds	r1, r3, #0
 80042a8:	4811      	ldr	r0, [pc, #68]	; (80042f0 <CalcAngleDifference+0x150>)
 80042aa:	f7fc fdcb 	bl	8000e44 <__aeabi_fsub>
 80042ae:	1c03      	adds	r3, r0, #0
 80042b0:	1c1a      	adds	r2, r3, #0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	601a      	str	r2, [r3, #0]
	}

	if (diff->roll < -180.0)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	490e      	ldr	r1, [pc, #56]	; (80042f4 <CalcAngleDifference+0x154>)
 80042bc:	1c18      	adds	r0, r3, #0
 80042be:	f7fc f901 	bl	80004c4 <__aeabi_fcmplt>
 80042c2:	1e03      	subs	r3, r0, #0
 80042c4:	d100      	bne.n	80042c8 <CalcAngleDifference+0x128>
	{
		diff->roll = -(diff->roll + 360.0);
	}

}
 80042c6:	e00c      	b.n	80042e2 <CalcAngleDifference+0x142>
		diff->roll = -(diff->roll + 360.0);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4908      	ldr	r1, [pc, #32]	; (80042f0 <CalcAngleDifference+0x150>)
 80042ce:	1c18      	adds	r0, r3, #0
 80042d0:	f7fc f938 	bl	8000544 <__aeabi_fadd>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	1c1a      	adds	r2, r3, #0
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	061b      	lsls	r3, r3, #24
 80042dc:	405a      	eors	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	601a      	str	r2, [r3, #0]
}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b004      	add	sp, #16
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	43340000 	.word	0x43340000
 80042f0:	43b40000 	.word	0x43b40000
 80042f4:	c3340000 	.word	0xc3340000

080042f8 <CalcAccLinearToEuler>:
	eu_gyro_est->pitch += gyro_data[1]*SAMPLE_TIME_ICM/1000.0*RAD_2_DEG;
	eu_gyro_est->roll += gyro_data[0]*SAMPLE_TIME_ICM/1000.0*RAD_2_DEG;
}

void CalcAccLinearToEuler(float* accel_data, struct euler_angles* eu_acc_est)
{
 80042f8:	b5b0      	push	{r4, r5, r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
		float pitch = atan(accel_data[0]/accel_data[2])* RAD_2_DEG;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3308      	adds	r3, #8
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	1c19      	adds	r1, r3, #0
 800430e:	1c10      	adds	r0, r2, #0
 8004310:	f7fc fab4 	bl	800087c <__aeabi_fdiv>
 8004314:	1c03      	adds	r3, r0, #0
 8004316:	1c18      	adds	r0, r3, #0
 8004318:	f7fe fdda 	bl	8002ed0 <__aeabi_f2d>
 800431c:	0002      	movs	r2, r0
 800431e:	000b      	movs	r3, r1
 8004320:	0010      	movs	r0, r2
 8004322:	0019      	movs	r1, r3
 8004324:	f00b f850 	bl	800f3c8 <atan>
 8004328:	4a2c      	ldr	r2, [pc, #176]	; (80043dc <CalcAccLinearToEuler+0xe4>)
 800432a:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <CalcAccLinearToEuler+0xe8>)
 800432c:	f7fd ff28 	bl	8002180 <__aeabi_dmul>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	0010      	movs	r0, r2
 8004336:	0019      	movs	r1, r3
 8004338:	f7fe fe12 	bl	8002f60 <__aeabi_d2f>
 800433c:	1c03      	adds	r3, r0, #0
 800433e:	617b      	str	r3, [r7, #20]
		float roll = atan(accel_data[1]/sqrt(pow(accel_data[0],2) + pow(accel_data[2],2))) * RAD_2_DEG;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3304      	adds	r3, #4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	1c18      	adds	r0, r3, #0
 8004348:	f7fe fdc2 	bl	8002ed0 <__aeabi_f2d>
 800434c:	0004      	movs	r4, r0
 800434e:	000d      	movs	r5, r1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1c18      	adds	r0, r3, #0
 8004356:	f7fe fdbb 	bl	8002ed0 <__aeabi_f2d>
 800435a:	2200      	movs	r2, #0
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	05db      	lsls	r3, r3, #23
 8004360:	f00b fa72 	bl	800f848 <pow>
 8004364:	6038      	str	r0, [r7, #0]
 8004366:	6079      	str	r1, [r7, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3308      	adds	r3, #8
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	1c18      	adds	r0, r3, #0
 8004370:	f7fe fdae 	bl	8002ed0 <__aeabi_f2d>
 8004374:	2200      	movs	r2, #0
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	05db      	lsls	r3, r3, #23
 800437a:	f00b fa65 	bl	800f848 <pow>
 800437e:	0002      	movs	r2, r0
 8004380:	000b      	movs	r3, r1
 8004382:	6838      	ldr	r0, [r7, #0]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	f7fc ff8b 	bl	80012a0 <__aeabi_dadd>
 800438a:	0002      	movs	r2, r0
 800438c:	000b      	movs	r3, r1
 800438e:	0010      	movs	r0, r2
 8004390:	0019      	movs	r1, r3
 8004392:	f00b fb11 	bl	800f9b8 <sqrt>
 8004396:	0002      	movs	r2, r0
 8004398:	000b      	movs	r3, r1
 800439a:	0020      	movs	r0, r4
 800439c:	0029      	movs	r1, r5
 800439e:	f7fd fae9 	bl	8001974 <__aeabi_ddiv>
 80043a2:	0002      	movs	r2, r0
 80043a4:	000b      	movs	r3, r1
 80043a6:	0010      	movs	r0, r2
 80043a8:	0019      	movs	r1, r3
 80043aa:	f00b f80d 	bl	800f3c8 <atan>
 80043ae:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <CalcAccLinearToEuler+0xe4>)
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <CalcAccLinearToEuler+0xe8>)
 80043b2:	f7fd fee5 	bl	8002180 <__aeabi_dmul>
 80043b6:	0002      	movs	r2, r0
 80043b8:	000b      	movs	r3, r1
 80043ba:	0010      	movs	r0, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	f7fe fdcf 	bl	8002f60 <__aeabi_d2f>
 80043c2:	1c03      	adds	r3, r0, #0
 80043c4:	613b      	str	r3, [r7, #16]

	eu_acc_est->roll = roll;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	601a      	str	r2, [r3, #0]
	eu_acc_est->pitch = pitch;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	605a      	str	r2, [r3, #4]
}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b006      	add	sp, #24
 80043d8:	bdb0      	pop	{r4, r5, r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	1a63c1f8 	.word	0x1a63c1f8
 80043e0:	404ca5dc 	.word	0x404ca5dc

080043e4 <MadgwickFilterXIO>:
	q->q4 = q4 * norm;
}

/* Credit to xio-technologies for open-source implementation https://github.com/xioTechnologies/Open-Source-AHRS-With-x-IMU*/
void MadgwickFilterXIO(float *gyro_data, float *accel_data, struct quaternion *q)
{
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e6:	b0a7      	sub	sp, #156	; 0x9c
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6178      	str	r0, [r7, #20]
 80043ec:	6139      	str	r1, [r7, #16]
 80043ee:	60fa      	str	r2, [r7, #12]
	float q1 = q->q1, q2 = q->q2, q3 = q->q3, q4 = q->q4;   // short name local variable for readability
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	268c      	movs	r6, #140	; 0x8c
 80043f6:	2108      	movs	r1, #8
 80043f8:	187a      	adds	r2, r7, r1
 80043fa:	1992      	adds	r2, r2, r6
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2488      	movs	r4, #136	; 0x88
 8004404:	187a      	adds	r2, r7, r1
 8004406:	1912      	adds	r2, r2, r4
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2584      	movs	r5, #132	; 0x84
 8004410:	187a      	adds	r2, r7, r1
 8004412:	1952      	adds	r2, r2, r5
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2680      	movs	r6, #128	; 0x80
 800441c:	1878      	adds	r0, r7, r1
 800441e:	1982      	adds	r2, r0, r6
 8004420:	6013      	str	r3, [r2, #0]
	float ax = accel_data[0], ay = accel_data[1], az = accel_data[2];
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2084      	movs	r0, #132	; 0x84
 8004428:	1838      	adds	r0, r7, r0
 800442a:	6003      	str	r3, [r0, #0]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2080      	movs	r0, #128	; 0x80
 8004432:	183a      	adds	r2, r7, r0
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	67fb      	str	r3, [r7, #124]	; 0x7c
	float gx = gyro_data[0]*DEG_2_RAD, gy = gyro_data[1]*DEG_2_RAD, gz = gyro_data[2]*DEG_2_RAD;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1c18      	adds	r0, r3, #0
 8004442:	f7fe fd45 	bl	8002ed0 <__aeabi_f2d>
 8004446:	4afd      	ldr	r2, [pc, #1012]	; (800483c <MadgwickFilterXIO+0x458>)
 8004448:	4bfd      	ldr	r3, [pc, #1012]	; (8004840 <MadgwickFilterXIO+0x45c>)
 800444a:	f7fd fe99 	bl	8002180 <__aeabi_dmul>
 800444e:	0002      	movs	r2, r0
 8004450:	000b      	movs	r3, r1
 8004452:	0010      	movs	r0, r2
 8004454:	0019      	movs	r1, r3
 8004456:	f7fe fd83 	bl	8002f60 <__aeabi_d2f>
 800445a:	1c03      	adds	r3, r0, #0
 800445c:	67bb      	str	r3, [r7, #120]	; 0x78
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	3304      	adds	r3, #4
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	1c18      	adds	r0, r3, #0
 8004466:	f7fe fd33 	bl	8002ed0 <__aeabi_f2d>
 800446a:	4af4      	ldr	r2, [pc, #976]	; (800483c <MadgwickFilterXIO+0x458>)
 800446c:	4bf4      	ldr	r3, [pc, #976]	; (8004840 <MadgwickFilterXIO+0x45c>)
 800446e:	f7fd fe87 	bl	8002180 <__aeabi_dmul>
 8004472:	0002      	movs	r2, r0
 8004474:	000b      	movs	r3, r1
 8004476:	0010      	movs	r0, r2
 8004478:	0019      	movs	r1, r3
 800447a:	f7fe fd71 	bl	8002f60 <__aeabi_d2f>
 800447e:	1c03      	adds	r3, r0, #0
 8004480:	677b      	str	r3, [r7, #116]	; 0x74
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	3308      	adds	r3, #8
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	1c18      	adds	r0, r3, #0
 800448a:	f7fe fd21 	bl	8002ed0 <__aeabi_f2d>
 800448e:	4aeb      	ldr	r2, [pc, #940]	; (800483c <MadgwickFilterXIO+0x458>)
 8004490:	4beb      	ldr	r3, [pc, #940]	; (8004840 <MadgwickFilterXIO+0x45c>)
 8004492:	f7fd fe75 	bl	8002180 <__aeabi_dmul>
 8004496:	0002      	movs	r2, r0
 8004498:	000b      	movs	r3, r1
 800449a:	0010      	movs	r0, r2
 800449c:	0019      	movs	r1, r3
 800449e:	f7fe fd5f 	bl	8002f60 <__aeabi_d2f>
 80044a2:	1c03      	adds	r3, r0, #0
 80044a4:	673b      	str	r3, [r7, #112]	; 0x70
	float norm;
	float s1, s2, s3, s4;
	float qDot1, qDot2, qDot3, qDot4;

	// Auxiliary variables to avoid repeated arithmetic
	float _2q1 = 2.0 * q1;
 80044a6:	238c      	movs	r3, #140	; 0x8c
 80044a8:	2208      	movs	r2, #8
 80044aa:	18b9      	adds	r1, r7, r2
 80044ac:	18ca      	adds	r2, r1, r3
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	1c19      	adds	r1, r3, #0
 80044b2:	1c18      	adds	r0, r3, #0
 80044b4:	f7fc f846 	bl	8000544 <__aeabi_fadd>
 80044b8:	1c03      	adds	r3, r0, #0
 80044ba:	66fb      	str	r3, [r7, #108]	; 0x6c
	float _2q2 = 2.0 * q2;
 80044bc:	2208      	movs	r2, #8
 80044be:	18bb      	adds	r3, r7, r2
 80044c0:	191a      	adds	r2, r3, r4
 80044c2:	6813      	ldr	r3, [r2, #0]
 80044c4:	1c19      	adds	r1, r3, #0
 80044c6:	1c18      	adds	r0, r3, #0
 80044c8:	f7fc f83c 	bl	8000544 <__aeabi_fadd>
 80044cc:	1c03      	adds	r3, r0, #0
 80044ce:	66bb      	str	r3, [r7, #104]	; 0x68
	float _2q3 = 2.0 * q3;
 80044d0:	2208      	movs	r2, #8
 80044d2:	18bb      	adds	r3, r7, r2
 80044d4:	195a      	adds	r2, r3, r5
 80044d6:	6813      	ldr	r3, [r2, #0]
 80044d8:	1c19      	adds	r1, r3, #0
 80044da:	1c18      	adds	r0, r3, #0
 80044dc:	f7fc f832 	bl	8000544 <__aeabi_fadd>
 80044e0:	1c03      	adds	r3, r0, #0
 80044e2:	667b      	str	r3, [r7, #100]	; 0x64
	float _2q4 = 2.0 * q4;
 80044e4:	2208      	movs	r2, #8
 80044e6:	18bb      	adds	r3, r7, r2
 80044e8:	1999      	adds	r1, r3, r6
 80044ea:	680b      	ldr	r3, [r1, #0]
 80044ec:	1c19      	adds	r1, r3, #0
 80044ee:	1c18      	adds	r0, r3, #0
 80044f0:	f7fc f828 	bl	8000544 <__aeabi_fadd>
 80044f4:	1c03      	adds	r3, r0, #0
 80044f6:	663b      	str	r3, [r7, #96]	; 0x60
	float _4q1 = 4.0 * q1;
 80044f8:	2181      	movs	r1, #129	; 0x81
 80044fa:	05c9      	lsls	r1, r1, #23
 80044fc:	238c      	movs	r3, #140	; 0x8c
 80044fe:	001e      	movs	r6, r3
 8004500:	2008      	movs	r0, #8
 8004502:	4684      	mov	ip, r0
 8004504:	44bc      	add	ip, r7
 8004506:	4463      	add	r3, ip
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	f7fc fb81 	bl	8000c10 <__aeabi_fmul>
 800450e:	1c03      	adds	r3, r0, #0
 8004510:	65fb      	str	r3, [r7, #92]	; 0x5c
	float _4q2 = 4.0 * q2;
 8004512:	2181      	movs	r1, #129	; 0x81
 8004514:	05c9      	lsls	r1, r1, #23
 8004516:	2208      	movs	r2, #8
 8004518:	18bb      	adds	r3, r7, r2
 800451a:	191b      	adds	r3, r3, r4
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	f7fc fb77 	bl	8000c10 <__aeabi_fmul>
 8004522:	1c03      	adds	r3, r0, #0
 8004524:	65bb      	str	r3, [r7, #88]	; 0x58
	float _4q3 = 4.0 * q3;
 8004526:	2181      	movs	r1, #129	; 0x81
 8004528:	05c9      	lsls	r1, r1, #23
 800452a:	2208      	movs	r2, #8
 800452c:	18bb      	adds	r3, r7, r2
 800452e:	195b      	adds	r3, r3, r5
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f7fc fb6d 	bl	8000c10 <__aeabi_fmul>
 8004536:	1c03      	adds	r3, r0, #0
 8004538:	657b      	str	r3, [r7, #84]	; 0x54
	float _8q2 = 8.0 * q2;
 800453a:	2182      	movs	r1, #130	; 0x82
 800453c:	05c9      	lsls	r1, r1, #23
 800453e:	2208      	movs	r2, #8
 8004540:	18bb      	adds	r3, r7, r2
 8004542:	191b      	adds	r3, r3, r4
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	f7fc fb63 	bl	8000c10 <__aeabi_fmul>
 800454a:	1c03      	adds	r3, r0, #0
 800454c:	653b      	str	r3, [r7, #80]	; 0x50
	float _8q3 = 8.0 * q3;
 800454e:	2182      	movs	r1, #130	; 0x82
 8004550:	05c9      	lsls	r1, r1, #23
 8004552:	2208      	movs	r2, #8
 8004554:	18bb      	adds	r3, r7, r2
 8004556:	195b      	adds	r3, r3, r5
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	f7fc fb59 	bl	8000c10 <__aeabi_fmul>
 800455e:	1c03      	adds	r3, r0, #0
 8004560:	64fb      	str	r3, [r7, #76]	; 0x4c
	float q1q1 = q1 * q1;
 8004562:	0033      	movs	r3, r6
 8004564:	2208      	movs	r2, #8
 8004566:	18b9      	adds	r1, r7, r2
 8004568:	18c9      	adds	r1, r1, r3
 800456a:	6809      	ldr	r1, [r1, #0]
 800456c:	18be      	adds	r6, r7, r2
 800456e:	18f0      	adds	r0, r6, r3
 8004570:	6800      	ldr	r0, [r0, #0]
 8004572:	f7fc fb4d 	bl	8000c10 <__aeabi_fmul>
 8004576:	1c03      	adds	r3, r0, #0
 8004578:	64bb      	str	r3, [r7, #72]	; 0x48
	float q2q2 = q2 * q2;
 800457a:	0026      	movs	r6, r4
 800457c:	2308      	movs	r3, #8
 800457e:	18fa      	adds	r2, r7, r3
 8004580:	1991      	adds	r1, r2, r6
 8004582:	6809      	ldr	r1, [r1, #0]
 8004584:	18fa      	adds	r2, r7, r3
 8004586:	1994      	adds	r4, r2, r6
 8004588:	6820      	ldr	r0, [r4, #0]
 800458a:	f7fc fb41 	bl	8000c10 <__aeabi_fmul>
 800458e:	1c03      	adds	r3, r0, #0
 8004590:	647b      	str	r3, [r7, #68]	; 0x44
	float q3q3 = q3 * q3;
 8004592:	2308      	movs	r3, #8
 8004594:	18fa      	adds	r2, r7, r3
 8004596:	1951      	adds	r1, r2, r5
 8004598:	6809      	ldr	r1, [r1, #0]
 800459a:	18fa      	adds	r2, r7, r3
 800459c:	1954      	adds	r4, r2, r5
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	f7fc fb36 	bl	8000c10 <__aeabi_fmul>
 80045a4:	1c03      	adds	r3, r0, #0
 80045a6:	643b      	str	r3, [r7, #64]	; 0x40
	float q4q4 = q4 * q4;
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	2308      	movs	r3, #8
 80045ac:	18f9      	adds	r1, r7, r3
 80045ae:	1889      	adds	r1, r1, r2
 80045b0:	6809      	ldr	r1, [r1, #0]
 80045b2:	18fc      	adds	r4, r7, r3
 80045b4:	18a4      	adds	r4, r4, r2
 80045b6:	6820      	ldr	r0, [r4, #0]
 80045b8:	f7fc fb2a 	bl	8000c10 <__aeabi_fmul>
 80045bc:	1c03      	adds	r3, r0, #0
 80045be:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 80045c0:	2484      	movs	r4, #132	; 0x84
 80045c2:	1939      	adds	r1, r7, r4
 80045c4:	6809      	ldr	r1, [r1, #0]
 80045c6:	1938      	adds	r0, r7, r4
 80045c8:	6800      	ldr	r0, [r0, #0]
 80045ca:	f7fc fb21 	bl	8000c10 <__aeabi_fmul>
 80045ce:	1c03      	adds	r3, r0, #0
 80045d0:	1c1c      	adds	r4, r3, #0
 80045d2:	2580      	movs	r5, #128	; 0x80
 80045d4:	1979      	adds	r1, r7, r5
 80045d6:	6809      	ldr	r1, [r1, #0]
 80045d8:	1978      	adds	r0, r7, r5
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	f7fc fb18 	bl	8000c10 <__aeabi_fmul>
 80045e0:	1c03      	adds	r3, r0, #0
 80045e2:	1c19      	adds	r1, r3, #0
 80045e4:	1c20      	adds	r0, r4, #0
 80045e6:	f7fb ffad 	bl	8000544 <__aeabi_fadd>
 80045ea:	1c03      	adds	r3, r0, #0
 80045ec:	1c1c      	adds	r4, r3, #0
 80045ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045f0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80045f2:	f7fc fb0d 	bl	8000c10 <__aeabi_fmul>
 80045f6:	1c03      	adds	r3, r0, #0
 80045f8:	1c19      	adds	r1, r3, #0
 80045fa:	1c20      	adds	r0, r4, #0
 80045fc:	f7fb ffa2 	bl	8000544 <__aeabi_fadd>
 8004600:	1c03      	adds	r3, r0, #0
 8004602:	1c18      	adds	r0, r3, #0
 8004604:	f7fe fc64 	bl	8002ed0 <__aeabi_f2d>
 8004608:	0002      	movs	r2, r0
 800460a:	000b      	movs	r3, r1
 800460c:	0010      	movs	r0, r2
 800460e:	0019      	movs	r1, r3
 8004610:	f00b f9d2 	bl	800f9b8 <sqrt>
 8004614:	0002      	movs	r2, r0
 8004616:	000b      	movs	r3, r1
 8004618:	0010      	movs	r0, r2
 800461a:	0019      	movs	r1, r3
 800461c:	f7fe fca0 	bl	8002f60 <__aeabi_d2f>
 8004620:	1c03      	adds	r3, r0, #0
 8004622:	63bb      	str	r3, [r7, #56]	; 0x38
	if (norm == 0) return; // handle NaN
 8004624:	2100      	movs	r1, #0
 8004626:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004628:	f7fb ff46 	bl	80004b8 <__aeabi_fcmpeq>
 800462c:	1e03      	subs	r3, r0, #0
 800462e:	d001      	beq.n	8004634 <MadgwickFilterXIO+0x250>
 8004630:	f000 fc8a 	bl	8004f48 <MadgwickFilterXIO+0xb64>
	norm = 1.0 / norm;        // use reciprocal for division
 8004634:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004636:	20fe      	movs	r0, #254	; 0xfe
 8004638:	0580      	lsls	r0, r0, #22
 800463a:	f7fc f91f 	bl	800087c <__aeabi_fdiv>
 800463e:	1c03      	adds	r3, r0, #0
 8004640:	63bb      	str	r3, [r7, #56]	; 0x38
	ax *= norm;
 8004642:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004644:	2484      	movs	r4, #132	; 0x84
 8004646:	1938      	adds	r0, r7, r4
 8004648:	6800      	ldr	r0, [r0, #0]
 800464a:	f7fc fae1 	bl	8000c10 <__aeabi_fmul>
 800464e:	1c03      	adds	r3, r0, #0
 8004650:	1939      	adds	r1, r7, r4
 8004652:	600b      	str	r3, [r1, #0]
	ay *= norm;
 8004654:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004656:	197a      	adds	r2, r7, r5
 8004658:	6810      	ldr	r0, [r2, #0]
 800465a:	f7fc fad9 	bl	8000c10 <__aeabi_fmul>
 800465e:	1c03      	adds	r3, r0, #0
 8004660:	1979      	adds	r1, r7, r5
 8004662:	600b      	str	r3, [r1, #0]
	az *= norm;
 8004664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004666:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004668:	f7fc fad2 	bl	8000c10 <__aeabi_fmul>
 800466c:	1c03      	adds	r3, r0, #0
 800466e:	67fb      	str	r3, [r7, #124]	; 0x7c

	// Gradient decent algorithm corrective step
	s1 = _4q1 * q3q3 + _2q3 * ax + _4q1 * q2q2 - _2q2 * ay;
 8004670:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004672:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004674:	f7fc facc 	bl	8000c10 <__aeabi_fmul>
 8004678:	1c03      	adds	r3, r0, #0
 800467a:	1c1c      	adds	r4, r3, #0
 800467c:	2084      	movs	r0, #132	; 0x84
 800467e:	1839      	adds	r1, r7, r0
 8004680:	6809      	ldr	r1, [r1, #0]
 8004682:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004684:	f7fc fac4 	bl	8000c10 <__aeabi_fmul>
 8004688:	1c03      	adds	r3, r0, #0
 800468a:	1c19      	adds	r1, r3, #0
 800468c:	1c20      	adds	r0, r4, #0
 800468e:	f7fb ff59 	bl	8000544 <__aeabi_fadd>
 8004692:	1c03      	adds	r3, r0, #0
 8004694:	1c1c      	adds	r4, r3, #0
 8004696:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004698:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800469a:	f7fc fab9 	bl	8000c10 <__aeabi_fmul>
 800469e:	1c03      	adds	r3, r0, #0
 80046a0:	1c19      	adds	r1, r3, #0
 80046a2:	1c20      	adds	r0, r4, #0
 80046a4:	f7fb ff4e 	bl	8000544 <__aeabi_fadd>
 80046a8:	1c03      	adds	r3, r0, #0
 80046aa:	1c1c      	adds	r4, r3, #0
 80046ac:	197a      	adds	r2, r7, r5
 80046ae:	6811      	ldr	r1, [r2, #0]
 80046b0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80046b2:	f7fc faad 	bl	8000c10 <__aeabi_fmul>
 80046b6:	1c03      	adds	r3, r0, #0
 80046b8:	1c19      	adds	r1, r3, #0
 80046ba:	1c20      	adds	r0, r4, #0
 80046bc:	f7fc fbc2 	bl	8000e44 <__aeabi_fsub>
 80046c0:	1c03      	adds	r3, r0, #0
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
	s2 = _4q2 * q4q4 - _2q4 * ax + 4.0 * q1q1 * q2 - _2q1 * ay - _4q2 + _8q2 * q2q2 + _8q2 * q3q3 + _4q2 * az;
 80046c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80046c8:	f7fc faa2 	bl	8000c10 <__aeabi_fmul>
 80046cc:	1c03      	adds	r3, r0, #0
 80046ce:	1c1c      	adds	r4, r3, #0
 80046d0:	2084      	movs	r0, #132	; 0x84
 80046d2:	183a      	adds	r2, r7, r0
 80046d4:	6811      	ldr	r1, [r2, #0]
 80046d6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80046d8:	f7fc fa9a 	bl	8000c10 <__aeabi_fmul>
 80046dc:	1c03      	adds	r3, r0, #0
 80046de:	1c19      	adds	r1, r3, #0
 80046e0:	1c20      	adds	r0, r4, #0
 80046e2:	f7fc fbaf 	bl	8000e44 <__aeabi_fsub>
 80046e6:	1c03      	adds	r3, r0, #0
 80046e8:	1c18      	adds	r0, r3, #0
 80046ea:	f7fe fbf1 	bl	8002ed0 <__aeabi_f2d>
 80046ee:	0004      	movs	r4, r0
 80046f0:	000d      	movs	r5, r1
 80046f2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046f4:	f7fe fbec 	bl	8002ed0 <__aeabi_f2d>
 80046f8:	2200      	movs	r2, #0
 80046fa:	4b52      	ldr	r3, [pc, #328]	; (8004844 <MadgwickFilterXIO+0x460>)
 80046fc:	f7fd fd40 	bl	8002180 <__aeabi_dmul>
 8004700:	0002      	movs	r2, r0
 8004702:	000b      	movs	r3, r1
 8004704:	603a      	str	r2, [r7, #0]
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	2208      	movs	r2, #8
 800470a:	18bb      	adds	r3, r7, r2
 800470c:	1999      	adds	r1, r3, r6
 800470e:	6808      	ldr	r0, [r1, #0]
 8004710:	f7fe fbde 	bl	8002ed0 <__aeabi_f2d>
 8004714:	0002      	movs	r2, r0
 8004716:	000b      	movs	r3, r1
 8004718:	6838      	ldr	r0, [r7, #0]
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	f7fd fd30 	bl	8002180 <__aeabi_dmul>
 8004720:	0002      	movs	r2, r0
 8004722:	000b      	movs	r3, r1
 8004724:	0020      	movs	r0, r4
 8004726:	0029      	movs	r1, r5
 8004728:	f7fc fdba 	bl	80012a0 <__aeabi_dadd>
 800472c:	0002      	movs	r2, r0
 800472e:	000b      	movs	r3, r1
 8004730:	0014      	movs	r4, r2
 8004732:	001d      	movs	r5, r3
 8004734:	2180      	movs	r1, #128	; 0x80
 8004736:	187b      	adds	r3, r7, r1
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800473c:	f7fc fa68 	bl	8000c10 <__aeabi_fmul>
 8004740:	1c03      	adds	r3, r0, #0
 8004742:	1c18      	adds	r0, r3, #0
 8004744:	f7fe fbc4 	bl	8002ed0 <__aeabi_f2d>
 8004748:	0002      	movs	r2, r0
 800474a:	000b      	movs	r3, r1
 800474c:	0020      	movs	r0, r4
 800474e:	0029      	movs	r1, r5
 8004750:	f7fd ff82 	bl	8002658 <__aeabi_dsub>
 8004754:	0002      	movs	r2, r0
 8004756:	000b      	movs	r3, r1
 8004758:	0014      	movs	r4, r2
 800475a:	001d      	movs	r5, r3
 800475c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800475e:	f7fe fbb7 	bl	8002ed0 <__aeabi_f2d>
 8004762:	0002      	movs	r2, r0
 8004764:	000b      	movs	r3, r1
 8004766:	0020      	movs	r0, r4
 8004768:	0029      	movs	r1, r5
 800476a:	f7fd ff75 	bl	8002658 <__aeabi_dsub>
 800476e:	0002      	movs	r2, r0
 8004770:	000b      	movs	r3, r1
 8004772:	0014      	movs	r4, r2
 8004774:	001d      	movs	r5, r3
 8004776:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004778:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800477a:	f7fc fa49 	bl	8000c10 <__aeabi_fmul>
 800477e:	1c03      	adds	r3, r0, #0
 8004780:	1c18      	adds	r0, r3, #0
 8004782:	f7fe fba5 	bl	8002ed0 <__aeabi_f2d>
 8004786:	0002      	movs	r2, r0
 8004788:	000b      	movs	r3, r1
 800478a:	0020      	movs	r0, r4
 800478c:	0029      	movs	r1, r5
 800478e:	f7fc fd87 	bl	80012a0 <__aeabi_dadd>
 8004792:	0002      	movs	r2, r0
 8004794:	000b      	movs	r3, r1
 8004796:	0014      	movs	r4, r2
 8004798:	001d      	movs	r5, r3
 800479a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800479c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800479e:	f7fc fa37 	bl	8000c10 <__aeabi_fmul>
 80047a2:	1c03      	adds	r3, r0, #0
 80047a4:	1c18      	adds	r0, r3, #0
 80047a6:	f7fe fb93 	bl	8002ed0 <__aeabi_f2d>
 80047aa:	0002      	movs	r2, r0
 80047ac:	000b      	movs	r3, r1
 80047ae:	0020      	movs	r0, r4
 80047b0:	0029      	movs	r1, r5
 80047b2:	f7fc fd75 	bl	80012a0 <__aeabi_dadd>
 80047b6:	0002      	movs	r2, r0
 80047b8:	000b      	movs	r3, r1
 80047ba:	0014      	movs	r4, r2
 80047bc:	001d      	movs	r5, r3
 80047be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80047c2:	f7fc fa25 	bl	8000c10 <__aeabi_fmul>
 80047c6:	1c03      	adds	r3, r0, #0
 80047c8:	1c18      	adds	r0, r3, #0
 80047ca:	f7fe fb81 	bl	8002ed0 <__aeabi_f2d>
 80047ce:	0002      	movs	r2, r0
 80047d0:	000b      	movs	r3, r1
 80047d2:	0020      	movs	r0, r4
 80047d4:	0029      	movs	r1, r5
 80047d6:	f7fc fd63 	bl	80012a0 <__aeabi_dadd>
 80047da:	0002      	movs	r2, r0
 80047dc:	000b      	movs	r3, r1
 80047de:	0010      	movs	r0, r2
 80047e0:	0019      	movs	r1, r3
 80047e2:	f7fe fbbd 	bl	8002f60 <__aeabi_d2f>
 80047e6:	1c03      	adds	r3, r0, #0
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30
	s3 = 4.0 * q1q1 * q3 + _2q1 * ax + _4q3 * q4q4 - _2q4 * ay - _4q3 + _8q3 * q2q2 + _8q3 * q3q3 + _4q3 * az;
 80047ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80047ec:	f7fe fb70 	bl	8002ed0 <__aeabi_f2d>
 80047f0:	2200      	movs	r2, #0
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <MadgwickFilterXIO+0x460>)
 80047f4:	f7fd fcc4 	bl	8002180 <__aeabi_dmul>
 80047f8:	0002      	movs	r2, r0
 80047fa:	000b      	movs	r3, r1
 80047fc:	0014      	movs	r4, r2
 80047fe:	001d      	movs	r5, r3
 8004800:	2384      	movs	r3, #132	; 0x84
 8004802:	2208      	movs	r2, #8
 8004804:	18ba      	adds	r2, r7, r2
 8004806:	18d1      	adds	r1, r2, r3
 8004808:	6808      	ldr	r0, [r1, #0]
 800480a:	f7fe fb61 	bl	8002ed0 <__aeabi_f2d>
 800480e:	0002      	movs	r2, r0
 8004810:	000b      	movs	r3, r1
 8004812:	0020      	movs	r0, r4
 8004814:	0029      	movs	r1, r5
 8004816:	f7fd fcb3 	bl	8002180 <__aeabi_dmul>
 800481a:	0002      	movs	r2, r0
 800481c:	000b      	movs	r3, r1
 800481e:	0014      	movs	r4, r2
 8004820:	001d      	movs	r5, r3
 8004822:	2084      	movs	r0, #132	; 0x84
 8004824:	183b      	adds	r3, r7, r0
 8004826:	6819      	ldr	r1, [r3, #0]
 8004828:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800482a:	f7fc f9f1 	bl	8000c10 <__aeabi_fmul>
 800482e:	1c03      	adds	r3, r0, #0
 8004830:	1c18      	adds	r0, r3, #0
 8004832:	f7fe fb4d 	bl	8002ed0 <__aeabi_f2d>
 8004836:	0002      	movs	r2, r0
 8004838:	e006      	b.n	8004848 <MadgwickFilterXIO+0x464>
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	a2529d39 	.word	0xa2529d39
 8004840:	3f91df46 	.word	0x3f91df46
 8004844:	40100000 	.word	0x40100000
 8004848:	000b      	movs	r3, r1
 800484a:	0020      	movs	r0, r4
 800484c:	0029      	movs	r1, r5
 800484e:	f7fc fd27 	bl	80012a0 <__aeabi_dadd>
 8004852:	0002      	movs	r2, r0
 8004854:	000b      	movs	r3, r1
 8004856:	0014      	movs	r4, r2
 8004858:	001d      	movs	r5, r3
 800485a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800485c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800485e:	f7fc f9d7 	bl	8000c10 <__aeabi_fmul>
 8004862:	1c03      	adds	r3, r0, #0
 8004864:	1c18      	adds	r0, r3, #0
 8004866:	f7fe fb33 	bl	8002ed0 <__aeabi_f2d>
 800486a:	0002      	movs	r2, r0
 800486c:	000b      	movs	r3, r1
 800486e:	0020      	movs	r0, r4
 8004870:	0029      	movs	r1, r5
 8004872:	f7fc fd15 	bl	80012a0 <__aeabi_dadd>
 8004876:	0002      	movs	r2, r0
 8004878:	000b      	movs	r3, r1
 800487a:	0014      	movs	r4, r2
 800487c:	001d      	movs	r5, r3
 800487e:	2180      	movs	r1, #128	; 0x80
 8004880:	1879      	adds	r1, r7, r1
 8004882:	6809      	ldr	r1, [r1, #0]
 8004884:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004886:	f7fc f9c3 	bl	8000c10 <__aeabi_fmul>
 800488a:	1c03      	adds	r3, r0, #0
 800488c:	1c18      	adds	r0, r3, #0
 800488e:	f7fe fb1f 	bl	8002ed0 <__aeabi_f2d>
 8004892:	0002      	movs	r2, r0
 8004894:	000b      	movs	r3, r1
 8004896:	0020      	movs	r0, r4
 8004898:	0029      	movs	r1, r5
 800489a:	f7fd fedd 	bl	8002658 <__aeabi_dsub>
 800489e:	0002      	movs	r2, r0
 80048a0:	000b      	movs	r3, r1
 80048a2:	0014      	movs	r4, r2
 80048a4:	001d      	movs	r5, r3
 80048a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80048a8:	f7fe fb12 	bl	8002ed0 <__aeabi_f2d>
 80048ac:	0002      	movs	r2, r0
 80048ae:	000b      	movs	r3, r1
 80048b0:	0020      	movs	r0, r4
 80048b2:	0029      	movs	r1, r5
 80048b4:	f7fd fed0 	bl	8002658 <__aeabi_dsub>
 80048b8:	0002      	movs	r2, r0
 80048ba:	000b      	movs	r3, r1
 80048bc:	0014      	movs	r4, r2
 80048be:	001d      	movs	r5, r3
 80048c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048c2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80048c4:	f7fc f9a4 	bl	8000c10 <__aeabi_fmul>
 80048c8:	1c03      	adds	r3, r0, #0
 80048ca:	1c18      	adds	r0, r3, #0
 80048cc:	f7fe fb00 	bl	8002ed0 <__aeabi_f2d>
 80048d0:	0002      	movs	r2, r0
 80048d2:	000b      	movs	r3, r1
 80048d4:	0020      	movs	r0, r4
 80048d6:	0029      	movs	r1, r5
 80048d8:	f7fc fce2 	bl	80012a0 <__aeabi_dadd>
 80048dc:	0002      	movs	r2, r0
 80048de:	000b      	movs	r3, r1
 80048e0:	0014      	movs	r4, r2
 80048e2:	001d      	movs	r5, r3
 80048e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80048e8:	f7fc f992 	bl	8000c10 <__aeabi_fmul>
 80048ec:	1c03      	adds	r3, r0, #0
 80048ee:	1c18      	adds	r0, r3, #0
 80048f0:	f7fe faee 	bl	8002ed0 <__aeabi_f2d>
 80048f4:	0002      	movs	r2, r0
 80048f6:	000b      	movs	r3, r1
 80048f8:	0020      	movs	r0, r4
 80048fa:	0029      	movs	r1, r5
 80048fc:	f7fc fcd0 	bl	80012a0 <__aeabi_dadd>
 8004900:	0002      	movs	r2, r0
 8004902:	000b      	movs	r3, r1
 8004904:	0014      	movs	r4, r2
 8004906:	001d      	movs	r5, r3
 8004908:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800490a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800490c:	f7fc f980 	bl	8000c10 <__aeabi_fmul>
 8004910:	1c03      	adds	r3, r0, #0
 8004912:	1c18      	adds	r0, r3, #0
 8004914:	f7fe fadc 	bl	8002ed0 <__aeabi_f2d>
 8004918:	0002      	movs	r2, r0
 800491a:	000b      	movs	r3, r1
 800491c:	0020      	movs	r0, r4
 800491e:	0029      	movs	r1, r5
 8004920:	f7fc fcbe 	bl	80012a0 <__aeabi_dadd>
 8004924:	0002      	movs	r2, r0
 8004926:	000b      	movs	r3, r1
 8004928:	0010      	movs	r0, r2
 800492a:	0019      	movs	r1, r3
 800492c:	f7fe fb18 	bl	8002f60 <__aeabi_d2f>
 8004930:	1c03      	adds	r3, r0, #0
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c
	s4 = 4.0 * q2q2 * q4 - _2q2 * ax + 4.0 * q3q3 * q4 - _2q3 * ay;
 8004934:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004936:	f7fe facb 	bl	8002ed0 <__aeabi_f2d>
 800493a:	2200      	movs	r2, #0
 800493c:	4bfd      	ldr	r3, [pc, #1012]	; (8004d34 <MadgwickFilterXIO+0x950>)
 800493e:	f7fd fc1f 	bl	8002180 <__aeabi_dmul>
 8004942:	0002      	movs	r2, r0
 8004944:	000b      	movs	r3, r1
 8004946:	0014      	movs	r4, r2
 8004948:	001d      	movs	r5, r3
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	2308      	movs	r3, #8
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	1899      	adds	r1, r3, r2
 8004952:	6808      	ldr	r0, [r1, #0]
 8004954:	f7fe fabc 	bl	8002ed0 <__aeabi_f2d>
 8004958:	0002      	movs	r2, r0
 800495a:	000b      	movs	r3, r1
 800495c:	0020      	movs	r0, r4
 800495e:	0029      	movs	r1, r5
 8004960:	f7fd fc0e 	bl	8002180 <__aeabi_dmul>
 8004964:	0002      	movs	r2, r0
 8004966:	000b      	movs	r3, r1
 8004968:	0014      	movs	r4, r2
 800496a:	001d      	movs	r5, r3
 800496c:	2084      	movs	r0, #132	; 0x84
 800496e:	1838      	adds	r0, r7, r0
 8004970:	6801      	ldr	r1, [r0, #0]
 8004972:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004974:	f7fc f94c 	bl	8000c10 <__aeabi_fmul>
 8004978:	1c03      	adds	r3, r0, #0
 800497a:	1c18      	adds	r0, r3, #0
 800497c:	f7fe faa8 	bl	8002ed0 <__aeabi_f2d>
 8004980:	0002      	movs	r2, r0
 8004982:	000b      	movs	r3, r1
 8004984:	0020      	movs	r0, r4
 8004986:	0029      	movs	r1, r5
 8004988:	f7fd fe66 	bl	8002658 <__aeabi_dsub>
 800498c:	0002      	movs	r2, r0
 800498e:	000b      	movs	r3, r1
 8004990:	0014      	movs	r4, r2
 8004992:	001d      	movs	r5, r3
 8004994:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004996:	f7fe fa9b 	bl	8002ed0 <__aeabi_f2d>
 800499a:	2200      	movs	r2, #0
 800499c:	4be5      	ldr	r3, [pc, #916]	; (8004d34 <MadgwickFilterXIO+0x950>)
 800499e:	f7fd fbef 	bl	8002180 <__aeabi_dmul>
 80049a2:	0002      	movs	r2, r0
 80049a4:	000b      	movs	r3, r1
 80049a6:	603a      	str	r2, [r7, #0]
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	2180      	movs	r1, #128	; 0x80
 80049ac:	2008      	movs	r0, #8
 80049ae:	4684      	mov	ip, r0
 80049b0:	44bc      	add	ip, r7
 80049b2:	4461      	add	r1, ip
 80049b4:	6808      	ldr	r0, [r1, #0]
 80049b6:	f7fe fa8b 	bl	8002ed0 <__aeabi_f2d>
 80049ba:	0002      	movs	r2, r0
 80049bc:	000b      	movs	r3, r1
 80049be:	6838      	ldr	r0, [r7, #0]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	f7fd fbdd 	bl	8002180 <__aeabi_dmul>
 80049c6:	0002      	movs	r2, r0
 80049c8:	000b      	movs	r3, r1
 80049ca:	0020      	movs	r0, r4
 80049cc:	0029      	movs	r1, r5
 80049ce:	f7fc fc67 	bl	80012a0 <__aeabi_dadd>
 80049d2:	0002      	movs	r2, r0
 80049d4:	000b      	movs	r3, r1
 80049d6:	0014      	movs	r4, r2
 80049d8:	001d      	movs	r5, r3
 80049da:	2280      	movs	r2, #128	; 0x80
 80049dc:	18ba      	adds	r2, r7, r2
 80049de:	6811      	ldr	r1, [r2, #0]
 80049e0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80049e2:	f7fc f915 	bl	8000c10 <__aeabi_fmul>
 80049e6:	1c03      	adds	r3, r0, #0
 80049e8:	1c18      	adds	r0, r3, #0
 80049ea:	f7fe fa71 	bl	8002ed0 <__aeabi_f2d>
 80049ee:	0002      	movs	r2, r0
 80049f0:	000b      	movs	r3, r1
 80049f2:	0020      	movs	r0, r4
 80049f4:	0029      	movs	r1, r5
 80049f6:	f7fd fe2f 	bl	8002658 <__aeabi_dsub>
 80049fa:	0002      	movs	r2, r0
 80049fc:	000b      	movs	r3, r1
 80049fe:	0010      	movs	r0, r2
 8004a00:	0019      	movs	r1, r3
 8004a02:	f7fe faad 	bl	8002f60 <__aeabi_d2f>
 8004a06:	1c03      	adds	r3, r0, #0
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
	norm = 1.0 / sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8004a0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a0e:	f7fc f8ff 	bl	8000c10 <__aeabi_fmul>
 8004a12:	1c03      	adds	r3, r0, #0
 8004a14:	1c1c      	adds	r4, r3, #0
 8004a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a1a:	f7fc f8f9 	bl	8000c10 <__aeabi_fmul>
 8004a1e:	1c03      	adds	r3, r0, #0
 8004a20:	1c19      	adds	r1, r3, #0
 8004a22:	1c20      	adds	r0, r4, #0
 8004a24:	f7fb fd8e 	bl	8000544 <__aeabi_fadd>
 8004a28:	1c03      	adds	r3, r0, #0
 8004a2a:	1c1c      	adds	r4, r3, #0
 8004a2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a30:	f7fc f8ee 	bl	8000c10 <__aeabi_fmul>
 8004a34:	1c03      	adds	r3, r0, #0
 8004a36:	1c19      	adds	r1, r3, #0
 8004a38:	1c20      	adds	r0, r4, #0
 8004a3a:	f7fb fd83 	bl	8000544 <__aeabi_fadd>
 8004a3e:	1c03      	adds	r3, r0, #0
 8004a40:	1c1c      	adds	r4, r3, #0
 8004a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a46:	f7fc f8e3 	bl	8000c10 <__aeabi_fmul>
 8004a4a:	1c03      	adds	r3, r0, #0
 8004a4c:	1c19      	adds	r1, r3, #0
 8004a4e:	1c20      	adds	r0, r4, #0
 8004a50:	f7fb fd78 	bl	8000544 <__aeabi_fadd>
 8004a54:	1c03      	adds	r3, r0, #0
 8004a56:	1c18      	adds	r0, r3, #0
 8004a58:	f7fe fa3a 	bl	8002ed0 <__aeabi_f2d>
 8004a5c:	0002      	movs	r2, r0
 8004a5e:	000b      	movs	r3, r1
 8004a60:	0010      	movs	r0, r2
 8004a62:	0019      	movs	r1, r3
 8004a64:	f00a ffa8 	bl	800f9b8 <sqrt>
 8004a68:	0002      	movs	r2, r0
 8004a6a:	000b      	movs	r3, r1
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	49b2      	ldr	r1, [pc, #712]	; (8004d38 <MadgwickFilterXIO+0x954>)
 8004a70:	f7fc ff80 	bl	8001974 <__aeabi_ddiv>
 8004a74:	0002      	movs	r2, r0
 8004a76:	000b      	movs	r3, r1
 8004a78:	0010      	movs	r0, r2
 8004a7a:	0019      	movs	r1, r3
 8004a7c:	f7fe fa70 	bl	8002f60 <__aeabi_d2f>
 8004a80:	1c03      	adds	r3, r0, #0
 8004a82:	63bb      	str	r3, [r7, #56]	; 0x38
	s1 *= norm;
 8004a84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a88:	f7fc f8c2 	bl	8000c10 <__aeabi_fmul>
 8004a8c:	1c03      	adds	r3, r0, #0
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34
	s2 *= norm;
 8004a90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a94:	f7fc f8bc 	bl	8000c10 <__aeabi_fmul>
 8004a98:	1c03      	adds	r3, r0, #0
 8004a9a:	633b      	str	r3, [r7, #48]	; 0x30
	s3 *= norm;
 8004a9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004aa0:	f7fc f8b6 	bl	8000c10 <__aeabi_fmul>
 8004aa4:	1c03      	adds	r3, r0, #0
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	s4 *= norm;
 8004aa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aac:	f7fc f8b0 	bl	8000c10 <__aeabi_fmul>
 8004ab0:	1c03      	adds	r3, r0, #0
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28

	// Compute rate of change of quaternion
	qDot1 = 0.5 * (-q2 * gx - q3 * gy - q4 * gz) - Beta * s1;
 8004ab4:	2508      	movs	r5, #8
 8004ab6:	197b      	adds	r3, r7, r5
 8004ab8:	199c      	adds	r4, r3, r6
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	2280      	movs	r2, #128	; 0x80
 8004abe:	0612      	lsls	r2, r2, #24
 8004ac0:	4053      	eors	r3, r2
 8004ac2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004ac4:	1c18      	adds	r0, r3, #0
 8004ac6:	f7fc f8a3 	bl	8000c10 <__aeabi_fmul>
 8004aca:	1c03      	adds	r3, r0, #0
 8004acc:	1c1c      	adds	r4, r3, #0
 8004ace:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004ad0:	2384      	movs	r3, #132	; 0x84
 8004ad2:	197a      	adds	r2, r7, r5
 8004ad4:	18d5      	adds	r5, r2, r3
 8004ad6:	6828      	ldr	r0, [r5, #0]
 8004ad8:	f7fc f89a 	bl	8000c10 <__aeabi_fmul>
 8004adc:	1c03      	adds	r3, r0, #0
 8004ade:	1c19      	adds	r1, r3, #0
 8004ae0:	1c20      	adds	r0, r4, #0
 8004ae2:	f7fc f9af 	bl	8000e44 <__aeabi_fsub>
 8004ae6:	1c03      	adds	r3, r0, #0
 8004ae8:	1c1c      	adds	r4, r3, #0
 8004aea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004aec:	2280      	movs	r2, #128	; 0x80
 8004aee:	2508      	movs	r5, #8
 8004af0:	197b      	adds	r3, r7, r5
 8004af2:	189d      	adds	r5, r3, r2
 8004af4:	6828      	ldr	r0, [r5, #0]
 8004af6:	f7fc f88b 	bl	8000c10 <__aeabi_fmul>
 8004afa:	1c03      	adds	r3, r0, #0
 8004afc:	1c19      	adds	r1, r3, #0
 8004afe:	1c20      	adds	r0, r4, #0
 8004b00:	f7fc f9a0 	bl	8000e44 <__aeabi_fsub>
 8004b04:	1c03      	adds	r3, r0, #0
 8004b06:	1c18      	adds	r0, r3, #0
 8004b08:	f7fe f9e2 	bl	8002ed0 <__aeabi_f2d>
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4b8b      	ldr	r3, [pc, #556]	; (8004d3c <MadgwickFilterXIO+0x958>)
 8004b10:	f7fd fb36 	bl	8002180 <__aeabi_dmul>
 8004b14:	0002      	movs	r2, r0
 8004b16:	000b      	movs	r3, r1
 8004b18:	0014      	movs	r4, r2
 8004b1a:	001d      	movs	r5, r3
 8004b1c:	4b88      	ldr	r3, [pc, #544]	; (8004d40 <MadgwickFilterXIO+0x95c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b22:	1c18      	adds	r0, r3, #0
 8004b24:	f7fc f874 	bl	8000c10 <__aeabi_fmul>
 8004b28:	1c03      	adds	r3, r0, #0
 8004b2a:	1c18      	adds	r0, r3, #0
 8004b2c:	f7fe f9d0 	bl	8002ed0 <__aeabi_f2d>
 8004b30:	0002      	movs	r2, r0
 8004b32:	000b      	movs	r3, r1
 8004b34:	0020      	movs	r0, r4
 8004b36:	0029      	movs	r1, r5
 8004b38:	f7fd fd8e 	bl	8002658 <__aeabi_dsub>
 8004b3c:	0002      	movs	r2, r0
 8004b3e:	000b      	movs	r3, r1
 8004b40:	0010      	movs	r0, r2
 8004b42:	0019      	movs	r1, r3
 8004b44:	f7fe fa0c 	bl	8002f60 <__aeabi_d2f>
 8004b48:	1c03      	adds	r3, r0, #0
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
	qDot2 = 0.5 * (q1 * gx + q3 * gz - q4 * gy) - Beta * s2;
 8004b4c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004b4e:	208c      	movs	r0, #140	; 0x8c
 8004b50:	2508      	movs	r5, #8
 8004b52:	197b      	adds	r3, r7, r5
 8004b54:	181c      	adds	r4, r3, r0
 8004b56:	6820      	ldr	r0, [r4, #0]
 8004b58:	f7fc f85a 	bl	8000c10 <__aeabi_fmul>
 8004b5c:	1c03      	adds	r3, r0, #0
 8004b5e:	1c1c      	adds	r4, r3, #0
 8004b60:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004b62:	2384      	movs	r3, #132	; 0x84
 8004b64:	197a      	adds	r2, r7, r5
 8004b66:	18d5      	adds	r5, r2, r3
 8004b68:	6828      	ldr	r0, [r5, #0]
 8004b6a:	f7fc f851 	bl	8000c10 <__aeabi_fmul>
 8004b6e:	1c03      	adds	r3, r0, #0
 8004b70:	1c19      	adds	r1, r3, #0
 8004b72:	1c20      	adds	r0, r4, #0
 8004b74:	f7fb fce6 	bl	8000544 <__aeabi_fadd>
 8004b78:	1c03      	adds	r3, r0, #0
 8004b7a:	1c1c      	adds	r4, r3, #0
 8004b7c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004b7e:	2280      	movs	r2, #128	; 0x80
 8004b80:	2508      	movs	r5, #8
 8004b82:	197b      	adds	r3, r7, r5
 8004b84:	189d      	adds	r5, r3, r2
 8004b86:	6828      	ldr	r0, [r5, #0]
 8004b88:	f7fc f842 	bl	8000c10 <__aeabi_fmul>
 8004b8c:	1c03      	adds	r3, r0, #0
 8004b8e:	1c19      	adds	r1, r3, #0
 8004b90:	1c20      	adds	r0, r4, #0
 8004b92:	f7fc f957 	bl	8000e44 <__aeabi_fsub>
 8004b96:	1c03      	adds	r3, r0, #0
 8004b98:	1c18      	adds	r0, r3, #0
 8004b9a:	f7fe f999 	bl	8002ed0 <__aeabi_f2d>
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4b66      	ldr	r3, [pc, #408]	; (8004d3c <MadgwickFilterXIO+0x958>)
 8004ba2:	f7fd faed 	bl	8002180 <__aeabi_dmul>
 8004ba6:	0002      	movs	r2, r0
 8004ba8:	000b      	movs	r3, r1
 8004baa:	0014      	movs	r4, r2
 8004bac:	001d      	movs	r5, r3
 8004bae:	4b64      	ldr	r3, [pc, #400]	; (8004d40 <MadgwickFilterXIO+0x95c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bb4:	1c18      	adds	r0, r3, #0
 8004bb6:	f7fc f82b 	bl	8000c10 <__aeabi_fmul>
 8004bba:	1c03      	adds	r3, r0, #0
 8004bbc:	1c18      	adds	r0, r3, #0
 8004bbe:	f7fe f987 	bl	8002ed0 <__aeabi_f2d>
 8004bc2:	0002      	movs	r2, r0
 8004bc4:	000b      	movs	r3, r1
 8004bc6:	0020      	movs	r0, r4
 8004bc8:	0029      	movs	r1, r5
 8004bca:	f7fd fd45 	bl	8002658 <__aeabi_dsub>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	000b      	movs	r3, r1
 8004bd2:	0010      	movs	r0, r2
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	f7fe f9c3 	bl	8002f60 <__aeabi_d2f>
 8004bda:	1c03      	adds	r3, r0, #0
 8004bdc:	623b      	str	r3, [r7, #32]
	qDot3 = 0.5 * (q1 * gy - q2 * gz + q4 * gx) - Beta * s3;
 8004bde:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004be0:	208c      	movs	r0, #140	; 0x8c
 8004be2:	2508      	movs	r5, #8
 8004be4:	197b      	adds	r3, r7, r5
 8004be6:	181c      	adds	r4, r3, r0
 8004be8:	6820      	ldr	r0, [r4, #0]
 8004bea:	f7fc f811 	bl	8000c10 <__aeabi_fmul>
 8004bee:	1c03      	adds	r3, r0, #0
 8004bf0:	1c1c      	adds	r4, r3, #0
 8004bf2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004bf4:	197b      	adds	r3, r7, r5
 8004bf6:	199d      	adds	r5, r3, r6
 8004bf8:	6828      	ldr	r0, [r5, #0]
 8004bfa:	f7fc f809 	bl	8000c10 <__aeabi_fmul>
 8004bfe:	1c03      	adds	r3, r0, #0
 8004c00:	1c19      	adds	r1, r3, #0
 8004c02:	1c20      	adds	r0, r4, #0
 8004c04:	f7fc f91e 	bl	8000e44 <__aeabi_fsub>
 8004c08:	1c03      	adds	r3, r0, #0
 8004c0a:	1c1c      	adds	r4, r3, #0
 8004c0c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	2508      	movs	r5, #8
 8004c12:	197b      	adds	r3, r7, r5
 8004c14:	189d      	adds	r5, r3, r2
 8004c16:	6828      	ldr	r0, [r5, #0]
 8004c18:	f7fb fffa 	bl	8000c10 <__aeabi_fmul>
 8004c1c:	1c03      	adds	r3, r0, #0
 8004c1e:	1c19      	adds	r1, r3, #0
 8004c20:	1c20      	adds	r0, r4, #0
 8004c22:	f7fb fc8f 	bl	8000544 <__aeabi_fadd>
 8004c26:	1c03      	adds	r3, r0, #0
 8004c28:	1c18      	adds	r0, r3, #0
 8004c2a:	f7fe f951 	bl	8002ed0 <__aeabi_f2d>
 8004c2e:	2200      	movs	r2, #0
 8004c30:	4b42      	ldr	r3, [pc, #264]	; (8004d3c <MadgwickFilterXIO+0x958>)
 8004c32:	f7fd faa5 	bl	8002180 <__aeabi_dmul>
 8004c36:	0002      	movs	r2, r0
 8004c38:	000b      	movs	r3, r1
 8004c3a:	0014      	movs	r4, r2
 8004c3c:	001d      	movs	r5, r3
 8004c3e:	4b40      	ldr	r3, [pc, #256]	; (8004d40 <MadgwickFilterXIO+0x95c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c44:	1c18      	adds	r0, r3, #0
 8004c46:	f7fb ffe3 	bl	8000c10 <__aeabi_fmul>
 8004c4a:	1c03      	adds	r3, r0, #0
 8004c4c:	1c18      	adds	r0, r3, #0
 8004c4e:	f7fe f93f 	bl	8002ed0 <__aeabi_f2d>
 8004c52:	0002      	movs	r2, r0
 8004c54:	000b      	movs	r3, r1
 8004c56:	0020      	movs	r0, r4
 8004c58:	0029      	movs	r1, r5
 8004c5a:	f7fd fcfd 	bl	8002658 <__aeabi_dsub>
 8004c5e:	0002      	movs	r2, r0
 8004c60:	000b      	movs	r3, r1
 8004c62:	0010      	movs	r0, r2
 8004c64:	0019      	movs	r1, r3
 8004c66:	f7fe f97b 	bl	8002f60 <__aeabi_d2f>
 8004c6a:	1c03      	adds	r3, r0, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
	qDot4 = 0.5 * (q1 * gz + q2 * gy - q3 * gx) - Beta * s4;
 8004c6e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004c70:	208c      	movs	r0, #140	; 0x8c
 8004c72:	2508      	movs	r5, #8
 8004c74:	197b      	adds	r3, r7, r5
 8004c76:	181c      	adds	r4, r3, r0
 8004c78:	6820      	ldr	r0, [r4, #0]
 8004c7a:	f7fb ffc9 	bl	8000c10 <__aeabi_fmul>
 8004c7e:	1c03      	adds	r3, r0, #0
 8004c80:	1c1c      	adds	r4, r3, #0
 8004c82:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004c84:	197b      	adds	r3, r7, r5
 8004c86:	199d      	adds	r5, r3, r6
 8004c88:	6828      	ldr	r0, [r5, #0]
 8004c8a:	f7fb ffc1 	bl	8000c10 <__aeabi_fmul>
 8004c8e:	1c03      	adds	r3, r0, #0
 8004c90:	1c19      	adds	r1, r3, #0
 8004c92:	1c20      	adds	r0, r4, #0
 8004c94:	f7fb fc56 	bl	8000544 <__aeabi_fadd>
 8004c98:	1c03      	adds	r3, r0, #0
 8004c9a:	1c1c      	adds	r4, r3, #0
 8004c9c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004c9e:	2384      	movs	r3, #132	; 0x84
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	18b8      	adds	r0, r7, r2
 8004ca4:	18c5      	adds	r5, r0, r3
 8004ca6:	6828      	ldr	r0, [r5, #0]
 8004ca8:	f7fb ffb2 	bl	8000c10 <__aeabi_fmul>
 8004cac:	1c03      	adds	r3, r0, #0
 8004cae:	1c19      	adds	r1, r3, #0
 8004cb0:	1c20      	adds	r0, r4, #0
 8004cb2:	f7fc f8c7 	bl	8000e44 <__aeabi_fsub>
 8004cb6:	1c03      	adds	r3, r0, #0
 8004cb8:	1c18      	adds	r0, r3, #0
 8004cba:	f7fe f909 	bl	8002ed0 <__aeabi_f2d>
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <MadgwickFilterXIO+0x958>)
 8004cc2:	f7fd fa5d 	bl	8002180 <__aeabi_dmul>
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	000b      	movs	r3, r1
 8004cca:	0014      	movs	r4, r2
 8004ccc:	001d      	movs	r5, r3
 8004cce:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <MadgwickFilterXIO+0x95c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd4:	1c18      	adds	r0, r3, #0
 8004cd6:	f7fb ff9b 	bl	8000c10 <__aeabi_fmul>
 8004cda:	1c03      	adds	r3, r0, #0
 8004cdc:	1c18      	adds	r0, r3, #0
 8004cde:	f7fe f8f7 	bl	8002ed0 <__aeabi_f2d>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	000b      	movs	r3, r1
 8004ce6:	0020      	movs	r0, r4
 8004ce8:	0029      	movs	r1, r5
 8004cea:	f7fd fcb5 	bl	8002658 <__aeabi_dsub>
 8004cee:	0002      	movs	r2, r0
 8004cf0:	000b      	movs	r3, r1
 8004cf2:	0010      	movs	r0, r2
 8004cf4:	0019      	movs	r1, r3
 8004cf6:	f7fe f933 	bl	8002f60 <__aeabi_d2f>
 8004cfa:	1c03      	adds	r3, r0, #0
 8004cfc:	61bb      	str	r3, [r7, #24]

	// Integrate to yield quaternion
	q1 += qDot1 * SAMPLE_TIME_ICM/1000.0;
 8004cfe:	208c      	movs	r0, #140	; 0x8c
 8004d00:	2208      	movs	r2, #8
 8004d02:	18bb      	adds	r3, r7, r2
 8004d04:	1819      	adds	r1, r3, r0
 8004d06:	6808      	ldr	r0, [r1, #0]
 8004d08:	f7fe f8e2 	bl	8002ed0 <__aeabi_f2d>
 8004d0c:	0004      	movs	r4, r0
 8004d0e:	000d      	movs	r5, r1
 8004d10:	490c      	ldr	r1, [pc, #48]	; (8004d44 <MadgwickFilterXIO+0x960>)
 8004d12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d14:	f7fb ff7c 	bl	8000c10 <__aeabi_fmul>
 8004d18:	1c03      	adds	r3, r0, #0
 8004d1a:	1c18      	adds	r0, r3, #0
 8004d1c:	f7fe f8d8 	bl	8002ed0 <__aeabi_f2d>
 8004d20:	2200      	movs	r2, #0
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <MadgwickFilterXIO+0x964>)
 8004d24:	f7fc fe26 	bl	8001974 <__aeabi_ddiv>
 8004d28:	0002      	movs	r2, r0
 8004d2a:	000b      	movs	r3, r1
 8004d2c:	0020      	movs	r0, r4
 8004d2e:	0029      	movs	r1, r5
 8004d30:	e00c      	b.n	8004d4c <MadgwickFilterXIO+0x968>
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	40100000 	.word	0x40100000
 8004d38:	3ff00000 	.word	0x3ff00000
 8004d3c:	3fe00000 	.word	0x3fe00000
 8004d40:	20000000 	.word	0x20000000
 8004d44:	41f00000 	.word	0x41f00000
 8004d48:	408f4000 	.word	0x408f4000
 8004d4c:	f7fc faa8 	bl	80012a0 <__aeabi_dadd>
 8004d50:	0002      	movs	r2, r0
 8004d52:	000b      	movs	r3, r1
 8004d54:	0010      	movs	r0, r2
 8004d56:	0019      	movs	r1, r3
 8004d58:	f7fe f902 	bl	8002f60 <__aeabi_d2f>
 8004d5c:	1c03      	adds	r3, r0, #0
 8004d5e:	208c      	movs	r0, #140	; 0x8c
 8004d60:	2208      	movs	r2, #8
 8004d62:	18b9      	adds	r1, r7, r2
 8004d64:	1809      	adds	r1, r1, r0
 8004d66:	600b      	str	r3, [r1, #0]
	q2 += qDot2 * SAMPLE_TIME_ICM/1000.0;
 8004d68:	18bb      	adds	r3, r7, r2
 8004d6a:	1999      	adds	r1, r3, r6
 8004d6c:	6808      	ldr	r0, [r1, #0]
 8004d6e:	f7fe f8af 	bl	8002ed0 <__aeabi_f2d>
 8004d72:	0004      	movs	r4, r0
 8004d74:	000d      	movs	r5, r1
 8004d76:	4976      	ldr	r1, [pc, #472]	; (8004f50 <MadgwickFilterXIO+0xb6c>)
 8004d78:	6a38      	ldr	r0, [r7, #32]
 8004d7a:	f7fb ff49 	bl	8000c10 <__aeabi_fmul>
 8004d7e:	1c03      	adds	r3, r0, #0
 8004d80:	1c18      	adds	r0, r3, #0
 8004d82:	f7fe f8a5 	bl	8002ed0 <__aeabi_f2d>
 8004d86:	2200      	movs	r2, #0
 8004d88:	4b72      	ldr	r3, [pc, #456]	; (8004f54 <MadgwickFilterXIO+0xb70>)
 8004d8a:	f7fc fdf3 	bl	8001974 <__aeabi_ddiv>
 8004d8e:	0002      	movs	r2, r0
 8004d90:	000b      	movs	r3, r1
 8004d92:	0020      	movs	r0, r4
 8004d94:	0029      	movs	r1, r5
 8004d96:	f7fc fa83 	bl	80012a0 <__aeabi_dadd>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	000b      	movs	r3, r1
 8004d9e:	0010      	movs	r0, r2
 8004da0:	0019      	movs	r1, r3
 8004da2:	f7fe f8dd 	bl	8002f60 <__aeabi_d2f>
 8004da6:	1c03      	adds	r3, r0, #0
 8004da8:	2008      	movs	r0, #8
 8004daa:	183a      	adds	r2, r7, r0
 8004dac:	1991      	adds	r1, r2, r6
 8004dae:	600b      	str	r3, [r1, #0]
	q3 += qDot3 * SAMPLE_TIME_ICM/1000.0;
 8004db0:	2384      	movs	r3, #132	; 0x84
 8004db2:	183a      	adds	r2, r7, r0
 8004db4:	18d1      	adds	r1, r2, r3
 8004db6:	6808      	ldr	r0, [r1, #0]
 8004db8:	f7fe f88a 	bl	8002ed0 <__aeabi_f2d>
 8004dbc:	0004      	movs	r4, r0
 8004dbe:	000d      	movs	r5, r1
 8004dc0:	4963      	ldr	r1, [pc, #396]	; (8004f50 <MadgwickFilterXIO+0xb6c>)
 8004dc2:	69f8      	ldr	r0, [r7, #28]
 8004dc4:	f7fb ff24 	bl	8000c10 <__aeabi_fmul>
 8004dc8:	1c03      	adds	r3, r0, #0
 8004dca:	1c18      	adds	r0, r3, #0
 8004dcc:	f7fe f880 	bl	8002ed0 <__aeabi_f2d>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4b60      	ldr	r3, [pc, #384]	; (8004f54 <MadgwickFilterXIO+0xb70>)
 8004dd4:	f7fc fdce 	bl	8001974 <__aeabi_ddiv>
 8004dd8:	0002      	movs	r2, r0
 8004dda:	000b      	movs	r3, r1
 8004ddc:	0020      	movs	r0, r4
 8004dde:	0029      	movs	r1, r5
 8004de0:	f7fc fa5e 	bl	80012a0 <__aeabi_dadd>
 8004de4:	0002      	movs	r2, r0
 8004de6:	000b      	movs	r3, r1
 8004de8:	0010      	movs	r0, r2
 8004dea:	0019      	movs	r1, r3
 8004dec:	f7fe f8b8 	bl	8002f60 <__aeabi_d2f>
 8004df0:	1c03      	adds	r3, r0, #0
 8004df2:	2584      	movs	r5, #132	; 0x84
 8004df4:	2008      	movs	r0, #8
 8004df6:	183a      	adds	r2, r7, r0
 8004df8:	1951      	adds	r1, r2, r5
 8004dfa:	600b      	str	r3, [r1, #0]
	q4 += qDot4 * SAMPLE_TIME_ICM/1000.0;
 8004dfc:	2280      	movs	r2, #128	; 0x80
 8004dfe:	183b      	adds	r3, r7, r0
 8004e00:	1899      	adds	r1, r3, r2
 8004e02:	6808      	ldr	r0, [r1, #0]
 8004e04:	f7fe f864 	bl	8002ed0 <__aeabi_f2d>
 8004e08:	0004      	movs	r4, r0
 8004e0a:	000d      	movs	r5, r1
 8004e0c:	4950      	ldr	r1, [pc, #320]	; (8004f50 <MadgwickFilterXIO+0xb6c>)
 8004e0e:	69b8      	ldr	r0, [r7, #24]
 8004e10:	f7fb fefe 	bl	8000c10 <__aeabi_fmul>
 8004e14:	1c03      	adds	r3, r0, #0
 8004e16:	1c18      	adds	r0, r3, #0
 8004e18:	f7fe f85a 	bl	8002ed0 <__aeabi_f2d>
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4b4d      	ldr	r3, [pc, #308]	; (8004f54 <MadgwickFilterXIO+0xb70>)
 8004e20:	f7fc fda8 	bl	8001974 <__aeabi_ddiv>
 8004e24:	0002      	movs	r2, r0
 8004e26:	000b      	movs	r3, r1
 8004e28:	0020      	movs	r0, r4
 8004e2a:	0029      	movs	r1, r5
 8004e2c:	f7fc fa38 	bl	80012a0 <__aeabi_dadd>
 8004e30:	0002      	movs	r2, r0
 8004e32:	000b      	movs	r3, r1
 8004e34:	0010      	movs	r0, r2
 8004e36:	0019      	movs	r1, r3
 8004e38:	f7fe f892 	bl	8002f60 <__aeabi_d2f>
 8004e3c:	1c03      	adds	r3, r0, #0
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	2508      	movs	r5, #8
 8004e42:	1979      	adds	r1, r7, r5
 8004e44:	1889      	adds	r1, r1, r2
 8004e46:	600b      	str	r3, [r1, #0]

	norm = 1 / (float) sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8004e48:	208c      	movs	r0, #140	; 0x8c
 8004e4a:	197b      	adds	r3, r7, r5
 8004e4c:	1819      	adds	r1, r3, r0
 8004e4e:	6809      	ldr	r1, [r1, #0]
 8004e50:	197b      	adds	r3, r7, r5
 8004e52:	181c      	adds	r4, r3, r0
 8004e54:	6820      	ldr	r0, [r4, #0]
 8004e56:	f7fb fedb 	bl	8000c10 <__aeabi_fmul>
 8004e5a:	1c03      	adds	r3, r0, #0
 8004e5c:	1c1c      	adds	r4, r3, #0
 8004e5e:	197b      	adds	r3, r7, r5
 8004e60:	1999      	adds	r1, r3, r6
 8004e62:	6809      	ldr	r1, [r1, #0]
 8004e64:	197b      	adds	r3, r7, r5
 8004e66:	199a      	adds	r2, r3, r6
 8004e68:	6810      	ldr	r0, [r2, #0]
 8004e6a:	f7fb fed1 	bl	8000c10 <__aeabi_fmul>
 8004e6e:	1c03      	adds	r3, r0, #0
 8004e70:	1c19      	adds	r1, r3, #0
 8004e72:	1c20      	adds	r0, r4, #0
 8004e74:	f7fb fb66 	bl	8000544 <__aeabi_fadd>
 8004e78:	1c03      	adds	r3, r0, #0
 8004e7a:	1c1c      	adds	r4, r3, #0
 8004e7c:	2584      	movs	r5, #132	; 0x84
 8004e7e:	2008      	movs	r0, #8
 8004e80:	183b      	adds	r3, r7, r0
 8004e82:	1959      	adds	r1, r3, r5
 8004e84:	6809      	ldr	r1, [r1, #0]
 8004e86:	183b      	adds	r3, r7, r0
 8004e88:	195a      	adds	r2, r3, r5
 8004e8a:	6810      	ldr	r0, [r2, #0]
 8004e8c:	f7fb fec0 	bl	8000c10 <__aeabi_fmul>
 8004e90:	1c03      	adds	r3, r0, #0
 8004e92:	1c19      	adds	r1, r3, #0
 8004e94:	1c20      	adds	r0, r4, #0
 8004e96:	f7fb fb55 	bl	8000544 <__aeabi_fadd>
 8004e9a:	1c03      	adds	r3, r0, #0
 8004e9c:	1c1c      	adds	r4, r3, #0
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	2008      	movs	r0, #8
 8004ea2:	183a      	adds	r2, r7, r0
 8004ea4:	18d2      	adds	r2, r2, r3
 8004ea6:	6811      	ldr	r1, [r2, #0]
 8004ea8:	183a      	adds	r2, r7, r0
 8004eaa:	18d2      	adds	r2, r2, r3
 8004eac:	6810      	ldr	r0, [r2, #0]
 8004eae:	f7fb feaf 	bl	8000c10 <__aeabi_fmul>
 8004eb2:	1c03      	adds	r3, r0, #0
 8004eb4:	1c19      	adds	r1, r3, #0
 8004eb6:	1c20      	adds	r0, r4, #0
 8004eb8:	f7fb fb44 	bl	8000544 <__aeabi_fadd>
 8004ebc:	1c03      	adds	r3, r0, #0
 8004ebe:	1c18      	adds	r0, r3, #0
 8004ec0:	f7fe f806 	bl	8002ed0 <__aeabi_f2d>
 8004ec4:	0002      	movs	r2, r0
 8004ec6:	000b      	movs	r3, r1
 8004ec8:	0010      	movs	r0, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	f00a fd74 	bl	800f9b8 <sqrt>
 8004ed0:	0002      	movs	r2, r0
 8004ed2:	000b      	movs	r3, r1
 8004ed4:	0010      	movs	r0, r2
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	f7fe f842 	bl	8002f60 <__aeabi_d2f>
 8004edc:	1c03      	adds	r3, r0, #0
 8004ede:	1c19      	adds	r1, r3, #0
 8004ee0:	20fe      	movs	r0, #254	; 0xfe
 8004ee2:	0580      	lsls	r0, r0, #22
 8004ee4:	f7fb fcca 	bl	800087c <__aeabi_fdiv>
 8004ee8:	1c03      	adds	r3, r0, #0
 8004eea:	63bb      	str	r3, [r7, #56]	; 0x38
	q->q1 = q1 * norm;
 8004eec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004eee:	208c      	movs	r0, #140	; 0x8c
 8004ef0:	2408      	movs	r4, #8
 8004ef2:	193b      	adds	r3, r7, r4
 8004ef4:	181a      	adds	r2, r3, r0
 8004ef6:	6810      	ldr	r0, [r2, #0]
 8004ef8:	f7fb fe8a 	bl	8000c10 <__aeabi_fmul>
 8004efc:	1c03      	adds	r3, r0, #0
 8004efe:	1c1a      	adds	r2, r3, #0
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	601a      	str	r2, [r3, #0]
	q->q2 = q2 * norm;
 8004f04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f06:	193b      	adds	r3, r7, r4
 8004f08:	199a      	adds	r2, r3, r6
 8004f0a:	6810      	ldr	r0, [r2, #0]
 8004f0c:	f7fb fe80 	bl	8000c10 <__aeabi_fmul>
 8004f10:	1c03      	adds	r3, r0, #0
 8004f12:	1c1a      	adds	r2, r3, #0
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	605a      	str	r2, [r3, #4]
	q->q3 = q3 * norm;
 8004f18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f1a:	193b      	adds	r3, r7, r4
 8004f1c:	195a      	adds	r2, r3, r5
 8004f1e:	6810      	ldr	r0, [r2, #0]
 8004f20:	f7fb fe76 	bl	8000c10 <__aeabi_fmul>
 8004f24:	1c03      	adds	r3, r0, #0
 8004f26:	1c1a      	adds	r2, r3, #0
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	609a      	str	r2, [r3, #8]
	q->q4 = q4 * norm;
 8004f2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f2e:	2380      	movs	r3, #128	; 0x80
 8004f30:	2208      	movs	r2, #8
 8004f32:	4694      	mov	ip, r2
 8004f34:	44bc      	add	ip, r7
 8004f36:	4463      	add	r3, ip
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	f7fb fe69 	bl	8000c10 <__aeabi_fmul>
 8004f3e:	1c03      	adds	r3, r0, #0
 8004f40:	1c1a      	adds	r2, r3, #0
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	60da      	str	r2, [r3, #12]
 8004f46:	e000      	b.n	8004f4a <MadgwickFilterXIO+0xb66>
	if (norm == 0) return; // handle NaN
 8004f48:	46c0      	nop			; (mov r8, r8)
}
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b027      	add	sp, #156	; 0x9c
 8004f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f50:	41f00000 	.word	0x41f00000
 8004f54:	408f4000 	.word	0x408f4000

08004f58 <GyroLowPassFilter>:
	q->q3 = q2;
	q->q4 = q3;
}

void GyroLowPassFilter(float *gyro_data, float* prev_filt, float* filt, float a)
{
 8004f58:	b5b0      	push	{r4, r5, r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
	// Calculating new high-pass filtered data
	filt[0] = prev_filt[0] + a*(gyro_data[0] - prev_filt[0]);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	681c      	ldr	r4, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	1c19      	adds	r1, r3, #0
 8004f74:	1c10      	adds	r0, r2, #0
 8004f76:	f7fb ff65 	bl	8000e44 <__aeabi_fsub>
 8004f7a:	1c03      	adds	r3, r0, #0
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	1c18      	adds	r0, r3, #0
 8004f80:	f7fb fe46 	bl	8000c10 <__aeabi_fmul>
 8004f84:	1c03      	adds	r3, r0, #0
 8004f86:	1c19      	adds	r1, r3, #0
 8004f88:	1c20      	adds	r0, r4, #0
 8004f8a:	f7fb fadb 	bl	8000544 <__aeabi_fadd>
 8004f8e:	1c03      	adds	r3, r0, #0
 8004f90:	1c1a      	adds	r2, r3, #0
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	601a      	str	r2, [r3, #0]
	filt[1] = prev_filt[1] + a*(gyro_data[1] - prev_filt[1]);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	681d      	ldr	r5, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	1c19      	adds	r1, r3, #0
 8004faa:	1c10      	adds	r0, r2, #0
 8004fac:	f7fb ff4a 	bl	8000e44 <__aeabi_fsub>
 8004fb0:	1c03      	adds	r3, r0, #0
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	1c18      	adds	r0, r3, #0
 8004fb6:	f7fb fe2b 	bl	8000c10 <__aeabi_fmul>
 8004fba:	1c03      	adds	r3, r0, #0
 8004fbc:	1c1a      	adds	r2, r3, #0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	1d1c      	adds	r4, r3, #4
 8004fc2:	1c11      	adds	r1, r2, #0
 8004fc4:	1c28      	adds	r0, r5, #0
 8004fc6:	f7fb fabd 	bl	8000544 <__aeabi_fadd>
 8004fca:	1c03      	adds	r3, r0, #0
 8004fcc:	6023      	str	r3, [r4, #0]
	filt[2] = prev_filt[2] + a*(gyro_data[2] - prev_filt[2]);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	681d      	ldr	r5, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	1c19      	adds	r1, r3, #0
 8004fe2:	1c10      	adds	r0, r2, #0
 8004fe4:	f7fb ff2e 	bl	8000e44 <__aeabi_fsub>
 8004fe8:	1c03      	adds	r3, r0, #0
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	1c18      	adds	r0, r3, #0
 8004fee:	f7fb fe0f 	bl	8000c10 <__aeabi_fmul>
 8004ff2:	1c03      	adds	r3, r0, #0
 8004ff4:	1c1a      	adds	r2, r3, #0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	001c      	movs	r4, r3
 8004ffc:	1c11      	adds	r1, r2, #0
 8004ffe:	1c28      	adds	r0, r5, #0
 8005000:	f7fb faa0 	bl	8000544 <__aeabi_fadd>
 8005004:	1c03      	adds	r3, r0, #0
 8005006:	6023      	str	r3, [r4, #0]

	prev_filt[0] = filt[0];
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	601a      	str	r2, [r3, #0]
	prev_filt[1] = filt[1];
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	3304      	adds	r3, #4
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6852      	ldr	r2, [r2, #4]
 8005018:	601a      	str	r2, [r3, #0]
	prev_filt[2] = filt[2];
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	3308      	adds	r3, #8
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6892      	ldr	r2, [r2, #8]
 8005022:	601a      	str	r2, [r3, #0]
}
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b004      	add	sp, #16
 800502a:	bdb0      	pop	{r4, r5, r7, pc}

0800502c <CalculateRotationMatrix>:
	quad->q3 /= length;
	quad->q4 /= length;

}

void CalculateRotationMatrix(float* acc_bias, struct matrix *RotationMatrix){
 800502c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502e:	b0a7      	sub	sp, #156	; 0x9c
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
	struct matrix Roll;
	struct matrix Pitch;
	struct matrix Yaw;
	struct matrix YawTimesPitch;

	Roll.a11 = 1.0;
 8005036:	2474      	movs	r4, #116	; 0x74
 8005038:	193b      	adds	r3, r7, r4
 800503a:	22fe      	movs	r2, #254	; 0xfe
 800503c:	0592      	lsls	r2, r2, #22
 800503e:	601a      	str	r2, [r3, #0]
	Roll.a12 = 0.0;
 8005040:	193b      	adds	r3, r7, r4
 8005042:	2200      	movs	r2, #0
 8005044:	605a      	str	r2, [r3, #4]
	Roll.a13 = 0.0;
 8005046:	193b      	adds	r3, r7, r4
 8005048:	2200      	movs	r2, #0
 800504a:	609a      	str	r2, [r3, #8]
	Roll.a21 = 0.0;
 800504c:	193b      	adds	r3, r7, r4
 800504e:	2200      	movs	r2, #0
 8005050:	60da      	str	r2, [r3, #12]
	Roll.a22= cos(acc_bias[0]*DEG_2_RAD);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	1c18      	adds	r0, r3, #0
 8005058:	f7fd ff3a 	bl	8002ed0 <__aeabi_f2d>
 800505c:	4afd      	ldr	r2, [pc, #1012]	; (8005454 <CalculateRotationMatrix+0x428>)
 800505e:	4bfe      	ldr	r3, [pc, #1016]	; (8005458 <CalculateRotationMatrix+0x42c>)
 8005060:	f7fd f88e 	bl	8002180 <__aeabi_dmul>
 8005064:	0002      	movs	r2, r0
 8005066:	000b      	movs	r3, r1
 8005068:	0010      	movs	r0, r2
 800506a:	0019      	movs	r1, r3
 800506c:	f00a fb2c 	bl	800f6c8 <cos>
 8005070:	0002      	movs	r2, r0
 8005072:	000b      	movs	r3, r1
 8005074:	0010      	movs	r0, r2
 8005076:	0019      	movs	r1, r3
 8005078:	f7fd ff72 	bl	8002f60 <__aeabi_d2f>
 800507c:	1c02      	adds	r2, r0, #0
 800507e:	193b      	adds	r3, r7, r4
 8005080:	611a      	str	r2, [r3, #16]
	Roll.a23 = -sin(acc_bias[0]*DEG_2_RAD);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1c18      	adds	r0, r3, #0
 8005088:	f7fd ff22 	bl	8002ed0 <__aeabi_f2d>
 800508c:	4af1      	ldr	r2, [pc, #964]	; (8005454 <CalculateRotationMatrix+0x428>)
 800508e:	4bf2      	ldr	r3, [pc, #968]	; (8005458 <CalculateRotationMatrix+0x42c>)
 8005090:	f7fd f876 	bl	8002180 <__aeabi_dmul>
 8005094:	0002      	movs	r2, r0
 8005096:	000b      	movs	r3, r1
 8005098:	0010      	movs	r0, r2
 800509a:	0019      	movs	r1, r3
 800509c:	f00a fb5a 	bl	800f754 <sin>
 80050a0:	0002      	movs	r2, r0
 80050a2:	000b      	movs	r3, r1
 80050a4:	0010      	movs	r0, r2
 80050a6:	0019      	movs	r1, r3
 80050a8:	f7fd ff5a 	bl	8002f60 <__aeabi_d2f>
 80050ac:	1c02      	adds	r2, r0, #0
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	061b      	lsls	r3, r3, #24
 80050b2:	405a      	eors	r2, r3
 80050b4:	0025      	movs	r5, r4
 80050b6:	197b      	adds	r3, r7, r5
 80050b8:	615a      	str	r2, [r3, #20]
	Roll.a31 = 0.0;
 80050ba:	197b      	adds	r3, r7, r5
 80050bc:	2200      	movs	r2, #0
 80050be:	619a      	str	r2, [r3, #24]
	Roll.a32 = sin(acc_bias[0]*DEG_2_RAD);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	1c18      	adds	r0, r3, #0
 80050c6:	f7fd ff03 	bl	8002ed0 <__aeabi_f2d>
 80050ca:	4ae2      	ldr	r2, [pc, #904]	; (8005454 <CalculateRotationMatrix+0x428>)
 80050cc:	4be2      	ldr	r3, [pc, #904]	; (8005458 <CalculateRotationMatrix+0x42c>)
 80050ce:	f7fd f857 	bl	8002180 <__aeabi_dmul>
 80050d2:	0002      	movs	r2, r0
 80050d4:	000b      	movs	r3, r1
 80050d6:	0010      	movs	r0, r2
 80050d8:	0019      	movs	r1, r3
 80050da:	f00a fb3b 	bl	800f754 <sin>
 80050de:	0002      	movs	r2, r0
 80050e0:	000b      	movs	r3, r1
 80050e2:	0010      	movs	r0, r2
 80050e4:	0019      	movs	r1, r3
 80050e6:	f7fd ff3b 	bl	8002f60 <__aeabi_d2f>
 80050ea:	1c02      	adds	r2, r0, #0
 80050ec:	197b      	adds	r3, r7, r5
 80050ee:	61da      	str	r2, [r3, #28]
	Roll.a33 = cos(acc_bias[0]*DEG_2_RAD);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	1c18      	adds	r0, r3, #0
 80050f6:	f7fd feeb 	bl	8002ed0 <__aeabi_f2d>
 80050fa:	4ad6      	ldr	r2, [pc, #856]	; (8005454 <CalculateRotationMatrix+0x428>)
 80050fc:	4bd6      	ldr	r3, [pc, #856]	; (8005458 <CalculateRotationMatrix+0x42c>)
 80050fe:	f7fd f83f 	bl	8002180 <__aeabi_dmul>
 8005102:	0002      	movs	r2, r0
 8005104:	000b      	movs	r3, r1
 8005106:	0010      	movs	r0, r2
 8005108:	0019      	movs	r1, r3
 800510a:	f00a fadd 	bl	800f6c8 <cos>
 800510e:	0002      	movs	r2, r0
 8005110:	000b      	movs	r3, r1
 8005112:	0010      	movs	r0, r2
 8005114:	0019      	movs	r1, r3
 8005116:	f7fd ff23 	bl	8002f60 <__aeabi_d2f>
 800511a:	1c02      	adds	r2, r0, #0
 800511c:	197b      	adds	r3, r7, r5
 800511e:	621a      	str	r2, [r3, #32]

	Pitch.a11 = cos(acc_bias[1]*DEG_2_RAD);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	1c18      	adds	r0, r3, #0
 8005128:	f7fd fed2 	bl	8002ed0 <__aeabi_f2d>
 800512c:	4ac9      	ldr	r2, [pc, #804]	; (8005454 <CalculateRotationMatrix+0x428>)
 800512e:	4bca      	ldr	r3, [pc, #808]	; (8005458 <CalculateRotationMatrix+0x42c>)
 8005130:	f7fd f826 	bl	8002180 <__aeabi_dmul>
 8005134:	0002      	movs	r2, r0
 8005136:	000b      	movs	r3, r1
 8005138:	0010      	movs	r0, r2
 800513a:	0019      	movs	r1, r3
 800513c:	f00a fac4 	bl	800f6c8 <cos>
 8005140:	0002      	movs	r2, r0
 8005142:	000b      	movs	r3, r1
 8005144:	0010      	movs	r0, r2
 8005146:	0019      	movs	r1, r3
 8005148:	f7fd ff0a 	bl	8002f60 <__aeabi_d2f>
 800514c:	1c02      	adds	r2, r0, #0
 800514e:	2450      	movs	r4, #80	; 0x50
 8005150:	193b      	adds	r3, r7, r4
 8005152:	601a      	str	r2, [r3, #0]
	Pitch.a12 = 0.0;
 8005154:	193b      	adds	r3, r7, r4
 8005156:	2200      	movs	r2, #0
 8005158:	605a      	str	r2, [r3, #4]
	Pitch.a13 = sin(acc_bias[1]*DEG_2_RAD);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3304      	adds	r3, #4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	1c18      	adds	r0, r3, #0
 8005162:	f7fd feb5 	bl	8002ed0 <__aeabi_f2d>
 8005166:	4abb      	ldr	r2, [pc, #748]	; (8005454 <CalculateRotationMatrix+0x428>)
 8005168:	4bbb      	ldr	r3, [pc, #748]	; (8005458 <CalculateRotationMatrix+0x42c>)
 800516a:	f7fd f809 	bl	8002180 <__aeabi_dmul>
 800516e:	0002      	movs	r2, r0
 8005170:	000b      	movs	r3, r1
 8005172:	0010      	movs	r0, r2
 8005174:	0019      	movs	r1, r3
 8005176:	f00a faed 	bl	800f754 <sin>
 800517a:	0002      	movs	r2, r0
 800517c:	000b      	movs	r3, r1
 800517e:	0010      	movs	r0, r2
 8005180:	0019      	movs	r1, r3
 8005182:	f7fd feed 	bl	8002f60 <__aeabi_d2f>
 8005186:	1c02      	adds	r2, r0, #0
 8005188:	193b      	adds	r3, r7, r4
 800518a:	609a      	str	r2, [r3, #8]
	Pitch.a21 = 0.0;
 800518c:	193b      	adds	r3, r7, r4
 800518e:	2200      	movs	r2, #0
 8005190:	60da      	str	r2, [r3, #12]
	Pitch.a22 = 1.0;
 8005192:	193b      	adds	r3, r7, r4
 8005194:	22fe      	movs	r2, #254	; 0xfe
 8005196:	0592      	lsls	r2, r2, #22
 8005198:	611a      	str	r2, [r3, #16]
	Pitch.a23 = 0.0;
 800519a:	193b      	adds	r3, r7, r4
 800519c:	2200      	movs	r2, #0
 800519e:	615a      	str	r2, [r3, #20]
	Pitch.a31 = -sin(acc_bias[1]*DEG_2_RAD);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3304      	adds	r3, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	1c18      	adds	r0, r3, #0
 80051a8:	f7fd fe92 	bl	8002ed0 <__aeabi_f2d>
 80051ac:	4aa9      	ldr	r2, [pc, #676]	; (8005454 <CalculateRotationMatrix+0x428>)
 80051ae:	4baa      	ldr	r3, [pc, #680]	; (8005458 <CalculateRotationMatrix+0x42c>)
 80051b0:	f7fc ffe6 	bl	8002180 <__aeabi_dmul>
 80051b4:	0002      	movs	r2, r0
 80051b6:	000b      	movs	r3, r1
 80051b8:	0010      	movs	r0, r2
 80051ba:	0019      	movs	r1, r3
 80051bc:	f00a faca 	bl	800f754 <sin>
 80051c0:	0002      	movs	r2, r0
 80051c2:	000b      	movs	r3, r1
 80051c4:	0010      	movs	r0, r2
 80051c6:	0019      	movs	r1, r3
 80051c8:	f7fd feca 	bl	8002f60 <__aeabi_d2f>
 80051cc:	1c02      	adds	r2, r0, #0
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	405a      	eors	r2, r3
 80051d4:	193b      	adds	r3, r7, r4
 80051d6:	619a      	str	r2, [r3, #24]
	Pitch.a32 = 0.0;
 80051d8:	193b      	adds	r3, r7, r4
 80051da:	2200      	movs	r2, #0
 80051dc:	61da      	str	r2, [r3, #28]
	Pitch.a33 = cos(acc_bias[1]*DEG_2_RAD);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3304      	adds	r3, #4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	1c18      	adds	r0, r3, #0
 80051e6:	f7fd fe73 	bl	8002ed0 <__aeabi_f2d>
 80051ea:	4a9a      	ldr	r2, [pc, #616]	; (8005454 <CalculateRotationMatrix+0x428>)
 80051ec:	4b9a      	ldr	r3, [pc, #616]	; (8005458 <CalculateRotationMatrix+0x42c>)
 80051ee:	f7fc ffc7 	bl	8002180 <__aeabi_dmul>
 80051f2:	0002      	movs	r2, r0
 80051f4:	000b      	movs	r3, r1
 80051f6:	0010      	movs	r0, r2
 80051f8:	0019      	movs	r1, r3
 80051fa:	f00a fa65 	bl	800f6c8 <cos>
 80051fe:	0002      	movs	r2, r0
 8005200:	000b      	movs	r3, r1
 8005202:	0010      	movs	r0, r2
 8005204:	0019      	movs	r1, r3
 8005206:	f7fd feab 	bl	8002f60 <__aeabi_d2f>
 800520a:	1c02      	adds	r2, r0, #0
 800520c:	0021      	movs	r1, r4
 800520e:	193b      	adds	r3, r7, r4
 8005210:	621a      	str	r2, [r3, #32]

	Yaw.a11 = 1.0;
 8005212:	202c      	movs	r0, #44	; 0x2c
 8005214:	183b      	adds	r3, r7, r0
 8005216:	22fe      	movs	r2, #254	; 0xfe
 8005218:	0592      	lsls	r2, r2, #22
 800521a:	601a      	str	r2, [r3, #0]
	Yaw.a12 = 0.0;
 800521c:	183b      	adds	r3, r7, r0
 800521e:	2200      	movs	r2, #0
 8005220:	605a      	str	r2, [r3, #4]
	Yaw.a13 = 0.0;
 8005222:	183b      	adds	r3, r7, r0
 8005224:	2200      	movs	r2, #0
 8005226:	609a      	str	r2, [r3, #8]
	Yaw.a21 = 0.0;
 8005228:	183b      	adds	r3, r7, r0
 800522a:	2200      	movs	r2, #0
 800522c:	60da      	str	r2, [r3, #12]
	Yaw.a22 = 1.0;
 800522e:	183b      	adds	r3, r7, r0
 8005230:	22fe      	movs	r2, #254	; 0xfe
 8005232:	0592      	lsls	r2, r2, #22
 8005234:	611a      	str	r2, [r3, #16]
	Yaw.a23 = 0.0;
 8005236:	183b      	adds	r3, r7, r0
 8005238:	2200      	movs	r2, #0
 800523a:	615a      	str	r2, [r3, #20]
	Yaw.a31 = 0.0;
 800523c:	183b      	adds	r3, r7, r0
 800523e:	2200      	movs	r2, #0
 8005240:	619a      	str	r2, [r3, #24]
	Yaw.a32 = 0.0;
 8005242:	183b      	adds	r3, r7, r0
 8005244:	2200      	movs	r2, #0
 8005246:	61da      	str	r2, [r3, #28]
	Yaw.a33 = 1.0;
 8005248:	183b      	adds	r3, r7, r0
 800524a:	22fe      	movs	r2, #254	; 0xfe
 800524c:	0592      	lsls	r2, r2, #22
 800524e:	621a      	str	r2, [r3, #32]

	YawTimesPitch.a11 = Yaw.a11*Pitch.a11 + Yaw.a12*Pitch.a21 + Yaw.a13*Pitch.a31;
 8005250:	183b      	adds	r3, r7, r0
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	000e      	movs	r6, r1
 8005256:	19bb      	adds	r3, r7, r6
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	1c19      	adds	r1, r3, #0
 800525c:	1c10      	adds	r0, r2, #0
 800525e:	f7fb fcd7 	bl	8000c10 <__aeabi_fmul>
 8005262:	1c03      	adds	r3, r0, #0
 8005264:	1c1c      	adds	r4, r3, #0
 8005266:	202c      	movs	r0, #44	; 0x2c
 8005268:	183b      	adds	r3, r7, r0
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	19bb      	adds	r3, r7, r6
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	1c19      	adds	r1, r3, #0
 8005272:	1c10      	adds	r0, r2, #0
 8005274:	f7fb fccc 	bl	8000c10 <__aeabi_fmul>
 8005278:	1c03      	adds	r3, r0, #0
 800527a:	1c19      	adds	r1, r3, #0
 800527c:	1c20      	adds	r0, r4, #0
 800527e:	f7fb f961 	bl	8000544 <__aeabi_fadd>
 8005282:	1c03      	adds	r3, r0, #0
 8005284:	1c1c      	adds	r4, r3, #0
 8005286:	202c      	movs	r0, #44	; 0x2c
 8005288:	183b      	adds	r3, r7, r0
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	19bb      	adds	r3, r7, r6
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	1c19      	adds	r1, r3, #0
 8005292:	1c10      	adds	r0, r2, #0
 8005294:	f7fb fcbc 	bl	8000c10 <__aeabi_fmul>
 8005298:	1c03      	adds	r3, r0, #0
 800529a:	1c19      	adds	r1, r3, #0
 800529c:	1c20      	adds	r0, r4, #0
 800529e:	f7fb f951 	bl	8000544 <__aeabi_fadd>
 80052a2:	1c03      	adds	r3, r0, #0
 80052a4:	1c1a      	adds	r2, r3, #0
 80052a6:	2308      	movs	r3, #8
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	601a      	str	r2, [r3, #0]
	YawTimesPitch.a12 = Yaw.a11*Pitch.a12 + Yaw.a12*Pitch.a22 + Yaw.a13*Pitch.a32;
 80052ac:	202c      	movs	r0, #44	; 0x2c
 80052ae:	183b      	adds	r3, r7, r0
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	19bb      	adds	r3, r7, r6
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	1c19      	adds	r1, r3, #0
 80052b8:	1c10      	adds	r0, r2, #0
 80052ba:	f7fb fca9 	bl	8000c10 <__aeabi_fmul>
 80052be:	1c03      	adds	r3, r0, #0
 80052c0:	1c1c      	adds	r4, r3, #0
 80052c2:	202c      	movs	r0, #44	; 0x2c
 80052c4:	183b      	adds	r3, r7, r0
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	19bb      	adds	r3, r7, r6
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	1c19      	adds	r1, r3, #0
 80052ce:	1c10      	adds	r0, r2, #0
 80052d0:	f7fb fc9e 	bl	8000c10 <__aeabi_fmul>
 80052d4:	1c03      	adds	r3, r0, #0
 80052d6:	1c19      	adds	r1, r3, #0
 80052d8:	1c20      	adds	r0, r4, #0
 80052da:	f7fb f933 	bl	8000544 <__aeabi_fadd>
 80052de:	1c03      	adds	r3, r0, #0
 80052e0:	1c1c      	adds	r4, r3, #0
 80052e2:	202c      	movs	r0, #44	; 0x2c
 80052e4:	183b      	adds	r3, r7, r0
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	19bb      	adds	r3, r7, r6
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	1c19      	adds	r1, r3, #0
 80052ee:	1c10      	adds	r0, r2, #0
 80052f0:	f7fb fc8e 	bl	8000c10 <__aeabi_fmul>
 80052f4:	1c03      	adds	r3, r0, #0
 80052f6:	1c19      	adds	r1, r3, #0
 80052f8:	1c20      	adds	r0, r4, #0
 80052fa:	f7fb f923 	bl	8000544 <__aeabi_fadd>
 80052fe:	1c03      	adds	r3, r0, #0
 8005300:	1c1a      	adds	r2, r3, #0
 8005302:	2308      	movs	r3, #8
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	605a      	str	r2, [r3, #4]
	YawTimesPitch.a13 = Yaw.a11*Pitch.a13 + Yaw.a12*Pitch.a23 + Yaw.a13*Pitch.a33;
 8005308:	202c      	movs	r0, #44	; 0x2c
 800530a:	183b      	adds	r3, r7, r0
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	19bb      	adds	r3, r7, r6
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	1c19      	adds	r1, r3, #0
 8005314:	1c10      	adds	r0, r2, #0
 8005316:	f7fb fc7b 	bl	8000c10 <__aeabi_fmul>
 800531a:	1c03      	adds	r3, r0, #0
 800531c:	1c1c      	adds	r4, r3, #0
 800531e:	202c      	movs	r0, #44	; 0x2c
 8005320:	183b      	adds	r3, r7, r0
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	19bb      	adds	r3, r7, r6
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	1c19      	adds	r1, r3, #0
 800532a:	1c10      	adds	r0, r2, #0
 800532c:	f7fb fc70 	bl	8000c10 <__aeabi_fmul>
 8005330:	1c03      	adds	r3, r0, #0
 8005332:	1c19      	adds	r1, r3, #0
 8005334:	1c20      	adds	r0, r4, #0
 8005336:	f7fb f905 	bl	8000544 <__aeabi_fadd>
 800533a:	1c03      	adds	r3, r0, #0
 800533c:	1c1c      	adds	r4, r3, #0
 800533e:	202c      	movs	r0, #44	; 0x2c
 8005340:	183b      	adds	r3, r7, r0
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	19bb      	adds	r3, r7, r6
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	1c19      	adds	r1, r3, #0
 800534a:	1c10      	adds	r0, r2, #0
 800534c:	f7fb fc60 	bl	8000c10 <__aeabi_fmul>
 8005350:	1c03      	adds	r3, r0, #0
 8005352:	1c19      	adds	r1, r3, #0
 8005354:	1c20      	adds	r0, r4, #0
 8005356:	f7fb f8f5 	bl	8000544 <__aeabi_fadd>
 800535a:	1c03      	adds	r3, r0, #0
 800535c:	1c1a      	adds	r2, r3, #0
 800535e:	2308      	movs	r3, #8
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	609a      	str	r2, [r3, #8]
	YawTimesPitch.a21 = Yaw.a21*Pitch.a11 + Yaw.a22*Pitch.a21 + Yaw.a23*Pitch.a31;
 8005364:	202c      	movs	r0, #44	; 0x2c
 8005366:	183b      	adds	r3, r7, r0
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	19bb      	adds	r3, r7, r6
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	1c19      	adds	r1, r3, #0
 8005370:	1c10      	adds	r0, r2, #0
 8005372:	f7fb fc4d 	bl	8000c10 <__aeabi_fmul>
 8005376:	1c03      	adds	r3, r0, #0
 8005378:	1c1c      	adds	r4, r3, #0
 800537a:	202c      	movs	r0, #44	; 0x2c
 800537c:	183b      	adds	r3, r7, r0
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	19bb      	adds	r3, r7, r6
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	1c19      	adds	r1, r3, #0
 8005386:	1c10      	adds	r0, r2, #0
 8005388:	f7fb fc42 	bl	8000c10 <__aeabi_fmul>
 800538c:	1c03      	adds	r3, r0, #0
 800538e:	1c19      	adds	r1, r3, #0
 8005390:	1c20      	adds	r0, r4, #0
 8005392:	f7fb f8d7 	bl	8000544 <__aeabi_fadd>
 8005396:	1c03      	adds	r3, r0, #0
 8005398:	1c1c      	adds	r4, r3, #0
 800539a:	202c      	movs	r0, #44	; 0x2c
 800539c:	183b      	adds	r3, r7, r0
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	19bb      	adds	r3, r7, r6
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	1c19      	adds	r1, r3, #0
 80053a6:	1c10      	adds	r0, r2, #0
 80053a8:	f7fb fc32 	bl	8000c10 <__aeabi_fmul>
 80053ac:	1c03      	adds	r3, r0, #0
 80053ae:	1c19      	adds	r1, r3, #0
 80053b0:	1c20      	adds	r0, r4, #0
 80053b2:	f7fb f8c7 	bl	8000544 <__aeabi_fadd>
 80053b6:	1c03      	adds	r3, r0, #0
 80053b8:	1c1a      	adds	r2, r3, #0
 80053ba:	2308      	movs	r3, #8
 80053bc:	18fb      	adds	r3, r7, r3
 80053be:	60da      	str	r2, [r3, #12]
	YawTimesPitch.a22 = Yaw.a21*Pitch.a12 + Yaw.a22*Pitch.a22 + Yaw.a23*Pitch.a32;
 80053c0:	202c      	movs	r0, #44	; 0x2c
 80053c2:	183b      	adds	r3, r7, r0
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	19bb      	adds	r3, r7, r6
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	1c19      	adds	r1, r3, #0
 80053cc:	1c10      	adds	r0, r2, #0
 80053ce:	f7fb fc1f 	bl	8000c10 <__aeabi_fmul>
 80053d2:	1c03      	adds	r3, r0, #0
 80053d4:	1c1c      	adds	r4, r3, #0
 80053d6:	202c      	movs	r0, #44	; 0x2c
 80053d8:	183b      	adds	r3, r7, r0
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	19bb      	adds	r3, r7, r6
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	1c19      	adds	r1, r3, #0
 80053e2:	1c10      	adds	r0, r2, #0
 80053e4:	f7fb fc14 	bl	8000c10 <__aeabi_fmul>
 80053e8:	1c03      	adds	r3, r0, #0
 80053ea:	1c19      	adds	r1, r3, #0
 80053ec:	1c20      	adds	r0, r4, #0
 80053ee:	f7fb f8a9 	bl	8000544 <__aeabi_fadd>
 80053f2:	1c03      	adds	r3, r0, #0
 80053f4:	1c1c      	adds	r4, r3, #0
 80053f6:	202c      	movs	r0, #44	; 0x2c
 80053f8:	183b      	adds	r3, r7, r0
 80053fa:	695a      	ldr	r2, [r3, #20]
 80053fc:	19bb      	adds	r3, r7, r6
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	1c19      	adds	r1, r3, #0
 8005402:	1c10      	adds	r0, r2, #0
 8005404:	f7fb fc04 	bl	8000c10 <__aeabi_fmul>
 8005408:	1c03      	adds	r3, r0, #0
 800540a:	1c19      	adds	r1, r3, #0
 800540c:	1c20      	adds	r0, r4, #0
 800540e:	f7fb f899 	bl	8000544 <__aeabi_fadd>
 8005412:	1c03      	adds	r3, r0, #0
 8005414:	1c1a      	adds	r2, r3, #0
 8005416:	2308      	movs	r3, #8
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	611a      	str	r2, [r3, #16]
	YawTimesPitch.a23 = Yaw.a21*Pitch.a13 + Yaw.a22*Pitch.a23 + Yaw.a23*Pitch.a33;
 800541c:	202c      	movs	r0, #44	; 0x2c
 800541e:	183b      	adds	r3, r7, r0
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	19bb      	adds	r3, r7, r6
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	1c19      	adds	r1, r3, #0
 8005428:	1c10      	adds	r0, r2, #0
 800542a:	f7fb fbf1 	bl	8000c10 <__aeabi_fmul>
 800542e:	1c03      	adds	r3, r0, #0
 8005430:	1c1c      	adds	r4, r3, #0
 8005432:	202c      	movs	r0, #44	; 0x2c
 8005434:	183b      	adds	r3, r7, r0
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	19bb      	adds	r3, r7, r6
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	1c19      	adds	r1, r3, #0
 800543e:	1c10      	adds	r0, r2, #0
 8005440:	f7fb fbe6 	bl	8000c10 <__aeabi_fmul>
 8005444:	1c03      	adds	r3, r0, #0
 8005446:	1c19      	adds	r1, r3, #0
 8005448:	1c20      	adds	r0, r4, #0
 800544a:	f7fb f87b 	bl	8000544 <__aeabi_fadd>
 800544e:	1c03      	adds	r3, r0, #0
 8005450:	1c1c      	adds	r4, r3, #0
 8005452:	e003      	b.n	800545c <CalculateRotationMatrix+0x430>
 8005454:	a2529d39 	.word	0xa2529d39
 8005458:	3f91df46 	.word	0x3f91df46
 800545c:	202c      	movs	r0, #44	; 0x2c
 800545e:	183b      	adds	r3, r7, r0
 8005460:	695a      	ldr	r2, [r3, #20]
 8005462:	19bb      	adds	r3, r7, r6
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	1c19      	adds	r1, r3, #0
 8005468:	1c10      	adds	r0, r2, #0
 800546a:	f7fb fbd1 	bl	8000c10 <__aeabi_fmul>
 800546e:	1c03      	adds	r3, r0, #0
 8005470:	1c19      	adds	r1, r3, #0
 8005472:	1c20      	adds	r0, r4, #0
 8005474:	f7fb f866 	bl	8000544 <__aeabi_fadd>
 8005478:	1c03      	adds	r3, r0, #0
 800547a:	1c1a      	adds	r2, r3, #0
 800547c:	2308      	movs	r3, #8
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	615a      	str	r2, [r3, #20]
	YawTimesPitch.a31 = Yaw.a31*Pitch.a11 + Yaw.a32*Pitch.a21 + Yaw.a33*Pitch.a31;
 8005482:	202c      	movs	r0, #44	; 0x2c
 8005484:	183b      	adds	r3, r7, r0
 8005486:	699a      	ldr	r2, [r3, #24]
 8005488:	19bb      	adds	r3, r7, r6
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	1c19      	adds	r1, r3, #0
 800548e:	1c10      	adds	r0, r2, #0
 8005490:	f7fb fbbe 	bl	8000c10 <__aeabi_fmul>
 8005494:	1c03      	adds	r3, r0, #0
 8005496:	1c1c      	adds	r4, r3, #0
 8005498:	202c      	movs	r0, #44	; 0x2c
 800549a:	183b      	adds	r3, r7, r0
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	19bb      	adds	r3, r7, r6
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	1c19      	adds	r1, r3, #0
 80054a4:	1c10      	adds	r0, r2, #0
 80054a6:	f7fb fbb3 	bl	8000c10 <__aeabi_fmul>
 80054aa:	1c03      	adds	r3, r0, #0
 80054ac:	1c19      	adds	r1, r3, #0
 80054ae:	1c20      	adds	r0, r4, #0
 80054b0:	f7fb f848 	bl	8000544 <__aeabi_fadd>
 80054b4:	1c03      	adds	r3, r0, #0
 80054b6:	1c1c      	adds	r4, r3, #0
 80054b8:	202c      	movs	r0, #44	; 0x2c
 80054ba:	183b      	adds	r3, r7, r0
 80054bc:	6a1a      	ldr	r2, [r3, #32]
 80054be:	19bb      	adds	r3, r7, r6
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	1c19      	adds	r1, r3, #0
 80054c4:	1c10      	adds	r0, r2, #0
 80054c6:	f7fb fba3 	bl	8000c10 <__aeabi_fmul>
 80054ca:	1c03      	adds	r3, r0, #0
 80054cc:	1c19      	adds	r1, r3, #0
 80054ce:	1c20      	adds	r0, r4, #0
 80054d0:	f7fb f838 	bl	8000544 <__aeabi_fadd>
 80054d4:	1c03      	adds	r3, r0, #0
 80054d6:	1c1a      	adds	r2, r3, #0
 80054d8:	2308      	movs	r3, #8
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	619a      	str	r2, [r3, #24]
	YawTimesPitch.a32 = Yaw.a31*Pitch.a12 + Yaw.a32*Pitch.a22 + Yaw.a33*Pitch.a32;
 80054de:	202c      	movs	r0, #44	; 0x2c
 80054e0:	183b      	adds	r3, r7, r0
 80054e2:	699a      	ldr	r2, [r3, #24]
 80054e4:	19bb      	adds	r3, r7, r6
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	1c19      	adds	r1, r3, #0
 80054ea:	1c10      	adds	r0, r2, #0
 80054ec:	f7fb fb90 	bl	8000c10 <__aeabi_fmul>
 80054f0:	1c03      	adds	r3, r0, #0
 80054f2:	1c1c      	adds	r4, r3, #0
 80054f4:	202c      	movs	r0, #44	; 0x2c
 80054f6:	183b      	adds	r3, r7, r0
 80054f8:	69da      	ldr	r2, [r3, #28]
 80054fa:	19bb      	adds	r3, r7, r6
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	1c19      	adds	r1, r3, #0
 8005500:	1c10      	adds	r0, r2, #0
 8005502:	f7fb fb85 	bl	8000c10 <__aeabi_fmul>
 8005506:	1c03      	adds	r3, r0, #0
 8005508:	1c19      	adds	r1, r3, #0
 800550a:	1c20      	adds	r0, r4, #0
 800550c:	f7fb f81a 	bl	8000544 <__aeabi_fadd>
 8005510:	1c03      	adds	r3, r0, #0
 8005512:	1c1c      	adds	r4, r3, #0
 8005514:	202c      	movs	r0, #44	; 0x2c
 8005516:	183b      	adds	r3, r7, r0
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	19bb      	adds	r3, r7, r6
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	1c19      	adds	r1, r3, #0
 8005520:	1c10      	adds	r0, r2, #0
 8005522:	f7fb fb75 	bl	8000c10 <__aeabi_fmul>
 8005526:	1c03      	adds	r3, r0, #0
 8005528:	1c19      	adds	r1, r3, #0
 800552a:	1c20      	adds	r0, r4, #0
 800552c:	f7fb f80a 	bl	8000544 <__aeabi_fadd>
 8005530:	1c03      	adds	r3, r0, #0
 8005532:	1c1a      	adds	r2, r3, #0
 8005534:	2308      	movs	r3, #8
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	61da      	str	r2, [r3, #28]
	YawTimesPitch.a33 = Yaw.a31*Pitch.a13 + Yaw.a32*Pitch.a23 + Yaw.a33*Pitch.a33;
 800553a:	202c      	movs	r0, #44	; 0x2c
 800553c:	183b      	adds	r3, r7, r0
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	19bb      	adds	r3, r7, r6
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	1c19      	adds	r1, r3, #0
 8005546:	1c10      	adds	r0, r2, #0
 8005548:	f7fb fb62 	bl	8000c10 <__aeabi_fmul>
 800554c:	1c03      	adds	r3, r0, #0
 800554e:	1c1c      	adds	r4, r3, #0
 8005550:	202c      	movs	r0, #44	; 0x2c
 8005552:	183b      	adds	r3, r7, r0
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	19bb      	adds	r3, r7, r6
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	1c19      	adds	r1, r3, #0
 800555c:	1c10      	adds	r0, r2, #0
 800555e:	f7fb fb57 	bl	8000c10 <__aeabi_fmul>
 8005562:	1c03      	adds	r3, r0, #0
 8005564:	1c19      	adds	r1, r3, #0
 8005566:	1c20      	adds	r0, r4, #0
 8005568:	f7fa ffec 	bl	8000544 <__aeabi_fadd>
 800556c:	1c03      	adds	r3, r0, #0
 800556e:	1c1c      	adds	r4, r3, #0
 8005570:	202c      	movs	r0, #44	; 0x2c
 8005572:	183b      	adds	r3, r7, r0
 8005574:	6a1a      	ldr	r2, [r3, #32]
 8005576:	19bb      	adds	r3, r7, r6
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	1c19      	adds	r1, r3, #0
 800557c:	1c10      	adds	r0, r2, #0
 800557e:	f7fb fb47 	bl	8000c10 <__aeabi_fmul>
 8005582:	1c03      	adds	r3, r0, #0
 8005584:	1c19      	adds	r1, r3, #0
 8005586:	1c20      	adds	r0, r4, #0
 8005588:	f7fa ffdc 	bl	8000544 <__aeabi_fadd>
 800558c:	1c03      	adds	r3, r0, #0
 800558e:	1c1a      	adds	r2, r3, #0
 8005590:	2608      	movs	r6, #8
 8005592:	19bb      	adds	r3, r7, r6
 8005594:	621a      	str	r2, [r3, #32]

	RotationMatrix->a11 = YawTimesPitch.a11*Roll.a11 + YawTimesPitch.a12*Roll.a21 + YawTimesPitch.a13*Roll.a31;
 8005596:	19bb      	adds	r3, r7, r6
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	197b      	adds	r3, r7, r5
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	1c19      	adds	r1, r3, #0
 80055a0:	1c10      	adds	r0, r2, #0
 80055a2:	f7fb fb35 	bl	8000c10 <__aeabi_fmul>
 80055a6:	1c03      	adds	r3, r0, #0
 80055a8:	1c1c      	adds	r4, r3, #0
 80055aa:	19bb      	adds	r3, r7, r6
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	197b      	adds	r3, r7, r5
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	1c19      	adds	r1, r3, #0
 80055b4:	1c10      	adds	r0, r2, #0
 80055b6:	f7fb fb2b 	bl	8000c10 <__aeabi_fmul>
 80055ba:	1c03      	adds	r3, r0, #0
 80055bc:	1c19      	adds	r1, r3, #0
 80055be:	1c20      	adds	r0, r4, #0
 80055c0:	f7fa ffc0 	bl	8000544 <__aeabi_fadd>
 80055c4:	1c03      	adds	r3, r0, #0
 80055c6:	1c1c      	adds	r4, r3, #0
 80055c8:	19bb      	adds	r3, r7, r6
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	197b      	adds	r3, r7, r5
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	1c19      	adds	r1, r3, #0
 80055d2:	1c10      	adds	r0, r2, #0
 80055d4:	f7fb fb1c 	bl	8000c10 <__aeabi_fmul>
 80055d8:	1c03      	adds	r3, r0, #0
 80055da:	1c19      	adds	r1, r3, #0
 80055dc:	1c20      	adds	r0, r4, #0
 80055de:	f7fa ffb1 	bl	8000544 <__aeabi_fadd>
 80055e2:	1c03      	adds	r3, r0, #0
 80055e4:	1c1a      	adds	r2, r3, #0
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	601a      	str	r2, [r3, #0]
	RotationMatrix->a12 = YawTimesPitch.a11*Roll.a12 + YawTimesPitch.a12*Roll.a22 + YawTimesPitch.a13*Roll.a32;
 80055ea:	19bb      	adds	r3, r7, r6
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	197b      	adds	r3, r7, r5
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	1c19      	adds	r1, r3, #0
 80055f4:	1c10      	adds	r0, r2, #0
 80055f6:	f7fb fb0b 	bl	8000c10 <__aeabi_fmul>
 80055fa:	1c03      	adds	r3, r0, #0
 80055fc:	1c1c      	adds	r4, r3, #0
 80055fe:	19bb      	adds	r3, r7, r6
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	197b      	adds	r3, r7, r5
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	1c19      	adds	r1, r3, #0
 8005608:	1c10      	adds	r0, r2, #0
 800560a:	f7fb fb01 	bl	8000c10 <__aeabi_fmul>
 800560e:	1c03      	adds	r3, r0, #0
 8005610:	1c19      	adds	r1, r3, #0
 8005612:	1c20      	adds	r0, r4, #0
 8005614:	f7fa ff96 	bl	8000544 <__aeabi_fadd>
 8005618:	1c03      	adds	r3, r0, #0
 800561a:	1c1c      	adds	r4, r3, #0
 800561c:	19bb      	adds	r3, r7, r6
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	197b      	adds	r3, r7, r5
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	1c19      	adds	r1, r3, #0
 8005626:	1c10      	adds	r0, r2, #0
 8005628:	f7fb faf2 	bl	8000c10 <__aeabi_fmul>
 800562c:	1c03      	adds	r3, r0, #0
 800562e:	1c19      	adds	r1, r3, #0
 8005630:	1c20      	adds	r0, r4, #0
 8005632:	f7fa ff87 	bl	8000544 <__aeabi_fadd>
 8005636:	1c03      	adds	r3, r0, #0
 8005638:	1c1a      	adds	r2, r3, #0
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	605a      	str	r2, [r3, #4]
	RotationMatrix->a13 = YawTimesPitch.a11*Roll.a13 + YawTimesPitch.a12*Roll.a23 + YawTimesPitch.a13*Roll.a33;
 800563e:	19bb      	adds	r3, r7, r6
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	197b      	adds	r3, r7, r5
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	1c19      	adds	r1, r3, #0
 8005648:	1c10      	adds	r0, r2, #0
 800564a:	f7fb fae1 	bl	8000c10 <__aeabi_fmul>
 800564e:	1c03      	adds	r3, r0, #0
 8005650:	1c1c      	adds	r4, r3, #0
 8005652:	19bb      	adds	r3, r7, r6
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	197b      	adds	r3, r7, r5
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	1c19      	adds	r1, r3, #0
 800565c:	1c10      	adds	r0, r2, #0
 800565e:	f7fb fad7 	bl	8000c10 <__aeabi_fmul>
 8005662:	1c03      	adds	r3, r0, #0
 8005664:	1c19      	adds	r1, r3, #0
 8005666:	1c20      	adds	r0, r4, #0
 8005668:	f7fa ff6c 	bl	8000544 <__aeabi_fadd>
 800566c:	1c03      	adds	r3, r0, #0
 800566e:	1c1c      	adds	r4, r3, #0
 8005670:	19bb      	adds	r3, r7, r6
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	197b      	adds	r3, r7, r5
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	1c19      	adds	r1, r3, #0
 800567a:	1c10      	adds	r0, r2, #0
 800567c:	f7fb fac8 	bl	8000c10 <__aeabi_fmul>
 8005680:	1c03      	adds	r3, r0, #0
 8005682:	1c19      	adds	r1, r3, #0
 8005684:	1c20      	adds	r0, r4, #0
 8005686:	f7fa ff5d 	bl	8000544 <__aeabi_fadd>
 800568a:	1c03      	adds	r3, r0, #0
 800568c:	1c1a      	adds	r2, r3, #0
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	609a      	str	r2, [r3, #8]
	RotationMatrix->a21 = YawTimesPitch.a21*Roll.a11 + YawTimesPitch.a22*Roll.a21 + YawTimesPitch.a23*Roll.a31;
 8005692:	19bb      	adds	r3, r7, r6
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	197b      	adds	r3, r7, r5
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	1c19      	adds	r1, r3, #0
 800569c:	1c10      	adds	r0, r2, #0
 800569e:	f7fb fab7 	bl	8000c10 <__aeabi_fmul>
 80056a2:	1c03      	adds	r3, r0, #0
 80056a4:	1c1c      	adds	r4, r3, #0
 80056a6:	19bb      	adds	r3, r7, r6
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	197b      	adds	r3, r7, r5
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	1c19      	adds	r1, r3, #0
 80056b0:	1c10      	adds	r0, r2, #0
 80056b2:	f7fb faad 	bl	8000c10 <__aeabi_fmul>
 80056b6:	1c03      	adds	r3, r0, #0
 80056b8:	1c19      	adds	r1, r3, #0
 80056ba:	1c20      	adds	r0, r4, #0
 80056bc:	f7fa ff42 	bl	8000544 <__aeabi_fadd>
 80056c0:	1c03      	adds	r3, r0, #0
 80056c2:	1c1c      	adds	r4, r3, #0
 80056c4:	19bb      	adds	r3, r7, r6
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	197b      	adds	r3, r7, r5
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	1c19      	adds	r1, r3, #0
 80056ce:	1c10      	adds	r0, r2, #0
 80056d0:	f7fb fa9e 	bl	8000c10 <__aeabi_fmul>
 80056d4:	1c03      	adds	r3, r0, #0
 80056d6:	1c19      	adds	r1, r3, #0
 80056d8:	1c20      	adds	r0, r4, #0
 80056da:	f7fa ff33 	bl	8000544 <__aeabi_fadd>
 80056de:	1c03      	adds	r3, r0, #0
 80056e0:	1c1a      	adds	r2, r3, #0
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	60da      	str	r2, [r3, #12]
	RotationMatrix->a22 = YawTimesPitch.a21*Roll.a12 + YawTimesPitch.a22*Roll.a22 + YawTimesPitch.a23*Roll.a32;
 80056e6:	19bb      	adds	r3, r7, r6
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	197b      	adds	r3, r7, r5
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	1c19      	adds	r1, r3, #0
 80056f0:	1c10      	adds	r0, r2, #0
 80056f2:	f7fb fa8d 	bl	8000c10 <__aeabi_fmul>
 80056f6:	1c03      	adds	r3, r0, #0
 80056f8:	1c1c      	adds	r4, r3, #0
 80056fa:	19bb      	adds	r3, r7, r6
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	197b      	adds	r3, r7, r5
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	1c19      	adds	r1, r3, #0
 8005704:	1c10      	adds	r0, r2, #0
 8005706:	f7fb fa83 	bl	8000c10 <__aeabi_fmul>
 800570a:	1c03      	adds	r3, r0, #0
 800570c:	1c19      	adds	r1, r3, #0
 800570e:	1c20      	adds	r0, r4, #0
 8005710:	f7fa ff18 	bl	8000544 <__aeabi_fadd>
 8005714:	1c03      	adds	r3, r0, #0
 8005716:	1c1c      	adds	r4, r3, #0
 8005718:	19bb      	adds	r3, r7, r6
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	197b      	adds	r3, r7, r5
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	1c19      	adds	r1, r3, #0
 8005722:	1c10      	adds	r0, r2, #0
 8005724:	f7fb fa74 	bl	8000c10 <__aeabi_fmul>
 8005728:	1c03      	adds	r3, r0, #0
 800572a:	1c19      	adds	r1, r3, #0
 800572c:	1c20      	adds	r0, r4, #0
 800572e:	f7fa ff09 	bl	8000544 <__aeabi_fadd>
 8005732:	1c03      	adds	r3, r0, #0
 8005734:	1c1a      	adds	r2, r3, #0
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	611a      	str	r2, [r3, #16]
	RotationMatrix->a23 = YawTimesPitch.a21*Roll.a13 + YawTimesPitch.a22*Roll.a23 + YawTimesPitch.a23*Roll.a33;
 800573a:	19bb      	adds	r3, r7, r6
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	197b      	adds	r3, r7, r5
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	1c19      	adds	r1, r3, #0
 8005744:	1c10      	adds	r0, r2, #0
 8005746:	f7fb fa63 	bl	8000c10 <__aeabi_fmul>
 800574a:	1c03      	adds	r3, r0, #0
 800574c:	1c1c      	adds	r4, r3, #0
 800574e:	19bb      	adds	r3, r7, r6
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	197b      	adds	r3, r7, r5
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	1c19      	adds	r1, r3, #0
 8005758:	1c10      	adds	r0, r2, #0
 800575a:	f7fb fa59 	bl	8000c10 <__aeabi_fmul>
 800575e:	1c03      	adds	r3, r0, #0
 8005760:	1c19      	adds	r1, r3, #0
 8005762:	1c20      	adds	r0, r4, #0
 8005764:	f7fa feee 	bl	8000544 <__aeabi_fadd>
 8005768:	1c03      	adds	r3, r0, #0
 800576a:	1c1c      	adds	r4, r3, #0
 800576c:	19bb      	adds	r3, r7, r6
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	197b      	adds	r3, r7, r5
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	1c19      	adds	r1, r3, #0
 8005776:	1c10      	adds	r0, r2, #0
 8005778:	f7fb fa4a 	bl	8000c10 <__aeabi_fmul>
 800577c:	1c03      	adds	r3, r0, #0
 800577e:	1c19      	adds	r1, r3, #0
 8005780:	1c20      	adds	r0, r4, #0
 8005782:	f7fa fedf 	bl	8000544 <__aeabi_fadd>
 8005786:	1c03      	adds	r3, r0, #0
 8005788:	1c1a      	adds	r2, r3, #0
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	615a      	str	r2, [r3, #20]
	RotationMatrix->a31 = YawTimesPitch.a31*Roll.a11 + YawTimesPitch.a32*Roll.a21 + YawTimesPitch.a33*Roll.a31;
 800578e:	19bb      	adds	r3, r7, r6
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	197b      	adds	r3, r7, r5
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	1c19      	adds	r1, r3, #0
 8005798:	1c10      	adds	r0, r2, #0
 800579a:	f7fb fa39 	bl	8000c10 <__aeabi_fmul>
 800579e:	1c03      	adds	r3, r0, #0
 80057a0:	1c1c      	adds	r4, r3, #0
 80057a2:	19bb      	adds	r3, r7, r6
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	197b      	adds	r3, r7, r5
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	1c19      	adds	r1, r3, #0
 80057ac:	1c10      	adds	r0, r2, #0
 80057ae:	f7fb fa2f 	bl	8000c10 <__aeabi_fmul>
 80057b2:	1c03      	adds	r3, r0, #0
 80057b4:	1c19      	adds	r1, r3, #0
 80057b6:	1c20      	adds	r0, r4, #0
 80057b8:	f7fa fec4 	bl	8000544 <__aeabi_fadd>
 80057bc:	1c03      	adds	r3, r0, #0
 80057be:	1c1c      	adds	r4, r3, #0
 80057c0:	19bb      	adds	r3, r7, r6
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	197b      	adds	r3, r7, r5
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	1c19      	adds	r1, r3, #0
 80057ca:	1c10      	adds	r0, r2, #0
 80057cc:	f7fb fa20 	bl	8000c10 <__aeabi_fmul>
 80057d0:	1c03      	adds	r3, r0, #0
 80057d2:	1c19      	adds	r1, r3, #0
 80057d4:	1c20      	adds	r0, r4, #0
 80057d6:	f7fa feb5 	bl	8000544 <__aeabi_fadd>
 80057da:	1c03      	adds	r3, r0, #0
 80057dc:	1c1a      	adds	r2, r3, #0
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	619a      	str	r2, [r3, #24]
	RotationMatrix->a32 = YawTimesPitch.a31*Roll.a12 + YawTimesPitch.a32*Roll.a22 + YawTimesPitch.a33*Roll.a32;
 80057e2:	19bb      	adds	r3, r7, r6
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	197b      	adds	r3, r7, r5
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	1c19      	adds	r1, r3, #0
 80057ec:	1c10      	adds	r0, r2, #0
 80057ee:	f7fb fa0f 	bl	8000c10 <__aeabi_fmul>
 80057f2:	1c03      	adds	r3, r0, #0
 80057f4:	1c1c      	adds	r4, r3, #0
 80057f6:	19bb      	adds	r3, r7, r6
 80057f8:	69da      	ldr	r2, [r3, #28]
 80057fa:	197b      	adds	r3, r7, r5
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	1c19      	adds	r1, r3, #0
 8005800:	1c10      	adds	r0, r2, #0
 8005802:	f7fb fa05 	bl	8000c10 <__aeabi_fmul>
 8005806:	1c03      	adds	r3, r0, #0
 8005808:	1c19      	adds	r1, r3, #0
 800580a:	1c20      	adds	r0, r4, #0
 800580c:	f7fa fe9a 	bl	8000544 <__aeabi_fadd>
 8005810:	1c03      	adds	r3, r0, #0
 8005812:	1c1c      	adds	r4, r3, #0
 8005814:	19bb      	adds	r3, r7, r6
 8005816:	6a1a      	ldr	r2, [r3, #32]
 8005818:	197b      	adds	r3, r7, r5
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	1c19      	adds	r1, r3, #0
 800581e:	1c10      	adds	r0, r2, #0
 8005820:	f7fb f9f6 	bl	8000c10 <__aeabi_fmul>
 8005824:	1c03      	adds	r3, r0, #0
 8005826:	1c19      	adds	r1, r3, #0
 8005828:	1c20      	adds	r0, r4, #0
 800582a:	f7fa fe8b 	bl	8000544 <__aeabi_fadd>
 800582e:	1c03      	adds	r3, r0, #0
 8005830:	1c1a      	adds	r2, r3, #0
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	61da      	str	r2, [r3, #28]
	RotationMatrix->a33 = YawTimesPitch.a31*Roll.a13 + YawTimesPitch.a32*Roll.a23 + YawTimesPitch.a33*Roll.a33;
 8005836:	19bb      	adds	r3, r7, r6
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	197b      	adds	r3, r7, r5
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	1c19      	adds	r1, r3, #0
 8005840:	1c10      	adds	r0, r2, #0
 8005842:	f7fb f9e5 	bl	8000c10 <__aeabi_fmul>
 8005846:	1c03      	adds	r3, r0, #0
 8005848:	1c1c      	adds	r4, r3, #0
 800584a:	19bb      	adds	r3, r7, r6
 800584c:	69da      	ldr	r2, [r3, #28]
 800584e:	197b      	adds	r3, r7, r5
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	1c19      	adds	r1, r3, #0
 8005854:	1c10      	adds	r0, r2, #0
 8005856:	f7fb f9db 	bl	8000c10 <__aeabi_fmul>
 800585a:	1c03      	adds	r3, r0, #0
 800585c:	1c19      	adds	r1, r3, #0
 800585e:	1c20      	adds	r0, r4, #0
 8005860:	f7fa fe70 	bl	8000544 <__aeabi_fadd>
 8005864:	1c03      	adds	r3, r0, #0
 8005866:	1c1c      	adds	r4, r3, #0
 8005868:	19bb      	adds	r3, r7, r6
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	197b      	adds	r3, r7, r5
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	1c19      	adds	r1, r3, #0
 8005872:	1c10      	adds	r0, r2, #0
 8005874:	f7fb f9cc 	bl	8000c10 <__aeabi_fmul>
 8005878:	1c03      	adds	r3, r0, #0
 800587a:	1c19      	adds	r1, r3, #0
 800587c:	1c20      	adds	r0, r4, #0
 800587e:	f7fa fe61 	bl	8000544 <__aeabi_fadd>
 8005882:	1c03      	adds	r3, r0, #0
 8005884:	1c1a      	adds	r2, r3, #0
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	46bd      	mov	sp, r7
 800588e:	b027      	add	sp, #156	; 0x9c
 8005890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005892:	46c0      	nop			; (mov r8, r8)

08005894 <CalculateAccelerometerInEarthFrame>:

void CalculateAccelerometerInEarthFrame(struct matrix *RotationMatrix, float* accel_data, float* new_data){
 8005894:	b5b0      	push	{r4, r5, r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
	new_data[0] = accel_data[0]*RotationMatrix->a11 + accel_data[1]*RotationMatrix->a12 + accel_data[2]*RotationMatrix->a13;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	1c19      	adds	r1, r3, #0
 80058aa:	1c10      	adds	r0, r2, #0
 80058ac:	f7fb f9b0 	bl	8000c10 <__aeabi_fmul>
 80058b0:	1c03      	adds	r3, r0, #0
 80058b2:	1c1c      	adds	r4, r3, #0
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	3304      	adds	r3, #4
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	1c19      	adds	r1, r3, #0
 80058c0:	1c10      	adds	r0, r2, #0
 80058c2:	f7fb f9a5 	bl	8000c10 <__aeabi_fmul>
 80058c6:	1c03      	adds	r3, r0, #0
 80058c8:	1c19      	adds	r1, r3, #0
 80058ca:	1c20      	adds	r0, r4, #0
 80058cc:	f7fa fe3a 	bl	8000544 <__aeabi_fadd>
 80058d0:	1c03      	adds	r3, r0, #0
 80058d2:	1c1c      	adds	r4, r3, #0
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	3308      	adds	r3, #8
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	1c19      	adds	r1, r3, #0
 80058e0:	1c10      	adds	r0, r2, #0
 80058e2:	f7fb f995 	bl	8000c10 <__aeabi_fmul>
 80058e6:	1c03      	adds	r3, r0, #0
 80058e8:	1c19      	adds	r1, r3, #0
 80058ea:	1c20      	adds	r0, r4, #0
 80058ec:	f7fa fe2a 	bl	8000544 <__aeabi_fadd>
 80058f0:	1c03      	adds	r3, r0, #0
 80058f2:	1c1a      	adds	r2, r3, #0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]
	new_data[1] = accel_data[0]*RotationMatrix->a21 + accel_data[1]*RotationMatrix->a22 + accel_data[2]*RotationMatrix->a23;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	1c19      	adds	r1, r3, #0
 8005902:	1c10      	adds	r0, r2, #0
 8005904:	f7fb f984 	bl	8000c10 <__aeabi_fmul>
 8005908:	1c03      	adds	r3, r0, #0
 800590a:	1c1c      	adds	r4, r3, #0
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	3304      	adds	r3, #4
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	1c19      	adds	r1, r3, #0
 8005918:	1c10      	adds	r0, r2, #0
 800591a:	f7fb f979 	bl	8000c10 <__aeabi_fmul>
 800591e:	1c03      	adds	r3, r0, #0
 8005920:	1c19      	adds	r1, r3, #0
 8005922:	1c20      	adds	r0, r4, #0
 8005924:	f7fa fe0e 	bl	8000544 <__aeabi_fadd>
 8005928:	1c03      	adds	r3, r0, #0
 800592a:	1c1d      	adds	r5, r3, #0
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	3308      	adds	r3, #8
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	1c19      	adds	r1, r3, #0
 8005938:	1c10      	adds	r0, r2, #0
 800593a:	f7fb f969 	bl	8000c10 <__aeabi_fmul>
 800593e:	1c03      	adds	r3, r0, #0
 8005940:	1c1a      	adds	r2, r3, #0
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	1d1c      	adds	r4, r3, #4
 8005946:	1c11      	adds	r1, r2, #0
 8005948:	1c28      	adds	r0, r5, #0
 800594a:	f7fa fdfb 	bl	8000544 <__aeabi_fadd>
 800594e:	1c03      	adds	r3, r0, #0
 8005950:	6023      	str	r3, [r4, #0]
	new_data[2] = accel_data[0]*RotationMatrix->a31 + accel_data[1]*RotationMatrix->a32 + accel_data[2]*RotationMatrix->a33;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	1c19      	adds	r1, r3, #0
 800595c:	1c10      	adds	r0, r2, #0
 800595e:	f7fb f957 	bl	8000c10 <__aeabi_fmul>
 8005962:	1c03      	adds	r3, r0, #0
 8005964:	1c1c      	adds	r4, r3, #0
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	3304      	adds	r3, #4
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	1c19      	adds	r1, r3, #0
 8005972:	1c10      	adds	r0, r2, #0
 8005974:	f7fb f94c 	bl	8000c10 <__aeabi_fmul>
 8005978:	1c03      	adds	r3, r0, #0
 800597a:	1c19      	adds	r1, r3, #0
 800597c:	1c20      	adds	r0, r4, #0
 800597e:	f7fa fde1 	bl	8000544 <__aeabi_fadd>
 8005982:	1c03      	adds	r3, r0, #0
 8005984:	1c1d      	adds	r5, r3, #0
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	3308      	adds	r3, #8
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	1c19      	adds	r1, r3, #0
 8005992:	1c10      	adds	r0, r2, #0
 8005994:	f7fb f93c 	bl	8000c10 <__aeabi_fmul>
 8005998:	1c03      	adds	r3, r0, #0
 800599a:	1c1a      	adds	r2, r3, #0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3308      	adds	r3, #8
 80059a0:	001c      	movs	r4, r3
 80059a2:	1c11      	adds	r1, r2, #0
 80059a4:	1c28      	adds	r0, r5, #0
 80059a6:	f7fa fdcd 	bl	8000544 <__aeabi_fadd>
 80059aa:	1c03      	adds	r3, r0, #0
 80059ac:	6023      	str	r3, [r4, #0]

	float norm = 1.0 / sqrt(new_data[0]*new_data[0] + new_data[1]*new_data[1] + new_data[2]*new_data[2]);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	1c19      	adds	r1, r3, #0
 80059b8:	1c10      	adds	r0, r2, #0
 80059ba:	f7fb f929 	bl	8000c10 <__aeabi_fmul>
 80059be:	1c03      	adds	r3, r0, #0
 80059c0:	1c1c      	adds	r4, r3, #0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3304      	adds	r3, #4
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	1c19      	adds	r1, r3, #0
 80059d0:	1c10      	adds	r0, r2, #0
 80059d2:	f7fb f91d 	bl	8000c10 <__aeabi_fmul>
 80059d6:	1c03      	adds	r3, r0, #0
 80059d8:	1c19      	adds	r1, r3, #0
 80059da:	1c20      	adds	r0, r4, #0
 80059dc:	f7fa fdb2 	bl	8000544 <__aeabi_fadd>
 80059e0:	1c03      	adds	r3, r0, #0
 80059e2:	1c1c      	adds	r4, r3, #0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3308      	adds	r3, #8
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3308      	adds	r3, #8
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	1c19      	adds	r1, r3, #0
 80059f2:	1c10      	adds	r0, r2, #0
 80059f4:	f7fb f90c 	bl	8000c10 <__aeabi_fmul>
 80059f8:	1c03      	adds	r3, r0, #0
 80059fa:	1c19      	adds	r1, r3, #0
 80059fc:	1c20      	adds	r0, r4, #0
 80059fe:	f7fa fda1 	bl	8000544 <__aeabi_fadd>
 8005a02:	1c03      	adds	r3, r0, #0
 8005a04:	1c18      	adds	r0, r3, #0
 8005a06:	f7fd fa63 	bl	8002ed0 <__aeabi_f2d>
 8005a0a:	0002      	movs	r2, r0
 8005a0c:	000b      	movs	r3, r1
 8005a0e:	0010      	movs	r0, r2
 8005a10:	0019      	movs	r1, r3
 8005a12:	f009 ffd1 	bl	800f9b8 <sqrt>
 8005a16:	0002      	movs	r2, r0
 8005a18:	000b      	movs	r3, r1
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	4917      	ldr	r1, [pc, #92]	; (8005a7c <CalculateAccelerometerInEarthFrame+0x1e8>)
 8005a1e:	f7fb ffa9 	bl	8001974 <__aeabi_ddiv>
 8005a22:	0002      	movs	r2, r0
 8005a24:	000b      	movs	r3, r1
 8005a26:	0010      	movs	r0, r2
 8005a28:	0019      	movs	r1, r3
 8005a2a:	f7fd fa99 	bl	8002f60 <__aeabi_d2f>
 8005a2e:	1c03      	adds	r3, r0, #0
 8005a30:	617b      	str	r3, [r7, #20]
	new_data[0] *= norm;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	1c18      	adds	r0, r3, #0
 8005a3a:	f7fb f8e9 	bl	8000c10 <__aeabi_fmul>
 8005a3e:	1c03      	adds	r3, r0, #0
 8005a40:	1c1a      	adds	r2, r3, #0
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
	new_data[1] *= norm;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	1d1c      	adds	r4, r3, #4
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	1c10      	adds	r0, r2, #0
 8005a54:	f7fb f8dc 	bl	8000c10 <__aeabi_fmul>
 8005a58:	1c03      	adds	r3, r0, #0
 8005a5a:	6023      	str	r3, [r4, #0]
	new_data[2] *= norm;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3308      	adds	r3, #8
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3308      	adds	r3, #8
 8005a66:	001c      	movs	r4, r3
 8005a68:	6979      	ldr	r1, [r7, #20]
 8005a6a:	1c10      	adds	r0, r2, #0
 8005a6c:	f7fb f8d0 	bl	8000c10 <__aeabi_fmul>
 8005a70:	1c03      	adds	r3, r0, #0
 8005a72:	6023      	str	r3, [r4, #0]
}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b006      	add	sp, #24
 8005a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a7c:	3ff00000 	.word	0x3ff00000

08005a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a82:	46de      	mov	lr, fp
 8005a84:	4657      	mov	r7, sl
 8005a86:	464e      	mov	r6, r9
 8005a88:	4645      	mov	r5, r8
 8005a8a:	b5e0      	push	{r5, r6, r7, lr}
 8005a8c:	4cfd      	ldr	r4, [pc, #1012]	; (8005e84 <main+0x404>)
 8005a8e:	44a5      	add	sp, r4
 8005a90:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a92:	f003 fbbf 	bl	8009214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a96:	f002 ff5d 	bl	8008954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a9a:	f003 f8c9 	bl	8008c30 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005a9e:	f003 f813 	bl	8008ac8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8005aa2:	f003 f877 	bl	8008b94 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8005aa6:	f002 ffe1 	bl	8008a6c <MX_RTC_Init>
  MX_TIM16_Init();
 8005aaa:	f003 f84b 	bl	8008b44 <MX_TIM16_Init>
  MX_I2C1_Init();
 8005aae:	f002 ff9d 	bl	80089ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	ICM_Initialize(&hspi1, &huart2, IMU_MOVABLE);
 8005ab2:	49f5      	ldr	r1, [pc, #980]	; (8005e88 <main+0x408>)
 8005ab4:	4bf5      	ldr	r3, [pc, #980]	; (8005e8c <main+0x40c>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f7fd fc09 	bl	80032d0 <ICM_Initialize>
	ICM_Initialize(&hspi1, &huart2, IMU_FIXED);
 8005abe:	49f2      	ldr	r1, [pc, #968]	; (8005e88 <main+0x408>)
 8005ac0:	4bf2      	ldr	r3, [pc, #968]	; (8005e8c <main+0x40c>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7fd fc03 	bl	80032d0 <ICM_Initialize>

	char uart_buffer[200];

	float accel_data_0[3] = {0,0,0};
 8005aca:	49f1      	ldr	r1, [pc, #964]	; (8005e90 <main+0x410>)
 8005acc:	2520      	movs	r5, #32
 8005ace:	2308      	movs	r3, #8
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	4694      	mov	ip, r2
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	4690      	mov	r8, r2
 8005ad8:	44b8      	add	r8, r7
 8005ada:	44c4      	add	ip, r8
 8005adc:	4463      	add	r3, ip
 8005ade:	195b      	adds	r3, r3, r5
 8005ae0:	185b      	adds	r3, r3, r1
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	2208      	movs	r2, #8
 8005aea:	4694      	mov	ip, r2
 8005aec:	2208      	movs	r2, #8
 8005aee:	4690      	mov	r8, r2
 8005af0:	44b8      	add	r8, r7
 8005af2:	44c4      	add	ip, r8
 8005af4:	4463      	add	r3, ip
 8005af6:	195b      	adds	r3, r3, r5
 8005af8:	185b      	adds	r3, r3, r1
 8005afa:	2200      	movs	r2, #0
 8005afc:	605a      	str	r2, [r3, #4]
 8005afe:	2308      	movs	r3, #8
 8005b00:	2208      	movs	r2, #8
 8005b02:	4694      	mov	ip, r2
 8005b04:	2208      	movs	r2, #8
 8005b06:	4690      	mov	r8, r2
 8005b08:	44b8      	add	r8, r7
 8005b0a:	44c4      	add	ip, r8
 8005b0c:	4463      	add	r3, ip
 8005b0e:	195b      	adds	r3, r3, r5
 8005b10:	185b      	adds	r3, r3, r1
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
	float accel_data_1[3] = {0,0,0};
 8005b16:	4bdf      	ldr	r3, [pc, #892]	; (8005e94 <main+0x414>)
 8005b18:	4adf      	ldr	r2, [pc, #892]	; (8005e98 <main+0x418>)
 8005b1a:	4694      	mov	ip, r2
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	4690      	mov	r8, r2
 8005b20:	2208      	movs	r2, #8
 8005b22:	4691      	mov	r9, r2
 8005b24:	2208      	movs	r2, #8
 8005b26:	4692      	mov	sl, r2
 8005b28:	2208      	movs	r2, #8
 8005b2a:	4693      	mov	fp, r2
 8005b2c:	44bb      	add	fp, r7
 8005b2e:	44da      	add	sl, fp
 8005b30:	44d1      	add	r9, sl
 8005b32:	44c8      	add	r8, r9
 8005b34:	44c4      	add	ip, r8
 8005b36:	4463      	add	r3, ip
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	4bd5      	ldr	r3, [pc, #852]	; (8005e94 <main+0x414>)
 8005b3e:	4ad6      	ldr	r2, [pc, #856]	; (8005e98 <main+0x418>)
 8005b40:	4694      	mov	ip, r2
 8005b42:	2220      	movs	r2, #32
 8005b44:	4690      	mov	r8, r2
 8005b46:	2208      	movs	r2, #8
 8005b48:	4691      	mov	r9, r2
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	4692      	mov	sl, r2
 8005b4e:	2208      	movs	r2, #8
 8005b50:	4693      	mov	fp, r2
 8005b52:	44bb      	add	fp, r7
 8005b54:	44da      	add	sl, fp
 8005b56:	44d1      	add	r9, sl
 8005b58:	44c8      	add	r8, r9
 8005b5a:	44c4      	add	ip, r8
 8005b5c:	4463      	add	r3, ip
 8005b5e:	2200      	movs	r2, #0
 8005b60:	605a      	str	r2, [r3, #4]
 8005b62:	4bcc      	ldr	r3, [pc, #816]	; (8005e94 <main+0x414>)
 8005b64:	4acc      	ldr	r2, [pc, #816]	; (8005e98 <main+0x418>)
 8005b66:	4694      	mov	ip, r2
 8005b68:	2220      	movs	r2, #32
 8005b6a:	4690      	mov	r8, r2
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	4691      	mov	r9, r2
 8005b70:	2208      	movs	r2, #8
 8005b72:	4692      	mov	sl, r2
 8005b74:	2208      	movs	r2, #8
 8005b76:	4693      	mov	fp, r2
 8005b78:	44bb      	add	fp, r7
 8005b7a:	44da      	add	sl, fp
 8005b7c:	44d1      	add	r9, sl
 8005b7e:	44c8      	add	r8, r9
 8005b80:	44c4      	add	ip, r8
 8005b82:	4463      	add	r3, ip
 8005b84:	2200      	movs	r2, #0
 8005b86:	609a      	str	r2, [r3, #8]
	float gyro_data_0[3] = {0,0,0};
 8005b88:	4bc4      	ldr	r3, [pc, #784]	; (8005e9c <main+0x41c>)
 8005b8a:	4ac3      	ldr	r2, [pc, #780]	; (8005e98 <main+0x418>)
 8005b8c:	4694      	mov	ip, r2
 8005b8e:	2220      	movs	r2, #32
 8005b90:	4690      	mov	r8, r2
 8005b92:	2208      	movs	r2, #8
 8005b94:	4691      	mov	r9, r2
 8005b96:	2208      	movs	r2, #8
 8005b98:	4692      	mov	sl, r2
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	4693      	mov	fp, r2
 8005b9e:	44bb      	add	fp, r7
 8005ba0:	44da      	add	sl, fp
 8005ba2:	44d1      	add	r9, sl
 8005ba4:	44c8      	add	r8, r9
 8005ba6:	44c4      	add	ip, r8
 8005ba8:	4463      	add	r3, ip
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	4bbb      	ldr	r3, [pc, #748]	; (8005e9c <main+0x41c>)
 8005bb0:	4ab9      	ldr	r2, [pc, #740]	; (8005e98 <main+0x418>)
 8005bb2:	4694      	mov	ip, r2
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	4690      	mov	r8, r2
 8005bb8:	2208      	movs	r2, #8
 8005bba:	4691      	mov	r9, r2
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	4692      	mov	sl, r2
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	4693      	mov	fp, r2
 8005bc4:	44bb      	add	fp, r7
 8005bc6:	44da      	add	sl, fp
 8005bc8:	44d1      	add	r9, sl
 8005bca:	44c8      	add	r8, r9
 8005bcc:	44c4      	add	ip, r8
 8005bce:	4463      	add	r3, ip
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	605a      	str	r2, [r3, #4]
 8005bd4:	4bb1      	ldr	r3, [pc, #708]	; (8005e9c <main+0x41c>)
 8005bd6:	4ab0      	ldr	r2, [pc, #704]	; (8005e98 <main+0x418>)
 8005bd8:	4694      	mov	ip, r2
 8005bda:	2220      	movs	r2, #32
 8005bdc:	4690      	mov	r8, r2
 8005bde:	2208      	movs	r2, #8
 8005be0:	4691      	mov	r9, r2
 8005be2:	2208      	movs	r2, #8
 8005be4:	4692      	mov	sl, r2
 8005be6:	2208      	movs	r2, #8
 8005be8:	4693      	mov	fp, r2
 8005bea:	44bb      	add	fp, r7
 8005bec:	44da      	add	sl, fp
 8005bee:	44d1      	add	r9, sl
 8005bf0:	44c8      	add	r8, r9
 8005bf2:	44c4      	add	ip, r8
 8005bf4:	4463      	add	r3, ip
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	609a      	str	r2, [r3, #8]
	float gyro_data_1[3] = {0,0,0};
 8005bfa:	4ba9      	ldr	r3, [pc, #676]	; (8005ea0 <main+0x420>)
 8005bfc:	4aa6      	ldr	r2, [pc, #664]	; (8005e98 <main+0x418>)
 8005bfe:	4694      	mov	ip, r2
 8005c00:	2220      	movs	r2, #32
 8005c02:	4690      	mov	r8, r2
 8005c04:	2208      	movs	r2, #8
 8005c06:	4691      	mov	r9, r2
 8005c08:	2208      	movs	r2, #8
 8005c0a:	4692      	mov	sl, r2
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	4693      	mov	fp, r2
 8005c10:	44bb      	add	fp, r7
 8005c12:	44da      	add	sl, fp
 8005c14:	44d1      	add	r9, sl
 8005c16:	44c8      	add	r8, r9
 8005c18:	44c4      	add	ip, r8
 8005c1a:	4463      	add	r3, ip
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	4b9f      	ldr	r3, [pc, #636]	; (8005ea0 <main+0x420>)
 8005c22:	4a9d      	ldr	r2, [pc, #628]	; (8005e98 <main+0x418>)
 8005c24:	4694      	mov	ip, r2
 8005c26:	2220      	movs	r2, #32
 8005c28:	4690      	mov	r8, r2
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	4691      	mov	r9, r2
 8005c2e:	2208      	movs	r2, #8
 8005c30:	4692      	mov	sl, r2
 8005c32:	2208      	movs	r2, #8
 8005c34:	4693      	mov	fp, r2
 8005c36:	44bb      	add	fp, r7
 8005c38:	44da      	add	sl, fp
 8005c3a:	44d1      	add	r9, sl
 8005c3c:	44c8      	add	r8, r9
 8005c3e:	44c4      	add	ip, r8
 8005c40:	4463      	add	r3, ip
 8005c42:	2200      	movs	r2, #0
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	4b96      	ldr	r3, [pc, #600]	; (8005ea0 <main+0x420>)
 8005c48:	4a93      	ldr	r2, [pc, #588]	; (8005e98 <main+0x418>)
 8005c4a:	4694      	mov	ip, r2
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	4690      	mov	r8, r2
 8005c50:	2208      	movs	r2, #8
 8005c52:	4691      	mov	r9, r2
 8005c54:	2208      	movs	r2, #8
 8005c56:	4692      	mov	sl, r2
 8005c58:	2208      	movs	r2, #8
 8005c5a:	4693      	mov	fp, r2
 8005c5c:	44bb      	add	fp, r7
 8005c5e:	44da      	add	sl, fp
 8005c60:	44d1      	add	r9, sl
 8005c62:	44c8      	add	r8, r9
 8005c64:	44c4      	add	ip, r8
 8005c66:	4463      	add	r3, ip
 8005c68:	2200      	movs	r2, #0
 8005c6a:	609a      	str	r2, [r3, #8]
	float accel_data_earthframe_0[3] = {0,0,0};
 8005c6c:	4b8d      	ldr	r3, [pc, #564]	; (8005ea4 <main+0x424>)
 8005c6e:	4a8a      	ldr	r2, [pc, #552]	; (8005e98 <main+0x418>)
 8005c70:	4694      	mov	ip, r2
 8005c72:	2220      	movs	r2, #32
 8005c74:	4690      	mov	r8, r2
 8005c76:	2208      	movs	r2, #8
 8005c78:	4691      	mov	r9, r2
 8005c7a:	2208      	movs	r2, #8
 8005c7c:	4692      	mov	sl, r2
 8005c7e:	2208      	movs	r2, #8
 8005c80:	4693      	mov	fp, r2
 8005c82:	44bb      	add	fp, r7
 8005c84:	44da      	add	sl, fp
 8005c86:	44d1      	add	r9, sl
 8005c88:	44c8      	add	r8, r9
 8005c8a:	44c4      	add	ip, r8
 8005c8c:	4463      	add	r3, ip
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	4b84      	ldr	r3, [pc, #528]	; (8005ea4 <main+0x424>)
 8005c94:	4a80      	ldr	r2, [pc, #512]	; (8005e98 <main+0x418>)
 8005c96:	4694      	mov	ip, r2
 8005c98:	2220      	movs	r2, #32
 8005c9a:	4690      	mov	r8, r2
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	4691      	mov	r9, r2
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	4692      	mov	sl, r2
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	4693      	mov	fp, r2
 8005ca8:	44bb      	add	fp, r7
 8005caa:	44da      	add	sl, fp
 8005cac:	44d1      	add	r9, sl
 8005cae:	44c8      	add	r8, r9
 8005cb0:	44c4      	add	ip, r8
 8005cb2:	4463      	add	r3, ip
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	605a      	str	r2, [r3, #4]
 8005cb8:	4b7a      	ldr	r3, [pc, #488]	; (8005ea4 <main+0x424>)
 8005cba:	4a77      	ldr	r2, [pc, #476]	; (8005e98 <main+0x418>)
 8005cbc:	4694      	mov	ip, r2
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	4690      	mov	r8, r2
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	4691      	mov	r9, r2
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	4692      	mov	sl, r2
 8005cca:	2208      	movs	r2, #8
 8005ccc:	4693      	mov	fp, r2
 8005cce:	44bb      	add	fp, r7
 8005cd0:	44da      	add	sl, fp
 8005cd2:	44d1      	add	r9, sl
 8005cd4:	44c8      	add	r8, r9
 8005cd6:	44c4      	add	ip, r8
 8005cd8:	4463      	add	r3, ip
 8005cda:	2200      	movs	r2, #0
 8005cdc:	609a      	str	r2, [r3, #8]
	float accel_data_earthframe_1[3] = {0,0,0};
 8005cde:	4b72      	ldr	r3, [pc, #456]	; (8005ea8 <main+0x428>)
 8005ce0:	4a6d      	ldr	r2, [pc, #436]	; (8005e98 <main+0x418>)
 8005ce2:	4694      	mov	ip, r2
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	4690      	mov	r8, r2
 8005ce8:	2208      	movs	r2, #8
 8005cea:	4691      	mov	r9, r2
 8005cec:	2208      	movs	r2, #8
 8005cee:	4692      	mov	sl, r2
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	4693      	mov	fp, r2
 8005cf4:	44bb      	add	fp, r7
 8005cf6:	44da      	add	sl, fp
 8005cf8:	44d1      	add	r9, sl
 8005cfa:	44c8      	add	r8, r9
 8005cfc:	44c4      	add	ip, r8
 8005cfe:	4463      	add	r3, ip
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	4b68      	ldr	r3, [pc, #416]	; (8005ea8 <main+0x428>)
 8005d06:	4a64      	ldr	r2, [pc, #400]	; (8005e98 <main+0x418>)
 8005d08:	4694      	mov	ip, r2
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	4690      	mov	r8, r2
 8005d0e:	2208      	movs	r2, #8
 8005d10:	4691      	mov	r9, r2
 8005d12:	2208      	movs	r2, #8
 8005d14:	4692      	mov	sl, r2
 8005d16:	2208      	movs	r2, #8
 8005d18:	4693      	mov	fp, r2
 8005d1a:	44bb      	add	fp, r7
 8005d1c:	44da      	add	sl, fp
 8005d1e:	44d1      	add	r9, sl
 8005d20:	44c8      	add	r8, r9
 8005d22:	44c4      	add	ip, r8
 8005d24:	4463      	add	r3, ip
 8005d26:	2200      	movs	r2, #0
 8005d28:	605a      	str	r2, [r3, #4]
 8005d2a:	4b5f      	ldr	r3, [pc, #380]	; (8005ea8 <main+0x428>)
 8005d2c:	4a5a      	ldr	r2, [pc, #360]	; (8005e98 <main+0x418>)
 8005d2e:	4694      	mov	ip, r2
 8005d30:	2220      	movs	r2, #32
 8005d32:	4690      	mov	r8, r2
 8005d34:	2208      	movs	r2, #8
 8005d36:	4691      	mov	r9, r2
 8005d38:	2208      	movs	r2, #8
 8005d3a:	4692      	mov	sl, r2
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	4693      	mov	fp, r2
 8005d40:	44bb      	add	fp, r7
 8005d42:	44da      	add	sl, fp
 8005d44:	44d1      	add	r9, sl
 8005d46:	44c8      	add	r8, r9
 8005d48:	44c4      	add	ip, r8
 8005d4a:	4463      	add	r3, ip
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	609a      	str	r2, [r3, #8]
	float gyro_bias_0[3] = {0,0,0};
 8005d50:	4b56      	ldr	r3, [pc, #344]	; (8005eac <main+0x42c>)
 8005d52:	4a51      	ldr	r2, [pc, #324]	; (8005e98 <main+0x418>)
 8005d54:	4694      	mov	ip, r2
 8005d56:	2220      	movs	r2, #32
 8005d58:	4690      	mov	r8, r2
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	4691      	mov	r9, r2
 8005d5e:	2208      	movs	r2, #8
 8005d60:	4692      	mov	sl, r2
 8005d62:	2208      	movs	r2, #8
 8005d64:	4693      	mov	fp, r2
 8005d66:	44bb      	add	fp, r7
 8005d68:	44da      	add	sl, fp
 8005d6a:	44d1      	add	r9, sl
 8005d6c:	44c8      	add	r8, r9
 8005d6e:	44c4      	add	ip, r8
 8005d70:	4463      	add	r3, ip
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	4b4d      	ldr	r3, [pc, #308]	; (8005eac <main+0x42c>)
 8005d78:	4a47      	ldr	r2, [pc, #284]	; (8005e98 <main+0x418>)
 8005d7a:	4694      	mov	ip, r2
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	4690      	mov	r8, r2
 8005d80:	2208      	movs	r2, #8
 8005d82:	4691      	mov	r9, r2
 8005d84:	2208      	movs	r2, #8
 8005d86:	4692      	mov	sl, r2
 8005d88:	2208      	movs	r2, #8
 8005d8a:	4693      	mov	fp, r2
 8005d8c:	44bb      	add	fp, r7
 8005d8e:	44da      	add	sl, fp
 8005d90:	44d1      	add	r9, sl
 8005d92:	44c8      	add	r8, r9
 8005d94:	44c4      	add	ip, r8
 8005d96:	4463      	add	r3, ip
 8005d98:	2200      	movs	r2, #0
 8005d9a:	605a      	str	r2, [r3, #4]
 8005d9c:	4b43      	ldr	r3, [pc, #268]	; (8005eac <main+0x42c>)
 8005d9e:	4a3e      	ldr	r2, [pc, #248]	; (8005e98 <main+0x418>)
 8005da0:	4694      	mov	ip, r2
 8005da2:	2220      	movs	r2, #32
 8005da4:	4690      	mov	r8, r2
 8005da6:	2208      	movs	r2, #8
 8005da8:	4691      	mov	r9, r2
 8005daa:	2208      	movs	r2, #8
 8005dac:	4692      	mov	sl, r2
 8005dae:	2208      	movs	r2, #8
 8005db0:	4693      	mov	fp, r2
 8005db2:	44bb      	add	fp, r7
 8005db4:	44da      	add	sl, fp
 8005db6:	44d1      	add	r9, sl
 8005db8:	44c8      	add	r8, r9
 8005dba:	44c4      	add	ip, r8
 8005dbc:	4463      	add	r3, ip
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	609a      	str	r2, [r3, #8]
	float gyro_bias_1[3] = {0,0,0};
 8005dc2:	4b3b      	ldr	r3, [pc, #236]	; (8005eb0 <main+0x430>)
 8005dc4:	4a34      	ldr	r2, [pc, #208]	; (8005e98 <main+0x418>)
 8005dc6:	4694      	mov	ip, r2
 8005dc8:	2220      	movs	r2, #32
 8005dca:	4690      	mov	r8, r2
 8005dcc:	2208      	movs	r2, #8
 8005dce:	4691      	mov	r9, r2
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	4692      	mov	sl, r2
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	4693      	mov	fp, r2
 8005dd8:	44bb      	add	fp, r7
 8005dda:	44da      	add	sl, fp
 8005ddc:	44d1      	add	r9, sl
 8005dde:	44c8      	add	r8, r9
 8005de0:	44c4      	add	ip, r8
 8005de2:	4463      	add	r3, ip
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	4b31      	ldr	r3, [pc, #196]	; (8005eb0 <main+0x430>)
 8005dea:	4a2b      	ldr	r2, [pc, #172]	; (8005e98 <main+0x418>)
 8005dec:	4694      	mov	ip, r2
 8005dee:	2220      	movs	r2, #32
 8005df0:	4690      	mov	r8, r2
 8005df2:	2208      	movs	r2, #8
 8005df4:	4691      	mov	r9, r2
 8005df6:	2208      	movs	r2, #8
 8005df8:	4692      	mov	sl, r2
 8005dfa:	2208      	movs	r2, #8
 8005dfc:	4693      	mov	fp, r2
 8005dfe:	44bb      	add	fp, r7
 8005e00:	44da      	add	sl, fp
 8005e02:	44d1      	add	r9, sl
 8005e04:	44c8      	add	r8, r9
 8005e06:	44c4      	add	ip, r8
 8005e08:	4463      	add	r3, ip
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	605a      	str	r2, [r3, #4]
 8005e0e:	4b28      	ldr	r3, [pc, #160]	; (8005eb0 <main+0x430>)
 8005e10:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <main+0x418>)
 8005e12:	4694      	mov	ip, r2
 8005e14:	2220      	movs	r2, #32
 8005e16:	4690      	mov	r8, r2
 8005e18:	2208      	movs	r2, #8
 8005e1a:	4691      	mov	r9, r2
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	4692      	mov	sl, r2
 8005e20:	2208      	movs	r2, #8
 8005e22:	4693      	mov	fp, r2
 8005e24:	44bb      	add	fp, r7
 8005e26:	44da      	add	sl, fp
 8005e28:	44d1      	add	r9, sl
 8005e2a:	44c8      	add	r8, r9
 8005e2c:	44c4      	add	ip, r8
 8005e2e:	4463      	add	r3, ip
 8005e30:	2200      	movs	r2, #0
 8005e32:	609a      	str	r2, [r3, #8]
	float accel_bias_0[2] = {0,0};
 8005e34:	4b1f      	ldr	r3, [pc, #124]	; (8005eb4 <main+0x434>)
 8005e36:	4a18      	ldr	r2, [pc, #96]	; (8005e98 <main+0x418>)
 8005e38:	4694      	mov	ip, r2
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	4690      	mov	r8, r2
 8005e3e:	2208      	movs	r2, #8
 8005e40:	4691      	mov	r9, r2
 8005e42:	2208      	movs	r2, #8
 8005e44:	4692      	mov	sl, r2
 8005e46:	2208      	movs	r2, #8
 8005e48:	4693      	mov	fp, r2
 8005e4a:	44bb      	add	fp, r7
 8005e4c:	44da      	add	sl, fp
 8005e4e:	44d1      	add	r9, sl
 8005e50:	44c8      	add	r8, r9
 8005e52:	44c4      	add	ip, r8
 8005e54:	4463      	add	r3, ip
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	4b16      	ldr	r3, [pc, #88]	; (8005eb4 <main+0x434>)
 8005e5c:	4a0e      	ldr	r2, [pc, #56]	; (8005e98 <main+0x418>)
 8005e5e:	4694      	mov	ip, r2
 8005e60:	2220      	movs	r2, #32
 8005e62:	4690      	mov	r8, r2
 8005e64:	2208      	movs	r2, #8
 8005e66:	4691      	mov	r9, r2
 8005e68:	2208      	movs	r2, #8
 8005e6a:	4692      	mov	sl, r2
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	4693      	mov	fp, r2
 8005e70:	44bb      	add	fp, r7
 8005e72:	44da      	add	sl, fp
 8005e74:	44d1      	add	r9, sl
 8005e76:	44c8      	add	r8, r9
 8005e78:	44c4      	add	ip, r8
 8005e7a:	4463      	add	r3, ip
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	e01a      	b.n	8005eb8 <main+0x438>
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	fffff394 	.word	0xfffff394
 8005e88:	2000049c 	.word	0x2000049c
 8005e8c:	20000438 	.word	0x20000438
 8005e90:	00000b14 	.word	0x00000b14
 8005e94:	ffffff00 	.word	0xffffff00
 8005e98:	00000c08 	.word	0x00000c08
 8005e9c:	fffffef4 	.word	0xfffffef4
 8005ea0:	fffffee8 	.word	0xfffffee8
 8005ea4:	fffffedc 	.word	0xfffffedc
 8005ea8:	fffffed0 	.word	0xfffffed0
 8005eac:	fffffec4 	.word	0xfffffec4
 8005eb0:	fffffeb8 	.word	0xfffffeb8
 8005eb4:	fffffeb0 	.word	0xfffffeb0
	float accel_bias_1[2] = {0,0};
 8005eb8:	4bfd      	ldr	r3, [pc, #1012]	; (80062b0 <main+0x830>)
 8005eba:	4afe      	ldr	r2, [pc, #1016]	; (80062b4 <main+0x834>)
 8005ebc:	4694      	mov	ip, r2
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	4690      	mov	r8, r2
 8005ec2:	2208      	movs	r2, #8
 8005ec4:	4691      	mov	r9, r2
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	4692      	mov	sl, r2
 8005eca:	2208      	movs	r2, #8
 8005ecc:	4693      	mov	fp, r2
 8005ece:	44bb      	add	fp, r7
 8005ed0:	44da      	add	sl, fp
 8005ed2:	44d1      	add	r9, sl
 8005ed4:	44c8      	add	r8, r9
 8005ed6:	44c4      	add	ip, r8
 8005ed8:	4463      	add	r3, ip
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	4bf4      	ldr	r3, [pc, #976]	; (80062b0 <main+0x830>)
 8005ee0:	4af4      	ldr	r2, [pc, #976]	; (80062b4 <main+0x834>)
 8005ee2:	4694      	mov	ip, r2
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	4690      	mov	r8, r2
 8005ee8:	2208      	movs	r2, #8
 8005eea:	4691      	mov	r9, r2
 8005eec:	2208      	movs	r2, #8
 8005eee:	4692      	mov	sl, r2
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	4693      	mov	fp, r2
 8005ef4:	44bb      	add	fp, r7
 8005ef6:	44da      	add	sl, fp
 8005ef8:	44d1      	add	r9, sl
 8005efa:	44c8      	add	r8, r9
 8005efc:	44c4      	add	ip, r8
 8005efe:	4463      	add	r3, ip
 8005f00:	2200      	movs	r2, #0
 8005f02:	605a      	str	r2, [r3, #4]

	float tampering_buffer_0[6][TAMPERING_BUFFER_SIZE];
	float tampering_buffer_1[6][TAMPERING_BUFFER_SIZE];

	// High pass Filter Variables
	float low_pass_gyro_0[3] = {0,0,0};
 8005f04:	4bec      	ldr	r3, [pc, #944]	; (80062b8 <main+0x838>)
 8005f06:	4aeb      	ldr	r2, [pc, #940]	; (80062b4 <main+0x834>)
 8005f08:	4694      	mov	ip, r2
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	4690      	mov	r8, r2
 8005f0e:	2208      	movs	r2, #8
 8005f10:	4691      	mov	r9, r2
 8005f12:	2208      	movs	r2, #8
 8005f14:	4692      	mov	sl, r2
 8005f16:	2208      	movs	r2, #8
 8005f18:	4693      	mov	fp, r2
 8005f1a:	44bb      	add	fp, r7
 8005f1c:	44da      	add	sl, fp
 8005f1e:	44d1      	add	r9, sl
 8005f20:	44c8      	add	r8, r9
 8005f22:	44c4      	add	ip, r8
 8005f24:	4463      	add	r3, ip
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	4be3      	ldr	r3, [pc, #908]	; (80062b8 <main+0x838>)
 8005f2c:	4ae1      	ldr	r2, [pc, #900]	; (80062b4 <main+0x834>)
 8005f2e:	4694      	mov	ip, r2
 8005f30:	2220      	movs	r2, #32
 8005f32:	4690      	mov	r8, r2
 8005f34:	2208      	movs	r2, #8
 8005f36:	4691      	mov	r9, r2
 8005f38:	2208      	movs	r2, #8
 8005f3a:	4692      	mov	sl, r2
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	4693      	mov	fp, r2
 8005f40:	44bb      	add	fp, r7
 8005f42:	44da      	add	sl, fp
 8005f44:	44d1      	add	r9, sl
 8005f46:	44c8      	add	r8, r9
 8005f48:	44c4      	add	ip, r8
 8005f4a:	4463      	add	r3, ip
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	605a      	str	r2, [r3, #4]
 8005f50:	4bd9      	ldr	r3, [pc, #868]	; (80062b8 <main+0x838>)
 8005f52:	4ad8      	ldr	r2, [pc, #864]	; (80062b4 <main+0x834>)
 8005f54:	4694      	mov	ip, r2
 8005f56:	2220      	movs	r2, #32
 8005f58:	4690      	mov	r8, r2
 8005f5a:	2208      	movs	r2, #8
 8005f5c:	4691      	mov	r9, r2
 8005f5e:	2208      	movs	r2, #8
 8005f60:	4692      	mov	sl, r2
 8005f62:	2208      	movs	r2, #8
 8005f64:	4693      	mov	fp, r2
 8005f66:	44bb      	add	fp, r7
 8005f68:	44da      	add	sl, fp
 8005f6a:	44d1      	add	r9, sl
 8005f6c:	44c8      	add	r8, r9
 8005f6e:	44c4      	add	ip, r8
 8005f70:	4463      	add	r3, ip
 8005f72:	2200      	movs	r2, #0
 8005f74:	609a      	str	r2, [r3, #8]
	float low_pass_gyro_1[3] = {0,0,0};
 8005f76:	4bd1      	ldr	r3, [pc, #836]	; (80062bc <main+0x83c>)
 8005f78:	4ace      	ldr	r2, [pc, #824]	; (80062b4 <main+0x834>)
 8005f7a:	4694      	mov	ip, r2
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	4690      	mov	r8, r2
 8005f80:	2208      	movs	r2, #8
 8005f82:	4691      	mov	r9, r2
 8005f84:	2208      	movs	r2, #8
 8005f86:	4692      	mov	sl, r2
 8005f88:	2208      	movs	r2, #8
 8005f8a:	4693      	mov	fp, r2
 8005f8c:	44bb      	add	fp, r7
 8005f8e:	44da      	add	sl, fp
 8005f90:	44d1      	add	r9, sl
 8005f92:	44c8      	add	r8, r9
 8005f94:	44c4      	add	ip, r8
 8005f96:	4463      	add	r3, ip
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	4bc7      	ldr	r3, [pc, #796]	; (80062bc <main+0x83c>)
 8005f9e:	4ac5      	ldr	r2, [pc, #788]	; (80062b4 <main+0x834>)
 8005fa0:	4694      	mov	ip, r2
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	4690      	mov	r8, r2
 8005fa6:	2208      	movs	r2, #8
 8005fa8:	4691      	mov	r9, r2
 8005faa:	2208      	movs	r2, #8
 8005fac:	4692      	mov	sl, r2
 8005fae:	2208      	movs	r2, #8
 8005fb0:	4693      	mov	fp, r2
 8005fb2:	44bb      	add	fp, r7
 8005fb4:	44da      	add	sl, fp
 8005fb6:	44d1      	add	r9, sl
 8005fb8:	44c8      	add	r8, r9
 8005fba:	44c4      	add	ip, r8
 8005fbc:	4463      	add	r3, ip
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	4bbe      	ldr	r3, [pc, #760]	; (80062bc <main+0x83c>)
 8005fc4:	4abb      	ldr	r2, [pc, #748]	; (80062b4 <main+0x834>)
 8005fc6:	4694      	mov	ip, r2
 8005fc8:	2220      	movs	r2, #32
 8005fca:	4690      	mov	r8, r2
 8005fcc:	2208      	movs	r2, #8
 8005fce:	4691      	mov	r9, r2
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	4692      	mov	sl, r2
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	4693      	mov	fp, r2
 8005fd8:	44bb      	add	fp, r7
 8005fda:	44da      	add	sl, fp
 8005fdc:	44d1      	add	r9, sl
 8005fde:	44c8      	add	r8, r9
 8005fe0:	44c4      	add	ip, r8
 8005fe2:	4463      	add	r3, ip
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	609a      	str	r2, [r3, #8]
	float prev_low_pass_gyro_0[3] = {0,0,0};
 8005fe8:	4bb5      	ldr	r3, [pc, #724]	; (80062c0 <main+0x840>)
 8005fea:	4ab2      	ldr	r2, [pc, #712]	; (80062b4 <main+0x834>)
 8005fec:	4694      	mov	ip, r2
 8005fee:	2220      	movs	r2, #32
 8005ff0:	4690      	mov	r8, r2
 8005ff2:	2208      	movs	r2, #8
 8005ff4:	4691      	mov	r9, r2
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	4692      	mov	sl, r2
 8005ffa:	2208      	movs	r2, #8
 8005ffc:	4693      	mov	fp, r2
 8005ffe:	44bb      	add	fp, r7
 8006000:	44da      	add	sl, fp
 8006002:	44d1      	add	r9, sl
 8006004:	44c8      	add	r8, r9
 8006006:	44c4      	add	ip, r8
 8006008:	4463      	add	r3, ip
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	4bac      	ldr	r3, [pc, #688]	; (80062c0 <main+0x840>)
 8006010:	4aa8      	ldr	r2, [pc, #672]	; (80062b4 <main+0x834>)
 8006012:	4694      	mov	ip, r2
 8006014:	2220      	movs	r2, #32
 8006016:	4690      	mov	r8, r2
 8006018:	2208      	movs	r2, #8
 800601a:	4691      	mov	r9, r2
 800601c:	2208      	movs	r2, #8
 800601e:	4692      	mov	sl, r2
 8006020:	2208      	movs	r2, #8
 8006022:	4693      	mov	fp, r2
 8006024:	44bb      	add	fp, r7
 8006026:	44da      	add	sl, fp
 8006028:	44d1      	add	r9, sl
 800602a:	44c8      	add	r8, r9
 800602c:	44c4      	add	ip, r8
 800602e:	4463      	add	r3, ip
 8006030:	2200      	movs	r2, #0
 8006032:	605a      	str	r2, [r3, #4]
 8006034:	4ba2      	ldr	r3, [pc, #648]	; (80062c0 <main+0x840>)
 8006036:	4a9f      	ldr	r2, [pc, #636]	; (80062b4 <main+0x834>)
 8006038:	4694      	mov	ip, r2
 800603a:	2220      	movs	r2, #32
 800603c:	4690      	mov	r8, r2
 800603e:	2208      	movs	r2, #8
 8006040:	4691      	mov	r9, r2
 8006042:	2208      	movs	r2, #8
 8006044:	4692      	mov	sl, r2
 8006046:	2208      	movs	r2, #8
 8006048:	4693      	mov	fp, r2
 800604a:	44bb      	add	fp, r7
 800604c:	44da      	add	sl, fp
 800604e:	44d1      	add	r9, sl
 8006050:	44c8      	add	r8, r9
 8006052:	44c4      	add	ip, r8
 8006054:	4463      	add	r3, ip
 8006056:	2200      	movs	r2, #0
 8006058:	609a      	str	r2, [r3, #8]
	float prev_low_pass_gyro_1[3] = {0,0,0};
 800605a:	4b9a      	ldr	r3, [pc, #616]	; (80062c4 <main+0x844>)
 800605c:	4a95      	ldr	r2, [pc, #596]	; (80062b4 <main+0x834>)
 800605e:	4694      	mov	ip, r2
 8006060:	2220      	movs	r2, #32
 8006062:	4690      	mov	r8, r2
 8006064:	2208      	movs	r2, #8
 8006066:	4691      	mov	r9, r2
 8006068:	2208      	movs	r2, #8
 800606a:	4692      	mov	sl, r2
 800606c:	2208      	movs	r2, #8
 800606e:	4693      	mov	fp, r2
 8006070:	44bb      	add	fp, r7
 8006072:	44da      	add	sl, fp
 8006074:	44d1      	add	r9, sl
 8006076:	44c8      	add	r8, r9
 8006078:	44c4      	add	ip, r8
 800607a:	4463      	add	r3, ip
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	4b90      	ldr	r3, [pc, #576]	; (80062c4 <main+0x844>)
 8006082:	4a8c      	ldr	r2, [pc, #560]	; (80062b4 <main+0x834>)
 8006084:	4694      	mov	ip, r2
 8006086:	2220      	movs	r2, #32
 8006088:	4690      	mov	r8, r2
 800608a:	2208      	movs	r2, #8
 800608c:	4691      	mov	r9, r2
 800608e:	2208      	movs	r2, #8
 8006090:	4692      	mov	sl, r2
 8006092:	2208      	movs	r2, #8
 8006094:	4693      	mov	fp, r2
 8006096:	44bb      	add	fp, r7
 8006098:	44da      	add	sl, fp
 800609a:	44d1      	add	r9, sl
 800609c:	44c8      	add	r8, r9
 800609e:	44c4      	add	ip, r8
 80060a0:	4463      	add	r3, ip
 80060a2:	2200      	movs	r2, #0
 80060a4:	605a      	str	r2, [r3, #4]
 80060a6:	4b87      	ldr	r3, [pc, #540]	; (80062c4 <main+0x844>)
 80060a8:	4a82      	ldr	r2, [pc, #520]	; (80062b4 <main+0x834>)
 80060aa:	4694      	mov	ip, r2
 80060ac:	2220      	movs	r2, #32
 80060ae:	4690      	mov	r8, r2
 80060b0:	2208      	movs	r2, #8
 80060b2:	4691      	mov	r9, r2
 80060b4:	2208      	movs	r2, #8
 80060b6:	4692      	mov	sl, r2
 80060b8:	2208      	movs	r2, #8
 80060ba:	4693      	mov	fp, r2
 80060bc:	44bb      	add	fp, r7
 80060be:	44da      	add	sl, fp
 80060c0:	44d1      	add	r9, sl
 80060c2:	44c8      	add	r8, r9
 80060c4:	44c4      	add	ip, r8
 80060c6:	4463      	add	r3, ip
 80060c8:	2200      	movs	r2, #0
 80060ca:	609a      	str	r2, [r3, #8]
	float low_alpha = 0.2;
 80060cc:	4b7e      	ldr	r3, [pc, #504]	; (80062c8 <main+0x848>)
 80060ce:	4a7f      	ldr	r2, [pc, #508]	; (80062cc <main+0x84c>)
 80060d0:	2120      	movs	r1, #32
 80060d2:	468c      	mov	ip, r1
 80060d4:	2108      	movs	r1, #8
 80060d6:	4688      	mov	r8, r1
 80060d8:	2108      	movs	r1, #8
 80060da:	4689      	mov	r9, r1
 80060dc:	2108      	movs	r1, #8
 80060de:	468a      	mov	sl, r1
 80060e0:	44ba      	add	sl, r7
 80060e2:	44d1      	add	r9, sl
 80060e4:	44c8      	add	r8, r9
 80060e6:	44c4      	add	ip, r8
 80060e8:	4462      	add	r2, ip
 80060ea:	6013      	str	r3, [r2, #0]

	float low_pass_accel_0[3] = {0,0,0};
 80060ec:	4b78      	ldr	r3, [pc, #480]	; (80062d0 <main+0x850>)
 80060ee:	4a71      	ldr	r2, [pc, #452]	; (80062b4 <main+0x834>)
 80060f0:	4694      	mov	ip, r2
 80060f2:	2220      	movs	r2, #32
 80060f4:	4690      	mov	r8, r2
 80060f6:	2208      	movs	r2, #8
 80060f8:	4691      	mov	r9, r2
 80060fa:	2208      	movs	r2, #8
 80060fc:	4692      	mov	sl, r2
 80060fe:	2208      	movs	r2, #8
 8006100:	4693      	mov	fp, r2
 8006102:	44bb      	add	fp, r7
 8006104:	44da      	add	sl, fp
 8006106:	44d1      	add	r9, sl
 8006108:	44c8      	add	r8, r9
 800610a:	44c4      	add	ip, r8
 800610c:	4463      	add	r3, ip
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	4b6f      	ldr	r3, [pc, #444]	; (80062d0 <main+0x850>)
 8006114:	4a67      	ldr	r2, [pc, #412]	; (80062b4 <main+0x834>)
 8006116:	4694      	mov	ip, r2
 8006118:	2220      	movs	r2, #32
 800611a:	4690      	mov	r8, r2
 800611c:	2208      	movs	r2, #8
 800611e:	4691      	mov	r9, r2
 8006120:	2208      	movs	r2, #8
 8006122:	4692      	mov	sl, r2
 8006124:	2208      	movs	r2, #8
 8006126:	4693      	mov	fp, r2
 8006128:	44bb      	add	fp, r7
 800612a:	44da      	add	sl, fp
 800612c:	44d1      	add	r9, sl
 800612e:	44c8      	add	r8, r9
 8006130:	44c4      	add	ip, r8
 8006132:	4463      	add	r3, ip
 8006134:	2200      	movs	r2, #0
 8006136:	605a      	str	r2, [r3, #4]
 8006138:	4b65      	ldr	r3, [pc, #404]	; (80062d0 <main+0x850>)
 800613a:	4a5e      	ldr	r2, [pc, #376]	; (80062b4 <main+0x834>)
 800613c:	4694      	mov	ip, r2
 800613e:	2220      	movs	r2, #32
 8006140:	4690      	mov	r8, r2
 8006142:	2208      	movs	r2, #8
 8006144:	4691      	mov	r9, r2
 8006146:	2208      	movs	r2, #8
 8006148:	4692      	mov	sl, r2
 800614a:	2208      	movs	r2, #8
 800614c:	4693      	mov	fp, r2
 800614e:	44bb      	add	fp, r7
 8006150:	44da      	add	sl, fp
 8006152:	44d1      	add	r9, sl
 8006154:	44c8      	add	r8, r9
 8006156:	44c4      	add	ip, r8
 8006158:	4463      	add	r3, ip
 800615a:	2200      	movs	r2, #0
 800615c:	609a      	str	r2, [r3, #8]
	float low_pass_accel_1[3] = {0,0,0};
 800615e:	4b5d      	ldr	r3, [pc, #372]	; (80062d4 <main+0x854>)
 8006160:	4a54      	ldr	r2, [pc, #336]	; (80062b4 <main+0x834>)
 8006162:	4694      	mov	ip, r2
 8006164:	2220      	movs	r2, #32
 8006166:	4690      	mov	r8, r2
 8006168:	2208      	movs	r2, #8
 800616a:	4691      	mov	r9, r2
 800616c:	2208      	movs	r2, #8
 800616e:	4692      	mov	sl, r2
 8006170:	2208      	movs	r2, #8
 8006172:	4693      	mov	fp, r2
 8006174:	44bb      	add	fp, r7
 8006176:	44da      	add	sl, fp
 8006178:	44d1      	add	r9, sl
 800617a:	44c8      	add	r8, r9
 800617c:	44c4      	add	ip, r8
 800617e:	4463      	add	r3, ip
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	4b53      	ldr	r3, [pc, #332]	; (80062d4 <main+0x854>)
 8006186:	4a4b      	ldr	r2, [pc, #300]	; (80062b4 <main+0x834>)
 8006188:	4694      	mov	ip, r2
 800618a:	2220      	movs	r2, #32
 800618c:	4690      	mov	r8, r2
 800618e:	2208      	movs	r2, #8
 8006190:	4691      	mov	r9, r2
 8006192:	2208      	movs	r2, #8
 8006194:	4692      	mov	sl, r2
 8006196:	2208      	movs	r2, #8
 8006198:	4693      	mov	fp, r2
 800619a:	44bb      	add	fp, r7
 800619c:	44da      	add	sl, fp
 800619e:	44d1      	add	r9, sl
 80061a0:	44c8      	add	r8, r9
 80061a2:	44c4      	add	ip, r8
 80061a4:	4463      	add	r3, ip
 80061a6:	2200      	movs	r2, #0
 80061a8:	605a      	str	r2, [r3, #4]
 80061aa:	4b4a      	ldr	r3, [pc, #296]	; (80062d4 <main+0x854>)
 80061ac:	4a41      	ldr	r2, [pc, #260]	; (80062b4 <main+0x834>)
 80061ae:	4694      	mov	ip, r2
 80061b0:	2220      	movs	r2, #32
 80061b2:	4690      	mov	r8, r2
 80061b4:	2208      	movs	r2, #8
 80061b6:	4691      	mov	r9, r2
 80061b8:	2208      	movs	r2, #8
 80061ba:	4692      	mov	sl, r2
 80061bc:	2208      	movs	r2, #8
 80061be:	4693      	mov	fp, r2
 80061c0:	44bb      	add	fp, r7
 80061c2:	44da      	add	sl, fp
 80061c4:	44d1      	add	r9, sl
 80061c6:	44c8      	add	r8, r9
 80061c8:	44c4      	add	ip, r8
 80061ca:	4463      	add	r3, ip
 80061cc:	2200      	movs	r2, #0
 80061ce:	609a      	str	r2, [r3, #8]
	float prev_low_pass_accel_0[3] = {0,0,0};
 80061d0:	4b41      	ldr	r3, [pc, #260]	; (80062d8 <main+0x858>)
 80061d2:	4a38      	ldr	r2, [pc, #224]	; (80062b4 <main+0x834>)
 80061d4:	4694      	mov	ip, r2
 80061d6:	2220      	movs	r2, #32
 80061d8:	4690      	mov	r8, r2
 80061da:	2208      	movs	r2, #8
 80061dc:	4691      	mov	r9, r2
 80061de:	2208      	movs	r2, #8
 80061e0:	4692      	mov	sl, r2
 80061e2:	2208      	movs	r2, #8
 80061e4:	4693      	mov	fp, r2
 80061e6:	44bb      	add	fp, r7
 80061e8:	44da      	add	sl, fp
 80061ea:	44d1      	add	r9, sl
 80061ec:	44c8      	add	r8, r9
 80061ee:	44c4      	add	ip, r8
 80061f0:	4463      	add	r3, ip
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	4b38      	ldr	r3, [pc, #224]	; (80062d8 <main+0x858>)
 80061f8:	4a2e      	ldr	r2, [pc, #184]	; (80062b4 <main+0x834>)
 80061fa:	4694      	mov	ip, r2
 80061fc:	2220      	movs	r2, #32
 80061fe:	4690      	mov	r8, r2
 8006200:	2208      	movs	r2, #8
 8006202:	4691      	mov	r9, r2
 8006204:	2208      	movs	r2, #8
 8006206:	4692      	mov	sl, r2
 8006208:	2208      	movs	r2, #8
 800620a:	4693      	mov	fp, r2
 800620c:	44bb      	add	fp, r7
 800620e:	44da      	add	sl, fp
 8006210:	44d1      	add	r9, sl
 8006212:	44c8      	add	r8, r9
 8006214:	44c4      	add	ip, r8
 8006216:	4463      	add	r3, ip
 8006218:	2200      	movs	r2, #0
 800621a:	605a      	str	r2, [r3, #4]
 800621c:	4b2e      	ldr	r3, [pc, #184]	; (80062d8 <main+0x858>)
 800621e:	4a25      	ldr	r2, [pc, #148]	; (80062b4 <main+0x834>)
 8006220:	4694      	mov	ip, r2
 8006222:	2220      	movs	r2, #32
 8006224:	4690      	mov	r8, r2
 8006226:	2208      	movs	r2, #8
 8006228:	4691      	mov	r9, r2
 800622a:	2208      	movs	r2, #8
 800622c:	4692      	mov	sl, r2
 800622e:	2208      	movs	r2, #8
 8006230:	4693      	mov	fp, r2
 8006232:	44bb      	add	fp, r7
 8006234:	44da      	add	sl, fp
 8006236:	44d1      	add	r9, sl
 8006238:	44c8      	add	r8, r9
 800623a:	44c4      	add	ip, r8
 800623c:	4463      	add	r3, ip
 800623e:	2200      	movs	r2, #0
 8006240:	609a      	str	r2, [r3, #8]
	float prev_low_pass_accel_1[3] = {0,0,0};
 8006242:	4b26      	ldr	r3, [pc, #152]	; (80062dc <main+0x85c>)
 8006244:	4a1b      	ldr	r2, [pc, #108]	; (80062b4 <main+0x834>)
 8006246:	4694      	mov	ip, r2
 8006248:	2220      	movs	r2, #32
 800624a:	4690      	mov	r8, r2
 800624c:	2208      	movs	r2, #8
 800624e:	4691      	mov	r9, r2
 8006250:	2208      	movs	r2, #8
 8006252:	4692      	mov	sl, r2
 8006254:	2208      	movs	r2, #8
 8006256:	4693      	mov	fp, r2
 8006258:	44bb      	add	fp, r7
 800625a:	44da      	add	sl, fp
 800625c:	44d1      	add	r9, sl
 800625e:	44c8      	add	r8, r9
 8006260:	44c4      	add	ip, r8
 8006262:	4463      	add	r3, ip
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	4b1c      	ldr	r3, [pc, #112]	; (80062dc <main+0x85c>)
 800626a:	4a12      	ldr	r2, [pc, #72]	; (80062b4 <main+0x834>)
 800626c:	4694      	mov	ip, r2
 800626e:	2220      	movs	r2, #32
 8006270:	4690      	mov	r8, r2
 8006272:	2208      	movs	r2, #8
 8006274:	4691      	mov	r9, r2
 8006276:	2208      	movs	r2, #8
 8006278:	4692      	mov	sl, r2
 800627a:	2208      	movs	r2, #8
 800627c:	4693      	mov	fp, r2
 800627e:	44bb      	add	fp, r7
 8006280:	44da      	add	sl, fp
 8006282:	44d1      	add	r9, sl
 8006284:	44c8      	add	r8, r9
 8006286:	44c4      	add	ip, r8
 8006288:	4463      	add	r3, ip
 800628a:	2200      	movs	r2, #0
 800628c:	605a      	str	r2, [r3, #4]
 800628e:	4b13      	ldr	r3, [pc, #76]	; (80062dc <main+0x85c>)
 8006290:	4a08      	ldr	r2, [pc, #32]	; (80062b4 <main+0x834>)
 8006292:	4694      	mov	ip, r2
 8006294:	2220      	movs	r2, #32
 8006296:	4690      	mov	r8, r2
 8006298:	2208      	movs	r2, #8
 800629a:	4691      	mov	r9, r2
 800629c:	2208      	movs	r2, #8
 800629e:	4692      	mov	sl, r2
 80062a0:	2208      	movs	r2, #8
 80062a2:	4693      	mov	fp, r2
 80062a4:	44bb      	add	fp, r7
 80062a6:	44da      	add	sl, fp
 80062a8:	44d1      	add	r9, sl
 80062aa:	44c8      	add	r8, r9
 80062ac:	44c4      	add	ip, r8
 80062ae:	e017      	b.n	80062e0 <main+0x860>
 80062b0:	fffffea8 	.word	0xfffffea8
 80062b4:	00000c08 	.word	0x00000c08
 80062b8:	fffff53c 	.word	0xfffff53c
 80062bc:	fffff530 	.word	0xfffff530
 80062c0:	fffff524 	.word	0xfffff524
 80062c4:	fffff518 	.word	0xfffff518
 80062c8:	3e4ccccd 	.word	0x3e4ccccd
 80062cc:	00000bf8 	.word	0x00000bf8
 80062d0:	fffff50c 	.word	0xfffff50c
 80062d4:	fffff500 	.word	0xfffff500
 80062d8:	fffff4f4 	.word	0xfffff4f4
 80062dc:	fffff4e8 	.word	0xfffff4e8
 80062e0:	4463      	add	r3, ip
 80062e2:	2200      	movs	r2, #0
 80062e4:	609a      	str	r2, [r3, #8]
	float low_alpha_acc = 0.2;
 80062e6:	4bfe      	ldr	r3, [pc, #1016]	; (80066e0 <main+0xc60>)
 80062e8:	4afe      	ldr	r2, [pc, #1016]	; (80066e4 <main+0xc64>)
 80062ea:	2120      	movs	r1, #32
 80062ec:	468c      	mov	ip, r1
 80062ee:	2108      	movs	r1, #8
 80062f0:	4688      	mov	r8, r1
 80062f2:	2108      	movs	r1, #8
 80062f4:	4689      	mov	r9, r1
 80062f6:	2108      	movs	r1, #8
 80062f8:	468a      	mov	sl, r1
 80062fa:	44ba      	add	sl, r7
 80062fc:	44d1      	add	r9, sl
 80062fe:	44c8      	add	r8, r9
 8006300:	44c4      	add	ip, r8
 8006302:	4462      	add	r2, ip
 8006304:	6013      	str	r3, [r2, #0]

	struct quaternion quat_0 = {1,0,0,0};
 8006306:	4bf8      	ldr	r3, [pc, #992]	; (80066e8 <main+0xc68>)
 8006308:	4af8      	ldr	r2, [pc, #992]	; (80066ec <main+0xc6c>)
 800630a:	4694      	mov	ip, r2
 800630c:	2220      	movs	r2, #32
 800630e:	4690      	mov	r8, r2
 8006310:	2208      	movs	r2, #8
 8006312:	4691      	mov	r9, r2
 8006314:	2208      	movs	r2, #8
 8006316:	4692      	mov	sl, r2
 8006318:	2208      	movs	r2, #8
 800631a:	4693      	mov	fp, r2
 800631c:	44bb      	add	fp, r7
 800631e:	44da      	add	sl, fp
 8006320:	44d1      	add	r9, sl
 8006322:	44c8      	add	r8, r9
 8006324:	44c4      	add	ip, r8
 8006326:	4463      	add	r3, ip
 8006328:	22fe      	movs	r2, #254	; 0xfe
 800632a:	0592      	lsls	r2, r2, #22
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	4bee      	ldr	r3, [pc, #952]	; (80066e8 <main+0xc68>)
 8006330:	4aee      	ldr	r2, [pc, #952]	; (80066ec <main+0xc6c>)
 8006332:	4694      	mov	ip, r2
 8006334:	2220      	movs	r2, #32
 8006336:	4690      	mov	r8, r2
 8006338:	2208      	movs	r2, #8
 800633a:	4691      	mov	r9, r2
 800633c:	2208      	movs	r2, #8
 800633e:	4692      	mov	sl, r2
 8006340:	2208      	movs	r2, #8
 8006342:	4693      	mov	fp, r2
 8006344:	44bb      	add	fp, r7
 8006346:	44da      	add	sl, fp
 8006348:	44d1      	add	r9, sl
 800634a:	44c8      	add	r8, r9
 800634c:	44c4      	add	ip, r8
 800634e:	4463      	add	r3, ip
 8006350:	2200      	movs	r2, #0
 8006352:	605a      	str	r2, [r3, #4]
 8006354:	4be4      	ldr	r3, [pc, #912]	; (80066e8 <main+0xc68>)
 8006356:	4ae5      	ldr	r2, [pc, #916]	; (80066ec <main+0xc6c>)
 8006358:	4694      	mov	ip, r2
 800635a:	2220      	movs	r2, #32
 800635c:	4690      	mov	r8, r2
 800635e:	2208      	movs	r2, #8
 8006360:	4691      	mov	r9, r2
 8006362:	2208      	movs	r2, #8
 8006364:	4692      	mov	sl, r2
 8006366:	2208      	movs	r2, #8
 8006368:	4693      	mov	fp, r2
 800636a:	44bb      	add	fp, r7
 800636c:	44da      	add	sl, fp
 800636e:	44d1      	add	r9, sl
 8006370:	44c8      	add	r8, r9
 8006372:	44c4      	add	ip, r8
 8006374:	4463      	add	r3, ip
 8006376:	2200      	movs	r2, #0
 8006378:	609a      	str	r2, [r3, #8]
 800637a:	4bdb      	ldr	r3, [pc, #876]	; (80066e8 <main+0xc68>)
 800637c:	4adb      	ldr	r2, [pc, #876]	; (80066ec <main+0xc6c>)
 800637e:	4694      	mov	ip, r2
 8006380:	2220      	movs	r2, #32
 8006382:	4690      	mov	r8, r2
 8006384:	2208      	movs	r2, #8
 8006386:	4691      	mov	r9, r2
 8006388:	2208      	movs	r2, #8
 800638a:	4692      	mov	sl, r2
 800638c:	2208      	movs	r2, #8
 800638e:	4693      	mov	fp, r2
 8006390:	44bb      	add	fp, r7
 8006392:	44da      	add	sl, fp
 8006394:	44d1      	add	r9, sl
 8006396:	44c8      	add	r8, r9
 8006398:	44c4      	add	ip, r8
 800639a:	4463      	add	r3, ip
 800639c:	2200      	movs	r2, #0
 800639e:	60da      	str	r2, [r3, #12]
	struct quaternion quat_1 = {1,0,0,0};
 80063a0:	4bd3      	ldr	r3, [pc, #844]	; (80066f0 <main+0xc70>)
 80063a2:	4ad2      	ldr	r2, [pc, #840]	; (80066ec <main+0xc6c>)
 80063a4:	4694      	mov	ip, r2
 80063a6:	2220      	movs	r2, #32
 80063a8:	4690      	mov	r8, r2
 80063aa:	2208      	movs	r2, #8
 80063ac:	4691      	mov	r9, r2
 80063ae:	2208      	movs	r2, #8
 80063b0:	4692      	mov	sl, r2
 80063b2:	2208      	movs	r2, #8
 80063b4:	4693      	mov	fp, r2
 80063b6:	44bb      	add	fp, r7
 80063b8:	44da      	add	sl, fp
 80063ba:	44d1      	add	r9, sl
 80063bc:	44c8      	add	r8, r9
 80063be:	44c4      	add	ip, r8
 80063c0:	4463      	add	r3, ip
 80063c2:	22fe      	movs	r2, #254	; 0xfe
 80063c4:	0592      	lsls	r2, r2, #22
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	4bc9      	ldr	r3, [pc, #804]	; (80066f0 <main+0xc70>)
 80063ca:	4ac8      	ldr	r2, [pc, #800]	; (80066ec <main+0xc6c>)
 80063cc:	4694      	mov	ip, r2
 80063ce:	2220      	movs	r2, #32
 80063d0:	4690      	mov	r8, r2
 80063d2:	2208      	movs	r2, #8
 80063d4:	4691      	mov	r9, r2
 80063d6:	2208      	movs	r2, #8
 80063d8:	4692      	mov	sl, r2
 80063da:	2208      	movs	r2, #8
 80063dc:	4693      	mov	fp, r2
 80063de:	44bb      	add	fp, r7
 80063e0:	44da      	add	sl, fp
 80063e2:	44d1      	add	r9, sl
 80063e4:	44c8      	add	r8, r9
 80063e6:	44c4      	add	ip, r8
 80063e8:	4463      	add	r3, ip
 80063ea:	2200      	movs	r2, #0
 80063ec:	605a      	str	r2, [r3, #4]
 80063ee:	4bc0      	ldr	r3, [pc, #768]	; (80066f0 <main+0xc70>)
 80063f0:	4abe      	ldr	r2, [pc, #760]	; (80066ec <main+0xc6c>)
 80063f2:	4694      	mov	ip, r2
 80063f4:	2220      	movs	r2, #32
 80063f6:	4690      	mov	r8, r2
 80063f8:	2208      	movs	r2, #8
 80063fa:	4691      	mov	r9, r2
 80063fc:	2208      	movs	r2, #8
 80063fe:	4692      	mov	sl, r2
 8006400:	2208      	movs	r2, #8
 8006402:	4693      	mov	fp, r2
 8006404:	44bb      	add	fp, r7
 8006406:	44da      	add	sl, fp
 8006408:	44d1      	add	r9, sl
 800640a:	44c8      	add	r8, r9
 800640c:	44c4      	add	ip, r8
 800640e:	4463      	add	r3, ip
 8006410:	2200      	movs	r2, #0
 8006412:	609a      	str	r2, [r3, #8]
 8006414:	4bb6      	ldr	r3, [pc, #728]	; (80066f0 <main+0xc70>)
 8006416:	4ab5      	ldr	r2, [pc, #724]	; (80066ec <main+0xc6c>)
 8006418:	4694      	mov	ip, r2
 800641a:	2220      	movs	r2, #32
 800641c:	4690      	mov	r8, r2
 800641e:	2208      	movs	r2, #8
 8006420:	4691      	mov	r9, r2
 8006422:	2208      	movs	r2, #8
 8006424:	4692      	mov	sl, r2
 8006426:	2208      	movs	r2, #8
 8006428:	4693      	mov	fp, r2
 800642a:	44bb      	add	fp, r7
 800642c:	44da      	add	sl, fp
 800642e:	44d1      	add	r9, sl
 8006430:	44c8      	add	r8, r9
 8006432:	44c4      	add	ip, r8
 8006434:	4463      	add	r3, ip
 8006436:	2200      	movs	r2, #0
 8006438:	60da      	str	r2, [r3, #12]
	struct quaternion quat_buffer_0 = {1,0,0,0};
 800643a:	4bae      	ldr	r3, [pc, #696]	; (80066f4 <main+0xc74>)
 800643c:	4aab      	ldr	r2, [pc, #684]	; (80066ec <main+0xc6c>)
 800643e:	4694      	mov	ip, r2
 8006440:	2220      	movs	r2, #32
 8006442:	4690      	mov	r8, r2
 8006444:	2208      	movs	r2, #8
 8006446:	4691      	mov	r9, r2
 8006448:	2208      	movs	r2, #8
 800644a:	4692      	mov	sl, r2
 800644c:	2208      	movs	r2, #8
 800644e:	4693      	mov	fp, r2
 8006450:	44bb      	add	fp, r7
 8006452:	44da      	add	sl, fp
 8006454:	44d1      	add	r9, sl
 8006456:	44c8      	add	r8, r9
 8006458:	44c4      	add	ip, r8
 800645a:	4463      	add	r3, ip
 800645c:	22fe      	movs	r2, #254	; 0xfe
 800645e:	0592      	lsls	r2, r2, #22
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	4ba4      	ldr	r3, [pc, #656]	; (80066f4 <main+0xc74>)
 8006464:	4aa1      	ldr	r2, [pc, #644]	; (80066ec <main+0xc6c>)
 8006466:	4694      	mov	ip, r2
 8006468:	2220      	movs	r2, #32
 800646a:	4690      	mov	r8, r2
 800646c:	2208      	movs	r2, #8
 800646e:	4691      	mov	r9, r2
 8006470:	2208      	movs	r2, #8
 8006472:	4692      	mov	sl, r2
 8006474:	2208      	movs	r2, #8
 8006476:	4693      	mov	fp, r2
 8006478:	44bb      	add	fp, r7
 800647a:	44da      	add	sl, fp
 800647c:	44d1      	add	r9, sl
 800647e:	44c8      	add	r8, r9
 8006480:	44c4      	add	ip, r8
 8006482:	4463      	add	r3, ip
 8006484:	2200      	movs	r2, #0
 8006486:	605a      	str	r2, [r3, #4]
 8006488:	4b9a      	ldr	r3, [pc, #616]	; (80066f4 <main+0xc74>)
 800648a:	4a98      	ldr	r2, [pc, #608]	; (80066ec <main+0xc6c>)
 800648c:	4694      	mov	ip, r2
 800648e:	2220      	movs	r2, #32
 8006490:	4690      	mov	r8, r2
 8006492:	2208      	movs	r2, #8
 8006494:	4691      	mov	r9, r2
 8006496:	2208      	movs	r2, #8
 8006498:	4692      	mov	sl, r2
 800649a:	2208      	movs	r2, #8
 800649c:	4693      	mov	fp, r2
 800649e:	44bb      	add	fp, r7
 80064a0:	44da      	add	sl, fp
 80064a2:	44d1      	add	r9, sl
 80064a4:	44c8      	add	r8, r9
 80064a6:	44c4      	add	ip, r8
 80064a8:	4463      	add	r3, ip
 80064aa:	2200      	movs	r2, #0
 80064ac:	609a      	str	r2, [r3, #8]
 80064ae:	4b91      	ldr	r3, [pc, #580]	; (80066f4 <main+0xc74>)
 80064b0:	4a8e      	ldr	r2, [pc, #568]	; (80066ec <main+0xc6c>)
 80064b2:	4694      	mov	ip, r2
 80064b4:	2220      	movs	r2, #32
 80064b6:	4690      	mov	r8, r2
 80064b8:	2208      	movs	r2, #8
 80064ba:	4691      	mov	r9, r2
 80064bc:	2208      	movs	r2, #8
 80064be:	4692      	mov	sl, r2
 80064c0:	2208      	movs	r2, #8
 80064c2:	4693      	mov	fp, r2
 80064c4:	44bb      	add	fp, r7
 80064c6:	44da      	add	sl, fp
 80064c8:	44d1      	add	r9, sl
 80064ca:	44c8      	add	r8, r9
 80064cc:	44c4      	add	ip, r8
 80064ce:	4463      	add	r3, ip
 80064d0:	2200      	movs	r2, #0
 80064d2:	60da      	str	r2, [r3, #12]
	struct quaternion quat_buffer_1 = {1,0,0,0};
 80064d4:	4b88      	ldr	r3, [pc, #544]	; (80066f8 <main+0xc78>)
 80064d6:	4a85      	ldr	r2, [pc, #532]	; (80066ec <main+0xc6c>)
 80064d8:	4694      	mov	ip, r2
 80064da:	2220      	movs	r2, #32
 80064dc:	4690      	mov	r8, r2
 80064de:	2208      	movs	r2, #8
 80064e0:	4691      	mov	r9, r2
 80064e2:	2208      	movs	r2, #8
 80064e4:	4692      	mov	sl, r2
 80064e6:	2208      	movs	r2, #8
 80064e8:	4693      	mov	fp, r2
 80064ea:	44bb      	add	fp, r7
 80064ec:	44da      	add	sl, fp
 80064ee:	44d1      	add	r9, sl
 80064f0:	44c8      	add	r8, r9
 80064f2:	44c4      	add	ip, r8
 80064f4:	4463      	add	r3, ip
 80064f6:	22fe      	movs	r2, #254	; 0xfe
 80064f8:	0592      	lsls	r2, r2, #22
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	4b7e      	ldr	r3, [pc, #504]	; (80066f8 <main+0xc78>)
 80064fe:	4a7b      	ldr	r2, [pc, #492]	; (80066ec <main+0xc6c>)
 8006500:	4694      	mov	ip, r2
 8006502:	2220      	movs	r2, #32
 8006504:	4690      	mov	r8, r2
 8006506:	2208      	movs	r2, #8
 8006508:	4691      	mov	r9, r2
 800650a:	2208      	movs	r2, #8
 800650c:	4692      	mov	sl, r2
 800650e:	2208      	movs	r2, #8
 8006510:	4693      	mov	fp, r2
 8006512:	44bb      	add	fp, r7
 8006514:	44da      	add	sl, fp
 8006516:	44d1      	add	r9, sl
 8006518:	44c8      	add	r8, r9
 800651a:	44c4      	add	ip, r8
 800651c:	4463      	add	r3, ip
 800651e:	2200      	movs	r2, #0
 8006520:	605a      	str	r2, [r3, #4]
 8006522:	4b75      	ldr	r3, [pc, #468]	; (80066f8 <main+0xc78>)
 8006524:	4a71      	ldr	r2, [pc, #452]	; (80066ec <main+0xc6c>)
 8006526:	4694      	mov	ip, r2
 8006528:	2220      	movs	r2, #32
 800652a:	4690      	mov	r8, r2
 800652c:	2208      	movs	r2, #8
 800652e:	4691      	mov	r9, r2
 8006530:	2208      	movs	r2, #8
 8006532:	4692      	mov	sl, r2
 8006534:	2208      	movs	r2, #8
 8006536:	4693      	mov	fp, r2
 8006538:	44bb      	add	fp, r7
 800653a:	44da      	add	sl, fp
 800653c:	44d1      	add	r9, sl
 800653e:	44c8      	add	r8, r9
 8006540:	44c4      	add	ip, r8
 8006542:	4463      	add	r3, ip
 8006544:	2200      	movs	r2, #0
 8006546:	609a      	str	r2, [r3, #8]
 8006548:	4b6b      	ldr	r3, [pc, #428]	; (80066f8 <main+0xc78>)
 800654a:	4a68      	ldr	r2, [pc, #416]	; (80066ec <main+0xc6c>)
 800654c:	4694      	mov	ip, r2
 800654e:	2220      	movs	r2, #32
 8006550:	4690      	mov	r8, r2
 8006552:	2208      	movs	r2, #8
 8006554:	4691      	mov	r9, r2
 8006556:	2208      	movs	r2, #8
 8006558:	4692      	mov	sl, r2
 800655a:	2208      	movs	r2, #8
 800655c:	4693      	mov	fp, r2
 800655e:	44bb      	add	fp, r7
 8006560:	44da      	add	sl, fp
 8006562:	44d1      	add	r9, sl
 8006564:	44c8      	add	r8, r9
 8006566:	44c4      	add	ip, r8
 8006568:	4463      	add	r3, ip
 800656a:	2200      	movs	r2, #0
 800656c:	60da      	str	r2, [r3, #12]
	struct euler_angles angles_0 = {0,0,0};
 800656e:	4b63      	ldr	r3, [pc, #396]	; (80066fc <main+0xc7c>)
 8006570:	4a5e      	ldr	r2, [pc, #376]	; (80066ec <main+0xc6c>)
 8006572:	4694      	mov	ip, r2
 8006574:	2220      	movs	r2, #32
 8006576:	4690      	mov	r8, r2
 8006578:	2208      	movs	r2, #8
 800657a:	4691      	mov	r9, r2
 800657c:	2208      	movs	r2, #8
 800657e:	4692      	mov	sl, r2
 8006580:	2208      	movs	r2, #8
 8006582:	4693      	mov	fp, r2
 8006584:	44bb      	add	fp, r7
 8006586:	44da      	add	sl, fp
 8006588:	44d1      	add	r9, sl
 800658a:	44c8      	add	r8, r9
 800658c:	44c4      	add	ip, r8
 800658e:	4463      	add	r3, ip
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	4b59      	ldr	r3, [pc, #356]	; (80066fc <main+0xc7c>)
 8006596:	4a55      	ldr	r2, [pc, #340]	; (80066ec <main+0xc6c>)
 8006598:	4694      	mov	ip, r2
 800659a:	2220      	movs	r2, #32
 800659c:	4690      	mov	r8, r2
 800659e:	2208      	movs	r2, #8
 80065a0:	4691      	mov	r9, r2
 80065a2:	2208      	movs	r2, #8
 80065a4:	4692      	mov	sl, r2
 80065a6:	2208      	movs	r2, #8
 80065a8:	4693      	mov	fp, r2
 80065aa:	44bb      	add	fp, r7
 80065ac:	44da      	add	sl, fp
 80065ae:	44d1      	add	r9, sl
 80065b0:	44c8      	add	r8, r9
 80065b2:	44c4      	add	ip, r8
 80065b4:	4463      	add	r3, ip
 80065b6:	2200      	movs	r2, #0
 80065b8:	605a      	str	r2, [r3, #4]
 80065ba:	4b50      	ldr	r3, [pc, #320]	; (80066fc <main+0xc7c>)
 80065bc:	4a4b      	ldr	r2, [pc, #300]	; (80066ec <main+0xc6c>)
 80065be:	4694      	mov	ip, r2
 80065c0:	2220      	movs	r2, #32
 80065c2:	4690      	mov	r8, r2
 80065c4:	2208      	movs	r2, #8
 80065c6:	4691      	mov	r9, r2
 80065c8:	2208      	movs	r2, #8
 80065ca:	4692      	mov	sl, r2
 80065cc:	2208      	movs	r2, #8
 80065ce:	4693      	mov	fp, r2
 80065d0:	44bb      	add	fp, r7
 80065d2:	44da      	add	sl, fp
 80065d4:	44d1      	add	r9, sl
 80065d6:	44c8      	add	r8, r9
 80065d8:	44c4      	add	ip, r8
 80065da:	4463      	add	r3, ip
 80065dc:	2200      	movs	r2, #0
 80065de:	609a      	str	r2, [r3, #8]
	struct euler_angles angles_1 = {0,0,0};
 80065e0:	4b47      	ldr	r3, [pc, #284]	; (8006700 <main+0xc80>)
 80065e2:	4a42      	ldr	r2, [pc, #264]	; (80066ec <main+0xc6c>)
 80065e4:	4694      	mov	ip, r2
 80065e6:	2220      	movs	r2, #32
 80065e8:	4690      	mov	r8, r2
 80065ea:	2208      	movs	r2, #8
 80065ec:	4691      	mov	r9, r2
 80065ee:	2208      	movs	r2, #8
 80065f0:	4692      	mov	sl, r2
 80065f2:	2208      	movs	r2, #8
 80065f4:	4693      	mov	fp, r2
 80065f6:	44bb      	add	fp, r7
 80065f8:	44da      	add	sl, fp
 80065fa:	44d1      	add	r9, sl
 80065fc:	44c8      	add	r8, r9
 80065fe:	44c4      	add	ip, r8
 8006600:	4463      	add	r3, ip
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	4b3e      	ldr	r3, [pc, #248]	; (8006700 <main+0xc80>)
 8006608:	4a38      	ldr	r2, [pc, #224]	; (80066ec <main+0xc6c>)
 800660a:	4694      	mov	ip, r2
 800660c:	2220      	movs	r2, #32
 800660e:	4690      	mov	r8, r2
 8006610:	2208      	movs	r2, #8
 8006612:	4691      	mov	r9, r2
 8006614:	2208      	movs	r2, #8
 8006616:	4692      	mov	sl, r2
 8006618:	2208      	movs	r2, #8
 800661a:	4693      	mov	fp, r2
 800661c:	44bb      	add	fp, r7
 800661e:	44da      	add	sl, fp
 8006620:	44d1      	add	r9, sl
 8006622:	44c8      	add	r8, r9
 8006624:	44c4      	add	ip, r8
 8006626:	4463      	add	r3, ip
 8006628:	2200      	movs	r2, #0
 800662a:	605a      	str	r2, [r3, #4]
 800662c:	4b34      	ldr	r3, [pc, #208]	; (8006700 <main+0xc80>)
 800662e:	4a2f      	ldr	r2, [pc, #188]	; (80066ec <main+0xc6c>)
 8006630:	4694      	mov	ip, r2
 8006632:	2220      	movs	r2, #32
 8006634:	4690      	mov	r8, r2
 8006636:	2208      	movs	r2, #8
 8006638:	4691      	mov	r9, r2
 800663a:	2208      	movs	r2, #8
 800663c:	4692      	mov	sl, r2
 800663e:	2208      	movs	r2, #8
 8006640:	4693      	mov	fp, r2
 8006642:	44bb      	add	fp, r7
 8006644:	44da      	add	sl, fp
 8006646:	44d1      	add	r9, sl
 8006648:	44c8      	add	r8, r9
 800664a:	44c4      	add	ip, r8
 800664c:	4463      	add	r3, ip
 800664e:	2200      	movs	r2, #0
 8006650:	609a      	str	r2, [r3, #8]
	struct euler_angles angles_buffer_0 = {0,0,0};
 8006652:	4b2c      	ldr	r3, [pc, #176]	; (8006704 <main+0xc84>)
 8006654:	4a25      	ldr	r2, [pc, #148]	; (80066ec <main+0xc6c>)
 8006656:	4694      	mov	ip, r2
 8006658:	2220      	movs	r2, #32
 800665a:	4690      	mov	r8, r2
 800665c:	2208      	movs	r2, #8
 800665e:	4691      	mov	r9, r2
 8006660:	2208      	movs	r2, #8
 8006662:	4692      	mov	sl, r2
 8006664:	2208      	movs	r2, #8
 8006666:	4693      	mov	fp, r2
 8006668:	44bb      	add	fp, r7
 800666a:	44da      	add	sl, fp
 800666c:	44d1      	add	r9, sl
 800666e:	44c8      	add	r8, r9
 8006670:	44c4      	add	ip, r8
 8006672:	4463      	add	r3, ip
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	4b22      	ldr	r3, [pc, #136]	; (8006704 <main+0xc84>)
 800667a:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <main+0xc6c>)
 800667c:	4694      	mov	ip, r2
 800667e:	2220      	movs	r2, #32
 8006680:	4690      	mov	r8, r2
 8006682:	2208      	movs	r2, #8
 8006684:	4691      	mov	r9, r2
 8006686:	2208      	movs	r2, #8
 8006688:	4692      	mov	sl, r2
 800668a:	2208      	movs	r2, #8
 800668c:	4693      	mov	fp, r2
 800668e:	44bb      	add	fp, r7
 8006690:	44da      	add	sl, fp
 8006692:	44d1      	add	r9, sl
 8006694:	44c8      	add	r8, r9
 8006696:	44c4      	add	ip, r8
 8006698:	4463      	add	r3, ip
 800669a:	2200      	movs	r2, #0
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	4b19      	ldr	r3, [pc, #100]	; (8006704 <main+0xc84>)
 80066a0:	4a12      	ldr	r2, [pc, #72]	; (80066ec <main+0xc6c>)
 80066a2:	4694      	mov	ip, r2
 80066a4:	2220      	movs	r2, #32
 80066a6:	4690      	mov	r8, r2
 80066a8:	2208      	movs	r2, #8
 80066aa:	4691      	mov	r9, r2
 80066ac:	2208      	movs	r2, #8
 80066ae:	4692      	mov	sl, r2
 80066b0:	2208      	movs	r2, #8
 80066b2:	4693      	mov	fp, r2
 80066b4:	44bb      	add	fp, r7
 80066b6:	44da      	add	sl, fp
 80066b8:	44d1      	add	r9, sl
 80066ba:	44c8      	add	r8, r9
 80066bc:	44c4      	add	ip, r8
 80066be:	4463      	add	r3, ip
 80066c0:	2200      	movs	r2, #0
 80066c2:	609a      	str	r2, [r3, #8]
	struct euler_angles angles_buffer_1 = {0,0,0};
 80066c4:	4b10      	ldr	r3, [pc, #64]	; (8006708 <main+0xc88>)
 80066c6:	4a09      	ldr	r2, [pc, #36]	; (80066ec <main+0xc6c>)
 80066c8:	4694      	mov	ip, r2
 80066ca:	2220      	movs	r2, #32
 80066cc:	4690      	mov	r8, r2
 80066ce:	2208      	movs	r2, #8
 80066d0:	4691      	mov	r9, r2
 80066d2:	2208      	movs	r2, #8
 80066d4:	4692      	mov	sl, r2
 80066d6:	2208      	movs	r2, #8
 80066d8:	4693      	mov	fp, r2
 80066da:	44bb      	add	fp, r7
 80066dc:	e016      	b.n	800670c <main+0xc8c>
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	3e4ccccd 	.word	0x3e4ccccd
 80066e4:	00000bf4 	.word	0x00000bf4
 80066e8:	fffff4d8 	.word	0xfffff4d8
 80066ec:	00000c08 	.word	0x00000c08
 80066f0:	fffff4c8 	.word	0xfffff4c8
 80066f4:	fffff4b8 	.word	0xfffff4b8
 80066f8:	fffff4a8 	.word	0xfffff4a8
 80066fc:	fffff49c 	.word	0xfffff49c
 8006700:	fffff490 	.word	0xfffff490
 8006704:	fffff484 	.word	0xfffff484
 8006708:	fffff478 	.word	0xfffff478
 800670c:	44da      	add	sl, fp
 800670e:	44d1      	add	r9, sl
 8006710:	44c8      	add	r8, r9
 8006712:	44c4      	add	ip, r8
 8006714:	4463      	add	r3, ip
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	4bfd      	ldr	r3, [pc, #1012]	; (8006b10 <main+0x1090>)
 800671c:	4afd      	ldr	r2, [pc, #1012]	; (8006b14 <main+0x1094>)
 800671e:	4694      	mov	ip, r2
 8006720:	2220      	movs	r2, #32
 8006722:	4690      	mov	r8, r2
 8006724:	2208      	movs	r2, #8
 8006726:	4691      	mov	r9, r2
 8006728:	2208      	movs	r2, #8
 800672a:	4692      	mov	sl, r2
 800672c:	2208      	movs	r2, #8
 800672e:	4693      	mov	fp, r2
 8006730:	44bb      	add	fp, r7
 8006732:	44da      	add	sl, fp
 8006734:	44d1      	add	r9, sl
 8006736:	44c8      	add	r8, r9
 8006738:	44c4      	add	ip, r8
 800673a:	4463      	add	r3, ip
 800673c:	2200      	movs	r2, #0
 800673e:	605a      	str	r2, [r3, #4]
 8006740:	4bf3      	ldr	r3, [pc, #972]	; (8006b10 <main+0x1090>)
 8006742:	4af4      	ldr	r2, [pc, #976]	; (8006b14 <main+0x1094>)
 8006744:	4694      	mov	ip, r2
 8006746:	2220      	movs	r2, #32
 8006748:	4690      	mov	r8, r2
 800674a:	2208      	movs	r2, #8
 800674c:	4691      	mov	r9, r2
 800674e:	2208      	movs	r2, #8
 8006750:	4692      	mov	sl, r2
 8006752:	2208      	movs	r2, #8
 8006754:	4693      	mov	fp, r2
 8006756:	44bb      	add	fp, r7
 8006758:	44da      	add	sl, fp
 800675a:	44d1      	add	r9, sl
 800675c:	44c8      	add	r8, r9
 800675e:	44c4      	add	ip, r8
 8006760:	4463      	add	r3, ip
 8006762:	2200      	movs	r2, #0
 8006764:	609a      	str	r2, [r3, #8]
	struct euler_angles diff_0 = {0,0,0};
 8006766:	4bec      	ldr	r3, [pc, #944]	; (8006b18 <main+0x1098>)
 8006768:	4aea      	ldr	r2, [pc, #936]	; (8006b14 <main+0x1094>)
 800676a:	4694      	mov	ip, r2
 800676c:	2220      	movs	r2, #32
 800676e:	4690      	mov	r8, r2
 8006770:	2208      	movs	r2, #8
 8006772:	4691      	mov	r9, r2
 8006774:	2208      	movs	r2, #8
 8006776:	4692      	mov	sl, r2
 8006778:	2208      	movs	r2, #8
 800677a:	4693      	mov	fp, r2
 800677c:	44bb      	add	fp, r7
 800677e:	44da      	add	sl, fp
 8006780:	44d1      	add	r9, sl
 8006782:	44c8      	add	r8, r9
 8006784:	44c4      	add	ip, r8
 8006786:	4463      	add	r3, ip
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	4be2      	ldr	r3, [pc, #904]	; (8006b18 <main+0x1098>)
 800678e:	4ae1      	ldr	r2, [pc, #900]	; (8006b14 <main+0x1094>)
 8006790:	4694      	mov	ip, r2
 8006792:	2220      	movs	r2, #32
 8006794:	4690      	mov	r8, r2
 8006796:	2208      	movs	r2, #8
 8006798:	4691      	mov	r9, r2
 800679a:	2208      	movs	r2, #8
 800679c:	4692      	mov	sl, r2
 800679e:	2208      	movs	r2, #8
 80067a0:	4693      	mov	fp, r2
 80067a2:	44bb      	add	fp, r7
 80067a4:	44da      	add	sl, fp
 80067a6:	44d1      	add	r9, sl
 80067a8:	44c8      	add	r8, r9
 80067aa:	44c4      	add	ip, r8
 80067ac:	4463      	add	r3, ip
 80067ae:	2200      	movs	r2, #0
 80067b0:	605a      	str	r2, [r3, #4]
 80067b2:	4bd9      	ldr	r3, [pc, #868]	; (8006b18 <main+0x1098>)
 80067b4:	4ad7      	ldr	r2, [pc, #860]	; (8006b14 <main+0x1094>)
 80067b6:	4694      	mov	ip, r2
 80067b8:	2220      	movs	r2, #32
 80067ba:	4690      	mov	r8, r2
 80067bc:	2208      	movs	r2, #8
 80067be:	4691      	mov	r9, r2
 80067c0:	2208      	movs	r2, #8
 80067c2:	4692      	mov	sl, r2
 80067c4:	2208      	movs	r2, #8
 80067c6:	4693      	mov	fp, r2
 80067c8:	44bb      	add	fp, r7
 80067ca:	44da      	add	sl, fp
 80067cc:	44d1      	add	r9, sl
 80067ce:	44c8      	add	r8, r9
 80067d0:	44c4      	add	ip, r8
 80067d2:	4463      	add	r3, ip
 80067d4:	2200      	movs	r2, #0
 80067d6:	609a      	str	r2, [r3, #8]
	struct euler_angles diff_1 = {0,0,0};
 80067d8:	4bd0      	ldr	r3, [pc, #832]	; (8006b1c <main+0x109c>)
 80067da:	4ace      	ldr	r2, [pc, #824]	; (8006b14 <main+0x1094>)
 80067dc:	4694      	mov	ip, r2
 80067de:	2220      	movs	r2, #32
 80067e0:	4690      	mov	r8, r2
 80067e2:	2208      	movs	r2, #8
 80067e4:	4691      	mov	r9, r2
 80067e6:	2208      	movs	r2, #8
 80067e8:	4692      	mov	sl, r2
 80067ea:	2208      	movs	r2, #8
 80067ec:	4693      	mov	fp, r2
 80067ee:	44bb      	add	fp, r7
 80067f0:	44da      	add	sl, fp
 80067f2:	44d1      	add	r9, sl
 80067f4:	44c8      	add	r8, r9
 80067f6:	44c4      	add	ip, r8
 80067f8:	4463      	add	r3, ip
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	4bc7      	ldr	r3, [pc, #796]	; (8006b1c <main+0x109c>)
 8006800:	4ac4      	ldr	r2, [pc, #784]	; (8006b14 <main+0x1094>)
 8006802:	4694      	mov	ip, r2
 8006804:	2220      	movs	r2, #32
 8006806:	4690      	mov	r8, r2
 8006808:	2208      	movs	r2, #8
 800680a:	4691      	mov	r9, r2
 800680c:	2208      	movs	r2, #8
 800680e:	4692      	mov	sl, r2
 8006810:	2208      	movs	r2, #8
 8006812:	4693      	mov	fp, r2
 8006814:	44bb      	add	fp, r7
 8006816:	44da      	add	sl, fp
 8006818:	44d1      	add	r9, sl
 800681a:	44c8      	add	r8, r9
 800681c:	44c4      	add	ip, r8
 800681e:	4463      	add	r3, ip
 8006820:	2200      	movs	r2, #0
 8006822:	605a      	str	r2, [r3, #4]
 8006824:	4bbd      	ldr	r3, [pc, #756]	; (8006b1c <main+0x109c>)
 8006826:	4abb      	ldr	r2, [pc, #748]	; (8006b14 <main+0x1094>)
 8006828:	4694      	mov	ip, r2
 800682a:	2220      	movs	r2, #32
 800682c:	4690      	mov	r8, r2
 800682e:	2208      	movs	r2, #8
 8006830:	4691      	mov	r9, r2
 8006832:	2208      	movs	r2, #8
 8006834:	4692      	mov	sl, r2
 8006836:	2208      	movs	r2, #8
 8006838:	4693      	mov	fp, r2
 800683a:	44bb      	add	fp, r7
 800683c:	44da      	add	sl, fp
 800683e:	44d1      	add	r9, sl
 8006840:	44c8      	add	r8, r9
 8006842:	44c4      	add	ip, r8
 8006844:	4463      	add	r3, ip
 8006846:	2200      	movs	r2, #0
 8006848:	609a      	str	r2, [r3, #8]
	struct euler_angles prev_0 = {0,0,0};
 800684a:	4bb5      	ldr	r3, [pc, #724]	; (8006b20 <main+0x10a0>)
 800684c:	4ab1      	ldr	r2, [pc, #708]	; (8006b14 <main+0x1094>)
 800684e:	4694      	mov	ip, r2
 8006850:	2220      	movs	r2, #32
 8006852:	4690      	mov	r8, r2
 8006854:	2208      	movs	r2, #8
 8006856:	4691      	mov	r9, r2
 8006858:	2208      	movs	r2, #8
 800685a:	4692      	mov	sl, r2
 800685c:	2208      	movs	r2, #8
 800685e:	4693      	mov	fp, r2
 8006860:	44bb      	add	fp, r7
 8006862:	44da      	add	sl, fp
 8006864:	44d1      	add	r9, sl
 8006866:	44c8      	add	r8, r9
 8006868:	44c4      	add	ip, r8
 800686a:	4463      	add	r3, ip
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	4bab      	ldr	r3, [pc, #684]	; (8006b20 <main+0x10a0>)
 8006872:	4aa8      	ldr	r2, [pc, #672]	; (8006b14 <main+0x1094>)
 8006874:	4694      	mov	ip, r2
 8006876:	2220      	movs	r2, #32
 8006878:	4690      	mov	r8, r2
 800687a:	2208      	movs	r2, #8
 800687c:	4691      	mov	r9, r2
 800687e:	2208      	movs	r2, #8
 8006880:	4692      	mov	sl, r2
 8006882:	2208      	movs	r2, #8
 8006884:	4693      	mov	fp, r2
 8006886:	44bb      	add	fp, r7
 8006888:	44da      	add	sl, fp
 800688a:	44d1      	add	r9, sl
 800688c:	44c8      	add	r8, r9
 800688e:	44c4      	add	ip, r8
 8006890:	4463      	add	r3, ip
 8006892:	2200      	movs	r2, #0
 8006894:	605a      	str	r2, [r3, #4]
 8006896:	4ba2      	ldr	r3, [pc, #648]	; (8006b20 <main+0x10a0>)
 8006898:	4a9e      	ldr	r2, [pc, #632]	; (8006b14 <main+0x1094>)
 800689a:	4694      	mov	ip, r2
 800689c:	2220      	movs	r2, #32
 800689e:	4690      	mov	r8, r2
 80068a0:	2208      	movs	r2, #8
 80068a2:	4691      	mov	r9, r2
 80068a4:	2208      	movs	r2, #8
 80068a6:	4692      	mov	sl, r2
 80068a8:	2208      	movs	r2, #8
 80068aa:	4693      	mov	fp, r2
 80068ac:	44bb      	add	fp, r7
 80068ae:	44da      	add	sl, fp
 80068b0:	44d1      	add	r9, sl
 80068b2:	44c8      	add	r8, r9
 80068b4:	44c4      	add	ip, r8
 80068b6:	4463      	add	r3, ip
 80068b8:	2200      	movs	r2, #0
 80068ba:	609a      	str	r2, [r3, #8]
	struct euler_angles prev_1 = {0,0,0};
 80068bc:	4b99      	ldr	r3, [pc, #612]	; (8006b24 <main+0x10a4>)
 80068be:	4a95      	ldr	r2, [pc, #596]	; (8006b14 <main+0x1094>)
 80068c0:	4694      	mov	ip, r2
 80068c2:	2220      	movs	r2, #32
 80068c4:	4690      	mov	r8, r2
 80068c6:	2208      	movs	r2, #8
 80068c8:	4691      	mov	r9, r2
 80068ca:	2208      	movs	r2, #8
 80068cc:	4692      	mov	sl, r2
 80068ce:	2208      	movs	r2, #8
 80068d0:	4693      	mov	fp, r2
 80068d2:	44bb      	add	fp, r7
 80068d4:	44da      	add	sl, fp
 80068d6:	44d1      	add	r9, sl
 80068d8:	44c8      	add	r8, r9
 80068da:	44c4      	add	ip, r8
 80068dc:	4463      	add	r3, ip
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	4b90      	ldr	r3, [pc, #576]	; (8006b24 <main+0x10a4>)
 80068e4:	4a8b      	ldr	r2, [pc, #556]	; (8006b14 <main+0x1094>)
 80068e6:	4694      	mov	ip, r2
 80068e8:	2220      	movs	r2, #32
 80068ea:	4690      	mov	r8, r2
 80068ec:	2208      	movs	r2, #8
 80068ee:	4691      	mov	r9, r2
 80068f0:	2208      	movs	r2, #8
 80068f2:	4692      	mov	sl, r2
 80068f4:	2208      	movs	r2, #8
 80068f6:	4693      	mov	fp, r2
 80068f8:	44bb      	add	fp, r7
 80068fa:	44da      	add	sl, fp
 80068fc:	44d1      	add	r9, sl
 80068fe:	44c8      	add	r8, r9
 8006900:	44c4      	add	ip, r8
 8006902:	4463      	add	r3, ip
 8006904:	2200      	movs	r2, #0
 8006906:	605a      	str	r2, [r3, #4]
 8006908:	4b86      	ldr	r3, [pc, #536]	; (8006b24 <main+0x10a4>)
 800690a:	4a82      	ldr	r2, [pc, #520]	; (8006b14 <main+0x1094>)
 800690c:	4694      	mov	ip, r2
 800690e:	2220      	movs	r2, #32
 8006910:	4690      	mov	r8, r2
 8006912:	2208      	movs	r2, #8
 8006914:	4691      	mov	r9, r2
 8006916:	2208      	movs	r2, #8
 8006918:	4692      	mov	sl, r2
 800691a:	2208      	movs	r2, #8
 800691c:	4693      	mov	fp, r2
 800691e:	44bb      	add	fp, r7
 8006920:	44da      	add	sl, fp
 8006922:	44d1      	add	r9, sl
 8006924:	44c8      	add	r8, r9
 8006926:	44c4      	add	ip, r8
 8006928:	4463      	add	r3, ip
 800692a:	2200      	movs	r2, #0
 800692c:	609a      	str	r2, [r3, #8]
	struct matrix rotation_matrix_earth_0 = {0,0,0,0,0,0,0,0,0};
 800692e:	4b7e      	ldr	r3, [pc, #504]	; (8006b28 <main+0x10a8>)
 8006930:	4a78      	ldr	r2, [pc, #480]	; (8006b14 <main+0x1094>)
 8006932:	4694      	mov	ip, r2
 8006934:	2220      	movs	r2, #32
 8006936:	4690      	mov	r8, r2
 8006938:	2208      	movs	r2, #8
 800693a:	4691      	mov	r9, r2
 800693c:	2208      	movs	r2, #8
 800693e:	4692      	mov	sl, r2
 8006940:	2208      	movs	r2, #8
 8006942:	4693      	mov	fp, r2
 8006944:	44bb      	add	fp, r7
 8006946:	44da      	add	sl, fp
 8006948:	44d1      	add	r9, sl
 800694a:	44c8      	add	r8, r9
 800694c:	44c4      	add	ip, r8
 800694e:	4463      	add	r3, ip
 8006950:	0018      	movs	r0, r3
 8006952:	2324      	movs	r3, #36	; 0x24
 8006954:	001a      	movs	r2, r3
 8006956:	2100      	movs	r1, #0
 8006958:	f005 fde9 	bl	800c52e <memset>
	struct matrix rotation_matrix_earth_1 = {0,0,0,0,0,0,0,0,0};
 800695c:	4b73      	ldr	r3, [pc, #460]	; (8006b2c <main+0x10ac>)
 800695e:	4a6d      	ldr	r2, [pc, #436]	; (8006b14 <main+0x1094>)
 8006960:	4694      	mov	ip, r2
 8006962:	2220      	movs	r2, #32
 8006964:	4690      	mov	r8, r2
 8006966:	2208      	movs	r2, #8
 8006968:	4691      	mov	r9, r2
 800696a:	2208      	movs	r2, #8
 800696c:	4692      	mov	sl, r2
 800696e:	2208      	movs	r2, #8
 8006970:	4693      	mov	fp, r2
 8006972:	44bb      	add	fp, r7
 8006974:	44da      	add	sl, fp
 8006976:	44d1      	add	r9, sl
 8006978:	44c8      	add	r8, r9
 800697a:	44c4      	add	ip, r8
 800697c:	4463      	add	r3, ip
 800697e:	0018      	movs	r0, r3
 8006980:	2324      	movs	r3, #36	; 0x24
 8006982:	001a      	movs	r2, r3
 8006984:	2100      	movs	r1, #0
 8006986:	f005 fdd2 	bl	800c52e <memset>

	float duration_diff = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	22bf      	movs	r2, #191	; 0xbf
 800698e:	0112      	lsls	r2, r2, #4
 8006990:	2120      	movs	r1, #32
 8006992:	468c      	mov	ip, r1
 8006994:	2108      	movs	r1, #8
 8006996:	4688      	mov	r8, r1
 8006998:	2108      	movs	r1, #8
 800699a:	4689      	mov	r9, r1
 800699c:	2108      	movs	r1, #8
 800699e:	468a      	mov	sl, r1
 80069a0:	44ba      	add	sl, r7
 80069a2:	44d1      	add	r9, sl
 80069a4:	44c8      	add	r8, r9
 80069a6:	44c4      	add	ip, r8
 80069a8:	4462      	add	r2, ip
 80069aa:	6013      	str	r3, [r2, #0]
	float duration = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	4a60      	ldr	r2, [pc, #384]	; (8006b30 <main+0x10b0>)
 80069b0:	2120      	movs	r1, #32
 80069b2:	468c      	mov	ip, r1
 80069b4:	2108      	movs	r1, #8
 80069b6:	4688      	mov	r8, r1
 80069b8:	2108      	movs	r1, #8
 80069ba:	4689      	mov	r9, r1
 80069bc:	2108      	movs	r1, #8
 80069be:	468a      	mov	sl, r1
 80069c0:	44ba      	add	sl, r7
 80069c2:	44d1      	add	r9, sl
 80069c4:	44c8      	add	r8, r9
 80069c6:	44c4      	add	ip, r8
 80069c8:	4462      	add	r2, ip
 80069ca:	6013      	str	r3, [r2, #0]
	float clock = 16000000/16.0;
 80069cc:	4b59      	ldr	r3, [pc, #356]	; (8006b34 <main+0x10b4>)
 80069ce:	4a5a      	ldr	r2, [pc, #360]	; (8006b38 <main+0x10b8>)
 80069d0:	2120      	movs	r1, #32
 80069d2:	468c      	mov	ip, r1
 80069d4:	2108      	movs	r1, #8
 80069d6:	4688      	mov	r8, r1
 80069d8:	2108      	movs	r1, #8
 80069da:	4689      	mov	r9, r1
 80069dc:	2108      	movs	r1, #8
 80069de:	468a      	mov	sl, r1
 80069e0:	44ba      	add	sl, r7
 80069e2:	44d1      	add	r9, sl
 80069e4:	44c8      	add	r8, r9
 80069e6:	44c4      	add	ip, r8
 80069e8:	4462      	add	r2, ip
 80069ea:	6013      	str	r3, [r2, #0]

	int8_t is_moving[3] = {0,0,0};
 80069ec:	4b53      	ldr	r3, [pc, #332]	; (8006b3c <main+0x10bc>)
 80069ee:	4a49      	ldr	r2, [pc, #292]	; (8006b14 <main+0x1094>)
 80069f0:	4694      	mov	ip, r2
 80069f2:	2220      	movs	r2, #32
 80069f4:	4690      	mov	r8, r2
 80069f6:	2208      	movs	r2, #8
 80069f8:	4691      	mov	r9, r2
 80069fa:	2208      	movs	r2, #8
 80069fc:	4692      	mov	sl, r2
 80069fe:	2208      	movs	r2, #8
 8006a00:	4693      	mov	fp, r2
 8006a02:	44bb      	add	fp, r7
 8006a04:	44da      	add	sl, fp
 8006a06:	44d1      	add	r9, sl
 8006a08:	44c8      	add	r8, r9
 8006a0a:	44c4      	add	ip, r8
 8006a0c:	4463      	add	r3, ip
 8006a0e:	4a4c      	ldr	r2, [pc, #304]	; (8006b40 <main+0x10c0>)
 8006a10:	8811      	ldrh	r1, [r2, #0]
 8006a12:	8019      	strh	r1, [r3, #0]
 8006a14:	7892      	ldrb	r2, [r2, #2]
 8006a16:	709a      	strb	r2, [r3, #2]
	int8_t was_moving = 0;
 8006a18:	4b4a      	ldr	r3, [pc, #296]	; (8006b44 <main+0x10c4>)
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	4694      	mov	ip, r2
 8006a1e:	2208      	movs	r2, #8
 8006a20:	4690      	mov	r8, r2
 8006a22:	2208      	movs	r2, #8
 8006a24:	4691      	mov	r9, r2
 8006a26:	2208      	movs	r2, #8
 8006a28:	4692      	mov	sl, r2
 8006a2a:	44ba      	add	sl, r7
 8006a2c:	44d1      	add	r9, sl
 8006a2e:	44c8      	add	r8, r9
 8006a30:	44c4      	add	ip, r8
 8006a32:	4463      	add	r3, ip
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
	int8_t moving_expected = 0;
 8006a38:	4b43      	ldr	r3, [pc, #268]	; (8006b48 <main+0x10c8>)
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	4694      	mov	ip, r2
 8006a3e:	2208      	movs	r2, #8
 8006a40:	4690      	mov	r8, r2
 8006a42:	2208      	movs	r2, #8
 8006a44:	4691      	mov	r9, r2
 8006a46:	2208      	movs	r2, #8
 8006a48:	4692      	mov	sl, r2
 8006a4a:	44ba      	add	sl, r7
 8006a4c:	44d1      	add	r9, sl
 8006a4e:	44c8      	add	r8, r9
 8006a50:	44c4      	add	ip, r8
 8006a52:	4463      	add	r3, ip
 8006a54:	2200      	movs	r2, #0
 8006a56:	701a      	strb	r2, [r3, #0]
	uint8_t uart_prescaler = 0;
 8006a58:	4b3c      	ldr	r3, [pc, #240]	; (8006b4c <main+0x10cc>)
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	4694      	mov	ip, r2
 8006a5e:	2208      	movs	r2, #8
 8006a60:	4690      	mov	r8, r2
 8006a62:	2208      	movs	r2, #8
 8006a64:	4691      	mov	r9, r2
 8006a66:	2208      	movs	r2, #8
 8006a68:	4692      	mov	sl, r2
 8006a6a:	44ba      	add	sl, r7
 8006a6c:	44d1      	add	r9, sl
 8006a6e:	44c8      	add	r8, r9
 8006a70:	44c4      	add	ip, r8
 8006a72:	4463      	add	r3, ip
 8006a74:	2200      	movs	r2, #0
 8006a76:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);
 8006a78:	4b35      	ldr	r3, [pc, #212]	; (8006b50 <main+0x10d0>)
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f004 fed8 	bl	800b830 <HAL_TIM_Base_Start>
	ICM_AccCalibration(&hspi1,&huart2,accel_bias_0, IMU_MOVABLE);
 8006a80:	4c34      	ldr	r4, [pc, #208]	; (8006b54 <main+0x10d4>)
 8006a82:	002e      	movs	r6, r5
 8006a84:	2308      	movs	r3, #8
 8006a86:	2208      	movs	r2, #8
 8006a88:	4694      	mov	ip, r2
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	4690      	mov	r8, r2
 8006a8e:	44b8      	add	r8, r7
 8006a90:	44c4      	add	ip, r8
 8006a92:	4463      	add	r3, ip
 8006a94:	199b      	adds	r3, r3, r6
 8006a96:	191a      	adds	r2, r3, r4
 8006a98:	492f      	ldr	r1, [pc, #188]	; (8006b58 <main+0x10d8>)
 8006a9a:	4830      	ldr	r0, [pc, #192]	; (8006b5c <main+0x10dc>)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f7fc ff7f 	bl	80039a0 <ICM_AccCalibration>
	ICM_AccCalibration(&hspi1,&huart2,accel_bias_1, IMU_FIXED);
 8006aa2:	25ab      	movs	r5, #171	; 0xab
 8006aa4:	012d      	lsls	r5, r5, #4
 8006aa6:	2308      	movs	r3, #8
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	4694      	mov	ip, r2
 8006aac:	2208      	movs	r2, #8
 8006aae:	4690      	mov	r8, r2
 8006ab0:	44b8      	add	r8, r7
 8006ab2:	44c4      	add	ip, r8
 8006ab4:	4463      	add	r3, ip
 8006ab6:	199b      	adds	r3, r3, r6
 8006ab8:	195a      	adds	r2, r3, r5
 8006aba:	4927      	ldr	r1, [pc, #156]	; (8006b58 <main+0x10d8>)
 8006abc:	4827      	ldr	r0, [pc, #156]	; (8006b5c <main+0x10dc>)
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f7fc ff6e 	bl	80039a0 <ICM_AccCalibration>
	CalculateRotationMatrix(accel_bias_0, &rotation_matrix_earth_0);
 8006ac4:	232c      	movs	r3, #44	; 0x2c
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	2108      	movs	r1, #8
 8006aca:	468c      	mov	ip, r1
 8006acc:	2108      	movs	r1, #8
 8006ace:	4688      	mov	r8, r1
 8006ad0:	44b8      	add	r8, r7
 8006ad2:	44c4      	add	ip, r8
 8006ad4:	4462      	add	r2, ip
 8006ad6:	1992      	adds	r2, r2, r6
 8006ad8:	18d2      	adds	r2, r2, r3
 8006ada:	2308      	movs	r3, #8
 8006adc:	2108      	movs	r1, #8
 8006ade:	468c      	mov	ip, r1
 8006ae0:	2108      	movs	r1, #8
 8006ae2:	4688      	mov	r8, r1
 8006ae4:	44b8      	add	r8, r7
 8006ae6:	44c4      	add	ip, r8
 8006ae8:	4463      	add	r3, ip
 8006aea:	199b      	adds	r3, r3, r6
 8006aec:	191b      	adds	r3, r3, r4
 8006aee:	0011      	movs	r1, r2
 8006af0:	0018      	movs	r0, r3
 8006af2:	f7fe fa9b 	bl	800502c <CalculateRotationMatrix>
	CalculateRotationMatrix(accel_bias_1, &rotation_matrix_earth_1);
 8006af6:	2308      	movs	r3, #8
 8006af8:	0034      	movs	r4, r6
 8006afa:	2208      	movs	r2, #8
 8006afc:	2108      	movs	r1, #8
 8006afe:	468c      	mov	ip, r1
 8006b00:	2108      	movs	r1, #8
 8006b02:	4688      	mov	r8, r1
 8006b04:	44b8      	add	r8, r7
 8006b06:	44c4      	add	ip, r8
 8006b08:	4462      	add	r2, ip
 8006b0a:	1912      	adds	r2, r2, r4
 8006b0c:	18d2      	adds	r2, r2, r3
 8006b0e:	e027      	b.n	8006b60 <main+0x10e0>
 8006b10:	fffff478 	.word	0xfffff478
 8006b14:	00000c08 	.word	0x00000c08
 8006b18:	fffff46c 	.word	0xfffff46c
 8006b1c:	fffff460 	.word	0xfffff460
 8006b20:	fffff454 	.word	0xfffff454
 8006b24:	fffff448 	.word	0xfffff448
 8006b28:	fffff424 	.word	0xfffff424
 8006b2c:	fffff400 	.word	0xfffff400
 8006b30:	00000c04 	.word	0x00000c04
 8006b34:	49742400 	.word	0x49742400
 8006b38:	00000bec 	.word	0x00000bec
 8006b3c:	fffff3fc 	.word	0xfffff3fc
 8006b40:	08011e80 	.word	0x08011e80
 8006b44:	00000c03 	.word	0x00000c03
 8006b48:	00000beb 	.word	0x00000beb
 8006b4c:	00000c02 	.word	0x00000c02
 8006b50:	2000052c 	.word	0x2000052c
 8006b54:	00000ab8 	.word	0x00000ab8
 8006b58:	2000049c 	.word	0x2000049c
 8006b5c:	20000438 	.word	0x20000438
 8006b60:	2308      	movs	r3, #8
 8006b62:	2108      	movs	r1, #8
 8006b64:	468c      	mov	ip, r1
 8006b66:	2108      	movs	r1, #8
 8006b68:	4688      	mov	r8, r1
 8006b6a:	44b8      	add	r8, r7
 8006b6c:	44c4      	add	ip, r8
 8006b6e:	4463      	add	r3, ip
 8006b70:	191b      	adds	r3, r3, r4
 8006b72:	195b      	adds	r3, r3, r5
 8006b74:	0011      	movs	r1, r2
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7fe fa58 	bl	800502c <CalculateRotationMatrix>
	ICM_GyroCalibration(&hspi1,&huart2, gyro_bias_0, IMU_MOVABLE);
 8006b7c:	4bfe      	ldr	r3, [pc, #1016]	; (8006f78 <main+0x14f8>)
 8006b7e:	0025      	movs	r5, r4
 8006b80:	2208      	movs	r2, #8
 8006b82:	2108      	movs	r1, #8
 8006b84:	468c      	mov	ip, r1
 8006b86:	2108      	movs	r1, #8
 8006b88:	4688      	mov	r8, r1
 8006b8a:	44b8      	add	r8, r7
 8006b8c:	44c4      	add	ip, r8
 8006b8e:	4462      	add	r2, ip
 8006b90:	1952      	adds	r2, r2, r5
 8006b92:	18d2      	adds	r2, r2, r3
 8006b94:	49f9      	ldr	r1, [pc, #996]	; (8006f7c <main+0x14fc>)
 8006b96:	48fa      	ldr	r0, [pc, #1000]	; (8006f80 <main+0x1500>)
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f7fc fda5 	bl	80036e8 <ICM_GyroCalibration>
	ICM_GyroCalibration(&hspi1,&huart2, gyro_bias_1, IMU_FIXED);
 8006b9e:	23ac      	movs	r3, #172	; 0xac
 8006ba0:	011b      	lsls	r3, r3, #4
 8006ba2:	2208      	movs	r2, #8
 8006ba4:	2108      	movs	r1, #8
 8006ba6:	468c      	mov	ip, r1
 8006ba8:	2108      	movs	r1, #8
 8006baa:	4688      	mov	r8, r1
 8006bac:	44b8      	add	r8, r7
 8006bae:	44c4      	add	ip, r8
 8006bb0:	4462      	add	r2, ip
 8006bb2:	1952      	adds	r2, r2, r5
 8006bb4:	18d2      	adds	r2, r2, r3
 8006bb6:	49f1      	ldr	r1, [pc, #964]	; (8006f7c <main+0x14fc>)
 8006bb8:	48f1      	ldr	r0, [pc, #964]	; (8006f80 <main+0x1500>)
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f7fc fd94 	bl	80036e8 <ICM_GyroCalibration>

	sprintf(uart_buffer, "UART_PREAMBLE\r\n");
 8006bc0:	4af0      	ldr	r2, [pc, #960]	; (8006f84 <main+0x1504>)
 8006bc2:	24b2      	movs	r4, #178	; 0xb2
 8006bc4:	0124      	lsls	r4, r4, #4
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	2108      	movs	r1, #8
 8006bca:	468c      	mov	ip, r1
 8006bcc:	2108      	movs	r1, #8
 8006bce:	4688      	mov	r8, r1
 8006bd0:	44b8      	add	r8, r7
 8006bd2:	44c4      	add	ip, r8
 8006bd4:	4463      	add	r3, ip
 8006bd6:	195b      	adds	r3, r3, r5
 8006bd8:	191b      	adds	r3, r3, r4
 8006bda:	0011      	movs	r1, r2
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f006 f929 	bl	800ce34 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8006be2:	2308      	movs	r3, #8
 8006be4:	2208      	movs	r2, #8
 8006be6:	4694      	mov	ip, r2
 8006be8:	2208      	movs	r2, #8
 8006bea:	4690      	mov	r8, r2
 8006bec:	44b8      	add	r8, r7
 8006bee:	44c4      	add	ip, r8
 8006bf0:	4463      	add	r3, ip
 8006bf2:	195b      	adds	r3, r3, r5
 8006bf4:	191b      	adds	r3, r3, r4
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	f7f9 fa82 	bl	8000100 <strlen>
 8006bfc:	0003      	movs	r3, r0
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	23fa      	movs	r3, #250	; 0xfa
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	2108      	movs	r1, #8
 8006c06:	2008      	movs	r0, #8
 8006c08:	4684      	mov	ip, r0
 8006c0a:	2008      	movs	r0, #8
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	44b8      	add	r8, r7
 8006c10:	44c4      	add	ip, r8
 8006c12:	4461      	add	r1, ip
 8006c14:	1949      	adds	r1, r1, r5
 8006c16:	1909      	adds	r1, r1, r4
 8006c18:	48d8      	ldr	r0, [pc, #864]	; (8006f7c <main+0x14fc>)
 8006c1a:	f004 ff23 	bl	800ba64 <HAL_UART_Transmit>


  while (1)
  {

	__HAL_TIM_SET_COUNTER(&htim16,0);
 8006c1e:	4bda      	ldr	r3, [pc, #872]	; (8006f88 <main+0x1508>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2200      	movs	r2, #0
 8006c24:	625a      	str	r2, [r3, #36]	; 0x24
			moving_expected = 1;
		}
	}
	*/

	uart_prescaler = (uart_prescaler + 1) % 50;
 8006c26:	4cd9      	ldr	r4, [pc, #868]	; (8006f8c <main+0x150c>)
 8006c28:	2520      	movs	r5, #32
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	2208      	movs	r2, #8
 8006c2e:	4694      	mov	ip, r2
 8006c30:	2208      	movs	r2, #8
 8006c32:	4690      	mov	r8, r2
 8006c34:	44b8      	add	r8, r7
 8006c36:	44c4      	add	ip, r8
 8006c38:	4463      	add	r3, ip
 8006c3a:	195b      	adds	r3, r3, r5
 8006c3c:	191b      	adds	r3, r3, r4
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	2132      	movs	r1, #50	; 0x32
 8006c44:	0018      	movs	r0, r3
 8006c46:	f7f9 fbe7 	bl	8000418 <__aeabi_idivmod>
 8006c4a:	000b      	movs	r3, r1
 8006c4c:	001a      	movs	r2, r3
 8006c4e:	2308      	movs	r3, #8
 8006c50:	2108      	movs	r1, #8
 8006c52:	468c      	mov	ip, r1
 8006c54:	2108      	movs	r1, #8
 8006c56:	4688      	mov	r8, r1
 8006c58:	44b8      	add	r8, r7
 8006c5a:	44c4      	add	ip, r8
 8006c5c:	4463      	add	r3, ip
 8006c5e:	195b      	adds	r3, r3, r5
 8006c60:	191b      	adds	r3, r3, r4
 8006c62:	701a      	strb	r2, [r3, #0]

	// Read Gyroscope
	ICM_ReadGyroData(&hspi1, gyro_data_0, gyro_bias_0, IMU_MOVABLE);
 8006c64:	4bc4      	ldr	r3, [pc, #784]	; (8006f78 <main+0x14f8>)
 8006c66:	2208      	movs	r2, #8
 8006c68:	2108      	movs	r1, #8
 8006c6a:	468c      	mov	ip, r1
 8006c6c:	2108      	movs	r1, #8
 8006c6e:	4688      	mov	r8, r1
 8006c70:	44b8      	add	r8, r7
 8006c72:	44c4      	add	ip, r8
 8006c74:	4462      	add	r2, ip
 8006c76:	1952      	adds	r2, r2, r5
 8006c78:	18d2      	adds	r2, r2, r3
 8006c7a:	4cc5      	ldr	r4, [pc, #788]	; (8006f90 <main+0x1510>)
 8006c7c:	617c      	str	r4, [r7, #20]
 8006c7e:	2308      	movs	r3, #8
 8006c80:	2108      	movs	r1, #8
 8006c82:	468c      	mov	ip, r1
 8006c84:	2108      	movs	r1, #8
 8006c86:	4688      	mov	r8, r1
 8006c88:	44b8      	add	r8, r7
 8006c8a:	44c4      	add	ip, r8
 8006c8c:	4463      	add	r3, ip
 8006c8e:	195b      	adds	r3, r3, r5
 8006c90:	1919      	adds	r1, r3, r4
 8006c92:	48bb      	ldr	r0, [pc, #748]	; (8006f80 <main+0x1500>)
 8006c94:	2300      	movs	r3, #0
 8006c96:	f7fc ff59 	bl	8003b4c <ICM_ReadGyroData>
	ICM_ReadGyroData(&hspi1, gyro_data_1, gyro_bias_1, IMU_FIXED);
 8006c9a:	23ac      	movs	r3, #172	; 0xac
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	0029      	movs	r1, r5
 8006ca0:	2208      	movs	r2, #8
 8006ca2:	2008      	movs	r0, #8
 8006ca4:	4684      	mov	ip, r0
 8006ca6:	2008      	movs	r0, #8
 8006ca8:	4680      	mov	r8, r0
 8006caa:	44b8      	add	r8, r7
 8006cac:	44c4      	add	ip, r8
 8006cae:	4462      	add	r2, ip
 8006cb0:	1952      	adds	r2, r2, r5
 8006cb2:	18d2      	adds	r2, r2, r3
 8006cb4:	25af      	movs	r5, #175	; 0xaf
 8006cb6:	012d      	lsls	r5, r5, #4
 8006cb8:	000c      	movs	r4, r1
 8006cba:	2308      	movs	r3, #8
 8006cbc:	2008      	movs	r0, #8
 8006cbe:	4684      	mov	ip, r0
 8006cc0:	2008      	movs	r0, #8
 8006cc2:	4680      	mov	r8, r0
 8006cc4:	44b8      	add	r8, r7
 8006cc6:	44c4      	add	ip, r8
 8006cc8:	4463      	add	r3, ip
 8006cca:	185b      	adds	r3, r3, r1
 8006ccc:	1959      	adds	r1, r3, r5
 8006cce:	48ac      	ldr	r0, [pc, #688]	; (8006f80 <main+0x1500>)
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f7fc ff3b 	bl	8003b4c <ICM_ReadGyroData>

	// Read Acceleration
	ICM_ReadAccData(&hspi1, accel_data_0, IMU_MOVABLE);
 8006cd6:	4eaf      	ldr	r6, [pc, #700]	; (8006f94 <main+0x1514>)
 8006cd8:	0020      	movs	r0, r4
 8006cda:	0004      	movs	r4, r0
 8006cdc:	2308      	movs	r3, #8
 8006cde:	2208      	movs	r2, #8
 8006ce0:	4694      	mov	ip, r2
 8006ce2:	2208      	movs	r2, #8
 8006ce4:	4690      	mov	r8, r2
 8006ce6:	44b8      	add	r8, r7
 8006ce8:	44c4      	add	ip, r8
 8006cea:	4463      	add	r3, ip
 8006cec:	181b      	adds	r3, r3, r0
 8006cee:	1999      	adds	r1, r3, r6
 8006cf0:	4ba3      	ldr	r3, [pc, #652]	; (8006f80 <main+0x1500>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f7fc ffe7 	bl	8003cc8 <ICM_ReadAccData>
	ICM_ReadAccData(&hspi1, accel_data_1, IMU_FIXED);
 8006cfa:	4ba7      	ldr	r3, [pc, #668]	; (8006f98 <main+0x1518>)
 8006cfc:	0020      	movs	r0, r4
 8006cfe:	0004      	movs	r4, r0
 8006d00:	2208      	movs	r2, #8
 8006d02:	2108      	movs	r1, #8
 8006d04:	468c      	mov	ip, r1
 8006d06:	2108      	movs	r1, #8
 8006d08:	4688      	mov	r8, r1
 8006d0a:	44b8      	add	r8, r7
 8006d0c:	44c4      	add	ip, r8
 8006d0e:	4462      	add	r2, ip
 8006d10:	1812      	adds	r2, r2, r0
 8006d12:	18d1      	adds	r1, r2, r3
 8006d14:	4b9a      	ldr	r3, [pc, #616]	; (8006f80 <main+0x1500>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f7fc ffd5 	bl	8003cc8 <ICM_ReadAccData>

	// Low-pass Filter Gyroscope
	GyroLowPassFilter(gyro_data_0, prev_low_pass_gyro_0, low_pass_gyro_0, low_alpha);
 8006d1e:	4a9f      	ldr	r2, [pc, #636]	; (8006f9c <main+0x151c>)
 8006d20:	0020      	movs	r0, r4
 8006d22:	2308      	movs	r3, #8
 8006d24:	2108      	movs	r1, #8
 8006d26:	468c      	mov	ip, r1
 8006d28:	2108      	movs	r1, #8
 8006d2a:	4688      	mov	r8, r1
 8006d2c:	44b8      	add	r8, r7
 8006d2e:	44c4      	add	ip, r8
 8006d30:	4463      	add	r3, ip
 8006d32:	181b      	adds	r3, r3, r0
 8006d34:	1899      	adds	r1, r3, r2
 8006d36:	680b      	ldr	r3, [r1, #0]
 8006d38:	4699      	mov	r9, r3
 8006d3a:	21a2      	movs	r1, #162	; 0xa2
 8006d3c:	0049      	lsls	r1, r1, #1
 8006d3e:	2208      	movs	r2, #8
 8006d40:	2308      	movs	r3, #8
 8006d42:	469c      	mov	ip, r3
 8006d44:	2308      	movs	r3, #8
 8006d46:	4698      	mov	r8, r3
 8006d48:	44b8      	add	r8, r7
 8006d4a:	44c4      	add	ip, r8
 8006d4c:	4462      	add	r2, ip
 8006d4e:	1812      	adds	r2, r2, r0
 8006d50:	1852      	adds	r2, r2, r1
 8006d52:	2196      	movs	r1, #150	; 0x96
 8006d54:	0049      	lsls	r1, r1, #1
 8006d56:	2420      	movs	r4, #32
 8006d58:	46a4      	mov	ip, r4
 8006d5a:	2408      	movs	r4, #8
 8006d5c:	46a0      	mov	r8, r4
 8006d5e:	2308      	movs	r3, #8
 8006d60:	469a      	mov	sl, r3
 8006d62:	2308      	movs	r3, #8
 8006d64:	469b      	mov	fp, r3
 8006d66:	44bb      	add	fp, r7
 8006d68:	44da      	add	sl, fp
 8006d6a:	44d0      	add	r8, sl
 8006d6c:	44c4      	add	ip, r8
 8006d6e:	4461      	add	r1, ip
 8006d70:	697c      	ldr	r4, [r7, #20]
 8006d72:	2308      	movs	r3, #8
 8006d74:	469c      	mov	ip, r3
 8006d76:	2308      	movs	r3, #8
 8006d78:	4698      	mov	r8, r3
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	469a      	mov	sl, r3
 8006d7e:	44ba      	add	sl, r7
 8006d80:	44d0      	add	r8, sl
 8006d82:	44c4      	add	ip, r8
 8006d84:	4460      	add	r0, ip
 8006d86:	1900      	adds	r0, r0, r4
 8006d88:	464b      	mov	r3, r9
 8006d8a:	f7fe f8e5 	bl	8004f58 <GyroLowPassFilter>
	GyroLowPassFilter(gyro_data_1, prev_low_pass_gyro_1, low_pass_gyro_1, low_alpha);
 8006d8e:	4a83      	ldr	r2, [pc, #524]	; (8006f9c <main+0x151c>)
 8006d90:	2320      	movs	r3, #32
 8006d92:	469c      	mov	ip, r3
 8006d94:	2308      	movs	r3, #8
 8006d96:	4698      	mov	r8, r3
 8006d98:	2308      	movs	r3, #8
 8006d9a:	4699      	mov	r9, r3
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	469a      	mov	sl, r3
 8006da0:	44ba      	add	sl, r7
 8006da2:	44d1      	add	r9, sl
 8006da4:	44c8      	add	r8, r9
 8006da6:	44c4      	add	ip, r8
 8006da8:	4462      	add	r2, ip
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	469a      	mov	sl, r3
 8006dae:	229c      	movs	r2, #156	; 0x9c
 8006db0:	0052      	lsls	r2, r2, #1
 8006db2:	2120      	movs	r1, #32
 8006db4:	468c      	mov	ip, r1
 8006db6:	2108      	movs	r1, #8
 8006db8:	4688      	mov	r8, r1
 8006dba:	2308      	movs	r3, #8
 8006dbc:	4699      	mov	r9, r3
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	469b      	mov	fp, r3
 8006dc2:	44bb      	add	fp, r7
 8006dc4:	44d9      	add	r9, fp
 8006dc6:	44c8      	add	r8, r9
 8006dc8:	44c4      	add	ip, r8
 8006dca:	4462      	add	r2, ip
 8006dcc:	2190      	movs	r1, #144	; 0x90
 8006dce:	0049      	lsls	r1, r1, #1
 8006dd0:	2420      	movs	r4, #32
 8006dd2:	46a4      	mov	ip, r4
 8006dd4:	2008      	movs	r0, #8
 8006dd6:	4680      	mov	r8, r0
 8006dd8:	2308      	movs	r3, #8
 8006dda:	4699      	mov	r9, r3
 8006ddc:	2308      	movs	r3, #8
 8006dde:	469b      	mov	fp, r3
 8006de0:	44bb      	add	fp, r7
 8006de2:	44d9      	add	r9, fp
 8006de4:	44c8      	add	r8, r9
 8006de6:	44c4      	add	ip, r8
 8006de8:	4461      	add	r1, ip
 8006dea:	2020      	movs	r0, #32
 8006dec:	2408      	movs	r4, #8
 8006dee:	2308      	movs	r3, #8
 8006df0:	469c      	mov	ip, r3
 8006df2:	2308      	movs	r3, #8
 8006df4:	4698      	mov	r8, r3
 8006df6:	44b8      	add	r8, r7
 8006df8:	44c4      	add	ip, r8
 8006dfa:	4464      	add	r4, ip
 8006dfc:	1824      	adds	r4, r4, r0
 8006dfe:	1960      	adds	r0, r4, r5
 8006e00:	4653      	mov	r3, sl
 8006e02:	f7fe f8a9 	bl	8004f58 <GyroLowPassFilter>

	// Low-pass Filter Acceleration
	GyroLowPassFilter(accel_data_0, prev_low_pass_accel_0, low_pass_accel_0, low_alpha_acc);
 8006e06:	4c66      	ldr	r4, [pc, #408]	; (8006fa0 <main+0x1520>)
 8006e08:	2020      	movs	r0, #32
 8006e0a:	2308      	movs	r3, #8
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	4694      	mov	ip, r2
 8006e10:	2208      	movs	r2, #8
 8006e12:	4690      	mov	r8, r2
 8006e14:	44b8      	add	r8, r7
 8006e16:	44c4      	add	ip, r8
 8006e18:	4463      	add	r3, ip
 8006e1a:	181b      	adds	r3, r3, r0
 8006e1c:	191a      	adds	r2, r3, r4
 8006e1e:	6813      	ldr	r3, [r2, #0]
 8006e20:	469a      	mov	sl, r3
 8006e22:	258a      	movs	r5, #138	; 0x8a
 8006e24:	006d      	lsls	r5, r5, #1
 8006e26:	617d      	str	r5, [r7, #20]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	2308      	movs	r3, #8
 8006e2c:	469c      	mov	ip, r3
 8006e2e:	2308      	movs	r3, #8
 8006e30:	4698      	mov	r8, r3
 8006e32:	44b8      	add	r8, r7
 8006e34:	44c4      	add	ip, r8
 8006e36:	4462      	add	r2, ip
 8006e38:	1812      	adds	r2, r2, r0
 8006e3a:	1952      	adds	r2, r2, r5
 8006e3c:	21fc      	movs	r1, #252	; 0xfc
 8006e3e:	2520      	movs	r5, #32
 8006e40:	46ac      	mov	ip, r5
 8006e42:	2508      	movs	r5, #8
 8006e44:	46a8      	mov	r8, r5
 8006e46:	2308      	movs	r3, #8
 8006e48:	4699      	mov	r9, r3
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	469b      	mov	fp, r3
 8006e4e:	44bb      	add	fp, r7
 8006e50:	44d9      	add	r9, fp
 8006e52:	44c8      	add	r8, r9
 8006e54:	44c4      	add	ip, r8
 8006e56:	4461      	add	r1, ip
 8006e58:	2508      	movs	r5, #8
 8006e5a:	2308      	movs	r3, #8
 8006e5c:	469c      	mov	ip, r3
 8006e5e:	2308      	movs	r3, #8
 8006e60:	4698      	mov	r8, r3
 8006e62:	44b8      	add	r8, r7
 8006e64:	44c4      	add	ip, r8
 8006e66:	4465      	add	r5, ip
 8006e68:	182d      	adds	r5, r5, r0
 8006e6a:	19a8      	adds	r0, r5, r6
 8006e6c:	4653      	mov	r3, sl
 8006e6e:	f7fe f873 	bl	8004f58 <GyroLowPassFilter>
	GyroLowPassFilter(accel_data_1, prev_low_pass_accel_1, low_pass_accel_1, low_alpha_acc);
 8006e72:	2620      	movs	r6, #32
 8006e74:	2308      	movs	r3, #8
 8006e76:	2208      	movs	r2, #8
 8006e78:	4694      	mov	ip, r2
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	4690      	mov	r8, r2
 8006e7e:	44b8      	add	r8, r7
 8006e80:	44c4      	add	ip, r8
 8006e82:	4463      	add	r3, ip
 8006e84:	199b      	adds	r3, r3, r6
 8006e86:	191a      	adds	r2, r3, r4
 8006e88:	6813      	ldr	r3, [r2, #0]
 8006e8a:	2484      	movs	r4, #132	; 0x84
 8006e8c:	0064      	lsls	r4, r4, #1
 8006e8e:	2208      	movs	r2, #8
 8006e90:	2108      	movs	r1, #8
 8006e92:	468c      	mov	ip, r1
 8006e94:	2108      	movs	r1, #8
 8006e96:	4688      	mov	r8, r1
 8006e98:	44b8      	add	r8, r7
 8006e9a:	44c4      	add	ip, r8
 8006e9c:	4462      	add	r2, ip
 8006e9e:	1992      	adds	r2, r2, r6
 8006ea0:	1912      	adds	r2, r2, r4
 8006ea2:	21f0      	movs	r1, #240	; 0xf0
 8006ea4:	2020      	movs	r0, #32
 8006ea6:	4684      	mov	ip, r0
 8006ea8:	2008      	movs	r0, #8
 8006eaa:	4680      	mov	r8, r0
 8006eac:	2008      	movs	r0, #8
 8006eae:	4681      	mov	r9, r0
 8006eb0:	2008      	movs	r0, #8
 8006eb2:	4682      	mov	sl, r0
 8006eb4:	44ba      	add	sl, r7
 8006eb6:	44d1      	add	r9, sl
 8006eb8:	44c8      	add	r8, r9
 8006eba:	44c4      	add	ip, r8
 8006ebc:	4461      	add	r1, ip
 8006ebe:	4836      	ldr	r0, [pc, #216]	; (8006f98 <main+0x1518>)
 8006ec0:	2520      	movs	r5, #32
 8006ec2:	46ac      	mov	ip, r5
 8006ec4:	2508      	movs	r5, #8
 8006ec6:	46a8      	mov	r8, r5
 8006ec8:	2508      	movs	r5, #8
 8006eca:	46a9      	mov	r9, r5
 8006ecc:	2508      	movs	r5, #8
 8006ece:	46aa      	mov	sl, r5
 8006ed0:	44ba      	add	sl, r7
 8006ed2:	44d1      	add	r9, sl
 8006ed4:	44c8      	add	r8, r9
 8006ed6:	44c4      	add	ip, r8
 8006ed8:	4460      	add	r0, ip
 8006eda:	f7fe f83d 	bl	8004f58 <GyroLowPassFilter>

	// Rotate Accelerometer into earthframe
	CalculateAccelerometerInEarthFrame(&rotation_matrix_earth_0, low_pass_accel_0, accel_data_earthframe_0);
 8006ede:	4b31      	ldr	r3, [pc, #196]	; (8006fa4 <main+0x1524>)
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	2108      	movs	r1, #8
 8006ee4:	468c      	mov	ip, r1
 8006ee6:	2108      	movs	r1, #8
 8006ee8:	4688      	mov	r8, r1
 8006eea:	44b8      	add	r8, r7
 8006eec:	44c4      	add	ip, r8
 8006eee:	4462      	add	r2, ip
 8006ef0:	1992      	adds	r2, r2, r6
 8006ef2:	18d2      	adds	r2, r2, r3
 8006ef4:	697d      	ldr	r5, [r7, #20]
 8006ef6:	2308      	movs	r3, #8
 8006ef8:	2108      	movs	r1, #8
 8006efa:	468c      	mov	ip, r1
 8006efc:	2108      	movs	r1, #8
 8006efe:	4688      	mov	r8, r1
 8006f00:	44b8      	add	r8, r7
 8006f02:	44c4      	add	ip, r8
 8006f04:	4463      	add	r3, ip
 8006f06:	199b      	adds	r3, r3, r6
 8006f08:	1959      	adds	r1, r3, r5
 8006f0a:	232c      	movs	r3, #44	; 0x2c
 8006f0c:	2020      	movs	r0, #32
 8006f0e:	4684      	mov	ip, r0
 8006f10:	2008      	movs	r0, #8
 8006f12:	4680      	mov	r8, r0
 8006f14:	2008      	movs	r0, #8
 8006f16:	4681      	mov	r9, r0
 8006f18:	2008      	movs	r0, #8
 8006f1a:	4682      	mov	sl, r0
 8006f1c:	44ba      	add	sl, r7
 8006f1e:	44d1      	add	r9, sl
 8006f20:	44c8      	add	r8, r9
 8006f22:	44c4      	add	ip, r8
 8006f24:	4463      	add	r3, ip
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7fe fcb4 	bl	8005894 <CalculateAccelerometerInEarthFrame>
	CalculateAccelerometerInEarthFrame(&rotation_matrix_earth_1, low_pass_accel_1, accel_data_earthframe_1);
 8006f2c:	4b1e      	ldr	r3, [pc, #120]	; (8006fa8 <main+0x1528>)
 8006f2e:	2208      	movs	r2, #8
 8006f30:	2108      	movs	r1, #8
 8006f32:	468c      	mov	ip, r1
 8006f34:	2108      	movs	r1, #8
 8006f36:	4688      	mov	r8, r1
 8006f38:	44b8      	add	r8, r7
 8006f3a:	44c4      	add	ip, r8
 8006f3c:	4462      	add	r2, ip
 8006f3e:	1992      	adds	r2, r2, r6
 8006f40:	18d2      	adds	r2, r2, r3
 8006f42:	2308      	movs	r3, #8
 8006f44:	2108      	movs	r1, #8
 8006f46:	468c      	mov	ip, r1
 8006f48:	2108      	movs	r1, #8
 8006f4a:	4688      	mov	r8, r1
 8006f4c:	44b8      	add	r8, r7
 8006f4e:	44c4      	add	ip, r8
 8006f50:	4463      	add	r3, ip
 8006f52:	199b      	adds	r3, r3, r6
 8006f54:	1919      	adds	r1, r3, r4
 8006f56:	2308      	movs	r3, #8
 8006f58:	2020      	movs	r0, #32
 8006f5a:	4684      	mov	ip, r0
 8006f5c:	2008      	movs	r0, #8
 8006f5e:	4680      	mov	r8, r0
 8006f60:	2008      	movs	r0, #8
 8006f62:	4681      	mov	r9, r0
 8006f64:	2008      	movs	r0, #8
 8006f66:	4682      	mov	sl, r0
 8006f68:	44ba      	add	sl, r7
 8006f6a:	44d1      	add	r9, sl
 8006f6c:	44c8      	add	r8, r9
 8006f6e:	44c4      	add	ip, r8
 8006f70:	4463      	add	r3, ip
 8006f72:	0018      	movs	r0, r3
 8006f74:	e01a      	b.n	8006fac <main+0x152c>
 8006f76:	46c0      	nop			; (mov r8, r8)
 8006f78:	00000acc 	.word	0x00000acc
 8006f7c:	2000049c 	.word	0x2000049c
 8006f80:	20000438 	.word	0x20000438
 8006f84:	08011d90 	.word	0x08011d90
 8006f88:	2000052c 	.word	0x2000052c
 8006f8c:	00000c02 	.word	0x00000c02
 8006f90:	00000afc 	.word	0x00000afc
 8006f94:	00000b14 	.word	0x00000b14
 8006f98:	00000b08 	.word	0x00000b08
 8006f9c:	00000bf8 	.word	0x00000bf8
 8006fa0:	00000bf4 	.word	0x00000bf4
 8006fa4:	00000ae4 	.word	0x00000ae4
 8006fa8:	00000ad8 	.word	0x00000ad8
 8006fac:	f7fe fc72 	bl	8005894 <CalculateAccelerometerInEarthFrame>

	*/

	// Record 50 previous samples from MOVING IMU
// Record 50 previous samples from FIXED IMU
	for (uint8_t j = 0; j < 6; j++)
 8006fb0:	4b11      	ldr	r3, [pc, #68]	; (8006ff8 <main+0x1578>)
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	4694      	mov	ip, r2
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	4690      	mov	r8, r2
 8006fba:	2208      	movs	r2, #8
 8006fbc:	4691      	mov	r9, r2
 8006fbe:	2208      	movs	r2, #8
 8006fc0:	4692      	mov	sl, r2
 8006fc2:	44ba      	add	sl, r7
 8006fc4:	44d1      	add	r9, sl
 8006fc6:	44c8      	add	r8, r9
 8006fc8:	44c4      	add	ip, r8
 8006fca:	4463      	add	r3, ip
 8006fcc:	2200      	movs	r2, #0
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	e110      	b.n	80071f4 <main+0x1774>
	{
		for (uint8_t i =  0; i < (TAMPERING_BUFFER_SIZE - 1); i++)
 8006fd2:	23c0      	movs	r3, #192	; 0xc0
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	4694      	mov	ip, r2
 8006fda:	2208      	movs	r2, #8
 8006fdc:	4690      	mov	r8, r2
 8006fde:	2208      	movs	r2, #8
 8006fe0:	4691      	mov	r9, r2
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	4692      	mov	sl, r2
 8006fe6:	44ba      	add	sl, r7
 8006fe8:	44d1      	add	r9, sl
 8006fea:	44c8      	add	r8, r9
 8006fec:	44c4      	add	ip, r8
 8006fee:	4463      	add	r3, ip
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
 8006ff4:	e0d2      	b.n	800719c <main+0x171c>
 8006ff6:	46c0      	nop			; (mov r8, r8)
 8006ff8:	00000c01 	.word	0x00000c01
		{
			tampering_buffer_0[j][i+1] = tampering_buffer_0[j][i];
 8006ffc:	4afd      	ldr	r2, [pc, #1012]	; (80073f4 <main+0x1974>)
 8006ffe:	2520      	movs	r5, #32
 8007000:	2308      	movs	r3, #8
 8007002:	2108      	movs	r1, #8
 8007004:	468c      	mov	ip, r1
 8007006:	2108      	movs	r1, #8
 8007008:	4688      	mov	r8, r1
 800700a:	44b8      	add	r8, r7
 800700c:	44c4      	add	ip, r8
 800700e:	4463      	add	r3, ip
 8007010:	195b      	adds	r3, r3, r5
 8007012:	189b      	adds	r3, r3, r2
 8007014:	781c      	ldrb	r4, [r3, #0]
 8007016:	26c0      	movs	r6, #192	; 0xc0
 8007018:	0136      	lsls	r6, r6, #4
 800701a:	2308      	movs	r3, #8
 800701c:	2108      	movs	r1, #8
 800701e:	468c      	mov	ip, r1
 8007020:	2108      	movs	r1, #8
 8007022:	4688      	mov	r8, r1
 8007024:	44b8      	add	r8, r7
 8007026:	44c4      	add	ip, r8
 8007028:	4463      	add	r3, ip
 800702a:	195b      	adds	r3, r3, r5
 800702c:	199b      	adds	r3, r3, r6
 800702e:	7819      	ldrb	r1, [r3, #0]
 8007030:	2308      	movs	r3, #8
 8007032:	2008      	movs	r0, #8
 8007034:	4684      	mov	ip, r0
 8007036:	2008      	movs	r0, #8
 8007038:	4680      	mov	r8, r0
 800703a:	44b8      	add	r8, r7
 800703c:	44c4      	add	ip, r8
 800703e:	4463      	add	r3, ip
 8007040:	195b      	adds	r3, r3, r5
 8007042:	189b      	adds	r3, r3, r2
 8007044:	7818      	ldrb	r0, [r3, #0]
 8007046:	2308      	movs	r3, #8
 8007048:	2208      	movs	r2, #8
 800704a:	4694      	mov	ip, r2
 800704c:	2208      	movs	r2, #8
 800704e:	4690      	mov	r8, r2
 8007050:	44b8      	add	r8, r7
 8007052:	44c4      	add	ip, r8
 8007054:	4463      	add	r3, ip
 8007056:	195b      	adds	r3, r3, r5
 8007058:	199b      	adds	r3, r3, r6
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	4be6      	ldr	r3, [pc, #920]	; (80073f8 <main+0x1978>)
 8007060:	4de6      	ldr	r5, [pc, #920]	; (80073fc <main+0x197c>)
 8007062:	46ac      	mov	ip, r5
 8007064:	2520      	movs	r5, #32
 8007066:	46a8      	mov	r8, r5
 8007068:	2508      	movs	r5, #8
 800706a:	46a9      	mov	r9, r5
 800706c:	2508      	movs	r5, #8
 800706e:	46aa      	mov	sl, r5
 8007070:	2508      	movs	r5, #8
 8007072:	46ab      	mov	fp, r5
 8007074:	44bb      	add	fp, r7
 8007076:	44da      	add	sl, fp
 8007078:	44d1      	add	r9, sl
 800707a:	44c8      	add	r8, r9
 800707c:	44c4      	add	ip, r8
 800707e:	4463      	add	r3, ip
 8007080:	2532      	movs	r5, #50	; 0x32
 8007082:	436c      	muls	r4, r5
 8007084:	1861      	adds	r1, r4, r1
 8007086:	0089      	lsls	r1, r1, #2
 8007088:	58c9      	ldr	r1, [r1, r3]
 800708a:	4bdb      	ldr	r3, [pc, #876]	; (80073f8 <main+0x1978>)
 800708c:	4cdb      	ldr	r4, [pc, #876]	; (80073fc <main+0x197c>)
 800708e:	46a4      	mov	ip, r4
 8007090:	2420      	movs	r4, #32
 8007092:	46a0      	mov	r8, r4
 8007094:	2408      	movs	r4, #8
 8007096:	46a1      	mov	r9, r4
 8007098:	2408      	movs	r4, #8
 800709a:	46a2      	mov	sl, r4
 800709c:	2408      	movs	r4, #8
 800709e:	46a3      	mov	fp, r4
 80070a0:	44bb      	add	fp, r7
 80070a2:	44da      	add	sl, fp
 80070a4:	44d1      	add	r9, sl
 80070a6:	44c8      	add	r8, r9
 80070a8:	44c4      	add	ip, r8
 80070aa:	4463      	add	r3, ip
 80070ac:	2432      	movs	r4, #50	; 0x32
 80070ae:	4360      	muls	r0, r4
 80070b0:	1882      	adds	r2, r0, r2
 80070b2:	0092      	lsls	r2, r2, #2
 80070b4:	50d1      	str	r1, [r2, r3]
			tampering_buffer_1[j][i+1] = tampering_buffer_0[j][i];
 80070b6:	4acf      	ldr	r2, [pc, #828]	; (80073f4 <main+0x1974>)
 80070b8:	2520      	movs	r5, #32
 80070ba:	2308      	movs	r3, #8
 80070bc:	2108      	movs	r1, #8
 80070be:	468c      	mov	ip, r1
 80070c0:	2108      	movs	r1, #8
 80070c2:	4688      	mov	r8, r1
 80070c4:	44b8      	add	r8, r7
 80070c6:	44c4      	add	ip, r8
 80070c8:	4463      	add	r3, ip
 80070ca:	195b      	adds	r3, r3, r5
 80070cc:	189b      	adds	r3, r3, r2
 80070ce:	781c      	ldrb	r4, [r3, #0]
 80070d0:	2308      	movs	r3, #8
 80070d2:	2108      	movs	r1, #8
 80070d4:	468c      	mov	ip, r1
 80070d6:	2108      	movs	r1, #8
 80070d8:	4688      	mov	r8, r1
 80070da:	44b8      	add	r8, r7
 80070dc:	44c4      	add	ip, r8
 80070de:	4463      	add	r3, ip
 80070e0:	195b      	adds	r3, r3, r5
 80070e2:	199b      	adds	r3, r3, r6
 80070e4:	7819      	ldrb	r1, [r3, #0]
 80070e6:	2308      	movs	r3, #8
 80070e8:	2008      	movs	r0, #8
 80070ea:	4684      	mov	ip, r0
 80070ec:	2008      	movs	r0, #8
 80070ee:	4680      	mov	r8, r0
 80070f0:	44b8      	add	r8, r7
 80070f2:	44c4      	add	ip, r8
 80070f4:	4463      	add	r3, ip
 80070f6:	195b      	adds	r3, r3, r5
 80070f8:	189b      	adds	r3, r3, r2
 80070fa:	7818      	ldrb	r0, [r3, #0]
 80070fc:	2308      	movs	r3, #8
 80070fe:	2208      	movs	r2, #8
 8007100:	4694      	mov	ip, r2
 8007102:	2208      	movs	r2, #8
 8007104:	4690      	mov	r8, r2
 8007106:	44b8      	add	r8, r7
 8007108:	44c4      	add	ip, r8
 800710a:	4463      	add	r3, ip
 800710c:	195b      	adds	r3, r3, r5
 800710e:	199b      	adds	r3, r3, r6
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	4bb8      	ldr	r3, [pc, #736]	; (80073f8 <main+0x1978>)
 8007116:	4db9      	ldr	r5, [pc, #740]	; (80073fc <main+0x197c>)
 8007118:	46ac      	mov	ip, r5
 800711a:	2520      	movs	r5, #32
 800711c:	46a8      	mov	r8, r5
 800711e:	2508      	movs	r5, #8
 8007120:	46a9      	mov	r9, r5
 8007122:	2508      	movs	r5, #8
 8007124:	46aa      	mov	sl, r5
 8007126:	2508      	movs	r5, #8
 8007128:	46ab      	mov	fp, r5
 800712a:	44bb      	add	fp, r7
 800712c:	44da      	add	sl, fp
 800712e:	44d1      	add	r9, sl
 8007130:	44c8      	add	r8, r9
 8007132:	44c4      	add	ip, r8
 8007134:	4463      	add	r3, ip
 8007136:	2532      	movs	r5, #50	; 0x32
 8007138:	436c      	muls	r4, r5
 800713a:	1861      	adds	r1, r4, r1
 800713c:	0089      	lsls	r1, r1, #2
 800713e:	58c9      	ldr	r1, [r1, r3]
 8007140:	4baf      	ldr	r3, [pc, #700]	; (8007400 <main+0x1980>)
 8007142:	4cae      	ldr	r4, [pc, #696]	; (80073fc <main+0x197c>)
 8007144:	46a4      	mov	ip, r4
 8007146:	2420      	movs	r4, #32
 8007148:	46a0      	mov	r8, r4
 800714a:	2408      	movs	r4, #8
 800714c:	46a1      	mov	r9, r4
 800714e:	2408      	movs	r4, #8
 8007150:	46a2      	mov	sl, r4
 8007152:	2408      	movs	r4, #8
 8007154:	46a3      	mov	fp, r4
 8007156:	44bb      	add	fp, r7
 8007158:	44da      	add	sl, fp
 800715a:	44d1      	add	r9, sl
 800715c:	44c8      	add	r8, r9
 800715e:	44c4      	add	ip, r8
 8007160:	4463      	add	r3, ip
 8007162:	2432      	movs	r4, #50	; 0x32
 8007164:	4360      	muls	r0, r4
 8007166:	1882      	adds	r2, r0, r2
 8007168:	0092      	lsls	r2, r2, #2
 800716a:	50d1      	str	r1, [r2, r3]
		for (uint8_t i =  0; i < (TAMPERING_BUFFER_SIZE - 1); i++)
 800716c:	2120      	movs	r1, #32
 800716e:	2308      	movs	r3, #8
 8007170:	2208      	movs	r2, #8
 8007172:	4694      	mov	ip, r2
 8007174:	2208      	movs	r2, #8
 8007176:	4690      	mov	r8, r2
 8007178:	44b8      	add	r8, r7
 800717a:	44c4      	add	ip, r8
 800717c:	4463      	add	r3, ip
 800717e:	185b      	adds	r3, r3, r1
 8007180:	199b      	adds	r3, r3, r6
 8007182:	781a      	ldrb	r2, [r3, #0]
 8007184:	2308      	movs	r3, #8
 8007186:	2008      	movs	r0, #8
 8007188:	4684      	mov	ip, r0
 800718a:	2008      	movs	r0, #8
 800718c:	4680      	mov	r8, r0
 800718e:	44b8      	add	r8, r7
 8007190:	44c4      	add	ip, r8
 8007192:	4463      	add	r3, ip
 8007194:	185b      	adds	r3, r3, r1
 8007196:	199b      	adds	r3, r3, r6
 8007198:	3201      	adds	r2, #1
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	23c0      	movs	r3, #192	; 0xc0
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	2220      	movs	r2, #32
 80071a2:	4694      	mov	ip, r2
 80071a4:	2208      	movs	r2, #8
 80071a6:	4690      	mov	r8, r2
 80071a8:	2208      	movs	r2, #8
 80071aa:	4691      	mov	r9, r2
 80071ac:	2208      	movs	r2, #8
 80071ae:	4692      	mov	sl, r2
 80071b0:	44ba      	add	sl, r7
 80071b2:	44d1      	add	r9, sl
 80071b4:	44c8      	add	r8, r9
 80071b6:	44c4      	add	ip, r8
 80071b8:	4463      	add	r3, ip
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b30      	cmp	r3, #48	; 0x30
 80071be:	d800      	bhi.n	80071c2 <main+0x1742>
 80071c0:	e71c      	b.n	8006ffc <main+0x157c>
	for (uint8_t j = 0; j < 6; j++)
 80071c2:	498c      	ldr	r1, [pc, #560]	; (80073f4 <main+0x1974>)
 80071c4:	2020      	movs	r0, #32
 80071c6:	2308      	movs	r3, #8
 80071c8:	2208      	movs	r2, #8
 80071ca:	4694      	mov	ip, r2
 80071cc:	2208      	movs	r2, #8
 80071ce:	4690      	mov	r8, r2
 80071d0:	44b8      	add	r8, r7
 80071d2:	44c4      	add	ip, r8
 80071d4:	4463      	add	r3, ip
 80071d6:	181b      	adds	r3, r3, r0
 80071d8:	185b      	adds	r3, r3, r1
 80071da:	781a      	ldrb	r2, [r3, #0]
 80071dc:	2308      	movs	r3, #8
 80071de:	2408      	movs	r4, #8
 80071e0:	46a4      	mov	ip, r4
 80071e2:	2408      	movs	r4, #8
 80071e4:	46a0      	mov	r8, r4
 80071e6:	44b8      	add	r8, r7
 80071e8:	44c4      	add	ip, r8
 80071ea:	4463      	add	r3, ip
 80071ec:	181b      	adds	r3, r3, r0
 80071ee:	185b      	adds	r3, r3, r1
 80071f0:	3201      	adds	r2, #1
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	4b7f      	ldr	r3, [pc, #508]	; (80073f4 <main+0x1974>)
 80071f6:	2220      	movs	r2, #32
 80071f8:	4694      	mov	ip, r2
 80071fa:	2208      	movs	r2, #8
 80071fc:	4690      	mov	r8, r2
 80071fe:	2208      	movs	r2, #8
 8007200:	4691      	mov	r9, r2
 8007202:	2208      	movs	r2, #8
 8007204:	4692      	mov	sl, r2
 8007206:	44ba      	add	sl, r7
 8007208:	44d1      	add	r9, sl
 800720a:	44c8      	add	r8, r9
 800720c:	44c4      	add	ip, r8
 800720e:	4463      	add	r3, ip
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b05      	cmp	r3, #5
 8007214:	d800      	bhi.n	8007218 <main+0x1798>
 8007216:	e6dc      	b.n	8006fd2 <main+0x1552>
		}
	}
	tampering_buffer_0[0][0] = accel_data_earthframe_0[0];
 8007218:	4b7a      	ldr	r3, [pc, #488]	; (8007404 <main+0x1984>)
 800721a:	4a78      	ldr	r2, [pc, #480]	; (80073fc <main+0x197c>)
 800721c:	4694      	mov	ip, r2
 800721e:	2220      	movs	r2, #32
 8007220:	4690      	mov	r8, r2
 8007222:	2208      	movs	r2, #8
 8007224:	4691      	mov	r9, r2
 8007226:	2208      	movs	r2, #8
 8007228:	4692      	mov	sl, r2
 800722a:	2208      	movs	r2, #8
 800722c:	4693      	mov	fp, r2
 800722e:	44bb      	add	fp, r7
 8007230:	44da      	add	sl, fp
 8007232:	44d1      	add	r9, sl
 8007234:	44c8      	add	r8, r9
 8007236:	44c4      	add	ip, r8
 8007238:	4463      	add	r3, ip
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	4b6e      	ldr	r3, [pc, #440]	; (80073f8 <main+0x1978>)
 800723e:	496f      	ldr	r1, [pc, #444]	; (80073fc <main+0x197c>)
 8007240:	468c      	mov	ip, r1
 8007242:	2120      	movs	r1, #32
 8007244:	4688      	mov	r8, r1
 8007246:	2108      	movs	r1, #8
 8007248:	4689      	mov	r9, r1
 800724a:	2108      	movs	r1, #8
 800724c:	468a      	mov	sl, r1
 800724e:	2108      	movs	r1, #8
 8007250:	468b      	mov	fp, r1
 8007252:	44bb      	add	fp, r7
 8007254:	44da      	add	sl, fp
 8007256:	44d1      	add	r9, sl
 8007258:	44c8      	add	r8, r9
 800725a:	44c4      	add	ip, r8
 800725c:	4463      	add	r3, ip
 800725e:	601a      	str	r2, [r3, #0]
	tampering_buffer_0[1][0] = accel_data_earthframe_0[1];
 8007260:	4b68      	ldr	r3, [pc, #416]	; (8007404 <main+0x1984>)
 8007262:	4a66      	ldr	r2, [pc, #408]	; (80073fc <main+0x197c>)
 8007264:	4694      	mov	ip, r2
 8007266:	2220      	movs	r2, #32
 8007268:	4690      	mov	r8, r2
 800726a:	2208      	movs	r2, #8
 800726c:	4691      	mov	r9, r2
 800726e:	2208      	movs	r2, #8
 8007270:	4692      	mov	sl, r2
 8007272:	2208      	movs	r2, #8
 8007274:	4693      	mov	fp, r2
 8007276:	44bb      	add	fp, r7
 8007278:	44da      	add	sl, fp
 800727a:	44d1      	add	r9, sl
 800727c:	44c8      	add	r8, r9
 800727e:	44c4      	add	ip, r8
 8007280:	4463      	add	r3, ip
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	4b5c      	ldr	r3, [pc, #368]	; (80073f8 <main+0x1978>)
 8007286:	495d      	ldr	r1, [pc, #372]	; (80073fc <main+0x197c>)
 8007288:	468c      	mov	ip, r1
 800728a:	2120      	movs	r1, #32
 800728c:	4688      	mov	r8, r1
 800728e:	2108      	movs	r1, #8
 8007290:	4689      	mov	r9, r1
 8007292:	2108      	movs	r1, #8
 8007294:	468a      	mov	sl, r1
 8007296:	2108      	movs	r1, #8
 8007298:	468b      	mov	fp, r1
 800729a:	44bb      	add	fp, r7
 800729c:	44da      	add	sl, fp
 800729e:	44d1      	add	r9, sl
 80072a0:	44c8      	add	r8, r9
 80072a2:	44c4      	add	ip, r8
 80072a4:	4463      	add	r3, ip
 80072a6:	21c8      	movs	r1, #200	; 0xc8
 80072a8:	505a      	str	r2, [r3, r1]
	tampering_buffer_0[2][0] = accel_data_earthframe_0[2];
 80072aa:	4b56      	ldr	r3, [pc, #344]	; (8007404 <main+0x1984>)
 80072ac:	4a53      	ldr	r2, [pc, #332]	; (80073fc <main+0x197c>)
 80072ae:	4694      	mov	ip, r2
 80072b0:	2220      	movs	r2, #32
 80072b2:	4690      	mov	r8, r2
 80072b4:	2208      	movs	r2, #8
 80072b6:	4691      	mov	r9, r2
 80072b8:	2208      	movs	r2, #8
 80072ba:	4692      	mov	sl, r2
 80072bc:	2208      	movs	r2, #8
 80072be:	4693      	mov	fp, r2
 80072c0:	44bb      	add	fp, r7
 80072c2:	44da      	add	sl, fp
 80072c4:	44d1      	add	r9, sl
 80072c6:	44c8      	add	r8, r9
 80072c8:	44c4      	add	ip, r8
 80072ca:	4463      	add	r3, ip
 80072cc:	6899      	ldr	r1, [r3, #8]
 80072ce:	4b4a      	ldr	r3, [pc, #296]	; (80073f8 <main+0x1978>)
 80072d0:	484a      	ldr	r0, [pc, #296]	; (80073fc <main+0x197c>)
 80072d2:	2420      	movs	r4, #32
 80072d4:	2208      	movs	r2, #8
 80072d6:	2508      	movs	r5, #8
 80072d8:	46ac      	mov	ip, r5
 80072da:	2508      	movs	r5, #8
 80072dc:	46a8      	mov	r8, r5
 80072de:	44b8      	add	r8, r7
 80072e0:	44c4      	add	ip, r8
 80072e2:	4462      	add	r2, ip
 80072e4:	1912      	adds	r2, r2, r4
 80072e6:	1812      	adds	r2, r2, r0
 80072e8:	18d2      	adds	r2, r2, r3
 80072ea:	23c8      	movs	r3, #200	; 0xc8
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	50d1      	str	r1, [r2, r3]
	tampering_buffer_0[3][0] = low_pass_gyro_0[0];
 80072f0:	4b45      	ldr	r3, [pc, #276]	; (8007408 <main+0x1988>)
 80072f2:	4a42      	ldr	r2, [pc, #264]	; (80073fc <main+0x197c>)
 80072f4:	4694      	mov	ip, r2
 80072f6:	2220      	movs	r2, #32
 80072f8:	4690      	mov	r8, r2
 80072fa:	2208      	movs	r2, #8
 80072fc:	4691      	mov	r9, r2
 80072fe:	2208      	movs	r2, #8
 8007300:	4692      	mov	sl, r2
 8007302:	2208      	movs	r2, #8
 8007304:	4693      	mov	fp, r2
 8007306:	44bb      	add	fp, r7
 8007308:	44da      	add	sl, fp
 800730a:	44d1      	add	r9, sl
 800730c:	44c8      	add	r8, r9
 800730e:	44c4      	add	ip, r8
 8007310:	4463      	add	r3, ip
 8007312:	6819      	ldr	r1, [r3, #0]
 8007314:	4b38      	ldr	r3, [pc, #224]	; (80073f8 <main+0x1978>)
 8007316:	2208      	movs	r2, #8
 8007318:	2508      	movs	r5, #8
 800731a:	46ac      	mov	ip, r5
 800731c:	2508      	movs	r5, #8
 800731e:	46a8      	mov	r8, r5
 8007320:	44b8      	add	r8, r7
 8007322:	44c4      	add	ip, r8
 8007324:	4462      	add	r2, ip
 8007326:	1912      	adds	r2, r2, r4
 8007328:	1812      	adds	r2, r2, r0
 800732a:	18d2      	adds	r2, r2, r3
 800732c:	2396      	movs	r3, #150	; 0x96
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	50d1      	str	r1, [r2, r3]
	tampering_buffer_0[4][0] = low_pass_gyro_0[1];
 8007332:	4b35      	ldr	r3, [pc, #212]	; (8007408 <main+0x1988>)
 8007334:	4a31      	ldr	r2, [pc, #196]	; (80073fc <main+0x197c>)
 8007336:	4694      	mov	ip, r2
 8007338:	2220      	movs	r2, #32
 800733a:	4690      	mov	r8, r2
 800733c:	2208      	movs	r2, #8
 800733e:	4691      	mov	r9, r2
 8007340:	2208      	movs	r2, #8
 8007342:	4692      	mov	sl, r2
 8007344:	2208      	movs	r2, #8
 8007346:	4693      	mov	fp, r2
 8007348:	44bb      	add	fp, r7
 800734a:	44da      	add	sl, fp
 800734c:	44d1      	add	r9, sl
 800734e:	44c8      	add	r8, r9
 8007350:	44c4      	add	ip, r8
 8007352:	4463      	add	r3, ip
 8007354:	6859      	ldr	r1, [r3, #4]
 8007356:	4b28      	ldr	r3, [pc, #160]	; (80073f8 <main+0x1978>)
 8007358:	2208      	movs	r2, #8
 800735a:	2508      	movs	r5, #8
 800735c:	46ac      	mov	ip, r5
 800735e:	2508      	movs	r5, #8
 8007360:	46a8      	mov	r8, r5
 8007362:	44b8      	add	r8, r7
 8007364:	44c4      	add	ip, r8
 8007366:	4462      	add	r2, ip
 8007368:	1912      	adds	r2, r2, r4
 800736a:	1812      	adds	r2, r2, r0
 800736c:	18d2      	adds	r2, r2, r3
 800736e:	23c8      	movs	r3, #200	; 0xc8
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	50d1      	str	r1, [r2, r3]
	tampering_buffer_0[5][0] = low_pass_gyro_0[2];
 8007374:	4b24      	ldr	r3, [pc, #144]	; (8007408 <main+0x1988>)
 8007376:	4a21      	ldr	r2, [pc, #132]	; (80073fc <main+0x197c>)
 8007378:	4694      	mov	ip, r2
 800737a:	2220      	movs	r2, #32
 800737c:	4690      	mov	r8, r2
 800737e:	2208      	movs	r2, #8
 8007380:	4691      	mov	r9, r2
 8007382:	2208      	movs	r2, #8
 8007384:	4692      	mov	sl, r2
 8007386:	2208      	movs	r2, #8
 8007388:	4693      	mov	fp, r2
 800738a:	44bb      	add	fp, r7
 800738c:	44da      	add	sl, fp
 800738e:	44d1      	add	r9, sl
 8007390:	44c8      	add	r8, r9
 8007392:	44c4      	add	ip, r8
 8007394:	4463      	add	r3, ip
 8007396:	6899      	ldr	r1, [r3, #8]
 8007398:	4b17      	ldr	r3, [pc, #92]	; (80073f8 <main+0x1978>)
 800739a:	2208      	movs	r2, #8
 800739c:	2508      	movs	r5, #8
 800739e:	46ac      	mov	ip, r5
 80073a0:	2508      	movs	r5, #8
 80073a2:	46a8      	mov	r8, r5
 80073a4:	44b8      	add	r8, r7
 80073a6:	44c4      	add	ip, r8
 80073a8:	4462      	add	r2, ip
 80073aa:	1912      	adds	r2, r2, r4
 80073ac:	1812      	adds	r2, r2, r0
 80073ae:	18d2      	adds	r2, r2, r3
 80073b0:	23fa      	movs	r3, #250	; 0xfa
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	50d1      	str	r1, [r2, r3]

	tampering_buffer_1[0][0] = accel_data_earthframe_1[0];
 80073b6:	4b15      	ldr	r3, [pc, #84]	; (800740c <main+0x198c>)
 80073b8:	4a10      	ldr	r2, [pc, #64]	; (80073fc <main+0x197c>)
 80073ba:	4694      	mov	ip, r2
 80073bc:	2220      	movs	r2, #32
 80073be:	4690      	mov	r8, r2
 80073c0:	2208      	movs	r2, #8
 80073c2:	4691      	mov	r9, r2
 80073c4:	2208      	movs	r2, #8
 80073c6:	4692      	mov	sl, r2
 80073c8:	2208      	movs	r2, #8
 80073ca:	4693      	mov	fp, r2
 80073cc:	44bb      	add	fp, r7
 80073ce:	44da      	add	sl, fp
 80073d0:	44d1      	add	r9, sl
 80073d2:	44c8      	add	r8, r9
 80073d4:	44c4      	add	ip, r8
 80073d6:	4463      	add	r3, ip
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	4b09      	ldr	r3, [pc, #36]	; (8007400 <main+0x1980>)
 80073dc:	4907      	ldr	r1, [pc, #28]	; (80073fc <main+0x197c>)
 80073de:	468c      	mov	ip, r1
 80073e0:	2120      	movs	r1, #32
 80073e2:	4688      	mov	r8, r1
 80073e4:	2108      	movs	r1, #8
 80073e6:	4689      	mov	r9, r1
 80073e8:	2108      	movs	r1, #8
 80073ea:	468a      	mov	sl, r1
 80073ec:	2108      	movs	r1, #8
 80073ee:	468b      	mov	fp, r1
 80073f0:	e00e      	b.n	8007410 <main+0x1990>
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	00000c01 	.word	0x00000c01
 80073f8:	fffff9f8 	.word	0xfffff9f8
 80073fc:	00000c08 	.word	0x00000c08
 8007400:	fffff548 	.word	0xfffff548
 8007404:	fffffedc 	.word	0xfffffedc
 8007408:	fffff53c 	.word	0xfffff53c
 800740c:	fffffed0 	.word	0xfffffed0
 8007410:	44bb      	add	fp, r7
 8007412:	44da      	add	sl, fp
 8007414:	44d1      	add	r9, sl
 8007416:	44c8      	add	r8, r9
 8007418:	44c4      	add	ip, r8
 800741a:	4463      	add	r3, ip
 800741c:	601a      	str	r2, [r3, #0]
	tampering_buffer_1[1][0] = accel_data_earthframe_1[1];
 800741e:	4bf0      	ldr	r3, [pc, #960]	; (80077e0 <main+0x1d60>)
 8007420:	4af0      	ldr	r2, [pc, #960]	; (80077e4 <main+0x1d64>)
 8007422:	4694      	mov	ip, r2
 8007424:	2220      	movs	r2, #32
 8007426:	4690      	mov	r8, r2
 8007428:	2208      	movs	r2, #8
 800742a:	4691      	mov	r9, r2
 800742c:	2208      	movs	r2, #8
 800742e:	4692      	mov	sl, r2
 8007430:	2208      	movs	r2, #8
 8007432:	4693      	mov	fp, r2
 8007434:	44bb      	add	fp, r7
 8007436:	44da      	add	sl, fp
 8007438:	44d1      	add	r9, sl
 800743a:	44c8      	add	r8, r9
 800743c:	44c4      	add	ip, r8
 800743e:	4463      	add	r3, ip
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	4be9      	ldr	r3, [pc, #932]	; (80077e8 <main+0x1d68>)
 8007444:	49e7      	ldr	r1, [pc, #924]	; (80077e4 <main+0x1d64>)
 8007446:	468c      	mov	ip, r1
 8007448:	2120      	movs	r1, #32
 800744a:	4688      	mov	r8, r1
 800744c:	2108      	movs	r1, #8
 800744e:	4689      	mov	r9, r1
 8007450:	2108      	movs	r1, #8
 8007452:	468a      	mov	sl, r1
 8007454:	2108      	movs	r1, #8
 8007456:	468b      	mov	fp, r1
 8007458:	44bb      	add	fp, r7
 800745a:	44da      	add	sl, fp
 800745c:	44d1      	add	r9, sl
 800745e:	44c8      	add	r8, r9
 8007460:	44c4      	add	ip, r8
 8007462:	4463      	add	r3, ip
 8007464:	21c8      	movs	r1, #200	; 0xc8
 8007466:	505a      	str	r2, [r3, r1]
	tampering_buffer_1[2][0] = accel_data_earthframe_1[2];
 8007468:	4bdd      	ldr	r3, [pc, #884]	; (80077e0 <main+0x1d60>)
 800746a:	4ade      	ldr	r2, [pc, #888]	; (80077e4 <main+0x1d64>)
 800746c:	4694      	mov	ip, r2
 800746e:	2220      	movs	r2, #32
 8007470:	4690      	mov	r8, r2
 8007472:	2208      	movs	r2, #8
 8007474:	4691      	mov	r9, r2
 8007476:	2208      	movs	r2, #8
 8007478:	4692      	mov	sl, r2
 800747a:	2208      	movs	r2, #8
 800747c:	4693      	mov	fp, r2
 800747e:	44bb      	add	fp, r7
 8007480:	44da      	add	sl, fp
 8007482:	44d1      	add	r9, sl
 8007484:	44c8      	add	r8, r9
 8007486:	44c4      	add	ip, r8
 8007488:	4463      	add	r3, ip
 800748a:	6899      	ldr	r1, [r3, #8]
 800748c:	4bd6      	ldr	r3, [pc, #856]	; (80077e8 <main+0x1d68>)
 800748e:	2208      	movs	r2, #8
 8007490:	2508      	movs	r5, #8
 8007492:	46ac      	mov	ip, r5
 8007494:	2508      	movs	r5, #8
 8007496:	46a8      	mov	r8, r5
 8007498:	44b8      	add	r8, r7
 800749a:	44c4      	add	ip, r8
 800749c:	4462      	add	r2, ip
 800749e:	1912      	adds	r2, r2, r4
 80074a0:	1812      	adds	r2, r2, r0
 80074a2:	18d2      	adds	r2, r2, r3
 80074a4:	23c8      	movs	r3, #200	; 0xc8
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	50d1      	str	r1, [r2, r3]
	tampering_buffer_1[3][0] = low_pass_gyro_1[0];
 80074aa:	4bd0      	ldr	r3, [pc, #832]	; (80077ec <main+0x1d6c>)
 80074ac:	4acd      	ldr	r2, [pc, #820]	; (80077e4 <main+0x1d64>)
 80074ae:	4694      	mov	ip, r2
 80074b0:	2220      	movs	r2, #32
 80074b2:	4690      	mov	r8, r2
 80074b4:	2208      	movs	r2, #8
 80074b6:	4691      	mov	r9, r2
 80074b8:	2208      	movs	r2, #8
 80074ba:	4692      	mov	sl, r2
 80074bc:	2208      	movs	r2, #8
 80074be:	4693      	mov	fp, r2
 80074c0:	44bb      	add	fp, r7
 80074c2:	44da      	add	sl, fp
 80074c4:	44d1      	add	r9, sl
 80074c6:	44c8      	add	r8, r9
 80074c8:	44c4      	add	ip, r8
 80074ca:	4463      	add	r3, ip
 80074cc:	6819      	ldr	r1, [r3, #0]
 80074ce:	4bc6      	ldr	r3, [pc, #792]	; (80077e8 <main+0x1d68>)
 80074d0:	2208      	movs	r2, #8
 80074d2:	2508      	movs	r5, #8
 80074d4:	46ac      	mov	ip, r5
 80074d6:	2508      	movs	r5, #8
 80074d8:	46a8      	mov	r8, r5
 80074da:	44b8      	add	r8, r7
 80074dc:	44c4      	add	ip, r8
 80074de:	4462      	add	r2, ip
 80074e0:	1912      	adds	r2, r2, r4
 80074e2:	1812      	adds	r2, r2, r0
 80074e4:	18d2      	adds	r2, r2, r3
 80074e6:	2396      	movs	r3, #150	; 0x96
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	50d1      	str	r1, [r2, r3]
	tampering_buffer_1[4][0] = low_pass_gyro_1[1];
 80074ec:	4bbf      	ldr	r3, [pc, #764]	; (80077ec <main+0x1d6c>)
 80074ee:	4abd      	ldr	r2, [pc, #756]	; (80077e4 <main+0x1d64>)
 80074f0:	4694      	mov	ip, r2
 80074f2:	2220      	movs	r2, #32
 80074f4:	4690      	mov	r8, r2
 80074f6:	2208      	movs	r2, #8
 80074f8:	4691      	mov	r9, r2
 80074fa:	2208      	movs	r2, #8
 80074fc:	4692      	mov	sl, r2
 80074fe:	2208      	movs	r2, #8
 8007500:	4693      	mov	fp, r2
 8007502:	44bb      	add	fp, r7
 8007504:	44da      	add	sl, fp
 8007506:	44d1      	add	r9, sl
 8007508:	44c8      	add	r8, r9
 800750a:	44c4      	add	ip, r8
 800750c:	4463      	add	r3, ip
 800750e:	6859      	ldr	r1, [r3, #4]
 8007510:	4bb5      	ldr	r3, [pc, #724]	; (80077e8 <main+0x1d68>)
 8007512:	2208      	movs	r2, #8
 8007514:	2508      	movs	r5, #8
 8007516:	46ac      	mov	ip, r5
 8007518:	2508      	movs	r5, #8
 800751a:	46a8      	mov	r8, r5
 800751c:	44b8      	add	r8, r7
 800751e:	44c4      	add	ip, r8
 8007520:	4462      	add	r2, ip
 8007522:	1912      	adds	r2, r2, r4
 8007524:	1812      	adds	r2, r2, r0
 8007526:	18d2      	adds	r2, r2, r3
 8007528:	23c8      	movs	r3, #200	; 0xc8
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	50d1      	str	r1, [r2, r3]
	tampering_buffer_1[5][0] = low_pass_gyro_1[2];
 800752e:	4baf      	ldr	r3, [pc, #700]	; (80077ec <main+0x1d6c>)
 8007530:	4aac      	ldr	r2, [pc, #688]	; (80077e4 <main+0x1d64>)
 8007532:	4694      	mov	ip, r2
 8007534:	2220      	movs	r2, #32
 8007536:	4690      	mov	r8, r2
 8007538:	2208      	movs	r2, #8
 800753a:	4691      	mov	r9, r2
 800753c:	2208      	movs	r2, #8
 800753e:	4692      	mov	sl, r2
 8007540:	2208      	movs	r2, #8
 8007542:	4693      	mov	fp, r2
 8007544:	44bb      	add	fp, r7
 8007546:	44da      	add	sl, fp
 8007548:	44d1      	add	r9, sl
 800754a:	44c8      	add	r8, r9
 800754c:	44c4      	add	ip, r8
 800754e:	4463      	add	r3, ip
 8007550:	6899      	ldr	r1, [r3, #8]
 8007552:	4ba5      	ldr	r3, [pc, #660]	; (80077e8 <main+0x1d68>)
 8007554:	2208      	movs	r2, #8
 8007556:	2508      	movs	r5, #8
 8007558:	46ac      	mov	ip, r5
 800755a:	2508      	movs	r5, #8
 800755c:	46a8      	mov	r8, r5
 800755e:	44b8      	add	r8, r7
 8007560:	44c4      	add	ip, r8
 8007562:	4462      	add	r2, ip
 8007564:	1912      	adds	r2, r2, r4
 8007566:	1812      	adds	r2, r2, r0
 8007568:	18d2      	adds	r2, r2, r3
 800756a:	23fa      	movs	r3, #250	; 0xfa
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	50d1      	str	r1, [r2, r3]

	if (low_pass_gyro_0[0] > TAMPERING_UPPER_THRESHOLD || low_pass_gyro_0[0] < -TAMPERING_UPPER_THRESHOLD)
 8007570:	4b9f      	ldr	r3, [pc, #636]	; (80077f0 <main+0x1d70>)
 8007572:	4a9c      	ldr	r2, [pc, #624]	; (80077e4 <main+0x1d64>)
 8007574:	4694      	mov	ip, r2
 8007576:	2220      	movs	r2, #32
 8007578:	4690      	mov	r8, r2
 800757a:	2208      	movs	r2, #8
 800757c:	4691      	mov	r9, r2
 800757e:	2208      	movs	r2, #8
 8007580:	4692      	mov	sl, r2
 8007582:	2208      	movs	r2, #8
 8007584:	4693      	mov	fp, r2
 8007586:	44bb      	add	fp, r7
 8007588:	44da      	add	sl, fp
 800758a:	44d1      	add	r9, sl
 800758c:	44c8      	add	r8, r9
 800758e:	44c4      	add	ip, r8
 8007590:	4463      	add	r3, ip
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4997      	ldr	r1, [pc, #604]	; (80077f4 <main+0x1d74>)
 8007596:	1c18      	adds	r0, r3, #0
 8007598:	f7f8 ffa8 	bl	80004ec <__aeabi_fcmpgt>
 800759c:	1e03      	subs	r3, r0, #0
 800759e:	d117      	bne.n	80075d0 <main+0x1b50>
 80075a0:	4b93      	ldr	r3, [pc, #588]	; (80077f0 <main+0x1d70>)
 80075a2:	4a90      	ldr	r2, [pc, #576]	; (80077e4 <main+0x1d64>)
 80075a4:	4694      	mov	ip, r2
 80075a6:	2220      	movs	r2, #32
 80075a8:	4690      	mov	r8, r2
 80075aa:	2208      	movs	r2, #8
 80075ac:	4691      	mov	r9, r2
 80075ae:	2208      	movs	r2, #8
 80075b0:	4692      	mov	sl, r2
 80075b2:	2208      	movs	r2, #8
 80075b4:	4693      	mov	fp, r2
 80075b6:	44bb      	add	fp, r7
 80075b8:	44da      	add	sl, fp
 80075ba:	44d1      	add	r9, sl
 80075bc:	44c8      	add	r8, r9
 80075be:	44c4      	add	ip, r8
 80075c0:	4463      	add	r3, ip
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	498c      	ldr	r1, [pc, #560]	; (80077f8 <main+0x1d78>)
 80075c6:	1c18      	adds	r0, r3, #0
 80075c8:	f7f8 ff7c 	bl	80004c4 <__aeabi_fcmplt>
 80075cc:	1e03      	subs	r3, r0, #0
 80075ce:	d012      	beq.n	80075f6 <main+0x1b76>
	{
		is_moving[0] = 1;
 80075d0:	4b8a      	ldr	r3, [pc, #552]	; (80077fc <main+0x1d7c>)
 80075d2:	4a84      	ldr	r2, [pc, #528]	; (80077e4 <main+0x1d64>)
 80075d4:	4694      	mov	ip, r2
 80075d6:	2220      	movs	r2, #32
 80075d8:	4690      	mov	r8, r2
 80075da:	2208      	movs	r2, #8
 80075dc:	4691      	mov	r9, r2
 80075de:	2208      	movs	r2, #8
 80075e0:	4692      	mov	sl, r2
 80075e2:	2208      	movs	r2, #8
 80075e4:	4693      	mov	fp, r2
 80075e6:	44bb      	add	fp, r7
 80075e8:	44da      	add	sl, fp
 80075ea:	44d1      	add	r9, sl
 80075ec:	44c8      	add	r8, r9
 80075ee:	44c4      	add	ip, r8
 80075f0:	4463      	add	r3, ip
 80075f2:	2201      	movs	r2, #1
 80075f4:	701a      	strb	r2, [r3, #0]
	}

	if (low_pass_gyro_0[1] > TAMPERING_UPPER_THRESHOLD || low_pass_gyro_0[1] < -TAMPERING_UPPER_THRESHOLD)
 80075f6:	4b7e      	ldr	r3, [pc, #504]	; (80077f0 <main+0x1d70>)
 80075f8:	4a7a      	ldr	r2, [pc, #488]	; (80077e4 <main+0x1d64>)
 80075fa:	4694      	mov	ip, r2
 80075fc:	2220      	movs	r2, #32
 80075fe:	4690      	mov	r8, r2
 8007600:	2208      	movs	r2, #8
 8007602:	4691      	mov	r9, r2
 8007604:	2208      	movs	r2, #8
 8007606:	4692      	mov	sl, r2
 8007608:	2208      	movs	r2, #8
 800760a:	4693      	mov	fp, r2
 800760c:	44bb      	add	fp, r7
 800760e:	44da      	add	sl, fp
 8007610:	44d1      	add	r9, sl
 8007612:	44c8      	add	r8, r9
 8007614:	44c4      	add	ip, r8
 8007616:	4463      	add	r3, ip
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	4976      	ldr	r1, [pc, #472]	; (80077f4 <main+0x1d74>)
 800761c:	1c18      	adds	r0, r3, #0
 800761e:	f7f8 ff65 	bl	80004ec <__aeabi_fcmpgt>
 8007622:	1e03      	subs	r3, r0, #0
 8007624:	d117      	bne.n	8007656 <main+0x1bd6>
 8007626:	4b72      	ldr	r3, [pc, #456]	; (80077f0 <main+0x1d70>)
 8007628:	4a6e      	ldr	r2, [pc, #440]	; (80077e4 <main+0x1d64>)
 800762a:	4694      	mov	ip, r2
 800762c:	2220      	movs	r2, #32
 800762e:	4690      	mov	r8, r2
 8007630:	2208      	movs	r2, #8
 8007632:	4691      	mov	r9, r2
 8007634:	2208      	movs	r2, #8
 8007636:	4692      	mov	sl, r2
 8007638:	2208      	movs	r2, #8
 800763a:	4693      	mov	fp, r2
 800763c:	44bb      	add	fp, r7
 800763e:	44da      	add	sl, fp
 8007640:	44d1      	add	r9, sl
 8007642:	44c8      	add	r8, r9
 8007644:	44c4      	add	ip, r8
 8007646:	4463      	add	r3, ip
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	496b      	ldr	r1, [pc, #428]	; (80077f8 <main+0x1d78>)
 800764c:	1c18      	adds	r0, r3, #0
 800764e:	f7f8 ff39 	bl	80004c4 <__aeabi_fcmplt>
 8007652:	1e03      	subs	r3, r0, #0
 8007654:	d012      	beq.n	800767c <main+0x1bfc>
	{
		is_moving[1] = 1;
 8007656:	4b69      	ldr	r3, [pc, #420]	; (80077fc <main+0x1d7c>)
 8007658:	4a62      	ldr	r2, [pc, #392]	; (80077e4 <main+0x1d64>)
 800765a:	4694      	mov	ip, r2
 800765c:	2220      	movs	r2, #32
 800765e:	4690      	mov	r8, r2
 8007660:	2208      	movs	r2, #8
 8007662:	4691      	mov	r9, r2
 8007664:	2208      	movs	r2, #8
 8007666:	4692      	mov	sl, r2
 8007668:	2208      	movs	r2, #8
 800766a:	4693      	mov	fp, r2
 800766c:	44bb      	add	fp, r7
 800766e:	44da      	add	sl, fp
 8007670:	44d1      	add	r9, sl
 8007672:	44c8      	add	r8, r9
 8007674:	44c4      	add	ip, r8
 8007676:	4463      	add	r3, ip
 8007678:	2201      	movs	r2, #1
 800767a:	705a      	strb	r2, [r3, #1]
	}

	if (low_pass_gyro_0[2] > TAMPERING_UPPER_THRESHOLD || low_pass_gyro_0[2] < -TAMPERING_UPPER_THRESHOLD)
 800767c:	4b5c      	ldr	r3, [pc, #368]	; (80077f0 <main+0x1d70>)
 800767e:	4a59      	ldr	r2, [pc, #356]	; (80077e4 <main+0x1d64>)
 8007680:	4694      	mov	ip, r2
 8007682:	2220      	movs	r2, #32
 8007684:	4690      	mov	r8, r2
 8007686:	2208      	movs	r2, #8
 8007688:	4691      	mov	r9, r2
 800768a:	2208      	movs	r2, #8
 800768c:	4692      	mov	sl, r2
 800768e:	2208      	movs	r2, #8
 8007690:	4693      	mov	fp, r2
 8007692:	44bb      	add	fp, r7
 8007694:	44da      	add	sl, fp
 8007696:	44d1      	add	r9, sl
 8007698:	44c8      	add	r8, r9
 800769a:	44c4      	add	ip, r8
 800769c:	4463      	add	r3, ip
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	4954      	ldr	r1, [pc, #336]	; (80077f4 <main+0x1d74>)
 80076a2:	1c18      	adds	r0, r3, #0
 80076a4:	f7f8 ff22 	bl	80004ec <__aeabi_fcmpgt>
 80076a8:	1e03      	subs	r3, r0, #0
 80076aa:	d117      	bne.n	80076dc <main+0x1c5c>
 80076ac:	4b50      	ldr	r3, [pc, #320]	; (80077f0 <main+0x1d70>)
 80076ae:	4a4d      	ldr	r2, [pc, #308]	; (80077e4 <main+0x1d64>)
 80076b0:	4694      	mov	ip, r2
 80076b2:	2220      	movs	r2, #32
 80076b4:	4690      	mov	r8, r2
 80076b6:	2208      	movs	r2, #8
 80076b8:	4691      	mov	r9, r2
 80076ba:	2208      	movs	r2, #8
 80076bc:	4692      	mov	sl, r2
 80076be:	2208      	movs	r2, #8
 80076c0:	4693      	mov	fp, r2
 80076c2:	44bb      	add	fp, r7
 80076c4:	44da      	add	sl, fp
 80076c6:	44d1      	add	r9, sl
 80076c8:	44c8      	add	r8, r9
 80076ca:	44c4      	add	ip, r8
 80076cc:	4463      	add	r3, ip
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	4949      	ldr	r1, [pc, #292]	; (80077f8 <main+0x1d78>)
 80076d2:	1c18      	adds	r0, r3, #0
 80076d4:	f7f8 fef6 	bl	80004c4 <__aeabi_fcmplt>
 80076d8:	1e03      	subs	r3, r0, #0
 80076da:	d012      	beq.n	8007702 <main+0x1c82>
	{
		is_moving[2] = 1;
 80076dc:	4b47      	ldr	r3, [pc, #284]	; (80077fc <main+0x1d7c>)
 80076de:	4a41      	ldr	r2, [pc, #260]	; (80077e4 <main+0x1d64>)
 80076e0:	4694      	mov	ip, r2
 80076e2:	2220      	movs	r2, #32
 80076e4:	4690      	mov	r8, r2
 80076e6:	2208      	movs	r2, #8
 80076e8:	4691      	mov	r9, r2
 80076ea:	2208      	movs	r2, #8
 80076ec:	4692      	mov	sl, r2
 80076ee:	2208      	movs	r2, #8
 80076f0:	4693      	mov	fp, r2
 80076f2:	44bb      	add	fp, r7
 80076f4:	44da      	add	sl, fp
 80076f6:	44d1      	add	r9, sl
 80076f8:	44c8      	add	r8, r9
 80076fa:	44c4      	add	ip, r8
 80076fc:	4463      	add	r3, ip
 80076fe:	2201      	movs	r2, #1
 8007700:	709a      	strb	r2, [r3, #2]
	}

	if (low_pass_gyro_0[0] < TAMPERING_LOWER_THRESHOLD && low_pass_gyro_0[0] > -TAMPERING_LOWER_THRESHOLD)
 8007702:	4b3b      	ldr	r3, [pc, #236]	; (80077f0 <main+0x1d70>)
 8007704:	4a37      	ldr	r2, [pc, #220]	; (80077e4 <main+0x1d64>)
 8007706:	4694      	mov	ip, r2
 8007708:	2220      	movs	r2, #32
 800770a:	4690      	mov	r8, r2
 800770c:	2208      	movs	r2, #8
 800770e:	4691      	mov	r9, r2
 8007710:	2208      	movs	r2, #8
 8007712:	4692      	mov	sl, r2
 8007714:	2208      	movs	r2, #8
 8007716:	4693      	mov	fp, r2
 8007718:	44bb      	add	fp, r7
 800771a:	44da      	add	sl, fp
 800771c:	44d1      	add	r9, sl
 800771e:	44c8      	add	r8, r9
 8007720:	44c4      	add	ip, r8
 8007722:	4463      	add	r3, ip
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	1c18      	adds	r0, r3, #0
 8007728:	f7fb fbd2 	bl	8002ed0 <__aeabi_f2d>
 800772c:	4a34      	ldr	r2, [pc, #208]	; (8007800 <main+0x1d80>)
 800772e:	4b35      	ldr	r3, [pc, #212]	; (8007804 <main+0x1d84>)
 8007730:	f7f8 fe8e 	bl	8000450 <__aeabi_dcmplt>
 8007734:	1e03      	subs	r3, r0, #0
 8007736:	d02d      	beq.n	8007794 <main+0x1d14>
 8007738:	4b2d      	ldr	r3, [pc, #180]	; (80077f0 <main+0x1d70>)
 800773a:	4a2a      	ldr	r2, [pc, #168]	; (80077e4 <main+0x1d64>)
 800773c:	4694      	mov	ip, r2
 800773e:	2220      	movs	r2, #32
 8007740:	4690      	mov	r8, r2
 8007742:	2208      	movs	r2, #8
 8007744:	4691      	mov	r9, r2
 8007746:	2208      	movs	r2, #8
 8007748:	4692      	mov	sl, r2
 800774a:	2208      	movs	r2, #8
 800774c:	4693      	mov	fp, r2
 800774e:	44bb      	add	fp, r7
 8007750:	44da      	add	sl, fp
 8007752:	44d1      	add	r9, sl
 8007754:	44c8      	add	r8, r9
 8007756:	44c4      	add	ip, r8
 8007758:	4463      	add	r3, ip
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	1c18      	adds	r0, r3, #0
 800775e:	f7fb fbb7 	bl	8002ed0 <__aeabi_f2d>
 8007762:	4a27      	ldr	r2, [pc, #156]	; (8007800 <main+0x1d80>)
 8007764:	4b28      	ldr	r3, [pc, #160]	; (8007808 <main+0x1d88>)
 8007766:	f7f8 fe87 	bl	8000478 <__aeabi_dcmpgt>
 800776a:	1e03      	subs	r3, r0, #0
 800776c:	d012      	beq.n	8007794 <main+0x1d14>
	{
		is_moving[0] = 0;
 800776e:	4b23      	ldr	r3, [pc, #140]	; (80077fc <main+0x1d7c>)
 8007770:	4a1c      	ldr	r2, [pc, #112]	; (80077e4 <main+0x1d64>)
 8007772:	4694      	mov	ip, r2
 8007774:	2220      	movs	r2, #32
 8007776:	4690      	mov	r8, r2
 8007778:	2208      	movs	r2, #8
 800777a:	4691      	mov	r9, r2
 800777c:	2208      	movs	r2, #8
 800777e:	4692      	mov	sl, r2
 8007780:	2208      	movs	r2, #8
 8007782:	4693      	mov	fp, r2
 8007784:	44bb      	add	fp, r7
 8007786:	44da      	add	sl, fp
 8007788:	44d1      	add	r9, sl
 800778a:	44c8      	add	r8, r9
 800778c:	44c4      	add	ip, r8
 800778e:	4463      	add	r3, ip
 8007790:	2200      	movs	r2, #0
 8007792:	701a      	strb	r2, [r3, #0]
	}

	if (low_pass_gyro_0[1] < TAMPERING_LOWER_THRESHOLD && low_pass_gyro_0[1] > -TAMPERING_LOWER_THRESHOLD)
 8007794:	4b16      	ldr	r3, [pc, #88]	; (80077f0 <main+0x1d70>)
 8007796:	4a13      	ldr	r2, [pc, #76]	; (80077e4 <main+0x1d64>)
 8007798:	4694      	mov	ip, r2
 800779a:	2220      	movs	r2, #32
 800779c:	4690      	mov	r8, r2
 800779e:	2208      	movs	r2, #8
 80077a0:	4691      	mov	r9, r2
 80077a2:	2208      	movs	r2, #8
 80077a4:	4692      	mov	sl, r2
 80077a6:	2208      	movs	r2, #8
 80077a8:	4693      	mov	fp, r2
 80077aa:	44bb      	add	fp, r7
 80077ac:	44da      	add	sl, fp
 80077ae:	44d1      	add	r9, sl
 80077b0:	44c8      	add	r8, r9
 80077b2:	44c4      	add	ip, r8
 80077b4:	4463      	add	r3, ip
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	1c18      	adds	r0, r3, #0
 80077ba:	f7fb fb89 	bl	8002ed0 <__aeabi_f2d>
 80077be:	4a10      	ldr	r2, [pc, #64]	; (8007800 <main+0x1d80>)
 80077c0:	4b10      	ldr	r3, [pc, #64]	; (8007804 <main+0x1d84>)
 80077c2:	f7f8 fe45 	bl	8000450 <__aeabi_dcmplt>
 80077c6:	1e03      	subs	r3, r0, #0
 80077c8:	d044      	beq.n	8007854 <main+0x1dd4>
 80077ca:	4b09      	ldr	r3, [pc, #36]	; (80077f0 <main+0x1d70>)
 80077cc:	4a05      	ldr	r2, [pc, #20]	; (80077e4 <main+0x1d64>)
 80077ce:	4694      	mov	ip, r2
 80077d0:	2220      	movs	r2, #32
 80077d2:	4690      	mov	r8, r2
 80077d4:	2208      	movs	r2, #8
 80077d6:	4691      	mov	r9, r2
 80077d8:	2208      	movs	r2, #8
 80077da:	4692      	mov	sl, r2
 80077dc:	2208      	movs	r2, #8
 80077de:	e015      	b.n	800780c <main+0x1d8c>
 80077e0:	fffffed0 	.word	0xfffffed0
 80077e4:	00000c08 	.word	0x00000c08
 80077e8:	fffff548 	.word	0xfffff548
 80077ec:	fffff530 	.word	0xfffff530
 80077f0:	fffff53c 	.word	0xfffff53c
 80077f4:	40a00000 	.word	0x40a00000
 80077f8:	c0a00000 	.word	0xc0a00000
 80077fc:	fffff3fc 	.word	0xfffff3fc
 8007800:	9999999a 	.word	0x9999999a
 8007804:	3fb99999 	.word	0x3fb99999
 8007808:	bfb99999 	.word	0xbfb99999
 800780c:	4693      	mov	fp, r2
 800780e:	44bb      	add	fp, r7
 8007810:	44da      	add	sl, fp
 8007812:	44d1      	add	r9, sl
 8007814:	44c8      	add	r8, r9
 8007816:	44c4      	add	ip, r8
 8007818:	4463      	add	r3, ip
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	1c18      	adds	r0, r3, #0
 800781e:	f7fb fb57 	bl	8002ed0 <__aeabi_f2d>
 8007822:	4a94      	ldr	r2, [pc, #592]	; (8007a74 <main+0x1ff4>)
 8007824:	4b94      	ldr	r3, [pc, #592]	; (8007a78 <main+0x1ff8>)
 8007826:	f7f8 fe27 	bl	8000478 <__aeabi_dcmpgt>
 800782a:	1e03      	subs	r3, r0, #0
 800782c:	d012      	beq.n	8007854 <main+0x1dd4>
	{
		is_moving[1] = 0;
 800782e:	4b93      	ldr	r3, [pc, #588]	; (8007a7c <main+0x1ffc>)
 8007830:	4a93      	ldr	r2, [pc, #588]	; (8007a80 <main+0x2000>)
 8007832:	4694      	mov	ip, r2
 8007834:	2220      	movs	r2, #32
 8007836:	4690      	mov	r8, r2
 8007838:	2208      	movs	r2, #8
 800783a:	4691      	mov	r9, r2
 800783c:	2208      	movs	r2, #8
 800783e:	4692      	mov	sl, r2
 8007840:	2208      	movs	r2, #8
 8007842:	4693      	mov	fp, r2
 8007844:	44bb      	add	fp, r7
 8007846:	44da      	add	sl, fp
 8007848:	44d1      	add	r9, sl
 800784a:	44c8      	add	r8, r9
 800784c:	44c4      	add	ip, r8
 800784e:	4463      	add	r3, ip
 8007850:	2200      	movs	r2, #0
 8007852:	705a      	strb	r2, [r3, #1]
	}
	if (low_pass_gyro_0[2] < TAMPERING_LOWER_THRESHOLD && low_pass_gyro_0[2] > -TAMPERING_LOWER_THRESHOLD)
 8007854:	4b8b      	ldr	r3, [pc, #556]	; (8007a84 <main+0x2004>)
 8007856:	4a8a      	ldr	r2, [pc, #552]	; (8007a80 <main+0x2000>)
 8007858:	4694      	mov	ip, r2
 800785a:	2220      	movs	r2, #32
 800785c:	4690      	mov	r8, r2
 800785e:	2208      	movs	r2, #8
 8007860:	4691      	mov	r9, r2
 8007862:	2208      	movs	r2, #8
 8007864:	4692      	mov	sl, r2
 8007866:	2208      	movs	r2, #8
 8007868:	4693      	mov	fp, r2
 800786a:	44bb      	add	fp, r7
 800786c:	44da      	add	sl, fp
 800786e:	44d1      	add	r9, sl
 8007870:	44c8      	add	r8, r9
 8007872:	44c4      	add	ip, r8
 8007874:	4463      	add	r3, ip
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	1c18      	adds	r0, r3, #0
 800787a:	f7fb fb29 	bl	8002ed0 <__aeabi_f2d>
 800787e:	4a7d      	ldr	r2, [pc, #500]	; (8007a74 <main+0x1ff4>)
 8007880:	4b81      	ldr	r3, [pc, #516]	; (8007a88 <main+0x2008>)
 8007882:	f7f8 fde5 	bl	8000450 <__aeabi_dcmplt>
 8007886:	1e03      	subs	r3, r0, #0
 8007888:	d02d      	beq.n	80078e6 <main+0x1e66>
 800788a:	4b7e      	ldr	r3, [pc, #504]	; (8007a84 <main+0x2004>)
 800788c:	4a7c      	ldr	r2, [pc, #496]	; (8007a80 <main+0x2000>)
 800788e:	4694      	mov	ip, r2
 8007890:	2220      	movs	r2, #32
 8007892:	4690      	mov	r8, r2
 8007894:	2208      	movs	r2, #8
 8007896:	4691      	mov	r9, r2
 8007898:	2208      	movs	r2, #8
 800789a:	4692      	mov	sl, r2
 800789c:	2208      	movs	r2, #8
 800789e:	4693      	mov	fp, r2
 80078a0:	44bb      	add	fp, r7
 80078a2:	44da      	add	sl, fp
 80078a4:	44d1      	add	r9, sl
 80078a6:	44c8      	add	r8, r9
 80078a8:	44c4      	add	ip, r8
 80078aa:	4463      	add	r3, ip
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	1c18      	adds	r0, r3, #0
 80078b0:	f7fb fb0e 	bl	8002ed0 <__aeabi_f2d>
 80078b4:	4a6f      	ldr	r2, [pc, #444]	; (8007a74 <main+0x1ff4>)
 80078b6:	4b70      	ldr	r3, [pc, #448]	; (8007a78 <main+0x1ff8>)
 80078b8:	f7f8 fdde 	bl	8000478 <__aeabi_dcmpgt>
 80078bc:	1e03      	subs	r3, r0, #0
 80078be:	d012      	beq.n	80078e6 <main+0x1e66>
	{
		is_moving[2] = 0;
 80078c0:	4b6e      	ldr	r3, [pc, #440]	; (8007a7c <main+0x1ffc>)
 80078c2:	4a6f      	ldr	r2, [pc, #444]	; (8007a80 <main+0x2000>)
 80078c4:	4694      	mov	ip, r2
 80078c6:	2220      	movs	r2, #32
 80078c8:	4690      	mov	r8, r2
 80078ca:	2208      	movs	r2, #8
 80078cc:	4691      	mov	r9, r2
 80078ce:	2208      	movs	r2, #8
 80078d0:	4692      	mov	sl, r2
 80078d2:	2208      	movs	r2, #8
 80078d4:	4693      	mov	fp, r2
 80078d6:	44bb      	add	fp, r7
 80078d8:	44da      	add	sl, fp
 80078da:	44d1      	add	r9, sl
 80078dc:	44c8      	add	r8, r9
 80078de:	44c4      	add	ip, r8
 80078e0:	4463      	add	r3, ip
 80078e2:	2200      	movs	r2, #0
 80078e4:	709a      	strb	r2, [r3, #2]
	}

	// Camera went from not moving to moving
	if (is_moving[0] == 1 || is_moving[1] == 1 || is_moving[2] == 1)
 80078e6:	4b65      	ldr	r3, [pc, #404]	; (8007a7c <main+0x1ffc>)
 80078e8:	4a65      	ldr	r2, [pc, #404]	; (8007a80 <main+0x2000>)
 80078ea:	4694      	mov	ip, r2
 80078ec:	2220      	movs	r2, #32
 80078ee:	4690      	mov	r8, r2
 80078f0:	2208      	movs	r2, #8
 80078f2:	4691      	mov	r9, r2
 80078f4:	2208      	movs	r2, #8
 80078f6:	4692      	mov	sl, r2
 80078f8:	2208      	movs	r2, #8
 80078fa:	4693      	mov	fp, r2
 80078fc:	44bb      	add	fp, r7
 80078fe:	44da      	add	sl, fp
 8007900:	44d1      	add	r9, sl
 8007902:	44c8      	add	r8, r9
 8007904:	44c4      	add	ip, r8
 8007906:	4463      	add	r3, ip
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	b25b      	sxtb	r3, r3
 800790c:	2b01      	cmp	r3, #1
 800790e:	d029      	beq.n	8007964 <main+0x1ee4>
 8007910:	4b5a      	ldr	r3, [pc, #360]	; (8007a7c <main+0x1ffc>)
 8007912:	4a5b      	ldr	r2, [pc, #364]	; (8007a80 <main+0x2000>)
 8007914:	4694      	mov	ip, r2
 8007916:	2220      	movs	r2, #32
 8007918:	4690      	mov	r8, r2
 800791a:	2208      	movs	r2, #8
 800791c:	4691      	mov	r9, r2
 800791e:	2208      	movs	r2, #8
 8007920:	4692      	mov	sl, r2
 8007922:	2208      	movs	r2, #8
 8007924:	4693      	mov	fp, r2
 8007926:	44bb      	add	fp, r7
 8007928:	44da      	add	sl, fp
 800792a:	44d1      	add	r9, sl
 800792c:	44c8      	add	r8, r9
 800792e:	44c4      	add	ip, r8
 8007930:	4463      	add	r3, ip
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	b25b      	sxtb	r3, r3
 8007936:	2b01      	cmp	r3, #1
 8007938:	d014      	beq.n	8007964 <main+0x1ee4>
 800793a:	4b50      	ldr	r3, [pc, #320]	; (8007a7c <main+0x1ffc>)
 800793c:	4a50      	ldr	r2, [pc, #320]	; (8007a80 <main+0x2000>)
 800793e:	4694      	mov	ip, r2
 8007940:	2220      	movs	r2, #32
 8007942:	4690      	mov	r8, r2
 8007944:	2208      	movs	r2, #8
 8007946:	4691      	mov	r9, r2
 8007948:	2208      	movs	r2, #8
 800794a:	4692      	mov	sl, r2
 800794c:	2208      	movs	r2, #8
 800794e:	4693      	mov	fp, r2
 8007950:	44bb      	add	fp, r7
 8007952:	44da      	add	sl, fp
 8007954:	44d1      	add	r9, sl
 8007956:	44c8      	add	r8, r9
 8007958:	44c4      	add	ip, r8
 800795a:	4463      	add	r3, ip
 800795c:	789b      	ldrb	r3, [r3, #2]
 800795e:	b25b      	sxtb	r3, r3
 8007960:	2b01      	cmp	r3, #1
 8007962:	d162      	bne.n	8007a2a <main+0x1faa>
	{
		MadgwickFilterXIO(low_pass_gyro_0, accel_data_earthframe_0, &quat_0);
 8007964:	23e0      	movs	r3, #224	; 0xe0
 8007966:	2420      	movs	r4, #32
 8007968:	2208      	movs	r2, #8
 800796a:	2108      	movs	r1, #8
 800796c:	468c      	mov	ip, r1
 800796e:	2108      	movs	r1, #8
 8007970:	4688      	mov	r8, r1
 8007972:	44b8      	add	r8, r7
 8007974:	44c4      	add	ip, r8
 8007976:	4462      	add	r2, ip
 8007978:	1912      	adds	r2, r2, r4
 800797a:	18d2      	adds	r2, r2, r3
 800797c:	4b43      	ldr	r3, [pc, #268]	; (8007a8c <main+0x200c>)
 800797e:	2108      	movs	r1, #8
 8007980:	2008      	movs	r0, #8
 8007982:	4684      	mov	ip, r0
 8007984:	2008      	movs	r0, #8
 8007986:	4680      	mov	r8, r0
 8007988:	44b8      	add	r8, r7
 800798a:	44c4      	add	ip, r8
 800798c:	4461      	add	r1, ip
 800798e:	1909      	adds	r1, r1, r4
 8007990:	18c9      	adds	r1, r1, r3
 8007992:	23a2      	movs	r3, #162	; 0xa2
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	2020      	movs	r0, #32
 8007998:	4684      	mov	ip, r0
 800799a:	2008      	movs	r0, #8
 800799c:	4680      	mov	r8, r0
 800799e:	2008      	movs	r0, #8
 80079a0:	4681      	mov	r9, r0
 80079a2:	2008      	movs	r0, #8
 80079a4:	4682      	mov	sl, r0
 80079a6:	44ba      	add	sl, r7
 80079a8:	44d1      	add	r9, sl
 80079aa:	44c8      	add	r8, r9
 80079ac:	44c4      	add	ip, r8
 80079ae:	4463      	add	r3, ip
 80079b0:	0018      	movs	r0, r3
 80079b2:	f7fc fd17 	bl	80043e4 <MadgwickFilterXIO>
		MadgwickFilterXIO(low_pass_gyro_1, accel_data_earthframe_1, &quat_1);
 80079b6:	23d0      	movs	r3, #208	; 0xd0
 80079b8:	2208      	movs	r2, #8
 80079ba:	2108      	movs	r1, #8
 80079bc:	468c      	mov	ip, r1
 80079be:	2108      	movs	r1, #8
 80079c0:	4688      	mov	r8, r1
 80079c2:	44b8      	add	r8, r7
 80079c4:	44c4      	add	ip, r8
 80079c6:	4462      	add	r2, ip
 80079c8:	1912      	adds	r2, r2, r4
 80079ca:	18d2      	adds	r2, r2, r3
 80079cc:	4b30      	ldr	r3, [pc, #192]	; (8007a90 <main+0x2010>)
 80079ce:	2108      	movs	r1, #8
 80079d0:	2008      	movs	r0, #8
 80079d2:	4684      	mov	ip, r0
 80079d4:	2008      	movs	r0, #8
 80079d6:	4680      	mov	r8, r0
 80079d8:	44b8      	add	r8, r7
 80079da:	44c4      	add	ip, r8
 80079dc:	4461      	add	r1, ip
 80079de:	1909      	adds	r1, r1, r4
 80079e0:	18c9      	adds	r1, r1, r3
 80079e2:	239c      	movs	r3, #156	; 0x9c
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	2020      	movs	r0, #32
 80079e8:	4684      	mov	ip, r0
 80079ea:	2008      	movs	r0, #8
 80079ec:	4680      	mov	r8, r0
 80079ee:	2008      	movs	r0, #8
 80079f0:	4681      	mov	r9, r0
 80079f2:	2008      	movs	r0, #8
 80079f4:	4682      	mov	sl, r0
 80079f6:	44ba      	add	sl, r7
 80079f8:	44d1      	add	r9, sl
 80079fa:	44c8      	add	r8, r9
 80079fc:	44c4      	add	ip, r8
 80079fe:	4463      	add	r3, ip
 8007a00:	0018      	movs	r0, r3
 8007a02:	f7fc fcef 	bl	80043e4 <MadgwickFilterXIO>
		was_moving = 1;
 8007a06:	4b23      	ldr	r3, [pc, #140]	; (8007a94 <main+0x2014>)
 8007a08:	2220      	movs	r2, #32
 8007a0a:	4694      	mov	ip, r2
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	4690      	mov	r8, r2
 8007a10:	2208      	movs	r2, #8
 8007a12:	4691      	mov	r9, r2
 8007a14:	2208      	movs	r2, #8
 8007a16:	4692      	mov	sl, r2
 8007a18:	44ba      	add	sl, r7
 8007a1a:	44d1      	add	r9, sl
 8007a1c:	44c8      	add	r8, r9
 8007a1e:	44c4      	add	ip, r8
 8007a20:	4463      	add	r3, ip
 8007a22:	2201      	movs	r2, #1
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	f000 ff08 	bl	800883a <main+0x2dba>
	}
	else {
		if (was_moving)
 8007a2a:	4b1a      	ldr	r3, [pc, #104]	; (8007a94 <main+0x2014>)
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	4694      	mov	ip, r2
 8007a30:	2208      	movs	r2, #8
 8007a32:	4690      	mov	r8, r2
 8007a34:	2208      	movs	r2, #8
 8007a36:	4691      	mov	r9, r2
 8007a38:	2208      	movs	r2, #8
 8007a3a:	4692      	mov	sl, r2
 8007a3c:	44ba      	add	sl, r7
 8007a3e:	44d1      	add	r9, sl
 8007a40:	44c8      	add	r8, r9
 8007a42:	44c4      	add	ip, r8
 8007a44:	4463      	add	r3, ip
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	b25b      	sxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <main+0x1fd2>
 8007a4e:	f000 fe7b 	bl	8008748 <main+0x2cc8>
		{

			// MOVING IMU
			for (uint8_t i = 0; i < TAMPERING_BUFFER_SIZE; i++)
 8007a52:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <main+0x2018>)
 8007a54:	2220      	movs	r2, #32
 8007a56:	4694      	mov	ip, r2
 8007a58:	2208      	movs	r2, #8
 8007a5a:	4690      	mov	r8, r2
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	4691      	mov	r9, r2
 8007a60:	2208      	movs	r2, #8
 8007a62:	4692      	mov	sl, r2
 8007a64:	44ba      	add	sl, r7
 8007a66:	44d1      	add	r9, sl
 8007a68:	44c8      	add	r8, r9
 8007a6a:	44c4      	add	ip, r8
 8007a6c:	4463      	add	r3, ip
 8007a6e:	2200      	movs	r2, #0
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	e166      	b.n	8007d42 <main+0x22c2>
 8007a74:	9999999a 	.word	0x9999999a
 8007a78:	bfb99999 	.word	0xbfb99999
 8007a7c:	fffff3fc 	.word	0xfffff3fc
 8007a80:	00000c08 	.word	0x00000c08
 8007a84:	fffff53c 	.word	0xfffff53c
 8007a88:	3fb99999 	.word	0x3fb99999
 8007a8c:	00000ae4 	.word	0x00000ae4
 8007a90:	00000ad8 	.word	0x00000ad8
 8007a94:	00000c03 	.word	0x00000c03
 8007a98:	00000bff 	.word	0x00000bff
			{
				accel_data_0[0] = tampering_buffer_0[0][i];
 8007a9c:	4cf7      	ldr	r4, [pc, #988]	; (8007e7c <main+0x23fc>)
 8007a9e:	2520      	movs	r5, #32
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	4694      	mov	ip, r2
 8007aa6:	2208      	movs	r2, #8
 8007aa8:	4690      	mov	r8, r2
 8007aaa:	44b8      	add	r8, r7
 8007aac:	44c4      	add	ip, r8
 8007aae:	4463      	add	r3, ip
 8007ab0:	195b      	adds	r3, r3, r5
 8007ab2:	191b      	adds	r3, r3, r4
 8007ab4:	781a      	ldrb	r2, [r3, #0]
 8007ab6:	4bf2      	ldr	r3, [pc, #968]	; (8007e80 <main+0x2400>)
 8007ab8:	49f2      	ldr	r1, [pc, #968]	; (8007e84 <main+0x2404>)
 8007aba:	468c      	mov	ip, r1
 8007abc:	2120      	movs	r1, #32
 8007abe:	4688      	mov	r8, r1
 8007ac0:	2108      	movs	r1, #8
 8007ac2:	4689      	mov	r9, r1
 8007ac4:	2108      	movs	r1, #8
 8007ac6:	468a      	mov	sl, r1
 8007ac8:	2108      	movs	r1, #8
 8007aca:	468b      	mov	fp, r1
 8007acc:	44bb      	add	fp, r7
 8007ace:	44da      	add	sl, fp
 8007ad0:	44d1      	add	r9, sl
 8007ad2:	44c8      	add	r8, r9
 8007ad4:	44c4      	add	ip, r8
 8007ad6:	4463      	add	r3, ip
 8007ad8:	0092      	lsls	r2, r2, #2
 8007ada:	58d2      	ldr	r2, [r2, r3]
 8007adc:	49ea      	ldr	r1, [pc, #936]	; (8007e88 <main+0x2408>)
 8007ade:	2308      	movs	r3, #8
 8007ae0:	2008      	movs	r0, #8
 8007ae2:	4684      	mov	ip, r0
 8007ae4:	2008      	movs	r0, #8
 8007ae6:	4680      	mov	r8, r0
 8007ae8:	44b8      	add	r8, r7
 8007aea:	44c4      	add	ip, r8
 8007aec:	4463      	add	r3, ip
 8007aee:	195b      	adds	r3, r3, r5
 8007af0:	185b      	adds	r3, r3, r1
 8007af2:	601a      	str	r2, [r3, #0]
				accel_data_0[1] = tampering_buffer_0[1][i];
 8007af4:	2308      	movs	r3, #8
 8007af6:	2208      	movs	r2, #8
 8007af8:	4694      	mov	ip, r2
 8007afa:	2208      	movs	r2, #8
 8007afc:	4690      	mov	r8, r2
 8007afe:	44b8      	add	r8, r7
 8007b00:	44c4      	add	ip, r8
 8007b02:	4463      	add	r3, ip
 8007b04:	195b      	adds	r3, r3, r5
 8007b06:	191b      	adds	r3, r3, r4
 8007b08:	781a      	ldrb	r2, [r3, #0]
 8007b0a:	4bdd      	ldr	r3, [pc, #884]	; (8007e80 <main+0x2400>)
 8007b0c:	48dd      	ldr	r0, [pc, #884]	; (8007e84 <main+0x2404>)
 8007b0e:	4684      	mov	ip, r0
 8007b10:	2020      	movs	r0, #32
 8007b12:	4680      	mov	r8, r0
 8007b14:	2008      	movs	r0, #8
 8007b16:	4681      	mov	r9, r0
 8007b18:	2008      	movs	r0, #8
 8007b1a:	4682      	mov	sl, r0
 8007b1c:	2008      	movs	r0, #8
 8007b1e:	4683      	mov	fp, r0
 8007b20:	44bb      	add	fp, r7
 8007b22:	44da      	add	sl, fp
 8007b24:	44d1      	add	r9, sl
 8007b26:	44c8      	add	r8, r9
 8007b28:	44c4      	add	ip, r8
 8007b2a:	4463      	add	r3, ip
 8007b2c:	3232      	adds	r2, #50	; 0x32
 8007b2e:	0092      	lsls	r2, r2, #2
 8007b30:	58d2      	ldr	r2, [r2, r3]
 8007b32:	2308      	movs	r3, #8
 8007b34:	2008      	movs	r0, #8
 8007b36:	4684      	mov	ip, r0
 8007b38:	2008      	movs	r0, #8
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	44b8      	add	r8, r7
 8007b3e:	44c4      	add	ip, r8
 8007b40:	4463      	add	r3, ip
 8007b42:	195b      	adds	r3, r3, r5
 8007b44:	185b      	adds	r3, r3, r1
 8007b46:	605a      	str	r2, [r3, #4]
				accel_data_0[2] = tampering_buffer_0[2][i];
 8007b48:	2308      	movs	r3, #8
 8007b4a:	2208      	movs	r2, #8
 8007b4c:	4694      	mov	ip, r2
 8007b4e:	2208      	movs	r2, #8
 8007b50:	4690      	mov	r8, r2
 8007b52:	44b8      	add	r8, r7
 8007b54:	44c4      	add	ip, r8
 8007b56:	4463      	add	r3, ip
 8007b58:	195b      	adds	r3, r3, r5
 8007b5a:	191b      	adds	r3, r3, r4
 8007b5c:	781a      	ldrb	r2, [r3, #0]
 8007b5e:	4bc8      	ldr	r3, [pc, #800]	; (8007e80 <main+0x2400>)
 8007b60:	48c8      	ldr	r0, [pc, #800]	; (8007e84 <main+0x2404>)
 8007b62:	4684      	mov	ip, r0
 8007b64:	2020      	movs	r0, #32
 8007b66:	4680      	mov	r8, r0
 8007b68:	2008      	movs	r0, #8
 8007b6a:	4681      	mov	r9, r0
 8007b6c:	2008      	movs	r0, #8
 8007b6e:	4682      	mov	sl, r0
 8007b70:	2008      	movs	r0, #8
 8007b72:	4683      	mov	fp, r0
 8007b74:	44bb      	add	fp, r7
 8007b76:	44da      	add	sl, fp
 8007b78:	44d1      	add	r9, sl
 8007b7a:	44c8      	add	r8, r9
 8007b7c:	44c4      	add	ip, r8
 8007b7e:	4463      	add	r3, ip
 8007b80:	3264      	adds	r2, #100	; 0x64
 8007b82:	0092      	lsls	r2, r2, #2
 8007b84:	58d2      	ldr	r2, [r2, r3]
 8007b86:	2308      	movs	r3, #8
 8007b88:	2008      	movs	r0, #8
 8007b8a:	4684      	mov	ip, r0
 8007b8c:	2008      	movs	r0, #8
 8007b8e:	4680      	mov	r8, r0
 8007b90:	44b8      	add	r8, r7
 8007b92:	44c4      	add	ip, r8
 8007b94:	4463      	add	r3, ip
 8007b96:	195b      	adds	r3, r3, r5
 8007b98:	185b      	adds	r3, r3, r1
 8007b9a:	609a      	str	r2, [r3, #8]
				gyro_data_0[0] = tampering_buffer_0[3][i];
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	2208      	movs	r2, #8
 8007ba0:	4694      	mov	ip, r2
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	4690      	mov	r8, r2
 8007ba6:	44b8      	add	r8, r7
 8007ba8:	44c4      	add	ip, r8
 8007baa:	4463      	add	r3, ip
 8007bac:	195b      	adds	r3, r3, r5
 8007bae:	191b      	adds	r3, r3, r4
 8007bb0:	781a      	ldrb	r2, [r3, #0]
 8007bb2:	4bb3      	ldr	r3, [pc, #716]	; (8007e80 <main+0x2400>)
 8007bb4:	48b3      	ldr	r0, [pc, #716]	; (8007e84 <main+0x2404>)
 8007bb6:	4684      	mov	ip, r0
 8007bb8:	2020      	movs	r0, #32
 8007bba:	4680      	mov	r8, r0
 8007bbc:	2008      	movs	r0, #8
 8007bbe:	4681      	mov	r9, r0
 8007bc0:	2008      	movs	r0, #8
 8007bc2:	4682      	mov	sl, r0
 8007bc4:	2008      	movs	r0, #8
 8007bc6:	4683      	mov	fp, r0
 8007bc8:	44bb      	add	fp, r7
 8007bca:	44da      	add	sl, fp
 8007bcc:	44d1      	add	r9, sl
 8007bce:	44c8      	add	r8, r9
 8007bd0:	44c4      	add	ip, r8
 8007bd2:	4463      	add	r3, ip
 8007bd4:	3296      	adds	r2, #150	; 0x96
 8007bd6:	0092      	lsls	r2, r2, #2
 8007bd8:	58d2      	ldr	r2, [r2, r3]
 8007bda:	4bac      	ldr	r3, [pc, #688]	; (8007e8c <main+0x240c>)
 8007bdc:	48a9      	ldr	r0, [pc, #676]	; (8007e84 <main+0x2404>)
 8007bde:	4684      	mov	ip, r0
 8007be0:	2020      	movs	r0, #32
 8007be2:	4680      	mov	r8, r0
 8007be4:	2008      	movs	r0, #8
 8007be6:	4681      	mov	r9, r0
 8007be8:	2008      	movs	r0, #8
 8007bea:	4682      	mov	sl, r0
 8007bec:	2008      	movs	r0, #8
 8007bee:	4683      	mov	fp, r0
 8007bf0:	44bb      	add	fp, r7
 8007bf2:	44da      	add	sl, fp
 8007bf4:	44d1      	add	r9, sl
 8007bf6:	44c8      	add	r8, r9
 8007bf8:	44c4      	add	ip, r8
 8007bfa:	4463      	add	r3, ip
 8007bfc:	601a      	str	r2, [r3, #0]
				gyro_data_0[1] = tampering_buffer_0[4][i];
 8007bfe:	2308      	movs	r3, #8
 8007c00:	2208      	movs	r2, #8
 8007c02:	4694      	mov	ip, r2
 8007c04:	2208      	movs	r2, #8
 8007c06:	4690      	mov	r8, r2
 8007c08:	44b8      	add	r8, r7
 8007c0a:	44c4      	add	ip, r8
 8007c0c:	4463      	add	r3, ip
 8007c0e:	195b      	adds	r3, r3, r5
 8007c10:	191b      	adds	r3, r3, r4
 8007c12:	781a      	ldrb	r2, [r3, #0]
 8007c14:	4b9a      	ldr	r3, [pc, #616]	; (8007e80 <main+0x2400>)
 8007c16:	489b      	ldr	r0, [pc, #620]	; (8007e84 <main+0x2404>)
 8007c18:	4684      	mov	ip, r0
 8007c1a:	2020      	movs	r0, #32
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	2008      	movs	r0, #8
 8007c20:	4681      	mov	r9, r0
 8007c22:	2008      	movs	r0, #8
 8007c24:	4682      	mov	sl, r0
 8007c26:	2008      	movs	r0, #8
 8007c28:	4683      	mov	fp, r0
 8007c2a:	44bb      	add	fp, r7
 8007c2c:	44da      	add	sl, fp
 8007c2e:	44d1      	add	r9, sl
 8007c30:	44c8      	add	r8, r9
 8007c32:	44c4      	add	ip, r8
 8007c34:	4463      	add	r3, ip
 8007c36:	32c8      	adds	r2, #200	; 0xc8
 8007c38:	0092      	lsls	r2, r2, #2
 8007c3a:	58d2      	ldr	r2, [r2, r3]
 8007c3c:	4b93      	ldr	r3, [pc, #588]	; (8007e8c <main+0x240c>)
 8007c3e:	4891      	ldr	r0, [pc, #580]	; (8007e84 <main+0x2404>)
 8007c40:	4684      	mov	ip, r0
 8007c42:	2020      	movs	r0, #32
 8007c44:	4680      	mov	r8, r0
 8007c46:	2008      	movs	r0, #8
 8007c48:	4681      	mov	r9, r0
 8007c4a:	2008      	movs	r0, #8
 8007c4c:	4682      	mov	sl, r0
 8007c4e:	2008      	movs	r0, #8
 8007c50:	4683      	mov	fp, r0
 8007c52:	44bb      	add	fp, r7
 8007c54:	44da      	add	sl, fp
 8007c56:	44d1      	add	r9, sl
 8007c58:	44c8      	add	r8, r9
 8007c5a:	44c4      	add	ip, r8
 8007c5c:	4463      	add	r3, ip
 8007c5e:	605a      	str	r2, [r3, #4]
				gyro_data_0[2] = tampering_buffer_0[5][i];
 8007c60:	2308      	movs	r3, #8
 8007c62:	2208      	movs	r2, #8
 8007c64:	4694      	mov	ip, r2
 8007c66:	2208      	movs	r2, #8
 8007c68:	4690      	mov	r8, r2
 8007c6a:	44b8      	add	r8, r7
 8007c6c:	44c4      	add	ip, r8
 8007c6e:	4463      	add	r3, ip
 8007c70:	195b      	adds	r3, r3, r5
 8007c72:	191b      	adds	r3, r3, r4
 8007c74:	781a      	ldrb	r2, [r3, #0]
 8007c76:	4b82      	ldr	r3, [pc, #520]	; (8007e80 <main+0x2400>)
 8007c78:	4882      	ldr	r0, [pc, #520]	; (8007e84 <main+0x2404>)
 8007c7a:	4684      	mov	ip, r0
 8007c7c:	2020      	movs	r0, #32
 8007c7e:	4680      	mov	r8, r0
 8007c80:	2008      	movs	r0, #8
 8007c82:	4681      	mov	r9, r0
 8007c84:	2008      	movs	r0, #8
 8007c86:	4682      	mov	sl, r0
 8007c88:	2008      	movs	r0, #8
 8007c8a:	4683      	mov	fp, r0
 8007c8c:	44bb      	add	fp, r7
 8007c8e:	44da      	add	sl, fp
 8007c90:	44d1      	add	r9, sl
 8007c92:	44c8      	add	r8, r9
 8007c94:	44c4      	add	ip, r8
 8007c96:	4463      	add	r3, ip
 8007c98:	32fa      	adds	r2, #250	; 0xfa
 8007c9a:	0092      	lsls	r2, r2, #2
 8007c9c:	58d2      	ldr	r2, [r2, r3]
 8007c9e:	4b7b      	ldr	r3, [pc, #492]	; (8007e8c <main+0x240c>)
 8007ca0:	4878      	ldr	r0, [pc, #480]	; (8007e84 <main+0x2404>)
 8007ca2:	4684      	mov	ip, r0
 8007ca4:	2020      	movs	r0, #32
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	2008      	movs	r0, #8
 8007caa:	4681      	mov	r9, r0
 8007cac:	2008      	movs	r0, #8
 8007cae:	4682      	mov	sl, r0
 8007cb0:	2008      	movs	r0, #8
 8007cb2:	4683      	mov	fp, r0
 8007cb4:	44bb      	add	fp, r7
 8007cb6:	44da      	add	sl, fp
 8007cb8:	44d1      	add	r9, sl
 8007cba:	44c8      	add	r8, r9
 8007cbc:	44c4      	add	ip, r8
 8007cbe:	4463      	add	r3, ip
 8007cc0:	609a      	str	r2, [r3, #8]
				MadgwickFilterXIO(gyro_data_0, accel_data_0, &quat_buffer_0);
 8007cc2:	23c0      	movs	r3, #192	; 0xc0
 8007cc4:	2208      	movs	r2, #8
 8007cc6:	2008      	movs	r0, #8
 8007cc8:	4684      	mov	ip, r0
 8007cca:	2008      	movs	r0, #8
 8007ccc:	4680      	mov	r8, r0
 8007cce:	44b8      	add	r8, r7
 8007cd0:	44c4      	add	ip, r8
 8007cd2:	4462      	add	r2, ip
 8007cd4:	1952      	adds	r2, r2, r5
 8007cd6:	18d2      	adds	r2, r2, r3
 8007cd8:	2320      	movs	r3, #32
 8007cda:	469c      	mov	ip, r3
 8007cdc:	2308      	movs	r3, #8
 8007cde:	4698      	mov	r8, r3
 8007ce0:	2308      	movs	r3, #8
 8007ce2:	4699      	mov	r9, r3
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	469a      	mov	sl, r3
 8007ce8:	44ba      	add	sl, r7
 8007cea:	44d1      	add	r9, sl
 8007cec:	44c8      	add	r8, r9
 8007cee:	44c4      	add	ip, r8
 8007cf0:	4461      	add	r1, ip
 8007cf2:	4b67      	ldr	r3, [pc, #412]	; (8007e90 <main+0x2410>)
 8007cf4:	2020      	movs	r0, #32
 8007cf6:	4684      	mov	ip, r0
 8007cf8:	2008      	movs	r0, #8
 8007cfa:	4680      	mov	r8, r0
 8007cfc:	2008      	movs	r0, #8
 8007cfe:	4681      	mov	r9, r0
 8007d00:	2008      	movs	r0, #8
 8007d02:	4682      	mov	sl, r0
 8007d04:	44ba      	add	sl, r7
 8007d06:	44d1      	add	r9, sl
 8007d08:	44c8      	add	r8, r9
 8007d0a:	44c4      	add	ip, r8
 8007d0c:	4463      	add	r3, ip
 8007d0e:	0018      	movs	r0, r3
 8007d10:	f7fc fb68 	bl	80043e4 <MadgwickFilterXIO>
			for (uint8_t i = 0; i < TAMPERING_BUFFER_SIZE; i++)
 8007d14:	2308      	movs	r3, #8
 8007d16:	2208      	movs	r2, #8
 8007d18:	4694      	mov	ip, r2
 8007d1a:	2208      	movs	r2, #8
 8007d1c:	4690      	mov	r8, r2
 8007d1e:	44b8      	add	r8, r7
 8007d20:	44c4      	add	ip, r8
 8007d22:	4463      	add	r3, ip
 8007d24:	195b      	adds	r3, r3, r5
 8007d26:	191b      	adds	r3, r3, r4
 8007d28:	781a      	ldrb	r2, [r3, #0]
 8007d2a:	2308      	movs	r3, #8
 8007d2c:	2108      	movs	r1, #8
 8007d2e:	468c      	mov	ip, r1
 8007d30:	2108      	movs	r1, #8
 8007d32:	4688      	mov	r8, r1
 8007d34:	44b8      	add	r8, r7
 8007d36:	44c4      	add	ip, r8
 8007d38:	4463      	add	r3, ip
 8007d3a:	195b      	adds	r3, r3, r5
 8007d3c:	191b      	adds	r3, r3, r4
 8007d3e:	3201      	adds	r2, #1
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	4b4e      	ldr	r3, [pc, #312]	; (8007e7c <main+0x23fc>)
 8007d44:	2220      	movs	r2, #32
 8007d46:	4694      	mov	ip, r2
 8007d48:	2208      	movs	r2, #8
 8007d4a:	4690      	mov	r8, r2
 8007d4c:	2208      	movs	r2, #8
 8007d4e:	4691      	mov	r9, r2
 8007d50:	2208      	movs	r2, #8
 8007d52:	4692      	mov	sl, r2
 8007d54:	44ba      	add	sl, r7
 8007d56:	44d1      	add	r9, sl
 8007d58:	44c8      	add	r8, r9
 8007d5a:	44c4      	add	ip, r8
 8007d5c:	4463      	add	r3, ip
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b31      	cmp	r3, #49	; 0x31
 8007d62:	d800      	bhi.n	8007d66 <main+0x22e6>
 8007d64:	e69a      	b.n	8007a9c <main+0x201c>
			}

			// Calc buffer and remove interpolated error
			CalcQuaternionToEuler(quat_buffer_0, &angles_buffer_0);
 8007d66:	4b4b      	ldr	r3, [pc, #300]	; (8007e94 <main+0x2414>)
 8007d68:	4a46      	ldr	r2, [pc, #280]	; (8007e84 <main+0x2404>)
 8007d6a:	4694      	mov	ip, r2
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	4690      	mov	r8, r2
 8007d70:	2208      	movs	r2, #8
 8007d72:	4691      	mov	r9, r2
 8007d74:	2208      	movs	r2, #8
 8007d76:	4692      	mov	sl, r2
 8007d78:	2208      	movs	r2, #8
 8007d7a:	4693      	mov	fp, r2
 8007d7c:	44bb      	add	fp, r7
 8007d7e:	44da      	add	sl, fp
 8007d80:	44d1      	add	r9, sl
 8007d82:	44c8      	add	r8, r9
 8007d84:	44c4      	add	ip, r8
 8007d86:	4463      	add	r3, ip
 8007d88:	248c      	movs	r4, #140	; 0x8c
 8007d8a:	2620      	movs	r6, #32
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	2108      	movs	r1, #8
 8007d90:	468c      	mov	ip, r1
 8007d92:	2108      	movs	r1, #8
 8007d94:	4688      	mov	r8, r1
 8007d96:	44b8      	add	r8, r7
 8007d98:	44c4      	add	ip, r8
 8007d9a:	4462      	add	r2, ip
 8007d9c:	1992      	adds	r2, r2, r6
 8007d9e:	1912      	adds	r2, r2, r4
 8007da0:	9200      	str	r2, [sp, #0]
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	6859      	ldr	r1, [r3, #4]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f7fc f903 	bl	8003fb4 <CalcQuaternionToEuler>
			//angles_buffer_0.yaw -= CalcPoly32Error(angles_buffer_0.yaw, 90 - angles_buffer_0.roll);
			//angles_buffer_0.roll -= CalcPoly23Error(angles_buffer_0.yaw, 90 - angles_buffer_0.roll);

			// Calc buffer and remove interpolated error
			CalcQuaternionToEuler(quat_0, &angles_0);
 8007dae:	4b3a      	ldr	r3, [pc, #232]	; (8007e98 <main+0x2418>)
 8007db0:	4a34      	ldr	r2, [pc, #208]	; (8007e84 <main+0x2404>)
 8007db2:	4694      	mov	ip, r2
 8007db4:	2220      	movs	r2, #32
 8007db6:	4690      	mov	r8, r2
 8007db8:	2208      	movs	r2, #8
 8007dba:	4691      	mov	r9, r2
 8007dbc:	2208      	movs	r2, #8
 8007dbe:	4692      	mov	sl, r2
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	4693      	mov	fp, r2
 8007dc4:	44bb      	add	fp, r7
 8007dc6:	44da      	add	sl, fp
 8007dc8:	44d1      	add	r9, sl
 8007dca:	44c8      	add	r8, r9
 8007dcc:	44c4      	add	ip, r8
 8007dce:	4463      	add	r3, ip
 8007dd0:	25a4      	movs	r5, #164	; 0xa4
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	2108      	movs	r1, #8
 8007dd6:	468c      	mov	ip, r1
 8007dd8:	2108      	movs	r1, #8
 8007dda:	4688      	mov	r8, r1
 8007ddc:	44b8      	add	r8, r7
 8007dde:	44c4      	add	ip, r8
 8007de0:	4462      	add	r2, ip
 8007de2:	1992      	adds	r2, r2, r6
 8007de4:	1952      	adds	r2, r2, r5
 8007de6:	9200      	str	r2, [sp, #0]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	6859      	ldr	r1, [r3, #4]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f7fc f8e0 	bl	8003fb4 <CalcQuaternionToEuler>
			//angles_0.yaw -= CalcPoly32Error(angles_0.yaw, 90 - angles_0.roll);
			//angles_0.roll += CalcPoly23Error(angles_0.yaw, 90 - angles_0.roll);

			CalcAngleDifference(&diff_0, &angles_0, &prev_0, &angles_buffer_0);
 8007df4:	2308      	movs	r3, #8
 8007df6:	2208      	movs	r2, #8
 8007df8:	4694      	mov	ip, r2
 8007dfa:	2208      	movs	r2, #8
 8007dfc:	4690      	mov	r8, r2
 8007dfe:	44b8      	add	r8, r7
 8007e00:	44c4      	add	ip, r8
 8007e02:	4463      	add	r3, ip
 8007e04:	199b      	adds	r3, r3, r6
 8007e06:	191b      	adds	r3, r3, r4
 8007e08:	225c      	movs	r2, #92	; 0x5c
 8007e0a:	2120      	movs	r1, #32
 8007e0c:	468c      	mov	ip, r1
 8007e0e:	2108      	movs	r1, #8
 8007e10:	4688      	mov	r8, r1
 8007e12:	2108      	movs	r1, #8
 8007e14:	4689      	mov	r9, r1
 8007e16:	2108      	movs	r1, #8
 8007e18:	468a      	mov	sl, r1
 8007e1a:	44ba      	add	sl, r7
 8007e1c:	44d1      	add	r9, sl
 8007e1e:	44c8      	add	r8, r9
 8007e20:	44c4      	add	ip, r8
 8007e22:	4462      	add	r2, ip
 8007e24:	2108      	movs	r1, #8
 8007e26:	2008      	movs	r0, #8
 8007e28:	4684      	mov	ip, r0
 8007e2a:	2008      	movs	r0, #8
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	44b8      	add	r8, r7
 8007e30:	44c4      	add	ip, r8
 8007e32:	4461      	add	r1, ip
 8007e34:	1989      	adds	r1, r1, r6
 8007e36:	1949      	adds	r1, r1, r5
 8007e38:	2074      	movs	r0, #116	; 0x74
 8007e3a:	2420      	movs	r4, #32
 8007e3c:	46a4      	mov	ip, r4
 8007e3e:	2408      	movs	r4, #8
 8007e40:	46a0      	mov	r8, r4
 8007e42:	2408      	movs	r4, #8
 8007e44:	46a1      	mov	r9, r4
 8007e46:	2408      	movs	r4, #8
 8007e48:	46a2      	mov	sl, r4
 8007e4a:	44ba      	add	sl, r7
 8007e4c:	44d1      	add	r9, sl
 8007e4e:	44c8      	add	r8, r9
 8007e50:	44c4      	add	ip, r8
 8007e52:	4460      	add	r0, ip
 8007e54:	f7fc f9a4 	bl	80041a0 <CalcAngleDifference>

			for (uint8_t i = 0; i < TAMPERING_BUFFER_SIZE; i++)
 8007e58:	4b10      	ldr	r3, [pc, #64]	; (8007e9c <main+0x241c>)
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	4694      	mov	ip, r2
 8007e5e:	2208      	movs	r2, #8
 8007e60:	4690      	mov	r8, r2
 8007e62:	2208      	movs	r2, #8
 8007e64:	4691      	mov	r9, r2
 8007e66:	2208      	movs	r2, #8
 8007e68:	4692      	mov	sl, r2
 8007e6a:	44ba      	add	sl, r7
 8007e6c:	44d1      	add	r9, sl
 8007e6e:	44c8      	add	r8, r9
 8007e70:	44c4      	add	ip, r8
 8007e72:	4463      	add	r3, ip
 8007e74:	2200      	movs	r2, #0
 8007e76:	701a      	strb	r2, [r3, #0]
 8007e78:	e179      	b.n	800816e <main+0x26ee>
 8007e7a:	46c0      	nop			; (mov r8, r8)
 8007e7c:	00000bff 	.word	0x00000bff
 8007e80:	fffff9f8 	.word	0xfffff9f8
 8007e84:	00000c08 	.word	0x00000c08
 8007e88:	00000b14 	.word	0x00000b14
 8007e8c:	fffffef4 	.word	0xfffffef4
 8007e90:	00000afc 	.word	0x00000afc
 8007e94:	fffff4b8 	.word	0xfffff4b8
 8007e98:	fffff4d8 	.word	0xfffff4d8
 8007e9c:	00000bfe 	.word	0x00000bfe
			{
				accel_data_1[0] = tampering_buffer_1[0][i];
 8007ea0:	4cfd      	ldr	r4, [pc, #1012]	; (8008298 <main+0x2818>)
 8007ea2:	2020      	movs	r0, #32
 8007ea4:	2308      	movs	r3, #8
 8007ea6:	2208      	movs	r2, #8
 8007ea8:	4694      	mov	ip, r2
 8007eaa:	2208      	movs	r2, #8
 8007eac:	4690      	mov	r8, r2
 8007eae:	44b8      	add	r8, r7
 8007eb0:	44c4      	add	ip, r8
 8007eb2:	4463      	add	r3, ip
 8007eb4:	181b      	adds	r3, r3, r0
 8007eb6:	191b      	adds	r3, r3, r4
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	4bf8      	ldr	r3, [pc, #992]	; (800829c <main+0x281c>)
 8007ebc:	49f8      	ldr	r1, [pc, #992]	; (80082a0 <main+0x2820>)
 8007ebe:	468c      	mov	ip, r1
 8007ec0:	2120      	movs	r1, #32
 8007ec2:	4688      	mov	r8, r1
 8007ec4:	2108      	movs	r1, #8
 8007ec6:	4689      	mov	r9, r1
 8007ec8:	2108      	movs	r1, #8
 8007eca:	468a      	mov	sl, r1
 8007ecc:	2108      	movs	r1, #8
 8007ece:	468b      	mov	fp, r1
 8007ed0:	44bb      	add	fp, r7
 8007ed2:	44da      	add	sl, fp
 8007ed4:	44d1      	add	r9, sl
 8007ed6:	44c8      	add	r8, r9
 8007ed8:	44c4      	add	ip, r8
 8007eda:	4463      	add	r3, ip
 8007edc:	0092      	lsls	r2, r2, #2
 8007ede:	58d2      	ldr	r2, [r2, r3]
 8007ee0:	4bf0      	ldr	r3, [pc, #960]	; (80082a4 <main+0x2824>)
 8007ee2:	49ef      	ldr	r1, [pc, #956]	; (80082a0 <main+0x2820>)
 8007ee4:	468c      	mov	ip, r1
 8007ee6:	2120      	movs	r1, #32
 8007ee8:	4688      	mov	r8, r1
 8007eea:	2108      	movs	r1, #8
 8007eec:	4689      	mov	r9, r1
 8007eee:	2108      	movs	r1, #8
 8007ef0:	468a      	mov	sl, r1
 8007ef2:	2108      	movs	r1, #8
 8007ef4:	468b      	mov	fp, r1
 8007ef6:	44bb      	add	fp, r7
 8007ef8:	44da      	add	sl, fp
 8007efa:	44d1      	add	r9, sl
 8007efc:	44c8      	add	r8, r9
 8007efe:	44c4      	add	ip, r8
 8007f00:	4463      	add	r3, ip
 8007f02:	601a      	str	r2, [r3, #0]
				accel_data_1[1] = tampering_buffer_1[1][i];
 8007f04:	2308      	movs	r3, #8
 8007f06:	2208      	movs	r2, #8
 8007f08:	4694      	mov	ip, r2
 8007f0a:	2208      	movs	r2, #8
 8007f0c:	4690      	mov	r8, r2
 8007f0e:	44b8      	add	r8, r7
 8007f10:	44c4      	add	ip, r8
 8007f12:	4463      	add	r3, ip
 8007f14:	181b      	adds	r3, r3, r0
 8007f16:	191b      	adds	r3, r3, r4
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	4be0      	ldr	r3, [pc, #896]	; (800829c <main+0x281c>)
 8007f1c:	49e0      	ldr	r1, [pc, #896]	; (80082a0 <main+0x2820>)
 8007f1e:	468c      	mov	ip, r1
 8007f20:	2120      	movs	r1, #32
 8007f22:	4688      	mov	r8, r1
 8007f24:	2108      	movs	r1, #8
 8007f26:	4689      	mov	r9, r1
 8007f28:	2108      	movs	r1, #8
 8007f2a:	468a      	mov	sl, r1
 8007f2c:	2108      	movs	r1, #8
 8007f2e:	468b      	mov	fp, r1
 8007f30:	44bb      	add	fp, r7
 8007f32:	44da      	add	sl, fp
 8007f34:	44d1      	add	r9, sl
 8007f36:	44c8      	add	r8, r9
 8007f38:	44c4      	add	ip, r8
 8007f3a:	4463      	add	r3, ip
 8007f3c:	3232      	adds	r2, #50	; 0x32
 8007f3e:	0092      	lsls	r2, r2, #2
 8007f40:	58d2      	ldr	r2, [r2, r3]
 8007f42:	4bd8      	ldr	r3, [pc, #864]	; (80082a4 <main+0x2824>)
 8007f44:	49d6      	ldr	r1, [pc, #856]	; (80082a0 <main+0x2820>)
 8007f46:	468c      	mov	ip, r1
 8007f48:	2120      	movs	r1, #32
 8007f4a:	4688      	mov	r8, r1
 8007f4c:	2108      	movs	r1, #8
 8007f4e:	4689      	mov	r9, r1
 8007f50:	2108      	movs	r1, #8
 8007f52:	468a      	mov	sl, r1
 8007f54:	2108      	movs	r1, #8
 8007f56:	468b      	mov	fp, r1
 8007f58:	44bb      	add	fp, r7
 8007f5a:	44da      	add	sl, fp
 8007f5c:	44d1      	add	r9, sl
 8007f5e:	44c8      	add	r8, r9
 8007f60:	44c4      	add	ip, r8
 8007f62:	4463      	add	r3, ip
 8007f64:	605a      	str	r2, [r3, #4]
				accel_data_1[2] = tampering_buffer_1[2][i];
 8007f66:	2308      	movs	r3, #8
 8007f68:	2208      	movs	r2, #8
 8007f6a:	4694      	mov	ip, r2
 8007f6c:	2208      	movs	r2, #8
 8007f6e:	4690      	mov	r8, r2
 8007f70:	44b8      	add	r8, r7
 8007f72:	44c4      	add	ip, r8
 8007f74:	4463      	add	r3, ip
 8007f76:	181b      	adds	r3, r3, r0
 8007f78:	191b      	adds	r3, r3, r4
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	4bc7      	ldr	r3, [pc, #796]	; (800829c <main+0x281c>)
 8007f7e:	49c8      	ldr	r1, [pc, #800]	; (80082a0 <main+0x2820>)
 8007f80:	468c      	mov	ip, r1
 8007f82:	2120      	movs	r1, #32
 8007f84:	4688      	mov	r8, r1
 8007f86:	2108      	movs	r1, #8
 8007f88:	4689      	mov	r9, r1
 8007f8a:	2108      	movs	r1, #8
 8007f8c:	468a      	mov	sl, r1
 8007f8e:	2108      	movs	r1, #8
 8007f90:	468b      	mov	fp, r1
 8007f92:	44bb      	add	fp, r7
 8007f94:	44da      	add	sl, fp
 8007f96:	44d1      	add	r9, sl
 8007f98:	44c8      	add	r8, r9
 8007f9a:	44c4      	add	ip, r8
 8007f9c:	4463      	add	r3, ip
 8007f9e:	3264      	adds	r2, #100	; 0x64
 8007fa0:	0092      	lsls	r2, r2, #2
 8007fa2:	58d2      	ldr	r2, [r2, r3]
 8007fa4:	4bbf      	ldr	r3, [pc, #764]	; (80082a4 <main+0x2824>)
 8007fa6:	49be      	ldr	r1, [pc, #760]	; (80082a0 <main+0x2820>)
 8007fa8:	468c      	mov	ip, r1
 8007faa:	2120      	movs	r1, #32
 8007fac:	4688      	mov	r8, r1
 8007fae:	2108      	movs	r1, #8
 8007fb0:	4689      	mov	r9, r1
 8007fb2:	2108      	movs	r1, #8
 8007fb4:	468a      	mov	sl, r1
 8007fb6:	2108      	movs	r1, #8
 8007fb8:	468b      	mov	fp, r1
 8007fba:	44bb      	add	fp, r7
 8007fbc:	44da      	add	sl, fp
 8007fbe:	44d1      	add	r9, sl
 8007fc0:	44c8      	add	r8, r9
 8007fc2:	44c4      	add	ip, r8
 8007fc4:	4463      	add	r3, ip
 8007fc6:	609a      	str	r2, [r3, #8]
				gyro_data_1[0] = tampering_buffer_1[3][i];
 8007fc8:	2308      	movs	r3, #8
 8007fca:	2208      	movs	r2, #8
 8007fcc:	4694      	mov	ip, r2
 8007fce:	2208      	movs	r2, #8
 8007fd0:	4690      	mov	r8, r2
 8007fd2:	44b8      	add	r8, r7
 8007fd4:	44c4      	add	ip, r8
 8007fd6:	4463      	add	r3, ip
 8007fd8:	181b      	adds	r3, r3, r0
 8007fda:	191b      	adds	r3, r3, r4
 8007fdc:	781a      	ldrb	r2, [r3, #0]
 8007fde:	4baf      	ldr	r3, [pc, #700]	; (800829c <main+0x281c>)
 8007fe0:	49af      	ldr	r1, [pc, #700]	; (80082a0 <main+0x2820>)
 8007fe2:	468c      	mov	ip, r1
 8007fe4:	2120      	movs	r1, #32
 8007fe6:	4688      	mov	r8, r1
 8007fe8:	2108      	movs	r1, #8
 8007fea:	4689      	mov	r9, r1
 8007fec:	2108      	movs	r1, #8
 8007fee:	468a      	mov	sl, r1
 8007ff0:	2108      	movs	r1, #8
 8007ff2:	468b      	mov	fp, r1
 8007ff4:	44bb      	add	fp, r7
 8007ff6:	44da      	add	sl, fp
 8007ff8:	44d1      	add	r9, sl
 8007ffa:	44c8      	add	r8, r9
 8007ffc:	44c4      	add	ip, r8
 8007ffe:	4463      	add	r3, ip
 8008000:	3296      	adds	r2, #150	; 0x96
 8008002:	0092      	lsls	r2, r2, #2
 8008004:	58d2      	ldr	r2, [r2, r3]
 8008006:	4ba8      	ldr	r3, [pc, #672]	; (80082a8 <main+0x2828>)
 8008008:	49a5      	ldr	r1, [pc, #660]	; (80082a0 <main+0x2820>)
 800800a:	468c      	mov	ip, r1
 800800c:	2120      	movs	r1, #32
 800800e:	4688      	mov	r8, r1
 8008010:	2108      	movs	r1, #8
 8008012:	4689      	mov	r9, r1
 8008014:	2108      	movs	r1, #8
 8008016:	468a      	mov	sl, r1
 8008018:	2108      	movs	r1, #8
 800801a:	468b      	mov	fp, r1
 800801c:	44bb      	add	fp, r7
 800801e:	44da      	add	sl, fp
 8008020:	44d1      	add	r9, sl
 8008022:	44c8      	add	r8, r9
 8008024:	44c4      	add	ip, r8
 8008026:	4463      	add	r3, ip
 8008028:	601a      	str	r2, [r3, #0]
				gyro_data_1[1] = tampering_buffer_1[4][i];
 800802a:	2308      	movs	r3, #8
 800802c:	2208      	movs	r2, #8
 800802e:	4694      	mov	ip, r2
 8008030:	2208      	movs	r2, #8
 8008032:	4690      	mov	r8, r2
 8008034:	44b8      	add	r8, r7
 8008036:	44c4      	add	ip, r8
 8008038:	4463      	add	r3, ip
 800803a:	181b      	adds	r3, r3, r0
 800803c:	191b      	adds	r3, r3, r4
 800803e:	781a      	ldrb	r2, [r3, #0]
 8008040:	4b96      	ldr	r3, [pc, #600]	; (800829c <main+0x281c>)
 8008042:	4997      	ldr	r1, [pc, #604]	; (80082a0 <main+0x2820>)
 8008044:	468c      	mov	ip, r1
 8008046:	2120      	movs	r1, #32
 8008048:	4688      	mov	r8, r1
 800804a:	2108      	movs	r1, #8
 800804c:	4689      	mov	r9, r1
 800804e:	2108      	movs	r1, #8
 8008050:	468a      	mov	sl, r1
 8008052:	2108      	movs	r1, #8
 8008054:	468b      	mov	fp, r1
 8008056:	44bb      	add	fp, r7
 8008058:	44da      	add	sl, fp
 800805a:	44d1      	add	r9, sl
 800805c:	44c8      	add	r8, r9
 800805e:	44c4      	add	ip, r8
 8008060:	4463      	add	r3, ip
 8008062:	32c8      	adds	r2, #200	; 0xc8
 8008064:	0092      	lsls	r2, r2, #2
 8008066:	58d2      	ldr	r2, [r2, r3]
 8008068:	4b8f      	ldr	r3, [pc, #572]	; (80082a8 <main+0x2828>)
 800806a:	498d      	ldr	r1, [pc, #564]	; (80082a0 <main+0x2820>)
 800806c:	468c      	mov	ip, r1
 800806e:	2120      	movs	r1, #32
 8008070:	4688      	mov	r8, r1
 8008072:	2108      	movs	r1, #8
 8008074:	4689      	mov	r9, r1
 8008076:	2108      	movs	r1, #8
 8008078:	468a      	mov	sl, r1
 800807a:	2108      	movs	r1, #8
 800807c:	468b      	mov	fp, r1
 800807e:	44bb      	add	fp, r7
 8008080:	44da      	add	sl, fp
 8008082:	44d1      	add	r9, sl
 8008084:	44c8      	add	r8, r9
 8008086:	44c4      	add	ip, r8
 8008088:	4463      	add	r3, ip
 800808a:	605a      	str	r2, [r3, #4]
				gyro_data_1[2] = tampering_buffer_1[5][i];
 800808c:	2308      	movs	r3, #8
 800808e:	2208      	movs	r2, #8
 8008090:	4694      	mov	ip, r2
 8008092:	2208      	movs	r2, #8
 8008094:	4690      	mov	r8, r2
 8008096:	44b8      	add	r8, r7
 8008098:	44c4      	add	ip, r8
 800809a:	4463      	add	r3, ip
 800809c:	181b      	adds	r3, r3, r0
 800809e:	191b      	adds	r3, r3, r4
 80080a0:	781a      	ldrb	r2, [r3, #0]
 80080a2:	4b7e      	ldr	r3, [pc, #504]	; (800829c <main+0x281c>)
 80080a4:	497e      	ldr	r1, [pc, #504]	; (80082a0 <main+0x2820>)
 80080a6:	468c      	mov	ip, r1
 80080a8:	2120      	movs	r1, #32
 80080aa:	4688      	mov	r8, r1
 80080ac:	2108      	movs	r1, #8
 80080ae:	4689      	mov	r9, r1
 80080b0:	2108      	movs	r1, #8
 80080b2:	468a      	mov	sl, r1
 80080b4:	2108      	movs	r1, #8
 80080b6:	468b      	mov	fp, r1
 80080b8:	44bb      	add	fp, r7
 80080ba:	44da      	add	sl, fp
 80080bc:	44d1      	add	r9, sl
 80080be:	44c8      	add	r8, r9
 80080c0:	44c4      	add	ip, r8
 80080c2:	4463      	add	r3, ip
 80080c4:	32fa      	adds	r2, #250	; 0xfa
 80080c6:	0092      	lsls	r2, r2, #2
 80080c8:	58d2      	ldr	r2, [r2, r3]
 80080ca:	4b77      	ldr	r3, [pc, #476]	; (80082a8 <main+0x2828>)
 80080cc:	4974      	ldr	r1, [pc, #464]	; (80082a0 <main+0x2820>)
 80080ce:	468c      	mov	ip, r1
 80080d0:	2120      	movs	r1, #32
 80080d2:	4688      	mov	r8, r1
 80080d4:	2108      	movs	r1, #8
 80080d6:	4689      	mov	r9, r1
 80080d8:	2108      	movs	r1, #8
 80080da:	468a      	mov	sl, r1
 80080dc:	2108      	movs	r1, #8
 80080de:	468b      	mov	fp, r1
 80080e0:	44bb      	add	fp, r7
 80080e2:	44da      	add	sl, fp
 80080e4:	44d1      	add	r9, sl
 80080e6:	44c8      	add	r8, r9
 80080e8:	44c4      	add	ip, r8
 80080ea:	4463      	add	r3, ip
 80080ec:	609a      	str	r2, [r3, #8]
				MadgwickFilterXIO(gyro_data_1, accel_data_1, &quat_buffer_1);
 80080ee:	23b0      	movs	r3, #176	; 0xb0
 80080f0:	2208      	movs	r2, #8
 80080f2:	2108      	movs	r1, #8
 80080f4:	468c      	mov	ip, r1
 80080f6:	2108      	movs	r1, #8
 80080f8:	4688      	mov	r8, r1
 80080fa:	44b8      	add	r8, r7
 80080fc:	44c4      	add	ip, r8
 80080fe:	4462      	add	r2, ip
 8008100:	1812      	adds	r2, r2, r0
 8008102:	18d2      	adds	r2, r2, r3
 8008104:	4b69      	ldr	r3, [pc, #420]	; (80082ac <main+0x282c>)
 8008106:	0005      	movs	r5, r0
 8008108:	2108      	movs	r1, #8
 800810a:	2608      	movs	r6, #8
 800810c:	46b4      	mov	ip, r6
 800810e:	2608      	movs	r6, #8
 8008110:	46b0      	mov	r8, r6
 8008112:	44b8      	add	r8, r7
 8008114:	44c4      	add	ip, r8
 8008116:	4461      	add	r1, ip
 8008118:	1809      	adds	r1, r1, r0
 800811a:	18c9      	adds	r1, r1, r3
 800811c:	23af      	movs	r3, #175	; 0xaf
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	2020      	movs	r0, #32
 8008122:	4684      	mov	ip, r0
 8008124:	2008      	movs	r0, #8
 8008126:	4680      	mov	r8, r0
 8008128:	2008      	movs	r0, #8
 800812a:	4681      	mov	r9, r0
 800812c:	2008      	movs	r0, #8
 800812e:	4682      	mov	sl, r0
 8008130:	44ba      	add	sl, r7
 8008132:	44d1      	add	r9, sl
 8008134:	44c8      	add	r8, r9
 8008136:	44c4      	add	ip, r8
 8008138:	4463      	add	r3, ip
 800813a:	0018      	movs	r0, r3
 800813c:	f7fc f952 	bl	80043e4 <MadgwickFilterXIO>
			for (uint8_t i = 0; i < TAMPERING_BUFFER_SIZE; i++)
 8008140:	2308      	movs	r3, #8
 8008142:	2208      	movs	r2, #8
 8008144:	4694      	mov	ip, r2
 8008146:	2208      	movs	r2, #8
 8008148:	4690      	mov	r8, r2
 800814a:	44b8      	add	r8, r7
 800814c:	44c4      	add	ip, r8
 800814e:	4463      	add	r3, ip
 8008150:	195b      	adds	r3, r3, r5
 8008152:	191b      	adds	r3, r3, r4
 8008154:	781a      	ldrb	r2, [r3, #0]
 8008156:	2308      	movs	r3, #8
 8008158:	2108      	movs	r1, #8
 800815a:	468c      	mov	ip, r1
 800815c:	2108      	movs	r1, #8
 800815e:	4688      	mov	r8, r1
 8008160:	44b8      	add	r8, r7
 8008162:	44c4      	add	ip, r8
 8008164:	4463      	add	r3, ip
 8008166:	195b      	adds	r3, r3, r5
 8008168:	191b      	adds	r3, r3, r4
 800816a:	3201      	adds	r2, #1
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	4b4a      	ldr	r3, [pc, #296]	; (8008298 <main+0x2818>)
 8008170:	2220      	movs	r2, #32
 8008172:	4694      	mov	ip, r2
 8008174:	2208      	movs	r2, #8
 8008176:	4690      	mov	r8, r2
 8008178:	2208      	movs	r2, #8
 800817a:	4691      	mov	r9, r2
 800817c:	2208      	movs	r2, #8
 800817e:	4692      	mov	sl, r2
 8008180:	44ba      	add	sl, r7
 8008182:	44d1      	add	r9, sl
 8008184:	44c8      	add	r8, r9
 8008186:	44c4      	add	ip, r8
 8008188:	4463      	add	r3, ip
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b31      	cmp	r3, #49	; 0x31
 800818e:	d800      	bhi.n	8008192 <main+0x2712>
 8008190:	e686      	b.n	8007ea0 <main+0x2420>
			}

			// Calc buffer and remove interpolated error
			CalcQuaternionToEuler(quat_buffer_1, &angles_buffer_1);
 8008192:	4b47      	ldr	r3, [pc, #284]	; (80082b0 <main+0x2830>)
 8008194:	4a42      	ldr	r2, [pc, #264]	; (80082a0 <main+0x2820>)
 8008196:	4694      	mov	ip, r2
 8008198:	2220      	movs	r2, #32
 800819a:	4690      	mov	r8, r2
 800819c:	2208      	movs	r2, #8
 800819e:	4691      	mov	r9, r2
 80081a0:	2208      	movs	r2, #8
 80081a2:	4692      	mov	sl, r2
 80081a4:	2208      	movs	r2, #8
 80081a6:	4693      	mov	fp, r2
 80081a8:	44bb      	add	fp, r7
 80081aa:	44da      	add	sl, fp
 80081ac:	44d1      	add	r9, sl
 80081ae:	44c8      	add	r8, r9
 80081b0:	44c4      	add	ip, r8
 80081b2:	4463      	add	r3, ip
 80081b4:	2480      	movs	r4, #128	; 0x80
 80081b6:	2620      	movs	r6, #32
 80081b8:	2208      	movs	r2, #8
 80081ba:	2108      	movs	r1, #8
 80081bc:	468c      	mov	ip, r1
 80081be:	2108      	movs	r1, #8
 80081c0:	4688      	mov	r8, r1
 80081c2:	44b8      	add	r8, r7
 80081c4:	44c4      	add	ip, r8
 80081c6:	4462      	add	r2, ip
 80081c8:	1992      	adds	r2, r2, r6
 80081ca:	1912      	adds	r2, r2, r4
 80081cc:	9200      	str	r2, [sp, #0]
 80081ce:	6818      	ldr	r0, [r3, #0]
 80081d0:	6859      	ldr	r1, [r3, #4]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f7fb feed 	bl	8003fb4 <CalcQuaternionToEuler>
			CalcQuaternionToEuler(quat_1, &angles_1);
 80081da:	4b36      	ldr	r3, [pc, #216]	; (80082b4 <main+0x2834>)
 80081dc:	4a30      	ldr	r2, [pc, #192]	; (80082a0 <main+0x2820>)
 80081de:	4694      	mov	ip, r2
 80081e0:	2220      	movs	r2, #32
 80081e2:	4690      	mov	r8, r2
 80081e4:	2208      	movs	r2, #8
 80081e6:	4691      	mov	r9, r2
 80081e8:	2208      	movs	r2, #8
 80081ea:	4692      	mov	sl, r2
 80081ec:	2208      	movs	r2, #8
 80081ee:	4693      	mov	fp, r2
 80081f0:	44bb      	add	fp, r7
 80081f2:	44da      	add	sl, fp
 80081f4:	44d1      	add	r9, sl
 80081f6:	44c8      	add	r8, r9
 80081f8:	44c4      	add	ip, r8
 80081fa:	4463      	add	r3, ip
 80081fc:	2598      	movs	r5, #152	; 0x98
 80081fe:	2208      	movs	r2, #8
 8008200:	2108      	movs	r1, #8
 8008202:	468c      	mov	ip, r1
 8008204:	2108      	movs	r1, #8
 8008206:	4688      	mov	r8, r1
 8008208:	44b8      	add	r8, r7
 800820a:	44c4      	add	ip, r8
 800820c:	4462      	add	r2, ip
 800820e:	1992      	adds	r2, r2, r6
 8008210:	1952      	adds	r2, r2, r5
 8008212:	9200      	str	r2, [sp, #0]
 8008214:	6818      	ldr	r0, [r3, #0]
 8008216:	6859      	ldr	r1, [r3, #4]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f7fb feca 	bl	8003fb4 <CalcQuaternionToEuler>
			CalcAngleDifference(&diff_1, &angles_1, &prev_1, &angles_buffer_1);
 8008220:	2308      	movs	r3, #8
 8008222:	2208      	movs	r2, #8
 8008224:	4694      	mov	ip, r2
 8008226:	2208      	movs	r2, #8
 8008228:	4690      	mov	r8, r2
 800822a:	44b8      	add	r8, r7
 800822c:	44c4      	add	ip, r8
 800822e:	4463      	add	r3, ip
 8008230:	199b      	adds	r3, r3, r6
 8008232:	191b      	adds	r3, r3, r4
 8008234:	2250      	movs	r2, #80	; 0x50
 8008236:	2120      	movs	r1, #32
 8008238:	468c      	mov	ip, r1
 800823a:	2108      	movs	r1, #8
 800823c:	4688      	mov	r8, r1
 800823e:	2108      	movs	r1, #8
 8008240:	4689      	mov	r9, r1
 8008242:	2108      	movs	r1, #8
 8008244:	468a      	mov	sl, r1
 8008246:	44ba      	add	sl, r7
 8008248:	44d1      	add	r9, sl
 800824a:	44c8      	add	r8, r9
 800824c:	44c4      	add	ip, r8
 800824e:	4462      	add	r2, ip
 8008250:	2108      	movs	r1, #8
 8008252:	2008      	movs	r0, #8
 8008254:	4684      	mov	ip, r0
 8008256:	2008      	movs	r0, #8
 8008258:	4680      	mov	r8, r0
 800825a:	44b8      	add	r8, r7
 800825c:	44c4      	add	ip, r8
 800825e:	4461      	add	r1, ip
 8008260:	1989      	adds	r1, r1, r6
 8008262:	1949      	adds	r1, r1, r5
 8008264:	2068      	movs	r0, #104	; 0x68
 8008266:	2420      	movs	r4, #32
 8008268:	46a4      	mov	ip, r4
 800826a:	2408      	movs	r4, #8
 800826c:	46a0      	mov	r8, r4
 800826e:	2408      	movs	r4, #8
 8008270:	46a1      	mov	r9, r4
 8008272:	2408      	movs	r4, #8
 8008274:	46a2      	mov	sl, r4
 8008276:	44ba      	add	sl, r7
 8008278:	44d1      	add	r9, sl
 800827a:	44c8      	add	r8, r9
 800827c:	44c4      	add	ip, r8
 800827e:	4460      	add	r0, ip
 8008280:	f7fb ff8e 	bl	80041a0 <CalcAngleDifference>



			// Simulate expected movements vs not expected movement
			if (!moving_expected)
 8008284:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <main+0x2838>)
 8008286:	2220      	movs	r2, #32
 8008288:	4694      	mov	ip, r2
 800828a:	2208      	movs	r2, #8
 800828c:	4690      	mov	r8, r2
 800828e:	2208      	movs	r2, #8
 8008290:	4691      	mov	r9, r2
 8008292:	2208      	movs	r2, #8
 8008294:	4692      	mov	sl, r2
 8008296:	e011      	b.n	80082bc <main+0x283c>
 8008298:	00000bfe 	.word	0x00000bfe
 800829c:	fffff548 	.word	0xfffff548
 80082a0:	00000c08 	.word	0x00000c08
 80082a4:	ffffff00 	.word	0xffffff00
 80082a8:	fffffee8 	.word	0xfffffee8
 80082ac:	00000b08 	.word	0x00000b08
 80082b0:	fffff4a8 	.word	0xfffff4a8
 80082b4:	fffff4c8 	.word	0xfffff4c8
 80082b8:	00000beb 	.word	0x00000beb
 80082bc:	44ba      	add	sl, r7
 80082be:	44d1      	add	r9, sl
 80082c0:	44c8      	add	r8, r9
 80082c2:	44c4      	add	ip, r8
 80082c4:	4463      	add	r3, ip
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	b25b      	sxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d000      	beq.n	80082d0 <main+0x2850>
 80082ce:	e0e5      	b.n	800849c <main+0x2a1c>
			{
				sprintf(uart_buffer, "Movement Detected 0:Pan %.3f, 1:Pan %.3f, 0:Tilt %.3f, 1:Tilt %.3f, Diff Pan: %.3f, Diff Tilt: %.3f \r\n", diff_0.yaw, diff_1.yaw, diff_0.roll, diff_1.roll, (diff_0.yaw - diff_1.yaw), (diff_0.roll - diff_1.roll));
 80082d0:	4b6e      	ldr	r3, [pc, #440]	; (800848c <main+0x2a0c>)
 80082d2:	4a6f      	ldr	r2, [pc, #444]	; (8008490 <main+0x2a10>)
 80082d4:	4694      	mov	ip, r2
 80082d6:	2220      	movs	r2, #32
 80082d8:	4690      	mov	r8, r2
 80082da:	2208      	movs	r2, #8
 80082dc:	4691      	mov	r9, r2
 80082de:	2208      	movs	r2, #8
 80082e0:	4692      	mov	sl, r2
 80082e2:	2208      	movs	r2, #8
 80082e4:	4693      	mov	fp, r2
 80082e6:	44bb      	add	fp, r7
 80082e8:	44da      	add	sl, fp
 80082ea:	44d1      	add	r9, sl
 80082ec:	44c8      	add	r8, r9
 80082ee:	44c4      	add	ip, r8
 80082f0:	4463      	add	r3, ip
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	1c18      	adds	r0, r3, #0
 80082f6:	f7fa fdeb 	bl	8002ed0 <__aeabi_f2d>
 80082fa:	6338      	str	r0, [r7, #48]	; 0x30
 80082fc:	6379      	str	r1, [r7, #52]	; 0x34
 80082fe:	4b65      	ldr	r3, [pc, #404]	; (8008494 <main+0x2a14>)
 8008300:	4963      	ldr	r1, [pc, #396]	; (8008490 <main+0x2a10>)
 8008302:	468c      	mov	ip, r1
 8008304:	2220      	movs	r2, #32
 8008306:	4690      	mov	r8, r2
 8008308:	2208      	movs	r2, #8
 800830a:	4691      	mov	r9, r2
 800830c:	2208      	movs	r2, #8
 800830e:	4692      	mov	sl, r2
 8008310:	2208      	movs	r2, #8
 8008312:	4693      	mov	fp, r2
 8008314:	44bb      	add	fp, r7
 8008316:	44da      	add	sl, fp
 8008318:	44d1      	add	r9, sl
 800831a:	44c8      	add	r8, r9
 800831c:	44c4      	add	ip, r8
 800831e:	4463      	add	r3, ip
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	1c18      	adds	r0, r3, #0
 8008324:	f7fa fdd4 	bl	8002ed0 <__aeabi_f2d>
 8008328:	0004      	movs	r4, r0
 800832a:	000d      	movs	r5, r1
 800832c:	4b57      	ldr	r3, [pc, #348]	; (800848c <main+0x2a0c>)
 800832e:	4958      	ldr	r1, [pc, #352]	; (8008490 <main+0x2a10>)
 8008330:	468c      	mov	ip, r1
 8008332:	2220      	movs	r2, #32
 8008334:	4690      	mov	r8, r2
 8008336:	2208      	movs	r2, #8
 8008338:	4691      	mov	r9, r2
 800833a:	2208      	movs	r2, #8
 800833c:	4692      	mov	sl, r2
 800833e:	2208      	movs	r2, #8
 8008340:	4693      	mov	fp, r2
 8008342:	44bb      	add	fp, r7
 8008344:	44da      	add	sl, fp
 8008346:	44d1      	add	r9, sl
 8008348:	44c8      	add	r8, r9
 800834a:	44c4      	add	ip, r8
 800834c:	4463      	add	r3, ip
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	1c18      	adds	r0, r3, #0
 8008352:	f7fa fdbd 	bl	8002ed0 <__aeabi_f2d>
 8008356:	62b8      	str	r0, [r7, #40]	; 0x28
 8008358:	62f9      	str	r1, [r7, #44]	; 0x2c
 800835a:	4b4e      	ldr	r3, [pc, #312]	; (8008494 <main+0x2a14>)
 800835c:	494c      	ldr	r1, [pc, #304]	; (8008490 <main+0x2a10>)
 800835e:	468c      	mov	ip, r1
 8008360:	2220      	movs	r2, #32
 8008362:	4690      	mov	r8, r2
 8008364:	2208      	movs	r2, #8
 8008366:	4691      	mov	r9, r2
 8008368:	2208      	movs	r2, #8
 800836a:	4692      	mov	sl, r2
 800836c:	2208      	movs	r2, #8
 800836e:	4693      	mov	fp, r2
 8008370:	44bb      	add	fp, r7
 8008372:	44da      	add	sl, fp
 8008374:	44d1      	add	r9, sl
 8008376:	44c8      	add	r8, r9
 8008378:	44c4      	add	ip, r8
 800837a:	4463      	add	r3, ip
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	1c18      	adds	r0, r3, #0
 8008380:	f7fa fda6 	bl	8002ed0 <__aeabi_f2d>
 8008384:	6238      	str	r0, [r7, #32]
 8008386:	6279      	str	r1, [r7, #36]	; 0x24
 8008388:	4b40      	ldr	r3, [pc, #256]	; (800848c <main+0x2a0c>)
 800838a:	4941      	ldr	r1, [pc, #260]	; (8008490 <main+0x2a10>)
 800838c:	468c      	mov	ip, r1
 800838e:	2220      	movs	r2, #32
 8008390:	4690      	mov	r8, r2
 8008392:	2208      	movs	r2, #8
 8008394:	4691      	mov	r9, r2
 8008396:	2208      	movs	r2, #8
 8008398:	4692      	mov	sl, r2
 800839a:	2208      	movs	r2, #8
 800839c:	4693      	mov	fp, r2
 800839e:	44bb      	add	fp, r7
 80083a0:	44da      	add	sl, fp
 80083a2:	44d1      	add	r9, sl
 80083a4:	44c8      	add	r8, r9
 80083a6:	44c4      	add	ip, r8
 80083a8:	4463      	add	r3, ip
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	4b39      	ldr	r3, [pc, #228]	; (8008494 <main+0x2a14>)
 80083ae:	4938      	ldr	r1, [pc, #224]	; (8008490 <main+0x2a10>)
 80083b0:	468c      	mov	ip, r1
 80083b2:	2120      	movs	r1, #32
 80083b4:	4688      	mov	r8, r1
 80083b6:	2108      	movs	r1, #8
 80083b8:	4689      	mov	r9, r1
 80083ba:	2108      	movs	r1, #8
 80083bc:	468a      	mov	sl, r1
 80083be:	2108      	movs	r1, #8
 80083c0:	468b      	mov	fp, r1
 80083c2:	44bb      	add	fp, r7
 80083c4:	44da      	add	sl, fp
 80083c6:	44d1      	add	r9, sl
 80083c8:	44c8      	add	r8, r9
 80083ca:	44c4      	add	ip, r8
 80083cc:	4463      	add	r3, ip
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	1c19      	adds	r1, r3, #0
 80083d2:	1c10      	adds	r0, r2, #0
 80083d4:	f7f8 fd36 	bl	8000e44 <__aeabi_fsub>
 80083d8:	1c03      	adds	r3, r0, #0
 80083da:	1c18      	adds	r0, r3, #0
 80083dc:	f7fa fd78 	bl	8002ed0 <__aeabi_f2d>
 80083e0:	61b8      	str	r0, [r7, #24]
 80083e2:	61f9      	str	r1, [r7, #28]
 80083e4:	4b29      	ldr	r3, [pc, #164]	; (800848c <main+0x2a0c>)
 80083e6:	492a      	ldr	r1, [pc, #168]	; (8008490 <main+0x2a10>)
 80083e8:	468c      	mov	ip, r1
 80083ea:	2220      	movs	r2, #32
 80083ec:	4690      	mov	r8, r2
 80083ee:	2208      	movs	r2, #8
 80083f0:	4691      	mov	r9, r2
 80083f2:	2208      	movs	r2, #8
 80083f4:	4692      	mov	sl, r2
 80083f6:	2208      	movs	r2, #8
 80083f8:	4693      	mov	fp, r2
 80083fa:	44bb      	add	fp, r7
 80083fc:	44da      	add	sl, fp
 80083fe:	44d1      	add	r9, sl
 8008400:	44c8      	add	r8, r9
 8008402:	44c4      	add	ip, r8
 8008404:	4463      	add	r3, ip
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	4b22      	ldr	r3, [pc, #136]	; (8008494 <main+0x2a14>)
 800840a:	4921      	ldr	r1, [pc, #132]	; (8008490 <main+0x2a10>)
 800840c:	468c      	mov	ip, r1
 800840e:	2120      	movs	r1, #32
 8008410:	4688      	mov	r8, r1
 8008412:	2108      	movs	r1, #8
 8008414:	4689      	mov	r9, r1
 8008416:	2108      	movs	r1, #8
 8008418:	468a      	mov	sl, r1
 800841a:	2108      	movs	r1, #8
 800841c:	468b      	mov	fp, r1
 800841e:	44bb      	add	fp, r7
 8008420:	44da      	add	sl, fp
 8008422:	44d1      	add	r9, sl
 8008424:	44c8      	add	r8, r9
 8008426:	44c4      	add	ip, r8
 8008428:	4463      	add	r3, ip
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	1c19      	adds	r1, r3, #0
 800842e:	1c10      	adds	r0, r2, #0
 8008430:	f7f8 fd08 	bl	8000e44 <__aeabi_fsub>
 8008434:	1c03      	adds	r3, r0, #0
 8008436:	1c18      	adds	r0, r3, #0
 8008438:	f7fa fd4a 	bl	8002ed0 <__aeabi_f2d>
 800843c:	60b8      	str	r0, [r7, #8]
 800843e:	60f9      	str	r1, [r7, #12]
 8008440:	4915      	ldr	r1, [pc, #84]	; (8008498 <main+0x2a18>)
 8008442:	26b2      	movs	r6, #178	; 0xb2
 8008444:	0136      	lsls	r6, r6, #4
 8008446:	2020      	movs	r0, #32
 8008448:	2308      	movs	r3, #8
 800844a:	469c      	mov	ip, r3
 800844c:	2308      	movs	r3, #8
 800844e:	4698      	mov	r8, r3
 8008450:	2308      	movs	r3, #8
 8008452:	4699      	mov	r9, r3
 8008454:	44b9      	add	r9, r7
 8008456:	44c8      	add	r8, r9
 8008458:	44c4      	add	ip, r8
 800845a:	4460      	add	r0, ip
 800845c:	1980      	adds	r0, r0, r6
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	9208      	str	r2, [sp, #32]
 8008464:	9309      	str	r3, [sp, #36]	; 0x24
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	9206      	str	r2, [sp, #24]
 800846c:	9307      	str	r3, [sp, #28]
 800846e:	6a3a      	ldr	r2, [r7, #32]
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	9204      	str	r2, [sp, #16]
 8008474:	9305      	str	r3, [sp, #20]
 8008476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847a:	9202      	str	r2, [sp, #8]
 800847c:	9303      	str	r3, [sp, #12]
 800847e:	9400      	str	r4, [sp, #0]
 8008480:	9501      	str	r5, [sp, #4]
 8008482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008486:	f004 fcd5 	bl	800ce34 <siprintf>
 800848a:	e04b      	b.n	8008524 <main+0x2aa4>
 800848c:	fffff46c 	.word	0xfffff46c
 8008490:	00000c08 	.word	0x00000c08
 8008494:	fffff460 	.word	0xfffff460
 8008498:	08011da0 	.word	0x08011da0
			} else {
				sprintf(uart_buffer, "TAMPERING DETECTED -> Pan %.4f  Tilt %.4f \r\n", diff_0.yaw, diff_0.roll);
 800849c:	4b9e      	ldr	r3, [pc, #632]	; (8008718 <main+0x2c98>)
 800849e:	4a9f      	ldr	r2, [pc, #636]	; (800871c <main+0x2c9c>)
 80084a0:	4694      	mov	ip, r2
 80084a2:	2220      	movs	r2, #32
 80084a4:	4690      	mov	r8, r2
 80084a6:	2208      	movs	r2, #8
 80084a8:	4691      	mov	r9, r2
 80084aa:	2208      	movs	r2, #8
 80084ac:	4692      	mov	sl, r2
 80084ae:	2208      	movs	r2, #8
 80084b0:	4693      	mov	fp, r2
 80084b2:	44bb      	add	fp, r7
 80084b4:	44da      	add	sl, fp
 80084b6:	44d1      	add	r9, sl
 80084b8:	44c8      	add	r8, r9
 80084ba:	44c4      	add	ip, r8
 80084bc:	4463      	add	r3, ip
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	1c18      	adds	r0, r3, #0
 80084c2:	f7fa fd05 	bl	8002ed0 <__aeabi_f2d>
 80084c6:	0004      	movs	r4, r0
 80084c8:	000d      	movs	r5, r1
 80084ca:	4b93      	ldr	r3, [pc, #588]	; (8008718 <main+0x2c98>)
 80084cc:	4a93      	ldr	r2, [pc, #588]	; (800871c <main+0x2c9c>)
 80084ce:	4694      	mov	ip, r2
 80084d0:	2220      	movs	r2, #32
 80084d2:	4690      	mov	r8, r2
 80084d4:	2208      	movs	r2, #8
 80084d6:	4691      	mov	r9, r2
 80084d8:	2208      	movs	r2, #8
 80084da:	4692      	mov	sl, r2
 80084dc:	2208      	movs	r2, #8
 80084de:	4693      	mov	fp, r2
 80084e0:	44bb      	add	fp, r7
 80084e2:	44da      	add	sl, fp
 80084e4:	44d1      	add	r9, sl
 80084e6:	44c8      	add	r8, r9
 80084e8:	44c4      	add	ip, r8
 80084ea:	4463      	add	r3, ip
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	1c18      	adds	r0, r3, #0
 80084f0:	f7fa fcee 	bl	8002ed0 <__aeabi_f2d>
 80084f4:	0002      	movs	r2, r0
 80084f6:	000b      	movs	r3, r1
 80084f8:	4989      	ldr	r1, [pc, #548]	; (8008720 <main+0x2ca0>)
 80084fa:	20b2      	movs	r0, #178	; 0xb2
 80084fc:	0100      	lsls	r0, r0, #4
 80084fe:	2620      	movs	r6, #32
 8008500:	46b4      	mov	ip, r6
 8008502:	2608      	movs	r6, #8
 8008504:	46b0      	mov	r8, r6
 8008506:	2608      	movs	r6, #8
 8008508:	46b1      	mov	r9, r6
 800850a:	2608      	movs	r6, #8
 800850c:	46b2      	mov	sl, r6
 800850e:	44ba      	add	sl, r7
 8008510:	44d1      	add	r9, sl
 8008512:	44c8      	add	r8, r9
 8008514:	44c4      	add	ip, r8
 8008516:	4460      	add	r0, ip
 8008518:	9200      	str	r2, [sp, #0]
 800851a:	9301      	str	r3, [sp, #4]
 800851c:	0022      	movs	r2, r4
 800851e:	002b      	movs	r3, r5
 8008520:	f004 fc88 	bl	800ce34 <siprintf>
			}

			HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8008524:	24b2      	movs	r4, #178	; 0xb2
 8008526:	0124      	lsls	r4, r4, #4
 8008528:	2520      	movs	r5, #32
 800852a:	2308      	movs	r3, #8
 800852c:	2208      	movs	r2, #8
 800852e:	4694      	mov	ip, r2
 8008530:	2208      	movs	r2, #8
 8008532:	4690      	mov	r8, r2
 8008534:	44b8      	add	r8, r7
 8008536:	44c4      	add	ip, r8
 8008538:	4463      	add	r3, ip
 800853a:	195b      	adds	r3, r3, r5
 800853c:	191b      	adds	r3, r3, r4
 800853e:	0018      	movs	r0, r3
 8008540:	f7f7 fdde 	bl	8000100 <strlen>
 8008544:	0003      	movs	r3, r0
 8008546:	b29a      	uxth	r2, r3
 8008548:	23fa      	movs	r3, #250	; 0xfa
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	2108      	movs	r1, #8
 800854e:	2008      	movs	r0, #8
 8008550:	4684      	mov	ip, r0
 8008552:	2008      	movs	r0, #8
 8008554:	4680      	mov	r8, r0
 8008556:	44b8      	add	r8, r7
 8008558:	44c4      	add	ip, r8
 800855a:	4461      	add	r1, ip
 800855c:	1949      	adds	r1, r1, r5
 800855e:	1909      	adds	r1, r1, r4
 8008560:	4870      	ldr	r0, [pc, #448]	; (8008724 <main+0x2ca4>)
 8008562:	f003 fa7f 	bl	800ba64 <HAL_UART_Transmit>

			// Update IMU 0 state
			prev_0.roll = angles_0.roll;
 8008566:	4b70      	ldr	r3, [pc, #448]	; (8008728 <main+0x2ca8>)
 8008568:	4a6c      	ldr	r2, [pc, #432]	; (800871c <main+0x2c9c>)
 800856a:	4694      	mov	ip, r2
 800856c:	2220      	movs	r2, #32
 800856e:	4690      	mov	r8, r2
 8008570:	2208      	movs	r2, #8
 8008572:	4691      	mov	r9, r2
 8008574:	2208      	movs	r2, #8
 8008576:	4692      	mov	sl, r2
 8008578:	2208      	movs	r2, #8
 800857a:	4693      	mov	fp, r2
 800857c:	44bb      	add	fp, r7
 800857e:	44da      	add	sl, fp
 8008580:	44d1      	add	r9, sl
 8008582:	44c8      	add	r8, r9
 8008584:	44c4      	add	ip, r8
 8008586:	4463      	add	r3, ip
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	4b68      	ldr	r3, [pc, #416]	; (800872c <main+0x2cac>)
 800858c:	4963      	ldr	r1, [pc, #396]	; (800871c <main+0x2c9c>)
 800858e:	468c      	mov	ip, r1
 8008590:	2120      	movs	r1, #32
 8008592:	4688      	mov	r8, r1
 8008594:	2108      	movs	r1, #8
 8008596:	4689      	mov	r9, r1
 8008598:	2108      	movs	r1, #8
 800859a:	468a      	mov	sl, r1
 800859c:	2108      	movs	r1, #8
 800859e:	468b      	mov	fp, r1
 80085a0:	44bb      	add	fp, r7
 80085a2:	44da      	add	sl, fp
 80085a4:	44d1      	add	r9, sl
 80085a6:	44c8      	add	r8, r9
 80085a8:	44c4      	add	ip, r8
 80085aa:	4463      	add	r3, ip
 80085ac:	601a      	str	r2, [r3, #0]
			prev_0.yaw = angles_0.yaw;
 80085ae:	4b5e      	ldr	r3, [pc, #376]	; (8008728 <main+0x2ca8>)
 80085b0:	4a5a      	ldr	r2, [pc, #360]	; (800871c <main+0x2c9c>)
 80085b2:	4694      	mov	ip, r2
 80085b4:	2220      	movs	r2, #32
 80085b6:	4690      	mov	r8, r2
 80085b8:	2208      	movs	r2, #8
 80085ba:	4691      	mov	r9, r2
 80085bc:	2208      	movs	r2, #8
 80085be:	4692      	mov	sl, r2
 80085c0:	2208      	movs	r2, #8
 80085c2:	4693      	mov	fp, r2
 80085c4:	44bb      	add	fp, r7
 80085c6:	44da      	add	sl, fp
 80085c8:	44d1      	add	r9, sl
 80085ca:	44c8      	add	r8, r9
 80085cc:	44c4      	add	ip, r8
 80085ce:	4463      	add	r3, ip
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	4b56      	ldr	r3, [pc, #344]	; (800872c <main+0x2cac>)
 80085d4:	4951      	ldr	r1, [pc, #324]	; (800871c <main+0x2c9c>)
 80085d6:	468c      	mov	ip, r1
 80085d8:	2120      	movs	r1, #32
 80085da:	4688      	mov	r8, r1
 80085dc:	2108      	movs	r1, #8
 80085de:	4689      	mov	r9, r1
 80085e0:	2108      	movs	r1, #8
 80085e2:	468a      	mov	sl, r1
 80085e4:	2108      	movs	r1, #8
 80085e6:	468b      	mov	fp, r1
 80085e8:	44bb      	add	fp, r7
 80085ea:	44da      	add	sl, fp
 80085ec:	44d1      	add	r9, sl
 80085ee:	44c8      	add	r8, r9
 80085f0:	44c4      	add	ip, r8
 80085f2:	4463      	add	r3, ip
 80085f4:	609a      	str	r2, [r3, #8]
			quat_buffer_0 = quat_0;
 80085f6:	4b4e      	ldr	r3, [pc, #312]	; (8008730 <main+0x2cb0>)
 80085f8:	4c48      	ldr	r4, [pc, #288]	; (800871c <main+0x2c9c>)
 80085fa:	2208      	movs	r2, #8
 80085fc:	2108      	movs	r1, #8
 80085fe:	468c      	mov	ip, r1
 8008600:	2108      	movs	r1, #8
 8008602:	4688      	mov	r8, r1
 8008604:	44b8      	add	r8, r7
 8008606:	44c4      	add	ip, r8
 8008608:	4462      	add	r2, ip
 800860a:	1952      	adds	r2, r2, r5
 800860c:	1912      	adds	r2, r2, r4
 800860e:	18d2      	adds	r2, r2, r3
 8008610:	4b48      	ldr	r3, [pc, #288]	; (8008734 <main+0x2cb4>)
 8008612:	4942      	ldr	r1, [pc, #264]	; (800871c <main+0x2c9c>)
 8008614:	468c      	mov	ip, r1
 8008616:	2120      	movs	r1, #32
 8008618:	4688      	mov	r8, r1
 800861a:	2108      	movs	r1, #8
 800861c:	4689      	mov	r9, r1
 800861e:	2108      	movs	r1, #8
 8008620:	468a      	mov	sl, r1
 8008622:	2108      	movs	r1, #8
 8008624:	468b      	mov	fp, r1
 8008626:	44bb      	add	fp, r7
 8008628:	44da      	add	sl, fp
 800862a:	44d1      	add	r9, sl
 800862c:	44c8      	add	r8, r9
 800862e:	44c4      	add	ip, r8
 8008630:	4463      	add	r3, ip
 8008632:	0010      	movs	r0, r2
 8008634:	0019      	movs	r1, r3
 8008636:	2310      	movs	r3, #16
 8008638:	001a      	movs	r2, r3
 800863a:	f003 ff6f 	bl	800c51c <memcpy>

			// Update IMU 1 state
			prev_1.roll = angles_1.roll;
 800863e:	4b3e      	ldr	r3, [pc, #248]	; (8008738 <main+0x2cb8>)
 8008640:	4a36      	ldr	r2, [pc, #216]	; (800871c <main+0x2c9c>)
 8008642:	4694      	mov	ip, r2
 8008644:	2220      	movs	r2, #32
 8008646:	4690      	mov	r8, r2
 8008648:	2208      	movs	r2, #8
 800864a:	4691      	mov	r9, r2
 800864c:	2208      	movs	r2, #8
 800864e:	4692      	mov	sl, r2
 8008650:	2208      	movs	r2, #8
 8008652:	4693      	mov	fp, r2
 8008654:	44bb      	add	fp, r7
 8008656:	44da      	add	sl, fp
 8008658:	44d1      	add	r9, sl
 800865a:	44c8      	add	r8, r9
 800865c:	44c4      	add	ip, r8
 800865e:	4463      	add	r3, ip
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	4b36      	ldr	r3, [pc, #216]	; (800873c <main+0x2cbc>)
 8008664:	492d      	ldr	r1, [pc, #180]	; (800871c <main+0x2c9c>)
 8008666:	468c      	mov	ip, r1
 8008668:	2120      	movs	r1, #32
 800866a:	4688      	mov	r8, r1
 800866c:	2108      	movs	r1, #8
 800866e:	4689      	mov	r9, r1
 8008670:	2108      	movs	r1, #8
 8008672:	468a      	mov	sl, r1
 8008674:	2108      	movs	r1, #8
 8008676:	468b      	mov	fp, r1
 8008678:	44bb      	add	fp, r7
 800867a:	44da      	add	sl, fp
 800867c:	44d1      	add	r9, sl
 800867e:	44c8      	add	r8, r9
 8008680:	44c4      	add	ip, r8
 8008682:	4463      	add	r3, ip
 8008684:	601a      	str	r2, [r3, #0]
			prev_1.yaw = angles_1.yaw;
 8008686:	4b2c      	ldr	r3, [pc, #176]	; (8008738 <main+0x2cb8>)
 8008688:	4a24      	ldr	r2, [pc, #144]	; (800871c <main+0x2c9c>)
 800868a:	4694      	mov	ip, r2
 800868c:	2220      	movs	r2, #32
 800868e:	4690      	mov	r8, r2
 8008690:	2208      	movs	r2, #8
 8008692:	4691      	mov	r9, r2
 8008694:	2208      	movs	r2, #8
 8008696:	4692      	mov	sl, r2
 8008698:	2208      	movs	r2, #8
 800869a:	4693      	mov	fp, r2
 800869c:	44bb      	add	fp, r7
 800869e:	44da      	add	sl, fp
 80086a0:	44d1      	add	r9, sl
 80086a2:	44c8      	add	r8, r9
 80086a4:	44c4      	add	ip, r8
 80086a6:	4463      	add	r3, ip
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	4b24      	ldr	r3, [pc, #144]	; (800873c <main+0x2cbc>)
 80086ac:	491b      	ldr	r1, [pc, #108]	; (800871c <main+0x2c9c>)
 80086ae:	468c      	mov	ip, r1
 80086b0:	2120      	movs	r1, #32
 80086b2:	4688      	mov	r8, r1
 80086b4:	2108      	movs	r1, #8
 80086b6:	4689      	mov	r9, r1
 80086b8:	2108      	movs	r1, #8
 80086ba:	468a      	mov	sl, r1
 80086bc:	2108      	movs	r1, #8
 80086be:	468b      	mov	fp, r1
 80086c0:	44bb      	add	fp, r7
 80086c2:	44da      	add	sl, fp
 80086c4:	44d1      	add	r9, sl
 80086c6:	44c8      	add	r8, r9
 80086c8:	44c4      	add	ip, r8
 80086ca:	4463      	add	r3, ip
 80086cc:	609a      	str	r2, [r3, #8]
			quat_buffer_1 = quat_1;
 80086ce:	4b1c      	ldr	r3, [pc, #112]	; (8008740 <main+0x2cc0>)
 80086d0:	2208      	movs	r2, #8
 80086d2:	2108      	movs	r1, #8
 80086d4:	468c      	mov	ip, r1
 80086d6:	2108      	movs	r1, #8
 80086d8:	4688      	mov	r8, r1
 80086da:	44b8      	add	r8, r7
 80086dc:	44c4      	add	ip, r8
 80086de:	4462      	add	r2, ip
 80086e0:	1952      	adds	r2, r2, r5
 80086e2:	1912      	adds	r2, r2, r4
 80086e4:	18d2      	adds	r2, r2, r3
 80086e6:	4b17      	ldr	r3, [pc, #92]	; (8008744 <main+0x2cc4>)
 80086e8:	490c      	ldr	r1, [pc, #48]	; (800871c <main+0x2c9c>)
 80086ea:	468c      	mov	ip, r1
 80086ec:	2120      	movs	r1, #32
 80086ee:	4688      	mov	r8, r1
 80086f0:	2108      	movs	r1, #8
 80086f2:	4689      	mov	r9, r1
 80086f4:	2108      	movs	r1, #8
 80086f6:	468a      	mov	sl, r1
 80086f8:	2108      	movs	r1, #8
 80086fa:	468b      	mov	fp, r1
 80086fc:	44bb      	add	fp, r7
 80086fe:	44da      	add	sl, fp
 8008700:	44d1      	add	r9, sl
 8008702:	44c8      	add	r8, r9
 8008704:	44c4      	add	ip, r8
 8008706:	4463      	add	r3, ip
 8008708:	0010      	movs	r0, r2
 800870a:	0019      	movs	r1, r3
 800870c:	2310      	movs	r3, #16
 800870e:	001a      	movs	r2, r3
 8008710:	f003 ff04 	bl	800c51c <memcpy>
 8008714:	e081      	b.n	800881a <main+0x2d9a>
 8008716:	46c0      	nop			; (mov r8, r8)
 8008718:	fffff46c 	.word	0xfffff46c
 800871c:	00000c08 	.word	0x00000c08
 8008720:	08011e08 	.word	0x08011e08
 8008724:	2000049c 	.word	0x2000049c
 8008728:	fffff49c 	.word	0xfffff49c
 800872c:	fffff454 	.word	0xfffff454
 8008730:	fffff4b8 	.word	0xfffff4b8
 8008734:	fffff4d8 	.word	0xfffff4d8
 8008738:	fffff490 	.word	0xfffff490
 800873c:	fffff448 	.word	0xfffff448
 8008740:	fffff4a8 	.word	0xfffff4a8
 8008744:	fffff4c8 	.word	0xfffff4c8
		}

		else if (uart_prescaler == 0)
 8008748:	4b78      	ldr	r3, [pc, #480]	; (800892c <main+0x2eac>)
 800874a:	2220      	movs	r2, #32
 800874c:	4694      	mov	ip, r2
 800874e:	2208      	movs	r2, #8
 8008750:	4690      	mov	r8, r2
 8008752:	2208      	movs	r2, #8
 8008754:	4691      	mov	r9, r2
 8008756:	2208      	movs	r2, #8
 8008758:	4692      	mov	sl, r2
 800875a:	44ba      	add	sl, r7
 800875c:	44d1      	add	r9, sl
 800875e:	44c8      	add	r8, r9
 8008760:	44c4      	add	ip, r8
 8008762:	4463      	add	r3, ip
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d157      	bne.n	800881a <main+0x2d9a>
		{
			sprintf(uart_buffer, "NO TAMPERING DETECTED -> MOVE EXPECTED: %i -> LOOP DURATION: %.3f \r\n", moving_expected, duration);
 800876a:	4b71      	ldr	r3, [pc, #452]	; (8008930 <main+0x2eb0>)
 800876c:	2220      	movs	r2, #32
 800876e:	4694      	mov	ip, r2
 8008770:	2208      	movs	r2, #8
 8008772:	4690      	mov	r8, r2
 8008774:	2208      	movs	r2, #8
 8008776:	4691      	mov	r9, r2
 8008778:	2208      	movs	r2, #8
 800877a:	4692      	mov	sl, r2
 800877c:	44ba      	add	sl, r7
 800877e:	44d1      	add	r9, sl
 8008780:	44c8      	add	r8, r9
 8008782:	44c4      	add	ip, r8
 8008784:	4463      	add	r3, ip
 8008786:	2400      	movs	r4, #0
 8008788:	571c      	ldrsb	r4, [r3, r4]
 800878a:	4b6a      	ldr	r3, [pc, #424]	; (8008934 <main+0x2eb4>)
 800878c:	2220      	movs	r2, #32
 800878e:	4694      	mov	ip, r2
 8008790:	2208      	movs	r2, #8
 8008792:	4690      	mov	r8, r2
 8008794:	2208      	movs	r2, #8
 8008796:	4691      	mov	r9, r2
 8008798:	2208      	movs	r2, #8
 800879a:	4692      	mov	sl, r2
 800879c:	44ba      	add	sl, r7
 800879e:	44d1      	add	r9, sl
 80087a0:	44c8      	add	r8, r9
 80087a2:	44c4      	add	ip, r8
 80087a4:	4463      	add	r3, ip
 80087a6:	6818      	ldr	r0, [r3, #0]
 80087a8:	f7fa fb92 	bl	8002ed0 <__aeabi_f2d>
 80087ac:	6038      	str	r0, [r7, #0]
 80087ae:	6079      	str	r1, [r7, #4]
 80087b0:	4961      	ldr	r1, [pc, #388]	; (8008938 <main+0x2eb8>)
 80087b2:	25b2      	movs	r5, #178	; 0xb2
 80087b4:	012d      	lsls	r5, r5, #4
 80087b6:	2620      	movs	r6, #32
 80087b8:	2008      	movs	r0, #8
 80087ba:	2308      	movs	r3, #8
 80087bc:	469c      	mov	ip, r3
 80087be:	2308      	movs	r3, #8
 80087c0:	4698      	mov	r8, r3
 80087c2:	44b8      	add	r8, r7
 80087c4:	44c4      	add	ip, r8
 80087c6:	4460      	add	r0, ip
 80087c8:	1980      	adds	r0, r0, r6
 80087ca:	1940      	adds	r0, r0, r5
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	9200      	str	r2, [sp, #0]
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	0022      	movs	r2, r4
 80087d6:	f004 fb2d 	bl	800ce34 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 80087da:	002c      	movs	r4, r5
 80087dc:	0035      	movs	r5, r6
 80087de:	2308      	movs	r3, #8
 80087e0:	2208      	movs	r2, #8
 80087e2:	4694      	mov	ip, r2
 80087e4:	2208      	movs	r2, #8
 80087e6:	4690      	mov	r8, r2
 80087e8:	44b8      	add	r8, r7
 80087ea:	44c4      	add	ip, r8
 80087ec:	4463      	add	r3, ip
 80087ee:	195b      	adds	r3, r3, r5
 80087f0:	191b      	adds	r3, r3, r4
 80087f2:	0018      	movs	r0, r3
 80087f4:	f7f7 fc84 	bl	8000100 <strlen>
 80087f8:	0003      	movs	r3, r0
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	23fa      	movs	r3, #250	; 0xfa
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	2108      	movs	r1, #8
 8008802:	2008      	movs	r0, #8
 8008804:	4684      	mov	ip, r0
 8008806:	2008      	movs	r0, #8
 8008808:	4680      	mov	r8, r0
 800880a:	44b8      	add	r8, r7
 800880c:	44c4      	add	ip, r8
 800880e:	4461      	add	r1, ip
 8008810:	1949      	adds	r1, r1, r5
 8008812:	1909      	adds	r1, r1, r4
 8008814:	4849      	ldr	r0, [pc, #292]	; (800893c <main+0x2ebc>)
 8008816:	f003 f925 	bl	800ba64 <HAL_UART_Transmit>
		}
		was_moving = 0;
 800881a:	4b49      	ldr	r3, [pc, #292]	; (8008940 <main+0x2ec0>)
 800881c:	2220      	movs	r2, #32
 800881e:	4694      	mov	ip, r2
 8008820:	2208      	movs	r2, #8
 8008822:	4690      	mov	r8, r2
 8008824:	2208      	movs	r2, #8
 8008826:	4691      	mov	r9, r2
 8008828:	2208      	movs	r2, #8
 800882a:	4692      	mov	sl, r2
 800882c:	44ba      	add	sl, r7
 800882e:	44d1      	add	r9, sl
 8008830:	44c8      	add	r8, r9
 8008832:	44c4      	add	ip, r8
 8008834:	4463      	add	r3, ip
 8008836:	2200      	movs	r2, #0
 8008838:	701a      	strb	r2, [r3, #0]
	}
	duration = (__HAL_TIM_GET_COUNTER(&htim16))*1000.0/clock;
 800883a:	4b42      	ldr	r3, [pc, #264]	; (8008944 <main+0x2ec4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	0018      	movs	r0, r3
 8008842:	f7fa fb1f 	bl	8002e84 <__aeabi_ui2d>
 8008846:	2200      	movs	r2, #0
 8008848:	4b3f      	ldr	r3, [pc, #252]	; (8008948 <main+0x2ec8>)
 800884a:	f7f9 fc99 	bl	8002180 <__aeabi_dmul>
 800884e:	0002      	movs	r2, r0
 8008850:	000b      	movs	r3, r1
 8008852:	0014      	movs	r4, r2
 8008854:	001d      	movs	r5, r3
 8008856:	4b3d      	ldr	r3, [pc, #244]	; (800894c <main+0x2ecc>)
 8008858:	2220      	movs	r2, #32
 800885a:	4694      	mov	ip, r2
 800885c:	2208      	movs	r2, #8
 800885e:	4690      	mov	r8, r2
 8008860:	2208      	movs	r2, #8
 8008862:	4691      	mov	r9, r2
 8008864:	2208      	movs	r2, #8
 8008866:	4692      	mov	sl, r2
 8008868:	44ba      	add	sl, r7
 800886a:	44d1      	add	r9, sl
 800886c:	44c8      	add	r8, r9
 800886e:	44c4      	add	ip, r8
 8008870:	4463      	add	r3, ip
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	f7fa fb2c 	bl	8002ed0 <__aeabi_f2d>
 8008878:	0002      	movs	r2, r0
 800887a:	000b      	movs	r3, r1
 800887c:	0020      	movs	r0, r4
 800887e:	0029      	movs	r1, r5
 8008880:	f7f9 f878 	bl	8001974 <__aeabi_ddiv>
 8008884:	0002      	movs	r2, r0
 8008886:	000b      	movs	r3, r1
 8008888:	0010      	movs	r0, r2
 800888a:	0019      	movs	r1, r3
 800888c:	f7fa fb68 	bl	8002f60 <__aeabi_d2f>
 8008890:	1c03      	adds	r3, r0, #0
 8008892:	4a28      	ldr	r2, [pc, #160]	; (8008934 <main+0x2eb4>)
 8008894:	2520      	movs	r5, #32
 8008896:	2108      	movs	r1, #8
 8008898:	2008      	movs	r0, #8
 800889a:	4684      	mov	ip, r0
 800889c:	2008      	movs	r0, #8
 800889e:	4680      	mov	r8, r0
 80088a0:	44b8      	add	r8, r7
 80088a2:	44c4      	add	ip, r8
 80088a4:	4461      	add	r1, ip
 80088a6:	1949      	adds	r1, r1, r5
 80088a8:	1889      	adds	r1, r1, r2
 80088aa:	600b      	str	r3, [r1, #0]
	duration_diff = SAMPLE_TIME_ICM - duration;
 80088ac:	2308      	movs	r3, #8
 80088ae:	2108      	movs	r1, #8
 80088b0:	468c      	mov	ip, r1
 80088b2:	2108      	movs	r1, #8
 80088b4:	4688      	mov	r8, r1
 80088b6:	44b8      	add	r8, r7
 80088b8:	44c4      	add	ip, r8
 80088ba:	4463      	add	r3, ip
 80088bc:	195b      	adds	r3, r3, r5
 80088be:	189b      	adds	r3, r3, r2
 80088c0:	6819      	ldr	r1, [r3, #0]
 80088c2:	4823      	ldr	r0, [pc, #140]	; (8008950 <main+0x2ed0>)
 80088c4:	f7f8 fabe 	bl	8000e44 <__aeabi_fsub>
 80088c8:	1c03      	adds	r3, r0, #0
 80088ca:	24bf      	movs	r4, #191	; 0xbf
 80088cc:	0124      	lsls	r4, r4, #4
 80088ce:	2208      	movs	r2, #8
 80088d0:	2108      	movs	r1, #8
 80088d2:	468c      	mov	ip, r1
 80088d4:	2108      	movs	r1, #8
 80088d6:	4688      	mov	r8, r1
 80088d8:	44b8      	add	r8, r7
 80088da:	44c4      	add	ip, r8
 80088dc:	4462      	add	r2, ip
 80088de:	1952      	adds	r2, r2, r5
 80088e0:	1912      	adds	r2, r2, r4
 80088e2:	6013      	str	r3, [r2, #0]

	if(duration_diff > 0)
 80088e4:	2100      	movs	r1, #0
 80088e6:	2308      	movs	r3, #8
 80088e8:	2208      	movs	r2, #8
 80088ea:	4694      	mov	ip, r2
 80088ec:	2208      	movs	r2, #8
 80088ee:	4690      	mov	r8, r2
 80088f0:	44b8      	add	r8, r7
 80088f2:	44c4      	add	ip, r8
 80088f4:	4463      	add	r3, ip
 80088f6:	195b      	adds	r3, r3, r5
 80088f8:	191b      	adds	r3, r3, r4
 80088fa:	6818      	ldr	r0, [r3, #0]
 80088fc:	f7f7 fdf6 	bl	80004ec <__aeabi_fcmpgt>
 8008900:	1e03      	subs	r3, r0, #0
 8008902:	d010      	beq.n	8008926 <main+0x2ea6>
	{
	  HAL_Delay(duration_diff);
 8008904:	2308      	movs	r3, #8
 8008906:	2208      	movs	r2, #8
 8008908:	4694      	mov	ip, r2
 800890a:	2208      	movs	r2, #8
 800890c:	4690      	mov	r8, r2
 800890e:	44b8      	add	r8, r7
 8008910:	44c4      	add	ip, r8
 8008912:	4463      	add	r3, ip
 8008914:	195b      	adds	r3, r3, r5
 8008916:	191b      	adds	r3, r3, r4
 8008918:	6818      	ldr	r0, [r3, #0]
 800891a:	f7f7 fdfb 	bl	8000514 <__aeabi_f2uiz>
 800891e:	0003      	movs	r3, r0
 8008920:	0018      	movs	r0, r3
 8008922:	f000 fcfd 	bl	8009320 <HAL_Delay>
	__HAL_TIM_SET_COUNTER(&htim16,0);
 8008926:	f7fe f97a 	bl	8006c1e <main+0x119e>
 800892a:	46c0      	nop			; (mov r8, r8)
 800892c:	00000c02 	.word	0x00000c02
 8008930:	00000beb 	.word	0x00000beb
 8008934:	00000c04 	.word	0x00000c04
 8008938:	08011e38 	.word	0x08011e38
 800893c:	2000049c 	.word	0x2000049c
 8008940:	00000c03 	.word	0x00000c03
 8008944:	2000052c 	.word	0x2000052c
 8008948:	408f4000 	.word	0x408f4000
 800894c:	00000bec 	.word	0x00000bec
 8008950:	41f00000 	.word	0x41f00000

08008954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008954:	b590      	push	{r4, r7, lr}
 8008956:	b093      	sub	sp, #76	; 0x4c
 8008958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800895a:	2414      	movs	r4, #20
 800895c:	193b      	adds	r3, r7, r4
 800895e:	0018      	movs	r0, r3
 8008960:	2334      	movs	r3, #52	; 0x34
 8008962:	001a      	movs	r2, r3
 8008964:	2100      	movs	r1, #0
 8008966:	f003 fde2 	bl	800c52e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800896a:	1d3b      	adds	r3, r7, #4
 800896c:	0018      	movs	r0, r3
 800896e:	2310      	movs	r3, #16
 8008970:	001a      	movs	r2, r3
 8008972:	2100      	movs	r1, #0
 8008974:	f003 fddb 	bl	800c52e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008978:	2380      	movs	r3, #128	; 0x80
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	0018      	movs	r0, r3
 800897e:	f001 f86d 	bl	8009a5c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8008982:	193b      	adds	r3, r7, r4
 8008984:	220a      	movs	r2, #10
 8008986:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008988:	193b      	adds	r3, r7, r4
 800898a:	2280      	movs	r2, #128	; 0x80
 800898c:	0052      	lsls	r2, r2, #1
 800898e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8008990:	0021      	movs	r1, r4
 8008992:	187b      	adds	r3, r7, r1
 8008994:	2200      	movs	r2, #0
 8008996:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008998:	187b      	adds	r3, r7, r1
 800899a:	2240      	movs	r2, #64	; 0x40
 800899c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800899e:	187b      	adds	r3, r7, r1
 80089a0:	2201      	movs	r2, #1
 80089a2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80089a4:	187b      	adds	r3, r7, r1
 80089a6:	2200      	movs	r2, #0
 80089a8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80089aa:	187b      	adds	r3, r7, r1
 80089ac:	0018      	movs	r0, r3
 80089ae:	f001 f8a1 	bl	8009af4 <HAL_RCC_OscConfig>
 80089b2:	1e03      	subs	r3, r0, #0
 80089b4:	d001      	beq.n	80089ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80089b6:	f000 f991 	bl	8008cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80089ba:	1d3b      	adds	r3, r7, #4
 80089bc:	2207      	movs	r2, #7
 80089be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80089c0:	1d3b      	adds	r3, r7, #4
 80089c2:	2200      	movs	r2, #0
 80089c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80089c6:	1d3b      	adds	r3, r7, #4
 80089c8:	2200      	movs	r2, #0
 80089ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80089cc:	1d3b      	adds	r3, r7, #4
 80089ce:	2200      	movs	r2, #0
 80089d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80089d2:	1d3b      	adds	r3, r7, #4
 80089d4:	2100      	movs	r1, #0
 80089d6:	0018      	movs	r0, r3
 80089d8:	f001 fba2 	bl	800a120 <HAL_RCC_ClockConfig>
 80089dc:	1e03      	subs	r3, r0, #0
 80089de:	d001      	beq.n	80089e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80089e0:	f000 f97c 	bl	8008cdc <Error_Handler>
  }
}
 80089e4:	46c0      	nop			; (mov r8, r8)
 80089e6:	46bd      	mov	sp, r7
 80089e8:	b013      	add	sp, #76	; 0x4c
 80089ea:	bd90      	pop	{r4, r7, pc}

080089ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80089f0:	4b1b      	ldr	r3, [pc, #108]	; (8008a60 <MX_I2C1_Init+0x74>)
 80089f2:	4a1c      	ldr	r2, [pc, #112]	; (8008a64 <MX_I2C1_Init+0x78>)
 80089f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80089f6:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <MX_I2C1_Init+0x74>)
 80089f8:	4a1b      	ldr	r2, [pc, #108]	; (8008a68 <MX_I2C1_Init+0x7c>)
 80089fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80089fc:	4b18      	ldr	r3, [pc, #96]	; (8008a60 <MX_I2C1_Init+0x74>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a02:	4b17      	ldr	r3, [pc, #92]	; (8008a60 <MX_I2C1_Init+0x74>)
 8008a04:	2201      	movs	r2, #1
 8008a06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a08:	4b15      	ldr	r3, [pc, #84]	; (8008a60 <MX_I2C1_Init+0x74>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008a0e:	4b14      	ldr	r3, [pc, #80]	; (8008a60 <MX_I2C1_Init+0x74>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008a14:	4b12      	ldr	r3, [pc, #72]	; (8008a60 <MX_I2C1_Init+0x74>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008a1a:	4b11      	ldr	r3, [pc, #68]	; (8008a60 <MX_I2C1_Init+0x74>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008a20:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <MX_I2C1_Init+0x74>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008a26:	4b0e      	ldr	r3, [pc, #56]	; (8008a60 <MX_I2C1_Init+0x74>)
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f000 fee9 	bl	8009800 <HAL_I2C_Init>
 8008a2e:	1e03      	subs	r3, r0, #0
 8008a30:	d001      	beq.n	8008a36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008a32:	f000 f953 	bl	8008cdc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008a36:	4b0a      	ldr	r3, [pc, #40]	; (8008a60 <MX_I2C1_Init+0x74>)
 8008a38:	2100      	movs	r1, #0
 8008a3a:	0018      	movs	r0, r3
 8008a3c:	f000 ff76 	bl	800992c <HAL_I2CEx_ConfigAnalogFilter>
 8008a40:	1e03      	subs	r3, r0, #0
 8008a42:	d001      	beq.n	8008a48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008a44:	f000 f94a 	bl	8008cdc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008a48:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <MX_I2C1_Init+0x74>)
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f000 ffb9 	bl	80099c4 <HAL_I2CEx_ConfigDigitalFilter>
 8008a52:	1e03      	subs	r3, r0, #0
 8008a54:	d001      	beq.n	8008a5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008a56:	f000 f941 	bl	8008cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008a5a:	46c0      	nop			; (mov r8, r8)
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	200003c0 	.word	0x200003c0
 8008a64:	40005400 	.word	0x40005400
 8008a68:	00303d5b 	.word	0x00303d5b

08008a6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008a70:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <MX_RTC_Init+0x54>)
 8008a72:	4a14      	ldr	r2, [pc, #80]	; (8008ac4 <MX_RTC_Init+0x58>)
 8008a74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008a76:	4b12      	ldr	r3, [pc, #72]	; (8008ac0 <MX_RTC_Init+0x54>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8008a7c:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <MX_RTC_Init+0x54>)
 8008a7e:	227f      	movs	r2, #127	; 0x7f
 8008a80:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8008a82:	4b0f      	ldr	r3, [pc, #60]	; (8008ac0 <MX_RTC_Init+0x54>)
 8008a84:	22ff      	movs	r2, #255	; 0xff
 8008a86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008a88:	4b0d      	ldr	r3, [pc, #52]	; (8008ac0 <MX_RTC_Init+0x54>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008a8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ac0 <MX_RTC_Init+0x54>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008a94:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <MX_RTC_Init+0x54>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008a9a:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <MX_RTC_Init+0x54>)
 8008a9c:	2280      	movs	r2, #128	; 0x80
 8008a9e:	05d2      	lsls	r2, r2, #23
 8008aa0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8008aa2:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <MX_RTC_Init+0x54>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008aa8:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <MX_RTC_Init+0x54>)
 8008aaa:	0018      	movs	r0, r3
 8008aac:	f001 fe16 	bl	800a6dc <HAL_RTC_Init>
 8008ab0:	1e03      	subs	r3, r0, #0
 8008ab2:	d001      	beq.n	8008ab8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8008ab4:	f000 f912 	bl	8008cdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008ab8:	46c0      	nop			; (mov r8, r8)
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	46c0      	nop			; (mov r8, r8)
 8008ac0:	2000040c 	.word	0x2000040c
 8008ac4:	40002800 	.word	0x40002800

08008ac8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008acc:	4b1b      	ldr	r3, [pc, #108]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008ace:	4a1c      	ldr	r2, [pc, #112]	; (8008b40 <MX_SPI1_Init+0x78>)
 8008ad0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008ad2:	4b1a      	ldr	r3, [pc, #104]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008ad4:	2282      	movs	r2, #130	; 0x82
 8008ad6:	0052      	lsls	r2, r2, #1
 8008ad8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008ada:	4b18      	ldr	r3, [pc, #96]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008ae0:	4b16      	ldr	r3, [pc, #88]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008ae2:	22e0      	movs	r2, #224	; 0xe0
 8008ae4:	00d2      	lsls	r2, r2, #3
 8008ae6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ae8:	4b14      	ldr	r3, [pc, #80]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008aee:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008af4:	4b11      	ldr	r3, [pc, #68]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008af6:	2280      	movs	r2, #128	; 0x80
 8008af8:	0092      	lsls	r2, r2, #2
 8008afa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008afc:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008b02:	4b0e      	ldr	r3, [pc, #56]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008b08:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b0e:	4b0b      	ldr	r3, [pc, #44]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008b14:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008b16:	2207      	movs	r2, #7
 8008b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008b1a:	4b08      	ldr	r3, [pc, #32]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008b20:	4b06      	ldr	r3, [pc, #24]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008b22:	2208      	movs	r2, #8
 8008b24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <MX_SPI1_Init+0x74>)
 8008b28:	0018      	movs	r0, r3
 8008b2a:	f001 ff1b 	bl	800a964 <HAL_SPI_Init>
 8008b2e:	1e03      	subs	r3, r0, #0
 8008b30:	d001      	beq.n	8008b36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8008b32:	f000 f8d3 	bl	8008cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20000438 	.word	0x20000438
 8008b40:	40013000 	.word	0x40013000

08008b44 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8008b48:	4b0f      	ldr	r3, [pc, #60]	; (8008b88 <MX_TIM16_Init+0x44>)
 8008b4a:	4a10      	ldr	r2, [pc, #64]	; (8008b8c <MX_TIM16_Init+0x48>)
 8008b4c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16;
 8008b4e:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <MX_TIM16_Init+0x44>)
 8008b50:	2210      	movs	r2, #16
 8008b52:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b54:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <MX_TIM16_Init+0x44>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008b5a:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <MX_TIM16_Init+0x44>)
 8008b5c:	4a0c      	ldr	r2, [pc, #48]	; (8008b90 <MX_TIM16_Init+0x4c>)
 8008b5e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b60:	4b09      	ldr	r3, [pc, #36]	; (8008b88 <MX_TIM16_Init+0x44>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008b66:	4b08      	ldr	r3, [pc, #32]	; (8008b88 <MX_TIM16_Init+0x44>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b6c:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <MX_TIM16_Init+0x44>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008b72:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <MX_TIM16_Init+0x44>)
 8008b74:	0018      	movs	r0, r3
 8008b76:	f002 fe03 	bl	800b780 <HAL_TIM_Base_Init>
 8008b7a:	1e03      	subs	r3, r0, #0
 8008b7c:	d001      	beq.n	8008b82 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8008b7e:	f000 f8ad 	bl	8008cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8008b82:	46c0      	nop			; (mov r8, r8)
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	2000052c 	.word	0x2000052c
 8008b8c:	40014400 	.word	0x40014400
 8008b90:	0000ffff 	.word	0x0000ffff

08008b94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008b98:	4b23      	ldr	r3, [pc, #140]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008b9a:	4a24      	ldr	r2, [pc, #144]	; (8008c2c <MX_USART2_UART_Init+0x98>)
 8008b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008b9e:	4b22      	ldr	r3, [pc, #136]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008ba0:	22e1      	movs	r2, #225	; 0xe1
 8008ba2:	0252      	lsls	r2, r2, #9
 8008ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008ba6:	4b20      	ldr	r3, [pc, #128]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008bac:	4b1e      	ldr	r3, [pc, #120]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008bb2:	4b1d      	ldr	r3, [pc, #116]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008bb8:	4b1b      	ldr	r3, [pc, #108]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008bba:	220c      	movs	r2, #12
 8008bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bbe:	4b1a      	ldr	r3, [pc, #104]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008bc4:	4b18      	ldr	r3, [pc, #96]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008bca:	4b17      	ldr	r3, [pc, #92]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008bd0:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008bd6:	4b14      	ldr	r3, [pc, #80]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008bdc:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008bde:	0018      	movs	r0, r3
 8008be0:	f002 feea 	bl	800b9b8 <HAL_UART_Init>
 8008be4:	1e03      	subs	r3, r0, #0
 8008be6:	d001      	beq.n	8008bec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008be8:	f000 f878 	bl	8008cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008bec:	4b0e      	ldr	r3, [pc, #56]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008bee:	2100      	movs	r1, #0
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f003 fb89 	bl	800c308 <HAL_UARTEx_SetTxFifoThreshold>
 8008bf6:	1e03      	subs	r3, r0, #0
 8008bf8:	d001      	beq.n	8008bfe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8008bfa:	f000 f86f 	bl	8008cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008bfe:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008c00:	2100      	movs	r1, #0
 8008c02:	0018      	movs	r0, r3
 8008c04:	f003 fbc0 	bl	800c388 <HAL_UARTEx_SetRxFifoThreshold>
 8008c08:	1e03      	subs	r3, r0, #0
 8008c0a:	d001      	beq.n	8008c10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008c0c:	f000 f866 	bl	8008cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008c10:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <MX_USART2_UART_Init+0x94>)
 8008c12:	0018      	movs	r0, r3
 8008c14:	f003 fb3e 	bl	800c294 <HAL_UARTEx_DisableFifoMode>
 8008c18:	1e03      	subs	r3, r0, #0
 8008c1a:	d001      	beq.n	8008c20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008c1c:	f000 f85e 	bl	8008cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008c20:	46c0      	nop			; (mov r8, r8)
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	46c0      	nop			; (mov r8, r8)
 8008c28:	2000049c 	.word	0x2000049c
 8008c2c:	40004400 	.word	0x40004400

08008c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008c30:	b590      	push	{r4, r7, lr}
 8008c32:	b089      	sub	sp, #36	; 0x24
 8008c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c36:	240c      	movs	r4, #12
 8008c38:	193b      	adds	r3, r7, r4
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	2314      	movs	r3, #20
 8008c3e:	001a      	movs	r2, r3
 8008c40:	2100      	movs	r1, #0
 8008c42:	f003 fc74 	bl	800c52e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c46:	4b23      	ldr	r3, [pc, #140]	; (8008cd4 <MX_GPIO_Init+0xa4>)
 8008c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c4a:	4b22      	ldr	r3, [pc, #136]	; (8008cd4 <MX_GPIO_Init+0xa4>)
 8008c4c:	2104      	movs	r1, #4
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	635a      	str	r2, [r3, #52]	; 0x34
 8008c52:	4b20      	ldr	r3, [pc, #128]	; (8008cd4 <MX_GPIO_Init+0xa4>)
 8008c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c56:	2204      	movs	r2, #4
 8008c58:	4013      	ands	r3, r2
 8008c5a:	60bb      	str	r3, [r7, #8]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c5e:	4b1d      	ldr	r3, [pc, #116]	; (8008cd4 <MX_GPIO_Init+0xa4>)
 8008c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c62:	4b1c      	ldr	r3, [pc, #112]	; (8008cd4 <MX_GPIO_Init+0xa4>)
 8008c64:	2101      	movs	r1, #1
 8008c66:	430a      	orrs	r2, r1
 8008c68:	635a      	str	r2, [r3, #52]	; 0x34
 8008c6a:	4b1a      	ldr	r3, [pc, #104]	; (8008cd4 <MX_GPIO_Init+0xa4>)
 8008c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6e:	2201      	movs	r2, #1
 8008c70:	4013      	ands	r3, r2
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8008c76:	23c0      	movs	r3, #192	; 0xc0
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4817      	ldr	r0, [pc, #92]	; (8008cd8 <MX_GPIO_Init+0xa8>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	0019      	movs	r1, r3
 8008c80:	f000 fda0 	bl	80097c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008c84:	193b      	adds	r3, r7, r4
 8008c86:	2280      	movs	r2, #128	; 0x80
 8008c88:	0192      	lsls	r2, r2, #6
 8008c8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c8c:	193b      	adds	r3, r7, r4
 8008c8e:	2200      	movs	r2, #0
 8008c90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c92:	193b      	adds	r3, r7, r4
 8008c94:	2200      	movs	r2, #0
 8008c96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c98:	193b      	adds	r3, r7, r4
 8008c9a:	4a0f      	ldr	r2, [pc, #60]	; (8008cd8 <MX_GPIO_Init+0xa8>)
 8008c9c:	0019      	movs	r1, r3
 8008c9e:	0010      	movs	r0, r2
 8008ca0:	f000 fc2c 	bl	80094fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008ca4:	0021      	movs	r1, r4
 8008ca6:	187b      	adds	r3, r7, r1
 8008ca8:	22c0      	movs	r2, #192	; 0xc0
 8008caa:	0092      	lsls	r2, r2, #2
 8008cac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cae:	187b      	adds	r3, r7, r1
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cb4:	187b      	adds	r3, r7, r1
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cba:	187b      	adds	r3, r7, r1
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008cc0:	187b      	adds	r3, r7, r1
 8008cc2:	4a05      	ldr	r2, [pc, #20]	; (8008cd8 <MX_GPIO_Init+0xa8>)
 8008cc4:	0019      	movs	r1, r3
 8008cc6:	0010      	movs	r0, r2
 8008cc8:	f000 fc18 	bl	80094fc <HAL_GPIO_Init>

}
 8008ccc:	46c0      	nop			; (mov r8, r8)
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	b009      	add	sp, #36	; 0x24
 8008cd2:	bd90      	pop	{r4, r7, pc}
 8008cd4:	40021000 	.word	0x40021000
 8008cd8:	50000800 	.word	0x50000800

08008cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008ce0:	b672      	cpsid	i
}
 8008ce2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8008ce4:	e7fe      	b.n	8008ce4 <Error_Handler+0x8>
	...

08008ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cee:	4b11      	ldr	r3, [pc, #68]	; (8008d34 <HAL_MspInit+0x4c>)
 8008cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cf2:	4b10      	ldr	r3, [pc, #64]	; (8008d34 <HAL_MspInit+0x4c>)
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8008cfa:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <HAL_MspInit+0x4c>)
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4013      	ands	r3, r2
 8008d02:	607b      	str	r3, [r7, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d06:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <HAL_MspInit+0x4c>)
 8008d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d0a:	4b0a      	ldr	r3, [pc, #40]	; (8008d34 <HAL_MspInit+0x4c>)
 8008d0c:	2180      	movs	r1, #128	; 0x80
 8008d0e:	0549      	lsls	r1, r1, #21
 8008d10:	430a      	orrs	r2, r1
 8008d12:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d14:	4b07      	ldr	r3, [pc, #28]	; (8008d34 <HAL_MspInit+0x4c>)
 8008d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d18:	2380      	movs	r3, #128	; 0x80
 8008d1a:	055b      	lsls	r3, r3, #21
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8008d22:	23c0      	movs	r3, #192	; 0xc0
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	0018      	movs	r0, r3
 8008d28:	f000 fb1e 	bl	8009368 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d2c:	46c0      	nop			; (mov r8, r8)
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	b002      	add	sp, #8
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	40021000 	.word	0x40021000

08008d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008d38:	b590      	push	{r4, r7, lr}
 8008d3a:	b091      	sub	sp, #68	; 0x44
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d40:	232c      	movs	r3, #44	; 0x2c
 8008d42:	18fb      	adds	r3, r7, r3
 8008d44:	0018      	movs	r0, r3
 8008d46:	2314      	movs	r3, #20
 8008d48:	001a      	movs	r2, r3
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	f003 fbef 	bl	800c52e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008d50:	2410      	movs	r4, #16
 8008d52:	193b      	adds	r3, r7, r4
 8008d54:	0018      	movs	r0, r3
 8008d56:	231c      	movs	r3, #28
 8008d58:	001a      	movs	r2, r3
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	f003 fbe7 	bl	800c52e <memset>
  if(hi2c->Instance==I2C1)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a23      	ldr	r2, [pc, #140]	; (8008df4 <HAL_I2C_MspInit+0xbc>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d13f      	bne.n	8008dea <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8008d6a:	193b      	adds	r3, r7, r4
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008d70:	193b      	adds	r3, r7, r4
 8008d72:	2200      	movs	r2, #0
 8008d74:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d76:	193b      	adds	r3, r7, r4
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f001 fb7b 	bl	800a474 <HAL_RCCEx_PeriphCLKConfig>
 8008d7e:	1e03      	subs	r3, r0, #0
 8008d80:	d001      	beq.n	8008d86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8008d82:	f7ff ffab 	bl	8008cdc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d86:	4b1c      	ldr	r3, [pc, #112]	; (8008df8 <HAL_I2C_MspInit+0xc0>)
 8008d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d8a:	4b1b      	ldr	r3, [pc, #108]	; (8008df8 <HAL_I2C_MspInit+0xc0>)
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	635a      	str	r2, [r3, #52]	; 0x34
 8008d92:	4b19      	ldr	r3, [pc, #100]	; (8008df8 <HAL_I2C_MspInit+0xc0>)
 8008d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d96:	2201      	movs	r2, #1
 8008d98:	4013      	ands	r3, r2
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008d9e:	212c      	movs	r1, #44	; 0x2c
 8008da0:	187b      	adds	r3, r7, r1
 8008da2:	22c0      	movs	r2, #192	; 0xc0
 8008da4:	00d2      	lsls	r2, r2, #3
 8008da6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008da8:	187b      	adds	r3, r7, r1
 8008daa:	2212      	movs	r2, #18
 8008dac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dae:	187b      	adds	r3, r7, r1
 8008db0:	2200      	movs	r2, #0
 8008db2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008db4:	187b      	adds	r3, r7, r1
 8008db6:	2200      	movs	r2, #0
 8008db8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8008dba:	187b      	adds	r3, r7, r1
 8008dbc:	2206      	movs	r2, #6
 8008dbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dc0:	187a      	adds	r2, r7, r1
 8008dc2:	23a0      	movs	r3, #160	; 0xa0
 8008dc4:	05db      	lsls	r3, r3, #23
 8008dc6:	0011      	movs	r1, r2
 8008dc8:	0018      	movs	r0, r3
 8008dca:	f000 fb97 	bl	80094fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008dce:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <HAL_I2C_MspInit+0xc0>)
 8008dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dd2:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <HAL_I2C_MspInit+0xc0>)
 8008dd4:	2180      	movs	r1, #128	; 0x80
 8008dd6:	0389      	lsls	r1, r1, #14
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	63da      	str	r2, [r3, #60]	; 0x3c
 8008ddc:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <HAL_I2C_MspInit+0xc0>)
 8008dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008de0:	2380      	movs	r3, #128	; 0x80
 8008de2:	039b      	lsls	r3, r3, #14
 8008de4:	4013      	ands	r3, r2
 8008de6:	60bb      	str	r3, [r7, #8]
 8008de8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008dea:	46c0      	nop			; (mov r8, r8)
 8008dec:	46bd      	mov	sp, r7
 8008dee:	b011      	add	sp, #68	; 0x44
 8008df0:	bd90      	pop	{r4, r7, pc}
 8008df2:	46c0      	nop			; (mov r8, r8)
 8008df4:	40005400 	.word	0x40005400
 8008df8:	40021000 	.word	0x40021000

08008dfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008dfc:	b590      	push	{r4, r7, lr}
 8008dfe:	b08b      	sub	sp, #44	; 0x2c
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008e04:	240c      	movs	r4, #12
 8008e06:	193b      	adds	r3, r7, r4
 8008e08:	0018      	movs	r0, r3
 8008e0a:	231c      	movs	r3, #28
 8008e0c:	001a      	movs	r2, r3
 8008e0e:	2100      	movs	r1, #0
 8008e10:	f003 fb8d 	bl	800c52e <memset>
  if(hrtc->Instance==RTC)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a15      	ldr	r2, [pc, #84]	; (8008e70 <HAL_RTC_MspInit+0x74>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d124      	bne.n	8008e68 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008e1e:	193b      	adds	r3, r7, r4
 8008e20:	2280      	movs	r2, #128	; 0x80
 8008e22:	0292      	lsls	r2, r2, #10
 8008e24:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008e26:	193b      	adds	r3, r7, r4
 8008e28:	2280      	movs	r2, #128	; 0x80
 8008e2a:	0092      	lsls	r2, r2, #2
 8008e2c:	619a      	str	r2, [r3, #24]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e2e:	193b      	adds	r3, r7, r4
 8008e30:	0018      	movs	r0, r3
 8008e32:	f001 fb1f 	bl	800a474 <HAL_RCCEx_PeriphCLKConfig>
 8008e36:	1e03      	subs	r3, r0, #0
 8008e38:	d001      	beq.n	8008e3e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8008e3a:	f7ff ff4f 	bl	8008cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	; (8008e74 <HAL_RTC_MspInit+0x78>)
 8008e40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e42:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <HAL_RTC_MspInit+0x78>)
 8008e44:	2180      	movs	r1, #128	; 0x80
 8008e46:	0209      	lsls	r1, r1, #8
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8008e4c:	4b09      	ldr	r3, [pc, #36]	; (8008e74 <HAL_RTC_MspInit+0x78>)
 8008e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e50:	4b08      	ldr	r3, [pc, #32]	; (8008e74 <HAL_RTC_MspInit+0x78>)
 8008e52:	2180      	movs	r1, #128	; 0x80
 8008e54:	00c9      	lsls	r1, r1, #3
 8008e56:	430a      	orrs	r2, r1
 8008e58:	63da      	str	r2, [r3, #60]	; 0x3c
 8008e5a:	4b06      	ldr	r3, [pc, #24]	; (8008e74 <HAL_RTC_MspInit+0x78>)
 8008e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e5e:	2380      	movs	r3, #128	; 0x80
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	4013      	ands	r3, r2
 8008e64:	60bb      	str	r3, [r7, #8]
 8008e66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008e68:	46c0      	nop			; (mov r8, r8)
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	b00b      	add	sp, #44	; 0x2c
 8008e6e:	bd90      	pop	{r4, r7, pc}
 8008e70:	40002800 	.word	0x40002800
 8008e74:	40021000 	.word	0x40021000

08008e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008e78:	b590      	push	{r4, r7, lr}
 8008e7a:	b08b      	sub	sp, #44	; 0x2c
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e80:	2414      	movs	r4, #20
 8008e82:	193b      	adds	r3, r7, r4
 8008e84:	0018      	movs	r0, r3
 8008e86:	2314      	movs	r3, #20
 8008e88:	001a      	movs	r2, r3
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	f003 fb4f 	bl	800c52e <memset>
  if(hspi->Instance==SPI1)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1b      	ldr	r2, [pc, #108]	; (8008f04 <HAL_SPI_MspInit+0x8c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d130      	bne.n	8008efc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008e9a:	4b1b      	ldr	r3, [pc, #108]	; (8008f08 <HAL_SPI_MspInit+0x90>)
 8008e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e9e:	4b1a      	ldr	r3, [pc, #104]	; (8008f08 <HAL_SPI_MspInit+0x90>)
 8008ea0:	2180      	movs	r1, #128	; 0x80
 8008ea2:	0149      	lsls	r1, r1, #5
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	641a      	str	r2, [r3, #64]	; 0x40
 8008ea8:	4b17      	ldr	r3, [pc, #92]	; (8008f08 <HAL_SPI_MspInit+0x90>)
 8008eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008eac:	2380      	movs	r3, #128	; 0x80
 8008eae:	015b      	lsls	r3, r3, #5
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	613b      	str	r3, [r7, #16]
 8008eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eb6:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <HAL_SPI_MspInit+0x90>)
 8008eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eba:	4b13      	ldr	r3, [pc, #76]	; (8008f08 <HAL_SPI_MspInit+0x90>)
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8008ec2:	4b11      	ldr	r3, [pc, #68]	; (8008f08 <HAL_SPI_MspInit+0x90>)
 8008ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008ece:	0021      	movs	r1, r4
 8008ed0:	187b      	adds	r3, r7, r1
 8008ed2:	22e0      	movs	r2, #224	; 0xe0
 8008ed4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ed6:	187b      	adds	r3, r7, r1
 8008ed8:	2202      	movs	r2, #2
 8008eda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008edc:	187b      	adds	r3, r7, r1
 8008ede:	2200      	movs	r2, #0
 8008ee0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ee2:	187b      	adds	r3, r7, r1
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8008ee8:	187b      	adds	r3, r7, r1
 8008eea:	2200      	movs	r2, #0
 8008eec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008eee:	187a      	adds	r2, r7, r1
 8008ef0:	23a0      	movs	r3, #160	; 0xa0
 8008ef2:	05db      	lsls	r3, r3, #23
 8008ef4:	0011      	movs	r1, r2
 8008ef6:	0018      	movs	r0, r3
 8008ef8:	f000 fb00 	bl	80094fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008efc:	46c0      	nop			; (mov r8, r8)
 8008efe:	46bd      	mov	sp, r7
 8008f00:	b00b      	add	sp, #44	; 0x2c
 8008f02:	bd90      	pop	{r4, r7, pc}
 8008f04:	40013000 	.word	0x40013000
 8008f08:	40021000 	.word	0x40021000

08008f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a0a      	ldr	r2, [pc, #40]	; (8008f44 <HAL_TIM_Base_MspInit+0x38>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d10d      	bne.n	8008f3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008f1e:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <HAL_TIM_Base_MspInit+0x3c>)
 8008f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f22:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <HAL_TIM_Base_MspInit+0x3c>)
 8008f24:	2180      	movs	r1, #128	; 0x80
 8008f26:	0289      	lsls	r1, r1, #10
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	641a      	str	r2, [r3, #64]	; 0x40
 8008f2c:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <HAL_TIM_Base_MspInit+0x3c>)
 8008f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f30:	2380      	movs	r3, #128	; 0x80
 8008f32:	029b      	lsls	r3, r3, #10
 8008f34:	4013      	ands	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8008f3a:	46c0      	nop			; (mov r8, r8)
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	b004      	add	sp, #16
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	46c0      	nop			; (mov r8, r8)
 8008f44:	40014400 	.word	0x40014400
 8008f48:	40021000 	.word	0x40021000

08008f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008f4c:	b590      	push	{r4, r7, lr}
 8008f4e:	b091      	sub	sp, #68	; 0x44
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f54:	232c      	movs	r3, #44	; 0x2c
 8008f56:	18fb      	adds	r3, r7, r3
 8008f58:	0018      	movs	r0, r3
 8008f5a:	2314      	movs	r3, #20
 8008f5c:	001a      	movs	r2, r3
 8008f5e:	2100      	movs	r1, #0
 8008f60:	f003 fae5 	bl	800c52e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008f64:	2410      	movs	r4, #16
 8008f66:	193b      	adds	r3, r7, r4
 8008f68:	0018      	movs	r0, r3
 8008f6a:	231c      	movs	r3, #28
 8008f6c:	001a      	movs	r2, r3
 8008f6e:	2100      	movs	r1, #0
 8008f70:	f003 fadd 	bl	800c52e <memset>
  if(huart->Instance==USART2)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a22      	ldr	r2, [pc, #136]	; (8009004 <HAL_UART_MspInit+0xb8>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d13e      	bne.n	8008ffc <HAL_UART_MspInit+0xb0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008f7e:	193b      	adds	r3, r7, r4
 8008f80:	2202      	movs	r2, #2
 8008f82:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008f84:	193b      	adds	r3, r7, r4
 8008f86:	2200      	movs	r2, #0
 8008f88:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008f8a:	193b      	adds	r3, r7, r4
 8008f8c:	0018      	movs	r0, r3
 8008f8e:	f001 fa71 	bl	800a474 <HAL_RCCEx_PeriphCLKConfig>
 8008f92:	1e03      	subs	r3, r0, #0
 8008f94:	d001      	beq.n	8008f9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008f96:	f7ff fea1 	bl	8008cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008f9a:	4b1b      	ldr	r3, [pc, #108]	; (8009008 <HAL_UART_MspInit+0xbc>)
 8008f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f9e:	4b1a      	ldr	r3, [pc, #104]	; (8009008 <HAL_UART_MspInit+0xbc>)
 8008fa0:	2180      	movs	r1, #128	; 0x80
 8008fa2:	0289      	lsls	r1, r1, #10
 8008fa4:	430a      	orrs	r2, r1
 8008fa6:	63da      	str	r2, [r3, #60]	; 0x3c
 8008fa8:	4b17      	ldr	r3, [pc, #92]	; (8009008 <HAL_UART_MspInit+0xbc>)
 8008faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fac:	2380      	movs	r3, #128	; 0x80
 8008fae:	029b      	lsls	r3, r3, #10
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fb6:	4b14      	ldr	r3, [pc, #80]	; (8009008 <HAL_UART_MspInit+0xbc>)
 8008fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fba:	4b13      	ldr	r3, [pc, #76]	; (8009008 <HAL_UART_MspInit+0xbc>)
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8008fc2:	4b11      	ldr	r3, [pc, #68]	; (8009008 <HAL_UART_MspInit+0xbc>)
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4013      	ands	r3, r2
 8008fca:	60bb      	str	r3, [r7, #8]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008fce:	212c      	movs	r1, #44	; 0x2c
 8008fd0:	187b      	adds	r3, r7, r1
 8008fd2:	220c      	movs	r2, #12
 8008fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fd6:	187b      	adds	r3, r7, r1
 8008fd8:	2202      	movs	r2, #2
 8008fda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fdc:	187b      	adds	r3, r7, r1
 8008fde:	2200      	movs	r2, #0
 8008fe0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fe2:	187b      	adds	r3, r7, r1
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8008fe8:	187b      	adds	r3, r7, r1
 8008fea:	2201      	movs	r2, #1
 8008fec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fee:	187a      	adds	r2, r7, r1
 8008ff0:	23a0      	movs	r3, #160	; 0xa0
 8008ff2:	05db      	lsls	r3, r3, #23
 8008ff4:	0011      	movs	r1, r2
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f000 fa80 	bl	80094fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008ffc:	46c0      	nop			; (mov r8, r8)
 8008ffe:	46bd      	mov	sp, r7
 8009000:	b011      	add	sp, #68	; 0x44
 8009002:	bd90      	pop	{r4, r7, pc}
 8009004:	40004400 	.word	0x40004400
 8009008:	40021000 	.word	0x40021000

0800900c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009010:	e7fe      	b.n	8009010 <NMI_Handler+0x4>

08009012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009016:	e7fe      	b.n	8009016 <HardFault_Handler+0x4>

08009018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800901c:	46c0      	nop			; (mov r8, r8)
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009026:	46c0      	nop			; (mov r8, r8)
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009030:	f000 f95a 	bl	80092e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009034:	46c0      	nop			; (mov r8, r8)
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	af00      	add	r7, sp, #0
	return 1;
 800903e:	2301      	movs	r3, #1
}
 8009040:	0018      	movs	r0, r3
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <_kill>:

int _kill(int pid, int sig)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009050:	f003 fa3a 	bl	800c4c8 <__errno>
 8009054:	0003      	movs	r3, r0
 8009056:	2216      	movs	r2, #22
 8009058:	601a      	str	r2, [r3, #0]
	return -1;
 800905a:	2301      	movs	r3, #1
 800905c:	425b      	negs	r3, r3
}
 800905e:	0018      	movs	r0, r3
 8009060:	46bd      	mov	sp, r7
 8009062:	b002      	add	sp, #8
 8009064:	bd80      	pop	{r7, pc}

08009066 <_exit>:

void _exit (int status)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800906e:	2301      	movs	r3, #1
 8009070:	425a      	negs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	0011      	movs	r1, r2
 8009076:	0018      	movs	r0, r3
 8009078:	f7ff ffe5 	bl	8009046 <_kill>
	while (1) {}		/* Make sure we hang here */
 800907c:	e7fe      	b.n	800907c <_exit+0x16>

0800907e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b086      	sub	sp, #24
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800908a:	2300      	movs	r3, #0
 800908c:	617b      	str	r3, [r7, #20]
 800908e:	e00a      	b.n	80090a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009090:	e000      	b.n	8009094 <_read+0x16>
 8009092:	bf00      	nop
 8009094:	0001      	movs	r1, r0
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	60ba      	str	r2, [r7, #8]
 800909c:	b2ca      	uxtb	r2, r1
 800909e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	3301      	adds	r3, #1
 80090a4:	617b      	str	r3, [r7, #20]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	dbf0      	blt.n	8009090 <_read+0x12>
	}

return len;
 80090ae:	687b      	ldr	r3, [r7, #4]
}
 80090b0:	0018      	movs	r0, r3
 80090b2:	46bd      	mov	sp, r7
 80090b4:	b006      	add	sp, #24
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090c4:	2300      	movs	r3, #0
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e009      	b.n	80090de <_write+0x26>
	{
		__io_putchar(*ptr++);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	60ba      	str	r2, [r7, #8]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	0018      	movs	r0, r3
 80090d4:	e000      	b.n	80090d8 <_write+0x20>
 80090d6:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	3301      	adds	r3, #1
 80090dc:	617b      	str	r3, [r7, #20]
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	dbf1      	blt.n	80090ca <_write+0x12>
	}
	return len;
 80090e6:	687b      	ldr	r3, [r7, #4]
}
 80090e8:	0018      	movs	r0, r3
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b006      	add	sp, #24
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <_close>:

int _close(int file)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
	return -1;
 80090f8:	2301      	movs	r3, #1
 80090fa:	425b      	negs	r3, r3
}
 80090fc:	0018      	movs	r0, r3
 80090fe:	46bd      	mov	sp, r7
 8009100:	b002      	add	sp, #8
 8009102:	bd80      	pop	{r7, pc}

08009104 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2280      	movs	r2, #128	; 0x80
 8009112:	0192      	lsls	r2, r2, #6
 8009114:	605a      	str	r2, [r3, #4]
	return 0;
 8009116:	2300      	movs	r3, #0
}
 8009118:	0018      	movs	r0, r3
 800911a:	46bd      	mov	sp, r7
 800911c:	b002      	add	sp, #8
 800911e:	bd80      	pop	{r7, pc}

08009120 <_isatty>:

int _isatty(int file)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
	return 1;
 8009128:	2301      	movs	r3, #1
}
 800912a:	0018      	movs	r0, r3
 800912c:	46bd      	mov	sp, r7
 800912e:	b002      	add	sp, #8
 8009130:	bd80      	pop	{r7, pc}

08009132 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	607a      	str	r2, [r7, #4]
	return 0;
 800913e:	2300      	movs	r3, #0
}
 8009140:	0018      	movs	r0, r3
 8009142:	46bd      	mov	sp, r7
 8009144:	b004      	add	sp, #16
 8009146:	bd80      	pop	{r7, pc}

08009148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009150:	4a14      	ldr	r2, [pc, #80]	; (80091a4 <_sbrk+0x5c>)
 8009152:	4b15      	ldr	r3, [pc, #84]	; (80091a8 <_sbrk+0x60>)
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800915c:	4b13      	ldr	r3, [pc, #76]	; (80091ac <_sbrk+0x64>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d102      	bne.n	800916a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009164:	4b11      	ldr	r3, [pc, #68]	; (80091ac <_sbrk+0x64>)
 8009166:	4a12      	ldr	r2, [pc, #72]	; (80091b0 <_sbrk+0x68>)
 8009168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800916a:	4b10      	ldr	r3, [pc, #64]	; (80091ac <_sbrk+0x64>)
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	18d3      	adds	r3, r2, r3
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	429a      	cmp	r2, r3
 8009176:	d207      	bcs.n	8009188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009178:	f003 f9a6 	bl	800c4c8 <__errno>
 800917c:	0003      	movs	r3, r0
 800917e:	220c      	movs	r2, #12
 8009180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009182:	2301      	movs	r3, #1
 8009184:	425b      	negs	r3, r3
 8009186:	e009      	b.n	800919c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009188:	4b08      	ldr	r3, [pc, #32]	; (80091ac <_sbrk+0x64>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800918e:	4b07      	ldr	r3, [pc, #28]	; (80091ac <_sbrk+0x64>)
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	18d2      	adds	r2, r2, r3
 8009196:	4b05      	ldr	r3, [pc, #20]	; (80091ac <_sbrk+0x64>)
 8009198:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800919a:	68fb      	ldr	r3, [r7, #12]
}
 800919c:	0018      	movs	r0, r3
 800919e:	46bd      	mov	sp, r7
 80091a0:	b006      	add	sp, #24
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	20009000 	.word	0x20009000
 80091a8:	00000400 	.word	0x00000400
 80091ac:	20000200 	.word	0x20000200
 80091b0:	20000590 	.word	0x20000590

080091b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80091b8:	46c0      	nop			; (mov r8, r8)
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80091c0:	480d      	ldr	r0, [pc, #52]	; (80091f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80091c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80091c4:	f7ff fff6 	bl	80091b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80091c8:	480c      	ldr	r0, [pc, #48]	; (80091fc <LoopForever+0x6>)
  ldr r1, =_edata
 80091ca:	490d      	ldr	r1, [pc, #52]	; (8009200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80091cc:	4a0d      	ldr	r2, [pc, #52]	; (8009204 <LoopForever+0xe>)
  movs r3, #0
 80091ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80091d0:	e002      	b.n	80091d8 <LoopCopyDataInit>

080091d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091d6:	3304      	adds	r3, #4

080091d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091dc:	d3f9      	bcc.n	80091d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091de:	4a0a      	ldr	r2, [pc, #40]	; (8009208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80091e0:	4c0a      	ldr	r4, [pc, #40]	; (800920c <LoopForever+0x16>)
  movs r3, #0
 80091e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091e4:	e001      	b.n	80091ea <LoopFillZerobss>

080091e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091e8:	3204      	adds	r2, #4

080091ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091ec:	d3fb      	bcc.n	80091e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80091ee:	f003 f971 	bl	800c4d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80091f2:	f7fc fc45 	bl	8005a80 <main>

080091f6 <LoopForever>:

LoopForever:
  b LoopForever
 80091f6:	e7fe      	b.n	80091f6 <LoopForever>
  ldr   r0, =_estack
 80091f8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80091fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009200:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8009204:	080126c0 	.word	0x080126c0
  ldr r2, =_sbss
 8009208:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800920c:	2000058c 	.word	0x2000058c

08009210 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009210:	e7fe      	b.n	8009210 <ADC1_IRQHandler>
	...

08009214 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800921a:	1dfb      	adds	r3, r7, #7
 800921c:	2200      	movs	r2, #0
 800921e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009220:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <HAL_Init+0x3c>)
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	4b0a      	ldr	r3, [pc, #40]	; (8009250 <HAL_Init+0x3c>)
 8009226:	2180      	movs	r1, #128	; 0x80
 8009228:	0049      	lsls	r1, r1, #1
 800922a:	430a      	orrs	r2, r1
 800922c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800922e:	2003      	movs	r0, #3
 8009230:	f000 f810 	bl	8009254 <HAL_InitTick>
 8009234:	1e03      	subs	r3, r0, #0
 8009236:	d003      	beq.n	8009240 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8009238:	1dfb      	adds	r3, r7, #7
 800923a:	2201      	movs	r2, #1
 800923c:	701a      	strb	r2, [r3, #0]
 800923e:	e001      	b.n	8009244 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8009240:	f7ff fd52 	bl	8008ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009244:	1dfb      	adds	r3, r7, #7
 8009246:	781b      	ldrb	r3, [r3, #0]
}
 8009248:	0018      	movs	r0, r3
 800924a:	46bd      	mov	sp, r7
 800924c:	b002      	add	sp, #8
 800924e:	bd80      	pop	{r7, pc}
 8009250:	40022000 	.word	0x40022000

08009254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009254:	b590      	push	{r4, r7, lr}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800925c:	230f      	movs	r3, #15
 800925e:	18fb      	adds	r3, r7, r3
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8009264:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <HAL_InitTick+0x88>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d02b      	beq.n	80092c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800926c:	4b1c      	ldr	r3, [pc, #112]	; (80092e0 <HAL_InitTick+0x8c>)
 800926e:	681c      	ldr	r4, [r3, #0]
 8009270:	4b1a      	ldr	r3, [pc, #104]	; (80092dc <HAL_InitTick+0x88>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	0019      	movs	r1, r3
 8009276:	23fa      	movs	r3, #250	; 0xfa
 8009278:	0098      	lsls	r0, r3, #2
 800927a:	f7f6 ff5d 	bl	8000138 <__udivsi3>
 800927e:	0003      	movs	r3, r0
 8009280:	0019      	movs	r1, r3
 8009282:	0020      	movs	r0, r4
 8009284:	f7f6 ff58 	bl	8000138 <__udivsi3>
 8009288:	0003      	movs	r3, r0
 800928a:	0018      	movs	r0, r3
 800928c:	f000 f929 	bl	80094e2 <HAL_SYSTICK_Config>
 8009290:	1e03      	subs	r3, r0, #0
 8009292:	d112      	bne.n	80092ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b03      	cmp	r3, #3
 8009298:	d80a      	bhi.n	80092b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	2301      	movs	r3, #1
 800929e:	425b      	negs	r3, r3
 80092a0:	2200      	movs	r2, #0
 80092a2:	0018      	movs	r0, r3
 80092a4:	f000 f908 	bl	80094b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80092a8:	4b0e      	ldr	r3, [pc, #56]	; (80092e4 <HAL_InitTick+0x90>)
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	e00d      	b.n	80092cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80092b0:	230f      	movs	r3, #15
 80092b2:	18fb      	adds	r3, r7, r3
 80092b4:	2201      	movs	r2, #1
 80092b6:	701a      	strb	r2, [r3, #0]
 80092b8:	e008      	b.n	80092cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80092ba:	230f      	movs	r3, #15
 80092bc:	18fb      	adds	r3, r7, r3
 80092be:	2201      	movs	r2, #1
 80092c0:	701a      	strb	r2, [r3, #0]
 80092c2:	e003      	b.n	80092cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80092c4:	230f      	movs	r3, #15
 80092c6:	18fb      	adds	r3, r7, r3
 80092c8:	2201      	movs	r2, #1
 80092ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80092cc:	230f      	movs	r3, #15
 80092ce:	18fb      	adds	r3, r7, r3
 80092d0:	781b      	ldrb	r3, [r3, #0]
}
 80092d2:	0018      	movs	r0, r3
 80092d4:	46bd      	mov	sp, r7
 80092d6:	b005      	add	sp, #20
 80092d8:	bd90      	pop	{r4, r7, pc}
 80092da:	46c0      	nop			; (mov r8, r8)
 80092dc:	2000000c 	.word	0x2000000c
 80092e0:	20000004 	.word	0x20000004
 80092e4:	20000008 	.word	0x20000008

080092e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80092ec:	4b05      	ldr	r3, [pc, #20]	; (8009304 <HAL_IncTick+0x1c>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	001a      	movs	r2, r3
 80092f2:	4b05      	ldr	r3, [pc, #20]	; (8009308 <HAL_IncTick+0x20>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	18d2      	adds	r2, r2, r3
 80092f8:	4b03      	ldr	r3, [pc, #12]	; (8009308 <HAL_IncTick+0x20>)
 80092fa:	601a      	str	r2, [r3, #0]
}
 80092fc:	46c0      	nop			; (mov r8, r8)
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	46c0      	nop			; (mov r8, r8)
 8009304:	2000000c 	.word	0x2000000c
 8009308:	20000578 	.word	0x20000578

0800930c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
  return uwTick;
 8009310:	4b02      	ldr	r3, [pc, #8]	; (800931c <HAL_GetTick+0x10>)
 8009312:	681b      	ldr	r3, [r3, #0]
}
 8009314:	0018      	movs	r0, r3
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	46c0      	nop			; (mov r8, r8)
 800931c:	20000578 	.word	0x20000578

08009320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009328:	f7ff fff0 	bl	800930c <HAL_GetTick>
 800932c:	0003      	movs	r3, r0
 800932e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3301      	adds	r3, #1
 8009338:	d005      	beq.n	8009346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <HAL_Delay+0x44>)
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	001a      	movs	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	189b      	adds	r3, r3, r2
 8009344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009346:	46c0      	nop			; (mov r8, r8)
 8009348:	f7ff ffe0 	bl	800930c <HAL_GetTick>
 800934c:	0002      	movs	r2, r0
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	429a      	cmp	r2, r3
 8009356:	d8f7      	bhi.n	8009348 <HAL_Delay+0x28>
  {
  }
}
 8009358:	46c0      	nop			; (mov r8, r8)
 800935a:	46c0      	nop			; (mov r8, r8)
 800935c:	46bd      	mov	sp, r7
 800935e:	b004      	add	sp, #16
 8009360:	bd80      	pop	{r7, pc}
 8009362:	46c0      	nop			; (mov r8, r8)
 8009364:	2000000c 	.word	0x2000000c

08009368 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8009370:	4b06      	ldr	r3, [pc, #24]	; (800938c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a06      	ldr	r2, [pc, #24]	; (8009390 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8009376:	4013      	ands	r3, r2
 8009378:	0019      	movs	r1, r3
 800937a:	4b04      	ldr	r3, [pc, #16]	; (800938c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	430a      	orrs	r2, r1
 8009380:	601a      	str	r2, [r3, #0]
}
 8009382:	46c0      	nop			; (mov r8, r8)
 8009384:	46bd      	mov	sp, r7
 8009386:	b002      	add	sp, #8
 8009388:	bd80      	pop	{r7, pc}
 800938a:	46c0      	nop			; (mov r8, r8)
 800938c:	40010000 	.word	0x40010000
 8009390:	fffff9ff 	.word	0xfffff9ff

08009394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	0002      	movs	r2, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	1dfb      	adds	r3, r7, #7
 80093a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80093a2:	1dfb      	adds	r3, r7, #7
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2b7f      	cmp	r3, #127	; 0x7f
 80093a8:	d828      	bhi.n	80093fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80093aa:	4a2f      	ldr	r2, [pc, #188]	; (8009468 <__NVIC_SetPriority+0xd4>)
 80093ac:	1dfb      	adds	r3, r7, #7
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	b25b      	sxtb	r3, r3
 80093b2:	089b      	lsrs	r3, r3, #2
 80093b4:	33c0      	adds	r3, #192	; 0xc0
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	589b      	ldr	r3, [r3, r2]
 80093ba:	1dfa      	adds	r2, r7, #7
 80093bc:	7812      	ldrb	r2, [r2, #0]
 80093be:	0011      	movs	r1, r2
 80093c0:	2203      	movs	r2, #3
 80093c2:	400a      	ands	r2, r1
 80093c4:	00d2      	lsls	r2, r2, #3
 80093c6:	21ff      	movs	r1, #255	; 0xff
 80093c8:	4091      	lsls	r1, r2
 80093ca:	000a      	movs	r2, r1
 80093cc:	43d2      	mvns	r2, r2
 80093ce:	401a      	ands	r2, r3
 80093d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	019b      	lsls	r3, r3, #6
 80093d6:	22ff      	movs	r2, #255	; 0xff
 80093d8:	401a      	ands	r2, r3
 80093da:	1dfb      	adds	r3, r7, #7
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	0018      	movs	r0, r3
 80093e0:	2303      	movs	r3, #3
 80093e2:	4003      	ands	r3, r0
 80093e4:	00db      	lsls	r3, r3, #3
 80093e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80093e8:	481f      	ldr	r0, [pc, #124]	; (8009468 <__NVIC_SetPriority+0xd4>)
 80093ea:	1dfb      	adds	r3, r7, #7
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	b25b      	sxtb	r3, r3
 80093f0:	089b      	lsrs	r3, r3, #2
 80093f2:	430a      	orrs	r2, r1
 80093f4:	33c0      	adds	r3, #192	; 0xc0
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80093fa:	e031      	b.n	8009460 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80093fc:	4a1b      	ldr	r2, [pc, #108]	; (800946c <__NVIC_SetPriority+0xd8>)
 80093fe:	1dfb      	adds	r3, r7, #7
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	0019      	movs	r1, r3
 8009404:	230f      	movs	r3, #15
 8009406:	400b      	ands	r3, r1
 8009408:	3b08      	subs	r3, #8
 800940a:	089b      	lsrs	r3, r3, #2
 800940c:	3306      	adds	r3, #6
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	18d3      	adds	r3, r2, r3
 8009412:	3304      	adds	r3, #4
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	1dfa      	adds	r2, r7, #7
 8009418:	7812      	ldrb	r2, [r2, #0]
 800941a:	0011      	movs	r1, r2
 800941c:	2203      	movs	r2, #3
 800941e:	400a      	ands	r2, r1
 8009420:	00d2      	lsls	r2, r2, #3
 8009422:	21ff      	movs	r1, #255	; 0xff
 8009424:	4091      	lsls	r1, r2
 8009426:	000a      	movs	r2, r1
 8009428:	43d2      	mvns	r2, r2
 800942a:	401a      	ands	r2, r3
 800942c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	019b      	lsls	r3, r3, #6
 8009432:	22ff      	movs	r2, #255	; 0xff
 8009434:	401a      	ands	r2, r3
 8009436:	1dfb      	adds	r3, r7, #7
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	0018      	movs	r0, r3
 800943c:	2303      	movs	r3, #3
 800943e:	4003      	ands	r3, r0
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009444:	4809      	ldr	r0, [pc, #36]	; (800946c <__NVIC_SetPriority+0xd8>)
 8009446:	1dfb      	adds	r3, r7, #7
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	001c      	movs	r4, r3
 800944c:	230f      	movs	r3, #15
 800944e:	4023      	ands	r3, r4
 8009450:	3b08      	subs	r3, #8
 8009452:	089b      	lsrs	r3, r3, #2
 8009454:	430a      	orrs	r2, r1
 8009456:	3306      	adds	r3, #6
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	18c3      	adds	r3, r0, r3
 800945c:	3304      	adds	r3, #4
 800945e:	601a      	str	r2, [r3, #0]
}
 8009460:	46c0      	nop			; (mov r8, r8)
 8009462:	46bd      	mov	sp, r7
 8009464:	b003      	add	sp, #12
 8009466:	bd90      	pop	{r4, r7, pc}
 8009468:	e000e100 	.word	0xe000e100
 800946c:	e000ed00 	.word	0xe000ed00

08009470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	1e5a      	subs	r2, r3, #1
 800947c:	2380      	movs	r3, #128	; 0x80
 800947e:	045b      	lsls	r3, r3, #17
 8009480:	429a      	cmp	r2, r3
 8009482:	d301      	bcc.n	8009488 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009484:	2301      	movs	r3, #1
 8009486:	e010      	b.n	80094aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009488:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <SysTick_Config+0x44>)
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	3a01      	subs	r2, #1
 800948e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009490:	2301      	movs	r3, #1
 8009492:	425b      	negs	r3, r3
 8009494:	2103      	movs	r1, #3
 8009496:	0018      	movs	r0, r3
 8009498:	f7ff ff7c 	bl	8009394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800949c:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <SysTick_Config+0x44>)
 800949e:	2200      	movs	r2, #0
 80094a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80094a2:	4b04      	ldr	r3, [pc, #16]	; (80094b4 <SysTick_Config+0x44>)
 80094a4:	2207      	movs	r2, #7
 80094a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	0018      	movs	r0, r3
 80094ac:	46bd      	mov	sp, r7
 80094ae:	b002      	add	sp, #8
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	46c0      	nop			; (mov r8, r8)
 80094b4:	e000e010 	.word	0xe000e010

080094b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	607a      	str	r2, [r7, #4]
 80094c2:	210f      	movs	r1, #15
 80094c4:	187b      	adds	r3, r7, r1
 80094c6:	1c02      	adds	r2, r0, #0
 80094c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	187b      	adds	r3, r7, r1
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	b25b      	sxtb	r3, r3
 80094d2:	0011      	movs	r1, r2
 80094d4:	0018      	movs	r0, r3
 80094d6:	f7ff ff5d 	bl	8009394 <__NVIC_SetPriority>
}
 80094da:	46c0      	nop			; (mov r8, r8)
 80094dc:	46bd      	mov	sp, r7
 80094de:	b004      	add	sp, #16
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	0018      	movs	r0, r3
 80094ee:	f7ff ffbf 	bl	8009470 <SysTick_Config>
 80094f2:	0003      	movs	r3, r0
}
 80094f4:	0018      	movs	r0, r3
 80094f6:	46bd      	mov	sp, r7
 80094f8:	b002      	add	sp, #8
 80094fa:	bd80      	pop	{r7, pc}

080094fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009506:	2300      	movs	r3, #0
 8009508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800950a:	e147      	b.n	800979c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2101      	movs	r1, #1
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	4091      	lsls	r1, r2
 8009516:	000a      	movs	r2, r1
 8009518:	4013      	ands	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d100      	bne.n	8009524 <HAL_GPIO_Init+0x28>
 8009522:	e138      	b.n	8009796 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	2203      	movs	r2, #3
 800952a:	4013      	ands	r3, r2
 800952c:	2b01      	cmp	r3, #1
 800952e:	d005      	beq.n	800953c <HAL_GPIO_Init+0x40>
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2203      	movs	r2, #3
 8009536:	4013      	ands	r3, r2
 8009538:	2b02      	cmp	r3, #2
 800953a:	d130      	bne.n	800959e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	2203      	movs	r2, #3
 8009548:	409a      	lsls	r2, r3
 800954a:	0013      	movs	r3, r2
 800954c:	43da      	mvns	r2, r3
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	4013      	ands	r3, r2
 8009552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	005b      	lsls	r3, r3, #1
 800955c:	409a      	lsls	r2, r3
 800955e:	0013      	movs	r3, r2
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4313      	orrs	r3, r2
 8009564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009572:	2201      	movs	r2, #1
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	409a      	lsls	r2, r3
 8009578:	0013      	movs	r3, r2
 800957a:	43da      	mvns	r2, r3
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	4013      	ands	r3, r2
 8009580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	091b      	lsrs	r3, r3, #4
 8009588:	2201      	movs	r2, #1
 800958a:	401a      	ands	r2, r3
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	409a      	lsls	r2, r3
 8009590:	0013      	movs	r3, r2
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	4313      	orrs	r3, r2
 8009596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	2203      	movs	r2, #3
 80095a4:	4013      	ands	r3, r2
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d017      	beq.n	80095da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	005b      	lsls	r3, r3, #1
 80095b4:	2203      	movs	r2, #3
 80095b6:	409a      	lsls	r2, r3
 80095b8:	0013      	movs	r3, r2
 80095ba:	43da      	mvns	r2, r3
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	4013      	ands	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	689a      	ldr	r2, [r3, #8]
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	409a      	lsls	r2, r3
 80095cc:	0013      	movs	r3, r2
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	2203      	movs	r2, #3
 80095e0:	4013      	ands	r3, r2
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d123      	bne.n	800962e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	08da      	lsrs	r2, r3, #3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3208      	adds	r2, #8
 80095ee:	0092      	lsls	r2, r2, #2
 80095f0:	58d3      	ldr	r3, [r2, r3]
 80095f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	2207      	movs	r2, #7
 80095f8:	4013      	ands	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	220f      	movs	r2, #15
 80095fe:	409a      	lsls	r2, r3
 8009600:	0013      	movs	r3, r2
 8009602:	43da      	mvns	r2, r3
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	4013      	ands	r3, r2
 8009608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	691a      	ldr	r2, [r3, #16]
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2107      	movs	r1, #7
 8009612:	400b      	ands	r3, r1
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	409a      	lsls	r2, r3
 8009618:	0013      	movs	r3, r2
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	4313      	orrs	r3, r2
 800961e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	08da      	lsrs	r2, r3, #3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3208      	adds	r2, #8
 8009628:	0092      	lsls	r2, r2, #2
 800962a:	6939      	ldr	r1, [r7, #16]
 800962c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	2203      	movs	r2, #3
 800963a:	409a      	lsls	r2, r3
 800963c:	0013      	movs	r3, r2
 800963e:	43da      	mvns	r2, r3
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	4013      	ands	r3, r2
 8009644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	2203      	movs	r2, #3
 800964c:	401a      	ands	r2, r3
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	005b      	lsls	r3, r3, #1
 8009652:	409a      	lsls	r2, r3
 8009654:	0013      	movs	r3, r2
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	4313      	orrs	r3, r2
 800965a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	23c0      	movs	r3, #192	; 0xc0
 8009668:	029b      	lsls	r3, r3, #10
 800966a:	4013      	ands	r3, r2
 800966c:	d100      	bne.n	8009670 <HAL_GPIO_Init+0x174>
 800966e:	e092      	b.n	8009796 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8009670:	4a50      	ldr	r2, [pc, #320]	; (80097b4 <HAL_GPIO_Init+0x2b8>)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	089b      	lsrs	r3, r3, #2
 8009676:	3318      	adds	r3, #24
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	589b      	ldr	r3, [r3, r2]
 800967c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2203      	movs	r2, #3
 8009682:	4013      	ands	r3, r2
 8009684:	00db      	lsls	r3, r3, #3
 8009686:	220f      	movs	r2, #15
 8009688:	409a      	lsls	r2, r3
 800968a:	0013      	movs	r3, r2
 800968c:	43da      	mvns	r2, r3
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	4013      	ands	r3, r2
 8009692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	23a0      	movs	r3, #160	; 0xa0
 8009698:	05db      	lsls	r3, r3, #23
 800969a:	429a      	cmp	r2, r3
 800969c:	d013      	beq.n	80096c6 <HAL_GPIO_Init+0x1ca>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a45      	ldr	r2, [pc, #276]	; (80097b8 <HAL_GPIO_Init+0x2bc>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d00d      	beq.n	80096c2 <HAL_GPIO_Init+0x1c6>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a44      	ldr	r2, [pc, #272]	; (80097bc <HAL_GPIO_Init+0x2c0>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d007      	beq.n	80096be <HAL_GPIO_Init+0x1c2>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a43      	ldr	r2, [pc, #268]	; (80097c0 <HAL_GPIO_Init+0x2c4>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d101      	bne.n	80096ba <HAL_GPIO_Init+0x1be>
 80096b6:	2303      	movs	r3, #3
 80096b8:	e006      	b.n	80096c8 <HAL_GPIO_Init+0x1cc>
 80096ba:	2305      	movs	r3, #5
 80096bc:	e004      	b.n	80096c8 <HAL_GPIO_Init+0x1cc>
 80096be:	2302      	movs	r3, #2
 80096c0:	e002      	b.n	80096c8 <HAL_GPIO_Init+0x1cc>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e000      	b.n	80096c8 <HAL_GPIO_Init+0x1cc>
 80096c6:	2300      	movs	r3, #0
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	2103      	movs	r1, #3
 80096cc:	400a      	ands	r2, r1
 80096ce:	00d2      	lsls	r2, r2, #3
 80096d0:	4093      	lsls	r3, r2
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80096d8:	4936      	ldr	r1, [pc, #216]	; (80097b4 <HAL_GPIO_Init+0x2b8>)
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	089b      	lsrs	r3, r3, #2
 80096de:	3318      	adds	r3, #24
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80096e6:	4a33      	ldr	r2, [pc, #204]	; (80097b4 <HAL_GPIO_Init+0x2b8>)
 80096e8:	2380      	movs	r3, #128	; 0x80
 80096ea:	58d3      	ldr	r3, [r2, r3]
 80096ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	43da      	mvns	r2, r3
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	4013      	ands	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	2380      	movs	r3, #128	; 0x80
 80096fe:	025b      	lsls	r3, r3, #9
 8009700:	4013      	ands	r3, r2
 8009702:	d003      	beq.n	800970c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4313      	orrs	r3, r2
 800970a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800970c:	4929      	ldr	r1, [pc, #164]	; (80097b4 <HAL_GPIO_Init+0x2b8>)
 800970e:	2280      	movs	r2, #128	; 0x80
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8009714:	4a27      	ldr	r2, [pc, #156]	; (80097b4 <HAL_GPIO_Init+0x2b8>)
 8009716:	2384      	movs	r3, #132	; 0x84
 8009718:	58d3      	ldr	r3, [r2, r3]
 800971a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	43da      	mvns	r2, r3
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	4013      	ands	r3, r2
 8009724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	2380      	movs	r3, #128	; 0x80
 800972c:	029b      	lsls	r3, r3, #10
 800972e:	4013      	ands	r3, r2
 8009730:	d003      	beq.n	800973a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4313      	orrs	r3, r2
 8009738:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800973a:	491e      	ldr	r1, [pc, #120]	; (80097b4 <HAL_GPIO_Init+0x2b8>)
 800973c:	2284      	movs	r2, #132	; 0x84
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009742:	4b1c      	ldr	r3, [pc, #112]	; (80097b4 <HAL_GPIO_Init+0x2b8>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	43da      	mvns	r2, r3
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	4013      	ands	r3, r2
 8009750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	2380      	movs	r3, #128	; 0x80
 8009758:	035b      	lsls	r3, r3, #13
 800975a:	4013      	ands	r3, r2
 800975c:	d003      	beq.n	8009766 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4313      	orrs	r3, r2
 8009764:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009766:	4b13      	ldr	r3, [pc, #76]	; (80097b4 <HAL_GPIO_Init+0x2b8>)
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800976c:	4b11      	ldr	r3, [pc, #68]	; (80097b4 <HAL_GPIO_Init+0x2b8>)
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	43da      	mvns	r2, r3
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	4013      	ands	r3, r2
 800977a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	2380      	movs	r3, #128	; 0x80
 8009782:	039b      	lsls	r3, r3, #14
 8009784:	4013      	ands	r3, r2
 8009786:	d003      	beq.n	8009790 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009790:	4b08      	ldr	r3, [pc, #32]	; (80097b4 <HAL_GPIO_Init+0x2b8>)
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	3301      	adds	r3, #1
 800979a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	40da      	lsrs	r2, r3
 80097a4:	1e13      	subs	r3, r2, #0
 80097a6:	d000      	beq.n	80097aa <HAL_GPIO_Init+0x2ae>
 80097a8:	e6b0      	b.n	800950c <HAL_GPIO_Init+0x10>
  }
}
 80097aa:	46c0      	nop			; (mov r8, r8)
 80097ac:	46c0      	nop			; (mov r8, r8)
 80097ae:	46bd      	mov	sp, r7
 80097b0:	b006      	add	sp, #24
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	40021800 	.word	0x40021800
 80097b8:	50000400 	.word	0x50000400
 80097bc:	50000800 	.word	0x50000800
 80097c0:	50000c00 	.word	0x50000c00

080097c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	0008      	movs	r0, r1
 80097ce:	0011      	movs	r1, r2
 80097d0:	1cbb      	adds	r3, r7, #2
 80097d2:	1c02      	adds	r2, r0, #0
 80097d4:	801a      	strh	r2, [r3, #0]
 80097d6:	1c7b      	adds	r3, r7, #1
 80097d8:	1c0a      	adds	r2, r1, #0
 80097da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80097dc:	1c7b      	adds	r3, r7, #1
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d004      	beq.n	80097ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80097e4:	1cbb      	adds	r3, r7, #2
 80097e6:	881a      	ldrh	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80097ec:	e003      	b.n	80097f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80097ee:	1cbb      	adds	r3, r7, #2
 80097f0:	881a      	ldrh	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	46bd      	mov	sp, r7
 80097fa:	b002      	add	sp, #8
 80097fc:	bd80      	pop	{r7, pc}
	...

08009800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e082      	b.n	8009918 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2241      	movs	r2, #65	; 0x41
 8009816:	5c9b      	ldrb	r3, [r3, r2]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d107      	bne.n	800982e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2240      	movs	r2, #64	; 0x40
 8009822:	2100      	movs	r1, #0
 8009824:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	0018      	movs	r0, r3
 800982a:	f7ff fa85 	bl	8008d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2241      	movs	r2, #65	; 0x41
 8009832:	2124      	movs	r1, #36	; 0x24
 8009834:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2101      	movs	r1, #1
 8009842:	438a      	bics	r2, r1
 8009844:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685a      	ldr	r2, [r3, #4]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4934      	ldr	r1, [pc, #208]	; (8009920 <HAL_I2C_Init+0x120>)
 8009850:	400a      	ands	r2, r1
 8009852:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689a      	ldr	r2, [r3, #8]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4931      	ldr	r1, [pc, #196]	; (8009924 <HAL_I2C_Init+0x124>)
 8009860:	400a      	ands	r2, r1
 8009862:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d108      	bne.n	800987e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2180      	movs	r1, #128	; 0x80
 8009876:	0209      	lsls	r1, r1, #8
 8009878:	430a      	orrs	r2, r1
 800987a:	609a      	str	r2, [r3, #8]
 800987c:	e007      	b.n	800988e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2184      	movs	r1, #132	; 0x84
 8009888:	0209      	lsls	r1, r1, #8
 800988a:	430a      	orrs	r2, r1
 800988c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	2b02      	cmp	r3, #2
 8009894:	d104      	bne.n	80098a0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2280      	movs	r2, #128	; 0x80
 800989c:	0112      	lsls	r2, r2, #4
 800989e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	491f      	ldr	r1, [pc, #124]	; (8009928 <HAL_I2C_Init+0x128>)
 80098ac:	430a      	orrs	r2, r1
 80098ae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68da      	ldr	r2, [r3, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	491a      	ldr	r1, [pc, #104]	; (8009924 <HAL_I2C_Init+0x124>)
 80098bc:	400a      	ands	r2, r1
 80098be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691a      	ldr	r2, [r3, #16]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	431a      	orrs	r2, r3
 80098ca:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	69d9      	ldr	r1, [r3, #28]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a1a      	ldr	r2, [r3, #32]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2101      	movs	r1, #1
 80098f6:	430a      	orrs	r2, r1
 80098f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2241      	movs	r2, #65	; 0x41
 8009904:	2120      	movs	r1, #32
 8009906:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2242      	movs	r2, #66	; 0x42
 8009912:	2100      	movs	r1, #0
 8009914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	0018      	movs	r0, r3
 800991a:	46bd      	mov	sp, r7
 800991c:	b002      	add	sp, #8
 800991e:	bd80      	pop	{r7, pc}
 8009920:	f0ffffff 	.word	0xf0ffffff
 8009924:	ffff7fff 	.word	0xffff7fff
 8009928:	02008000 	.word	0x02008000

0800992c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2241      	movs	r2, #65	; 0x41
 800993a:	5c9b      	ldrb	r3, [r3, r2]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b20      	cmp	r3, #32
 8009940:	d138      	bne.n	80099b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2240      	movs	r2, #64	; 0x40
 8009946:	5c9b      	ldrb	r3, [r3, r2]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d101      	bne.n	8009950 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800994c:	2302      	movs	r3, #2
 800994e:	e032      	b.n	80099b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2240      	movs	r2, #64	; 0x40
 8009954:	2101      	movs	r1, #1
 8009956:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2241      	movs	r2, #65	; 0x41
 800995c:	2124      	movs	r1, #36	; 0x24
 800995e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2101      	movs	r1, #1
 800996c:	438a      	bics	r2, r1
 800996e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4911      	ldr	r1, [pc, #68]	; (80099c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800997c:	400a      	ands	r2, r1
 800997e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6819      	ldr	r1, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	430a      	orrs	r2, r1
 800998e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2101      	movs	r1, #1
 800999c:	430a      	orrs	r2, r1
 800999e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2241      	movs	r2, #65	; 0x41
 80099a4:	2120      	movs	r1, #32
 80099a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2240      	movs	r2, #64	; 0x40
 80099ac:	2100      	movs	r1, #0
 80099ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	e000      	b.n	80099b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80099b4:	2302      	movs	r3, #2
  }
}
 80099b6:	0018      	movs	r0, r3
 80099b8:	46bd      	mov	sp, r7
 80099ba:	b002      	add	sp, #8
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	ffffefff 	.word	0xffffefff

080099c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2241      	movs	r2, #65	; 0x41
 80099d2:	5c9b      	ldrb	r3, [r3, r2]
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b20      	cmp	r3, #32
 80099d8:	d139      	bne.n	8009a4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2240      	movs	r2, #64	; 0x40
 80099de:	5c9b      	ldrb	r3, [r3, r2]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d101      	bne.n	80099e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80099e4:	2302      	movs	r3, #2
 80099e6:	e033      	b.n	8009a50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2240      	movs	r2, #64	; 0x40
 80099ec:	2101      	movs	r1, #1
 80099ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2241      	movs	r2, #65	; 0x41
 80099f4:	2124      	movs	r1, #36	; 0x24
 80099f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2101      	movs	r1, #1
 8009a04:	438a      	bics	r2, r1
 8009a06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4a11      	ldr	r2, [pc, #68]	; (8009a58 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009a14:	4013      	ands	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	021b      	lsls	r3, r3, #8
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2101      	movs	r1, #1
 8009a36:	430a      	orrs	r2, r1
 8009a38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2241      	movs	r2, #65	; 0x41
 8009a3e:	2120      	movs	r1, #32
 8009a40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2240      	movs	r2, #64	; 0x40
 8009a46:	2100      	movs	r1, #0
 8009a48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e000      	b.n	8009a50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009a4e:	2302      	movs	r3, #2
  }
}
 8009a50:	0018      	movs	r0, r3
 8009a52:	46bd      	mov	sp, r7
 8009a54:	b004      	add	sp, #16
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	fffff0ff 	.word	0xfffff0ff

08009a5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009a64:	4b19      	ldr	r3, [pc, #100]	; (8009acc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a19      	ldr	r2, [pc, #100]	; (8009ad0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	0019      	movs	r1, r3
 8009a6e:	4b17      	ldr	r3, [pc, #92]	; (8009acc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	2380      	movs	r3, #128	; 0x80
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d11f      	bne.n	8009ac0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009a80:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	0013      	movs	r3, r2
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	189b      	adds	r3, r3, r2
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	4912      	ldr	r1, [pc, #72]	; (8009ad8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009a8e:	0018      	movs	r0, r3
 8009a90:	f7f6 fb52 	bl	8000138 <__udivsi3>
 8009a94:	0003      	movs	r3, r0
 8009a96:	3301      	adds	r3, #1
 8009a98:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009a9a:	e008      	b.n	8009aae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	e001      	b.n	8009aae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e009      	b.n	8009ac2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009aae:	4b07      	ldr	r3, [pc, #28]	; (8009acc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009ab0:	695a      	ldr	r2, [r3, #20]
 8009ab2:	2380      	movs	r3, #128	; 0x80
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	401a      	ands	r2, r3
 8009ab8:	2380      	movs	r3, #128	; 0x80
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d0ed      	beq.n	8009a9c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	0018      	movs	r0, r3
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	b004      	add	sp, #16
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	46c0      	nop			; (mov r8, r8)
 8009acc:	40007000 	.word	0x40007000
 8009ad0:	fffff9ff 	.word	0xfffff9ff
 8009ad4:	20000004 	.word	0x20000004
 8009ad8:	000f4240 	.word	0x000f4240

08009adc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009ae0:	4b03      	ldr	r3, [pc, #12]	; (8009af0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009ae2:	689a      	ldr	r2, [r3, #8]
 8009ae4:	23e0      	movs	r3, #224	; 0xe0
 8009ae6:	01db      	lsls	r3, r3, #7
 8009ae8:	4013      	ands	r3, r2
}
 8009aea:	0018      	movs	r0, r3
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	40021000 	.word	0x40021000

08009af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e2f9      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	d100      	bne.n	8009b12 <HAL_RCC_OscConfig+0x1e>
 8009b10:	e07c      	b.n	8009c0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b12:	4bc3      	ldr	r3, [pc, #780]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	2238      	movs	r2, #56	; 0x38
 8009b18:	4013      	ands	r3, r2
 8009b1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b1c:	4bc0      	ldr	r3, [pc, #768]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	2203      	movs	r2, #3
 8009b22:	4013      	ands	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	2b10      	cmp	r3, #16
 8009b2a:	d102      	bne.n	8009b32 <HAL_RCC_OscConfig+0x3e>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d002      	beq.n	8009b38 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	2b08      	cmp	r3, #8
 8009b36:	d10b      	bne.n	8009b50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b38:	4bb9      	ldr	r3, [pc, #740]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	2380      	movs	r3, #128	; 0x80
 8009b3e:	029b      	lsls	r3, r3, #10
 8009b40:	4013      	ands	r3, r2
 8009b42:	d062      	beq.n	8009c0a <HAL_RCC_OscConfig+0x116>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d15e      	bne.n	8009c0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e2d4      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	2380      	movs	r3, #128	; 0x80
 8009b56:	025b      	lsls	r3, r3, #9
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d107      	bne.n	8009b6c <HAL_RCC_OscConfig+0x78>
 8009b5c:	4bb0      	ldr	r3, [pc, #704]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	4baf      	ldr	r3, [pc, #700]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009b62:	2180      	movs	r1, #128	; 0x80
 8009b64:	0249      	lsls	r1, r1, #9
 8009b66:	430a      	orrs	r2, r1
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	e020      	b.n	8009bae <HAL_RCC_OscConfig+0xba>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685a      	ldr	r2, [r3, #4]
 8009b70:	23a0      	movs	r3, #160	; 0xa0
 8009b72:	02db      	lsls	r3, r3, #11
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d10e      	bne.n	8009b96 <HAL_RCC_OscConfig+0xa2>
 8009b78:	4ba9      	ldr	r3, [pc, #676]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	4ba8      	ldr	r3, [pc, #672]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009b7e:	2180      	movs	r1, #128	; 0x80
 8009b80:	02c9      	lsls	r1, r1, #11
 8009b82:	430a      	orrs	r2, r1
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	4ba6      	ldr	r3, [pc, #664]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	4ba5      	ldr	r3, [pc, #660]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009b8c:	2180      	movs	r1, #128	; 0x80
 8009b8e:	0249      	lsls	r1, r1, #9
 8009b90:	430a      	orrs	r2, r1
 8009b92:	601a      	str	r2, [r3, #0]
 8009b94:	e00b      	b.n	8009bae <HAL_RCC_OscConfig+0xba>
 8009b96:	4ba2      	ldr	r3, [pc, #648]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	4ba1      	ldr	r3, [pc, #644]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009b9c:	49a1      	ldr	r1, [pc, #644]	; (8009e24 <HAL_RCC_OscConfig+0x330>)
 8009b9e:	400a      	ands	r2, r1
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	4b9f      	ldr	r3, [pc, #636]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	4b9e      	ldr	r3, [pc, #632]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009ba8:	499f      	ldr	r1, [pc, #636]	; (8009e28 <HAL_RCC_OscConfig+0x334>)
 8009baa:	400a      	ands	r2, r1
 8009bac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d014      	beq.n	8009be0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb6:	f7ff fba9 	bl	800930c <HAL_GetTick>
 8009bba:	0003      	movs	r3, r0
 8009bbc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009bbe:	e008      	b.n	8009bd2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bc0:	f7ff fba4 	bl	800930c <HAL_GetTick>
 8009bc4:	0002      	movs	r2, r0
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	2b64      	cmp	r3, #100	; 0x64
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e293      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009bd2:	4b93      	ldr	r3, [pc, #588]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	2380      	movs	r3, #128	; 0x80
 8009bd8:	029b      	lsls	r3, r3, #10
 8009bda:	4013      	ands	r3, r2
 8009bdc:	d0f0      	beq.n	8009bc0 <HAL_RCC_OscConfig+0xcc>
 8009bde:	e015      	b.n	8009c0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be0:	f7ff fb94 	bl	800930c <HAL_GetTick>
 8009be4:	0003      	movs	r3, r0
 8009be6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009be8:	e008      	b.n	8009bfc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bea:	f7ff fb8f 	bl	800930c <HAL_GetTick>
 8009bee:	0002      	movs	r2, r0
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	2b64      	cmp	r3, #100	; 0x64
 8009bf6:	d901      	bls.n	8009bfc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e27e      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009bfc:	4b88      	ldr	r3, [pc, #544]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	2380      	movs	r3, #128	; 0x80
 8009c02:	029b      	lsls	r3, r3, #10
 8009c04:	4013      	ands	r3, r2
 8009c06:	d1f0      	bne.n	8009bea <HAL_RCC_OscConfig+0xf6>
 8009c08:	e000      	b.n	8009c0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2202      	movs	r2, #2
 8009c12:	4013      	ands	r3, r2
 8009c14:	d100      	bne.n	8009c18 <HAL_RCC_OscConfig+0x124>
 8009c16:	e099      	b.n	8009d4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c18:	4b81      	ldr	r3, [pc, #516]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	2238      	movs	r2, #56	; 0x38
 8009c1e:	4013      	ands	r3, r2
 8009c20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c22:	4b7f      	ldr	r3, [pc, #508]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	2203      	movs	r2, #3
 8009c28:	4013      	ands	r3, r2
 8009c2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	2b10      	cmp	r3, #16
 8009c30:	d102      	bne.n	8009c38 <HAL_RCC_OscConfig+0x144>
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d002      	beq.n	8009c3e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d135      	bne.n	8009caa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c3e:	4b78      	ldr	r3, [pc, #480]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	2380      	movs	r3, #128	; 0x80
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	4013      	ands	r3, r2
 8009c48:	d005      	beq.n	8009c56 <HAL_RCC_OscConfig+0x162>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e251      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c56:	4b72      	ldr	r3, [pc, #456]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	4a74      	ldr	r2, [pc, #464]	; (8009e2c <HAL_RCC_OscConfig+0x338>)
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	0019      	movs	r1, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	021a      	lsls	r2, r3, #8
 8009c66:	4b6e      	ldr	r3, [pc, #440]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d112      	bne.n	8009c98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009c72:	4b6b      	ldr	r3, [pc, #428]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a6e      	ldr	r2, [pc, #440]	; (8009e30 <HAL_RCC_OscConfig+0x33c>)
 8009c78:	4013      	ands	r3, r2
 8009c7a:	0019      	movs	r1, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691a      	ldr	r2, [r3, #16]
 8009c80:	4b67      	ldr	r3, [pc, #412]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009c82:	430a      	orrs	r2, r1
 8009c84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009c86:	4b66      	ldr	r3, [pc, #408]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	0adb      	lsrs	r3, r3, #11
 8009c8c:	2207      	movs	r2, #7
 8009c8e:	4013      	ands	r3, r2
 8009c90:	4a68      	ldr	r2, [pc, #416]	; (8009e34 <HAL_RCC_OscConfig+0x340>)
 8009c92:	40da      	lsrs	r2, r3
 8009c94:	4b68      	ldr	r3, [pc, #416]	; (8009e38 <HAL_RCC_OscConfig+0x344>)
 8009c96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009c98:	4b68      	ldr	r3, [pc, #416]	; (8009e3c <HAL_RCC_OscConfig+0x348>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	f7ff fad9 	bl	8009254 <HAL_InitTick>
 8009ca2:	1e03      	subs	r3, r0, #0
 8009ca4:	d051      	beq.n	8009d4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e227      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d030      	beq.n	8009d14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009cb2:	4b5b      	ldr	r3, [pc, #364]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a5e      	ldr	r2, [pc, #376]	; (8009e30 <HAL_RCC_OscConfig+0x33c>)
 8009cb8:	4013      	ands	r3, r2
 8009cba:	0019      	movs	r1, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	691a      	ldr	r2, [r3, #16]
 8009cc0:	4b57      	ldr	r3, [pc, #348]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009cc6:	4b56      	ldr	r3, [pc, #344]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4b55      	ldr	r3, [pc, #340]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009ccc:	2180      	movs	r1, #128	; 0x80
 8009cce:	0049      	lsls	r1, r1, #1
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cd4:	f7ff fb1a 	bl	800930c <HAL_GetTick>
 8009cd8:	0003      	movs	r3, r0
 8009cda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cdc:	e008      	b.n	8009cf0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cde:	f7ff fb15 	bl	800930c <HAL_GetTick>
 8009ce2:	0002      	movs	r2, r0
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d901      	bls.n	8009cf0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e204      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cf0:	4b4b      	ldr	r3, [pc, #300]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	2380      	movs	r3, #128	; 0x80
 8009cf6:	00db      	lsls	r3, r3, #3
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	d0f0      	beq.n	8009cde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cfc:	4b48      	ldr	r3, [pc, #288]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	4a4a      	ldr	r2, [pc, #296]	; (8009e2c <HAL_RCC_OscConfig+0x338>)
 8009d02:	4013      	ands	r3, r2
 8009d04:	0019      	movs	r1, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	021a      	lsls	r2, r3, #8
 8009d0c:	4b44      	ldr	r3, [pc, #272]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	605a      	str	r2, [r3, #4]
 8009d12:	e01b      	b.n	8009d4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009d14:	4b42      	ldr	r3, [pc, #264]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	4b41      	ldr	r3, [pc, #260]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009d1a:	4949      	ldr	r1, [pc, #292]	; (8009e40 <HAL_RCC_OscConfig+0x34c>)
 8009d1c:	400a      	ands	r2, r1
 8009d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d20:	f7ff faf4 	bl	800930c <HAL_GetTick>
 8009d24:	0003      	movs	r3, r0
 8009d26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d28:	e008      	b.n	8009d3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d2a:	f7ff faef 	bl	800930c <HAL_GetTick>
 8009d2e:	0002      	movs	r2, r0
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d901      	bls.n	8009d3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e1de      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d3c:	4b38      	ldr	r3, [pc, #224]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	2380      	movs	r3, #128	; 0x80
 8009d42:	00db      	lsls	r3, r3, #3
 8009d44:	4013      	ands	r3, r2
 8009d46:	d1f0      	bne.n	8009d2a <HAL_RCC_OscConfig+0x236>
 8009d48:	e000      	b.n	8009d4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2208      	movs	r2, #8
 8009d52:	4013      	ands	r3, r2
 8009d54:	d047      	beq.n	8009de6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009d56:	4b32      	ldr	r3, [pc, #200]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	2238      	movs	r2, #56	; 0x38
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	2b18      	cmp	r3, #24
 8009d60:	d10a      	bne.n	8009d78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009d62:	4b2f      	ldr	r3, [pc, #188]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d66:	2202      	movs	r2, #2
 8009d68:	4013      	ands	r3, r2
 8009d6a:	d03c      	beq.n	8009de6 <HAL_RCC_OscConfig+0x2f2>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d138      	bne.n	8009de6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e1c0      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d019      	beq.n	8009db4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009d80:	4b27      	ldr	r3, [pc, #156]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009d82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009d84:	4b26      	ldr	r3, [pc, #152]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009d86:	2101      	movs	r1, #1
 8009d88:	430a      	orrs	r2, r1
 8009d8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d8c:	f7ff fabe 	bl	800930c <HAL_GetTick>
 8009d90:	0003      	movs	r3, r0
 8009d92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009d94:	e008      	b.n	8009da8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d96:	f7ff fab9 	bl	800930c <HAL_GetTick>
 8009d9a:	0002      	movs	r2, r0
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d901      	bls.n	8009da8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e1a8      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009da8:	4b1d      	ldr	r3, [pc, #116]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dac:	2202      	movs	r2, #2
 8009dae:	4013      	ands	r3, r2
 8009db0:	d0f1      	beq.n	8009d96 <HAL_RCC_OscConfig+0x2a2>
 8009db2:	e018      	b.n	8009de6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009db4:	4b1a      	ldr	r3, [pc, #104]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009db6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009db8:	4b19      	ldr	r3, [pc, #100]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009dba:	2101      	movs	r1, #1
 8009dbc:	438a      	bics	r2, r1
 8009dbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc0:	f7ff faa4 	bl	800930c <HAL_GetTick>
 8009dc4:	0003      	movs	r3, r0
 8009dc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009dc8:	e008      	b.n	8009ddc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dca:	f7ff fa9f 	bl	800930c <HAL_GetTick>
 8009dce:	0002      	movs	r2, r0
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d901      	bls.n	8009ddc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e18e      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009ddc:	4b10      	ldr	r3, [pc, #64]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009de0:	2202      	movs	r2, #2
 8009de2:	4013      	ands	r3, r2
 8009de4:	d1f1      	bne.n	8009dca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2204      	movs	r2, #4
 8009dec:	4013      	ands	r3, r2
 8009dee:	d100      	bne.n	8009df2 <HAL_RCC_OscConfig+0x2fe>
 8009df0:	e0c6      	b.n	8009f80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009df2:	231f      	movs	r3, #31
 8009df4:	18fb      	adds	r3, r7, r3
 8009df6:	2200      	movs	r2, #0
 8009df8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	2238      	movs	r2, #56	; 0x38
 8009e00:	4013      	ands	r3, r2
 8009e02:	2b20      	cmp	r3, #32
 8009e04:	d11e      	bne.n	8009e44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009e06:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <HAL_RCC_OscConfig+0x32c>)
 8009e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	d100      	bne.n	8009e12 <HAL_RCC_OscConfig+0x31e>
 8009e10:	e0b6      	b.n	8009f80 <HAL_RCC_OscConfig+0x48c>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d000      	beq.n	8009e1c <HAL_RCC_OscConfig+0x328>
 8009e1a:	e0b1      	b.n	8009f80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e16c      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
 8009e20:	40021000 	.word	0x40021000
 8009e24:	fffeffff 	.word	0xfffeffff
 8009e28:	fffbffff 	.word	0xfffbffff
 8009e2c:	ffff80ff 	.word	0xffff80ff
 8009e30:	ffffc7ff 	.word	0xffffc7ff
 8009e34:	00f42400 	.word	0x00f42400
 8009e38:	20000004 	.word	0x20000004
 8009e3c:	20000008 	.word	0x20000008
 8009e40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009e44:	4baf      	ldr	r3, [pc, #700]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e48:	2380      	movs	r3, #128	; 0x80
 8009e4a:	055b      	lsls	r3, r3, #21
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	d101      	bne.n	8009e54 <HAL_RCC_OscConfig+0x360>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e000      	b.n	8009e56 <HAL_RCC_OscConfig+0x362>
 8009e54:	2300      	movs	r3, #0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d011      	beq.n	8009e7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009e5a:	4baa      	ldr	r3, [pc, #680]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e5e:	4ba9      	ldr	r3, [pc, #676]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009e60:	2180      	movs	r1, #128	; 0x80
 8009e62:	0549      	lsls	r1, r1, #21
 8009e64:	430a      	orrs	r2, r1
 8009e66:	63da      	str	r2, [r3, #60]	; 0x3c
 8009e68:	4ba6      	ldr	r3, [pc, #664]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e6c:	2380      	movs	r3, #128	; 0x80
 8009e6e:	055b      	lsls	r3, r3, #21
 8009e70:	4013      	ands	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8009e76:	231f      	movs	r3, #31
 8009e78:	18fb      	adds	r3, r7, r3
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e7e:	4ba2      	ldr	r3, [pc, #648]	; (800a108 <HAL_RCC_OscConfig+0x614>)
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	2380      	movs	r3, #128	; 0x80
 8009e84:	005b      	lsls	r3, r3, #1
 8009e86:	4013      	ands	r3, r2
 8009e88:	d11a      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e8a:	4b9f      	ldr	r3, [pc, #636]	; (800a108 <HAL_RCC_OscConfig+0x614>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	4b9e      	ldr	r3, [pc, #632]	; (800a108 <HAL_RCC_OscConfig+0x614>)
 8009e90:	2180      	movs	r1, #128	; 0x80
 8009e92:	0049      	lsls	r1, r1, #1
 8009e94:	430a      	orrs	r2, r1
 8009e96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009e98:	f7ff fa38 	bl	800930c <HAL_GetTick>
 8009e9c:	0003      	movs	r3, r0
 8009e9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ea0:	e008      	b.n	8009eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ea2:	f7ff fa33 	bl	800930c <HAL_GetTick>
 8009ea6:	0002      	movs	r2, r0
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d901      	bls.n	8009eb4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e122      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009eb4:	4b94      	ldr	r3, [pc, #592]	; (800a108 <HAL_RCC_OscConfig+0x614>)
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	2380      	movs	r3, #128	; 0x80
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	d0f0      	beq.n	8009ea2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d106      	bne.n	8009ed6 <HAL_RCC_OscConfig+0x3e2>
 8009ec8:	4b8e      	ldr	r3, [pc, #568]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009eca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ecc:	4b8d      	ldr	r3, [pc, #564]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009ece:	2101      	movs	r1, #1
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ed4:	e01c      	b.n	8009f10 <HAL_RCC_OscConfig+0x41c>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	2b05      	cmp	r3, #5
 8009edc:	d10c      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x404>
 8009ede:	4b89      	ldr	r3, [pc, #548]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009ee0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ee2:	4b88      	ldr	r3, [pc, #544]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009ee4:	2104      	movs	r1, #4
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009eea:	4b86      	ldr	r3, [pc, #536]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009eec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009eee:	4b85      	ldr	r3, [pc, #532]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ef6:	e00b      	b.n	8009f10 <HAL_RCC_OscConfig+0x41c>
 8009ef8:	4b82      	ldr	r3, [pc, #520]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009efa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009efc:	4b81      	ldr	r3, [pc, #516]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009efe:	2101      	movs	r1, #1
 8009f00:	438a      	bics	r2, r1
 8009f02:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f04:	4b7f      	ldr	r3, [pc, #508]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009f06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f08:	4b7e      	ldr	r3, [pc, #504]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009f0a:	2104      	movs	r1, #4
 8009f0c:	438a      	bics	r2, r1
 8009f0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d014      	beq.n	8009f42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f18:	f7ff f9f8 	bl	800930c <HAL_GetTick>
 8009f1c:	0003      	movs	r3, r0
 8009f1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f20:	e009      	b.n	8009f36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f22:	f7ff f9f3 	bl	800930c <HAL_GetTick>
 8009f26:	0002      	movs	r2, r0
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	4a77      	ldr	r2, [pc, #476]	; (800a10c <HAL_RCC_OscConfig+0x618>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d901      	bls.n	8009f36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e0e1      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f36:	4b73      	ldr	r3, [pc, #460]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	d0f0      	beq.n	8009f22 <HAL_RCC_OscConfig+0x42e>
 8009f40:	e013      	b.n	8009f6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f42:	f7ff f9e3 	bl	800930c <HAL_GetTick>
 8009f46:	0003      	movs	r3, r0
 8009f48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f4a:	e009      	b.n	8009f60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f4c:	f7ff f9de 	bl	800930c <HAL_GetTick>
 8009f50:	0002      	movs	r2, r0
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	4a6d      	ldr	r2, [pc, #436]	; (800a10c <HAL_RCC_OscConfig+0x618>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d901      	bls.n	8009f60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e0cc      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f60:	4b68      	ldr	r3, [pc, #416]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f64:	2202      	movs	r2, #2
 8009f66:	4013      	ands	r3, r2
 8009f68:	d1f0      	bne.n	8009f4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009f6a:	231f      	movs	r3, #31
 8009f6c:	18fb      	adds	r3, r7, r3
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d105      	bne.n	8009f80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009f74:	4b63      	ldr	r3, [pc, #396]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f78:	4b62      	ldr	r3, [pc, #392]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009f7a:	4965      	ldr	r1, [pc, #404]	; (800a110 <HAL_RCC_OscConfig+0x61c>)
 8009f7c:	400a      	ands	r2, r1
 8009f7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d100      	bne.n	8009f8a <HAL_RCC_OscConfig+0x496>
 8009f88:	e0b6      	b.n	800a0f8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f8a:	4b5e      	ldr	r3, [pc, #376]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	2238      	movs	r2, #56	; 0x38
 8009f90:	4013      	ands	r3, r2
 8009f92:	2b10      	cmp	r3, #16
 8009f94:	d100      	bne.n	8009f98 <HAL_RCC_OscConfig+0x4a4>
 8009f96:	e07e      	b.n	800a096 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	69db      	ldr	r3, [r3, #28]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d153      	bne.n	800a048 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fa0:	4b58      	ldr	r3, [pc, #352]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	4b57      	ldr	r3, [pc, #348]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009fa6:	495b      	ldr	r1, [pc, #364]	; (800a114 <HAL_RCC_OscConfig+0x620>)
 8009fa8:	400a      	ands	r2, r1
 8009faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fac:	f7ff f9ae 	bl	800930c <HAL_GetTick>
 8009fb0:	0003      	movs	r3, r0
 8009fb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fb4:	e008      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fb6:	f7ff f9a9 	bl	800930c <HAL_GetTick>
 8009fba:	0002      	movs	r2, r0
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d901      	bls.n	8009fc8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e098      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fc8:	4b4e      	ldr	r3, [pc, #312]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	2380      	movs	r3, #128	; 0x80
 8009fce:	049b      	lsls	r3, r3, #18
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	d1f0      	bne.n	8009fb6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fd4:	4b4b      	ldr	r3, [pc, #300]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	4a4f      	ldr	r2, [pc, #316]	; (800a118 <HAL_RCC_OscConfig+0x624>)
 8009fda:	4013      	ands	r3, r2
 8009fdc:	0019      	movs	r1, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1a      	ldr	r2, [r3, #32]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fec:	021b      	lsls	r3, r3, #8
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff4:	431a      	orrs	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffa:	431a      	orrs	r2, r3
 8009ffc:	4b41      	ldr	r3, [pc, #260]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 8009ffe:	430a      	orrs	r2, r1
 800a000:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a002:	4b40      	ldr	r3, [pc, #256]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	4b3f      	ldr	r3, [pc, #252]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a008:	2180      	movs	r1, #128	; 0x80
 800a00a:	0449      	lsls	r1, r1, #17
 800a00c:	430a      	orrs	r2, r1
 800a00e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a010:	4b3c      	ldr	r3, [pc, #240]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a012:	68da      	ldr	r2, [r3, #12]
 800a014:	4b3b      	ldr	r3, [pc, #236]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a016:	2180      	movs	r1, #128	; 0x80
 800a018:	0549      	lsls	r1, r1, #21
 800a01a:	430a      	orrs	r2, r1
 800a01c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a01e:	f7ff f975 	bl	800930c <HAL_GetTick>
 800a022:	0003      	movs	r3, r0
 800a024:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a026:	e008      	b.n	800a03a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a028:	f7ff f970 	bl	800930c <HAL_GetTick>
 800a02c:	0002      	movs	r2, r0
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b02      	cmp	r3, #2
 800a034:	d901      	bls.n	800a03a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e05f      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a03a:	4b32      	ldr	r3, [pc, #200]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	2380      	movs	r3, #128	; 0x80
 800a040:	049b      	lsls	r3, r3, #18
 800a042:	4013      	ands	r3, r2
 800a044:	d0f0      	beq.n	800a028 <HAL_RCC_OscConfig+0x534>
 800a046:	e057      	b.n	800a0f8 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a048:	4b2e      	ldr	r3, [pc, #184]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	4b2d      	ldr	r3, [pc, #180]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a04e:	4931      	ldr	r1, [pc, #196]	; (800a114 <HAL_RCC_OscConfig+0x620>)
 800a050:	400a      	ands	r2, r1
 800a052:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800a054:	4b2b      	ldr	r3, [pc, #172]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a056:	68da      	ldr	r2, [r3, #12]
 800a058:	4b2a      	ldr	r3, [pc, #168]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a05a:	2103      	movs	r1, #3
 800a05c:	438a      	bics	r2, r1
 800a05e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800a060:	4b28      	ldr	r3, [pc, #160]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a062:	68da      	ldr	r2, [r3, #12]
 800a064:	4b27      	ldr	r3, [pc, #156]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a066:	492d      	ldr	r1, [pc, #180]	; (800a11c <HAL_RCC_OscConfig+0x628>)
 800a068:	400a      	ands	r2, r1
 800a06a:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a06c:	f7ff f94e 	bl	800930c <HAL_GetTick>
 800a070:	0003      	movs	r3, r0
 800a072:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a074:	e008      	b.n	800a088 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a076:	f7ff f949 	bl	800930c <HAL_GetTick>
 800a07a:	0002      	movs	r2, r0
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	2b02      	cmp	r3, #2
 800a082:	d901      	bls.n	800a088 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e038      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a088:	4b1e      	ldr	r3, [pc, #120]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	2380      	movs	r3, #128	; 0x80
 800a08e:	049b      	lsls	r3, r3, #18
 800a090:	4013      	ands	r3, r2
 800a092:	d1f0      	bne.n	800a076 <HAL_RCC_OscConfig+0x582>
 800a094:	e030      	b.n	800a0f8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d101      	bne.n	800a0a2 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e02b      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a0a2:	4b18      	ldr	r3, [pc, #96]	; (800a104 <HAL_RCC_OscConfig+0x610>)
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	2203      	movs	r2, #3
 800a0ac:	401a      	ands	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d11e      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2270      	movs	r2, #112	; 0x70
 800a0ba:	401a      	ands	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d117      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	23fe      	movs	r3, #254	; 0xfe
 800a0c8:	01db      	lsls	r3, r3, #7
 800a0ca:	401a      	ands	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d10e      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	23f8      	movs	r3, #248	; 0xf8
 800a0da:	039b      	lsls	r3, r3, #14
 800a0dc:	401a      	ands	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d106      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	0f5b      	lsrs	r3, r3, #29
 800a0ea:	075a      	lsls	r2, r3, #29
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d001      	beq.n	800a0f8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e000      	b.n	800a0fa <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	b008      	add	sp, #32
 800a100:	bd80      	pop	{r7, pc}
 800a102:	46c0      	nop			; (mov r8, r8)
 800a104:	40021000 	.word	0x40021000
 800a108:	40007000 	.word	0x40007000
 800a10c:	00001388 	.word	0x00001388
 800a110:	efffffff 	.word	0xefffffff
 800a114:	feffffff 	.word	0xfeffffff
 800a118:	1fc1808c 	.word	0x1fc1808c
 800a11c:	effeffff 	.word	0xeffeffff

0800a120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e0e9      	b.n	800a308 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a134:	4b76      	ldr	r3, [pc, #472]	; (800a310 <HAL_RCC_ClockConfig+0x1f0>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2207      	movs	r2, #7
 800a13a:	4013      	ands	r3, r2
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d91e      	bls.n	800a180 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a142:	4b73      	ldr	r3, [pc, #460]	; (800a310 <HAL_RCC_ClockConfig+0x1f0>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2207      	movs	r2, #7
 800a148:	4393      	bics	r3, r2
 800a14a:	0019      	movs	r1, r3
 800a14c:	4b70      	ldr	r3, [pc, #448]	; (800a310 <HAL_RCC_ClockConfig+0x1f0>)
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	430a      	orrs	r2, r1
 800a152:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a154:	f7ff f8da 	bl	800930c <HAL_GetTick>
 800a158:	0003      	movs	r3, r0
 800a15a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a15c:	e009      	b.n	800a172 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a15e:	f7ff f8d5 	bl	800930c <HAL_GetTick>
 800a162:	0002      	movs	r2, r0
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	4a6a      	ldr	r2, [pc, #424]	; (800a314 <HAL_RCC_ClockConfig+0x1f4>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d901      	bls.n	800a172 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e0ca      	b.n	800a308 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a172:	4b67      	ldr	r3, [pc, #412]	; (800a310 <HAL_RCC_ClockConfig+0x1f0>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2207      	movs	r2, #7
 800a178:	4013      	ands	r3, r2
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d1ee      	bne.n	800a15e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2202      	movs	r2, #2
 800a186:	4013      	ands	r3, r2
 800a188:	d015      	beq.n	800a1b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2204      	movs	r2, #4
 800a190:	4013      	ands	r3, r2
 800a192:	d006      	beq.n	800a1a2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a194:	4b60      	ldr	r3, [pc, #384]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	4b5f      	ldr	r3, [pc, #380]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a19a:	21e0      	movs	r1, #224	; 0xe0
 800a19c:	01c9      	lsls	r1, r1, #7
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1a2:	4b5d      	ldr	r3, [pc, #372]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	4a5d      	ldr	r2, [pc, #372]	; (800a31c <HAL_RCC_ClockConfig+0x1fc>)
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	0019      	movs	r1, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	4b59      	ldr	r3, [pc, #356]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a1b2:	430a      	orrs	r2, r1
 800a1b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	4013      	ands	r3, r2
 800a1be:	d057      	beq.n	800a270 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d107      	bne.n	800a1d8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a1c8:	4b53      	ldr	r3, [pc, #332]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	2380      	movs	r3, #128	; 0x80
 800a1ce:	029b      	lsls	r3, r3, #10
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	d12b      	bne.n	800a22c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e097      	b.n	800a308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d107      	bne.n	800a1f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1e0:	4b4d      	ldr	r3, [pc, #308]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	2380      	movs	r3, #128	; 0x80
 800a1e6:	049b      	lsls	r3, r3, #18
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	d11f      	bne.n	800a22c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e08b      	b.n	800a308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d107      	bne.n	800a208 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a1f8:	4b47      	ldr	r3, [pc, #284]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	2380      	movs	r3, #128	; 0x80
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	4013      	ands	r3, r2
 800a202:	d113      	bne.n	800a22c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e07f      	b.n	800a308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2b03      	cmp	r3, #3
 800a20e:	d106      	bne.n	800a21e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a210:	4b41      	ldr	r3, [pc, #260]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a214:	2202      	movs	r2, #2
 800a216:	4013      	ands	r3, r2
 800a218:	d108      	bne.n	800a22c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e074      	b.n	800a308 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a21e:	4b3e      	ldr	r3, [pc, #248]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a222:	2202      	movs	r2, #2
 800a224:	4013      	ands	r3, r2
 800a226:	d101      	bne.n	800a22c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e06d      	b.n	800a308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a22c:	4b3a      	ldr	r3, [pc, #232]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	2207      	movs	r2, #7
 800a232:	4393      	bics	r3, r2
 800a234:	0019      	movs	r1, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685a      	ldr	r2, [r3, #4]
 800a23a:	4b37      	ldr	r3, [pc, #220]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a23c:	430a      	orrs	r2, r1
 800a23e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a240:	f7ff f864 	bl	800930c <HAL_GetTick>
 800a244:	0003      	movs	r3, r0
 800a246:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a248:	e009      	b.n	800a25e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a24a:	f7ff f85f 	bl	800930c <HAL_GetTick>
 800a24e:	0002      	movs	r2, r0
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	4a2f      	ldr	r2, [pc, #188]	; (800a314 <HAL_RCC_ClockConfig+0x1f4>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d901      	bls.n	800a25e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e054      	b.n	800a308 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a25e:	4b2e      	ldr	r3, [pc, #184]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	2238      	movs	r2, #56	; 0x38
 800a264:	401a      	ands	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d1ec      	bne.n	800a24a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a270:	4b27      	ldr	r3, [pc, #156]	; (800a310 <HAL_RCC_ClockConfig+0x1f0>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2207      	movs	r2, #7
 800a276:	4013      	ands	r3, r2
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d21e      	bcs.n	800a2bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a27e:	4b24      	ldr	r3, [pc, #144]	; (800a310 <HAL_RCC_ClockConfig+0x1f0>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2207      	movs	r2, #7
 800a284:	4393      	bics	r3, r2
 800a286:	0019      	movs	r1, r3
 800a288:	4b21      	ldr	r3, [pc, #132]	; (800a310 <HAL_RCC_ClockConfig+0x1f0>)
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	430a      	orrs	r2, r1
 800a28e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a290:	f7ff f83c 	bl	800930c <HAL_GetTick>
 800a294:	0003      	movs	r3, r0
 800a296:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a298:	e009      	b.n	800a2ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a29a:	f7ff f837 	bl	800930c <HAL_GetTick>
 800a29e:	0002      	movs	r2, r0
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	4a1b      	ldr	r2, [pc, #108]	; (800a314 <HAL_RCC_ClockConfig+0x1f4>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d901      	bls.n	800a2ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e02c      	b.n	800a308 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a2ae:	4b18      	ldr	r3, [pc, #96]	; (800a310 <HAL_RCC_ClockConfig+0x1f0>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2207      	movs	r2, #7
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d1ee      	bne.n	800a29a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2204      	movs	r2, #4
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	d009      	beq.n	800a2da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a2c6:	4b14      	ldr	r3, [pc, #80]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	4a15      	ldr	r2, [pc, #84]	; (800a320 <HAL_RCC_ClockConfig+0x200>)
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	0019      	movs	r1, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	68da      	ldr	r2, [r3, #12]
 800a2d4:	4b10      	ldr	r3, [pc, #64]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a2da:	f000 f829 	bl	800a330 <HAL_RCC_GetSysClockFreq>
 800a2de:	0001      	movs	r1, r0
 800a2e0:	4b0d      	ldr	r3, [pc, #52]	; (800a318 <HAL_RCC_ClockConfig+0x1f8>)
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	0a1b      	lsrs	r3, r3, #8
 800a2e6:	220f      	movs	r2, #15
 800a2e8:	401a      	ands	r2, r3
 800a2ea:	4b0e      	ldr	r3, [pc, #56]	; (800a324 <HAL_RCC_ClockConfig+0x204>)
 800a2ec:	0092      	lsls	r2, r2, #2
 800a2ee:	58d3      	ldr	r3, [r2, r3]
 800a2f0:	221f      	movs	r2, #31
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	000a      	movs	r2, r1
 800a2f6:	40da      	lsrs	r2, r3
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	; (800a328 <HAL_RCC_ClockConfig+0x208>)
 800a2fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a2fc:	4b0b      	ldr	r3, [pc, #44]	; (800a32c <HAL_RCC_ClockConfig+0x20c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	0018      	movs	r0, r3
 800a302:	f7fe ffa7 	bl	8009254 <HAL_InitTick>
 800a306:	0003      	movs	r3, r0
}
 800a308:	0018      	movs	r0, r3
 800a30a:	46bd      	mov	sp, r7
 800a30c:	b004      	add	sp, #16
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	40022000 	.word	0x40022000
 800a314:	00001388 	.word	0x00001388
 800a318:	40021000 	.word	0x40021000
 800a31c:	fffff0ff 	.word	0xfffff0ff
 800a320:	ffff8fff 	.word	0xffff8fff
 800a324:	08011fc4 	.word	0x08011fc4
 800a328:	20000004 	.word	0x20000004
 800a32c:	20000008 	.word	0x20000008

0800a330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a336:	4b3c      	ldr	r3, [pc, #240]	; (800a428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	2238      	movs	r2, #56	; 0x38
 800a33c:	4013      	ands	r3, r2
 800a33e:	d10f      	bne.n	800a360 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a340:	4b39      	ldr	r3, [pc, #228]	; (800a428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	0adb      	lsrs	r3, r3, #11
 800a346:	2207      	movs	r2, #7
 800a348:	4013      	ands	r3, r2
 800a34a:	2201      	movs	r2, #1
 800a34c:	409a      	lsls	r2, r3
 800a34e:	0013      	movs	r3, r2
 800a350:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	4835      	ldr	r0, [pc, #212]	; (800a42c <HAL_RCC_GetSysClockFreq+0xfc>)
 800a356:	f7f5 feef 	bl	8000138 <__udivsi3>
 800a35a:	0003      	movs	r3, r0
 800a35c:	613b      	str	r3, [r7, #16]
 800a35e:	e05d      	b.n	800a41c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a360:	4b31      	ldr	r3, [pc, #196]	; (800a428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	2238      	movs	r2, #56	; 0x38
 800a366:	4013      	ands	r3, r2
 800a368:	2b08      	cmp	r3, #8
 800a36a:	d102      	bne.n	800a372 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a36c:	4b30      	ldr	r3, [pc, #192]	; (800a430 <HAL_RCC_GetSysClockFreq+0x100>)
 800a36e:	613b      	str	r3, [r7, #16]
 800a370:	e054      	b.n	800a41c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a372:	4b2d      	ldr	r3, [pc, #180]	; (800a428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	2238      	movs	r2, #56	; 0x38
 800a378:	4013      	ands	r3, r2
 800a37a:	2b10      	cmp	r3, #16
 800a37c:	d138      	bne.n	800a3f0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a37e:	4b2a      	ldr	r3, [pc, #168]	; (800a428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	2203      	movs	r2, #3
 800a384:	4013      	ands	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a388:	4b27      	ldr	r3, [pc, #156]	; (800a428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	091b      	lsrs	r3, r3, #4
 800a38e:	2207      	movs	r2, #7
 800a390:	4013      	ands	r3, r2
 800a392:	3301      	adds	r3, #1
 800a394:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d10d      	bne.n	800a3b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	4824      	ldr	r0, [pc, #144]	; (800a430 <HAL_RCC_GetSysClockFreq+0x100>)
 800a3a0:	f7f5 feca 	bl	8000138 <__udivsi3>
 800a3a4:	0003      	movs	r3, r0
 800a3a6:	0019      	movs	r1, r3
 800a3a8:	4b1f      	ldr	r3, [pc, #124]	; (800a428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	0a1b      	lsrs	r3, r3, #8
 800a3ae:	227f      	movs	r2, #127	; 0x7f
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	434b      	muls	r3, r1
 800a3b4:	617b      	str	r3, [r7, #20]
        break;
 800a3b6:	e00d      	b.n	800a3d4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a3b8:	68b9      	ldr	r1, [r7, #8]
 800a3ba:	481c      	ldr	r0, [pc, #112]	; (800a42c <HAL_RCC_GetSysClockFreq+0xfc>)
 800a3bc:	f7f5 febc 	bl	8000138 <__udivsi3>
 800a3c0:	0003      	movs	r3, r0
 800a3c2:	0019      	movs	r1, r3
 800a3c4:	4b18      	ldr	r3, [pc, #96]	; (800a428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	0a1b      	lsrs	r3, r3, #8
 800a3ca:	227f      	movs	r2, #127	; 0x7f
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	434b      	muls	r3, r1
 800a3d0:	617b      	str	r3, [r7, #20]
        break;
 800a3d2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a3d4:	4b14      	ldr	r3, [pc, #80]	; (800a428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	0f5b      	lsrs	r3, r3, #29
 800a3da:	2207      	movs	r2, #7
 800a3dc:	4013      	ands	r3, r2
 800a3de:	3301      	adds	r3, #1
 800a3e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	6978      	ldr	r0, [r7, #20]
 800a3e6:	f7f5 fea7 	bl	8000138 <__udivsi3>
 800a3ea:	0003      	movs	r3, r0
 800a3ec:	613b      	str	r3, [r7, #16]
 800a3ee:	e015      	b.n	800a41c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a3f0:	4b0d      	ldr	r3, [pc, #52]	; (800a428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	2238      	movs	r2, #56	; 0x38
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	2b20      	cmp	r3, #32
 800a3fa:	d103      	bne.n	800a404 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a3fc:	2380      	movs	r3, #128	; 0x80
 800a3fe:	021b      	lsls	r3, r3, #8
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	e00b      	b.n	800a41c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a404:	4b08      	ldr	r3, [pc, #32]	; (800a428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	2238      	movs	r2, #56	; 0x38
 800a40a:	4013      	ands	r3, r2
 800a40c:	2b18      	cmp	r3, #24
 800a40e:	d103      	bne.n	800a418 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a410:	23fa      	movs	r3, #250	; 0xfa
 800a412:	01db      	lsls	r3, r3, #7
 800a414:	613b      	str	r3, [r7, #16]
 800a416:	e001      	b.n	800a41c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a418:	2300      	movs	r3, #0
 800a41a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a41c:	693b      	ldr	r3, [r7, #16]
}
 800a41e:	0018      	movs	r0, r3
 800a420:	46bd      	mov	sp, r7
 800a422:	b006      	add	sp, #24
 800a424:	bd80      	pop	{r7, pc}
 800a426:	46c0      	nop			; (mov r8, r8)
 800a428:	40021000 	.word	0x40021000
 800a42c:	00f42400 	.word	0x00f42400
 800a430:	007a1200 	.word	0x007a1200

0800a434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a438:	4b02      	ldr	r3, [pc, #8]	; (800a444 <HAL_RCC_GetHCLKFreq+0x10>)
 800a43a:	681b      	ldr	r3, [r3, #0]
}
 800a43c:	0018      	movs	r0, r3
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	46c0      	nop			; (mov r8, r8)
 800a444:	20000004 	.word	0x20000004

0800a448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a448:	b5b0      	push	{r4, r5, r7, lr}
 800a44a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a44c:	f7ff fff2 	bl	800a434 <HAL_RCC_GetHCLKFreq>
 800a450:	0004      	movs	r4, r0
 800a452:	f7ff fb43 	bl	8009adc <LL_RCC_GetAPB1Prescaler>
 800a456:	0003      	movs	r3, r0
 800a458:	0b1a      	lsrs	r2, r3, #12
 800a45a:	4b05      	ldr	r3, [pc, #20]	; (800a470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a45c:	0092      	lsls	r2, r2, #2
 800a45e:	58d3      	ldr	r3, [r2, r3]
 800a460:	221f      	movs	r2, #31
 800a462:	4013      	ands	r3, r2
 800a464:	40dc      	lsrs	r4, r3
 800a466:	0023      	movs	r3, r4
}
 800a468:	0018      	movs	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bdb0      	pop	{r4, r5, r7, pc}
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	08012004 	.word	0x08012004

0800a474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a47c:	2313      	movs	r3, #19
 800a47e:	18fb      	adds	r3, r7, r3
 800a480:	2200      	movs	r2, #0
 800a482:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a484:	2312      	movs	r3, #18
 800a486:	18fb      	adds	r3, r7, r3
 800a488:	2200      	movs	r2, #0
 800a48a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	2380      	movs	r3, #128	; 0x80
 800a492:	029b      	lsls	r3, r3, #10
 800a494:	4013      	ands	r3, r2
 800a496:	d100      	bne.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a498:	e0a3      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a49a:	2011      	movs	r0, #17
 800a49c:	183b      	adds	r3, r7, r0
 800a49e:	2200      	movs	r2, #0
 800a4a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4a2:	4b86      	ldr	r3, [pc, #536]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a4a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4a6:	2380      	movs	r3, #128	; 0x80
 800a4a8:	055b      	lsls	r3, r3, #21
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	d110      	bne.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4ae:	4b83      	ldr	r3, [pc, #524]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a4b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4b2:	4b82      	ldr	r3, [pc, #520]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a4b4:	2180      	movs	r1, #128	; 0x80
 800a4b6:	0549      	lsls	r1, r1, #21
 800a4b8:	430a      	orrs	r2, r1
 800a4ba:	63da      	str	r2, [r3, #60]	; 0x3c
 800a4bc:	4b7f      	ldr	r3, [pc, #508]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a4be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4c0:	2380      	movs	r3, #128	; 0x80
 800a4c2:	055b      	lsls	r3, r3, #21
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	60bb      	str	r3, [r7, #8]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a4ca:	183b      	adds	r3, r7, r0
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a4d0:	4b7b      	ldr	r3, [pc, #492]	; (800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	4b7a      	ldr	r3, [pc, #488]	; (800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a4d6:	2180      	movs	r1, #128	; 0x80
 800a4d8:	0049      	lsls	r1, r1, #1
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a4de:	f7fe ff15 	bl	800930c <HAL_GetTick>
 800a4e2:	0003      	movs	r3, r0
 800a4e4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4e6:	e00b      	b.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4e8:	f7fe ff10 	bl	800930c <HAL_GetTick>
 800a4ec:	0002      	movs	r2, r0
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d904      	bls.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a4f6:	2313      	movs	r3, #19
 800a4f8:	18fb      	adds	r3, r7, r3
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	701a      	strb	r2, [r3, #0]
        break;
 800a4fe:	e005      	b.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a500:	4b6f      	ldr	r3, [pc, #444]	; (800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	2380      	movs	r3, #128	; 0x80
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	4013      	ands	r3, r2
 800a50a:	d0ed      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a50c:	2313      	movs	r3, #19
 800a50e:	18fb      	adds	r3, r7, r3
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d154      	bne.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a516:	4b69      	ldr	r3, [pc, #420]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a518:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a51a:	23c0      	movs	r3, #192	; 0xc0
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4013      	ands	r3, r2
 800a520:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d019      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d014      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a532:	4b62      	ldr	r3, [pc, #392]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a536:	4a63      	ldr	r2, [pc, #396]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a538:	4013      	ands	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a53c:	4b5f      	ldr	r3, [pc, #380]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a53e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a540:	4b5e      	ldr	r3, [pc, #376]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a542:	2180      	movs	r1, #128	; 0x80
 800a544:	0249      	lsls	r1, r1, #9
 800a546:	430a      	orrs	r2, r1
 800a548:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a54a:	4b5c      	ldr	r3, [pc, #368]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a54c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a54e:	4b5b      	ldr	r3, [pc, #364]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a550:	495d      	ldr	r1, [pc, #372]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800a552:	400a      	ands	r2, r1
 800a554:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a556:	4b59      	ldr	r3, [pc, #356]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a558:	697a      	ldr	r2, [r7, #20]
 800a55a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	2201      	movs	r2, #1
 800a560:	4013      	ands	r3, r2
 800a562:	d016      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a564:	f7fe fed2 	bl	800930c <HAL_GetTick>
 800a568:	0003      	movs	r3, r0
 800a56a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a56c:	e00c      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a56e:	f7fe fecd 	bl	800930c <HAL_GetTick>
 800a572:	0002      	movs	r2, r0
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	4a54      	ldr	r2, [pc, #336]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d904      	bls.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a57e:	2313      	movs	r3, #19
 800a580:	18fb      	adds	r3, r7, r3
 800a582:	2203      	movs	r2, #3
 800a584:	701a      	strb	r2, [r3, #0]
            break;
 800a586:	e004      	b.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a588:	4b4c      	ldr	r3, [pc, #304]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a58a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a58c:	2202      	movs	r2, #2
 800a58e:	4013      	ands	r3, r2
 800a590:	d0ed      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a592:	2313      	movs	r3, #19
 800a594:	18fb      	adds	r3, r7, r3
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10a      	bne.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a59c:	4b47      	ldr	r3, [pc, #284]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a59e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5a0:	4a48      	ldr	r2, [pc, #288]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	0019      	movs	r1, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	699a      	ldr	r2, [r3, #24]
 800a5aa:	4b44      	ldr	r3, [pc, #272]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	65da      	str	r2, [r3, #92]	; 0x5c
 800a5b0:	e00c      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a5b2:	2312      	movs	r3, #18
 800a5b4:	18fb      	adds	r3, r7, r3
 800a5b6:	2213      	movs	r2, #19
 800a5b8:	18ba      	adds	r2, r7, r2
 800a5ba:	7812      	ldrb	r2, [r2, #0]
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	e005      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c0:	2312      	movs	r3, #18
 800a5c2:	18fb      	adds	r3, r7, r3
 800a5c4:	2213      	movs	r2, #19
 800a5c6:	18ba      	adds	r2, r7, r2
 800a5c8:	7812      	ldrb	r2, [r2, #0]
 800a5ca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a5cc:	2311      	movs	r3, #17
 800a5ce:	18fb      	adds	r3, r7, r3
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d105      	bne.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5d6:	4b39      	ldr	r3, [pc, #228]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a5d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5da:	4b38      	ldr	r3, [pc, #224]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a5dc:	493c      	ldr	r1, [pc, #240]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a5de:	400a      	ands	r2, r1
 800a5e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	d009      	beq.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a5ec:	4b33      	ldr	r3, [pc, #204]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a5ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f0:	2203      	movs	r2, #3
 800a5f2:	4393      	bics	r3, r2
 800a5f4:	0019      	movs	r1, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	4b30      	ldr	r3, [pc, #192]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a5fc:	430a      	orrs	r2, r1
 800a5fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2202      	movs	r2, #2
 800a606:	4013      	ands	r3, r2
 800a608:	d009      	beq.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a60a:	4b2c      	ldr	r3, [pc, #176]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60e:	220c      	movs	r2, #12
 800a610:	4393      	bics	r3, r2
 800a612:	0019      	movs	r1, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689a      	ldr	r2, [r3, #8]
 800a618:	4b28      	ldr	r3, [pc, #160]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a61a:	430a      	orrs	r2, r1
 800a61c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2220      	movs	r2, #32
 800a624:	4013      	ands	r3, r2
 800a626:	d009      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a628:	4b24      	ldr	r3, [pc, #144]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a62a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a62c:	4a29      	ldr	r2, [pc, #164]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a62e:	4013      	ands	r3, r2
 800a630:	0019      	movs	r1, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	4b21      	ldr	r3, [pc, #132]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a638:	430a      	orrs	r2, r1
 800a63a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	2380      	movs	r3, #128	; 0x80
 800a642:	01db      	lsls	r3, r3, #7
 800a644:	4013      	ands	r3, r2
 800a646:	d015      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a648:	4b1c      	ldr	r3, [pc, #112]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	0899      	lsrs	r1, r3, #2
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	695a      	ldr	r2, [r3, #20]
 800a654:	4b19      	ldr	r3, [pc, #100]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a656:	430a      	orrs	r2, r1
 800a658:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	695a      	ldr	r2, [r3, #20]
 800a65e:	2380      	movs	r3, #128	; 0x80
 800a660:	05db      	lsls	r3, r3, #23
 800a662:	429a      	cmp	r2, r3
 800a664:	d106      	bne.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a666:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a668:	68da      	ldr	r2, [r3, #12]
 800a66a:	4b14      	ldr	r3, [pc, #80]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a66c:	2180      	movs	r1, #128	; 0x80
 800a66e:	0249      	lsls	r1, r1, #9
 800a670:	430a      	orrs	r2, r1
 800a672:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	2380      	movs	r3, #128	; 0x80
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	4013      	ands	r3, r2
 800a67e:	d016      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a680:	4b0e      	ldr	r3, [pc, #56]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a684:	4a14      	ldr	r2, [pc, #80]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a686:	4013      	ands	r3, r2
 800a688:	0019      	movs	r1, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	691a      	ldr	r2, [r3, #16]
 800a68e:	4b0b      	ldr	r3, [pc, #44]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a690:	430a      	orrs	r2, r1
 800a692:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	691a      	ldr	r2, [r3, #16]
 800a698:	2380      	movs	r3, #128	; 0x80
 800a69a:	01db      	lsls	r3, r3, #7
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d106      	bne.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a6a0:	4b06      	ldr	r3, [pc, #24]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a6a2:	68da      	ldr	r2, [r3, #12]
 800a6a4:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a6a6:	2180      	movs	r1, #128	; 0x80
 800a6a8:	0249      	lsls	r1, r1, #9
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a6ae:	2312      	movs	r3, #18
 800a6b0:	18fb      	adds	r3, r7, r3
 800a6b2:	781b      	ldrb	r3, [r3, #0]
}
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	b006      	add	sp, #24
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	40021000 	.word	0x40021000
 800a6c0:	40007000 	.word	0x40007000
 800a6c4:	fffffcff 	.word	0xfffffcff
 800a6c8:	fffeffff 	.word	0xfffeffff
 800a6cc:	00001388 	.word	0x00001388
 800a6d0:	efffffff 	.word	0xefffffff
 800a6d4:	ffffcfff 	.word	0xffffcfff
 800a6d8:	ffff3fff 	.word	0xffff3fff

0800a6dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a6dc:	b5b0      	push	{r4, r5, r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a6e4:	230f      	movs	r3, #15
 800a6e6:	18fb      	adds	r3, r7, r3
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d100      	bne.n	800a6f4 <HAL_RTC_Init+0x18>
 800a6f2:	e080      	b.n	800a7f6 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2229      	movs	r2, #41	; 0x29
 800a6f8:	5c9b      	ldrb	r3, [r3, r2]
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10b      	bne.n	800a718 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2228      	movs	r2, #40	; 0x28
 800a704:	2100      	movs	r1, #0
 800a706:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2288      	movs	r2, #136	; 0x88
 800a70c:	0212      	lsls	r2, r2, #8
 800a70e:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	0018      	movs	r0, r3
 800a714:	f7fe fb72 	bl	8008dfc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2229      	movs	r2, #41	; 0x29
 800a71c:	2102      	movs	r1, #2
 800a71e:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	22ca      	movs	r2, #202	; 0xca
 800a726:	625a      	str	r2, [r3, #36]	; 0x24
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2253      	movs	r2, #83	; 0x53
 800a72e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a730:	250f      	movs	r5, #15
 800a732:	197c      	adds	r4, r7, r5
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	0018      	movs	r0, r3
 800a738:	f000 f88d 	bl	800a856 <RTC_EnterInitMode>
 800a73c:	0003      	movs	r3, r0
 800a73e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 800a740:	0028      	movs	r0, r5
 800a742:	183b      	adds	r3, r7, r0
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d148      	bne.n	800a7dc <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	699a      	ldr	r2, [r3, #24]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	492b      	ldr	r1, [pc, #172]	; (800a804 <HAL_RTC_Init+0x128>)
 800a756:	400a      	ands	r2, r1
 800a758:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6999      	ldr	r1, [r3, #24]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	431a      	orrs	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	431a      	orrs	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	430a      	orrs	r2, r1
 800a776:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	6912      	ldr	r2, [r2, #16]
 800a780:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6919      	ldr	r1, [r3, #16]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	041a      	lsls	r2, r3, #16
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	430a      	orrs	r2, r1
 800a794:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a796:	0005      	movs	r5, r0
 800a798:	183c      	adds	r4, r7, r0
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	0018      	movs	r0, r3
 800a79e:	f000 f89d 	bl	800a8dc <RTC_ExitInitMode>
 800a7a2:	0003      	movs	r3, r0
 800a7a4:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800a7a6:	197b      	adds	r3, r7, r5
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d116      	bne.n	800a7dc <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	699a      	ldr	r2, [r3, #24]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	00d2      	lsls	r2, r2, #3
 800a7ba:	08d2      	lsrs	r2, r2, #3
 800a7bc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6999      	ldr	r1, [r3, #24]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a1b      	ldr	r3, [r3, #32]
 800a7cc:	431a      	orrs	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	430a      	orrs	r2, r1
 800a7da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	22ff      	movs	r2, #255	; 0xff
 800a7e2:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800a7e4:	230f      	movs	r3, #15
 800a7e6:	18fb      	adds	r3, r7, r3
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d103      	bne.n	800a7f6 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2229      	movs	r2, #41	; 0x29
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800a7f6:	230f      	movs	r3, #15
 800a7f8:	18fb      	adds	r3, r7, r3
 800a7fa:	781b      	ldrb	r3, [r3, #0]
}
 800a7fc:	0018      	movs	r0, r3
 800a7fe:	46bd      	mov	sp, r7
 800a800:	b004      	add	sp, #16
 800a802:	bdb0      	pop	{r4, r5, r7, pc}
 800a804:	fb8fffbf 	.word	0xfb8fffbf

0800a808 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	21a0      	movs	r1, #160	; 0xa0
 800a81c:	438a      	bics	r2, r1
 800a81e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a820:	f7fe fd74 	bl	800930c <HAL_GetTick>
 800a824:	0003      	movs	r3, r0
 800a826:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800a828:	e00a      	b.n	800a840 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a82a:	f7fe fd6f 	bl	800930c <HAL_GetTick>
 800a82e:	0002      	movs	r2, r0
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	1ad2      	subs	r2, r2, r3
 800a834:	23fa      	movs	r3, #250	; 0xfa
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	429a      	cmp	r2, r3
 800a83a:	d901      	bls.n	800a840 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a83c:	2303      	movs	r3, #3
 800a83e:	e006      	b.n	800a84e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	2220      	movs	r2, #32
 800a848:	4013      	ands	r3, r2
 800a84a:	d0ee      	beq.n	800a82a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	0018      	movs	r0, r3
 800a850:	46bd      	mov	sp, r7
 800a852:	b004      	add	sp, #16
 800a854:	bd80      	pop	{r7, pc}

0800a856 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b084      	sub	sp, #16
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800a85e:	230f      	movs	r3, #15
 800a860:	18fb      	adds	r3, r7, r3
 800a862:	2200      	movs	r2, #0
 800a864:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	2240      	movs	r2, #64	; 0x40
 800a86e:	4013      	ands	r3, r2
 800a870:	d12c      	bne.n	800a8cc <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68da      	ldr	r2, [r3, #12]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2180      	movs	r1, #128	; 0x80
 800a87e:	430a      	orrs	r2, r1
 800a880:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a882:	f7fe fd43 	bl	800930c <HAL_GetTick>
 800a886:	0003      	movs	r3, r0
 800a888:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a88a:	e014      	b.n	800a8b6 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800a88c:	f7fe fd3e 	bl	800930c <HAL_GetTick>
 800a890:	0002      	movs	r2, r0
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	1ad2      	subs	r2, r2, r3
 800a896:	200f      	movs	r0, #15
 800a898:	183b      	adds	r3, r7, r0
 800a89a:	1839      	adds	r1, r7, r0
 800a89c:	7809      	ldrb	r1, [r1, #0]
 800a89e:	7019      	strb	r1, [r3, #0]
 800a8a0:	23fa      	movs	r3, #250	; 0xfa
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d906      	bls.n	800a8b6 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800a8a8:	183b      	adds	r3, r7, r0
 800a8aa:	2203      	movs	r2, #3
 800a8ac:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2229      	movs	r2, #41	; 0x29
 800a8b2:	2103      	movs	r1, #3
 800a8b4:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	2240      	movs	r2, #64	; 0x40
 800a8be:	4013      	ands	r3, r2
 800a8c0:	d104      	bne.n	800a8cc <RTC_EnterInitMode+0x76>
 800a8c2:	230f      	movs	r3, #15
 800a8c4:	18fb      	adds	r3, r7, r3
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d1df      	bne.n	800a88c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a8cc:	230f      	movs	r3, #15
 800a8ce:	18fb      	adds	r3, r7, r3
 800a8d0:	781b      	ldrb	r3, [r3, #0]
}
 800a8d2:	0018      	movs	r0, r3
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	b004      	add	sp, #16
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a8dc:	b590      	push	{r4, r7, lr}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8e4:	240f      	movs	r4, #15
 800a8e6:	193b      	adds	r3, r7, r4
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a8ec:	4b1c      	ldr	r3, [pc, #112]	; (800a960 <RTC_ExitInitMode+0x84>)
 800a8ee:	68da      	ldr	r2, [r3, #12]
 800a8f0:	4b1b      	ldr	r3, [pc, #108]	; (800a960 <RTC_ExitInitMode+0x84>)
 800a8f2:	2180      	movs	r1, #128	; 0x80
 800a8f4:	438a      	bics	r2, r1
 800a8f6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a8f8:	4b19      	ldr	r3, [pc, #100]	; (800a960 <RTC_ExitInitMode+0x84>)
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	2220      	movs	r2, #32
 800a8fe:	4013      	ands	r3, r2
 800a900:	d10d      	bne.n	800a91e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	0018      	movs	r0, r3
 800a906:	f7ff ff7f 	bl	800a808 <HAL_RTC_WaitForSynchro>
 800a90a:	1e03      	subs	r3, r0, #0
 800a90c:	d021      	beq.n	800a952 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2229      	movs	r2, #41	; 0x29
 800a912:	2103      	movs	r1, #3
 800a914:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800a916:	193b      	adds	r3, r7, r4
 800a918:	2203      	movs	r2, #3
 800a91a:	701a      	strb	r2, [r3, #0]
 800a91c:	e019      	b.n	800a952 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a91e:	4b10      	ldr	r3, [pc, #64]	; (800a960 <RTC_ExitInitMode+0x84>)
 800a920:	699a      	ldr	r2, [r3, #24]
 800a922:	4b0f      	ldr	r3, [pc, #60]	; (800a960 <RTC_ExitInitMode+0x84>)
 800a924:	2120      	movs	r1, #32
 800a926:	438a      	bics	r2, r1
 800a928:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	0018      	movs	r0, r3
 800a92e:	f7ff ff6b 	bl	800a808 <HAL_RTC_WaitForSynchro>
 800a932:	1e03      	subs	r3, r0, #0
 800a934:	d007      	beq.n	800a946 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2229      	movs	r2, #41	; 0x29
 800a93a:	2103      	movs	r1, #3
 800a93c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800a93e:	230f      	movs	r3, #15
 800a940:	18fb      	adds	r3, r7, r3
 800a942:	2203      	movs	r2, #3
 800a944:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a946:	4b06      	ldr	r3, [pc, #24]	; (800a960 <RTC_ExitInitMode+0x84>)
 800a948:	699a      	ldr	r2, [r3, #24]
 800a94a:	4b05      	ldr	r3, [pc, #20]	; (800a960 <RTC_ExitInitMode+0x84>)
 800a94c:	2120      	movs	r1, #32
 800a94e:	430a      	orrs	r2, r1
 800a950:	619a      	str	r2, [r3, #24]
  }

  return status;
 800a952:	230f      	movs	r3, #15
 800a954:	18fb      	adds	r3, r7, r3
 800a956:	781b      	ldrb	r3, [r3, #0]
}
 800a958:	0018      	movs	r0, r3
 800a95a:	46bd      	mov	sp, r7
 800a95c:	b005      	add	sp, #20
 800a95e:	bd90      	pop	{r4, r7, pc}
 800a960:	40002800 	.word	0x40002800

0800a964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e0a8      	b.n	800aac8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d109      	bne.n	800a992 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	2382      	movs	r3, #130	; 0x82
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	429a      	cmp	r2, r3
 800a988:	d009      	beq.n	800a99e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	61da      	str	r2, [r3, #28]
 800a990:	e005      	b.n	800a99e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	225d      	movs	r2, #93	; 0x5d
 800a9a8:	5c9b      	ldrb	r3, [r3, r2]
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d107      	bne.n	800a9c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	225c      	movs	r2, #92	; 0x5c
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	f7fe fa5c 	bl	8008e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	225d      	movs	r2, #93	; 0x5d
 800a9c4:	2102      	movs	r1, #2
 800a9c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2140      	movs	r1, #64	; 0x40
 800a9d4:	438a      	bics	r2, r1
 800a9d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68da      	ldr	r2, [r3, #12]
 800a9dc:	23e0      	movs	r3, #224	; 0xe0
 800a9de:	00db      	lsls	r3, r3, #3
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d902      	bls.n	800a9ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	60fb      	str	r3, [r7, #12]
 800a9e8:	e002      	b.n	800a9f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a9ea:	2380      	movs	r3, #128	; 0x80
 800a9ec:	015b      	lsls	r3, r3, #5
 800a9ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	68da      	ldr	r2, [r3, #12]
 800a9f4:	23f0      	movs	r3, #240	; 0xf0
 800a9f6:	011b      	lsls	r3, r3, #4
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d008      	beq.n	800aa0e <HAL_SPI_Init+0xaa>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68da      	ldr	r2, [r3, #12]
 800aa00:	23e0      	movs	r3, #224	; 0xe0
 800aa02:	00db      	lsls	r3, r3, #3
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d002      	beq.n	800aa0e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	2382      	movs	r3, #130	; 0x82
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	401a      	ands	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6899      	ldr	r1, [r3, #8]
 800aa1c:	2384      	movs	r3, #132	; 0x84
 800aa1e:	021b      	lsls	r3, r3, #8
 800aa20:	400b      	ands	r3, r1
 800aa22:	431a      	orrs	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	2102      	movs	r1, #2
 800aa2a:	400b      	ands	r3, r1
 800aa2c:	431a      	orrs	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	2101      	movs	r1, #1
 800aa34:	400b      	ands	r3, r1
 800aa36:	431a      	orrs	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6999      	ldr	r1, [r3, #24]
 800aa3c:	2380      	movs	r3, #128	; 0x80
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	400b      	ands	r3, r1
 800aa42:	431a      	orrs	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	69db      	ldr	r3, [r3, #28]
 800aa48:	2138      	movs	r1, #56	; 0x38
 800aa4a:	400b      	ands	r3, r1
 800aa4c:	431a      	orrs	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	2180      	movs	r1, #128	; 0x80
 800aa54:	400b      	ands	r3, r1
 800aa56:	431a      	orrs	r2, r3
 800aa58:	0011      	movs	r1, r2
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa5e:	2380      	movs	r3, #128	; 0x80
 800aa60:	019b      	lsls	r3, r3, #6
 800aa62:	401a      	ands	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	0c1b      	lsrs	r3, r3, #16
 800aa72:	2204      	movs	r2, #4
 800aa74:	401a      	ands	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7a:	2110      	movs	r1, #16
 800aa7c:	400b      	ands	r3, r1
 800aa7e:	431a      	orrs	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa84:	2108      	movs	r1, #8
 800aa86:	400b      	ands	r3, r1
 800aa88:	431a      	orrs	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	68d9      	ldr	r1, [r3, #12]
 800aa8e:	23f0      	movs	r3, #240	; 0xf0
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	400b      	ands	r3, r1
 800aa94:	431a      	orrs	r2, r3
 800aa96:	0011      	movs	r1, r2
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	2380      	movs	r3, #128	; 0x80
 800aa9c:	015b      	lsls	r3, r3, #5
 800aa9e:	401a      	ands	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	430a      	orrs	r2, r1
 800aaa6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	69da      	ldr	r2, [r3, #28]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4907      	ldr	r1, [pc, #28]	; (800aad0 <HAL_SPI_Init+0x16c>)
 800aab4:	400a      	ands	r2, r1
 800aab6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	225d      	movs	r2, #93	; 0x5d
 800aac2:	2101      	movs	r1, #1
 800aac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	0018      	movs	r0, r3
 800aaca:	46bd      	mov	sp, r7
 800aacc:	b004      	add	sp, #16
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	fffff7ff 	.word	0xfffff7ff

0800aad4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	603b      	str	r3, [r7, #0]
 800aae0:	1dbb      	adds	r3, r7, #6
 800aae2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aae4:	231f      	movs	r3, #31
 800aae6:	18fb      	adds	r3, r7, r3
 800aae8:	2200      	movs	r2, #0
 800aaea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	225c      	movs	r2, #92	; 0x5c
 800aaf0:	5c9b      	ldrb	r3, [r3, r2]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <HAL_SPI_Transmit+0x26>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e140      	b.n	800ad7c <HAL_SPI_Transmit+0x2a8>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	225c      	movs	r2, #92	; 0x5c
 800aafe:	2101      	movs	r1, #1
 800ab00:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab02:	f7fe fc03 	bl	800930c <HAL_GetTick>
 800ab06:	0003      	movs	r3, r0
 800ab08:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ab0a:	2316      	movs	r3, #22
 800ab0c:	18fb      	adds	r3, r7, r3
 800ab0e:	1dba      	adds	r2, r7, #6
 800ab10:	8812      	ldrh	r2, [r2, #0]
 800ab12:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	225d      	movs	r2, #93	; 0x5d
 800ab18:	5c9b      	ldrb	r3, [r3, r2]
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d004      	beq.n	800ab2a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800ab20:	231f      	movs	r3, #31
 800ab22:	18fb      	adds	r3, r7, r3
 800ab24:	2202      	movs	r2, #2
 800ab26:	701a      	strb	r2, [r3, #0]
    goto error;
 800ab28:	e11d      	b.n	800ad66 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d003      	beq.n	800ab38 <HAL_SPI_Transmit+0x64>
 800ab30:	1dbb      	adds	r3, r7, #6
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d104      	bne.n	800ab42 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800ab38:	231f      	movs	r3, #31
 800ab3a:	18fb      	adds	r3, r7, r3
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	701a      	strb	r2, [r3, #0]
    goto error;
 800ab40:	e111      	b.n	800ad66 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	225d      	movs	r2, #93	; 0x5d
 800ab46:	2103      	movs	r1, #3
 800ab48:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	1dba      	adds	r2, r7, #6
 800ab5a:	8812      	ldrh	r2, [r2, #0]
 800ab5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	1dba      	adds	r2, r7, #6
 800ab62:	8812      	ldrh	r2, [r2, #0]
 800ab64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2244      	movs	r2, #68	; 0x44
 800ab70:	2100      	movs	r1, #0
 800ab72:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2246      	movs	r2, #70	; 0x46
 800ab78:	2100      	movs	r1, #0
 800ab7a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	689a      	ldr	r2, [r3, #8]
 800ab8c:	2380      	movs	r3, #128	; 0x80
 800ab8e:	021b      	lsls	r3, r3, #8
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d110      	bne.n	800abb6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2140      	movs	r1, #64	; 0x40
 800aba0:	438a      	bics	r2, r1
 800aba2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2180      	movs	r1, #128	; 0x80
 800abb0:	01c9      	lsls	r1, r1, #7
 800abb2:	430a      	orrs	r2, r1
 800abb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2240      	movs	r2, #64	; 0x40
 800abbe:	4013      	ands	r3, r2
 800abc0:	2b40      	cmp	r3, #64	; 0x40
 800abc2:	d007      	beq.n	800abd4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2140      	movs	r1, #64	; 0x40
 800abd0:	430a      	orrs	r2, r1
 800abd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	23e0      	movs	r3, #224	; 0xe0
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	429a      	cmp	r2, r3
 800abde:	d94e      	bls.n	800ac7e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d004      	beq.n	800abf2 <HAL_SPI_Transmit+0x11e>
 800abe8:	2316      	movs	r3, #22
 800abea:	18fb      	adds	r3, r7, r3
 800abec:	881b      	ldrh	r3, [r3, #0]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d13f      	bne.n	800ac72 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf6:	881a      	ldrh	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac02:	1c9a      	adds	r2, r3, #2
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ac16:	e02c      	b.n	800ac72 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	2202      	movs	r2, #2
 800ac20:	4013      	ands	r3, r2
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d112      	bne.n	800ac4c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2a:	881a      	ldrh	r2, [r3, #0]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac36:	1c9a      	adds	r2, r3, #2
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	3b01      	subs	r3, #1
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac4a:	e012      	b.n	800ac72 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac4c:	f7fe fb5e 	bl	800930c <HAL_GetTick>
 800ac50:	0002      	movs	r2, r0
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d802      	bhi.n	800ac62 <HAL_SPI_Transmit+0x18e>
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	d102      	bne.n	800ac68 <HAL_SPI_Transmit+0x194>
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d104      	bne.n	800ac72 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800ac68:	231f      	movs	r3, #31
 800ac6a:	18fb      	adds	r3, r7, r3
 800ac6c:	2203      	movs	r2, #3
 800ac6e:	701a      	strb	r2, [r3, #0]
          goto error;
 800ac70:	e079      	b.n	800ad66 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1cd      	bne.n	800ac18 <HAL_SPI_Transmit+0x144>
 800ac7c:	e04f      	b.n	800ad1e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d004      	beq.n	800ac90 <HAL_SPI_Transmit+0x1bc>
 800ac86:	2316      	movs	r3, #22
 800ac88:	18fb      	adds	r3, r7, r3
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d141      	bne.n	800ad14 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	330c      	adds	r3, #12
 800ac9a:	7812      	ldrb	r2, [r2, #0]
 800ac9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acac:	b29b      	uxth	r3, r3
 800acae:	3b01      	subs	r3, #1
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800acb6:	e02d      	b.n	800ad14 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	2202      	movs	r2, #2
 800acc0:	4013      	ands	r3, r2
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d113      	bne.n	800acee <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	330c      	adds	r3, #12
 800acd0:	7812      	ldrb	r2, [r2, #0]
 800acd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	1c5a      	adds	r2, r3, #1
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	3b01      	subs	r3, #1
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800acec:	e012      	b.n	800ad14 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acee:	f7fe fb0d 	bl	800930c <HAL_GetTick>
 800acf2:	0002      	movs	r2, r0
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	683a      	ldr	r2, [r7, #0]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d802      	bhi.n	800ad04 <HAL_SPI_Transmit+0x230>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	3301      	adds	r3, #1
 800ad02:	d102      	bne.n	800ad0a <HAL_SPI_Transmit+0x236>
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d104      	bne.n	800ad14 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800ad0a:	231f      	movs	r3, #31
 800ad0c:	18fb      	adds	r3, r7, r3
 800ad0e:	2203      	movs	r2, #3
 800ad10:	701a      	strb	r2, [r3, #0]
          goto error;
 800ad12:	e028      	b.n	800ad66 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1cc      	bne.n	800acb8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad1e:	69ba      	ldr	r2, [r7, #24]
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	0018      	movs	r0, r3
 800ad26:	f000 fce5 	bl	800b6f4 <SPI_EndRxTxTransaction>
 800ad2a:	1e03      	subs	r3, r0, #0
 800ad2c:	d002      	beq.n	800ad34 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2220      	movs	r2, #32
 800ad32:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10a      	bne.n	800ad52 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	613b      	str	r3, [r7, #16]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	613b      	str	r3, [r7, #16]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	613b      	str	r3, [r7, #16]
 800ad50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d004      	beq.n	800ad64 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800ad5a:	231f      	movs	r3, #31
 800ad5c:	18fb      	adds	r3, r7, r3
 800ad5e:	2201      	movs	r2, #1
 800ad60:	701a      	strb	r2, [r3, #0]
 800ad62:	e000      	b.n	800ad66 <HAL_SPI_Transmit+0x292>
  }

error:
 800ad64:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	225d      	movs	r2, #93	; 0x5d
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	225c      	movs	r2, #92	; 0x5c
 800ad72:	2100      	movs	r1, #0
 800ad74:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ad76:	231f      	movs	r3, #31
 800ad78:	18fb      	adds	r3, r7, r3
 800ad7a:	781b      	ldrb	r3, [r3, #0]
}
 800ad7c:	0018      	movs	r0, r3
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	b008      	add	sp, #32
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad84:	b590      	push	{r4, r7, lr}
 800ad86:	b089      	sub	sp, #36	; 0x24
 800ad88:	af02      	add	r7, sp, #8
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	603b      	str	r3, [r7, #0]
 800ad90:	1dbb      	adds	r3, r7, #6
 800ad92:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ad94:	2317      	movs	r3, #23
 800ad96:	18fb      	adds	r3, r7, r3
 800ad98:	2200      	movs	r2, #0
 800ad9a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	2382      	movs	r3, #130	; 0x82
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d113      	bne.n	800add0 <HAL_SPI_Receive+0x4c>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10f      	bne.n	800add0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	225d      	movs	r2, #93	; 0x5d
 800adb4:	2104      	movs	r1, #4
 800adb6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800adb8:	1dbb      	adds	r3, r7, #6
 800adba:	881c      	ldrh	r4, [r3, #0]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	0023      	movs	r3, r4
 800adc8:	f000 f928 	bl	800b01c <HAL_SPI_TransmitReceive>
 800adcc:	0003      	movs	r3, r0
 800adce:	e11c      	b.n	800b00a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	225c      	movs	r2, #92	; 0x5c
 800add4:	5c9b      	ldrb	r3, [r3, r2]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d101      	bne.n	800adde <HAL_SPI_Receive+0x5a>
 800adda:	2302      	movs	r3, #2
 800addc:	e115      	b.n	800b00a <HAL_SPI_Receive+0x286>
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	225c      	movs	r2, #92	; 0x5c
 800ade2:	2101      	movs	r1, #1
 800ade4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ade6:	f7fe fa91 	bl	800930c <HAL_GetTick>
 800adea:	0003      	movs	r3, r0
 800adec:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	225d      	movs	r2, #93	; 0x5d
 800adf2:	5c9b      	ldrb	r3, [r3, r2]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d004      	beq.n	800ae04 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800adfa:	2317      	movs	r3, #23
 800adfc:	18fb      	adds	r3, r7, r3
 800adfe:	2202      	movs	r2, #2
 800ae00:	701a      	strb	r2, [r3, #0]
    goto error;
 800ae02:	e0f7      	b.n	800aff4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d003      	beq.n	800ae12 <HAL_SPI_Receive+0x8e>
 800ae0a:	1dbb      	adds	r3, r7, #6
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d104      	bne.n	800ae1c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800ae12:	2317      	movs	r3, #23
 800ae14:	18fb      	adds	r3, r7, r3
 800ae16:	2201      	movs	r2, #1
 800ae18:	701a      	strb	r2, [r3, #0]
    goto error;
 800ae1a:	e0eb      	b.n	800aff4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	225d      	movs	r2, #93	; 0x5d
 800ae20:	2104      	movs	r1, #4
 800ae22:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	1dba      	adds	r2, r7, #6
 800ae34:	2144      	movs	r1, #68	; 0x44
 800ae36:	8812      	ldrh	r2, [r2, #0]
 800ae38:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	1dba      	adds	r2, r7, #6
 800ae3e:	2146      	movs	r1, #70	; 0x46
 800ae40:	8812      	ldrh	r2, [r2, #0]
 800ae42:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	68da      	ldr	r2, [r3, #12]
 800ae66:	23e0      	movs	r3, #224	; 0xe0
 800ae68:	00db      	lsls	r3, r3, #3
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d908      	bls.n	800ae80 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	685a      	ldr	r2, [r3, #4]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4966      	ldr	r1, [pc, #408]	; (800b014 <HAL_SPI_Receive+0x290>)
 800ae7a:	400a      	ands	r2, r1
 800ae7c:	605a      	str	r2, [r3, #4]
 800ae7e:	e008      	b.n	800ae92 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2180      	movs	r1, #128	; 0x80
 800ae8c:	0149      	lsls	r1, r1, #5
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	689a      	ldr	r2, [r3, #8]
 800ae96:	2380      	movs	r3, #128	; 0x80
 800ae98:	021b      	lsls	r3, r3, #8
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d10f      	bne.n	800aebe <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2140      	movs	r1, #64	; 0x40
 800aeaa:	438a      	bics	r2, r1
 800aeac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4957      	ldr	r1, [pc, #348]	; (800b018 <HAL_SPI_Receive+0x294>)
 800aeba:	400a      	ands	r2, r1
 800aebc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2240      	movs	r2, #64	; 0x40
 800aec6:	4013      	ands	r3, r2
 800aec8:	2b40      	cmp	r3, #64	; 0x40
 800aeca:	d007      	beq.n	800aedc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2140      	movs	r1, #64	; 0x40
 800aed8:	430a      	orrs	r2, r1
 800aeda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	68da      	ldr	r2, [r3, #12]
 800aee0:	23e0      	movs	r3, #224	; 0xe0
 800aee2:	00db      	lsls	r3, r3, #3
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d900      	bls.n	800aeea <HAL_SPI_Receive+0x166>
 800aee8:	e069      	b.n	800afbe <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800aeea:	e031      	b.n	800af50 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	2201      	movs	r2, #1
 800aef4:	4013      	ands	r3, r2
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d117      	bne.n	800af2a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	330c      	adds	r3, #12
 800af00:	001a      	movs	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af06:	7812      	ldrb	r2, [r2, #0]
 800af08:	b2d2      	uxtb	r2, r2
 800af0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af10:	1c5a      	adds	r2, r3, #1
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2246      	movs	r2, #70	; 0x46
 800af1a:	5a9b      	ldrh	r3, [r3, r2]
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	3b01      	subs	r3, #1
 800af20:	b299      	uxth	r1, r3
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2246      	movs	r2, #70	; 0x46
 800af26:	5299      	strh	r1, [r3, r2]
 800af28:	e012      	b.n	800af50 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af2a:	f7fe f9ef 	bl	800930c <HAL_GetTick>
 800af2e:	0002      	movs	r2, r0
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	429a      	cmp	r2, r3
 800af38:	d802      	bhi.n	800af40 <HAL_SPI_Receive+0x1bc>
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	3301      	adds	r3, #1
 800af3e:	d102      	bne.n	800af46 <HAL_SPI_Receive+0x1c2>
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d104      	bne.n	800af50 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800af46:	2317      	movs	r3, #23
 800af48:	18fb      	adds	r3, r7, r3
 800af4a:	2203      	movs	r2, #3
 800af4c:	701a      	strb	r2, [r3, #0]
          goto error;
 800af4e:	e051      	b.n	800aff4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2246      	movs	r2, #70	; 0x46
 800af54:	5a9b      	ldrh	r3, [r3, r2]
 800af56:	b29b      	uxth	r3, r3
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1c7      	bne.n	800aeec <HAL_SPI_Receive+0x168>
 800af5c:	e035      	b.n	800afca <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	2201      	movs	r2, #1
 800af66:	4013      	ands	r3, r2
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d115      	bne.n	800af98 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68da      	ldr	r2, [r3, #12]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af76:	b292      	uxth	r2, r2
 800af78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7e:	1c9a      	adds	r2, r3, #2
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2246      	movs	r2, #70	; 0x46
 800af88:	5a9b      	ldrh	r3, [r3, r2]
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	3b01      	subs	r3, #1
 800af8e:	b299      	uxth	r1, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2246      	movs	r2, #70	; 0x46
 800af94:	5299      	strh	r1, [r3, r2]
 800af96:	e012      	b.n	800afbe <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af98:	f7fe f9b8 	bl	800930c <HAL_GetTick>
 800af9c:	0002      	movs	r2, r0
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d802      	bhi.n	800afae <HAL_SPI_Receive+0x22a>
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	3301      	adds	r3, #1
 800afac:	d102      	bne.n	800afb4 <HAL_SPI_Receive+0x230>
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d104      	bne.n	800afbe <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800afb4:	2317      	movs	r3, #23
 800afb6:	18fb      	adds	r3, r7, r3
 800afb8:	2203      	movs	r2, #3
 800afba:	701a      	strb	r2, [r3, #0]
          goto error;
 800afbc:	e01a      	b.n	800aff4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2246      	movs	r2, #70	; 0x46
 800afc2:	5a9b      	ldrh	r3, [r3, r2]
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1c9      	bne.n	800af5e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	0018      	movs	r0, r3
 800afd2:	f000 fb31 	bl	800b638 <SPI_EndRxTransaction>
 800afd6:	1e03      	subs	r3, r0, #0
 800afd8:	d002      	beq.n	800afe0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2220      	movs	r2, #32
 800afde:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d004      	beq.n	800aff2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800afe8:	2317      	movs	r3, #23
 800afea:	18fb      	adds	r3, r7, r3
 800afec:	2201      	movs	r2, #1
 800afee:	701a      	strb	r2, [r3, #0]
 800aff0:	e000      	b.n	800aff4 <HAL_SPI_Receive+0x270>
  }

error :
 800aff2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	225d      	movs	r2, #93	; 0x5d
 800aff8:	2101      	movs	r1, #1
 800affa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	225c      	movs	r2, #92	; 0x5c
 800b000:	2100      	movs	r1, #0
 800b002:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b004:	2317      	movs	r3, #23
 800b006:	18fb      	adds	r3, r7, r3
 800b008:	781b      	ldrb	r3, [r3, #0]
}
 800b00a:	0018      	movs	r0, r3
 800b00c:	46bd      	mov	sp, r7
 800b00e:	b007      	add	sp, #28
 800b010:	bd90      	pop	{r4, r7, pc}
 800b012:	46c0      	nop			; (mov r8, r8)
 800b014:	ffffefff 	.word	0xffffefff
 800b018:	ffffbfff 	.word	0xffffbfff

0800b01c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08a      	sub	sp, #40	; 0x28
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	001a      	movs	r2, r3
 800b02a:	1cbb      	adds	r3, r7, #2
 800b02c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b02e:	2301      	movs	r3, #1
 800b030:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b032:	2323      	movs	r3, #35	; 0x23
 800b034:	18fb      	adds	r3, r7, r3
 800b036:	2200      	movs	r2, #0
 800b038:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	225c      	movs	r2, #92	; 0x5c
 800b03e:	5c9b      	ldrb	r3, [r3, r2]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d101      	bne.n	800b048 <HAL_SPI_TransmitReceive+0x2c>
 800b044:	2302      	movs	r3, #2
 800b046:	e1b5      	b.n	800b3b4 <HAL_SPI_TransmitReceive+0x398>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	225c      	movs	r2, #92	; 0x5c
 800b04c:	2101      	movs	r1, #1
 800b04e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b050:	f7fe f95c 	bl	800930c <HAL_GetTick>
 800b054:	0003      	movs	r3, r0
 800b056:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b058:	201b      	movs	r0, #27
 800b05a:	183b      	adds	r3, r7, r0
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	215d      	movs	r1, #93	; 0x5d
 800b060:	5c52      	ldrb	r2, [r2, r1]
 800b062:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b06a:	2312      	movs	r3, #18
 800b06c:	18fb      	adds	r3, r7, r3
 800b06e:	1cba      	adds	r2, r7, #2
 800b070:	8812      	ldrh	r2, [r2, #0]
 800b072:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b074:	183b      	adds	r3, r7, r0
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d011      	beq.n	800b0a0 <HAL_SPI_TransmitReceive+0x84>
 800b07c:	697a      	ldr	r2, [r7, #20]
 800b07e:	2382      	movs	r3, #130	; 0x82
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	429a      	cmp	r2, r3
 800b084:	d107      	bne.n	800b096 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d103      	bne.n	800b096 <HAL_SPI_TransmitReceive+0x7a>
 800b08e:	183b      	adds	r3, r7, r0
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	2b04      	cmp	r3, #4
 800b094:	d004      	beq.n	800b0a0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b096:	2323      	movs	r3, #35	; 0x23
 800b098:	18fb      	adds	r3, r7, r3
 800b09a:	2202      	movs	r2, #2
 800b09c:	701a      	strb	r2, [r3, #0]
    goto error;
 800b09e:	e17e      	b.n	800b39e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d006      	beq.n	800b0b4 <HAL_SPI_TransmitReceive+0x98>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d003      	beq.n	800b0b4 <HAL_SPI_TransmitReceive+0x98>
 800b0ac:	1cbb      	adds	r3, r7, #2
 800b0ae:	881b      	ldrh	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d104      	bne.n	800b0be <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b0b4:	2323      	movs	r3, #35	; 0x23
 800b0b6:	18fb      	adds	r3, r7, r3
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	701a      	strb	r2, [r3, #0]
    goto error;
 800b0bc:	e16f      	b.n	800b39e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	225d      	movs	r2, #93	; 0x5d
 800b0c2:	5c9b      	ldrb	r3, [r3, r2]
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b04      	cmp	r3, #4
 800b0c8:	d003      	beq.n	800b0d2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	225d      	movs	r2, #93	; 0x5d
 800b0ce:	2105      	movs	r1, #5
 800b0d0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	1cba      	adds	r2, r7, #2
 800b0e2:	2146      	movs	r1, #70	; 0x46
 800b0e4:	8812      	ldrh	r2, [r2, #0]
 800b0e6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	1cba      	adds	r2, r7, #2
 800b0ec:	2144      	movs	r1, #68	; 0x44
 800b0ee:	8812      	ldrh	r2, [r2, #0]
 800b0f0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	1cba      	adds	r2, r7, #2
 800b0fc:	8812      	ldrh	r2, [r2, #0]
 800b0fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	1cba      	adds	r2, r7, #2
 800b104:	8812      	ldrh	r2, [r2, #0]
 800b106:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2200      	movs	r2, #0
 800b112:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	68da      	ldr	r2, [r3, #12]
 800b118:	23e0      	movs	r3, #224	; 0xe0
 800b11a:	00db      	lsls	r3, r3, #3
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d908      	bls.n	800b132 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	49a4      	ldr	r1, [pc, #656]	; (800b3bc <HAL_SPI_TransmitReceive+0x3a0>)
 800b12c:	400a      	ands	r2, r1
 800b12e:	605a      	str	r2, [r3, #4]
 800b130:	e008      	b.n	800b144 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	685a      	ldr	r2, [r3, #4]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2180      	movs	r1, #128	; 0x80
 800b13e:	0149      	lsls	r1, r1, #5
 800b140:	430a      	orrs	r2, r1
 800b142:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2240      	movs	r2, #64	; 0x40
 800b14c:	4013      	ands	r3, r2
 800b14e:	2b40      	cmp	r3, #64	; 0x40
 800b150:	d007      	beq.n	800b162 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2140      	movs	r1, #64	; 0x40
 800b15e:	430a      	orrs	r2, r1
 800b160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	68da      	ldr	r2, [r3, #12]
 800b166:	23e0      	movs	r3, #224	; 0xe0
 800b168:	00db      	lsls	r3, r3, #3
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d800      	bhi.n	800b170 <HAL_SPI_TransmitReceive+0x154>
 800b16e:	e07f      	b.n	800b270 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d005      	beq.n	800b184 <HAL_SPI_TransmitReceive+0x168>
 800b178:	2312      	movs	r3, #18
 800b17a:	18fb      	adds	r3, r7, r3
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d000      	beq.n	800b184 <HAL_SPI_TransmitReceive+0x168>
 800b182:	e069      	b.n	800b258 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b188:	881a      	ldrh	r2, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b194:	1c9a      	adds	r2, r3, #2
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1a8:	e056      	b.n	800b258 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	4013      	ands	r3, r2
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d11b      	bne.n	800b1f0 <HAL_SPI_TransmitReceive+0x1d4>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d016      	beq.n	800b1f0 <HAL_SPI_TransmitReceive+0x1d4>
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d113      	bne.n	800b1f0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1cc:	881a      	ldrh	r2, [r3, #0]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d8:	1c9a      	adds	r2, r3, #2
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d11c      	bne.n	800b238 <HAL_SPI_TransmitReceive+0x21c>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2246      	movs	r2, #70	; 0x46
 800b202:	5a9b      	ldrh	r3, [r3, r2]
 800b204:	b29b      	uxth	r3, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d016      	beq.n	800b238 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68da      	ldr	r2, [r3, #12]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b214:	b292      	uxth	r2, r2
 800b216:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21c:	1c9a      	adds	r2, r3, #2
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2246      	movs	r2, #70	; 0x46
 800b226:	5a9b      	ldrh	r3, [r3, r2]
 800b228:	b29b      	uxth	r3, r3
 800b22a:	3b01      	subs	r3, #1
 800b22c:	b299      	uxth	r1, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2246      	movs	r2, #70	; 0x46
 800b232:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b234:	2301      	movs	r3, #1
 800b236:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b238:	f7fe f868 	bl	800930c <HAL_GetTick>
 800b23c:	0002      	movs	r2, r0
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b244:	429a      	cmp	r2, r3
 800b246:	d807      	bhi.n	800b258 <HAL_SPI_TransmitReceive+0x23c>
 800b248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24a:	3301      	adds	r3, #1
 800b24c:	d004      	beq.n	800b258 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800b24e:	2323      	movs	r3, #35	; 0x23
 800b250:	18fb      	adds	r3, r7, r3
 800b252:	2203      	movs	r2, #3
 800b254:	701a      	strb	r2, [r3, #0]
        goto error;
 800b256:	e0a2      	b.n	800b39e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1a3      	bne.n	800b1aa <HAL_SPI_TransmitReceive+0x18e>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2246      	movs	r2, #70	; 0x46
 800b266:	5a9b      	ldrh	r3, [r3, r2]
 800b268:	b29b      	uxth	r3, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d19d      	bne.n	800b1aa <HAL_SPI_TransmitReceive+0x18e>
 800b26e:	e085      	b.n	800b37c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d005      	beq.n	800b284 <HAL_SPI_TransmitReceive+0x268>
 800b278:	2312      	movs	r3, #18
 800b27a:	18fb      	adds	r3, r7, r3
 800b27c:	881b      	ldrh	r3, [r3, #0]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d000      	beq.n	800b284 <HAL_SPI_TransmitReceive+0x268>
 800b282:	e070      	b.n	800b366 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	330c      	adds	r3, #12
 800b28e:	7812      	ldrb	r2, [r2, #0]
 800b290:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b296:	1c5a      	adds	r2, r3, #1
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b2aa:	e05c      	b.n	800b366 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d11c      	bne.n	800b2f4 <HAL_SPI_TransmitReceive+0x2d8>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d017      	beq.n	800b2f4 <HAL_SPI_TransmitReceive+0x2d8>
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d114      	bne.n	800b2f4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	330c      	adds	r3, #12
 800b2d4:	7812      	ldrb	r2, [r2, #0]
 800b2d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d11e      	bne.n	800b340 <HAL_SPI_TransmitReceive+0x324>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2246      	movs	r2, #70	; 0x46
 800b306:	5a9b      	ldrh	r3, [r3, r2]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d018      	beq.n	800b340 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	330c      	adds	r3, #12
 800b314:	001a      	movs	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31a:	7812      	ldrb	r2, [r2, #0]
 800b31c:	b2d2      	uxtb	r2, r2
 800b31e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b324:	1c5a      	adds	r2, r3, #1
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2246      	movs	r2, #70	; 0x46
 800b32e:	5a9b      	ldrh	r3, [r3, r2]
 800b330:	b29b      	uxth	r3, r3
 800b332:	3b01      	subs	r3, #1
 800b334:	b299      	uxth	r1, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2246      	movs	r2, #70	; 0x46
 800b33a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b33c:	2301      	movs	r3, #1
 800b33e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b340:	f7fd ffe4 	bl	800930c <HAL_GetTick>
 800b344:	0002      	movs	r2, r0
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d802      	bhi.n	800b356 <HAL_SPI_TransmitReceive+0x33a>
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	3301      	adds	r3, #1
 800b354:	d102      	bne.n	800b35c <HAL_SPI_TransmitReceive+0x340>
 800b356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d104      	bne.n	800b366 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800b35c:	2323      	movs	r3, #35	; 0x23
 800b35e:	18fb      	adds	r3, r7, r3
 800b360:	2203      	movs	r2, #3
 800b362:	701a      	strb	r2, [r3, #0]
        goto error;
 800b364:	e01b      	b.n	800b39e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d19d      	bne.n	800b2ac <HAL_SPI_TransmitReceive+0x290>
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2246      	movs	r2, #70	; 0x46
 800b374:	5a9b      	ldrh	r3, [r3, r2]
 800b376:	b29b      	uxth	r3, r3
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d197      	bne.n	800b2ac <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b37c:	69fa      	ldr	r2, [r7, #28]
 800b37e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	0018      	movs	r0, r3
 800b384:	f000 f9b6 	bl	800b6f4 <SPI_EndRxTxTransaction>
 800b388:	1e03      	subs	r3, r0, #0
 800b38a:	d007      	beq.n	800b39c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800b38c:	2323      	movs	r3, #35	; 0x23
 800b38e:	18fb      	adds	r3, r7, r3
 800b390:	2201      	movs	r2, #1
 800b392:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2220      	movs	r2, #32
 800b398:	661a      	str	r2, [r3, #96]	; 0x60
 800b39a:	e000      	b.n	800b39e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800b39c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	225d      	movs	r2, #93	; 0x5d
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	225c      	movs	r2, #92	; 0x5c
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b3ae:	2323      	movs	r3, #35	; 0x23
 800b3b0:	18fb      	adds	r3, r7, r3
 800b3b2:	781b      	ldrb	r3, [r3, #0]
}
 800b3b4:	0018      	movs	r0, r3
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	b00a      	add	sp, #40	; 0x28
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	ffffefff 	.word	0xffffefff

0800b3c0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	225d      	movs	r2, #93	; 0x5d
 800b3cc:	5c9b      	ldrb	r3, [r3, r2]
 800b3ce:	b2db      	uxtb	r3, r3
}
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	b002      	add	sp, #8
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b088      	sub	sp, #32
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	603b      	str	r3, [r7, #0]
 800b3e4:	1dfb      	adds	r3, r7, #7
 800b3e6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b3e8:	f7fd ff90 	bl	800930c <HAL_GetTick>
 800b3ec:	0002      	movs	r2, r0
 800b3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f0:	1a9b      	subs	r3, r3, r2
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	18d3      	adds	r3, r2, r3
 800b3f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b3f8:	f7fd ff88 	bl	800930c <HAL_GetTick>
 800b3fc:	0003      	movs	r3, r0
 800b3fe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b400:	4b3a      	ldr	r3, [pc, #232]	; (800b4ec <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	015b      	lsls	r3, r3, #5
 800b406:	0d1b      	lsrs	r3, r3, #20
 800b408:	69fa      	ldr	r2, [r7, #28]
 800b40a:	4353      	muls	r3, r2
 800b40c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b40e:	e058      	b.n	800b4c2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	3301      	adds	r3, #1
 800b414:	d055      	beq.n	800b4c2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b416:	f7fd ff79 	bl	800930c <HAL_GetTick>
 800b41a:	0002      	movs	r2, r0
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	69fa      	ldr	r2, [r7, #28]
 800b422:	429a      	cmp	r2, r3
 800b424:	d902      	bls.n	800b42c <SPI_WaitFlagStateUntilTimeout+0x54>
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d142      	bne.n	800b4b2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	21e0      	movs	r1, #224	; 0xe0
 800b438:	438a      	bics	r2, r1
 800b43a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	2382      	movs	r3, #130	; 0x82
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	429a      	cmp	r2, r3
 800b446:	d113      	bne.n	800b470 <SPI_WaitFlagStateUntilTimeout+0x98>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	689a      	ldr	r2, [r3, #8]
 800b44c:	2380      	movs	r3, #128	; 0x80
 800b44e:	021b      	lsls	r3, r3, #8
 800b450:	429a      	cmp	r2, r3
 800b452:	d005      	beq.n	800b460 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	689a      	ldr	r2, [r3, #8]
 800b458:	2380      	movs	r3, #128	; 0x80
 800b45a:	00db      	lsls	r3, r3, #3
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d107      	bne.n	800b470 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2140      	movs	r1, #64	; 0x40
 800b46c:	438a      	bics	r2, r1
 800b46e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b474:	2380      	movs	r3, #128	; 0x80
 800b476:	019b      	lsls	r3, r3, #6
 800b478:	429a      	cmp	r2, r3
 800b47a:	d110      	bne.n	800b49e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	491a      	ldr	r1, [pc, #104]	; (800b4f0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b488:	400a      	ands	r2, r1
 800b48a:	601a      	str	r2, [r3, #0]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2180      	movs	r1, #128	; 0x80
 800b498:	0189      	lsls	r1, r1, #6
 800b49a:	430a      	orrs	r2, r1
 800b49c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	225d      	movs	r2, #93	; 0x5d
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	225c      	movs	r2, #92	; 0x5c
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b4ae:	2303      	movs	r3, #3
 800b4b0:	e017      	b.n	800b4e2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d101      	bne.n	800b4bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	425a      	negs	r2, r3
 800b4d2:	4153      	adcs	r3, r2
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	001a      	movs	r2, r3
 800b4d8:	1dfb      	adds	r3, r7, #7
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d197      	bne.n	800b410 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	0018      	movs	r0, r3
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	b008      	add	sp, #32
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	46c0      	nop			; (mov r8, r8)
 800b4ec:	20000004 	.word	0x20000004
 800b4f0:	ffffdfff 	.word	0xffffdfff

0800b4f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08a      	sub	sp, #40	; 0x28
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b502:	2317      	movs	r3, #23
 800b504:	18fb      	adds	r3, r7, r3
 800b506:	2200      	movs	r2, #0
 800b508:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b50a:	f7fd feff 	bl	800930c <HAL_GetTick>
 800b50e:	0002      	movs	r2, r0
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	18d3      	adds	r3, r2, r3
 800b518:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b51a:	f7fd fef7 	bl	800930c <HAL_GetTick>
 800b51e:	0003      	movs	r3, r0
 800b520:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	330c      	adds	r3, #12
 800b528:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b52a:	4b41      	ldr	r3, [pc, #260]	; (800b630 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	0013      	movs	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	189b      	adds	r3, r3, r2
 800b534:	00da      	lsls	r2, r3, #3
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	0d1b      	lsrs	r3, r3, #20
 800b53a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b53c:	4353      	muls	r3, r2
 800b53e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b540:	e068      	b.n	800b614 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	23c0      	movs	r3, #192	; 0xc0
 800b546:	00db      	lsls	r3, r3, #3
 800b548:	429a      	cmp	r2, r3
 800b54a:	d10a      	bne.n	800b562 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d107      	bne.n	800b562 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	b2da      	uxtb	r2, r3
 800b558:	2117      	movs	r1, #23
 800b55a:	187b      	adds	r3, r7, r1
 800b55c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b55e:	187b      	adds	r3, r7, r1
 800b560:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	3301      	adds	r3, #1
 800b566:	d055      	beq.n	800b614 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b568:	f7fd fed0 	bl	800930c <HAL_GetTick>
 800b56c:	0002      	movs	r2, r0
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b574:	429a      	cmp	r2, r3
 800b576:	d902      	bls.n	800b57e <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d142      	bne.n	800b604 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	21e0      	movs	r1, #224	; 0xe0
 800b58a:	438a      	bics	r2, r1
 800b58c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	2382      	movs	r3, #130	; 0x82
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	429a      	cmp	r2, r3
 800b598:	d113      	bne.n	800b5c2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	689a      	ldr	r2, [r3, #8]
 800b59e:	2380      	movs	r3, #128	; 0x80
 800b5a0:	021b      	lsls	r3, r3, #8
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d005      	beq.n	800b5b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	689a      	ldr	r2, [r3, #8]
 800b5aa:	2380      	movs	r3, #128	; 0x80
 800b5ac:	00db      	lsls	r3, r3, #3
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d107      	bne.n	800b5c2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2140      	movs	r1, #64	; 0x40
 800b5be:	438a      	bics	r2, r1
 800b5c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5c6:	2380      	movs	r3, #128	; 0x80
 800b5c8:	019b      	lsls	r3, r3, #6
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d110      	bne.n	800b5f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4916      	ldr	r1, [pc, #88]	; (800b634 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800b5da:	400a      	ands	r2, r1
 800b5dc:	601a      	str	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2180      	movs	r1, #128	; 0x80
 800b5ea:	0189      	lsls	r1, r1, #6
 800b5ec:	430a      	orrs	r2, r1
 800b5ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	225d      	movs	r2, #93	; 0x5d
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	225c      	movs	r2, #92	; 0x5c
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b600:	2303      	movs	r3, #3
 800b602:	e010      	b.n	800b626 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d101      	bne.n	800b60e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	3b01      	subs	r3, #1
 800b612:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	4013      	ands	r3, r2
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	429a      	cmp	r2, r3
 800b622:	d18e      	bne.n	800b542 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	0018      	movs	r0, r3
 800b628:	46bd      	mov	sp, r7
 800b62a:	b00a      	add	sp, #40	; 0x28
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	46c0      	nop			; (mov r8, r8)
 800b630:	20000004 	.word	0x20000004
 800b634:	ffffdfff 	.word	0xffffdfff

0800b638 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af02      	add	r7, sp, #8
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	2382      	movs	r3, #130	; 0x82
 800b64a:	005b      	lsls	r3, r3, #1
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d113      	bne.n	800b678 <SPI_EndRxTransaction+0x40>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	689a      	ldr	r2, [r3, #8]
 800b654:	2380      	movs	r3, #128	; 0x80
 800b656:	021b      	lsls	r3, r3, #8
 800b658:	429a      	cmp	r2, r3
 800b65a:	d005      	beq.n	800b668 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	689a      	ldr	r2, [r3, #8]
 800b660:	2380      	movs	r3, #128	; 0x80
 800b662:	00db      	lsls	r3, r3, #3
 800b664:	429a      	cmp	r2, r3
 800b666:	d107      	bne.n	800b678 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2140      	movs	r1, #64	; 0x40
 800b674:	438a      	bics	r2, r1
 800b676:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	0013      	movs	r3, r2
 800b682:	2200      	movs	r2, #0
 800b684:	2180      	movs	r1, #128	; 0x80
 800b686:	f7ff fea7 	bl	800b3d8 <SPI_WaitFlagStateUntilTimeout>
 800b68a:	1e03      	subs	r3, r0, #0
 800b68c:	d007      	beq.n	800b69e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b692:	2220      	movs	r2, #32
 800b694:	431a      	orrs	r2, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b69a:	2303      	movs	r3, #3
 800b69c:	e026      	b.n	800b6ec <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	2382      	movs	r3, #130	; 0x82
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d11f      	bne.n	800b6ea <SPI_EndRxTransaction+0xb2>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	689a      	ldr	r2, [r3, #8]
 800b6ae:	2380      	movs	r3, #128	; 0x80
 800b6b0:	021b      	lsls	r3, r3, #8
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d005      	beq.n	800b6c2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	689a      	ldr	r2, [r3, #8]
 800b6ba:	2380      	movs	r3, #128	; 0x80
 800b6bc:	00db      	lsls	r3, r3, #3
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d113      	bne.n	800b6ea <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	23c0      	movs	r3, #192	; 0xc0
 800b6c6:	00d9      	lsls	r1, r3, #3
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	0013      	movs	r3, r2
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f7ff ff0f 	bl	800b4f4 <SPI_WaitFifoStateUntilTimeout>
 800b6d6:	1e03      	subs	r3, r0, #0
 800b6d8:	d007      	beq.n	800b6ea <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6de:	2220      	movs	r2, #32
 800b6e0:	431a      	orrs	r2, r3
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	e000      	b.n	800b6ec <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	0018      	movs	r0, r3
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	b004      	add	sp, #16
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	23c0      	movs	r3, #192	; 0xc0
 800b704:	0159      	lsls	r1, r3, #5
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	0013      	movs	r3, r2
 800b70e:	2200      	movs	r2, #0
 800b710:	f7ff fef0 	bl	800b4f4 <SPI_WaitFifoStateUntilTimeout>
 800b714:	1e03      	subs	r3, r0, #0
 800b716:	d007      	beq.n	800b728 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b71c:	2220      	movs	r2, #32
 800b71e:	431a      	orrs	r2, r3
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b724:	2303      	movs	r3, #3
 800b726:	e027      	b.n	800b778 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	0013      	movs	r3, r2
 800b732:	2200      	movs	r2, #0
 800b734:	2180      	movs	r1, #128	; 0x80
 800b736:	f7ff fe4f 	bl	800b3d8 <SPI_WaitFlagStateUntilTimeout>
 800b73a:	1e03      	subs	r3, r0, #0
 800b73c:	d007      	beq.n	800b74e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b742:	2220      	movs	r2, #32
 800b744:	431a      	orrs	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	e014      	b.n	800b778 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	23c0      	movs	r3, #192	; 0xc0
 800b752:	00d9      	lsls	r1, r3, #3
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	0013      	movs	r3, r2
 800b75c:	2200      	movs	r2, #0
 800b75e:	f7ff fec9 	bl	800b4f4 <SPI_WaitFifoStateUntilTimeout>
 800b762:	1e03      	subs	r3, r0, #0
 800b764:	d007      	beq.n	800b776 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b76a:	2220      	movs	r2, #32
 800b76c:	431a      	orrs	r2, r3
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b772:	2303      	movs	r3, #3
 800b774:	e000      	b.n	800b778 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	0018      	movs	r0, r3
 800b77a:	46bd      	mov	sp, r7
 800b77c:	b004      	add	sp, #16
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e04a      	b.n	800b828 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	223d      	movs	r2, #61	; 0x3d
 800b796:	5c9b      	ldrb	r3, [r3, r2]
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d107      	bne.n	800b7ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	223c      	movs	r2, #60	; 0x3c
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	f7fd fbaf 	bl	8008f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	223d      	movs	r2, #61	; 0x3d
 800b7b2:	2102      	movs	r1, #2
 800b7b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3304      	adds	r3, #4
 800b7be:	0019      	movs	r1, r3
 800b7c0:	0010      	movs	r0, r2
 800b7c2:	f000 f883 	bl	800b8cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2248      	movs	r2, #72	; 0x48
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	223e      	movs	r2, #62	; 0x3e
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	5499      	strb	r1, [r3, r2]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	223f      	movs	r2, #63	; 0x3f
 800b7da:	2101      	movs	r1, #1
 800b7dc:	5499      	strb	r1, [r3, r2]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2240      	movs	r2, #64	; 0x40
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	5499      	strb	r1, [r3, r2]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2241      	movs	r2, #65	; 0x41
 800b7ea:	2101      	movs	r1, #1
 800b7ec:	5499      	strb	r1, [r3, r2]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2242      	movs	r2, #66	; 0x42
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	5499      	strb	r1, [r3, r2]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2243      	movs	r2, #67	; 0x43
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2244      	movs	r2, #68	; 0x44
 800b802:	2101      	movs	r1, #1
 800b804:	5499      	strb	r1, [r3, r2]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2245      	movs	r2, #69	; 0x45
 800b80a:	2101      	movs	r1, #1
 800b80c:	5499      	strb	r1, [r3, r2]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2246      	movs	r2, #70	; 0x46
 800b812:	2101      	movs	r1, #1
 800b814:	5499      	strb	r1, [r3, r2]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2247      	movs	r2, #71	; 0x47
 800b81a:	2101      	movs	r1, #1
 800b81c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	223d      	movs	r2, #61	; 0x3d
 800b822:	2101      	movs	r1, #1
 800b824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	0018      	movs	r0, r3
 800b82a:	46bd      	mov	sp, r7
 800b82c:	b002      	add	sp, #8
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	223d      	movs	r2, #61	; 0x3d
 800b83c:	5c9b      	ldrb	r3, [r3, r2]
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	2b01      	cmp	r3, #1
 800b842:	d001      	beq.n	800b848 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	e034      	b.n	800b8b2 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	223d      	movs	r2, #61	; 0x3d
 800b84c:	2102      	movs	r1, #2
 800b84e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a19      	ldr	r2, [pc, #100]	; (800b8bc <HAL_TIM_Base_Start+0x8c>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d009      	beq.n	800b86e <HAL_TIM_Base_Start+0x3e>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a18      	ldr	r2, [pc, #96]	; (800b8c0 <HAL_TIM_Base_Start+0x90>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d004      	beq.n	800b86e <HAL_TIM_Base_Start+0x3e>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a16      	ldr	r2, [pc, #88]	; (800b8c4 <HAL_TIM_Base_Start+0x94>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d116      	bne.n	800b89c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	4a14      	ldr	r2, [pc, #80]	; (800b8c8 <HAL_TIM_Base_Start+0x98>)
 800b876:	4013      	ands	r3, r2
 800b878:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2b06      	cmp	r3, #6
 800b87e:	d016      	beq.n	800b8ae <HAL_TIM_Base_Start+0x7e>
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	2380      	movs	r3, #128	; 0x80
 800b884:	025b      	lsls	r3, r3, #9
 800b886:	429a      	cmp	r2, r3
 800b888:	d011      	beq.n	800b8ae <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2101      	movs	r1, #1
 800b896:	430a      	orrs	r2, r1
 800b898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b89a:	e008      	b.n	800b8ae <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	e000      	b.n	800b8b0 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8ae:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	0018      	movs	r0, r3
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	b004      	add	sp, #16
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	46c0      	nop			; (mov r8, r8)
 800b8bc:	40012c00 	.word	0x40012c00
 800b8c0:	40000400 	.word	0x40000400
 800b8c4:	40014000 	.word	0x40014000
 800b8c8:	00010007 	.word	0x00010007

0800b8cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a2f      	ldr	r2, [pc, #188]	; (800b99c <TIM_Base_SetConfig+0xd0>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d003      	beq.n	800b8ec <TIM_Base_SetConfig+0x20>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a2e      	ldr	r2, [pc, #184]	; (800b9a0 <TIM_Base_SetConfig+0xd4>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d108      	bne.n	800b8fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2270      	movs	r2, #112	; 0x70
 800b8f0:	4393      	bics	r3, r2
 800b8f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a26      	ldr	r2, [pc, #152]	; (800b99c <TIM_Base_SetConfig+0xd0>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d013      	beq.n	800b92e <TIM_Base_SetConfig+0x62>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a25      	ldr	r2, [pc, #148]	; (800b9a0 <TIM_Base_SetConfig+0xd4>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d00f      	beq.n	800b92e <TIM_Base_SetConfig+0x62>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a24      	ldr	r2, [pc, #144]	; (800b9a4 <TIM_Base_SetConfig+0xd8>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d00b      	beq.n	800b92e <TIM_Base_SetConfig+0x62>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a23      	ldr	r2, [pc, #140]	; (800b9a8 <TIM_Base_SetConfig+0xdc>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d007      	beq.n	800b92e <TIM_Base_SetConfig+0x62>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a22      	ldr	r2, [pc, #136]	; (800b9ac <TIM_Base_SetConfig+0xe0>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d003      	beq.n	800b92e <TIM_Base_SetConfig+0x62>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4a21      	ldr	r2, [pc, #132]	; (800b9b0 <TIM_Base_SetConfig+0xe4>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d108      	bne.n	800b940 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4a20      	ldr	r2, [pc, #128]	; (800b9b4 <TIM_Base_SetConfig+0xe8>)
 800b932:	4013      	ands	r3, r2
 800b934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2280      	movs	r2, #128	; 0x80
 800b944:	4393      	bics	r3, r2
 800b946:	001a      	movs	r2, r3
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	695b      	ldr	r3, [r3, #20]
 800b94c:	4313      	orrs	r3, r2
 800b94e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	689a      	ldr	r2, [r3, #8]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a0c      	ldr	r2, [pc, #48]	; (800b99c <TIM_Base_SetConfig+0xd0>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d00b      	beq.n	800b986 <TIM_Base_SetConfig+0xba>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4a0d      	ldr	r2, [pc, #52]	; (800b9a8 <TIM_Base_SetConfig+0xdc>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d007      	beq.n	800b986 <TIM_Base_SetConfig+0xba>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a0c      	ldr	r2, [pc, #48]	; (800b9ac <TIM_Base_SetConfig+0xe0>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d003      	beq.n	800b986 <TIM_Base_SetConfig+0xba>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4a0b      	ldr	r2, [pc, #44]	; (800b9b0 <TIM_Base_SetConfig+0xe4>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d103      	bne.n	800b98e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	691a      	ldr	r2, [r3, #16]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2201      	movs	r2, #1
 800b992:	615a      	str	r2, [r3, #20]
}
 800b994:	46c0      	nop			; (mov r8, r8)
 800b996:	46bd      	mov	sp, r7
 800b998:	b004      	add	sp, #16
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	40012c00 	.word	0x40012c00
 800b9a0:	40000400 	.word	0x40000400
 800b9a4:	40002000 	.word	0x40002000
 800b9a8:	40014000 	.word	0x40014000
 800b9ac:	40014400 	.word	0x40014400
 800b9b0:	40014800 	.word	0x40014800
 800b9b4:	fffffcff 	.word	0xfffffcff

0800b9b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d101      	bne.n	800b9ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e046      	b.n	800ba58 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2284      	movs	r2, #132	; 0x84
 800b9ce:	589b      	ldr	r3, [r3, r2]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d107      	bne.n	800b9e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2280      	movs	r2, #128	; 0x80
 800b9d8:	2100      	movs	r1, #0
 800b9da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	0018      	movs	r0, r3
 800b9e0:	f7fd fab4 	bl	8008f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2284      	movs	r2, #132	; 0x84
 800b9e8:	2124      	movs	r1, #36	; 0x24
 800b9ea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2101      	movs	r1, #1
 800b9f8:	438a      	bics	r2, r1
 800b9fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	0018      	movs	r0, r3
 800ba00:	f000 f8dc 	bl	800bbbc <UART_SetConfig>
 800ba04:	0003      	movs	r3, r0
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d101      	bne.n	800ba0e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e024      	b.n	800ba58 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	0018      	movs	r0, r3
 800ba1a:	f000 fa75 	bl	800bf08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	490d      	ldr	r1, [pc, #52]	; (800ba60 <HAL_UART_Init+0xa8>)
 800ba2a:	400a      	ands	r2, r1
 800ba2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	689a      	ldr	r2, [r3, #8]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	212a      	movs	r1, #42	; 0x2a
 800ba3a:	438a      	bics	r2, r1
 800ba3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2101      	movs	r1, #1
 800ba4a:	430a      	orrs	r2, r1
 800ba4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	0018      	movs	r0, r3
 800ba52:	f000 fb0d 	bl	800c070 <UART_CheckIdleState>
 800ba56:	0003      	movs	r3, r0
}
 800ba58:	0018      	movs	r0, r3
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	b002      	add	sp, #8
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	ffffb7ff 	.word	0xffffb7ff

0800ba64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b08a      	sub	sp, #40	; 0x28
 800ba68:	af02      	add	r7, sp, #8
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	603b      	str	r3, [r7, #0]
 800ba70:	1dbb      	adds	r3, r7, #6
 800ba72:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2284      	movs	r2, #132	; 0x84
 800ba78:	589b      	ldr	r3, [r3, r2]
 800ba7a:	2b20      	cmp	r3, #32
 800ba7c:	d000      	beq.n	800ba80 <HAL_UART_Transmit+0x1c>
 800ba7e:	e097      	b.n	800bbb0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <HAL_UART_Transmit+0x2a>
 800ba86:	1dbb      	adds	r3, r7, #6
 800ba88:	881b      	ldrh	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e08f      	b.n	800bbb2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	689a      	ldr	r2, [r3, #8]
 800ba96:	2380      	movs	r3, #128	; 0x80
 800ba98:	015b      	lsls	r3, r3, #5
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d109      	bne.n	800bab2 <HAL_UART_Transmit+0x4e>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d105      	bne.n	800bab2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	2201      	movs	r2, #1
 800baaa:	4013      	ands	r3, r2
 800baac:	d001      	beq.n	800bab2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e07f      	b.n	800bbb2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2280      	movs	r2, #128	; 0x80
 800bab6:	5c9b      	ldrb	r3, [r3, r2]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d101      	bne.n	800bac0 <HAL_UART_Transmit+0x5c>
 800babc:	2302      	movs	r3, #2
 800babe:	e078      	b.n	800bbb2 <HAL_UART_Transmit+0x14e>
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2280      	movs	r2, #128	; 0x80
 800bac4:	2101      	movs	r1, #1
 800bac6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	228c      	movs	r2, #140	; 0x8c
 800bacc:	2100      	movs	r1, #0
 800bace:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2284      	movs	r2, #132	; 0x84
 800bad4:	2121      	movs	r1, #33	; 0x21
 800bad6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bad8:	f7fd fc18 	bl	800930c <HAL_GetTick>
 800badc:	0003      	movs	r3, r0
 800bade:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	1dba      	adds	r2, r7, #6
 800bae4:	2154      	movs	r1, #84	; 0x54
 800bae6:	8812      	ldrh	r2, [r2, #0]
 800bae8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	1dba      	adds	r2, r7, #6
 800baee:	2156      	movs	r1, #86	; 0x56
 800baf0:	8812      	ldrh	r2, [r2, #0]
 800baf2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	2380      	movs	r3, #128	; 0x80
 800bafa:	015b      	lsls	r3, r3, #5
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d108      	bne.n	800bb12 <HAL_UART_Transmit+0xae>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d104      	bne.n	800bb12 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	61bb      	str	r3, [r7, #24]
 800bb10:	e003      	b.n	800bb1a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2280      	movs	r2, #128	; 0x80
 800bb1e:	2100      	movs	r1, #0
 800bb20:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800bb22:	e02c      	b.n	800bb7e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb24:	697a      	ldr	r2, [r7, #20]
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	0013      	movs	r3, r2
 800bb2e:	2200      	movs	r2, #0
 800bb30:	2180      	movs	r1, #128	; 0x80
 800bb32:	f000 fae7 	bl	800c104 <UART_WaitOnFlagUntilTimeout>
 800bb36:	1e03      	subs	r3, r0, #0
 800bb38:	d001      	beq.n	800bb3e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e039      	b.n	800bbb2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10b      	bne.n	800bb5c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	001a      	movs	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	05d2      	lsls	r2, r2, #23
 800bb50:	0dd2      	lsrs	r2, r2, #23
 800bb52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	3302      	adds	r3, #2
 800bb58:	61bb      	str	r3, [r7, #24]
 800bb5a:	e007      	b.n	800bb6c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	781a      	ldrb	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2256      	movs	r2, #86	; 0x56
 800bb70:	5a9b      	ldrh	r3, [r3, r2]
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	3b01      	subs	r3, #1
 800bb76:	b299      	uxth	r1, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2256      	movs	r2, #86	; 0x56
 800bb7c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2256      	movs	r2, #86	; 0x56
 800bb82:	5a9b      	ldrh	r3, [r3, r2]
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1cc      	bne.n	800bb24 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	0013      	movs	r3, r2
 800bb94:	2200      	movs	r2, #0
 800bb96:	2140      	movs	r1, #64	; 0x40
 800bb98:	f000 fab4 	bl	800c104 <UART_WaitOnFlagUntilTimeout>
 800bb9c:	1e03      	subs	r3, r0, #0
 800bb9e:	d001      	beq.n	800bba4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800bba0:	2303      	movs	r3, #3
 800bba2:	e006      	b.n	800bbb2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2284      	movs	r2, #132	; 0x84
 800bba8:	2120      	movs	r1, #32
 800bbaa:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	e000      	b.n	800bbb2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800bbb0:	2302      	movs	r3, #2
  }
}
 800bbb2:	0018      	movs	r0, r3
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	b008      	add	sp, #32
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b088      	sub	sp, #32
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbc4:	231a      	movs	r3, #26
 800bbc6:	18fb      	adds	r3, r7, r3
 800bbc8:	2200      	movs	r2, #0
 800bbca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	689a      	ldr	r2, [r3, #8]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	431a      	orrs	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	69db      	ldr	r3, [r3, #28]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4abd      	ldr	r2, [pc, #756]	; (800bee0 <UART_SetConfig+0x324>)
 800bbec:	4013      	ands	r3, r2
 800bbee:	0019      	movs	r1, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	69fa      	ldr	r2, [r7, #28]
 800bbf6:	430a      	orrs	r2, r1
 800bbf8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	4ab8      	ldr	r2, [pc, #736]	; (800bee4 <UART_SetConfig+0x328>)
 800bc02:	4013      	ands	r3, r2
 800bc04:	0019      	movs	r1, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68da      	ldr	r2, [r3, #12]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	430a      	orrs	r2, r1
 800bc10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	699b      	ldr	r3, [r3, #24]
 800bc16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a1b      	ldr	r3, [r3, #32]
 800bc1c:	69fa      	ldr	r2, [r7, #28]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	4aaf      	ldr	r2, [pc, #700]	; (800bee8 <UART_SetConfig+0x32c>)
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	0019      	movs	r1, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	69fa      	ldr	r2, [r7, #28]
 800bc34:	430a      	orrs	r2, r1
 800bc36:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3e:	220f      	movs	r2, #15
 800bc40:	4393      	bics	r3, r2
 800bc42:	0019      	movs	r1, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	430a      	orrs	r2, r1
 800bc4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4aa5      	ldr	r2, [pc, #660]	; (800beec <UART_SetConfig+0x330>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d127      	bne.n	800bcaa <UART_SetConfig+0xee>
 800bc5a:	4ba5      	ldr	r3, [pc, #660]	; (800bef0 <UART_SetConfig+0x334>)
 800bc5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc5e:	2203      	movs	r2, #3
 800bc60:	4013      	ands	r3, r2
 800bc62:	2b03      	cmp	r3, #3
 800bc64:	d017      	beq.n	800bc96 <UART_SetConfig+0xda>
 800bc66:	d81b      	bhi.n	800bca0 <UART_SetConfig+0xe4>
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d00a      	beq.n	800bc82 <UART_SetConfig+0xc6>
 800bc6c:	d818      	bhi.n	800bca0 <UART_SetConfig+0xe4>
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d002      	beq.n	800bc78 <UART_SetConfig+0xbc>
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d00a      	beq.n	800bc8c <UART_SetConfig+0xd0>
 800bc76:	e013      	b.n	800bca0 <UART_SetConfig+0xe4>
 800bc78:	231b      	movs	r3, #27
 800bc7a:	18fb      	adds	r3, r7, r3
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	701a      	strb	r2, [r3, #0]
 800bc80:	e058      	b.n	800bd34 <UART_SetConfig+0x178>
 800bc82:	231b      	movs	r3, #27
 800bc84:	18fb      	adds	r3, r7, r3
 800bc86:	2202      	movs	r2, #2
 800bc88:	701a      	strb	r2, [r3, #0]
 800bc8a:	e053      	b.n	800bd34 <UART_SetConfig+0x178>
 800bc8c:	231b      	movs	r3, #27
 800bc8e:	18fb      	adds	r3, r7, r3
 800bc90:	2204      	movs	r2, #4
 800bc92:	701a      	strb	r2, [r3, #0]
 800bc94:	e04e      	b.n	800bd34 <UART_SetConfig+0x178>
 800bc96:	231b      	movs	r3, #27
 800bc98:	18fb      	adds	r3, r7, r3
 800bc9a:	2208      	movs	r2, #8
 800bc9c:	701a      	strb	r2, [r3, #0]
 800bc9e:	e049      	b.n	800bd34 <UART_SetConfig+0x178>
 800bca0:	231b      	movs	r3, #27
 800bca2:	18fb      	adds	r3, r7, r3
 800bca4:	2210      	movs	r2, #16
 800bca6:	701a      	strb	r2, [r3, #0]
 800bca8:	e044      	b.n	800bd34 <UART_SetConfig+0x178>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a91      	ldr	r2, [pc, #580]	; (800bef4 <UART_SetConfig+0x338>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d127      	bne.n	800bd04 <UART_SetConfig+0x148>
 800bcb4:	4b8e      	ldr	r3, [pc, #568]	; (800bef0 <UART_SetConfig+0x334>)
 800bcb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb8:	220c      	movs	r2, #12
 800bcba:	4013      	ands	r3, r2
 800bcbc:	2b0c      	cmp	r3, #12
 800bcbe:	d017      	beq.n	800bcf0 <UART_SetConfig+0x134>
 800bcc0:	d81b      	bhi.n	800bcfa <UART_SetConfig+0x13e>
 800bcc2:	2b08      	cmp	r3, #8
 800bcc4:	d00a      	beq.n	800bcdc <UART_SetConfig+0x120>
 800bcc6:	d818      	bhi.n	800bcfa <UART_SetConfig+0x13e>
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <UART_SetConfig+0x116>
 800bccc:	2b04      	cmp	r3, #4
 800bcce:	d00a      	beq.n	800bce6 <UART_SetConfig+0x12a>
 800bcd0:	e013      	b.n	800bcfa <UART_SetConfig+0x13e>
 800bcd2:	231b      	movs	r3, #27
 800bcd4:	18fb      	adds	r3, r7, r3
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	701a      	strb	r2, [r3, #0]
 800bcda:	e02b      	b.n	800bd34 <UART_SetConfig+0x178>
 800bcdc:	231b      	movs	r3, #27
 800bcde:	18fb      	adds	r3, r7, r3
 800bce0:	2202      	movs	r2, #2
 800bce2:	701a      	strb	r2, [r3, #0]
 800bce4:	e026      	b.n	800bd34 <UART_SetConfig+0x178>
 800bce6:	231b      	movs	r3, #27
 800bce8:	18fb      	adds	r3, r7, r3
 800bcea:	2204      	movs	r2, #4
 800bcec:	701a      	strb	r2, [r3, #0]
 800bcee:	e021      	b.n	800bd34 <UART_SetConfig+0x178>
 800bcf0:	231b      	movs	r3, #27
 800bcf2:	18fb      	adds	r3, r7, r3
 800bcf4:	2208      	movs	r2, #8
 800bcf6:	701a      	strb	r2, [r3, #0]
 800bcf8:	e01c      	b.n	800bd34 <UART_SetConfig+0x178>
 800bcfa:	231b      	movs	r3, #27
 800bcfc:	18fb      	adds	r3, r7, r3
 800bcfe:	2210      	movs	r2, #16
 800bd00:	701a      	strb	r2, [r3, #0]
 800bd02:	e017      	b.n	800bd34 <UART_SetConfig+0x178>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a7b      	ldr	r2, [pc, #492]	; (800bef8 <UART_SetConfig+0x33c>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d104      	bne.n	800bd18 <UART_SetConfig+0x15c>
 800bd0e:	231b      	movs	r3, #27
 800bd10:	18fb      	adds	r3, r7, r3
 800bd12:	2200      	movs	r2, #0
 800bd14:	701a      	strb	r2, [r3, #0]
 800bd16:	e00d      	b.n	800bd34 <UART_SetConfig+0x178>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a77      	ldr	r2, [pc, #476]	; (800befc <UART_SetConfig+0x340>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d104      	bne.n	800bd2c <UART_SetConfig+0x170>
 800bd22:	231b      	movs	r3, #27
 800bd24:	18fb      	adds	r3, r7, r3
 800bd26:	2200      	movs	r2, #0
 800bd28:	701a      	strb	r2, [r3, #0]
 800bd2a:	e003      	b.n	800bd34 <UART_SetConfig+0x178>
 800bd2c:	231b      	movs	r3, #27
 800bd2e:	18fb      	adds	r3, r7, r3
 800bd30:	2210      	movs	r2, #16
 800bd32:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	69da      	ldr	r2, [r3, #28]
 800bd38:	2380      	movs	r3, #128	; 0x80
 800bd3a:	021b      	lsls	r3, r3, #8
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d000      	beq.n	800bd42 <UART_SetConfig+0x186>
 800bd40:	e066      	b.n	800be10 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 800bd42:	231b      	movs	r3, #27
 800bd44:	18fb      	adds	r3, r7, r3
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	2b08      	cmp	r3, #8
 800bd4a:	d015      	beq.n	800bd78 <UART_SetConfig+0x1bc>
 800bd4c:	dc18      	bgt.n	800bd80 <UART_SetConfig+0x1c4>
 800bd4e:	2b04      	cmp	r3, #4
 800bd50:	d00d      	beq.n	800bd6e <UART_SetConfig+0x1b2>
 800bd52:	dc15      	bgt.n	800bd80 <UART_SetConfig+0x1c4>
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <UART_SetConfig+0x1a2>
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d005      	beq.n	800bd68 <UART_SetConfig+0x1ac>
 800bd5c:	e010      	b.n	800bd80 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd5e:	f7fe fb73 	bl	800a448 <HAL_RCC_GetPCLK1Freq>
 800bd62:	0003      	movs	r3, r0
 800bd64:	617b      	str	r3, [r7, #20]
        break;
 800bd66:	e012      	b.n	800bd8e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd68:	4b65      	ldr	r3, [pc, #404]	; (800bf00 <UART_SetConfig+0x344>)
 800bd6a:	617b      	str	r3, [r7, #20]
        break;
 800bd6c:	e00f      	b.n	800bd8e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd6e:	f7fe fadf 	bl	800a330 <HAL_RCC_GetSysClockFreq>
 800bd72:	0003      	movs	r3, r0
 800bd74:	617b      	str	r3, [r7, #20]
        break;
 800bd76:	e00a      	b.n	800bd8e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd78:	2380      	movs	r3, #128	; 0x80
 800bd7a:	021b      	lsls	r3, r3, #8
 800bd7c:	617b      	str	r3, [r7, #20]
        break;
 800bd7e:	e006      	b.n	800bd8e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800bd80:	2300      	movs	r3, #0
 800bd82:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bd84:	231a      	movs	r3, #26
 800bd86:	18fb      	adds	r3, r7, r3
 800bd88:	2201      	movs	r2, #1
 800bd8a:	701a      	strb	r2, [r3, #0]
        break;
 800bd8c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d100      	bne.n	800bd96 <UART_SetConfig+0x1da>
 800bd94:	e08e      	b.n	800beb4 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd9a:	4b5a      	ldr	r3, [pc, #360]	; (800bf04 <UART_SetConfig+0x348>)
 800bd9c:	0052      	lsls	r2, r2, #1
 800bd9e:	5ad3      	ldrh	r3, [r2, r3]
 800bda0:	0019      	movs	r1, r3
 800bda2:	6978      	ldr	r0, [r7, #20]
 800bda4:	f7f4 f9c8 	bl	8000138 <__udivsi3>
 800bda8:	0003      	movs	r3, r0
 800bdaa:	005a      	lsls	r2, r3, #1
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	085b      	lsrs	r3, r3, #1
 800bdb2:	18d2      	adds	r2, r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	0019      	movs	r1, r3
 800bdba:	0010      	movs	r0, r2
 800bdbc:	f7f4 f9bc 	bl	8000138 <__udivsi3>
 800bdc0:	0003      	movs	r3, r0
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	2b0f      	cmp	r3, #15
 800bdca:	d91c      	bls.n	800be06 <UART_SetConfig+0x24a>
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	2380      	movs	r3, #128	; 0x80
 800bdd0:	025b      	lsls	r3, r3, #9
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d217      	bcs.n	800be06 <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	200e      	movs	r0, #14
 800bddc:	183b      	adds	r3, r7, r0
 800bdde:	210f      	movs	r1, #15
 800bde0:	438a      	bics	r2, r1
 800bde2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	085b      	lsrs	r3, r3, #1
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	2207      	movs	r2, #7
 800bdec:	4013      	ands	r3, r2
 800bdee:	b299      	uxth	r1, r3
 800bdf0:	183b      	adds	r3, r7, r0
 800bdf2:	183a      	adds	r2, r7, r0
 800bdf4:	8812      	ldrh	r2, [r2, #0]
 800bdf6:	430a      	orrs	r2, r1
 800bdf8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	183a      	adds	r2, r7, r0
 800be00:	8812      	ldrh	r2, [r2, #0]
 800be02:	60da      	str	r2, [r3, #12]
 800be04:	e056      	b.n	800beb4 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 800be06:	231a      	movs	r3, #26
 800be08:	18fb      	adds	r3, r7, r3
 800be0a:	2201      	movs	r2, #1
 800be0c:	701a      	strb	r2, [r3, #0]
 800be0e:	e051      	b.n	800beb4 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be10:	231b      	movs	r3, #27
 800be12:	18fb      	adds	r3, r7, r3
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	2b08      	cmp	r3, #8
 800be18:	d015      	beq.n	800be46 <UART_SetConfig+0x28a>
 800be1a:	dc18      	bgt.n	800be4e <UART_SetConfig+0x292>
 800be1c:	2b04      	cmp	r3, #4
 800be1e:	d00d      	beq.n	800be3c <UART_SetConfig+0x280>
 800be20:	dc15      	bgt.n	800be4e <UART_SetConfig+0x292>
 800be22:	2b00      	cmp	r3, #0
 800be24:	d002      	beq.n	800be2c <UART_SetConfig+0x270>
 800be26:	2b02      	cmp	r3, #2
 800be28:	d005      	beq.n	800be36 <UART_SetConfig+0x27a>
 800be2a:	e010      	b.n	800be4e <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be2c:	f7fe fb0c 	bl	800a448 <HAL_RCC_GetPCLK1Freq>
 800be30:	0003      	movs	r3, r0
 800be32:	617b      	str	r3, [r7, #20]
        break;
 800be34:	e012      	b.n	800be5c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be36:	4b32      	ldr	r3, [pc, #200]	; (800bf00 <UART_SetConfig+0x344>)
 800be38:	617b      	str	r3, [r7, #20]
        break;
 800be3a:	e00f      	b.n	800be5c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be3c:	f7fe fa78 	bl	800a330 <HAL_RCC_GetSysClockFreq>
 800be40:	0003      	movs	r3, r0
 800be42:	617b      	str	r3, [r7, #20]
        break;
 800be44:	e00a      	b.n	800be5c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be46:	2380      	movs	r3, #128	; 0x80
 800be48:	021b      	lsls	r3, r3, #8
 800be4a:	617b      	str	r3, [r7, #20]
        break;
 800be4c:	e006      	b.n	800be5c <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 800be4e:	2300      	movs	r3, #0
 800be50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800be52:	231a      	movs	r3, #26
 800be54:	18fb      	adds	r3, r7, r3
 800be56:	2201      	movs	r2, #1
 800be58:	701a      	strb	r2, [r3, #0]
        break;
 800be5a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d028      	beq.n	800beb4 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be66:	4b27      	ldr	r3, [pc, #156]	; (800bf04 <UART_SetConfig+0x348>)
 800be68:	0052      	lsls	r2, r2, #1
 800be6a:	5ad3      	ldrh	r3, [r2, r3]
 800be6c:	0019      	movs	r1, r3
 800be6e:	6978      	ldr	r0, [r7, #20]
 800be70:	f7f4 f962 	bl	8000138 <__udivsi3>
 800be74:	0003      	movs	r3, r0
 800be76:	001a      	movs	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	085b      	lsrs	r3, r3, #1
 800be7e:	18d2      	adds	r2, r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	0019      	movs	r1, r3
 800be86:	0010      	movs	r0, r2
 800be88:	f7f4 f956 	bl	8000138 <__udivsi3>
 800be8c:	0003      	movs	r3, r0
 800be8e:	b29b      	uxth	r3, r3
 800be90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2b0f      	cmp	r3, #15
 800be96:	d909      	bls.n	800beac <UART_SetConfig+0x2f0>
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	2380      	movs	r3, #128	; 0x80
 800be9c:	025b      	lsls	r3, r3, #9
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d204      	bcs.n	800beac <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	60da      	str	r2, [r3, #12]
 800beaa:	e003      	b.n	800beb4 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 800beac:	231a      	movs	r3, #26
 800beae:	18fb      	adds	r3, r7, r3
 800beb0:	2201      	movs	r2, #1
 800beb2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	226a      	movs	r2, #106	; 0x6a
 800beb8:	2101      	movs	r1, #1
 800beba:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2268      	movs	r2, #104	; 0x68
 800bec0:	2101      	movs	r1, #1
 800bec2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bed0:	231a      	movs	r3, #26
 800bed2:	18fb      	adds	r3, r7, r3
 800bed4:	781b      	ldrb	r3, [r3, #0]
}
 800bed6:	0018      	movs	r0, r3
 800bed8:	46bd      	mov	sp, r7
 800beda:	b008      	add	sp, #32
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	46c0      	nop			; (mov r8, r8)
 800bee0:	cfff69f3 	.word	0xcfff69f3
 800bee4:	ffffcfff 	.word	0xffffcfff
 800bee8:	11fff4ff 	.word	0x11fff4ff
 800beec:	40013800 	.word	0x40013800
 800bef0:	40021000 	.word	0x40021000
 800bef4:	40004400 	.word	0x40004400
 800bef8:	40004800 	.word	0x40004800
 800befc:	40004c00 	.word	0x40004c00
 800bf00:	00f42400 	.word	0x00f42400
 800bf04:	08012024 	.word	0x08012024

0800bf08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf14:	2201      	movs	r2, #1
 800bf16:	4013      	ands	r3, r2
 800bf18:	d00b      	beq.n	800bf32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	4a4a      	ldr	r2, [pc, #296]	; (800c04c <UART_AdvFeatureConfig+0x144>)
 800bf22:	4013      	ands	r3, r2
 800bf24:	0019      	movs	r1, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	430a      	orrs	r2, r1
 800bf30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf36:	2202      	movs	r2, #2
 800bf38:	4013      	ands	r3, r2
 800bf3a:	d00b      	beq.n	800bf54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	4a43      	ldr	r2, [pc, #268]	; (800c050 <UART_AdvFeatureConfig+0x148>)
 800bf44:	4013      	ands	r3, r2
 800bf46:	0019      	movs	r1, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	430a      	orrs	r2, r1
 800bf52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf58:	2204      	movs	r2, #4
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	d00b      	beq.n	800bf76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	4a3b      	ldr	r2, [pc, #236]	; (800c054 <UART_AdvFeatureConfig+0x14c>)
 800bf66:	4013      	ands	r3, r2
 800bf68:	0019      	movs	r1, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	430a      	orrs	r2, r1
 800bf74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	d00b      	beq.n	800bf98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	4a34      	ldr	r2, [pc, #208]	; (800c058 <UART_AdvFeatureConfig+0x150>)
 800bf88:	4013      	ands	r3, r2
 800bf8a:	0019      	movs	r1, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	430a      	orrs	r2, r1
 800bf96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf9c:	2210      	movs	r2, #16
 800bf9e:	4013      	ands	r3, r2
 800bfa0:	d00b      	beq.n	800bfba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	4a2c      	ldr	r2, [pc, #176]	; (800c05c <UART_AdvFeatureConfig+0x154>)
 800bfaa:	4013      	ands	r3, r2
 800bfac:	0019      	movs	r1, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	430a      	orrs	r2, r1
 800bfb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfbe:	2220      	movs	r2, #32
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	d00b      	beq.n	800bfdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	4a25      	ldr	r2, [pc, #148]	; (800c060 <UART_AdvFeatureConfig+0x158>)
 800bfcc:	4013      	ands	r3, r2
 800bfce:	0019      	movs	r1, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	430a      	orrs	r2, r1
 800bfda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe0:	2240      	movs	r2, #64	; 0x40
 800bfe2:	4013      	ands	r3, r2
 800bfe4:	d01d      	beq.n	800c022 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	4a1d      	ldr	r2, [pc, #116]	; (800c064 <UART_AdvFeatureConfig+0x15c>)
 800bfee:	4013      	ands	r3, r2
 800bff0:	0019      	movs	r1, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	430a      	orrs	r2, r1
 800bffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c002:	2380      	movs	r3, #128	; 0x80
 800c004:	035b      	lsls	r3, r3, #13
 800c006:	429a      	cmp	r2, r3
 800c008:	d10b      	bne.n	800c022 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	4a15      	ldr	r2, [pc, #84]	; (800c068 <UART_AdvFeatureConfig+0x160>)
 800c012:	4013      	ands	r3, r2
 800c014:	0019      	movs	r1, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c026:	2280      	movs	r2, #128	; 0x80
 800c028:	4013      	ands	r3, r2
 800c02a:	d00b      	beq.n	800c044 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	4a0e      	ldr	r2, [pc, #56]	; (800c06c <UART_AdvFeatureConfig+0x164>)
 800c034:	4013      	ands	r3, r2
 800c036:	0019      	movs	r1, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	430a      	orrs	r2, r1
 800c042:	605a      	str	r2, [r3, #4]
  }
}
 800c044:	46c0      	nop			; (mov r8, r8)
 800c046:	46bd      	mov	sp, r7
 800c048:	b002      	add	sp, #8
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	fffdffff 	.word	0xfffdffff
 800c050:	fffeffff 	.word	0xfffeffff
 800c054:	fffbffff 	.word	0xfffbffff
 800c058:	ffff7fff 	.word	0xffff7fff
 800c05c:	ffffefff 	.word	0xffffefff
 800c060:	ffffdfff 	.word	0xffffdfff
 800c064:	ffefffff 	.word	0xffefffff
 800c068:	ff9fffff 	.word	0xff9fffff
 800c06c:	fff7ffff 	.word	0xfff7ffff

0800c070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b086      	sub	sp, #24
 800c074:	af02      	add	r7, sp, #8
 800c076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	228c      	movs	r2, #140	; 0x8c
 800c07c:	2100      	movs	r1, #0
 800c07e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c080:	f7fd f944 	bl	800930c <HAL_GetTick>
 800c084:	0003      	movs	r3, r0
 800c086:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2208      	movs	r2, #8
 800c090:	4013      	ands	r3, r2
 800c092:	2b08      	cmp	r3, #8
 800c094:	d10c      	bne.n	800c0b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2280      	movs	r2, #128	; 0x80
 800c09a:	0391      	lsls	r1, r2, #14
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	4a18      	ldr	r2, [pc, #96]	; (800c100 <UART_CheckIdleState+0x90>)
 800c0a0:	9200      	str	r2, [sp, #0]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f000 f82e 	bl	800c104 <UART_WaitOnFlagUntilTimeout>
 800c0a8:	1e03      	subs	r3, r0, #0
 800c0aa:	d001      	beq.n	800c0b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	e023      	b.n	800c0f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2204      	movs	r2, #4
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	2b04      	cmp	r3, #4
 800c0bc:	d10c      	bne.n	800c0d8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2280      	movs	r2, #128	; 0x80
 800c0c2:	03d1      	lsls	r1, r2, #15
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	4a0e      	ldr	r2, [pc, #56]	; (800c100 <UART_CheckIdleState+0x90>)
 800c0c8:	9200      	str	r2, [sp, #0]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f000 f81a 	bl	800c104 <UART_WaitOnFlagUntilTimeout>
 800c0d0:	1e03      	subs	r3, r0, #0
 800c0d2:	d001      	beq.n	800c0d8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	e00f      	b.n	800c0f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2284      	movs	r2, #132	; 0x84
 800c0dc:	2120      	movs	r1, #32
 800c0de:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2288      	movs	r2, #136	; 0x88
 800c0e4:	2120      	movs	r1, #32
 800c0e6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2280      	movs	r2, #128	; 0x80
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	0018      	movs	r0, r3
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	b004      	add	sp, #16
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	01ffffff 	.word	0x01ffffff

0800c104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b094      	sub	sp, #80	; 0x50
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	603b      	str	r3, [r7, #0]
 800c110:	1dfb      	adds	r3, r7, #7
 800c112:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c114:	e0a7      	b.n	800c266 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c118:	3301      	adds	r3, #1
 800c11a:	d100      	bne.n	800c11e <UART_WaitOnFlagUntilTimeout+0x1a>
 800c11c:	e0a3      	b.n	800c266 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c11e:	f7fd f8f5 	bl	800930c <HAL_GetTick>
 800c122:	0002      	movs	r2, r0
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d302      	bcc.n	800c134 <UART_WaitOnFlagUntilTimeout+0x30>
 800c12e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c130:	2b00      	cmp	r3, #0
 800c132:	d13f      	bne.n	800c1b4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c134:	f3ef 8310 	mrs	r3, PRIMASK
 800c138:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c13c:	647b      	str	r3, [r7, #68]	; 0x44
 800c13e:	2301      	movs	r3, #1
 800c140:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c144:	f383 8810 	msr	PRIMASK, r3
}
 800c148:	46c0      	nop			; (mov r8, r8)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	494e      	ldr	r1, [pc, #312]	; (800c290 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800c156:	400a      	ands	r2, r1
 800c158:	601a      	str	r2, [r3, #0]
 800c15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c15c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c160:	f383 8810 	msr	PRIMASK, r3
}
 800c164:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c166:	f3ef 8310 	mrs	r3, PRIMASK
 800c16a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800c16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c16e:	643b      	str	r3, [r7, #64]	; 0x40
 800c170:	2301      	movs	r3, #1
 800c172:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c176:	f383 8810 	msr	PRIMASK, r3
}
 800c17a:	46c0      	nop			; (mov r8, r8)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	689a      	ldr	r2, [r3, #8]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2101      	movs	r1, #1
 800c188:	438a      	bics	r2, r1
 800c18a:	609a      	str	r2, [r3, #8]
 800c18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c192:	f383 8810 	msr	PRIMASK, r3
}
 800c196:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2284      	movs	r2, #132	; 0x84
 800c19c:	2120      	movs	r1, #32
 800c19e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2288      	movs	r2, #136	; 0x88
 800c1a4:	2120      	movs	r1, #32
 800c1a6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2280      	movs	r2, #128	; 0x80
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	e069      	b.n	800c288 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2204      	movs	r2, #4
 800c1bc:	4013      	ands	r3, r2
 800c1be:	d052      	beq.n	800c266 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	69da      	ldr	r2, [r3, #28]
 800c1c6:	2380      	movs	r3, #128	; 0x80
 800c1c8:	011b      	lsls	r3, r3, #4
 800c1ca:	401a      	ands	r2, r3
 800c1cc:	2380      	movs	r3, #128	; 0x80
 800c1ce:	011b      	lsls	r3, r3, #4
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d148      	bne.n	800c266 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2280      	movs	r2, #128	; 0x80
 800c1da:	0112      	lsls	r2, r2, #4
 800c1dc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1de:	f3ef 8310 	mrs	r3, PRIMASK
 800c1e2:	613b      	str	r3, [r7, #16]
  return(result);
 800c1e4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c1e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	f383 8810 	msr	PRIMASK, r3
}
 800c1f2:	46c0      	nop			; (mov r8, r8)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4924      	ldr	r1, [pc, #144]	; (800c290 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800c200:	400a      	ands	r2, r1
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c206:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	f383 8810 	msr	PRIMASK, r3
}
 800c20e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c210:	f3ef 8310 	mrs	r3, PRIMASK
 800c214:	61fb      	str	r3, [r7, #28]
  return(result);
 800c216:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c218:	64bb      	str	r3, [r7, #72]	; 0x48
 800c21a:	2301      	movs	r3, #1
 800c21c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c21e:	6a3b      	ldr	r3, [r7, #32]
 800c220:	f383 8810 	msr	PRIMASK, r3
}
 800c224:	46c0      	nop			; (mov r8, r8)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	689a      	ldr	r2, [r3, #8]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2101      	movs	r1, #1
 800c232:	438a      	bics	r2, r1
 800c234:	609a      	str	r2, [r3, #8]
 800c236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c238:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23c:	f383 8810 	msr	PRIMASK, r3
}
 800c240:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2284      	movs	r2, #132	; 0x84
 800c246:	2120      	movs	r1, #32
 800c248:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2288      	movs	r2, #136	; 0x88
 800c24e:	2120      	movs	r1, #32
 800c250:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	228c      	movs	r2, #140	; 0x8c
 800c256:	2120      	movs	r1, #32
 800c258:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2280      	movs	r2, #128	; 0x80
 800c25e:	2100      	movs	r1, #0
 800c260:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c262:	2303      	movs	r3, #3
 800c264:	e010      	b.n	800c288 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	69db      	ldr	r3, [r3, #28]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	4013      	ands	r3, r2
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	1ad3      	subs	r3, r2, r3
 800c274:	425a      	negs	r2, r3
 800c276:	4153      	adcs	r3, r2
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	001a      	movs	r2, r3
 800c27c:	1dfb      	adds	r3, r7, #7
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	429a      	cmp	r2, r3
 800c282:	d100      	bne.n	800c286 <UART_WaitOnFlagUntilTimeout+0x182>
 800c284:	e747      	b.n	800c116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	0018      	movs	r0, r3
 800c28a:	46bd      	mov	sp, r7
 800c28c:	b014      	add	sp, #80	; 0x50
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	fffffe5f 	.word	0xfffffe5f

0800c294 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2280      	movs	r2, #128	; 0x80
 800c2a0:	5c9b      	ldrb	r3, [r3, r2]
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d101      	bne.n	800c2aa <HAL_UARTEx_DisableFifoMode+0x16>
 800c2a6:	2302      	movs	r3, #2
 800c2a8:	e027      	b.n	800c2fa <HAL_UARTEx_DisableFifoMode+0x66>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2280      	movs	r2, #128	; 0x80
 800c2ae:	2101      	movs	r1, #1
 800c2b0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2284      	movs	r2, #132	; 0x84
 800c2b6:	2124      	movs	r1, #36	; 0x24
 800c2b8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2101      	movs	r1, #1
 800c2ce:	438a      	bics	r2, r1
 800c2d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	4a0b      	ldr	r2, [pc, #44]	; (800c304 <HAL_UARTEx_DisableFifoMode+0x70>)
 800c2d6:	4013      	ands	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2284      	movs	r2, #132	; 0x84
 800c2ec:	2120      	movs	r1, #32
 800c2ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2280      	movs	r2, #128	; 0x80
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	b004      	add	sp, #16
 800c300:	bd80      	pop	{r7, pc}
 800c302:	46c0      	nop			; (mov r8, r8)
 800c304:	dfffffff 	.word	0xdfffffff

0800c308 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2280      	movs	r2, #128	; 0x80
 800c316:	5c9b      	ldrb	r3, [r3, r2]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d101      	bne.n	800c320 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c31c:	2302      	movs	r3, #2
 800c31e:	e02e      	b.n	800c37e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2280      	movs	r2, #128	; 0x80
 800c324:	2101      	movs	r1, #1
 800c326:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2284      	movs	r2, #132	; 0x84
 800c32c:	2124      	movs	r1, #36	; 0x24
 800c32e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2101      	movs	r1, #1
 800c344:	438a      	bics	r2, r1
 800c346:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	08d9      	lsrs	r1, r3, #3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	683a      	ldr	r2, [r7, #0]
 800c358:	430a      	orrs	r2, r1
 800c35a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	0018      	movs	r0, r3
 800c360:	f000 f854 	bl	800c40c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2284      	movs	r2, #132	; 0x84
 800c370:	2120      	movs	r1, #32
 800c372:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2280      	movs	r2, #128	; 0x80
 800c378:	2100      	movs	r1, #0
 800c37a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	0018      	movs	r0, r3
 800c380:	46bd      	mov	sp, r7
 800c382:	b004      	add	sp, #16
 800c384:	bd80      	pop	{r7, pc}
	...

0800c388 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2280      	movs	r2, #128	; 0x80
 800c396:	5c9b      	ldrb	r3, [r3, r2]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d101      	bne.n	800c3a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c39c:	2302      	movs	r3, #2
 800c39e:	e02f      	b.n	800c400 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2280      	movs	r2, #128	; 0x80
 800c3a4:	2101      	movs	r1, #1
 800c3a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2284      	movs	r2, #132	; 0x84
 800c3ac:	2124      	movs	r1, #36	; 0x24
 800c3ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	438a      	bics	r2, r1
 800c3c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	4a0e      	ldr	r2, [pc, #56]	; (800c408 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	0019      	movs	r1, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	430a      	orrs	r2, r1
 800c3dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	0018      	movs	r0, r3
 800c3e2:	f000 f813 	bl	800c40c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68fa      	ldr	r2, [r7, #12]
 800c3ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2284      	movs	r2, #132	; 0x84
 800c3f2:	2120      	movs	r1, #32
 800c3f4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2280      	movs	r2, #128	; 0x80
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	0018      	movs	r0, r3
 800c402:	46bd      	mov	sp, r7
 800c404:	b004      	add	sp, #16
 800c406:	bd80      	pop	{r7, pc}
 800c408:	f1ffffff 	.word	0xf1ffffff

0800c40c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d108      	bne.n	800c42e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	226a      	movs	r2, #106	; 0x6a
 800c420:	2101      	movs	r1, #1
 800c422:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2268      	movs	r2, #104	; 0x68
 800c428:	2101      	movs	r1, #1
 800c42a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c42c:	e043      	b.n	800c4b6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c42e:	260f      	movs	r6, #15
 800c430:	19bb      	adds	r3, r7, r6
 800c432:	2208      	movs	r2, #8
 800c434:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c436:	200e      	movs	r0, #14
 800c438:	183b      	adds	r3, r7, r0
 800c43a:	2208      	movs	r2, #8
 800c43c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	0e5b      	lsrs	r3, r3, #25
 800c446:	b2da      	uxtb	r2, r3
 800c448:	240d      	movs	r4, #13
 800c44a:	193b      	adds	r3, r7, r4
 800c44c:	2107      	movs	r1, #7
 800c44e:	400a      	ands	r2, r1
 800c450:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	0f5b      	lsrs	r3, r3, #29
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	250c      	movs	r5, #12
 800c45e:	197b      	adds	r3, r7, r5
 800c460:	2107      	movs	r1, #7
 800c462:	400a      	ands	r2, r1
 800c464:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c466:	183b      	adds	r3, r7, r0
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	197a      	adds	r2, r7, r5
 800c46c:	7812      	ldrb	r2, [r2, #0]
 800c46e:	4914      	ldr	r1, [pc, #80]	; (800c4c0 <UARTEx_SetNbDataToProcess+0xb4>)
 800c470:	5c8a      	ldrb	r2, [r1, r2]
 800c472:	435a      	muls	r2, r3
 800c474:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800c476:	197b      	adds	r3, r7, r5
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	4a12      	ldr	r2, [pc, #72]	; (800c4c4 <UARTEx_SetNbDataToProcess+0xb8>)
 800c47c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c47e:	0019      	movs	r1, r3
 800c480:	f7f3 fee4 	bl	800024c <__divsi3>
 800c484:	0003      	movs	r3, r0
 800c486:	b299      	uxth	r1, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	226a      	movs	r2, #106	; 0x6a
 800c48c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c48e:	19bb      	adds	r3, r7, r6
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	193a      	adds	r2, r7, r4
 800c494:	7812      	ldrb	r2, [r2, #0]
 800c496:	490a      	ldr	r1, [pc, #40]	; (800c4c0 <UARTEx_SetNbDataToProcess+0xb4>)
 800c498:	5c8a      	ldrb	r2, [r1, r2]
 800c49a:	435a      	muls	r2, r3
 800c49c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800c49e:	193b      	adds	r3, r7, r4
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	4a08      	ldr	r2, [pc, #32]	; (800c4c4 <UARTEx_SetNbDataToProcess+0xb8>)
 800c4a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4a6:	0019      	movs	r1, r3
 800c4a8:	f7f3 fed0 	bl	800024c <__divsi3>
 800c4ac:	0003      	movs	r3, r0
 800c4ae:	b299      	uxth	r1, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2268      	movs	r2, #104	; 0x68
 800c4b4:	5299      	strh	r1, [r3, r2]
}
 800c4b6:	46c0      	nop			; (mov r8, r8)
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	b005      	add	sp, #20
 800c4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4be:	46c0      	nop			; (mov r8, r8)
 800c4c0:	0801203c 	.word	0x0801203c
 800c4c4:	08012044 	.word	0x08012044

0800c4c8 <__errno>:
 800c4c8:	4b01      	ldr	r3, [pc, #4]	; (800c4d0 <__errno+0x8>)
 800c4ca:	6818      	ldr	r0, [r3, #0]
 800c4cc:	4770      	bx	lr
 800c4ce:	46c0      	nop			; (mov r8, r8)
 800c4d0:	20000010 	.word	0x20000010

0800c4d4 <__libc_init_array>:
 800c4d4:	b570      	push	{r4, r5, r6, lr}
 800c4d6:	2600      	movs	r6, #0
 800c4d8:	4d0c      	ldr	r5, [pc, #48]	; (800c50c <__libc_init_array+0x38>)
 800c4da:	4c0d      	ldr	r4, [pc, #52]	; (800c510 <__libc_init_array+0x3c>)
 800c4dc:	1b64      	subs	r4, r4, r5
 800c4de:	10a4      	asrs	r4, r4, #2
 800c4e0:	42a6      	cmp	r6, r4
 800c4e2:	d109      	bne.n	800c4f8 <__libc_init_array+0x24>
 800c4e4:	2600      	movs	r6, #0
 800c4e6:	f005 fb2f 	bl	8011b48 <_init>
 800c4ea:	4d0a      	ldr	r5, [pc, #40]	; (800c514 <__libc_init_array+0x40>)
 800c4ec:	4c0a      	ldr	r4, [pc, #40]	; (800c518 <__libc_init_array+0x44>)
 800c4ee:	1b64      	subs	r4, r4, r5
 800c4f0:	10a4      	asrs	r4, r4, #2
 800c4f2:	42a6      	cmp	r6, r4
 800c4f4:	d105      	bne.n	800c502 <__libc_init_array+0x2e>
 800c4f6:	bd70      	pop	{r4, r5, r6, pc}
 800c4f8:	00b3      	lsls	r3, r6, #2
 800c4fa:	58eb      	ldr	r3, [r5, r3]
 800c4fc:	4798      	blx	r3
 800c4fe:	3601      	adds	r6, #1
 800c500:	e7ee      	b.n	800c4e0 <__libc_init_array+0xc>
 800c502:	00b3      	lsls	r3, r6, #2
 800c504:	58eb      	ldr	r3, [r5, r3]
 800c506:	4798      	blx	r3
 800c508:	3601      	adds	r6, #1
 800c50a:	e7f2      	b.n	800c4f2 <__libc_init_array+0x1e>
 800c50c:	080126b8 	.word	0x080126b8
 800c510:	080126b8 	.word	0x080126b8
 800c514:	080126b8 	.word	0x080126b8
 800c518:	080126bc 	.word	0x080126bc

0800c51c <memcpy>:
 800c51c:	2300      	movs	r3, #0
 800c51e:	b510      	push	{r4, lr}
 800c520:	429a      	cmp	r2, r3
 800c522:	d100      	bne.n	800c526 <memcpy+0xa>
 800c524:	bd10      	pop	{r4, pc}
 800c526:	5ccc      	ldrb	r4, [r1, r3]
 800c528:	54c4      	strb	r4, [r0, r3]
 800c52a:	3301      	adds	r3, #1
 800c52c:	e7f8      	b.n	800c520 <memcpy+0x4>

0800c52e <memset>:
 800c52e:	0003      	movs	r3, r0
 800c530:	1882      	adds	r2, r0, r2
 800c532:	4293      	cmp	r3, r2
 800c534:	d100      	bne.n	800c538 <memset+0xa>
 800c536:	4770      	bx	lr
 800c538:	7019      	strb	r1, [r3, #0]
 800c53a:	3301      	adds	r3, #1
 800c53c:	e7f9      	b.n	800c532 <memset+0x4>

0800c53e <__cvt>:
 800c53e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c540:	001e      	movs	r6, r3
 800c542:	2300      	movs	r3, #0
 800c544:	0014      	movs	r4, r2
 800c546:	b08b      	sub	sp, #44	; 0x2c
 800c548:	429e      	cmp	r6, r3
 800c54a:	da04      	bge.n	800c556 <__cvt+0x18>
 800c54c:	2180      	movs	r1, #128	; 0x80
 800c54e:	0609      	lsls	r1, r1, #24
 800c550:	1873      	adds	r3, r6, r1
 800c552:	001e      	movs	r6, r3
 800c554:	232d      	movs	r3, #45	; 0x2d
 800c556:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c558:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c55a:	7013      	strb	r3, [r2, #0]
 800c55c:	2320      	movs	r3, #32
 800c55e:	2203      	movs	r2, #3
 800c560:	439f      	bics	r7, r3
 800c562:	2f46      	cmp	r7, #70	; 0x46
 800c564:	d007      	beq.n	800c576 <__cvt+0x38>
 800c566:	003b      	movs	r3, r7
 800c568:	3b45      	subs	r3, #69	; 0x45
 800c56a:	4259      	negs	r1, r3
 800c56c:	414b      	adcs	r3, r1
 800c56e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c570:	3a01      	subs	r2, #1
 800c572:	18cb      	adds	r3, r1, r3
 800c574:	9310      	str	r3, [sp, #64]	; 0x40
 800c576:	ab09      	add	r3, sp, #36	; 0x24
 800c578:	9304      	str	r3, [sp, #16]
 800c57a:	ab08      	add	r3, sp, #32
 800c57c:	9303      	str	r3, [sp, #12]
 800c57e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c580:	9200      	str	r2, [sp, #0]
 800c582:	9302      	str	r3, [sp, #8]
 800c584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c586:	0022      	movs	r2, r4
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	0033      	movs	r3, r6
 800c58c:	f000 fcfe 	bl	800cf8c <_dtoa_r>
 800c590:	0005      	movs	r5, r0
 800c592:	2f47      	cmp	r7, #71	; 0x47
 800c594:	d102      	bne.n	800c59c <__cvt+0x5e>
 800c596:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c598:	07db      	lsls	r3, r3, #31
 800c59a:	d528      	bpl.n	800c5ee <__cvt+0xb0>
 800c59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c59e:	18eb      	adds	r3, r5, r3
 800c5a0:	9307      	str	r3, [sp, #28]
 800c5a2:	2f46      	cmp	r7, #70	; 0x46
 800c5a4:	d114      	bne.n	800c5d0 <__cvt+0x92>
 800c5a6:	782b      	ldrb	r3, [r5, #0]
 800c5a8:	2b30      	cmp	r3, #48	; 0x30
 800c5aa:	d10c      	bne.n	800c5c6 <__cvt+0x88>
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	0020      	movs	r0, r4
 800c5b2:	0031      	movs	r1, r6
 800c5b4:	f7f3 ff46 	bl	8000444 <__aeabi_dcmpeq>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d104      	bne.n	800c5c6 <__cvt+0x88>
 800c5bc:	2301      	movs	r3, #1
 800c5be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c5c0:	1a9b      	subs	r3, r3, r2
 800c5c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c5c4:	6013      	str	r3, [r2, #0]
 800c5c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c5c8:	9a07      	ldr	r2, [sp, #28]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	18d3      	adds	r3, r2, r3
 800c5ce:	9307      	str	r3, [sp, #28]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	0020      	movs	r0, r4
 800c5d6:	0031      	movs	r1, r6
 800c5d8:	f7f3 ff34 	bl	8000444 <__aeabi_dcmpeq>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	d001      	beq.n	800c5e4 <__cvt+0xa6>
 800c5e0:	9b07      	ldr	r3, [sp, #28]
 800c5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e4:	2230      	movs	r2, #48	; 0x30
 800c5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e8:	9907      	ldr	r1, [sp, #28]
 800c5ea:	428b      	cmp	r3, r1
 800c5ec:	d306      	bcc.n	800c5fc <__cvt+0xbe>
 800c5ee:	0028      	movs	r0, r5
 800c5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c5f4:	1b5b      	subs	r3, r3, r5
 800c5f6:	6013      	str	r3, [r2, #0]
 800c5f8:	b00b      	add	sp, #44	; 0x2c
 800c5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5fc:	1c59      	adds	r1, r3, #1
 800c5fe:	9109      	str	r1, [sp, #36]	; 0x24
 800c600:	701a      	strb	r2, [r3, #0]
 800c602:	e7f0      	b.n	800c5e6 <__cvt+0xa8>

0800c604 <__exponent>:
 800c604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c606:	1c83      	adds	r3, r0, #2
 800c608:	b087      	sub	sp, #28
 800c60a:	9303      	str	r3, [sp, #12]
 800c60c:	0005      	movs	r5, r0
 800c60e:	000c      	movs	r4, r1
 800c610:	232b      	movs	r3, #43	; 0x2b
 800c612:	7002      	strb	r2, [r0, #0]
 800c614:	2900      	cmp	r1, #0
 800c616:	da01      	bge.n	800c61c <__exponent+0x18>
 800c618:	424c      	negs	r4, r1
 800c61a:	3302      	adds	r3, #2
 800c61c:	706b      	strb	r3, [r5, #1]
 800c61e:	2c09      	cmp	r4, #9
 800c620:	dd31      	ble.n	800c686 <__exponent+0x82>
 800c622:	270a      	movs	r7, #10
 800c624:	ab04      	add	r3, sp, #16
 800c626:	1dde      	adds	r6, r3, #7
 800c628:	0020      	movs	r0, r4
 800c62a:	0039      	movs	r1, r7
 800c62c:	9601      	str	r6, [sp, #4]
 800c62e:	f7f3 fef3 	bl	8000418 <__aeabi_idivmod>
 800c632:	3e01      	subs	r6, #1
 800c634:	3130      	adds	r1, #48	; 0x30
 800c636:	0020      	movs	r0, r4
 800c638:	7031      	strb	r1, [r6, #0]
 800c63a:	0039      	movs	r1, r7
 800c63c:	9402      	str	r4, [sp, #8]
 800c63e:	f7f3 fe05 	bl	800024c <__divsi3>
 800c642:	9b02      	ldr	r3, [sp, #8]
 800c644:	0004      	movs	r4, r0
 800c646:	2b63      	cmp	r3, #99	; 0x63
 800c648:	dcee      	bgt.n	800c628 <__exponent+0x24>
 800c64a:	9b01      	ldr	r3, [sp, #4]
 800c64c:	3430      	adds	r4, #48	; 0x30
 800c64e:	1e9a      	subs	r2, r3, #2
 800c650:	0013      	movs	r3, r2
 800c652:	9903      	ldr	r1, [sp, #12]
 800c654:	7014      	strb	r4, [r2, #0]
 800c656:	a804      	add	r0, sp, #16
 800c658:	3007      	adds	r0, #7
 800c65a:	4298      	cmp	r0, r3
 800c65c:	d80e      	bhi.n	800c67c <__exponent+0x78>
 800c65e:	ab04      	add	r3, sp, #16
 800c660:	3307      	adds	r3, #7
 800c662:	2000      	movs	r0, #0
 800c664:	429a      	cmp	r2, r3
 800c666:	d804      	bhi.n	800c672 <__exponent+0x6e>
 800c668:	ab04      	add	r3, sp, #16
 800c66a:	3009      	adds	r0, #9
 800c66c:	18c0      	adds	r0, r0, r3
 800c66e:	9b01      	ldr	r3, [sp, #4]
 800c670:	1ac0      	subs	r0, r0, r3
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	1818      	adds	r0, r3, r0
 800c676:	1b40      	subs	r0, r0, r5
 800c678:	b007      	add	sp, #28
 800c67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c67c:	7818      	ldrb	r0, [r3, #0]
 800c67e:	3301      	adds	r3, #1
 800c680:	7008      	strb	r0, [r1, #0]
 800c682:	3101      	adds	r1, #1
 800c684:	e7e7      	b.n	800c656 <__exponent+0x52>
 800c686:	2330      	movs	r3, #48	; 0x30
 800c688:	18e4      	adds	r4, r4, r3
 800c68a:	70ab      	strb	r3, [r5, #2]
 800c68c:	1d28      	adds	r0, r5, #4
 800c68e:	70ec      	strb	r4, [r5, #3]
 800c690:	e7f1      	b.n	800c676 <__exponent+0x72>
	...

0800c694 <_printf_float>:
 800c694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c696:	b095      	sub	sp, #84	; 0x54
 800c698:	000c      	movs	r4, r1
 800c69a:	9208      	str	r2, [sp, #32]
 800c69c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c69e:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a0:	0007      	movs	r7, r0
 800c6a2:	f001 fa91 	bl	800dbc8 <_localeconv_r>
 800c6a6:	6803      	ldr	r3, [r0, #0]
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6ac:	f7f3 fd28 	bl	8000100 <strlen>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	9312      	str	r3, [sp, #72]	; 0x48
 800c6b4:	7e23      	ldrb	r3, [r4, #24]
 800c6b6:	2207      	movs	r2, #7
 800c6b8:	001e      	movs	r6, r3
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	900d      	str	r0, [sp, #52]	; 0x34
 800c6be:	930c      	str	r3, [sp, #48]	; 0x30
 800c6c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c6c2:	682b      	ldr	r3, [r5, #0]
 800c6c4:	05c9      	lsls	r1, r1, #23
 800c6c6:	d547      	bpl.n	800c758 <_printf_float+0xc4>
 800c6c8:	189b      	adds	r3, r3, r2
 800c6ca:	4393      	bics	r3, r2
 800c6cc:	001a      	movs	r2, r3
 800c6ce:	3208      	adds	r2, #8
 800c6d0:	602a      	str	r2, [r5, #0]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	64a2      	str	r2, [r4, #72]	; 0x48
 800c6d8:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c6da:	2201      	movs	r2, #1
 800c6dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c6de:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800c6e0:	930a      	str	r3, [sp, #40]	; 0x28
 800c6e2:	006b      	lsls	r3, r5, #1
 800c6e4:	085b      	lsrs	r3, r3, #1
 800c6e6:	930e      	str	r3, [sp, #56]	; 0x38
 800c6e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c6ea:	4ba8      	ldr	r3, [pc, #672]	; (800c98c <_printf_float+0x2f8>)
 800c6ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c6ee:	4252      	negs	r2, r2
 800c6f0:	f7f6 fb44 	bl	8002d7c <__aeabi_dcmpun>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d131      	bne.n	800c75c <_printf_float+0xc8>
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	4ba4      	ldr	r3, [pc, #656]	; (800c98c <_printf_float+0x2f8>)
 800c6fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c6fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c700:	4252      	negs	r2, r2
 800c702:	f7f3 feaf 	bl	8000464 <__aeabi_dcmple>
 800c706:	2800      	cmp	r0, #0
 800c708:	d128      	bne.n	800c75c <_printf_float+0xc8>
 800c70a:	2200      	movs	r2, #0
 800c70c:	2300      	movs	r3, #0
 800c70e:	0029      	movs	r1, r5
 800c710:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c712:	f7f3 fe9d 	bl	8000450 <__aeabi_dcmplt>
 800c716:	2800      	cmp	r0, #0
 800c718:	d003      	beq.n	800c722 <_printf_float+0x8e>
 800c71a:	0023      	movs	r3, r4
 800c71c:	222d      	movs	r2, #45	; 0x2d
 800c71e:	3343      	adds	r3, #67	; 0x43
 800c720:	701a      	strb	r2, [r3, #0]
 800c722:	4d9b      	ldr	r5, [pc, #620]	; (800c990 <_printf_float+0x2fc>)
 800c724:	2e47      	cmp	r6, #71	; 0x47
 800c726:	d900      	bls.n	800c72a <_printf_float+0x96>
 800c728:	4d9a      	ldr	r5, [pc, #616]	; (800c994 <_printf_float+0x300>)
 800c72a:	2303      	movs	r3, #3
 800c72c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c72e:	6123      	str	r3, [r4, #16]
 800c730:	3301      	adds	r3, #1
 800c732:	439a      	bics	r2, r3
 800c734:	2300      	movs	r3, #0
 800c736:	6022      	str	r2, [r4, #0]
 800c738:	930a      	str	r3, [sp, #40]	; 0x28
 800c73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c73c:	0021      	movs	r1, r4
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	0038      	movs	r0, r7
 800c742:	9b08      	ldr	r3, [sp, #32]
 800c744:	aa13      	add	r2, sp, #76	; 0x4c
 800c746:	f000 f9f3 	bl	800cb30 <_printf_common>
 800c74a:	1c43      	adds	r3, r0, #1
 800c74c:	d000      	beq.n	800c750 <_printf_float+0xbc>
 800c74e:	e09e      	b.n	800c88e <_printf_float+0x1fa>
 800c750:	2001      	movs	r0, #1
 800c752:	4240      	negs	r0, r0
 800c754:	b015      	add	sp, #84	; 0x54
 800c756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c758:	3307      	adds	r3, #7
 800c75a:	e7b6      	b.n	800c6ca <_printf_float+0x36>
 800c75c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c75e:	002b      	movs	r3, r5
 800c760:	0010      	movs	r0, r2
 800c762:	0029      	movs	r1, r5
 800c764:	f7f6 fb0a 	bl	8002d7c <__aeabi_dcmpun>
 800c768:	2800      	cmp	r0, #0
 800c76a:	d00a      	beq.n	800c782 <_printf_float+0xee>
 800c76c:	2d00      	cmp	r5, #0
 800c76e:	da03      	bge.n	800c778 <_printf_float+0xe4>
 800c770:	0023      	movs	r3, r4
 800c772:	222d      	movs	r2, #45	; 0x2d
 800c774:	3343      	adds	r3, #67	; 0x43
 800c776:	701a      	strb	r2, [r3, #0]
 800c778:	4d87      	ldr	r5, [pc, #540]	; (800c998 <_printf_float+0x304>)
 800c77a:	2e47      	cmp	r6, #71	; 0x47
 800c77c:	d9d5      	bls.n	800c72a <_printf_float+0x96>
 800c77e:	4d87      	ldr	r5, [pc, #540]	; (800c99c <_printf_float+0x308>)
 800c780:	e7d3      	b.n	800c72a <_printf_float+0x96>
 800c782:	2220      	movs	r2, #32
 800c784:	0031      	movs	r1, r6
 800c786:	6863      	ldr	r3, [r4, #4]
 800c788:	4391      	bics	r1, r2
 800c78a:	910e      	str	r1, [sp, #56]	; 0x38
 800c78c:	1c5a      	adds	r2, r3, #1
 800c78e:	d147      	bne.n	800c820 <_printf_float+0x18c>
 800c790:	3307      	adds	r3, #7
 800c792:	6063      	str	r3, [r4, #4]
 800c794:	2380      	movs	r3, #128	; 0x80
 800c796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c798:	00db      	lsls	r3, r3, #3
 800c79a:	4313      	orrs	r3, r2
 800c79c:	2200      	movs	r2, #0
 800c79e:	9206      	str	r2, [sp, #24]
 800c7a0:	aa12      	add	r2, sp, #72	; 0x48
 800c7a2:	9205      	str	r2, [sp, #20]
 800c7a4:	aa11      	add	r2, sp, #68	; 0x44
 800c7a6:	9203      	str	r2, [sp, #12]
 800c7a8:	2223      	movs	r2, #35	; 0x23
 800c7aa:	a908      	add	r1, sp, #32
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	9301      	str	r3, [sp, #4]
 800c7b0:	6863      	ldr	r3, [r4, #4]
 800c7b2:	1852      	adds	r2, r2, r1
 800c7b4:	9202      	str	r2, [sp, #8]
 800c7b6:	9300      	str	r3, [sp, #0]
 800c7b8:	0038      	movs	r0, r7
 800c7ba:	002b      	movs	r3, r5
 800c7bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7be:	9604      	str	r6, [sp, #16]
 800c7c0:	f7ff febd 	bl	800c53e <__cvt>
 800c7c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7c6:	0005      	movs	r5, r0
 800c7c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c7ca:	2b47      	cmp	r3, #71	; 0x47
 800c7cc:	d108      	bne.n	800c7e0 <_printf_float+0x14c>
 800c7ce:	1ccb      	adds	r3, r1, #3
 800c7d0:	db02      	blt.n	800c7d8 <_printf_float+0x144>
 800c7d2:	6863      	ldr	r3, [r4, #4]
 800c7d4:	4299      	cmp	r1, r3
 800c7d6:	dd46      	ble.n	800c866 <_printf_float+0x1d2>
 800c7d8:	0033      	movs	r3, r6
 800c7da:	3b02      	subs	r3, #2
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	001e      	movs	r6, r3
 800c7e0:	2e65      	cmp	r6, #101	; 0x65
 800c7e2:	d824      	bhi.n	800c82e <_printf_float+0x19a>
 800c7e4:	0020      	movs	r0, r4
 800c7e6:	0032      	movs	r2, r6
 800c7e8:	3901      	subs	r1, #1
 800c7ea:	3050      	adds	r0, #80	; 0x50
 800c7ec:	9111      	str	r1, [sp, #68]	; 0x44
 800c7ee:	f7ff ff09 	bl	800c604 <__exponent>
 800c7f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7f4:	900a      	str	r0, [sp, #40]	; 0x28
 800c7f6:	1813      	adds	r3, r2, r0
 800c7f8:	6123      	str	r3, [r4, #16]
 800c7fa:	2a01      	cmp	r2, #1
 800c7fc:	dc02      	bgt.n	800c804 <_printf_float+0x170>
 800c7fe:	6822      	ldr	r2, [r4, #0]
 800c800:	07d2      	lsls	r2, r2, #31
 800c802:	d501      	bpl.n	800c808 <_printf_float+0x174>
 800c804:	3301      	adds	r3, #1
 800c806:	6123      	str	r3, [r4, #16]
 800c808:	2323      	movs	r3, #35	; 0x23
 800c80a:	aa08      	add	r2, sp, #32
 800c80c:	189b      	adds	r3, r3, r2
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d100      	bne.n	800c816 <_printf_float+0x182>
 800c814:	e791      	b.n	800c73a <_printf_float+0xa6>
 800c816:	0023      	movs	r3, r4
 800c818:	222d      	movs	r2, #45	; 0x2d
 800c81a:	3343      	adds	r3, #67	; 0x43
 800c81c:	701a      	strb	r2, [r3, #0]
 800c81e:	e78c      	b.n	800c73a <_printf_float+0xa6>
 800c820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c822:	2a47      	cmp	r2, #71	; 0x47
 800c824:	d1b6      	bne.n	800c794 <_printf_float+0x100>
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1b4      	bne.n	800c794 <_printf_float+0x100>
 800c82a:	3301      	adds	r3, #1
 800c82c:	e7b1      	b.n	800c792 <_printf_float+0xfe>
 800c82e:	2e66      	cmp	r6, #102	; 0x66
 800c830:	d11b      	bne.n	800c86a <_printf_float+0x1d6>
 800c832:	6863      	ldr	r3, [r4, #4]
 800c834:	2900      	cmp	r1, #0
 800c836:	dd0d      	ble.n	800c854 <_printf_float+0x1c0>
 800c838:	6121      	str	r1, [r4, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d102      	bne.n	800c844 <_printf_float+0x1b0>
 800c83e:	6822      	ldr	r2, [r4, #0]
 800c840:	07d2      	lsls	r2, r2, #31
 800c842:	d502      	bpl.n	800c84a <_printf_float+0x1b6>
 800c844:	3301      	adds	r3, #1
 800c846:	1859      	adds	r1, r3, r1
 800c848:	6121      	str	r1, [r4, #16]
 800c84a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c84c:	65a3      	str	r3, [r4, #88]	; 0x58
 800c84e:	2300      	movs	r3, #0
 800c850:	930a      	str	r3, [sp, #40]	; 0x28
 800c852:	e7d9      	b.n	800c808 <_printf_float+0x174>
 800c854:	2b00      	cmp	r3, #0
 800c856:	d103      	bne.n	800c860 <_printf_float+0x1cc>
 800c858:	2201      	movs	r2, #1
 800c85a:	6821      	ldr	r1, [r4, #0]
 800c85c:	4211      	tst	r1, r2
 800c85e:	d000      	beq.n	800c862 <_printf_float+0x1ce>
 800c860:	1c9a      	adds	r2, r3, #2
 800c862:	6122      	str	r2, [r4, #16]
 800c864:	e7f1      	b.n	800c84a <_printf_float+0x1b6>
 800c866:	2367      	movs	r3, #103	; 0x67
 800c868:	001e      	movs	r6, r3
 800c86a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c86c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c86e:	4293      	cmp	r3, r2
 800c870:	db06      	blt.n	800c880 <_printf_float+0x1ec>
 800c872:	6822      	ldr	r2, [r4, #0]
 800c874:	6123      	str	r3, [r4, #16]
 800c876:	07d2      	lsls	r2, r2, #31
 800c878:	d5e7      	bpl.n	800c84a <_printf_float+0x1b6>
 800c87a:	3301      	adds	r3, #1
 800c87c:	6123      	str	r3, [r4, #16]
 800c87e:	e7e4      	b.n	800c84a <_printf_float+0x1b6>
 800c880:	2101      	movs	r1, #1
 800c882:	2b00      	cmp	r3, #0
 800c884:	dc01      	bgt.n	800c88a <_printf_float+0x1f6>
 800c886:	1849      	adds	r1, r1, r1
 800c888:	1ac9      	subs	r1, r1, r3
 800c88a:	1852      	adds	r2, r2, r1
 800c88c:	e7e9      	b.n	800c862 <_printf_float+0x1ce>
 800c88e:	6822      	ldr	r2, [r4, #0]
 800c890:	0553      	lsls	r3, r2, #21
 800c892:	d408      	bmi.n	800c8a6 <_printf_float+0x212>
 800c894:	6923      	ldr	r3, [r4, #16]
 800c896:	002a      	movs	r2, r5
 800c898:	0038      	movs	r0, r7
 800c89a:	9908      	ldr	r1, [sp, #32]
 800c89c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c89e:	47a8      	blx	r5
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d129      	bne.n	800c8f8 <_printf_float+0x264>
 800c8a4:	e754      	b.n	800c750 <_printf_float+0xbc>
 800c8a6:	2e65      	cmp	r6, #101	; 0x65
 800c8a8:	d800      	bhi.n	800c8ac <_printf_float+0x218>
 800c8aa:	e0ec      	b.n	800ca86 <_printf_float+0x3f2>
 800c8ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c8ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f7f3 fdc6 	bl	8000444 <__aeabi_dcmpeq>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d034      	beq.n	800c926 <_printf_float+0x292>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	0038      	movs	r0, r7
 800c8c0:	4a37      	ldr	r2, [pc, #220]	; (800c9a0 <_printf_float+0x30c>)
 800c8c2:	9908      	ldr	r1, [sp, #32]
 800c8c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c8c6:	47a8      	blx	r5
 800c8c8:	1c43      	adds	r3, r0, #1
 800c8ca:	d100      	bne.n	800c8ce <_printf_float+0x23a>
 800c8cc:	e740      	b.n	800c750 <_printf_float+0xbc>
 800c8ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	db02      	blt.n	800c8dc <_printf_float+0x248>
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	07db      	lsls	r3, r3, #31
 800c8da:	d50d      	bpl.n	800c8f8 <_printf_float+0x264>
 800c8dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c8de:	0038      	movs	r0, r7
 800c8e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8e4:	9908      	ldr	r1, [sp, #32]
 800c8e6:	47a8      	blx	r5
 800c8e8:	2500      	movs	r5, #0
 800c8ea:	1c43      	adds	r3, r0, #1
 800c8ec:	d100      	bne.n	800c8f0 <_printf_float+0x25c>
 800c8ee:	e72f      	b.n	800c750 <_printf_float+0xbc>
 800c8f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	42ab      	cmp	r3, r5
 800c8f6:	dc0a      	bgt.n	800c90e <_printf_float+0x27a>
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	079b      	lsls	r3, r3, #30
 800c8fc:	d500      	bpl.n	800c900 <_printf_float+0x26c>
 800c8fe:	e114      	b.n	800cb2a <_printf_float+0x496>
 800c900:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c902:	68e0      	ldr	r0, [r4, #12]
 800c904:	4298      	cmp	r0, r3
 800c906:	db00      	blt.n	800c90a <_printf_float+0x276>
 800c908:	e724      	b.n	800c754 <_printf_float+0xc0>
 800c90a:	0018      	movs	r0, r3
 800c90c:	e722      	b.n	800c754 <_printf_float+0xc0>
 800c90e:	0022      	movs	r2, r4
 800c910:	2301      	movs	r3, #1
 800c912:	0038      	movs	r0, r7
 800c914:	9908      	ldr	r1, [sp, #32]
 800c916:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c918:	321a      	adds	r2, #26
 800c91a:	47b0      	blx	r6
 800c91c:	1c43      	adds	r3, r0, #1
 800c91e:	d100      	bne.n	800c922 <_printf_float+0x28e>
 800c920:	e716      	b.n	800c750 <_printf_float+0xbc>
 800c922:	3501      	adds	r5, #1
 800c924:	e7e4      	b.n	800c8f0 <_printf_float+0x25c>
 800c926:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c928:	2b00      	cmp	r3, #0
 800c92a:	dc3b      	bgt.n	800c9a4 <_printf_float+0x310>
 800c92c:	2301      	movs	r3, #1
 800c92e:	0038      	movs	r0, r7
 800c930:	4a1b      	ldr	r2, [pc, #108]	; (800c9a0 <_printf_float+0x30c>)
 800c932:	9908      	ldr	r1, [sp, #32]
 800c934:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c936:	47b0      	blx	r6
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	d100      	bne.n	800c93e <_printf_float+0x2aa>
 800c93c:	e708      	b.n	800c750 <_printf_float+0xbc>
 800c93e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c940:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c942:	4313      	orrs	r3, r2
 800c944:	d102      	bne.n	800c94c <_printf_float+0x2b8>
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	07db      	lsls	r3, r3, #31
 800c94a:	d5d5      	bpl.n	800c8f8 <_printf_float+0x264>
 800c94c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c94e:	0038      	movs	r0, r7
 800c950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c952:	9908      	ldr	r1, [sp, #32]
 800c954:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c956:	47b0      	blx	r6
 800c958:	1c43      	adds	r3, r0, #1
 800c95a:	d100      	bne.n	800c95e <_printf_float+0x2ca>
 800c95c:	e6f8      	b.n	800c750 <_printf_float+0xbc>
 800c95e:	2300      	movs	r3, #0
 800c960:	930a      	str	r3, [sp, #40]	; 0x28
 800c962:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c966:	425b      	negs	r3, r3
 800c968:	4293      	cmp	r3, r2
 800c96a:	dc01      	bgt.n	800c970 <_printf_float+0x2dc>
 800c96c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c96e:	e792      	b.n	800c896 <_printf_float+0x202>
 800c970:	0022      	movs	r2, r4
 800c972:	2301      	movs	r3, #1
 800c974:	0038      	movs	r0, r7
 800c976:	9908      	ldr	r1, [sp, #32]
 800c978:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c97a:	321a      	adds	r2, #26
 800c97c:	47b0      	blx	r6
 800c97e:	1c43      	adds	r3, r0, #1
 800c980:	d100      	bne.n	800c984 <_printf_float+0x2f0>
 800c982:	e6e5      	b.n	800c750 <_printf_float+0xbc>
 800c984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c986:	3301      	adds	r3, #1
 800c988:	e7ea      	b.n	800c960 <_printf_float+0x2cc>
 800c98a:	46c0      	nop			; (mov r8, r8)
 800c98c:	7fefffff 	.word	0x7fefffff
 800c990:	08012050 	.word	0x08012050
 800c994:	08012054 	.word	0x08012054
 800c998:	08012058 	.word	0x08012058
 800c99c:	0801205c 	.word	0x0801205c
 800c9a0:	08012060 	.word	0x08012060
 800c9a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c9a8:	920a      	str	r2, [sp, #40]	; 0x28
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	dd00      	ble.n	800c9b0 <_printf_float+0x31c>
 800c9ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	dc3d      	bgt.n	800ca32 <_printf_float+0x39e>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	930e      	str	r3, [sp, #56]	; 0x38
 800c9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9bc:	43db      	mvns	r3, r3
 800c9be:	17db      	asrs	r3, r3, #31
 800c9c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c9c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c9c6:	930c      	str	r3, [sp, #48]	; 0x30
 800c9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	dc36      	bgt.n	800ca44 <_printf_float+0x3b0>
 800c9d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	db40      	blt.n	800ca60 <_printf_float+0x3cc>
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	07db      	lsls	r3, r3, #31
 800c9e2:	d43d      	bmi.n	800ca60 <_printf_float+0x3cc>
 800c9e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	1a52      	subs	r2, r2, r1
 800c9ee:	920a      	str	r2, [sp, #40]	; 0x28
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	dd00      	ble.n	800c9f6 <_printf_float+0x362>
 800c9f4:	930a      	str	r3, [sp, #40]	; 0x28
 800c9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	dc3a      	bgt.n	800ca72 <_printf_float+0x3de>
 800c9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9fe:	2500      	movs	r5, #0
 800ca00:	43db      	mvns	r3, r3
 800ca02:	17db      	asrs	r3, r3, #31
 800ca04:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ca08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca0c:	1a9b      	subs	r3, r3, r2
 800ca0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca10:	400a      	ands	r2, r1
 800ca12:	1a9b      	subs	r3, r3, r2
 800ca14:	42ab      	cmp	r3, r5
 800ca16:	dc00      	bgt.n	800ca1a <_printf_float+0x386>
 800ca18:	e76e      	b.n	800c8f8 <_printf_float+0x264>
 800ca1a:	0022      	movs	r2, r4
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	0038      	movs	r0, r7
 800ca20:	9908      	ldr	r1, [sp, #32]
 800ca22:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ca24:	321a      	adds	r2, #26
 800ca26:	47b0      	blx	r6
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d100      	bne.n	800ca2e <_printf_float+0x39a>
 800ca2c:	e690      	b.n	800c750 <_printf_float+0xbc>
 800ca2e:	3501      	adds	r5, #1
 800ca30:	e7e9      	b.n	800ca06 <_printf_float+0x372>
 800ca32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca34:	002a      	movs	r2, r5
 800ca36:	0038      	movs	r0, r7
 800ca38:	9908      	ldr	r1, [sp, #32]
 800ca3a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ca3c:	47b0      	blx	r6
 800ca3e:	1c43      	adds	r3, r0, #1
 800ca40:	d1b9      	bne.n	800c9b6 <_printf_float+0x322>
 800ca42:	e685      	b.n	800c750 <_printf_float+0xbc>
 800ca44:	0022      	movs	r2, r4
 800ca46:	2301      	movs	r3, #1
 800ca48:	0038      	movs	r0, r7
 800ca4a:	9908      	ldr	r1, [sp, #32]
 800ca4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ca4e:	321a      	adds	r2, #26
 800ca50:	47b0      	blx	r6
 800ca52:	1c43      	adds	r3, r0, #1
 800ca54:	d100      	bne.n	800ca58 <_printf_float+0x3c4>
 800ca56:	e67b      	b.n	800c750 <_printf_float+0xbc>
 800ca58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	930e      	str	r3, [sp, #56]	; 0x38
 800ca5e:	e7b0      	b.n	800c9c2 <_printf_float+0x32e>
 800ca60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca62:	0038      	movs	r0, r7
 800ca64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca66:	9908      	ldr	r1, [sp, #32]
 800ca68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ca6a:	47b0      	blx	r6
 800ca6c:	1c43      	adds	r3, r0, #1
 800ca6e:	d1b9      	bne.n	800c9e4 <_printf_float+0x350>
 800ca70:	e66e      	b.n	800c750 <_printf_float+0xbc>
 800ca72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca74:	0038      	movs	r0, r7
 800ca76:	18ea      	adds	r2, r5, r3
 800ca78:	9908      	ldr	r1, [sp, #32]
 800ca7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ca7e:	47a8      	blx	r5
 800ca80:	1c43      	adds	r3, r0, #1
 800ca82:	d1bb      	bne.n	800c9fc <_printf_float+0x368>
 800ca84:	e664      	b.n	800c750 <_printf_float+0xbc>
 800ca86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	dc02      	bgt.n	800ca92 <_printf_float+0x3fe>
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	421a      	tst	r2, r3
 800ca90:	d038      	beq.n	800cb04 <_printf_float+0x470>
 800ca92:	2301      	movs	r3, #1
 800ca94:	002a      	movs	r2, r5
 800ca96:	0038      	movs	r0, r7
 800ca98:	9908      	ldr	r1, [sp, #32]
 800ca9a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ca9c:	47b0      	blx	r6
 800ca9e:	1c43      	adds	r3, r0, #1
 800caa0:	d100      	bne.n	800caa4 <_printf_float+0x410>
 800caa2:	e655      	b.n	800c750 <_printf_float+0xbc>
 800caa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caa6:	0038      	movs	r0, r7
 800caa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800caaa:	9908      	ldr	r1, [sp, #32]
 800caac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800caae:	47b0      	blx	r6
 800cab0:	1c43      	adds	r3, r0, #1
 800cab2:	d100      	bne.n	800cab6 <_printf_float+0x422>
 800cab4:	e64c      	b.n	800c750 <_printf_float+0xbc>
 800cab6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800cab8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800caba:	2200      	movs	r2, #0
 800cabc:	2300      	movs	r3, #0
 800cabe:	f7f3 fcc1 	bl	8000444 <__aeabi_dcmpeq>
 800cac2:	2800      	cmp	r0, #0
 800cac4:	d11c      	bne.n	800cb00 <_printf_float+0x46c>
 800cac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cac8:	1c6a      	adds	r2, r5, #1
 800caca:	3b01      	subs	r3, #1
 800cacc:	0038      	movs	r0, r7
 800cace:	9908      	ldr	r1, [sp, #32]
 800cad0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cad2:	47a8      	blx	r5
 800cad4:	1c43      	adds	r3, r0, #1
 800cad6:	d10f      	bne.n	800caf8 <_printf_float+0x464>
 800cad8:	e63a      	b.n	800c750 <_printf_float+0xbc>
 800cada:	0022      	movs	r2, r4
 800cadc:	2301      	movs	r3, #1
 800cade:	0038      	movs	r0, r7
 800cae0:	9908      	ldr	r1, [sp, #32]
 800cae2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cae4:	321a      	adds	r2, #26
 800cae6:	47b0      	blx	r6
 800cae8:	1c43      	adds	r3, r0, #1
 800caea:	d100      	bne.n	800caee <_printf_float+0x45a>
 800caec:	e630      	b.n	800c750 <_printf_float+0xbc>
 800caee:	3501      	adds	r5, #1
 800caf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800caf2:	3b01      	subs	r3, #1
 800caf4:	42ab      	cmp	r3, r5
 800caf6:	dcf0      	bgt.n	800cada <_printf_float+0x446>
 800caf8:	0022      	movs	r2, r4
 800cafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cafc:	3250      	adds	r2, #80	; 0x50
 800cafe:	e6cb      	b.n	800c898 <_printf_float+0x204>
 800cb00:	2500      	movs	r5, #0
 800cb02:	e7f5      	b.n	800caf0 <_printf_float+0x45c>
 800cb04:	002a      	movs	r2, r5
 800cb06:	e7e1      	b.n	800cacc <_printf_float+0x438>
 800cb08:	0022      	movs	r2, r4
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	0038      	movs	r0, r7
 800cb0e:	9908      	ldr	r1, [sp, #32]
 800cb10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cb12:	3219      	adds	r2, #25
 800cb14:	47b0      	blx	r6
 800cb16:	1c43      	adds	r3, r0, #1
 800cb18:	d100      	bne.n	800cb1c <_printf_float+0x488>
 800cb1a:	e619      	b.n	800c750 <_printf_float+0xbc>
 800cb1c:	3501      	adds	r5, #1
 800cb1e:	68e3      	ldr	r3, [r4, #12]
 800cb20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cb22:	1a9b      	subs	r3, r3, r2
 800cb24:	42ab      	cmp	r3, r5
 800cb26:	dcef      	bgt.n	800cb08 <_printf_float+0x474>
 800cb28:	e6ea      	b.n	800c900 <_printf_float+0x26c>
 800cb2a:	2500      	movs	r5, #0
 800cb2c:	e7f7      	b.n	800cb1e <_printf_float+0x48a>
 800cb2e:	46c0      	nop			; (mov r8, r8)

0800cb30 <_printf_common>:
 800cb30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb32:	0015      	movs	r5, r2
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	688a      	ldr	r2, [r1, #8]
 800cb38:	690b      	ldr	r3, [r1, #16]
 800cb3a:	000c      	movs	r4, r1
 800cb3c:	9000      	str	r0, [sp, #0]
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	da00      	bge.n	800cb44 <_printf_common+0x14>
 800cb42:	0013      	movs	r3, r2
 800cb44:	0022      	movs	r2, r4
 800cb46:	602b      	str	r3, [r5, #0]
 800cb48:	3243      	adds	r2, #67	; 0x43
 800cb4a:	7812      	ldrb	r2, [r2, #0]
 800cb4c:	2a00      	cmp	r2, #0
 800cb4e:	d001      	beq.n	800cb54 <_printf_common+0x24>
 800cb50:	3301      	adds	r3, #1
 800cb52:	602b      	str	r3, [r5, #0]
 800cb54:	6823      	ldr	r3, [r4, #0]
 800cb56:	069b      	lsls	r3, r3, #26
 800cb58:	d502      	bpl.n	800cb60 <_printf_common+0x30>
 800cb5a:	682b      	ldr	r3, [r5, #0]
 800cb5c:	3302      	adds	r3, #2
 800cb5e:	602b      	str	r3, [r5, #0]
 800cb60:	6822      	ldr	r2, [r4, #0]
 800cb62:	2306      	movs	r3, #6
 800cb64:	0017      	movs	r7, r2
 800cb66:	401f      	ands	r7, r3
 800cb68:	421a      	tst	r2, r3
 800cb6a:	d027      	beq.n	800cbbc <_printf_common+0x8c>
 800cb6c:	0023      	movs	r3, r4
 800cb6e:	3343      	adds	r3, #67	; 0x43
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	1e5a      	subs	r2, r3, #1
 800cb74:	4193      	sbcs	r3, r2
 800cb76:	6822      	ldr	r2, [r4, #0]
 800cb78:	0692      	lsls	r2, r2, #26
 800cb7a:	d430      	bmi.n	800cbde <_printf_common+0xae>
 800cb7c:	0022      	movs	r2, r4
 800cb7e:	9901      	ldr	r1, [sp, #4]
 800cb80:	9800      	ldr	r0, [sp, #0]
 800cb82:	9e08      	ldr	r6, [sp, #32]
 800cb84:	3243      	adds	r2, #67	; 0x43
 800cb86:	47b0      	blx	r6
 800cb88:	1c43      	adds	r3, r0, #1
 800cb8a:	d025      	beq.n	800cbd8 <_printf_common+0xa8>
 800cb8c:	2306      	movs	r3, #6
 800cb8e:	6820      	ldr	r0, [r4, #0]
 800cb90:	682a      	ldr	r2, [r5, #0]
 800cb92:	68e1      	ldr	r1, [r4, #12]
 800cb94:	2500      	movs	r5, #0
 800cb96:	4003      	ands	r3, r0
 800cb98:	2b04      	cmp	r3, #4
 800cb9a:	d103      	bne.n	800cba4 <_printf_common+0x74>
 800cb9c:	1a8d      	subs	r5, r1, r2
 800cb9e:	43eb      	mvns	r3, r5
 800cba0:	17db      	asrs	r3, r3, #31
 800cba2:	401d      	ands	r5, r3
 800cba4:	68a3      	ldr	r3, [r4, #8]
 800cba6:	6922      	ldr	r2, [r4, #16]
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	dd01      	ble.n	800cbb0 <_printf_common+0x80>
 800cbac:	1a9b      	subs	r3, r3, r2
 800cbae:	18ed      	adds	r5, r5, r3
 800cbb0:	2700      	movs	r7, #0
 800cbb2:	42bd      	cmp	r5, r7
 800cbb4:	d120      	bne.n	800cbf8 <_printf_common+0xc8>
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	e010      	b.n	800cbdc <_printf_common+0xac>
 800cbba:	3701      	adds	r7, #1
 800cbbc:	68e3      	ldr	r3, [r4, #12]
 800cbbe:	682a      	ldr	r2, [r5, #0]
 800cbc0:	1a9b      	subs	r3, r3, r2
 800cbc2:	42bb      	cmp	r3, r7
 800cbc4:	ddd2      	ble.n	800cb6c <_printf_common+0x3c>
 800cbc6:	0022      	movs	r2, r4
 800cbc8:	2301      	movs	r3, #1
 800cbca:	9901      	ldr	r1, [sp, #4]
 800cbcc:	9800      	ldr	r0, [sp, #0]
 800cbce:	9e08      	ldr	r6, [sp, #32]
 800cbd0:	3219      	adds	r2, #25
 800cbd2:	47b0      	blx	r6
 800cbd4:	1c43      	adds	r3, r0, #1
 800cbd6:	d1f0      	bne.n	800cbba <_printf_common+0x8a>
 800cbd8:	2001      	movs	r0, #1
 800cbda:	4240      	negs	r0, r0
 800cbdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cbde:	2030      	movs	r0, #48	; 0x30
 800cbe0:	18e1      	adds	r1, r4, r3
 800cbe2:	3143      	adds	r1, #67	; 0x43
 800cbe4:	7008      	strb	r0, [r1, #0]
 800cbe6:	0021      	movs	r1, r4
 800cbe8:	1c5a      	adds	r2, r3, #1
 800cbea:	3145      	adds	r1, #69	; 0x45
 800cbec:	7809      	ldrb	r1, [r1, #0]
 800cbee:	18a2      	adds	r2, r4, r2
 800cbf0:	3243      	adds	r2, #67	; 0x43
 800cbf2:	3302      	adds	r3, #2
 800cbf4:	7011      	strb	r1, [r2, #0]
 800cbf6:	e7c1      	b.n	800cb7c <_printf_common+0x4c>
 800cbf8:	0022      	movs	r2, r4
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	9901      	ldr	r1, [sp, #4]
 800cbfe:	9800      	ldr	r0, [sp, #0]
 800cc00:	9e08      	ldr	r6, [sp, #32]
 800cc02:	321a      	adds	r2, #26
 800cc04:	47b0      	blx	r6
 800cc06:	1c43      	adds	r3, r0, #1
 800cc08:	d0e6      	beq.n	800cbd8 <_printf_common+0xa8>
 800cc0a:	3701      	adds	r7, #1
 800cc0c:	e7d1      	b.n	800cbb2 <_printf_common+0x82>
	...

0800cc10 <_printf_i>:
 800cc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc12:	b08b      	sub	sp, #44	; 0x2c
 800cc14:	9206      	str	r2, [sp, #24]
 800cc16:	000a      	movs	r2, r1
 800cc18:	3243      	adds	r2, #67	; 0x43
 800cc1a:	9307      	str	r3, [sp, #28]
 800cc1c:	9005      	str	r0, [sp, #20]
 800cc1e:	9204      	str	r2, [sp, #16]
 800cc20:	7e0a      	ldrb	r2, [r1, #24]
 800cc22:	000c      	movs	r4, r1
 800cc24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc26:	2a78      	cmp	r2, #120	; 0x78
 800cc28:	d806      	bhi.n	800cc38 <_printf_i+0x28>
 800cc2a:	2a62      	cmp	r2, #98	; 0x62
 800cc2c:	d808      	bhi.n	800cc40 <_printf_i+0x30>
 800cc2e:	2a00      	cmp	r2, #0
 800cc30:	d100      	bne.n	800cc34 <_printf_i+0x24>
 800cc32:	e0c0      	b.n	800cdb6 <_printf_i+0x1a6>
 800cc34:	2a58      	cmp	r2, #88	; 0x58
 800cc36:	d052      	beq.n	800ccde <_printf_i+0xce>
 800cc38:	0026      	movs	r6, r4
 800cc3a:	3642      	adds	r6, #66	; 0x42
 800cc3c:	7032      	strb	r2, [r6, #0]
 800cc3e:	e022      	b.n	800cc86 <_printf_i+0x76>
 800cc40:	0010      	movs	r0, r2
 800cc42:	3863      	subs	r0, #99	; 0x63
 800cc44:	2815      	cmp	r0, #21
 800cc46:	d8f7      	bhi.n	800cc38 <_printf_i+0x28>
 800cc48:	f7f3 fa6c 	bl	8000124 <__gnu_thumb1_case_shi>
 800cc4c:	001f0016 	.word	0x001f0016
 800cc50:	fff6fff6 	.word	0xfff6fff6
 800cc54:	fff6fff6 	.word	0xfff6fff6
 800cc58:	fff6001f 	.word	0xfff6001f
 800cc5c:	fff6fff6 	.word	0xfff6fff6
 800cc60:	00a8fff6 	.word	0x00a8fff6
 800cc64:	009a0036 	.word	0x009a0036
 800cc68:	fff6fff6 	.word	0xfff6fff6
 800cc6c:	fff600b9 	.word	0xfff600b9
 800cc70:	fff60036 	.word	0xfff60036
 800cc74:	009efff6 	.word	0x009efff6
 800cc78:	0026      	movs	r6, r4
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	3642      	adds	r6, #66	; 0x42
 800cc7e:	1d11      	adds	r1, r2, #4
 800cc80:	6019      	str	r1, [r3, #0]
 800cc82:	6813      	ldr	r3, [r2, #0]
 800cc84:	7033      	strb	r3, [r6, #0]
 800cc86:	2301      	movs	r3, #1
 800cc88:	e0a7      	b.n	800cdda <_printf_i+0x1ca>
 800cc8a:	6808      	ldr	r0, [r1, #0]
 800cc8c:	6819      	ldr	r1, [r3, #0]
 800cc8e:	1d0a      	adds	r2, r1, #4
 800cc90:	0605      	lsls	r5, r0, #24
 800cc92:	d50b      	bpl.n	800ccac <_printf_i+0x9c>
 800cc94:	680d      	ldr	r5, [r1, #0]
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	2d00      	cmp	r5, #0
 800cc9a:	da03      	bge.n	800cca4 <_printf_i+0x94>
 800cc9c:	232d      	movs	r3, #45	; 0x2d
 800cc9e:	9a04      	ldr	r2, [sp, #16]
 800cca0:	426d      	negs	r5, r5
 800cca2:	7013      	strb	r3, [r2, #0]
 800cca4:	4b61      	ldr	r3, [pc, #388]	; (800ce2c <_printf_i+0x21c>)
 800cca6:	270a      	movs	r7, #10
 800cca8:	9303      	str	r3, [sp, #12]
 800ccaa:	e032      	b.n	800cd12 <_printf_i+0x102>
 800ccac:	680d      	ldr	r5, [r1, #0]
 800ccae:	601a      	str	r2, [r3, #0]
 800ccb0:	0641      	lsls	r1, r0, #25
 800ccb2:	d5f1      	bpl.n	800cc98 <_printf_i+0x88>
 800ccb4:	b22d      	sxth	r5, r5
 800ccb6:	e7ef      	b.n	800cc98 <_printf_i+0x88>
 800ccb8:	680d      	ldr	r5, [r1, #0]
 800ccba:	6819      	ldr	r1, [r3, #0]
 800ccbc:	1d08      	adds	r0, r1, #4
 800ccbe:	6018      	str	r0, [r3, #0]
 800ccc0:	062e      	lsls	r6, r5, #24
 800ccc2:	d501      	bpl.n	800ccc8 <_printf_i+0xb8>
 800ccc4:	680d      	ldr	r5, [r1, #0]
 800ccc6:	e003      	b.n	800ccd0 <_printf_i+0xc0>
 800ccc8:	066d      	lsls	r5, r5, #25
 800ccca:	d5fb      	bpl.n	800ccc4 <_printf_i+0xb4>
 800cccc:	680d      	ldr	r5, [r1, #0]
 800ccce:	b2ad      	uxth	r5, r5
 800ccd0:	4b56      	ldr	r3, [pc, #344]	; (800ce2c <_printf_i+0x21c>)
 800ccd2:	270a      	movs	r7, #10
 800ccd4:	9303      	str	r3, [sp, #12]
 800ccd6:	2a6f      	cmp	r2, #111	; 0x6f
 800ccd8:	d117      	bne.n	800cd0a <_printf_i+0xfa>
 800ccda:	2708      	movs	r7, #8
 800ccdc:	e015      	b.n	800cd0a <_printf_i+0xfa>
 800ccde:	3145      	adds	r1, #69	; 0x45
 800cce0:	700a      	strb	r2, [r1, #0]
 800cce2:	4a52      	ldr	r2, [pc, #328]	; (800ce2c <_printf_i+0x21c>)
 800cce4:	9203      	str	r2, [sp, #12]
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	6821      	ldr	r1, [r4, #0]
 800ccea:	ca20      	ldmia	r2!, {r5}
 800ccec:	601a      	str	r2, [r3, #0]
 800ccee:	0608      	lsls	r0, r1, #24
 800ccf0:	d550      	bpl.n	800cd94 <_printf_i+0x184>
 800ccf2:	07cb      	lsls	r3, r1, #31
 800ccf4:	d502      	bpl.n	800ccfc <_printf_i+0xec>
 800ccf6:	2320      	movs	r3, #32
 800ccf8:	4319      	orrs	r1, r3
 800ccfa:	6021      	str	r1, [r4, #0]
 800ccfc:	2710      	movs	r7, #16
 800ccfe:	2d00      	cmp	r5, #0
 800cd00:	d103      	bne.n	800cd0a <_printf_i+0xfa>
 800cd02:	2320      	movs	r3, #32
 800cd04:	6822      	ldr	r2, [r4, #0]
 800cd06:	439a      	bics	r2, r3
 800cd08:	6022      	str	r2, [r4, #0]
 800cd0a:	0023      	movs	r3, r4
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	3343      	adds	r3, #67	; 0x43
 800cd10:	701a      	strb	r2, [r3, #0]
 800cd12:	6863      	ldr	r3, [r4, #4]
 800cd14:	60a3      	str	r3, [r4, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	db03      	blt.n	800cd22 <_printf_i+0x112>
 800cd1a:	2204      	movs	r2, #4
 800cd1c:	6821      	ldr	r1, [r4, #0]
 800cd1e:	4391      	bics	r1, r2
 800cd20:	6021      	str	r1, [r4, #0]
 800cd22:	2d00      	cmp	r5, #0
 800cd24:	d102      	bne.n	800cd2c <_printf_i+0x11c>
 800cd26:	9e04      	ldr	r6, [sp, #16]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00c      	beq.n	800cd46 <_printf_i+0x136>
 800cd2c:	9e04      	ldr	r6, [sp, #16]
 800cd2e:	0028      	movs	r0, r5
 800cd30:	0039      	movs	r1, r7
 800cd32:	f7f3 fa87 	bl	8000244 <__aeabi_uidivmod>
 800cd36:	9b03      	ldr	r3, [sp, #12]
 800cd38:	3e01      	subs	r6, #1
 800cd3a:	5c5b      	ldrb	r3, [r3, r1]
 800cd3c:	7033      	strb	r3, [r6, #0]
 800cd3e:	002b      	movs	r3, r5
 800cd40:	0005      	movs	r5, r0
 800cd42:	429f      	cmp	r7, r3
 800cd44:	d9f3      	bls.n	800cd2e <_printf_i+0x11e>
 800cd46:	2f08      	cmp	r7, #8
 800cd48:	d109      	bne.n	800cd5e <_printf_i+0x14e>
 800cd4a:	6823      	ldr	r3, [r4, #0]
 800cd4c:	07db      	lsls	r3, r3, #31
 800cd4e:	d506      	bpl.n	800cd5e <_printf_i+0x14e>
 800cd50:	6863      	ldr	r3, [r4, #4]
 800cd52:	6922      	ldr	r2, [r4, #16]
 800cd54:	4293      	cmp	r3, r2
 800cd56:	dc02      	bgt.n	800cd5e <_printf_i+0x14e>
 800cd58:	2330      	movs	r3, #48	; 0x30
 800cd5a:	3e01      	subs	r6, #1
 800cd5c:	7033      	strb	r3, [r6, #0]
 800cd5e:	9b04      	ldr	r3, [sp, #16]
 800cd60:	1b9b      	subs	r3, r3, r6
 800cd62:	6123      	str	r3, [r4, #16]
 800cd64:	9b07      	ldr	r3, [sp, #28]
 800cd66:	0021      	movs	r1, r4
 800cd68:	9300      	str	r3, [sp, #0]
 800cd6a:	9805      	ldr	r0, [sp, #20]
 800cd6c:	9b06      	ldr	r3, [sp, #24]
 800cd6e:	aa09      	add	r2, sp, #36	; 0x24
 800cd70:	f7ff fede 	bl	800cb30 <_printf_common>
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	d135      	bne.n	800cde4 <_printf_i+0x1d4>
 800cd78:	2001      	movs	r0, #1
 800cd7a:	4240      	negs	r0, r0
 800cd7c:	b00b      	add	sp, #44	; 0x2c
 800cd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd80:	2220      	movs	r2, #32
 800cd82:	6809      	ldr	r1, [r1, #0]
 800cd84:	430a      	orrs	r2, r1
 800cd86:	6022      	str	r2, [r4, #0]
 800cd88:	0022      	movs	r2, r4
 800cd8a:	2178      	movs	r1, #120	; 0x78
 800cd8c:	3245      	adds	r2, #69	; 0x45
 800cd8e:	7011      	strb	r1, [r2, #0]
 800cd90:	4a27      	ldr	r2, [pc, #156]	; (800ce30 <_printf_i+0x220>)
 800cd92:	e7a7      	b.n	800cce4 <_printf_i+0xd4>
 800cd94:	0648      	lsls	r0, r1, #25
 800cd96:	d5ac      	bpl.n	800ccf2 <_printf_i+0xe2>
 800cd98:	b2ad      	uxth	r5, r5
 800cd9a:	e7aa      	b.n	800ccf2 <_printf_i+0xe2>
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	680d      	ldr	r5, [r1, #0]
 800cda0:	1d10      	adds	r0, r2, #4
 800cda2:	6949      	ldr	r1, [r1, #20]
 800cda4:	6018      	str	r0, [r3, #0]
 800cda6:	6813      	ldr	r3, [r2, #0]
 800cda8:	062e      	lsls	r6, r5, #24
 800cdaa:	d501      	bpl.n	800cdb0 <_printf_i+0x1a0>
 800cdac:	6019      	str	r1, [r3, #0]
 800cdae:	e002      	b.n	800cdb6 <_printf_i+0x1a6>
 800cdb0:	066d      	lsls	r5, r5, #25
 800cdb2:	d5fb      	bpl.n	800cdac <_printf_i+0x19c>
 800cdb4:	8019      	strh	r1, [r3, #0]
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	9e04      	ldr	r6, [sp, #16]
 800cdba:	6123      	str	r3, [r4, #16]
 800cdbc:	e7d2      	b.n	800cd64 <_printf_i+0x154>
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	1d11      	adds	r1, r2, #4
 800cdc2:	6019      	str	r1, [r3, #0]
 800cdc4:	6816      	ldr	r6, [r2, #0]
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	0030      	movs	r0, r6
 800cdca:	6862      	ldr	r2, [r4, #4]
 800cdcc:	f000 ff0a 	bl	800dbe4 <memchr>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	d001      	beq.n	800cdd8 <_printf_i+0x1c8>
 800cdd4:	1b80      	subs	r0, r0, r6
 800cdd6:	6060      	str	r0, [r4, #4]
 800cdd8:	6863      	ldr	r3, [r4, #4]
 800cdda:	6123      	str	r3, [r4, #16]
 800cddc:	2300      	movs	r3, #0
 800cdde:	9a04      	ldr	r2, [sp, #16]
 800cde0:	7013      	strb	r3, [r2, #0]
 800cde2:	e7bf      	b.n	800cd64 <_printf_i+0x154>
 800cde4:	6923      	ldr	r3, [r4, #16]
 800cde6:	0032      	movs	r2, r6
 800cde8:	9906      	ldr	r1, [sp, #24]
 800cdea:	9805      	ldr	r0, [sp, #20]
 800cdec:	9d07      	ldr	r5, [sp, #28]
 800cdee:	47a8      	blx	r5
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d0c1      	beq.n	800cd78 <_printf_i+0x168>
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	079b      	lsls	r3, r3, #30
 800cdf8:	d415      	bmi.n	800ce26 <_printf_i+0x216>
 800cdfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdfc:	68e0      	ldr	r0, [r4, #12]
 800cdfe:	4298      	cmp	r0, r3
 800ce00:	dabc      	bge.n	800cd7c <_printf_i+0x16c>
 800ce02:	0018      	movs	r0, r3
 800ce04:	e7ba      	b.n	800cd7c <_printf_i+0x16c>
 800ce06:	0022      	movs	r2, r4
 800ce08:	2301      	movs	r3, #1
 800ce0a:	9906      	ldr	r1, [sp, #24]
 800ce0c:	9805      	ldr	r0, [sp, #20]
 800ce0e:	9e07      	ldr	r6, [sp, #28]
 800ce10:	3219      	adds	r2, #25
 800ce12:	47b0      	blx	r6
 800ce14:	1c43      	adds	r3, r0, #1
 800ce16:	d0af      	beq.n	800cd78 <_printf_i+0x168>
 800ce18:	3501      	adds	r5, #1
 800ce1a:	68e3      	ldr	r3, [r4, #12]
 800ce1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce1e:	1a9b      	subs	r3, r3, r2
 800ce20:	42ab      	cmp	r3, r5
 800ce22:	dcf0      	bgt.n	800ce06 <_printf_i+0x1f6>
 800ce24:	e7e9      	b.n	800cdfa <_printf_i+0x1ea>
 800ce26:	2500      	movs	r5, #0
 800ce28:	e7f7      	b.n	800ce1a <_printf_i+0x20a>
 800ce2a:	46c0      	nop			; (mov r8, r8)
 800ce2c:	08012062 	.word	0x08012062
 800ce30:	08012073 	.word	0x08012073

0800ce34 <siprintf>:
 800ce34:	b40e      	push	{r1, r2, r3}
 800ce36:	b500      	push	{lr}
 800ce38:	490b      	ldr	r1, [pc, #44]	; (800ce68 <siprintf+0x34>)
 800ce3a:	b09c      	sub	sp, #112	; 0x70
 800ce3c:	ab1d      	add	r3, sp, #116	; 0x74
 800ce3e:	9002      	str	r0, [sp, #8]
 800ce40:	9006      	str	r0, [sp, #24]
 800ce42:	9107      	str	r1, [sp, #28]
 800ce44:	9104      	str	r1, [sp, #16]
 800ce46:	4809      	ldr	r0, [pc, #36]	; (800ce6c <siprintf+0x38>)
 800ce48:	4909      	ldr	r1, [pc, #36]	; (800ce70 <siprintf+0x3c>)
 800ce4a:	cb04      	ldmia	r3!, {r2}
 800ce4c:	9105      	str	r1, [sp, #20]
 800ce4e:	6800      	ldr	r0, [r0, #0]
 800ce50:	a902      	add	r1, sp, #8
 800ce52:	9301      	str	r3, [sp, #4]
 800ce54:	f001 fb88 	bl	800e568 <_svfiprintf_r>
 800ce58:	2300      	movs	r3, #0
 800ce5a:	9a02      	ldr	r2, [sp, #8]
 800ce5c:	7013      	strb	r3, [r2, #0]
 800ce5e:	b01c      	add	sp, #112	; 0x70
 800ce60:	bc08      	pop	{r3}
 800ce62:	b003      	add	sp, #12
 800ce64:	4718      	bx	r3
 800ce66:	46c0      	nop			; (mov r8, r8)
 800ce68:	7fffffff 	.word	0x7fffffff
 800ce6c:	20000010 	.word	0x20000010
 800ce70:	ffff0208 	.word	0xffff0208

0800ce74 <quorem>:
 800ce74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce76:	0006      	movs	r6, r0
 800ce78:	690d      	ldr	r5, [r1, #16]
 800ce7a:	6933      	ldr	r3, [r6, #16]
 800ce7c:	b087      	sub	sp, #28
 800ce7e:	2000      	movs	r0, #0
 800ce80:	9102      	str	r1, [sp, #8]
 800ce82:	42ab      	cmp	r3, r5
 800ce84:	db6b      	blt.n	800cf5e <quorem+0xea>
 800ce86:	000b      	movs	r3, r1
 800ce88:	3d01      	subs	r5, #1
 800ce8a:	00ac      	lsls	r4, r5, #2
 800ce8c:	3314      	adds	r3, #20
 800ce8e:	9305      	str	r3, [sp, #20]
 800ce90:	191b      	adds	r3, r3, r4
 800ce92:	9303      	str	r3, [sp, #12]
 800ce94:	0033      	movs	r3, r6
 800ce96:	3314      	adds	r3, #20
 800ce98:	9301      	str	r3, [sp, #4]
 800ce9a:	191c      	adds	r4, r3, r4
 800ce9c:	9b03      	ldr	r3, [sp, #12]
 800ce9e:	6827      	ldr	r7, [r4, #0]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	0038      	movs	r0, r7
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	3301      	adds	r3, #1
 800cea8:	0019      	movs	r1, r3
 800ceaa:	9304      	str	r3, [sp, #16]
 800ceac:	f7f3 f944 	bl	8000138 <__udivsi3>
 800ceb0:	9b04      	ldr	r3, [sp, #16]
 800ceb2:	9000      	str	r0, [sp, #0]
 800ceb4:	429f      	cmp	r7, r3
 800ceb6:	d329      	bcc.n	800cf0c <quorem+0x98>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	469c      	mov	ip, r3
 800cebc:	9801      	ldr	r0, [sp, #4]
 800cebe:	9f05      	ldr	r7, [sp, #20]
 800cec0:	9304      	str	r3, [sp, #16]
 800cec2:	cf08      	ldmia	r7!, {r3}
 800cec4:	9a00      	ldr	r2, [sp, #0]
 800cec6:	b299      	uxth	r1, r3
 800cec8:	4351      	muls	r1, r2
 800ceca:	0c1b      	lsrs	r3, r3, #16
 800cecc:	4353      	muls	r3, r2
 800cece:	4461      	add	r1, ip
 800ced0:	0c0a      	lsrs	r2, r1, #16
 800ced2:	189b      	adds	r3, r3, r2
 800ced4:	0c1a      	lsrs	r2, r3, #16
 800ced6:	9305      	str	r3, [sp, #20]
 800ced8:	6803      	ldr	r3, [r0, #0]
 800ceda:	4694      	mov	ip, r2
 800cedc:	b29a      	uxth	r2, r3
 800cede:	9b04      	ldr	r3, [sp, #16]
 800cee0:	b289      	uxth	r1, r1
 800cee2:	18d2      	adds	r2, r2, r3
 800cee4:	6803      	ldr	r3, [r0, #0]
 800cee6:	1a52      	subs	r2, r2, r1
 800cee8:	0c19      	lsrs	r1, r3, #16
 800ceea:	466b      	mov	r3, sp
 800ceec:	8a9b      	ldrh	r3, [r3, #20]
 800ceee:	1acb      	subs	r3, r1, r3
 800cef0:	1411      	asrs	r1, r2, #16
 800cef2:	185b      	adds	r3, r3, r1
 800cef4:	1419      	asrs	r1, r3, #16
 800cef6:	b292      	uxth	r2, r2
 800cef8:	041b      	lsls	r3, r3, #16
 800cefa:	431a      	orrs	r2, r3
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	9104      	str	r1, [sp, #16]
 800cf00:	c004      	stmia	r0!, {r2}
 800cf02:	42bb      	cmp	r3, r7
 800cf04:	d2dd      	bcs.n	800cec2 <quorem+0x4e>
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d02e      	beq.n	800cf6a <quorem+0xf6>
 800cf0c:	0030      	movs	r0, r6
 800cf0e:	9902      	ldr	r1, [sp, #8]
 800cf10:	f001 f8fa 	bl	800e108 <__mcmp>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	db21      	blt.n	800cf5c <quorem+0xe8>
 800cf18:	0030      	movs	r0, r6
 800cf1a:	2400      	movs	r4, #0
 800cf1c:	9b00      	ldr	r3, [sp, #0]
 800cf1e:	9902      	ldr	r1, [sp, #8]
 800cf20:	3301      	adds	r3, #1
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	3014      	adds	r0, #20
 800cf26:	3114      	adds	r1, #20
 800cf28:	6802      	ldr	r2, [r0, #0]
 800cf2a:	c908      	ldmia	r1!, {r3}
 800cf2c:	b292      	uxth	r2, r2
 800cf2e:	1914      	adds	r4, r2, r4
 800cf30:	b29a      	uxth	r2, r3
 800cf32:	1aa2      	subs	r2, r4, r2
 800cf34:	6804      	ldr	r4, [r0, #0]
 800cf36:	0c1b      	lsrs	r3, r3, #16
 800cf38:	0c24      	lsrs	r4, r4, #16
 800cf3a:	1ae3      	subs	r3, r4, r3
 800cf3c:	1414      	asrs	r4, r2, #16
 800cf3e:	191b      	adds	r3, r3, r4
 800cf40:	141c      	asrs	r4, r3, #16
 800cf42:	b292      	uxth	r2, r2
 800cf44:	041b      	lsls	r3, r3, #16
 800cf46:	4313      	orrs	r3, r2
 800cf48:	c008      	stmia	r0!, {r3}
 800cf4a:	9b03      	ldr	r3, [sp, #12]
 800cf4c:	428b      	cmp	r3, r1
 800cf4e:	d2eb      	bcs.n	800cf28 <quorem+0xb4>
 800cf50:	9a01      	ldr	r2, [sp, #4]
 800cf52:	00ab      	lsls	r3, r5, #2
 800cf54:	18d3      	adds	r3, r2, r3
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	2a00      	cmp	r2, #0
 800cf5a:	d010      	beq.n	800cf7e <quorem+0x10a>
 800cf5c:	9800      	ldr	r0, [sp, #0]
 800cf5e:	b007      	add	sp, #28
 800cf60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf62:	6823      	ldr	r3, [r4, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d104      	bne.n	800cf72 <quorem+0xfe>
 800cf68:	3d01      	subs	r5, #1
 800cf6a:	9b01      	ldr	r3, [sp, #4]
 800cf6c:	3c04      	subs	r4, #4
 800cf6e:	42a3      	cmp	r3, r4
 800cf70:	d3f7      	bcc.n	800cf62 <quorem+0xee>
 800cf72:	6135      	str	r5, [r6, #16]
 800cf74:	e7ca      	b.n	800cf0c <quorem+0x98>
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	2a00      	cmp	r2, #0
 800cf7a:	d104      	bne.n	800cf86 <quorem+0x112>
 800cf7c:	3d01      	subs	r5, #1
 800cf7e:	9a01      	ldr	r2, [sp, #4]
 800cf80:	3b04      	subs	r3, #4
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d3f7      	bcc.n	800cf76 <quorem+0x102>
 800cf86:	6135      	str	r5, [r6, #16]
 800cf88:	e7e8      	b.n	800cf5c <quorem+0xe8>
	...

0800cf8c <_dtoa_r>:
 800cf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf8e:	b09d      	sub	sp, #116	; 0x74
 800cf90:	9202      	str	r2, [sp, #8]
 800cf92:	9303      	str	r3, [sp, #12]
 800cf94:	9b02      	ldr	r3, [sp, #8]
 800cf96:	9c03      	ldr	r4, [sp, #12]
 800cf98:	930a      	str	r3, [sp, #40]	; 0x28
 800cf9a:	940b      	str	r4, [sp, #44]	; 0x2c
 800cf9c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cf9e:	0007      	movs	r7, r0
 800cfa0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800cfa2:	2c00      	cmp	r4, #0
 800cfa4:	d10e      	bne.n	800cfc4 <_dtoa_r+0x38>
 800cfa6:	2010      	movs	r0, #16
 800cfa8:	f000 fe12 	bl	800dbd0 <malloc>
 800cfac:	1e02      	subs	r2, r0, #0
 800cfae:	6278      	str	r0, [r7, #36]	; 0x24
 800cfb0:	d104      	bne.n	800cfbc <_dtoa_r+0x30>
 800cfb2:	21ea      	movs	r1, #234	; 0xea
 800cfb4:	4bc0      	ldr	r3, [pc, #768]	; (800d2b8 <_dtoa_r+0x32c>)
 800cfb6:	48c1      	ldr	r0, [pc, #772]	; (800d2bc <_dtoa_r+0x330>)
 800cfb8:	f001 fbe8 	bl	800e78c <__assert_func>
 800cfbc:	6044      	str	r4, [r0, #4]
 800cfbe:	6084      	str	r4, [r0, #8]
 800cfc0:	6004      	str	r4, [r0, #0]
 800cfc2:	60c4      	str	r4, [r0, #12]
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	6819      	ldr	r1, [r3, #0]
 800cfc8:	2900      	cmp	r1, #0
 800cfca:	d00a      	beq.n	800cfe2 <_dtoa_r+0x56>
 800cfcc:	685a      	ldr	r2, [r3, #4]
 800cfce:	2301      	movs	r3, #1
 800cfd0:	4093      	lsls	r3, r2
 800cfd2:	604a      	str	r2, [r1, #4]
 800cfd4:	608b      	str	r3, [r1, #8]
 800cfd6:	0038      	movs	r0, r7
 800cfd8:	f000 fe54 	bl	800dc84 <_Bfree>
 800cfdc:	2200      	movs	r2, #0
 800cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	9b03      	ldr	r3, [sp, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	da21      	bge.n	800d02c <_dtoa_r+0xa0>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	602b      	str	r3, [r5, #0]
 800cfec:	9b03      	ldr	r3, [sp, #12]
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	085b      	lsrs	r3, r3, #1
 800cff2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cff4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cff6:	4bb2      	ldr	r3, [pc, #712]	; (800d2c0 <_dtoa_r+0x334>)
 800cff8:	002a      	movs	r2, r5
 800cffa:	9318      	str	r3, [sp, #96]	; 0x60
 800cffc:	401a      	ands	r2, r3
 800cffe:	429a      	cmp	r2, r3
 800d000:	d117      	bne.n	800d032 <_dtoa_r+0xa6>
 800d002:	4bb0      	ldr	r3, [pc, #704]	; (800d2c4 <_dtoa_r+0x338>)
 800d004:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d006:	0328      	lsls	r0, r5, #12
 800d008:	6013      	str	r3, [r2, #0]
 800d00a:	9b02      	ldr	r3, [sp, #8]
 800d00c:	0b00      	lsrs	r0, r0, #12
 800d00e:	4318      	orrs	r0, r3
 800d010:	d101      	bne.n	800d016 <_dtoa_r+0x8a>
 800d012:	f000 fdc3 	bl	800db9c <_dtoa_r+0xc10>
 800d016:	48ac      	ldr	r0, [pc, #688]	; (800d2c8 <_dtoa_r+0x33c>)
 800d018:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d01a:	9005      	str	r0, [sp, #20]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <_dtoa_r+0x9a>
 800d020:	4baa      	ldr	r3, [pc, #680]	; (800d2cc <_dtoa_r+0x340>)
 800d022:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d024:	6013      	str	r3, [r2, #0]
 800d026:	9805      	ldr	r0, [sp, #20]
 800d028:	b01d      	add	sp, #116	; 0x74
 800d02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d02c:	2300      	movs	r3, #0
 800d02e:	602b      	str	r3, [r5, #0]
 800d030:	e7e0      	b.n	800cff4 <_dtoa_r+0x68>
 800d032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d034:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d036:	9312      	str	r3, [sp, #72]	; 0x48
 800d038:	9413      	str	r4, [sp, #76]	; 0x4c
 800d03a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d03c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d03e:	2200      	movs	r2, #0
 800d040:	2300      	movs	r3, #0
 800d042:	f7f3 f9ff 	bl	8000444 <__aeabi_dcmpeq>
 800d046:	1e04      	subs	r4, r0, #0
 800d048:	d00b      	beq.n	800d062 <_dtoa_r+0xd6>
 800d04a:	2301      	movs	r3, #1
 800d04c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d04e:	6013      	str	r3, [r2, #0]
 800d050:	4b9f      	ldr	r3, [pc, #636]	; (800d2d0 <_dtoa_r+0x344>)
 800d052:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d054:	9305      	str	r3, [sp, #20]
 800d056:	2a00      	cmp	r2, #0
 800d058:	d0e5      	beq.n	800d026 <_dtoa_r+0x9a>
 800d05a:	4a9e      	ldr	r2, [pc, #632]	; (800d2d4 <_dtoa_r+0x348>)
 800d05c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800d05e:	600a      	str	r2, [r1, #0]
 800d060:	e7e1      	b.n	800d026 <_dtoa_r+0x9a>
 800d062:	ab1a      	add	r3, sp, #104	; 0x68
 800d064:	9301      	str	r3, [sp, #4]
 800d066:	ab1b      	add	r3, sp, #108	; 0x6c
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	0038      	movs	r0, r7
 800d06c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d06e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d070:	f001 f8fe 	bl	800e270 <__d2b>
 800d074:	006e      	lsls	r6, r5, #1
 800d076:	9004      	str	r0, [sp, #16]
 800d078:	0d76      	lsrs	r6, r6, #21
 800d07a:	d100      	bne.n	800d07e <_dtoa_r+0xf2>
 800d07c:	e07c      	b.n	800d178 <_dtoa_r+0x1ec>
 800d07e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d080:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d082:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d084:	4a94      	ldr	r2, [pc, #592]	; (800d2d8 <_dtoa_r+0x34c>)
 800d086:	031b      	lsls	r3, r3, #12
 800d088:	0b1b      	lsrs	r3, r3, #12
 800d08a:	431a      	orrs	r2, r3
 800d08c:	0011      	movs	r1, r2
 800d08e:	4b93      	ldr	r3, [pc, #588]	; (800d2dc <_dtoa_r+0x350>)
 800d090:	9416      	str	r4, [sp, #88]	; 0x58
 800d092:	18f6      	adds	r6, r6, r3
 800d094:	2200      	movs	r2, #0
 800d096:	4b92      	ldr	r3, [pc, #584]	; (800d2e0 <_dtoa_r+0x354>)
 800d098:	f7f5 fade 	bl	8002658 <__aeabi_dsub>
 800d09c:	4a91      	ldr	r2, [pc, #580]	; (800d2e4 <_dtoa_r+0x358>)
 800d09e:	4b92      	ldr	r3, [pc, #584]	; (800d2e8 <_dtoa_r+0x35c>)
 800d0a0:	f7f5 f86e 	bl	8002180 <__aeabi_dmul>
 800d0a4:	4a91      	ldr	r2, [pc, #580]	; (800d2ec <_dtoa_r+0x360>)
 800d0a6:	4b92      	ldr	r3, [pc, #584]	; (800d2f0 <_dtoa_r+0x364>)
 800d0a8:	f7f4 f8fa 	bl	80012a0 <__aeabi_dadd>
 800d0ac:	0004      	movs	r4, r0
 800d0ae:	0030      	movs	r0, r6
 800d0b0:	000d      	movs	r5, r1
 800d0b2:	f7f5 feb7 	bl	8002e24 <__aeabi_i2d>
 800d0b6:	4a8f      	ldr	r2, [pc, #572]	; (800d2f4 <_dtoa_r+0x368>)
 800d0b8:	4b8f      	ldr	r3, [pc, #572]	; (800d2f8 <_dtoa_r+0x36c>)
 800d0ba:	f7f5 f861 	bl	8002180 <__aeabi_dmul>
 800d0be:	0002      	movs	r2, r0
 800d0c0:	000b      	movs	r3, r1
 800d0c2:	0020      	movs	r0, r4
 800d0c4:	0029      	movs	r1, r5
 800d0c6:	f7f4 f8eb 	bl	80012a0 <__aeabi_dadd>
 800d0ca:	0004      	movs	r4, r0
 800d0cc:	000d      	movs	r5, r1
 800d0ce:	f7f5 fe73 	bl	8002db8 <__aeabi_d2iz>
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	9002      	str	r0, [sp, #8]
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	0020      	movs	r0, r4
 800d0da:	0029      	movs	r1, r5
 800d0dc:	f7f3 f9b8 	bl	8000450 <__aeabi_dcmplt>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	d00b      	beq.n	800d0fc <_dtoa_r+0x170>
 800d0e4:	9802      	ldr	r0, [sp, #8]
 800d0e6:	f7f5 fe9d 	bl	8002e24 <__aeabi_i2d>
 800d0ea:	002b      	movs	r3, r5
 800d0ec:	0022      	movs	r2, r4
 800d0ee:	f7f3 f9a9 	bl	8000444 <__aeabi_dcmpeq>
 800d0f2:	4243      	negs	r3, r0
 800d0f4:	4158      	adcs	r0, r3
 800d0f6:	9b02      	ldr	r3, [sp, #8]
 800d0f8:	1a1b      	subs	r3, r3, r0
 800d0fa:	9302      	str	r3, [sp, #8]
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	9315      	str	r3, [sp, #84]	; 0x54
 800d100:	9b02      	ldr	r3, [sp, #8]
 800d102:	2b16      	cmp	r3, #22
 800d104:	d80f      	bhi.n	800d126 <_dtoa_r+0x19a>
 800d106:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d108:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d10a:	00da      	lsls	r2, r3, #3
 800d10c:	4b7b      	ldr	r3, [pc, #492]	; (800d2fc <_dtoa_r+0x370>)
 800d10e:	189b      	adds	r3, r3, r2
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	f7f3 f99c 	bl	8000450 <__aeabi_dcmplt>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d049      	beq.n	800d1b0 <_dtoa_r+0x224>
 800d11c:	9b02      	ldr	r3, [sp, #8]
 800d11e:	3b01      	subs	r3, #1
 800d120:	9302      	str	r3, [sp, #8]
 800d122:	2300      	movs	r3, #0
 800d124:	9315      	str	r3, [sp, #84]	; 0x54
 800d126:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d128:	1b9e      	subs	r6, r3, r6
 800d12a:	2300      	movs	r3, #0
 800d12c:	9308      	str	r3, [sp, #32]
 800d12e:	0033      	movs	r3, r6
 800d130:	3b01      	subs	r3, #1
 800d132:	930d      	str	r3, [sp, #52]	; 0x34
 800d134:	d504      	bpl.n	800d140 <_dtoa_r+0x1b4>
 800d136:	2301      	movs	r3, #1
 800d138:	1b9b      	subs	r3, r3, r6
 800d13a:	9308      	str	r3, [sp, #32]
 800d13c:	2300      	movs	r3, #0
 800d13e:	930d      	str	r3, [sp, #52]	; 0x34
 800d140:	9b02      	ldr	r3, [sp, #8]
 800d142:	2b00      	cmp	r3, #0
 800d144:	db36      	blt.n	800d1b4 <_dtoa_r+0x228>
 800d146:	9a02      	ldr	r2, [sp, #8]
 800d148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d14a:	4694      	mov	ip, r2
 800d14c:	4463      	add	r3, ip
 800d14e:	930d      	str	r3, [sp, #52]	; 0x34
 800d150:	2300      	movs	r3, #0
 800d152:	9214      	str	r2, [sp, #80]	; 0x50
 800d154:	930e      	str	r3, [sp, #56]	; 0x38
 800d156:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d158:	2401      	movs	r4, #1
 800d15a:	2b09      	cmp	r3, #9
 800d15c:	d862      	bhi.n	800d224 <_dtoa_r+0x298>
 800d15e:	2b05      	cmp	r3, #5
 800d160:	dd02      	ble.n	800d168 <_dtoa_r+0x1dc>
 800d162:	2400      	movs	r4, #0
 800d164:	3b04      	subs	r3, #4
 800d166:	9322      	str	r3, [sp, #136]	; 0x88
 800d168:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d16a:	1e98      	subs	r0, r3, #2
 800d16c:	2803      	cmp	r0, #3
 800d16e:	d862      	bhi.n	800d236 <_dtoa_r+0x2aa>
 800d170:	f7f2 ffce 	bl	8000110 <__gnu_thumb1_case_uqi>
 800d174:	56343629 	.word	0x56343629
 800d178:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d17a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d17c:	189e      	adds	r6, r3, r2
 800d17e:	4b60      	ldr	r3, [pc, #384]	; (800d300 <_dtoa_r+0x374>)
 800d180:	18f2      	adds	r2, r6, r3
 800d182:	2a20      	cmp	r2, #32
 800d184:	dd0f      	ble.n	800d1a6 <_dtoa_r+0x21a>
 800d186:	2340      	movs	r3, #64	; 0x40
 800d188:	1a9b      	subs	r3, r3, r2
 800d18a:	409d      	lsls	r5, r3
 800d18c:	4b5d      	ldr	r3, [pc, #372]	; (800d304 <_dtoa_r+0x378>)
 800d18e:	9802      	ldr	r0, [sp, #8]
 800d190:	18f3      	adds	r3, r6, r3
 800d192:	40d8      	lsrs	r0, r3
 800d194:	4328      	orrs	r0, r5
 800d196:	f7f5 fe75 	bl	8002e84 <__aeabi_ui2d>
 800d19a:	2301      	movs	r3, #1
 800d19c:	4c5a      	ldr	r4, [pc, #360]	; (800d308 <_dtoa_r+0x37c>)
 800d19e:	3e01      	subs	r6, #1
 800d1a0:	1909      	adds	r1, r1, r4
 800d1a2:	9316      	str	r3, [sp, #88]	; 0x58
 800d1a4:	e776      	b.n	800d094 <_dtoa_r+0x108>
 800d1a6:	2320      	movs	r3, #32
 800d1a8:	9802      	ldr	r0, [sp, #8]
 800d1aa:	1a9b      	subs	r3, r3, r2
 800d1ac:	4098      	lsls	r0, r3
 800d1ae:	e7f2      	b.n	800d196 <_dtoa_r+0x20a>
 800d1b0:	9015      	str	r0, [sp, #84]	; 0x54
 800d1b2:	e7b8      	b.n	800d126 <_dtoa_r+0x19a>
 800d1b4:	9b08      	ldr	r3, [sp, #32]
 800d1b6:	9a02      	ldr	r2, [sp, #8]
 800d1b8:	1a9b      	subs	r3, r3, r2
 800d1ba:	9308      	str	r3, [sp, #32]
 800d1bc:	4253      	negs	r3, r2
 800d1be:	930e      	str	r3, [sp, #56]	; 0x38
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	9314      	str	r3, [sp, #80]	; 0x50
 800d1c4:	e7c7      	b.n	800d156 <_dtoa_r+0x1ca>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	dc36      	bgt.n	800d23e <_dtoa_r+0x2b2>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	001a      	movs	r2, r3
 800d1d4:	930c      	str	r3, [sp, #48]	; 0x30
 800d1d6:	9306      	str	r3, [sp, #24]
 800d1d8:	9223      	str	r2, [sp, #140]	; 0x8c
 800d1da:	e00d      	b.n	800d1f8 <_dtoa_r+0x26c>
 800d1dc:	2301      	movs	r3, #1
 800d1de:	e7f3      	b.n	800d1c8 <_dtoa_r+0x23c>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d1e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1e6:	4694      	mov	ip, r2
 800d1e8:	9b02      	ldr	r3, [sp, #8]
 800d1ea:	4463      	add	r3, ip
 800d1ec:	930c      	str	r3, [sp, #48]	; 0x30
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	9306      	str	r3, [sp, #24]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	dc00      	bgt.n	800d1f8 <_dtoa_r+0x26c>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1fc:	6042      	str	r2, [r0, #4]
 800d1fe:	3204      	adds	r2, #4
 800d200:	0015      	movs	r5, r2
 800d202:	3514      	adds	r5, #20
 800d204:	6841      	ldr	r1, [r0, #4]
 800d206:	429d      	cmp	r5, r3
 800d208:	d91d      	bls.n	800d246 <_dtoa_r+0x2ba>
 800d20a:	0038      	movs	r0, r7
 800d20c:	f000 fcf6 	bl	800dbfc <_Balloc>
 800d210:	9005      	str	r0, [sp, #20]
 800d212:	2800      	cmp	r0, #0
 800d214:	d11b      	bne.n	800d24e <_dtoa_r+0x2c2>
 800d216:	21d5      	movs	r1, #213	; 0xd5
 800d218:	0002      	movs	r2, r0
 800d21a:	4b3c      	ldr	r3, [pc, #240]	; (800d30c <_dtoa_r+0x380>)
 800d21c:	0049      	lsls	r1, r1, #1
 800d21e:	e6ca      	b.n	800cfb6 <_dtoa_r+0x2a>
 800d220:	2301      	movs	r3, #1
 800d222:	e7de      	b.n	800d1e2 <_dtoa_r+0x256>
 800d224:	2300      	movs	r3, #0
 800d226:	940f      	str	r4, [sp, #60]	; 0x3c
 800d228:	9322      	str	r3, [sp, #136]	; 0x88
 800d22a:	3b01      	subs	r3, #1
 800d22c:	930c      	str	r3, [sp, #48]	; 0x30
 800d22e:	9306      	str	r3, [sp, #24]
 800d230:	2200      	movs	r2, #0
 800d232:	3313      	adds	r3, #19
 800d234:	e7d0      	b.n	800d1d8 <_dtoa_r+0x24c>
 800d236:	2301      	movs	r3, #1
 800d238:	930f      	str	r3, [sp, #60]	; 0x3c
 800d23a:	3b02      	subs	r3, #2
 800d23c:	e7f6      	b.n	800d22c <_dtoa_r+0x2a0>
 800d23e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d240:	930c      	str	r3, [sp, #48]	; 0x30
 800d242:	9306      	str	r3, [sp, #24]
 800d244:	e7d8      	b.n	800d1f8 <_dtoa_r+0x26c>
 800d246:	3101      	adds	r1, #1
 800d248:	6041      	str	r1, [r0, #4]
 800d24a:	0052      	lsls	r2, r2, #1
 800d24c:	e7d8      	b.n	800d200 <_dtoa_r+0x274>
 800d24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d250:	9a05      	ldr	r2, [sp, #20]
 800d252:	601a      	str	r2, [r3, #0]
 800d254:	9b06      	ldr	r3, [sp, #24]
 800d256:	2b0e      	cmp	r3, #14
 800d258:	d900      	bls.n	800d25c <_dtoa_r+0x2d0>
 800d25a:	e0eb      	b.n	800d434 <_dtoa_r+0x4a8>
 800d25c:	2c00      	cmp	r4, #0
 800d25e:	d100      	bne.n	800d262 <_dtoa_r+0x2d6>
 800d260:	e0e8      	b.n	800d434 <_dtoa_r+0x4a8>
 800d262:	9b02      	ldr	r3, [sp, #8]
 800d264:	2b00      	cmp	r3, #0
 800d266:	dd68      	ble.n	800d33a <_dtoa_r+0x3ae>
 800d268:	001a      	movs	r2, r3
 800d26a:	210f      	movs	r1, #15
 800d26c:	4b23      	ldr	r3, [pc, #140]	; (800d2fc <_dtoa_r+0x370>)
 800d26e:	400a      	ands	r2, r1
 800d270:	00d2      	lsls	r2, r2, #3
 800d272:	189b      	adds	r3, r3, r2
 800d274:	681d      	ldr	r5, [r3, #0]
 800d276:	685e      	ldr	r6, [r3, #4]
 800d278:	9b02      	ldr	r3, [sp, #8]
 800d27a:	111c      	asrs	r4, r3, #4
 800d27c:	2302      	movs	r3, #2
 800d27e:	9310      	str	r3, [sp, #64]	; 0x40
 800d280:	9b02      	ldr	r3, [sp, #8]
 800d282:	05db      	lsls	r3, r3, #23
 800d284:	d50b      	bpl.n	800d29e <_dtoa_r+0x312>
 800d286:	4b22      	ldr	r3, [pc, #136]	; (800d310 <_dtoa_r+0x384>)
 800d288:	400c      	ands	r4, r1
 800d28a:	6a1a      	ldr	r2, [r3, #32]
 800d28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d28e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d290:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d292:	f7f4 fb6f 	bl	8001974 <__aeabi_ddiv>
 800d296:	2303      	movs	r3, #3
 800d298:	900a      	str	r0, [sp, #40]	; 0x28
 800d29a:	910b      	str	r1, [sp, #44]	; 0x2c
 800d29c:	9310      	str	r3, [sp, #64]	; 0x40
 800d29e:	4b1c      	ldr	r3, [pc, #112]	; (800d310 <_dtoa_r+0x384>)
 800d2a0:	9307      	str	r3, [sp, #28]
 800d2a2:	2c00      	cmp	r4, #0
 800d2a4:	d136      	bne.n	800d314 <_dtoa_r+0x388>
 800d2a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d2a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2aa:	002a      	movs	r2, r5
 800d2ac:	0033      	movs	r3, r6
 800d2ae:	f7f4 fb61 	bl	8001974 <__aeabi_ddiv>
 800d2b2:	900a      	str	r0, [sp, #40]	; 0x28
 800d2b4:	910b      	str	r1, [sp, #44]	; 0x2c
 800d2b6:	e05c      	b.n	800d372 <_dtoa_r+0x3e6>
 800d2b8:	08012091 	.word	0x08012091
 800d2bc:	080120a8 	.word	0x080120a8
 800d2c0:	7ff00000 	.word	0x7ff00000
 800d2c4:	0000270f 	.word	0x0000270f
 800d2c8:	0801208d 	.word	0x0801208d
 800d2cc:	08012090 	.word	0x08012090
 800d2d0:	08012060 	.word	0x08012060
 800d2d4:	08012061 	.word	0x08012061
 800d2d8:	3ff00000 	.word	0x3ff00000
 800d2dc:	fffffc01 	.word	0xfffffc01
 800d2e0:	3ff80000 	.word	0x3ff80000
 800d2e4:	636f4361 	.word	0x636f4361
 800d2e8:	3fd287a7 	.word	0x3fd287a7
 800d2ec:	8b60c8b3 	.word	0x8b60c8b3
 800d2f0:	3fc68a28 	.word	0x3fc68a28
 800d2f4:	509f79fb 	.word	0x509f79fb
 800d2f8:	3fd34413 	.word	0x3fd34413
 800d2fc:	080121a0 	.word	0x080121a0
 800d300:	00000432 	.word	0x00000432
 800d304:	00000412 	.word	0x00000412
 800d308:	fe100000 	.word	0xfe100000
 800d30c:	08012107 	.word	0x08012107
 800d310:	08012178 	.word	0x08012178
 800d314:	2301      	movs	r3, #1
 800d316:	421c      	tst	r4, r3
 800d318:	d00b      	beq.n	800d332 <_dtoa_r+0x3a6>
 800d31a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d31c:	0028      	movs	r0, r5
 800d31e:	3301      	adds	r3, #1
 800d320:	9310      	str	r3, [sp, #64]	; 0x40
 800d322:	9b07      	ldr	r3, [sp, #28]
 800d324:	0031      	movs	r1, r6
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	f7f4 ff29 	bl	8002180 <__aeabi_dmul>
 800d32e:	0005      	movs	r5, r0
 800d330:	000e      	movs	r6, r1
 800d332:	9b07      	ldr	r3, [sp, #28]
 800d334:	1064      	asrs	r4, r4, #1
 800d336:	3308      	adds	r3, #8
 800d338:	e7b2      	b.n	800d2a0 <_dtoa_r+0x314>
 800d33a:	2302      	movs	r3, #2
 800d33c:	9310      	str	r3, [sp, #64]	; 0x40
 800d33e:	9b02      	ldr	r3, [sp, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d016      	beq.n	800d372 <_dtoa_r+0x3e6>
 800d344:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d346:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d348:	425c      	negs	r4, r3
 800d34a:	230f      	movs	r3, #15
 800d34c:	4ab5      	ldr	r2, [pc, #724]	; (800d624 <_dtoa_r+0x698>)
 800d34e:	4023      	ands	r3, r4
 800d350:	00db      	lsls	r3, r3, #3
 800d352:	18d3      	adds	r3, r2, r3
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	f7f4 ff12 	bl	8002180 <__aeabi_dmul>
 800d35c:	2601      	movs	r6, #1
 800d35e:	2300      	movs	r3, #0
 800d360:	900a      	str	r0, [sp, #40]	; 0x28
 800d362:	910b      	str	r1, [sp, #44]	; 0x2c
 800d364:	4db0      	ldr	r5, [pc, #704]	; (800d628 <_dtoa_r+0x69c>)
 800d366:	1124      	asrs	r4, r4, #4
 800d368:	2c00      	cmp	r4, #0
 800d36a:	d000      	beq.n	800d36e <_dtoa_r+0x3e2>
 800d36c:	e094      	b.n	800d498 <_dtoa_r+0x50c>
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d19f      	bne.n	800d2b2 <_dtoa_r+0x326>
 800d372:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d374:	2b00      	cmp	r3, #0
 800d376:	d100      	bne.n	800d37a <_dtoa_r+0x3ee>
 800d378:	e09b      	b.n	800d4b2 <_dtoa_r+0x526>
 800d37a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d37c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d37e:	2200      	movs	r2, #0
 800d380:	0020      	movs	r0, r4
 800d382:	0029      	movs	r1, r5
 800d384:	4ba9      	ldr	r3, [pc, #676]	; (800d62c <_dtoa_r+0x6a0>)
 800d386:	f7f3 f863 	bl	8000450 <__aeabi_dcmplt>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d100      	bne.n	800d390 <_dtoa_r+0x404>
 800d38e:	e090      	b.n	800d4b2 <_dtoa_r+0x526>
 800d390:	9b06      	ldr	r3, [sp, #24]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d100      	bne.n	800d398 <_dtoa_r+0x40c>
 800d396:	e08c      	b.n	800d4b2 <_dtoa_r+0x526>
 800d398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	dd46      	ble.n	800d42c <_dtoa_r+0x4a0>
 800d39e:	9b02      	ldr	r3, [sp, #8]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	0020      	movs	r0, r4
 800d3a4:	0029      	movs	r1, r5
 800d3a6:	1e5e      	subs	r6, r3, #1
 800d3a8:	4ba1      	ldr	r3, [pc, #644]	; (800d630 <_dtoa_r+0x6a4>)
 800d3aa:	f7f4 fee9 	bl	8002180 <__aeabi_dmul>
 800d3ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3b0:	900a      	str	r0, [sp, #40]	; 0x28
 800d3b2:	910b      	str	r1, [sp, #44]	; 0x2c
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	9310      	str	r3, [sp, #64]	; 0x40
 800d3b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d3bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d3be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d3c0:	9307      	str	r3, [sp, #28]
 800d3c2:	f7f5 fd2f 	bl	8002e24 <__aeabi_i2d>
 800d3c6:	0022      	movs	r2, r4
 800d3c8:	002b      	movs	r3, r5
 800d3ca:	f7f4 fed9 	bl	8002180 <__aeabi_dmul>
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	4b98      	ldr	r3, [pc, #608]	; (800d634 <_dtoa_r+0x6a8>)
 800d3d2:	f7f3 ff65 	bl	80012a0 <__aeabi_dadd>
 800d3d6:	9010      	str	r0, [sp, #64]	; 0x40
 800d3d8:	9111      	str	r1, [sp, #68]	; 0x44
 800d3da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d3dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3de:	920a      	str	r2, [sp, #40]	; 0x28
 800d3e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3e2:	4a95      	ldr	r2, [pc, #596]	; (800d638 <_dtoa_r+0x6ac>)
 800d3e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3e6:	4694      	mov	ip, r2
 800d3e8:	4463      	add	r3, ip
 800d3ea:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3ee:	9b07      	ldr	r3, [sp, #28]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d161      	bne.n	800d4b8 <_dtoa_r+0x52c>
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	0020      	movs	r0, r4
 800d3f8:	0029      	movs	r1, r5
 800d3fa:	4b90      	ldr	r3, [pc, #576]	; (800d63c <_dtoa_r+0x6b0>)
 800d3fc:	f7f5 f92c 	bl	8002658 <__aeabi_dsub>
 800d400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d402:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d404:	0004      	movs	r4, r0
 800d406:	000d      	movs	r5, r1
 800d408:	f7f3 f836 	bl	8000478 <__aeabi_dcmpgt>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d000      	beq.n	800d412 <_dtoa_r+0x486>
 800d410:	e2b5      	b.n	800d97e <_dtoa_r+0x9f2>
 800d412:	488b      	ldr	r0, [pc, #556]	; (800d640 <_dtoa_r+0x6b4>)
 800d414:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d416:	4684      	mov	ip, r0
 800d418:	4461      	add	r1, ip
 800d41a:	000b      	movs	r3, r1
 800d41c:	0020      	movs	r0, r4
 800d41e:	0029      	movs	r1, r5
 800d420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d422:	f7f3 f815 	bl	8000450 <__aeabi_dcmplt>
 800d426:	2800      	cmp	r0, #0
 800d428:	d000      	beq.n	800d42c <_dtoa_r+0x4a0>
 800d42a:	e2a5      	b.n	800d978 <_dtoa_r+0x9ec>
 800d42c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d42e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800d430:	930a      	str	r3, [sp, #40]	; 0x28
 800d432:	940b      	str	r4, [sp, #44]	; 0x2c
 800d434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d436:	2b00      	cmp	r3, #0
 800d438:	da00      	bge.n	800d43c <_dtoa_r+0x4b0>
 800d43a:	e171      	b.n	800d720 <_dtoa_r+0x794>
 800d43c:	9a02      	ldr	r2, [sp, #8]
 800d43e:	2a0e      	cmp	r2, #14
 800d440:	dd00      	ble.n	800d444 <_dtoa_r+0x4b8>
 800d442:	e16d      	b.n	800d720 <_dtoa_r+0x794>
 800d444:	4b77      	ldr	r3, [pc, #476]	; (800d624 <_dtoa_r+0x698>)
 800d446:	00d2      	lsls	r2, r2, #3
 800d448:	189b      	adds	r3, r3, r2
 800d44a:	685c      	ldr	r4, [r3, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	9308      	str	r3, [sp, #32]
 800d450:	9409      	str	r4, [sp, #36]	; 0x24
 800d452:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d454:	2b00      	cmp	r3, #0
 800d456:	db00      	blt.n	800d45a <_dtoa_r+0x4ce>
 800d458:	e0f6      	b.n	800d648 <_dtoa_r+0x6bc>
 800d45a:	9b06      	ldr	r3, [sp, #24]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	dd00      	ble.n	800d462 <_dtoa_r+0x4d6>
 800d460:	e0f2      	b.n	800d648 <_dtoa_r+0x6bc>
 800d462:	d000      	beq.n	800d466 <_dtoa_r+0x4da>
 800d464:	e288      	b.n	800d978 <_dtoa_r+0x9ec>
 800d466:	9808      	ldr	r0, [sp, #32]
 800d468:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d46a:	2200      	movs	r2, #0
 800d46c:	4b73      	ldr	r3, [pc, #460]	; (800d63c <_dtoa_r+0x6b0>)
 800d46e:	f7f4 fe87 	bl	8002180 <__aeabi_dmul>
 800d472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d476:	f7f3 f809 	bl	800048c <__aeabi_dcmpge>
 800d47a:	9e06      	ldr	r6, [sp, #24]
 800d47c:	0035      	movs	r5, r6
 800d47e:	2800      	cmp	r0, #0
 800d480:	d000      	beq.n	800d484 <_dtoa_r+0x4f8>
 800d482:	e25f      	b.n	800d944 <_dtoa_r+0x9b8>
 800d484:	9b05      	ldr	r3, [sp, #20]
 800d486:	9a05      	ldr	r2, [sp, #20]
 800d488:	3301      	adds	r3, #1
 800d48a:	9307      	str	r3, [sp, #28]
 800d48c:	2331      	movs	r3, #49	; 0x31
 800d48e:	7013      	strb	r3, [r2, #0]
 800d490:	9b02      	ldr	r3, [sp, #8]
 800d492:	3301      	adds	r3, #1
 800d494:	9302      	str	r3, [sp, #8]
 800d496:	e25a      	b.n	800d94e <_dtoa_r+0x9c2>
 800d498:	4234      	tst	r4, r6
 800d49a:	d007      	beq.n	800d4ac <_dtoa_r+0x520>
 800d49c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d49e:	3301      	adds	r3, #1
 800d4a0:	9310      	str	r3, [sp, #64]	; 0x40
 800d4a2:	682a      	ldr	r2, [r5, #0]
 800d4a4:	686b      	ldr	r3, [r5, #4]
 800d4a6:	f7f4 fe6b 	bl	8002180 <__aeabi_dmul>
 800d4aa:	0033      	movs	r3, r6
 800d4ac:	1064      	asrs	r4, r4, #1
 800d4ae:	3508      	adds	r5, #8
 800d4b0:	e75a      	b.n	800d368 <_dtoa_r+0x3dc>
 800d4b2:	9e02      	ldr	r6, [sp, #8]
 800d4b4:	9b06      	ldr	r3, [sp, #24]
 800d4b6:	e780      	b.n	800d3ba <_dtoa_r+0x42e>
 800d4b8:	9b07      	ldr	r3, [sp, #28]
 800d4ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d4bc:	1e5a      	subs	r2, r3, #1
 800d4be:	4b59      	ldr	r3, [pc, #356]	; (800d624 <_dtoa_r+0x698>)
 800d4c0:	00d2      	lsls	r2, r2, #3
 800d4c2:	189b      	adds	r3, r3, r2
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	2900      	cmp	r1, #0
 800d4ca:	d051      	beq.n	800d570 <_dtoa_r+0x5e4>
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	495d      	ldr	r1, [pc, #372]	; (800d644 <_dtoa_r+0x6b8>)
 800d4d0:	f7f4 fa50 	bl	8001974 <__aeabi_ddiv>
 800d4d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4d8:	f7f5 f8be 	bl	8002658 <__aeabi_dsub>
 800d4dc:	9a05      	ldr	r2, [sp, #20]
 800d4de:	9b05      	ldr	r3, [sp, #20]
 800d4e0:	4694      	mov	ip, r2
 800d4e2:	9310      	str	r3, [sp, #64]	; 0x40
 800d4e4:	9b07      	ldr	r3, [sp, #28]
 800d4e6:	900a      	str	r0, [sp, #40]	; 0x28
 800d4e8:	910b      	str	r1, [sp, #44]	; 0x2c
 800d4ea:	4463      	add	r3, ip
 800d4ec:	9319      	str	r3, [sp, #100]	; 0x64
 800d4ee:	0029      	movs	r1, r5
 800d4f0:	0020      	movs	r0, r4
 800d4f2:	f7f5 fc61 	bl	8002db8 <__aeabi_d2iz>
 800d4f6:	9017      	str	r0, [sp, #92]	; 0x5c
 800d4f8:	f7f5 fc94 	bl	8002e24 <__aeabi_i2d>
 800d4fc:	0002      	movs	r2, r0
 800d4fe:	000b      	movs	r3, r1
 800d500:	0020      	movs	r0, r4
 800d502:	0029      	movs	r1, r5
 800d504:	f7f5 f8a8 	bl	8002658 <__aeabi_dsub>
 800d508:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d50a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d50c:	3301      	adds	r3, #1
 800d50e:	9307      	str	r3, [sp, #28]
 800d510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d512:	0004      	movs	r4, r0
 800d514:	3330      	adds	r3, #48	; 0x30
 800d516:	7013      	strb	r3, [r2, #0]
 800d518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d51c:	000d      	movs	r5, r1
 800d51e:	f7f2 ff97 	bl	8000450 <__aeabi_dcmplt>
 800d522:	2800      	cmp	r0, #0
 800d524:	d175      	bne.n	800d612 <_dtoa_r+0x686>
 800d526:	0022      	movs	r2, r4
 800d528:	002b      	movs	r3, r5
 800d52a:	2000      	movs	r0, #0
 800d52c:	493f      	ldr	r1, [pc, #252]	; (800d62c <_dtoa_r+0x6a0>)
 800d52e:	f7f5 f893 	bl	8002658 <__aeabi_dsub>
 800d532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d536:	f7f2 ff8b 	bl	8000450 <__aeabi_dcmplt>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d000      	beq.n	800d540 <_dtoa_r+0x5b4>
 800d53e:	e0d1      	b.n	800d6e4 <_dtoa_r+0x758>
 800d540:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d542:	9a07      	ldr	r2, [sp, #28]
 800d544:	4293      	cmp	r3, r2
 800d546:	d100      	bne.n	800d54a <_dtoa_r+0x5be>
 800d548:	e770      	b.n	800d42c <_dtoa_r+0x4a0>
 800d54a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d54c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d54e:	2200      	movs	r2, #0
 800d550:	4b37      	ldr	r3, [pc, #220]	; (800d630 <_dtoa_r+0x6a4>)
 800d552:	f7f4 fe15 	bl	8002180 <__aeabi_dmul>
 800d556:	4b36      	ldr	r3, [pc, #216]	; (800d630 <_dtoa_r+0x6a4>)
 800d558:	900a      	str	r0, [sp, #40]	; 0x28
 800d55a:	910b      	str	r1, [sp, #44]	; 0x2c
 800d55c:	2200      	movs	r2, #0
 800d55e:	0020      	movs	r0, r4
 800d560:	0029      	movs	r1, r5
 800d562:	f7f4 fe0d 	bl	8002180 <__aeabi_dmul>
 800d566:	9b07      	ldr	r3, [sp, #28]
 800d568:	0004      	movs	r4, r0
 800d56a:	000d      	movs	r5, r1
 800d56c:	9310      	str	r3, [sp, #64]	; 0x40
 800d56e:	e7be      	b.n	800d4ee <_dtoa_r+0x562>
 800d570:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d574:	f7f4 fe04 	bl	8002180 <__aeabi_dmul>
 800d578:	9a05      	ldr	r2, [sp, #20]
 800d57a:	9b05      	ldr	r3, [sp, #20]
 800d57c:	4694      	mov	ip, r2
 800d57e:	930a      	str	r3, [sp, #40]	; 0x28
 800d580:	9b07      	ldr	r3, [sp, #28]
 800d582:	9010      	str	r0, [sp, #64]	; 0x40
 800d584:	9111      	str	r1, [sp, #68]	; 0x44
 800d586:	4463      	add	r3, ip
 800d588:	9319      	str	r3, [sp, #100]	; 0x64
 800d58a:	0029      	movs	r1, r5
 800d58c:	0020      	movs	r0, r4
 800d58e:	f7f5 fc13 	bl	8002db8 <__aeabi_d2iz>
 800d592:	9017      	str	r0, [sp, #92]	; 0x5c
 800d594:	f7f5 fc46 	bl	8002e24 <__aeabi_i2d>
 800d598:	0002      	movs	r2, r0
 800d59a:	000b      	movs	r3, r1
 800d59c:	0020      	movs	r0, r4
 800d59e:	0029      	movs	r1, r5
 800d5a0:	f7f5 f85a 	bl	8002658 <__aeabi_dsub>
 800d5a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5a8:	3330      	adds	r3, #48	; 0x30
 800d5aa:	7013      	strb	r3, [r2, #0]
 800d5ac:	0013      	movs	r3, r2
 800d5ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	0004      	movs	r4, r0
 800d5b4:	000d      	movs	r5, r1
 800d5b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d12c      	bne.n	800d616 <_dtoa_r+0x68a>
 800d5bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d5be:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d5c0:	9a05      	ldr	r2, [sp, #20]
 800d5c2:	9b07      	ldr	r3, [sp, #28]
 800d5c4:	4694      	mov	ip, r2
 800d5c6:	4463      	add	r3, ip
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	9307      	str	r3, [sp, #28]
 800d5cc:	4b1d      	ldr	r3, [pc, #116]	; (800d644 <_dtoa_r+0x6b8>)
 800d5ce:	f7f3 fe67 	bl	80012a0 <__aeabi_dadd>
 800d5d2:	0002      	movs	r2, r0
 800d5d4:	000b      	movs	r3, r1
 800d5d6:	0020      	movs	r0, r4
 800d5d8:	0029      	movs	r1, r5
 800d5da:	f7f2 ff4d 	bl	8000478 <__aeabi_dcmpgt>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d000      	beq.n	800d5e4 <_dtoa_r+0x658>
 800d5e2:	e07f      	b.n	800d6e4 <_dtoa_r+0x758>
 800d5e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d5e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	4916      	ldr	r1, [pc, #88]	; (800d644 <_dtoa_r+0x6b8>)
 800d5ec:	f7f5 f834 	bl	8002658 <__aeabi_dsub>
 800d5f0:	0002      	movs	r2, r0
 800d5f2:	000b      	movs	r3, r1
 800d5f4:	0020      	movs	r0, r4
 800d5f6:	0029      	movs	r1, r5
 800d5f8:	f7f2 ff2a 	bl	8000450 <__aeabi_dcmplt>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d100      	bne.n	800d602 <_dtoa_r+0x676>
 800d600:	e714      	b.n	800d42c <_dtoa_r+0x4a0>
 800d602:	9b07      	ldr	r3, [sp, #28]
 800d604:	001a      	movs	r2, r3
 800d606:	3a01      	subs	r2, #1
 800d608:	9207      	str	r2, [sp, #28]
 800d60a:	7812      	ldrb	r2, [r2, #0]
 800d60c:	2a30      	cmp	r2, #48	; 0x30
 800d60e:	d0f8      	beq.n	800d602 <_dtoa_r+0x676>
 800d610:	9307      	str	r3, [sp, #28]
 800d612:	9602      	str	r6, [sp, #8]
 800d614:	e054      	b.n	800d6c0 <_dtoa_r+0x734>
 800d616:	2200      	movs	r2, #0
 800d618:	4b05      	ldr	r3, [pc, #20]	; (800d630 <_dtoa_r+0x6a4>)
 800d61a:	f7f4 fdb1 	bl	8002180 <__aeabi_dmul>
 800d61e:	0004      	movs	r4, r0
 800d620:	000d      	movs	r5, r1
 800d622:	e7b2      	b.n	800d58a <_dtoa_r+0x5fe>
 800d624:	080121a0 	.word	0x080121a0
 800d628:	08012178 	.word	0x08012178
 800d62c:	3ff00000 	.word	0x3ff00000
 800d630:	40240000 	.word	0x40240000
 800d634:	401c0000 	.word	0x401c0000
 800d638:	fcc00000 	.word	0xfcc00000
 800d63c:	40140000 	.word	0x40140000
 800d640:	7cc00000 	.word	0x7cc00000
 800d644:	3fe00000 	.word	0x3fe00000
 800d648:	9b06      	ldr	r3, [sp, #24]
 800d64a:	9e05      	ldr	r6, [sp, #20]
 800d64c:	3b01      	subs	r3, #1
 800d64e:	199b      	adds	r3, r3, r6
 800d650:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d652:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d654:	930a      	str	r3, [sp, #40]	; 0x28
 800d656:	9a08      	ldr	r2, [sp, #32]
 800d658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d65a:	0020      	movs	r0, r4
 800d65c:	0029      	movs	r1, r5
 800d65e:	f7f4 f989 	bl	8001974 <__aeabi_ddiv>
 800d662:	f7f5 fba9 	bl	8002db8 <__aeabi_d2iz>
 800d666:	9006      	str	r0, [sp, #24]
 800d668:	f7f5 fbdc 	bl	8002e24 <__aeabi_i2d>
 800d66c:	9a08      	ldr	r2, [sp, #32]
 800d66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d670:	f7f4 fd86 	bl	8002180 <__aeabi_dmul>
 800d674:	0002      	movs	r2, r0
 800d676:	000b      	movs	r3, r1
 800d678:	0020      	movs	r0, r4
 800d67a:	0029      	movs	r1, r5
 800d67c:	f7f4 ffec 	bl	8002658 <__aeabi_dsub>
 800d680:	0033      	movs	r3, r6
 800d682:	9a06      	ldr	r2, [sp, #24]
 800d684:	3601      	adds	r6, #1
 800d686:	3230      	adds	r2, #48	; 0x30
 800d688:	701a      	strb	r2, [r3, #0]
 800d68a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d68c:	9607      	str	r6, [sp, #28]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d139      	bne.n	800d706 <_dtoa_r+0x77a>
 800d692:	0002      	movs	r2, r0
 800d694:	000b      	movs	r3, r1
 800d696:	f7f3 fe03 	bl	80012a0 <__aeabi_dadd>
 800d69a:	9a08      	ldr	r2, [sp, #32]
 800d69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d69e:	0004      	movs	r4, r0
 800d6a0:	000d      	movs	r5, r1
 800d6a2:	f7f2 fee9 	bl	8000478 <__aeabi_dcmpgt>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d11b      	bne.n	800d6e2 <_dtoa_r+0x756>
 800d6aa:	9a08      	ldr	r2, [sp, #32]
 800d6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ae:	0020      	movs	r0, r4
 800d6b0:	0029      	movs	r1, r5
 800d6b2:	f7f2 fec7 	bl	8000444 <__aeabi_dcmpeq>
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d002      	beq.n	800d6c0 <_dtoa_r+0x734>
 800d6ba:	9b06      	ldr	r3, [sp, #24]
 800d6bc:	07db      	lsls	r3, r3, #31
 800d6be:	d410      	bmi.n	800d6e2 <_dtoa_r+0x756>
 800d6c0:	0038      	movs	r0, r7
 800d6c2:	9904      	ldr	r1, [sp, #16]
 800d6c4:	f000 fade 	bl	800dc84 <_Bfree>
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	9a07      	ldr	r2, [sp, #28]
 800d6cc:	9802      	ldr	r0, [sp, #8]
 800d6ce:	7013      	strb	r3, [r2, #0]
 800d6d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	6018      	str	r0, [r3, #0]
 800d6d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d100      	bne.n	800d6de <_dtoa_r+0x752>
 800d6dc:	e4a3      	b.n	800d026 <_dtoa_r+0x9a>
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	e4a1      	b.n	800d026 <_dtoa_r+0x9a>
 800d6e2:	9e02      	ldr	r6, [sp, #8]
 800d6e4:	9b07      	ldr	r3, [sp, #28]
 800d6e6:	9307      	str	r3, [sp, #28]
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	781a      	ldrb	r2, [r3, #0]
 800d6ec:	2a39      	cmp	r2, #57	; 0x39
 800d6ee:	d106      	bne.n	800d6fe <_dtoa_r+0x772>
 800d6f0:	9a05      	ldr	r2, [sp, #20]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d1f7      	bne.n	800d6e6 <_dtoa_r+0x75a>
 800d6f6:	2230      	movs	r2, #48	; 0x30
 800d6f8:	9905      	ldr	r1, [sp, #20]
 800d6fa:	3601      	adds	r6, #1
 800d6fc:	700a      	strb	r2, [r1, #0]
 800d6fe:	781a      	ldrb	r2, [r3, #0]
 800d700:	3201      	adds	r2, #1
 800d702:	701a      	strb	r2, [r3, #0]
 800d704:	e785      	b.n	800d612 <_dtoa_r+0x686>
 800d706:	2200      	movs	r2, #0
 800d708:	4bad      	ldr	r3, [pc, #692]	; (800d9c0 <_dtoa_r+0xa34>)
 800d70a:	f7f4 fd39 	bl	8002180 <__aeabi_dmul>
 800d70e:	2200      	movs	r2, #0
 800d710:	2300      	movs	r3, #0
 800d712:	0004      	movs	r4, r0
 800d714:	000d      	movs	r5, r1
 800d716:	f7f2 fe95 	bl	8000444 <__aeabi_dcmpeq>
 800d71a:	2800      	cmp	r0, #0
 800d71c:	d09b      	beq.n	800d656 <_dtoa_r+0x6ca>
 800d71e:	e7cf      	b.n	800d6c0 <_dtoa_r+0x734>
 800d720:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d722:	2a00      	cmp	r2, #0
 800d724:	d100      	bne.n	800d728 <_dtoa_r+0x79c>
 800d726:	e082      	b.n	800d82e <_dtoa_r+0x8a2>
 800d728:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d72a:	2a01      	cmp	r2, #1
 800d72c:	dc66      	bgt.n	800d7fc <_dtoa_r+0x870>
 800d72e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d730:	2a00      	cmp	r2, #0
 800d732:	d05f      	beq.n	800d7f4 <_dtoa_r+0x868>
 800d734:	4aa3      	ldr	r2, [pc, #652]	; (800d9c4 <_dtoa_r+0xa38>)
 800d736:	189b      	adds	r3, r3, r2
 800d738:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d73a:	9c08      	ldr	r4, [sp, #32]
 800d73c:	9a08      	ldr	r2, [sp, #32]
 800d73e:	2101      	movs	r1, #1
 800d740:	18d2      	adds	r2, r2, r3
 800d742:	9208      	str	r2, [sp, #32]
 800d744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d746:	0038      	movs	r0, r7
 800d748:	18d3      	adds	r3, r2, r3
 800d74a:	930d      	str	r3, [sp, #52]	; 0x34
 800d74c:	f000 fb4a 	bl	800dde4 <__i2b>
 800d750:	0005      	movs	r5, r0
 800d752:	2c00      	cmp	r4, #0
 800d754:	dd0e      	ble.n	800d774 <_dtoa_r+0x7e8>
 800d756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d758:	2b00      	cmp	r3, #0
 800d75a:	dd0b      	ble.n	800d774 <_dtoa_r+0x7e8>
 800d75c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d75e:	0023      	movs	r3, r4
 800d760:	4294      	cmp	r4, r2
 800d762:	dd00      	ble.n	800d766 <_dtoa_r+0x7da>
 800d764:	0013      	movs	r3, r2
 800d766:	9a08      	ldr	r2, [sp, #32]
 800d768:	1ae4      	subs	r4, r4, r3
 800d76a:	1ad2      	subs	r2, r2, r3
 800d76c:	9208      	str	r2, [sp, #32]
 800d76e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	930d      	str	r3, [sp, #52]	; 0x34
 800d774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d776:	2b00      	cmp	r3, #0
 800d778:	d01f      	beq.n	800d7ba <_dtoa_r+0x82e>
 800d77a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d05a      	beq.n	800d836 <_dtoa_r+0x8aa>
 800d780:	2e00      	cmp	r6, #0
 800d782:	dd11      	ble.n	800d7a8 <_dtoa_r+0x81c>
 800d784:	0029      	movs	r1, r5
 800d786:	0032      	movs	r2, r6
 800d788:	0038      	movs	r0, r7
 800d78a:	f000 fbf1 	bl	800df70 <__pow5mult>
 800d78e:	9a04      	ldr	r2, [sp, #16]
 800d790:	0001      	movs	r1, r0
 800d792:	0005      	movs	r5, r0
 800d794:	0038      	movs	r0, r7
 800d796:	f000 fb3b 	bl	800de10 <__multiply>
 800d79a:	9904      	ldr	r1, [sp, #16]
 800d79c:	9007      	str	r0, [sp, #28]
 800d79e:	0038      	movs	r0, r7
 800d7a0:	f000 fa70 	bl	800dc84 <_Bfree>
 800d7a4:	9b07      	ldr	r3, [sp, #28]
 800d7a6:	9304      	str	r3, [sp, #16]
 800d7a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7aa:	1b9a      	subs	r2, r3, r6
 800d7ac:	42b3      	cmp	r3, r6
 800d7ae:	d004      	beq.n	800d7ba <_dtoa_r+0x82e>
 800d7b0:	0038      	movs	r0, r7
 800d7b2:	9904      	ldr	r1, [sp, #16]
 800d7b4:	f000 fbdc 	bl	800df70 <__pow5mult>
 800d7b8:	9004      	str	r0, [sp, #16]
 800d7ba:	2101      	movs	r1, #1
 800d7bc:	0038      	movs	r0, r7
 800d7be:	f000 fb11 	bl	800dde4 <__i2b>
 800d7c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d7c4:	0006      	movs	r6, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dd37      	ble.n	800d83a <_dtoa_r+0x8ae>
 800d7ca:	001a      	movs	r2, r3
 800d7cc:	0001      	movs	r1, r0
 800d7ce:	0038      	movs	r0, r7
 800d7d0:	f000 fbce 	bl	800df70 <__pow5mult>
 800d7d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d7d6:	0006      	movs	r6, r0
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	dd33      	ble.n	800d844 <_dtoa_r+0x8b8>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	9307      	str	r3, [sp, #28]
 800d7e0:	6933      	ldr	r3, [r6, #16]
 800d7e2:	3303      	adds	r3, #3
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	18f3      	adds	r3, r6, r3
 800d7e8:	6858      	ldr	r0, [r3, #4]
 800d7ea:	f000 fab3 	bl	800dd54 <__hi0bits>
 800d7ee:	2320      	movs	r3, #32
 800d7f0:	1a18      	subs	r0, r3, r0
 800d7f2:	e03f      	b.n	800d874 <_dtoa_r+0x8e8>
 800d7f4:	2336      	movs	r3, #54	; 0x36
 800d7f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d7f8:	1a9b      	subs	r3, r3, r2
 800d7fa:	e79d      	b.n	800d738 <_dtoa_r+0x7ac>
 800d7fc:	9b06      	ldr	r3, [sp, #24]
 800d7fe:	1e5e      	subs	r6, r3, #1
 800d800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d802:	42b3      	cmp	r3, r6
 800d804:	db08      	blt.n	800d818 <_dtoa_r+0x88c>
 800d806:	1b9e      	subs	r6, r3, r6
 800d808:	9b06      	ldr	r3, [sp, #24]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	da0c      	bge.n	800d828 <_dtoa_r+0x89c>
 800d80e:	9b08      	ldr	r3, [sp, #32]
 800d810:	9a06      	ldr	r2, [sp, #24]
 800d812:	1a9c      	subs	r4, r3, r2
 800d814:	2300      	movs	r3, #0
 800d816:	e791      	b.n	800d73c <_dtoa_r+0x7b0>
 800d818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d81a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d81c:	1af3      	subs	r3, r6, r3
 800d81e:	18d3      	adds	r3, r2, r3
 800d820:	960e      	str	r6, [sp, #56]	; 0x38
 800d822:	9314      	str	r3, [sp, #80]	; 0x50
 800d824:	2600      	movs	r6, #0
 800d826:	e7ef      	b.n	800d808 <_dtoa_r+0x87c>
 800d828:	9c08      	ldr	r4, [sp, #32]
 800d82a:	9b06      	ldr	r3, [sp, #24]
 800d82c:	e786      	b.n	800d73c <_dtoa_r+0x7b0>
 800d82e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d830:	9c08      	ldr	r4, [sp, #32]
 800d832:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d834:	e78d      	b.n	800d752 <_dtoa_r+0x7c6>
 800d836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d838:	e7ba      	b.n	800d7b0 <_dtoa_r+0x824>
 800d83a:	2300      	movs	r3, #0
 800d83c:	9307      	str	r3, [sp, #28]
 800d83e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d840:	2b01      	cmp	r3, #1
 800d842:	dc13      	bgt.n	800d86c <_dtoa_r+0x8e0>
 800d844:	2300      	movs	r3, #0
 800d846:	9307      	str	r3, [sp, #28]
 800d848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d10e      	bne.n	800d86c <_dtoa_r+0x8e0>
 800d84e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d850:	031b      	lsls	r3, r3, #12
 800d852:	d10b      	bne.n	800d86c <_dtoa_r+0x8e0>
 800d854:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d856:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d858:	4213      	tst	r3, r2
 800d85a:	d007      	beq.n	800d86c <_dtoa_r+0x8e0>
 800d85c:	9b08      	ldr	r3, [sp, #32]
 800d85e:	3301      	adds	r3, #1
 800d860:	9308      	str	r3, [sp, #32]
 800d862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d864:	3301      	adds	r3, #1
 800d866:	930d      	str	r3, [sp, #52]	; 0x34
 800d868:	2301      	movs	r3, #1
 800d86a:	9307      	str	r3, [sp, #28]
 800d86c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d86e:	2001      	movs	r0, #1
 800d870:	2b00      	cmp	r3, #0
 800d872:	d1b5      	bne.n	800d7e0 <_dtoa_r+0x854>
 800d874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d876:	221f      	movs	r2, #31
 800d878:	1818      	adds	r0, r3, r0
 800d87a:	0003      	movs	r3, r0
 800d87c:	4013      	ands	r3, r2
 800d87e:	4210      	tst	r0, r2
 800d880:	d046      	beq.n	800d910 <_dtoa_r+0x984>
 800d882:	3201      	adds	r2, #1
 800d884:	1ad2      	subs	r2, r2, r3
 800d886:	2a04      	cmp	r2, #4
 800d888:	dd3f      	ble.n	800d90a <_dtoa_r+0x97e>
 800d88a:	221c      	movs	r2, #28
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	9a08      	ldr	r2, [sp, #32]
 800d890:	18e4      	adds	r4, r4, r3
 800d892:	18d2      	adds	r2, r2, r3
 800d894:	9208      	str	r2, [sp, #32]
 800d896:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d898:	18d3      	adds	r3, r2, r3
 800d89a:	930d      	str	r3, [sp, #52]	; 0x34
 800d89c:	9b08      	ldr	r3, [sp, #32]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	dd05      	ble.n	800d8ae <_dtoa_r+0x922>
 800d8a2:	001a      	movs	r2, r3
 800d8a4:	0038      	movs	r0, r7
 800d8a6:	9904      	ldr	r1, [sp, #16]
 800d8a8:	f000 fbbe 	bl	800e028 <__lshift>
 800d8ac:	9004      	str	r0, [sp, #16]
 800d8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	dd05      	ble.n	800d8c0 <_dtoa_r+0x934>
 800d8b4:	0031      	movs	r1, r6
 800d8b6:	001a      	movs	r2, r3
 800d8b8:	0038      	movs	r0, r7
 800d8ba:	f000 fbb5 	bl	800e028 <__lshift>
 800d8be:	0006      	movs	r6, r0
 800d8c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d026      	beq.n	800d914 <_dtoa_r+0x988>
 800d8c6:	0031      	movs	r1, r6
 800d8c8:	9804      	ldr	r0, [sp, #16]
 800d8ca:	f000 fc1d 	bl	800e108 <__mcmp>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	da20      	bge.n	800d914 <_dtoa_r+0x988>
 800d8d2:	9b02      	ldr	r3, [sp, #8]
 800d8d4:	220a      	movs	r2, #10
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	9302      	str	r3, [sp, #8]
 800d8da:	0038      	movs	r0, r7
 800d8dc:	2300      	movs	r3, #0
 800d8de:	9904      	ldr	r1, [sp, #16]
 800d8e0:	f000 f9f4 	bl	800dccc <__multadd>
 800d8e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8e6:	9004      	str	r0, [sp, #16]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d100      	bne.n	800d8ee <_dtoa_r+0x962>
 800d8ec:	e160      	b.n	800dbb0 <_dtoa_r+0xc24>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	0029      	movs	r1, r5
 800d8f2:	220a      	movs	r2, #10
 800d8f4:	0038      	movs	r0, r7
 800d8f6:	f000 f9e9 	bl	800dccc <__multadd>
 800d8fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8fc:	0005      	movs	r5, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	dc47      	bgt.n	800d992 <_dtoa_r+0xa06>
 800d902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d904:	2b02      	cmp	r3, #2
 800d906:	dc0d      	bgt.n	800d924 <_dtoa_r+0x998>
 800d908:	e043      	b.n	800d992 <_dtoa_r+0xa06>
 800d90a:	2a04      	cmp	r2, #4
 800d90c:	d0c6      	beq.n	800d89c <_dtoa_r+0x910>
 800d90e:	0013      	movs	r3, r2
 800d910:	331c      	adds	r3, #28
 800d912:	e7bc      	b.n	800d88e <_dtoa_r+0x902>
 800d914:	9b06      	ldr	r3, [sp, #24]
 800d916:	2b00      	cmp	r3, #0
 800d918:	dc35      	bgt.n	800d986 <_dtoa_r+0x9fa>
 800d91a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d91c:	2b02      	cmp	r3, #2
 800d91e:	dd32      	ble.n	800d986 <_dtoa_r+0x9fa>
 800d920:	9b06      	ldr	r3, [sp, #24]
 800d922:	930c      	str	r3, [sp, #48]	; 0x30
 800d924:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10c      	bne.n	800d944 <_dtoa_r+0x9b8>
 800d92a:	0031      	movs	r1, r6
 800d92c:	2205      	movs	r2, #5
 800d92e:	0038      	movs	r0, r7
 800d930:	f000 f9cc 	bl	800dccc <__multadd>
 800d934:	0006      	movs	r6, r0
 800d936:	0001      	movs	r1, r0
 800d938:	9804      	ldr	r0, [sp, #16]
 800d93a:	f000 fbe5 	bl	800e108 <__mcmp>
 800d93e:	2800      	cmp	r0, #0
 800d940:	dd00      	ble.n	800d944 <_dtoa_r+0x9b8>
 800d942:	e59f      	b.n	800d484 <_dtoa_r+0x4f8>
 800d944:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d946:	43db      	mvns	r3, r3
 800d948:	9302      	str	r3, [sp, #8]
 800d94a:	9b05      	ldr	r3, [sp, #20]
 800d94c:	9307      	str	r3, [sp, #28]
 800d94e:	2400      	movs	r4, #0
 800d950:	0031      	movs	r1, r6
 800d952:	0038      	movs	r0, r7
 800d954:	f000 f996 	bl	800dc84 <_Bfree>
 800d958:	2d00      	cmp	r5, #0
 800d95a:	d100      	bne.n	800d95e <_dtoa_r+0x9d2>
 800d95c:	e6b0      	b.n	800d6c0 <_dtoa_r+0x734>
 800d95e:	2c00      	cmp	r4, #0
 800d960:	d005      	beq.n	800d96e <_dtoa_r+0x9e2>
 800d962:	42ac      	cmp	r4, r5
 800d964:	d003      	beq.n	800d96e <_dtoa_r+0x9e2>
 800d966:	0021      	movs	r1, r4
 800d968:	0038      	movs	r0, r7
 800d96a:	f000 f98b 	bl	800dc84 <_Bfree>
 800d96e:	0029      	movs	r1, r5
 800d970:	0038      	movs	r0, r7
 800d972:	f000 f987 	bl	800dc84 <_Bfree>
 800d976:	e6a3      	b.n	800d6c0 <_dtoa_r+0x734>
 800d978:	2600      	movs	r6, #0
 800d97a:	0035      	movs	r5, r6
 800d97c:	e7e2      	b.n	800d944 <_dtoa_r+0x9b8>
 800d97e:	9602      	str	r6, [sp, #8]
 800d980:	9e07      	ldr	r6, [sp, #28]
 800d982:	0035      	movs	r5, r6
 800d984:	e57e      	b.n	800d484 <_dtoa_r+0x4f8>
 800d986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d100      	bne.n	800d98e <_dtoa_r+0xa02>
 800d98c:	e0c8      	b.n	800db20 <_dtoa_r+0xb94>
 800d98e:	9b06      	ldr	r3, [sp, #24]
 800d990:	930c      	str	r3, [sp, #48]	; 0x30
 800d992:	2c00      	cmp	r4, #0
 800d994:	dd05      	ble.n	800d9a2 <_dtoa_r+0xa16>
 800d996:	0029      	movs	r1, r5
 800d998:	0022      	movs	r2, r4
 800d99a:	0038      	movs	r0, r7
 800d99c:	f000 fb44 	bl	800e028 <__lshift>
 800d9a0:	0005      	movs	r5, r0
 800d9a2:	9b07      	ldr	r3, [sp, #28]
 800d9a4:	0028      	movs	r0, r5
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d01f      	beq.n	800d9ea <_dtoa_r+0xa5e>
 800d9aa:	0038      	movs	r0, r7
 800d9ac:	6869      	ldr	r1, [r5, #4]
 800d9ae:	f000 f925 	bl	800dbfc <_Balloc>
 800d9b2:	1e04      	subs	r4, r0, #0
 800d9b4:	d10c      	bne.n	800d9d0 <_dtoa_r+0xa44>
 800d9b6:	0002      	movs	r2, r0
 800d9b8:	4b03      	ldr	r3, [pc, #12]	; (800d9c8 <_dtoa_r+0xa3c>)
 800d9ba:	4904      	ldr	r1, [pc, #16]	; (800d9cc <_dtoa_r+0xa40>)
 800d9bc:	f7ff fafb 	bl	800cfb6 <_dtoa_r+0x2a>
 800d9c0:	40240000 	.word	0x40240000
 800d9c4:	00000433 	.word	0x00000433
 800d9c8:	08012107 	.word	0x08012107
 800d9cc:	000002ea 	.word	0x000002ea
 800d9d0:	0029      	movs	r1, r5
 800d9d2:	692b      	ldr	r3, [r5, #16]
 800d9d4:	310c      	adds	r1, #12
 800d9d6:	1c9a      	adds	r2, r3, #2
 800d9d8:	0092      	lsls	r2, r2, #2
 800d9da:	300c      	adds	r0, #12
 800d9dc:	f7fe fd9e 	bl	800c51c <memcpy>
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	0021      	movs	r1, r4
 800d9e4:	0038      	movs	r0, r7
 800d9e6:	f000 fb1f 	bl	800e028 <__lshift>
 800d9ea:	002c      	movs	r4, r5
 800d9ec:	0005      	movs	r5, r0
 800d9ee:	9b05      	ldr	r3, [sp, #20]
 800d9f0:	9308      	str	r3, [sp, #32]
 800d9f2:	0031      	movs	r1, r6
 800d9f4:	9804      	ldr	r0, [sp, #16]
 800d9f6:	f7ff fa3d 	bl	800ce74 <quorem>
 800d9fa:	0003      	movs	r3, r0
 800d9fc:	0021      	movs	r1, r4
 800d9fe:	3330      	adds	r3, #48	; 0x30
 800da00:	900e      	str	r0, [sp, #56]	; 0x38
 800da02:	9804      	ldr	r0, [sp, #16]
 800da04:	9306      	str	r3, [sp, #24]
 800da06:	f000 fb7f 	bl	800e108 <__mcmp>
 800da0a:	002a      	movs	r2, r5
 800da0c:	900f      	str	r0, [sp, #60]	; 0x3c
 800da0e:	0031      	movs	r1, r6
 800da10:	0038      	movs	r0, r7
 800da12:	f000 fb95 	bl	800e140 <__mdiff>
 800da16:	68c3      	ldr	r3, [r0, #12]
 800da18:	9007      	str	r0, [sp, #28]
 800da1a:	9310      	str	r3, [sp, #64]	; 0x40
 800da1c:	2301      	movs	r3, #1
 800da1e:	930d      	str	r3, [sp, #52]	; 0x34
 800da20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da22:	2b00      	cmp	r3, #0
 800da24:	d104      	bne.n	800da30 <_dtoa_r+0xaa4>
 800da26:	0001      	movs	r1, r0
 800da28:	9804      	ldr	r0, [sp, #16]
 800da2a:	f000 fb6d 	bl	800e108 <__mcmp>
 800da2e:	900d      	str	r0, [sp, #52]	; 0x34
 800da30:	0038      	movs	r0, r7
 800da32:	9907      	ldr	r1, [sp, #28]
 800da34:	f000 f926 	bl	800dc84 <_Bfree>
 800da38:	2301      	movs	r3, #1
 800da3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da3e:	4018      	ands	r0, r3
 800da40:	9b08      	ldr	r3, [sp, #32]
 800da42:	3301      	adds	r3, #1
 800da44:	9307      	str	r3, [sp, #28]
 800da46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da48:	4313      	orrs	r3, r2
 800da4a:	4303      	orrs	r3, r0
 800da4c:	d10c      	bne.n	800da68 <_dtoa_r+0xadc>
 800da4e:	9b06      	ldr	r3, [sp, #24]
 800da50:	2b39      	cmp	r3, #57	; 0x39
 800da52:	d025      	beq.n	800daa0 <_dtoa_r+0xb14>
 800da54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da56:	2b00      	cmp	r3, #0
 800da58:	dd02      	ble.n	800da60 <_dtoa_r+0xad4>
 800da5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da5c:	3331      	adds	r3, #49	; 0x31
 800da5e:	9306      	str	r3, [sp, #24]
 800da60:	9b08      	ldr	r3, [sp, #32]
 800da62:	9a06      	ldr	r2, [sp, #24]
 800da64:	701a      	strb	r2, [r3, #0]
 800da66:	e773      	b.n	800d950 <_dtoa_r+0x9c4>
 800da68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	db03      	blt.n	800da76 <_dtoa_r+0xaea>
 800da6e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800da70:	4313      	orrs	r3, r2
 800da72:	4303      	orrs	r3, r0
 800da74:	d11f      	bne.n	800dab6 <_dtoa_r+0xb2a>
 800da76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da78:	2b00      	cmp	r3, #0
 800da7a:	ddf1      	ble.n	800da60 <_dtoa_r+0xad4>
 800da7c:	9904      	ldr	r1, [sp, #16]
 800da7e:	2201      	movs	r2, #1
 800da80:	0038      	movs	r0, r7
 800da82:	f000 fad1 	bl	800e028 <__lshift>
 800da86:	0031      	movs	r1, r6
 800da88:	9004      	str	r0, [sp, #16]
 800da8a:	f000 fb3d 	bl	800e108 <__mcmp>
 800da8e:	2800      	cmp	r0, #0
 800da90:	dc03      	bgt.n	800da9a <_dtoa_r+0xb0e>
 800da92:	d1e5      	bne.n	800da60 <_dtoa_r+0xad4>
 800da94:	9b06      	ldr	r3, [sp, #24]
 800da96:	07db      	lsls	r3, r3, #31
 800da98:	d5e2      	bpl.n	800da60 <_dtoa_r+0xad4>
 800da9a:	9b06      	ldr	r3, [sp, #24]
 800da9c:	2b39      	cmp	r3, #57	; 0x39
 800da9e:	d1dc      	bne.n	800da5a <_dtoa_r+0xace>
 800daa0:	2339      	movs	r3, #57	; 0x39
 800daa2:	9a08      	ldr	r2, [sp, #32]
 800daa4:	7013      	strb	r3, [r2, #0]
 800daa6:	9b07      	ldr	r3, [sp, #28]
 800daa8:	9307      	str	r3, [sp, #28]
 800daaa:	3b01      	subs	r3, #1
 800daac:	781a      	ldrb	r2, [r3, #0]
 800daae:	2a39      	cmp	r2, #57	; 0x39
 800dab0:	d06c      	beq.n	800db8c <_dtoa_r+0xc00>
 800dab2:	3201      	adds	r2, #1
 800dab4:	e7d6      	b.n	800da64 <_dtoa_r+0xad8>
 800dab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dab8:	2b00      	cmp	r3, #0
 800daba:	dd07      	ble.n	800dacc <_dtoa_r+0xb40>
 800dabc:	9b06      	ldr	r3, [sp, #24]
 800dabe:	2b39      	cmp	r3, #57	; 0x39
 800dac0:	d0ee      	beq.n	800daa0 <_dtoa_r+0xb14>
 800dac2:	9b06      	ldr	r3, [sp, #24]
 800dac4:	9a08      	ldr	r2, [sp, #32]
 800dac6:	3301      	adds	r3, #1
 800dac8:	7013      	strb	r3, [r2, #0]
 800daca:	e741      	b.n	800d950 <_dtoa_r+0x9c4>
 800dacc:	9b08      	ldr	r3, [sp, #32]
 800dace:	9a06      	ldr	r2, [sp, #24]
 800dad0:	701a      	strb	r2, [r3, #0]
 800dad2:	2301      	movs	r3, #1
 800dad4:	9a05      	ldr	r2, [sp, #20]
 800dad6:	1a9b      	subs	r3, r3, r2
 800dad8:	9a08      	ldr	r2, [sp, #32]
 800dada:	189b      	adds	r3, r3, r2
 800dadc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dade:	429a      	cmp	r2, r3
 800dae0:	d03e      	beq.n	800db60 <_dtoa_r+0xbd4>
 800dae2:	2300      	movs	r3, #0
 800dae4:	220a      	movs	r2, #10
 800dae6:	9904      	ldr	r1, [sp, #16]
 800dae8:	0038      	movs	r0, r7
 800daea:	f000 f8ef 	bl	800dccc <__multadd>
 800daee:	2300      	movs	r3, #0
 800daf0:	9004      	str	r0, [sp, #16]
 800daf2:	220a      	movs	r2, #10
 800daf4:	0021      	movs	r1, r4
 800daf6:	0038      	movs	r0, r7
 800daf8:	42ac      	cmp	r4, r5
 800dafa:	d106      	bne.n	800db0a <_dtoa_r+0xb7e>
 800dafc:	f000 f8e6 	bl	800dccc <__multadd>
 800db00:	0004      	movs	r4, r0
 800db02:	0005      	movs	r5, r0
 800db04:	9b07      	ldr	r3, [sp, #28]
 800db06:	9308      	str	r3, [sp, #32]
 800db08:	e773      	b.n	800d9f2 <_dtoa_r+0xa66>
 800db0a:	f000 f8df 	bl	800dccc <__multadd>
 800db0e:	0029      	movs	r1, r5
 800db10:	0004      	movs	r4, r0
 800db12:	2300      	movs	r3, #0
 800db14:	220a      	movs	r2, #10
 800db16:	0038      	movs	r0, r7
 800db18:	f000 f8d8 	bl	800dccc <__multadd>
 800db1c:	0005      	movs	r5, r0
 800db1e:	e7f1      	b.n	800db04 <_dtoa_r+0xb78>
 800db20:	9b06      	ldr	r3, [sp, #24]
 800db22:	930c      	str	r3, [sp, #48]	; 0x30
 800db24:	2400      	movs	r4, #0
 800db26:	0031      	movs	r1, r6
 800db28:	9804      	ldr	r0, [sp, #16]
 800db2a:	f7ff f9a3 	bl	800ce74 <quorem>
 800db2e:	9b05      	ldr	r3, [sp, #20]
 800db30:	3030      	adds	r0, #48	; 0x30
 800db32:	5518      	strb	r0, [r3, r4]
 800db34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db36:	3401      	adds	r4, #1
 800db38:	9006      	str	r0, [sp, #24]
 800db3a:	42a3      	cmp	r3, r4
 800db3c:	dd07      	ble.n	800db4e <_dtoa_r+0xbc2>
 800db3e:	2300      	movs	r3, #0
 800db40:	220a      	movs	r2, #10
 800db42:	0038      	movs	r0, r7
 800db44:	9904      	ldr	r1, [sp, #16]
 800db46:	f000 f8c1 	bl	800dccc <__multadd>
 800db4a:	9004      	str	r0, [sp, #16]
 800db4c:	e7eb      	b.n	800db26 <_dtoa_r+0xb9a>
 800db4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db50:	2001      	movs	r0, #1
 800db52:	2b00      	cmp	r3, #0
 800db54:	dd00      	ble.n	800db58 <_dtoa_r+0xbcc>
 800db56:	0018      	movs	r0, r3
 800db58:	2400      	movs	r4, #0
 800db5a:	9b05      	ldr	r3, [sp, #20]
 800db5c:	181b      	adds	r3, r3, r0
 800db5e:	9307      	str	r3, [sp, #28]
 800db60:	9904      	ldr	r1, [sp, #16]
 800db62:	2201      	movs	r2, #1
 800db64:	0038      	movs	r0, r7
 800db66:	f000 fa5f 	bl	800e028 <__lshift>
 800db6a:	0031      	movs	r1, r6
 800db6c:	9004      	str	r0, [sp, #16]
 800db6e:	f000 facb 	bl	800e108 <__mcmp>
 800db72:	2800      	cmp	r0, #0
 800db74:	dc97      	bgt.n	800daa6 <_dtoa_r+0xb1a>
 800db76:	d102      	bne.n	800db7e <_dtoa_r+0xbf2>
 800db78:	9b06      	ldr	r3, [sp, #24]
 800db7a:	07db      	lsls	r3, r3, #31
 800db7c:	d493      	bmi.n	800daa6 <_dtoa_r+0xb1a>
 800db7e:	9b07      	ldr	r3, [sp, #28]
 800db80:	9307      	str	r3, [sp, #28]
 800db82:	3b01      	subs	r3, #1
 800db84:	781a      	ldrb	r2, [r3, #0]
 800db86:	2a30      	cmp	r2, #48	; 0x30
 800db88:	d0fa      	beq.n	800db80 <_dtoa_r+0xbf4>
 800db8a:	e6e1      	b.n	800d950 <_dtoa_r+0x9c4>
 800db8c:	9a05      	ldr	r2, [sp, #20]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d18a      	bne.n	800daa8 <_dtoa_r+0xb1c>
 800db92:	9b02      	ldr	r3, [sp, #8]
 800db94:	3301      	adds	r3, #1
 800db96:	9302      	str	r3, [sp, #8]
 800db98:	2331      	movs	r3, #49	; 0x31
 800db9a:	e795      	b.n	800dac8 <_dtoa_r+0xb3c>
 800db9c:	4b08      	ldr	r3, [pc, #32]	; (800dbc0 <_dtoa_r+0xc34>)
 800db9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800dba0:	9305      	str	r3, [sp, #20]
 800dba2:	4b08      	ldr	r3, [pc, #32]	; (800dbc4 <_dtoa_r+0xc38>)
 800dba4:	2a00      	cmp	r2, #0
 800dba6:	d001      	beq.n	800dbac <_dtoa_r+0xc20>
 800dba8:	f7ff fa3b 	bl	800d022 <_dtoa_r+0x96>
 800dbac:	f7ff fa3b 	bl	800d026 <_dtoa_r+0x9a>
 800dbb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	dcb6      	bgt.n	800db24 <_dtoa_r+0xb98>
 800dbb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dbb8:	2b02      	cmp	r3, #2
 800dbba:	dd00      	ble.n	800dbbe <_dtoa_r+0xc32>
 800dbbc:	e6b2      	b.n	800d924 <_dtoa_r+0x998>
 800dbbe:	e7b1      	b.n	800db24 <_dtoa_r+0xb98>
 800dbc0:	08012084 	.word	0x08012084
 800dbc4:	0801208c 	.word	0x0801208c

0800dbc8 <_localeconv_r>:
 800dbc8:	4800      	ldr	r0, [pc, #0]	; (800dbcc <_localeconv_r+0x4>)
 800dbca:	4770      	bx	lr
 800dbcc:	20000164 	.word	0x20000164

0800dbd0 <malloc>:
 800dbd0:	b510      	push	{r4, lr}
 800dbd2:	4b03      	ldr	r3, [pc, #12]	; (800dbe0 <malloc+0x10>)
 800dbd4:	0001      	movs	r1, r0
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	f000 fc06 	bl	800e3e8 <_malloc_r>
 800dbdc:	bd10      	pop	{r4, pc}
 800dbde:	46c0      	nop			; (mov r8, r8)
 800dbe0:	20000010 	.word	0x20000010

0800dbe4 <memchr>:
 800dbe4:	b2c9      	uxtb	r1, r1
 800dbe6:	1882      	adds	r2, r0, r2
 800dbe8:	4290      	cmp	r0, r2
 800dbea:	d101      	bne.n	800dbf0 <memchr+0xc>
 800dbec:	2000      	movs	r0, #0
 800dbee:	4770      	bx	lr
 800dbf0:	7803      	ldrb	r3, [r0, #0]
 800dbf2:	428b      	cmp	r3, r1
 800dbf4:	d0fb      	beq.n	800dbee <memchr+0xa>
 800dbf6:	3001      	adds	r0, #1
 800dbf8:	e7f6      	b.n	800dbe8 <memchr+0x4>
	...

0800dbfc <_Balloc>:
 800dbfc:	b570      	push	{r4, r5, r6, lr}
 800dbfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dc00:	0006      	movs	r6, r0
 800dc02:	000c      	movs	r4, r1
 800dc04:	2d00      	cmp	r5, #0
 800dc06:	d10e      	bne.n	800dc26 <_Balloc+0x2a>
 800dc08:	2010      	movs	r0, #16
 800dc0a:	f7ff ffe1 	bl	800dbd0 <malloc>
 800dc0e:	1e02      	subs	r2, r0, #0
 800dc10:	6270      	str	r0, [r6, #36]	; 0x24
 800dc12:	d104      	bne.n	800dc1e <_Balloc+0x22>
 800dc14:	2166      	movs	r1, #102	; 0x66
 800dc16:	4b19      	ldr	r3, [pc, #100]	; (800dc7c <_Balloc+0x80>)
 800dc18:	4819      	ldr	r0, [pc, #100]	; (800dc80 <_Balloc+0x84>)
 800dc1a:	f000 fdb7 	bl	800e78c <__assert_func>
 800dc1e:	6045      	str	r5, [r0, #4]
 800dc20:	6085      	str	r5, [r0, #8]
 800dc22:	6005      	str	r5, [r0, #0]
 800dc24:	60c5      	str	r5, [r0, #12]
 800dc26:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800dc28:	68eb      	ldr	r3, [r5, #12]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d013      	beq.n	800dc56 <_Balloc+0x5a>
 800dc2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dc30:	00a2      	lsls	r2, r4, #2
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	189b      	adds	r3, r3, r2
 800dc36:	6818      	ldr	r0, [r3, #0]
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d118      	bne.n	800dc6e <_Balloc+0x72>
 800dc3c:	2101      	movs	r1, #1
 800dc3e:	000d      	movs	r5, r1
 800dc40:	40a5      	lsls	r5, r4
 800dc42:	1d6a      	adds	r2, r5, #5
 800dc44:	0030      	movs	r0, r6
 800dc46:	0092      	lsls	r2, r2, #2
 800dc48:	f000 fb76 	bl	800e338 <_calloc_r>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	d00c      	beq.n	800dc6a <_Balloc+0x6e>
 800dc50:	6044      	str	r4, [r0, #4]
 800dc52:	6085      	str	r5, [r0, #8]
 800dc54:	e00d      	b.n	800dc72 <_Balloc+0x76>
 800dc56:	2221      	movs	r2, #33	; 0x21
 800dc58:	2104      	movs	r1, #4
 800dc5a:	0030      	movs	r0, r6
 800dc5c:	f000 fb6c 	bl	800e338 <_calloc_r>
 800dc60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dc62:	60e8      	str	r0, [r5, #12]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1e1      	bne.n	800dc2e <_Balloc+0x32>
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	bd70      	pop	{r4, r5, r6, pc}
 800dc6e:	6802      	ldr	r2, [r0, #0]
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	2300      	movs	r3, #0
 800dc74:	6103      	str	r3, [r0, #16]
 800dc76:	60c3      	str	r3, [r0, #12]
 800dc78:	e7f8      	b.n	800dc6c <_Balloc+0x70>
 800dc7a:	46c0      	nop			; (mov r8, r8)
 800dc7c:	08012091 	.word	0x08012091
 800dc80:	08012118 	.word	0x08012118

0800dc84 <_Bfree>:
 800dc84:	b570      	push	{r4, r5, r6, lr}
 800dc86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc88:	0005      	movs	r5, r0
 800dc8a:	000c      	movs	r4, r1
 800dc8c:	2e00      	cmp	r6, #0
 800dc8e:	d10e      	bne.n	800dcae <_Bfree+0x2a>
 800dc90:	2010      	movs	r0, #16
 800dc92:	f7ff ff9d 	bl	800dbd0 <malloc>
 800dc96:	1e02      	subs	r2, r0, #0
 800dc98:	6268      	str	r0, [r5, #36]	; 0x24
 800dc9a:	d104      	bne.n	800dca6 <_Bfree+0x22>
 800dc9c:	218a      	movs	r1, #138	; 0x8a
 800dc9e:	4b09      	ldr	r3, [pc, #36]	; (800dcc4 <_Bfree+0x40>)
 800dca0:	4809      	ldr	r0, [pc, #36]	; (800dcc8 <_Bfree+0x44>)
 800dca2:	f000 fd73 	bl	800e78c <__assert_func>
 800dca6:	6046      	str	r6, [r0, #4]
 800dca8:	6086      	str	r6, [r0, #8]
 800dcaa:	6006      	str	r6, [r0, #0]
 800dcac:	60c6      	str	r6, [r0, #12]
 800dcae:	2c00      	cmp	r4, #0
 800dcb0:	d007      	beq.n	800dcc2 <_Bfree+0x3e>
 800dcb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dcb4:	6862      	ldr	r2, [r4, #4]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	0092      	lsls	r2, r2, #2
 800dcba:	189b      	adds	r3, r3, r2
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	6022      	str	r2, [r4, #0]
 800dcc0:	601c      	str	r4, [r3, #0]
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
 800dcc4:	08012091 	.word	0x08012091
 800dcc8:	08012118 	.word	0x08012118

0800dccc <__multadd>:
 800dccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcce:	000e      	movs	r6, r1
 800dcd0:	9001      	str	r0, [sp, #4]
 800dcd2:	000c      	movs	r4, r1
 800dcd4:	001d      	movs	r5, r3
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	690f      	ldr	r7, [r1, #16]
 800dcda:	3614      	adds	r6, #20
 800dcdc:	6833      	ldr	r3, [r6, #0]
 800dcde:	3001      	adds	r0, #1
 800dce0:	b299      	uxth	r1, r3
 800dce2:	4351      	muls	r1, r2
 800dce4:	0c1b      	lsrs	r3, r3, #16
 800dce6:	4353      	muls	r3, r2
 800dce8:	1949      	adds	r1, r1, r5
 800dcea:	0c0d      	lsrs	r5, r1, #16
 800dcec:	195b      	adds	r3, r3, r5
 800dcee:	0c1d      	lsrs	r5, r3, #16
 800dcf0:	b289      	uxth	r1, r1
 800dcf2:	041b      	lsls	r3, r3, #16
 800dcf4:	185b      	adds	r3, r3, r1
 800dcf6:	c608      	stmia	r6!, {r3}
 800dcf8:	4287      	cmp	r7, r0
 800dcfa:	dcef      	bgt.n	800dcdc <__multadd+0x10>
 800dcfc:	2d00      	cmp	r5, #0
 800dcfe:	d022      	beq.n	800dd46 <__multadd+0x7a>
 800dd00:	68a3      	ldr	r3, [r4, #8]
 800dd02:	42bb      	cmp	r3, r7
 800dd04:	dc19      	bgt.n	800dd3a <__multadd+0x6e>
 800dd06:	6863      	ldr	r3, [r4, #4]
 800dd08:	9801      	ldr	r0, [sp, #4]
 800dd0a:	1c59      	adds	r1, r3, #1
 800dd0c:	f7ff ff76 	bl	800dbfc <_Balloc>
 800dd10:	1e06      	subs	r6, r0, #0
 800dd12:	d105      	bne.n	800dd20 <__multadd+0x54>
 800dd14:	0002      	movs	r2, r0
 800dd16:	21b5      	movs	r1, #181	; 0xb5
 800dd18:	4b0c      	ldr	r3, [pc, #48]	; (800dd4c <__multadd+0x80>)
 800dd1a:	480d      	ldr	r0, [pc, #52]	; (800dd50 <__multadd+0x84>)
 800dd1c:	f000 fd36 	bl	800e78c <__assert_func>
 800dd20:	0021      	movs	r1, r4
 800dd22:	6923      	ldr	r3, [r4, #16]
 800dd24:	310c      	adds	r1, #12
 800dd26:	1c9a      	adds	r2, r3, #2
 800dd28:	0092      	lsls	r2, r2, #2
 800dd2a:	300c      	adds	r0, #12
 800dd2c:	f7fe fbf6 	bl	800c51c <memcpy>
 800dd30:	0021      	movs	r1, r4
 800dd32:	9801      	ldr	r0, [sp, #4]
 800dd34:	f7ff ffa6 	bl	800dc84 <_Bfree>
 800dd38:	0034      	movs	r4, r6
 800dd3a:	1d3b      	adds	r3, r7, #4
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	18e3      	adds	r3, r4, r3
 800dd40:	605d      	str	r5, [r3, #4]
 800dd42:	1c7b      	adds	r3, r7, #1
 800dd44:	6123      	str	r3, [r4, #16]
 800dd46:	0020      	movs	r0, r4
 800dd48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd4a:	46c0      	nop			; (mov r8, r8)
 800dd4c:	08012107 	.word	0x08012107
 800dd50:	08012118 	.word	0x08012118

0800dd54 <__hi0bits>:
 800dd54:	0003      	movs	r3, r0
 800dd56:	0c02      	lsrs	r2, r0, #16
 800dd58:	2000      	movs	r0, #0
 800dd5a:	4282      	cmp	r2, r0
 800dd5c:	d101      	bne.n	800dd62 <__hi0bits+0xe>
 800dd5e:	041b      	lsls	r3, r3, #16
 800dd60:	3010      	adds	r0, #16
 800dd62:	0e1a      	lsrs	r2, r3, #24
 800dd64:	d101      	bne.n	800dd6a <__hi0bits+0x16>
 800dd66:	3008      	adds	r0, #8
 800dd68:	021b      	lsls	r3, r3, #8
 800dd6a:	0f1a      	lsrs	r2, r3, #28
 800dd6c:	d101      	bne.n	800dd72 <__hi0bits+0x1e>
 800dd6e:	3004      	adds	r0, #4
 800dd70:	011b      	lsls	r3, r3, #4
 800dd72:	0f9a      	lsrs	r2, r3, #30
 800dd74:	d101      	bne.n	800dd7a <__hi0bits+0x26>
 800dd76:	3002      	adds	r0, #2
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	db03      	blt.n	800dd86 <__hi0bits+0x32>
 800dd7e:	3001      	adds	r0, #1
 800dd80:	005b      	lsls	r3, r3, #1
 800dd82:	d400      	bmi.n	800dd86 <__hi0bits+0x32>
 800dd84:	2020      	movs	r0, #32
 800dd86:	4770      	bx	lr

0800dd88 <__lo0bits>:
 800dd88:	6803      	ldr	r3, [r0, #0]
 800dd8a:	0002      	movs	r2, r0
 800dd8c:	2107      	movs	r1, #7
 800dd8e:	0018      	movs	r0, r3
 800dd90:	4008      	ands	r0, r1
 800dd92:	420b      	tst	r3, r1
 800dd94:	d00d      	beq.n	800ddb2 <__lo0bits+0x2a>
 800dd96:	3906      	subs	r1, #6
 800dd98:	2000      	movs	r0, #0
 800dd9a:	420b      	tst	r3, r1
 800dd9c:	d105      	bne.n	800ddaa <__lo0bits+0x22>
 800dd9e:	3002      	adds	r0, #2
 800dda0:	4203      	tst	r3, r0
 800dda2:	d003      	beq.n	800ddac <__lo0bits+0x24>
 800dda4:	40cb      	lsrs	r3, r1
 800dda6:	0008      	movs	r0, r1
 800dda8:	6013      	str	r3, [r2, #0]
 800ddaa:	4770      	bx	lr
 800ddac:	089b      	lsrs	r3, r3, #2
 800ddae:	6013      	str	r3, [r2, #0]
 800ddb0:	e7fb      	b.n	800ddaa <__lo0bits+0x22>
 800ddb2:	b299      	uxth	r1, r3
 800ddb4:	2900      	cmp	r1, #0
 800ddb6:	d101      	bne.n	800ddbc <__lo0bits+0x34>
 800ddb8:	2010      	movs	r0, #16
 800ddba:	0c1b      	lsrs	r3, r3, #16
 800ddbc:	b2d9      	uxtb	r1, r3
 800ddbe:	2900      	cmp	r1, #0
 800ddc0:	d101      	bne.n	800ddc6 <__lo0bits+0x3e>
 800ddc2:	3008      	adds	r0, #8
 800ddc4:	0a1b      	lsrs	r3, r3, #8
 800ddc6:	0719      	lsls	r1, r3, #28
 800ddc8:	d101      	bne.n	800ddce <__lo0bits+0x46>
 800ddca:	3004      	adds	r0, #4
 800ddcc:	091b      	lsrs	r3, r3, #4
 800ddce:	0799      	lsls	r1, r3, #30
 800ddd0:	d101      	bne.n	800ddd6 <__lo0bits+0x4e>
 800ddd2:	3002      	adds	r0, #2
 800ddd4:	089b      	lsrs	r3, r3, #2
 800ddd6:	07d9      	lsls	r1, r3, #31
 800ddd8:	d4e9      	bmi.n	800ddae <__lo0bits+0x26>
 800ddda:	3001      	adds	r0, #1
 800dddc:	085b      	lsrs	r3, r3, #1
 800ddde:	d1e6      	bne.n	800ddae <__lo0bits+0x26>
 800dde0:	2020      	movs	r0, #32
 800dde2:	e7e2      	b.n	800ddaa <__lo0bits+0x22>

0800dde4 <__i2b>:
 800dde4:	b510      	push	{r4, lr}
 800dde6:	000c      	movs	r4, r1
 800dde8:	2101      	movs	r1, #1
 800ddea:	f7ff ff07 	bl	800dbfc <_Balloc>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d106      	bne.n	800de00 <__i2b+0x1c>
 800ddf2:	21a0      	movs	r1, #160	; 0xa0
 800ddf4:	0002      	movs	r2, r0
 800ddf6:	4b04      	ldr	r3, [pc, #16]	; (800de08 <__i2b+0x24>)
 800ddf8:	4804      	ldr	r0, [pc, #16]	; (800de0c <__i2b+0x28>)
 800ddfa:	0049      	lsls	r1, r1, #1
 800ddfc:	f000 fcc6 	bl	800e78c <__assert_func>
 800de00:	2301      	movs	r3, #1
 800de02:	6144      	str	r4, [r0, #20]
 800de04:	6103      	str	r3, [r0, #16]
 800de06:	bd10      	pop	{r4, pc}
 800de08:	08012107 	.word	0x08012107
 800de0c:	08012118 	.word	0x08012118

0800de10 <__multiply>:
 800de10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de12:	690b      	ldr	r3, [r1, #16]
 800de14:	0014      	movs	r4, r2
 800de16:	6912      	ldr	r2, [r2, #16]
 800de18:	000d      	movs	r5, r1
 800de1a:	b089      	sub	sp, #36	; 0x24
 800de1c:	4293      	cmp	r3, r2
 800de1e:	da01      	bge.n	800de24 <__multiply+0x14>
 800de20:	0025      	movs	r5, r4
 800de22:	000c      	movs	r4, r1
 800de24:	692f      	ldr	r7, [r5, #16]
 800de26:	6926      	ldr	r6, [r4, #16]
 800de28:	6869      	ldr	r1, [r5, #4]
 800de2a:	19bb      	adds	r3, r7, r6
 800de2c:	9302      	str	r3, [sp, #8]
 800de2e:	68ab      	ldr	r3, [r5, #8]
 800de30:	19ba      	adds	r2, r7, r6
 800de32:	4293      	cmp	r3, r2
 800de34:	da00      	bge.n	800de38 <__multiply+0x28>
 800de36:	3101      	adds	r1, #1
 800de38:	f7ff fee0 	bl	800dbfc <_Balloc>
 800de3c:	9001      	str	r0, [sp, #4]
 800de3e:	2800      	cmp	r0, #0
 800de40:	d106      	bne.n	800de50 <__multiply+0x40>
 800de42:	215e      	movs	r1, #94	; 0x5e
 800de44:	0002      	movs	r2, r0
 800de46:	4b48      	ldr	r3, [pc, #288]	; (800df68 <__multiply+0x158>)
 800de48:	4848      	ldr	r0, [pc, #288]	; (800df6c <__multiply+0x15c>)
 800de4a:	31ff      	adds	r1, #255	; 0xff
 800de4c:	f000 fc9e 	bl	800e78c <__assert_func>
 800de50:	9b01      	ldr	r3, [sp, #4]
 800de52:	2200      	movs	r2, #0
 800de54:	3314      	adds	r3, #20
 800de56:	469c      	mov	ip, r3
 800de58:	19bb      	adds	r3, r7, r6
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	4463      	add	r3, ip
 800de5e:	9303      	str	r3, [sp, #12]
 800de60:	4663      	mov	r3, ip
 800de62:	9903      	ldr	r1, [sp, #12]
 800de64:	428b      	cmp	r3, r1
 800de66:	d32c      	bcc.n	800dec2 <__multiply+0xb2>
 800de68:	002b      	movs	r3, r5
 800de6a:	0022      	movs	r2, r4
 800de6c:	3314      	adds	r3, #20
 800de6e:	00bf      	lsls	r7, r7, #2
 800de70:	3214      	adds	r2, #20
 800de72:	9306      	str	r3, [sp, #24]
 800de74:	00b6      	lsls	r6, r6, #2
 800de76:	19db      	adds	r3, r3, r7
 800de78:	9304      	str	r3, [sp, #16]
 800de7a:	1993      	adds	r3, r2, r6
 800de7c:	9307      	str	r3, [sp, #28]
 800de7e:	2304      	movs	r3, #4
 800de80:	9305      	str	r3, [sp, #20]
 800de82:	002b      	movs	r3, r5
 800de84:	9904      	ldr	r1, [sp, #16]
 800de86:	3315      	adds	r3, #21
 800de88:	9200      	str	r2, [sp, #0]
 800de8a:	4299      	cmp	r1, r3
 800de8c:	d305      	bcc.n	800de9a <__multiply+0x8a>
 800de8e:	1b4b      	subs	r3, r1, r5
 800de90:	3b15      	subs	r3, #21
 800de92:	089b      	lsrs	r3, r3, #2
 800de94:	3301      	adds	r3, #1
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	9305      	str	r3, [sp, #20]
 800de9a:	9b07      	ldr	r3, [sp, #28]
 800de9c:	9a00      	ldr	r2, [sp, #0]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d311      	bcc.n	800dec6 <__multiply+0xb6>
 800dea2:	9b02      	ldr	r3, [sp, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	dd06      	ble.n	800deb6 <__multiply+0xa6>
 800dea8:	9b03      	ldr	r3, [sp, #12]
 800deaa:	3b04      	subs	r3, #4
 800deac:	9303      	str	r3, [sp, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d054      	beq.n	800df60 <__multiply+0x150>
 800deb6:	9b01      	ldr	r3, [sp, #4]
 800deb8:	9a02      	ldr	r2, [sp, #8]
 800deba:	0018      	movs	r0, r3
 800debc:	611a      	str	r2, [r3, #16]
 800debe:	b009      	add	sp, #36	; 0x24
 800dec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dec2:	c304      	stmia	r3!, {r2}
 800dec4:	e7cd      	b.n	800de62 <__multiply+0x52>
 800dec6:	9b00      	ldr	r3, [sp, #0]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	b298      	uxth	r0, r3
 800decc:	2800      	cmp	r0, #0
 800dece:	d01c      	beq.n	800df0a <__multiply+0xfa>
 800ded0:	4667      	mov	r7, ip
 800ded2:	2400      	movs	r4, #0
 800ded4:	9e06      	ldr	r6, [sp, #24]
 800ded6:	ce02      	ldmia	r6!, {r1}
 800ded8:	683a      	ldr	r2, [r7, #0]
 800deda:	b28b      	uxth	r3, r1
 800dedc:	4343      	muls	r3, r0
 800dede:	0c09      	lsrs	r1, r1, #16
 800dee0:	4341      	muls	r1, r0
 800dee2:	b292      	uxth	r2, r2
 800dee4:	189b      	adds	r3, r3, r2
 800dee6:	191b      	adds	r3, r3, r4
 800dee8:	000c      	movs	r4, r1
 800deea:	683a      	ldr	r2, [r7, #0]
 800deec:	0c11      	lsrs	r1, r2, #16
 800deee:	1861      	adds	r1, r4, r1
 800def0:	0c1c      	lsrs	r4, r3, #16
 800def2:	1909      	adds	r1, r1, r4
 800def4:	0c0c      	lsrs	r4, r1, #16
 800def6:	b29b      	uxth	r3, r3
 800def8:	0409      	lsls	r1, r1, #16
 800defa:	430b      	orrs	r3, r1
 800defc:	c708      	stmia	r7!, {r3}
 800defe:	9b04      	ldr	r3, [sp, #16]
 800df00:	42b3      	cmp	r3, r6
 800df02:	d8e8      	bhi.n	800ded6 <__multiply+0xc6>
 800df04:	4663      	mov	r3, ip
 800df06:	9a05      	ldr	r2, [sp, #20]
 800df08:	509c      	str	r4, [r3, r2]
 800df0a:	9b00      	ldr	r3, [sp, #0]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	0c1e      	lsrs	r6, r3, #16
 800df10:	d020      	beq.n	800df54 <__multiply+0x144>
 800df12:	4663      	mov	r3, ip
 800df14:	002c      	movs	r4, r5
 800df16:	4660      	mov	r0, ip
 800df18:	2700      	movs	r7, #0
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	3414      	adds	r4, #20
 800df1e:	6822      	ldr	r2, [r4, #0]
 800df20:	b29b      	uxth	r3, r3
 800df22:	b291      	uxth	r1, r2
 800df24:	4371      	muls	r1, r6
 800df26:	6802      	ldr	r2, [r0, #0]
 800df28:	0c12      	lsrs	r2, r2, #16
 800df2a:	1889      	adds	r1, r1, r2
 800df2c:	19cf      	adds	r7, r1, r7
 800df2e:	0439      	lsls	r1, r7, #16
 800df30:	430b      	orrs	r3, r1
 800df32:	6003      	str	r3, [r0, #0]
 800df34:	cc02      	ldmia	r4!, {r1}
 800df36:	6843      	ldr	r3, [r0, #4]
 800df38:	0c09      	lsrs	r1, r1, #16
 800df3a:	4371      	muls	r1, r6
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	0c3f      	lsrs	r7, r7, #16
 800df40:	18cb      	adds	r3, r1, r3
 800df42:	9a04      	ldr	r2, [sp, #16]
 800df44:	19db      	adds	r3, r3, r7
 800df46:	0c1f      	lsrs	r7, r3, #16
 800df48:	3004      	adds	r0, #4
 800df4a:	42a2      	cmp	r2, r4
 800df4c:	d8e7      	bhi.n	800df1e <__multiply+0x10e>
 800df4e:	4662      	mov	r2, ip
 800df50:	9905      	ldr	r1, [sp, #20]
 800df52:	5053      	str	r3, [r2, r1]
 800df54:	9b00      	ldr	r3, [sp, #0]
 800df56:	3304      	adds	r3, #4
 800df58:	9300      	str	r3, [sp, #0]
 800df5a:	2304      	movs	r3, #4
 800df5c:	449c      	add	ip, r3
 800df5e:	e79c      	b.n	800de9a <__multiply+0x8a>
 800df60:	9b02      	ldr	r3, [sp, #8]
 800df62:	3b01      	subs	r3, #1
 800df64:	9302      	str	r3, [sp, #8]
 800df66:	e79c      	b.n	800dea2 <__multiply+0x92>
 800df68:	08012107 	.word	0x08012107
 800df6c:	08012118 	.word	0x08012118

0800df70 <__pow5mult>:
 800df70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df72:	2303      	movs	r3, #3
 800df74:	0015      	movs	r5, r2
 800df76:	0007      	movs	r7, r0
 800df78:	000e      	movs	r6, r1
 800df7a:	401a      	ands	r2, r3
 800df7c:	421d      	tst	r5, r3
 800df7e:	d008      	beq.n	800df92 <__pow5mult+0x22>
 800df80:	4925      	ldr	r1, [pc, #148]	; (800e018 <__pow5mult+0xa8>)
 800df82:	3a01      	subs	r2, #1
 800df84:	0092      	lsls	r2, r2, #2
 800df86:	5852      	ldr	r2, [r2, r1]
 800df88:	2300      	movs	r3, #0
 800df8a:	0031      	movs	r1, r6
 800df8c:	f7ff fe9e 	bl	800dccc <__multadd>
 800df90:	0006      	movs	r6, r0
 800df92:	10ad      	asrs	r5, r5, #2
 800df94:	d03d      	beq.n	800e012 <__pow5mult+0xa2>
 800df96:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800df98:	2c00      	cmp	r4, #0
 800df9a:	d10f      	bne.n	800dfbc <__pow5mult+0x4c>
 800df9c:	2010      	movs	r0, #16
 800df9e:	f7ff fe17 	bl	800dbd0 <malloc>
 800dfa2:	1e02      	subs	r2, r0, #0
 800dfa4:	6278      	str	r0, [r7, #36]	; 0x24
 800dfa6:	d105      	bne.n	800dfb4 <__pow5mult+0x44>
 800dfa8:	21d7      	movs	r1, #215	; 0xd7
 800dfaa:	4b1c      	ldr	r3, [pc, #112]	; (800e01c <__pow5mult+0xac>)
 800dfac:	481c      	ldr	r0, [pc, #112]	; (800e020 <__pow5mult+0xb0>)
 800dfae:	0049      	lsls	r1, r1, #1
 800dfb0:	f000 fbec 	bl	800e78c <__assert_func>
 800dfb4:	6044      	str	r4, [r0, #4]
 800dfb6:	6084      	str	r4, [r0, #8]
 800dfb8:	6004      	str	r4, [r0, #0]
 800dfba:	60c4      	str	r4, [r0, #12]
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	689c      	ldr	r4, [r3, #8]
 800dfc0:	9301      	str	r3, [sp, #4]
 800dfc2:	2c00      	cmp	r4, #0
 800dfc4:	d108      	bne.n	800dfd8 <__pow5mult+0x68>
 800dfc6:	0038      	movs	r0, r7
 800dfc8:	4916      	ldr	r1, [pc, #88]	; (800e024 <__pow5mult+0xb4>)
 800dfca:	f7ff ff0b 	bl	800dde4 <__i2b>
 800dfce:	9b01      	ldr	r3, [sp, #4]
 800dfd0:	0004      	movs	r4, r0
 800dfd2:	6098      	str	r0, [r3, #8]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	6003      	str	r3, [r0, #0]
 800dfd8:	2301      	movs	r3, #1
 800dfda:	421d      	tst	r5, r3
 800dfdc:	d00a      	beq.n	800dff4 <__pow5mult+0x84>
 800dfde:	0031      	movs	r1, r6
 800dfe0:	0022      	movs	r2, r4
 800dfe2:	0038      	movs	r0, r7
 800dfe4:	f7ff ff14 	bl	800de10 <__multiply>
 800dfe8:	0031      	movs	r1, r6
 800dfea:	9001      	str	r0, [sp, #4]
 800dfec:	0038      	movs	r0, r7
 800dfee:	f7ff fe49 	bl	800dc84 <_Bfree>
 800dff2:	9e01      	ldr	r6, [sp, #4]
 800dff4:	106d      	asrs	r5, r5, #1
 800dff6:	d00c      	beq.n	800e012 <__pow5mult+0xa2>
 800dff8:	6820      	ldr	r0, [r4, #0]
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d107      	bne.n	800e00e <__pow5mult+0x9e>
 800dffe:	0022      	movs	r2, r4
 800e000:	0021      	movs	r1, r4
 800e002:	0038      	movs	r0, r7
 800e004:	f7ff ff04 	bl	800de10 <__multiply>
 800e008:	2300      	movs	r3, #0
 800e00a:	6020      	str	r0, [r4, #0]
 800e00c:	6003      	str	r3, [r0, #0]
 800e00e:	0004      	movs	r4, r0
 800e010:	e7e2      	b.n	800dfd8 <__pow5mult+0x68>
 800e012:	0030      	movs	r0, r6
 800e014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e016:	46c0      	nop			; (mov r8, r8)
 800e018:	08012268 	.word	0x08012268
 800e01c:	08012091 	.word	0x08012091
 800e020:	08012118 	.word	0x08012118
 800e024:	00000271 	.word	0x00000271

0800e028 <__lshift>:
 800e028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e02a:	000c      	movs	r4, r1
 800e02c:	0017      	movs	r7, r2
 800e02e:	6923      	ldr	r3, [r4, #16]
 800e030:	1155      	asrs	r5, r2, #5
 800e032:	b087      	sub	sp, #28
 800e034:	18eb      	adds	r3, r5, r3
 800e036:	9302      	str	r3, [sp, #8]
 800e038:	3301      	adds	r3, #1
 800e03a:	9301      	str	r3, [sp, #4]
 800e03c:	6849      	ldr	r1, [r1, #4]
 800e03e:	68a3      	ldr	r3, [r4, #8]
 800e040:	9004      	str	r0, [sp, #16]
 800e042:	9a01      	ldr	r2, [sp, #4]
 800e044:	4293      	cmp	r3, r2
 800e046:	db11      	blt.n	800e06c <__lshift+0x44>
 800e048:	9804      	ldr	r0, [sp, #16]
 800e04a:	f7ff fdd7 	bl	800dbfc <_Balloc>
 800e04e:	0002      	movs	r2, r0
 800e050:	2300      	movs	r3, #0
 800e052:	3214      	adds	r2, #20
 800e054:	0006      	movs	r6, r0
 800e056:	0011      	movs	r1, r2
 800e058:	9203      	str	r2, [sp, #12]
 800e05a:	4298      	cmp	r0, r3
 800e05c:	d10d      	bne.n	800e07a <__lshift+0x52>
 800e05e:	21da      	movs	r1, #218	; 0xda
 800e060:	0002      	movs	r2, r0
 800e062:	4b27      	ldr	r3, [pc, #156]	; (800e100 <__lshift+0xd8>)
 800e064:	4827      	ldr	r0, [pc, #156]	; (800e104 <__lshift+0xdc>)
 800e066:	31ff      	adds	r1, #255	; 0xff
 800e068:	f000 fb90 	bl	800e78c <__assert_func>
 800e06c:	3101      	adds	r1, #1
 800e06e:	005b      	lsls	r3, r3, #1
 800e070:	e7e7      	b.n	800e042 <__lshift+0x1a>
 800e072:	2200      	movs	r2, #0
 800e074:	0098      	lsls	r0, r3, #2
 800e076:	500a      	str	r2, [r1, r0]
 800e078:	3301      	adds	r3, #1
 800e07a:	42ab      	cmp	r3, r5
 800e07c:	dbf9      	blt.n	800e072 <__lshift+0x4a>
 800e07e:	43eb      	mvns	r3, r5
 800e080:	17db      	asrs	r3, r3, #31
 800e082:	401d      	ands	r5, r3
 800e084:	9b03      	ldr	r3, [sp, #12]
 800e086:	00ad      	lsls	r5, r5, #2
 800e088:	211f      	movs	r1, #31
 800e08a:	0038      	movs	r0, r7
 800e08c:	195d      	adds	r5, r3, r5
 800e08e:	0023      	movs	r3, r4
 800e090:	6922      	ldr	r2, [r4, #16]
 800e092:	3314      	adds	r3, #20
 800e094:	0092      	lsls	r2, r2, #2
 800e096:	4008      	ands	r0, r1
 800e098:	4684      	mov	ip, r0
 800e09a:	189a      	adds	r2, r3, r2
 800e09c:	420f      	tst	r7, r1
 800e09e:	d02a      	beq.n	800e0f6 <__lshift+0xce>
 800e0a0:	3101      	adds	r1, #1
 800e0a2:	1a09      	subs	r1, r1, r0
 800e0a4:	9105      	str	r1, [sp, #20]
 800e0a6:	2100      	movs	r1, #0
 800e0a8:	9503      	str	r5, [sp, #12]
 800e0aa:	4667      	mov	r7, ip
 800e0ac:	6818      	ldr	r0, [r3, #0]
 800e0ae:	40b8      	lsls	r0, r7
 800e0b0:	4301      	orrs	r1, r0
 800e0b2:	9803      	ldr	r0, [sp, #12]
 800e0b4:	c002      	stmia	r0!, {r1}
 800e0b6:	cb02      	ldmia	r3!, {r1}
 800e0b8:	9003      	str	r0, [sp, #12]
 800e0ba:	9805      	ldr	r0, [sp, #20]
 800e0bc:	40c1      	lsrs	r1, r0
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d8f3      	bhi.n	800e0aa <__lshift+0x82>
 800e0c2:	0020      	movs	r0, r4
 800e0c4:	3015      	adds	r0, #21
 800e0c6:	2304      	movs	r3, #4
 800e0c8:	4282      	cmp	r2, r0
 800e0ca:	d304      	bcc.n	800e0d6 <__lshift+0xae>
 800e0cc:	1b13      	subs	r3, r2, r4
 800e0ce:	3b15      	subs	r3, #21
 800e0d0:	089b      	lsrs	r3, r3, #2
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	50e9      	str	r1, [r5, r3]
 800e0d8:	2900      	cmp	r1, #0
 800e0da:	d002      	beq.n	800e0e2 <__lshift+0xba>
 800e0dc:	9b02      	ldr	r3, [sp, #8]
 800e0de:	3302      	adds	r3, #2
 800e0e0:	9301      	str	r3, [sp, #4]
 800e0e2:	9b01      	ldr	r3, [sp, #4]
 800e0e4:	9804      	ldr	r0, [sp, #16]
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	0021      	movs	r1, r4
 800e0ea:	6133      	str	r3, [r6, #16]
 800e0ec:	f7ff fdca 	bl	800dc84 <_Bfree>
 800e0f0:	0030      	movs	r0, r6
 800e0f2:	b007      	add	sp, #28
 800e0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f6:	cb02      	ldmia	r3!, {r1}
 800e0f8:	c502      	stmia	r5!, {r1}
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d8fb      	bhi.n	800e0f6 <__lshift+0xce>
 800e0fe:	e7f0      	b.n	800e0e2 <__lshift+0xba>
 800e100:	08012107 	.word	0x08012107
 800e104:	08012118 	.word	0x08012118

0800e108 <__mcmp>:
 800e108:	6902      	ldr	r2, [r0, #16]
 800e10a:	690b      	ldr	r3, [r1, #16]
 800e10c:	b530      	push	{r4, r5, lr}
 800e10e:	0004      	movs	r4, r0
 800e110:	1ad0      	subs	r0, r2, r3
 800e112:	429a      	cmp	r2, r3
 800e114:	d10d      	bne.n	800e132 <__mcmp+0x2a>
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	3414      	adds	r4, #20
 800e11a:	3114      	adds	r1, #20
 800e11c:	18e2      	adds	r2, r4, r3
 800e11e:	18c9      	adds	r1, r1, r3
 800e120:	3a04      	subs	r2, #4
 800e122:	3904      	subs	r1, #4
 800e124:	6815      	ldr	r5, [r2, #0]
 800e126:	680b      	ldr	r3, [r1, #0]
 800e128:	429d      	cmp	r5, r3
 800e12a:	d003      	beq.n	800e134 <__mcmp+0x2c>
 800e12c:	2001      	movs	r0, #1
 800e12e:	429d      	cmp	r5, r3
 800e130:	d303      	bcc.n	800e13a <__mcmp+0x32>
 800e132:	bd30      	pop	{r4, r5, pc}
 800e134:	4294      	cmp	r4, r2
 800e136:	d3f3      	bcc.n	800e120 <__mcmp+0x18>
 800e138:	e7fb      	b.n	800e132 <__mcmp+0x2a>
 800e13a:	4240      	negs	r0, r0
 800e13c:	e7f9      	b.n	800e132 <__mcmp+0x2a>
	...

0800e140 <__mdiff>:
 800e140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e142:	000e      	movs	r6, r1
 800e144:	0007      	movs	r7, r0
 800e146:	0011      	movs	r1, r2
 800e148:	0030      	movs	r0, r6
 800e14a:	b087      	sub	sp, #28
 800e14c:	0014      	movs	r4, r2
 800e14e:	f7ff ffdb 	bl	800e108 <__mcmp>
 800e152:	1e05      	subs	r5, r0, #0
 800e154:	d110      	bne.n	800e178 <__mdiff+0x38>
 800e156:	0001      	movs	r1, r0
 800e158:	0038      	movs	r0, r7
 800e15a:	f7ff fd4f 	bl	800dbfc <_Balloc>
 800e15e:	1e02      	subs	r2, r0, #0
 800e160:	d104      	bne.n	800e16c <__mdiff+0x2c>
 800e162:	4b40      	ldr	r3, [pc, #256]	; (800e264 <__mdiff+0x124>)
 800e164:	4940      	ldr	r1, [pc, #256]	; (800e268 <__mdiff+0x128>)
 800e166:	4841      	ldr	r0, [pc, #260]	; (800e26c <__mdiff+0x12c>)
 800e168:	f000 fb10 	bl	800e78c <__assert_func>
 800e16c:	2301      	movs	r3, #1
 800e16e:	6145      	str	r5, [r0, #20]
 800e170:	6103      	str	r3, [r0, #16]
 800e172:	0010      	movs	r0, r2
 800e174:	b007      	add	sp, #28
 800e176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e178:	2301      	movs	r3, #1
 800e17a:	9301      	str	r3, [sp, #4]
 800e17c:	2800      	cmp	r0, #0
 800e17e:	db04      	blt.n	800e18a <__mdiff+0x4a>
 800e180:	0023      	movs	r3, r4
 800e182:	0034      	movs	r4, r6
 800e184:	001e      	movs	r6, r3
 800e186:	2300      	movs	r3, #0
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	0038      	movs	r0, r7
 800e18c:	6861      	ldr	r1, [r4, #4]
 800e18e:	f7ff fd35 	bl	800dbfc <_Balloc>
 800e192:	1e02      	subs	r2, r0, #0
 800e194:	d103      	bne.n	800e19e <__mdiff+0x5e>
 800e196:	2190      	movs	r1, #144	; 0x90
 800e198:	4b32      	ldr	r3, [pc, #200]	; (800e264 <__mdiff+0x124>)
 800e19a:	0089      	lsls	r1, r1, #2
 800e19c:	e7e3      	b.n	800e166 <__mdiff+0x26>
 800e19e:	9b01      	ldr	r3, [sp, #4]
 800e1a0:	2700      	movs	r7, #0
 800e1a2:	60c3      	str	r3, [r0, #12]
 800e1a4:	6920      	ldr	r0, [r4, #16]
 800e1a6:	3414      	adds	r4, #20
 800e1a8:	9401      	str	r4, [sp, #4]
 800e1aa:	9b01      	ldr	r3, [sp, #4]
 800e1ac:	0084      	lsls	r4, r0, #2
 800e1ae:	191b      	adds	r3, r3, r4
 800e1b0:	0034      	movs	r4, r6
 800e1b2:	9302      	str	r3, [sp, #8]
 800e1b4:	6933      	ldr	r3, [r6, #16]
 800e1b6:	3414      	adds	r4, #20
 800e1b8:	0099      	lsls	r1, r3, #2
 800e1ba:	1863      	adds	r3, r4, r1
 800e1bc:	9303      	str	r3, [sp, #12]
 800e1be:	0013      	movs	r3, r2
 800e1c0:	3314      	adds	r3, #20
 800e1c2:	469c      	mov	ip, r3
 800e1c4:	9305      	str	r3, [sp, #20]
 800e1c6:	9b01      	ldr	r3, [sp, #4]
 800e1c8:	9304      	str	r3, [sp, #16]
 800e1ca:	9b04      	ldr	r3, [sp, #16]
 800e1cc:	cc02      	ldmia	r4!, {r1}
 800e1ce:	cb20      	ldmia	r3!, {r5}
 800e1d0:	9304      	str	r3, [sp, #16]
 800e1d2:	b2ab      	uxth	r3, r5
 800e1d4:	19df      	adds	r7, r3, r7
 800e1d6:	b28b      	uxth	r3, r1
 800e1d8:	1afb      	subs	r3, r7, r3
 800e1da:	0c2d      	lsrs	r5, r5, #16
 800e1dc:	0c09      	lsrs	r1, r1, #16
 800e1de:	1a69      	subs	r1, r5, r1
 800e1e0:	141d      	asrs	r5, r3, #16
 800e1e2:	1949      	adds	r1, r1, r5
 800e1e4:	140f      	asrs	r7, r1, #16
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	0409      	lsls	r1, r1, #16
 800e1ea:	430b      	orrs	r3, r1
 800e1ec:	4661      	mov	r1, ip
 800e1ee:	c108      	stmia	r1!, {r3}
 800e1f0:	9b03      	ldr	r3, [sp, #12]
 800e1f2:	468c      	mov	ip, r1
 800e1f4:	42a3      	cmp	r3, r4
 800e1f6:	d8e8      	bhi.n	800e1ca <__mdiff+0x8a>
 800e1f8:	0031      	movs	r1, r6
 800e1fa:	9c03      	ldr	r4, [sp, #12]
 800e1fc:	3115      	adds	r1, #21
 800e1fe:	2304      	movs	r3, #4
 800e200:	428c      	cmp	r4, r1
 800e202:	d304      	bcc.n	800e20e <__mdiff+0xce>
 800e204:	1ba3      	subs	r3, r4, r6
 800e206:	3b15      	subs	r3, #21
 800e208:	089b      	lsrs	r3, r3, #2
 800e20a:	3301      	adds	r3, #1
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	9901      	ldr	r1, [sp, #4]
 800e210:	18cc      	adds	r4, r1, r3
 800e212:	9905      	ldr	r1, [sp, #20]
 800e214:	0026      	movs	r6, r4
 800e216:	18cb      	adds	r3, r1, r3
 800e218:	469c      	mov	ip, r3
 800e21a:	9902      	ldr	r1, [sp, #8]
 800e21c:	428e      	cmp	r6, r1
 800e21e:	d310      	bcc.n	800e242 <__mdiff+0x102>
 800e220:	9e02      	ldr	r6, [sp, #8]
 800e222:	1ee5      	subs	r5, r4, #3
 800e224:	2100      	movs	r1, #0
 800e226:	42ae      	cmp	r6, r5
 800e228:	d304      	bcc.n	800e234 <__mdiff+0xf4>
 800e22a:	0031      	movs	r1, r6
 800e22c:	3103      	adds	r1, #3
 800e22e:	1b09      	subs	r1, r1, r4
 800e230:	0889      	lsrs	r1, r1, #2
 800e232:	0089      	lsls	r1, r1, #2
 800e234:	185b      	adds	r3, r3, r1
 800e236:	3b04      	subs	r3, #4
 800e238:	6819      	ldr	r1, [r3, #0]
 800e23a:	2900      	cmp	r1, #0
 800e23c:	d00f      	beq.n	800e25e <__mdiff+0x11e>
 800e23e:	6110      	str	r0, [r2, #16]
 800e240:	e797      	b.n	800e172 <__mdiff+0x32>
 800e242:	ce02      	ldmia	r6!, {r1}
 800e244:	b28d      	uxth	r5, r1
 800e246:	19ed      	adds	r5, r5, r7
 800e248:	0c0f      	lsrs	r7, r1, #16
 800e24a:	1429      	asrs	r1, r5, #16
 800e24c:	1879      	adds	r1, r7, r1
 800e24e:	140f      	asrs	r7, r1, #16
 800e250:	b2ad      	uxth	r5, r5
 800e252:	0409      	lsls	r1, r1, #16
 800e254:	430d      	orrs	r5, r1
 800e256:	4661      	mov	r1, ip
 800e258:	c120      	stmia	r1!, {r5}
 800e25a:	468c      	mov	ip, r1
 800e25c:	e7dd      	b.n	800e21a <__mdiff+0xda>
 800e25e:	3801      	subs	r0, #1
 800e260:	e7e9      	b.n	800e236 <__mdiff+0xf6>
 800e262:	46c0      	nop			; (mov r8, r8)
 800e264:	08012107 	.word	0x08012107
 800e268:	00000232 	.word	0x00000232
 800e26c:	08012118 	.word	0x08012118

0800e270 <__d2b>:
 800e270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e272:	2101      	movs	r1, #1
 800e274:	0014      	movs	r4, r2
 800e276:	001e      	movs	r6, r3
 800e278:	9f08      	ldr	r7, [sp, #32]
 800e27a:	f7ff fcbf 	bl	800dbfc <_Balloc>
 800e27e:	1e05      	subs	r5, r0, #0
 800e280:	d105      	bne.n	800e28e <__d2b+0x1e>
 800e282:	0002      	movs	r2, r0
 800e284:	4b26      	ldr	r3, [pc, #152]	; (800e320 <__d2b+0xb0>)
 800e286:	4927      	ldr	r1, [pc, #156]	; (800e324 <__d2b+0xb4>)
 800e288:	4827      	ldr	r0, [pc, #156]	; (800e328 <__d2b+0xb8>)
 800e28a:	f000 fa7f 	bl	800e78c <__assert_func>
 800e28e:	0333      	lsls	r3, r6, #12
 800e290:	0076      	lsls	r6, r6, #1
 800e292:	0b1b      	lsrs	r3, r3, #12
 800e294:	0d76      	lsrs	r6, r6, #21
 800e296:	d124      	bne.n	800e2e2 <__d2b+0x72>
 800e298:	9301      	str	r3, [sp, #4]
 800e29a:	2c00      	cmp	r4, #0
 800e29c:	d027      	beq.n	800e2ee <__d2b+0x7e>
 800e29e:	4668      	mov	r0, sp
 800e2a0:	9400      	str	r4, [sp, #0]
 800e2a2:	f7ff fd71 	bl	800dd88 <__lo0bits>
 800e2a6:	9c00      	ldr	r4, [sp, #0]
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d01e      	beq.n	800e2ea <__d2b+0x7a>
 800e2ac:	9b01      	ldr	r3, [sp, #4]
 800e2ae:	2120      	movs	r1, #32
 800e2b0:	001a      	movs	r2, r3
 800e2b2:	1a09      	subs	r1, r1, r0
 800e2b4:	408a      	lsls	r2, r1
 800e2b6:	40c3      	lsrs	r3, r0
 800e2b8:	4322      	orrs	r2, r4
 800e2ba:	616a      	str	r2, [r5, #20]
 800e2bc:	9301      	str	r3, [sp, #4]
 800e2be:	9c01      	ldr	r4, [sp, #4]
 800e2c0:	61ac      	str	r4, [r5, #24]
 800e2c2:	1e63      	subs	r3, r4, #1
 800e2c4:	419c      	sbcs	r4, r3
 800e2c6:	3401      	adds	r4, #1
 800e2c8:	612c      	str	r4, [r5, #16]
 800e2ca:	2e00      	cmp	r6, #0
 800e2cc:	d018      	beq.n	800e300 <__d2b+0x90>
 800e2ce:	4b17      	ldr	r3, [pc, #92]	; (800e32c <__d2b+0xbc>)
 800e2d0:	18f6      	adds	r6, r6, r3
 800e2d2:	2335      	movs	r3, #53	; 0x35
 800e2d4:	1836      	adds	r6, r6, r0
 800e2d6:	1a18      	subs	r0, r3, r0
 800e2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2da:	603e      	str	r6, [r7, #0]
 800e2dc:	6018      	str	r0, [r3, #0]
 800e2de:	0028      	movs	r0, r5
 800e2e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e2e2:	2280      	movs	r2, #128	; 0x80
 800e2e4:	0352      	lsls	r2, r2, #13
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	e7d6      	b.n	800e298 <__d2b+0x28>
 800e2ea:	616c      	str	r4, [r5, #20]
 800e2ec:	e7e7      	b.n	800e2be <__d2b+0x4e>
 800e2ee:	a801      	add	r0, sp, #4
 800e2f0:	f7ff fd4a 	bl	800dd88 <__lo0bits>
 800e2f4:	2401      	movs	r4, #1
 800e2f6:	9b01      	ldr	r3, [sp, #4]
 800e2f8:	612c      	str	r4, [r5, #16]
 800e2fa:	616b      	str	r3, [r5, #20]
 800e2fc:	3020      	adds	r0, #32
 800e2fe:	e7e4      	b.n	800e2ca <__d2b+0x5a>
 800e300:	4b0b      	ldr	r3, [pc, #44]	; (800e330 <__d2b+0xc0>)
 800e302:	18c0      	adds	r0, r0, r3
 800e304:	4b0b      	ldr	r3, [pc, #44]	; (800e334 <__d2b+0xc4>)
 800e306:	6038      	str	r0, [r7, #0]
 800e308:	18e3      	adds	r3, r4, r3
 800e30a:	009b      	lsls	r3, r3, #2
 800e30c:	18eb      	adds	r3, r5, r3
 800e30e:	6958      	ldr	r0, [r3, #20]
 800e310:	f7ff fd20 	bl	800dd54 <__hi0bits>
 800e314:	0164      	lsls	r4, r4, #5
 800e316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e318:	1a24      	subs	r4, r4, r0
 800e31a:	601c      	str	r4, [r3, #0]
 800e31c:	e7df      	b.n	800e2de <__d2b+0x6e>
 800e31e:	46c0      	nop			; (mov r8, r8)
 800e320:	08012107 	.word	0x08012107
 800e324:	0000030a 	.word	0x0000030a
 800e328:	08012118 	.word	0x08012118
 800e32c:	fffffbcd 	.word	0xfffffbcd
 800e330:	fffffbce 	.word	0xfffffbce
 800e334:	3fffffff 	.word	0x3fffffff

0800e338 <_calloc_r>:
 800e338:	434a      	muls	r2, r1
 800e33a:	b570      	push	{r4, r5, r6, lr}
 800e33c:	0011      	movs	r1, r2
 800e33e:	0015      	movs	r5, r2
 800e340:	f000 f852 	bl	800e3e8 <_malloc_r>
 800e344:	1e04      	subs	r4, r0, #0
 800e346:	d003      	beq.n	800e350 <_calloc_r+0x18>
 800e348:	002a      	movs	r2, r5
 800e34a:	2100      	movs	r1, #0
 800e34c:	f7fe f8ef 	bl	800c52e <memset>
 800e350:	0020      	movs	r0, r4
 800e352:	bd70      	pop	{r4, r5, r6, pc}

0800e354 <_free_r>:
 800e354:	b570      	push	{r4, r5, r6, lr}
 800e356:	0005      	movs	r5, r0
 800e358:	2900      	cmp	r1, #0
 800e35a:	d010      	beq.n	800e37e <_free_r+0x2a>
 800e35c:	1f0c      	subs	r4, r1, #4
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	da00      	bge.n	800e366 <_free_r+0x12>
 800e364:	18e4      	adds	r4, r4, r3
 800e366:	0028      	movs	r0, r5
 800e368:	f000 fa64 	bl	800e834 <__malloc_lock>
 800e36c:	4a1d      	ldr	r2, [pc, #116]	; (800e3e4 <_free_r+0x90>)
 800e36e:	6813      	ldr	r3, [r2, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d105      	bne.n	800e380 <_free_r+0x2c>
 800e374:	6063      	str	r3, [r4, #4]
 800e376:	6014      	str	r4, [r2, #0]
 800e378:	0028      	movs	r0, r5
 800e37a:	f000 fa63 	bl	800e844 <__malloc_unlock>
 800e37e:	bd70      	pop	{r4, r5, r6, pc}
 800e380:	42a3      	cmp	r3, r4
 800e382:	d908      	bls.n	800e396 <_free_r+0x42>
 800e384:	6821      	ldr	r1, [r4, #0]
 800e386:	1860      	adds	r0, r4, r1
 800e388:	4283      	cmp	r3, r0
 800e38a:	d1f3      	bne.n	800e374 <_free_r+0x20>
 800e38c:	6818      	ldr	r0, [r3, #0]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	1841      	adds	r1, r0, r1
 800e392:	6021      	str	r1, [r4, #0]
 800e394:	e7ee      	b.n	800e374 <_free_r+0x20>
 800e396:	001a      	movs	r2, r3
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d001      	beq.n	800e3a2 <_free_r+0x4e>
 800e39e:	42a3      	cmp	r3, r4
 800e3a0:	d9f9      	bls.n	800e396 <_free_r+0x42>
 800e3a2:	6811      	ldr	r1, [r2, #0]
 800e3a4:	1850      	adds	r0, r2, r1
 800e3a6:	42a0      	cmp	r0, r4
 800e3a8:	d10b      	bne.n	800e3c2 <_free_r+0x6e>
 800e3aa:	6820      	ldr	r0, [r4, #0]
 800e3ac:	1809      	adds	r1, r1, r0
 800e3ae:	1850      	adds	r0, r2, r1
 800e3b0:	6011      	str	r1, [r2, #0]
 800e3b2:	4283      	cmp	r3, r0
 800e3b4:	d1e0      	bne.n	800e378 <_free_r+0x24>
 800e3b6:	6818      	ldr	r0, [r3, #0]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	1841      	adds	r1, r0, r1
 800e3bc:	6011      	str	r1, [r2, #0]
 800e3be:	6053      	str	r3, [r2, #4]
 800e3c0:	e7da      	b.n	800e378 <_free_r+0x24>
 800e3c2:	42a0      	cmp	r0, r4
 800e3c4:	d902      	bls.n	800e3cc <_free_r+0x78>
 800e3c6:	230c      	movs	r3, #12
 800e3c8:	602b      	str	r3, [r5, #0]
 800e3ca:	e7d5      	b.n	800e378 <_free_r+0x24>
 800e3cc:	6821      	ldr	r1, [r4, #0]
 800e3ce:	1860      	adds	r0, r4, r1
 800e3d0:	4283      	cmp	r3, r0
 800e3d2:	d103      	bne.n	800e3dc <_free_r+0x88>
 800e3d4:	6818      	ldr	r0, [r3, #0]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	1841      	adds	r1, r0, r1
 800e3da:	6021      	str	r1, [r4, #0]
 800e3dc:	6063      	str	r3, [r4, #4]
 800e3de:	6054      	str	r4, [r2, #4]
 800e3e0:	e7ca      	b.n	800e378 <_free_r+0x24>
 800e3e2:	46c0      	nop			; (mov r8, r8)
 800e3e4:	20000204 	.word	0x20000204

0800e3e8 <_malloc_r>:
 800e3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ea:	2303      	movs	r3, #3
 800e3ec:	1ccd      	adds	r5, r1, #3
 800e3ee:	439d      	bics	r5, r3
 800e3f0:	3508      	adds	r5, #8
 800e3f2:	0006      	movs	r6, r0
 800e3f4:	2d0c      	cmp	r5, #12
 800e3f6:	d21f      	bcs.n	800e438 <_malloc_r+0x50>
 800e3f8:	250c      	movs	r5, #12
 800e3fa:	42a9      	cmp	r1, r5
 800e3fc:	d81e      	bhi.n	800e43c <_malloc_r+0x54>
 800e3fe:	0030      	movs	r0, r6
 800e400:	f000 fa18 	bl	800e834 <__malloc_lock>
 800e404:	4925      	ldr	r1, [pc, #148]	; (800e49c <_malloc_r+0xb4>)
 800e406:	680a      	ldr	r2, [r1, #0]
 800e408:	0014      	movs	r4, r2
 800e40a:	2c00      	cmp	r4, #0
 800e40c:	d11a      	bne.n	800e444 <_malloc_r+0x5c>
 800e40e:	4f24      	ldr	r7, [pc, #144]	; (800e4a0 <_malloc_r+0xb8>)
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d104      	bne.n	800e420 <_malloc_r+0x38>
 800e416:	0021      	movs	r1, r4
 800e418:	0030      	movs	r0, r6
 800e41a:	f000 f9a5 	bl	800e768 <_sbrk_r>
 800e41e:	6038      	str	r0, [r7, #0]
 800e420:	0029      	movs	r1, r5
 800e422:	0030      	movs	r0, r6
 800e424:	f000 f9a0 	bl	800e768 <_sbrk_r>
 800e428:	1c43      	adds	r3, r0, #1
 800e42a:	d12b      	bne.n	800e484 <_malloc_r+0x9c>
 800e42c:	230c      	movs	r3, #12
 800e42e:	0030      	movs	r0, r6
 800e430:	6033      	str	r3, [r6, #0]
 800e432:	f000 fa07 	bl	800e844 <__malloc_unlock>
 800e436:	e003      	b.n	800e440 <_malloc_r+0x58>
 800e438:	2d00      	cmp	r5, #0
 800e43a:	dade      	bge.n	800e3fa <_malloc_r+0x12>
 800e43c:	230c      	movs	r3, #12
 800e43e:	6033      	str	r3, [r6, #0]
 800e440:	2000      	movs	r0, #0
 800e442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	1b5b      	subs	r3, r3, r5
 800e448:	d419      	bmi.n	800e47e <_malloc_r+0x96>
 800e44a:	2b0b      	cmp	r3, #11
 800e44c:	d903      	bls.n	800e456 <_malloc_r+0x6e>
 800e44e:	6023      	str	r3, [r4, #0]
 800e450:	18e4      	adds	r4, r4, r3
 800e452:	6025      	str	r5, [r4, #0]
 800e454:	e003      	b.n	800e45e <_malloc_r+0x76>
 800e456:	6863      	ldr	r3, [r4, #4]
 800e458:	42a2      	cmp	r2, r4
 800e45a:	d10e      	bne.n	800e47a <_malloc_r+0x92>
 800e45c:	600b      	str	r3, [r1, #0]
 800e45e:	0030      	movs	r0, r6
 800e460:	f000 f9f0 	bl	800e844 <__malloc_unlock>
 800e464:	0020      	movs	r0, r4
 800e466:	2207      	movs	r2, #7
 800e468:	300b      	adds	r0, #11
 800e46a:	1d23      	adds	r3, r4, #4
 800e46c:	4390      	bics	r0, r2
 800e46e:	1ac2      	subs	r2, r0, r3
 800e470:	4298      	cmp	r0, r3
 800e472:	d0e6      	beq.n	800e442 <_malloc_r+0x5a>
 800e474:	1a1b      	subs	r3, r3, r0
 800e476:	50a3      	str	r3, [r4, r2]
 800e478:	e7e3      	b.n	800e442 <_malloc_r+0x5a>
 800e47a:	6053      	str	r3, [r2, #4]
 800e47c:	e7ef      	b.n	800e45e <_malloc_r+0x76>
 800e47e:	0022      	movs	r2, r4
 800e480:	6864      	ldr	r4, [r4, #4]
 800e482:	e7c2      	b.n	800e40a <_malloc_r+0x22>
 800e484:	2303      	movs	r3, #3
 800e486:	1cc4      	adds	r4, r0, #3
 800e488:	439c      	bics	r4, r3
 800e48a:	42a0      	cmp	r0, r4
 800e48c:	d0e1      	beq.n	800e452 <_malloc_r+0x6a>
 800e48e:	1a21      	subs	r1, r4, r0
 800e490:	0030      	movs	r0, r6
 800e492:	f000 f969 	bl	800e768 <_sbrk_r>
 800e496:	1c43      	adds	r3, r0, #1
 800e498:	d1db      	bne.n	800e452 <_malloc_r+0x6a>
 800e49a:	e7c7      	b.n	800e42c <_malloc_r+0x44>
 800e49c:	20000204 	.word	0x20000204
 800e4a0:	20000208 	.word	0x20000208

0800e4a4 <__ssputs_r>:
 800e4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4a6:	688e      	ldr	r6, [r1, #8]
 800e4a8:	b085      	sub	sp, #20
 800e4aa:	0007      	movs	r7, r0
 800e4ac:	000c      	movs	r4, r1
 800e4ae:	9203      	str	r2, [sp, #12]
 800e4b0:	9301      	str	r3, [sp, #4]
 800e4b2:	429e      	cmp	r6, r3
 800e4b4:	d83c      	bhi.n	800e530 <__ssputs_r+0x8c>
 800e4b6:	2390      	movs	r3, #144	; 0x90
 800e4b8:	898a      	ldrh	r2, [r1, #12]
 800e4ba:	00db      	lsls	r3, r3, #3
 800e4bc:	421a      	tst	r2, r3
 800e4be:	d034      	beq.n	800e52a <__ssputs_r+0x86>
 800e4c0:	2503      	movs	r5, #3
 800e4c2:	6909      	ldr	r1, [r1, #16]
 800e4c4:	6823      	ldr	r3, [r4, #0]
 800e4c6:	1a5b      	subs	r3, r3, r1
 800e4c8:	9302      	str	r3, [sp, #8]
 800e4ca:	6963      	ldr	r3, [r4, #20]
 800e4cc:	9802      	ldr	r0, [sp, #8]
 800e4ce:	435d      	muls	r5, r3
 800e4d0:	0feb      	lsrs	r3, r5, #31
 800e4d2:	195d      	adds	r5, r3, r5
 800e4d4:	9b01      	ldr	r3, [sp, #4]
 800e4d6:	106d      	asrs	r5, r5, #1
 800e4d8:	3301      	adds	r3, #1
 800e4da:	181b      	adds	r3, r3, r0
 800e4dc:	42ab      	cmp	r3, r5
 800e4de:	d900      	bls.n	800e4e2 <__ssputs_r+0x3e>
 800e4e0:	001d      	movs	r5, r3
 800e4e2:	0553      	lsls	r3, r2, #21
 800e4e4:	d532      	bpl.n	800e54c <__ssputs_r+0xa8>
 800e4e6:	0029      	movs	r1, r5
 800e4e8:	0038      	movs	r0, r7
 800e4ea:	f7ff ff7d 	bl	800e3e8 <_malloc_r>
 800e4ee:	1e06      	subs	r6, r0, #0
 800e4f0:	d109      	bne.n	800e506 <__ssputs_r+0x62>
 800e4f2:	230c      	movs	r3, #12
 800e4f4:	603b      	str	r3, [r7, #0]
 800e4f6:	2340      	movs	r3, #64	; 0x40
 800e4f8:	2001      	movs	r0, #1
 800e4fa:	89a2      	ldrh	r2, [r4, #12]
 800e4fc:	4240      	negs	r0, r0
 800e4fe:	4313      	orrs	r3, r2
 800e500:	81a3      	strh	r3, [r4, #12]
 800e502:	b005      	add	sp, #20
 800e504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e506:	9a02      	ldr	r2, [sp, #8]
 800e508:	6921      	ldr	r1, [r4, #16]
 800e50a:	f7fe f807 	bl	800c51c <memcpy>
 800e50e:	89a3      	ldrh	r3, [r4, #12]
 800e510:	4a14      	ldr	r2, [pc, #80]	; (800e564 <__ssputs_r+0xc0>)
 800e512:	401a      	ands	r2, r3
 800e514:	2380      	movs	r3, #128	; 0x80
 800e516:	4313      	orrs	r3, r2
 800e518:	81a3      	strh	r3, [r4, #12]
 800e51a:	9b02      	ldr	r3, [sp, #8]
 800e51c:	6126      	str	r6, [r4, #16]
 800e51e:	18f6      	adds	r6, r6, r3
 800e520:	6026      	str	r6, [r4, #0]
 800e522:	6165      	str	r5, [r4, #20]
 800e524:	9e01      	ldr	r6, [sp, #4]
 800e526:	1aed      	subs	r5, r5, r3
 800e528:	60a5      	str	r5, [r4, #8]
 800e52a:	9b01      	ldr	r3, [sp, #4]
 800e52c:	429e      	cmp	r6, r3
 800e52e:	d900      	bls.n	800e532 <__ssputs_r+0x8e>
 800e530:	9e01      	ldr	r6, [sp, #4]
 800e532:	0032      	movs	r2, r6
 800e534:	9903      	ldr	r1, [sp, #12]
 800e536:	6820      	ldr	r0, [r4, #0]
 800e538:	f000 f968 	bl	800e80c <memmove>
 800e53c:	68a3      	ldr	r3, [r4, #8]
 800e53e:	2000      	movs	r0, #0
 800e540:	1b9b      	subs	r3, r3, r6
 800e542:	60a3      	str	r3, [r4, #8]
 800e544:	6823      	ldr	r3, [r4, #0]
 800e546:	199e      	adds	r6, r3, r6
 800e548:	6026      	str	r6, [r4, #0]
 800e54a:	e7da      	b.n	800e502 <__ssputs_r+0x5e>
 800e54c:	002a      	movs	r2, r5
 800e54e:	0038      	movs	r0, r7
 800e550:	f000 f980 	bl	800e854 <_realloc_r>
 800e554:	1e06      	subs	r6, r0, #0
 800e556:	d1e0      	bne.n	800e51a <__ssputs_r+0x76>
 800e558:	0038      	movs	r0, r7
 800e55a:	6921      	ldr	r1, [r4, #16]
 800e55c:	f7ff fefa 	bl	800e354 <_free_r>
 800e560:	e7c7      	b.n	800e4f2 <__ssputs_r+0x4e>
 800e562:	46c0      	nop			; (mov r8, r8)
 800e564:	fffffb7f 	.word	0xfffffb7f

0800e568 <_svfiprintf_r>:
 800e568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e56a:	b0a1      	sub	sp, #132	; 0x84
 800e56c:	9003      	str	r0, [sp, #12]
 800e56e:	001d      	movs	r5, r3
 800e570:	898b      	ldrh	r3, [r1, #12]
 800e572:	000f      	movs	r7, r1
 800e574:	0016      	movs	r6, r2
 800e576:	061b      	lsls	r3, r3, #24
 800e578:	d511      	bpl.n	800e59e <_svfiprintf_r+0x36>
 800e57a:	690b      	ldr	r3, [r1, #16]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d10e      	bne.n	800e59e <_svfiprintf_r+0x36>
 800e580:	2140      	movs	r1, #64	; 0x40
 800e582:	f7ff ff31 	bl	800e3e8 <_malloc_r>
 800e586:	6038      	str	r0, [r7, #0]
 800e588:	6138      	str	r0, [r7, #16]
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d105      	bne.n	800e59a <_svfiprintf_r+0x32>
 800e58e:	230c      	movs	r3, #12
 800e590:	9a03      	ldr	r2, [sp, #12]
 800e592:	3801      	subs	r0, #1
 800e594:	6013      	str	r3, [r2, #0]
 800e596:	b021      	add	sp, #132	; 0x84
 800e598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e59a:	2340      	movs	r3, #64	; 0x40
 800e59c:	617b      	str	r3, [r7, #20]
 800e59e:	2300      	movs	r3, #0
 800e5a0:	ac08      	add	r4, sp, #32
 800e5a2:	6163      	str	r3, [r4, #20]
 800e5a4:	3320      	adds	r3, #32
 800e5a6:	7663      	strb	r3, [r4, #25]
 800e5a8:	3310      	adds	r3, #16
 800e5aa:	76a3      	strb	r3, [r4, #26]
 800e5ac:	9507      	str	r5, [sp, #28]
 800e5ae:	0035      	movs	r5, r6
 800e5b0:	782b      	ldrb	r3, [r5, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <_svfiprintf_r+0x52>
 800e5b6:	2b25      	cmp	r3, #37	; 0x25
 800e5b8:	d147      	bne.n	800e64a <_svfiprintf_r+0xe2>
 800e5ba:	1bab      	subs	r3, r5, r6
 800e5bc:	9305      	str	r3, [sp, #20]
 800e5be:	42b5      	cmp	r5, r6
 800e5c0:	d00c      	beq.n	800e5dc <_svfiprintf_r+0x74>
 800e5c2:	0032      	movs	r2, r6
 800e5c4:	0039      	movs	r1, r7
 800e5c6:	9803      	ldr	r0, [sp, #12]
 800e5c8:	f7ff ff6c 	bl	800e4a4 <__ssputs_r>
 800e5cc:	1c43      	adds	r3, r0, #1
 800e5ce:	d100      	bne.n	800e5d2 <_svfiprintf_r+0x6a>
 800e5d0:	e0ae      	b.n	800e730 <_svfiprintf_r+0x1c8>
 800e5d2:	6962      	ldr	r2, [r4, #20]
 800e5d4:	9b05      	ldr	r3, [sp, #20]
 800e5d6:	4694      	mov	ip, r2
 800e5d8:	4463      	add	r3, ip
 800e5da:	6163      	str	r3, [r4, #20]
 800e5dc:	782b      	ldrb	r3, [r5, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d100      	bne.n	800e5e4 <_svfiprintf_r+0x7c>
 800e5e2:	e0a5      	b.n	800e730 <_svfiprintf_r+0x1c8>
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	4252      	negs	r2, r2
 800e5ea:	6062      	str	r2, [r4, #4]
 800e5ec:	a904      	add	r1, sp, #16
 800e5ee:	3254      	adds	r2, #84	; 0x54
 800e5f0:	1852      	adds	r2, r2, r1
 800e5f2:	1c6e      	adds	r6, r5, #1
 800e5f4:	6023      	str	r3, [r4, #0]
 800e5f6:	60e3      	str	r3, [r4, #12]
 800e5f8:	60a3      	str	r3, [r4, #8]
 800e5fa:	7013      	strb	r3, [r2, #0]
 800e5fc:	65a3      	str	r3, [r4, #88]	; 0x58
 800e5fe:	2205      	movs	r2, #5
 800e600:	7831      	ldrb	r1, [r6, #0]
 800e602:	4854      	ldr	r0, [pc, #336]	; (800e754 <_svfiprintf_r+0x1ec>)
 800e604:	f7ff faee 	bl	800dbe4 <memchr>
 800e608:	1c75      	adds	r5, r6, #1
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d11f      	bne.n	800e64e <_svfiprintf_r+0xe6>
 800e60e:	6822      	ldr	r2, [r4, #0]
 800e610:	06d3      	lsls	r3, r2, #27
 800e612:	d504      	bpl.n	800e61e <_svfiprintf_r+0xb6>
 800e614:	2353      	movs	r3, #83	; 0x53
 800e616:	a904      	add	r1, sp, #16
 800e618:	185b      	adds	r3, r3, r1
 800e61a:	2120      	movs	r1, #32
 800e61c:	7019      	strb	r1, [r3, #0]
 800e61e:	0713      	lsls	r3, r2, #28
 800e620:	d504      	bpl.n	800e62c <_svfiprintf_r+0xc4>
 800e622:	2353      	movs	r3, #83	; 0x53
 800e624:	a904      	add	r1, sp, #16
 800e626:	185b      	adds	r3, r3, r1
 800e628:	212b      	movs	r1, #43	; 0x2b
 800e62a:	7019      	strb	r1, [r3, #0]
 800e62c:	7833      	ldrb	r3, [r6, #0]
 800e62e:	2b2a      	cmp	r3, #42	; 0x2a
 800e630:	d016      	beq.n	800e660 <_svfiprintf_r+0xf8>
 800e632:	0035      	movs	r5, r6
 800e634:	2100      	movs	r1, #0
 800e636:	200a      	movs	r0, #10
 800e638:	68e3      	ldr	r3, [r4, #12]
 800e63a:	782a      	ldrb	r2, [r5, #0]
 800e63c:	1c6e      	adds	r6, r5, #1
 800e63e:	3a30      	subs	r2, #48	; 0x30
 800e640:	2a09      	cmp	r2, #9
 800e642:	d94e      	bls.n	800e6e2 <_svfiprintf_r+0x17a>
 800e644:	2900      	cmp	r1, #0
 800e646:	d111      	bne.n	800e66c <_svfiprintf_r+0x104>
 800e648:	e017      	b.n	800e67a <_svfiprintf_r+0x112>
 800e64a:	3501      	adds	r5, #1
 800e64c:	e7b0      	b.n	800e5b0 <_svfiprintf_r+0x48>
 800e64e:	4b41      	ldr	r3, [pc, #260]	; (800e754 <_svfiprintf_r+0x1ec>)
 800e650:	6822      	ldr	r2, [r4, #0]
 800e652:	1ac0      	subs	r0, r0, r3
 800e654:	2301      	movs	r3, #1
 800e656:	4083      	lsls	r3, r0
 800e658:	4313      	orrs	r3, r2
 800e65a:	002e      	movs	r6, r5
 800e65c:	6023      	str	r3, [r4, #0]
 800e65e:	e7ce      	b.n	800e5fe <_svfiprintf_r+0x96>
 800e660:	9b07      	ldr	r3, [sp, #28]
 800e662:	1d19      	adds	r1, r3, #4
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	9107      	str	r1, [sp, #28]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	db01      	blt.n	800e670 <_svfiprintf_r+0x108>
 800e66c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e66e:	e004      	b.n	800e67a <_svfiprintf_r+0x112>
 800e670:	425b      	negs	r3, r3
 800e672:	60e3      	str	r3, [r4, #12]
 800e674:	2302      	movs	r3, #2
 800e676:	4313      	orrs	r3, r2
 800e678:	6023      	str	r3, [r4, #0]
 800e67a:	782b      	ldrb	r3, [r5, #0]
 800e67c:	2b2e      	cmp	r3, #46	; 0x2e
 800e67e:	d10a      	bne.n	800e696 <_svfiprintf_r+0x12e>
 800e680:	786b      	ldrb	r3, [r5, #1]
 800e682:	2b2a      	cmp	r3, #42	; 0x2a
 800e684:	d135      	bne.n	800e6f2 <_svfiprintf_r+0x18a>
 800e686:	9b07      	ldr	r3, [sp, #28]
 800e688:	3502      	adds	r5, #2
 800e68a:	1d1a      	adds	r2, r3, #4
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	9207      	str	r2, [sp, #28]
 800e690:	2b00      	cmp	r3, #0
 800e692:	db2b      	blt.n	800e6ec <_svfiprintf_r+0x184>
 800e694:	9309      	str	r3, [sp, #36]	; 0x24
 800e696:	4e30      	ldr	r6, [pc, #192]	; (800e758 <_svfiprintf_r+0x1f0>)
 800e698:	2203      	movs	r2, #3
 800e69a:	0030      	movs	r0, r6
 800e69c:	7829      	ldrb	r1, [r5, #0]
 800e69e:	f7ff faa1 	bl	800dbe4 <memchr>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d006      	beq.n	800e6b4 <_svfiprintf_r+0x14c>
 800e6a6:	2340      	movs	r3, #64	; 0x40
 800e6a8:	1b80      	subs	r0, r0, r6
 800e6aa:	4083      	lsls	r3, r0
 800e6ac:	6822      	ldr	r2, [r4, #0]
 800e6ae:	3501      	adds	r5, #1
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	6023      	str	r3, [r4, #0]
 800e6b4:	7829      	ldrb	r1, [r5, #0]
 800e6b6:	2206      	movs	r2, #6
 800e6b8:	4828      	ldr	r0, [pc, #160]	; (800e75c <_svfiprintf_r+0x1f4>)
 800e6ba:	1c6e      	adds	r6, r5, #1
 800e6bc:	7621      	strb	r1, [r4, #24]
 800e6be:	f7ff fa91 	bl	800dbe4 <memchr>
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	d03c      	beq.n	800e740 <_svfiprintf_r+0x1d8>
 800e6c6:	4b26      	ldr	r3, [pc, #152]	; (800e760 <_svfiprintf_r+0x1f8>)
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d125      	bne.n	800e718 <_svfiprintf_r+0x1b0>
 800e6cc:	2207      	movs	r2, #7
 800e6ce:	9b07      	ldr	r3, [sp, #28]
 800e6d0:	3307      	adds	r3, #7
 800e6d2:	4393      	bics	r3, r2
 800e6d4:	3308      	adds	r3, #8
 800e6d6:	9307      	str	r3, [sp, #28]
 800e6d8:	6963      	ldr	r3, [r4, #20]
 800e6da:	9a04      	ldr	r2, [sp, #16]
 800e6dc:	189b      	adds	r3, r3, r2
 800e6de:	6163      	str	r3, [r4, #20]
 800e6e0:	e765      	b.n	800e5ae <_svfiprintf_r+0x46>
 800e6e2:	4343      	muls	r3, r0
 800e6e4:	0035      	movs	r5, r6
 800e6e6:	2101      	movs	r1, #1
 800e6e8:	189b      	adds	r3, r3, r2
 800e6ea:	e7a6      	b.n	800e63a <_svfiprintf_r+0xd2>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	425b      	negs	r3, r3
 800e6f0:	e7d0      	b.n	800e694 <_svfiprintf_r+0x12c>
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	200a      	movs	r0, #10
 800e6f6:	001a      	movs	r2, r3
 800e6f8:	3501      	adds	r5, #1
 800e6fa:	6063      	str	r3, [r4, #4]
 800e6fc:	7829      	ldrb	r1, [r5, #0]
 800e6fe:	1c6e      	adds	r6, r5, #1
 800e700:	3930      	subs	r1, #48	; 0x30
 800e702:	2909      	cmp	r1, #9
 800e704:	d903      	bls.n	800e70e <_svfiprintf_r+0x1a6>
 800e706:	2b00      	cmp	r3, #0
 800e708:	d0c5      	beq.n	800e696 <_svfiprintf_r+0x12e>
 800e70a:	9209      	str	r2, [sp, #36]	; 0x24
 800e70c:	e7c3      	b.n	800e696 <_svfiprintf_r+0x12e>
 800e70e:	4342      	muls	r2, r0
 800e710:	0035      	movs	r5, r6
 800e712:	2301      	movs	r3, #1
 800e714:	1852      	adds	r2, r2, r1
 800e716:	e7f1      	b.n	800e6fc <_svfiprintf_r+0x194>
 800e718:	ab07      	add	r3, sp, #28
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	003a      	movs	r2, r7
 800e71e:	0021      	movs	r1, r4
 800e720:	4b10      	ldr	r3, [pc, #64]	; (800e764 <_svfiprintf_r+0x1fc>)
 800e722:	9803      	ldr	r0, [sp, #12]
 800e724:	f7fd ffb6 	bl	800c694 <_printf_float>
 800e728:	9004      	str	r0, [sp, #16]
 800e72a:	9b04      	ldr	r3, [sp, #16]
 800e72c:	3301      	adds	r3, #1
 800e72e:	d1d3      	bne.n	800e6d8 <_svfiprintf_r+0x170>
 800e730:	89bb      	ldrh	r3, [r7, #12]
 800e732:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e734:	065b      	lsls	r3, r3, #25
 800e736:	d400      	bmi.n	800e73a <_svfiprintf_r+0x1d2>
 800e738:	e72d      	b.n	800e596 <_svfiprintf_r+0x2e>
 800e73a:	2001      	movs	r0, #1
 800e73c:	4240      	negs	r0, r0
 800e73e:	e72a      	b.n	800e596 <_svfiprintf_r+0x2e>
 800e740:	ab07      	add	r3, sp, #28
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	003a      	movs	r2, r7
 800e746:	0021      	movs	r1, r4
 800e748:	4b06      	ldr	r3, [pc, #24]	; (800e764 <_svfiprintf_r+0x1fc>)
 800e74a:	9803      	ldr	r0, [sp, #12]
 800e74c:	f7fe fa60 	bl	800cc10 <_printf_i>
 800e750:	e7ea      	b.n	800e728 <_svfiprintf_r+0x1c0>
 800e752:	46c0      	nop			; (mov r8, r8)
 800e754:	08012274 	.word	0x08012274
 800e758:	0801227a 	.word	0x0801227a
 800e75c:	0801227e 	.word	0x0801227e
 800e760:	0800c695 	.word	0x0800c695
 800e764:	0800e4a5 	.word	0x0800e4a5

0800e768 <_sbrk_r>:
 800e768:	2300      	movs	r3, #0
 800e76a:	b570      	push	{r4, r5, r6, lr}
 800e76c:	4d06      	ldr	r5, [pc, #24]	; (800e788 <_sbrk_r+0x20>)
 800e76e:	0004      	movs	r4, r0
 800e770:	0008      	movs	r0, r1
 800e772:	602b      	str	r3, [r5, #0]
 800e774:	f7fa fce8 	bl	8009148 <_sbrk>
 800e778:	1c43      	adds	r3, r0, #1
 800e77a:	d103      	bne.n	800e784 <_sbrk_r+0x1c>
 800e77c:	682b      	ldr	r3, [r5, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d000      	beq.n	800e784 <_sbrk_r+0x1c>
 800e782:	6023      	str	r3, [r4, #0]
 800e784:	bd70      	pop	{r4, r5, r6, pc}
 800e786:	46c0      	nop			; (mov r8, r8)
 800e788:	2000057c 	.word	0x2000057c

0800e78c <__assert_func>:
 800e78c:	b530      	push	{r4, r5, lr}
 800e78e:	0014      	movs	r4, r2
 800e790:	001a      	movs	r2, r3
 800e792:	4b09      	ldr	r3, [pc, #36]	; (800e7b8 <__assert_func+0x2c>)
 800e794:	0005      	movs	r5, r0
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	b085      	sub	sp, #20
 800e79a:	68d8      	ldr	r0, [r3, #12]
 800e79c:	4b07      	ldr	r3, [pc, #28]	; (800e7bc <__assert_func+0x30>)
 800e79e:	2c00      	cmp	r4, #0
 800e7a0:	d101      	bne.n	800e7a6 <__assert_func+0x1a>
 800e7a2:	4b07      	ldr	r3, [pc, #28]	; (800e7c0 <__assert_func+0x34>)
 800e7a4:	001c      	movs	r4, r3
 800e7a6:	9301      	str	r3, [sp, #4]
 800e7a8:	9100      	str	r1, [sp, #0]
 800e7aa:	002b      	movs	r3, r5
 800e7ac:	4905      	ldr	r1, [pc, #20]	; (800e7c4 <__assert_func+0x38>)
 800e7ae:	9402      	str	r4, [sp, #8]
 800e7b0:	f000 f80a 	bl	800e7c8 <fiprintf>
 800e7b4:	f000 fab2 	bl	800ed1c <abort>
 800e7b8:	20000010 	.word	0x20000010
 800e7bc:	08012285 	.word	0x08012285
 800e7c0:	080122c0 	.word	0x080122c0
 800e7c4:	08012292 	.word	0x08012292

0800e7c8 <fiprintf>:
 800e7c8:	b40e      	push	{r1, r2, r3}
 800e7ca:	b503      	push	{r0, r1, lr}
 800e7cc:	0001      	movs	r1, r0
 800e7ce:	ab03      	add	r3, sp, #12
 800e7d0:	4804      	ldr	r0, [pc, #16]	; (800e7e4 <fiprintf+0x1c>)
 800e7d2:	cb04      	ldmia	r3!, {r2}
 800e7d4:	6800      	ldr	r0, [r0, #0]
 800e7d6:	9301      	str	r3, [sp, #4]
 800e7d8:	f000 f88a 	bl	800e8f0 <_vfiprintf_r>
 800e7dc:	b002      	add	sp, #8
 800e7de:	bc08      	pop	{r3}
 800e7e0:	b003      	add	sp, #12
 800e7e2:	4718      	bx	r3
 800e7e4:	20000010 	.word	0x20000010

0800e7e8 <__ascii_mbtowc>:
 800e7e8:	b082      	sub	sp, #8
 800e7ea:	2900      	cmp	r1, #0
 800e7ec:	d100      	bne.n	800e7f0 <__ascii_mbtowc+0x8>
 800e7ee:	a901      	add	r1, sp, #4
 800e7f0:	1e10      	subs	r0, r2, #0
 800e7f2:	d006      	beq.n	800e802 <__ascii_mbtowc+0x1a>
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d006      	beq.n	800e806 <__ascii_mbtowc+0x1e>
 800e7f8:	7813      	ldrb	r3, [r2, #0]
 800e7fa:	600b      	str	r3, [r1, #0]
 800e7fc:	7810      	ldrb	r0, [r2, #0]
 800e7fe:	1e43      	subs	r3, r0, #1
 800e800:	4198      	sbcs	r0, r3
 800e802:	b002      	add	sp, #8
 800e804:	4770      	bx	lr
 800e806:	2002      	movs	r0, #2
 800e808:	4240      	negs	r0, r0
 800e80a:	e7fa      	b.n	800e802 <__ascii_mbtowc+0x1a>

0800e80c <memmove>:
 800e80c:	b510      	push	{r4, lr}
 800e80e:	4288      	cmp	r0, r1
 800e810:	d902      	bls.n	800e818 <memmove+0xc>
 800e812:	188b      	adds	r3, r1, r2
 800e814:	4298      	cmp	r0, r3
 800e816:	d303      	bcc.n	800e820 <memmove+0x14>
 800e818:	2300      	movs	r3, #0
 800e81a:	e007      	b.n	800e82c <memmove+0x20>
 800e81c:	5c8b      	ldrb	r3, [r1, r2]
 800e81e:	5483      	strb	r3, [r0, r2]
 800e820:	3a01      	subs	r2, #1
 800e822:	d2fb      	bcs.n	800e81c <memmove+0x10>
 800e824:	bd10      	pop	{r4, pc}
 800e826:	5ccc      	ldrb	r4, [r1, r3]
 800e828:	54c4      	strb	r4, [r0, r3]
 800e82a:	3301      	adds	r3, #1
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d1fa      	bne.n	800e826 <memmove+0x1a>
 800e830:	e7f8      	b.n	800e824 <memmove+0x18>
	...

0800e834 <__malloc_lock>:
 800e834:	b510      	push	{r4, lr}
 800e836:	4802      	ldr	r0, [pc, #8]	; (800e840 <__malloc_lock+0xc>)
 800e838:	f000 fc47 	bl	800f0ca <__retarget_lock_acquire_recursive>
 800e83c:	bd10      	pop	{r4, pc}
 800e83e:	46c0      	nop			; (mov r8, r8)
 800e840:	20000584 	.word	0x20000584

0800e844 <__malloc_unlock>:
 800e844:	b510      	push	{r4, lr}
 800e846:	4802      	ldr	r0, [pc, #8]	; (800e850 <__malloc_unlock+0xc>)
 800e848:	f000 fc40 	bl	800f0cc <__retarget_lock_release_recursive>
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	46c0      	nop			; (mov r8, r8)
 800e850:	20000584 	.word	0x20000584

0800e854 <_realloc_r>:
 800e854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e856:	0007      	movs	r7, r0
 800e858:	000d      	movs	r5, r1
 800e85a:	0016      	movs	r6, r2
 800e85c:	2900      	cmp	r1, #0
 800e85e:	d105      	bne.n	800e86c <_realloc_r+0x18>
 800e860:	0011      	movs	r1, r2
 800e862:	f7ff fdc1 	bl	800e3e8 <_malloc_r>
 800e866:	0004      	movs	r4, r0
 800e868:	0020      	movs	r0, r4
 800e86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e86c:	2a00      	cmp	r2, #0
 800e86e:	d103      	bne.n	800e878 <_realloc_r+0x24>
 800e870:	f7ff fd70 	bl	800e354 <_free_r>
 800e874:	0034      	movs	r4, r6
 800e876:	e7f7      	b.n	800e868 <_realloc_r+0x14>
 800e878:	f000 fc96 	bl	800f1a8 <_malloc_usable_size_r>
 800e87c:	002c      	movs	r4, r5
 800e87e:	42b0      	cmp	r0, r6
 800e880:	d2f2      	bcs.n	800e868 <_realloc_r+0x14>
 800e882:	0031      	movs	r1, r6
 800e884:	0038      	movs	r0, r7
 800e886:	f7ff fdaf 	bl	800e3e8 <_malloc_r>
 800e88a:	1e04      	subs	r4, r0, #0
 800e88c:	d0ec      	beq.n	800e868 <_realloc_r+0x14>
 800e88e:	0029      	movs	r1, r5
 800e890:	0032      	movs	r2, r6
 800e892:	f7fd fe43 	bl	800c51c <memcpy>
 800e896:	0029      	movs	r1, r5
 800e898:	0038      	movs	r0, r7
 800e89a:	f7ff fd5b 	bl	800e354 <_free_r>
 800e89e:	e7e3      	b.n	800e868 <_realloc_r+0x14>

0800e8a0 <__sfputc_r>:
 800e8a0:	6893      	ldr	r3, [r2, #8]
 800e8a2:	b510      	push	{r4, lr}
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	6093      	str	r3, [r2, #8]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	da04      	bge.n	800e8b6 <__sfputc_r+0x16>
 800e8ac:	6994      	ldr	r4, [r2, #24]
 800e8ae:	42a3      	cmp	r3, r4
 800e8b0:	db07      	blt.n	800e8c2 <__sfputc_r+0x22>
 800e8b2:	290a      	cmp	r1, #10
 800e8b4:	d005      	beq.n	800e8c2 <__sfputc_r+0x22>
 800e8b6:	6813      	ldr	r3, [r2, #0]
 800e8b8:	1c58      	adds	r0, r3, #1
 800e8ba:	6010      	str	r0, [r2, #0]
 800e8bc:	7019      	strb	r1, [r3, #0]
 800e8be:	0008      	movs	r0, r1
 800e8c0:	bd10      	pop	{r4, pc}
 800e8c2:	f000 f94f 	bl	800eb64 <__swbuf_r>
 800e8c6:	0001      	movs	r1, r0
 800e8c8:	e7f9      	b.n	800e8be <__sfputc_r+0x1e>

0800e8ca <__sfputs_r>:
 800e8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8cc:	0006      	movs	r6, r0
 800e8ce:	000f      	movs	r7, r1
 800e8d0:	0014      	movs	r4, r2
 800e8d2:	18d5      	adds	r5, r2, r3
 800e8d4:	42ac      	cmp	r4, r5
 800e8d6:	d101      	bne.n	800e8dc <__sfputs_r+0x12>
 800e8d8:	2000      	movs	r0, #0
 800e8da:	e007      	b.n	800e8ec <__sfputs_r+0x22>
 800e8dc:	7821      	ldrb	r1, [r4, #0]
 800e8de:	003a      	movs	r2, r7
 800e8e0:	0030      	movs	r0, r6
 800e8e2:	f7ff ffdd 	bl	800e8a0 <__sfputc_r>
 800e8e6:	3401      	adds	r4, #1
 800e8e8:	1c43      	adds	r3, r0, #1
 800e8ea:	d1f3      	bne.n	800e8d4 <__sfputs_r+0xa>
 800e8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8f0 <_vfiprintf_r>:
 800e8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8f2:	b0a1      	sub	sp, #132	; 0x84
 800e8f4:	0006      	movs	r6, r0
 800e8f6:	000c      	movs	r4, r1
 800e8f8:	001f      	movs	r7, r3
 800e8fa:	9203      	str	r2, [sp, #12]
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d004      	beq.n	800e90a <_vfiprintf_r+0x1a>
 800e900:	6983      	ldr	r3, [r0, #24]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d101      	bne.n	800e90a <_vfiprintf_r+0x1a>
 800e906:	f000 fb3f 	bl	800ef88 <__sinit>
 800e90a:	4b8e      	ldr	r3, [pc, #568]	; (800eb44 <_vfiprintf_r+0x254>)
 800e90c:	429c      	cmp	r4, r3
 800e90e:	d11c      	bne.n	800e94a <_vfiprintf_r+0x5a>
 800e910:	6874      	ldr	r4, [r6, #4]
 800e912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e914:	07db      	lsls	r3, r3, #31
 800e916:	d405      	bmi.n	800e924 <_vfiprintf_r+0x34>
 800e918:	89a3      	ldrh	r3, [r4, #12]
 800e91a:	059b      	lsls	r3, r3, #22
 800e91c:	d402      	bmi.n	800e924 <_vfiprintf_r+0x34>
 800e91e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e920:	f000 fbd3 	bl	800f0ca <__retarget_lock_acquire_recursive>
 800e924:	89a3      	ldrh	r3, [r4, #12]
 800e926:	071b      	lsls	r3, r3, #28
 800e928:	d502      	bpl.n	800e930 <_vfiprintf_r+0x40>
 800e92a:	6923      	ldr	r3, [r4, #16]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d11d      	bne.n	800e96c <_vfiprintf_r+0x7c>
 800e930:	0021      	movs	r1, r4
 800e932:	0030      	movs	r0, r6
 800e934:	f000 f97a 	bl	800ec2c <__swsetup_r>
 800e938:	2800      	cmp	r0, #0
 800e93a:	d017      	beq.n	800e96c <_vfiprintf_r+0x7c>
 800e93c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e93e:	07db      	lsls	r3, r3, #31
 800e940:	d50d      	bpl.n	800e95e <_vfiprintf_r+0x6e>
 800e942:	2001      	movs	r0, #1
 800e944:	4240      	negs	r0, r0
 800e946:	b021      	add	sp, #132	; 0x84
 800e948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e94a:	4b7f      	ldr	r3, [pc, #508]	; (800eb48 <_vfiprintf_r+0x258>)
 800e94c:	429c      	cmp	r4, r3
 800e94e:	d101      	bne.n	800e954 <_vfiprintf_r+0x64>
 800e950:	68b4      	ldr	r4, [r6, #8]
 800e952:	e7de      	b.n	800e912 <_vfiprintf_r+0x22>
 800e954:	4b7d      	ldr	r3, [pc, #500]	; (800eb4c <_vfiprintf_r+0x25c>)
 800e956:	429c      	cmp	r4, r3
 800e958:	d1db      	bne.n	800e912 <_vfiprintf_r+0x22>
 800e95a:	68f4      	ldr	r4, [r6, #12]
 800e95c:	e7d9      	b.n	800e912 <_vfiprintf_r+0x22>
 800e95e:	89a3      	ldrh	r3, [r4, #12]
 800e960:	059b      	lsls	r3, r3, #22
 800e962:	d4ee      	bmi.n	800e942 <_vfiprintf_r+0x52>
 800e964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e966:	f000 fbb1 	bl	800f0cc <__retarget_lock_release_recursive>
 800e96a:	e7ea      	b.n	800e942 <_vfiprintf_r+0x52>
 800e96c:	2300      	movs	r3, #0
 800e96e:	ad08      	add	r5, sp, #32
 800e970:	616b      	str	r3, [r5, #20]
 800e972:	3320      	adds	r3, #32
 800e974:	766b      	strb	r3, [r5, #25]
 800e976:	3310      	adds	r3, #16
 800e978:	76ab      	strb	r3, [r5, #26]
 800e97a:	9707      	str	r7, [sp, #28]
 800e97c:	9f03      	ldr	r7, [sp, #12]
 800e97e:	783b      	ldrb	r3, [r7, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d001      	beq.n	800e988 <_vfiprintf_r+0x98>
 800e984:	2b25      	cmp	r3, #37	; 0x25
 800e986:	d14e      	bne.n	800ea26 <_vfiprintf_r+0x136>
 800e988:	9b03      	ldr	r3, [sp, #12]
 800e98a:	1afb      	subs	r3, r7, r3
 800e98c:	9305      	str	r3, [sp, #20]
 800e98e:	9b03      	ldr	r3, [sp, #12]
 800e990:	429f      	cmp	r7, r3
 800e992:	d00d      	beq.n	800e9b0 <_vfiprintf_r+0xc0>
 800e994:	9b05      	ldr	r3, [sp, #20]
 800e996:	0021      	movs	r1, r4
 800e998:	0030      	movs	r0, r6
 800e99a:	9a03      	ldr	r2, [sp, #12]
 800e99c:	f7ff ff95 	bl	800e8ca <__sfputs_r>
 800e9a0:	1c43      	adds	r3, r0, #1
 800e9a2:	d100      	bne.n	800e9a6 <_vfiprintf_r+0xb6>
 800e9a4:	e0b5      	b.n	800eb12 <_vfiprintf_r+0x222>
 800e9a6:	696a      	ldr	r2, [r5, #20]
 800e9a8:	9b05      	ldr	r3, [sp, #20]
 800e9aa:	4694      	mov	ip, r2
 800e9ac:	4463      	add	r3, ip
 800e9ae:	616b      	str	r3, [r5, #20]
 800e9b0:	783b      	ldrb	r3, [r7, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d100      	bne.n	800e9b8 <_vfiprintf_r+0xc8>
 800e9b6:	e0ac      	b.n	800eb12 <_vfiprintf_r+0x222>
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	1c7b      	adds	r3, r7, #1
 800e9bc:	9303      	str	r3, [sp, #12]
 800e9be:	2300      	movs	r3, #0
 800e9c0:	4252      	negs	r2, r2
 800e9c2:	606a      	str	r2, [r5, #4]
 800e9c4:	a904      	add	r1, sp, #16
 800e9c6:	3254      	adds	r2, #84	; 0x54
 800e9c8:	1852      	adds	r2, r2, r1
 800e9ca:	602b      	str	r3, [r5, #0]
 800e9cc:	60eb      	str	r3, [r5, #12]
 800e9ce:	60ab      	str	r3, [r5, #8]
 800e9d0:	7013      	strb	r3, [r2, #0]
 800e9d2:	65ab      	str	r3, [r5, #88]	; 0x58
 800e9d4:	9b03      	ldr	r3, [sp, #12]
 800e9d6:	2205      	movs	r2, #5
 800e9d8:	7819      	ldrb	r1, [r3, #0]
 800e9da:	485d      	ldr	r0, [pc, #372]	; (800eb50 <_vfiprintf_r+0x260>)
 800e9dc:	f7ff f902 	bl	800dbe4 <memchr>
 800e9e0:	9b03      	ldr	r3, [sp, #12]
 800e9e2:	1c5f      	adds	r7, r3, #1
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	d120      	bne.n	800ea2a <_vfiprintf_r+0x13a>
 800e9e8:	682a      	ldr	r2, [r5, #0]
 800e9ea:	06d3      	lsls	r3, r2, #27
 800e9ec:	d504      	bpl.n	800e9f8 <_vfiprintf_r+0x108>
 800e9ee:	2353      	movs	r3, #83	; 0x53
 800e9f0:	a904      	add	r1, sp, #16
 800e9f2:	185b      	adds	r3, r3, r1
 800e9f4:	2120      	movs	r1, #32
 800e9f6:	7019      	strb	r1, [r3, #0]
 800e9f8:	0713      	lsls	r3, r2, #28
 800e9fa:	d504      	bpl.n	800ea06 <_vfiprintf_r+0x116>
 800e9fc:	2353      	movs	r3, #83	; 0x53
 800e9fe:	a904      	add	r1, sp, #16
 800ea00:	185b      	adds	r3, r3, r1
 800ea02:	212b      	movs	r1, #43	; 0x2b
 800ea04:	7019      	strb	r1, [r3, #0]
 800ea06:	9b03      	ldr	r3, [sp, #12]
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea0c:	d016      	beq.n	800ea3c <_vfiprintf_r+0x14c>
 800ea0e:	2100      	movs	r1, #0
 800ea10:	68eb      	ldr	r3, [r5, #12]
 800ea12:	9f03      	ldr	r7, [sp, #12]
 800ea14:	783a      	ldrb	r2, [r7, #0]
 800ea16:	1c78      	adds	r0, r7, #1
 800ea18:	3a30      	subs	r2, #48	; 0x30
 800ea1a:	4684      	mov	ip, r0
 800ea1c:	2a09      	cmp	r2, #9
 800ea1e:	d94f      	bls.n	800eac0 <_vfiprintf_r+0x1d0>
 800ea20:	2900      	cmp	r1, #0
 800ea22:	d111      	bne.n	800ea48 <_vfiprintf_r+0x158>
 800ea24:	e017      	b.n	800ea56 <_vfiprintf_r+0x166>
 800ea26:	3701      	adds	r7, #1
 800ea28:	e7a9      	b.n	800e97e <_vfiprintf_r+0x8e>
 800ea2a:	4b49      	ldr	r3, [pc, #292]	; (800eb50 <_vfiprintf_r+0x260>)
 800ea2c:	682a      	ldr	r2, [r5, #0]
 800ea2e:	1ac0      	subs	r0, r0, r3
 800ea30:	2301      	movs	r3, #1
 800ea32:	4083      	lsls	r3, r0
 800ea34:	4313      	orrs	r3, r2
 800ea36:	602b      	str	r3, [r5, #0]
 800ea38:	9703      	str	r7, [sp, #12]
 800ea3a:	e7cb      	b.n	800e9d4 <_vfiprintf_r+0xe4>
 800ea3c:	9b07      	ldr	r3, [sp, #28]
 800ea3e:	1d19      	adds	r1, r3, #4
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	9107      	str	r1, [sp, #28]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	db01      	blt.n	800ea4c <_vfiprintf_r+0x15c>
 800ea48:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea4a:	e004      	b.n	800ea56 <_vfiprintf_r+0x166>
 800ea4c:	425b      	negs	r3, r3
 800ea4e:	60eb      	str	r3, [r5, #12]
 800ea50:	2302      	movs	r3, #2
 800ea52:	4313      	orrs	r3, r2
 800ea54:	602b      	str	r3, [r5, #0]
 800ea56:	783b      	ldrb	r3, [r7, #0]
 800ea58:	2b2e      	cmp	r3, #46	; 0x2e
 800ea5a:	d10a      	bne.n	800ea72 <_vfiprintf_r+0x182>
 800ea5c:	787b      	ldrb	r3, [r7, #1]
 800ea5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ea60:	d137      	bne.n	800ead2 <_vfiprintf_r+0x1e2>
 800ea62:	9b07      	ldr	r3, [sp, #28]
 800ea64:	3702      	adds	r7, #2
 800ea66:	1d1a      	adds	r2, r3, #4
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	9207      	str	r2, [sp, #28]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	db2d      	blt.n	800eacc <_vfiprintf_r+0x1dc>
 800ea70:	9309      	str	r3, [sp, #36]	; 0x24
 800ea72:	2203      	movs	r2, #3
 800ea74:	7839      	ldrb	r1, [r7, #0]
 800ea76:	4837      	ldr	r0, [pc, #220]	; (800eb54 <_vfiprintf_r+0x264>)
 800ea78:	f7ff f8b4 	bl	800dbe4 <memchr>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d007      	beq.n	800ea90 <_vfiprintf_r+0x1a0>
 800ea80:	4b34      	ldr	r3, [pc, #208]	; (800eb54 <_vfiprintf_r+0x264>)
 800ea82:	682a      	ldr	r2, [r5, #0]
 800ea84:	1ac0      	subs	r0, r0, r3
 800ea86:	2340      	movs	r3, #64	; 0x40
 800ea88:	4083      	lsls	r3, r0
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	3701      	adds	r7, #1
 800ea8e:	602b      	str	r3, [r5, #0]
 800ea90:	7839      	ldrb	r1, [r7, #0]
 800ea92:	1c7b      	adds	r3, r7, #1
 800ea94:	2206      	movs	r2, #6
 800ea96:	4830      	ldr	r0, [pc, #192]	; (800eb58 <_vfiprintf_r+0x268>)
 800ea98:	9303      	str	r3, [sp, #12]
 800ea9a:	7629      	strb	r1, [r5, #24]
 800ea9c:	f7ff f8a2 	bl	800dbe4 <memchr>
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d045      	beq.n	800eb30 <_vfiprintf_r+0x240>
 800eaa4:	4b2d      	ldr	r3, [pc, #180]	; (800eb5c <_vfiprintf_r+0x26c>)
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d127      	bne.n	800eafa <_vfiprintf_r+0x20a>
 800eaaa:	2207      	movs	r2, #7
 800eaac:	9b07      	ldr	r3, [sp, #28]
 800eaae:	3307      	adds	r3, #7
 800eab0:	4393      	bics	r3, r2
 800eab2:	3308      	adds	r3, #8
 800eab4:	9307      	str	r3, [sp, #28]
 800eab6:	696b      	ldr	r3, [r5, #20]
 800eab8:	9a04      	ldr	r2, [sp, #16]
 800eaba:	189b      	adds	r3, r3, r2
 800eabc:	616b      	str	r3, [r5, #20]
 800eabe:	e75d      	b.n	800e97c <_vfiprintf_r+0x8c>
 800eac0:	210a      	movs	r1, #10
 800eac2:	434b      	muls	r3, r1
 800eac4:	4667      	mov	r7, ip
 800eac6:	189b      	adds	r3, r3, r2
 800eac8:	3909      	subs	r1, #9
 800eaca:	e7a3      	b.n	800ea14 <_vfiprintf_r+0x124>
 800eacc:	2301      	movs	r3, #1
 800eace:	425b      	negs	r3, r3
 800ead0:	e7ce      	b.n	800ea70 <_vfiprintf_r+0x180>
 800ead2:	2300      	movs	r3, #0
 800ead4:	001a      	movs	r2, r3
 800ead6:	3701      	adds	r7, #1
 800ead8:	606b      	str	r3, [r5, #4]
 800eada:	7839      	ldrb	r1, [r7, #0]
 800eadc:	1c78      	adds	r0, r7, #1
 800eade:	3930      	subs	r1, #48	; 0x30
 800eae0:	4684      	mov	ip, r0
 800eae2:	2909      	cmp	r1, #9
 800eae4:	d903      	bls.n	800eaee <_vfiprintf_r+0x1fe>
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d0c3      	beq.n	800ea72 <_vfiprintf_r+0x182>
 800eaea:	9209      	str	r2, [sp, #36]	; 0x24
 800eaec:	e7c1      	b.n	800ea72 <_vfiprintf_r+0x182>
 800eaee:	230a      	movs	r3, #10
 800eaf0:	435a      	muls	r2, r3
 800eaf2:	4667      	mov	r7, ip
 800eaf4:	1852      	adds	r2, r2, r1
 800eaf6:	3b09      	subs	r3, #9
 800eaf8:	e7ef      	b.n	800eada <_vfiprintf_r+0x1ea>
 800eafa:	ab07      	add	r3, sp, #28
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	0022      	movs	r2, r4
 800eb00:	0029      	movs	r1, r5
 800eb02:	0030      	movs	r0, r6
 800eb04:	4b16      	ldr	r3, [pc, #88]	; (800eb60 <_vfiprintf_r+0x270>)
 800eb06:	f7fd fdc5 	bl	800c694 <_printf_float>
 800eb0a:	9004      	str	r0, [sp, #16]
 800eb0c:	9b04      	ldr	r3, [sp, #16]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	d1d1      	bne.n	800eab6 <_vfiprintf_r+0x1c6>
 800eb12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb14:	07db      	lsls	r3, r3, #31
 800eb16:	d405      	bmi.n	800eb24 <_vfiprintf_r+0x234>
 800eb18:	89a3      	ldrh	r3, [r4, #12]
 800eb1a:	059b      	lsls	r3, r3, #22
 800eb1c:	d402      	bmi.n	800eb24 <_vfiprintf_r+0x234>
 800eb1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb20:	f000 fad4 	bl	800f0cc <__retarget_lock_release_recursive>
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	065b      	lsls	r3, r3, #25
 800eb28:	d500      	bpl.n	800eb2c <_vfiprintf_r+0x23c>
 800eb2a:	e70a      	b.n	800e942 <_vfiprintf_r+0x52>
 800eb2c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eb2e:	e70a      	b.n	800e946 <_vfiprintf_r+0x56>
 800eb30:	ab07      	add	r3, sp, #28
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	0022      	movs	r2, r4
 800eb36:	0029      	movs	r1, r5
 800eb38:	0030      	movs	r0, r6
 800eb3a:	4b09      	ldr	r3, [pc, #36]	; (800eb60 <_vfiprintf_r+0x270>)
 800eb3c:	f7fe f868 	bl	800cc10 <_printf_i>
 800eb40:	e7e3      	b.n	800eb0a <_vfiprintf_r+0x21a>
 800eb42:	46c0      	nop			; (mov r8, r8)
 800eb44:	080123ec 	.word	0x080123ec
 800eb48:	0801240c 	.word	0x0801240c
 800eb4c:	080123cc 	.word	0x080123cc
 800eb50:	08012274 	.word	0x08012274
 800eb54:	0801227a 	.word	0x0801227a
 800eb58:	0801227e 	.word	0x0801227e
 800eb5c:	0800c695 	.word	0x0800c695
 800eb60:	0800e8cb 	.word	0x0800e8cb

0800eb64 <__swbuf_r>:
 800eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb66:	0005      	movs	r5, r0
 800eb68:	000e      	movs	r6, r1
 800eb6a:	0014      	movs	r4, r2
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	d004      	beq.n	800eb7a <__swbuf_r+0x16>
 800eb70:	6983      	ldr	r3, [r0, #24]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d101      	bne.n	800eb7a <__swbuf_r+0x16>
 800eb76:	f000 fa07 	bl	800ef88 <__sinit>
 800eb7a:	4b22      	ldr	r3, [pc, #136]	; (800ec04 <__swbuf_r+0xa0>)
 800eb7c:	429c      	cmp	r4, r3
 800eb7e:	d12e      	bne.n	800ebde <__swbuf_r+0x7a>
 800eb80:	686c      	ldr	r4, [r5, #4]
 800eb82:	69a3      	ldr	r3, [r4, #24]
 800eb84:	60a3      	str	r3, [r4, #8]
 800eb86:	89a3      	ldrh	r3, [r4, #12]
 800eb88:	071b      	lsls	r3, r3, #28
 800eb8a:	d532      	bpl.n	800ebf2 <__swbuf_r+0x8e>
 800eb8c:	6923      	ldr	r3, [r4, #16]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d02f      	beq.n	800ebf2 <__swbuf_r+0x8e>
 800eb92:	6823      	ldr	r3, [r4, #0]
 800eb94:	6922      	ldr	r2, [r4, #16]
 800eb96:	b2f7      	uxtb	r7, r6
 800eb98:	1a98      	subs	r0, r3, r2
 800eb9a:	6963      	ldr	r3, [r4, #20]
 800eb9c:	b2f6      	uxtb	r6, r6
 800eb9e:	4283      	cmp	r3, r0
 800eba0:	dc05      	bgt.n	800ebae <__swbuf_r+0x4a>
 800eba2:	0021      	movs	r1, r4
 800eba4:	0028      	movs	r0, r5
 800eba6:	f000 f94d 	bl	800ee44 <_fflush_r>
 800ebaa:	2800      	cmp	r0, #0
 800ebac:	d127      	bne.n	800ebfe <__swbuf_r+0x9a>
 800ebae:	68a3      	ldr	r3, [r4, #8]
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	60a3      	str	r3, [r4, #8]
 800ebb6:	6823      	ldr	r3, [r4, #0]
 800ebb8:	1c5a      	adds	r2, r3, #1
 800ebba:	6022      	str	r2, [r4, #0]
 800ebbc:	701f      	strb	r7, [r3, #0]
 800ebbe:	6963      	ldr	r3, [r4, #20]
 800ebc0:	4283      	cmp	r3, r0
 800ebc2:	d004      	beq.n	800ebce <__swbuf_r+0x6a>
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	07db      	lsls	r3, r3, #31
 800ebc8:	d507      	bpl.n	800ebda <__swbuf_r+0x76>
 800ebca:	2e0a      	cmp	r6, #10
 800ebcc:	d105      	bne.n	800ebda <__swbuf_r+0x76>
 800ebce:	0021      	movs	r1, r4
 800ebd0:	0028      	movs	r0, r5
 800ebd2:	f000 f937 	bl	800ee44 <_fflush_r>
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	d111      	bne.n	800ebfe <__swbuf_r+0x9a>
 800ebda:	0030      	movs	r0, r6
 800ebdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebde:	4b0a      	ldr	r3, [pc, #40]	; (800ec08 <__swbuf_r+0xa4>)
 800ebe0:	429c      	cmp	r4, r3
 800ebe2:	d101      	bne.n	800ebe8 <__swbuf_r+0x84>
 800ebe4:	68ac      	ldr	r4, [r5, #8]
 800ebe6:	e7cc      	b.n	800eb82 <__swbuf_r+0x1e>
 800ebe8:	4b08      	ldr	r3, [pc, #32]	; (800ec0c <__swbuf_r+0xa8>)
 800ebea:	429c      	cmp	r4, r3
 800ebec:	d1c9      	bne.n	800eb82 <__swbuf_r+0x1e>
 800ebee:	68ec      	ldr	r4, [r5, #12]
 800ebf0:	e7c7      	b.n	800eb82 <__swbuf_r+0x1e>
 800ebf2:	0021      	movs	r1, r4
 800ebf4:	0028      	movs	r0, r5
 800ebf6:	f000 f819 	bl	800ec2c <__swsetup_r>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d0c9      	beq.n	800eb92 <__swbuf_r+0x2e>
 800ebfe:	2601      	movs	r6, #1
 800ec00:	4276      	negs	r6, r6
 800ec02:	e7ea      	b.n	800ebda <__swbuf_r+0x76>
 800ec04:	080123ec 	.word	0x080123ec
 800ec08:	0801240c 	.word	0x0801240c
 800ec0c:	080123cc 	.word	0x080123cc

0800ec10 <__ascii_wctomb>:
 800ec10:	0003      	movs	r3, r0
 800ec12:	1e08      	subs	r0, r1, #0
 800ec14:	d005      	beq.n	800ec22 <__ascii_wctomb+0x12>
 800ec16:	2aff      	cmp	r2, #255	; 0xff
 800ec18:	d904      	bls.n	800ec24 <__ascii_wctomb+0x14>
 800ec1a:	228a      	movs	r2, #138	; 0x8a
 800ec1c:	2001      	movs	r0, #1
 800ec1e:	601a      	str	r2, [r3, #0]
 800ec20:	4240      	negs	r0, r0
 800ec22:	4770      	bx	lr
 800ec24:	2001      	movs	r0, #1
 800ec26:	700a      	strb	r2, [r1, #0]
 800ec28:	e7fb      	b.n	800ec22 <__ascii_wctomb+0x12>
	...

0800ec2c <__swsetup_r>:
 800ec2c:	4b37      	ldr	r3, [pc, #220]	; (800ed0c <__swsetup_r+0xe0>)
 800ec2e:	b570      	push	{r4, r5, r6, lr}
 800ec30:	681d      	ldr	r5, [r3, #0]
 800ec32:	0006      	movs	r6, r0
 800ec34:	000c      	movs	r4, r1
 800ec36:	2d00      	cmp	r5, #0
 800ec38:	d005      	beq.n	800ec46 <__swsetup_r+0x1a>
 800ec3a:	69ab      	ldr	r3, [r5, #24]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d102      	bne.n	800ec46 <__swsetup_r+0x1a>
 800ec40:	0028      	movs	r0, r5
 800ec42:	f000 f9a1 	bl	800ef88 <__sinit>
 800ec46:	4b32      	ldr	r3, [pc, #200]	; (800ed10 <__swsetup_r+0xe4>)
 800ec48:	429c      	cmp	r4, r3
 800ec4a:	d10f      	bne.n	800ec6c <__swsetup_r+0x40>
 800ec4c:	686c      	ldr	r4, [r5, #4]
 800ec4e:	230c      	movs	r3, #12
 800ec50:	5ee2      	ldrsh	r2, [r4, r3]
 800ec52:	b293      	uxth	r3, r2
 800ec54:	0711      	lsls	r1, r2, #28
 800ec56:	d42d      	bmi.n	800ecb4 <__swsetup_r+0x88>
 800ec58:	06d9      	lsls	r1, r3, #27
 800ec5a:	d411      	bmi.n	800ec80 <__swsetup_r+0x54>
 800ec5c:	2309      	movs	r3, #9
 800ec5e:	2001      	movs	r0, #1
 800ec60:	6033      	str	r3, [r6, #0]
 800ec62:	3337      	adds	r3, #55	; 0x37
 800ec64:	4313      	orrs	r3, r2
 800ec66:	81a3      	strh	r3, [r4, #12]
 800ec68:	4240      	negs	r0, r0
 800ec6a:	bd70      	pop	{r4, r5, r6, pc}
 800ec6c:	4b29      	ldr	r3, [pc, #164]	; (800ed14 <__swsetup_r+0xe8>)
 800ec6e:	429c      	cmp	r4, r3
 800ec70:	d101      	bne.n	800ec76 <__swsetup_r+0x4a>
 800ec72:	68ac      	ldr	r4, [r5, #8]
 800ec74:	e7eb      	b.n	800ec4e <__swsetup_r+0x22>
 800ec76:	4b28      	ldr	r3, [pc, #160]	; (800ed18 <__swsetup_r+0xec>)
 800ec78:	429c      	cmp	r4, r3
 800ec7a:	d1e8      	bne.n	800ec4e <__swsetup_r+0x22>
 800ec7c:	68ec      	ldr	r4, [r5, #12]
 800ec7e:	e7e6      	b.n	800ec4e <__swsetup_r+0x22>
 800ec80:	075b      	lsls	r3, r3, #29
 800ec82:	d513      	bpl.n	800ecac <__swsetup_r+0x80>
 800ec84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec86:	2900      	cmp	r1, #0
 800ec88:	d008      	beq.n	800ec9c <__swsetup_r+0x70>
 800ec8a:	0023      	movs	r3, r4
 800ec8c:	3344      	adds	r3, #68	; 0x44
 800ec8e:	4299      	cmp	r1, r3
 800ec90:	d002      	beq.n	800ec98 <__swsetup_r+0x6c>
 800ec92:	0030      	movs	r0, r6
 800ec94:	f7ff fb5e 	bl	800e354 <_free_r>
 800ec98:	2300      	movs	r3, #0
 800ec9a:	6363      	str	r3, [r4, #52]	; 0x34
 800ec9c:	2224      	movs	r2, #36	; 0x24
 800ec9e:	89a3      	ldrh	r3, [r4, #12]
 800eca0:	4393      	bics	r3, r2
 800eca2:	81a3      	strh	r3, [r4, #12]
 800eca4:	2300      	movs	r3, #0
 800eca6:	6063      	str	r3, [r4, #4]
 800eca8:	6923      	ldr	r3, [r4, #16]
 800ecaa:	6023      	str	r3, [r4, #0]
 800ecac:	2308      	movs	r3, #8
 800ecae:	89a2      	ldrh	r2, [r4, #12]
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	81a3      	strh	r3, [r4, #12]
 800ecb4:	6923      	ldr	r3, [r4, #16]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d10b      	bne.n	800ecd2 <__swsetup_r+0xa6>
 800ecba:	21a0      	movs	r1, #160	; 0xa0
 800ecbc:	2280      	movs	r2, #128	; 0x80
 800ecbe:	89a3      	ldrh	r3, [r4, #12]
 800ecc0:	0089      	lsls	r1, r1, #2
 800ecc2:	0092      	lsls	r2, r2, #2
 800ecc4:	400b      	ands	r3, r1
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d003      	beq.n	800ecd2 <__swsetup_r+0xa6>
 800ecca:	0021      	movs	r1, r4
 800eccc:	0030      	movs	r0, r6
 800ecce:	f000 fa27 	bl	800f120 <__smakebuf_r>
 800ecd2:	220c      	movs	r2, #12
 800ecd4:	5ea3      	ldrsh	r3, [r4, r2]
 800ecd6:	2001      	movs	r0, #1
 800ecd8:	001a      	movs	r2, r3
 800ecda:	b299      	uxth	r1, r3
 800ecdc:	4002      	ands	r2, r0
 800ecde:	4203      	tst	r3, r0
 800ece0:	d00f      	beq.n	800ed02 <__swsetup_r+0xd6>
 800ece2:	2200      	movs	r2, #0
 800ece4:	60a2      	str	r2, [r4, #8]
 800ece6:	6962      	ldr	r2, [r4, #20]
 800ece8:	4252      	negs	r2, r2
 800ecea:	61a2      	str	r2, [r4, #24]
 800ecec:	2000      	movs	r0, #0
 800ecee:	6922      	ldr	r2, [r4, #16]
 800ecf0:	4282      	cmp	r2, r0
 800ecf2:	d1ba      	bne.n	800ec6a <__swsetup_r+0x3e>
 800ecf4:	060a      	lsls	r2, r1, #24
 800ecf6:	d5b8      	bpl.n	800ec6a <__swsetup_r+0x3e>
 800ecf8:	2240      	movs	r2, #64	; 0x40
 800ecfa:	4313      	orrs	r3, r2
 800ecfc:	81a3      	strh	r3, [r4, #12]
 800ecfe:	3801      	subs	r0, #1
 800ed00:	e7b3      	b.n	800ec6a <__swsetup_r+0x3e>
 800ed02:	0788      	lsls	r0, r1, #30
 800ed04:	d400      	bmi.n	800ed08 <__swsetup_r+0xdc>
 800ed06:	6962      	ldr	r2, [r4, #20]
 800ed08:	60a2      	str	r2, [r4, #8]
 800ed0a:	e7ef      	b.n	800ecec <__swsetup_r+0xc0>
 800ed0c:	20000010 	.word	0x20000010
 800ed10:	080123ec 	.word	0x080123ec
 800ed14:	0801240c 	.word	0x0801240c
 800ed18:	080123cc 	.word	0x080123cc

0800ed1c <abort>:
 800ed1c:	2006      	movs	r0, #6
 800ed1e:	b510      	push	{r4, lr}
 800ed20:	f000 fa74 	bl	800f20c <raise>
 800ed24:	2001      	movs	r0, #1
 800ed26:	f7fa f99e 	bl	8009066 <_exit>
	...

0800ed2c <__sflush_r>:
 800ed2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed2e:	898b      	ldrh	r3, [r1, #12]
 800ed30:	0005      	movs	r5, r0
 800ed32:	000c      	movs	r4, r1
 800ed34:	071a      	lsls	r2, r3, #28
 800ed36:	d45f      	bmi.n	800edf8 <__sflush_r+0xcc>
 800ed38:	684a      	ldr	r2, [r1, #4]
 800ed3a:	2a00      	cmp	r2, #0
 800ed3c:	dc04      	bgt.n	800ed48 <__sflush_r+0x1c>
 800ed3e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ed40:	2a00      	cmp	r2, #0
 800ed42:	dc01      	bgt.n	800ed48 <__sflush_r+0x1c>
 800ed44:	2000      	movs	r0, #0
 800ed46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ed48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ed4a:	2f00      	cmp	r7, #0
 800ed4c:	d0fa      	beq.n	800ed44 <__sflush_r+0x18>
 800ed4e:	2200      	movs	r2, #0
 800ed50:	2180      	movs	r1, #128	; 0x80
 800ed52:	682e      	ldr	r6, [r5, #0]
 800ed54:	602a      	str	r2, [r5, #0]
 800ed56:	001a      	movs	r2, r3
 800ed58:	0149      	lsls	r1, r1, #5
 800ed5a:	400a      	ands	r2, r1
 800ed5c:	420b      	tst	r3, r1
 800ed5e:	d034      	beq.n	800edca <__sflush_r+0x9e>
 800ed60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed62:	89a3      	ldrh	r3, [r4, #12]
 800ed64:	075b      	lsls	r3, r3, #29
 800ed66:	d506      	bpl.n	800ed76 <__sflush_r+0x4a>
 800ed68:	6863      	ldr	r3, [r4, #4]
 800ed6a:	1ac0      	subs	r0, r0, r3
 800ed6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d001      	beq.n	800ed76 <__sflush_r+0x4a>
 800ed72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed74:	1ac0      	subs	r0, r0, r3
 800ed76:	0002      	movs	r2, r0
 800ed78:	6a21      	ldr	r1, [r4, #32]
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	0028      	movs	r0, r5
 800ed7e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ed80:	47b8      	blx	r7
 800ed82:	89a1      	ldrh	r1, [r4, #12]
 800ed84:	1c43      	adds	r3, r0, #1
 800ed86:	d106      	bne.n	800ed96 <__sflush_r+0x6a>
 800ed88:	682b      	ldr	r3, [r5, #0]
 800ed8a:	2b1d      	cmp	r3, #29
 800ed8c:	d831      	bhi.n	800edf2 <__sflush_r+0xc6>
 800ed8e:	4a2c      	ldr	r2, [pc, #176]	; (800ee40 <__sflush_r+0x114>)
 800ed90:	40da      	lsrs	r2, r3
 800ed92:	07d3      	lsls	r3, r2, #31
 800ed94:	d52d      	bpl.n	800edf2 <__sflush_r+0xc6>
 800ed96:	2300      	movs	r3, #0
 800ed98:	6063      	str	r3, [r4, #4]
 800ed9a:	6923      	ldr	r3, [r4, #16]
 800ed9c:	6023      	str	r3, [r4, #0]
 800ed9e:	04cb      	lsls	r3, r1, #19
 800eda0:	d505      	bpl.n	800edae <__sflush_r+0x82>
 800eda2:	1c43      	adds	r3, r0, #1
 800eda4:	d102      	bne.n	800edac <__sflush_r+0x80>
 800eda6:	682b      	ldr	r3, [r5, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d100      	bne.n	800edae <__sflush_r+0x82>
 800edac:	6560      	str	r0, [r4, #84]	; 0x54
 800edae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edb0:	602e      	str	r6, [r5, #0]
 800edb2:	2900      	cmp	r1, #0
 800edb4:	d0c6      	beq.n	800ed44 <__sflush_r+0x18>
 800edb6:	0023      	movs	r3, r4
 800edb8:	3344      	adds	r3, #68	; 0x44
 800edba:	4299      	cmp	r1, r3
 800edbc:	d002      	beq.n	800edc4 <__sflush_r+0x98>
 800edbe:	0028      	movs	r0, r5
 800edc0:	f7ff fac8 	bl	800e354 <_free_r>
 800edc4:	2000      	movs	r0, #0
 800edc6:	6360      	str	r0, [r4, #52]	; 0x34
 800edc8:	e7bd      	b.n	800ed46 <__sflush_r+0x1a>
 800edca:	2301      	movs	r3, #1
 800edcc:	0028      	movs	r0, r5
 800edce:	6a21      	ldr	r1, [r4, #32]
 800edd0:	47b8      	blx	r7
 800edd2:	1c43      	adds	r3, r0, #1
 800edd4:	d1c5      	bne.n	800ed62 <__sflush_r+0x36>
 800edd6:	682b      	ldr	r3, [r5, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d0c2      	beq.n	800ed62 <__sflush_r+0x36>
 800eddc:	2b1d      	cmp	r3, #29
 800edde:	d001      	beq.n	800ede4 <__sflush_r+0xb8>
 800ede0:	2b16      	cmp	r3, #22
 800ede2:	d101      	bne.n	800ede8 <__sflush_r+0xbc>
 800ede4:	602e      	str	r6, [r5, #0]
 800ede6:	e7ad      	b.n	800ed44 <__sflush_r+0x18>
 800ede8:	2340      	movs	r3, #64	; 0x40
 800edea:	89a2      	ldrh	r2, [r4, #12]
 800edec:	4313      	orrs	r3, r2
 800edee:	81a3      	strh	r3, [r4, #12]
 800edf0:	e7a9      	b.n	800ed46 <__sflush_r+0x1a>
 800edf2:	2340      	movs	r3, #64	; 0x40
 800edf4:	430b      	orrs	r3, r1
 800edf6:	e7fa      	b.n	800edee <__sflush_r+0xc2>
 800edf8:	690f      	ldr	r7, [r1, #16]
 800edfa:	2f00      	cmp	r7, #0
 800edfc:	d0a2      	beq.n	800ed44 <__sflush_r+0x18>
 800edfe:	680a      	ldr	r2, [r1, #0]
 800ee00:	600f      	str	r7, [r1, #0]
 800ee02:	1bd2      	subs	r2, r2, r7
 800ee04:	9201      	str	r2, [sp, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	079b      	lsls	r3, r3, #30
 800ee0a:	d100      	bne.n	800ee0e <__sflush_r+0xe2>
 800ee0c:	694a      	ldr	r2, [r1, #20]
 800ee0e:	60a2      	str	r2, [r4, #8]
 800ee10:	9b01      	ldr	r3, [sp, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	dc00      	bgt.n	800ee18 <__sflush_r+0xec>
 800ee16:	e795      	b.n	800ed44 <__sflush_r+0x18>
 800ee18:	003a      	movs	r2, r7
 800ee1a:	0028      	movs	r0, r5
 800ee1c:	9b01      	ldr	r3, [sp, #4]
 800ee1e:	6a21      	ldr	r1, [r4, #32]
 800ee20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee22:	47b0      	blx	r6
 800ee24:	2800      	cmp	r0, #0
 800ee26:	dc06      	bgt.n	800ee36 <__sflush_r+0x10a>
 800ee28:	2340      	movs	r3, #64	; 0x40
 800ee2a:	2001      	movs	r0, #1
 800ee2c:	89a2      	ldrh	r2, [r4, #12]
 800ee2e:	4240      	negs	r0, r0
 800ee30:	4313      	orrs	r3, r2
 800ee32:	81a3      	strh	r3, [r4, #12]
 800ee34:	e787      	b.n	800ed46 <__sflush_r+0x1a>
 800ee36:	9b01      	ldr	r3, [sp, #4]
 800ee38:	183f      	adds	r7, r7, r0
 800ee3a:	1a1b      	subs	r3, r3, r0
 800ee3c:	9301      	str	r3, [sp, #4]
 800ee3e:	e7e7      	b.n	800ee10 <__sflush_r+0xe4>
 800ee40:	20400001 	.word	0x20400001

0800ee44 <_fflush_r>:
 800ee44:	690b      	ldr	r3, [r1, #16]
 800ee46:	b570      	push	{r4, r5, r6, lr}
 800ee48:	0005      	movs	r5, r0
 800ee4a:	000c      	movs	r4, r1
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d102      	bne.n	800ee56 <_fflush_r+0x12>
 800ee50:	2500      	movs	r5, #0
 800ee52:	0028      	movs	r0, r5
 800ee54:	bd70      	pop	{r4, r5, r6, pc}
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d004      	beq.n	800ee64 <_fflush_r+0x20>
 800ee5a:	6983      	ldr	r3, [r0, #24]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d101      	bne.n	800ee64 <_fflush_r+0x20>
 800ee60:	f000 f892 	bl	800ef88 <__sinit>
 800ee64:	4b14      	ldr	r3, [pc, #80]	; (800eeb8 <_fflush_r+0x74>)
 800ee66:	429c      	cmp	r4, r3
 800ee68:	d11b      	bne.n	800eea2 <_fflush_r+0x5e>
 800ee6a:	686c      	ldr	r4, [r5, #4]
 800ee6c:	220c      	movs	r2, #12
 800ee6e:	5ea3      	ldrsh	r3, [r4, r2]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d0ed      	beq.n	800ee50 <_fflush_r+0xc>
 800ee74:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee76:	07d2      	lsls	r2, r2, #31
 800ee78:	d404      	bmi.n	800ee84 <_fflush_r+0x40>
 800ee7a:	059b      	lsls	r3, r3, #22
 800ee7c:	d402      	bmi.n	800ee84 <_fflush_r+0x40>
 800ee7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee80:	f000 f923 	bl	800f0ca <__retarget_lock_acquire_recursive>
 800ee84:	0028      	movs	r0, r5
 800ee86:	0021      	movs	r1, r4
 800ee88:	f7ff ff50 	bl	800ed2c <__sflush_r>
 800ee8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee8e:	0005      	movs	r5, r0
 800ee90:	07db      	lsls	r3, r3, #31
 800ee92:	d4de      	bmi.n	800ee52 <_fflush_r+0xe>
 800ee94:	89a3      	ldrh	r3, [r4, #12]
 800ee96:	059b      	lsls	r3, r3, #22
 800ee98:	d4db      	bmi.n	800ee52 <_fflush_r+0xe>
 800ee9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee9c:	f000 f916 	bl	800f0cc <__retarget_lock_release_recursive>
 800eea0:	e7d7      	b.n	800ee52 <_fflush_r+0xe>
 800eea2:	4b06      	ldr	r3, [pc, #24]	; (800eebc <_fflush_r+0x78>)
 800eea4:	429c      	cmp	r4, r3
 800eea6:	d101      	bne.n	800eeac <_fflush_r+0x68>
 800eea8:	68ac      	ldr	r4, [r5, #8]
 800eeaa:	e7df      	b.n	800ee6c <_fflush_r+0x28>
 800eeac:	4b04      	ldr	r3, [pc, #16]	; (800eec0 <_fflush_r+0x7c>)
 800eeae:	429c      	cmp	r4, r3
 800eeb0:	d1dc      	bne.n	800ee6c <_fflush_r+0x28>
 800eeb2:	68ec      	ldr	r4, [r5, #12]
 800eeb4:	e7da      	b.n	800ee6c <_fflush_r+0x28>
 800eeb6:	46c0      	nop			; (mov r8, r8)
 800eeb8:	080123ec 	.word	0x080123ec
 800eebc:	0801240c 	.word	0x0801240c
 800eec0:	080123cc 	.word	0x080123cc

0800eec4 <std>:
 800eec4:	2300      	movs	r3, #0
 800eec6:	b510      	push	{r4, lr}
 800eec8:	0004      	movs	r4, r0
 800eeca:	6003      	str	r3, [r0, #0]
 800eecc:	6043      	str	r3, [r0, #4]
 800eece:	6083      	str	r3, [r0, #8]
 800eed0:	8181      	strh	r1, [r0, #12]
 800eed2:	6643      	str	r3, [r0, #100]	; 0x64
 800eed4:	0019      	movs	r1, r3
 800eed6:	81c2      	strh	r2, [r0, #14]
 800eed8:	6103      	str	r3, [r0, #16]
 800eeda:	6143      	str	r3, [r0, #20]
 800eedc:	6183      	str	r3, [r0, #24]
 800eede:	2208      	movs	r2, #8
 800eee0:	305c      	adds	r0, #92	; 0x5c
 800eee2:	f7fd fb24 	bl	800c52e <memset>
 800eee6:	4b05      	ldr	r3, [pc, #20]	; (800eefc <std+0x38>)
 800eee8:	6263      	str	r3, [r4, #36]	; 0x24
 800eeea:	4b05      	ldr	r3, [pc, #20]	; (800ef00 <std+0x3c>)
 800eeec:	6224      	str	r4, [r4, #32]
 800eeee:	62a3      	str	r3, [r4, #40]	; 0x28
 800eef0:	4b04      	ldr	r3, [pc, #16]	; (800ef04 <std+0x40>)
 800eef2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eef4:	4b04      	ldr	r3, [pc, #16]	; (800ef08 <std+0x44>)
 800eef6:	6323      	str	r3, [r4, #48]	; 0x30
 800eef8:	bd10      	pop	{r4, pc}
 800eefa:	46c0      	nop			; (mov r8, r8)
 800eefc:	0800f24d 	.word	0x0800f24d
 800ef00:	0800f275 	.word	0x0800f275
 800ef04:	0800f2ad 	.word	0x0800f2ad
 800ef08:	0800f2d9 	.word	0x0800f2d9

0800ef0c <_cleanup_r>:
 800ef0c:	b510      	push	{r4, lr}
 800ef0e:	4902      	ldr	r1, [pc, #8]	; (800ef18 <_cleanup_r+0xc>)
 800ef10:	f000 f8ba 	bl	800f088 <_fwalk_reent>
 800ef14:	bd10      	pop	{r4, pc}
 800ef16:	46c0      	nop			; (mov r8, r8)
 800ef18:	0800ee45 	.word	0x0800ee45

0800ef1c <__sfmoreglue>:
 800ef1c:	b570      	push	{r4, r5, r6, lr}
 800ef1e:	2568      	movs	r5, #104	; 0x68
 800ef20:	1e4a      	subs	r2, r1, #1
 800ef22:	4355      	muls	r5, r2
 800ef24:	000e      	movs	r6, r1
 800ef26:	0029      	movs	r1, r5
 800ef28:	3174      	adds	r1, #116	; 0x74
 800ef2a:	f7ff fa5d 	bl	800e3e8 <_malloc_r>
 800ef2e:	1e04      	subs	r4, r0, #0
 800ef30:	d008      	beq.n	800ef44 <__sfmoreglue+0x28>
 800ef32:	2100      	movs	r1, #0
 800ef34:	002a      	movs	r2, r5
 800ef36:	6001      	str	r1, [r0, #0]
 800ef38:	6046      	str	r6, [r0, #4]
 800ef3a:	300c      	adds	r0, #12
 800ef3c:	60a0      	str	r0, [r4, #8]
 800ef3e:	3268      	adds	r2, #104	; 0x68
 800ef40:	f7fd faf5 	bl	800c52e <memset>
 800ef44:	0020      	movs	r0, r4
 800ef46:	bd70      	pop	{r4, r5, r6, pc}

0800ef48 <__sfp_lock_acquire>:
 800ef48:	b510      	push	{r4, lr}
 800ef4a:	4802      	ldr	r0, [pc, #8]	; (800ef54 <__sfp_lock_acquire+0xc>)
 800ef4c:	f000 f8bd 	bl	800f0ca <__retarget_lock_acquire_recursive>
 800ef50:	bd10      	pop	{r4, pc}
 800ef52:	46c0      	nop			; (mov r8, r8)
 800ef54:	20000588 	.word	0x20000588

0800ef58 <__sfp_lock_release>:
 800ef58:	b510      	push	{r4, lr}
 800ef5a:	4802      	ldr	r0, [pc, #8]	; (800ef64 <__sfp_lock_release+0xc>)
 800ef5c:	f000 f8b6 	bl	800f0cc <__retarget_lock_release_recursive>
 800ef60:	bd10      	pop	{r4, pc}
 800ef62:	46c0      	nop			; (mov r8, r8)
 800ef64:	20000588 	.word	0x20000588

0800ef68 <__sinit_lock_acquire>:
 800ef68:	b510      	push	{r4, lr}
 800ef6a:	4802      	ldr	r0, [pc, #8]	; (800ef74 <__sinit_lock_acquire+0xc>)
 800ef6c:	f000 f8ad 	bl	800f0ca <__retarget_lock_acquire_recursive>
 800ef70:	bd10      	pop	{r4, pc}
 800ef72:	46c0      	nop			; (mov r8, r8)
 800ef74:	20000583 	.word	0x20000583

0800ef78 <__sinit_lock_release>:
 800ef78:	b510      	push	{r4, lr}
 800ef7a:	4802      	ldr	r0, [pc, #8]	; (800ef84 <__sinit_lock_release+0xc>)
 800ef7c:	f000 f8a6 	bl	800f0cc <__retarget_lock_release_recursive>
 800ef80:	bd10      	pop	{r4, pc}
 800ef82:	46c0      	nop			; (mov r8, r8)
 800ef84:	20000583 	.word	0x20000583

0800ef88 <__sinit>:
 800ef88:	b513      	push	{r0, r1, r4, lr}
 800ef8a:	0004      	movs	r4, r0
 800ef8c:	f7ff ffec 	bl	800ef68 <__sinit_lock_acquire>
 800ef90:	69a3      	ldr	r3, [r4, #24]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d002      	beq.n	800ef9c <__sinit+0x14>
 800ef96:	f7ff ffef 	bl	800ef78 <__sinit_lock_release>
 800ef9a:	bd13      	pop	{r0, r1, r4, pc}
 800ef9c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ef9e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800efa0:	6523      	str	r3, [r4, #80]	; 0x50
 800efa2:	4b13      	ldr	r3, [pc, #76]	; (800eff0 <__sinit+0x68>)
 800efa4:	4a13      	ldr	r2, [pc, #76]	; (800eff4 <__sinit+0x6c>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	62a2      	str	r2, [r4, #40]	; 0x28
 800efaa:	9301      	str	r3, [sp, #4]
 800efac:	42a3      	cmp	r3, r4
 800efae:	d101      	bne.n	800efb4 <__sinit+0x2c>
 800efb0:	2301      	movs	r3, #1
 800efb2:	61a3      	str	r3, [r4, #24]
 800efb4:	0020      	movs	r0, r4
 800efb6:	f000 f81f 	bl	800eff8 <__sfp>
 800efba:	6060      	str	r0, [r4, #4]
 800efbc:	0020      	movs	r0, r4
 800efbe:	f000 f81b 	bl	800eff8 <__sfp>
 800efc2:	60a0      	str	r0, [r4, #8]
 800efc4:	0020      	movs	r0, r4
 800efc6:	f000 f817 	bl	800eff8 <__sfp>
 800efca:	2200      	movs	r2, #0
 800efcc:	2104      	movs	r1, #4
 800efce:	60e0      	str	r0, [r4, #12]
 800efd0:	6860      	ldr	r0, [r4, #4]
 800efd2:	f7ff ff77 	bl	800eec4 <std>
 800efd6:	2201      	movs	r2, #1
 800efd8:	2109      	movs	r1, #9
 800efda:	68a0      	ldr	r0, [r4, #8]
 800efdc:	f7ff ff72 	bl	800eec4 <std>
 800efe0:	2202      	movs	r2, #2
 800efe2:	2112      	movs	r1, #18
 800efe4:	68e0      	ldr	r0, [r4, #12]
 800efe6:	f7ff ff6d 	bl	800eec4 <std>
 800efea:	2301      	movs	r3, #1
 800efec:	61a3      	str	r3, [r4, #24]
 800efee:	e7d2      	b.n	800ef96 <__sinit+0xe>
 800eff0:	0801204c 	.word	0x0801204c
 800eff4:	0800ef0d 	.word	0x0800ef0d

0800eff8 <__sfp>:
 800eff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800effa:	0007      	movs	r7, r0
 800effc:	f7ff ffa4 	bl	800ef48 <__sfp_lock_acquire>
 800f000:	4b1f      	ldr	r3, [pc, #124]	; (800f080 <__sfp+0x88>)
 800f002:	681e      	ldr	r6, [r3, #0]
 800f004:	69b3      	ldr	r3, [r6, #24]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d102      	bne.n	800f010 <__sfp+0x18>
 800f00a:	0030      	movs	r0, r6
 800f00c:	f7ff ffbc 	bl	800ef88 <__sinit>
 800f010:	3648      	adds	r6, #72	; 0x48
 800f012:	68b4      	ldr	r4, [r6, #8]
 800f014:	6873      	ldr	r3, [r6, #4]
 800f016:	3b01      	subs	r3, #1
 800f018:	d504      	bpl.n	800f024 <__sfp+0x2c>
 800f01a:	6833      	ldr	r3, [r6, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d022      	beq.n	800f066 <__sfp+0x6e>
 800f020:	6836      	ldr	r6, [r6, #0]
 800f022:	e7f6      	b.n	800f012 <__sfp+0x1a>
 800f024:	220c      	movs	r2, #12
 800f026:	5ea5      	ldrsh	r5, [r4, r2]
 800f028:	2d00      	cmp	r5, #0
 800f02a:	d11a      	bne.n	800f062 <__sfp+0x6a>
 800f02c:	0020      	movs	r0, r4
 800f02e:	4b15      	ldr	r3, [pc, #84]	; (800f084 <__sfp+0x8c>)
 800f030:	3058      	adds	r0, #88	; 0x58
 800f032:	60e3      	str	r3, [r4, #12]
 800f034:	6665      	str	r5, [r4, #100]	; 0x64
 800f036:	f000 f847 	bl	800f0c8 <__retarget_lock_init_recursive>
 800f03a:	f7ff ff8d 	bl	800ef58 <__sfp_lock_release>
 800f03e:	0020      	movs	r0, r4
 800f040:	2208      	movs	r2, #8
 800f042:	0029      	movs	r1, r5
 800f044:	6025      	str	r5, [r4, #0]
 800f046:	60a5      	str	r5, [r4, #8]
 800f048:	6065      	str	r5, [r4, #4]
 800f04a:	6125      	str	r5, [r4, #16]
 800f04c:	6165      	str	r5, [r4, #20]
 800f04e:	61a5      	str	r5, [r4, #24]
 800f050:	305c      	adds	r0, #92	; 0x5c
 800f052:	f7fd fa6c 	bl	800c52e <memset>
 800f056:	6365      	str	r5, [r4, #52]	; 0x34
 800f058:	63a5      	str	r5, [r4, #56]	; 0x38
 800f05a:	64a5      	str	r5, [r4, #72]	; 0x48
 800f05c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800f05e:	0020      	movs	r0, r4
 800f060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f062:	3468      	adds	r4, #104	; 0x68
 800f064:	e7d7      	b.n	800f016 <__sfp+0x1e>
 800f066:	2104      	movs	r1, #4
 800f068:	0038      	movs	r0, r7
 800f06a:	f7ff ff57 	bl	800ef1c <__sfmoreglue>
 800f06e:	1e04      	subs	r4, r0, #0
 800f070:	6030      	str	r0, [r6, #0]
 800f072:	d1d5      	bne.n	800f020 <__sfp+0x28>
 800f074:	f7ff ff70 	bl	800ef58 <__sfp_lock_release>
 800f078:	230c      	movs	r3, #12
 800f07a:	603b      	str	r3, [r7, #0]
 800f07c:	e7ef      	b.n	800f05e <__sfp+0x66>
 800f07e:	46c0      	nop			; (mov r8, r8)
 800f080:	0801204c 	.word	0x0801204c
 800f084:	ffff0001 	.word	0xffff0001

0800f088 <_fwalk_reent>:
 800f088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f08a:	0004      	movs	r4, r0
 800f08c:	0006      	movs	r6, r0
 800f08e:	2700      	movs	r7, #0
 800f090:	9101      	str	r1, [sp, #4]
 800f092:	3448      	adds	r4, #72	; 0x48
 800f094:	6863      	ldr	r3, [r4, #4]
 800f096:	68a5      	ldr	r5, [r4, #8]
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	9b00      	ldr	r3, [sp, #0]
 800f09c:	3b01      	subs	r3, #1
 800f09e:	9300      	str	r3, [sp, #0]
 800f0a0:	d504      	bpl.n	800f0ac <_fwalk_reent+0x24>
 800f0a2:	6824      	ldr	r4, [r4, #0]
 800f0a4:	2c00      	cmp	r4, #0
 800f0a6:	d1f5      	bne.n	800f094 <_fwalk_reent+0xc>
 800f0a8:	0038      	movs	r0, r7
 800f0aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f0ac:	89ab      	ldrh	r3, [r5, #12]
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d908      	bls.n	800f0c4 <_fwalk_reent+0x3c>
 800f0b2:	220e      	movs	r2, #14
 800f0b4:	5eab      	ldrsh	r3, [r5, r2]
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	d004      	beq.n	800f0c4 <_fwalk_reent+0x3c>
 800f0ba:	0029      	movs	r1, r5
 800f0bc:	0030      	movs	r0, r6
 800f0be:	9b01      	ldr	r3, [sp, #4]
 800f0c0:	4798      	blx	r3
 800f0c2:	4307      	orrs	r7, r0
 800f0c4:	3568      	adds	r5, #104	; 0x68
 800f0c6:	e7e8      	b.n	800f09a <_fwalk_reent+0x12>

0800f0c8 <__retarget_lock_init_recursive>:
 800f0c8:	4770      	bx	lr

0800f0ca <__retarget_lock_acquire_recursive>:
 800f0ca:	4770      	bx	lr

0800f0cc <__retarget_lock_release_recursive>:
 800f0cc:	4770      	bx	lr
	...

0800f0d0 <__swhatbuf_r>:
 800f0d0:	b570      	push	{r4, r5, r6, lr}
 800f0d2:	000e      	movs	r6, r1
 800f0d4:	001d      	movs	r5, r3
 800f0d6:	230e      	movs	r3, #14
 800f0d8:	5ec9      	ldrsh	r1, [r1, r3]
 800f0da:	0014      	movs	r4, r2
 800f0dc:	b096      	sub	sp, #88	; 0x58
 800f0de:	2900      	cmp	r1, #0
 800f0e0:	da07      	bge.n	800f0f2 <__swhatbuf_r+0x22>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	602b      	str	r3, [r5, #0]
 800f0e6:	89b3      	ldrh	r3, [r6, #12]
 800f0e8:	061b      	lsls	r3, r3, #24
 800f0ea:	d411      	bmi.n	800f110 <__swhatbuf_r+0x40>
 800f0ec:	2380      	movs	r3, #128	; 0x80
 800f0ee:	00db      	lsls	r3, r3, #3
 800f0f0:	e00f      	b.n	800f112 <__swhatbuf_r+0x42>
 800f0f2:	466a      	mov	r2, sp
 800f0f4:	f000 f91c 	bl	800f330 <_fstat_r>
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	dbf2      	blt.n	800f0e2 <__swhatbuf_r+0x12>
 800f0fc:	23f0      	movs	r3, #240	; 0xf0
 800f0fe:	9901      	ldr	r1, [sp, #4]
 800f100:	021b      	lsls	r3, r3, #8
 800f102:	4019      	ands	r1, r3
 800f104:	4b05      	ldr	r3, [pc, #20]	; (800f11c <__swhatbuf_r+0x4c>)
 800f106:	18c9      	adds	r1, r1, r3
 800f108:	424b      	negs	r3, r1
 800f10a:	4159      	adcs	r1, r3
 800f10c:	6029      	str	r1, [r5, #0]
 800f10e:	e7ed      	b.n	800f0ec <__swhatbuf_r+0x1c>
 800f110:	2340      	movs	r3, #64	; 0x40
 800f112:	2000      	movs	r0, #0
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	b016      	add	sp, #88	; 0x58
 800f118:	bd70      	pop	{r4, r5, r6, pc}
 800f11a:	46c0      	nop			; (mov r8, r8)
 800f11c:	ffffe000 	.word	0xffffe000

0800f120 <__smakebuf_r>:
 800f120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f122:	2602      	movs	r6, #2
 800f124:	898b      	ldrh	r3, [r1, #12]
 800f126:	0005      	movs	r5, r0
 800f128:	000c      	movs	r4, r1
 800f12a:	4233      	tst	r3, r6
 800f12c:	d006      	beq.n	800f13c <__smakebuf_r+0x1c>
 800f12e:	0023      	movs	r3, r4
 800f130:	3347      	adds	r3, #71	; 0x47
 800f132:	6023      	str	r3, [r4, #0]
 800f134:	6123      	str	r3, [r4, #16]
 800f136:	2301      	movs	r3, #1
 800f138:	6163      	str	r3, [r4, #20]
 800f13a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f13c:	466a      	mov	r2, sp
 800f13e:	ab01      	add	r3, sp, #4
 800f140:	f7ff ffc6 	bl	800f0d0 <__swhatbuf_r>
 800f144:	9900      	ldr	r1, [sp, #0]
 800f146:	0007      	movs	r7, r0
 800f148:	0028      	movs	r0, r5
 800f14a:	f7ff f94d 	bl	800e3e8 <_malloc_r>
 800f14e:	2800      	cmp	r0, #0
 800f150:	d108      	bne.n	800f164 <__smakebuf_r+0x44>
 800f152:	220c      	movs	r2, #12
 800f154:	5ea3      	ldrsh	r3, [r4, r2]
 800f156:	059a      	lsls	r2, r3, #22
 800f158:	d4ef      	bmi.n	800f13a <__smakebuf_r+0x1a>
 800f15a:	2203      	movs	r2, #3
 800f15c:	4393      	bics	r3, r2
 800f15e:	431e      	orrs	r6, r3
 800f160:	81a6      	strh	r6, [r4, #12]
 800f162:	e7e4      	b.n	800f12e <__smakebuf_r+0xe>
 800f164:	4b0f      	ldr	r3, [pc, #60]	; (800f1a4 <__smakebuf_r+0x84>)
 800f166:	62ab      	str	r3, [r5, #40]	; 0x28
 800f168:	2380      	movs	r3, #128	; 0x80
 800f16a:	89a2      	ldrh	r2, [r4, #12]
 800f16c:	6020      	str	r0, [r4, #0]
 800f16e:	4313      	orrs	r3, r2
 800f170:	81a3      	strh	r3, [r4, #12]
 800f172:	9b00      	ldr	r3, [sp, #0]
 800f174:	6120      	str	r0, [r4, #16]
 800f176:	6163      	str	r3, [r4, #20]
 800f178:	9b01      	ldr	r3, [sp, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d00d      	beq.n	800f19a <__smakebuf_r+0x7a>
 800f17e:	0028      	movs	r0, r5
 800f180:	230e      	movs	r3, #14
 800f182:	5ee1      	ldrsh	r1, [r4, r3]
 800f184:	f000 f8e6 	bl	800f354 <_isatty_r>
 800f188:	2800      	cmp	r0, #0
 800f18a:	d006      	beq.n	800f19a <__smakebuf_r+0x7a>
 800f18c:	2203      	movs	r2, #3
 800f18e:	89a3      	ldrh	r3, [r4, #12]
 800f190:	4393      	bics	r3, r2
 800f192:	001a      	movs	r2, r3
 800f194:	2301      	movs	r3, #1
 800f196:	4313      	orrs	r3, r2
 800f198:	81a3      	strh	r3, [r4, #12]
 800f19a:	89a0      	ldrh	r0, [r4, #12]
 800f19c:	4307      	orrs	r7, r0
 800f19e:	81a7      	strh	r7, [r4, #12]
 800f1a0:	e7cb      	b.n	800f13a <__smakebuf_r+0x1a>
 800f1a2:	46c0      	nop			; (mov r8, r8)
 800f1a4:	0800ef0d 	.word	0x0800ef0d

0800f1a8 <_malloc_usable_size_r>:
 800f1a8:	1f0b      	subs	r3, r1, #4
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	1f18      	subs	r0, r3, #4
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	da01      	bge.n	800f1b6 <_malloc_usable_size_r+0xe>
 800f1b2:	580b      	ldr	r3, [r1, r0]
 800f1b4:	18c0      	adds	r0, r0, r3
 800f1b6:	4770      	bx	lr

0800f1b8 <_raise_r>:
 800f1b8:	b570      	push	{r4, r5, r6, lr}
 800f1ba:	0004      	movs	r4, r0
 800f1bc:	000d      	movs	r5, r1
 800f1be:	291f      	cmp	r1, #31
 800f1c0:	d904      	bls.n	800f1cc <_raise_r+0x14>
 800f1c2:	2316      	movs	r3, #22
 800f1c4:	6003      	str	r3, [r0, #0]
 800f1c6:	2001      	movs	r0, #1
 800f1c8:	4240      	negs	r0, r0
 800f1ca:	bd70      	pop	{r4, r5, r6, pc}
 800f1cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d004      	beq.n	800f1dc <_raise_r+0x24>
 800f1d2:	008a      	lsls	r2, r1, #2
 800f1d4:	189b      	adds	r3, r3, r2
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	2a00      	cmp	r2, #0
 800f1da:	d108      	bne.n	800f1ee <_raise_r+0x36>
 800f1dc:	0020      	movs	r0, r4
 800f1de:	f000 f831 	bl	800f244 <_getpid_r>
 800f1e2:	002a      	movs	r2, r5
 800f1e4:	0001      	movs	r1, r0
 800f1e6:	0020      	movs	r0, r4
 800f1e8:	f000 f81a 	bl	800f220 <_kill_r>
 800f1ec:	e7ed      	b.n	800f1ca <_raise_r+0x12>
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	2a01      	cmp	r2, #1
 800f1f2:	d0ea      	beq.n	800f1ca <_raise_r+0x12>
 800f1f4:	1c51      	adds	r1, r2, #1
 800f1f6:	d103      	bne.n	800f200 <_raise_r+0x48>
 800f1f8:	2316      	movs	r3, #22
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	6023      	str	r3, [r4, #0]
 800f1fe:	e7e4      	b.n	800f1ca <_raise_r+0x12>
 800f200:	2400      	movs	r4, #0
 800f202:	0028      	movs	r0, r5
 800f204:	601c      	str	r4, [r3, #0]
 800f206:	4790      	blx	r2
 800f208:	0020      	movs	r0, r4
 800f20a:	e7de      	b.n	800f1ca <_raise_r+0x12>

0800f20c <raise>:
 800f20c:	b510      	push	{r4, lr}
 800f20e:	4b03      	ldr	r3, [pc, #12]	; (800f21c <raise+0x10>)
 800f210:	0001      	movs	r1, r0
 800f212:	6818      	ldr	r0, [r3, #0]
 800f214:	f7ff ffd0 	bl	800f1b8 <_raise_r>
 800f218:	bd10      	pop	{r4, pc}
 800f21a:	46c0      	nop			; (mov r8, r8)
 800f21c:	20000010 	.word	0x20000010

0800f220 <_kill_r>:
 800f220:	2300      	movs	r3, #0
 800f222:	b570      	push	{r4, r5, r6, lr}
 800f224:	4d06      	ldr	r5, [pc, #24]	; (800f240 <_kill_r+0x20>)
 800f226:	0004      	movs	r4, r0
 800f228:	0008      	movs	r0, r1
 800f22a:	0011      	movs	r1, r2
 800f22c:	602b      	str	r3, [r5, #0]
 800f22e:	f7f9 ff0a 	bl	8009046 <_kill>
 800f232:	1c43      	adds	r3, r0, #1
 800f234:	d103      	bne.n	800f23e <_kill_r+0x1e>
 800f236:	682b      	ldr	r3, [r5, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d000      	beq.n	800f23e <_kill_r+0x1e>
 800f23c:	6023      	str	r3, [r4, #0]
 800f23e:	bd70      	pop	{r4, r5, r6, pc}
 800f240:	2000057c 	.word	0x2000057c

0800f244 <_getpid_r>:
 800f244:	b510      	push	{r4, lr}
 800f246:	f7f9 fef8 	bl	800903a <_getpid>
 800f24a:	bd10      	pop	{r4, pc}

0800f24c <__sread>:
 800f24c:	b570      	push	{r4, r5, r6, lr}
 800f24e:	000c      	movs	r4, r1
 800f250:	250e      	movs	r5, #14
 800f252:	5f49      	ldrsh	r1, [r1, r5]
 800f254:	f000 f8a4 	bl	800f3a0 <_read_r>
 800f258:	2800      	cmp	r0, #0
 800f25a:	db03      	blt.n	800f264 <__sread+0x18>
 800f25c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f25e:	181b      	adds	r3, r3, r0
 800f260:	6563      	str	r3, [r4, #84]	; 0x54
 800f262:	bd70      	pop	{r4, r5, r6, pc}
 800f264:	89a3      	ldrh	r3, [r4, #12]
 800f266:	4a02      	ldr	r2, [pc, #8]	; (800f270 <__sread+0x24>)
 800f268:	4013      	ands	r3, r2
 800f26a:	81a3      	strh	r3, [r4, #12]
 800f26c:	e7f9      	b.n	800f262 <__sread+0x16>
 800f26e:	46c0      	nop			; (mov r8, r8)
 800f270:	ffffefff 	.word	0xffffefff

0800f274 <__swrite>:
 800f274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f276:	001f      	movs	r7, r3
 800f278:	898b      	ldrh	r3, [r1, #12]
 800f27a:	0005      	movs	r5, r0
 800f27c:	000c      	movs	r4, r1
 800f27e:	0016      	movs	r6, r2
 800f280:	05db      	lsls	r3, r3, #23
 800f282:	d505      	bpl.n	800f290 <__swrite+0x1c>
 800f284:	230e      	movs	r3, #14
 800f286:	5ec9      	ldrsh	r1, [r1, r3]
 800f288:	2200      	movs	r2, #0
 800f28a:	2302      	movs	r3, #2
 800f28c:	f000 f874 	bl	800f378 <_lseek_r>
 800f290:	89a3      	ldrh	r3, [r4, #12]
 800f292:	4a05      	ldr	r2, [pc, #20]	; (800f2a8 <__swrite+0x34>)
 800f294:	0028      	movs	r0, r5
 800f296:	4013      	ands	r3, r2
 800f298:	81a3      	strh	r3, [r4, #12]
 800f29a:	0032      	movs	r2, r6
 800f29c:	230e      	movs	r3, #14
 800f29e:	5ee1      	ldrsh	r1, [r4, r3]
 800f2a0:	003b      	movs	r3, r7
 800f2a2:	f000 f81f 	bl	800f2e4 <_write_r>
 800f2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2a8:	ffffefff 	.word	0xffffefff

0800f2ac <__sseek>:
 800f2ac:	b570      	push	{r4, r5, r6, lr}
 800f2ae:	000c      	movs	r4, r1
 800f2b0:	250e      	movs	r5, #14
 800f2b2:	5f49      	ldrsh	r1, [r1, r5]
 800f2b4:	f000 f860 	bl	800f378 <_lseek_r>
 800f2b8:	89a3      	ldrh	r3, [r4, #12]
 800f2ba:	1c42      	adds	r2, r0, #1
 800f2bc:	d103      	bne.n	800f2c6 <__sseek+0x1a>
 800f2be:	4a05      	ldr	r2, [pc, #20]	; (800f2d4 <__sseek+0x28>)
 800f2c0:	4013      	ands	r3, r2
 800f2c2:	81a3      	strh	r3, [r4, #12]
 800f2c4:	bd70      	pop	{r4, r5, r6, pc}
 800f2c6:	2280      	movs	r2, #128	; 0x80
 800f2c8:	0152      	lsls	r2, r2, #5
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	81a3      	strh	r3, [r4, #12]
 800f2ce:	6560      	str	r0, [r4, #84]	; 0x54
 800f2d0:	e7f8      	b.n	800f2c4 <__sseek+0x18>
 800f2d2:	46c0      	nop			; (mov r8, r8)
 800f2d4:	ffffefff 	.word	0xffffefff

0800f2d8 <__sclose>:
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	230e      	movs	r3, #14
 800f2dc:	5ec9      	ldrsh	r1, [r1, r3]
 800f2de:	f000 f815 	bl	800f30c <_close_r>
 800f2e2:	bd10      	pop	{r4, pc}

0800f2e4 <_write_r>:
 800f2e4:	b570      	push	{r4, r5, r6, lr}
 800f2e6:	0004      	movs	r4, r0
 800f2e8:	0008      	movs	r0, r1
 800f2ea:	0011      	movs	r1, r2
 800f2ec:	001a      	movs	r2, r3
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	4d05      	ldr	r5, [pc, #20]	; (800f308 <_write_r+0x24>)
 800f2f2:	602b      	str	r3, [r5, #0]
 800f2f4:	f7f9 fee0 	bl	80090b8 <_write>
 800f2f8:	1c43      	adds	r3, r0, #1
 800f2fa:	d103      	bne.n	800f304 <_write_r+0x20>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d000      	beq.n	800f304 <_write_r+0x20>
 800f302:	6023      	str	r3, [r4, #0]
 800f304:	bd70      	pop	{r4, r5, r6, pc}
 800f306:	46c0      	nop			; (mov r8, r8)
 800f308:	2000057c 	.word	0x2000057c

0800f30c <_close_r>:
 800f30c:	2300      	movs	r3, #0
 800f30e:	b570      	push	{r4, r5, r6, lr}
 800f310:	4d06      	ldr	r5, [pc, #24]	; (800f32c <_close_r+0x20>)
 800f312:	0004      	movs	r4, r0
 800f314:	0008      	movs	r0, r1
 800f316:	602b      	str	r3, [r5, #0]
 800f318:	f7f9 feea 	bl	80090f0 <_close>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d103      	bne.n	800f328 <_close_r+0x1c>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d000      	beq.n	800f328 <_close_r+0x1c>
 800f326:	6023      	str	r3, [r4, #0]
 800f328:	bd70      	pop	{r4, r5, r6, pc}
 800f32a:	46c0      	nop			; (mov r8, r8)
 800f32c:	2000057c 	.word	0x2000057c

0800f330 <_fstat_r>:
 800f330:	2300      	movs	r3, #0
 800f332:	b570      	push	{r4, r5, r6, lr}
 800f334:	4d06      	ldr	r5, [pc, #24]	; (800f350 <_fstat_r+0x20>)
 800f336:	0004      	movs	r4, r0
 800f338:	0008      	movs	r0, r1
 800f33a:	0011      	movs	r1, r2
 800f33c:	602b      	str	r3, [r5, #0]
 800f33e:	f7f9 fee1 	bl	8009104 <_fstat>
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	d103      	bne.n	800f34e <_fstat_r+0x1e>
 800f346:	682b      	ldr	r3, [r5, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d000      	beq.n	800f34e <_fstat_r+0x1e>
 800f34c:	6023      	str	r3, [r4, #0]
 800f34e:	bd70      	pop	{r4, r5, r6, pc}
 800f350:	2000057c 	.word	0x2000057c

0800f354 <_isatty_r>:
 800f354:	2300      	movs	r3, #0
 800f356:	b570      	push	{r4, r5, r6, lr}
 800f358:	4d06      	ldr	r5, [pc, #24]	; (800f374 <_isatty_r+0x20>)
 800f35a:	0004      	movs	r4, r0
 800f35c:	0008      	movs	r0, r1
 800f35e:	602b      	str	r3, [r5, #0]
 800f360:	f7f9 fede 	bl	8009120 <_isatty>
 800f364:	1c43      	adds	r3, r0, #1
 800f366:	d103      	bne.n	800f370 <_isatty_r+0x1c>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d000      	beq.n	800f370 <_isatty_r+0x1c>
 800f36e:	6023      	str	r3, [r4, #0]
 800f370:	bd70      	pop	{r4, r5, r6, pc}
 800f372:	46c0      	nop			; (mov r8, r8)
 800f374:	2000057c 	.word	0x2000057c

0800f378 <_lseek_r>:
 800f378:	b570      	push	{r4, r5, r6, lr}
 800f37a:	0004      	movs	r4, r0
 800f37c:	0008      	movs	r0, r1
 800f37e:	0011      	movs	r1, r2
 800f380:	001a      	movs	r2, r3
 800f382:	2300      	movs	r3, #0
 800f384:	4d05      	ldr	r5, [pc, #20]	; (800f39c <_lseek_r+0x24>)
 800f386:	602b      	str	r3, [r5, #0]
 800f388:	f7f9 fed3 	bl	8009132 <_lseek>
 800f38c:	1c43      	adds	r3, r0, #1
 800f38e:	d103      	bne.n	800f398 <_lseek_r+0x20>
 800f390:	682b      	ldr	r3, [r5, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d000      	beq.n	800f398 <_lseek_r+0x20>
 800f396:	6023      	str	r3, [r4, #0]
 800f398:	bd70      	pop	{r4, r5, r6, pc}
 800f39a:	46c0      	nop			; (mov r8, r8)
 800f39c:	2000057c 	.word	0x2000057c

0800f3a0 <_read_r>:
 800f3a0:	b570      	push	{r4, r5, r6, lr}
 800f3a2:	0004      	movs	r4, r0
 800f3a4:	0008      	movs	r0, r1
 800f3a6:	0011      	movs	r1, r2
 800f3a8:	001a      	movs	r2, r3
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	4d05      	ldr	r5, [pc, #20]	; (800f3c4 <_read_r+0x24>)
 800f3ae:	602b      	str	r3, [r5, #0]
 800f3b0:	f7f9 fe65 	bl	800907e <_read>
 800f3b4:	1c43      	adds	r3, r0, #1
 800f3b6:	d103      	bne.n	800f3c0 <_read_r+0x20>
 800f3b8:	682b      	ldr	r3, [r5, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d000      	beq.n	800f3c0 <_read_r+0x20>
 800f3be:	6023      	str	r3, [r4, #0]
 800f3c0:	bd70      	pop	{r4, r5, r6, pc}
 800f3c2:	46c0      	nop			; (mov r8, r8)
 800f3c4:	2000057c 	.word	0x2000057c

0800f3c8 <atan>:
 800f3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3ca:	4b98      	ldr	r3, [pc, #608]	; (800f62c <atan+0x264>)
 800f3cc:	b085      	sub	sp, #20
 800f3ce:	004e      	lsls	r6, r1, #1
 800f3d0:	0004      	movs	r4, r0
 800f3d2:	000d      	movs	r5, r1
 800f3d4:	9103      	str	r1, [sp, #12]
 800f3d6:	0876      	lsrs	r6, r6, #1
 800f3d8:	429e      	cmp	r6, r3
 800f3da:	dd18      	ble.n	800f40e <atan+0x46>
 800f3dc:	4b94      	ldr	r3, [pc, #592]	; (800f630 <atan+0x268>)
 800f3de:	429e      	cmp	r6, r3
 800f3e0:	dc02      	bgt.n	800f3e8 <atan+0x20>
 800f3e2:	d10a      	bne.n	800f3fa <atan+0x32>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d008      	beq.n	800f3fa <atan+0x32>
 800f3e8:	0022      	movs	r2, r4
 800f3ea:	002b      	movs	r3, r5
 800f3ec:	0020      	movs	r0, r4
 800f3ee:	0029      	movs	r1, r5
 800f3f0:	f7f1 ff56 	bl	80012a0 <__aeabi_dadd>
 800f3f4:	0004      	movs	r4, r0
 800f3f6:	000d      	movs	r5, r1
 800f3f8:	e005      	b.n	800f406 <atan+0x3e>
 800f3fa:	9b03      	ldr	r3, [sp, #12]
 800f3fc:	4c8d      	ldr	r4, [pc, #564]	; (800f634 <atan+0x26c>)
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	dd00      	ble.n	800f404 <atan+0x3c>
 800f402:	e110      	b.n	800f626 <atan+0x25e>
 800f404:	4d8c      	ldr	r5, [pc, #560]	; (800f638 <atan+0x270>)
 800f406:	0020      	movs	r0, r4
 800f408:	0029      	movs	r1, r5
 800f40a:	b005      	add	sp, #20
 800f40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f40e:	4b8b      	ldr	r3, [pc, #556]	; (800f63c <atan+0x274>)
 800f410:	429e      	cmp	r6, r3
 800f412:	dc0f      	bgt.n	800f434 <atan+0x6c>
 800f414:	4b8a      	ldr	r3, [pc, #552]	; (800f640 <atan+0x278>)
 800f416:	429e      	cmp	r6, r3
 800f418:	dc09      	bgt.n	800f42e <atan+0x66>
 800f41a:	4a8a      	ldr	r2, [pc, #552]	; (800f644 <atan+0x27c>)
 800f41c:	4b8a      	ldr	r3, [pc, #552]	; (800f648 <atan+0x280>)
 800f41e:	f7f1 ff3f 	bl	80012a0 <__aeabi_dadd>
 800f422:	2200      	movs	r2, #0
 800f424:	4b89      	ldr	r3, [pc, #548]	; (800f64c <atan+0x284>)
 800f426:	f7f1 f827 	bl	8000478 <__aeabi_dcmpgt>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d1eb      	bne.n	800f406 <atan+0x3e>
 800f42e:	2301      	movs	r3, #1
 800f430:	425b      	negs	r3, r3
 800f432:	e025      	b.n	800f480 <atan+0xb8>
 800f434:	f000 f98a 	bl	800f74c <fabs>
 800f438:	4b85      	ldr	r3, [pc, #532]	; (800f650 <atan+0x288>)
 800f43a:	0004      	movs	r4, r0
 800f43c:	000d      	movs	r5, r1
 800f43e:	429e      	cmp	r6, r3
 800f440:	dd00      	ble.n	800f444 <atan+0x7c>
 800f442:	e0aa      	b.n	800f59a <atan+0x1d2>
 800f444:	4b83      	ldr	r3, [pc, #524]	; (800f654 <atan+0x28c>)
 800f446:	429e      	cmp	r6, r3
 800f448:	dd00      	ble.n	800f44c <atan+0x84>
 800f44a:	e090      	b.n	800f56e <atan+0x1a6>
 800f44c:	0002      	movs	r2, r0
 800f44e:	000b      	movs	r3, r1
 800f450:	f7f1 ff26 	bl	80012a0 <__aeabi_dadd>
 800f454:	2200      	movs	r2, #0
 800f456:	4b7d      	ldr	r3, [pc, #500]	; (800f64c <atan+0x284>)
 800f458:	f7f3 f8fe 	bl	8002658 <__aeabi_dsub>
 800f45c:	2380      	movs	r3, #128	; 0x80
 800f45e:	0006      	movs	r6, r0
 800f460:	000f      	movs	r7, r1
 800f462:	2200      	movs	r2, #0
 800f464:	0020      	movs	r0, r4
 800f466:	0029      	movs	r1, r5
 800f468:	05db      	lsls	r3, r3, #23
 800f46a:	f7f1 ff19 	bl	80012a0 <__aeabi_dadd>
 800f46e:	000b      	movs	r3, r1
 800f470:	0002      	movs	r2, r0
 800f472:	0039      	movs	r1, r7
 800f474:	0030      	movs	r0, r6
 800f476:	f7f2 fa7d 	bl	8001974 <__aeabi_ddiv>
 800f47a:	2300      	movs	r3, #0
 800f47c:	0004      	movs	r4, r0
 800f47e:	000d      	movs	r5, r1
 800f480:	0022      	movs	r2, r4
 800f482:	9302      	str	r3, [sp, #8]
 800f484:	0020      	movs	r0, r4
 800f486:	002b      	movs	r3, r5
 800f488:	0029      	movs	r1, r5
 800f48a:	f7f2 fe79 	bl	8002180 <__aeabi_dmul>
 800f48e:	0002      	movs	r2, r0
 800f490:	000b      	movs	r3, r1
 800f492:	9000      	str	r0, [sp, #0]
 800f494:	9101      	str	r1, [sp, #4]
 800f496:	f7f2 fe73 	bl	8002180 <__aeabi_dmul>
 800f49a:	0006      	movs	r6, r0
 800f49c:	000f      	movs	r7, r1
 800f49e:	4a6e      	ldr	r2, [pc, #440]	; (800f658 <atan+0x290>)
 800f4a0:	4b6e      	ldr	r3, [pc, #440]	; (800f65c <atan+0x294>)
 800f4a2:	f7f2 fe6d 	bl	8002180 <__aeabi_dmul>
 800f4a6:	4a6e      	ldr	r2, [pc, #440]	; (800f660 <atan+0x298>)
 800f4a8:	4b6e      	ldr	r3, [pc, #440]	; (800f664 <atan+0x29c>)
 800f4aa:	f7f1 fef9 	bl	80012a0 <__aeabi_dadd>
 800f4ae:	0032      	movs	r2, r6
 800f4b0:	003b      	movs	r3, r7
 800f4b2:	f7f2 fe65 	bl	8002180 <__aeabi_dmul>
 800f4b6:	4a6c      	ldr	r2, [pc, #432]	; (800f668 <atan+0x2a0>)
 800f4b8:	4b6c      	ldr	r3, [pc, #432]	; (800f66c <atan+0x2a4>)
 800f4ba:	f7f1 fef1 	bl	80012a0 <__aeabi_dadd>
 800f4be:	0032      	movs	r2, r6
 800f4c0:	003b      	movs	r3, r7
 800f4c2:	f7f2 fe5d 	bl	8002180 <__aeabi_dmul>
 800f4c6:	4a6a      	ldr	r2, [pc, #424]	; (800f670 <atan+0x2a8>)
 800f4c8:	4b6a      	ldr	r3, [pc, #424]	; (800f674 <atan+0x2ac>)
 800f4ca:	f7f1 fee9 	bl	80012a0 <__aeabi_dadd>
 800f4ce:	0032      	movs	r2, r6
 800f4d0:	003b      	movs	r3, r7
 800f4d2:	f7f2 fe55 	bl	8002180 <__aeabi_dmul>
 800f4d6:	4a68      	ldr	r2, [pc, #416]	; (800f678 <atan+0x2b0>)
 800f4d8:	4b68      	ldr	r3, [pc, #416]	; (800f67c <atan+0x2b4>)
 800f4da:	f7f1 fee1 	bl	80012a0 <__aeabi_dadd>
 800f4de:	0032      	movs	r2, r6
 800f4e0:	003b      	movs	r3, r7
 800f4e2:	f7f2 fe4d 	bl	8002180 <__aeabi_dmul>
 800f4e6:	4a66      	ldr	r2, [pc, #408]	; (800f680 <atan+0x2b8>)
 800f4e8:	4b66      	ldr	r3, [pc, #408]	; (800f684 <atan+0x2bc>)
 800f4ea:	f7f1 fed9 	bl	80012a0 <__aeabi_dadd>
 800f4ee:	9a00      	ldr	r2, [sp, #0]
 800f4f0:	9b01      	ldr	r3, [sp, #4]
 800f4f2:	f7f2 fe45 	bl	8002180 <__aeabi_dmul>
 800f4f6:	4a64      	ldr	r2, [pc, #400]	; (800f688 <atan+0x2c0>)
 800f4f8:	9000      	str	r0, [sp, #0]
 800f4fa:	9101      	str	r1, [sp, #4]
 800f4fc:	4b63      	ldr	r3, [pc, #396]	; (800f68c <atan+0x2c4>)
 800f4fe:	0030      	movs	r0, r6
 800f500:	0039      	movs	r1, r7
 800f502:	f7f2 fe3d 	bl	8002180 <__aeabi_dmul>
 800f506:	4a62      	ldr	r2, [pc, #392]	; (800f690 <atan+0x2c8>)
 800f508:	4b62      	ldr	r3, [pc, #392]	; (800f694 <atan+0x2cc>)
 800f50a:	f7f3 f8a5 	bl	8002658 <__aeabi_dsub>
 800f50e:	0032      	movs	r2, r6
 800f510:	003b      	movs	r3, r7
 800f512:	f7f2 fe35 	bl	8002180 <__aeabi_dmul>
 800f516:	4a60      	ldr	r2, [pc, #384]	; (800f698 <atan+0x2d0>)
 800f518:	4b60      	ldr	r3, [pc, #384]	; (800f69c <atan+0x2d4>)
 800f51a:	f7f3 f89d 	bl	8002658 <__aeabi_dsub>
 800f51e:	0032      	movs	r2, r6
 800f520:	003b      	movs	r3, r7
 800f522:	f7f2 fe2d 	bl	8002180 <__aeabi_dmul>
 800f526:	4a5e      	ldr	r2, [pc, #376]	; (800f6a0 <atan+0x2d8>)
 800f528:	4b5e      	ldr	r3, [pc, #376]	; (800f6a4 <atan+0x2dc>)
 800f52a:	f7f3 f895 	bl	8002658 <__aeabi_dsub>
 800f52e:	0032      	movs	r2, r6
 800f530:	003b      	movs	r3, r7
 800f532:	f7f2 fe25 	bl	8002180 <__aeabi_dmul>
 800f536:	4a5c      	ldr	r2, [pc, #368]	; (800f6a8 <atan+0x2e0>)
 800f538:	4b5c      	ldr	r3, [pc, #368]	; (800f6ac <atan+0x2e4>)
 800f53a:	f7f3 f88d 	bl	8002658 <__aeabi_dsub>
 800f53e:	0032      	movs	r2, r6
 800f540:	003b      	movs	r3, r7
 800f542:	f7f2 fe1d 	bl	8002180 <__aeabi_dmul>
 800f546:	0002      	movs	r2, r0
 800f548:	000b      	movs	r3, r1
 800f54a:	9800      	ldr	r0, [sp, #0]
 800f54c:	9901      	ldr	r1, [sp, #4]
 800f54e:	f7f1 fea7 	bl	80012a0 <__aeabi_dadd>
 800f552:	002b      	movs	r3, r5
 800f554:	0022      	movs	r2, r4
 800f556:	f7f2 fe13 	bl	8002180 <__aeabi_dmul>
 800f55a:	9b02      	ldr	r3, [sp, #8]
 800f55c:	3301      	adds	r3, #1
 800f55e:	d143      	bne.n	800f5e8 <atan+0x220>
 800f560:	0002      	movs	r2, r0
 800f562:	000b      	movs	r3, r1
 800f564:	0020      	movs	r0, r4
 800f566:	0029      	movs	r1, r5
 800f568:	f7f3 f876 	bl	8002658 <__aeabi_dsub>
 800f56c:	e742      	b.n	800f3f4 <atan+0x2c>
 800f56e:	2200      	movs	r2, #0
 800f570:	4b36      	ldr	r3, [pc, #216]	; (800f64c <atan+0x284>)
 800f572:	f7f3 f871 	bl	8002658 <__aeabi_dsub>
 800f576:	2200      	movs	r2, #0
 800f578:	0006      	movs	r6, r0
 800f57a:	000f      	movs	r7, r1
 800f57c:	0020      	movs	r0, r4
 800f57e:	0029      	movs	r1, r5
 800f580:	4b32      	ldr	r3, [pc, #200]	; (800f64c <atan+0x284>)
 800f582:	f7f1 fe8d 	bl	80012a0 <__aeabi_dadd>
 800f586:	000b      	movs	r3, r1
 800f588:	0002      	movs	r2, r0
 800f58a:	0039      	movs	r1, r7
 800f58c:	0030      	movs	r0, r6
 800f58e:	f7f2 f9f1 	bl	8001974 <__aeabi_ddiv>
 800f592:	2301      	movs	r3, #1
 800f594:	0004      	movs	r4, r0
 800f596:	000d      	movs	r5, r1
 800f598:	e772      	b.n	800f480 <atan+0xb8>
 800f59a:	4b45      	ldr	r3, [pc, #276]	; (800f6b0 <atan+0x2e8>)
 800f59c:	429e      	cmp	r6, r3
 800f59e:	dc19      	bgt.n	800f5d4 <atan+0x20c>
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	4b44      	ldr	r3, [pc, #272]	; (800f6b4 <atan+0x2ec>)
 800f5a4:	f7f3 f858 	bl	8002658 <__aeabi_dsub>
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	0006      	movs	r6, r0
 800f5ac:	000f      	movs	r7, r1
 800f5ae:	0020      	movs	r0, r4
 800f5b0:	0029      	movs	r1, r5
 800f5b2:	4b40      	ldr	r3, [pc, #256]	; (800f6b4 <atan+0x2ec>)
 800f5b4:	f7f2 fde4 	bl	8002180 <__aeabi_dmul>
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	4b24      	ldr	r3, [pc, #144]	; (800f64c <atan+0x284>)
 800f5bc:	f7f1 fe70 	bl	80012a0 <__aeabi_dadd>
 800f5c0:	000b      	movs	r3, r1
 800f5c2:	0002      	movs	r2, r0
 800f5c4:	0039      	movs	r1, r7
 800f5c6:	0030      	movs	r0, r6
 800f5c8:	f7f2 f9d4 	bl	8001974 <__aeabi_ddiv>
 800f5cc:	2302      	movs	r3, #2
 800f5ce:	0004      	movs	r4, r0
 800f5d0:	000d      	movs	r5, r1
 800f5d2:	e755      	b.n	800f480 <atan+0xb8>
 800f5d4:	000b      	movs	r3, r1
 800f5d6:	0002      	movs	r2, r0
 800f5d8:	4937      	ldr	r1, [pc, #220]	; (800f6b8 <atan+0x2f0>)
 800f5da:	2000      	movs	r0, #0
 800f5dc:	f7f2 f9ca 	bl	8001974 <__aeabi_ddiv>
 800f5e0:	2303      	movs	r3, #3
 800f5e2:	0004      	movs	r4, r0
 800f5e4:	000d      	movs	r5, r1
 800f5e6:	e74b      	b.n	800f480 <atan+0xb8>
 800f5e8:	9b02      	ldr	r3, [sp, #8]
 800f5ea:	4f34      	ldr	r7, [pc, #208]	; (800f6bc <atan+0x2f4>)
 800f5ec:	00de      	lsls	r6, r3, #3
 800f5ee:	4b34      	ldr	r3, [pc, #208]	; (800f6c0 <atan+0x2f8>)
 800f5f0:	19bf      	adds	r7, r7, r6
 800f5f2:	199e      	adds	r6, r3, r6
 800f5f4:	6832      	ldr	r2, [r6, #0]
 800f5f6:	6873      	ldr	r3, [r6, #4]
 800f5f8:	f7f3 f82e 	bl	8002658 <__aeabi_dsub>
 800f5fc:	0022      	movs	r2, r4
 800f5fe:	002b      	movs	r3, r5
 800f600:	f7f3 f82a 	bl	8002658 <__aeabi_dsub>
 800f604:	000b      	movs	r3, r1
 800f606:	0002      	movs	r2, r0
 800f608:	6838      	ldr	r0, [r7, #0]
 800f60a:	6879      	ldr	r1, [r7, #4]
 800f60c:	f7f3 f824 	bl	8002658 <__aeabi_dsub>
 800f610:	9b03      	ldr	r3, [sp, #12]
 800f612:	0004      	movs	r4, r0
 800f614:	000d      	movs	r5, r1
 800f616:	2b00      	cmp	r3, #0
 800f618:	db00      	blt.n	800f61c <atan+0x254>
 800f61a:	e6f4      	b.n	800f406 <atan+0x3e>
 800f61c:	2180      	movs	r1, #128	; 0x80
 800f61e:	0609      	lsls	r1, r1, #24
 800f620:	186b      	adds	r3, r5, r1
 800f622:	001d      	movs	r5, r3
 800f624:	e6ef      	b.n	800f406 <atan+0x3e>
 800f626:	4d27      	ldr	r5, [pc, #156]	; (800f6c4 <atan+0x2fc>)
 800f628:	e6ed      	b.n	800f406 <atan+0x3e>
 800f62a:	46c0      	nop			; (mov r8, r8)
 800f62c:	440fffff 	.word	0x440fffff
 800f630:	7ff00000 	.word	0x7ff00000
 800f634:	54442d18 	.word	0x54442d18
 800f638:	bff921fb 	.word	0xbff921fb
 800f63c:	3fdbffff 	.word	0x3fdbffff
 800f640:	3e1fffff 	.word	0x3e1fffff
 800f644:	8800759c 	.word	0x8800759c
 800f648:	7e37e43c 	.word	0x7e37e43c
 800f64c:	3ff00000 	.word	0x3ff00000
 800f650:	3ff2ffff 	.word	0x3ff2ffff
 800f654:	3fe5ffff 	.word	0x3fe5ffff
 800f658:	e322da11 	.word	0xe322da11
 800f65c:	3f90ad3a 	.word	0x3f90ad3a
 800f660:	24760deb 	.word	0x24760deb
 800f664:	3fa97b4b 	.word	0x3fa97b4b
 800f668:	a0d03d51 	.word	0xa0d03d51
 800f66c:	3fb10d66 	.word	0x3fb10d66
 800f670:	c54c206e 	.word	0xc54c206e
 800f674:	3fb745cd 	.word	0x3fb745cd
 800f678:	920083ff 	.word	0x920083ff
 800f67c:	3fc24924 	.word	0x3fc24924
 800f680:	5555550d 	.word	0x5555550d
 800f684:	3fd55555 	.word	0x3fd55555
 800f688:	2c6a6c2f 	.word	0x2c6a6c2f
 800f68c:	bfa2b444 	.word	0xbfa2b444
 800f690:	52defd9a 	.word	0x52defd9a
 800f694:	3fadde2d 	.word	0x3fadde2d
 800f698:	af749a6d 	.word	0xaf749a6d
 800f69c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f6a0:	fe231671 	.word	0xfe231671
 800f6a4:	3fbc71c6 	.word	0x3fbc71c6
 800f6a8:	9998ebc4 	.word	0x9998ebc4
 800f6ac:	3fc99999 	.word	0x3fc99999
 800f6b0:	40037fff 	.word	0x40037fff
 800f6b4:	3ff80000 	.word	0x3ff80000
 800f6b8:	bff00000 	.word	0xbff00000
 800f6bc:	08012430 	.word	0x08012430
 800f6c0:	08012450 	.word	0x08012450
 800f6c4:	3ff921fb 	.word	0x3ff921fb

0800f6c8 <cos>:
 800f6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6ca:	4a1e      	ldr	r2, [pc, #120]	; (800f744 <cos+0x7c>)
 800f6cc:	004b      	lsls	r3, r1, #1
 800f6ce:	b087      	sub	sp, #28
 800f6d0:	085b      	lsrs	r3, r3, #1
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	dc04      	bgt.n	800f6e0 <cos+0x18>
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	2300      	movs	r3, #0
 800f6da:	f001 fbbf 	bl	8010e5c <__kernel_cos>
 800f6de:	e006      	b.n	800f6ee <cos+0x26>
 800f6e0:	4a19      	ldr	r2, [pc, #100]	; (800f748 <cos+0x80>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	dd05      	ble.n	800f6f2 <cos+0x2a>
 800f6e6:	0002      	movs	r2, r0
 800f6e8:	000b      	movs	r3, r1
 800f6ea:	f7f2 ffb5 	bl	8002658 <__aeabi_dsub>
 800f6ee:	b007      	add	sp, #28
 800f6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6f2:	aa02      	add	r2, sp, #8
 800f6f4:	f001 f912 	bl	801091c <__ieee754_rem_pio2>
 800f6f8:	9c04      	ldr	r4, [sp, #16]
 800f6fa:	9d05      	ldr	r5, [sp, #20]
 800f6fc:	2303      	movs	r3, #3
 800f6fe:	4003      	ands	r3, r0
 800f700:	2b01      	cmp	r3, #1
 800f702:	d008      	beq.n	800f716 <cos+0x4e>
 800f704:	9802      	ldr	r0, [sp, #8]
 800f706:	9903      	ldr	r1, [sp, #12]
 800f708:	2b02      	cmp	r3, #2
 800f70a:	d00f      	beq.n	800f72c <cos+0x64>
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d112      	bne.n	800f736 <cos+0x6e>
 800f710:	0022      	movs	r2, r4
 800f712:	002b      	movs	r3, r5
 800f714:	e7e1      	b.n	800f6da <cos+0x12>
 800f716:	9300      	str	r3, [sp, #0]
 800f718:	0022      	movs	r2, r4
 800f71a:	9802      	ldr	r0, [sp, #8]
 800f71c:	9903      	ldr	r1, [sp, #12]
 800f71e:	002b      	movs	r3, r5
 800f720:	f001 ffd2 	bl	80116c8 <__kernel_sin>
 800f724:	2380      	movs	r3, #128	; 0x80
 800f726:	061b      	lsls	r3, r3, #24
 800f728:	18c9      	adds	r1, r1, r3
 800f72a:	e7e0      	b.n	800f6ee <cos+0x26>
 800f72c:	0022      	movs	r2, r4
 800f72e:	002b      	movs	r3, r5
 800f730:	f001 fb94 	bl	8010e5c <__kernel_cos>
 800f734:	e7f6      	b.n	800f724 <cos+0x5c>
 800f736:	2301      	movs	r3, #1
 800f738:	0022      	movs	r2, r4
 800f73a:	9300      	str	r3, [sp, #0]
 800f73c:	002b      	movs	r3, r5
 800f73e:	f001 ffc3 	bl	80116c8 <__kernel_sin>
 800f742:	e7d4      	b.n	800f6ee <cos+0x26>
 800f744:	3fe921fb 	.word	0x3fe921fb
 800f748:	7fefffff 	.word	0x7fefffff

0800f74c <fabs>:
 800f74c:	004b      	lsls	r3, r1, #1
 800f74e:	0859      	lsrs	r1, r3, #1
 800f750:	4770      	bx	lr
	...

0800f754 <sin>:
 800f754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f756:	4a20      	ldr	r2, [pc, #128]	; (800f7d8 <sin+0x84>)
 800f758:	004b      	lsls	r3, r1, #1
 800f75a:	b087      	sub	sp, #28
 800f75c:	085b      	lsrs	r3, r3, #1
 800f75e:	4293      	cmp	r3, r2
 800f760:	dc06      	bgt.n	800f770 <sin+0x1c>
 800f762:	2300      	movs	r3, #0
 800f764:	2200      	movs	r2, #0
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	2300      	movs	r3, #0
 800f76a:	f001 ffad 	bl	80116c8 <__kernel_sin>
 800f76e:	e006      	b.n	800f77e <sin+0x2a>
 800f770:	4a1a      	ldr	r2, [pc, #104]	; (800f7dc <sin+0x88>)
 800f772:	4293      	cmp	r3, r2
 800f774:	dd05      	ble.n	800f782 <sin+0x2e>
 800f776:	0002      	movs	r2, r0
 800f778:	000b      	movs	r3, r1
 800f77a:	f7f2 ff6d 	bl	8002658 <__aeabi_dsub>
 800f77e:	b007      	add	sp, #28
 800f780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f782:	aa02      	add	r2, sp, #8
 800f784:	f001 f8ca 	bl	801091c <__ieee754_rem_pio2>
 800f788:	9c04      	ldr	r4, [sp, #16]
 800f78a:	9d05      	ldr	r5, [sp, #20]
 800f78c:	2303      	movs	r3, #3
 800f78e:	4003      	ands	r3, r0
 800f790:	2b01      	cmp	r3, #1
 800f792:	d00a      	beq.n	800f7aa <sin+0x56>
 800f794:	9802      	ldr	r0, [sp, #8]
 800f796:	9903      	ldr	r1, [sp, #12]
 800f798:	2b02      	cmp	r3, #2
 800f79a:	d00d      	beq.n	800f7b8 <sin+0x64>
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d115      	bne.n	800f7cc <sin+0x78>
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	9300      	str	r3, [sp, #0]
 800f7a4:	0022      	movs	r2, r4
 800f7a6:	002b      	movs	r3, r5
 800f7a8:	e7df      	b.n	800f76a <sin+0x16>
 800f7aa:	0022      	movs	r2, r4
 800f7ac:	9802      	ldr	r0, [sp, #8]
 800f7ae:	9903      	ldr	r1, [sp, #12]
 800f7b0:	002b      	movs	r3, r5
 800f7b2:	f001 fb53 	bl	8010e5c <__kernel_cos>
 800f7b6:	e7e2      	b.n	800f77e <sin+0x2a>
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	0022      	movs	r2, r4
 800f7bc:	9300      	str	r3, [sp, #0]
 800f7be:	002b      	movs	r3, r5
 800f7c0:	f001 ff82 	bl	80116c8 <__kernel_sin>
 800f7c4:	2380      	movs	r3, #128	; 0x80
 800f7c6:	061b      	lsls	r3, r3, #24
 800f7c8:	18c9      	adds	r1, r1, r3
 800f7ca:	e7d8      	b.n	800f77e <sin+0x2a>
 800f7cc:	0022      	movs	r2, r4
 800f7ce:	002b      	movs	r3, r5
 800f7d0:	f001 fb44 	bl	8010e5c <__kernel_cos>
 800f7d4:	e7f6      	b.n	800f7c4 <sin+0x70>
 800f7d6:	46c0      	nop			; (mov r8, r8)
 800f7d8:	3fe921fb 	.word	0x3fe921fb
 800f7dc:	7fefffff 	.word	0x7fefffff

0800f7e0 <asin>:
 800f7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e2:	0004      	movs	r4, r0
 800f7e4:	000d      	movs	r5, r1
 800f7e6:	f000 f915 	bl	800fa14 <__ieee754_asin>
 800f7ea:	4b12      	ldr	r3, [pc, #72]	; (800f834 <asin+0x54>)
 800f7ec:	0006      	movs	r6, r0
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	000f      	movs	r7, r1
 800f7f2:	b25b      	sxtb	r3, r3
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	d01a      	beq.n	800f82e <asin+0x4e>
 800f7f8:	0022      	movs	r2, r4
 800f7fa:	002b      	movs	r3, r5
 800f7fc:	0020      	movs	r0, r4
 800f7fe:	0029      	movs	r1, r5
 800f800:	f7f3 fabc 	bl	8002d7c <__aeabi_dcmpun>
 800f804:	2800      	cmp	r0, #0
 800f806:	d112      	bne.n	800f82e <asin+0x4e>
 800f808:	0020      	movs	r0, r4
 800f80a:	0029      	movs	r1, r5
 800f80c:	f7ff ff9e 	bl	800f74c <fabs>
 800f810:	2200      	movs	r2, #0
 800f812:	4b09      	ldr	r3, [pc, #36]	; (800f838 <asin+0x58>)
 800f814:	f7f0 fe30 	bl	8000478 <__aeabi_dcmpgt>
 800f818:	2800      	cmp	r0, #0
 800f81a:	d008      	beq.n	800f82e <asin+0x4e>
 800f81c:	f7fc fe54 	bl	800c4c8 <__errno>
 800f820:	2321      	movs	r3, #33	; 0x21
 800f822:	6003      	str	r3, [r0, #0]
 800f824:	4805      	ldr	r0, [pc, #20]	; (800f83c <asin+0x5c>)
 800f826:	f002 f88d 	bl	8011944 <nan>
 800f82a:	0006      	movs	r6, r0
 800f82c:	000f      	movs	r7, r1
 800f82e:	0030      	movs	r0, r6
 800f830:	0039      	movs	r1, r7
 800f832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f834:	200001e0 	.word	0x200001e0
 800f838:	3ff00000 	.word	0x3ff00000
 800f83c:	080122c0 	.word	0x080122c0

0800f840 <atan2>:
 800f840:	b510      	push	{r4, lr}
 800f842:	f000 fabf 	bl	800fdc4 <__ieee754_atan2>
 800f846:	bd10      	pop	{r4, pc}

0800f848 <pow>:
 800f848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f84a:	001d      	movs	r5, r3
 800f84c:	0014      	movs	r4, r2
 800f84e:	9000      	str	r0, [sp, #0]
 800f850:	9101      	str	r1, [sp, #4]
 800f852:	f000 fb63 	bl	800ff1c <__ieee754_pow>
 800f856:	4b54      	ldr	r3, [pc, #336]	; (800f9a8 <pow+0x160>)
 800f858:	0006      	movs	r6, r0
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	000f      	movs	r7, r1
 800f85e:	b25b      	sxtb	r3, r3
 800f860:	3301      	adds	r3, #1
 800f862:	d018      	beq.n	800f896 <pow+0x4e>
 800f864:	0022      	movs	r2, r4
 800f866:	002b      	movs	r3, r5
 800f868:	0020      	movs	r0, r4
 800f86a:	0029      	movs	r1, r5
 800f86c:	f7f3 fa86 	bl	8002d7c <__aeabi_dcmpun>
 800f870:	2800      	cmp	r0, #0
 800f872:	d110      	bne.n	800f896 <pow+0x4e>
 800f874:	9a00      	ldr	r2, [sp, #0]
 800f876:	9b01      	ldr	r3, [sp, #4]
 800f878:	0010      	movs	r0, r2
 800f87a:	0019      	movs	r1, r3
 800f87c:	f7f3 fa7e 	bl	8002d7c <__aeabi_dcmpun>
 800f880:	2200      	movs	r2, #0
 800f882:	2300      	movs	r3, #0
 800f884:	2800      	cmp	r0, #0
 800f886:	d00a      	beq.n	800f89e <pow+0x56>
 800f888:	0020      	movs	r0, r4
 800f88a:	0029      	movs	r1, r5
 800f88c:	f7f0 fdda 	bl	8000444 <__aeabi_dcmpeq>
 800f890:	2800      	cmp	r0, #0
 800f892:	d000      	beq.n	800f896 <pow+0x4e>
 800f894:	e084      	b.n	800f9a0 <pow+0x158>
 800f896:	0030      	movs	r0, r6
 800f898:	0039      	movs	r1, r7
 800f89a:	b003      	add	sp, #12
 800f89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f89e:	9800      	ldr	r0, [sp, #0]
 800f8a0:	9901      	ldr	r1, [sp, #4]
 800f8a2:	f7f0 fdcf 	bl	8000444 <__aeabi_dcmpeq>
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	d01c      	beq.n	800f8e4 <pow+0x9c>
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	0020      	movs	r0, r4
 800f8b0:	0029      	movs	r1, r5
 800f8b2:	f7f0 fdc7 	bl	8000444 <__aeabi_dcmpeq>
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d172      	bne.n	800f9a0 <pow+0x158>
 800f8ba:	0020      	movs	r0, r4
 800f8bc:	0029      	movs	r1, r5
 800f8be:	f001 ffaf 	bl	8011820 <finite>
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	d0e7      	beq.n	800f896 <pow+0x4e>
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	0020      	movs	r0, r4
 800f8cc:	0029      	movs	r1, r5
 800f8ce:	f7f0 fdbf 	bl	8000450 <__aeabi_dcmplt>
 800f8d2:	2800      	cmp	r0, #0
 800f8d4:	d0df      	beq.n	800f896 <pow+0x4e>
 800f8d6:	f7fc fdf7 	bl	800c4c8 <__errno>
 800f8da:	2321      	movs	r3, #33	; 0x21
 800f8dc:	2600      	movs	r6, #0
 800f8de:	6003      	str	r3, [r0, #0]
 800f8e0:	4f32      	ldr	r7, [pc, #200]	; (800f9ac <pow+0x164>)
 800f8e2:	e7d8      	b.n	800f896 <pow+0x4e>
 800f8e4:	0030      	movs	r0, r6
 800f8e6:	0039      	movs	r1, r7
 800f8e8:	f001 ff9a 	bl	8011820 <finite>
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	d139      	bne.n	800f964 <pow+0x11c>
 800f8f0:	9800      	ldr	r0, [sp, #0]
 800f8f2:	9901      	ldr	r1, [sp, #4]
 800f8f4:	f001 ff94 	bl	8011820 <finite>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	d033      	beq.n	800f964 <pow+0x11c>
 800f8fc:	0020      	movs	r0, r4
 800f8fe:	0029      	movs	r1, r5
 800f900:	f001 ff8e 	bl	8011820 <finite>
 800f904:	2800      	cmp	r0, #0
 800f906:	d02d      	beq.n	800f964 <pow+0x11c>
 800f908:	0032      	movs	r2, r6
 800f90a:	003b      	movs	r3, r7
 800f90c:	0030      	movs	r0, r6
 800f90e:	0039      	movs	r1, r7
 800f910:	f7f3 fa34 	bl	8002d7c <__aeabi_dcmpun>
 800f914:	2800      	cmp	r0, #0
 800f916:	d00c      	beq.n	800f932 <pow+0xea>
 800f918:	f7fc fdd6 	bl	800c4c8 <__errno>
 800f91c:	2321      	movs	r3, #33	; 0x21
 800f91e:	2200      	movs	r2, #0
 800f920:	6003      	str	r3, [r0, #0]
 800f922:	2300      	movs	r3, #0
 800f924:	0010      	movs	r0, r2
 800f926:	0019      	movs	r1, r3
 800f928:	f7f2 f824 	bl	8001974 <__aeabi_ddiv>
 800f92c:	0006      	movs	r6, r0
 800f92e:	000f      	movs	r7, r1
 800f930:	e7b1      	b.n	800f896 <pow+0x4e>
 800f932:	f7fc fdc9 	bl	800c4c8 <__errno>
 800f936:	2322      	movs	r3, #34	; 0x22
 800f938:	2200      	movs	r2, #0
 800f93a:	6003      	str	r3, [r0, #0]
 800f93c:	2300      	movs	r3, #0
 800f93e:	9800      	ldr	r0, [sp, #0]
 800f940:	9901      	ldr	r1, [sp, #4]
 800f942:	f7f0 fd85 	bl	8000450 <__aeabi_dcmplt>
 800f946:	2600      	movs	r6, #0
 800f948:	2800      	cmp	r0, #0
 800f94a:	d009      	beq.n	800f960 <pow+0x118>
 800f94c:	0020      	movs	r0, r4
 800f94e:	0029      	movs	r1, r5
 800f950:	f001 fffe 	bl	8011950 <rint>
 800f954:	0022      	movs	r2, r4
 800f956:	002b      	movs	r3, r5
 800f958:	f7f0 fd74 	bl	8000444 <__aeabi_dcmpeq>
 800f95c:	2800      	cmp	r0, #0
 800f95e:	d0bf      	beq.n	800f8e0 <pow+0x98>
 800f960:	4f13      	ldr	r7, [pc, #76]	; (800f9b0 <pow+0x168>)
 800f962:	e798      	b.n	800f896 <pow+0x4e>
 800f964:	2200      	movs	r2, #0
 800f966:	2300      	movs	r3, #0
 800f968:	0030      	movs	r0, r6
 800f96a:	0039      	movs	r1, r7
 800f96c:	f7f0 fd6a 	bl	8000444 <__aeabi_dcmpeq>
 800f970:	2800      	cmp	r0, #0
 800f972:	d100      	bne.n	800f976 <pow+0x12e>
 800f974:	e78f      	b.n	800f896 <pow+0x4e>
 800f976:	9800      	ldr	r0, [sp, #0]
 800f978:	9901      	ldr	r1, [sp, #4]
 800f97a:	f001 ff51 	bl	8011820 <finite>
 800f97e:	2800      	cmp	r0, #0
 800f980:	d100      	bne.n	800f984 <pow+0x13c>
 800f982:	e788      	b.n	800f896 <pow+0x4e>
 800f984:	0020      	movs	r0, r4
 800f986:	0029      	movs	r1, r5
 800f988:	f001 ff4a 	bl	8011820 <finite>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d100      	bne.n	800f992 <pow+0x14a>
 800f990:	e781      	b.n	800f896 <pow+0x4e>
 800f992:	f7fc fd99 	bl	800c4c8 <__errno>
 800f996:	2322      	movs	r3, #34	; 0x22
 800f998:	2600      	movs	r6, #0
 800f99a:	2700      	movs	r7, #0
 800f99c:	6003      	str	r3, [r0, #0]
 800f99e:	e77a      	b.n	800f896 <pow+0x4e>
 800f9a0:	2600      	movs	r6, #0
 800f9a2:	4f04      	ldr	r7, [pc, #16]	; (800f9b4 <pow+0x16c>)
 800f9a4:	e777      	b.n	800f896 <pow+0x4e>
 800f9a6:	46c0      	nop			; (mov r8, r8)
 800f9a8:	200001e0 	.word	0x200001e0
 800f9ac:	fff00000 	.word	0xfff00000
 800f9b0:	7ff00000 	.word	0x7ff00000
 800f9b4:	3ff00000 	.word	0x3ff00000

0800f9b8 <sqrt>:
 800f9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ba:	0004      	movs	r4, r0
 800f9bc:	000d      	movs	r5, r1
 800f9be:	f001 f999 	bl	8010cf4 <__ieee754_sqrt>
 800f9c2:	4b13      	ldr	r3, [pc, #76]	; (800fa10 <sqrt+0x58>)
 800f9c4:	0006      	movs	r6, r0
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	000f      	movs	r7, r1
 800f9ca:	b25b      	sxtb	r3, r3
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	d01b      	beq.n	800fa08 <sqrt+0x50>
 800f9d0:	0022      	movs	r2, r4
 800f9d2:	002b      	movs	r3, r5
 800f9d4:	0020      	movs	r0, r4
 800f9d6:	0029      	movs	r1, r5
 800f9d8:	f7f3 f9d0 	bl	8002d7c <__aeabi_dcmpun>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d113      	bne.n	800fa08 <sqrt+0x50>
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	0020      	movs	r0, r4
 800f9e6:	0029      	movs	r1, r5
 800f9e8:	f7f0 fd32 	bl	8000450 <__aeabi_dcmplt>
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	d00b      	beq.n	800fa08 <sqrt+0x50>
 800f9f0:	f7fc fd6a 	bl	800c4c8 <__errno>
 800f9f4:	2321      	movs	r3, #33	; 0x21
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	6003      	str	r3, [r0, #0]
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	0010      	movs	r0, r2
 800f9fe:	0019      	movs	r1, r3
 800fa00:	f7f1 ffb8 	bl	8001974 <__aeabi_ddiv>
 800fa04:	0006      	movs	r6, r0
 800fa06:	000f      	movs	r7, r1
 800fa08:	0030      	movs	r0, r6
 800fa0a:	0039      	movs	r1, r7
 800fa0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa0e:	46c0      	nop			; (mov r8, r8)
 800fa10:	200001e0 	.word	0x200001e0

0800fa14 <__ieee754_asin>:
 800fa14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa16:	4bca      	ldr	r3, [pc, #808]	; (800fd40 <__ieee754_asin+0x32c>)
 800fa18:	b08b      	sub	sp, #44	; 0x2c
 800fa1a:	004e      	lsls	r6, r1, #1
 800fa1c:	0004      	movs	r4, r0
 800fa1e:	000d      	movs	r5, r1
 800fa20:	9107      	str	r1, [sp, #28]
 800fa22:	0876      	lsrs	r6, r6, #1
 800fa24:	429e      	cmp	r6, r3
 800fa26:	dd24      	ble.n	800fa72 <__ieee754_asin+0x5e>
 800fa28:	4bc6      	ldr	r3, [pc, #792]	; (800fd44 <__ieee754_asin+0x330>)
 800fa2a:	18f6      	adds	r6, r6, r3
 800fa2c:	4306      	orrs	r6, r0
 800fa2e:	d112      	bne.n	800fa56 <__ieee754_asin+0x42>
 800fa30:	4ac5      	ldr	r2, [pc, #788]	; (800fd48 <__ieee754_asin+0x334>)
 800fa32:	4bc6      	ldr	r3, [pc, #792]	; (800fd4c <__ieee754_asin+0x338>)
 800fa34:	f7f2 fba4 	bl	8002180 <__aeabi_dmul>
 800fa38:	4ac5      	ldr	r2, [pc, #788]	; (800fd50 <__ieee754_asin+0x33c>)
 800fa3a:	0006      	movs	r6, r0
 800fa3c:	000f      	movs	r7, r1
 800fa3e:	4bc5      	ldr	r3, [pc, #788]	; (800fd54 <__ieee754_asin+0x340>)
 800fa40:	0020      	movs	r0, r4
 800fa42:	0029      	movs	r1, r5
 800fa44:	f7f2 fb9c 	bl	8002180 <__aeabi_dmul>
 800fa48:	0002      	movs	r2, r0
 800fa4a:	000b      	movs	r3, r1
 800fa4c:	0030      	movs	r0, r6
 800fa4e:	0039      	movs	r1, r7
 800fa50:	f7f1 fc26 	bl	80012a0 <__aeabi_dadd>
 800fa54:	e007      	b.n	800fa66 <__ieee754_asin+0x52>
 800fa56:	0002      	movs	r2, r0
 800fa58:	000b      	movs	r3, r1
 800fa5a:	f7f2 fdfd 	bl	8002658 <__aeabi_dsub>
 800fa5e:	0002      	movs	r2, r0
 800fa60:	000b      	movs	r3, r1
 800fa62:	f7f1 ff87 	bl	8001974 <__aeabi_ddiv>
 800fa66:	0004      	movs	r4, r0
 800fa68:	000d      	movs	r5, r1
 800fa6a:	0020      	movs	r0, r4
 800fa6c:	0029      	movs	r1, r5
 800fa6e:	b00b      	add	sp, #44	; 0x2c
 800fa70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa72:	4bb9      	ldr	r3, [pc, #740]	; (800fd58 <__ieee754_asin+0x344>)
 800fa74:	429e      	cmp	r6, r3
 800fa76:	dc0e      	bgt.n	800fa96 <__ieee754_asin+0x82>
 800fa78:	23f9      	movs	r3, #249	; 0xf9
 800fa7a:	059b      	lsls	r3, r3, #22
 800fa7c:	429e      	cmp	r6, r3
 800fa7e:	db00      	blt.n	800fa82 <__ieee754_asin+0x6e>
 800fa80:	e09c      	b.n	800fbbc <__ieee754_asin+0x1a8>
 800fa82:	4ab6      	ldr	r2, [pc, #728]	; (800fd5c <__ieee754_asin+0x348>)
 800fa84:	4bb6      	ldr	r3, [pc, #728]	; (800fd60 <__ieee754_asin+0x34c>)
 800fa86:	f7f1 fc0b 	bl	80012a0 <__aeabi_dadd>
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	4bb5      	ldr	r3, [pc, #724]	; (800fd64 <__ieee754_asin+0x350>)
 800fa8e:	f7f0 fcf3 	bl	8000478 <__aeabi_dcmpgt>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d1e9      	bne.n	800fa6a <__ieee754_asin+0x56>
 800fa96:	0020      	movs	r0, r4
 800fa98:	0029      	movs	r1, r5
 800fa9a:	f7ff fe57 	bl	800f74c <fabs>
 800fa9e:	0002      	movs	r2, r0
 800faa0:	000b      	movs	r3, r1
 800faa2:	2000      	movs	r0, #0
 800faa4:	49af      	ldr	r1, [pc, #700]	; (800fd64 <__ieee754_asin+0x350>)
 800faa6:	f7f2 fdd7 	bl	8002658 <__aeabi_dsub>
 800faaa:	2200      	movs	r2, #0
 800faac:	4bae      	ldr	r3, [pc, #696]	; (800fd68 <__ieee754_asin+0x354>)
 800faae:	f7f2 fb67 	bl	8002180 <__aeabi_dmul>
 800fab2:	0004      	movs	r4, r0
 800fab4:	000d      	movs	r5, r1
 800fab6:	4aad      	ldr	r2, [pc, #692]	; (800fd6c <__ieee754_asin+0x358>)
 800fab8:	4bad      	ldr	r3, [pc, #692]	; (800fd70 <__ieee754_asin+0x35c>)
 800faba:	f7f2 fb61 	bl	8002180 <__aeabi_dmul>
 800fabe:	4aad      	ldr	r2, [pc, #692]	; (800fd74 <__ieee754_asin+0x360>)
 800fac0:	4bad      	ldr	r3, [pc, #692]	; (800fd78 <__ieee754_asin+0x364>)
 800fac2:	f7f1 fbed 	bl	80012a0 <__aeabi_dadd>
 800fac6:	0022      	movs	r2, r4
 800fac8:	002b      	movs	r3, r5
 800faca:	f7f2 fb59 	bl	8002180 <__aeabi_dmul>
 800face:	4aab      	ldr	r2, [pc, #684]	; (800fd7c <__ieee754_asin+0x368>)
 800fad0:	4bab      	ldr	r3, [pc, #684]	; (800fd80 <__ieee754_asin+0x36c>)
 800fad2:	f7f2 fdc1 	bl	8002658 <__aeabi_dsub>
 800fad6:	0022      	movs	r2, r4
 800fad8:	002b      	movs	r3, r5
 800fada:	f7f2 fb51 	bl	8002180 <__aeabi_dmul>
 800fade:	4aa9      	ldr	r2, [pc, #676]	; (800fd84 <__ieee754_asin+0x370>)
 800fae0:	4ba9      	ldr	r3, [pc, #676]	; (800fd88 <__ieee754_asin+0x374>)
 800fae2:	f7f1 fbdd 	bl	80012a0 <__aeabi_dadd>
 800fae6:	0022      	movs	r2, r4
 800fae8:	002b      	movs	r3, r5
 800faea:	f7f2 fb49 	bl	8002180 <__aeabi_dmul>
 800faee:	4aa7      	ldr	r2, [pc, #668]	; (800fd8c <__ieee754_asin+0x378>)
 800faf0:	4ba7      	ldr	r3, [pc, #668]	; (800fd90 <__ieee754_asin+0x37c>)
 800faf2:	f7f2 fdb1 	bl	8002658 <__aeabi_dsub>
 800faf6:	0022      	movs	r2, r4
 800faf8:	002b      	movs	r3, r5
 800fafa:	f7f2 fb41 	bl	8002180 <__aeabi_dmul>
 800fafe:	4aa5      	ldr	r2, [pc, #660]	; (800fd94 <__ieee754_asin+0x380>)
 800fb00:	4ba5      	ldr	r3, [pc, #660]	; (800fd98 <__ieee754_asin+0x384>)
 800fb02:	f7f1 fbcd 	bl	80012a0 <__aeabi_dadd>
 800fb06:	0022      	movs	r2, r4
 800fb08:	002b      	movs	r3, r5
 800fb0a:	f7f2 fb39 	bl	8002180 <__aeabi_dmul>
 800fb0e:	4aa3      	ldr	r2, [pc, #652]	; (800fd9c <__ieee754_asin+0x388>)
 800fb10:	9002      	str	r0, [sp, #8]
 800fb12:	9103      	str	r1, [sp, #12]
 800fb14:	4ba2      	ldr	r3, [pc, #648]	; (800fda0 <__ieee754_asin+0x38c>)
 800fb16:	0020      	movs	r0, r4
 800fb18:	0029      	movs	r1, r5
 800fb1a:	f7f2 fb31 	bl	8002180 <__aeabi_dmul>
 800fb1e:	4aa1      	ldr	r2, [pc, #644]	; (800fda4 <__ieee754_asin+0x390>)
 800fb20:	4ba1      	ldr	r3, [pc, #644]	; (800fda8 <__ieee754_asin+0x394>)
 800fb22:	f7f2 fd99 	bl	8002658 <__aeabi_dsub>
 800fb26:	0022      	movs	r2, r4
 800fb28:	002b      	movs	r3, r5
 800fb2a:	f7f2 fb29 	bl	8002180 <__aeabi_dmul>
 800fb2e:	4a9f      	ldr	r2, [pc, #636]	; (800fdac <__ieee754_asin+0x398>)
 800fb30:	4b9f      	ldr	r3, [pc, #636]	; (800fdb0 <__ieee754_asin+0x39c>)
 800fb32:	f7f1 fbb5 	bl	80012a0 <__aeabi_dadd>
 800fb36:	0022      	movs	r2, r4
 800fb38:	002b      	movs	r3, r5
 800fb3a:	f7f2 fb21 	bl	8002180 <__aeabi_dmul>
 800fb3e:	4a9d      	ldr	r2, [pc, #628]	; (800fdb4 <__ieee754_asin+0x3a0>)
 800fb40:	4b9d      	ldr	r3, [pc, #628]	; (800fdb8 <__ieee754_asin+0x3a4>)
 800fb42:	f7f2 fd89 	bl	8002658 <__aeabi_dsub>
 800fb46:	0022      	movs	r2, r4
 800fb48:	002b      	movs	r3, r5
 800fb4a:	f7f2 fb19 	bl	8002180 <__aeabi_dmul>
 800fb4e:	4b85      	ldr	r3, [pc, #532]	; (800fd64 <__ieee754_asin+0x350>)
 800fb50:	2200      	movs	r2, #0
 800fb52:	f7f1 fba5 	bl	80012a0 <__aeabi_dadd>
 800fb56:	9004      	str	r0, [sp, #16]
 800fb58:	9105      	str	r1, [sp, #20]
 800fb5a:	0020      	movs	r0, r4
 800fb5c:	0029      	movs	r1, r5
 800fb5e:	f001 f8c9 	bl	8010cf4 <__ieee754_sqrt>
 800fb62:	4b96      	ldr	r3, [pc, #600]	; (800fdbc <__ieee754_asin+0x3a8>)
 800fb64:	9000      	str	r0, [sp, #0]
 800fb66:	9101      	str	r1, [sp, #4]
 800fb68:	429e      	cmp	r6, r3
 800fb6a:	dc00      	bgt.n	800fb6e <__ieee754_asin+0x15a>
 800fb6c:	e08b      	b.n	800fc86 <__ieee754_asin+0x272>
 800fb6e:	9a04      	ldr	r2, [sp, #16]
 800fb70:	9b05      	ldr	r3, [sp, #20]
 800fb72:	9802      	ldr	r0, [sp, #8]
 800fb74:	9903      	ldr	r1, [sp, #12]
 800fb76:	f7f1 fefd 	bl	8001974 <__aeabi_ddiv>
 800fb7a:	9a00      	ldr	r2, [sp, #0]
 800fb7c:	9b01      	ldr	r3, [sp, #4]
 800fb7e:	f7f2 faff 	bl	8002180 <__aeabi_dmul>
 800fb82:	9a00      	ldr	r2, [sp, #0]
 800fb84:	9b01      	ldr	r3, [sp, #4]
 800fb86:	f7f1 fb8b 	bl	80012a0 <__aeabi_dadd>
 800fb8a:	0002      	movs	r2, r0
 800fb8c:	000b      	movs	r3, r1
 800fb8e:	f7f1 fb87 	bl	80012a0 <__aeabi_dadd>
 800fb92:	4a6f      	ldr	r2, [pc, #444]	; (800fd50 <__ieee754_asin+0x33c>)
 800fb94:	4b6f      	ldr	r3, [pc, #444]	; (800fd54 <__ieee754_asin+0x340>)
 800fb96:	f7f2 fd5f 	bl	8002658 <__aeabi_dsub>
 800fb9a:	0002      	movs	r2, r0
 800fb9c:	000b      	movs	r3, r1
 800fb9e:	486a      	ldr	r0, [pc, #424]	; (800fd48 <__ieee754_asin+0x334>)
 800fba0:	496a      	ldr	r1, [pc, #424]	; (800fd4c <__ieee754_asin+0x338>)
 800fba2:	f7f2 fd59 	bl	8002658 <__aeabi_dsub>
 800fba6:	9b07      	ldr	r3, [sp, #28]
 800fba8:	0004      	movs	r4, r0
 800fbaa:	000d      	movs	r5, r1
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	dd00      	ble.n	800fbb2 <__ieee754_asin+0x19e>
 800fbb0:	e75b      	b.n	800fa6a <__ieee754_asin+0x56>
 800fbb2:	2180      	movs	r1, #128	; 0x80
 800fbb4:	0609      	lsls	r1, r1, #24
 800fbb6:	186b      	adds	r3, r5, r1
 800fbb8:	001d      	movs	r5, r3
 800fbba:	e756      	b.n	800fa6a <__ieee754_asin+0x56>
 800fbbc:	0002      	movs	r2, r0
 800fbbe:	000b      	movs	r3, r1
 800fbc0:	f7f2 fade 	bl	8002180 <__aeabi_dmul>
 800fbc4:	0006      	movs	r6, r0
 800fbc6:	000f      	movs	r7, r1
 800fbc8:	4a68      	ldr	r2, [pc, #416]	; (800fd6c <__ieee754_asin+0x358>)
 800fbca:	4b69      	ldr	r3, [pc, #420]	; (800fd70 <__ieee754_asin+0x35c>)
 800fbcc:	f7f2 fad8 	bl	8002180 <__aeabi_dmul>
 800fbd0:	4a68      	ldr	r2, [pc, #416]	; (800fd74 <__ieee754_asin+0x360>)
 800fbd2:	4b69      	ldr	r3, [pc, #420]	; (800fd78 <__ieee754_asin+0x364>)
 800fbd4:	f7f1 fb64 	bl	80012a0 <__aeabi_dadd>
 800fbd8:	0032      	movs	r2, r6
 800fbda:	003b      	movs	r3, r7
 800fbdc:	f7f2 fad0 	bl	8002180 <__aeabi_dmul>
 800fbe0:	4a66      	ldr	r2, [pc, #408]	; (800fd7c <__ieee754_asin+0x368>)
 800fbe2:	4b67      	ldr	r3, [pc, #412]	; (800fd80 <__ieee754_asin+0x36c>)
 800fbe4:	f7f2 fd38 	bl	8002658 <__aeabi_dsub>
 800fbe8:	0032      	movs	r2, r6
 800fbea:	003b      	movs	r3, r7
 800fbec:	f7f2 fac8 	bl	8002180 <__aeabi_dmul>
 800fbf0:	4a64      	ldr	r2, [pc, #400]	; (800fd84 <__ieee754_asin+0x370>)
 800fbf2:	4b65      	ldr	r3, [pc, #404]	; (800fd88 <__ieee754_asin+0x374>)
 800fbf4:	f7f1 fb54 	bl	80012a0 <__aeabi_dadd>
 800fbf8:	0032      	movs	r2, r6
 800fbfa:	003b      	movs	r3, r7
 800fbfc:	f7f2 fac0 	bl	8002180 <__aeabi_dmul>
 800fc00:	4a62      	ldr	r2, [pc, #392]	; (800fd8c <__ieee754_asin+0x378>)
 800fc02:	4b63      	ldr	r3, [pc, #396]	; (800fd90 <__ieee754_asin+0x37c>)
 800fc04:	f7f2 fd28 	bl	8002658 <__aeabi_dsub>
 800fc08:	0032      	movs	r2, r6
 800fc0a:	003b      	movs	r3, r7
 800fc0c:	f7f2 fab8 	bl	8002180 <__aeabi_dmul>
 800fc10:	4a60      	ldr	r2, [pc, #384]	; (800fd94 <__ieee754_asin+0x380>)
 800fc12:	4b61      	ldr	r3, [pc, #388]	; (800fd98 <__ieee754_asin+0x384>)
 800fc14:	f7f1 fb44 	bl	80012a0 <__aeabi_dadd>
 800fc18:	0032      	movs	r2, r6
 800fc1a:	003b      	movs	r3, r7
 800fc1c:	f7f2 fab0 	bl	8002180 <__aeabi_dmul>
 800fc20:	4a5e      	ldr	r2, [pc, #376]	; (800fd9c <__ieee754_asin+0x388>)
 800fc22:	9000      	str	r0, [sp, #0]
 800fc24:	9101      	str	r1, [sp, #4]
 800fc26:	4b5e      	ldr	r3, [pc, #376]	; (800fda0 <__ieee754_asin+0x38c>)
 800fc28:	0030      	movs	r0, r6
 800fc2a:	0039      	movs	r1, r7
 800fc2c:	f7f2 faa8 	bl	8002180 <__aeabi_dmul>
 800fc30:	4a5c      	ldr	r2, [pc, #368]	; (800fda4 <__ieee754_asin+0x390>)
 800fc32:	4b5d      	ldr	r3, [pc, #372]	; (800fda8 <__ieee754_asin+0x394>)
 800fc34:	f7f2 fd10 	bl	8002658 <__aeabi_dsub>
 800fc38:	0032      	movs	r2, r6
 800fc3a:	003b      	movs	r3, r7
 800fc3c:	f7f2 faa0 	bl	8002180 <__aeabi_dmul>
 800fc40:	4a5a      	ldr	r2, [pc, #360]	; (800fdac <__ieee754_asin+0x398>)
 800fc42:	4b5b      	ldr	r3, [pc, #364]	; (800fdb0 <__ieee754_asin+0x39c>)
 800fc44:	f7f1 fb2c 	bl	80012a0 <__aeabi_dadd>
 800fc48:	0032      	movs	r2, r6
 800fc4a:	003b      	movs	r3, r7
 800fc4c:	f7f2 fa98 	bl	8002180 <__aeabi_dmul>
 800fc50:	4a58      	ldr	r2, [pc, #352]	; (800fdb4 <__ieee754_asin+0x3a0>)
 800fc52:	4b59      	ldr	r3, [pc, #356]	; (800fdb8 <__ieee754_asin+0x3a4>)
 800fc54:	f7f2 fd00 	bl	8002658 <__aeabi_dsub>
 800fc58:	0032      	movs	r2, r6
 800fc5a:	003b      	movs	r3, r7
 800fc5c:	f7f2 fa90 	bl	8002180 <__aeabi_dmul>
 800fc60:	2200      	movs	r2, #0
 800fc62:	4b40      	ldr	r3, [pc, #256]	; (800fd64 <__ieee754_asin+0x350>)
 800fc64:	f7f1 fb1c 	bl	80012a0 <__aeabi_dadd>
 800fc68:	0002      	movs	r2, r0
 800fc6a:	000b      	movs	r3, r1
 800fc6c:	9800      	ldr	r0, [sp, #0]
 800fc6e:	9901      	ldr	r1, [sp, #4]
 800fc70:	f7f1 fe80 	bl	8001974 <__aeabi_ddiv>
 800fc74:	0022      	movs	r2, r4
 800fc76:	002b      	movs	r3, r5
 800fc78:	f7f2 fa82 	bl	8002180 <__aeabi_dmul>
 800fc7c:	0002      	movs	r2, r0
 800fc7e:	000b      	movs	r3, r1
 800fc80:	0020      	movs	r0, r4
 800fc82:	0029      	movs	r1, r5
 800fc84:	e6e4      	b.n	800fa50 <__ieee754_asin+0x3c>
 800fc86:	9a00      	ldr	r2, [sp, #0]
 800fc88:	9b01      	ldr	r3, [sp, #4]
 800fc8a:	0010      	movs	r0, r2
 800fc8c:	9e00      	ldr	r6, [sp, #0]
 800fc8e:	9f01      	ldr	r7, [sp, #4]
 800fc90:	0019      	movs	r1, r3
 800fc92:	f7f1 fb05 	bl	80012a0 <__aeabi_dadd>
 800fc96:	9a04      	ldr	r2, [sp, #16]
 800fc98:	9b05      	ldr	r3, [sp, #20]
 800fc9a:	9008      	str	r0, [sp, #32]
 800fc9c:	9109      	str	r1, [sp, #36]	; 0x24
 800fc9e:	9802      	ldr	r0, [sp, #8]
 800fca0:	9903      	ldr	r1, [sp, #12]
 800fca2:	f7f1 fe67 	bl	8001974 <__aeabi_ddiv>
 800fca6:	0002      	movs	r2, r0
 800fca8:	000b      	movs	r3, r1
 800fcaa:	9808      	ldr	r0, [sp, #32]
 800fcac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fcae:	f7f2 fa67 	bl	8002180 <__aeabi_dmul>
 800fcb2:	2600      	movs	r6, #0
 800fcb4:	9002      	str	r0, [sp, #8]
 800fcb6:	9103      	str	r1, [sp, #12]
 800fcb8:	0032      	movs	r2, r6
 800fcba:	003b      	movs	r3, r7
 800fcbc:	0030      	movs	r0, r6
 800fcbe:	0039      	movs	r1, r7
 800fcc0:	f7f2 fa5e 	bl	8002180 <__aeabi_dmul>
 800fcc4:	0002      	movs	r2, r0
 800fcc6:	000b      	movs	r3, r1
 800fcc8:	0020      	movs	r0, r4
 800fcca:	0029      	movs	r1, r5
 800fccc:	f7f2 fcc4 	bl	8002658 <__aeabi_dsub>
 800fcd0:	0032      	movs	r2, r6
 800fcd2:	0004      	movs	r4, r0
 800fcd4:	000d      	movs	r5, r1
 800fcd6:	9800      	ldr	r0, [sp, #0]
 800fcd8:	9901      	ldr	r1, [sp, #4]
 800fcda:	003b      	movs	r3, r7
 800fcdc:	f7f1 fae0 	bl	80012a0 <__aeabi_dadd>
 800fce0:	0002      	movs	r2, r0
 800fce2:	000b      	movs	r3, r1
 800fce4:	0020      	movs	r0, r4
 800fce6:	0029      	movs	r1, r5
 800fce8:	f7f1 fe44 	bl	8001974 <__aeabi_ddiv>
 800fcec:	0002      	movs	r2, r0
 800fcee:	000b      	movs	r3, r1
 800fcf0:	f7f1 fad6 	bl	80012a0 <__aeabi_dadd>
 800fcf4:	0002      	movs	r2, r0
 800fcf6:	000b      	movs	r3, r1
 800fcf8:	4815      	ldr	r0, [pc, #84]	; (800fd50 <__ieee754_asin+0x33c>)
 800fcfa:	4916      	ldr	r1, [pc, #88]	; (800fd54 <__ieee754_asin+0x340>)
 800fcfc:	f7f2 fcac 	bl	8002658 <__aeabi_dsub>
 800fd00:	0002      	movs	r2, r0
 800fd02:	000b      	movs	r3, r1
 800fd04:	9802      	ldr	r0, [sp, #8]
 800fd06:	9903      	ldr	r1, [sp, #12]
 800fd08:	f7f2 fca6 	bl	8002658 <__aeabi_dsub>
 800fd0c:	0032      	movs	r2, r6
 800fd0e:	0004      	movs	r4, r0
 800fd10:	000d      	movs	r5, r1
 800fd12:	003b      	movs	r3, r7
 800fd14:	0030      	movs	r0, r6
 800fd16:	0039      	movs	r1, r7
 800fd18:	f7f1 fac2 	bl	80012a0 <__aeabi_dadd>
 800fd1c:	0002      	movs	r2, r0
 800fd1e:	000b      	movs	r3, r1
 800fd20:	4809      	ldr	r0, [pc, #36]	; (800fd48 <__ieee754_asin+0x334>)
 800fd22:	4927      	ldr	r1, [pc, #156]	; (800fdc0 <__ieee754_asin+0x3ac>)
 800fd24:	f7f2 fc98 	bl	8002658 <__aeabi_dsub>
 800fd28:	0002      	movs	r2, r0
 800fd2a:	000b      	movs	r3, r1
 800fd2c:	0020      	movs	r0, r4
 800fd2e:	0029      	movs	r1, r5
 800fd30:	f7f2 fc92 	bl	8002658 <__aeabi_dsub>
 800fd34:	0002      	movs	r2, r0
 800fd36:	000b      	movs	r3, r1
 800fd38:	4803      	ldr	r0, [pc, #12]	; (800fd48 <__ieee754_asin+0x334>)
 800fd3a:	4921      	ldr	r1, [pc, #132]	; (800fdc0 <__ieee754_asin+0x3ac>)
 800fd3c:	e731      	b.n	800fba2 <__ieee754_asin+0x18e>
 800fd3e:	46c0      	nop			; (mov r8, r8)
 800fd40:	3fefffff 	.word	0x3fefffff
 800fd44:	c0100000 	.word	0xc0100000
 800fd48:	54442d18 	.word	0x54442d18
 800fd4c:	3ff921fb 	.word	0x3ff921fb
 800fd50:	33145c07 	.word	0x33145c07
 800fd54:	3c91a626 	.word	0x3c91a626
 800fd58:	3fdfffff 	.word	0x3fdfffff
 800fd5c:	8800759c 	.word	0x8800759c
 800fd60:	7e37e43c 	.word	0x7e37e43c
 800fd64:	3ff00000 	.word	0x3ff00000
 800fd68:	3fe00000 	.word	0x3fe00000
 800fd6c:	0dfdf709 	.word	0x0dfdf709
 800fd70:	3f023de1 	.word	0x3f023de1
 800fd74:	7501b288 	.word	0x7501b288
 800fd78:	3f49efe0 	.word	0x3f49efe0
 800fd7c:	b5688f3b 	.word	0xb5688f3b
 800fd80:	3fa48228 	.word	0x3fa48228
 800fd84:	0e884455 	.word	0x0e884455
 800fd88:	3fc9c155 	.word	0x3fc9c155
 800fd8c:	03eb6f7d 	.word	0x03eb6f7d
 800fd90:	3fd4d612 	.word	0x3fd4d612
 800fd94:	55555555 	.word	0x55555555
 800fd98:	3fc55555 	.word	0x3fc55555
 800fd9c:	b12e9282 	.word	0xb12e9282
 800fda0:	3fb3b8c5 	.word	0x3fb3b8c5
 800fda4:	1b8d0159 	.word	0x1b8d0159
 800fda8:	3fe6066c 	.word	0x3fe6066c
 800fdac:	9c598ac8 	.word	0x9c598ac8
 800fdb0:	40002ae5 	.word	0x40002ae5
 800fdb4:	1c8a2d4b 	.word	0x1c8a2d4b
 800fdb8:	40033a27 	.word	0x40033a27
 800fdbc:	3fef3332 	.word	0x3fef3332
 800fdc0:	3fe921fb 	.word	0x3fe921fb

0800fdc4 <__ieee754_atan2>:
 800fdc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdc6:	0016      	movs	r6, r2
 800fdc8:	001d      	movs	r5, r3
 800fdca:	005a      	lsls	r2, r3, #1
 800fdcc:	9300      	str	r3, [sp, #0]
 800fdce:	4273      	negs	r3, r6
 800fdd0:	4333      	orrs	r3, r6
 800fdd2:	4f46      	ldr	r7, [pc, #280]	; (800feec <__ieee754_atan2+0x128>)
 800fdd4:	0852      	lsrs	r2, r2, #1
 800fdd6:	0fdb      	lsrs	r3, r3, #31
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	42bb      	cmp	r3, r7
 800fddc:	d809      	bhi.n	800fdf2 <__ieee754_atan2+0x2e>
 800fdde:	4244      	negs	r4, r0
 800fde0:	004b      	lsls	r3, r1, #1
 800fde2:	4304      	orrs	r4, r0
 800fde4:	085b      	lsrs	r3, r3, #1
 800fde6:	0fe4      	lsrs	r4, r4, #31
 800fde8:	9100      	str	r1, [sp, #0]
 800fdea:	9001      	str	r0, [sp, #4]
 800fdec:	431c      	orrs	r4, r3
 800fdee:	42bc      	cmp	r4, r7
 800fdf0:	d905      	bls.n	800fdfe <__ieee754_atan2+0x3a>
 800fdf2:	0032      	movs	r2, r6
 800fdf4:	002b      	movs	r3, r5
 800fdf6:	f7f1 fa53 	bl	80012a0 <__aeabi_dadd>
 800fdfa:	b003      	add	sp, #12
 800fdfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdfe:	4c3c      	ldr	r4, [pc, #240]	; (800fef0 <__ieee754_atan2+0x12c>)
 800fe00:	192c      	adds	r4, r5, r4
 800fe02:	4334      	orrs	r4, r6
 800fe04:	d102      	bne.n	800fe0c <__ieee754_atan2+0x48>
 800fe06:	f7ff fadf 	bl	800f3c8 <atan>
 800fe0a:	e7f6      	b.n	800fdfa <__ieee754_atan2+0x36>
 800fe0c:	17ac      	asrs	r4, r5, #30
 800fe0e:	46a4      	mov	ip, r4
 800fe10:	2402      	movs	r4, #2
 800fe12:	4667      	mov	r7, ip
 800fe14:	403c      	ands	r4, r7
 800fe16:	9f00      	ldr	r7, [sp, #0]
 800fe18:	0fff      	lsrs	r7, r7, #31
 800fe1a:	433c      	orrs	r4, r7
 800fe1c:	9f01      	ldr	r7, [sp, #4]
 800fe1e:	431f      	orrs	r7, r3
 800fe20:	d106      	bne.n	800fe30 <__ieee754_atan2+0x6c>
 800fe22:	2c02      	cmp	r4, #2
 800fe24:	d056      	beq.n	800fed4 <__ieee754_atan2+0x110>
 800fe26:	2c03      	cmp	r4, #3
 800fe28:	d1e7      	bne.n	800fdfa <__ieee754_atan2+0x36>
 800fe2a:	4832      	ldr	r0, [pc, #200]	; (800fef4 <__ieee754_atan2+0x130>)
 800fe2c:	4932      	ldr	r1, [pc, #200]	; (800fef8 <__ieee754_atan2+0x134>)
 800fe2e:	e7e4      	b.n	800fdfa <__ieee754_atan2+0x36>
 800fe30:	0017      	movs	r7, r2
 800fe32:	4337      	orrs	r7, r6
 800fe34:	d105      	bne.n	800fe42 <__ieee754_atan2+0x7e>
 800fe36:	9b00      	ldr	r3, [sp, #0]
 800fe38:	482e      	ldr	r0, [pc, #184]	; (800fef4 <__ieee754_atan2+0x130>)
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	da53      	bge.n	800fee6 <__ieee754_atan2+0x122>
 800fe3e:	492f      	ldr	r1, [pc, #188]	; (800fefc <__ieee754_atan2+0x138>)
 800fe40:	e7db      	b.n	800fdfa <__ieee754_atan2+0x36>
 800fe42:	4f2a      	ldr	r7, [pc, #168]	; (800feec <__ieee754_atan2+0x128>)
 800fe44:	42ba      	cmp	r2, r7
 800fe46:	d10f      	bne.n	800fe68 <__ieee754_atan2+0xa4>
 800fe48:	3c01      	subs	r4, #1
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d107      	bne.n	800fe5e <__ieee754_atan2+0x9a>
 800fe4e:	2c02      	cmp	r4, #2
 800fe50:	d843      	bhi.n	800feda <__ieee754_atan2+0x116>
 800fe52:	4b2b      	ldr	r3, [pc, #172]	; (800ff00 <__ieee754_atan2+0x13c>)
 800fe54:	00e4      	lsls	r4, r4, #3
 800fe56:	191c      	adds	r4, r3, r4
 800fe58:	6820      	ldr	r0, [r4, #0]
 800fe5a:	6861      	ldr	r1, [r4, #4]
 800fe5c:	e7cd      	b.n	800fdfa <__ieee754_atan2+0x36>
 800fe5e:	2c02      	cmp	r4, #2
 800fe60:	d83e      	bhi.n	800fee0 <__ieee754_atan2+0x11c>
 800fe62:	4b28      	ldr	r3, [pc, #160]	; (800ff04 <__ieee754_atan2+0x140>)
 800fe64:	00e4      	lsls	r4, r4, #3
 800fe66:	e7f6      	b.n	800fe56 <__ieee754_atan2+0x92>
 800fe68:	4f20      	ldr	r7, [pc, #128]	; (800feec <__ieee754_atan2+0x128>)
 800fe6a:	42bb      	cmp	r3, r7
 800fe6c:	d0e3      	beq.n	800fe36 <__ieee754_atan2+0x72>
 800fe6e:	1a9b      	subs	r3, r3, r2
 800fe70:	151b      	asrs	r3, r3, #20
 800fe72:	2b3c      	cmp	r3, #60	; 0x3c
 800fe74:	dc18      	bgt.n	800fea8 <__ieee754_atan2+0xe4>
 800fe76:	2d00      	cmp	r5, #0
 800fe78:	da01      	bge.n	800fe7e <__ieee754_atan2+0xba>
 800fe7a:	333c      	adds	r3, #60	; 0x3c
 800fe7c:	db17      	blt.n	800feae <__ieee754_atan2+0xea>
 800fe7e:	0032      	movs	r2, r6
 800fe80:	002b      	movs	r3, r5
 800fe82:	f7f1 fd77 	bl	8001974 <__aeabi_ddiv>
 800fe86:	f7ff fc61 	bl	800f74c <fabs>
 800fe8a:	f7ff fa9d 	bl	800f3c8 <atan>
 800fe8e:	2c01      	cmp	r4, #1
 800fe90:	d010      	beq.n	800feb4 <__ieee754_atan2+0xf0>
 800fe92:	2c02      	cmp	r4, #2
 800fe94:	d013      	beq.n	800febe <__ieee754_atan2+0xfa>
 800fe96:	2c00      	cmp	r4, #0
 800fe98:	d0af      	beq.n	800fdfa <__ieee754_atan2+0x36>
 800fe9a:	4a1b      	ldr	r2, [pc, #108]	; (800ff08 <__ieee754_atan2+0x144>)
 800fe9c:	4b1b      	ldr	r3, [pc, #108]	; (800ff0c <__ieee754_atan2+0x148>)
 800fe9e:	f7f2 fbdb 	bl	8002658 <__aeabi_dsub>
 800fea2:	4a14      	ldr	r2, [pc, #80]	; (800fef4 <__ieee754_atan2+0x130>)
 800fea4:	4b1a      	ldr	r3, [pc, #104]	; (800ff10 <__ieee754_atan2+0x14c>)
 800fea6:	e012      	b.n	800fece <__ieee754_atan2+0x10a>
 800fea8:	4812      	ldr	r0, [pc, #72]	; (800fef4 <__ieee754_atan2+0x130>)
 800feaa:	491a      	ldr	r1, [pc, #104]	; (800ff14 <__ieee754_atan2+0x150>)
 800feac:	e7ef      	b.n	800fe8e <__ieee754_atan2+0xca>
 800feae:	2000      	movs	r0, #0
 800feb0:	2100      	movs	r1, #0
 800feb2:	e7ec      	b.n	800fe8e <__ieee754_atan2+0xca>
 800feb4:	2480      	movs	r4, #128	; 0x80
 800feb6:	0624      	lsls	r4, r4, #24
 800feb8:	190b      	adds	r3, r1, r4
 800feba:	0019      	movs	r1, r3
 800febc:	e79d      	b.n	800fdfa <__ieee754_atan2+0x36>
 800febe:	4a12      	ldr	r2, [pc, #72]	; (800ff08 <__ieee754_atan2+0x144>)
 800fec0:	4b12      	ldr	r3, [pc, #72]	; (800ff0c <__ieee754_atan2+0x148>)
 800fec2:	f7f2 fbc9 	bl	8002658 <__aeabi_dsub>
 800fec6:	0002      	movs	r2, r0
 800fec8:	000b      	movs	r3, r1
 800feca:	480a      	ldr	r0, [pc, #40]	; (800fef4 <__ieee754_atan2+0x130>)
 800fecc:	4910      	ldr	r1, [pc, #64]	; (800ff10 <__ieee754_atan2+0x14c>)
 800fece:	f7f2 fbc3 	bl	8002658 <__aeabi_dsub>
 800fed2:	e792      	b.n	800fdfa <__ieee754_atan2+0x36>
 800fed4:	4807      	ldr	r0, [pc, #28]	; (800fef4 <__ieee754_atan2+0x130>)
 800fed6:	490e      	ldr	r1, [pc, #56]	; (800ff10 <__ieee754_atan2+0x14c>)
 800fed8:	e78f      	b.n	800fdfa <__ieee754_atan2+0x36>
 800feda:	4806      	ldr	r0, [pc, #24]	; (800fef4 <__ieee754_atan2+0x130>)
 800fedc:	490e      	ldr	r1, [pc, #56]	; (800ff18 <__ieee754_atan2+0x154>)
 800fede:	e78c      	b.n	800fdfa <__ieee754_atan2+0x36>
 800fee0:	2000      	movs	r0, #0
 800fee2:	2100      	movs	r1, #0
 800fee4:	e789      	b.n	800fdfa <__ieee754_atan2+0x36>
 800fee6:	490b      	ldr	r1, [pc, #44]	; (800ff14 <__ieee754_atan2+0x150>)
 800fee8:	e787      	b.n	800fdfa <__ieee754_atan2+0x36>
 800feea:	46c0      	nop			; (mov r8, r8)
 800feec:	7ff00000 	.word	0x7ff00000
 800fef0:	c0100000 	.word	0xc0100000
 800fef4:	54442d18 	.word	0x54442d18
 800fef8:	c00921fb 	.word	0xc00921fb
 800fefc:	bff921fb 	.word	0xbff921fb
 800ff00:	08012470 	.word	0x08012470
 800ff04:	08012488 	.word	0x08012488
 800ff08:	33145c07 	.word	0x33145c07
 800ff0c:	3ca1a626 	.word	0x3ca1a626
 800ff10:	400921fb 	.word	0x400921fb
 800ff14:	3ff921fb 	.word	0x3ff921fb
 800ff18:	3fe921fb 	.word	0x3fe921fb

0800ff1c <__ieee754_pow>:
 800ff1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff1e:	b095      	sub	sp, #84	; 0x54
 800ff20:	9202      	str	r2, [sp, #8]
 800ff22:	9303      	str	r3, [sp, #12]
 800ff24:	9b03      	ldr	r3, [sp, #12]
 800ff26:	9a03      	ldr	r2, [sp, #12]
 800ff28:	9304      	str	r3, [sp, #16]
 800ff2a:	9b02      	ldr	r3, [sp, #8]
 800ff2c:	0055      	lsls	r5, r2, #1
 800ff2e:	001a      	movs	r2, r3
 800ff30:	086d      	lsrs	r5, r5, #1
 800ff32:	0007      	movs	r7, r0
 800ff34:	000e      	movs	r6, r1
 800ff36:	432a      	orrs	r2, r5
 800ff38:	d101      	bne.n	800ff3e <__ieee754_pow+0x22>
 800ff3a:	f000 fcb6 	bl	80108aa <__ieee754_pow+0x98e>
 800ff3e:	4a82      	ldr	r2, [pc, #520]	; (8010148 <__ieee754_pow+0x22c>)
 800ff40:	004c      	lsls	r4, r1, #1
 800ff42:	9108      	str	r1, [sp, #32]
 800ff44:	9000      	str	r0, [sp, #0]
 800ff46:	0864      	lsrs	r4, r4, #1
 800ff48:	4294      	cmp	r4, r2
 800ff4a:	dc0d      	bgt.n	800ff68 <__ieee754_pow+0x4c>
 800ff4c:	d104      	bne.n	800ff58 <__ieee754_pow+0x3c>
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	d110      	bne.n	800ff74 <__ieee754_pow+0x58>
 800ff52:	42a5      	cmp	r5, r4
 800ff54:	dd03      	ble.n	800ff5e <__ieee754_pow+0x42>
 800ff56:	e00d      	b.n	800ff74 <__ieee754_pow+0x58>
 800ff58:	4a7b      	ldr	r2, [pc, #492]	; (8010148 <__ieee754_pow+0x22c>)
 800ff5a:	4295      	cmp	r5, r2
 800ff5c:	dc04      	bgt.n	800ff68 <__ieee754_pow+0x4c>
 800ff5e:	4a7a      	ldr	r2, [pc, #488]	; (8010148 <__ieee754_pow+0x22c>)
 800ff60:	4295      	cmp	r5, r2
 800ff62:	d10d      	bne.n	800ff80 <__ieee754_pow+0x64>
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d00b      	beq.n	800ff80 <__ieee754_pow+0x64>
 800ff68:	4b78      	ldr	r3, [pc, #480]	; (801014c <__ieee754_pow+0x230>)
 800ff6a:	18e4      	adds	r4, r4, r3
 800ff6c:	4327      	orrs	r7, r4
 800ff6e:	d101      	bne.n	800ff74 <__ieee754_pow+0x58>
 800ff70:	f000 fc9b 	bl	80108aa <__ieee754_pow+0x98e>
 800ff74:	4876      	ldr	r0, [pc, #472]	; (8010150 <__ieee754_pow+0x234>)
 800ff76:	f001 fce5 	bl	8011944 <nan>
 800ff7a:	9000      	str	r0, [sp, #0]
 800ff7c:	9101      	str	r1, [sp, #4]
 800ff7e:	e092      	b.n	80100a6 <__ieee754_pow+0x18a>
 800ff80:	2200      	movs	r2, #0
 800ff82:	9206      	str	r2, [sp, #24]
 800ff84:	2e00      	cmp	r6, #0
 800ff86:	da69      	bge.n	801005c <__ieee754_pow+0x140>
 800ff88:	4a72      	ldr	r2, [pc, #456]	; (8010154 <__ieee754_pow+0x238>)
 800ff8a:	4295      	cmp	r5, r2
 800ff8c:	dc64      	bgt.n	8010058 <__ieee754_pow+0x13c>
 800ff8e:	4a72      	ldr	r2, [pc, #456]	; (8010158 <__ieee754_pow+0x23c>)
 800ff90:	4295      	cmp	r5, r2
 800ff92:	dd11      	ble.n	800ffb8 <__ieee754_pow+0x9c>
 800ff94:	4971      	ldr	r1, [pc, #452]	; (801015c <__ieee754_pow+0x240>)
 800ff96:	152a      	asrs	r2, r5, #20
 800ff98:	1852      	adds	r2, r2, r1
 800ff9a:	2a14      	cmp	r2, #20
 800ff9c:	dd3c      	ble.n	8010018 <__ieee754_pow+0xfc>
 800ff9e:	2134      	movs	r1, #52	; 0x34
 800ffa0:	1a8a      	subs	r2, r1, r2
 800ffa2:	9902      	ldr	r1, [sp, #8]
 800ffa4:	40d1      	lsrs	r1, r2
 800ffa6:	0008      	movs	r0, r1
 800ffa8:	4090      	lsls	r0, r2
 800ffaa:	4298      	cmp	r0, r3
 800ffac:	d104      	bne.n	800ffb8 <__ieee754_pow+0x9c>
 800ffae:	2201      	movs	r2, #1
 800ffb0:	4011      	ands	r1, r2
 800ffb2:	1892      	adds	r2, r2, r2
 800ffb4:	1a52      	subs	r2, r2, r1
 800ffb6:	9206      	str	r2, [sp, #24]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d03c      	beq.n	8010036 <__ieee754_pow+0x11a>
 800ffbc:	0038      	movs	r0, r7
 800ffbe:	0031      	movs	r1, r6
 800ffc0:	f7ff fbc4 	bl	800f74c <fabs>
 800ffc4:	9000      	str	r0, [sp, #0]
 800ffc6:	9101      	str	r1, [sp, #4]
 800ffc8:	2f00      	cmp	r7, #0
 800ffca:	d000      	beq.n	800ffce <__ieee754_pow+0xb2>
 800ffcc:	e094      	b.n	80100f8 <__ieee754_pow+0x1dc>
 800ffce:	2c00      	cmp	r4, #0
 800ffd0:	d005      	beq.n	800ffde <__ieee754_pow+0xc2>
 800ffd2:	4a63      	ldr	r2, [pc, #396]	; (8010160 <__ieee754_pow+0x244>)
 800ffd4:	00b3      	lsls	r3, r6, #2
 800ffd6:	089b      	lsrs	r3, r3, #2
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d000      	beq.n	800ffde <__ieee754_pow+0xc2>
 800ffdc:	e08c      	b.n	80100f8 <__ieee754_pow+0x1dc>
 800ffde:	9b04      	ldr	r3, [sp, #16]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	da07      	bge.n	800fff4 <__ieee754_pow+0xd8>
 800ffe4:	9a00      	ldr	r2, [sp, #0]
 800ffe6:	9b01      	ldr	r3, [sp, #4]
 800ffe8:	2000      	movs	r0, #0
 800ffea:	495d      	ldr	r1, [pc, #372]	; (8010160 <__ieee754_pow+0x244>)
 800ffec:	f7f1 fcc2 	bl	8001974 <__aeabi_ddiv>
 800fff0:	9000      	str	r0, [sp, #0]
 800fff2:	9101      	str	r1, [sp, #4]
 800fff4:	9b08      	ldr	r3, [sp, #32]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	da55      	bge.n	80100a6 <__ieee754_pow+0x18a>
 800fffa:	4b54      	ldr	r3, [pc, #336]	; (801014c <__ieee754_pow+0x230>)
 800fffc:	18e4      	adds	r4, r4, r3
 800fffe:	9b06      	ldr	r3, [sp, #24]
 8010000:	431c      	orrs	r4, r3
 8010002:	d000      	beq.n	8010006 <__ieee754_pow+0xea>
 8010004:	e06c      	b.n	80100e0 <__ieee754_pow+0x1c4>
 8010006:	9a00      	ldr	r2, [sp, #0]
 8010008:	9b01      	ldr	r3, [sp, #4]
 801000a:	0010      	movs	r0, r2
 801000c:	0019      	movs	r1, r3
 801000e:	f7f2 fb23 	bl	8002658 <__aeabi_dsub>
 8010012:	0002      	movs	r2, r0
 8010014:	000b      	movs	r3, r1
 8010016:	e01c      	b.n	8010052 <__ieee754_pow+0x136>
 8010018:	2b00      	cmp	r3, #0
 801001a:	d1cf      	bne.n	800ffbc <__ieee754_pow+0xa0>
 801001c:	3314      	adds	r3, #20
 801001e:	1a9a      	subs	r2, r3, r2
 8010020:	002b      	movs	r3, r5
 8010022:	4113      	asrs	r3, r2
 8010024:	0019      	movs	r1, r3
 8010026:	4091      	lsls	r1, r2
 8010028:	42a9      	cmp	r1, r5
 801002a:	d104      	bne.n	8010036 <__ieee754_pow+0x11a>
 801002c:	2201      	movs	r2, #1
 801002e:	4013      	ands	r3, r2
 8010030:	1892      	adds	r2, r2, r2
 8010032:	1ad3      	subs	r3, r2, r3
 8010034:	9306      	str	r3, [sp, #24]
 8010036:	4b4a      	ldr	r3, [pc, #296]	; (8010160 <__ieee754_pow+0x244>)
 8010038:	429d      	cmp	r5, r3
 801003a:	d138      	bne.n	80100ae <__ieee754_pow+0x192>
 801003c:	0038      	movs	r0, r7
 801003e:	0031      	movs	r1, r6
 8010040:	9b04      	ldr	r3, [sp, #16]
 8010042:	9000      	str	r0, [sp, #0]
 8010044:	9101      	str	r1, [sp, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	da2d      	bge.n	80100a6 <__ieee754_pow+0x18a>
 801004a:	003a      	movs	r2, r7
 801004c:	0033      	movs	r3, r6
 801004e:	2000      	movs	r0, #0
 8010050:	4943      	ldr	r1, [pc, #268]	; (8010160 <__ieee754_pow+0x244>)
 8010052:	f7f1 fc8f 	bl	8001974 <__aeabi_ddiv>
 8010056:	e790      	b.n	800ff7a <__ieee754_pow+0x5e>
 8010058:	2202      	movs	r2, #2
 801005a:	9206      	str	r2, [sp, #24]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d1ad      	bne.n	800ffbc <__ieee754_pow+0xa0>
 8010060:	4b39      	ldr	r3, [pc, #228]	; (8010148 <__ieee754_pow+0x22c>)
 8010062:	429d      	cmp	r5, r3
 8010064:	d1e7      	bne.n	8010036 <__ieee754_pow+0x11a>
 8010066:	4b39      	ldr	r3, [pc, #228]	; (801014c <__ieee754_pow+0x230>)
 8010068:	18e3      	adds	r3, r4, r3
 801006a:	431f      	orrs	r7, r3
 801006c:	d101      	bne.n	8010072 <__ieee754_pow+0x156>
 801006e:	f000 fc1c 	bl	80108aa <__ieee754_pow+0x98e>
 8010072:	4b39      	ldr	r3, [pc, #228]	; (8010158 <__ieee754_pow+0x23c>)
 8010074:	429c      	cmp	r4, r3
 8010076:	dd0b      	ble.n	8010090 <__ieee754_pow+0x174>
 8010078:	9b02      	ldr	r3, [sp, #8]
 801007a:	9c03      	ldr	r4, [sp, #12]
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	9401      	str	r4, [sp, #4]
 8010080:	9b04      	ldr	r3, [sp, #16]
 8010082:	2b00      	cmp	r3, #0
 8010084:	da0f      	bge.n	80100a6 <__ieee754_pow+0x18a>
 8010086:	2300      	movs	r3, #0
 8010088:	2400      	movs	r4, #0
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	9401      	str	r4, [sp, #4]
 801008e:	e00a      	b.n	80100a6 <__ieee754_pow+0x18a>
 8010090:	9b04      	ldr	r3, [sp, #16]
 8010092:	2b00      	cmp	r3, #0
 8010094:	daf7      	bge.n	8010086 <__ieee754_pow+0x16a>
 8010096:	2280      	movs	r2, #128	; 0x80
 8010098:	0612      	lsls	r2, r2, #24
 801009a:	4694      	mov	ip, r2
 801009c:	9b02      	ldr	r3, [sp, #8]
 801009e:	9300      	str	r3, [sp, #0]
 80100a0:	9b03      	ldr	r3, [sp, #12]
 80100a2:	4463      	add	r3, ip
 80100a4:	9301      	str	r3, [sp, #4]
 80100a6:	9800      	ldr	r0, [sp, #0]
 80100a8:	9901      	ldr	r1, [sp, #4]
 80100aa:	b015      	add	sp, #84	; 0x54
 80100ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100ae:	2380      	movs	r3, #128	; 0x80
 80100b0:	9a04      	ldr	r2, [sp, #16]
 80100b2:	05db      	lsls	r3, r3, #23
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d106      	bne.n	80100c6 <__ieee754_pow+0x1aa>
 80100b8:	003a      	movs	r2, r7
 80100ba:	0033      	movs	r3, r6
 80100bc:	0038      	movs	r0, r7
 80100be:	0031      	movs	r1, r6
 80100c0:	f7f2 f85e 	bl	8002180 <__aeabi_dmul>
 80100c4:	e759      	b.n	800ff7a <__ieee754_pow+0x5e>
 80100c6:	4b27      	ldr	r3, [pc, #156]	; (8010164 <__ieee754_pow+0x248>)
 80100c8:	9a04      	ldr	r2, [sp, #16]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d000      	beq.n	80100d0 <__ieee754_pow+0x1b4>
 80100ce:	e775      	b.n	800ffbc <__ieee754_pow+0xa0>
 80100d0:	2e00      	cmp	r6, #0
 80100d2:	da00      	bge.n	80100d6 <__ieee754_pow+0x1ba>
 80100d4:	e772      	b.n	800ffbc <__ieee754_pow+0xa0>
 80100d6:	0038      	movs	r0, r7
 80100d8:	0031      	movs	r1, r6
 80100da:	f000 fe0b 	bl	8010cf4 <__ieee754_sqrt>
 80100de:	e74c      	b.n	800ff7a <__ieee754_pow+0x5e>
 80100e0:	9b06      	ldr	r3, [sp, #24]
 80100e2:	2b01      	cmp	r3, #1
 80100e4:	d1df      	bne.n	80100a6 <__ieee754_pow+0x18a>
 80100e6:	9800      	ldr	r0, [sp, #0]
 80100e8:	2180      	movs	r1, #128	; 0x80
 80100ea:	0002      	movs	r2, r0
 80100ec:	9801      	ldr	r0, [sp, #4]
 80100ee:	0609      	lsls	r1, r1, #24
 80100f0:	1843      	adds	r3, r0, r1
 80100f2:	9200      	str	r2, [sp, #0]
 80100f4:	9301      	str	r3, [sp, #4]
 80100f6:	e7d6      	b.n	80100a6 <__ieee754_pow+0x18a>
 80100f8:	0ff3      	lsrs	r3, r6, #31
 80100fa:	3b01      	subs	r3, #1
 80100fc:	9310      	str	r3, [sp, #64]	; 0x40
 80100fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010100:	9b06      	ldr	r3, [sp, #24]
 8010102:	4313      	orrs	r3, r2
 8010104:	d104      	bne.n	8010110 <__ieee754_pow+0x1f4>
 8010106:	003a      	movs	r2, r7
 8010108:	0033      	movs	r3, r6
 801010a:	0038      	movs	r0, r7
 801010c:	0031      	movs	r1, r6
 801010e:	e77e      	b.n	801000e <__ieee754_pow+0xf2>
 8010110:	4b15      	ldr	r3, [pc, #84]	; (8010168 <__ieee754_pow+0x24c>)
 8010112:	429d      	cmp	r5, r3
 8010114:	dc00      	bgt.n	8010118 <__ieee754_pow+0x1fc>
 8010116:	e0f5      	b.n	8010304 <__ieee754_pow+0x3e8>
 8010118:	4b14      	ldr	r3, [pc, #80]	; (801016c <__ieee754_pow+0x250>)
 801011a:	429d      	cmp	r5, r3
 801011c:	dd0a      	ble.n	8010134 <__ieee754_pow+0x218>
 801011e:	4b0e      	ldr	r3, [pc, #56]	; (8010158 <__ieee754_pow+0x23c>)
 8010120:	429c      	cmp	r4, r3
 8010122:	dc0d      	bgt.n	8010140 <__ieee754_pow+0x224>
 8010124:	9b04      	ldr	r3, [sp, #16]
 8010126:	2b00      	cmp	r3, #0
 8010128:	daad      	bge.n	8010086 <__ieee754_pow+0x16a>
 801012a:	4a11      	ldr	r2, [pc, #68]	; (8010170 <__ieee754_pow+0x254>)
 801012c:	4b11      	ldr	r3, [pc, #68]	; (8010174 <__ieee754_pow+0x258>)
 801012e:	0010      	movs	r0, r2
 8010130:	0019      	movs	r1, r3
 8010132:	e7c5      	b.n	80100c0 <__ieee754_pow+0x1a4>
 8010134:	4b10      	ldr	r3, [pc, #64]	; (8010178 <__ieee754_pow+0x25c>)
 8010136:	429c      	cmp	r4, r3
 8010138:	ddf4      	ble.n	8010124 <__ieee754_pow+0x208>
 801013a:	4b09      	ldr	r3, [pc, #36]	; (8010160 <__ieee754_pow+0x244>)
 801013c:	429c      	cmp	r4, r3
 801013e:	dd1d      	ble.n	801017c <__ieee754_pow+0x260>
 8010140:	9b04      	ldr	r3, [sp, #16]
 8010142:	2b00      	cmp	r3, #0
 8010144:	dcf1      	bgt.n	801012a <__ieee754_pow+0x20e>
 8010146:	e79e      	b.n	8010086 <__ieee754_pow+0x16a>
 8010148:	7ff00000 	.word	0x7ff00000
 801014c:	c0100000 	.word	0xc0100000
 8010150:	080122c0 	.word	0x080122c0
 8010154:	433fffff 	.word	0x433fffff
 8010158:	3fefffff 	.word	0x3fefffff
 801015c:	fffffc01 	.word	0xfffffc01
 8010160:	3ff00000 	.word	0x3ff00000
 8010164:	3fe00000 	.word	0x3fe00000
 8010168:	41e00000 	.word	0x41e00000
 801016c:	43f00000 	.word	0x43f00000
 8010170:	8800759c 	.word	0x8800759c
 8010174:	7e37e43c 	.word	0x7e37e43c
 8010178:	3feffffe 	.word	0x3feffffe
 801017c:	2200      	movs	r2, #0
 801017e:	9800      	ldr	r0, [sp, #0]
 8010180:	9901      	ldr	r1, [sp, #4]
 8010182:	4b52      	ldr	r3, [pc, #328]	; (80102cc <__ieee754_pow+0x3b0>)
 8010184:	f7f2 fa68 	bl	8002658 <__aeabi_dsub>
 8010188:	22c0      	movs	r2, #192	; 0xc0
 801018a:	4b51      	ldr	r3, [pc, #324]	; (80102d0 <__ieee754_pow+0x3b4>)
 801018c:	05d2      	lsls	r2, r2, #23
 801018e:	0004      	movs	r4, r0
 8010190:	000d      	movs	r5, r1
 8010192:	f7f1 fff5 	bl	8002180 <__aeabi_dmul>
 8010196:	4a4f      	ldr	r2, [pc, #316]	; (80102d4 <__ieee754_pow+0x3b8>)
 8010198:	9000      	str	r0, [sp, #0]
 801019a:	9101      	str	r1, [sp, #4]
 801019c:	4b4e      	ldr	r3, [pc, #312]	; (80102d8 <__ieee754_pow+0x3bc>)
 801019e:	0020      	movs	r0, r4
 80101a0:	0029      	movs	r1, r5
 80101a2:	f7f1 ffed 	bl	8002180 <__aeabi_dmul>
 80101a6:	2200      	movs	r2, #0
 80101a8:	9004      	str	r0, [sp, #16]
 80101aa:	9105      	str	r1, [sp, #20]
 80101ac:	4b4b      	ldr	r3, [pc, #300]	; (80102dc <__ieee754_pow+0x3c0>)
 80101ae:	0020      	movs	r0, r4
 80101b0:	0029      	movs	r1, r5
 80101b2:	f7f1 ffe5 	bl	8002180 <__aeabi_dmul>
 80101b6:	0002      	movs	r2, r0
 80101b8:	000b      	movs	r3, r1
 80101ba:	4849      	ldr	r0, [pc, #292]	; (80102e0 <__ieee754_pow+0x3c4>)
 80101bc:	4949      	ldr	r1, [pc, #292]	; (80102e4 <__ieee754_pow+0x3c8>)
 80101be:	f7f2 fa4b 	bl	8002658 <__aeabi_dsub>
 80101c2:	0022      	movs	r2, r4
 80101c4:	002b      	movs	r3, r5
 80101c6:	f7f1 ffdb 	bl	8002180 <__aeabi_dmul>
 80101ca:	0002      	movs	r2, r0
 80101cc:	000b      	movs	r3, r1
 80101ce:	2000      	movs	r0, #0
 80101d0:	4945      	ldr	r1, [pc, #276]	; (80102e8 <__ieee754_pow+0x3cc>)
 80101d2:	f7f2 fa41 	bl	8002658 <__aeabi_dsub>
 80101d6:	0022      	movs	r2, r4
 80101d8:	0006      	movs	r6, r0
 80101da:	000f      	movs	r7, r1
 80101dc:	002b      	movs	r3, r5
 80101de:	0020      	movs	r0, r4
 80101e0:	0029      	movs	r1, r5
 80101e2:	f7f1 ffcd 	bl	8002180 <__aeabi_dmul>
 80101e6:	0002      	movs	r2, r0
 80101e8:	000b      	movs	r3, r1
 80101ea:	0030      	movs	r0, r6
 80101ec:	0039      	movs	r1, r7
 80101ee:	f7f1 ffc7 	bl	8002180 <__aeabi_dmul>
 80101f2:	4a3e      	ldr	r2, [pc, #248]	; (80102ec <__ieee754_pow+0x3d0>)
 80101f4:	4b36      	ldr	r3, [pc, #216]	; (80102d0 <__ieee754_pow+0x3b4>)
 80101f6:	f7f1 ffc3 	bl	8002180 <__aeabi_dmul>
 80101fa:	0002      	movs	r2, r0
 80101fc:	000b      	movs	r3, r1
 80101fe:	9804      	ldr	r0, [sp, #16]
 8010200:	9905      	ldr	r1, [sp, #20]
 8010202:	f7f2 fa29 	bl	8002658 <__aeabi_dsub>
 8010206:	0002      	movs	r2, r0
 8010208:	000b      	movs	r3, r1
 801020a:	0004      	movs	r4, r0
 801020c:	000d      	movs	r5, r1
 801020e:	9800      	ldr	r0, [sp, #0]
 8010210:	9901      	ldr	r1, [sp, #4]
 8010212:	f7f1 f845 	bl	80012a0 <__aeabi_dadd>
 8010216:	9a00      	ldr	r2, [sp, #0]
 8010218:	9b01      	ldr	r3, [sp, #4]
 801021a:	2000      	movs	r0, #0
 801021c:	000f      	movs	r7, r1
 801021e:	0006      	movs	r6, r0
 8010220:	f7f2 fa1a 	bl	8002658 <__aeabi_dsub>
 8010224:	0002      	movs	r2, r0
 8010226:	000b      	movs	r3, r1
 8010228:	0020      	movs	r0, r4
 801022a:	0029      	movs	r1, r5
 801022c:	f7f2 fa14 	bl	8002658 <__aeabi_dsub>
 8010230:	9b06      	ldr	r3, [sp, #24]
 8010232:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010234:	3b01      	subs	r3, #1
 8010236:	9004      	str	r0, [sp, #16]
 8010238:	9105      	str	r1, [sp, #20]
 801023a:	4313      	orrs	r3, r2
 801023c:	d000      	beq.n	8010240 <__ieee754_pow+0x324>
 801023e:	e1e0      	b.n	8010602 <__ieee754_pow+0x6e6>
 8010240:	2300      	movs	r3, #0
 8010242:	4c2b      	ldr	r4, [pc, #172]	; (80102f0 <__ieee754_pow+0x3d4>)
 8010244:	9300      	str	r3, [sp, #0]
 8010246:	9401      	str	r4, [sp, #4]
 8010248:	9c02      	ldr	r4, [sp, #8]
 801024a:	9d03      	ldr	r5, [sp, #12]
 801024c:	9802      	ldr	r0, [sp, #8]
 801024e:	9903      	ldr	r1, [sp, #12]
 8010250:	2400      	movs	r4, #0
 8010252:	002b      	movs	r3, r5
 8010254:	0022      	movs	r2, r4
 8010256:	f7f2 f9ff 	bl	8002658 <__aeabi_dsub>
 801025a:	0032      	movs	r2, r6
 801025c:	003b      	movs	r3, r7
 801025e:	f7f1 ff8f 	bl	8002180 <__aeabi_dmul>
 8010262:	9a02      	ldr	r2, [sp, #8]
 8010264:	9b03      	ldr	r3, [sp, #12]
 8010266:	9006      	str	r0, [sp, #24]
 8010268:	9107      	str	r1, [sp, #28]
 801026a:	9804      	ldr	r0, [sp, #16]
 801026c:	9905      	ldr	r1, [sp, #20]
 801026e:	f7f1 ff87 	bl	8002180 <__aeabi_dmul>
 8010272:	0002      	movs	r2, r0
 8010274:	000b      	movs	r3, r1
 8010276:	9806      	ldr	r0, [sp, #24]
 8010278:	9907      	ldr	r1, [sp, #28]
 801027a:	f7f1 f811 	bl	80012a0 <__aeabi_dadd>
 801027e:	0022      	movs	r2, r4
 8010280:	002b      	movs	r3, r5
 8010282:	9004      	str	r0, [sp, #16]
 8010284:	9105      	str	r1, [sp, #20]
 8010286:	0030      	movs	r0, r6
 8010288:	0039      	movs	r1, r7
 801028a:	f7f1 ff79 	bl	8002180 <__aeabi_dmul>
 801028e:	0006      	movs	r6, r0
 8010290:	000f      	movs	r7, r1
 8010292:	000b      	movs	r3, r1
 8010294:	0002      	movs	r2, r0
 8010296:	9804      	ldr	r0, [sp, #16]
 8010298:	9905      	ldr	r1, [sp, #20]
 801029a:	9606      	str	r6, [sp, #24]
 801029c:	9707      	str	r7, [sp, #28]
 801029e:	f7f0 ffff 	bl	80012a0 <__aeabi_dadd>
 80102a2:	4b14      	ldr	r3, [pc, #80]	; (80102f4 <__ieee754_pow+0x3d8>)
 80102a4:	0005      	movs	r5, r0
 80102a6:	000c      	movs	r4, r1
 80102a8:	9108      	str	r1, [sp, #32]
 80102aa:	4299      	cmp	r1, r3
 80102ac:	dc00      	bgt.n	80102b0 <__ieee754_pow+0x394>
 80102ae:	e2da      	b.n	8010866 <__ieee754_pow+0x94a>
 80102b0:	4b11      	ldr	r3, [pc, #68]	; (80102f8 <__ieee754_pow+0x3dc>)
 80102b2:	18cb      	adds	r3, r1, r3
 80102b4:	4303      	orrs	r3, r0
 80102b6:	d100      	bne.n	80102ba <__ieee754_pow+0x39e>
 80102b8:	e1dc      	b.n	8010674 <__ieee754_pow+0x758>
 80102ba:	9800      	ldr	r0, [sp, #0]
 80102bc:	9901      	ldr	r1, [sp, #4]
 80102be:	4a0f      	ldr	r2, [pc, #60]	; (80102fc <__ieee754_pow+0x3e0>)
 80102c0:	4b0f      	ldr	r3, [pc, #60]	; (8010300 <__ieee754_pow+0x3e4>)
 80102c2:	f7f1 ff5d 	bl	8002180 <__aeabi_dmul>
 80102c6:	4a0d      	ldr	r2, [pc, #52]	; (80102fc <__ieee754_pow+0x3e0>)
 80102c8:	4b0d      	ldr	r3, [pc, #52]	; (8010300 <__ieee754_pow+0x3e4>)
 80102ca:	e6f9      	b.n	80100c0 <__ieee754_pow+0x1a4>
 80102cc:	3ff00000 	.word	0x3ff00000
 80102d0:	3ff71547 	.word	0x3ff71547
 80102d4:	f85ddf44 	.word	0xf85ddf44
 80102d8:	3e54ae0b 	.word	0x3e54ae0b
 80102dc:	3fd00000 	.word	0x3fd00000
 80102e0:	55555555 	.word	0x55555555
 80102e4:	3fd55555 	.word	0x3fd55555
 80102e8:	3fe00000 	.word	0x3fe00000
 80102ec:	652b82fe 	.word	0x652b82fe
 80102f0:	bff00000 	.word	0xbff00000
 80102f4:	408fffff 	.word	0x408fffff
 80102f8:	bf700000 	.word	0xbf700000
 80102fc:	8800759c 	.word	0x8800759c
 8010300:	7e37e43c 	.word	0x7e37e43c
 8010304:	4bc0      	ldr	r3, [pc, #768]	; (8010608 <__ieee754_pow+0x6ec>)
 8010306:	2200      	movs	r2, #0
 8010308:	4233      	tst	r3, r6
 801030a:	d10a      	bne.n	8010322 <__ieee754_pow+0x406>
 801030c:	9800      	ldr	r0, [sp, #0]
 801030e:	9901      	ldr	r1, [sp, #4]
 8010310:	2200      	movs	r2, #0
 8010312:	4bbe      	ldr	r3, [pc, #760]	; (801060c <__ieee754_pow+0x6f0>)
 8010314:	f7f1 ff34 	bl	8002180 <__aeabi_dmul>
 8010318:	2235      	movs	r2, #53	; 0x35
 801031a:	9000      	str	r0, [sp, #0]
 801031c:	9101      	str	r1, [sp, #4]
 801031e:	9c01      	ldr	r4, [sp, #4]
 8010320:	4252      	negs	r2, r2
 8010322:	49bb      	ldr	r1, [pc, #748]	; (8010610 <__ieee754_pow+0x6f4>)
 8010324:	1523      	asrs	r3, r4, #20
 8010326:	185b      	adds	r3, r3, r1
 8010328:	189b      	adds	r3, r3, r2
 801032a:	0324      	lsls	r4, r4, #12
 801032c:	4db9      	ldr	r5, [pc, #740]	; (8010614 <__ieee754_pow+0x6f8>)
 801032e:	930d      	str	r3, [sp, #52]	; 0x34
 8010330:	4bb9      	ldr	r3, [pc, #740]	; (8010618 <__ieee754_pow+0x6fc>)
 8010332:	0b22      	lsrs	r2, r4, #12
 8010334:	4315      	orrs	r5, r2
 8010336:	2400      	movs	r4, #0
 8010338:	429a      	cmp	r2, r3
 801033a:	dd09      	ble.n	8010350 <__ieee754_pow+0x434>
 801033c:	4bb7      	ldr	r3, [pc, #732]	; (801061c <__ieee754_pow+0x700>)
 801033e:	3401      	adds	r4, #1
 8010340:	429a      	cmp	r2, r3
 8010342:	dd05      	ble.n	8010350 <__ieee754_pow+0x434>
 8010344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010346:	191b      	adds	r3, r3, r4
 8010348:	2400      	movs	r4, #0
 801034a:	930d      	str	r3, [sp, #52]	; 0x34
 801034c:	4bb4      	ldr	r3, [pc, #720]	; (8010620 <__ieee754_pow+0x704>)
 801034e:	18ed      	adds	r5, r5, r3
 8010350:	9800      	ldr	r0, [sp, #0]
 8010352:	9901      	ldr	r1, [sp, #4]
 8010354:	0029      	movs	r1, r5
 8010356:	00e3      	lsls	r3, r4, #3
 8010358:	9311      	str	r3, [sp, #68]	; 0x44
 801035a:	4bb2      	ldr	r3, [pc, #712]	; (8010624 <__ieee754_pow+0x708>)
 801035c:	00e2      	lsls	r2, r4, #3
 801035e:	189b      	adds	r3, r3, r2
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	900e      	str	r0, [sp, #56]	; 0x38
 8010366:	910f      	str	r1, [sp, #60]	; 0x3c
 8010368:	920a      	str	r2, [sp, #40]	; 0x28
 801036a:	930b      	str	r3, [sp, #44]	; 0x2c
 801036c:	f7f2 f974 	bl	8002658 <__aeabi_dsub>
 8010370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010374:	0006      	movs	r6, r0
 8010376:	000f      	movs	r7, r1
 8010378:	980a      	ldr	r0, [sp, #40]	; 0x28
 801037a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801037c:	f7f0 ff90 	bl	80012a0 <__aeabi_dadd>
 8010380:	0002      	movs	r2, r0
 8010382:	000b      	movs	r3, r1
 8010384:	2000      	movs	r0, #0
 8010386:	49a3      	ldr	r1, [pc, #652]	; (8010614 <__ieee754_pow+0x6f8>)
 8010388:	f7f1 faf4 	bl	8001974 <__aeabi_ddiv>
 801038c:	0002      	movs	r2, r0
 801038e:	000b      	movs	r3, r1
 8010390:	9012      	str	r0, [sp, #72]	; 0x48
 8010392:	9113      	str	r1, [sp, #76]	; 0x4c
 8010394:	0030      	movs	r0, r6
 8010396:	0039      	movs	r1, r7
 8010398:	f7f1 fef2 	bl	8002180 <__aeabi_dmul>
 801039c:	9008      	str	r0, [sp, #32]
 801039e:	9109      	str	r1, [sp, #36]	; 0x24
 80103a0:	9a08      	ldr	r2, [sp, #32]
 80103a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103a4:	2180      	movs	r1, #128	; 0x80
 80103a6:	9204      	str	r2, [sp, #16]
 80103a8:	9305      	str	r3, [sp, #20]
 80103aa:	2300      	movs	r3, #0
 80103ac:	0589      	lsls	r1, r1, #22
 80103ae:	106d      	asrs	r5, r5, #1
 80103b0:	430d      	orrs	r5, r1
 80103b2:	2180      	movs	r1, #128	; 0x80
 80103b4:	9304      	str	r3, [sp, #16]
 80103b6:	9a04      	ldr	r2, [sp, #16]
 80103b8:	9b05      	ldr	r3, [sp, #20]
 80103ba:	9200      	str	r2, [sp, #0]
 80103bc:	9301      	str	r3, [sp, #4]
 80103be:	2200      	movs	r2, #0
 80103c0:	0309      	lsls	r1, r1, #12
 80103c2:	186d      	adds	r5, r5, r1
 80103c4:	04a1      	lsls	r1, r4, #18
 80103c6:	186b      	adds	r3, r5, r1
 80103c8:	9800      	ldr	r0, [sp, #0]
 80103ca:	9901      	ldr	r1, [sp, #4]
 80103cc:	0014      	movs	r4, r2
 80103ce:	001d      	movs	r5, r3
 80103d0:	f7f1 fed6 	bl	8002180 <__aeabi_dmul>
 80103d4:	0002      	movs	r2, r0
 80103d6:	000b      	movs	r3, r1
 80103d8:	0030      	movs	r0, r6
 80103da:	0039      	movs	r1, r7
 80103dc:	f7f2 f93c 	bl	8002658 <__aeabi_dsub>
 80103e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103e4:	0006      	movs	r6, r0
 80103e6:	000f      	movs	r7, r1
 80103e8:	0020      	movs	r0, r4
 80103ea:	0029      	movs	r1, r5
 80103ec:	f7f2 f934 	bl	8002658 <__aeabi_dsub>
 80103f0:	0002      	movs	r2, r0
 80103f2:	000b      	movs	r3, r1
 80103f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80103f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80103f8:	f7f2 f92e 	bl	8002658 <__aeabi_dsub>
 80103fc:	9a00      	ldr	r2, [sp, #0]
 80103fe:	9b01      	ldr	r3, [sp, #4]
 8010400:	f7f1 febe 	bl	8002180 <__aeabi_dmul>
 8010404:	0002      	movs	r2, r0
 8010406:	000b      	movs	r3, r1
 8010408:	0030      	movs	r0, r6
 801040a:	0039      	movs	r1, r7
 801040c:	f7f2 f924 	bl	8002658 <__aeabi_dsub>
 8010410:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010412:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010414:	f7f1 feb4 	bl	8002180 <__aeabi_dmul>
 8010418:	9a08      	ldr	r2, [sp, #32]
 801041a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801041c:	900a      	str	r0, [sp, #40]	; 0x28
 801041e:	910b      	str	r1, [sp, #44]	; 0x2c
 8010420:	0010      	movs	r0, r2
 8010422:	0019      	movs	r1, r3
 8010424:	f7f1 feac 	bl	8002180 <__aeabi_dmul>
 8010428:	0006      	movs	r6, r0
 801042a:	000f      	movs	r7, r1
 801042c:	4a7e      	ldr	r2, [pc, #504]	; (8010628 <__ieee754_pow+0x70c>)
 801042e:	4b7f      	ldr	r3, [pc, #508]	; (801062c <__ieee754_pow+0x710>)
 8010430:	f7f1 fea6 	bl	8002180 <__aeabi_dmul>
 8010434:	4a7e      	ldr	r2, [pc, #504]	; (8010630 <__ieee754_pow+0x714>)
 8010436:	4b7f      	ldr	r3, [pc, #508]	; (8010634 <__ieee754_pow+0x718>)
 8010438:	f7f0 ff32 	bl	80012a0 <__aeabi_dadd>
 801043c:	0032      	movs	r2, r6
 801043e:	003b      	movs	r3, r7
 8010440:	f7f1 fe9e 	bl	8002180 <__aeabi_dmul>
 8010444:	4a7c      	ldr	r2, [pc, #496]	; (8010638 <__ieee754_pow+0x71c>)
 8010446:	4b7d      	ldr	r3, [pc, #500]	; (801063c <__ieee754_pow+0x720>)
 8010448:	f7f0 ff2a 	bl	80012a0 <__aeabi_dadd>
 801044c:	0032      	movs	r2, r6
 801044e:	003b      	movs	r3, r7
 8010450:	f7f1 fe96 	bl	8002180 <__aeabi_dmul>
 8010454:	4a7a      	ldr	r2, [pc, #488]	; (8010640 <__ieee754_pow+0x724>)
 8010456:	4b7b      	ldr	r3, [pc, #492]	; (8010644 <__ieee754_pow+0x728>)
 8010458:	f7f0 ff22 	bl	80012a0 <__aeabi_dadd>
 801045c:	0032      	movs	r2, r6
 801045e:	003b      	movs	r3, r7
 8010460:	f7f1 fe8e 	bl	8002180 <__aeabi_dmul>
 8010464:	4a78      	ldr	r2, [pc, #480]	; (8010648 <__ieee754_pow+0x72c>)
 8010466:	4b79      	ldr	r3, [pc, #484]	; (801064c <__ieee754_pow+0x730>)
 8010468:	f7f0 ff1a 	bl	80012a0 <__aeabi_dadd>
 801046c:	0032      	movs	r2, r6
 801046e:	003b      	movs	r3, r7
 8010470:	f7f1 fe86 	bl	8002180 <__aeabi_dmul>
 8010474:	4a76      	ldr	r2, [pc, #472]	; (8010650 <__ieee754_pow+0x734>)
 8010476:	4b77      	ldr	r3, [pc, #476]	; (8010654 <__ieee754_pow+0x738>)
 8010478:	f7f0 ff12 	bl	80012a0 <__aeabi_dadd>
 801047c:	0032      	movs	r2, r6
 801047e:	0004      	movs	r4, r0
 8010480:	000d      	movs	r5, r1
 8010482:	003b      	movs	r3, r7
 8010484:	0030      	movs	r0, r6
 8010486:	0039      	movs	r1, r7
 8010488:	f7f1 fe7a 	bl	8002180 <__aeabi_dmul>
 801048c:	0002      	movs	r2, r0
 801048e:	000b      	movs	r3, r1
 8010490:	0020      	movs	r0, r4
 8010492:	0029      	movs	r1, r5
 8010494:	f7f1 fe74 	bl	8002180 <__aeabi_dmul>
 8010498:	9a00      	ldr	r2, [sp, #0]
 801049a:	9b01      	ldr	r3, [sp, #4]
 801049c:	0004      	movs	r4, r0
 801049e:	000d      	movs	r5, r1
 80104a0:	9808      	ldr	r0, [sp, #32]
 80104a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104a4:	f7f0 fefc 	bl	80012a0 <__aeabi_dadd>
 80104a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104ac:	f7f1 fe68 	bl	8002180 <__aeabi_dmul>
 80104b0:	0022      	movs	r2, r4
 80104b2:	002b      	movs	r3, r5
 80104b4:	f7f0 fef4 	bl	80012a0 <__aeabi_dadd>
 80104b8:	9a00      	ldr	r2, [sp, #0]
 80104ba:	9b01      	ldr	r3, [sp, #4]
 80104bc:	900e      	str	r0, [sp, #56]	; 0x38
 80104be:	910f      	str	r1, [sp, #60]	; 0x3c
 80104c0:	0010      	movs	r0, r2
 80104c2:	0019      	movs	r1, r3
 80104c4:	f7f1 fe5c 	bl	8002180 <__aeabi_dmul>
 80104c8:	2200      	movs	r2, #0
 80104ca:	4b63      	ldr	r3, [pc, #396]	; (8010658 <__ieee754_pow+0x73c>)
 80104cc:	0004      	movs	r4, r0
 80104ce:	000d      	movs	r5, r1
 80104d0:	f7f0 fee6 	bl	80012a0 <__aeabi_dadd>
 80104d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80104d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104d8:	f7f0 fee2 	bl	80012a0 <__aeabi_dadd>
 80104dc:	9e04      	ldr	r6, [sp, #16]
 80104de:	000f      	movs	r7, r1
 80104e0:	0032      	movs	r2, r6
 80104e2:	000b      	movs	r3, r1
 80104e4:	9800      	ldr	r0, [sp, #0]
 80104e6:	9901      	ldr	r1, [sp, #4]
 80104e8:	f7f1 fe4a 	bl	8002180 <__aeabi_dmul>
 80104ec:	2200      	movs	r2, #0
 80104ee:	9000      	str	r0, [sp, #0]
 80104f0:	9101      	str	r1, [sp, #4]
 80104f2:	4b59      	ldr	r3, [pc, #356]	; (8010658 <__ieee754_pow+0x73c>)
 80104f4:	0030      	movs	r0, r6
 80104f6:	0039      	movs	r1, r7
 80104f8:	f7f2 f8ae 	bl	8002658 <__aeabi_dsub>
 80104fc:	0022      	movs	r2, r4
 80104fe:	002b      	movs	r3, r5
 8010500:	f7f2 f8aa 	bl	8002658 <__aeabi_dsub>
 8010504:	0002      	movs	r2, r0
 8010506:	000b      	movs	r3, r1
 8010508:	980e      	ldr	r0, [sp, #56]	; 0x38
 801050a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801050c:	f7f2 f8a4 	bl	8002658 <__aeabi_dsub>
 8010510:	9a08      	ldr	r2, [sp, #32]
 8010512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010514:	f7f1 fe34 	bl	8002180 <__aeabi_dmul>
 8010518:	0032      	movs	r2, r6
 801051a:	0004      	movs	r4, r0
 801051c:	000d      	movs	r5, r1
 801051e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010522:	003b      	movs	r3, r7
 8010524:	f7f1 fe2c 	bl	8002180 <__aeabi_dmul>
 8010528:	0002      	movs	r2, r0
 801052a:	000b      	movs	r3, r1
 801052c:	0020      	movs	r0, r4
 801052e:	0029      	movs	r1, r5
 8010530:	f7f0 feb6 	bl	80012a0 <__aeabi_dadd>
 8010534:	0004      	movs	r4, r0
 8010536:	000d      	movs	r5, r1
 8010538:	0002      	movs	r2, r0
 801053a:	000b      	movs	r3, r1
 801053c:	9800      	ldr	r0, [sp, #0]
 801053e:	9901      	ldr	r1, [sp, #4]
 8010540:	f7f0 feae 	bl	80012a0 <__aeabi_dadd>
 8010544:	22e0      	movs	r2, #224	; 0xe0
 8010546:	9e04      	ldr	r6, [sp, #16]
 8010548:	4b44      	ldr	r3, [pc, #272]	; (801065c <__ieee754_pow+0x740>)
 801054a:	0030      	movs	r0, r6
 801054c:	0612      	lsls	r2, r2, #24
 801054e:	000f      	movs	r7, r1
 8010550:	f7f1 fe16 	bl	8002180 <__aeabi_dmul>
 8010554:	9008      	str	r0, [sp, #32]
 8010556:	9109      	str	r1, [sp, #36]	; 0x24
 8010558:	9a00      	ldr	r2, [sp, #0]
 801055a:	9b01      	ldr	r3, [sp, #4]
 801055c:	0030      	movs	r0, r6
 801055e:	0039      	movs	r1, r7
 8010560:	f7f2 f87a 	bl	8002658 <__aeabi_dsub>
 8010564:	0002      	movs	r2, r0
 8010566:	000b      	movs	r3, r1
 8010568:	0020      	movs	r0, r4
 801056a:	0029      	movs	r1, r5
 801056c:	f7f2 f874 	bl	8002658 <__aeabi_dsub>
 8010570:	4a3b      	ldr	r2, [pc, #236]	; (8010660 <__ieee754_pow+0x744>)
 8010572:	4b3a      	ldr	r3, [pc, #232]	; (801065c <__ieee754_pow+0x740>)
 8010574:	f7f1 fe04 	bl	8002180 <__aeabi_dmul>
 8010578:	4a3a      	ldr	r2, [pc, #232]	; (8010664 <__ieee754_pow+0x748>)
 801057a:	0004      	movs	r4, r0
 801057c:	000d      	movs	r5, r1
 801057e:	0030      	movs	r0, r6
 8010580:	0039      	movs	r1, r7
 8010582:	4b39      	ldr	r3, [pc, #228]	; (8010668 <__ieee754_pow+0x74c>)
 8010584:	f7f1 fdfc 	bl	8002180 <__aeabi_dmul>
 8010588:	0002      	movs	r2, r0
 801058a:	000b      	movs	r3, r1
 801058c:	0020      	movs	r0, r4
 801058e:	0029      	movs	r1, r5
 8010590:	f7f0 fe86 	bl	80012a0 <__aeabi_dadd>
 8010594:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010596:	4b35      	ldr	r3, [pc, #212]	; (801066c <__ieee754_pow+0x750>)
 8010598:	189b      	adds	r3, r3, r2
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	f7f0 fe7f 	bl	80012a0 <__aeabi_dadd>
 80105a2:	900a      	str	r0, [sp, #40]	; 0x28
 80105a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80105a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80105a8:	f7f2 fc3c 	bl	8002e24 <__aeabi_i2d>
 80105ac:	0004      	movs	r4, r0
 80105ae:	000d      	movs	r5, r1
 80105b0:	9808      	ldr	r0, [sp, #32]
 80105b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80105b6:	4b2e      	ldr	r3, [pc, #184]	; (8010670 <__ieee754_pow+0x754>)
 80105b8:	189b      	adds	r3, r3, r2
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	9200      	str	r2, [sp, #0]
 80105c0:	9301      	str	r3, [sp, #4]
 80105c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105c6:	f7f0 fe6b 	bl	80012a0 <__aeabi_dadd>
 80105ca:	9a00      	ldr	r2, [sp, #0]
 80105cc:	9b01      	ldr	r3, [sp, #4]
 80105ce:	f7f0 fe67 	bl	80012a0 <__aeabi_dadd>
 80105d2:	0022      	movs	r2, r4
 80105d4:	002b      	movs	r3, r5
 80105d6:	f7f0 fe63 	bl	80012a0 <__aeabi_dadd>
 80105da:	9804      	ldr	r0, [sp, #16]
 80105dc:	0022      	movs	r2, r4
 80105de:	002b      	movs	r3, r5
 80105e0:	0006      	movs	r6, r0
 80105e2:	000f      	movs	r7, r1
 80105e4:	f7f2 f838 	bl	8002658 <__aeabi_dsub>
 80105e8:	9a00      	ldr	r2, [sp, #0]
 80105ea:	9b01      	ldr	r3, [sp, #4]
 80105ec:	f7f2 f834 	bl	8002658 <__aeabi_dsub>
 80105f0:	9a08      	ldr	r2, [sp, #32]
 80105f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105f4:	f7f2 f830 	bl	8002658 <__aeabi_dsub>
 80105f8:	0002      	movs	r2, r0
 80105fa:	000b      	movs	r3, r1
 80105fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80105fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010600:	e614      	b.n	801022c <__ieee754_pow+0x310>
 8010602:	2300      	movs	r3, #0
 8010604:	4c03      	ldr	r4, [pc, #12]	; (8010614 <__ieee754_pow+0x6f8>)
 8010606:	e61d      	b.n	8010244 <__ieee754_pow+0x328>
 8010608:	7ff00000 	.word	0x7ff00000
 801060c:	43400000 	.word	0x43400000
 8010610:	fffffc01 	.word	0xfffffc01
 8010614:	3ff00000 	.word	0x3ff00000
 8010618:	0003988e 	.word	0x0003988e
 801061c:	000bb679 	.word	0x000bb679
 8010620:	fff00000 	.word	0xfff00000
 8010624:	080124a0 	.word	0x080124a0
 8010628:	4a454eef 	.word	0x4a454eef
 801062c:	3fca7e28 	.word	0x3fca7e28
 8010630:	93c9db65 	.word	0x93c9db65
 8010634:	3fcd864a 	.word	0x3fcd864a
 8010638:	a91d4101 	.word	0xa91d4101
 801063c:	3fd17460 	.word	0x3fd17460
 8010640:	518f264d 	.word	0x518f264d
 8010644:	3fd55555 	.word	0x3fd55555
 8010648:	db6fabff 	.word	0xdb6fabff
 801064c:	3fdb6db6 	.word	0x3fdb6db6
 8010650:	33333303 	.word	0x33333303
 8010654:	3fe33333 	.word	0x3fe33333
 8010658:	40080000 	.word	0x40080000
 801065c:	3feec709 	.word	0x3feec709
 8010660:	dc3a03fd 	.word	0xdc3a03fd
 8010664:	145b01f5 	.word	0x145b01f5
 8010668:	be3e2fe0 	.word	0xbe3e2fe0
 801066c:	080124c0 	.word	0x080124c0
 8010670:	080124b0 	.word	0x080124b0
 8010674:	4a8f      	ldr	r2, [pc, #572]	; (80108b4 <__ieee754_pow+0x998>)
 8010676:	4b90      	ldr	r3, [pc, #576]	; (80108b8 <__ieee754_pow+0x99c>)
 8010678:	9804      	ldr	r0, [sp, #16]
 801067a:	9905      	ldr	r1, [sp, #20]
 801067c:	f7f0 fe10 	bl	80012a0 <__aeabi_dadd>
 8010680:	0032      	movs	r2, r6
 8010682:	9002      	str	r0, [sp, #8]
 8010684:	9103      	str	r1, [sp, #12]
 8010686:	003b      	movs	r3, r7
 8010688:	0028      	movs	r0, r5
 801068a:	0021      	movs	r1, r4
 801068c:	f7f1 ffe4 	bl	8002658 <__aeabi_dsub>
 8010690:	0002      	movs	r2, r0
 8010692:	000b      	movs	r3, r1
 8010694:	9802      	ldr	r0, [sp, #8]
 8010696:	9903      	ldr	r1, [sp, #12]
 8010698:	f7ef feee 	bl	8000478 <__aeabi_dcmpgt>
 801069c:	2800      	cmp	r0, #0
 801069e:	d000      	beq.n	80106a2 <__ieee754_pow+0x786>
 80106a0:	e60b      	b.n	80102ba <__ieee754_pow+0x39e>
 80106a2:	2100      	movs	r1, #0
 80106a4:	4a85      	ldr	r2, [pc, #532]	; (80108bc <__ieee754_pow+0x9a0>)
 80106a6:	0063      	lsls	r3, r4, #1
 80106a8:	085b      	lsrs	r3, r3, #1
 80106aa:	9102      	str	r1, [sp, #8]
 80106ac:	4293      	cmp	r3, r2
 80106ae:	dd25      	ble.n	80106fc <__ieee754_pow+0x7e0>
 80106b0:	4a83      	ldr	r2, [pc, #524]	; (80108c0 <__ieee754_pow+0x9a4>)
 80106b2:	151b      	asrs	r3, r3, #20
 80106b4:	189b      	adds	r3, r3, r2
 80106b6:	2280      	movs	r2, #128	; 0x80
 80106b8:	0352      	lsls	r2, r2, #13
 80106ba:	4694      	mov	ip, r2
 80106bc:	411a      	asrs	r2, r3
 80106be:	1914      	adds	r4, r2, r4
 80106c0:	4b80      	ldr	r3, [pc, #512]	; (80108c4 <__ieee754_pow+0x9a8>)
 80106c2:	0060      	lsls	r0, r4, #1
 80106c4:	4d80      	ldr	r5, [pc, #512]	; (80108c8 <__ieee754_pow+0x9ac>)
 80106c6:	0d40      	lsrs	r0, r0, #21
 80106c8:	18c0      	adds	r0, r0, r3
 80106ca:	4105      	asrs	r5, r0
 80106cc:	0021      	movs	r1, r4
 80106ce:	43a9      	bics	r1, r5
 80106d0:	000b      	movs	r3, r1
 80106d2:	4661      	mov	r1, ip
 80106d4:	0324      	lsls	r4, r4, #12
 80106d6:	0b24      	lsrs	r4, r4, #12
 80106d8:	4321      	orrs	r1, r4
 80106da:	2414      	movs	r4, #20
 80106dc:	1a20      	subs	r0, r4, r0
 80106de:	4101      	asrs	r1, r0
 80106e0:	9102      	str	r1, [sp, #8]
 80106e2:	9908      	ldr	r1, [sp, #32]
 80106e4:	2200      	movs	r2, #0
 80106e6:	2900      	cmp	r1, #0
 80106e8:	da02      	bge.n	80106f0 <__ieee754_pow+0x7d4>
 80106ea:	9902      	ldr	r1, [sp, #8]
 80106ec:	4249      	negs	r1, r1
 80106ee:	9102      	str	r1, [sp, #8]
 80106f0:	0030      	movs	r0, r6
 80106f2:	0039      	movs	r1, r7
 80106f4:	f7f1 ffb0 	bl	8002658 <__aeabi_dsub>
 80106f8:	9006      	str	r0, [sp, #24]
 80106fa:	9107      	str	r1, [sp, #28]
 80106fc:	9a04      	ldr	r2, [sp, #16]
 80106fe:	9b05      	ldr	r3, [sp, #20]
 8010700:	9806      	ldr	r0, [sp, #24]
 8010702:	9907      	ldr	r1, [sp, #28]
 8010704:	2600      	movs	r6, #0
 8010706:	f7f0 fdcb 	bl	80012a0 <__aeabi_dadd>
 801070a:	2200      	movs	r2, #0
 801070c:	0030      	movs	r0, r6
 801070e:	4b6f      	ldr	r3, [pc, #444]	; (80108cc <__ieee754_pow+0x9b0>)
 8010710:	000f      	movs	r7, r1
 8010712:	f7f1 fd35 	bl	8002180 <__aeabi_dmul>
 8010716:	9a06      	ldr	r2, [sp, #24]
 8010718:	9b07      	ldr	r3, [sp, #28]
 801071a:	9008      	str	r0, [sp, #32]
 801071c:	9109      	str	r1, [sp, #36]	; 0x24
 801071e:	0030      	movs	r0, r6
 8010720:	0039      	movs	r1, r7
 8010722:	f7f1 ff99 	bl	8002658 <__aeabi_dsub>
 8010726:	0002      	movs	r2, r0
 8010728:	000b      	movs	r3, r1
 801072a:	9804      	ldr	r0, [sp, #16]
 801072c:	9905      	ldr	r1, [sp, #20]
 801072e:	f7f1 ff93 	bl	8002658 <__aeabi_dsub>
 8010732:	4a67      	ldr	r2, [pc, #412]	; (80108d0 <__ieee754_pow+0x9b4>)
 8010734:	4b67      	ldr	r3, [pc, #412]	; (80108d4 <__ieee754_pow+0x9b8>)
 8010736:	f7f1 fd23 	bl	8002180 <__aeabi_dmul>
 801073a:	4a67      	ldr	r2, [pc, #412]	; (80108d8 <__ieee754_pow+0x9bc>)
 801073c:	0004      	movs	r4, r0
 801073e:	000d      	movs	r5, r1
 8010740:	0030      	movs	r0, r6
 8010742:	0039      	movs	r1, r7
 8010744:	4b65      	ldr	r3, [pc, #404]	; (80108dc <__ieee754_pow+0x9c0>)
 8010746:	f7f1 fd1b 	bl	8002180 <__aeabi_dmul>
 801074a:	0002      	movs	r2, r0
 801074c:	000b      	movs	r3, r1
 801074e:	0020      	movs	r0, r4
 8010750:	0029      	movs	r1, r5
 8010752:	f7f0 fda5 	bl	80012a0 <__aeabi_dadd>
 8010756:	0004      	movs	r4, r0
 8010758:	000d      	movs	r5, r1
 801075a:	0002      	movs	r2, r0
 801075c:	000b      	movs	r3, r1
 801075e:	9808      	ldr	r0, [sp, #32]
 8010760:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010762:	f7f0 fd9d 	bl	80012a0 <__aeabi_dadd>
 8010766:	9a08      	ldr	r2, [sp, #32]
 8010768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801076a:	0006      	movs	r6, r0
 801076c:	000f      	movs	r7, r1
 801076e:	f7f1 ff73 	bl	8002658 <__aeabi_dsub>
 8010772:	0002      	movs	r2, r0
 8010774:	000b      	movs	r3, r1
 8010776:	0020      	movs	r0, r4
 8010778:	0029      	movs	r1, r5
 801077a:	f7f1 ff6d 	bl	8002658 <__aeabi_dsub>
 801077e:	0032      	movs	r2, r6
 8010780:	9004      	str	r0, [sp, #16]
 8010782:	9105      	str	r1, [sp, #20]
 8010784:	003b      	movs	r3, r7
 8010786:	0030      	movs	r0, r6
 8010788:	0039      	movs	r1, r7
 801078a:	f7f1 fcf9 	bl	8002180 <__aeabi_dmul>
 801078e:	0004      	movs	r4, r0
 8010790:	000d      	movs	r5, r1
 8010792:	4a53      	ldr	r2, [pc, #332]	; (80108e0 <__ieee754_pow+0x9c4>)
 8010794:	4b53      	ldr	r3, [pc, #332]	; (80108e4 <__ieee754_pow+0x9c8>)
 8010796:	f7f1 fcf3 	bl	8002180 <__aeabi_dmul>
 801079a:	4a53      	ldr	r2, [pc, #332]	; (80108e8 <__ieee754_pow+0x9cc>)
 801079c:	4b53      	ldr	r3, [pc, #332]	; (80108ec <__ieee754_pow+0x9d0>)
 801079e:	f7f1 ff5b 	bl	8002658 <__aeabi_dsub>
 80107a2:	0022      	movs	r2, r4
 80107a4:	002b      	movs	r3, r5
 80107a6:	f7f1 fceb 	bl	8002180 <__aeabi_dmul>
 80107aa:	4a51      	ldr	r2, [pc, #324]	; (80108f0 <__ieee754_pow+0x9d4>)
 80107ac:	4b51      	ldr	r3, [pc, #324]	; (80108f4 <__ieee754_pow+0x9d8>)
 80107ae:	f7f0 fd77 	bl	80012a0 <__aeabi_dadd>
 80107b2:	0022      	movs	r2, r4
 80107b4:	002b      	movs	r3, r5
 80107b6:	f7f1 fce3 	bl	8002180 <__aeabi_dmul>
 80107ba:	4a4f      	ldr	r2, [pc, #316]	; (80108f8 <__ieee754_pow+0x9dc>)
 80107bc:	4b4f      	ldr	r3, [pc, #316]	; (80108fc <__ieee754_pow+0x9e0>)
 80107be:	f7f1 ff4b 	bl	8002658 <__aeabi_dsub>
 80107c2:	0022      	movs	r2, r4
 80107c4:	002b      	movs	r3, r5
 80107c6:	f7f1 fcdb 	bl	8002180 <__aeabi_dmul>
 80107ca:	4a4d      	ldr	r2, [pc, #308]	; (8010900 <__ieee754_pow+0x9e4>)
 80107cc:	4b4d      	ldr	r3, [pc, #308]	; (8010904 <__ieee754_pow+0x9e8>)
 80107ce:	f7f0 fd67 	bl	80012a0 <__aeabi_dadd>
 80107d2:	0022      	movs	r2, r4
 80107d4:	002b      	movs	r3, r5
 80107d6:	f7f1 fcd3 	bl	8002180 <__aeabi_dmul>
 80107da:	0002      	movs	r2, r0
 80107dc:	000b      	movs	r3, r1
 80107de:	0030      	movs	r0, r6
 80107e0:	0039      	movs	r1, r7
 80107e2:	f7f1 ff39 	bl	8002658 <__aeabi_dsub>
 80107e6:	0004      	movs	r4, r0
 80107e8:	000d      	movs	r5, r1
 80107ea:	0002      	movs	r2, r0
 80107ec:	000b      	movs	r3, r1
 80107ee:	0030      	movs	r0, r6
 80107f0:	0039      	movs	r1, r7
 80107f2:	f7f1 fcc5 	bl	8002180 <__aeabi_dmul>
 80107f6:	2380      	movs	r3, #128	; 0x80
 80107f8:	9006      	str	r0, [sp, #24]
 80107fa:	9107      	str	r1, [sp, #28]
 80107fc:	2200      	movs	r2, #0
 80107fe:	0020      	movs	r0, r4
 8010800:	0029      	movs	r1, r5
 8010802:	05db      	lsls	r3, r3, #23
 8010804:	f7f1 ff28 	bl	8002658 <__aeabi_dsub>
 8010808:	0002      	movs	r2, r0
 801080a:	000b      	movs	r3, r1
 801080c:	9806      	ldr	r0, [sp, #24]
 801080e:	9907      	ldr	r1, [sp, #28]
 8010810:	f7f1 f8b0 	bl	8001974 <__aeabi_ddiv>
 8010814:	9a04      	ldr	r2, [sp, #16]
 8010816:	9b05      	ldr	r3, [sp, #20]
 8010818:	0004      	movs	r4, r0
 801081a:	000d      	movs	r5, r1
 801081c:	0030      	movs	r0, r6
 801081e:	0039      	movs	r1, r7
 8010820:	f7f1 fcae 	bl	8002180 <__aeabi_dmul>
 8010824:	9a04      	ldr	r2, [sp, #16]
 8010826:	9b05      	ldr	r3, [sp, #20]
 8010828:	f7f0 fd3a 	bl	80012a0 <__aeabi_dadd>
 801082c:	0002      	movs	r2, r0
 801082e:	000b      	movs	r3, r1
 8010830:	0020      	movs	r0, r4
 8010832:	0029      	movs	r1, r5
 8010834:	f7f1 ff10 	bl	8002658 <__aeabi_dsub>
 8010838:	0032      	movs	r2, r6
 801083a:	003b      	movs	r3, r7
 801083c:	f7f1 ff0c 	bl	8002658 <__aeabi_dsub>
 8010840:	0002      	movs	r2, r0
 8010842:	000b      	movs	r3, r1
 8010844:	2000      	movs	r0, #0
 8010846:	4930      	ldr	r1, [pc, #192]	; (8010908 <__ieee754_pow+0x9ec>)
 8010848:	f7f1 ff06 	bl	8002658 <__aeabi_dsub>
 801084c:	9b02      	ldr	r3, [sp, #8]
 801084e:	051b      	lsls	r3, r3, #20
 8010850:	185b      	adds	r3, r3, r1
 8010852:	151a      	asrs	r2, r3, #20
 8010854:	2a00      	cmp	r2, #0
 8010856:	dc26      	bgt.n	80108a6 <__ieee754_pow+0x98a>
 8010858:	9a02      	ldr	r2, [sp, #8]
 801085a:	f001 f901 	bl	8011a60 <scalbn>
 801085e:	9a00      	ldr	r2, [sp, #0]
 8010860:	9b01      	ldr	r3, [sp, #4]
 8010862:	f7ff fc2d 	bl	80100c0 <__ieee754_pow+0x1a4>
 8010866:	4a29      	ldr	r2, [pc, #164]	; (801090c <__ieee754_pow+0x9f0>)
 8010868:	004b      	lsls	r3, r1, #1
 801086a:	085b      	lsrs	r3, r3, #1
 801086c:	4293      	cmp	r3, r2
 801086e:	dc00      	bgt.n	8010872 <__ieee754_pow+0x956>
 8010870:	e717      	b.n	80106a2 <__ieee754_pow+0x786>
 8010872:	4b27      	ldr	r3, [pc, #156]	; (8010910 <__ieee754_pow+0x9f4>)
 8010874:	18cb      	adds	r3, r1, r3
 8010876:	4303      	orrs	r3, r0
 8010878:	d009      	beq.n	801088e <__ieee754_pow+0x972>
 801087a:	9800      	ldr	r0, [sp, #0]
 801087c:	9901      	ldr	r1, [sp, #4]
 801087e:	4a25      	ldr	r2, [pc, #148]	; (8010914 <__ieee754_pow+0x9f8>)
 8010880:	4b25      	ldr	r3, [pc, #148]	; (8010918 <__ieee754_pow+0x9fc>)
 8010882:	f7f1 fc7d 	bl	8002180 <__aeabi_dmul>
 8010886:	4a23      	ldr	r2, [pc, #140]	; (8010914 <__ieee754_pow+0x9f8>)
 8010888:	4b23      	ldr	r3, [pc, #140]	; (8010918 <__ieee754_pow+0x9fc>)
 801088a:	f7ff fc19 	bl	80100c0 <__ieee754_pow+0x1a4>
 801088e:	0032      	movs	r2, r6
 8010890:	003b      	movs	r3, r7
 8010892:	f7f1 fee1 	bl	8002658 <__aeabi_dsub>
 8010896:	9a04      	ldr	r2, [sp, #16]
 8010898:	9b05      	ldr	r3, [sp, #20]
 801089a:	f7ef fdf7 	bl	800048c <__aeabi_dcmpge>
 801089e:	2800      	cmp	r0, #0
 80108a0:	d100      	bne.n	80108a4 <__ieee754_pow+0x988>
 80108a2:	e6fe      	b.n	80106a2 <__ieee754_pow+0x786>
 80108a4:	e7e9      	b.n	801087a <__ieee754_pow+0x95e>
 80108a6:	0019      	movs	r1, r3
 80108a8:	e7d9      	b.n	801085e <__ieee754_pow+0x942>
 80108aa:	2300      	movs	r3, #0
 80108ac:	4c16      	ldr	r4, [pc, #88]	; (8010908 <__ieee754_pow+0x9ec>)
 80108ae:	f7ff fbec 	bl	801008a <__ieee754_pow+0x16e>
 80108b2:	46c0      	nop			; (mov r8, r8)
 80108b4:	652b82fe 	.word	0x652b82fe
 80108b8:	3c971547 	.word	0x3c971547
 80108bc:	3fe00000 	.word	0x3fe00000
 80108c0:	fffffc02 	.word	0xfffffc02
 80108c4:	fffffc01 	.word	0xfffffc01
 80108c8:	000fffff 	.word	0x000fffff
 80108cc:	3fe62e43 	.word	0x3fe62e43
 80108d0:	fefa39ef 	.word	0xfefa39ef
 80108d4:	3fe62e42 	.word	0x3fe62e42
 80108d8:	0ca86c39 	.word	0x0ca86c39
 80108dc:	be205c61 	.word	0xbe205c61
 80108e0:	72bea4d0 	.word	0x72bea4d0
 80108e4:	3e663769 	.word	0x3e663769
 80108e8:	c5d26bf1 	.word	0xc5d26bf1
 80108ec:	3ebbbd41 	.word	0x3ebbbd41
 80108f0:	af25de2c 	.word	0xaf25de2c
 80108f4:	3f11566a 	.word	0x3f11566a
 80108f8:	16bebd93 	.word	0x16bebd93
 80108fc:	3f66c16c 	.word	0x3f66c16c
 8010900:	5555553e 	.word	0x5555553e
 8010904:	3fc55555 	.word	0x3fc55555
 8010908:	3ff00000 	.word	0x3ff00000
 801090c:	4090cbff 	.word	0x4090cbff
 8010910:	3f6f3400 	.word	0x3f6f3400
 8010914:	c2f8f359 	.word	0xc2f8f359
 8010918:	01a56e1f 	.word	0x01a56e1f

0801091c <__ieee754_rem_pio2>:
 801091c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801091e:	004b      	lsls	r3, r1, #1
 8010920:	b091      	sub	sp, #68	; 0x44
 8010922:	085b      	lsrs	r3, r3, #1
 8010924:	9302      	str	r3, [sp, #8]
 8010926:	0017      	movs	r7, r2
 8010928:	4bb6      	ldr	r3, [pc, #728]	; (8010c04 <__ieee754_rem_pio2+0x2e8>)
 801092a:	9a02      	ldr	r2, [sp, #8]
 801092c:	0004      	movs	r4, r0
 801092e:	000d      	movs	r5, r1
 8010930:	9109      	str	r1, [sp, #36]	; 0x24
 8010932:	429a      	cmp	r2, r3
 8010934:	dc09      	bgt.n	801094a <__ieee754_rem_pio2+0x2e>
 8010936:	0002      	movs	r2, r0
 8010938:	000b      	movs	r3, r1
 801093a:	603a      	str	r2, [r7, #0]
 801093c:	607b      	str	r3, [r7, #4]
 801093e:	2200      	movs	r2, #0
 8010940:	2300      	movs	r3, #0
 8010942:	60ba      	str	r2, [r7, #8]
 8010944:	60fb      	str	r3, [r7, #12]
 8010946:	2600      	movs	r6, #0
 8010948:	e025      	b.n	8010996 <__ieee754_rem_pio2+0x7a>
 801094a:	4baf      	ldr	r3, [pc, #700]	; (8010c08 <__ieee754_rem_pio2+0x2ec>)
 801094c:	9a02      	ldr	r2, [sp, #8]
 801094e:	429a      	cmp	r2, r3
 8010950:	dd00      	ble.n	8010954 <__ieee754_rem_pio2+0x38>
 8010952:	e06e      	b.n	8010a32 <__ieee754_rem_pio2+0x116>
 8010954:	4ead      	ldr	r6, [pc, #692]	; (8010c0c <__ieee754_rem_pio2+0x2f0>)
 8010956:	4aae      	ldr	r2, [pc, #696]	; (8010c10 <__ieee754_rem_pio2+0x2f4>)
 8010958:	2d00      	cmp	r5, #0
 801095a:	dd35      	ble.n	80109c8 <__ieee754_rem_pio2+0xac>
 801095c:	0020      	movs	r0, r4
 801095e:	0029      	movs	r1, r5
 8010960:	4baa      	ldr	r3, [pc, #680]	; (8010c0c <__ieee754_rem_pio2+0x2f0>)
 8010962:	f7f1 fe79 	bl	8002658 <__aeabi_dsub>
 8010966:	9b02      	ldr	r3, [sp, #8]
 8010968:	0004      	movs	r4, r0
 801096a:	000d      	movs	r5, r1
 801096c:	42b3      	cmp	r3, r6
 801096e:	d015      	beq.n	801099c <__ieee754_rem_pio2+0x80>
 8010970:	4aa8      	ldr	r2, [pc, #672]	; (8010c14 <__ieee754_rem_pio2+0x2f8>)
 8010972:	4ba9      	ldr	r3, [pc, #676]	; (8010c18 <__ieee754_rem_pio2+0x2fc>)
 8010974:	f7f1 fe70 	bl	8002658 <__aeabi_dsub>
 8010978:	0002      	movs	r2, r0
 801097a:	000b      	movs	r3, r1
 801097c:	0020      	movs	r0, r4
 801097e:	603a      	str	r2, [r7, #0]
 8010980:	607b      	str	r3, [r7, #4]
 8010982:	0029      	movs	r1, r5
 8010984:	f7f1 fe68 	bl	8002658 <__aeabi_dsub>
 8010988:	4aa2      	ldr	r2, [pc, #648]	; (8010c14 <__ieee754_rem_pio2+0x2f8>)
 801098a:	4ba3      	ldr	r3, [pc, #652]	; (8010c18 <__ieee754_rem_pio2+0x2fc>)
 801098c:	f7f1 fe64 	bl	8002658 <__aeabi_dsub>
 8010990:	2601      	movs	r6, #1
 8010992:	60b8      	str	r0, [r7, #8]
 8010994:	60f9      	str	r1, [r7, #12]
 8010996:	0030      	movs	r0, r6
 8010998:	b011      	add	sp, #68	; 0x44
 801099a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801099c:	22d3      	movs	r2, #211	; 0xd3
 801099e:	4b9e      	ldr	r3, [pc, #632]	; (8010c18 <__ieee754_rem_pio2+0x2fc>)
 80109a0:	0552      	lsls	r2, r2, #21
 80109a2:	f7f1 fe59 	bl	8002658 <__aeabi_dsub>
 80109a6:	4a9d      	ldr	r2, [pc, #628]	; (8010c1c <__ieee754_rem_pio2+0x300>)
 80109a8:	4b9d      	ldr	r3, [pc, #628]	; (8010c20 <__ieee754_rem_pio2+0x304>)
 80109aa:	0004      	movs	r4, r0
 80109ac:	000d      	movs	r5, r1
 80109ae:	f7f1 fe53 	bl	8002658 <__aeabi_dsub>
 80109b2:	0002      	movs	r2, r0
 80109b4:	000b      	movs	r3, r1
 80109b6:	0020      	movs	r0, r4
 80109b8:	603a      	str	r2, [r7, #0]
 80109ba:	607b      	str	r3, [r7, #4]
 80109bc:	0029      	movs	r1, r5
 80109be:	f7f1 fe4b 	bl	8002658 <__aeabi_dsub>
 80109c2:	4a96      	ldr	r2, [pc, #600]	; (8010c1c <__ieee754_rem_pio2+0x300>)
 80109c4:	4b96      	ldr	r3, [pc, #600]	; (8010c20 <__ieee754_rem_pio2+0x304>)
 80109c6:	e7e1      	b.n	801098c <__ieee754_rem_pio2+0x70>
 80109c8:	0020      	movs	r0, r4
 80109ca:	0029      	movs	r1, r5
 80109cc:	4b8f      	ldr	r3, [pc, #572]	; (8010c0c <__ieee754_rem_pio2+0x2f0>)
 80109ce:	f7f0 fc67 	bl	80012a0 <__aeabi_dadd>
 80109d2:	9b02      	ldr	r3, [sp, #8]
 80109d4:	0004      	movs	r4, r0
 80109d6:	000d      	movs	r5, r1
 80109d8:	42b3      	cmp	r3, r6
 80109da:	d014      	beq.n	8010a06 <__ieee754_rem_pio2+0xea>
 80109dc:	4a8d      	ldr	r2, [pc, #564]	; (8010c14 <__ieee754_rem_pio2+0x2f8>)
 80109de:	4b8e      	ldr	r3, [pc, #568]	; (8010c18 <__ieee754_rem_pio2+0x2fc>)
 80109e0:	f7f0 fc5e 	bl	80012a0 <__aeabi_dadd>
 80109e4:	0002      	movs	r2, r0
 80109e6:	000b      	movs	r3, r1
 80109e8:	0020      	movs	r0, r4
 80109ea:	603a      	str	r2, [r7, #0]
 80109ec:	607b      	str	r3, [r7, #4]
 80109ee:	0029      	movs	r1, r5
 80109f0:	f7f1 fe32 	bl	8002658 <__aeabi_dsub>
 80109f4:	4a87      	ldr	r2, [pc, #540]	; (8010c14 <__ieee754_rem_pio2+0x2f8>)
 80109f6:	4b88      	ldr	r3, [pc, #544]	; (8010c18 <__ieee754_rem_pio2+0x2fc>)
 80109f8:	f7f0 fc52 	bl	80012a0 <__aeabi_dadd>
 80109fc:	2601      	movs	r6, #1
 80109fe:	60b8      	str	r0, [r7, #8]
 8010a00:	60f9      	str	r1, [r7, #12]
 8010a02:	4276      	negs	r6, r6
 8010a04:	e7c7      	b.n	8010996 <__ieee754_rem_pio2+0x7a>
 8010a06:	22d3      	movs	r2, #211	; 0xd3
 8010a08:	4b83      	ldr	r3, [pc, #524]	; (8010c18 <__ieee754_rem_pio2+0x2fc>)
 8010a0a:	0552      	lsls	r2, r2, #21
 8010a0c:	f7f0 fc48 	bl	80012a0 <__aeabi_dadd>
 8010a10:	4a82      	ldr	r2, [pc, #520]	; (8010c1c <__ieee754_rem_pio2+0x300>)
 8010a12:	4b83      	ldr	r3, [pc, #524]	; (8010c20 <__ieee754_rem_pio2+0x304>)
 8010a14:	0004      	movs	r4, r0
 8010a16:	000d      	movs	r5, r1
 8010a18:	f7f0 fc42 	bl	80012a0 <__aeabi_dadd>
 8010a1c:	0002      	movs	r2, r0
 8010a1e:	000b      	movs	r3, r1
 8010a20:	0020      	movs	r0, r4
 8010a22:	603a      	str	r2, [r7, #0]
 8010a24:	607b      	str	r3, [r7, #4]
 8010a26:	0029      	movs	r1, r5
 8010a28:	f7f1 fe16 	bl	8002658 <__aeabi_dsub>
 8010a2c:	4a7b      	ldr	r2, [pc, #492]	; (8010c1c <__ieee754_rem_pio2+0x300>)
 8010a2e:	4b7c      	ldr	r3, [pc, #496]	; (8010c20 <__ieee754_rem_pio2+0x304>)
 8010a30:	e7e2      	b.n	80109f8 <__ieee754_rem_pio2+0xdc>
 8010a32:	4b7c      	ldr	r3, [pc, #496]	; (8010c24 <__ieee754_rem_pio2+0x308>)
 8010a34:	9a02      	ldr	r2, [sp, #8]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	dd00      	ble.n	8010a3c <__ieee754_rem_pio2+0x120>
 8010a3a:	e0d3      	b.n	8010be4 <__ieee754_rem_pio2+0x2c8>
 8010a3c:	0020      	movs	r0, r4
 8010a3e:	0029      	movs	r1, r5
 8010a40:	f7fe fe84 	bl	800f74c <fabs>
 8010a44:	4a78      	ldr	r2, [pc, #480]	; (8010c28 <__ieee754_rem_pio2+0x30c>)
 8010a46:	4b79      	ldr	r3, [pc, #484]	; (8010c2c <__ieee754_rem_pio2+0x310>)
 8010a48:	0004      	movs	r4, r0
 8010a4a:	000d      	movs	r5, r1
 8010a4c:	f7f1 fb98 	bl	8002180 <__aeabi_dmul>
 8010a50:	2200      	movs	r2, #0
 8010a52:	4b77      	ldr	r3, [pc, #476]	; (8010c30 <__ieee754_rem_pio2+0x314>)
 8010a54:	f7f0 fc24 	bl	80012a0 <__aeabi_dadd>
 8010a58:	f7f2 f9ae 	bl	8002db8 <__aeabi_d2iz>
 8010a5c:	0006      	movs	r6, r0
 8010a5e:	f7f2 f9e1 	bl	8002e24 <__aeabi_i2d>
 8010a62:	4a6b      	ldr	r2, [pc, #428]	; (8010c10 <__ieee754_rem_pio2+0x2f4>)
 8010a64:	4b69      	ldr	r3, [pc, #420]	; (8010c0c <__ieee754_rem_pio2+0x2f0>)
 8010a66:	9006      	str	r0, [sp, #24]
 8010a68:	9107      	str	r1, [sp, #28]
 8010a6a:	f7f1 fb89 	bl	8002180 <__aeabi_dmul>
 8010a6e:	0002      	movs	r2, r0
 8010a70:	000b      	movs	r3, r1
 8010a72:	0020      	movs	r0, r4
 8010a74:	0029      	movs	r1, r5
 8010a76:	f7f1 fdef 	bl	8002658 <__aeabi_dsub>
 8010a7a:	4a66      	ldr	r2, [pc, #408]	; (8010c14 <__ieee754_rem_pio2+0x2f8>)
 8010a7c:	9004      	str	r0, [sp, #16]
 8010a7e:	9105      	str	r1, [sp, #20]
 8010a80:	9806      	ldr	r0, [sp, #24]
 8010a82:	9907      	ldr	r1, [sp, #28]
 8010a84:	4b64      	ldr	r3, [pc, #400]	; (8010c18 <__ieee754_rem_pio2+0x2fc>)
 8010a86:	f7f1 fb7b 	bl	8002180 <__aeabi_dmul>
 8010a8a:	0004      	movs	r4, r0
 8010a8c:	000d      	movs	r5, r1
 8010a8e:	2e1f      	cmp	r6, #31
 8010a90:	dc0f      	bgt.n	8010ab2 <__ieee754_rem_pio2+0x196>
 8010a92:	4a68      	ldr	r2, [pc, #416]	; (8010c34 <__ieee754_rem_pio2+0x318>)
 8010a94:	1e73      	subs	r3, r6, #1
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	589b      	ldr	r3, [r3, r2]
 8010a9a:	9a02      	ldr	r2, [sp, #8]
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d008      	beq.n	8010ab2 <__ieee754_rem_pio2+0x196>
 8010aa0:	9804      	ldr	r0, [sp, #16]
 8010aa2:	9905      	ldr	r1, [sp, #20]
 8010aa4:	0022      	movs	r2, r4
 8010aa6:	002b      	movs	r3, r5
 8010aa8:	f7f1 fdd6 	bl	8002658 <__aeabi_dsub>
 8010aac:	6038      	str	r0, [r7, #0]
 8010aae:	6079      	str	r1, [r7, #4]
 8010ab0:	e012      	b.n	8010ad8 <__ieee754_rem_pio2+0x1bc>
 8010ab2:	0022      	movs	r2, r4
 8010ab4:	9804      	ldr	r0, [sp, #16]
 8010ab6:	9905      	ldr	r1, [sp, #20]
 8010ab8:	002b      	movs	r3, r5
 8010aba:	f7f1 fdcd 	bl	8002658 <__aeabi_dsub>
 8010abe:	9b02      	ldr	r3, [sp, #8]
 8010ac0:	151b      	asrs	r3, r3, #20
 8010ac2:	9308      	str	r3, [sp, #32]
 8010ac4:	9a08      	ldr	r2, [sp, #32]
 8010ac6:	004b      	lsls	r3, r1, #1
 8010ac8:	0d5b      	lsrs	r3, r3, #21
 8010aca:	1ad3      	subs	r3, r2, r3
 8010acc:	2b10      	cmp	r3, #16
 8010ace:	dc21      	bgt.n	8010b14 <__ieee754_rem_pio2+0x1f8>
 8010ad0:	0002      	movs	r2, r0
 8010ad2:	000b      	movs	r3, r1
 8010ad4:	603a      	str	r2, [r7, #0]
 8010ad6:	607b      	str	r3, [r7, #4]
 8010ad8:	9804      	ldr	r0, [sp, #16]
 8010ada:	9905      	ldr	r1, [sp, #20]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	683a      	ldr	r2, [r7, #0]
 8010ae0:	9302      	str	r3, [sp, #8]
 8010ae2:	9b02      	ldr	r3, [sp, #8]
 8010ae4:	f7f1 fdb8 	bl	8002658 <__aeabi_dsub>
 8010ae8:	0022      	movs	r2, r4
 8010aea:	002b      	movs	r3, r5
 8010aec:	f7f1 fdb4 	bl	8002658 <__aeabi_dsub>
 8010af0:	000b      	movs	r3, r1
 8010af2:	0002      	movs	r2, r0
 8010af4:	60ba      	str	r2, [r7, #8]
 8010af6:	60fb      	str	r3, [r7, #12]
 8010af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	db00      	blt.n	8010b00 <__ieee754_rem_pio2+0x1e4>
 8010afe:	e74a      	b.n	8010996 <__ieee754_rem_pio2+0x7a>
 8010b00:	2280      	movs	r2, #128	; 0x80
 8010b02:	0612      	lsls	r2, r2, #24
 8010b04:	4694      	mov	ip, r2
 8010b06:	9b02      	ldr	r3, [sp, #8]
 8010b08:	1889      	adds	r1, r1, r2
 8010b0a:	4463      	add	r3, ip
 8010b0c:	607b      	str	r3, [r7, #4]
 8010b0e:	60b8      	str	r0, [r7, #8]
 8010b10:	60f9      	str	r1, [r7, #12]
 8010b12:	e776      	b.n	8010a02 <__ieee754_rem_pio2+0xe6>
 8010b14:	22d3      	movs	r2, #211	; 0xd3
 8010b16:	9806      	ldr	r0, [sp, #24]
 8010b18:	9907      	ldr	r1, [sp, #28]
 8010b1a:	4b3f      	ldr	r3, [pc, #252]	; (8010c18 <__ieee754_rem_pio2+0x2fc>)
 8010b1c:	0552      	lsls	r2, r2, #21
 8010b1e:	f7f1 fb2f 	bl	8002180 <__aeabi_dmul>
 8010b22:	0004      	movs	r4, r0
 8010b24:	000d      	movs	r5, r1
 8010b26:	0002      	movs	r2, r0
 8010b28:	000b      	movs	r3, r1
 8010b2a:	9804      	ldr	r0, [sp, #16]
 8010b2c:	9905      	ldr	r1, [sp, #20]
 8010b2e:	f7f1 fd93 	bl	8002658 <__aeabi_dsub>
 8010b32:	0002      	movs	r2, r0
 8010b34:	000b      	movs	r3, r1
 8010b36:	9002      	str	r0, [sp, #8]
 8010b38:	9103      	str	r1, [sp, #12]
 8010b3a:	9804      	ldr	r0, [sp, #16]
 8010b3c:	9905      	ldr	r1, [sp, #20]
 8010b3e:	f7f1 fd8b 	bl	8002658 <__aeabi_dsub>
 8010b42:	0022      	movs	r2, r4
 8010b44:	002b      	movs	r3, r5
 8010b46:	f7f1 fd87 	bl	8002658 <__aeabi_dsub>
 8010b4a:	0004      	movs	r4, r0
 8010b4c:	000d      	movs	r5, r1
 8010b4e:	9806      	ldr	r0, [sp, #24]
 8010b50:	9907      	ldr	r1, [sp, #28]
 8010b52:	4a32      	ldr	r2, [pc, #200]	; (8010c1c <__ieee754_rem_pio2+0x300>)
 8010b54:	4b32      	ldr	r3, [pc, #200]	; (8010c20 <__ieee754_rem_pio2+0x304>)
 8010b56:	f7f1 fb13 	bl	8002180 <__aeabi_dmul>
 8010b5a:	0022      	movs	r2, r4
 8010b5c:	002b      	movs	r3, r5
 8010b5e:	f7f1 fd7b 	bl	8002658 <__aeabi_dsub>
 8010b62:	0002      	movs	r2, r0
 8010b64:	000b      	movs	r3, r1
 8010b66:	0004      	movs	r4, r0
 8010b68:	000d      	movs	r5, r1
 8010b6a:	9802      	ldr	r0, [sp, #8]
 8010b6c:	9903      	ldr	r1, [sp, #12]
 8010b6e:	f7f1 fd73 	bl	8002658 <__aeabi_dsub>
 8010b72:	9a08      	ldr	r2, [sp, #32]
 8010b74:	004b      	lsls	r3, r1, #1
 8010b76:	0d5b      	lsrs	r3, r3, #21
 8010b78:	1ad3      	subs	r3, r2, r3
 8010b7a:	2b31      	cmp	r3, #49	; 0x31
 8010b7c:	dc08      	bgt.n	8010b90 <__ieee754_rem_pio2+0x274>
 8010b7e:	0002      	movs	r2, r0
 8010b80:	000b      	movs	r3, r1
 8010b82:	603a      	str	r2, [r7, #0]
 8010b84:	607b      	str	r3, [r7, #4]
 8010b86:	9a02      	ldr	r2, [sp, #8]
 8010b88:	9b03      	ldr	r3, [sp, #12]
 8010b8a:	9204      	str	r2, [sp, #16]
 8010b8c:	9305      	str	r3, [sp, #20]
 8010b8e:	e7a3      	b.n	8010ad8 <__ieee754_rem_pio2+0x1bc>
 8010b90:	22b8      	movs	r2, #184	; 0xb8
 8010b92:	9806      	ldr	r0, [sp, #24]
 8010b94:	9907      	ldr	r1, [sp, #28]
 8010b96:	4b22      	ldr	r3, [pc, #136]	; (8010c20 <__ieee754_rem_pio2+0x304>)
 8010b98:	0592      	lsls	r2, r2, #22
 8010b9a:	f7f1 faf1 	bl	8002180 <__aeabi_dmul>
 8010b9e:	0004      	movs	r4, r0
 8010ba0:	000d      	movs	r5, r1
 8010ba2:	0002      	movs	r2, r0
 8010ba4:	000b      	movs	r3, r1
 8010ba6:	9802      	ldr	r0, [sp, #8]
 8010ba8:	9903      	ldr	r1, [sp, #12]
 8010baa:	f7f1 fd55 	bl	8002658 <__aeabi_dsub>
 8010bae:	0002      	movs	r2, r0
 8010bb0:	000b      	movs	r3, r1
 8010bb2:	9004      	str	r0, [sp, #16]
 8010bb4:	9105      	str	r1, [sp, #20]
 8010bb6:	9802      	ldr	r0, [sp, #8]
 8010bb8:	9903      	ldr	r1, [sp, #12]
 8010bba:	f7f1 fd4d 	bl	8002658 <__aeabi_dsub>
 8010bbe:	0022      	movs	r2, r4
 8010bc0:	002b      	movs	r3, r5
 8010bc2:	f7f1 fd49 	bl	8002658 <__aeabi_dsub>
 8010bc6:	0004      	movs	r4, r0
 8010bc8:	000d      	movs	r5, r1
 8010bca:	9806      	ldr	r0, [sp, #24]
 8010bcc:	9907      	ldr	r1, [sp, #28]
 8010bce:	4a1a      	ldr	r2, [pc, #104]	; (8010c38 <__ieee754_rem_pio2+0x31c>)
 8010bd0:	4b1a      	ldr	r3, [pc, #104]	; (8010c3c <__ieee754_rem_pio2+0x320>)
 8010bd2:	f7f1 fad5 	bl	8002180 <__aeabi_dmul>
 8010bd6:	0022      	movs	r2, r4
 8010bd8:	002b      	movs	r3, r5
 8010bda:	f7f1 fd3d 	bl	8002658 <__aeabi_dsub>
 8010bde:	0004      	movs	r4, r0
 8010be0:	000d      	movs	r5, r1
 8010be2:	e75d      	b.n	8010aa0 <__ieee754_rem_pio2+0x184>
 8010be4:	4b16      	ldr	r3, [pc, #88]	; (8010c40 <__ieee754_rem_pio2+0x324>)
 8010be6:	9a02      	ldr	r2, [sp, #8]
 8010be8:	429a      	cmp	r2, r3
 8010bea:	dd2b      	ble.n	8010c44 <__ieee754_rem_pio2+0x328>
 8010bec:	0022      	movs	r2, r4
 8010bee:	002b      	movs	r3, r5
 8010bf0:	0020      	movs	r0, r4
 8010bf2:	0029      	movs	r1, r5
 8010bf4:	f7f1 fd30 	bl	8002658 <__aeabi_dsub>
 8010bf8:	60b8      	str	r0, [r7, #8]
 8010bfa:	60f9      	str	r1, [r7, #12]
 8010bfc:	6038      	str	r0, [r7, #0]
 8010bfe:	6079      	str	r1, [r7, #4]
 8010c00:	e6a1      	b.n	8010946 <__ieee754_rem_pio2+0x2a>
 8010c02:	46c0      	nop			; (mov r8, r8)
 8010c04:	3fe921fb 	.word	0x3fe921fb
 8010c08:	4002d97b 	.word	0x4002d97b
 8010c0c:	3ff921fb 	.word	0x3ff921fb
 8010c10:	54400000 	.word	0x54400000
 8010c14:	1a626331 	.word	0x1a626331
 8010c18:	3dd0b461 	.word	0x3dd0b461
 8010c1c:	2e037073 	.word	0x2e037073
 8010c20:	3ba3198a 	.word	0x3ba3198a
 8010c24:	413921fb 	.word	0x413921fb
 8010c28:	6dc9c883 	.word	0x6dc9c883
 8010c2c:	3fe45f30 	.word	0x3fe45f30
 8010c30:	3fe00000 	.word	0x3fe00000
 8010c34:	080124d0 	.word	0x080124d0
 8010c38:	252049c1 	.word	0x252049c1
 8010c3c:	397b839a 	.word	0x397b839a
 8010c40:	7fefffff 	.word	0x7fefffff
 8010c44:	9a02      	ldr	r2, [sp, #8]
 8010c46:	0020      	movs	r0, r4
 8010c48:	1516      	asrs	r6, r2, #20
 8010c4a:	4a27      	ldr	r2, [pc, #156]	; (8010ce8 <__ieee754_rem_pio2+0x3cc>)
 8010c4c:	18b6      	adds	r6, r6, r2
 8010c4e:	9a02      	ldr	r2, [sp, #8]
 8010c50:	0533      	lsls	r3, r6, #20
 8010c52:	1ad5      	subs	r5, r2, r3
 8010c54:	0029      	movs	r1, r5
 8010c56:	f7f2 f8af 	bl	8002db8 <__aeabi_d2iz>
 8010c5a:	f7f2 f8e3 	bl	8002e24 <__aeabi_i2d>
 8010c5e:	0002      	movs	r2, r0
 8010c60:	000b      	movs	r3, r1
 8010c62:	0020      	movs	r0, r4
 8010c64:	0029      	movs	r1, r5
 8010c66:	920a      	str	r2, [sp, #40]	; 0x28
 8010c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c6a:	f7f1 fcf5 	bl	8002658 <__aeabi_dsub>
 8010c6e:	2200      	movs	r2, #0
 8010c70:	4b1e      	ldr	r3, [pc, #120]	; (8010cec <__ieee754_rem_pio2+0x3d0>)
 8010c72:	f7f1 fa85 	bl	8002180 <__aeabi_dmul>
 8010c76:	000d      	movs	r5, r1
 8010c78:	0004      	movs	r4, r0
 8010c7a:	f7f2 f89d 	bl	8002db8 <__aeabi_d2iz>
 8010c7e:	f7f2 f8d1 	bl	8002e24 <__aeabi_i2d>
 8010c82:	0002      	movs	r2, r0
 8010c84:	000b      	movs	r3, r1
 8010c86:	0020      	movs	r0, r4
 8010c88:	0029      	movs	r1, r5
 8010c8a:	920c      	str	r2, [sp, #48]	; 0x30
 8010c8c:	930d      	str	r3, [sp, #52]	; 0x34
 8010c8e:	f7f1 fce3 	bl	8002658 <__aeabi_dsub>
 8010c92:	2200      	movs	r2, #0
 8010c94:	4b15      	ldr	r3, [pc, #84]	; (8010cec <__ieee754_rem_pio2+0x3d0>)
 8010c96:	f7f1 fa73 	bl	8002180 <__aeabi_dmul>
 8010c9a:	2503      	movs	r5, #3
 8010c9c:	900e      	str	r0, [sp, #56]	; 0x38
 8010c9e:	910f      	str	r1, [sp, #60]	; 0x3c
 8010ca0:	ac0a      	add	r4, sp, #40	; 0x28
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	6920      	ldr	r0, [r4, #16]
 8010ca6:	6961      	ldr	r1, [r4, #20]
 8010ca8:	2300      	movs	r3, #0
 8010caa:	9502      	str	r5, [sp, #8]
 8010cac:	3c08      	subs	r4, #8
 8010cae:	3d01      	subs	r5, #1
 8010cb0:	f7ef fbc8 	bl	8000444 <__aeabi_dcmpeq>
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	d1f4      	bne.n	8010ca2 <__ieee754_rem_pio2+0x386>
 8010cb8:	4b0d      	ldr	r3, [pc, #52]	; (8010cf0 <__ieee754_rem_pio2+0x3d4>)
 8010cba:	0032      	movs	r2, r6
 8010cbc:	9301      	str	r3, [sp, #4]
 8010cbe:	2302      	movs	r3, #2
 8010cc0:	0039      	movs	r1, r7
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	a80a      	add	r0, sp, #40	; 0x28
 8010cc6:	9b02      	ldr	r3, [sp, #8]
 8010cc8:	f000 f988 	bl	8010fdc <__kernel_rem_pio2>
 8010ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cce:	0006      	movs	r6, r0
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	db00      	blt.n	8010cd6 <__ieee754_rem_pio2+0x3ba>
 8010cd4:	e65f      	b.n	8010996 <__ieee754_rem_pio2+0x7a>
 8010cd6:	2280      	movs	r2, #128	; 0x80
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	0612      	lsls	r2, r2, #24
 8010cdc:	189b      	adds	r3, r3, r2
 8010cde:	607b      	str	r3, [r7, #4]
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	189b      	adds	r3, r3, r2
 8010ce4:	60fb      	str	r3, [r7, #12]
 8010ce6:	e68c      	b.n	8010a02 <__ieee754_rem_pio2+0xe6>
 8010ce8:	fffffbea 	.word	0xfffffbea
 8010cec:	41700000 	.word	0x41700000
 8010cf0:	08012550 	.word	0x08012550

08010cf4 <__ieee754_sqrt>:
 8010cf4:	4b56      	ldr	r3, [pc, #344]	; (8010e50 <__ieee754_sqrt+0x15c>)
 8010cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cf8:	0002      	movs	r2, r0
 8010cfa:	0005      	movs	r5, r0
 8010cfc:	0018      	movs	r0, r3
 8010cfe:	000c      	movs	r4, r1
 8010d00:	b085      	sub	sp, #20
 8010d02:	4008      	ands	r0, r1
 8010d04:	4298      	cmp	r0, r3
 8010d06:	d10f      	bne.n	8010d28 <__ieee754_sqrt+0x34>
 8010d08:	000b      	movs	r3, r1
 8010d0a:	0028      	movs	r0, r5
 8010d0c:	f7f1 fa38 	bl	8002180 <__aeabi_dmul>
 8010d10:	0002      	movs	r2, r0
 8010d12:	000b      	movs	r3, r1
 8010d14:	0028      	movs	r0, r5
 8010d16:	0021      	movs	r1, r4
 8010d18:	f7f0 fac2 	bl	80012a0 <__aeabi_dadd>
 8010d1c:	0005      	movs	r5, r0
 8010d1e:	000c      	movs	r4, r1
 8010d20:	0028      	movs	r0, r5
 8010d22:	0021      	movs	r1, r4
 8010d24:	b005      	add	sp, #20
 8010d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d28:	2900      	cmp	r1, #0
 8010d2a:	dc10      	bgt.n	8010d4e <__ieee754_sqrt+0x5a>
 8010d2c:	004b      	lsls	r3, r1, #1
 8010d2e:	085b      	lsrs	r3, r3, #1
 8010d30:	432b      	orrs	r3, r5
 8010d32:	d0f5      	beq.n	8010d20 <__ieee754_sqrt+0x2c>
 8010d34:	2000      	movs	r0, #0
 8010d36:	4281      	cmp	r1, r0
 8010d38:	d100      	bne.n	8010d3c <__ieee754_sqrt+0x48>
 8010d3a:	e080      	b.n	8010e3e <__ieee754_sqrt+0x14a>
 8010d3c:	000b      	movs	r3, r1
 8010d3e:	0028      	movs	r0, r5
 8010d40:	f7f1 fc8a 	bl	8002658 <__aeabi_dsub>
 8010d44:	0002      	movs	r2, r0
 8010d46:	000b      	movs	r3, r1
 8010d48:	f7f0 fe14 	bl	8001974 <__aeabi_ddiv>
 8010d4c:	e7e6      	b.n	8010d1c <__ieee754_sqrt+0x28>
 8010d4e:	1508      	asrs	r0, r1, #20
 8010d50:	d075      	beq.n	8010e3e <__ieee754_sqrt+0x14a>
 8010d52:	4b40      	ldr	r3, [pc, #256]	; (8010e54 <__ieee754_sqrt+0x160>)
 8010d54:	0309      	lsls	r1, r1, #12
 8010d56:	18c4      	adds	r4, r0, r3
 8010d58:	2380      	movs	r3, #128	; 0x80
 8010d5a:	0b09      	lsrs	r1, r1, #12
 8010d5c:	035b      	lsls	r3, r3, #13
 8010d5e:	4319      	orrs	r1, r3
 8010d60:	07c3      	lsls	r3, r0, #31
 8010d62:	d403      	bmi.n	8010d6c <__ieee754_sqrt+0x78>
 8010d64:	0fd3      	lsrs	r3, r2, #31
 8010d66:	0049      	lsls	r1, r1, #1
 8010d68:	18c9      	adds	r1, r1, r3
 8010d6a:	0052      	lsls	r2, r2, #1
 8010d6c:	1063      	asrs	r3, r4, #1
 8010d6e:	2400      	movs	r4, #0
 8010d70:	0049      	lsls	r1, r1, #1
 8010d72:	9303      	str	r3, [sp, #12]
 8010d74:	0fd3      	lsrs	r3, r2, #31
 8010d76:	18cb      	adds	r3, r1, r3
 8010d78:	2180      	movs	r1, #128	; 0x80
 8010d7a:	2516      	movs	r5, #22
 8010d7c:	0020      	movs	r0, r4
 8010d7e:	0052      	lsls	r2, r2, #1
 8010d80:	0389      	lsls	r1, r1, #14
 8010d82:	1846      	adds	r6, r0, r1
 8010d84:	429e      	cmp	r6, r3
 8010d86:	dc02      	bgt.n	8010d8e <__ieee754_sqrt+0x9a>
 8010d88:	1870      	adds	r0, r6, r1
 8010d8a:	1b9b      	subs	r3, r3, r6
 8010d8c:	1864      	adds	r4, r4, r1
 8010d8e:	0fd6      	lsrs	r6, r2, #31
 8010d90:	005b      	lsls	r3, r3, #1
 8010d92:	3d01      	subs	r5, #1
 8010d94:	18f3      	adds	r3, r6, r3
 8010d96:	0052      	lsls	r2, r2, #1
 8010d98:	0849      	lsrs	r1, r1, #1
 8010d9a:	2d00      	cmp	r5, #0
 8010d9c:	d1f1      	bne.n	8010d82 <__ieee754_sqrt+0x8e>
 8010d9e:	2620      	movs	r6, #32
 8010da0:	2780      	movs	r7, #128	; 0x80
 8010da2:	0029      	movs	r1, r5
 8010da4:	9601      	str	r6, [sp, #4]
 8010da6:	063f      	lsls	r7, r7, #24
 8010da8:	197e      	adds	r6, r7, r5
 8010daa:	46b4      	mov	ip, r6
 8010dac:	4283      	cmp	r3, r0
 8010dae:	dc02      	bgt.n	8010db6 <__ieee754_sqrt+0xc2>
 8010db0:	d114      	bne.n	8010ddc <__ieee754_sqrt+0xe8>
 8010db2:	4296      	cmp	r6, r2
 8010db4:	d812      	bhi.n	8010ddc <__ieee754_sqrt+0xe8>
 8010db6:	4665      	mov	r5, ip
 8010db8:	4666      	mov	r6, ip
 8010dba:	19ed      	adds	r5, r5, r7
 8010dbc:	9002      	str	r0, [sp, #8]
 8010dbe:	2e00      	cmp	r6, #0
 8010dc0:	da03      	bge.n	8010dca <__ieee754_sqrt+0xd6>
 8010dc2:	43ee      	mvns	r6, r5
 8010dc4:	0ff6      	lsrs	r6, r6, #31
 8010dc6:	1986      	adds	r6, r0, r6
 8010dc8:	9602      	str	r6, [sp, #8]
 8010dca:	1a1b      	subs	r3, r3, r0
 8010dcc:	4562      	cmp	r2, ip
 8010dce:	4180      	sbcs	r0, r0
 8010dd0:	4240      	negs	r0, r0
 8010dd2:	1a1b      	subs	r3, r3, r0
 8010dd4:	4660      	mov	r0, ip
 8010dd6:	1a12      	subs	r2, r2, r0
 8010dd8:	9802      	ldr	r0, [sp, #8]
 8010dda:	19c9      	adds	r1, r1, r7
 8010ddc:	0fd6      	lsrs	r6, r2, #31
 8010dde:	005b      	lsls	r3, r3, #1
 8010de0:	18f3      	adds	r3, r6, r3
 8010de2:	9e01      	ldr	r6, [sp, #4]
 8010de4:	0052      	lsls	r2, r2, #1
 8010de6:	3e01      	subs	r6, #1
 8010de8:	087f      	lsrs	r7, r7, #1
 8010dea:	9601      	str	r6, [sp, #4]
 8010dec:	2e00      	cmp	r6, #0
 8010dee:	d1db      	bne.n	8010da8 <__ieee754_sqrt+0xb4>
 8010df0:	4313      	orrs	r3, r2
 8010df2:	d003      	beq.n	8010dfc <__ieee754_sqrt+0x108>
 8010df4:	1c4b      	adds	r3, r1, #1
 8010df6:	d127      	bne.n	8010e48 <__ieee754_sqrt+0x154>
 8010df8:	0031      	movs	r1, r6
 8010dfa:	3401      	adds	r4, #1
 8010dfc:	4b16      	ldr	r3, [pc, #88]	; (8010e58 <__ieee754_sqrt+0x164>)
 8010dfe:	1060      	asrs	r0, r4, #1
 8010e00:	18c0      	adds	r0, r0, r3
 8010e02:	0849      	lsrs	r1, r1, #1
 8010e04:	07e3      	lsls	r3, r4, #31
 8010e06:	d502      	bpl.n	8010e0e <__ieee754_sqrt+0x11a>
 8010e08:	2380      	movs	r3, #128	; 0x80
 8010e0a:	061b      	lsls	r3, r3, #24
 8010e0c:	4319      	orrs	r1, r3
 8010e0e:	9b03      	ldr	r3, [sp, #12]
 8010e10:	000d      	movs	r5, r1
 8010e12:	051c      	lsls	r4, r3, #20
 8010e14:	1823      	adds	r3, r4, r0
 8010e16:	001c      	movs	r4, r3
 8010e18:	e782      	b.n	8010d20 <__ieee754_sqrt+0x2c>
 8010e1a:	0ad1      	lsrs	r1, r2, #11
 8010e1c:	3b15      	subs	r3, #21
 8010e1e:	0552      	lsls	r2, r2, #21
 8010e20:	2900      	cmp	r1, #0
 8010e22:	d0fa      	beq.n	8010e1a <__ieee754_sqrt+0x126>
 8010e24:	2480      	movs	r4, #128	; 0x80
 8010e26:	0364      	lsls	r4, r4, #13
 8010e28:	4221      	tst	r1, r4
 8010e2a:	d00a      	beq.n	8010e42 <__ieee754_sqrt+0x14e>
 8010e2c:	2420      	movs	r4, #32
 8010e2e:	0016      	movs	r6, r2
 8010e30:	1a24      	subs	r4, r4, r0
 8010e32:	40e6      	lsrs	r6, r4
 8010e34:	1e45      	subs	r5, r0, #1
 8010e36:	4082      	lsls	r2, r0
 8010e38:	4331      	orrs	r1, r6
 8010e3a:	1b58      	subs	r0, r3, r5
 8010e3c:	e789      	b.n	8010d52 <__ieee754_sqrt+0x5e>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	e7ee      	b.n	8010e20 <__ieee754_sqrt+0x12c>
 8010e42:	0049      	lsls	r1, r1, #1
 8010e44:	3001      	adds	r0, #1
 8010e46:	e7ef      	b.n	8010e28 <__ieee754_sqrt+0x134>
 8010e48:	2301      	movs	r3, #1
 8010e4a:	3101      	adds	r1, #1
 8010e4c:	4399      	bics	r1, r3
 8010e4e:	e7d5      	b.n	8010dfc <__ieee754_sqrt+0x108>
 8010e50:	7ff00000 	.word	0x7ff00000
 8010e54:	fffffc01 	.word	0xfffffc01
 8010e58:	3fe00000 	.word	0x3fe00000

08010e5c <__kernel_cos>:
 8010e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e5e:	b087      	sub	sp, #28
 8010e60:	9204      	str	r2, [sp, #16]
 8010e62:	9305      	str	r3, [sp, #20]
 8010e64:	004b      	lsls	r3, r1, #1
 8010e66:	085b      	lsrs	r3, r3, #1
 8010e68:	9300      	str	r3, [sp, #0]
 8010e6a:	23f9      	movs	r3, #249	; 0xf9
 8010e6c:	9a00      	ldr	r2, [sp, #0]
 8010e6e:	0007      	movs	r7, r0
 8010e70:	000e      	movs	r6, r1
 8010e72:	059b      	lsls	r3, r3, #22
 8010e74:	429a      	cmp	r2, r3
 8010e76:	da04      	bge.n	8010e82 <__kernel_cos+0x26>
 8010e78:	f7f1 ff9e 	bl	8002db8 <__aeabi_d2iz>
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	d100      	bne.n	8010e82 <__kernel_cos+0x26>
 8010e80:	e084      	b.n	8010f8c <__kernel_cos+0x130>
 8010e82:	003a      	movs	r2, r7
 8010e84:	0033      	movs	r3, r6
 8010e86:	0038      	movs	r0, r7
 8010e88:	0031      	movs	r1, r6
 8010e8a:	f7f1 f979 	bl	8002180 <__aeabi_dmul>
 8010e8e:	2200      	movs	r2, #0
 8010e90:	4b40      	ldr	r3, [pc, #256]	; (8010f94 <__kernel_cos+0x138>)
 8010e92:	0004      	movs	r4, r0
 8010e94:	000d      	movs	r5, r1
 8010e96:	f7f1 f973 	bl	8002180 <__aeabi_dmul>
 8010e9a:	4a3f      	ldr	r2, [pc, #252]	; (8010f98 <__kernel_cos+0x13c>)
 8010e9c:	9002      	str	r0, [sp, #8]
 8010e9e:	9103      	str	r1, [sp, #12]
 8010ea0:	4b3e      	ldr	r3, [pc, #248]	; (8010f9c <__kernel_cos+0x140>)
 8010ea2:	0020      	movs	r0, r4
 8010ea4:	0029      	movs	r1, r5
 8010ea6:	f7f1 f96b 	bl	8002180 <__aeabi_dmul>
 8010eaa:	4a3d      	ldr	r2, [pc, #244]	; (8010fa0 <__kernel_cos+0x144>)
 8010eac:	4b3d      	ldr	r3, [pc, #244]	; (8010fa4 <__kernel_cos+0x148>)
 8010eae:	f7f0 f9f7 	bl	80012a0 <__aeabi_dadd>
 8010eb2:	0022      	movs	r2, r4
 8010eb4:	002b      	movs	r3, r5
 8010eb6:	f7f1 f963 	bl	8002180 <__aeabi_dmul>
 8010eba:	4a3b      	ldr	r2, [pc, #236]	; (8010fa8 <__kernel_cos+0x14c>)
 8010ebc:	4b3b      	ldr	r3, [pc, #236]	; (8010fac <__kernel_cos+0x150>)
 8010ebe:	f7f1 fbcb 	bl	8002658 <__aeabi_dsub>
 8010ec2:	0022      	movs	r2, r4
 8010ec4:	002b      	movs	r3, r5
 8010ec6:	f7f1 f95b 	bl	8002180 <__aeabi_dmul>
 8010eca:	4a39      	ldr	r2, [pc, #228]	; (8010fb0 <__kernel_cos+0x154>)
 8010ecc:	4b39      	ldr	r3, [pc, #228]	; (8010fb4 <__kernel_cos+0x158>)
 8010ece:	f7f0 f9e7 	bl	80012a0 <__aeabi_dadd>
 8010ed2:	0022      	movs	r2, r4
 8010ed4:	002b      	movs	r3, r5
 8010ed6:	f7f1 f953 	bl	8002180 <__aeabi_dmul>
 8010eda:	4a37      	ldr	r2, [pc, #220]	; (8010fb8 <__kernel_cos+0x15c>)
 8010edc:	4b37      	ldr	r3, [pc, #220]	; (8010fbc <__kernel_cos+0x160>)
 8010ede:	f7f1 fbbb 	bl	8002658 <__aeabi_dsub>
 8010ee2:	0022      	movs	r2, r4
 8010ee4:	002b      	movs	r3, r5
 8010ee6:	f7f1 f94b 	bl	8002180 <__aeabi_dmul>
 8010eea:	4a35      	ldr	r2, [pc, #212]	; (8010fc0 <__kernel_cos+0x164>)
 8010eec:	4b35      	ldr	r3, [pc, #212]	; (8010fc4 <__kernel_cos+0x168>)
 8010eee:	f7f0 f9d7 	bl	80012a0 <__aeabi_dadd>
 8010ef2:	0022      	movs	r2, r4
 8010ef4:	002b      	movs	r3, r5
 8010ef6:	f7f1 f943 	bl	8002180 <__aeabi_dmul>
 8010efa:	0022      	movs	r2, r4
 8010efc:	002b      	movs	r3, r5
 8010efe:	f7f1 f93f 	bl	8002180 <__aeabi_dmul>
 8010f02:	9a04      	ldr	r2, [sp, #16]
 8010f04:	9b05      	ldr	r3, [sp, #20]
 8010f06:	0004      	movs	r4, r0
 8010f08:	000d      	movs	r5, r1
 8010f0a:	0038      	movs	r0, r7
 8010f0c:	0031      	movs	r1, r6
 8010f0e:	f7f1 f937 	bl	8002180 <__aeabi_dmul>
 8010f12:	0002      	movs	r2, r0
 8010f14:	000b      	movs	r3, r1
 8010f16:	0020      	movs	r0, r4
 8010f18:	0029      	movs	r1, r5
 8010f1a:	f7f1 fb9d 	bl	8002658 <__aeabi_dsub>
 8010f1e:	4b2a      	ldr	r3, [pc, #168]	; (8010fc8 <__kernel_cos+0x16c>)
 8010f20:	9a00      	ldr	r2, [sp, #0]
 8010f22:	0004      	movs	r4, r0
 8010f24:	000d      	movs	r5, r1
 8010f26:	429a      	cmp	r2, r3
 8010f28:	dc0d      	bgt.n	8010f46 <__kernel_cos+0xea>
 8010f2a:	0002      	movs	r2, r0
 8010f2c:	000b      	movs	r3, r1
 8010f2e:	9802      	ldr	r0, [sp, #8]
 8010f30:	9903      	ldr	r1, [sp, #12]
 8010f32:	f7f1 fb91 	bl	8002658 <__aeabi_dsub>
 8010f36:	0002      	movs	r2, r0
 8010f38:	2000      	movs	r0, #0
 8010f3a:	000b      	movs	r3, r1
 8010f3c:	4923      	ldr	r1, [pc, #140]	; (8010fcc <__kernel_cos+0x170>)
 8010f3e:	f7f1 fb8b 	bl	8002658 <__aeabi_dsub>
 8010f42:	b007      	add	sp, #28
 8010f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f46:	4b22      	ldr	r3, [pc, #136]	; (8010fd0 <__kernel_cos+0x174>)
 8010f48:	9a00      	ldr	r2, [sp, #0]
 8010f4a:	2600      	movs	r6, #0
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	dc1b      	bgt.n	8010f88 <__kernel_cos+0x12c>
 8010f50:	0013      	movs	r3, r2
 8010f52:	4a20      	ldr	r2, [pc, #128]	; (8010fd4 <__kernel_cos+0x178>)
 8010f54:	4694      	mov	ip, r2
 8010f56:	4463      	add	r3, ip
 8010f58:	001f      	movs	r7, r3
 8010f5a:	0032      	movs	r2, r6
 8010f5c:	003b      	movs	r3, r7
 8010f5e:	2000      	movs	r0, #0
 8010f60:	491a      	ldr	r1, [pc, #104]	; (8010fcc <__kernel_cos+0x170>)
 8010f62:	f7f1 fb79 	bl	8002658 <__aeabi_dsub>
 8010f66:	0032      	movs	r2, r6
 8010f68:	003b      	movs	r3, r7
 8010f6a:	9000      	str	r0, [sp, #0]
 8010f6c:	9101      	str	r1, [sp, #4]
 8010f6e:	9802      	ldr	r0, [sp, #8]
 8010f70:	9903      	ldr	r1, [sp, #12]
 8010f72:	f7f1 fb71 	bl	8002658 <__aeabi_dsub>
 8010f76:	0022      	movs	r2, r4
 8010f78:	002b      	movs	r3, r5
 8010f7a:	f7f1 fb6d 	bl	8002658 <__aeabi_dsub>
 8010f7e:	0002      	movs	r2, r0
 8010f80:	000b      	movs	r3, r1
 8010f82:	9800      	ldr	r0, [sp, #0]
 8010f84:	9901      	ldr	r1, [sp, #4]
 8010f86:	e7da      	b.n	8010f3e <__kernel_cos+0xe2>
 8010f88:	4f13      	ldr	r7, [pc, #76]	; (8010fd8 <__kernel_cos+0x17c>)
 8010f8a:	e7e6      	b.n	8010f5a <__kernel_cos+0xfe>
 8010f8c:	2000      	movs	r0, #0
 8010f8e:	490f      	ldr	r1, [pc, #60]	; (8010fcc <__kernel_cos+0x170>)
 8010f90:	e7d7      	b.n	8010f42 <__kernel_cos+0xe6>
 8010f92:	46c0      	nop			; (mov r8, r8)
 8010f94:	3fe00000 	.word	0x3fe00000
 8010f98:	be8838d4 	.word	0xbe8838d4
 8010f9c:	bda8fae9 	.word	0xbda8fae9
 8010fa0:	bdb4b1c4 	.word	0xbdb4b1c4
 8010fa4:	3e21ee9e 	.word	0x3e21ee9e
 8010fa8:	809c52ad 	.word	0x809c52ad
 8010fac:	3e927e4f 	.word	0x3e927e4f
 8010fb0:	19cb1590 	.word	0x19cb1590
 8010fb4:	3efa01a0 	.word	0x3efa01a0
 8010fb8:	16c15177 	.word	0x16c15177
 8010fbc:	3f56c16c 	.word	0x3f56c16c
 8010fc0:	5555554c 	.word	0x5555554c
 8010fc4:	3fa55555 	.word	0x3fa55555
 8010fc8:	3fd33332 	.word	0x3fd33332
 8010fcc:	3ff00000 	.word	0x3ff00000
 8010fd0:	3fe90000 	.word	0x3fe90000
 8010fd4:	ffe00000 	.word	0xffe00000
 8010fd8:	3fd20000 	.word	0x3fd20000

08010fdc <__kernel_rem_pio2>:
 8010fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fde:	4cd0      	ldr	r4, [pc, #832]	; (8011320 <__kernel_rem_pio2+0x344>)
 8010fe0:	44a5      	add	sp, r4
 8010fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8010fe4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010fe6:	0014      	movs	r4, r2
 8010fe8:	009a      	lsls	r2, r3, #2
 8010fea:	4bce      	ldr	r3, [pc, #824]	; (8011324 <__kernel_rem_pio2+0x348>)
 8010fec:	900e      	str	r0, [sp, #56]	; 0x38
 8010fee:	58d3      	ldr	r3, [r2, r3]
 8010ff0:	9107      	str	r1, [sp, #28]
 8010ff2:	9308      	str	r3, [sp, #32]
 8010ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	930c      	str	r3, [sp, #48]	; 0x30
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	9300      	str	r3, [sp, #0]
 8010ffe:	0023      	movs	r3, r4
 8011000:	3314      	adds	r3, #20
 8011002:	db04      	blt.n	801100e <__kernel_rem_pio2+0x32>
 8011004:	2118      	movs	r1, #24
 8011006:	1ee0      	subs	r0, r4, #3
 8011008:	f7ef f920 	bl	800024c <__divsi3>
 801100c:	9000      	str	r0, [sp, #0]
 801100e:	2218      	movs	r2, #24
 8011010:	9b00      	ldr	r3, [sp, #0]
 8011012:	4252      	negs	r2, r2
 8011014:	3301      	adds	r3, #1
 8011016:	435a      	muls	r2, r3
 8011018:	1913      	adds	r3, r2, r4
 801101a:	9302      	str	r3, [sp, #8]
 801101c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801101e:	9b00      	ldr	r3, [sp, #0]
 8011020:	ae26      	add	r6, sp, #152	; 0x98
 8011022:	1a9d      	subs	r5, r3, r2
 8011024:	002c      	movs	r4, r5
 8011026:	9b08      	ldr	r3, [sp, #32]
 8011028:	189f      	adds	r7, r3, r2
 801102a:	1b63      	subs	r3, r4, r5
 801102c:	429f      	cmp	r7, r3
 801102e:	da17      	bge.n	8011060 <__kernel_rem_pio2+0x84>
 8011030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011032:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011034:	9304      	str	r3, [sp, #16]
 8011036:	ab76      	add	r3, sp, #472	; 0x1d8
 8011038:	930a      	str	r3, [sp, #40]	; 0x28
 801103a:	2301      	movs	r3, #1
 801103c:	1a9b      	subs	r3, r3, r2
 801103e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011040:	ab28      	add	r3, sp, #160	; 0xa0
 8011042:	930f      	str	r3, [sp, #60]	; 0x3c
 8011044:	9a04      	ldr	r2, [sp, #16]
 8011046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011048:	189b      	adds	r3, r3, r2
 801104a:	9a08      	ldr	r2, [sp, #32]
 801104c:	429a      	cmp	r2, r3
 801104e:	db31      	blt.n	80110b4 <__kernel_rem_pio2+0xd8>
 8011050:	9b04      	ldr	r3, [sp, #16]
 8011052:	2400      	movs	r4, #0
 8011054:	00de      	lsls	r6, r3, #3
 8011056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011058:	2500      	movs	r5, #0
 801105a:	2700      	movs	r7, #0
 801105c:	199e      	adds	r6, r3, r6
 801105e:	e01e      	b.n	801109e <__kernel_rem_pio2+0xc2>
 8011060:	2c00      	cmp	r4, #0
 8011062:	db07      	blt.n	8011074 <__kernel_rem_pio2+0x98>
 8011064:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8011066:	00a3      	lsls	r3, r4, #2
 8011068:	58d0      	ldr	r0, [r2, r3]
 801106a:	f7f1 fedb 	bl	8002e24 <__aeabi_i2d>
 801106e:	c603      	stmia	r6!, {r0, r1}
 8011070:	3401      	adds	r4, #1
 8011072:	e7da      	b.n	801102a <__kernel_rem_pio2+0x4e>
 8011074:	2000      	movs	r0, #0
 8011076:	2100      	movs	r1, #0
 8011078:	e7f9      	b.n	801106e <__kernel_rem_pio2+0x92>
 801107a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801107c:	00f9      	lsls	r1, r7, #3
 801107e:	1859      	adds	r1, r3, r1
 8011080:	6808      	ldr	r0, [r1, #0]
 8011082:	6849      	ldr	r1, [r1, #4]
 8011084:	6832      	ldr	r2, [r6, #0]
 8011086:	6873      	ldr	r3, [r6, #4]
 8011088:	f7f1 f87a 	bl	8002180 <__aeabi_dmul>
 801108c:	0002      	movs	r2, r0
 801108e:	000b      	movs	r3, r1
 8011090:	0020      	movs	r0, r4
 8011092:	0029      	movs	r1, r5
 8011094:	f7f0 f904 	bl	80012a0 <__aeabi_dadd>
 8011098:	0004      	movs	r4, r0
 801109a:	000d      	movs	r5, r1
 801109c:	3701      	adds	r7, #1
 801109e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110a0:	3e08      	subs	r6, #8
 80110a2:	429f      	cmp	r7, r3
 80110a4:	dde9      	ble.n	801107a <__kernel_rem_pio2+0x9e>
 80110a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110a8:	c330      	stmia	r3!, {r4, r5}
 80110aa:	930a      	str	r3, [sp, #40]	; 0x28
 80110ac:	9b04      	ldr	r3, [sp, #16]
 80110ae:	3301      	adds	r3, #1
 80110b0:	9304      	str	r3, [sp, #16]
 80110b2:	e7c7      	b.n	8011044 <__kernel_rem_pio2+0x68>
 80110b4:	9b08      	ldr	r3, [sp, #32]
 80110b6:	aa12      	add	r2, sp, #72	; 0x48
 80110b8:	009b      	lsls	r3, r3, #2
 80110ba:	189b      	adds	r3, r3, r2
 80110bc:	9310      	str	r3, [sp, #64]	; 0x40
 80110be:	9b00      	ldr	r3, [sp, #0]
 80110c0:	0098      	lsls	r0, r3, #2
 80110c2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80110c4:	181b      	adds	r3, r3, r0
 80110c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80110c8:	9b08      	ldr	r3, [sp, #32]
 80110ca:	9304      	str	r3, [sp, #16]
 80110cc:	9b04      	ldr	r3, [sp, #16]
 80110ce:	aa76      	add	r2, sp, #472	; 0x1d8
 80110d0:	00db      	lsls	r3, r3, #3
 80110d2:	18d3      	adds	r3, r2, r3
 80110d4:	681c      	ldr	r4, [r3, #0]
 80110d6:	685d      	ldr	r5, [r3, #4]
 80110d8:	ab12      	add	r3, sp, #72	; 0x48
 80110da:	9300      	str	r3, [sp, #0]
 80110dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80110de:	9b04      	ldr	r3, [sp, #16]
 80110e0:	9211      	str	r2, [sp, #68]	; 0x44
 80110e2:	930a      	str	r3, [sp, #40]	; 0x28
 80110e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	dc74      	bgt.n	80111d4 <__kernel_rem_pio2+0x1f8>
 80110ea:	0020      	movs	r0, r4
 80110ec:	0029      	movs	r1, r5
 80110ee:	9a02      	ldr	r2, [sp, #8]
 80110f0:	f000 fcb6 	bl	8011a60 <scalbn>
 80110f4:	23ff      	movs	r3, #255	; 0xff
 80110f6:	2200      	movs	r2, #0
 80110f8:	059b      	lsls	r3, r3, #22
 80110fa:	0004      	movs	r4, r0
 80110fc:	000d      	movs	r5, r1
 80110fe:	f7f1 f83f 	bl	8002180 <__aeabi_dmul>
 8011102:	f000 fb95 	bl	8011830 <floor>
 8011106:	2200      	movs	r2, #0
 8011108:	4b87      	ldr	r3, [pc, #540]	; (8011328 <__kernel_rem_pio2+0x34c>)
 801110a:	f7f1 f839 	bl	8002180 <__aeabi_dmul>
 801110e:	0002      	movs	r2, r0
 8011110:	000b      	movs	r3, r1
 8011112:	0020      	movs	r0, r4
 8011114:	0029      	movs	r1, r5
 8011116:	f7f1 fa9f 	bl	8002658 <__aeabi_dsub>
 801111a:	000d      	movs	r5, r1
 801111c:	0004      	movs	r4, r0
 801111e:	f7f1 fe4b 	bl	8002db8 <__aeabi_d2iz>
 8011122:	900b      	str	r0, [sp, #44]	; 0x2c
 8011124:	f7f1 fe7e 	bl	8002e24 <__aeabi_i2d>
 8011128:	000b      	movs	r3, r1
 801112a:	0002      	movs	r2, r0
 801112c:	0029      	movs	r1, r5
 801112e:	0020      	movs	r0, r4
 8011130:	f7f1 fa92 	bl	8002658 <__aeabi_dsub>
 8011134:	9b02      	ldr	r3, [sp, #8]
 8011136:	0006      	movs	r6, r0
 8011138:	000f      	movs	r7, r1
 801113a:	2b00      	cmp	r3, #0
 801113c:	dd74      	ble.n	8011228 <__kernel_rem_pio2+0x24c>
 801113e:	2118      	movs	r1, #24
 8011140:	9b04      	ldr	r3, [sp, #16]
 8011142:	aa12      	add	r2, sp, #72	; 0x48
 8011144:	3b01      	subs	r3, #1
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	589a      	ldr	r2, [r3, r2]
 801114a:	9802      	ldr	r0, [sp, #8]
 801114c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801114e:	1a09      	subs	r1, r1, r0
 8011150:	0010      	movs	r0, r2
 8011152:	4108      	asrs	r0, r1
 8011154:	1824      	adds	r4, r4, r0
 8011156:	4088      	lsls	r0, r1
 8011158:	a912      	add	r1, sp, #72	; 0x48
 801115a:	1a12      	subs	r2, r2, r0
 801115c:	505a      	str	r2, [r3, r1]
 801115e:	2317      	movs	r3, #23
 8011160:	9902      	ldr	r1, [sp, #8]
 8011162:	940b      	str	r4, [sp, #44]	; 0x2c
 8011164:	1a5b      	subs	r3, r3, r1
 8011166:	411a      	asrs	r2, r3
 8011168:	920a      	str	r2, [sp, #40]	; 0x28
 801116a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801116c:	2b00      	cmp	r3, #0
 801116e:	dd6d      	ble.n	801124c <__kernel_rem_pio2+0x270>
 8011170:	2200      	movs	r2, #0
 8011172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011174:	2080      	movs	r0, #128	; 0x80
 8011176:	3301      	adds	r3, #1
 8011178:	930b      	str	r3, [sp, #44]	; 0x2c
 801117a:	4b6c      	ldr	r3, [pc, #432]	; (801132c <__kernel_rem_pio2+0x350>)
 801117c:	0014      	movs	r4, r2
 801117e:	469c      	mov	ip, r3
 8011180:	2501      	movs	r5, #1
 8011182:	0440      	lsls	r0, r0, #17
 8011184:	9b04      	ldr	r3, [sp, #16]
 8011186:	4293      	cmp	r3, r2
 8011188:	dd00      	ble.n	801118c <__kernel_rem_pio2+0x1b0>
 801118a:	e098      	b.n	80112be <__kernel_rem_pio2+0x2e2>
 801118c:	9b02      	ldr	r3, [sp, #8]
 801118e:	2b00      	cmp	r3, #0
 8011190:	dd05      	ble.n	801119e <__kernel_rem_pio2+0x1c2>
 8011192:	2b01      	cmp	r3, #1
 8011194:	d100      	bne.n	8011198 <__kernel_rem_pio2+0x1bc>
 8011196:	e0a8      	b.n	80112ea <__kernel_rem_pio2+0x30e>
 8011198:	2b02      	cmp	r3, #2
 801119a:	d100      	bne.n	801119e <__kernel_rem_pio2+0x1c2>
 801119c:	e0b0      	b.n	8011300 <__kernel_rem_pio2+0x324>
 801119e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111a0:	2b02      	cmp	r3, #2
 80111a2:	d153      	bne.n	801124c <__kernel_rem_pio2+0x270>
 80111a4:	0032      	movs	r2, r6
 80111a6:	003b      	movs	r3, r7
 80111a8:	2000      	movs	r0, #0
 80111aa:	4961      	ldr	r1, [pc, #388]	; (8011330 <__kernel_rem_pio2+0x354>)
 80111ac:	f7f1 fa54 	bl	8002658 <__aeabi_dsub>
 80111b0:	0006      	movs	r6, r0
 80111b2:	000f      	movs	r7, r1
 80111b4:	2c00      	cmp	r4, #0
 80111b6:	d049      	beq.n	801124c <__kernel_rem_pio2+0x270>
 80111b8:	9a02      	ldr	r2, [sp, #8]
 80111ba:	2000      	movs	r0, #0
 80111bc:	495c      	ldr	r1, [pc, #368]	; (8011330 <__kernel_rem_pio2+0x354>)
 80111be:	f000 fc4f 	bl	8011a60 <scalbn>
 80111c2:	0002      	movs	r2, r0
 80111c4:	000b      	movs	r3, r1
 80111c6:	0030      	movs	r0, r6
 80111c8:	0039      	movs	r1, r7
 80111ca:	f7f1 fa45 	bl	8002658 <__aeabi_dsub>
 80111ce:	0006      	movs	r6, r0
 80111d0:	000f      	movs	r7, r1
 80111d2:	e03b      	b.n	801124c <__kernel_rem_pio2+0x270>
 80111d4:	2200      	movs	r2, #0
 80111d6:	4b57      	ldr	r3, [pc, #348]	; (8011334 <__kernel_rem_pio2+0x358>)
 80111d8:	0020      	movs	r0, r4
 80111da:	0029      	movs	r1, r5
 80111dc:	f7f0 ffd0 	bl	8002180 <__aeabi_dmul>
 80111e0:	f7f1 fdea 	bl	8002db8 <__aeabi_d2iz>
 80111e4:	f7f1 fe1e 	bl	8002e24 <__aeabi_i2d>
 80111e8:	2200      	movs	r2, #0
 80111ea:	4b53      	ldr	r3, [pc, #332]	; (8011338 <__kernel_rem_pio2+0x35c>)
 80111ec:	0006      	movs	r6, r0
 80111ee:	000f      	movs	r7, r1
 80111f0:	f7f0 ffc6 	bl	8002180 <__aeabi_dmul>
 80111f4:	0002      	movs	r2, r0
 80111f6:	000b      	movs	r3, r1
 80111f8:	0020      	movs	r0, r4
 80111fa:	0029      	movs	r1, r5
 80111fc:	f7f1 fa2c 	bl	8002658 <__aeabi_dsub>
 8011200:	f7f1 fdda 	bl	8002db8 <__aeabi_d2iz>
 8011204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011206:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011208:	c301      	stmia	r3!, {r0}
 801120a:	930b      	str	r3, [sp, #44]	; 0x2c
 801120c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801120e:	0030      	movs	r0, r6
 8011210:	3b01      	subs	r3, #1
 8011212:	930a      	str	r3, [sp, #40]	; 0x28
 8011214:	00db      	lsls	r3, r3, #3
 8011216:	18d3      	adds	r3, r2, r3
 8011218:	0039      	movs	r1, r7
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	f7f0 f83f 	bl	80012a0 <__aeabi_dadd>
 8011222:	0004      	movs	r4, r0
 8011224:	000d      	movs	r5, r1
 8011226:	e75d      	b.n	80110e4 <__kernel_rem_pio2+0x108>
 8011228:	9b02      	ldr	r3, [sp, #8]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d107      	bne.n	801123e <__kernel_rem_pio2+0x262>
 801122e:	9b04      	ldr	r3, [sp, #16]
 8011230:	aa12      	add	r2, sp, #72	; 0x48
 8011232:	3b01      	subs	r3, #1
 8011234:	009b      	lsls	r3, r3, #2
 8011236:	5898      	ldr	r0, [r3, r2]
 8011238:	15c3      	asrs	r3, r0, #23
 801123a:	930a      	str	r3, [sp, #40]	; 0x28
 801123c:	e795      	b.n	801116a <__kernel_rem_pio2+0x18e>
 801123e:	2200      	movs	r2, #0
 8011240:	4b3e      	ldr	r3, [pc, #248]	; (801133c <__kernel_rem_pio2+0x360>)
 8011242:	f7ef f923 	bl	800048c <__aeabi_dcmpge>
 8011246:	2800      	cmp	r0, #0
 8011248:	d136      	bne.n	80112b8 <__kernel_rem_pio2+0x2dc>
 801124a:	900a      	str	r0, [sp, #40]	; 0x28
 801124c:	2200      	movs	r2, #0
 801124e:	2300      	movs	r3, #0
 8011250:	0030      	movs	r0, r6
 8011252:	0039      	movs	r1, r7
 8011254:	f7ef f8f6 	bl	8000444 <__aeabi_dcmpeq>
 8011258:	2800      	cmp	r0, #0
 801125a:	d100      	bne.n	801125e <__kernel_rem_pio2+0x282>
 801125c:	e0b9      	b.n	80113d2 <__kernel_rem_pio2+0x3f6>
 801125e:	2200      	movs	r2, #0
 8011260:	9b04      	ldr	r3, [sp, #16]
 8011262:	3b01      	subs	r3, #1
 8011264:	9300      	str	r3, [sp, #0]
 8011266:	9908      	ldr	r1, [sp, #32]
 8011268:	428b      	cmp	r3, r1
 801126a:	da52      	bge.n	8011312 <__kernel_rem_pio2+0x336>
 801126c:	2a00      	cmp	r2, #0
 801126e:	d100      	bne.n	8011272 <__kernel_rem_pio2+0x296>
 8011270:	e095      	b.n	801139e <__kernel_rem_pio2+0x3c2>
 8011272:	9b02      	ldr	r3, [sp, #8]
 8011274:	aa12      	add	r2, sp, #72	; 0x48
 8011276:	3b18      	subs	r3, #24
 8011278:	9302      	str	r3, [sp, #8]
 801127a:	9b00      	ldr	r3, [sp, #0]
 801127c:	009b      	lsls	r3, r3, #2
 801127e:	589b      	ldr	r3, [r3, r2]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d100      	bne.n	8011286 <__kernel_rem_pio2+0x2aa>
 8011284:	e0a1      	b.n	80113ca <__kernel_rem_pio2+0x3ee>
 8011286:	2000      	movs	r0, #0
 8011288:	9a02      	ldr	r2, [sp, #8]
 801128a:	4929      	ldr	r1, [pc, #164]	; (8011330 <__kernel_rem_pio2+0x354>)
 801128c:	f000 fbe8 	bl	8011a60 <scalbn>
 8011290:	0006      	movs	r6, r0
 8011292:	000f      	movs	r7, r1
 8011294:	9c00      	ldr	r4, [sp, #0]
 8011296:	2c00      	cmp	r4, #0
 8011298:	db00      	blt.n	801129c <__kernel_rem_pio2+0x2c0>
 801129a:	e0d9      	b.n	8011450 <__kernel_rem_pio2+0x474>
 801129c:	2600      	movs	r6, #0
 801129e:	9d00      	ldr	r5, [sp, #0]
 80112a0:	2d00      	cmp	r5, #0
 80112a2:	da00      	bge.n	80112a6 <__kernel_rem_pio2+0x2ca>
 80112a4:	e10c      	b.n	80114c0 <__kernel_rem_pio2+0x4e4>
 80112a6:	ab76      	add	r3, sp, #472	; 0x1d8
 80112a8:	00ef      	lsls	r7, r5, #3
 80112aa:	2400      	movs	r4, #0
 80112ac:	18ff      	adds	r7, r7, r3
 80112ae:	2300      	movs	r3, #0
 80112b0:	9302      	str	r3, [sp, #8]
 80112b2:	9403      	str	r4, [sp, #12]
 80112b4:	2400      	movs	r4, #0
 80112b6:	e0f4      	b.n	80114a2 <__kernel_rem_pio2+0x4c6>
 80112b8:	2302      	movs	r3, #2
 80112ba:	930a      	str	r3, [sp, #40]	; 0x28
 80112bc:	e758      	b.n	8011170 <__kernel_rem_pio2+0x194>
 80112be:	9b00      	ldr	r3, [sp, #0]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	2c00      	cmp	r4, #0
 80112c4:	d10b      	bne.n	80112de <__kernel_rem_pio2+0x302>
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d003      	beq.n	80112d2 <__kernel_rem_pio2+0x2f6>
 80112ca:	9c00      	ldr	r4, [sp, #0]
 80112cc:	1ac3      	subs	r3, r0, r3
 80112ce:	6023      	str	r3, [r4, #0]
 80112d0:	002b      	movs	r3, r5
 80112d2:	9c00      	ldr	r4, [sp, #0]
 80112d4:	3201      	adds	r2, #1
 80112d6:	3404      	adds	r4, #4
 80112d8:	9400      	str	r4, [sp, #0]
 80112da:	001c      	movs	r4, r3
 80112dc:	e752      	b.n	8011184 <__kernel_rem_pio2+0x1a8>
 80112de:	4661      	mov	r1, ip
 80112e0:	1acb      	subs	r3, r1, r3
 80112e2:	9900      	ldr	r1, [sp, #0]
 80112e4:	600b      	str	r3, [r1, #0]
 80112e6:	0023      	movs	r3, r4
 80112e8:	e7f3      	b.n	80112d2 <__kernel_rem_pio2+0x2f6>
 80112ea:	9b04      	ldr	r3, [sp, #16]
 80112ec:	aa12      	add	r2, sp, #72	; 0x48
 80112ee:	3b01      	subs	r3, #1
 80112f0:	009b      	lsls	r3, r3, #2
 80112f2:	589a      	ldr	r2, [r3, r2]
 80112f4:	9200      	str	r2, [sp, #0]
 80112f6:	0252      	lsls	r2, r2, #9
 80112f8:	0a52      	lsrs	r2, r2, #9
 80112fa:	a912      	add	r1, sp, #72	; 0x48
 80112fc:	505a      	str	r2, [r3, r1]
 80112fe:	e74e      	b.n	801119e <__kernel_rem_pio2+0x1c2>
 8011300:	9b04      	ldr	r3, [sp, #16]
 8011302:	aa12      	add	r2, sp, #72	; 0x48
 8011304:	3b01      	subs	r3, #1
 8011306:	009b      	lsls	r3, r3, #2
 8011308:	589a      	ldr	r2, [r3, r2]
 801130a:	9200      	str	r2, [sp, #0]
 801130c:	0292      	lsls	r2, r2, #10
 801130e:	0a92      	lsrs	r2, r2, #10
 8011310:	e7f3      	b.n	80112fa <__kernel_rem_pio2+0x31e>
 8011312:	0099      	lsls	r1, r3, #2
 8011314:	a812      	add	r0, sp, #72	; 0x48
 8011316:	5809      	ldr	r1, [r1, r0]
 8011318:	3b01      	subs	r3, #1
 801131a:	430a      	orrs	r2, r1
 801131c:	e7a3      	b.n	8011266 <__kernel_rem_pio2+0x28a>
 801131e:	46c0      	nop			; (mov r8, r8)
 8011320:	fffffd84 	.word	0xfffffd84
 8011324:	08012698 	.word	0x08012698
 8011328:	40200000 	.word	0x40200000
 801132c:	00ffffff 	.word	0x00ffffff
 8011330:	3ff00000 	.word	0x3ff00000
 8011334:	3e700000 	.word	0x3e700000
 8011338:	41700000 	.word	0x41700000
 801133c:	3fe00000 	.word	0x3fe00000
 8011340:	3301      	adds	r3, #1
 8011342:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011344:	009a      	lsls	r2, r3, #2
 8011346:	4252      	negs	r2, r2
 8011348:	588a      	ldr	r2, [r1, r2]
 801134a:	2a00      	cmp	r2, #0
 801134c:	d0f8      	beq.n	8011340 <__kernel_rem_pio2+0x364>
 801134e:	9a04      	ldr	r2, [sp, #16]
 8011350:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011352:	1c57      	adds	r7, r2, #1
 8011354:	1854      	adds	r4, r2, r1
 8011356:	00e4      	lsls	r4, r4, #3
 8011358:	aa26      	add	r2, sp, #152	; 0x98
 801135a:	1914      	adds	r4, r2, r4
 801135c:	9a04      	ldr	r2, [sp, #16]
 801135e:	18d3      	adds	r3, r2, r3
 8011360:	9304      	str	r3, [sp, #16]
 8011362:	9b04      	ldr	r3, [sp, #16]
 8011364:	42bb      	cmp	r3, r7
 8011366:	da00      	bge.n	801136a <__kernel_rem_pio2+0x38e>
 8011368:	e6b0      	b.n	80110cc <__kernel_rem_pio2+0xf0>
 801136a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801136c:	00bb      	lsls	r3, r7, #2
 801136e:	58d0      	ldr	r0, [r2, r3]
 8011370:	f7f1 fd58 	bl	8002e24 <__aeabi_i2d>
 8011374:	2200      	movs	r2, #0
 8011376:	2300      	movs	r3, #0
 8011378:	0026      	movs	r6, r4
 801137a:	2500      	movs	r5, #0
 801137c:	6020      	str	r0, [r4, #0]
 801137e:	6061      	str	r1, [r4, #4]
 8011380:	9200      	str	r2, [sp, #0]
 8011382:	9301      	str	r3, [sp, #4]
 8011384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011386:	429d      	cmp	r5, r3
 8011388:	dd0b      	ble.n	80113a2 <__kernel_rem_pio2+0x3c6>
 801138a:	00fb      	lsls	r3, r7, #3
 801138c:	aa76      	add	r2, sp, #472	; 0x1d8
 801138e:	18d3      	adds	r3, r2, r3
 8011390:	3701      	adds	r7, #1
 8011392:	9900      	ldr	r1, [sp, #0]
 8011394:	9a01      	ldr	r2, [sp, #4]
 8011396:	3408      	adds	r4, #8
 8011398:	6019      	str	r1, [r3, #0]
 801139a:	605a      	str	r2, [r3, #4]
 801139c:	e7e1      	b.n	8011362 <__kernel_rem_pio2+0x386>
 801139e:	2301      	movs	r3, #1
 80113a0:	e7cf      	b.n	8011342 <__kernel_rem_pio2+0x366>
 80113a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113a4:	00e9      	lsls	r1, r5, #3
 80113a6:	1859      	adds	r1, r3, r1
 80113a8:	6808      	ldr	r0, [r1, #0]
 80113aa:	6849      	ldr	r1, [r1, #4]
 80113ac:	6832      	ldr	r2, [r6, #0]
 80113ae:	6873      	ldr	r3, [r6, #4]
 80113b0:	f7f0 fee6 	bl	8002180 <__aeabi_dmul>
 80113b4:	0002      	movs	r2, r0
 80113b6:	000b      	movs	r3, r1
 80113b8:	9800      	ldr	r0, [sp, #0]
 80113ba:	9901      	ldr	r1, [sp, #4]
 80113bc:	f7ef ff70 	bl	80012a0 <__aeabi_dadd>
 80113c0:	3501      	adds	r5, #1
 80113c2:	9000      	str	r0, [sp, #0]
 80113c4:	9101      	str	r1, [sp, #4]
 80113c6:	3e08      	subs	r6, #8
 80113c8:	e7dc      	b.n	8011384 <__kernel_rem_pio2+0x3a8>
 80113ca:	9b00      	ldr	r3, [sp, #0]
 80113cc:	3b01      	subs	r3, #1
 80113ce:	9300      	str	r3, [sp, #0]
 80113d0:	e74f      	b.n	8011272 <__kernel_rem_pio2+0x296>
 80113d2:	9b02      	ldr	r3, [sp, #8]
 80113d4:	0030      	movs	r0, r6
 80113d6:	425a      	negs	r2, r3
 80113d8:	0039      	movs	r1, r7
 80113da:	f000 fb41 	bl	8011a60 <scalbn>
 80113de:	2200      	movs	r2, #0
 80113e0:	4bb6      	ldr	r3, [pc, #728]	; (80116bc <__kernel_rem_pio2+0x6e0>)
 80113e2:	0004      	movs	r4, r0
 80113e4:	000d      	movs	r5, r1
 80113e6:	f7ef f851 	bl	800048c <__aeabi_dcmpge>
 80113ea:	2800      	cmp	r0, #0
 80113ec:	d025      	beq.n	801143a <__kernel_rem_pio2+0x45e>
 80113ee:	2200      	movs	r2, #0
 80113f0:	4bb3      	ldr	r3, [pc, #716]	; (80116c0 <__kernel_rem_pio2+0x6e4>)
 80113f2:	0020      	movs	r0, r4
 80113f4:	0029      	movs	r1, r5
 80113f6:	f7f0 fec3 	bl	8002180 <__aeabi_dmul>
 80113fa:	f7f1 fcdd 	bl	8002db8 <__aeabi_d2iz>
 80113fe:	9b04      	ldr	r3, [sp, #16]
 8011400:	0006      	movs	r6, r0
 8011402:	009f      	lsls	r7, r3, #2
 8011404:	f7f1 fd0e 	bl	8002e24 <__aeabi_i2d>
 8011408:	2200      	movs	r2, #0
 801140a:	4bac      	ldr	r3, [pc, #688]	; (80116bc <__kernel_rem_pio2+0x6e0>)
 801140c:	f7f0 feb8 	bl	8002180 <__aeabi_dmul>
 8011410:	0002      	movs	r2, r0
 8011412:	000b      	movs	r3, r1
 8011414:	0020      	movs	r0, r4
 8011416:	0029      	movs	r1, r5
 8011418:	f7f1 f91e 	bl	8002658 <__aeabi_dsub>
 801141c:	f7f1 fccc 	bl	8002db8 <__aeabi_d2iz>
 8011420:	ab12      	add	r3, sp, #72	; 0x48
 8011422:	51d8      	str	r0, [r3, r7]
 8011424:	9b04      	ldr	r3, [sp, #16]
 8011426:	aa12      	add	r2, sp, #72	; 0x48
 8011428:	3301      	adds	r3, #1
 801142a:	9300      	str	r3, [sp, #0]
 801142c:	9b02      	ldr	r3, [sp, #8]
 801142e:	3318      	adds	r3, #24
 8011430:	9302      	str	r3, [sp, #8]
 8011432:	9b00      	ldr	r3, [sp, #0]
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	509e      	str	r6, [r3, r2]
 8011438:	e725      	b.n	8011286 <__kernel_rem_pio2+0x2aa>
 801143a:	9b04      	ldr	r3, [sp, #16]
 801143c:	0020      	movs	r0, r4
 801143e:	0029      	movs	r1, r5
 8011440:	009e      	lsls	r6, r3, #2
 8011442:	f7f1 fcb9 	bl	8002db8 <__aeabi_d2iz>
 8011446:	ab12      	add	r3, sp, #72	; 0x48
 8011448:	5198      	str	r0, [r3, r6]
 801144a:	9b04      	ldr	r3, [sp, #16]
 801144c:	9300      	str	r3, [sp, #0]
 801144e:	e71a      	b.n	8011286 <__kernel_rem_pio2+0x2aa>
 8011450:	00e5      	lsls	r5, r4, #3
 8011452:	ab76      	add	r3, sp, #472	; 0x1d8
 8011454:	aa12      	add	r2, sp, #72	; 0x48
 8011456:	195d      	adds	r5, r3, r5
 8011458:	00a3      	lsls	r3, r4, #2
 801145a:	5898      	ldr	r0, [r3, r2]
 801145c:	f7f1 fce2 	bl	8002e24 <__aeabi_i2d>
 8011460:	0032      	movs	r2, r6
 8011462:	003b      	movs	r3, r7
 8011464:	f7f0 fe8c 	bl	8002180 <__aeabi_dmul>
 8011468:	2200      	movs	r2, #0
 801146a:	6028      	str	r0, [r5, #0]
 801146c:	6069      	str	r1, [r5, #4]
 801146e:	4b94      	ldr	r3, [pc, #592]	; (80116c0 <__kernel_rem_pio2+0x6e4>)
 8011470:	0030      	movs	r0, r6
 8011472:	0039      	movs	r1, r7
 8011474:	f7f0 fe84 	bl	8002180 <__aeabi_dmul>
 8011478:	3c01      	subs	r4, #1
 801147a:	0006      	movs	r6, r0
 801147c:	000f      	movs	r7, r1
 801147e:	e70a      	b.n	8011296 <__kernel_rem_pio2+0x2ba>
 8011480:	4b90      	ldr	r3, [pc, #576]	; (80116c4 <__kernel_rem_pio2+0x6e8>)
 8011482:	00e1      	lsls	r1, r4, #3
 8011484:	1859      	adds	r1, r3, r1
 8011486:	6808      	ldr	r0, [r1, #0]
 8011488:	6849      	ldr	r1, [r1, #4]
 801148a:	cf0c      	ldmia	r7!, {r2, r3}
 801148c:	f7f0 fe78 	bl	8002180 <__aeabi_dmul>
 8011490:	0002      	movs	r2, r0
 8011492:	000b      	movs	r3, r1
 8011494:	9802      	ldr	r0, [sp, #8]
 8011496:	9903      	ldr	r1, [sp, #12]
 8011498:	f7ef ff02 	bl	80012a0 <__aeabi_dadd>
 801149c:	9002      	str	r0, [sp, #8]
 801149e:	9103      	str	r1, [sp, #12]
 80114a0:	3401      	adds	r4, #1
 80114a2:	9b08      	ldr	r3, [sp, #32]
 80114a4:	429c      	cmp	r4, r3
 80114a6:	dc01      	bgt.n	80114ac <__kernel_rem_pio2+0x4d0>
 80114a8:	42a6      	cmp	r6, r4
 80114aa:	dae9      	bge.n	8011480 <__kernel_rem_pio2+0x4a4>
 80114ac:	00f3      	lsls	r3, r6, #3
 80114ae:	aa4e      	add	r2, sp, #312	; 0x138
 80114b0:	18d3      	adds	r3, r2, r3
 80114b2:	3d01      	subs	r5, #1
 80114b4:	9902      	ldr	r1, [sp, #8]
 80114b6:	9a03      	ldr	r2, [sp, #12]
 80114b8:	3601      	adds	r6, #1
 80114ba:	6019      	str	r1, [r3, #0]
 80114bc:	605a      	str	r2, [r3, #4]
 80114be:	e6ef      	b.n	80112a0 <__kernel_rem_pio2+0x2c4>
 80114c0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80114c2:	2b02      	cmp	r3, #2
 80114c4:	dc0b      	bgt.n	80114de <__kernel_rem_pio2+0x502>
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	dd00      	ble.n	80114cc <__kernel_rem_pio2+0x4f0>
 80114ca:	e08a      	b.n	80115e2 <__kernel_rem_pio2+0x606>
 80114cc:	d055      	beq.n	801157a <__kernel_rem_pio2+0x59e>
 80114ce:	2007      	movs	r0, #7
 80114d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114d2:	4003      	ands	r3, r0
 80114d4:	0018      	movs	r0, r3
 80114d6:	239f      	movs	r3, #159	; 0x9f
 80114d8:	009b      	lsls	r3, r3, #2
 80114da:	449d      	add	sp, r3
 80114dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114de:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80114e0:	2b03      	cmp	r3, #3
 80114e2:	d1f4      	bne.n	80114ce <__kernel_rem_pio2+0x4f2>
 80114e4:	9b00      	ldr	r3, [sp, #0]
 80114e6:	00dc      	lsls	r4, r3, #3
 80114e8:	ab4e      	add	r3, sp, #312	; 0x138
 80114ea:	191c      	adds	r4, r3, r4
 80114ec:	0025      	movs	r5, r4
 80114ee:	9b00      	ldr	r3, [sp, #0]
 80114f0:	9302      	str	r3, [sp, #8]
 80114f2:	9b02      	ldr	r3, [sp, #8]
 80114f4:	3d08      	subs	r5, #8
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	dd00      	ble.n	80114fc <__kernel_rem_pio2+0x520>
 80114fa:	e083      	b.n	8011604 <__kernel_rem_pio2+0x628>
 80114fc:	9d00      	ldr	r5, [sp, #0]
 80114fe:	3c08      	subs	r4, #8
 8011500:	2d01      	cmp	r5, #1
 8011502:	dd00      	ble.n	8011506 <__kernel_rem_pio2+0x52a>
 8011504:	e0a0      	b.n	8011648 <__kernel_rem_pio2+0x66c>
 8011506:	2400      	movs	r4, #0
 8011508:	0021      	movs	r1, r4
 801150a:	9b00      	ldr	r3, [sp, #0]
 801150c:	2b01      	cmp	r3, #1
 801150e:	dd00      	ble.n	8011512 <__kernel_rem_pio2+0x536>
 8011510:	e0b8      	b.n	8011684 <__kernel_rem_pio2+0x6a8>
 8011512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011514:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8011516:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8011518:	9d50      	ldr	r5, [sp, #320]	; 0x140
 801151a:	9851      	ldr	r0, [sp, #324]	; 0x144
 801151c:	2b00      	cmp	r3, #0
 801151e:	d000      	beq.n	8011522 <__kernel_rem_pio2+0x546>
 8011520:	e0be      	b.n	80116a0 <__kernel_rem_pio2+0x6c4>
 8011522:	0033      	movs	r3, r6
 8011524:	003a      	movs	r2, r7
 8011526:	9e07      	ldr	r6, [sp, #28]
 8011528:	6032      	str	r2, [r6, #0]
 801152a:	6073      	str	r3, [r6, #4]
 801152c:	002a      	movs	r2, r5
 801152e:	0003      	movs	r3, r0
 8011530:	60b2      	str	r2, [r6, #8]
 8011532:	60f3      	str	r3, [r6, #12]
 8011534:	0022      	movs	r2, r4
 8011536:	000b      	movs	r3, r1
 8011538:	6132      	str	r2, [r6, #16]
 801153a:	6173      	str	r3, [r6, #20]
 801153c:	e7c7      	b.n	80114ce <__kernel_rem_pio2+0x4f2>
 801153e:	9b00      	ldr	r3, [sp, #0]
 8011540:	aa4e      	add	r2, sp, #312	; 0x138
 8011542:	00db      	lsls	r3, r3, #3
 8011544:	18d3      	adds	r3, r2, r3
 8011546:	0028      	movs	r0, r5
 8011548:	681a      	ldr	r2, [r3, #0]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	0021      	movs	r1, r4
 801154e:	f7ef fea7 	bl	80012a0 <__aeabi_dadd>
 8011552:	0005      	movs	r5, r0
 8011554:	000c      	movs	r4, r1
 8011556:	9b00      	ldr	r3, [sp, #0]
 8011558:	3b01      	subs	r3, #1
 801155a:	9300      	str	r3, [sp, #0]
 801155c:	9b00      	ldr	r3, [sp, #0]
 801155e:	2b00      	cmp	r3, #0
 8011560:	daed      	bge.n	801153e <__kernel_rem_pio2+0x562>
 8011562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011564:	2b00      	cmp	r3, #0
 8011566:	d002      	beq.n	801156e <__kernel_rem_pio2+0x592>
 8011568:	2380      	movs	r3, #128	; 0x80
 801156a:	061b      	lsls	r3, r3, #24
 801156c:	18e4      	adds	r4, r4, r3
 801156e:	002a      	movs	r2, r5
 8011570:	0023      	movs	r3, r4
 8011572:	9907      	ldr	r1, [sp, #28]
 8011574:	600a      	str	r2, [r1, #0]
 8011576:	604b      	str	r3, [r1, #4]
 8011578:	e7a9      	b.n	80114ce <__kernel_rem_pio2+0x4f2>
 801157a:	9da4      	ldr	r5, [sp, #656]	; 0x290
 801157c:	002c      	movs	r4, r5
 801157e:	e7ed      	b.n	801155c <__kernel_rem_pio2+0x580>
 8011580:	00e3      	lsls	r3, r4, #3
 8011582:	aa4e      	add	r2, sp, #312	; 0x138
 8011584:	18d3      	adds	r3, r2, r3
 8011586:	0030      	movs	r0, r6
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	0029      	movs	r1, r5
 801158e:	f7ef fe87 	bl	80012a0 <__aeabi_dadd>
 8011592:	0006      	movs	r6, r0
 8011594:	000d      	movs	r5, r1
 8011596:	3c01      	subs	r4, #1
 8011598:	2c00      	cmp	r4, #0
 801159a:	daf1      	bge.n	8011580 <__kernel_rem_pio2+0x5a4>
 801159c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801159e:	0029      	movs	r1, r5
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d002      	beq.n	80115aa <__kernel_rem_pio2+0x5ce>
 80115a4:	2380      	movs	r3, #128	; 0x80
 80115a6:	061b      	lsls	r3, r3, #24
 80115a8:	18e9      	adds	r1, r5, r3
 80115aa:	0032      	movs	r2, r6
 80115ac:	000b      	movs	r3, r1
 80115ae:	9907      	ldr	r1, [sp, #28]
 80115b0:	2401      	movs	r4, #1
 80115b2:	600a      	str	r2, [r1, #0]
 80115b4:	604b      	str	r3, [r1, #4]
 80115b6:	984e      	ldr	r0, [sp, #312]	; 0x138
 80115b8:	994f      	ldr	r1, [sp, #316]	; 0x13c
 80115ba:	002b      	movs	r3, r5
 80115bc:	f7f1 f84c 	bl	8002658 <__aeabi_dsub>
 80115c0:	0006      	movs	r6, r0
 80115c2:	000d      	movs	r5, r1
 80115c4:	9b00      	ldr	r3, [sp, #0]
 80115c6:	42a3      	cmp	r3, r4
 80115c8:	da0f      	bge.n	80115ea <__kernel_rem_pio2+0x60e>
 80115ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d002      	beq.n	80115d6 <__kernel_rem_pio2+0x5fa>
 80115d0:	2380      	movs	r3, #128	; 0x80
 80115d2:	061b      	lsls	r3, r3, #24
 80115d4:	18ed      	adds	r5, r5, r3
 80115d6:	0032      	movs	r2, r6
 80115d8:	002b      	movs	r3, r5
 80115da:	9907      	ldr	r1, [sp, #28]
 80115dc:	608a      	str	r2, [r1, #8]
 80115de:	60cb      	str	r3, [r1, #12]
 80115e0:	e775      	b.n	80114ce <__kernel_rem_pio2+0x4f2>
 80115e2:	2600      	movs	r6, #0
 80115e4:	9c00      	ldr	r4, [sp, #0]
 80115e6:	0035      	movs	r5, r6
 80115e8:	e7d6      	b.n	8011598 <__kernel_rem_pio2+0x5bc>
 80115ea:	00e3      	lsls	r3, r4, #3
 80115ec:	aa4e      	add	r2, sp, #312	; 0x138
 80115ee:	18d3      	adds	r3, r2, r3
 80115f0:	0030      	movs	r0, r6
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	0029      	movs	r1, r5
 80115f8:	f7ef fe52 	bl	80012a0 <__aeabi_dadd>
 80115fc:	3401      	adds	r4, #1
 80115fe:	0006      	movs	r6, r0
 8011600:	000d      	movs	r5, r1
 8011602:	e7df      	b.n	80115c4 <__kernel_rem_pio2+0x5e8>
 8011604:	9b02      	ldr	r3, [sp, #8]
 8011606:	68ae      	ldr	r6, [r5, #8]
 8011608:	68ef      	ldr	r7, [r5, #12]
 801160a:	3b01      	subs	r3, #1
 801160c:	9302      	str	r3, [sp, #8]
 801160e:	682a      	ldr	r2, [r5, #0]
 8011610:	686b      	ldr	r3, [r5, #4]
 8011612:	9204      	str	r2, [sp, #16]
 8011614:	9305      	str	r3, [sp, #20]
 8011616:	9804      	ldr	r0, [sp, #16]
 8011618:	9905      	ldr	r1, [sp, #20]
 801161a:	0032      	movs	r2, r6
 801161c:	003b      	movs	r3, r7
 801161e:	f7ef fe3f 	bl	80012a0 <__aeabi_dadd>
 8011622:	0002      	movs	r2, r0
 8011624:	000b      	movs	r3, r1
 8011626:	9008      	str	r0, [sp, #32]
 8011628:	9109      	str	r1, [sp, #36]	; 0x24
 801162a:	9804      	ldr	r0, [sp, #16]
 801162c:	9905      	ldr	r1, [sp, #20]
 801162e:	f7f1 f813 	bl	8002658 <__aeabi_dsub>
 8011632:	0032      	movs	r2, r6
 8011634:	003b      	movs	r3, r7
 8011636:	f7ef fe33 	bl	80012a0 <__aeabi_dadd>
 801163a:	9a08      	ldr	r2, [sp, #32]
 801163c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801163e:	60a8      	str	r0, [r5, #8]
 8011640:	60e9      	str	r1, [r5, #12]
 8011642:	602a      	str	r2, [r5, #0]
 8011644:	606b      	str	r3, [r5, #4]
 8011646:	e754      	b.n	80114f2 <__kernel_rem_pio2+0x516>
 8011648:	6826      	ldr	r6, [r4, #0]
 801164a:	6867      	ldr	r7, [r4, #4]
 801164c:	68a2      	ldr	r2, [r4, #8]
 801164e:	68e3      	ldr	r3, [r4, #12]
 8011650:	0030      	movs	r0, r6
 8011652:	0039      	movs	r1, r7
 8011654:	9202      	str	r2, [sp, #8]
 8011656:	9303      	str	r3, [sp, #12]
 8011658:	f7ef fe22 	bl	80012a0 <__aeabi_dadd>
 801165c:	0002      	movs	r2, r0
 801165e:	000b      	movs	r3, r1
 8011660:	9004      	str	r0, [sp, #16]
 8011662:	9105      	str	r1, [sp, #20]
 8011664:	0030      	movs	r0, r6
 8011666:	0039      	movs	r1, r7
 8011668:	f7f0 fff6 	bl	8002658 <__aeabi_dsub>
 801166c:	9a02      	ldr	r2, [sp, #8]
 801166e:	9b03      	ldr	r3, [sp, #12]
 8011670:	f7ef fe16 	bl	80012a0 <__aeabi_dadd>
 8011674:	9a04      	ldr	r2, [sp, #16]
 8011676:	9b05      	ldr	r3, [sp, #20]
 8011678:	60a0      	str	r0, [r4, #8]
 801167a:	60e1      	str	r1, [r4, #12]
 801167c:	6022      	str	r2, [r4, #0]
 801167e:	6063      	str	r3, [r4, #4]
 8011680:	3d01      	subs	r5, #1
 8011682:	e73c      	b.n	80114fe <__kernel_rem_pio2+0x522>
 8011684:	9b00      	ldr	r3, [sp, #0]
 8011686:	aa4e      	add	r2, sp, #312	; 0x138
 8011688:	00db      	lsls	r3, r3, #3
 801168a:	18d3      	adds	r3, r2, r3
 801168c:	0020      	movs	r0, r4
 801168e:	681a      	ldr	r2, [r3, #0]
 8011690:	685b      	ldr	r3, [r3, #4]
 8011692:	f7ef fe05 	bl	80012a0 <__aeabi_dadd>
 8011696:	9b00      	ldr	r3, [sp, #0]
 8011698:	0004      	movs	r4, r0
 801169a:	3b01      	subs	r3, #1
 801169c:	9300      	str	r3, [sp, #0]
 801169e:	e734      	b.n	801150a <__kernel_rem_pio2+0x52e>
 80116a0:	9b07      	ldr	r3, [sp, #28]
 80116a2:	9a07      	ldr	r2, [sp, #28]
 80116a4:	601f      	str	r7, [r3, #0]
 80116a6:	2380      	movs	r3, #128	; 0x80
 80116a8:	061b      	lsls	r3, r3, #24
 80116aa:	18f6      	adds	r6, r6, r3
 80116ac:	18c0      	adds	r0, r0, r3
 80116ae:	18c9      	adds	r1, r1, r3
 80116b0:	6056      	str	r6, [r2, #4]
 80116b2:	6095      	str	r5, [r2, #8]
 80116b4:	60d0      	str	r0, [r2, #12]
 80116b6:	6114      	str	r4, [r2, #16]
 80116b8:	6151      	str	r1, [r2, #20]
 80116ba:	e708      	b.n	80114ce <__kernel_rem_pio2+0x4f2>
 80116bc:	41700000 	.word	0x41700000
 80116c0:	3e700000 	.word	0x3e700000
 80116c4:	08012658 	.word	0x08012658

080116c8 <__kernel_sin>:
 80116c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116ca:	b089      	sub	sp, #36	; 0x24
 80116cc:	9202      	str	r2, [sp, #8]
 80116ce:	9303      	str	r3, [sp, #12]
 80116d0:	22f9      	movs	r2, #249	; 0xf9
 80116d2:	004b      	lsls	r3, r1, #1
 80116d4:	0007      	movs	r7, r0
 80116d6:	000e      	movs	r6, r1
 80116d8:	085b      	lsrs	r3, r3, #1
 80116da:	0592      	lsls	r2, r2, #22
 80116dc:	4293      	cmp	r3, r2
 80116de:	da03      	bge.n	80116e8 <__kernel_sin+0x20>
 80116e0:	f7f1 fb6a 	bl	8002db8 <__aeabi_d2iz>
 80116e4:	2800      	cmp	r0, #0
 80116e6:	d04c      	beq.n	8011782 <__kernel_sin+0xba>
 80116e8:	003a      	movs	r2, r7
 80116ea:	0033      	movs	r3, r6
 80116ec:	0038      	movs	r0, r7
 80116ee:	0031      	movs	r1, r6
 80116f0:	f7f0 fd46 	bl	8002180 <__aeabi_dmul>
 80116f4:	0004      	movs	r4, r0
 80116f6:	000d      	movs	r5, r1
 80116f8:	0002      	movs	r2, r0
 80116fa:	000b      	movs	r3, r1
 80116fc:	0038      	movs	r0, r7
 80116fe:	0031      	movs	r1, r6
 8011700:	f7f0 fd3e 	bl	8002180 <__aeabi_dmul>
 8011704:	4a39      	ldr	r2, [pc, #228]	; (80117ec <__kernel_sin+0x124>)
 8011706:	9000      	str	r0, [sp, #0]
 8011708:	9101      	str	r1, [sp, #4]
 801170a:	4b39      	ldr	r3, [pc, #228]	; (80117f0 <__kernel_sin+0x128>)
 801170c:	0020      	movs	r0, r4
 801170e:	0029      	movs	r1, r5
 8011710:	f7f0 fd36 	bl	8002180 <__aeabi_dmul>
 8011714:	4a37      	ldr	r2, [pc, #220]	; (80117f4 <__kernel_sin+0x12c>)
 8011716:	4b38      	ldr	r3, [pc, #224]	; (80117f8 <__kernel_sin+0x130>)
 8011718:	f7f0 ff9e 	bl	8002658 <__aeabi_dsub>
 801171c:	0022      	movs	r2, r4
 801171e:	002b      	movs	r3, r5
 8011720:	f7f0 fd2e 	bl	8002180 <__aeabi_dmul>
 8011724:	4a35      	ldr	r2, [pc, #212]	; (80117fc <__kernel_sin+0x134>)
 8011726:	4b36      	ldr	r3, [pc, #216]	; (8011800 <__kernel_sin+0x138>)
 8011728:	f7ef fdba 	bl	80012a0 <__aeabi_dadd>
 801172c:	0022      	movs	r2, r4
 801172e:	002b      	movs	r3, r5
 8011730:	f7f0 fd26 	bl	8002180 <__aeabi_dmul>
 8011734:	4a33      	ldr	r2, [pc, #204]	; (8011804 <__kernel_sin+0x13c>)
 8011736:	4b34      	ldr	r3, [pc, #208]	; (8011808 <__kernel_sin+0x140>)
 8011738:	f7f0 ff8e 	bl	8002658 <__aeabi_dsub>
 801173c:	0022      	movs	r2, r4
 801173e:	002b      	movs	r3, r5
 8011740:	f7f0 fd1e 	bl	8002180 <__aeabi_dmul>
 8011744:	4b31      	ldr	r3, [pc, #196]	; (801180c <__kernel_sin+0x144>)
 8011746:	4a32      	ldr	r2, [pc, #200]	; (8011810 <__kernel_sin+0x148>)
 8011748:	f7ef fdaa 	bl	80012a0 <__aeabi_dadd>
 801174c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801174e:	9004      	str	r0, [sp, #16]
 8011750:	9105      	str	r1, [sp, #20]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d119      	bne.n	801178a <__kernel_sin+0xc2>
 8011756:	0002      	movs	r2, r0
 8011758:	000b      	movs	r3, r1
 801175a:	0020      	movs	r0, r4
 801175c:	0029      	movs	r1, r5
 801175e:	f7f0 fd0f 	bl	8002180 <__aeabi_dmul>
 8011762:	4a2c      	ldr	r2, [pc, #176]	; (8011814 <__kernel_sin+0x14c>)
 8011764:	4b2c      	ldr	r3, [pc, #176]	; (8011818 <__kernel_sin+0x150>)
 8011766:	f7f0 ff77 	bl	8002658 <__aeabi_dsub>
 801176a:	9a00      	ldr	r2, [sp, #0]
 801176c:	9b01      	ldr	r3, [sp, #4]
 801176e:	f7f0 fd07 	bl	8002180 <__aeabi_dmul>
 8011772:	0002      	movs	r2, r0
 8011774:	000b      	movs	r3, r1
 8011776:	0038      	movs	r0, r7
 8011778:	0031      	movs	r1, r6
 801177a:	f7ef fd91 	bl	80012a0 <__aeabi_dadd>
 801177e:	0007      	movs	r7, r0
 8011780:	000e      	movs	r6, r1
 8011782:	0038      	movs	r0, r7
 8011784:	0031      	movs	r1, r6
 8011786:	b009      	add	sp, #36	; 0x24
 8011788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801178a:	2200      	movs	r2, #0
 801178c:	9802      	ldr	r0, [sp, #8]
 801178e:	9903      	ldr	r1, [sp, #12]
 8011790:	4b22      	ldr	r3, [pc, #136]	; (801181c <__kernel_sin+0x154>)
 8011792:	f7f0 fcf5 	bl	8002180 <__aeabi_dmul>
 8011796:	9a04      	ldr	r2, [sp, #16]
 8011798:	9b05      	ldr	r3, [sp, #20]
 801179a:	9006      	str	r0, [sp, #24]
 801179c:	9107      	str	r1, [sp, #28]
 801179e:	9800      	ldr	r0, [sp, #0]
 80117a0:	9901      	ldr	r1, [sp, #4]
 80117a2:	f7f0 fced 	bl	8002180 <__aeabi_dmul>
 80117a6:	0002      	movs	r2, r0
 80117a8:	000b      	movs	r3, r1
 80117aa:	9806      	ldr	r0, [sp, #24]
 80117ac:	9907      	ldr	r1, [sp, #28]
 80117ae:	f7f0 ff53 	bl	8002658 <__aeabi_dsub>
 80117b2:	0022      	movs	r2, r4
 80117b4:	002b      	movs	r3, r5
 80117b6:	f7f0 fce3 	bl	8002180 <__aeabi_dmul>
 80117ba:	9a02      	ldr	r2, [sp, #8]
 80117bc:	9b03      	ldr	r3, [sp, #12]
 80117be:	f7f0 ff4b 	bl	8002658 <__aeabi_dsub>
 80117c2:	4a14      	ldr	r2, [pc, #80]	; (8011814 <__kernel_sin+0x14c>)
 80117c4:	0004      	movs	r4, r0
 80117c6:	000d      	movs	r5, r1
 80117c8:	9800      	ldr	r0, [sp, #0]
 80117ca:	9901      	ldr	r1, [sp, #4]
 80117cc:	4b12      	ldr	r3, [pc, #72]	; (8011818 <__kernel_sin+0x150>)
 80117ce:	f7f0 fcd7 	bl	8002180 <__aeabi_dmul>
 80117d2:	0002      	movs	r2, r0
 80117d4:	000b      	movs	r3, r1
 80117d6:	0020      	movs	r0, r4
 80117d8:	0029      	movs	r1, r5
 80117da:	f7ef fd61 	bl	80012a0 <__aeabi_dadd>
 80117de:	0002      	movs	r2, r0
 80117e0:	000b      	movs	r3, r1
 80117e2:	0038      	movs	r0, r7
 80117e4:	0031      	movs	r1, r6
 80117e6:	f7f0 ff37 	bl	8002658 <__aeabi_dsub>
 80117ea:	e7c8      	b.n	801177e <__kernel_sin+0xb6>
 80117ec:	5acfd57c 	.word	0x5acfd57c
 80117f0:	3de5d93a 	.word	0x3de5d93a
 80117f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80117f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80117fc:	57b1fe7d 	.word	0x57b1fe7d
 8011800:	3ec71de3 	.word	0x3ec71de3
 8011804:	19c161d5 	.word	0x19c161d5
 8011808:	3f2a01a0 	.word	0x3f2a01a0
 801180c:	3f811111 	.word	0x3f811111
 8011810:	1110f8a6 	.word	0x1110f8a6
 8011814:	55555549 	.word	0x55555549
 8011818:	3fc55555 	.word	0x3fc55555
 801181c:	3fe00000 	.word	0x3fe00000

08011820 <finite>:
 8011820:	4b02      	ldr	r3, [pc, #8]	; (801182c <finite+0xc>)
 8011822:	0048      	lsls	r0, r1, #1
 8011824:	0840      	lsrs	r0, r0, #1
 8011826:	18c0      	adds	r0, r0, r3
 8011828:	0fc0      	lsrs	r0, r0, #31
 801182a:	4770      	bx	lr
 801182c:	80100000 	.word	0x80100000

08011830 <floor>:
 8011830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011832:	004b      	lsls	r3, r1, #1
 8011834:	4a3d      	ldr	r2, [pc, #244]	; (801192c <floor+0xfc>)
 8011836:	0d5b      	lsrs	r3, r3, #21
 8011838:	189f      	adds	r7, r3, r2
 801183a:	4684      	mov	ip, r0
 801183c:	000e      	movs	r6, r1
 801183e:	000d      	movs	r5, r1
 8011840:	0004      	movs	r4, r0
 8011842:	9001      	str	r0, [sp, #4]
 8011844:	2f13      	cmp	r7, #19
 8011846:	dc34      	bgt.n	80118b2 <floor+0x82>
 8011848:	2f00      	cmp	r7, #0
 801184a:	da16      	bge.n	801187a <floor+0x4a>
 801184c:	4a38      	ldr	r2, [pc, #224]	; (8011930 <floor+0x100>)
 801184e:	4b39      	ldr	r3, [pc, #228]	; (8011934 <floor+0x104>)
 8011850:	4660      	mov	r0, ip
 8011852:	0031      	movs	r1, r6
 8011854:	f7ef fd24 	bl	80012a0 <__aeabi_dadd>
 8011858:	2200      	movs	r2, #0
 801185a:	2300      	movs	r3, #0
 801185c:	f7ee fe0c 	bl	8000478 <__aeabi_dcmpgt>
 8011860:	2800      	cmp	r0, #0
 8011862:	d007      	beq.n	8011874 <floor+0x44>
 8011864:	2e00      	cmp	r6, #0
 8011866:	da5d      	bge.n	8011924 <floor+0xf4>
 8011868:	0073      	lsls	r3, r6, #1
 801186a:	085b      	lsrs	r3, r3, #1
 801186c:	431c      	orrs	r4, r3
 801186e:	d001      	beq.n	8011874 <floor+0x44>
 8011870:	2400      	movs	r4, #0
 8011872:	4d31      	ldr	r5, [pc, #196]	; (8011938 <floor+0x108>)
 8011874:	46a4      	mov	ip, r4
 8011876:	002e      	movs	r6, r5
 8011878:	e029      	b.n	80118ce <floor+0x9e>
 801187a:	4b30      	ldr	r3, [pc, #192]	; (801193c <floor+0x10c>)
 801187c:	413b      	asrs	r3, r7
 801187e:	9300      	str	r3, [sp, #0]
 8011880:	400b      	ands	r3, r1
 8011882:	4303      	orrs	r3, r0
 8011884:	d023      	beq.n	80118ce <floor+0x9e>
 8011886:	4a2a      	ldr	r2, [pc, #168]	; (8011930 <floor+0x100>)
 8011888:	4b2a      	ldr	r3, [pc, #168]	; (8011934 <floor+0x104>)
 801188a:	4660      	mov	r0, ip
 801188c:	0031      	movs	r1, r6
 801188e:	f7ef fd07 	bl	80012a0 <__aeabi_dadd>
 8011892:	2200      	movs	r2, #0
 8011894:	2300      	movs	r3, #0
 8011896:	f7ee fdef 	bl	8000478 <__aeabi_dcmpgt>
 801189a:	2800      	cmp	r0, #0
 801189c:	d0ea      	beq.n	8011874 <floor+0x44>
 801189e:	2e00      	cmp	r6, #0
 80118a0:	da03      	bge.n	80118aa <floor+0x7a>
 80118a2:	2380      	movs	r3, #128	; 0x80
 80118a4:	035b      	lsls	r3, r3, #13
 80118a6:	413b      	asrs	r3, r7
 80118a8:	18f5      	adds	r5, r6, r3
 80118aa:	9b00      	ldr	r3, [sp, #0]
 80118ac:	2400      	movs	r4, #0
 80118ae:	439d      	bics	r5, r3
 80118b0:	e7e0      	b.n	8011874 <floor+0x44>
 80118b2:	2f33      	cmp	r7, #51	; 0x33
 80118b4:	dd0f      	ble.n	80118d6 <floor+0xa6>
 80118b6:	2380      	movs	r3, #128	; 0x80
 80118b8:	00db      	lsls	r3, r3, #3
 80118ba:	429f      	cmp	r7, r3
 80118bc:	d107      	bne.n	80118ce <floor+0x9e>
 80118be:	0002      	movs	r2, r0
 80118c0:	000b      	movs	r3, r1
 80118c2:	4660      	mov	r0, ip
 80118c4:	0031      	movs	r1, r6
 80118c6:	f7ef fceb 	bl	80012a0 <__aeabi_dadd>
 80118ca:	4684      	mov	ip, r0
 80118cc:	000e      	movs	r6, r1
 80118ce:	4660      	mov	r0, ip
 80118d0:	0031      	movs	r1, r6
 80118d2:	b003      	add	sp, #12
 80118d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118d6:	4a1a      	ldr	r2, [pc, #104]	; (8011940 <floor+0x110>)
 80118d8:	189b      	adds	r3, r3, r2
 80118da:	2201      	movs	r2, #1
 80118dc:	4252      	negs	r2, r2
 80118de:	40da      	lsrs	r2, r3
 80118e0:	9200      	str	r2, [sp, #0]
 80118e2:	4210      	tst	r0, r2
 80118e4:	d0f3      	beq.n	80118ce <floor+0x9e>
 80118e6:	4a12      	ldr	r2, [pc, #72]	; (8011930 <floor+0x100>)
 80118e8:	4b12      	ldr	r3, [pc, #72]	; (8011934 <floor+0x104>)
 80118ea:	4660      	mov	r0, ip
 80118ec:	0031      	movs	r1, r6
 80118ee:	f7ef fcd7 	bl	80012a0 <__aeabi_dadd>
 80118f2:	2200      	movs	r2, #0
 80118f4:	2300      	movs	r3, #0
 80118f6:	f7ee fdbf 	bl	8000478 <__aeabi_dcmpgt>
 80118fa:	2800      	cmp	r0, #0
 80118fc:	d0ba      	beq.n	8011874 <floor+0x44>
 80118fe:	2e00      	cmp	r6, #0
 8011900:	da02      	bge.n	8011908 <floor+0xd8>
 8011902:	2f14      	cmp	r7, #20
 8011904:	d103      	bne.n	801190e <floor+0xde>
 8011906:	3501      	adds	r5, #1
 8011908:	9b00      	ldr	r3, [sp, #0]
 801190a:	439c      	bics	r4, r3
 801190c:	e7b2      	b.n	8011874 <floor+0x44>
 801190e:	2334      	movs	r3, #52	; 0x34
 8011910:	1bdf      	subs	r7, r3, r7
 8011912:	3b33      	subs	r3, #51	; 0x33
 8011914:	40bb      	lsls	r3, r7
 8011916:	18e4      	adds	r4, r4, r3
 8011918:	9b01      	ldr	r3, [sp, #4]
 801191a:	429c      	cmp	r4, r3
 801191c:	419b      	sbcs	r3, r3
 801191e:	425b      	negs	r3, r3
 8011920:	18f5      	adds	r5, r6, r3
 8011922:	e7f1      	b.n	8011908 <floor+0xd8>
 8011924:	2400      	movs	r4, #0
 8011926:	0025      	movs	r5, r4
 8011928:	e7a4      	b.n	8011874 <floor+0x44>
 801192a:	46c0      	nop			; (mov r8, r8)
 801192c:	fffffc01 	.word	0xfffffc01
 8011930:	8800759c 	.word	0x8800759c
 8011934:	7e37e43c 	.word	0x7e37e43c
 8011938:	bff00000 	.word	0xbff00000
 801193c:	000fffff 	.word	0x000fffff
 8011940:	fffffbed 	.word	0xfffffbed

08011944 <nan>:
 8011944:	2000      	movs	r0, #0
 8011946:	4901      	ldr	r1, [pc, #4]	; (801194c <nan+0x8>)
 8011948:	4770      	bx	lr
 801194a:	46c0      	nop			; (mov r8, r8)
 801194c:	7ff80000 	.word	0x7ff80000

08011950 <rint>:
 8011950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011952:	004a      	lsls	r2, r1, #1
 8011954:	4e3e      	ldr	r6, [pc, #248]	; (8011a50 <rint+0x100>)
 8011956:	0d52      	lsrs	r2, r2, #21
 8011958:	b085      	sub	sp, #20
 801195a:	1996      	adds	r6, r2, r6
 801195c:	000d      	movs	r5, r1
 801195e:	0003      	movs	r3, r0
 8011960:	9101      	str	r1, [sp, #4]
 8011962:	0fcc      	lsrs	r4, r1, #31
 8011964:	2e13      	cmp	r6, #19
 8011966:	dc57      	bgt.n	8011a18 <rint+0xc8>
 8011968:	2e00      	cmp	r6, #0
 801196a:	da2a      	bge.n	80119c2 <rint+0x72>
 801196c:	004a      	lsls	r2, r1, #1
 801196e:	0852      	lsrs	r2, r2, #1
 8011970:	4302      	orrs	r2, r0
 8011972:	d024      	beq.n	80119be <rint+0x6e>
 8011974:	030a      	lsls	r2, r1, #12
 8011976:	0b12      	lsrs	r2, r2, #12
 8011978:	4302      	orrs	r2, r0
 801197a:	4253      	negs	r3, r2
 801197c:	4313      	orrs	r3, r2
 801197e:	2280      	movs	r2, #128	; 0x80
 8011980:	0c4d      	lsrs	r5, r1, #17
 8011982:	0312      	lsls	r2, r2, #12
 8011984:	0b1b      	lsrs	r3, r3, #12
 8011986:	4013      	ands	r3, r2
 8011988:	046d      	lsls	r5, r5, #17
 801198a:	432b      	orrs	r3, r5
 801198c:	0019      	movs	r1, r3
 801198e:	4b31      	ldr	r3, [pc, #196]	; (8011a54 <rint+0x104>)
 8011990:	00e2      	lsls	r2, r4, #3
 8011992:	189b      	adds	r3, r3, r2
 8011994:	681e      	ldr	r6, [r3, #0]
 8011996:	685f      	ldr	r7, [r3, #4]
 8011998:	0002      	movs	r2, r0
 801199a:	000b      	movs	r3, r1
 801199c:	0030      	movs	r0, r6
 801199e:	0039      	movs	r1, r7
 80119a0:	f7ef fc7e 	bl	80012a0 <__aeabi_dadd>
 80119a4:	9002      	str	r0, [sp, #8]
 80119a6:	9103      	str	r1, [sp, #12]
 80119a8:	9802      	ldr	r0, [sp, #8]
 80119aa:	9903      	ldr	r1, [sp, #12]
 80119ac:	003b      	movs	r3, r7
 80119ae:	0032      	movs	r2, r6
 80119b0:	f7f0 fe52 	bl	8002658 <__aeabi_dsub>
 80119b4:	004b      	lsls	r3, r1, #1
 80119b6:	085b      	lsrs	r3, r3, #1
 80119b8:	07e4      	lsls	r4, r4, #31
 80119ba:	4323      	orrs	r3, r4
 80119bc:	0019      	movs	r1, r3
 80119be:	b005      	add	sp, #20
 80119c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119c2:	4a25      	ldr	r2, [pc, #148]	; (8011a58 <rint+0x108>)
 80119c4:	4132      	asrs	r2, r6
 80119c6:	0017      	movs	r7, r2
 80119c8:	400f      	ands	r7, r1
 80119ca:	4307      	orrs	r7, r0
 80119cc:	d0f7      	beq.n	80119be <rint+0x6e>
 80119ce:	0852      	lsrs	r2, r2, #1
 80119d0:	0011      	movs	r1, r2
 80119d2:	4029      	ands	r1, r5
 80119d4:	430b      	orrs	r3, r1
 80119d6:	d00a      	beq.n	80119ee <rint+0x9e>
 80119d8:	2300      	movs	r3, #0
 80119da:	2e13      	cmp	r6, #19
 80119dc:	d101      	bne.n	80119e2 <rint+0x92>
 80119de:	2380      	movs	r3, #128	; 0x80
 80119e0:	061b      	lsls	r3, r3, #24
 80119e2:	2780      	movs	r7, #128	; 0x80
 80119e4:	02ff      	lsls	r7, r7, #11
 80119e6:	4137      	asrs	r7, r6
 80119e8:	4395      	bics	r5, r2
 80119ea:	432f      	orrs	r7, r5
 80119ec:	9701      	str	r7, [sp, #4]
 80119ee:	9901      	ldr	r1, [sp, #4]
 80119f0:	001a      	movs	r2, r3
 80119f2:	000b      	movs	r3, r1
 80119f4:	4917      	ldr	r1, [pc, #92]	; (8011a54 <rint+0x104>)
 80119f6:	00e4      	lsls	r4, r4, #3
 80119f8:	190c      	adds	r4, r1, r4
 80119fa:	6865      	ldr	r5, [r4, #4]
 80119fc:	6824      	ldr	r4, [r4, #0]
 80119fe:	0020      	movs	r0, r4
 8011a00:	0029      	movs	r1, r5
 8011a02:	f7ef fc4d 	bl	80012a0 <__aeabi_dadd>
 8011a06:	9002      	str	r0, [sp, #8]
 8011a08:	9103      	str	r1, [sp, #12]
 8011a0a:	9802      	ldr	r0, [sp, #8]
 8011a0c:	9903      	ldr	r1, [sp, #12]
 8011a0e:	0022      	movs	r2, r4
 8011a10:	002b      	movs	r3, r5
 8011a12:	f7f0 fe21 	bl	8002658 <__aeabi_dsub>
 8011a16:	e7d2      	b.n	80119be <rint+0x6e>
 8011a18:	2e33      	cmp	r6, #51	; 0x33
 8011a1a:	dd08      	ble.n	8011a2e <rint+0xde>
 8011a1c:	2380      	movs	r3, #128	; 0x80
 8011a1e:	00db      	lsls	r3, r3, #3
 8011a20:	429e      	cmp	r6, r3
 8011a22:	d1cc      	bne.n	80119be <rint+0x6e>
 8011a24:	0002      	movs	r2, r0
 8011a26:	000b      	movs	r3, r1
 8011a28:	f7ef fc3a 	bl	80012a0 <__aeabi_dadd>
 8011a2c:	e7c7      	b.n	80119be <rint+0x6e>
 8011a2e:	2601      	movs	r6, #1
 8011a30:	4d0a      	ldr	r5, [pc, #40]	; (8011a5c <rint+0x10c>)
 8011a32:	4276      	negs	r6, r6
 8011a34:	1952      	adds	r2, r2, r5
 8011a36:	40d6      	lsrs	r6, r2
 8011a38:	4206      	tst	r6, r0
 8011a3a:	d0c0      	beq.n	80119be <rint+0x6e>
 8011a3c:	0876      	lsrs	r6, r6, #1
 8011a3e:	4206      	tst	r6, r0
 8011a40:	d0d5      	beq.n	80119ee <rint+0x9e>
 8011a42:	2180      	movs	r1, #128	; 0x80
 8011a44:	05c9      	lsls	r1, r1, #23
 8011a46:	4111      	asrs	r1, r2
 8011a48:	43b3      	bics	r3, r6
 8011a4a:	430b      	orrs	r3, r1
 8011a4c:	e7cf      	b.n	80119ee <rint+0x9e>
 8011a4e:	46c0      	nop			; (mov r8, r8)
 8011a50:	fffffc01 	.word	0xfffffc01
 8011a54:	080126a8 	.word	0x080126a8
 8011a58:	000fffff 	.word	0x000fffff
 8011a5c:	fffffbed 	.word	0xfffffbed

08011a60 <scalbn>:
 8011a60:	004b      	lsls	r3, r1, #1
 8011a62:	b570      	push	{r4, r5, r6, lr}
 8011a64:	0d5b      	lsrs	r3, r3, #21
 8011a66:	0014      	movs	r4, r2
 8011a68:	000a      	movs	r2, r1
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d10d      	bne.n	8011a8a <scalbn+0x2a>
 8011a6e:	004b      	lsls	r3, r1, #1
 8011a70:	085b      	lsrs	r3, r3, #1
 8011a72:	4303      	orrs	r3, r0
 8011a74:	d010      	beq.n	8011a98 <scalbn+0x38>
 8011a76:	4b27      	ldr	r3, [pc, #156]	; (8011b14 <scalbn+0xb4>)
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f7f0 fb81 	bl	8002180 <__aeabi_dmul>
 8011a7e:	4b26      	ldr	r3, [pc, #152]	; (8011b18 <scalbn+0xb8>)
 8011a80:	429c      	cmp	r4, r3
 8011a82:	da0a      	bge.n	8011a9a <scalbn+0x3a>
 8011a84:	4a25      	ldr	r2, [pc, #148]	; (8011b1c <scalbn+0xbc>)
 8011a86:	4b26      	ldr	r3, [pc, #152]	; (8011b20 <scalbn+0xc0>)
 8011a88:	e019      	b.n	8011abe <scalbn+0x5e>
 8011a8a:	4d26      	ldr	r5, [pc, #152]	; (8011b24 <scalbn+0xc4>)
 8011a8c:	42ab      	cmp	r3, r5
 8011a8e:	d108      	bne.n	8011aa2 <scalbn+0x42>
 8011a90:	0002      	movs	r2, r0
 8011a92:	000b      	movs	r3, r1
 8011a94:	f7ef fc04 	bl	80012a0 <__aeabi_dadd>
 8011a98:	bd70      	pop	{r4, r5, r6, pc}
 8011a9a:	000a      	movs	r2, r1
 8011a9c:	004b      	lsls	r3, r1, #1
 8011a9e:	0d5b      	lsrs	r3, r3, #21
 8011aa0:	3b36      	subs	r3, #54	; 0x36
 8011aa2:	4d21      	ldr	r5, [pc, #132]	; (8011b28 <scalbn+0xc8>)
 8011aa4:	18e3      	adds	r3, r4, r3
 8011aa6:	42ab      	cmp	r3, r5
 8011aa8:	dd0c      	ble.n	8011ac4 <scalbn+0x64>
 8011aaa:	4c20      	ldr	r4, [pc, #128]	; (8011b2c <scalbn+0xcc>)
 8011aac:	4d20      	ldr	r5, [pc, #128]	; (8011b30 <scalbn+0xd0>)
 8011aae:	2900      	cmp	r1, #0
 8011ab0:	da01      	bge.n	8011ab6 <scalbn+0x56>
 8011ab2:	4c1e      	ldr	r4, [pc, #120]	; (8011b2c <scalbn+0xcc>)
 8011ab4:	4d1f      	ldr	r5, [pc, #124]	; (8011b34 <scalbn+0xd4>)
 8011ab6:	0020      	movs	r0, r4
 8011ab8:	0029      	movs	r1, r5
 8011aba:	4a1c      	ldr	r2, [pc, #112]	; (8011b2c <scalbn+0xcc>)
 8011abc:	4b1c      	ldr	r3, [pc, #112]	; (8011b30 <scalbn+0xd0>)
 8011abe:	f7f0 fb5f 	bl	8002180 <__aeabi_dmul>
 8011ac2:	e7e9      	b.n	8011a98 <scalbn+0x38>
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	dd05      	ble.n	8011ad4 <scalbn+0x74>
 8011ac8:	4c1b      	ldr	r4, [pc, #108]	; (8011b38 <scalbn+0xd8>)
 8011aca:	051b      	lsls	r3, r3, #20
 8011acc:	4022      	ands	r2, r4
 8011ace:	431a      	orrs	r2, r3
 8011ad0:	0011      	movs	r1, r2
 8011ad2:	e7e1      	b.n	8011a98 <scalbn+0x38>
 8011ad4:	001d      	movs	r5, r3
 8011ad6:	3535      	adds	r5, #53	; 0x35
 8011ad8:	da13      	bge.n	8011b02 <scalbn+0xa2>
 8011ada:	4a18      	ldr	r2, [pc, #96]	; (8011b3c <scalbn+0xdc>)
 8011adc:	0fcb      	lsrs	r3, r1, #31
 8011ade:	4294      	cmp	r4, r2
 8011ae0:	dd08      	ble.n	8011af4 <scalbn+0x94>
 8011ae2:	4812      	ldr	r0, [pc, #72]	; (8011b2c <scalbn+0xcc>)
 8011ae4:	4912      	ldr	r1, [pc, #72]	; (8011b30 <scalbn+0xd0>)
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d001      	beq.n	8011aee <scalbn+0x8e>
 8011aea:	4810      	ldr	r0, [pc, #64]	; (8011b2c <scalbn+0xcc>)
 8011aec:	4911      	ldr	r1, [pc, #68]	; (8011b34 <scalbn+0xd4>)
 8011aee:	4a0f      	ldr	r2, [pc, #60]	; (8011b2c <scalbn+0xcc>)
 8011af0:	4b0f      	ldr	r3, [pc, #60]	; (8011b30 <scalbn+0xd0>)
 8011af2:	e7e4      	b.n	8011abe <scalbn+0x5e>
 8011af4:	4809      	ldr	r0, [pc, #36]	; (8011b1c <scalbn+0xbc>)
 8011af6:	490a      	ldr	r1, [pc, #40]	; (8011b20 <scalbn+0xc0>)
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d0c3      	beq.n	8011a84 <scalbn+0x24>
 8011afc:	4807      	ldr	r0, [pc, #28]	; (8011b1c <scalbn+0xbc>)
 8011afe:	4910      	ldr	r1, [pc, #64]	; (8011b40 <scalbn+0xe0>)
 8011b00:	e7c0      	b.n	8011a84 <scalbn+0x24>
 8011b02:	4c0d      	ldr	r4, [pc, #52]	; (8011b38 <scalbn+0xd8>)
 8011b04:	3336      	adds	r3, #54	; 0x36
 8011b06:	4022      	ands	r2, r4
 8011b08:	051b      	lsls	r3, r3, #20
 8011b0a:	4313      	orrs	r3, r2
 8011b0c:	0019      	movs	r1, r3
 8011b0e:	2200      	movs	r2, #0
 8011b10:	4b0c      	ldr	r3, [pc, #48]	; (8011b44 <scalbn+0xe4>)
 8011b12:	e7d4      	b.n	8011abe <scalbn+0x5e>
 8011b14:	43500000 	.word	0x43500000
 8011b18:	ffff3cb0 	.word	0xffff3cb0
 8011b1c:	c2f8f359 	.word	0xc2f8f359
 8011b20:	01a56e1f 	.word	0x01a56e1f
 8011b24:	000007ff 	.word	0x000007ff
 8011b28:	000007fe 	.word	0x000007fe
 8011b2c:	8800759c 	.word	0x8800759c
 8011b30:	7e37e43c 	.word	0x7e37e43c
 8011b34:	fe37e43c 	.word	0xfe37e43c
 8011b38:	800fffff 	.word	0x800fffff
 8011b3c:	0000c350 	.word	0x0000c350
 8011b40:	81a56e1f 	.word	0x81a56e1f
 8011b44:	3c900000 	.word	0x3c900000

08011b48 <_init>:
 8011b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b4a:	46c0      	nop			; (mov r8, r8)
 8011b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b4e:	bc08      	pop	{r3}
 8011b50:	469e      	mov	lr, r3
 8011b52:	4770      	bx	lr

08011b54 <_fini>:
 8011b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b56:	46c0      	nop			; (mov r8, r8)
 8011b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b5a:	bc08      	pop	{r3}
 8011b5c:	469e      	mov	lr, r3
 8011b5e:	4770      	bx	lr
